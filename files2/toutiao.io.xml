<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>9c294eebdc0a8448f1ee4625327622b5</guid>
<title>我认为最优美的数据结构</title>
<link>https://toutiao.io/k/nkx9rki</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Uion-Find 算法&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在计算机科学中，&lt;strong&gt;并查集&lt;/strong&gt;（英文：Disjoint-set data structure，直译为不交集数据结构）是一种数据结构，用于处理一些不交集（Disjoint sets，一系列没有重复元素的集合）的合并及查询问题。并查集支持如下操作：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;查询：查询某个元素属于哪个集合，通常是返回集合内的一个“代表元素”。这个操作是为了判断两个元素是否在同一个集合之中。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;合并：将两个集合合并为一个。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;em&gt;添加&lt;/em&gt;：添加一个新集合，其中有一个新元素。添加操作不如查询和合并操作重要，常常被忽略。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于支持查询和合并这两种操作，并查集在英文中也被称为联合-查找数据结构（Union-find data structure）或者合并-查找集合（Merge-find set）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并查集是用于计算最小生成树的&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4NDE4MzY2MA==&amp;amp;mid=2647520862&amp;amp;idx=1&amp;amp;sn=0bfa987a59d36130b67531eeee63b97e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;迪杰斯特拉算法&lt;/a&gt;中的关键。由于最小生成树在网络路由等场景下十分重要，并查集也得到了广泛的引用。此外，并查集在符号计算，寄存器分配等方面也有应用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;引论&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设计一个算法大致分为六个步骤：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;定义问题（define the problem)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设计一个算法来解决问题（Find an algorithm to solve it）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断算法是否足够高效？（Fast Enough?)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果不够高效，思考为什么，并进行优化。（If not，figure out why ?）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;寻找一种方式来处理问题 (Find a way to address the problem)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;迭代设计，直到满足条件 (Iterate until satisfied.)&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们从一个基本问题：网络连通性（Network connectivity）出发，该问题可以抽象为：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一组对象。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;UNION 命令：连接两个对象。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;FIND 查询：是否有路径将一个对象连接到另一个对象？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6182121971595655&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZwyGibO9apPOorIVI7gAEmBiaEgIDz6OwAMmvNCAfMs1QnEhL7fSMzqDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1197&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并查集的对象可以是下面列出的任何类型：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;网络中的计算机&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;互联网上的 web 页面&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;计算机芯片中的晶体管。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;变量名称别名。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数码照片中的像素。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;复合系统中的金属点位。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.46256983240223465&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZ8LMnzza9nlJQq8O7bDDicpEjXOmiaBr7Ok42FTMZiauwDiboQaibJ6r8k3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;895&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图 1 连通图&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在编程的时候，为了方便起见，我们对这些对象从 0 到 n-1 进行编号，从而用一个整形数字表示对象。隐藏与 Union-find 不相关的细节；可以使用整数快速获取与对象相关的信息（数组的下标）；可以使用符号表对对象进行转化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简化有助于我们理解连通性的本质。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图 1 所示，假设我们有编号为 &lt;code&gt;[0,1,2,3,4,5,6,7,8,9]&lt;/code&gt; 的 10 个对象，对象的不相交集合为 : &lt;code&gt;{{0},{1},{2,3,9},{5,6},{7},{4,8}}&lt;/code&gt; 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;Find&lt;/code&gt;&lt;/strong&gt; 查询：2 和 9 是否在一个集合当中呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：&lt;code&gt;{{0},{1},{&lt;/code&gt;&lt;code&gt;&lt;span&gt;2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;,3,&lt;/code&gt;&lt;code&gt;&lt;span&gt;9&lt;/span&gt;&lt;/code&gt;&lt;code&gt;},{5,6},{7},{4,8}}&lt;/code&gt; 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;Union&lt;/code&gt;&lt;/strong&gt; 命令：合并包含 3 和 8 的集合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：&lt;code&gt;{{0},{1},{2,&lt;/code&gt;&lt;code&gt;&lt;span&gt;3&lt;/span&gt;&lt;/code&gt;&lt;code&gt;,4,&lt;/code&gt;&lt;code&gt;&lt;span&gt;8&lt;/span&gt;&lt;/code&gt;&lt;code&gt;,9},{5,6},{7}}&lt;/code&gt; 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;连接组件(Connected Component)：一组相互连接的顶点.&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;每一次 Union 命令会将组（连通分量）的数量减少 1 个。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5527210884353742&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZjSWyiaqrwJBTPWhaUksaia8aKFG26QpVB3OL69k3wvlL0JqWv53Rteeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1176&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图所示，初始时，每一个顶点为一个组，我们执行了 7 次 Union 操作后，变成了 3 个组。其中 &lt;code&gt;{2 9}&lt;/code&gt; 不算做一次 Union 操作，是因为在 Union 之前，我们使用 Find 查找命令，会发现 &lt;code&gt;{2 9}&lt;/code&gt; 此时已经位于同一个组 &lt;code&gt;{2 3 4 5 6 9}&lt;/code&gt; 当中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以网络连通性问题为例，如下图所示，&lt;strong&gt;&lt;code&gt;find(u,v)&lt;/code&gt;&lt;/strong&gt; 可以判断顶点 u 和 v 是否联通？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6612765957446809&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZ3qkA6DhUgDic0omibvrrz8GOicjgAxksOZdYCnQqN39niayLU4stlxSmNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1175&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图所示，图中共包含 63 个组，其中对象 u 和 对象 v 在同一个集合当中，我们可以找到一条从对象 u 到对象 v 的路径（红色路线）但是我们并不关心这条路劲本身，只关心他们是否联通：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6697952218430034&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZgCfdeOQ3ib69noV0oIOumo0DJNrI1wIVF4nZpwO4kWXvkRqcOg7D3zw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1172&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的问题看似很复杂，但也很容易抽象为 Union-Find 模型：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;对象。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对象的不相交集（Disjoint Set）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Find 查询：两个对象是否在同一集合中？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Union 命令：将包含两个对象的集合替换为它们的并集。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在目标就是为 Union-Find 设计一个高效的数据结构：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Find 查询和 Union 命令可以混合使用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Find 和 Union 的操作数量 M 可能很大。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对象数量 N 可能很大。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Quick-Find&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设计一个大小为 N 的整型数组 &lt;code&gt;id[]&lt;/code&gt;，如果 p 和 q 有相同的 &lt;code&gt;id&lt;/code&gt; ，即 &lt;code&gt;id[p] = id[q]&lt;/code&gt;，则认为 p 和 q 是联通的，位于同一个集合中，如下图所示，5 和 6 是联通的，2、3、4 和 9 是联通的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.30168776371308015&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZq96y4r5sPnicpxIfXO4niaS4KVMkvBYBax5PANbKLhnq0X4PvMCCGXSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;948&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Find(p,q)&lt;/code&gt; 查询操作只需要判断 p 和 q 是否具有相同的 id，即 &lt;code&gt;id[p]&lt;/code&gt; 是否等于 &lt;code&gt;id[q]&lt;/code&gt; ；比如查询 &lt;code&gt;Find(2,9)&lt;/code&gt;，&lt;code&gt;id[2] = id[9] = 9&lt;/code&gt; ，则 2 和 9 是联通的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Union(p,q)&lt;/code&gt; 操作：合并包含 p 和 q 的所有组，将输入中所有 id 为 &lt;code&gt;id[p]&lt;/code&gt; 的对象 id 修改为 &lt;code&gt;id[q]&lt;/code&gt;。比如 &lt;code&gt;Union(3,6)&lt;/code&gt; ，需要将 id 为 &lt;code&gt;id[3] = 9&lt;/code&gt; 的所有对象 &lt;code&gt;{2,3,4,9}&lt;/code&gt; 的 id 均修改为 &lt;code&gt;id[6] = 6&lt;/code&gt; ，如下图所示。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3587866108786611&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZC3J7mWVspRyIWprr8cXLZl2ecibByOuh2EceqseUmOaPyn2tibsEfDcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;956&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Find(u,v)&lt;/code&gt; 的时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(1)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2041 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1652, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; ，&lt;code&gt;Union(p,q)&lt;/code&gt; 的时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(n)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2141 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1752, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 量级 ，每一次 &lt;code&gt;Union&lt;/code&gt; 操作需要更新很多元素 &lt;code&gt;i&lt;/code&gt; 的 index &lt;code&gt;id[i]&lt;/code&gt; 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下图为例，我们依次执行 &lt;code&gt;Union(3,4)&lt;/code&gt;， &lt;code&gt;Union(4,9)&lt;/code&gt;， &lt;code&gt;Union(8,0)&lt;/code&gt;， &lt;code&gt;Union(2,3)&lt;/code&gt;，......，&lt;code&gt;Union(6,1)&lt;/code&gt; 操作，整形数组 &lt;code&gt;id[]&lt;/code&gt; 中元素的变化过程。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.67734375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZ8lglIgFaJfXZch7fkgrsgp0SMVnoKwWRUOkc5ggS2OeBVJKXVOoncg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;实现&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;QuickFind&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] id;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;QuickFind&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; N)&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        id = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[N];&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; N; i++){&lt;br/&gt;            id[i] = i;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;find&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; p, &lt;span&gt;int&lt;/span&gt; q)&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; id[p] == id[q];&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;unite&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; p, &lt;span&gt;int&lt;/span&gt; q)&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; pid = id[p];&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; id.length; i++) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (id[i] == pid) {&lt;br/&gt;                id[i] = id[q];&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;复杂度分析&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Quick-find 算法的 &lt;code&gt;find&lt;/code&gt; 函数非常简单，只是判断 &lt;code&gt;id[p] == id[q]&lt;/code&gt; 并返回，时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(1)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2041 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1652, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; ，而 &lt;code&gt;Union(u,v)&lt;/code&gt; 函数因为无法确定谁的 ID 与 &lt;code&gt;id[q]&lt;/code&gt; 相同，所以每次都要把整个数组遍历一遍，如果一共有 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;N&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 888 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 个对象，则时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2429 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。综合一下，表示如果 &lt;code&gt;Union&lt;/code&gt; 操作执行 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;M&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 1051 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 次，总共 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;N&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 888 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 个对象（数组大小），则时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(MN)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 3480 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2203, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3091, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 量级，。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为这个算法 &lt;code&gt;Find&lt;/code&gt; 操作很快，而 &lt;code&gt;Union&lt;/code&gt; 操作却很慢，所以将其称为 &lt;strong&gt;Quick-Find&lt;/strong&gt; 算法。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Quick-Union&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回忆 Quick-Find 中 union 函数，就像是暴力法，遍历所有对象的 &lt;code&gt;id[]&lt;/code&gt; ，然后把有着相同 &lt;code&gt;id&lt;/code&gt; 的数全部改掉， Quick-Union 算法则是引入 “树” 的概念来优化 union 函数，我们把每一个数的 &lt;code&gt;id&lt;/code&gt; 看做是它的父结点。比如说，&lt;code&gt;id[3] = 4&lt;/code&gt;，就表示 3 的父结点为 4。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与 Quick-Find 算法使用一样的数据结构，但是 &lt;code&gt;id[]&lt;/code&gt; 数组具有不同的含义：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;大小为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;N&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 888 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 的整型数组 &lt;code&gt;id[]&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;解释：&lt;code&gt;id[i]&lt;/code&gt; 表示  &lt;code&gt;i&lt;/code&gt; 的父结点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;i&lt;/code&gt; 的根结点为 &lt;code&gt;id[id[id[...id[i]...]]]&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4892578125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZVMTYcPj1YA9C2EjJ5UquVoA7kHKG8xdsH7Pu7jichbAOicPVLyYMbdpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图所示，&lt;code&gt;id[2] = 9&lt;/code&gt; 就表示 2 的父结点为 9；3 的根节点为 9 (3 的父结点为 4，4 的父结点为 9，9的父结点还是 9，也就是根结点了)，5 的根结点为 6 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么 &lt;code&gt;Find(p,q)&lt;/code&gt; 操作就变成了判断 &lt;code&gt;p&lt;/code&gt; 和 &lt;code&gt;q&lt;/code&gt; 的根结点是否相同，比如 &lt;code&gt;Find(2,3)&lt;/code&gt; ，2 和 3 的根结点 9 相同，所以 2 和 3 是联通的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4695752009184845&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZ9MQ1iaA9PxwqGd0aO45xlo13ytMtkRRZduOkDfSt6xKynK4iaia1f2wbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;871&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Union(p,q)&lt;/code&gt; 操作就是将 &lt;code&gt;q&lt;/code&gt; 根结点的 id 设置为 &lt;code&gt;p&lt;/code&gt; 的根结点的 id。如上图所示，&lt;strong&gt;&lt;code&gt;Union(3,5)&lt;/code&gt;&lt;/strong&gt; 就是将 &lt;strong&gt;5&lt;/strong&gt; 的根结点的 &lt;strong&gt;6&lt;/strong&gt; 设置为 &lt;strong&gt;3&lt;/strong&gt; 的根结点 &lt;strong&gt;9&lt;/strong&gt; ，即 &lt;strong&gt;&lt;code&gt;id[5] = 9&lt;/code&gt;&lt;/strong&gt; ，仅更新一个元素的 &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于原数组 &lt;strong&gt;&lt;code&gt;i = {0,1,2,3,4,5,6,7,8,9}&lt;/code&gt;&lt;/strong&gt; 及 id 数组 &lt;strong&gt;&lt;code&gt;id[10] = {0,1,2,3,4,5,6,7,8,9}&lt;/code&gt;&lt;/strong&gt; ，依次执行 &lt;code&gt;Union(3,4)&lt;/code&gt; ，&lt;code&gt;Union(4,9)&lt;/code&gt; ，&lt;code&gt;Union(8,0)&lt;/code&gt; ，&lt;code&gt;Union(2,3)&lt;/code&gt; ，&lt;code&gt;Union(5,6)&lt;/code&gt; ，&lt;code&gt;Union(5,9)&lt;/code&gt; ，&lt;code&gt;Union(7,3)&lt;/code&gt; ，&lt;code&gt;Union(4,8)&lt;/code&gt; ，&lt;code&gt;Union(6,2)&lt;/code&gt; 的过程中如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;4.618595825426945&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZ3nzZy7rVkNBibqTOx6WzgcI8kxmP8sP1o8yOCNav2wfrOpkb3SfnEFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;527&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;实现代码&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;QuickUnion&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] id;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;QuickUnion&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; N)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        id = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[N];&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; N; i++) id[i] = i;&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;root&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; (i != id[i]) i = id[i];&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; i;&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;find&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; p, &lt;span&gt;int&lt;/span&gt; q)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;       &lt;span&gt;return&lt;/span&gt; root(p) == root(q);&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;unite&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; p, &lt;span&gt;int&lt;/span&gt; q)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; i = root(p);&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; j = root(q);&lt;br/&gt;        id[i] = j;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;复杂度分析&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于 &lt;code&gt;Find(p,q)&lt;/code&gt; 操作，只需要找到 p 的根结点和 q 的根结点，检查它们是否相等。合并操作就是找到两个根节点并将第一个根节点的 id 记录值设为第二个根节点 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与 Quick-Find 算法相比， Quick-Union 算法对于问题规模较大时是更加高效。不幸的是，Quick-Union 算法快了一些但是依然太慢了，相对 Quick-Find 的慢，它是另一种慢。有些情况下它可以很快，而有些情况下它还是太慢了。但 Quick-Union 算法依然是用来求解动态连通性问题的一个快速而优雅的设计。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4056029232643118&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZ5UfFfCuicEbG9xYhLxqg4DWS0Xsnoia3FNOXtoue41D7SS85tfRLyorg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;821&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Quick-Union 算法的缺点在于树可能太高了。这意味着查找操作的代价太大了。你可能需要回溯一棵瘦长的树（斜树），每个对象只是指向下一个节点，那么对叶子节点执行一次查找操作，需要回溯整棵树，只进行查找操作就需要花费 N 次数组访问，如果操作次数很多的话这就太慢了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Find&lt;/code&gt; 操作：最好时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(1)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2041 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1652, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; ，最坏为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(n)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2141 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1752, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; ，平均 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(\log n)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 3585.7 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z&quot;/&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z&quot; transform=&quot;translate(278, 0)&quot;/&gt;&lt;path data-c=&quot;67&quot; d=&quot;M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z&quot; transform=&quot;translate(778, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2596.7, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3196.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Union&lt;/code&gt; 操作：最好时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(1)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2041 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1652, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; ，最坏为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(n)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2141 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1752, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; ，平均&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(\log n)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 3585.7 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z&quot;/&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z&quot; transform=&quot;translate(278, 0)&quot;/&gt;&lt;path data-c=&quot;67&quot; d=&quot;M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z&quot; transform=&quot;translate(778, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2596.7, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3196.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当进行 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;M&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 1051 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 次 Union 操作，那么平均时间复杂度就是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(M\log N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 5091.3 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2369.7, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z&quot;/&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z&quot; transform=&quot;translate(278, 0)&quot;/&gt;&lt;path data-c=&quot;67&quot; d=&quot;M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z&quot; transform=&quot;translate(778, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3814.3, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4702.3, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Weighted Quick-Union&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好，我们已经看了快速合并和快速查找算法，两种算法都很容易实现，但是不支持巨大的动态连通性问题。那么，我们该怎么改进呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一种非常有效的改进方法，叫做加权。也许我们在学习前面两个算法的时候你已经想到了。这个改进的想法是在实现 Quick-Union 算法的时候执行一些操作避免得到一颗很高的树。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6036036036036037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZt922K0SlP7sGSA5kdTYW95GaZicF3GlabSibDlazj9gNIcJIwSEnswaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;999&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一棵大树和一棵小树合并，避免将大树放在小树的下面，就可以一定程度上避免更高的树，这个加权操作实现起来也相对容易。我们可以跟踪每棵树中对象的个数，然后我们通过确保将小树的根节点作为大树的根节点的子节点以维持平衡，所以，我们避免将大树放在小树下面的情况。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6904276985743381&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZx3I3DyuXUBnHuSicDxK9gjn0EDaSt7NTU6fn5eNX8UKia8TTvCOpkpiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;982&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图所示，以 &lt;strong&gt;&lt;code&gt;Union(5,3)&lt;/code&gt;&lt;/strong&gt; 为例，5 的根结点为 6，3 的根结点为 9 ：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Quick-Union：以 9 为根结点树将作为 6 的子树&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Weighted Quick-Union：以 6 为根结点的树将作为 9 的子树。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看一下 Weighted Quick-Union 操作的例子：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6714801444043321&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZwKVp7kUYkyGPlsre2ljCWibJb8JQ7tePMmwP2r7iaFtaeCl0DTMfiasaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1108&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到 Weighted Quick-Union 所生成的树很 “胖”，刚好满足我们的需求。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;实现代码&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Weighted Quick-Union 的实现基本和 Quick-Union 一样，我们只需要维护一个数组 &lt;code&gt;sz[]&lt;/code&gt; ，用来保存以 i 为根的树中的对象个数，比如 &lt;code&gt;sz[0] = 1&lt;/code&gt; ，就表示以 0 为根的树包含 1 个对象。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WeightedQuickUnion&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] id;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] sz;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;WeightedQuickUnion&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; N)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        id = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[N];&lt;br/&gt;        sz = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[N];&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; N; i++) {&lt;br/&gt;            id[i] = i;&lt;br/&gt;            sz[i] = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;// 初始时，每一个结点为一棵树，sz[i] = 1&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;root&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; (i != id[i]) i = id[i];&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; i;&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;find&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; p, &lt;span&gt;int&lt;/span&gt; q)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;       &lt;span&gt;return&lt;/span&gt; root(p) == root(q);&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;unite&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; p, &lt;span&gt;int&lt;/span&gt; q)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; i = root(p);&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; j = root(q);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (sz[i] &amp;lt; sz[j]) {&lt;br/&gt;            id[i] = j;&lt;br/&gt;            sz[j] += sz[i];&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            id[j] = i;&lt;br/&gt;            sz[i] += sz[j];&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;复杂度分析&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于加权 Quick-Union 算法处理 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;N&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 888 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 个对象和 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;M&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 1051 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 条连接时最多访问 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;cM\log N&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -694 3983.3 900&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;63&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(433, 0)&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1650.7, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z&quot;/&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z&quot; transform=&quot;translate(278, 0)&quot;/&gt;&lt;path data-c=&quot;67&quot; d=&quot;M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z&quot; transform=&quot;translate(778, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3095.3, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 次，其中 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;c&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -442 433 453&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;63&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 为常数，即时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(M\log N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 5091.3 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2369.7, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z&quot;/&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z&quot; transform=&quot;translate(278, 0)&quot;/&gt;&lt;path data-c=&quot;67&quot; d=&quot;M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z&quot; transform=&quot;translate(778, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3814.3, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4702.3, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 量级。与 Quick-Find 算法（以及某些情况下的 Quick-Union 算法）的时间复杂度 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(MN)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 3480 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2203, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3091, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 形成鲜明对比。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Find&lt;/code&gt; 操作：&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(\log n)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 3585.7 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z&quot;/&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z&quot; transform=&quot;translate(278, 0)&quot;/&gt;&lt;path data-c=&quot;67&quot; d=&quot;M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z&quot; transform=&quot;translate(778, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2596.7, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3196.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Union&lt;/code&gt; 操作：&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(\log n)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 3585.7 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z&quot;/&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z&quot; transform=&quot;translate(278, 0)&quot;/&gt;&lt;path data-c=&quot;67&quot; d=&quot;M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z&quot; transform=&quot;translate(778, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2596.7, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3196.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Union-Find&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Union-Find 算法是在 Weighted Quick-Union 的基础之上进一步优化，即路径压缩的 Weighted Quick-Union 算法。Weighted Quick-Union 算法通过对 Union 操作进行加权保证 Quick-Union 算法可能出现的 “瘦高” 情况发生。而 Union-Find 算法是通过路径压缩进一步将 Weighted Quick-Union 算法的树高降低。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓 &lt;strong&gt;路径压缩&lt;/strong&gt; ，就是在计算结点 &lt;strong&gt;&lt;code&gt;i&lt;/code&gt;&lt;/strong&gt; 的根之后，将回溯路径上的每个被检查结点的 id 设置为**&lt;code&gt;root(i)&lt;/code&gt;**。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图所示，&lt;code&gt;root(9)=0&lt;/code&gt; ，从结点 &lt;strong&gt;&lt;code&gt;9&lt;/code&gt;&lt;/strong&gt; 到根结点 &lt;strong&gt;&lt;code&gt;0&lt;/code&gt;&lt;/strong&gt; 的路径为 &lt;strong&gt;&lt;code&gt;9→6→3→1→0&lt;/code&gt;&lt;/strong&gt; ，则将 &lt;strong&gt;&lt;code&gt;6,3,1&lt;/code&gt;&lt;/strong&gt; 的根结点设置为 &lt;strong&gt;&lt;code&gt;0&lt;/code&gt;&lt;/strong&gt; 。这样一来，树的高度一下子就变矮了，而且对于 &lt;strong&gt;&lt;code&gt;Union&lt;/code&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;code&gt;Find&lt;/code&gt;&lt;/strong&gt; 操作没有任何影响。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.52265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZ2Qic69f7PESraficw41Oia0cxS88mFWZnTyjKqzZgjSWk5yGbpibleqicAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;路径压缩：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;标准实现：在 &lt;code&gt;root()&lt;/code&gt; 中添加第二个循环，将每个被遍历到的结点的的 id 设置为根结点。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;root&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;int&lt;/span&gt;  root = i;&lt;br/&gt;    &lt;span&gt;// 找到结点 i 的根结点 root&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;while&lt;/span&gt; (root !=  id[root]) root = id[root];&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;// 每个被遍历到的结点的的 id 设置为根结点 root&lt;/span&gt;&lt;br/&gt; &lt;span&gt;while&lt;/span&gt;  (i != root) {&lt;br/&gt;  &lt;span&gt;int&lt;/span&gt; tmp = id[i];&lt;br/&gt;        id[i] = root;&lt;br/&gt;        i = tmp;&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; root;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;简化的实现：使路径中的所有其他结点指向其祖父结点，即 &lt;code&gt;id[i] = id[id[i]]&lt;/code&gt; 。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;root&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;while&lt;/span&gt; (i != id[i]) {&lt;br/&gt;        id[i] = id[id[i]]; &lt;span&gt;// 简化的方法&lt;/span&gt;&lt;br/&gt;        i = id[i];&lt;br/&gt;    }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; i;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实践中，我们没有理由不选择简化的方式，简化的方式同样可以使树几乎完全平坦，如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6850202429149798&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rSmDLkNsngSoR6RltbplHxNpE7sg06IZKc46M9eynMorOZyRPKEuT46YERraPO7yezUEZcZ2QwlcDLofP2lOJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1235&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;复杂度分析&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;定理：从一个空数据结构开始，对 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;N&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 888 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 个对象执行 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;M&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 1051 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 次 &lt;code&gt;Union&lt;/code&gt; 和 &lt;code&gt;Find&lt;/code&gt; 操作的任何序列都需要 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(N+M \lg*N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 7201.8 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2262.2, 0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3262.4, 0)&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4480.1, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z&quot;/&gt;&lt;path data-c=&quot;67&quot; d=&quot;M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z&quot; transform=&quot;translate(278, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5424.8, 0)&quot;&gt;&lt;path data-c=&quot;2217&quot; d=&quot;M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5924.8, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6812.8, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 时间。时间复杂度的具体证明非常困难，但这并不妨碍算法的简单性！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;路径压缩的加权 Quick-Union （&lt;strong&gt;W&lt;/strong&gt;eigthed &lt;strong&gt;Q&lt;/strong&gt;uick-&lt;strong&gt;U&lt;/strong&gt;nion with &lt;strong&gt;P&lt;/strong&gt;ath &lt;strong&gt;C&lt;/strong&gt;ompression）算法虽是最优算法，但是并非所有操作都能在常数时间内完成。也就是，WQUPC 算法的每个操作在最坏情况下（即均摊后）都不是常数级别的，而且不存在其他算法能够保证 Union-Find 算法的所有操作在均摊后都是常数级别。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;各类算法时间复杂度对比&lt;span/&gt;&lt;/h3&gt;&lt;table data-tool=&quot;mdnice编辑器&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;算法&lt;/th&gt;&lt;th&gt;Union&lt;/th&gt;&lt;th&gt;Find&lt;/th&gt;&lt;th&gt;最坏时间复杂度&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Quick-Find&lt;/td&gt;&lt;td&gt;N&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;MN&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Quick-Union&lt;/td&gt;&lt;td&gt;tree Height&lt;/td&gt;&lt;td&gt;tree Height&lt;/td&gt;&lt;td&gt;MN&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Weighted Quick-Union&lt;/td&gt;&lt;td&gt;lg N&lt;/td&gt;&lt;td&gt;lg N&lt;/td&gt;&lt;td&gt;N+MlogN&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;WQUPC&lt;/td&gt;&lt;td&gt;Very near to 1 (amortized)&lt;/td&gt;&lt;td&gt;Very near to 1 (amortized)&lt;/td&gt;&lt;td&gt;(N+M)logN&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于大规模的数据，比如包含 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;10^9&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -864 1403.6 886&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1000, 393.1) scale(0.707)&quot;&gt;&lt;path data-c=&quot;39&quot; d=&quot;M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 个顶点，&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;10^{10}&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -864 1757.1 886&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(1000, 393.1) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 条边的图，WQUPC 可以将时间从 3000 年降低到 1 分钟之内就可以处理完，而这是超级计算机也无法匹敌的。对于同一问题，使用一部手机运行的 WQUPC 轻松击败在超级计算机 上运行的Quick-Find 算法，这也许就是算法的魅力。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;并查集的应用&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;网络连通性问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;渗滤&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图像处理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最近公共祖先。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有限状态自动机的等价性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Hinley-Milner 的多态类型推断。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kruskal 的最小生成树算法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;游戏(围棋、十六进制)。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在 Fortran 中的编译语句的等价性问题&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f254a75849d05d7d6ea28fdd8a2c6f1f</guid>
<title>有了 CopyOnWrite 为何又要有 ReadWriteLock？</title>
<link>https://toutiao.io/k/cu1u6b9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;span&gt;点击上方“&lt;span&gt;Java金融&lt;/span&gt;”，选择“&lt;/span&gt;&lt;span&gt;设为星标”&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;后台回复&quot;888&lt;/span&gt;&lt;span&gt;&quot;获取bat面试题集&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIyMjQwMTgyNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/qu3ItokgsApF99T8iaeM8zcTTMB6stsfYOGjWJ9MkQlr5zJ2gDIOFInycWpDDZjNk0mft0UNxytqBsE3qQicrlVw/0?wx_fmt=png&quot; data-nickname=&quot;java金融&quot; data-alias=&quot;java4299&quot; data-signature=&quot;关注【java金融】后台回复「666」 领取一份面试资料《Java面试BATJ通关手册》，覆盖了Java核心技术、JVM、Java并发、SSM、微服务、数据库、数据结构简历等等。&quot;/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;引言&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前文我们有介绍&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjQwMTgyNA==&amp;amp;mid=2247485069&amp;amp;idx=1&amp;amp;sn=77d5c2d227eb3b1a746abb714f505df0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;《看了CopyOnWriteArrayList后自己实现了一个CopyOnWriteHashMap》&lt;/a&gt; 关于&lt;code&gt;CopyOnWrite&lt;/code&gt;容器的，但是它也有一些缺点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;内存占用问题&lt;/strong&gt;：因为&lt;code&gt;CopyOnWrite&lt;/code&gt;的写时复制机制每次进行写操作的时候都会有两个数组对象的内存，如果这个数组对象占用的内存较大的话，如果频繁的进行写入就会造成频繁的&lt;code&gt;Yong GC&lt;/code&gt;和&lt;code&gt;Full GC&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;数据一致性问题&lt;/strong&gt;：&lt;code&gt;CopyOnWrite&lt;/code&gt;容器只能保证数据的最终一致性，不能保证数据的实时一致性。读操作的线程可能不会立即读取到新修改的数据，因为修改操作发生在副本上。但最终修改操作会完成并更新容器所以这是最终一致性。当时有说到解决这两个缺点我们可以使用&lt;code&gt;Collections.synchronizedList()&lt;/code&gt;来替代，找个无非就是对list的增删改查方法都加了synchronized实现。我们知道&lt;code&gt;synchronized&lt;/code&gt;其实是一个独占锁 （排他锁），如果不知道什么是独占锁的可以看看这个文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjQwMTgyNA==&amp;amp;mid=2247483785&amp;amp;idx=1&amp;amp;sn=ba5dc8a598ea362d3ee0a5bad9666feb&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;《史上最全 Java 中各种锁的介绍》&lt;/a&gt; 里面基本上把java里面的锁都介绍完了。但是这样的话就会存在一个性能问题，如果对于读多写少的场景，每次读也要去获取锁，读完了之后再释放锁，这样就造成了每个读的请求都要进行获取锁，但是读的话并不会引起数据不安全，这样就会造成一个性能瓶颈。为了解决这个问题，就又出现了一种新的锁，&lt;strong&gt;读写锁&lt;/strong&gt;(&lt;code&gt;ReadWriteLock&lt;/code&gt;)。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;什么是读写锁&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据名字我们也可以猜个大概，就是有两把锁，分别是读锁和写锁。读锁在同一时刻可以允许多个读线程获取，但是在写线程访问的时候，所有的读线程和其他写线程都会被阻塞。写锁同一时刻只能有一个写线程获取成功，其他都会被阻塞。读写锁实际维护了两把锁，一个读锁和一个写锁，通过读锁和写锁进行区分，在读多写少的情况下并发性比独占锁有了很大的提升。在java里面对读写锁的实现就是&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;，它有以下特性：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;★&lt;/span&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;公平性选择：支持非公平性（默认）和公平的锁获取方式，吞吐量还是非公平优于公平；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重入性：支持重入，读锁获取后能再次获取，写锁获取之后能够再次获取写锁，同时也能够获取读锁；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;锁降级：遵循获取写锁，获取读锁再释放写锁的次序，写锁能够降级成为读锁&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;ReentrantReadWriteLock 的使用&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先从官网来个事例https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html，看看它是如何使用的&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RWDictionary&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Map&amp;lt;String, Data&amp;gt; m = &lt;span&gt;new&lt;/span&gt; TreeMap&amp;lt;String, Data&amp;gt;();&lt;br/&gt;   &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ReentrantReadWriteLock rwl = &lt;span&gt;new&lt;/span&gt; ReentrantReadWriteLock();&lt;br/&gt;   &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Lock r = rwl.readLock();&lt;br/&gt;   &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Lock w = rwl.writeLock();&lt;br/&gt;&lt;br/&gt;   &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Data &lt;span&gt;get&lt;/span&gt;&lt;span&gt;(String key)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;     r.lock();&lt;br/&gt;     &lt;span&gt;try&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; m.get(key); }&lt;br/&gt;     &lt;span&gt;finally&lt;/span&gt; { r.unlock(); }&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;public&lt;/span&gt; String[] allKeys() {&lt;br/&gt;     r.lock();&lt;br/&gt;     &lt;span&gt;try&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; m.keySet().toArray(); }&lt;br/&gt;     &lt;span&gt;finally&lt;/span&gt; { r.unlock(); }&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Data &lt;span&gt;put&lt;/span&gt;&lt;span&gt;(String key, Data value)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;     w.lock();&lt;br/&gt;     &lt;span&gt;try&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; m.put(key, value); }&lt;br/&gt;     &lt;span&gt;finally&lt;/span&gt; { w.unlock(); }&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;clear&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;     w.lock();&lt;br/&gt;     &lt;span&gt;try&lt;/span&gt; { m.clear(); }&lt;br/&gt;     &lt;span&gt;finally&lt;/span&gt; { w.unlock(); }&lt;br/&gt;   }&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个使用起来还是非常简单明了的，跟&lt;code&gt;ReentrantLock&lt;/code&gt;的用法基本一致，写的时候获取写锁，写完了释放写锁，读的时候获取读锁，读完了就释放读写。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;读写锁的实现分析&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道&lt;code&gt;ReentrantLock&lt;/code&gt;是通过&lt;code&gt;state&lt;/code&gt;来控制锁的状态，以及前面所介绍的&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjQwMTgyNA==&amp;amp;mid=2247485169&amp;amp;idx=1&amp;amp;sn=7de6cade492f7c82eecc5dcc3a59ce8d&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;《Java高并发编程基础三大利器之Semaphore》&lt;/a&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjQwMTgyNA==&amp;amp;mid=2247485179&amp;amp;idx=1&amp;amp;sn=d58076243258f7c1f2eb441813560145&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;《Java高并发编程基础三大利器之CountDownLatch》&lt;/a&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjQwMTgyNA==&amp;amp;mid=2247485191&amp;amp;idx=1&amp;amp;sn=cf31ee5350beae35938332c7c8c1ffb0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;《Java高并发编程基础三大利器之CyclicBarrier》&lt;/a&gt; 都是通过&lt;code&gt;state&lt;/code&gt;来进行实现的那ReentrantReadWriteLock毋庸置疑肯定也是通过&lt;code&gt;AQS&lt;/code&gt;的&lt;code&gt;state&lt;/code&gt;来实现的，不过&lt;code&gt;state&lt;/code&gt;是一个&lt;code&gt;int&lt;/code&gt;值它是如何来读锁和写锁的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;读写锁状态的实现分析&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们有看过线程池的源码，我们知道线程池的状态和线程数是通过一个&lt;code&gt;int&lt;/code&gt;类型原子变量（高&lt;code&gt;3&lt;/code&gt;位保存运行状态，低&lt;code&gt;29&lt;/code&gt;位保存线程数）来控制的。同样的&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;也是通过一个&lt;code&gt;state&lt;/code&gt;的高&lt;code&gt;16&lt;/code&gt;位和低&lt;code&gt;16&lt;/code&gt;位来分别控制读的状态和写状态。&lt;img data-ratio=&quot;0.5390243902439025&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qu3ItokgsArA6TBjnVGcJpXfkO2uXL1Pg1vZKLPZV2skQoicaadftiakQvoY2eXbrnGhxcDUWBgnDCicnptBq2uTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1640&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们就来看看它是如何通过一个字段来实现读写分离的,&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; SHARED_SHIFT   = &lt;span&gt;16&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; SHARED_UNIT    = (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; SHARED_SHIFT);&lt;br/&gt;        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAX_COUNT      = (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; SHARED_SHIFT) - &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; EXCLUSIVE_MASK = (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; SHARED_SHIFT) - &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;/** Returns the number of shared holds represented in count  */&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;sharedCount&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; c)&lt;/span&gt;    &lt;/span&gt;{ &lt;span&gt;return&lt;/span&gt; c &amp;gt;&amp;gt;&amp;gt; SHARED_SHIFT; }&lt;br/&gt;        &lt;span&gt;/** Returns the number of exclusive holds represented in count  */&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;exclusiveCount&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; c)&lt;/span&gt; &lt;/span&gt;{ &lt;span&gt;return&lt;/span&gt; c &amp;amp; EXCLUSIVE_MASK; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;sharedCount&lt;/code&gt; : 读锁数量 是将同步状态（&lt;code&gt;int c&lt;/code&gt;）无符号右移&lt;code&gt;16&lt;/code&gt;位，即取同步状态的高&lt;code&gt;16&lt;/code&gt;位。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;exclusiveCount&lt;/code&gt;：写锁数量 我们要看下&lt;code&gt;EXCLUSIVE_MASK&lt;/code&gt; 这个静态变量：它是1进行左移16位然后减1也就是&lt;code&gt;0X0000FFFF&lt;/code&gt;即 &lt;code&gt;(1 &amp;lt;&amp;lt; SHARED_SHIFT) - 1= 0X0000FFFF&lt;/code&gt; 所以&lt;code&gt;exclusiveCount&lt;/code&gt; 就是相当于 &lt;code&gt;c&amp;amp;0X0000FFFF&lt;/code&gt; 所以也就是低16位用来表示写锁的获取次数。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;源码分析&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于jdk1.8
既然&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;也是基于&lt;code&gt;AQS&lt;/code&gt;来实现的，那么它肯定是重写了&lt;code&gt;AQS&lt;/code&gt;的获取锁的方法，那我们就直接去&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;这个类里面看看&lt;code&gt;lock&lt;/code&gt;的地方我们先看看获取读锁的地方&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;  &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;tryAcquire&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; acquires)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;/*&lt;br/&gt;             * Walkthrough:&lt;br/&gt;             * 1. If read count nonzero or write count nonzero&lt;br/&gt;             *    and owner is a different thread, fail.&lt;br/&gt;             * 2. If count would saturate, fail. (This can only&lt;br/&gt;             *    happen if count is already nonzero.)&lt;br/&gt;             * 3. Otherwise, this thread is eligible for lock if&lt;br/&gt;             *    it is either a reentrant acquire or&lt;br/&gt;             *    queue policy allows it. If so, update state&lt;br/&gt;             *    and set owner.&lt;br/&gt;             */&lt;/span&gt;&lt;br/&gt;            Thread current = Thread.currentThread();&lt;br/&gt;            &lt;span&gt;// 获取写锁当前的同步状态&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; c = getState();&lt;br/&gt;            &lt;span&gt;// 写锁次数&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; w = exclusiveCount(c);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (c != &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;// (Note: if c != 0 and w == 0 then shared count != 0)&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;// 当前状态不为0，但是写锁为0 就说明读锁不为0&lt;/span&gt;&lt;br/&gt;               &lt;span&gt;// 当读锁已被读线程获取或者当前线程不是已经获取写锁的线程的话获取写锁失败&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (w == &lt;span&gt;0&lt;/span&gt; || current != getExclusiveOwnerThread())&lt;br/&gt;                    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (w + exclusiveCount(acquires) &amp;gt; MAX_COUNT)&lt;br/&gt;                    &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Error(&lt;span&gt;&quot;Maximum lock count exceeded&quot;&lt;/span&gt;);&lt;br/&gt;                &lt;span&gt;// Reentrant acquire 获取到写锁&lt;/span&gt;&lt;br/&gt;                setState(c + acquires);&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;               &lt;span&gt;//writerShouldBlock 公平锁和非公平锁的判断&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (writerShouldBlock() ||&lt;br/&gt;                !compareAndSetState(c, c + acquires))&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;            setExclusiveOwnerThread(current);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写锁完了，接下来肯定就是读锁了由于读锁是共享锁，所以也应该重写了&lt;code&gt;tryAcquireShared&lt;/code&gt; 这个就不贴代码了，和读锁差不多这个就不做分析了。其实把&lt;code&gt;AQS&lt;/code&gt;弄明白了再来看这些基于&lt;code&gt;AQS&lt;/code&gt;来实现的玩意还是比较容易的。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;读写锁的升级与降级&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们有提到读写锁是可以降级的，但是没有说是否可以升级。我们先看看什么是锁降级和锁升级&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;锁降级：从写锁变成读锁；它的过程是先持有写锁，在获取读锁，再释放写锁。如果是持有写锁，释放写锁，再获取读锁这种情况不是锁降级。&lt;img data-ratio=&quot;0.138801261829653&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qu3ItokgsArA6TBjnVGcJpXfkO2uXL1PNLVMYBQxsSiacreL3LJ4X3ffjqh6TSn2PMcblic3pibAZh557xSsk2kvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么要锁降级？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;★&lt;/span&gt;&lt;p&gt;主要是为了保证数据的可见性，如果当前线程不获取读锁而是直接释放写锁， 假设此刻另一个线程（记作线程T）获取了写锁并修改了数据，那么当前线程无法感知线程T的数据更新。如果当前线程获取读锁，即遵循锁降级的步骤，则线程T将会被阻塞，直到当前线程使用数据并释放读锁之后，线程T才能获取写锁进行数据更新。来源于《Java 并发编程的艺术》&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;锁升级：从读锁变成写锁。先持有读锁，再去获取写锁（这是不会成功的）因为获取写锁是独占锁，如果有读锁被占用了，写锁就会放入队列中等待，直至读锁全部被释放之后才有可能获取到写锁。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;思考题&lt;/span&gt;&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;本篇文章主要介绍了单机情况的读写锁，如果要实现一个分布式的读写锁该如何实现？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;的饥饿问题如何解决？（ReentrantReadWriteLock实现了读写分离，想要获取读锁就必须确保当前没有其他任何读写锁了，但是一旦读操作比较多的时候，想要获取写锁就变得比较困难了，因为当前有可能会一直存在读锁。而无法获得写锁。）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;结束&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;由于自己才疏学浅，难免会有纰漏，假如你发现了错误的地方，还望留言给我指出来,我会对其加以修正。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果你觉得文章还不错，你的转发、分享、赞赏、点赞、留言就是对我最大的鼓励。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;感谢您的阅读,十分欢迎并感谢您的关注。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIyMjQwMTgyNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/qu3ItokgsApF99T8iaeM8zcTTMB6stsfYOGjWJ9MkQlr5zJ2gDIOFInycWpDDZjNk0mft0UNxytqBsE3qQicrlVw/0?wx_fmt=png&quot; data-nickname=&quot;java金融&quot; data-alias=&quot;java4299&quot; data-signature=&quot;关注【java金融】后台回复「666」 领取一份面试资料《Java面试BATJ通关手册》，覆盖了Java核心技术、JVM、Java并发、SSM、微服务、数据库、数据结构简历等等。&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qu3ItokgsAq9icqP7TE1y5KeeWLpScVibGnMIxjnn8Ek4wFSrgGdYwXkBiaQkjQ9GlDKxVZuvsINcgSmyBHPWMo5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;站在巨人的肩膀上摘苹果:&lt;/section&gt;&lt;section&gt;《并发编程的艺术》&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://javajr.cn&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;往期精选&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;推荐👍&lt;/strong&gt; ：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyMjQwMTgyNA==&amp;amp;mid=2247485191&amp;amp;idx=1&amp;amp;sn=cf31ee5350beae35938332c7c8c1ffb0&amp;amp;chksm=e82f4348df58ca5e8b46d48f93904a14733f874cdcd4622d4bbb2bffa43a7dea0fd0961e4d63&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Java高并发编程基础三大利器之CyclicBarrier&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;推荐👍&lt;/strong&gt; ：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyMjQwMTgyNA==&amp;amp;mid=2247485179&amp;amp;idx=1&amp;amp;sn=d58076243258f7c1f2eb441813560145&amp;amp;chksm=e82f42b4df58cba200d45eaa9a980042239db99a5ff54dcced10f0694648bd1f7bd8af01f35c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Java高并发编程基础三大利器之CountDownLatch&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;推荐👍&lt;/strong&gt; ：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyMjQwMTgyNA==&amp;amp;mid=2247485169&amp;amp;idx=1&amp;amp;sn=7de6cade492f7c82eecc5dcc3a59ce8d&amp;amp;chksm=e82f42bedf58cba8a02bf5a421cabb3db382302f7df70198529b304547241c987f5614e0e46a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Java高并发编程基础三大利器之Semaphore&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;推荐👍&lt;/strong&gt; ：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyMjQwMTgyNA==&amp;amp;mid=2247485155&amp;amp;idx=1&amp;amp;sn=cc79d4fb22f376870569e92145154ab3&amp;amp;chksm=e82f42acdf58cbba48f3405faed2052530fa151218a171bcaa0ccce7e5f3fbc76cdebefa29fa&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Java高并发编程基础之AQS&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;推荐👍&lt;/strong&gt; ：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyMjQwMTgyNA==&amp;amp;mid=2247485131&amp;amp;idx=1&amp;amp;sn=08f23605ae311689e40458f007d5ad9f&amp;amp;chksm=e82f4284df58cb92684719d613cc17dbe808c57eabc782767365fc5964123b910262338c0cb2&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;可恶的爬虫直接把生产6台机器爬挂了！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre&gt;&lt;p&gt;&lt;span&gt;最近面试BAT&lt;/span&gt;，整理一份面试&lt;span&gt;资料&lt;/span&gt;&lt;span&gt;《&lt;strong&gt;Java面试BATJ通关手册&lt;/strong&gt;》&lt;/span&gt;&lt;span&gt;，覆盖了Java核心技术、JVM、Java并发、SSM、微服务、数据库、数据结构、等等。&lt;/span&gt;&lt;span&gt;获取方式：点“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”，关注公众号并回复 &lt;/span&gt;&lt;span&gt;&lt;strong&gt;666&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 领取，更多内容陆续奉上。&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p data-style=&quot;font-size: 16px; white-space: normal; letter-spacing: 0.544px; widows: 1; word-spacing: 2px; caret-color: rgb(255, 0, 0); color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-family: 微软雅黑; text-align: right; margin-left: 0.5em; margin-right: 0.5em;&quot; class=&quot;js_darkmode__117&quot;&gt;&lt;span&gt;&lt;strong&gt;文章有帮助的话，在看，转发吧。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;font-size: 16px; white-space: normal; letter-spacing: 0.544px; widows: 1; word-spacing: 2px; caret-color: rgb(255, 0, 0); color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-family: 微软雅黑; text-align: right; margin-left: 0.5em; margin-right: 0.5em;&quot; class=&quot;js_darkmode__118&quot;&gt;&lt;span&gt;&lt;strong&gt;谢谢支持哟 (*^__^*）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4fe33d2a367bdd6c74b60e99a0546e5c</guid>
<title>架构师必看：架构设计的四大思维支柱</title>
<link>https://toutiao.io/k/ss8h91v</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;笔者在 InfoQ 前文《关于架构演进发展的探讨》和《架构演进的第四个趋势：行业级标准化》中，提出了笔者对架构发展趋势的一些浅见，也介绍了企业级业务架构方法论的来龙去脉，本文拟基于上述文章提炼一下企业软件（大家常说的 B 端软件）架构设计中的四大思维支柱供大家参考。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;支柱一：整体思维&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、从敏捷说起&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;敏捷诞生正是为了解决传统软件工程普遍被认为存在的“低效”问题，诸如周期长、不能快速响应需求、成果长期不可见而易导致失败等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，敏捷往往给人“一言不合就开干”的雷厉风行的印象，而很多时候，敏捷在实操上也确实由于对“速度”和“形式”的片面追求忽视了对整体的合理设计，这样的敏捷并不是真正的敏捷，而是“着急”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;敏捷开发的几位殿堂级大师对设计的重要性有着非常深刻的认知。Martin Fowler 认为敏捷注重的是演进式设计，而不是轻视设计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Vernon 也批评一些敏捷开发实践是用“任务板挪卡”代替了设计；Sutherland 在“OODA”循环中也强调掌握全景信息而非只从自身视角看问题的重要性，每次 Scrum 结束提出 MVP，都要重走一遍循环。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为 MVP 就是为了获得更多、更全的反馈信息，有了这些信息才能快速决策，快速决策绝非快拍脑袋，是因为有模式加速了对信息的处理速度，这才是敏捷的原动力，也是要总结方法论的原因，“全景信息 + 思维模式 = 快速决策”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“OODA”循环如图 1 所示：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6138728323699422&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3zn8w7C6fJQtFbKND0xhzvQ5pIAYicww6Uib2roNLTJ3ZQaEfca3bl6wHJNydEQdReiaFx4icWoqHWIZ7Zv9RGhkiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;865&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 1 “OODA”循环（来自互联网）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;敏捷开发由于其“高效”的特点，在支持快速试错的同时，也支持快速犯错，这是一体两面的，不能只看到其由于快速提供交付物所具有的成果可见能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;缺少整体把控，敏捷也容易堆叠“技术债务”。所以，敏捷开发也需要有整体思维做指导而不是只关注“速度”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果敏捷也需要整体思维，那本就因此被“诟病”的传统软件工程方法和系统分析方法也就更应该“且行且珍惜”了，众所周知，Zachman 模型、TOGAF 模型和 DODAF 模型都很强调全景信息。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;二、切勿因小失大&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;所有局部问题的解决都离不开对整体的分析，分析的范围不同，得出的结论也会不同。&lt;/span&gt;&lt;span&gt;举个简单的例子，如果我们为功能开发任务排定优先级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么，10 个任务之间进行排序和 20 个任务之间进行排序，很有可能得出排序结论是有很大差异的，分析范围会决定分析结论。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着输入的增加，各类因素在总体上的权重就会有变化，原本认为重要的事情也可能因此不再重要了，最近大家又常提起一句话：&lt;/span&gt;&lt;span&gt;“时代的一粒灰落在个人头上就是一座山”，其实也有这个意味。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面向局部的分析和面向整体的分析是有很大差别的，而现在的企业管理越来越注重提升整体性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，B 端软件的架构设计、需求解读都应当有一个全局观，分析范围不同，解决方案也可能不同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;过于关注局部，将视野局限在小范围内，很可能会造成“因小失大”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;近年某大型电商曾在自己的支付平台上引进社交功能，但却被用于不法用途，结果导致功能下线。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该电商实力不凡，在系统设计方面也可谓独步青云，但是出现这样大的“失误”，很可能是分析问题时，没能更广泛地观察已有案例和功能实际价值对整体的贡献，低估了相关影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;尽管上述说法未免“事后诸葛亮”，但我们不是一直希望避免出现此类问题吗？那回首原因，没做更全面的分析，就不能仅是一种“说辞”了。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;三、工具何其难&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;基于整体分析的架构设计是一件极其耗费心力的工作，我们不能总是依靠架构师这台“碳基计算机”，总给架构师压上千斤重担而不提供支持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构师不是魔术师，我们也经常忘记了，“架构”是整个企业的架构而不是架构师的“架构”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;工欲善其事必先利其器。工具不仅仅是软件类工具，方法论、流程管理工具、已有的模型资产、架构管理软件都属于工具的范畴，而所有这些资产中，其实最重要的两样是方法论和模型资产。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家可能会觉得架构管理软件更重要、更直接，但是架构管理软件是根据架构设计方法论和架构设计实践做出来的，所以方法论和模型资产是更重要的基础性工具。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而以目前架构设计的“混乱”现状而言，没有通用的架构管理工具也是必然的，因为公认能普适的架构理论和行业级标准化的模型资产都没有，也就没有合适的、可以真正直达“痛处”架构管理工具。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果能做出这样的工具，那么，一定可以开辟一个世界级的市场。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了工具的支持，来自企业的整体支持也很重要，不过这就属于资源层面而不仅仅是工具了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面向整体的设计，应当有整体的参与，企业的各个部分都应当参与到整体设计中，而整体设计也应当向整个企业传导。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;走不出架构师的架构设计，没有持久的维持能力；走不出 IT 部门的架构设计，不会凝聚起整个企业；走不出企业的架构设计，就无法真正落地企业战略。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;支柱二：洞察能力&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、深入理解业务&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;洞察能力是个老话题，不过架构领域本也没多少新鲜事，任何架构方法都需要深入实践才能逐渐掌握要领，架构领域没有快餐，不大可能“一夜顿悟”，也不要急着“PK”，更多的是需要反复去啃的“硬骨头”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;做软件设计，大家常说要对业务进行深入分析，要抓住需求本质，要有合适的抽象力度，这些说的其实都是洞察能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;洞察需要的是深入理解，而不仅仅是对需求的字面理解或者浅层的沟通。架构领域一直不乏有对哲学方法论的应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如本体论，笔者近期阅读维特根斯坦的《逻辑哲学论》时也发现，尽管难以深入理解大师的思想精髓。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是计算机领域对面向对象编程的研究与这本一次世界大战期间写就的哲学著作如出一辙。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加强洞察能力，一般都会认为是要提升思维穿透能力，这当然是必须的，但是从企业层面而言，也有相对容易操作的方式，就是加强深层次沟通。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这首先需要企业逐步改变业务人员的和技术人员的比例，使技术人员能够走到业务人员中间来，加强二者的融合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所谓深层次沟通并不是两个人要碰撞出哲学火花，如果两个人之间只能具有一个聊聊需求的时间，就急着做产品上线了，那双方之间的了解深度必然是有限的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术人员如果能够轮班走到业务人员中间提供实地支持，深入理解工作环境，实际感受业务压力，理解的深度自然会增加。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们不需要指望技术人员变成哲学家来增加洞察力，只需要给予他们更多的观察机会和思考时间。这并非“强人所难”，至少，国外的大银行，如摩根大通、高盛、Capital One 等，已经不乏这样的操作了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可能很多人会觉得这对中小企业不公平，不可操作，毕竟他们资源有限，但是，这也取决于你是否相信“未来的企业都是科技企业”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至少笔者相信，因为软件将是未来最主要的生产方式。也许今天很多企业不用急着进行这个操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是，这不代表可以忽视这个问题，而越大的企业应该越早动手，因为企业越大转型越慢、周期越长、沟通模式越复杂，企业的全貌也越难以掌握。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;二、努力推进标准化&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;如果软件行业整体都具备了深入的洞察能力的话，那标准化就应当是件自然的事情，农业和工业的发展都是这个历程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;农业的耕种方法、选种和培育、肥料的制作，即便在今天看来极为简陋的原始生产阶段，为了提高农业种植的成功率和产量，也是在进行着不懈的“标准化”努力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;农书早已有之，即便在著名的“焚书坑儒”中，也获准可以保留，可见古人对农业技术的重视，更不用说在现代工业条件支持下的大规模农业生产。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;与之相比，软件行业真有那么特殊吗？真的不会有标准化生产这个历程吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;反思软件行业目前的情况，也许只能说，洞察力依然不够，至少没有真正理解标准化对行业的意义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;否则，一个已经发展了 70 多年、精英辈出的行业，不会在标准化资产、标准化生产方面如此“尴尬”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们书写了那么多的技术标准，却依然无法提供一套能够有效复用的行业级软件资产，当然，这种复用不是指搬过来就用，而是至少不用从头做起。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开源提供了很好的支持未来大规模软件生产的模式参考，而需要的是增加对标准化的管理的思考，这也许是未来开源的发展方向。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;没有标准化能力，软件行业可能无法撑起未来对软件生产的大规模需求。标准化是行业成熟的表现，也是软件行业对自身、对其他行业都具备深刻洞察力的体现，更是设计师在设计时应为之努力的方向。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;支柱三：演进思维&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;一、唯快不破？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;“快鱼吃慢鱼”几乎成了当今社会的集体“焦虑”, 企业由于竞争的压力，对“立竿见影”的追求近乎“执着”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;笔者也是个二次元的爱好者，每每想到这个问题，自然会浮现出一部漫画作品——《浪客剑心》，主人公绯村剑心的独门绝技就是“拔刀”，一回合解决对手，拔刀的瞬间就致对手与死地。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相信很多企业在搞软件建设时也寄望于此，希望采用某个架构、做成某个系统后，可以实现超级应变能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然而漫画作品中的主人公是在经历了地狱般的生死训练之后才具备如此能力，带着一身的伤病，成了一台需要精心保养否则很难“善终”的机器，用个通俗点儿的解释就是职业寿命比较短。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，“快”都是有代价、有基础的，“快”是系统性训练的结果，不是哪个部门的“快”在支撑整个企业的“快”；“快”是整个企业持续演进出来的，而不是被外部因素突然赋予的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家都不是漫威电影里的“超级英雄”，不是天赋异禀，也不是被蜘蛛咬一口就可以拯救世界。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不注重基础的“快”，只能是“眼见他起高楼，眼见他楼塌了”。在业务领域里，我们不乏见到业务人员被逼急了而出现的业绩造假、财务造假，而忽视软件工程的底线要求，把技术人员催的太紧，也可能出现技术“造假”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也许笔者的说法不够准确，但是英国 TSB 银行的案例也许可以当成一个侧写吧。业绩造假、财务造假对企业管理者而言还是可以搞清楚的问题，但是技术方面出的问题，相信大部分管理者可能搞不清楚。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有兴趣的读者可以看看对计算机 BUG 的分类，像薛定谔类型、海森堡类型、分形类型等，这是连技术人员自己都搞不懂的 BUG 形态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术目标的实现很难一蹴而就，也许不少传统企业的管理者会问如今互联网企业不是很具备“快”的样子吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;与传统企业相比，他们是挺快，这是因为他们具有更好的技术管理能力和开发环境，有基础设施支持人员能力的发挥，但是，不容忽视的是之前热过的“996.ICU”这个话题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;敏捷创始人可是说过，敏捷应该是高效和不用加班的。这种透支技术人员身体，把软件行业搞得像“血汗工厂”的做法，不应该用对“理想”的追求一笔带过。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;传统方法只要用的纯熟、坚持对方法论的完善和演进，合适的条件下，一样可以获得“快”的效果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如二神山的建设就是在瀑布模型和甘特图的指导下实现“中国速度”的，感兴趣的读者可以找找二神山的工程师们公开分享的资料，看看他们对传统方法的运用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回到正题，架构设计及其实现应该注重的是演进思维，不可能“毕其功于一役”，再着急也无法忽视客观规律。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如同搞战略设计，如果给设计人员的只有泡一碗方便面的时间，那交付的也只能是一碗战略方便面。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;二、演进方向&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;架构设计要具备演进思维，演进思维除了意味着大目标要分段实现外，也意味着对目标该有一个整体认知，这个认知对企业软件而言，就是要统一到企业的愿景和战略上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文笔者延续自己在《企业级业务架构设计：方法论与实践》一书中的观点，将愿景定位于 20-30 年的长期方向，而将战略定位于 3 年左右的“短期”方向。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术变化比较快，战略周期长了不利于调整，但是太短也很难有明显实施效果，尤其是对大型企业而言。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从长期愿景的角度看，数字化转型是必然的，当代的人碰巧处于时代切换的转型阵痛期，作为经历“痛苦”的人，任何企业和个人都无法回避这个问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;笔者将其列为长期方向，是因为笔者所认为的数字化与目前更为贴近信息化的各类主张不同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数字化不是一两个系统或者某个架构就可以快速解决的问题，而是整个社会的数字化，企业的数字化是社会数字化中的一环，并且，不可能仅靠自身的数字化完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以数字化转型为架构设计思维演进的长期方向，在每个战略周期内，密切跟踪技术的发展，适时引入可能带来业务模式变化的技术，实现新技术与业务的融合，这种架构驾驭能力才是未来企业竞争的关键。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;笔者对数字化转型的详细论述包含在即将面世的新书《银行数字化转型》中，本文不再过多着墨于此。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;支柱四：开放思维&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、有中心而无权威&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个说法略有“不当”，但笔者暂时没有想到更形象的表述。实际工作中，架构师在项目中是具有“权威”性的，这样比较有利于项目的总体管理，大的项目可能会有很多架构师，因为架构师的分工也是很细的，因此，从效率上来讲，也需要设立个“首架”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“中心”会提高执行效率，但是，架构师必须具有开放性，保持谦虚，架构师是“中心”，但不要总把“权威”看得太重，架构是企业整体资产。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;说的不客气点儿，企业搞架构也正是为了能够摆脱对特定架构师的“单点依赖”，使架构工作能够保持“业务连续性”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构设计中要保持这种谦逊性，这样才能让更好的设计思路进入设计师的视野，进入设计方案。“海纳百川，有容乃大”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所谓的技术权威，最好是自然形成的，而非来自于职权的任命；技术权威是用来“向我开炮”的，如果用来维护，很可能会产生适得其反的结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术权威最终代表的是问题能被更好地解决，而不是“唯马首是瞻”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构设计非常需要注重整体，尽可能考虑全景信息，这往往也意味者过于依赖“权威”架构师其实是有风险的，“智者千虑必有一失”，负担太重也会造成核心架构师“过载”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从这个角度讲，架构师团队的开放协作，或者架构师与项目团队的开放协作是非常重要的，整体思维和开放思维之间相辅相成。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;二、开放式架构设计&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;关于开放银行的讨论去年和今年特别多，笔者也曾发布过相关文章，在笔者看来，与其称之为开放银行不如称其为开放式架构含义会更明确。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;企业之间在生态建设的“大旗”下，连接越来越紧密，而且从商业层面的连接逐渐下沉为技术层面的连接，API、SDK 等对接方式让信息化程度较高的企业之间联系更为密切。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着企业架构理论和企业实践能力的提升，企业内部一体化程度会逐渐加强，并转化为体现生态分工的跨企业系统协作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这要求架构设计遵循开放的设计方向，以企业之间更好地对接为目标，实现跨企业的流程整合，这样组成的“竞合”关系更稳定、更具竞争力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面向开放式协作的架构设计，要求企业有更好的、可读性强、可公开的内部架构，这样才能有更好的协作前提。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而今天这种充满个性的架构设计风格，要逐渐向更加标准化、更容易沟通的方向发展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PPT 不是架构师的发力点，对架构的过度宣传也许反而不利于架构的健康发展，架构风格的过度自由也许会带来沟通上的不自由。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;尽管今天架构师们面对的企业环境、技术环境越来越复杂，但是，简单依然是设计应该持续追求的目标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文总结的四大思维支柱相信各位读者并不陌生，笔者只是将个人的一些理解融合进去。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果用“T”型人才或者“T”型思维类比的话，整体思维相当于“T”字横头的“一”，洞察能力相当于“∣”，演进思维相当于小“T”逐步积累成大“T”，而开放思维相当于多个“T”的连接，包括企业层面、架构层面和架构师层面的开放与连接。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构说到底就是结构和关系，架构的四大思维支柱，谈的也就是处理好结构和关系的思考原则。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;结语&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;文章终归是一家之言，目的是抛砖&lt;/span&gt;&lt;span&gt;引玉，希望有更多的人一起关注在当前这个大家都认定的“技术最好的时代”，我们应该如何培育“架构”这朵 IT 领域之花。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后附上付总的大作，真的值得一看&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;mpcps frameborder=&quot;0&quot; class=&quot;js_editor_cps&quot; data-datakey=&quot;1586580667539_0.45813136967174284&quot; data-uid=&quot;1586580667537&quot; data-type=&quot;1&quot; data-product=&quot;&quot; data-templateid=&quot;list&quot; data-pid=&quot;12684682&quot; data-packid=&quot;&quot; data-smartnum=&quot;&quot; data-categoryid=&quot;3&quot; data-appid=&quot;wxbdbc4659744ed70d&quot; data-report=&quot;s0%3D0%26s1%3D0%26s2%3D0%26s3%3D%25E4%25BC%2581%25E4%25B8%259A%25E7%25BA%25A7%25E4%25B8%259A%25E5%258A%25A1%25E6%259E%25B6%25E6%259E%2584%26s4%3D0%26s5%3D10%26s6%3Did_1586580727384_95209%26s7%3D%26s8%3D%26s9%3D%26s10%3D%26pid%3Dwxbdbc4659744ed70d_12684682%26uuid%3D35637457382144833669%26title%3D%25E4%25BC%2581%25E4%25B8%259A%25E7%25BA%25A7%25E4%25B8%259A%25E5%258A%25A1%25E6%259E%25B6%25E6%259E%2584%25E8%25AE%25BE%25E8%25AE%25A1%25EF%25BC%259A%25E6%2596%25B9%25E6%25B3%2595%25E8%25AE%25BA%25E4%25B8%258E%25E5%25AE%259E%25E8%25B7%25B5%26sid%3D1%26cid%3D3%26ratio%3D18.00%2525%26price%3D56.90%26&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;mpcps frameborder=&quot;0&quot; class=&quot;js_editor_cps&quot; data-datakey=&quot;1620218516225_0.058461370009926794&quot; data-uid=&quot;1620218516224&quot; data-type=&quot;1&quot; data-product=&quot;&quot; data-templateid=&quot;list&quot; data-pid=&quot;28537450&quot; data-categoryid=&quot;3&quot; data-appuin=&quot;3084391334&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6e7333a3b51d017a5ca5fffa48a1e3a6</guid>
<title>Go 语言中常见的几种反模式</title>
<link>https://toutiao.io/k/d4ymrr1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5517241379310345&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cH6WzfQ94mZpgeP2qpfvO7Vxy8nQ6QiccjwbgN7nXjMbZKXa3kRcoViarA9YNDMnviaHbm6icricDuH7X4SGmWq9XNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1102&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文翻译自Saif Sadiq的文章&lt;span&gt;《Common anti-patterns in Go》&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;众所周知，编码是一门艺术，就像每个拥有精湛艺术并为之感到骄傲的工匠一样，我们作为开发人员也为我们编写的代码感到自豪。为了获得最佳效果，艺术家不断寻找可提高其手艺的方法和工具。同样，作为开发人员，我们也在不断提高自己的技能，并对&quot;如何写出好的代码&quot;这个最重要的问题的答案保持好奇。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;弗雷德里克·布鲁克斯（Frederick P. Brooks）在他的书&lt;span&gt;《人月神话》&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;中写道：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;“程序员和诗人一样，工作时只是稍稍脱离了纯粹的思维定式。他在空气中建造他的城堡，通过发挥想象力进行创作。很少有一种创作媒介是如此灵活，如此容易打磨和重做，如此容易实现宏大的概念结构”。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.5274725274725274&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cH6WzfQ94mZpgeP2qpfvO7Vxy8nQ6QiccU3H4vdHzic9D9OBcTYeUH3G86NlTYb1hqlACkabYVMoVe9QqoUhiajiaw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;455&quot;/&gt;&lt;/p&gt;&lt;center data-tool=&quot;mdnice编辑器&quot;&gt;图片来源：https://xkcd.com/844&lt;br/&gt;&lt;/center&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章试图探索上面漫画中大问号的答案。编写良好代码的最简单方法是避免在我们编写的代码中包含反模式。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;0. 什么是反模式&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个简单的反模式示例就是编写一个API，而无需考虑该API的使用者如何使用它，如下面的示例1所述。意识到反模式并有意识地避免在编程时使用它们，这无疑是朝着更具可读性和可维护性的代码库迈出的重要一步。在本文中，让我们看一下Go中一些常见的反模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;当编写代码时没有未来的因素做出考虑时，就会出现反模式&lt;/strong&gt;。反模式最初可能看起来是一个适当的问题解决方案，但是，实际上，随着代码库的扩大，这些反模式会变得模糊不清，并给我们的代码库添加“技术债务”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反模式的一个简单例子是，在编写API时不考虑API的消费者如何使用它，就如下面例1那样。意识到反模式，并在编程时有意识地避免使用它们，肯定是迈向更可读和可维护的代码库的重要一步。在这篇文章中，我们来看看Go中常见的几种反模式。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1. 从导出函数(exported function)返回未导出类型(unexported type)的值&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Go中，要导出(export)任何一个字段(field)或变量(variable)，我们都需要确保其名称是以大写字母开头。导出(export)它们的动机是使它们对其他包可见。例如，如果要使用math包中的Pi函数，我们将其定义为math.Pi。而使用math.pi将无法正常工作，并且会报错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以小写字母开头的名称（结构字段，函数或变量）不会被导出，并且仅在定义它们的包内可见。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用返回未导出类型值的导出函数或方法可能会令人沮丧，因为其他包中的该函数的调用者将不得不再次定义一个类型才能使用它。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// 反模式&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; unexportedType string&lt;br/&gt;&lt;br/&gt;func ExportedFunc() unexportedType { &lt;br/&gt; &lt;span&gt;return&lt;/span&gt; unexportedType(&lt;span&gt;&quot;some string&quot;&lt;/span&gt;)&lt;br/&gt;} &lt;br/&gt;&lt;br/&gt;// 推荐&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; ExportedType string&lt;br/&gt;func ExportedFunc() ExportedType { &lt;br/&gt; &lt;span&gt;return&lt;/span&gt; ExportedType(&lt;span&gt;&quot;some string&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2. 空白标识符的不必要使用&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在各种情况下，将值赋值给空白标识符是不需要，也没有必要的。如果在for循环中使用空白标识符，Go规范中提到：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果最后一个迭代变量是空白标识符，则range子句等效于没有该标识符的同一子句。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// 反模式&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; _ = range sequence { &lt;br/&gt; run()&lt;br/&gt;} &lt;br/&gt;x, _ := someMap[key] &lt;br/&gt;_ = &amp;lt;-ch &lt;br/&gt;&lt;br/&gt;// 推荐&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; range something { &lt;br/&gt; run()&lt;br/&gt;} &lt;br/&gt;&lt;br/&gt;x := someMap[key] &lt;br/&gt;&amp;lt;-ch&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3. 使用循环/多次append连接两个切片&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将多个切片附加到一个切片时，无需遍历切片并一个接一个地附加(append)每个元素。相反，使用一个append语句执行此操作会更好，更有效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，下面的代码段通过迭代遍历元素逐个附加元素来连串连接sliceOne和sliceTwo：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; _, v := range sliceTwo { &lt;br/&gt; sliceOne = append(sliceOne, v)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，由于我们知道append是一个&lt;span&gt;变长参数函数&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;，我们可以使用零个或多个参数来调用它。因此，可以仅使用一个append函数调用来以更简单的方式重写上面的示例，如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;sliceOne = append(sliceOne, sliceTwo…)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;4. make调用中的冗余参数&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该make函数是一个特殊的内置函数，用于分配和初始化map、slice或chan类型的对象。为了使用make初始化切片，我们必须提供切片的类型、切片的长度以及切片的容量作为参数。在使用make初始化map的情况下，我们需要传递map的大小作为参数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，make的这些参数已经具有默认值：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;对于channel，缓冲区容量默认为零（不带缓冲）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于map，分配的大小默认为较小的起始大小。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于切片，如果省略容量，则容量参数的值默认为与长度相等。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ch = make(chan int, 0)&lt;br/&gt;sl = make([]int, 1, 1)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以改写为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ch = make(chan int)&lt;br/&gt;sl = make([]int, 1)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，出于调试或方便数学计算或平台特定代码的目的，将具名常量与channel一起使用不被视为反模式。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;const c = 0&lt;br/&gt;ch = make(chan int, c) // 不是反模式&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;5. 函数中无用的return&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;return在没有返回值的函数中作为最终语句不是一种好习惯。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// 没用的&lt;span&gt;return&lt;/span&gt;，不推荐&lt;br/&gt;func &lt;span&gt;&lt;span&gt;alwaysPrintFoofoo&lt;/span&gt;&lt;/span&gt;() { &lt;br/&gt; fmt.Println(&lt;span&gt;&quot;foofoo&quot;&lt;/span&gt;) &lt;br/&gt; &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;} &lt;br/&gt;&lt;br/&gt;// 推荐&lt;br/&gt;func &lt;span&gt;&lt;span&gt;alwaysPrintFoo&lt;/span&gt;&lt;/span&gt;() { &lt;br/&gt; fmt.Println(&lt;span&gt;&quot;foofoo&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，具名返回值的return不应与无用的return相混淆。下面的return语句实际上返回了一个值。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func printAndReturnFoofoo() (foofoo string) { &lt;br/&gt; foofoo := &lt;span&gt;&quot;foofoo&quot;&lt;/span&gt; &lt;br/&gt; fmt.Println(foofoo) &lt;br/&gt; &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;6. switch语句中无用的break语句&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Go中，switch语句不会自动fallthrough。在像C这样的编程语言中，如果前一个case语句块中缺少break语句，则执行将进入下一个case语句中。但是，人们发现，fallthrough的逻辑在switch-case中很少使用，并且经常会导致错误。因此，包括Go在内的许多现代编程语言都将switch-case的默认逻辑改为不fallthrough。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，在一个case case语句中，不需要将break语句作为最终语句。以下两个示例的行为相同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反模式：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;switch s {&lt;br/&gt;&lt;span&gt;case&lt;/span&gt; 1: &lt;br/&gt; fmt.Println(&lt;span&gt;&quot;case one&quot;&lt;/span&gt;) &lt;br/&gt; &lt;span&gt;break&lt;/span&gt;&lt;br/&gt;&lt;span&gt;case&lt;/span&gt; 2: &lt;br/&gt; fmt.Println(&lt;span&gt;&quot;case two&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好的模式：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;switch s {&lt;br/&gt;&lt;span&gt;case&lt;/span&gt; 1: &lt;br/&gt; fmt.Println(&lt;span&gt;&quot;case one&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;case&lt;/span&gt; 2: &lt;br/&gt; fmt.Println(&lt;span&gt;&quot;case two&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，为了在Go中switch-case中实现fallthrough机制，我们可以使用fallthrough语句。例如，下面给出的代码段将打印23。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;switch 2 {&lt;br/&gt;&lt;span&gt;case&lt;/span&gt; 1: &lt;br/&gt; fmt.Print(&lt;span&gt;&quot;1&quot;&lt;/span&gt;) &lt;br/&gt; fallthrough&lt;br/&gt;&lt;span&gt;case&lt;/span&gt; 2: &lt;br/&gt; fmt.Print(&lt;span&gt;&quot;2&quot;&lt;/span&gt;) &lt;br/&gt; fallthrough&lt;br/&gt;&lt;span&gt;case&lt;/span&gt; 3: fmt.Print(&lt;span&gt;&quot;3&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;7. 不使用辅助函数执行常见任务&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于一组特定的参数，某些函数具有一些特定表达方式，可以用来简化效率，并带来更好的理解/可读性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，在Go中，要等待多个goroutine完成，可以使用sync.WaitGroup。通过将计数器的值-1直至0，以表示所有goroutine都已经执行完毕：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;wg.Add(1) // ...some code&lt;br/&gt;wg.Add(-1)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但使用sync包提供的辅助函数wg.Done()可以使代码更简单并容易理解。因为它本身会通知sync.WaitGroup所有goroutine即将完成，而无需我们手动将计数器减到0。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;wg.Add(1)&lt;br/&gt;// ...some code&lt;br/&gt;wg.Done()&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;8. nil切片上的冗余检查&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;nil切片的长度为零。因此，在计算切片的长度之前，无需检查切片是否为nil切片。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，下面的nil检查是不必要的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; x != nil &amp;amp;&amp;amp; len(x) != 0 { // &lt;span&gt;do&lt;/span&gt; something&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的代码可以省略nil检查，如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; len(x) != 0 { // &lt;span&gt;do&lt;/span&gt; something&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;9. 太复杂的函数字面量&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以删除仅调用单个函数且对函数内部的值没有做任何修改的函数字面量，因为它们是多余的。可以改为在外部函数直接调用被调用的内部函数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;fn := func(x int, y int) int { &lt;span&gt;return&lt;/span&gt; add(x, y) }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以简化为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;add(x, y)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;译注：原文少了简化后的代码，这里根据译者的理解补充的。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;10. 使用仅有一个case语句的select语句&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;select语句使goroutine等待多个通信操作。但是，如果只有一个case语句，实际上我们不需要使用select语句。在这种情况下，使用简单send或receive操作即可。如果我们打算在不阻塞地发送或接收操作的情况处理channel通信，则建议在select中添加一个default case以使该select语句变为非阻塞状态。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// 反模式&lt;br/&gt;select {&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; x := &amp;lt;-ch: fmt.Println(x)&lt;br/&gt;} &lt;br/&gt;&lt;br/&gt;// 推荐&lt;br/&gt;x := &amp;lt;-ch&lt;br/&gt;fmt.Println(x)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用default:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;select {&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; x := &amp;lt;-ch: &lt;br/&gt;  fmt.Println(x)&lt;br/&gt; default: &lt;br/&gt;  fmt.Println(&lt;span&gt;&quot;default&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;11. context.Context应该是函数的第一个参数&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;context.Context应该是第一个参数，一般命名为ctx.ctx应该是Go代码中很多函数的（非常）常用参数，由于在逻辑上把常用参数放在参数列表的第一个或最后一个比较好。为什么这么说呢？因为它的使用模式统一，可以帮助我们记住包含该参数。在Go中，由于变量可能只是参数列表中的最后一个，因此建议将context.Context作为第一个参数。各种项目，甚至Node.js等都有一些约定，比如错误先回调。因此，context.Context应该永远是函数的第一个参数，这是一个惯例。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// 反模式&lt;br/&gt;func badPatternFunc(k favContextKey, ctx context.Context) {    &lt;br/&gt;    // &lt;span&gt;do&lt;/span&gt; something&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// 推荐&lt;br/&gt;func goodPatternFunc(ctx context.Context, k favContextKey) {    &lt;br/&gt;    // &lt;span&gt;do&lt;/span&gt; something&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;p&gt;《Common anti-patterns in Go》: &lt;em&gt;https://deepsourcehq.hashnode.dev/common-anti-patterns-in-go&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2] &lt;/span&gt;&lt;p&gt;《人月神话》: &lt;em&gt;https://book.douban.com/subject/26358448/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3] &lt;/span&gt;&lt;p&gt;变长参数函数: &lt;em&gt;https://www.imooc.com/read/87/article/2424&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4] &lt;/span&gt;&lt;p&gt;改善Go语⾔编程质量的50个有效实践: &lt;em&gt;https://www.imooc.com/read/87&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5] &lt;/span&gt;&lt;p&gt;Kubernetes实战：高可用集群搭建、配置、运维与应用: &lt;em&gt;https://coding.imooc.com/class/284.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6] &lt;/span&gt;&lt;p&gt;我爱发短信: &lt;em&gt;https://51smspush.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7] &lt;/span&gt;&lt;p&gt;链接地址: &lt;em&gt;https://m.do.co/c/bff6eed92687&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5d8502bbe2ef329a31496fe71ce50fc4</guid>
<title>JavaScript 中到底要不要加分号？</title>
<link>https://toutiao.io/k/bypqv6b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;markdown-body&quot; itemprop=&quot;articleBody&quot;&gt;&lt;p&gt;&lt;img src=&quot;./semicolons.jpeg&quot; alt=&quot;JavaScript 分号&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;JavaScript 中的分号是可选的，加不加分号主要是个代码风格问题。一种风格是使用分号明确结束语句，即便这些分号不是必需的；另一种风格是尽可能的不加分号，只在必要的情况才加。我个人就不喜欢加分号，当然喜欢加分号的朋友也不少。无论你喜欢哪种风格，都需要了解了解 JavaScript 中的分号的一些细节。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;./semicolons-fight.jpeg&quot; alt=&quot;加不加分号&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;代码中分号的作用&quot;&gt;代码中分号的作用&lt;/h2&gt;&lt;p&gt;分号的主要作用是：作为语句的断言（EOS）用于结束一个程序语句，目的是让解析器正确解析程序。在很多 C-Style 语言里，用分号明确结束一行语句，主要是为了降低语言编译器开发的成本。但是现代编译器都足够聪明了，可以很好的处理好多行语句。很多语言都不需要明确使用分号结尾如：Go、Scala、Ruby、Python、Swift、Groovy 等等。&lt;/p&gt;&lt;p&gt;虽然 JavaScript 是 C-like 语言，但它是有别于 C、Java 的，在 JavaScript 中分号也是可选的，它自动分号插入机制 Auto Semicolon Insertion (ASI)。&lt;/p&gt;&lt;h2 id=&quot;javascript-自动分号插入机制&quot;&gt;JavaScript 自动分号插入机制&lt;/h2&gt;&lt;p&gt;JavaScript 有着自动分号插入的机制(Automatic Semicolon Insertion)，简称 ASI。在&lt;a href=&quot;https://262.ecma-international.org/11.0/#sec-automatic-semicolon-insertion&quot;&gt;ECMA-262 - Automatic Semicolon Insertion&lt;/a&gt;中有关 Automatic Semicolon Insertion 的明确说明：&lt;/p&gt;&lt;blockquote&gt;&lt;ol&gt;&lt;li&gt;从左到右解析程序，当遇到一个不符合任何文法产生式的 token(offending token)，那么只要满足下面条件之一就在违规 token 前面自动插入分号。&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;至少一个换行符(LineTerminator)分割了违规 token 和前一个 token。&lt;/li&gt;&lt;li&gt;违规 token 是 &lt;code&gt;}&lt;/code&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;从左到右解析程序，tokens 输入流已经结束，当解析器无法将输入 token 流解析成单个完整 ECMAScript 程序 ，那么就在输入流的结束位置自动插入分号。&lt;/li&gt;&lt;li&gt;从左到右解析程序，遇到一个某些文法产生式允许的 token，但是它是受限操作(Restricted Productions)，当至少一个换行符分割了受限的 token 和前一个 token，那么就在受限 token 前面自动插入分号。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;然而，上述规则有一个附加的优先条件：如果插入分号后解析结果是空语句，或如果插入分号后它成为 for 语句头部的两个分号之一，那么不会自动插入分号。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;em&gt;注：以上说明翻译较为别扭可以多读几遍或阅读英文原文 &lt;a href=&quot;https://262.ecma-international.org/11.0/#sec-automatic-semicolon-insertion&quot;&gt;ECMA-262 - Automatic Semicolon Insertion&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;分号自动插入的情况&quot;&gt;分号自动插入的情况&lt;/h3&gt;&lt;p&gt;简要归纳下，自动分号插入以换行为基础，解析器会尽量将新行并入当前行，当且仅当符合 ASI 规则时才会将新行视为独立的语句&lt;/p&gt;&lt;p&gt;主要有以下自动插入规则：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;当新的一行并入当前行将构成非法语句不能正确解析时，将自动插入分号&lt;/li&gt;&lt;li&gt;当新行以&lt;code&gt;}&lt;/code&gt;开头时，即代码块的结束位置，将自动插入分号&lt;/li&gt;&lt;li&gt;当以&lt;code&gt;return&lt;/code&gt;语句结束时, 在行末自动插入分号&lt;/li&gt;&lt;li&gt;当以&lt;code&gt;break&lt;/code&gt;语句结束时, 在行末自动插入分号&lt;/li&gt;&lt;li&gt;当以&lt;code&gt;throw&lt;/code&gt;语句结束时,在行末自动插入分号&lt;/li&gt;&lt;li&gt;当以&lt;code&gt;continue&lt;/code&gt;语句结束时, 在行末自动插入分号&lt;/li&gt;&lt;li&gt;当以 ES6 的 &lt;code&gt;yield&lt;/code&gt; 语句结尾时，在行末自动插入分号&lt;/li&gt;&lt;li&gt;&lt;code&gt;++&lt;/code&gt;、&lt;code&gt;--&lt;/code&gt; 后缀表达式作为新行的开始，在行首自动插入分号&lt;/li&gt;&lt;li&gt;源代码文件末尾自动插入号&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如上所示，如果没加分号，运行这段代码这段代码将报错。&lt;/p&gt;&lt;h3 id=&quot;不能省略分号的情况&quot;&gt;不能省略分号的情况&lt;/h3&gt;&lt;p&gt;通常，如果语句以&lt;code&gt;(&lt;/code&gt;、&lt;code&gt;[&lt;/code&gt;、 &lt;code&gt;/&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt;开头时，就有可能被解释为上一行语句的一部分。实际中以&lt;code&gt;/&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt;开头的语句很少。但是以&lt;code&gt;(&lt;/code&gt;、&lt;code&gt;[&lt;/code&gt;开头的语句则很常见，通常我可以在行首防御性的加上分号。&lt;/p&gt;&lt;p&gt;前面，我们了解分号的自动插入，现在我们来看一些示例&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;hey&lt;/span&gt; = &lt;span&gt;&#x27;hey&#x27;&lt;/span&gt;
[&lt;span&gt;&#x27;liu&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;liuxing&#x27;&lt;/span&gt;].&lt;span&gt;forEach&lt;/span&gt;(&lt;span&gt;console&lt;/span&gt;.&lt;span&gt;log&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;思考一秒种上面的结果是什么？运行这段代码会抛出&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;Uncaught&lt;/span&gt; &lt;span&gt;TypeError&lt;/span&gt;: &lt;span&gt;Cannot&lt;/span&gt; &lt;span&gt;read&lt;/span&gt; &lt;span&gt;property&lt;/span&gt; &lt;span&gt;&#x27;forEach&#x27;&lt;/span&gt; &lt;span&gt;of&lt;/span&gt; &lt;span&gt;undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基于规则 1 上面代码将会被解析成如下代码&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;hey&lt;/span&gt; = &lt;span&gt;&#x27;hey&#x27;&lt;/span&gt;[&lt;span&gt;&#x27;liu&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;liuxing&#x27;&lt;/span&gt;].&lt;span&gt;forEach&lt;/span&gt;(&lt;span&gt;console&lt;/span&gt;.&lt;span&gt;log&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看出，使用&lt;code&gt;[&lt;/code&gt;开头的语句，前面没有分号，很可能导致出错。&lt;/p&gt;&lt;p&gt;再来看一个&lt;code&gt;(&lt;/code&gt;开头的语句的示例代码&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; = &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;b&lt;/span&gt; = &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;c&lt;/span&gt; = &lt;span&gt;a&lt;/span&gt; + &lt;span&gt;b&lt;/span&gt;
(&lt;span&gt;a&lt;/span&gt; + &lt;span&gt;b&lt;/span&gt;).&lt;span&gt;toString&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会以为上面的代码结果是“3”吗？但是实际上它会抛出错误&lt;code&gt;b is not a function&lt;/code&gt;，因为根据 ASI 规则，它会被解析成如下代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; = &lt;span&gt;1&lt;/span&gt;;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;b&lt;/span&gt; = &lt;span&gt;2&lt;/span&gt;;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;c&lt;/span&gt; = &lt;span&gt;a&lt;/span&gt; + &lt;span&gt;b&lt;/span&gt;(&lt;span&gt;a&lt;/span&gt; + &lt;span&gt;b&lt;/span&gt;).&lt;span&gt;toString&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们就不一一介绍&lt;code&gt;/&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; 作为语句开头的情况了，这种情况比较少，大家可以自己试试。只需要记住语句以&lt;code&gt;(&lt;/code&gt;、&lt;code&gt;[&lt;/code&gt;、 &lt;code&gt;/&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt;开头时，语句前需要加上分号即可！&lt;/p&gt;&lt;p&gt;下面再在看看使用&lt;code&gt;return&lt;/code&gt;的情况，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;(() =&amp;gt; {
  &lt;span&gt;return&lt;/span&gt;
  {
    &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;Liu Xing&#x27;&lt;/span&gt;
  }
})()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你的期待值是不是返回一个带有 name 的对象，但是它却返回了&lt;code&gt;undefined&lt;/code&gt;。这是 ASI 自动在&lt;code&gt;return&lt;/code&gt;给加上了分号。在这儿就得正确的换行以确保代码正确运行。我们可以看出除了正确的的分号，我们还需要正确合理的换行来使代码结构更为清晰。&lt;/p&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;&lt;p&gt;我们了解了 JavaScript 的分号自动插入机制，知道了 JavaScript 什么时候会自动加入分号，在&lt;code&gt;(&lt;/code&gt;、&lt;code&gt;[&lt;/code&gt;、 &lt;code&gt;/&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt;开头时需要我们准确的加上分号。Automatic Semicolon Insertion 机制为我们提供了两种选择，加还是加分号？完全看你或你的团队的喜好了，现在我们也有&lt;a href=&quot;https://prettier.io/&quot;&gt;prettier&lt;/a&gt;、&lt;a href=&quot;https://eslint.org/&quot;&gt;Eslint&lt;/a&gt; 等工具来自动统一风格。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>