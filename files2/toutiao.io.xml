<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>684c27b6dded5951b4661229c22fe35e</guid>
<title>最近 GitHub 上很火的 7 个项目</title>
<link>https://toutiao.io/k/3ybk9zj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;

                

                
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a3e56eb6d72983555f220e95a5252488</guid>
<title>程序员可能必读书单推荐（一）</title>
<link>https://toutiao.io/k/2fstxk5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;article-content&quot;&gt;&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;&lt;p&gt;从最开始写博客到今天已经有将近七年的时间了，有很多博客的读者都向作者要过书单，但是一直以来这件事情都没有提上日程。作者一直都觉得分享书单和推荐书籍是一件很严肃的事情，大多数工程师的时间和精力都很有限，不希望因为推荐的不合适书籍而浪费大家的时间。&lt;/p&gt;&lt;p&gt;这篇文章以及可能存在的后续文章会审慎地推荐书籍，虽然所有的书都是作者读过并且严格挑选的，但是因为读者的背景不同会有完全不同的体验，这些额外的变量是作者无法控制的，希望各位读者可以理解。&lt;/p&gt;&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;&lt;p&gt;可能是因为大多数英文书籍的名字都很长，很多比较出名的书籍都有广为人知的缩写，今天要介绍的三本书籍也都有各自的缩写，SICP、CTMCP 和 DDIA，可能很多人都听过这三本书的名字，这三本书对作者都有很大的影响。&lt;/p&gt;&lt;h2 id=&quot;sicp&quot;&gt;SICP&lt;/h2&gt;&lt;p&gt;在这里首先要介绍和推荐的就是《计算机程序的构造和解释》&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote-ref&quot; role=&quot;doc-noteref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;（Structure and Interpretation of Computer Programs、SICP），相信很多人都曾经看到过这本书的推荐，而作者在这里也不能免俗。我们想谈一谈作者在阅读这本书时的一些经历和主观上的感受。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.draveness.me/2021-07-17-16261817468580-16265272036208.jpg&quot; alt=&quot;SICP&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;图 1 - 计算机程序的构造和解释&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;第一次听说这本书的时候是在大二，具体从哪里听到过这本书已经不记得了，最开始觉得这本书的名字有一点故弄玄虚，仅凭书名无法想象这本书的内容（这可能也是很多好书被埋没的原因）。因为之前一直接触的都是面向对象的编程语言，所以开始学习这本书时受到了极大的震撼，它为我理解计算机程序提供了非常不一样的视角。&lt;/p&gt;&lt;p&gt;作为一本介绍计算机程序的书，它选择一门非常小众的编程语言 Scheme&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote-ref&quot; role=&quot;doc-noteref&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;，Scheme 是 Lisp 的方言，作为 1970 年从 MIT 实验室中走出的语言，它却一开始就支持了函数式的编程范式。与今天复杂的编程语言相比，该语言中的概念和元素非常少，然而越是简单的工具越能揭示编写计算机程序时遇到的基本问题。&lt;/p&gt;&lt;p&gt;近些年来，函数式编程的思想基本上已经入侵了大多数的编程语言，无论是 Objective-C 中的代码块、C++ 中的成员函数引用、Java 和其他编程语言中的匿名函数都会有一些函数式编程的意味。然而 Scheme 作为根正苗红的函数式编程语言，我们能更清晰地理解函数式编程到底是什么，如何使用函数式的编程范式如何构建复杂的软件系统。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;(&lt;span&gt;let &lt;/span&gt;loop ((&lt;span&gt;n&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;))
  (&lt;span&gt;if &lt;/span&gt;(&amp;gt; n &lt;span&gt;10&lt;/span&gt;)
      &lt;span&gt;&#x27;&lt;/span&gt;()
      (cons n
    (&lt;span&gt;loop&lt;/span&gt; (+ n &lt;span&gt;1&lt;/span&gt;)))))

===&amp;gt; (&lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; &lt;span&gt;4&lt;/span&gt; &lt;span&gt;5&lt;/span&gt; &lt;span&gt;6&lt;/span&gt; &lt;span&gt;7&lt;/span&gt; &lt;span&gt;8&lt;/span&gt; &lt;span&gt;9&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;虽然学习这本书的过程异常艰难，作者大概花了三、四个月的时间阅读这本书，作者还将 1986 年该书的作者 Hal Abelson 和 Gerald Jay Sussman 在 HP 公司上课的视频作为辅助资料学习。我相信阅读这本书并观看相关的视频对于没有接触过函数式编程的读者来说，会从根本上改变对编程的看法。&lt;/p&gt;&lt;p&gt;作者在学习完 SICP 之后，还曾经痴迷于 Haskell 并且在 Coursera 上学习过函数式编程语言的相关课程，而函数式编程语言的学习也是对作者的影响最深的几个事件之一。&lt;/p&gt;&lt;h2 id=&quot;ctmcp&quot;&gt;CTMCP&lt;/h2&gt;&lt;p&gt;《计算机程序设计的概念、技术和模型》&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote-ref&quot; role=&quot;doc-noteref&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;（Concepts, Techniques and Models of Programming Language、CTMCP）是 Peter Van Roy 和 Seif Haridi 在 2004 年出版的大部头。这本书通过统一的方式介绍主流的全部&lt;strong&gt;编程范式&lt;/strong&gt;、它们之间的关系以及它们的具体应用。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.draveness.me/2021-07-17-16261817775579-16265272036223.jpg&quot; alt=&quot;CTMCP&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;图 2 - 计算机程序的概念、技术和模型&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;编程范式在今天应该不是一个令人感到陌生的名字，面向对象编程、函数式编程都是编程范式的一种，今天的编程语言往往由多个复杂的编程范式组成的。在某种程度上，我们可以将编程语言理解为编程范式的集合。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.draveness.me/2021-07-17-programming-paradigms-16265272036231.png&quot; alt=&quot;programming-paradigms&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;图 3 - 编程范式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这本书的作者为了展示书中介绍的不同编程范式，特意设计并实现了名为 Oz 的多编程范式的编程语言&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote-ref&quot; role=&quot;doc-noteref&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;。该编程语言包含了大多数主流的编程范式，其中包括逻辑、函数式、命令式、面向对象、约束式、分布式和并行编程，这种设计使得比较不同范式时不会遇到上下文不同导致的问题，避免了因为编程范式实现细节的不同而陷入的琐碎问题。&lt;/p&gt;&lt;p&gt;如果对这本书没有那么感兴趣，其实快速阅读该书的前九章就足够了，感兴趣的读者也可以阅读剩余的内容，虽然书中有很多代码，但是因为语言不是主流的编程语言，所以可能会遇到示例代码无法跑通的情况。我们在阅读这本书时也应该更加关注概念以及形而上的知识，而不是形而下的一些具体实现。&lt;/p&gt;&lt;h2 id=&quot;ddia&quot;&gt;DDIA&lt;/h2&gt;&lt;p&gt;最后要介绍的是豆瓣上评分 9.7 分的《设计数据密集型应用》&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote-ref&quot; role=&quot;doc-noteref&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;（Designing Data-Intensive Applications、DDIA），该书是 2018 年出版的一本新书，初看这个名字可能会误认为这是仅仅给数据开发者阅读的书籍，但是作者相信这本书能给所有的开发者带来不同的阅读体验。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.draveness.me/2021-07-17-DDIA-16265278665012.png&quot; alt=&quot;DDIA&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;图 4 - 设计数据密集型应用&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;该书的第一部分是围绕数据本身展开的，其中介绍了数据的模型、查询语言、存储和获取以及编码方式；第二部分介绍了分布式的数据应该如何处理，其中包括副本、分片、事务、一致性和共识等内容；最后一部分主要介绍的是衍生数据的处理，其中包括批处理、流处理和未来的数据系统，而真正与研究大数据开发方向的同学关系紧密也是这一部分。&lt;/p&gt;&lt;p&gt;作者认为，虽然这本书没有创新性的引入一些新的概念和技术，书中描述的大多数问题和解决方案都能在网络上找到，但是这本书的阅读可以帮助我们重新构建系统性的知识体系、打通不同知识之间的联系。它能让我们在看待数据和分布式系统时带着更加通透的感觉，而这也是作者想要推荐这本书的目的。&lt;/p&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;&lt;p&gt;在这里还是想强调一点，上面的这三本书都是作者阅读过的书籍，这里做的评价都仅仅出于作者的主观判断。虽然作者确实从这三本书中获得了大家所说的 “Aha moment”，但是这三本书都是大部头，认真阅读这三本书可能需要花费大半年的时间，作者不能对各位读者自身的阅读体验负责，也希望各位读者在选择输入源时有自己的判断、也更加谨慎地思考。&lt;/p&gt;&lt;p&gt;如果各位读者对这个系列比较感兴趣，作者在后面还会推荐一些自己阅读过的其他书籍，也欢迎大家在评论中留下带给自己 “Aha moment” 的书籍，我们可以一同学习和讨论。&lt;/p&gt;&lt;section class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;计算机程序的构造和解释(原书第2版) &lt;a href=&quot;https://book.douban.com/subject/1148282/&quot;&gt;https://book.douban.com/subject/1148282/&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;footnote-backref&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;Wikipedia: Scheme &lt;a href=&quot;https://en.wikipedia.org/wiki/Scheme_(programming_language)&quot;&gt;https://en.wikipedia.org/wiki/Scheme_(programming_language)&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;footnote-backref&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;Concepts, Techniques and Models of Programming Language &lt;a href=&quot;https://book.douban.com/subject/1782316/&quot;&gt;https://book.douban.com/subject/1782316/&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;footnote-backref&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;Wikipedia Oz (programming language)
&lt;a href=&quot;https://en.wikipedia.org/wiki/Oz_(programming_language)&quot;&gt;https://en.wikipedia.org/wiki/Oz_(programming_language)&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;footnote-backref&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;数据密集型应用系统设计 &lt;a href=&quot;https://book.douban.com/subject/30329536/&quot;&gt;https://book.douban.com/subject/30329536/&lt;/a&gt; &lt;a href=&quot;#fnref:5&quot; class=&quot;footnote-backref&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;img src=&quot;https://img.draveness.me/2020-03-11-15839264230785-wechat-qr-code.png&quot; alt=&quot;wechat-account-qrcode&quot;/&gt;&lt;h3&gt;转载申请&lt;/h3&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by/4.0/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; src=&quot;https://img.draveness.me/creative-commons.png&quot;/&gt;&lt;/a&gt;&lt;p&gt;本作品采用&lt;/p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by/4.0/&quot;&gt;知识共享署名 4.0 国际许可协议&lt;/a&gt;&lt;p&gt;进行许可，转载时请注明原文链接，图片在使用时请保留全部内容，可适当缩放并在引用处附上图片所在的文章链接。&lt;/p&gt;&lt;h3&gt;文章图片&lt;/h3&gt;&lt;p&gt;你可以在 &lt;/p&gt;&lt;a href=&quot;/sketch-and-sketch&quot;&gt;技术文章配图指南&lt;/a&gt;&lt;p&gt; 中找到画图的方法和素材。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6ff4821513a25ab4751412d8b54949ba</guid>
<title>微服务的灾难：我做测试的时候越来越痛苦了</title>
<link>https://toutiao.io/k/1bkc3dq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小咸鱼经过前文所提到的折磨人的 “微服务拆分、微服务环境” 问题后，终于顺顺利利的上到了测试环境进行测试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候开发、测试同学又闹新的头疼了，测了一轮下来。发现好好的。结果发现一上生产就有一些地方有问题，发现没测到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这到底是为什么呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;背景&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在以往，小咸鱼他们团队都是传统的大单体应用。也就是一体化应用，包含了前端、后端等模块，具备天然的协调性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;测试同学能够很方便的就直接测到前后端接口。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;测试能够直接对系统本身进行集成测试。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但现在，做了微服务化（雏形）后，小咸鱼他们就翻车了，为什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为考虑到微服务，微服务就是向往单拎一个服务出来，都可以独立修改，独立发布。于是小咸鱼提交了一个迭代的几个服务变更，想着实现一把 “敏捷” 发布。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果一上线就炸了，一大堆的 BUG，光荣加班到晚上 12 点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这实质上是缺乏端到端测试的一个问题，单服务，无法明确系统正在正常运行。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;端到端测试&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在测试的质量保障上，我们要站在用户视角去验证这个系统，保障整体的系统可用性，而不是单纯的前端 BFF，又或是后端 Server 的某些接口能够正常运行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在定义上&lt;strong&gt;端到端测试（End-to-end Test）是一种用于测试整个应用程序的流程是否符合预期的测试技术&lt;/strong&gt;。测试同学会模拟用户真实的使用场景，通过用户界面测试应用程序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.45575757575757575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4iaKs1RSicQy22ntzR3ItKACvkKVPErT1JOjDaqmp7viaahVYxrkztj9J76Mqs1iau4edQyQq4hABMt6A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1650&quot;/&gt;&lt;figcaption&gt;端到端测试&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与小咸鱼团队那种单纯只测接口的方式不同，端到端测试是面向业务的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其目的是&lt;strong&gt;验证应用程序系统整体上是否符合业务诉求&lt;/strong&gt;，主要通过 GUI 测试，也会有人称其为集成测试、系统测试，黑盒测试。不少公司会将这几种混在一起。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实则在细节定义上各有不同：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.30625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4iaKs1RSicQy22ntzR3ItKACvBz21iauIhbWpTicUxm4ibzBV6h6kHwndJp0AdUGkxkOibwibFWGfTln9aOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1440&quot;/&gt;&lt;figcaption&gt;图来自网络&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文不是测试方向文章，因此不深究。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;问题症结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么小咸鱼他们团队主要是缺乏端到端的这类集成测试的校验。直接在迭代中，把几个微服务一改，接口跑几下，以为就是合理通过的了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;真实情况：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一上到生产，发现压根不是这么回事。因为多个变更结合在一起，很有可能会导致系统原有的行为发生改变。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;即使是你单个服务接口没违背，也不一定能保证其他在同个时段上的服务没问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在业内执行情况来看，业务迭代的非常快，接口自动化大多比较缺乏。又或是以请外包人员的方式来做，大多是面向存量补接口。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以知道单纯验证接口，不走端到端类别的集成测试，是非常风骚的。设身处地的想想如下场景：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有没有见过一些开发，他在本地测好接口后，一和前端集成上到测试环境。测试人员，一点一个报错，正向流程压根跑不通。测试同学苦不堪言，开发同学一下身背数十 BUG，齐齐加班。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但开发同学大呼我在本地的接口测试的完全没问题。归根结底，小咸鱼团队的问题，还是因为缺乏端到端测试，缺乏齐全的接口自动化用例导致的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;解决思路&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在每个迭代中，实际上每个团队都会专注于系统中所使用的所有服务中的某个服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;系统中存在的大量微服务和子系统的功能和较窄的测试空间，有可能会导致没有发现系统或服务中存在的隐患。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样测试，问题的出现，甚至是必然的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在解决思路上常见于：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;新增预发布环境，做类似端到端测试的集成测试，确保系统集成后会是可用的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;尝试更高覆盖率的接口自动化测试，大多数公司会针对新的，做增量或存量的自动化测试用例的补全。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;借助线上、线下数据在 CI/CD 时进行自动化测试，实现更全面真实的测试用例。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业内基本是数种思路齐头并进，最常见的是第一种方式。最有效，但开销也是最大的，并且会导致预发布环境的一定阻塞。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随后第二第三种大多都会紧接着跟进，具体程度会根据公司的软硬实力（例如：行政手段、基础设施等）不同而做的深度不同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;甚至前几天听小咸鱼说，面试时还听到不少公司延伸了外包岗位专门做一块的内容。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽说这个问题并不是 “微服务” 架构所独有的。但是显然微服务化后放大了测试的深坑问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多公司的流程和措施都是为了保障一些东西，像小咸鱼团队这样，被网上布道师例举的优点遮蔽了双眼，后面又被迫把端到端测试加回来的不在少数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;你们的团队又是如何高效解决这个问题的呢，欢迎在评论区留言和交流&lt;/strong&gt;！&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxMDI4MDc1NA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4iac2xQZIq5icSiaTepuae8zLIUMiaxibbUM8ic735ewo6e89GRtjGbUBlgNYibwCjAicglQcvz6dCQ6yTKOw/0?wx_fmt=png&quot; data-nickname=&quot;脑子进煎鱼了&quot; data-alias=&quot;eddycjy&quot; data-signature=&quot;分享计算机基础、Go 语言、微服务架构和系统设计；著有图书《Go 语言编程之旅》。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;关注煎鱼，吸取他的知识 👆&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.07106598984771574&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/486RHs1WbcgGib6o96dHbvGUGGwPicd8wusUGH1cXR29tM4bO0lNzialzkQhvU6m5ZUdaKibmcF2OQayjMe9Bia6iaXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;394&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是煎鱼。高一折腾过前端，参加过国赛拿了奖，大学搞过 PHP。现在整 Go，在公司负责微服务架构等相关工作推进和研发。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;从大学开始靠自己赚生活费和学费，到出版 Go 畅销书《Go 语言编程之旅》，再到获得 GOP（Go 领域最有观点专家）荣誉，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247483854&amp;amp;idx=1&amp;amp;sn=ec422fbf4d846975f2930ddeb5e81373&amp;amp;chksm=f9041493ce739d85a4b987eece14da627206cdad798f645cc770868312e4a22b6df24804f186&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;点击蓝字查看我的出书之路&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;点击蓝字查看我的出书之路&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;日常分享高质量文章，输出 Go 面试、工作经验、架构设计，&lt;span&gt;加微信拉读者交流群，记得点赞！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>877afa218283b3f9a97bed9ea6cc61fd</guid>
<title>OkHttp 透明压缩，收获性能 10 倍，外加故障一枚</title>
<link>https://toutiao.io/k/ntld12n</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;174&quot; data-backw=&quot;365&quot; data-ratio=&quot;0.4767123287671233&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/cvQbJDZsKLp6wejHtKTRbqqQyt0wMk9K1wNtuwRqQTJAPOJ1KiaqSeSRbIJRTicVicKpDKRndBodY2DBNN20tvWwA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;365&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;不羡鸳鸯不羡仙，一行代码调半天。原创：小姐姐味道（微信公众号ID：xjjdog），欢迎分享，转载请保留出处。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要使用&lt;code&gt;OkHttp&lt;/code&gt;，一定要知道它的&lt;code&gt;透明压缩&lt;/code&gt;，否则死都不知道怎么死的；或者活也不知道为什么活的不舒坦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反正不是好事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么叫&lt;code&gt;透明压缩&lt;/code&gt;呢？OkHttp在发送请求的时候，会自动加入gzip请求头&lt;code&gt;Accept-Encoding:gzip&lt;/code&gt;。所以，当返回的数据带有gzip响应头时&lt;code&gt;Content-Encoding=gzip&lt;/code&gt;，OkHttp会自动帮我们解压数据。（&lt;code&gt;Accept-Encoding&lt;/code&gt;和&lt;code&gt;Content-Encoding&lt;/code&gt;是一对请求头，分别对应着请求和返回）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么要进行压缩呢？因为它能大幅减少传输的容量。像一些CPU资源占用不高的服务，比如Kafka，我们就可以开启gzip压缩，加快信息的流转。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个压缩比有多高呢？可以看下下面实实在在的截图，对于普通的&lt;code&gt;xml&lt;/code&gt;或者&lt;code&gt;json&lt;/code&gt;，数据可以由&lt;code&gt;9MB&lt;/code&gt;压缩到&lt;code&gt;350KB&lt;/code&gt;左右，压缩比足足达到了&lt;code&gt;26&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.32142857142857145&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLqmQ2F5niahum1aYS2OFno1Fjaf2WDUVofZkQh0SvECTm0NkbG2p8GKgicKJ64o1vGSsVD10x2hJSsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;它让系统性能飞起来&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SpringCloud&lt;/code&gt;微服务体系，现在有非常多的公司在用。即使是一些传统企业，一些大数据量的&lt;code&gt;toB&lt;/code&gt;企业，也想尝一尝螃蟹。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于一个简单的SpringBoot服务，我们只需要在yml文件中配置上相应的压缩就可以了。这样，我们就打通了浏览器到Web服务的这一环。这种压缩方式，对于大数据量的服务来说，是救命式的！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体配置如下。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;server:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;port:&lt;/span&gt; &lt;span&gt;8082&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;compression:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;enabled:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;min-response-size:&lt;/span&gt; &lt;span&gt;1024&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;mime-types:&lt;/span&gt; &lt;span&gt;[&quot;text/html&quot;,&quot;text/xml&quot;,&quot;application/xml&quot;,&quot;application/json&quot;,&quot;application/octet-stream&quot;]&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它所对应的Spring配置类是&lt;code&gt;org.springframework.boot.web.server.Compression&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是不要高兴太早。由于是分布式环境，这里面调用链就会长一些。即使是在内网，动辄十几MB的网络传输，也会耗费可观的时间。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5225464190981433&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLqmQ2F5niahum1aYS2OFno1FoCmJcIMHwqZa9moiaYUlnmz44BEH9XK7zOSUYFLH2qqibtvbjjrl1g5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;754&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图，一个请求从浏览器到达真正的服务节点，可能要经过很多环节。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;nginx转发请求到微服务网关zuul&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;zuul转发到具体的微服务A&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微服务A通过Feign接口调用微服务B&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们的数据，大多数是由微服务B提供的，那么上面的任何一个环节传输效率慢，都会影响请求的性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，我们需要开启Feign接口的gzip压缩。使用OkHttp的透明代理是最简单的方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，在项目中引入feign的jar包。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;dependency&amp;gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.github.openfeign&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;feign-okhttp&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次，在yml文件中启用OkHttp作为feign的客户端请求工具包。稳妥起见，我们同时屏蔽了httpclient，这个东西太重太老了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;feign:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;httpclient:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;enabled:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;okhttp:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;enabled:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到此为止，我们就可以享受OkHttp的透明代理带来的便捷性了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如你的应用数据包大，调用链长，这种方式甚至会给你的服务带来&lt;code&gt;数秒&lt;/code&gt;的性能力提升。xjjdog就曾经靠调整几个参数，就让一个蜗牛系统飞了起来。大家惊呼：原来B端也可以C一下。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;OkHttp是如何实现透明压缩的？&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OkHttp对于透明压缩的处理，是通过拦截器来做的。具体的类，就是&lt;code&gt;okhttp3.internal.http.BridgeInterceptor&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体代码如下，当判断没有&lt;code&gt;Accept-Encoding&lt;/code&gt;头的时候，就自行加入一个。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// If we add an &quot;Accept-Encoding: gzip&quot; header field we&#x27;re responsible for also decompressing&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// the transfer stream.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;boolean&lt;/span&gt; transparentGzip = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (userRequest.header(&lt;span&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;) == &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; userRequest.header(&lt;span&gt;&quot;Range&quot;&lt;/span&gt;) == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;  transparentGzip = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;  requestBuilder.header(&lt;span&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;, &lt;span&gt;&quot;gzip&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最关键的代码在下面。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; (transparentGzip&lt;br/&gt;    &amp;amp;&amp;amp; &lt;span&gt;&quot;gzip&quot;&lt;/span&gt;.equalsIgnoreCase(networkResponse.header(&lt;span&gt;&quot;Content-Encoding&quot;&lt;/span&gt;))&lt;br/&gt;    &amp;amp;&amp;amp; HttpHeaders.hasBody(networkResponse)) {&lt;br/&gt;  GzipSource responseBody = new GzipSource(networkResponse.body().&lt;span&gt;source&lt;/span&gt;());&lt;br/&gt;  Headers strippedHeaders = networkResponse.headers().newBuilder()&lt;br/&gt;      .removeAll(&lt;span&gt;&quot;Content-Encoding&quot;&lt;/span&gt;)&lt;br/&gt;      .removeAll(&lt;span&gt;&quot;Content-Length&quot;&lt;/span&gt;)&lt;br/&gt;      .build();&lt;br/&gt;  responseBuilder.headers(strippedHeaders);&lt;br/&gt;  String contentType = networkResponse.header(&lt;span&gt;&quot;Content-Type&quot;&lt;/span&gt;);&lt;br/&gt;  responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody)));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到&lt;code&gt;if&lt;/code&gt;语句里，有三个条件。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;程序没有设置&lt;code&gt;Accept-Encoding&lt;/code&gt;，启用了透明压缩&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端有&lt;code&gt;Content-Encoding&lt;/code&gt;头，并启用了gzip压缩&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有数据包&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只有同时满足这三个条件，OkHttp的透明压缩才会起作用，帮我们自动解压。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;它挖的坑有点深&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可惜的是，上面的关键代码，只有&lt;code&gt;if&lt;/code&gt;，没有&lt;code&gt;else&lt;/code&gt;，也就是当其中的任何一个条件不满足，后端的数据包将原封不动的返回。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、3两个条件是没有什么问题的，原样返回后端数据并没有什么损害，问题就出在第一个条件里。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你在代码中，使用了下面的代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Request.Builder builder = chain.request()&lt;br/&gt;                .newBuilder()&lt;br/&gt;                .addHeader(&lt;span&gt;&quot;Accept&quot;&lt;/span&gt;, &lt;span&gt;&quot;application/json&quot;&lt;/span&gt;)&lt;br/&gt;                .addHeader(&lt;span&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;, &lt;span&gt;&quot;gzip&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是手动设置了&lt;code&gt;Accept-Encoding&lt;/code&gt;头信息。这很常见，因为这体现了程序员思维的严谨。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正是这种严谨，造成了问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如你的后端应用刚开始是没有开启&lt;code&gt;gzip&lt;/code&gt;压缩的，这时候两者相安无事；但如果你的后端应用突然有一天开启了&lt;code&gt;gzip&lt;/code&gt;压缩，你的这段代码将全部over。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;原因就是，服务端gzip数据包会原样返回，你需要手动处理gzip数据包。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，不加是好事，加了反而会坏事，除非你想自己处理gzip数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于&lt;code&gt;OkHttp&lt;/code&gt;在&lt;code&gt;Android&lt;/code&gt;上应用也非常广泛，如果你不知道这个细节，造成的后果就是灾难性的。客户端更新慢，只能老老实实回退服务端了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;智能的背后，总有些肉眼不可见的细节。就像是xjjdog纯情的背后，总有一份羞涩。只有深入了解，你才会知道它的美。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;作者简介：&lt;strong&gt;小姐姐味道&lt;/strong&gt;  (xjjdog)，一个不允许程序员走弯路的公众号。聚焦基础架构和Linux。十年架构，日百亿流量，与你探讨高并发世界，给你不一样的味道。我的个人微信xjjdog0，欢迎添加好友，进一步交流。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0ee2031ad8177221e0587ebf19abbf16</guid>
<title>阿里面试：三个臭皮匠，顶个诸葛亮</title>
<link>https://toutiao.io/k/jnm3g0l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;大家好，我是道哥。今天，我们来看一道阿里巴巴的面试题目，典型且有趣。问题如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有n个臭皮匠和1个诸葛亮，并且已知他们的智商，请判断是否存在三个臭皮匠的智商之和，刚好等于诸葛亮的智商。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;很显然，这是典型的&lt;span&gt;三数之和&lt;/span&gt;问题。为方便分析，假设&lt;/span&gt;&lt;span&gt;n=5&lt;/span&gt;&lt;span&gt;，臭皮匠们的智商值是&lt;/span&gt;&lt;span&gt;{5, 3, 4, 2, 6}&lt;/span&gt;&lt;span&gt;，诸葛亮的智商值是&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span&gt;接下来，我们循序渐进地看看各种思路。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;345&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5973154362416108&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPZ1Ggm2yJ7mlyLw3tkbgWcXX1gQoXxcWACXzfXBBT5dkPO0Xsq344XPHs5lL9n22w0ib36q6CiaSrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;894&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;暴力枚举&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;枚举法是最容易想到的办法，也就是说，把&lt;span&gt;{5, 3, 4, 2, 6}&lt;/span&gt;中所有可能的三个数的和，都枚举计算一遍，说白了，就是暴力尝试。且看：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;273&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4717868338557994&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPZ1Ggm2yJ7mlyLw3tkbgWcVKN5CR0ickzglrYv4TIhPMyK94PKf4zxKkAyaXicJgfQkBv6qmp4YyBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1276&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;281&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4873417721518987&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPZ1Ggm2yJ7mlyLw3tkbgWcMzx9vGSyArhBwictHTYicmicLDrvNfPQicKn0wjP5PBbTScr9g5sUl7y2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1264&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.48822605965463106&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPZ1Ggm2yJ7mlyLw3tkbgWcUz6KeL1cq1KteLEEoKGbSSiavAmCXHlYB3axm2AYS9DmRSVm1PRD6HA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4818897637795276&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPZ1Ggm2yJ7mlyLw3tkbgWcnTqiax1kicKUYddkO7cZXUvxA5vDZz41n5hZBfCmhc5pHxqCM4icTRZiaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1270&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;接下来，我们以表格的形式，更完整地呈现：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;table align=&quot;center&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;3&quot; align=&quot;center&quot;&gt;&lt;span&gt;臭皮匠智商值&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;&lt;span&gt;智商和&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;5&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;3&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;4&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;12&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;5&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;3&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;2&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;10&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;5&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;3&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;6&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;14&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;5&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;4&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;2&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;11&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;5&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;4&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;6&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;15&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;5&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;2&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;6&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;13&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;3&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;4&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;2&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;9&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;3&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;4&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;6&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;13&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;3&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;2&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;6&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;11&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;4&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;2&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;6&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot; align=&quot;center&quot;&gt;12&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可见，不存在三个臭皮匠的智商之和等于20. &lt;/span&gt;&lt;span&gt;这就是所谓的枚举法，简单，直白，而且暴力，时间复杂度是O(N*N*N)，自然是没法通过阿里巴巴面试的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;顺便附上上述思路的代码，请注意，使用了三层循环，目标数字为&lt;/span&gt;&lt;span&gt;a[i], a[j], a[k]&lt;/span&gt;&lt;span&gt;, 如下：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; a[], &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; ZhuGeLiang)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; j = i + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;; j &amp;lt; n; j++)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; k = j + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;; k &amp;lt; n; k++)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ( a[i] + a[j] + a[k] == ZhuGeLiang )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; a[] = {&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; n = &lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(a) / &lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(a[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; ZhuGeLiang = &lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (can(a, n, ZhuGeLiang))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yes&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;no&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哈希查找&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;在暴力枚举方法中，时间复杂度不符合要求。这里的根本原因其实就是：在查找a[k]时，用的是时间复杂度为O(N)的线性查找。为什么这样说呢？且看暴力枚举的本质：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;405&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7012195121951219&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPZ1Ggm2yJ7mlyLw3tkbgWcxsfCiaHZUws9pqicoF9cnW1IckiaibswU0KM3fXqwx3mmibNfbq1YS961sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1312&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很显然，在剩余的数字中查找时，暴力枚举方法使用的是线性查找。那么，有没有更好的查找方式呢？当然有啦，用哈希查找，时间复杂度就是O(1)了：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;401&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.69558599695586&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPZ1Ggm2yJ7mlyLw3tkbgWcrZYW6U0P6mk7UvTUlS35M5CT2qGQBAnlPQZbZrY7JcYmvN8Vr0QezQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1314&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同理，我们选定5和4后，只需要用哈希查找判断剩余数字中是否存在11即可，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;508&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8791208791208791&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPZ1Ggm2yJ7mlyLw3tkbgWc8mnledCic2uLgG5Tcib1msYbukEQOvuJPQNIjQEDlicMSgvlaw9ZW0bbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么，在整个算法中，我们对第一个a[i]和第二个数a[j]进行两层遍历，然后用20减去这两数之和，得到目标差delta，然后使用哈希查找，判断delta是否存在于剩余数字中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于使用了两层循环，所以整个算法的时间复杂度为O(N*N)，由于使用了哈希表，所以整个算法的空间复杂度为O(N)，基本能满足题目的要求，可以通过阿里巴巴的面试。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;双指针法&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;在哈希查找中，我们是固定a[i]和a[j]去找delta,  其实，我们还可以固定a[i]，去找两数之和，此时，需要先进行排序，结果为：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;198&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3419773095623987&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPZ1Ggm2yJ7mlyLw3tkbgWcwSKK8fV7Oz7wGW7rAdibwJHLN6q8icghY8a5feb8e0Lxq1ZFQiaemhPibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1234&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接下来，我们先固定a[i]的值，需要找出x和y满足如下条件:&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;x + y = 20 - a[i]&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从第一个数字开始，a[i] = 2, 所以要在剩余数字中找和为18的两个数：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;278&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.481335952848723&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPZ1Ggm2yJ7mlyLw3tkbgWcaolTCib7rh7iaQE209OjIwFaVlvC0UVib9qKjuwx1EYfDmBA8iaRLiaEftA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1018&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;尤其可见，我们把判断三数之和的问题，简化为了判断两数之和的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;两数之和的判断，我们使用双指针，分别指向头和尾(已经排序了)，如下：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6078431372549019&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPZ1Ggm2yJ7mlyLw3tkbgWc4OgKoppRdRj0OzykbU1cDuuibOXF5zCtpicXJI4w0Uqe4QRZDWRe1HYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1020&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可&lt;/span&gt;&lt;span&gt;别忘了，我们的目标是找两数之和为18，显然，9小了，需要把左指针右移来试探：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;353&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6096153846153847&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPZ1Ggm2yJ7mlyLw3tkbgWcFibRiaEeh71MR2IdOfJeqoMlOblicdH0znY4VpmYebDeFHgvMV3UJiaicDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1040&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;显然，和为10，仍比18小，需要继续把左指针右移来试探，如下：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6081081081081081&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPZ1Ggm2yJ7mlyLw3tkbgWc1JjbvtIN2yOx846mSX1Ric5BYetvbLNTtYve7mFjrATP5Bfuvr9mONg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1036&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;显然，和为11，仍比18小，此时没法继续右移了。到此为止，发现a[i]=2时，没法找到合适的x和y，使得三数之和为20.&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接下来，就要继续遍历a[i]了，刚好a[i]=3, 接下来就是要&lt;/span&gt;&lt;span&gt;找出x和y满足如下条件:&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;x + y = 17&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;309&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5352112676056338&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPZ1Ggm2yJ7mlyLw3tkbgWc9FGPb8AQ5EKmGDJcqjdibXD6IMCXT6754lPEnRgIQXYEjMmC3q0Ns1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;994&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可见，整个算法的本质就是，排序后，固定a[i], 然后通过双指针的移动来找两数之和。遍历a[i]需要O(N)次循环，双指针法需要O(N)次循环。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此，整个算法的时间复杂度是O(N*N), 空间复杂度完全依赖于排序。以快排为例，平均空间复杂度为O(logN). 该算法能通过阿里巴巴面试。&lt;br/&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;三数之和，是常见的笔试面试题目，大家都应该重视起来。&lt;/span&gt;&lt;span&gt;我们也会一步一个脚印，争取每篇文章讲清讲透一件事，也希望大家阅读后有所收获，心情愉快。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.39285714285714285&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gOHOmprNpTicrgVCTXNHL6LgiaAefY06E2CsS34qRP2poN0FsaN7aG3nkQNyfvzs5QkXAeja4q14Jew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;112&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg5NDYzMDEyNQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/sz_mmbiz_png/L4JrPnCb4gPXs5h6rJYicicc9DnbvsGiapLbRc2QflDqOeaGQ1azM5XGwem8HWCo2bWFcj05X3ls02xq15BTWLXoA/0?wx_fmt=png&quot; data-nickname=&quot;爱码有道&quot; data-alias=&quot;aimayoudao&quot; data-signature=&quot;道哥：CSDN前30名，曾混迹于BAT大厂。公众号：爱码有道，讲解计算机基础、网络、数据结构、算法、C++、Java、Golang等多方面的编程知识。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>