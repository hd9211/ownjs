<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>59b0073567bd95b462182cded9a48649</guid>
<title>用 Pandas 做用户留存分析</title>
<link>https://toutiao.io/k/13jbibt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;%matplotlib inline
import matplotlib 
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
sns.set(rc={&quot;figure.figsize&quot;: (16, 10)})
matplotlib.rc(&#x27;font&#x27;, family=&#x27;simhei&#x27;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们聚合出了一份 2019 年度的用户下单样例数据，有三个字段，首单月，下单月，用户量&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;df1 = pd.read_csv(&quot;./data/order_user_cnt_cohort_sample_data.csv&quot;)
df1.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th/&gt;
      &lt;th&gt;首单年月&lt;/th&gt;
      &lt;th&gt;下单年月&lt;/th&gt;
      &lt;th&gt;user_cnt&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2019-01&lt;/td&gt;
      &lt;td&gt;2019-01&lt;/td&gt;
      &lt;td&gt;88760&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-01&lt;/td&gt;
      &lt;td&gt;2019-02&lt;/td&gt;
      &lt;td&gt;9552&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-02&lt;/td&gt;
      &lt;td&gt;2019-02&lt;/td&gt;
      &lt;td&gt;87155&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2019-03&lt;/td&gt;
      &lt;td&gt;2019-03&lt;/td&gt;
      &lt;td&gt;101254&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2019-02&lt;/td&gt;
      &lt;td&gt;2019-03&lt;/td&gt;
      &lt;td&gt;10453&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;创建透视表，其实透视表就可以看出留存情况了，只是没那么好理解&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;df2 = df1.pivot_table(
    index=[&#x27;首单年月&#x27;], columns=&#x27;下单年月&#x27;, values=&#x27;user_cnt&#x27;)
df2
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;下单年月&lt;/th&gt;
      &lt;th&gt;2019-01&lt;/th&gt;
      &lt;th&gt;2019-02&lt;/th&gt;
      &lt;th&gt;2019-03&lt;/th&gt;
      &lt;th&gt;2019-04&lt;/th&gt;
      &lt;th&gt;2019-05&lt;/th&gt;
      &lt;th&gt;2019-06&lt;/th&gt;
      &lt;th&gt;2019-07&lt;/th&gt;
      &lt;th&gt;2019-08&lt;/th&gt;
      &lt;th&gt;2019-09&lt;/th&gt;
      &lt;th&gt;2019-10&lt;/th&gt;
      &lt;th&gt;2019-11&lt;/th&gt;
      &lt;th&gt;2019-12&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;首单年月&lt;/th&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-01&lt;/th&gt;
      &lt;td&gt;88760.0&lt;/td&gt;
      &lt;td&gt;9552.0&lt;/td&gt;
      &lt;td&gt;8207.0&lt;/td&gt;
      &lt;td&gt;6403.0&lt;/td&gt;
      &lt;td&gt;5178.0&lt;/td&gt;
      &lt;td&gt;4894.0&lt;/td&gt;
      &lt;td&gt;3343.0&lt;/td&gt;
      &lt;td&gt;3063.0&lt;/td&gt;
      &lt;td&gt;2443.0&lt;/td&gt;
      &lt;td&gt;1966.0&lt;/td&gt;
      &lt;td&gt;3212.0&lt;/td&gt;
      &lt;td&gt;2278.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-02&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;87155.0&lt;/td&gt;
      &lt;td&gt;10453.0&lt;/td&gt;
      &lt;td&gt;6388.0&lt;/td&gt;
      &lt;td&gt;5511.0&lt;/td&gt;
      &lt;td&gt;4673.0&lt;/td&gt;
      &lt;td&gt;3335.0&lt;/td&gt;
      &lt;td&gt;3024.0&lt;/td&gt;
      &lt;td&gt;2503.0&lt;/td&gt;
      &lt;td&gt;1815.0&lt;/td&gt;
      &lt;td&gt;2889.0&lt;/td&gt;
      &lt;td&gt;1991.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-03&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;101254.0&lt;/td&gt;
      &lt;td&gt;10673.0&lt;/td&gt;
      &lt;td&gt;8068.0&lt;/td&gt;
      &lt;td&gt;6835.0&lt;/td&gt;
      &lt;td&gt;4769.0&lt;/td&gt;
      &lt;td&gt;4180.0&lt;/td&gt;
      &lt;td&gt;3531.0&lt;/td&gt;
      &lt;td&gt;2671.0&lt;/td&gt;
      &lt;td&gt;4078.0&lt;/td&gt;
      &lt;td&gt;2841.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-04&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;102449.0&lt;/td&gt;
      &lt;td&gt;10497.0&lt;/td&gt;
      &lt;td&gt;9495.0&lt;/td&gt;
      &lt;td&gt;5869.0&lt;/td&gt;
      &lt;td&gt;5164.0&lt;/td&gt;
      &lt;td&gt;4244.0&lt;/td&gt;
      &lt;td&gt;3177.0&lt;/td&gt;
      &lt;td&gt;5519.0&lt;/td&gt;
      &lt;td&gt;3600.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-05&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;89913.0&lt;/td&gt;
      &lt;td&gt;11471.0&lt;/td&gt;
      &lt;td&gt;6562.0&lt;/td&gt;
      &lt;td&gt;5420.0&lt;/td&gt;
      &lt;td&gt;4240.0&lt;/td&gt;
      &lt;td&gt;3090.0&lt;/td&gt;
      &lt;td&gt;5278.0&lt;/td&gt;
      &lt;td&gt;3611.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-06&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;82524.0&lt;/td&gt;
      &lt;td&gt;7230.0&lt;/td&gt;
      &lt;td&gt;5491.0&lt;/td&gt;
      &lt;td&gt;4311.0&lt;/td&gt;
      &lt;td&gt;3013.0&lt;/td&gt;
      &lt;td&gt;6027.0&lt;/td&gt;
      &lt;td&gt;3579.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-07&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;66243.0&lt;/td&gt;
      &lt;td&gt;6927.0&lt;/td&gt;
      &lt;td&gt;4457.0&lt;/td&gt;
      &lt;td&gt;3309.0&lt;/td&gt;
      &lt;td&gt;5105.0&lt;/td&gt;
      &lt;td&gt;3090.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-08&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;63119.0&lt;/td&gt;
      &lt;td&gt;5325.0&lt;/td&gt;
      &lt;td&gt;3454.0&lt;/td&gt;
      &lt;td&gt;4656.0&lt;/td&gt;
      &lt;td&gt;3245.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-09&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;55891.0&lt;/td&gt;
      &lt;td&gt;4336.0&lt;/td&gt;
      &lt;td&gt;5745.0&lt;/td&gt;
      &lt;td&gt;3748.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-10&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;45593.0&lt;/td&gt;
      &lt;td&gt;5389.0&lt;/td&gt;
      &lt;td&gt;3550.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-11&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;69600.0&lt;/td&gt;
      &lt;td&gt;5860.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-12&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;47870.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;现在我们按下单月顺序排列&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;def cohort_period(df):
    df[&#x27;CohortPeriod&#x27;] = np.arange(len(df)) + 1
    return df

cohorts = df1.groupby(&#x27;首单年月&#x27;).apply(cohort_period)
cohorts.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th/&gt;
      &lt;th&gt;首单年月&lt;/th&gt;
      &lt;th&gt;下单年月&lt;/th&gt;
      &lt;th&gt;user_cnt&lt;/th&gt;
      &lt;th&gt;CohortPeriod&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2019-01&lt;/td&gt;
      &lt;td&gt;2019-01&lt;/td&gt;
      &lt;td&gt;88760&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-01&lt;/td&gt;
      &lt;td&gt;2019-02&lt;/td&gt;
      &lt;td&gt;9552&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-02&lt;/td&gt;
      &lt;td&gt;2019-02&lt;/td&gt;
      &lt;td&gt;87155&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2019-03&lt;/td&gt;
      &lt;td&gt;2019-03&lt;/td&gt;
      &lt;td&gt;101254&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2019-02&lt;/td&gt;
      &lt;td&gt;2019-03&lt;/td&gt;
      &lt;td&gt;10453&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;cohorts.set_index([&#x27;首单年月&#x27;, &#x27;CohortPeriod&#x27;], inplace=True)
cohorts.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th&gt;下单年月&lt;/th&gt;
      &lt;th&gt;user_cnt&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;首单年月&lt;/th&gt;
      &lt;th&gt;CohortPeriod&lt;/th&gt;
      &lt;th/&gt;
      &lt;th/&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&quot;2&quot; valign=&quot;top&quot;&gt;2019-01&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-01&lt;/td&gt;
      &lt;td&gt;88760&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-02&lt;/td&gt;
      &lt;td&gt;9552&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-02&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-02&lt;/td&gt;
      &lt;td&gt;87155&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-03&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-03&lt;/td&gt;
      &lt;td&gt;101254&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2019-02&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-03&lt;/td&gt;
      &lt;td&gt;10453&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;cohort_group_size = cohorts[&#x27;user_cnt&#x27;].groupby(&#x27;首单年月&#x27;).first()
cohort_group_size
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;首单年月
2019-01     88760
2019-02     87155
2019-03    101254
2019-04    102449
2019-05     89913
2019-06     82524
2019-07     66243
2019-08     63119
2019-09     55891
2019-10     45593
2019-11     69600
2019-12     47870
Name: user_cnt, dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;cohorts[&#x27;user_cnt&#x27;].unstack(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;首单年月&lt;/th&gt;
      &lt;th&gt;2019-01&lt;/th&gt;
      &lt;th&gt;2019-02&lt;/th&gt;
      &lt;th&gt;2019-03&lt;/th&gt;
      &lt;th&gt;2019-04&lt;/th&gt;
      &lt;th&gt;2019-05&lt;/th&gt;
      &lt;th&gt;2019-06&lt;/th&gt;
      &lt;th&gt;2019-07&lt;/th&gt;
      &lt;th&gt;2019-08&lt;/th&gt;
      &lt;th&gt;2019-09&lt;/th&gt;
      &lt;th&gt;2019-10&lt;/th&gt;
      &lt;th&gt;2019-11&lt;/th&gt;
      &lt;th&gt;2019-12&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CohortPeriod&lt;/th&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;88760.0&lt;/td&gt;
      &lt;td&gt;87155.0&lt;/td&gt;
      &lt;td&gt;101254.0&lt;/td&gt;
      &lt;td&gt;102449.0&lt;/td&gt;
      &lt;td&gt;89913.0&lt;/td&gt;
      &lt;td&gt;82524.0&lt;/td&gt;
      &lt;td&gt;66243.0&lt;/td&gt;
      &lt;td&gt;63119.0&lt;/td&gt;
      &lt;td&gt;55891.0&lt;/td&gt;
      &lt;td&gt;45593.0&lt;/td&gt;
      &lt;td&gt;69600.0&lt;/td&gt;
      &lt;td&gt;47870.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;9552.0&lt;/td&gt;
      &lt;td&gt;10453.0&lt;/td&gt;
      &lt;td&gt;10673.0&lt;/td&gt;
      &lt;td&gt;10497.0&lt;/td&gt;
      &lt;td&gt;11471.0&lt;/td&gt;
      &lt;td&gt;7230.0&lt;/td&gt;
      &lt;td&gt;6927.0&lt;/td&gt;
      &lt;td&gt;5325.0&lt;/td&gt;
      &lt;td&gt;4336.0&lt;/td&gt;
      &lt;td&gt;5389.0&lt;/td&gt;
      &lt;td&gt;5860.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;8207.0&lt;/td&gt;
      &lt;td&gt;6388.0&lt;/td&gt;
      &lt;td&gt;8068.0&lt;/td&gt;
      &lt;td&gt;9495.0&lt;/td&gt;
      &lt;td&gt;6562.0&lt;/td&gt;
      &lt;td&gt;5491.0&lt;/td&gt;
      &lt;td&gt;4457.0&lt;/td&gt;
      &lt;td&gt;3454.0&lt;/td&gt;
      &lt;td&gt;5745.0&lt;/td&gt;
      &lt;td&gt;3550.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;6403.0&lt;/td&gt;
      &lt;td&gt;5511.0&lt;/td&gt;
      &lt;td&gt;6835.0&lt;/td&gt;
      &lt;td&gt;5869.0&lt;/td&gt;
      &lt;td&gt;5420.0&lt;/td&gt;
      &lt;td&gt;4311.0&lt;/td&gt;
      &lt;td&gt;3309.0&lt;/td&gt;
      &lt;td&gt;4656.0&lt;/td&gt;
      &lt;td&gt;3748.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;5178.0&lt;/td&gt;
      &lt;td&gt;4673.0&lt;/td&gt;
      &lt;td&gt;4769.0&lt;/td&gt;
      &lt;td&gt;5164.0&lt;/td&gt;
      &lt;td&gt;4240.0&lt;/td&gt;
      &lt;td&gt;3013.0&lt;/td&gt;
      &lt;td&gt;5105.0&lt;/td&gt;
      &lt;td&gt;3245.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;4894.0&lt;/td&gt;
      &lt;td&gt;3335.0&lt;/td&gt;
      &lt;td&gt;4180.0&lt;/td&gt;
      &lt;td&gt;4244.0&lt;/td&gt;
      &lt;td&gt;3090.0&lt;/td&gt;
      &lt;td&gt;6027.0&lt;/td&gt;
      &lt;td&gt;3090.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;3343.0&lt;/td&gt;
      &lt;td&gt;3024.0&lt;/td&gt;
      &lt;td&gt;3531.0&lt;/td&gt;
      &lt;td&gt;3177.0&lt;/td&gt;
      &lt;td&gt;5278.0&lt;/td&gt;
      &lt;td&gt;3579.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;3063.0&lt;/td&gt;
      &lt;td&gt;2503.0&lt;/td&gt;
      &lt;td&gt;2671.0&lt;/td&gt;
      &lt;td&gt;5519.0&lt;/td&gt;
      &lt;td&gt;3611.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;2443.0&lt;/td&gt;
      &lt;td&gt;1815.0&lt;/td&gt;
      &lt;td&gt;4078.0&lt;/td&gt;
      &lt;td&gt;3600.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;1966.0&lt;/td&gt;
      &lt;td&gt;2889.0&lt;/td&gt;
      &lt;td&gt;2841.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;td&gt;3212.0&lt;/td&gt;
      &lt;td&gt;1991.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;td&gt;2278.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;转换成百分比&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;user_retention = cohorts[&#x27;user_cnt&#x27;].unstack(0).divide(cohort_group_size, axis=1)
user_retention
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;首单年月&lt;/th&gt;
      &lt;th&gt;2019-01&lt;/th&gt;
      &lt;th&gt;2019-02&lt;/th&gt;
      &lt;th&gt;2019-03&lt;/th&gt;
      &lt;th&gt;2019-04&lt;/th&gt;
      &lt;th&gt;2019-05&lt;/th&gt;
      &lt;th&gt;2019-06&lt;/th&gt;
      &lt;th&gt;2019-07&lt;/th&gt;
      &lt;th&gt;2019-08&lt;/th&gt;
      &lt;th&gt;2019-09&lt;/th&gt;
      &lt;th&gt;2019-10&lt;/th&gt;
      &lt;th&gt;2019-11&lt;/th&gt;
      &lt;th&gt;2019-12&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CohortPeriod&lt;/th&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
      &lt;th/&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;0.107616&lt;/td&gt;
      &lt;td&gt;0.119936&lt;/td&gt;
      &lt;td&gt;0.105408&lt;/td&gt;
      &lt;td&gt;0.102461&lt;/td&gt;
      &lt;td&gt;0.127579&lt;/td&gt;
      &lt;td&gt;0.087611&lt;/td&gt;
      &lt;td&gt;0.104570&lt;/td&gt;
      &lt;td&gt;0.084364&lt;/td&gt;
      &lt;td&gt;0.077580&lt;/td&gt;
      &lt;td&gt;0.118198&lt;/td&gt;
      &lt;td&gt;0.084195&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;0.092463&lt;/td&gt;
      &lt;td&gt;0.073295&lt;/td&gt;
      &lt;td&gt;0.079681&lt;/td&gt;
      &lt;td&gt;0.092680&lt;/td&gt;
      &lt;td&gt;0.072982&lt;/td&gt;
      &lt;td&gt;0.066538&lt;/td&gt;
      &lt;td&gt;0.067283&lt;/td&gt;
      &lt;td&gt;0.054722&lt;/td&gt;
      &lt;td&gt;0.102789&lt;/td&gt;
      &lt;td&gt;0.077863&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;0.072138&lt;/td&gt;
      &lt;td&gt;0.063232&lt;/td&gt;
      &lt;td&gt;0.067504&lt;/td&gt;
      &lt;td&gt;0.057287&lt;/td&gt;
      &lt;td&gt;0.060280&lt;/td&gt;
      &lt;td&gt;0.052239&lt;/td&gt;
      &lt;td&gt;0.049952&lt;/td&gt;
      &lt;td&gt;0.073765&lt;/td&gt;
      &lt;td&gt;0.067059&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;0.058337&lt;/td&gt;
      &lt;td&gt;0.053617&lt;/td&gt;
      &lt;td&gt;0.047099&lt;/td&gt;
      &lt;td&gt;0.050406&lt;/td&gt;
      &lt;td&gt;0.047157&lt;/td&gt;
      &lt;td&gt;0.036511&lt;/td&gt;
      &lt;td&gt;0.077065&lt;/td&gt;
      &lt;td&gt;0.051411&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;0.055137&lt;/td&gt;
      &lt;td&gt;0.038265&lt;/td&gt;
      &lt;td&gt;0.041282&lt;/td&gt;
      &lt;td&gt;0.041425&lt;/td&gt;
      &lt;td&gt;0.034367&lt;/td&gt;
      &lt;td&gt;0.073033&lt;/td&gt;
      &lt;td&gt;0.046646&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;0.037663&lt;/td&gt;
      &lt;td&gt;0.034697&lt;/td&gt;
      &lt;td&gt;0.034873&lt;/td&gt;
      &lt;td&gt;0.031011&lt;/td&gt;
      &lt;td&gt;0.058701&lt;/td&gt;
      &lt;td&gt;0.043369&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;0.034509&lt;/td&gt;
      &lt;td&gt;0.028719&lt;/td&gt;
      &lt;td&gt;0.026379&lt;/td&gt;
      &lt;td&gt;0.053871&lt;/td&gt;
      &lt;td&gt;0.040161&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;0.027524&lt;/td&gt;
      &lt;td&gt;0.020825&lt;/td&gt;
      &lt;td&gt;0.040275&lt;/td&gt;
      &lt;td&gt;0.035139&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;0.022150&lt;/td&gt;
      &lt;td&gt;0.033148&lt;/td&gt;
      &lt;td&gt;0.028058&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;td&gt;0.036187&lt;/td&gt;
      &lt;td&gt;0.022844&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;td&gt;0.025665&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;通过颜色渐变的方式用热图展示出来，现在我们可以对比第三个月的留存情况&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;plt.figure(figsize=(20, 10))
plt.title(&#x27;用户下单留存分析&#x27;)
sns.heatmap(user_retention.T, mask=user_retention.T.isnull(), annot=True, cmap=&quot;rocket_r&quot;, fmt=&#x27;.2%&#x27;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/attachment/cda6df9b949d4e2ca816e0a1cc3ae3b4/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HowTos 项目 Github 地址： &lt;a href=&quot;https://github.com/toutiaoio/HowTos&quot;&gt;https://github.com/toutiaoio/HowTos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6190751319d9314e97acfac4e768aba9</guid>
<title>万字长文聊缓存（下）：应用级缓存</title>
<link>https://toutiao.io/k/c1uc4c2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;摘要&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上一篇文章 万字长文聊缓存（上）中，我们主要如何围绕着Http做缓存优化，在后端服务器的应用层同样有很多地方可以做缓存，提高服务的效率；本篇我们就来继续聊聊应用级的缓存。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;缓存的命中率&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存的命中率是指从缓存中获取到数据的次数和总读取次数的比率，命中率越高证明缓存的效果越好。这是一个很重要的指标，应该通过监控这个指标来判断我们的缓存是否设置的合理。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;缓存的回收策略&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;基于时间&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;存活期：在设置缓存的同时设置该缓存可以存活多久，不论在存活期内被访问了多少次，时间到了都会过期&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;空闲期：是指缓存的数据多久没有被访问就过期&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;基于空间&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设置缓存的存储空间，比如：设置缓存的空间是 1G，当达到了1G之后就会按照一定的策略将部分数据移除&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;基于缓存数量&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设置缓存的最大条目数，当达到了设置的最大条目数之后按照一定的策略将旧的数据移除&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;基于Java对象引用&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;弱引用：当垃圾回收器开始回收内存的时候，如果发现了弱引用，它将立即被回收。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;软引用：当垃圾回收器发现内存已不足的情况下会回收软引用的对象，从而腾出一下空间，防止发生内存溢出。软引用适合用来做堆缓存&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;缓存的回收算法&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;FIFO 先进先出算法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;LRU 最近最少使用算法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;LFU 最不常用算法&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Java缓存的类型&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;堆缓存&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;堆缓存是指把数据缓存在JVM的堆内存中，使用堆缓存的好处是没有序列化和反序列化的操作，是最快的缓存。如果缓存的数据量很大，为了避免造成OOM通常情况下使用的时软引用来存储缓存对象；堆缓存的缺点是缓存的空间有限，并且垃圾回收器暂停的时间会变长。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;Gauva Cache实现堆缓存&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Cache&amp;lt;String, String&amp;gt; cache = CacheBuilder.newBuilder()&lt;br/&gt;                .build();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过&lt;code&gt;CacheBuilder&lt;/code&gt;构建缓存对象&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Gauva Cache的主要配置和方法&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;put&lt;/code&gt; : 向缓存中设置key-value&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;V get(K key, Callable&amp;lt;? extends V&amp;gt; loader)&lt;/code&gt; : 获取一个缓存值，如果缓存中没有，那么就调用loader获取一个然后放入到缓存&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;expireAfterWrite&lt;/code&gt; : 设置缓存的存活期，写入数据后指定时间之后失效&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;expireAfterAccess&lt;/code&gt; : 设置缓存的空闲期，在给定的时间内没有被访问就会被回收&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maximumSize&lt;/code&gt; : 设置缓存的最大条目数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;weakKeys/weakValues&lt;/code&gt; : 设置弱引用缓存&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;softValues&lt;/code&gt; : 设置软引用缓存&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;invalidate/invalidateAll&lt;/code&gt;: 主动失效指定key的缓存数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;recordStats&lt;/code&gt; : 启动记录统计信息，可以查看到命中率&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;removalListener&lt;/code&gt; : 当缓存被删除的时候会调用此监听器，可以用于查看为什么缓存会被删除&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;Caffeine实现堆缓存&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Caffeine是使用Java8对Guava缓存的重写版本，高性能Java本地缓存组件，也是Spring推荐的堆缓存的实现，与spring的集成可以查看文档https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#cache-store-configuration-caffeine。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于是对Guava缓存的重写版本，所以很多的配置参数都是和Guava缓存一致：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;initialCapacity&lt;/code&gt;: 初始的缓存空间大小&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maximumSize&lt;/code&gt;: 缓存的最大条数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maximumWeight&lt;/code&gt;: 缓存的最大权重&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;expireAfterAccess&lt;/code&gt;: 最后一次写入或访问后经过固定时间过期&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;expireAfterWrite&lt;/code&gt;: 最后一次写入后经过固定时间过期&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;expireAfter&lt;/code&gt; : 自定义过期策略&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;refreshAfterWrite&lt;/code&gt;: 创建缓存或者最近一次更新缓存后经过固定的时间间隔，刷新缓存&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;weakKeys&lt;/code&gt;: 打开key的弱引用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;weakValues&lt;/code&gt;：打开value的弱引用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;softValues&lt;/code&gt;：打开value的软引用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;recordStats&lt;/code&gt;：开启统计功能&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Caffeine的官方文档：https://github.com/ben-manes/caffeine/wiki&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;pom.xml中添加依赖&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;    &amp;lt;groupId&amp;gt;com.github.ben-manes.caffeine&amp;lt;/groupId&amp;gt;&lt;br/&gt;    &amp;lt;artifactId&amp;gt;caffeine&amp;lt;/artifactId&amp;gt;&lt;br/&gt;    &amp;lt;version&amp;gt;2.8.4&amp;lt;/version&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Caffeine Cache提供了三种缓存填充策略：手动、同步加载和异步加载。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;手动加载：在每次get key的时候指定一个同步的函数，如果key不存在就调用这个函数生成一个值&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public Object manual(String key) {&lt;br/&gt;    Cache&amp;lt;String, Object&amp;gt; cache = Caffeine.newBuilder()&lt;br/&gt;            .expireAfterAccess(1, TimeUnit.SECONDS) //设置空闲期时长&lt;br/&gt;            .maximumSize(10)&lt;br/&gt;            .build();&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; cache.get(key, t -&amp;gt; setValue(key).apply(key));&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;public Function&amp;lt;String, Object&amp;gt; setValue(String key){&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; t -&amp;gt; &lt;span&gt;&quot;https://silently9527.cn&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;同步加载：构造Cache时候，build方法传入一个CacheLoader实现类。实现load方法，通过key加载value。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public Object sync(String key){&lt;br/&gt;    LoadingCache&amp;lt;String, Object&amp;gt; cache = Caffeine.newBuilder()&lt;br/&gt;            .maximumSize(100)&lt;br/&gt;            .expireAfterWrite(1, TimeUnit.MINUTES) //设置存活期时长&lt;br/&gt;            .build(k -&amp;gt; setValue(key).apply(key));&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; cache.get(key);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;public Function&amp;lt;String, Object&amp;gt; setValue(String key){&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; t -&amp;gt; &lt;span&gt;&quot;https://silently9527.cn&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;异步加载：AsyncLoadingCache是继承自LoadingCache类的，异步加载使用Executor去调用方法并返回一个CompletableFuture&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public CompletableFuture async(String key) {&lt;br/&gt;    AsyncLoadingCache&amp;lt;String, Object&amp;gt; cache = Caffeine.newBuilder()&lt;br/&gt;            .maximumSize(100)&lt;br/&gt;            .expireAfterWrite(1, TimeUnit.MINUTES)&lt;br/&gt;            .buildAsync(k -&amp;gt; setAsyncValue().get());&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; cache.get(key);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;public CompletableFuture&amp;lt;Object&amp;gt; &lt;span&gt;&lt;span&gt;setAsyncValue&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; CompletableFuture.supplyAsync(() -&amp;gt; &lt;span&gt;&quot;公众号：贝塔学JAVA&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;监听缓存被清理的事件&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public void &lt;span&gt;&lt;span&gt;removeListener&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    Cache&amp;lt;String, Object&amp;gt; cache = Caffeine.newBuilder()&lt;br/&gt;            .removalListener((String key, Object value, RemovalCause cause) -&amp;gt; {&lt;br/&gt;                System.out.println(&lt;span&gt;&quot;remove lisitener&quot;&lt;/span&gt;);&lt;br/&gt;                System.out.println(&lt;span&gt;&quot;remove Key:&quot;&lt;/span&gt; + key);&lt;br/&gt;                System.out.println(&lt;span&gt;&quot;remove Value:&quot;&lt;/span&gt; + value);&lt;br/&gt;            })&lt;br/&gt;            .build();&lt;br/&gt;    cache.put(&lt;span&gt;&quot;name&quot;&lt;/span&gt;, &lt;span&gt;&quot;silently9527&quot;&lt;/span&gt;);&lt;br/&gt;    cache.invalidate(&lt;span&gt;&quot;name&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;统计&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public void &lt;span&gt;&lt;span&gt;recordStats&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    Cache&amp;lt;String, Object&amp;gt; cache = Caffeine.newBuilder()&lt;br/&gt;            .maximumSize(10000)&lt;br/&gt;            .recordStats()&lt;br/&gt;            .build();&lt;br/&gt;    cache.put(&lt;span&gt;&quot;公众号&quot;&lt;/span&gt;, &lt;span&gt;&quot;贝塔学JAVA&quot;&lt;/span&gt;);&lt;br/&gt;    cache.get(&lt;span&gt;&quot;公众号&quot;&lt;/span&gt;, (t) -&amp;gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;    cache.get(&lt;span&gt;&quot;name&quot;&lt;/span&gt;, (t) -&amp;gt; &lt;span&gt;&quot;silently9527&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    CacheStats stats = cache.stats();&lt;br/&gt;    System.out.println(stats);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过 &lt;code&gt;Cache.stats()&lt;/code&gt; 获取到&lt;code&gt;CacheStats&lt;/code&gt;。&lt;code&gt;CacheStats&lt;/code&gt;提供以下统计方法：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;hitRate()&lt;/code&gt;: 返回缓存命中率&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;evictionCount()&lt;/code&gt;: 缓存回收数量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;averageLoadPenalty()&lt;/code&gt;: 加载新值的平均时间&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;EhCache实现堆缓存&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;EhCache 是老牌Java开源缓存框架，早在2003年就已经出现了，发展到现在已经非常成熟稳定，在Java应用领域应用也非常广泛，而且和主流的Java框架比如Srping可以很好集成。相比于 Guava Cache，EnCache 支持的功能更丰富，包括堆外缓存、磁盘缓存，当然使用起来要更重一些。使用 Ehcache 的Maven 依赖如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;    &amp;lt;groupId&amp;gt;org.ehcache&amp;lt;/groupId&amp;gt;&lt;br/&gt;    &amp;lt;artifactId&amp;gt;ehcache&amp;lt;/artifactId&amp;gt;&lt;br/&gt;    &amp;lt;version&amp;gt;3.6.3&amp;lt;/version&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder().build(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;ResourcePoolsBuilder resource = ResourcePoolsBuilder.heap(10); //设置最大缓存条目数&lt;br/&gt;&lt;br/&gt;CacheConfiguration&amp;lt;String, String&amp;gt; cacheConfig = CacheConfigurationBuilder&lt;br/&gt;        .newCacheConfigurationBuilder(String.class, String.class, resource)&lt;br/&gt;        .withExpiry(ExpiryPolicyBuilder.timeToIdleExpiration(Duration.ofMinutes(10)))&lt;br/&gt;        .build();&lt;br/&gt;&lt;br/&gt;Cache&amp;lt;String, String&amp;gt; cache = cacheManager.createCache(&lt;span&gt;&quot;userInfo&quot;&lt;/span&gt;, cacheConfig);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ResourcePoolsBuilder.heap(10)&lt;/code&gt;设置缓存的最大条目数，这是简写方式，等价于&lt;code&gt;ResourcePoolsBuilder.newResourcePoolsBuilder().heap(10, EntryUnit.ENTRIES);&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ResourcePoolsBuilder.newResourcePoolsBuilder().heap(10, MemoryUnit.MB)&lt;/code&gt;设置缓存最大的空间10MB&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;withExpiry(ExpiryPolicyBuilder.timeToIdleExpiration(Duration.ofMinutes(10)))&lt;/code&gt; 设置缓存空闲时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofMinutes(10)))&lt;/code&gt; 设置缓存存活时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;remove/removeAll&lt;/code&gt;主动失效缓存，与Guava Cache类似，调用方法后不会立即去清除回收，只有在get或者put的时候判断缓存是否过期&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;withSizeOfMaxObjectSize(10,MemoryUnit.KB)&lt;/code&gt;限制单个缓存对象的大小，超过这两个限制的对象则不被缓存&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;堆外缓存&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;堆外缓存即缓存数据在堆外内存中，空间大小只受本机内存大小限制，不受GC管理，使用堆外缓存可以减少GC暂停时间，但是堆外内存中的对象都需要序列化和反序列化，KEY和VALUE必须实现Serializable接口，因此速度会比堆内缓存慢。在Java中可以通过 &lt;code&gt;-XX:MaxDirectMemorySize&lt;/code&gt; 参数设置堆外内存的上限&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder().build(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;// 堆外内存不能按照存储条目限制，只能按照内存大小进行限制，超过限制则回收缓存&lt;br/&gt;ResourcePoolsBuilder resource = ResourcePoolsBuilder.newResourcePoolsBuilder().offheap(10, MemoryUnit.MB);&lt;br/&gt;&lt;br/&gt;CacheConfiguration&amp;lt;String, String&amp;gt; cacheConfig = CacheConfigurationBuilder&lt;br/&gt;        .newCacheConfigurationBuilder(String.class, String.class, resource)&lt;br/&gt;        .withDispatcherConcurrency(4)&lt;br/&gt;        .withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofMinutes(10)))&lt;br/&gt;        .withSizeOfMaxObjectSize(10, MemoryUnit.KB)&lt;br/&gt;        .build();&lt;br/&gt;&lt;br/&gt;Cache&amp;lt;String, String&amp;gt; cache = cacheManager.createCache(&lt;span&gt;&quot;userInfo2&quot;&lt;/span&gt;, cacheConfig);&lt;br/&gt;cache.put(&lt;span&gt;&quot;website&quot;&lt;/span&gt;, &lt;span&gt;&quot;https://silently9527.cn&quot;&lt;/span&gt;);&lt;br/&gt;System.out.println(cache.get(&lt;span&gt;&quot;website&quot;&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;磁盘缓存&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把缓存数据存放到磁盘上，在JVM重启时缓存的数据不会受到影响，而堆缓存和堆外缓存都会丢失；并且磁盘缓存有更大的存储空间；但是缓存在磁盘上的数据也需要支持序列化，速度会被比内存更慢，在使用时推荐使用更快的磁盘带来更大的吞吐率，比如使用闪存代替机械磁盘。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CacheManagerConfiguration&amp;lt;PersistentCacheManager&amp;gt; persistentManagerConfig = CacheManagerBuilder&lt;br/&gt;        .persistence(new File(&lt;span&gt;&quot;/Users/huaan9527/Desktop&quot;&lt;/span&gt;, &lt;span&gt;&quot;ehcache-cache&quot;&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;PersistentCacheManager persistentCacheManager = CacheManagerBuilder.newCacheManagerBuilder()&lt;br/&gt;        .with(persistentManagerConfig).build(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;//disk 第三个参数设置为 &lt;span&gt;true&lt;/span&gt; 表示将数据持久化到磁盘上&lt;br/&gt;ResourcePoolsBuilder resource = ResourcePoolsBuilder.newResourcePoolsBuilder().disk(100, MemoryUnit.MB, &lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;CacheConfiguration&amp;lt;String, String&amp;gt; config = CacheConfigurationBuilder&lt;br/&gt;        .newCacheConfigurationBuilder(String.class, String.class, resource).build();&lt;br/&gt;Cache&amp;lt;String, String&amp;gt; cache = persistentCacheManager.createCache(&lt;span&gt;&quot;userInfo&quot;&lt;/span&gt;,&lt;br/&gt;        CacheConfigurationBuilder.newCacheConfigurationBuilder(config));&lt;br/&gt;&lt;br/&gt;cache.put(&lt;span&gt;&quot;公众号&quot;&lt;/span&gt;, &lt;span&gt;&quot;贝塔学JAVA&quot;&lt;/span&gt;);&lt;br/&gt;System.out.println(cache.get(&lt;span&gt;&quot;公众号&quot;&lt;/span&gt;));&lt;br/&gt;persistentCacheManager.close();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在JVM停止时，一定要记得调用&lt;code&gt;persistentCacheManager.close()&lt;/code&gt;，保证内存中的数据能够dump到磁盘上。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9418181818181818&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ggRgNal7zG9F2ju7gN8IBGuHEx94w4UMPM8pORdbfyQj7PYPgpkGpkWibHaXwJUslSuquYeaSDbX9ZoicRottmTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;275&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是典型 heap + offheap + disk 组合的结构图，上层比下层速度快，下层比上层存储空间大，在ehcache中，空间大小设置 &lt;code&gt;heap &amp;gt; offheap &amp;gt; disk&lt;/code&gt;，否则会报错；ehcache 会将最热的数据保存在高一级的缓存。这种结构的代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CacheManagerConfiguration&amp;lt;PersistentCacheManager&amp;gt; persistentManagerConfig = CacheManagerBuilder&lt;br/&gt;        .persistence(new File(&lt;span&gt;&quot;/Users/huaan9527/Desktop&quot;&lt;/span&gt;, &lt;span&gt;&quot;ehcache-cache&quot;&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;PersistentCacheManager persistentCacheManager = CacheManagerBuilder.newCacheManagerBuilder()&lt;br/&gt;        .with(persistentManagerConfig).build(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;ResourcePoolsBuilder resource = ResourcePoolsBuilder.newResourcePoolsBuilder()&lt;br/&gt;        .heap(10, MemoryUnit.MB)&lt;br/&gt;        .offheap(100, MemoryUnit.MB)&lt;br/&gt;        //第三个参数设置为&lt;span&gt;true&lt;/span&gt;，支持持久化&lt;br/&gt;        .disk(500, MemoryUnit.MB, &lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;CacheConfiguration&amp;lt;String, String&amp;gt; config = CacheConfigurationBuilder&lt;br/&gt;        .newCacheConfigurationBuilder(String.class, String.class, resource).build();&lt;br/&gt;&lt;br/&gt;Cache&amp;lt;String, String&amp;gt; cache = persistentCacheManager.createCache(&lt;span&gt;&quot;userInfo&quot;&lt;/span&gt;,&lt;br/&gt;        CacheConfigurationBuilder.newCacheConfigurationBuilder(config));&lt;br/&gt;&lt;br/&gt;//写入缓存&lt;br/&gt;cache.put(&lt;span&gt;&quot;name&quot;&lt;/span&gt;, &lt;span&gt;&quot;silently9527&quot;&lt;/span&gt;);&lt;br/&gt;// 读取缓存&lt;br/&gt;System.out.println(cache.get(&lt;span&gt;&quot;name&quot;&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;// 再程序关闭前，需要手动释放资源&lt;br/&gt;persistentCacheManager.close();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;分布式集中缓存&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面提到的堆内缓存和堆外缓存如果在多个JVM实例的情况下会有两个问题：1.单机容量毕竟有限；2.多台JVM实例缓存的数据可能不一致；3.如果缓存数据同一时间都失效了，那么请求都会打到数据库上，数据库压力增大。这时候我们就需要引入分布式缓存来解决，现在使用最多的分布式缓存是redis&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6351351351351351&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ggRgNal7zG9F2ju7gN8IBGuHEx94w4UM1zxrCeWl4MRrFl6G5VjSVbjcDyBtPvraH9QKco8FA7uyQsu68L1HOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;740&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当引入分布式缓存之后就可以把应用缓存的架构调整成上面的结构。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;缓存使用模式的实践&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存使用的模式大概分为两类：Cache-Aside、Cache-As-SoR（SoR表示实际存储数据的系统，也就是数据源）&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;Cache-Aside&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务代码围绕着缓存来写，通常都是从缓存中来获取数据，如果缓存没有命中，则从数据库中查找，查询到之后就把数据放入到缓存；当数据被更新之后，也需要对应的去更新缓存中的数据。这种模式也是我们通常使用最多的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;value = cache.get(key); //从缓存中读取数据&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(value == null) {&lt;br/&gt;    value = loadFromDatabase(key); //从数据库中查询&lt;br/&gt;    cache.put(key, value); //放入到缓存中&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;wirteToDatabase(key, value); //写入到数据库&lt;br/&gt;cache.put(key, value); //放入到缓存中 或者 可以删除掉缓存 cache.remove(key) ，再读取的时候再查一次&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring的Cache扩展就是使用的Cache-Aside模式，Spring为了把业务代码和缓存的读取更新分离，对Cache-Aside模式使用AOP进行了封装，提供了多个注解来实现读写场景。官方参考文档：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;@Cacheable&lt;/code&gt; : 通常是放在查询方法上，实现的就是&lt;code&gt;Cache-Aside&lt;/code&gt;读的场景，先查缓存，如果不存在在查询数据库，最后把查询出来的结果放入到缓存。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;@CachePut&lt;/code&gt; : 通常用在保存更新方法上面，实现的就是&lt;code&gt;Cache-Aside&lt;/code&gt;写的场景，更新完成数据库后把数据放入到缓存中。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;@CacheEvict&lt;/code&gt; : 从缓存中删除指定key的缓存&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;对于一些允许有一点点更新延迟基础数据可以考虑使用canal订阅binlog日志来完成缓存的增量更新。&lt;/p&gt;&lt;p&gt;Cache-Aside还有个问题，如果某个时刻热点数据缓存失效，那么会有很多请求同时打到后端数据库上，数据库的压力会瞬间增大&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;Cache-As-SoR&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cache-As-SoR模式也就会把Cache看做是数据源，所有的操作都是针对缓存，Cache在委托给真正的SoR去实现读或者写。业务代码中只会看到Cache的操作，这种模式又分为了三种&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;Read Through&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应用程序始终从缓存中请求数据，如果缓存中没有数据，则它负责使用提供的数据加载程序从数据库中检索数据，检索数据后，缓存会自行更新并将数据返回给调用的应用程序。Gauva Cache、Caffeine、EhCache都支持这种模式；&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Caffeine实现Read Through
由于Gauva Cache和Caffeine实现类似，所以这里只展示Caffeine的实现，以下代码来自Caffeine官方文档&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;LoadingCache&amp;lt;Key, Graph&amp;gt; cache = Caffeine.newBuilder()&lt;br/&gt;    .maximumSize(10_000)&lt;br/&gt;    .expireAfterWrite(10, TimeUnit.MINUTES)&lt;br/&gt;    .build(key -&amp;gt; createExpensiveGraph(key));&lt;br/&gt;&lt;br/&gt;// Lookup and compute an entry &lt;span&gt;if&lt;/span&gt; absent, or null &lt;span&gt;if&lt;/span&gt; not computable&lt;br/&gt;Graph graph = cache.get(key);&lt;br/&gt;// Lookup and compute entries that are absent&lt;br/&gt;Map&amp;lt;Key, Graph&amp;gt; graphs = cache.getAll(keys);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在build Cache的时候指定一个&lt;code&gt;CacheLoader&lt;/code&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;[1] 在应用程序中直接调用&lt;code&gt;cache.get(key)&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;[2] 首先查询缓存，如果缓存存在就直接返回数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;[3] 如果不存在，就会委托给&lt;code&gt;CacheLoader&lt;/code&gt;去数据源中查询数据，之后在放入到缓存，返回给应用程序&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;&lt;code&gt;CacheLoader&lt;/code&gt;不要直接返回null，建议封装成自己定义的Null对像，在放入到缓存中，可以防止缓存击穿&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了防止因为某个热点数据失效导致后端数据库压力增大的情况，我可以在&lt;code&gt;CacheLoader&lt;/code&gt;中使用锁限制只允许一个请求去查询数据库，其他的请求都等待第一个请求查询完成后从缓存中获取，在上一篇 《万字长文聊缓存（上）》中我们聊到了Nginx也有类似的配置参数&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;value = loadFromCache(key);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(value != null) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; value;&lt;br/&gt;}&lt;br/&gt;synchronized (lock) {&lt;br/&gt;    value = loadFromCache(key);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(value != null) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; value;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; loadFromDatabase(key);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;EhCache实现Read Through&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder().build(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;ResourcePoolsBuilder resource = ResourcePoolsBuilder.newResourcePoolsBuilder().heap(10, MemoryUnit.MB); //设置最大缓存条目数&lt;br/&gt;CacheConfiguration&amp;lt;String, String&amp;gt; cacheConfig = CacheConfigurationBuilder&lt;br/&gt;        .newCacheConfigurationBuilder(String.class, String.class, resource)&lt;br/&gt;        .withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofMinutes(10)))&lt;br/&gt;        .withLoaderWriter(new CacheLoaderWriter&amp;lt;String, String&amp;gt;(){&lt;br/&gt;            @Override&lt;br/&gt;            public String load(String key) throws Exception {&lt;br/&gt;                //load from database&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;silently9527&quot;&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            @Override&lt;br/&gt;            public void write(String key, String value) throws Exception {&lt;br/&gt;&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            @Override&lt;br/&gt;            public void delete(String key) throws Exception {&lt;br/&gt;&lt;br/&gt;            }&lt;br/&gt;        })&lt;br/&gt;        .build();&lt;br/&gt;&lt;br/&gt;Cache&amp;lt;String, String&amp;gt; cache = cacheManager.createCache(&lt;span&gt;&quot;userInfo&quot;&lt;/span&gt;, cacheConfig);&lt;br/&gt;System.out.println(cache.get(&lt;span&gt;&quot;name&quot;&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在EhCache中使用的是&lt;code&gt;CacheLoaderWriter&lt;/code&gt;来从数据库中加载数据；解决因为某个热点数据失效导致后端数据库压力增大的问题和上面的方式一样，也可以在&lt;code&gt;load&lt;/code&gt;中实现。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;Write Through&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和Read Through模式类似，当数据进行更新时，先去更新SoR，成功之后在更新缓存。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Caffeine实现Write Through&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Cache&amp;lt;String, String&amp;gt; cache = Caffeine.newBuilder()&lt;br/&gt;        .maximumSize(100)&lt;br/&gt;        .writer(new CacheWriter&amp;lt;String, String&amp;gt;() {&lt;br/&gt;            @Override&lt;br/&gt;            public void write(@NonNull String key, @NonNull String value) {&lt;br/&gt;                //write data to database&lt;br/&gt;                System.out.println(key);&lt;br/&gt;                System.out.println(value);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            @Override&lt;br/&gt;            public void delete(@NonNull String key, @Nullable String value, @NonNull RemovalCause removalCause) {&lt;br/&gt;                //delete from database&lt;br/&gt;            }&lt;br/&gt;        })&lt;br/&gt;        .build();&lt;br/&gt;&lt;br/&gt;cache.put(&lt;span&gt;&quot;name&quot;&lt;/span&gt;, &lt;span&gt;&quot;silently9527&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Caffeine通过使用&lt;code&gt;CacheWriter&lt;/code&gt;来实现Write Through，&lt;code&gt;CacheWriter&lt;/code&gt;可以同步的监听到缓存的创建、变更和删除操作，只有写成功了才会去更新缓存&lt;/p&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;EhCache实现Write Through&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder().build(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;ResourcePoolsBuilder resource = ResourcePoolsBuilder.newResourcePoolsBuilder().heap(10, MemoryUnit.MB); //设置最大缓存条目数&lt;br/&gt;CacheConfiguration&amp;lt;String, String&amp;gt; cacheConfig = CacheConfigurationBuilder&lt;br/&gt;        .newCacheConfigurationBuilder(String.class, String.class, resource)&lt;br/&gt;        .withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofMinutes(10)))&lt;br/&gt;        .withLoaderWriter(new CacheLoaderWriter&amp;lt;String, String&amp;gt;(){&lt;br/&gt;            @Override&lt;br/&gt;            public String load(String key) throws Exception {&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;silently9527&quot;&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            @Override&lt;br/&gt;            public void write(String key, String value) throws Exception {&lt;br/&gt;                //write data to database&lt;br/&gt;                System.out.println(key);&lt;br/&gt;                System.out.println(value);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            @Override&lt;br/&gt;            public void delete(String key) throws Exception {&lt;br/&gt;                //delete from database&lt;br/&gt;            }&lt;br/&gt;        })&lt;br/&gt;        .build();&lt;br/&gt;&lt;br/&gt;Cache&amp;lt;String, String&amp;gt; cache = cacheManager.createCache(&lt;span&gt;&quot;userInfo&quot;&lt;/span&gt;, cacheConfig);&lt;br/&gt;System.out.println(cache.get(&lt;span&gt;&quot;name&quot;&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;cache.put(&lt;span&gt;&quot;website&quot;&lt;/span&gt;,&lt;span&gt;&quot;https://silently9527.cn&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;EhCache还是通过&lt;code&gt;CacheLoaderWriter&lt;/code&gt;来实现的，当我们调用&lt;code&gt;cache.put(&quot;xxx&quot;,&quot;xxx&quot;)&lt;/code&gt;进行写缓存的时候，EhCache首先会将写的操作委托给&lt;code&gt;CacheLoaderWriter&lt;/code&gt;，有&lt;code&gt;CacheLoaderWriter.write&lt;/code&gt;去负责写数据源&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;Write Behind&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种模式通常先将数据写入缓存，再异步地写入数据库进行数据同步。这样的设计既可以减少对数据库的直接访问，降低压力，同时对数据库的多次修改可以合并操作，极大地提升了系统的承载能力。但是这种模式也存在风险，如当缓存机器出现宕机时，数据有丢失的可能。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Caffeine要想实现Write Behind可以在&lt;code&gt;CacheLoaderWriter.write&lt;/code&gt;方法中把数据发送到MQ中，实现异步的消费，这样可以保证数据的安全，但是要想实现合并操作就需要扩展功能更强大的&lt;code&gt;CacheLoaderWriter&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;EhCache实现Write Behind&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//1 定义线程池&lt;br/&gt;PooledExecutionServiceConfiguration testWriteBehind = PooledExecutionServiceConfigurationBuilder&lt;br/&gt;        .newPooledExecutionServiceConfigurationBuilder()&lt;br/&gt;        .pool(&lt;span&gt;&quot;testWriteBehind&quot;&lt;/span&gt;, 5, 10)&lt;br/&gt;        .build();&lt;br/&gt;&lt;br/&gt;CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder()&lt;br/&gt;        .using(testWriteBehind)&lt;br/&gt;        .build(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;ResourcePoolsBuilder resource = ResourcePoolsBuilder.newResourcePoolsBuilder().heap(10, MemoryUnit.MB); //设置最大缓存条目数&lt;br/&gt;&lt;br/&gt;//2 设置回写模式配置&lt;br/&gt;WriteBehindConfiguration testWriteBehindConfig = WriteBehindConfigurationBuilder&lt;br/&gt;        .newUnBatchedWriteBehindConfiguration()&lt;br/&gt;        .queueSize(10)&lt;br/&gt;        .concurrencyLevel(2)&lt;br/&gt;        .useThreadPool(&lt;span&gt;&quot;testWriteBehind&quot;&lt;/span&gt;)&lt;br/&gt;        .build();&lt;br/&gt;&lt;br/&gt;CacheConfiguration&amp;lt;String, String&amp;gt; cacheConfig = CacheConfigurationBuilder&lt;br/&gt;        .newCacheConfigurationBuilder(String.class, String.class, resource)&lt;br/&gt;        .withLoaderWriter(new CacheLoaderWriter&amp;lt;String, String&amp;gt;() {&lt;br/&gt;            @Override&lt;br/&gt;            public String load(String key) throws Exception {&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;silently9527&quot;&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            @Override&lt;br/&gt;            public void write(String key, String value) throws Exception {&lt;br/&gt;                //write data to database&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            @Override&lt;br/&gt;            public void delete(String key) throws Exception {&lt;br/&gt;            }&lt;br/&gt;        })&lt;br/&gt;        .add(testWriteBehindConfig)&lt;br/&gt;        .build();&lt;br/&gt;&lt;br/&gt;Cache&amp;lt;String, String&amp;gt; cache = cacheManager.createCache(&lt;span&gt;&quot;userInfo&quot;&lt;/span&gt;, cacheConfig);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先使用&lt;code&gt;PooledExecutionServiceConfigurationBuilder&lt;/code&gt;定义了线程池配置；然后使用&lt;code&gt;WriteBehindConfigurationBuilder&lt;/code&gt;设置会写模式配置，其中&lt;code&gt;newUnBatchedWriteBehindConfiguration&lt;/code&gt;表示不进行批量写操作，因为是异步写，所以需要把写操作先放入到队列中，通过&lt;code&gt;queueSize&lt;/code&gt;设置队列大小，&lt;code&gt;useThreadPool&lt;/code&gt;指定使用哪个线程池; &lt;code&gt;concurrencyLevel&lt;/code&gt;设置使用多少个并发线程和队列进行Write Behind&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;EhCache实现批量写的操作也很容易&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;首先把&lt;code&gt;newUnBatchedWriteBehindConfiguration()&lt;/code&gt;替换成&lt;code&gt;newBatchedWriteBehindConfiguration(10, TimeUnit.SECONDS, 20)&lt;/code&gt;，这里设置的是数量达到20就进行批处理，如果10秒内没有达到20个也会进行处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其次在&lt;code&gt;CacheLoaderWriter&lt;/code&gt;中实现wirteAll 和 deleteAll进行批处理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;如果需要把对相同的key的操作合并起来只记录最后一次数据，可以通过&lt;code&gt;enableCoalescing()&lt;/code&gt;来启用合并&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;写到最后 点关注，不迷路&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文中或许会存在或多或少的不足、错误之处，有建议或者意见也非常欢迎大家与我交流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，&lt;strong&gt;「白嫖不好，创作不易」&lt;/strong&gt;，希望朋友们可以&lt;strong&gt;「点赞」&lt;/strong&gt;，因为这些就是我分享的全部动力来源🙏&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;源码地址：https://github.com/silently9527/CacheTutorial&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8764044943820225&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ggRgNal7zG9F2ju7gN8IBGuHEx94w4UMydibnddeSnUT3qibF1VjpOBzlVbcL7SbbLl6P2eKgzYOicNtupI6nBY0A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;267&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f191715275b058b272c94e60ac72f4ce</guid>
<title>程序员的发展空间有多大，如何突破 35 岁瓶颈？</title>
<link>https://toutiao.io/k/rampztn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA3ODk1Mzg0Mg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/wzyc1ToJM6ia6icRKFLmvF8YJDluMxibzHolMFib4E1hXicpaKibTtn3QBHjGJROqpuOgLLhRjdpAy2pZkGRkW7NgMpA/0?wx_fmt=png&quot; data-nickname=&quot;老王说编程&quot; data-alias=&quot;lwsbc1024&quot; data-signature=&quot;还原编程思想、深入日常开发、分享最新技术及编程经验&quot;/&gt;&lt;/section&gt;&lt;p cid=&quot;n0&quot; mdtype=&quot;paragraph&quot;&gt;&lt;em&gt;&lt;span&gt;漫漫编程路，多少个日夜我们沉浸在扫除 BUG 的路上，永远在变的需求使我们养成了独特的好脾气。即使这样，还要面对在 35 岁的瓶颈时被扫地出门的窘况，这是很多程序员思考最多的问题，然而，只要梳理好每个阶段的规划，在每个阶段里不断进步这条程序路也能走出不一样的光彩。&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.39655172413793105&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wzyc1ToJM6iacGByibqaBuibO8ibxHOJCXa716R1xqy9ia5ADfJM6BmhIOTczgJsnlwpZO62GHV35OdTuEVoGM9iadLg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;580&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n4&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;根据资料显示，在一般的职业发展中主要分为三个阶段：1-3 年是初级阶段，3-5 年是中级阶段，5-10 年是高级阶段，再往后可以是技术专家、技术总监、项目管理者等等。随着这几个阶段越来越高的情况下程序员的薪资水平也是越来越高的，工作年限越长企业自然认为你的能力也越强，但是你如果到了高级阶段的年龄却仍然还是中级阶段的技术或管理水平，这个时候企业当然会选择比你更年轻、身体状态更好的年轻人来做这件事情。所谓程序员的 35 岁瓶颈其实就是你的年龄和你的能力不匹配的问题，作为猿童鞋不能只做编码的搬运工，活到老、学到老这是我们必须具备的一种编程素质。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n4&quot; mdtype=&quot;paragraph&quot;&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1614007248101&quot; data-category_id_list=&quot;42&quot; data-id=&quot;1614007248101&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n6&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;一般在工作 5 年时间的时候就应该提前认真考虑自己的发展方向了，作为项目开发的猿童鞋发展方向还是比较多的。如果一直钟爱技术，那就必须积累系统架构方面的知识，因为以后你是要掌控全局的，没有对项目整体的技术把控那是不可行的。当然，测试岗位也是一个不错的选择，而且薪资也不错，在这里我要说一下 “千万不要小看测试”，大多数项目中测试人员的分量比需求还大，面对不断变化的需求有时候只有测试人员才说的清楚。另外，还可以转型为管理岗，作为 PM 猿童鞋转过来也是比较容易的，但是要特别注意的就是自己的沟通态度得好好练练。也有猿童鞋能够凭借自己的努力当上 CTO，那也是令多数猿童鞋比较羡慕的。如果可以，数据库 DBA 也是比较好的。最后就是自己创业或者做一个自由职业者，凭借自己的技术、经验选择一个自己喜欢的方向。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n6&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;欢迎关注 “老王说编程“，每天进步一点点，您的每一个点赞、在看、分享都是在致力于减少 “攻城狮” 产出的 BUG，欢迎大家在评论区进行留言，一起学习，一起成长！&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;h5 cid=&quot;n22&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;span md-inline=&quot;plain&quot;&gt;往期精彩&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;/&gt;&lt;/h5&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3ODk1Mzg0Mg==&amp;amp;mid=2649848595&amp;amp;idx=1&amp;amp;sn=5deeb995e4c42ae4decf4785f5254b1d&amp;amp;chksm=87bf370eb0c8be183538b1717b2422ebd40f2d3decc05b891a5d19adce1984301dbaedbe7458&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Linux 的常用命令你真的都了解吗，100 个必须要学会的 Shell 命令&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3ODk1Mzg0Mg==&amp;amp;mid=2649848581&amp;amp;idx=1&amp;amp;sn=09371d0291c7e3790d4ba7a41bdfe4d0&amp;amp;chksm=87bf3718b0c8be0e918aff84cf41a3bf78f063fcf0981ecb626893d9c9663f62713f0d6b062d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;IPython 的编程技巧（Python 开发必备神器）&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3ODk1Mzg0Mg==&amp;amp;mid=2649848575&amp;amp;idx=1&amp;amp;sn=c96eeba40c46e907556e88fd8cf79a5e&amp;amp;chksm=87bf36e2b0c8bff48bbf2d8a7f938c96771874c3348d41e757e1090b9cf2d929aa42dd663d02&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Tomcat 性能调优应该注意什么？&lt;/a&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;br/&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3ODk1Mzg0Mg==&amp;amp;mid=2649848555&amp;amp;idx=1&amp;amp;sn=7e62c6396761c41da77992ef6225b360&amp;amp;chksm=87bf36f6b0c8bfe08b78892983cabe8dabeb2ea825fd380d899987b9c59b190d076de810bd2b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;em&gt;&lt;span&gt;Java8 的 Lambda 表达式&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3ODk1Mzg0Mg==&amp;amp;mid=2649848550&amp;amp;idx=1&amp;amp;sn=ebf37329e00c2622f0271bc3fb0118e9&amp;amp;chksm=87bf36fbb0c8bfed9f1f8411d21bfaed8a11d85401a5680265d75f4998e9df9c90598dfbd020&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;em&gt;&lt;span&gt;Python 如何实现最简单的多人聊天室&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3ODk1Mzg0Mg==&amp;amp;mid=2649848514&amp;amp;idx=1&amp;amp;sn=e330c08961a24b710bb713e9641aefc2&amp;amp;chksm=87bf36dfb0c8bfc9d95f3655cd0b6d0fe455a7c3ec370e783a629d94cd3204d4511202be9911&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;em&gt;&lt;span&gt;Python 如何正确使用 MongoDB 数据库&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3ODk1Mzg0Mg==&amp;amp;mid=2649848483&amp;amp;idx=1&amp;amp;sn=f000a9164091cfda69e57b89756a9c0a&amp;amp;chksm=87bf36beb0c8bfa8e80334c9e26e518c53597f1ac055ae1d83248a5669d086c4f5fc78ae6647&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;em&gt;&lt;span&gt;Crontab 定时任务的正则表达式&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>55a6f34dc6fa9d286e4a1c9d19e487ad</guid>
<title>Golang 性能诊断看这篇就够了</title>
<link>https://toutiao.io/k/3loin1u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0909090909090908&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zKDkic1rP1QqFfULibMaiaSmYUW7hCHZWPJIZHepEibOw1peSm7T1cU4N760yuUkh33VV0WdUkM7iadUxpiabR0CYaDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;44&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;点击上方&lt;span data-mid=&quot;&quot;&gt;蓝字&lt;/span&gt;关注我们&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1176470588235294&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/l6ryX6MCe8gbTZCu4DCDb0G8icjTQbP0oAp7UwiaVCX2bFe7EqIKj0OQmSX1dveSTOOiafythEico4lRx5jRXKricXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.66640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfOf2ruibNMpw9CMr3jO4qp4yN4vsuVf18Ueu6bcq50jbELCFXQRpNQqjg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;我们日常接触性能诊断问题，一般分为两种情况，一是线上应用真的出现性能问题；二是我们需要对准备上线的系统进行性能预估；后者需要压力测试辅助进行，此处不表。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;针对GO应用，性能诊断工具主要分为两层:OS层面和GO应用层面(go tool pprof /trace /gc)&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;OS诊断&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;系统诊断，我们一般主要关注三个方面: CPU 、Memory、I/O&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;1.1 CPU&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;CPU诊断主要关注平均负载（Load Average），CPU使用率，上下文切换（Context Switch）。常用&lt;span&gt;&lt;strong&gt;top&lt;/strong&gt;&lt;/span&gt;命令查看cpu使用率以及服务器负载情况。&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.1296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfOouKulWoXicmX7ib8xnpJQmSZjB1EZQjLEFl6472bIYfUorhWVEibYarSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;平均负载:0.14 0.07 0.06 分别表示过去1分钟、5分钟、15分钟的机器负载的平均值，根据经验，若负载数值小于0.7*CPU个数则正常，超过或者达到CPU核数的四五倍，则系统的负载就明显偏高。&lt;/p&gt;&lt;p&gt;CPU的上下文切换情况可&lt;span&gt;通过&lt;/span&gt;&lt;strong&gt;&lt;span&gt;vmstat&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;命令可以查看，上下文切换发生的场景有如下几种:&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;时间片用完，CPU正常调度下一个任务&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;被其他优先级更高的任务抢占&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;执行任务碰到I/O阻塞，挂起当前任务，切换到下一个任务&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;用户代码主动挂起当前任务让出CPU&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;多任务抢占资源，因没抢到而被挂起&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;硬件中断&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;1.2  Memory&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;从操作系统角度，内存关注应用进程是否足够，可以使用 free –m 命令查看内存的使用情况。&lt;/p&gt;&lt;p&gt;通过 top 命令可以查看进程使用的虚拟内存 VIRT 和物理内存 RES，根据公式 VIRT = SWAP + RES 可以推算出具体应用使用的交换分区（Swap）情况，使用交换分区过大会影响 应用性能，可以将 swappiness 值调到尽可能小。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;1.3 I/O&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;I/O 包括磁盘 I/O 和网络 I/O，一般情况下磁盘更容易出现 I/O 瓶颈。通过&lt;span&gt;&lt;strong&gt;iostat&lt;/strong&gt;&lt;/span&gt;可以查看磁盘的读写情况，通过 CPU 的 I/O wait 可以看出磁盘 I/O 是否正常。&lt;/p&gt;&lt;p&gt;如果磁盘 I/O 一直处于很高的状态，说明磁盘太慢或故障，成为了性能瓶颈，需要进行应用优化或者磁盘更换。&lt;/p&gt;&lt;p&gt;除了常用的 top、 ps、vmstat、iostat 等命令，还有其他 Linux 工具可以诊断系统问题，如 mpstat、tcpdump、netstat、pidstat、sar 等 更多Linux性能诊断工具如下图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5873873873873874&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfODpGoMKJia5YRHkgWiaFicyBDjM2rAfnNC4crRBOtUHVrPV84picvtg9zAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;555&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;GO应用诊断&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;go生态已经为我们提供了大量的API和诊断工具帮助我们解决go应用的性能问题。我们常用的大致可以分为两类:&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2.1 profiling&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;profile一般被称为性能分析，对程序而言，就是程序运行时的各种概况信息，包括cpu占用情况、内存情况、线程情况等。方便分析昂贵或频繁调用的程序场景。&lt;/section&gt;&lt;section&gt;&lt;span&gt;如何使用？&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1.首先&lt;/span&gt;&lt;span&gt;profiling代码埋入&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; _ &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        log.Println(http.ListenAndServe(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;0.0.0.0:9090&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.保存特定时间点的profile，例如保存heap信息&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;curl&lt;/span&gt; http://localhost:6060/debug/pprof/heap --output heap.tar.gz&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;3.使用go tool pprof 分析保存的profile快照，如分析上述heap信息&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;tool&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;pprof&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.gz&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2.1.1  CPU Profiling&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;pprof可以帮忙我们分析出函数执行缓慢问题 &lt;span&gt; &lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;PU占用过高问题&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go tool pprof &lt;span class=&quot;code-snippet__symbol&quot;&gt;http:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/localhost:6060/debug&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/pprof/profile&lt;/span&gt;?second=&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;命令行方式: 常用命令 top  list traces&lt;/p&gt;&lt;p&gt;top: 查看按照占用内存或cpu多少排序的前10的函数信息&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;flat:当前函数占用的CPU时长（&lt;span&gt;&lt;strong&gt;不包含其调用的其他函数&lt;/strong&gt;&lt;/span&gt;）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;flat%:当前函数使用CPU占总CPU时长的百分比&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;sum%:前面每一行flat百分比的和&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;cum: 累计量，当前函数及其子函数占用CPU时长 &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;cum%:累计量占总量的百分比&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;       cum&amp;gt;=flat&lt;/p&gt;&lt;p&gt;list: 查看某个函数的代码 以及该函数每行代码的指标信息&lt;/p&gt;&lt;p&gt;traces:打印所有函数调用栈 以及调用栈的指标信息&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfOeQA3ECiaHM1QIZqylVJPwcDpH681RanMxxdVgMpIibAvZ1HvfKfI5CQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;UI界面方式：从服务器download下生成的sample文件  &lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;go&lt;/span&gt; tool pprof -http=:&lt;span class=&quot;code-snippet__number&quot;&gt;8080&lt;/span&gt; pprof.xxx.samples.cpu.&lt;span class=&quot;code-snippet__number&quot;&gt;001&lt;/span&gt;.pb.gz&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.61328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfOyicag1qDSS6EXqGTCWA0icI2Ilm5SZwk8qMMGoicfic8iclm8nBNmS5wiaEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.51015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfO87PlJ6OgdxD0SA79sGG7rwZPvoYsbVAeZ1luAwCkrfzJO3OJgh3wOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;Flame graph很清晰得可以看到当前CPU被哪些函数执行栈占用&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1.2 Heap Profiling&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go tool pprof &lt;span class=&quot;code-snippet__symbol&quot;&gt;http:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/localhost:6060/debug&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/pprof/heap&lt;/span&gt;?second=&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;命令行 UI查看方式 同理&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.66796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfO37ZQPFXLfV6gS3hj3THd6nXBWalicznicS3jXvhIl1fWom5IZvKIaVZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.396875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfO6Gib1BCUmRKqKu43LWRI2ZaqS7icB1pAItMlsbiceTwbibKxZM3ouibp0CA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;graph中方框越大 占用内存越多  火焰图 宽度越大 占用内存越多&lt;/p&gt;&lt;p&gt;SAMPLE-&amp;gt;inuse_objects可以查看当前的对象数量 这个参数对于分析gc线程占用较高cpu时很有用处 它侧重查看对象数量&lt;/p&gt;&lt;p&gt;inuse_space图可以查看具体的内存占用&lt;/p&gt;&lt;p&gt;毕竟对于10个100m的对象和1亿个10字节的对象占用内存几乎一样大，但是回收起来一亿个小对象肯定比10个大对象要慢很多。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go tool pprof -inuse_space &lt;span class=&quot;code-snippet__symbol&quot;&gt;http:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/localhost:6060/debug&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/pprof/heap&lt;/span&gt; : 分析应用程序的常驻内存占用情况 （默认）&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go tool pprof -alloc_objects &lt;span class=&quot;code-snippet__symbol&quot;&gt;http:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/localhost:6060/debug&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/pprof/heap&lt;/span&gt;: 分析应用程序的内存临时分配情况&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.3 并发请求问题 查看方式跟上面类似。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go tool pprof &lt;span class=&quot;code-snippet__symbol&quot;&gt;http:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/localhost:6060/debug&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/pprof/goroutine&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go tool pprof &lt;span class=&quot;code-snippet__symbol&quot;&gt;http:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/localhost:6060/debug&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/pprof/block&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go tool pprof &lt;span class=&quot;code-snippet__symbol&quot;&gt;http:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/localhost:6060/debug&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/pprof/mutex&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;2.2 tracing&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;trace并不是万能的，它更侧重于记录分析 采样时间内运行时系统具体干了什么。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;收集trace数据的三种方式:&lt;/p&gt;&lt;p&gt;1. 使用runtime/trace包 调用trace.Start()和trace.Stop()&lt;/p&gt;&lt;p&gt;2. 使用go test -trace=&amp;lt;file&amp;gt;测试标识&lt;/p&gt;&lt;p&gt;3. 使用debug/pprof/trace handler 获取运行时系统最好的方法&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;例如，通过 &lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;go&lt;/span&gt; tool pprof http://localhost:6060/debug/pprof/trace?seconds=20 &amp;gt; trace.out&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;获取运行时服务的trace信息，&lt;span&gt;使用&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go tool trace trace.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt; 会自动打开浏览器展示出UI界面&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.846875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfO1kJnnAJbibgqlVmbOcx0jmmhW3ibZY7ySAibq3pubELMicZbufq4CyduFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;其中trace view 只能使用chrome浏览器查看，这里go截止1.14版本存在一个 bug，解决办法如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;tool trace trace.out 无法查看trace view&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;bug:https://github.com/golang/go/issues/25151&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;mac&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;解决版本：安装gotip&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;get golang.org/dl/gotip&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;gotip&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;download&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;then&lt;/span&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;使用 gotip tool trace trace.out即可&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;获取的trace.out 二进制文件也可以转化为pprof格式的文件&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;tool trace -pprof=TYPE trace.out &amp;gt; TYPE.pprof&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Tips&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;生成的profile文件 支持 network profiling、synchronization profiling、syscall profiling、scheduler profiling&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;tool pprof TYPE.pprof&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用gotip tool trace trace.out可以查看到trace view的丰富操作界面：&lt;/p&gt;&lt;p&gt;操作技巧：&lt;/p&gt;&lt;p&gt;ctrl + 1  选择信息&lt;/p&gt;&lt;p&gt;ctrl + 2 移动选区&lt;/p&gt;&lt;p&gt;ctrl + 3 放大选区&lt;/p&gt;&lt;p&gt;ctrl + 4 指定选区区间&lt;/p&gt;&lt;p&gt;shift + ? 帮助信息&lt;/p&gt;&lt;p&gt;AWSD跟游戏快捷键类似 玩起来跟顺手&lt;/p&gt;&lt;p&gt;整体的控制台信息 如下图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.315625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfOMqvic3WmearPhlg0IoCRzXnN2L3ItRSd5FO6lzldibj6giaeGiaWMR1jmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;goroutine区域选中时间区间&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5934065934065934&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfOk2LAklZclufTyWe4EntS6n3bRrApTQNPBnf8FiaUUha5ozQQ9icwGa5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/p&gt;&lt;p&gt;OS线程(Machine): 显示在执行期间有多少个线程在运行，其包含正在调用 Syscall（InSyscall）、运行中（Running）这两种状态。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.55390625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfOmz7lJXS0aO6yOOZwHrODvXLD6G7MxkL9tGK9bTv8dCD2vicRYJwic1Cw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;每个Processor分两层，上一层表示Processor上运行的goroutine的信息，下一层表示processor附加的事件比如SysCall 或runtime system events&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.34609375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfO9kkhzmn68CvaZQGcDLvutOEPz48BHMkcd1lCkHmPib0YdXuAHx3gK5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;ctrl+3 放大选区，选中goroutine 可以查看，特定时间点 特定goroutine的执行堆栈信息以及关联的事件信息&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.55078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfOEtDxDXIF2PNnhDqnksOAHCSn92GQsubINZUrWfaNnXXV6hCJnTsJXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;goroutine analysis&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.63046875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfO23bdp926gOtQV45lJKeqXPHoicicjbMDW2FyZyQNXLodK0CKgvMAIM7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;点击goroutine的id 可以跳到trace view 详细查看goroutine具体干了什么&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;名称&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;含义&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;Execution&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;执行时间&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;Network wait&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;网络等待时间&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;Sync Block&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;同步阻塞时间&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;Blocking syscall&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;系统调用阻塞时间&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;Scheduler wait&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;调度等待时间&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;GC Sweeping&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;GC清扫时间&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;GC Pause&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;GC暂停时间&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;实践 一个延迟问题诊断&lt;/p&gt;&lt;p&gt;当我们一个执行关键任务的协程从运行中被阻塞。这里可能的原因：被syscall阻塞 、阻塞在共享内存(channel/mutex etc)、阻塞在运行时(如 GC)、甚至有可能是运行时调度器不工作导致的。这种问题使用pprof很难排查，&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用trace只要我们确定了时间范围就可以在proc区域很容易找到问题的源头&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.321875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/brwbhUj36Sx7lCvulE3DIfgAPYFGGUfOVgb9CFk7SuDlOXq3bcIfwarPKrQdm8iaXhILvmTmpydMAK1fMzKMYEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;上图可见，GC 的MARK阶段阻塞了主协程的运行&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2.3 GC&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;golang的gc算法是根据标记清除改进的三色标记法，大概流程:&lt;br/&gt;&lt;/section&gt;&lt;p&gt;初始所有对象都是白色&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Stack scan阶段:&lt;span&gt;从root&lt;/span&gt;&lt;span&gt;出发扫描所有可达对象，标记为灰色并放入待处理队列；root包括全局指针和goroutine栈上的指针&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Mark阶段:1.&lt;span&gt;从待处理队列取出灰色对象，将其引用的对象标记为灰色并放入队列，自身标记为黑色 2. re-scan全局指针和栈，因为mark和用户程序并行运行，故过程1的时候可能会有新的对象分配，这时需要通过写屏障(write barrier)记录下来；re-scan再完成检查；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;重复步骤Mark阶段，直到灰色对象队列为空，执行清扫工作（白色即为垃圾对象）&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;go的三色标记法也存在STW(Stop The World&lt;span&gt;),大致有两个场景&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;GC即将开始时，需要STW 做一些准备工作， 如enable write barrier&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;re-scan也需要STW，否则上面Mark阶段的re-scan无法终止&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;通过GODEBUG=gctrace=1可以开启gc日志，查看gc的结果信息&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;GODEBUG=gctrace=1 go run main.go   &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;gc&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;1 @0.001s 19%: 0.014+3.7+0.015 ms clock, 0.11+2.8/5.7/3.2+0.12 ms cpu, 5-&amp;gt;6-&amp;gt;6 MB, 6 MB goal, 8 P&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;gc&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;2 @0.024s 6%: 0.004+3.4+0.010 ms clock, 0.032+1.4/4.5/5.3+0.085 ms cpu, 13-&amp;gt;14-&amp;gt;13 MB, 14 MB goal, 8 P&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;gc&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;3 @0.093s 3%: 0.004+6.1+0.027 ms clock, 0.032+0.19/11/15+0.22 ms cpu, 24-&amp;gt;25-&amp;gt;22 MB, 26 MB goal, 8 P&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;scvg&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;0 MB released&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;scvg&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;inuse: 4, idle: 58, sys: 63, released: 58, consumed: 4 (MB)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;scvg&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;0 MB released&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;scvg&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;inuse: 4, idle: 58, sys: 63, released: 58, consumed: 4 (MB)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;scvg&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;0 MB released&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;scvg&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;inuse: 4, idle: 58, sys: 63, released: 58, consumed: 4 (MB)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;scvg&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;0 MB released&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;scvg&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;inuse: 4, idle: 58, sys: 63, released: 58, consumed: 4 (MB)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;格式&lt;/p&gt;&lt;p&gt;gc # @#s #%: #+#+# ms clock, #+#/#/#+# ms cpu, #-&amp;gt;#-&amp;gt;# MB, # MB goal, # P&lt;/p&gt;&lt;p&gt;含义&lt;/p&gt;&lt;p&gt;gc#：GC 执行次数的编号，每次叠加。&lt;/p&gt;&lt;p&gt;@#s：自程序启动后到当前的具体秒数。&lt;/p&gt;&lt;p&gt;#%：自程序启动以来在GC中花费的时间百分比。&lt;/p&gt;&lt;p&gt;#+...+#：GC 的标记工作共使用的 CPU 时间占总 CPU 时间的百分比。&lt;/p&gt;&lt;p&gt;#-&amp;gt;#-&amp;gt;# MB：分别表示 GC 启动时, GC 结束时, GC 活动时的堆大小.&lt;/p&gt;&lt;p&gt;#MB goal：下一次触发 GC 的内存占用阈值。&lt;/p&gt;&lt;p&gt;#P：当前使用的处理器 P 的数量。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;拓展&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;当我们的程序陷入CPU 和IO混和负载过高时，我们使用pprof profile只能检测出CPU耗时的函数，但是屏蔽了IO等待过长的函数。&lt;/section&gt;&lt;p&gt;https://github.com/felixge/fgprof  给出了一个解决方案：&lt;/p&gt;&lt;section&gt;具体做法是:用一个后台协程在采样时间区间内每秒99次调用runtime.GoruntineProfile，返回的结果忽略了协程当时消耗CPU还是非消耗CPU的区别 进行统计，保存在内存中的map中，可导出转化为pprof&lt;/section&gt;&lt;p&gt;具体用法：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt;(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    _ &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/felixge/fgprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    http.DefaultServeMux.Handle(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/debug/fgprof&quot;&lt;/span&gt;, fgprof.Handler())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        log.Println(http.ListenAndServe(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;:6060&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;git clone https:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cd FlameGraph&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;curl -s &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;localhost:6060/debug/fgprof?seconds=3&#x27;&lt;/span&gt; &amp;gt; fgprof.fold&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./flamegraph.pl fgprof.fold &amp;gt; fgprof.svg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;如果遇到这种CPU消耗型和非CPU消耗型混合的情况下 可以试试排查下。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-category=&quot;引导&quot; data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;扫描二维码&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;获取更多精彩&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;光华路程序猿&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;120&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;120&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/brwbhUj36SyoCoJyPpV17ks2fEH3zn3D4nqD0TiaoytDa1nWVy2otQWNbQQKtvESltEUzqLyMOeAicCSPH2fMvwQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt; &lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>852129aefd8f04dc4b529bf0ace84287</guid>
<title>酷瓜云课堂（腾讯云版）v1.2.7 发布 - 钉钉机器人群通知</title>
<link>https://toutiao.io/k/qavfm9w</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;container app-preview post-body&quot;&gt;
  &lt;div class=&quot;preview&quot;&gt;&lt;h3&gt;新增&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;钉钉机器人群消息通知&lt;/li&gt;
&lt;li&gt;demo分支重置演示帐号计划任务&lt;/li&gt;
&lt;li&gt;添加学员自动加入相关课程群组&lt;/li&gt;
&lt;li&gt;后台查看积分记录&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;更新&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;路由重命名 admin.group -&amp;gt; admin.im_group&lt;/li&gt;
&lt;li&gt;路由重命名 home.group -&amp;gt; home.im_group&lt;/li&gt;
&lt;li&gt;样式重命名 sidebar-teacher-card -&amp;gt; sidebar-user-card&lt;/li&gt;
&lt;li&gt;获取版本发布信息改成异步模式&lt;/li&gt;
&lt;li&gt;去除顶部积分导航&lt;/li&gt;
&lt;li&gt;用户中心部分样式调整&lt;/li&gt;
&lt;li&gt;后台部分导航调整&lt;/li&gt;
&lt;li&gt;不能删除课程教师问题&lt;/li&gt;
&lt;li&gt;积分模块可通过后台控制是否启用&lt;/li&gt;
&lt;li&gt;解除好友关系后好友数量未递减&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/326350-1ff6357c9622a6df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;钉钉机器人通知.png&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;项目介绍&lt;/h3&gt;

&lt;p&gt;酷瓜云课堂，依托腾讯云基础服务架构，采用C扩展框架Phalcon开发，GPL-2.0开源协议，致力开源网课系统，开源网校系统，开源在线教育系统。&lt;/p&gt;

&lt;h3&gt;系统功能&lt;/h3&gt;

&lt;p&gt;实现了点播、直播、专栏、会员、微聊等&lt;/p&gt;

&lt;h3&gt;托管仓库&lt;/h3&gt;



&lt;h3&gt;意见反馈&lt;/h3&gt;



&lt;h3&gt;开源助力&lt;/h3&gt;

&lt;p&gt;毫无保留的真开源不容易，如果对你有帮助，请给我们 &lt;strong&gt;STAR&lt;/strong&gt; ！！！&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>