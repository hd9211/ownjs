<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3028527a88064f549b970132bf756aaa</guid>
<title>多线程之 AsyncTask 使用详解和从源码中深入理解 AsyncTask 机制</title>
<link>https://toutiao.io/k/4w0ue69</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;AsyncTask是Android提供的一个助手类，它对Thread和Handler进行了封装，方便我们使用；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Android之所以提供AsyncTask这个类，就是为了方便我们在后台线程中执行操作，然后将结果发送给主线程，从而在主线程中进行UI更新等操作。在使用AsyncTask时，我们无需关注Thread和Handler，AsyncTask内部会对其进行管理，这样我们就只需要关注于我们的业务逻辑即可；&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、AsyncTask介绍和使用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、AsyncTask介绍&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;AsyncTask有四个重要的回调方法，分别是：onPreExecute、doInBackground, onProgressUpdate 和 onPostExecute。这四个方法会在AsyncTask的不同时期进行自动调用，我们只需要实现这几个方法的内部逻辑即可；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这四个方法的一些参数和返回值都是基于泛型的，而且泛型的类型还不一样，所以在AsyncTask的使用中会遇到三种泛型参数：Params, Progress 和 Result；&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public abstract &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AsyncTask&lt;/span&gt;&amp;lt;Params, &lt;span class=&quot;code-snippet__title&quot;&gt;Progress&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;Result&lt;/span&gt;&amp;gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;AsyncTask是一个抽象泛型类。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其中，三个泛型类型参数的含义如下：&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、AsyncTask的简单使用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DownloadTask&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AsyncTask&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Void&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;Boolean&lt;/span&gt;&amp;gt; &lt;/span&gt;{  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onPreExecute&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        progressDialog.show();  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; Boolean &lt;span class=&quot;code-snippet__title&quot;&gt;doInBackground&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Void... params)&lt;/span&gt; &lt;/span&gt;{  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; downloadPercent = doDownload();  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                publishProgress(downloadPercent);  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (downloadPercent &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onProgressUpdate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Integer... values)&lt;/span&gt; &lt;/span&gt;{  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        progressDialog.setMessage(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;当前下载进度：&quot;&lt;/span&gt; + values[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%&quot;&lt;/span&gt;);  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onPostExecute&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Boolean result)&lt;/span&gt; &lt;/span&gt;{  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        progressDialog.dismiss();  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (result) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Toast.makeText(context, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;下载成功&quot;&lt;/span&gt;, Toast.LENGTH_SHORT).show();  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Toast.makeText(context, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;下载失败&quot;&lt;/span&gt;, Toast.LENGTH_SHORT).show();  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;模拟了一个下载任务，在doInBackground()方法中去执行具体的下载逻辑，在onProgressUpdate()方法中显示当前的下载进度，在onPostExecute()方法中来提示任务的执行结果。如果想要启动这个任务，只需要简单地调用以下代码即可：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; DownloadTask().execute();  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、使用AsyncTask的注意事项&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;①异步任务的实例必须在UI线程中创建，即AsyncTask对象必须在UI线程中创建；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;②execute(Params... params)方法必须在UI线程中调用；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;③不要手动调用onPreExecute()，doInBackground(Params... params)，onProgressUpdate(Progress... values)，onPostExecute(Result result)这几个方法；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;④不能在doInBackground(Params... params)中更改UI组件的信息；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;⑤一个任务实例只能执行一次，如果执行第二次将会抛出异常；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、AsyncTask的源码分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6595174262734584&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhEkjTLwljVKkQdddQrviaHGSKnTC5n8kMjfye1MFM4e8iagZTxQ7TKr2AiatvYaownM7LhsZ7jgBvlMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;746&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、AsyncTask的构造函数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  MyTask mTask = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; MyTask();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AsyncTask&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWorker = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WorkerRunnable&amp;lt;Params, Result&amp;gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Result &lt;span class=&quot;code-snippet__title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                mTaskInvoked.set(&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                Result result = &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    result = doInBackground(mParams);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    Binder.flushPendingCommands();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Throwable tr) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    mCancelled.set(&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; tr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    postResult(result); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mFuture = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; FutureTask&amp;lt;Result&amp;gt;(mWorker) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    postResultIfNotInvoked(get());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    android.util.Log.w(LOG_TAG, e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (ExecutionException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;An error occurred while executing doInBackground()&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            e.getCause());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (CancellationException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    postResultIfNotInvoked(&lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;WorkerRunnable&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Params&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;Result&lt;/span&gt;&amp;gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Callable&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Result&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Params[] mParams;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;FutureTask&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Callable&amp;lt;V&amp;gt; callable)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (callable == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; NullPointerException();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.callable = callable;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.state = NEW;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;postResultIfNotInvoked&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Result result)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; wasTaskInvoked = mTaskInvoked.get();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!wasTaskInvoked) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            postResult(result);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、execute(Params... params)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  mTask.execute()；&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; final AsyncTask&amp;lt;Params, Progress, Result&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Params... &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; executeOnExecutor(sDefaultExecutor, &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; final AsyncTask&amp;lt;Params, Progress, Result&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;executeOnExecutor&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Executor exec,Params... &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (mStatus != Status.PENDING) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;switch&lt;/span&gt; (mStatus) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; RUNNING:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Cannot execute task:&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; the task is already running.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; FINISHED:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Cannot execute task:&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; the task has already been executed &quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;(a task can be executed only once)&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mStatus = Status.RUNNING;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        onPreExecute();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWorker.mParams = &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        exec.execute(mFuture);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SerialExecutor&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Executor&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; ArrayDeque&amp;lt;Runnable&amp;gt; mTasks = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ArrayDeque&amp;lt;Runnable&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Runnable mActive;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; Runnable r)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mTasks.offer(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Runnable() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        r.run();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        scheduleNext();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (mActive == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                scheduleNext();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;scheduleNext&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((mActive = mTasks.poll()) != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                THREAD_POOL_EXECUTOR.execute(mActive);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;执行任务前，通过 任务队列 线程池类（SerialExecutor）将任务按顺序放入到队列中；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过同步锁修饰execute（）从而保证AsyncTask中的任务是串行执行的；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;之后的线程任务执行是 通过任务线程池类（THREAD_POOL_EXECUTOR） 进行的；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、THREAD_POOL_EXECUTOR.execute（）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; CPU_COUNT = Runtime.getRuntime().availableProcessors();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; CORE_POOL_SIZE = Math.max(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, Math.min(CPU_COUNT - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; MAXIMUM_POOL_SIZE = CPU_COUNT * &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; KEEP_ALIVE_SECONDS = &lt;span class=&quot;code-snippet__number&quot;&gt;30&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; ThreadFactory sThreadFactory = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ThreadFactory() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; AtomicInteger mCount = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; AtomicInteger(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Thread &lt;span class=&quot;code-snippet__title&quot;&gt;newThread&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Runnable r)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Thread(r, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;AsyncTask #&quot;&lt;/span&gt; + mCount.getAndIncrement());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; BlockingQueue&amp;lt;Runnable&amp;gt; sPoolWorkQueue =&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;Runnable&amp;gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;128&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; Executor THREAD_POOL_EXECUTOR;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ThreadPoolExecutor threadPoolExecutor = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                sPoolWorkQueue, sThreadFactory);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        threadPoolExecutor.allowCoreThreadTimeOut(&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        THREAD_POOL_EXECUTOR = threadPoolExecutor;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4、call（）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AsyncTask&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWorker = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WorkerRunnable&amp;lt;Params, Result&amp;gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Result &lt;span class=&quot;code-snippet__title&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;) throws Exception&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                mTaskInvoked.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                Result result = &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    result = doInBackground(mParams);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    Binder.flushPendingCommands();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Throwable tr) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    mCancelled.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; tr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    postResult(result); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; Result &lt;span class=&quot;code-snippet__title&quot;&gt;postResult&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Result result&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @SuppressWarnings(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; AsyncTaskResult&amp;lt;Result&amp;gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;, result));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        message.sendToTarget();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;InternalHandler&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Handler&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;InternalHandler&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            super(Looper.getMainLooper());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @&lt;span class=&quot;code-snippet__function&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;handleMessage&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Message msg&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            AsyncTaskResult&amp;lt;?&amp;gt; result = (AsyncTaskResult&amp;lt;?&amp;gt;) msg.obj;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;switch&lt;/span&gt; (msg.what) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; MESSAGE_POST_RESULT:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    result.mTask.finish(result.mData[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]); -&amp;gt;&amp;gt;分析&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; MESSAGE_POST_PROGRESS:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    result.mTask.onProgressUpdate(result.mData);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;finish&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Result result&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (isCancelled()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                onCancelled(result);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                onPostExecute(result);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mStatus = Status.FINISHED;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;任务线程池类（THREAD_POOL_EXECUTOR）实际上是1个已配置好的可执行并行任务的线程池；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;调用THREAD_POOL_EXECUTOR.execute（）实际上是调用线程池的execute()去执行具体耗时任务；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;而该耗时任务则是步骤2中初始化 WorkerRunnable实例对象时复写的call（）内容；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在call（）方法里，先调用 我们复写的doInBackground(mParams)执行耗时操作；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;再调用postResult(result)， 通过 InternalHandler 类 将任务消息传递到主线程；根据消息标识（MESSAGE_POST_RESULT）判断，最终通过finish(）调用我们复写的onPostExecute(result)，从而实现UI更新操作&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;AsyncTask的源码 分析完毕；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;生命周期：AsyncTask不与任何组件绑定生命周期，所以在Activity/或者Fragment中创建执行AsyncTask时，最好在Activity/Fragment的onDestory()调用 cancel(boolean)；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;内存泄漏：如果AsyncTask被声明为Activity的非静态的内部类，那么AsyncTask会保留一个对创建了AsyncTask的Activity的引用。如果Activity已经被销毁，AsyncTask的后台线程还在执行，它将继续在内存里保留这个引用，导致Activity无法被回收，引起内存泄露；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;结果丢失：屏幕旋转或Activity在后台被系统杀掉等情况会导致Activity的重新创建，之前运行的AsyncTask（非静态的内部类）会持有一个之前Activity的引用，这个引用已经无效，这时调用onPostExecute()再去更新界面将不再生效；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2b9eaf61f4efb97baaf19d3691036a71</guid>
<title>区块链 101：绝对初学者的快速入门</title>
<link>https://toutiao.io/k/ubgukqi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content custom&quot;&gt;&lt;h1 id=&quot;区块链101-绝对初学者的快速入门&quot;&gt;&lt;a href=&quot;#区块链101-绝对初学者的快速入门&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 区块链101: 绝对初学者的快速入门&lt;/h1&gt; &lt;p&gt;最近，我听到了很多关于加密、区块链、比特币、 Ethereum、智能合同、 defi (分散金融)、 dapps (分散应用)、 DAOs (分散自治组织)、 NFTs (不可替换令牌)、 web3等等。&lt;/p&gt; &lt;p&gt;我想了解更多关于这些东西的知识，所以我开始四处寻找教程。我发现自己在开始后不久就暂停了每一个，因为他们似乎都认为我对这些意味着什么有一丁点的了解。我感到特别困惑，因为他们称之为初学者指南，但又参考了其他一些术语，好像我已经知道它们的意思。读者，我不知道！&lt;/p&gt; &lt;p&gt;最终，我在免费代码营找到了一个很棒的教程。这个视频教程长达16个小时，所以这可能是一系列的博客文章。&lt;/p&gt; &lt;p&gt;https://www.youtube.com/watch?v=M576WGiDBdQ&lt;/p&gt; &lt;p&gt;以下是我对这些概念的笔记——从一个完全初学者的角度来看。&lt;/p&gt; &lt;p&gt;如果不知道新概念的用途，就很难理解它们，所以让我们从这里开始。&lt;/p&gt; &lt;p&gt;实物货币和我们的支出方式受到诸如国家领导人、银行和其他金融机构等实体的控制。最近我想到的几个案例是关于罗宾汉和只有粉丝的。&lt;/p&gt; &lt;p&gt;在 Reddit 用户的共同努力下，Robinhood 购买了 GameStop 的股票(至少对一些人来说是这样) ，这使得股价飙升。虽然罗宾汉的举动激怒了很多人，但他们也无能为力，因为罗宾汉管理着谁可以在他们的平台上买卖东西。&lt;/p&gt; &lt;p&gt;在来自 Visa 和 Mastercard 等支付服务提供商的压力越来越大之后，OnlyFans 宣布他们将禁止色情内容。由于这些金融机构的权力，该公司感到被迫按照他们的规则行事，或者失去了接受这些形式付款的能力。&lt;/p&gt; &lt;p&gt;一个不受单个实体控制的分散网络可以解决这些问题。通过分散的网络，我们获得了透明度、自由和安全性。&lt;/p&gt; &lt;p&gt;BLOCKCHAIN 区块链
起点是块环链-一种类型的数据库，存储信息在单个块是链接在一起。&lt;/p&gt; &lt;p&gt;一个区块链是共享的许多计算机(称为节点) ，所以没有单一的记录，而是多个副本的记录，使它几乎不可能被黑客。所有这些记录对每个人都是可见的。&lt;/p&gt; &lt;p&gt;与传统数据库不同，块环链中的块是不可变的，这意味着它们不能被改变。因此，当一些东西被写到区块链，它作为一个永久的记录。&lt;/p&gt; &lt;p&gt;当新的数据需要添加到块环链，它必须写在一个新的块，然后链接在一起的最后一个块。这些块是按顺序排列的。&lt;/p&gt; &lt;p&gt;因为区块链是分散的，没有中央管理控制什么可以发生，什么不可以发生。&lt;/p&gt; &lt;p&gt;BITCOIN 比特币
比特币是最早使用区块链的协议之一。它是一种加密货币(我认为它是“数字货币”) ，用于在分散的网络中进行点对点交易来买卖东西。所有这些交易的记录都存储在区块链上。&lt;/p&gt; &lt;p&gt;但是仅仅因为它是数字化的并不意味着它有无限的数量。比特币的数量是有限的，就像实物货币一样。&lt;/p&gt; &lt;p&gt;ETHEREUM 以太属
以太是另一种区块链协议，该协议的加密货币称为以太币(ETH)。
比起比特币，Ethereum 更进一步使用区块链。有了 Ethereum，你不仅仅局限于分散的货币，而且它使人们能够构建分散的应用程序(也称为 dapps)和分散的组织(也称为 DAOs)。&lt;/p&gt; &lt;p&gt;以太网不是唯一利用区块链的先进协议，但它是目前最流行的。&lt;/p&gt; &lt;p&gt;这意味着我们可以用它来编写任何程序! 这些程序被称为智能合同。&lt;/p&gt; &lt;p&gt;SMART CONTRACTS 精明合约
智能合同是描述当事人之间的协议并自行执行协议条款的代码。智能合同在区块链上执行。在 Ethereum 上，智能合同使用 solideity 编程语言编码。&lt;/p&gt; &lt;p&gt;智能合约的伟大之处在于，各方之间不需要信任。条款和条件是编码和自动执行，所以你不必担心对方(如保险公司)不履行他们的协议。&lt;/p&gt; &lt;p&gt;这是以太坊协议相对于比特币协议的主要优势之一。比特币也有智能合约，但是，从设计上来说，它们不是图灵完备的，这意味着它们不能具备以太坊可能具备的广泛功能。比特币更多地被视为一种资产，而以太坊是一种资产，也是构建智能合约的平台。
发生在块环链停留在块环链(这个概念也被称为在链) ，这对需要访问外部数据或计算的智能合同提出了一个问题。块链神谕解决了这个问题。&lt;/p&gt; &lt;p&gt;神谕能够执行计算，并提供信息的封锁链条上的智能合同。但是因为先知是外部的块链，我们需要确保他们提供的数据是分散的，然后再发送给块链。&lt;/p&gt; &lt;p&gt;链接是一个分散的预言网络(最流行的一个) ，将促进外部数据传输到区块链，确保它是干净的。使用外部数据的智能合同在技术上被称为混合智能合同，但这个术语可以与智能合同互换。如果有人明确地说“混合智能合同”，他们是有意指出外部数据(外链)被使用的事实。链接可以用于任何区块链和智能合同平台，而不仅仅是以太网。&lt;/p&gt; &lt;p&gt;Dapps 是分散的应用程序，通常由多个智能合同组成。&lt;/p&gt; &lt;p&gt;好吧，这就是我现在所知道的。请继续关注，我将获得更多信息，与此同时，加入关于这篇文章的讨论:&lt;/p&gt; &lt;h3 id=&quot;author&quot;&gt;&lt;a href=&quot;#author&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; author&lt;/h3&gt; &lt;p&gt;石头 磊哥 seven 随便叫&lt;/p&gt; &lt;h3 id=&quot;company&quot;&gt;&lt;a href=&quot;#company&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; company&lt;/h3&gt; &lt;p&gt;HSBC
大家好，我已经加入了HSBC&lt;/p&gt; &lt;h3 id=&quot;roles&quot;&gt;&lt;a href=&quot;#roles&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; roles&lt;/h3&gt; &lt;p&gt;QA（营生） dev（front-end dev 兴趣爱好）&lt;/p&gt; &lt;h3 id=&quot;联系方式&quot;&gt;&lt;a href=&quot;#联系方式&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 联系方式&lt;/h3&gt; &lt;p&gt;如果想转载或者高薪挖我 请直接联系我 哈哈&lt;/p&gt; &lt;h4 id=&quot;wechat&quot;&gt;&lt;a href=&quot;#wechat&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; wechat:&lt;/h4&gt; &lt;p&gt;qileiwangnan&lt;/p&gt; &lt;h4 id=&quot;email&quot;&gt;&lt;a href=&quot;#email&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; email:&lt;/h4&gt; &lt;p&gt;qileilove@gmail.com&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2140bfe9864280f498b5e1dd5ff212c2</guid>
<title>语言可解释性工具 (LIT)：NLP 模型的交互式探索和分析</title>
<link>https://toutiao.io/k/g1d1ws2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;随着自然语言处理 (NLP) 模型变得更加强大并部署在更真实的环境中，了解它们的行为变得越来越重要。虽然建模的进步为许多 NLP 任务带来了前所未有的性能，但许多研究问题仍然不仅涉及这些模型在域转移和对抗性设置下的行为，还涉及它们根据社会偏见或浅层启发式行为的倾向。&lt;/p&gt;&lt;p&gt;对于任何新模型，人们可能想知道模型在哪些情况下表现不佳，为什么模型会做出特定预测，或者模型在不同输入（例如文本样式或代词性别的变化）下的行为是否一致。但是，尽管最近在模型理解和评估方面的工作呈爆炸式增长，但还没有分析的“灵丹妙药”。从业者必须经常试验多种技术，查看输入的局部解释、汇总指标和反事实变化，以更好地理解模型行为，其中每一种技术通常都需要自己的软件包或定制工具。我们之前发布的假设分析工具旨在通过启用分类和回归模型的黑盒探测来应对这一挑战，从而使研究人员能够更轻松地调试性能并通过交互和可视化分析机器学习模型的公平性。但是仍然需要一个工具包来解决 NLP 模型特有的挑战。&lt;/p&gt;&lt;p&gt;考虑到这些挑战，我们构建并开源了语言可解释性工具(LIT)，这是一个用于 NLP 模型理解的交互式平台。LIT 建立在从What-If 工具中汲取的经验教训之上，具有极大的扩展能力，涵盖了广泛的 NLP 任务，包括序列生成、跨度标记、分类和回归，以及可定制和可扩展的可视化和模型分析。&lt;/p&gt;&lt;p&gt;LIT 支持局部解释，包括显着图、注意力和模型预测的丰富可视化，以及包括度量、嵌入空间和灵活切片的聚合分析。它允许用户轻松地在可视化之间跳转以测试本地假设并通过数据集验证它们。LIT 为反事实生成提供支持，其中可以动态添加新数据点，并立即可视化它们对模型的影响。并排比较允许同时可视化两个模型或两个单独的数据点。&lt;/p&gt;&lt;p&gt;&lt;img data-fileid=&quot;100000321&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eG1jA7faiceEo1ZibYd7tvWcbQHk9TCI1icg4EZzdKWiczQgReZgQw90cgMcn8eicZf3nOzMj3Ahg4SNVx3cxRC2h4g/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;em&gt;可定制性&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;为了更好地满足我们希望使用 LIT 的具有不同兴趣和优先级的广泛用户的需求，我们从一开始就构建了易于定制和扩展的工具。在特定的 NLP 模型和数据集上使用 LIT 只需要编写一小段 Python 代码。自定义组件，例如特定于任务的指标计算或反事实生成器，可以用 Python 编写并通过我们提供的 API 添加到 LIT 实例。此外，前端本身可以自定义，新模块直接集成到 UI 中。&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;em&gt;演示&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;为了说明 LIT 的一些功能，我们使用预先训练的模型创建了一些演示。完整列表可在 LIT网站上找到，我们在此处描述其中的两个：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100000322&quot; data-ratio=&quot;0.19140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eG1jA7faiceEo1ZibYd7tvWcbQHk9TCI1iczgBHVs169PBvgkggOxnVSjib7j8Au9qlOQsTDIJB1Tic9Q3vEaY3dFPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-fileid=&quot;100000320&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eG1jA7faiceEo1ZibYd7tvWcbQHk9TCI1icWaiaJZVe6ibKn4oVVHLg4u0QEzHnhcfXgsoiasju15b73DclYf4kQXyJg/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;em&gt;LIT 的实践和未来工作&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;虽然 LIT 是一种新工具，但我们已经看到了它可以为模型理解提供的价值。它的可视化可用于查找模型行为中的模式，例如嵌入空间中的外围集群，或对预测具有极大重要性的单词。LIT 中的探索可以测试模型中的潜在偏差，正如我们在 LIT 探索共同指代模型中的性别偏差的案例研究中所证明的那样。这种类型的分析可以为改进模型性能的后续步骤提供信息，例如应用 MinDiff 来减轻系统偏差。它还可以用作为任何 NLP 模型创建交互式演示的简单快捷方式。&lt;/p&gt;&lt;p&gt;通过我们提供的演示或通过为您自己的模型和数据集启动 LIT 服务器来查看该工具。LIT 的工作才刚刚开始，并且有许多新功能和改进计划，包括从前沿 ML 和 NLP 研究中添加新的可解释性技术。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bb050dee009e66b5d9295065af076d5f</guid>
<title>Go 切片导致内存泄露，被坑两次了</title>
<link>https://toutiao.io/k/5wgsihi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前段时间在我的 Go 读者群里，有小伙伴们在纠结切片（slice）的问题，我写了这篇《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247491675&amp;amp;idx=1&amp;amp;sn=5a887e874999251201c90744434d2471&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Go 切片这道题，吵了一个下午！&lt;/a&gt;》，引起了一拨各种讨论，还是比较欣慰的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这不，有小伙伴给我提出了新的题材：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.31152204836415365&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jj1a9E6xtI8gtoShDuDApIVSOeDS7aC6Oz4B8EYc0DJoxq7dUJ42ibV06IoOOLtCURxjrmGN8Yzng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1406&quot;/&gt;&lt;figcaption&gt;来自读者微信提问&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提出的是 Go 中很容易踩坑的切片内存泄露问题。作为宠粉的煎鱼肯定不会放过，争取让大家都避开这个 “坑”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天这篇文章，就由煎鱼带大家来了解这个问题：Go 切片可能可以怎么泄露法？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;切片泄露的可能&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在业务代码的编写上，我们经常会接受来自外部的接口数据，再把他插入到对应的数据结构中去，再进行下一步的业务聚合、裁剪、封装、处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像在 PHP 语言，常常会放到数组（array）中。在 Go 语言，会放到切片（slice）中。因此在 Go 的切片处理逻辑中，常常会涉及到如下类似的动作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; a []&lt;span&gt;int&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;f&lt;/span&gt;&lt;span&gt;(b []&lt;span&gt;int&lt;/span&gt;)&lt;/span&gt; []&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; a = b[:&lt;span&gt;2&lt;/span&gt;]&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; a&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;仔细想想，&lt;strong&gt;这段程序有没有问题&lt;/strong&gt;，是否存在内存泄露的风险？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是：有的。有明确的切片内存泄露的可能性和风险。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;切片底层结构&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能有些小伙伴会疑惑，怎么就有问题了，是哪里有问题？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里就得复习一下切片的底层基本数据结构了，切片在运行时的表现是 SliceHeader 结构体，定义如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; SliceHeader &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; Data &lt;span&gt;uintptr&lt;/span&gt;&lt;br/&gt; Len  &lt;span&gt;int&lt;/span&gt;&lt;br/&gt; Cap  &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Data：指向具体的底层数组。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Len：代表切片的长度。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Cap：代表切片的容量。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要点是：切片真正存储数据的地方，是一个数组。切片的 Data 属性中&lt;strong&gt;存储的是指向所引用的数组指针地址&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;背后的原因&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上述案例中，我们有一个包全局变量 a，共有 2 个切片 a 和 b，截取了 b 的一部分赋值给了 a，两者存在着关联。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从程序的直面来看，截取了 b 的一部分赋值给了 a，结构似乎是如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5061728395061729&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jj1a9E6xtI8gtoShDuDApINGu2Ocq59mT1Doae58v8G4sicehLIkLOkrRW66dX8ohncgcoLhO42Mg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;972&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但我们进一步打开程序底层来看，他应该是如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5061728395061729&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jj1a9E6xtI8gtoShDuDApIJu5OuHfsUzJ86Y5hh68ibNgFfLUMNU8XZgLXanOHIP0HMibmpviasZGZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;972&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;切片 a 和 b 都共享着同一个底层数组（共享内存块），sliceB 包含全部所引用的字符。sliceA 只包含了 [:2]，也就是 0 和 1 两个索引位的字符。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那他们泄露在哪里了？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;泄露的点&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;泄露的点，就在于虽然切片 b 已经在函数内结束了他的使命了，不再使用了。但切片 a 还在使用，切片 a 和 切片 b 引用的是同一块底层数组（共享内存块）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关键点：&lt;strong&gt;切片 a 引用了底层数组中的一段&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5061728395061729&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jj1a9E6xtI8gtoShDuDApIAIvjs7ibqib9ewGNCyZUhNbiaRaicYXIchIBfBApeA6ibF9qcYKasJv24fQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;972&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然切片 a 只有底层数组中 0 和 1 两个索引位正在被使用，其余未使用的底层数组空间毫无作用。但由于正在被引用，他们也不会被 GC，因此造成了泄露。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;解决办法&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决的办法，就是利用切片的特性。当切片的容量空间不足时，会&lt;strong&gt;重新申请一个新的底层数组来存储，让两者彻底分手&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; a []&lt;span&gt;int&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; c []&lt;span&gt;int&lt;/span&gt;    &lt;span&gt;// 第三者&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;f&lt;/span&gt;&lt;span&gt;(b []&lt;span&gt;int&lt;/span&gt;)&lt;/span&gt; []&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; a = b[:&lt;span&gt;2&lt;/span&gt;]&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;// 新的切片 append 导致切片扩容&lt;/span&gt;&lt;br/&gt; c = &lt;span&gt;append&lt;/span&gt;(c, b[:&lt;span&gt;2&lt;/span&gt;]...)&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;a: %p\nc: %p\nb: %p\n&quot;&lt;/span&gt;, &amp;amp;a[&lt;span&gt;0&lt;/span&gt;], &amp;amp;c[&lt;span&gt;0&lt;/span&gt;], &amp;amp;b[&lt;span&gt;0&lt;/span&gt;])&lt;br/&gt;  &lt;br/&gt; &lt;span&gt;return&lt;/span&gt; a&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;a: 0xc000102060&lt;br/&gt;c: 0xc000124010&lt;br/&gt;b: 0xc000102060&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段程序，新增了一个变量 c，他容量为 0。此时将期望的数据，追加过去。自然而然他就会遇到容量空间不足的情况，也就能实现申请新底层数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们再将原本的切片置为 nil，就能成功实现两者分手的目标了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在今天这篇文章中，我们介绍了 Go 切片的一种常见的内存泄露方式。虽然我们在日常使用的时候可能没关注到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要原因还是由于切片的大多数使用场景，体量都比较小。又或是不知不觉就自己扩容了，就变成暂时性泄露了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这依然是存在风险的，在编写 Go 代码时需要谨慎。毕竟这可是 &lt;strong&gt;Go 语言官方自己都踩过坑的 “坑”&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;参考&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;An interesting way to leak memory with Go slices&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;internal/poll: avoid memory leak in Writev&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;slice 类型内存泄露的逻辑&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;golang slice内存泄露回收&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>187308026766ddb7836ab94f7d741215</guid>
<title>Python 环境配置保姆教程（Anaconda、Jupyter、GPU 环境）</title>
<link>https://toutiao.io/k/5svyvt8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;↑↑↑关注后&quot;&lt;/span&gt;&lt;span&gt;星标&lt;/span&gt;&lt;span&gt;&quot;Datawhale&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;每日干货 &amp;amp; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;amp;album_id=1338040906536108033&amp;amp;__biz=MzIyNjM2MzQyNg==#wechat_redirect&quot; textvalue=&quot;每月组队学习&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;每月组队学习&lt;/a&gt;&lt;span&gt;，不错过&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt; Datawhale干货 &lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;作者：吴忠强，东北大学，Datawhale团队成员&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 写在前面&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;搞算法的同学也都明白，一个比较完美的python环境是多么的重要。这篇文章打算把一些必备的python环境配置过程记录下来，这样不管是新到了公司实习或者就职，还是新换了电脑，都可以借鉴这篇快速把环境搭建起来啦 😉&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于我也是重装了系统，所以算是从0开始搭建python环境，这次从anaconda安装开始， 然后到cuda的相关安装配置，再到cudnn的安装配置，然后从anaconda中建立虚拟tensorflow和pytorch的虚拟环境，再各自的虚拟环境里面安装jupyter notebook并完成配置，安装tensorflow的GPU版本和pytorch的GPU版本。这一整套下来，在自己机子上做一些简单的模型实验就没有问题了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然这套流程是目前是在Windows上做的，但具有普适性，在Linux上也是一样的道理，只不过有些地方的操作可能不一样，原理都是一样的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;内容包括:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Anaconda的安装与常用命令小总&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Jupyter的安装与相关配置&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;CUDA与Cudnn的安装(GPU支持必备)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;建立tf虚拟环境并安装tf2.0GPU版本&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;建立pytorch虚拟环境并安装pytorchGPU版本&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Ok, let’s go!&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. Anaconda的安装与常用命令&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Anaconda是为方便使用Python而建立的软件包，其包含250多个工具包，多版本的Python解释器和强大的虚拟环境工具，所以Anaconda是Python的全家桶。Anaconda可以使安装，运行和升级环境变得更简单，所以初步学习Python，这一个就足够了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Windows下的Anaconda安装，是所谓的傻瓜式安装，Linux下面的安装，可以参考我之前整理的&lt;span&gt;（https://zhongqiang.blog.csdn.net/article/details/112376293）&lt;/span&gt;。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Anaconda官网下载安装包&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;下载之后，点击Anaconda3-2019.07-windwos-x86_64.exe这个安装文件进行安装，选择路径，勾选加入环境变量，等待安装完成即可（这些和普通软件安装一样，一路回车操作)，&lt;/section&gt;&lt;/li&gt;&lt;section&gt;&lt;strong&gt;这里面一定注意，不要把anaconda装到C盘&lt;/strong&gt;。因为你后面会有好多个虚拟环境，安装很多包；&lt;span&gt;另外，建议把conda命令加入到环境变量里面去。&lt;/span&gt;&lt;/section&gt;&lt;li&gt;&lt;section&gt;验证安装成功：打开命令行，输入conda，回车。看是否能进入conda环境。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个安装比较简单，不过多整理，下面是常用的命令，这些记好了之后，就能比较轻松的用anaconda管理虚拟环境，管理相关包了。打开命令行，输入&lt;code&gt;activate&lt;/code&gt;, 此时会进入一个root的默认虚拟环境， 如下:&lt;br/&gt;&lt;img data-ratio=&quot;0.20938628158844766&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rmW24GAicTM1VibR6MicjyRGjf0Hnf0LIWmxFicLngCS4t2UxkDyIpeFPuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;277&quot;/&gt;&lt;span&gt;这个是一个默认的虚拟环境，如果不想建其他环境，比较省事的方法就是把所有用到的包全安装到这里面，打造一个万能环境，所以下面先整理关于包管理的命令&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 列出当前环境下安装的包, 非常常用&lt;/span&gt;&lt;br/&gt;conda list&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 实验过程中，如果发现某些包没有，直接安装&lt;/span&gt;&lt;br/&gt;conda install package_name  &lt;span&gt;# 也可以带版本号&lt;/span&gt;&lt;br/&gt;pip install package_name&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 如果发现装错版本了，想要卸载掉包&lt;/span&gt;&lt;br/&gt;conda remove package_name&lt;br/&gt;pip uninstall package_name&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 更新包&lt;/span&gt;&lt;br/&gt;conda update package_name&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在一个虚拟环境里面，掌握这几个常用的命令即可，上面是比较省事的方法，只有一个环境，但我不太习惯这样做，我一般喜欢建立多个虚拟环境，在每个虚拟环境下安装特定的包去完成相应的实验，因为有的项目可能需要python2，有的需要python3，有的可能是tf项目，有的可能是pytorch项目。这时候，用到的包会很不一致，所以，分类管理也是一个不错的思路。那么下面就是管理环境常用的命令:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 查看已经有的虚拟环境 常用&lt;/span&gt;&lt;br/&gt;conda env list&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 新建虚拟环境 可以指定python版本和一些包的版本&lt;/span&gt;&lt;br/&gt;conda create -n env_names package_names   &lt;span&gt;# conda create -n tfenv python=3.7&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 进入虚拟环境,这时候面临着对一些包的操作，就是上面包的相关命令了&lt;/span&gt;&lt;br/&gt;activate tfenv&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 离开虚拟环境&lt;/span&gt;&lt;br/&gt;deactivate&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 删除虚拟环境&lt;/span&gt;&lt;br/&gt;conda env remove -n env_name&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里单独拎出一个东西来，叫做共享环境，这个其实是非常有用的，它能让其他人安装项目中使用的所有包，并确保这些包的版本正确。比如开发了一个系统，让别人来部署，但其他人可能不知道用的哪个python版本，哪些包等，盲目安装又可能由于版本原因出现问题，所以共享环境就比发挥威力了。怎么用？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 将当前环境下安装的包保存为YAML文件&lt;/span&gt;&lt;br/&gt;conda env export &amp;gt; environment.yaml&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时在当前目录下就会发现一个导出的环境文件:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6821428571428572&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rk8b8a7zuvKMvzViaoyNnxnK1Pv92GdIClda5iajF49waMF2gP0vj9aoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;280&quot;/&gt;&lt;br/&gt;在GitHub上共享代码时，我们往往会看到这样的操作，一般人家都会给出创建环境的文件，这时候，我们git clone下项目之后，依赖这个文件就能轻松安装依赖项。那么导出的环境文件如何使用呢？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;activate tfenv&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 安装所有包&lt;/span&gt;&lt;br/&gt;conda env update -f=/path/to/environment.yaml    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不用conda，而是用pip的时候，可以导出一个txt文件，然后安装：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt  &lt;span&gt;# 导出文件&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 然后将该文件包含在项目的代码库中，其他项目成员即使在他的电脑上没有安装conda也可以使用该文件来安装和我一样的开发环境&lt;/span&gt;&lt;br/&gt;pip install -r /path/requirements.txt&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于anaconda，就整理这么多，应该是够用啦，后续如果有新大陆，还会再补充。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. Jupyter的安装与相关配置&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于jupyter， 在安装了anaconda， 默认的root环境下会有jupyter notebook的，但是新创建了虚拟环境之后，我们还需要重新安装jupyter notebook。命令很简单:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;pip install jupyter notebook&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装jupyter很简单，这里想整理一个事情，就是修改默认的工作空间，在Windows上使用jupyter notebook不像Linux，Linux是在哪个目录下启动，就会默认哪个目录为工作空间，但是Windows中不是这样，那么怎么修改默认工作空间呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个一般是修改jupyter的配置文件，如果没有，就打开命令行，通过下面命令生成:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;jupyter notebook --generate-config&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时会在C盘user下面的.jupyter目录下面产生一个jupyter_notebook_config.py的文件:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.20923913043478262&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rbj8JJ1sicziaFlbYdXpYHbGsb0aibrtaYIwibB55B6Ha7VdVWlzVpECfjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1104&quot;/&gt;&lt;br/&gt;用Notepad++打开&lt;code&gt;jupyter_notebook_config.py&lt;/code&gt;,找到c.Notebook，建立你的新工作路径，取消注释，c前面的#要去掉。&lt;br/&gt;点击保存，这下就修该好了路径，cmd，输入&lt;code&gt;jupyter notebook&lt;/code&gt;，你就发现你的路径已更改&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4332210998877666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rlbLcz1HqTCJELibMdHVIoLyoq6VynpzicZRknh0EHbVqv9Q15C25wuHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;891&quot;/&gt;&lt;br/&gt;这样一般是能够修改路径的，如果还没有，搜一下添加下环境变量，再修改下快捷方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改配置文件，不仅可以修改默认工作空间，还能修改默认启动浏览器，想到想用的浏览器路径，然后打开&lt;code&gt;jupyter_notebook_config.py&lt;/code&gt; 找到&lt;code&gt;App.browser = &#x27;&#x27;&lt;/code&gt;，在这行下面添加以下三行代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; webbrowser&lt;br/&gt;webbrowser.&lt;span&gt;register&lt;/span&gt;(&lt;span&gt;&quot;chrome&quot;&lt;/span&gt;,None,webbrowser.GenericBrowser(&lt;span&gt;u&quot;C:\ProgramFiles (x86)\Google\Chrome\Application\chrome.exe&quot;&lt;/span&gt;))&lt;br/&gt;c.NotebookApp.browser = &lt;span&gt;&#x27;chrome&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时就修改了jupyter使用的默认浏览器。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.423121387283237&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rjJAaP7hkFN9YPnUh9V7qHLagTrUlAU0XVJJS3rkhF2uAlTUOsEicicrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;865&quot;/&gt;&lt;figcaption&gt;在这里插入图片描述&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于jupyter的配置就整理这么多，但是原生的jupyter可能不是很好用，此时可以安装一些扩展功能:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;conda install -c conda-forge jupyter_contrib_nbextensions&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，打开jupyter就会有一些扩展功能:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3154435925520263&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rB50d2ibBwt9B0c6BhGEU8zaKApmJPNy3NjibcPlzc3RSFHv8DbssPjXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;913&quot;/&gt;&lt;br/&gt;这个还是非常强大的，可以对各种单元格加一些骚操作等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，这里也记录一个我比较喜欢的jupyter一个主题:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;pip install jupyterthemes&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 一个不错的主题&lt;/span&gt;&lt;br/&gt;jt -t monokai -f fira -fs &lt;span&gt;13&lt;/span&gt; -cellw &lt;span&gt;90&lt;/span&gt;% -ofs &lt;span&gt;11&lt;/span&gt; -dfs &lt;span&gt;11&lt;/span&gt; -T -N&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面整理些jupyter单元格操作的快捷键:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;执行当前cell，并自动跳到下一个cell：Shift Enter&lt;br/&gt;执行当前cell，执行后不自动调转到下一个cell：Ctrl-Enter&lt;br/&gt;是当前的cell进入编辑模式：Enter&lt;br/&gt;退出当前cell的编辑模式：Esc&lt;br/&gt;删除当前的cell：双D&lt;br/&gt;进入下一个cell：双A （前面）或 Alt+Enter（后面）&lt;br/&gt;&lt;br/&gt;为当前的cell加入line number：单L&lt;br/&gt;将当前的cell转化为具有一级标题的maskdown：单&lt;span&gt;1&lt;/span&gt;&lt;br/&gt;将当前的cell转化为具有二级标题的maskdown：单&lt;span&gt;2&lt;/span&gt;&lt;br/&gt;将当前的cell转化为具有三级标题的maskdown：单&lt;span&gt;3&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;为一行或者多行添加/取消注释：Crtl /&lt;br/&gt;撤销对某个cell的删除：z&lt;br/&gt;浏览器的各个Tab之间切换：Crtl PgUp和Crtl PgDn&lt;br/&gt;快速跳转到首个cell：Crtl Home&lt;br/&gt;快速跳转到最后一个cell：Crtl End&lt;br/&gt;&lt;br/&gt;ctrl + ?         &lt;span&gt;#注释&lt;/span&gt;&lt;br/&gt;shift + tab      &lt;span&gt;# 查询函数的注解&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# jupyter 将本地.py文件导入&lt;/span&gt;&lt;br/&gt;%load test.py &lt;span&gt;#test.py是当前路径下的一个python文件&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 运行python文件&lt;/span&gt;&lt;br/&gt;%run file.py&lt;br/&gt;!python myfile.py&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4. Cuda和Cudnn的安装&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CUDA是一个并行运算的一个计算平台，而CuDNN是在上面的一个深度神经网络的GPU加速库。如果想用TensorFlow或者pytorch的GPU版本，这两个是必须要安装的。但前提，机子内得有显卡，且是NVIDIA的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.1 Cuda安装&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下载CUDA，这个是cuda-10.0的版本，如果安装别的版本，也可以在这里找。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;链接：https://developer.nvidia.com/cuda-10.0-download-archive?target_os=Windows&amp;amp;target_arch=x86_64&amp;amp;target_version=10&amp;amp;target_type=exelocal&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下载完成后，打开下载的驱动， 开始安装。这里选择自定义安装：&lt;br/&gt;&lt;img data-ratio=&quot;0.5081669691470054&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rZgibLZo90RaRXLW7fWBooD8ibAJGsl2zGicCd3Em3gAcZFKVa3kVadcwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;551&quot;/&gt;&lt;br/&gt;自定义安装这里可以进行一些设置，否则有可能会导致安装失败，首先&lt;span&gt;组件这里取勾GeForce Experience，&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5521235521235521&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rHtshE862FrUrRe9lJ9icofZFBUicuIhxOx8RaSpwhDSUOauvUMBxqTZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;518&quot;/&gt;&lt;br/&gt;然后， 我这里安装的时候，必须Visual Studio Integration也需要取消勾选。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6805324459234608&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9repDonArlsBiagzrYLCgkMehDMgw6n2mqxDK2WPkcfVRSct1TicpG88ibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;601&quot;/&gt;点开Driver comonents，Display Driver这一行，前面显示的是Cuda本身包含的驱动版本是411.31&lt;br/&gt;如果你电脑目前安装的驱动版本号新于Cuda本身自带的驱动版本号，那一定要把这个勾去掉。否则会安装失败(相同的话，就不用去取勾了)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6782945736434108&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rFWuYoBeXLAnlUh8IQaAMbywdWhv6FMVZM906TQyAzj9RR3bm8rWCgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;516&quot;/&gt;&lt;br/&gt;接下来就等他安装完成即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结束之后， 怎么看是否成功了呢？打开下面这个路径，查看nvcc.exe，有这个说明CuDA安装成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5664819944598338&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rBibZ5BEL6eEtkhvQTGdyFwNU3EzrrUMmbrq8Ofol2iasasVwt76Q6p4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;722&quot;/&gt;&lt;br/&gt;打开此文件夹，查看有没有cuti64_100.dll&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.377027027027027&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rzBl6nPTlX0n8NTktSg40ZUVuxicGtvtNsVCuy8HghNZbZjN07HUE8icA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;740&quot;/&gt;&lt;br/&gt;有这个cuti64_100.dll就说明CUPT1已成功。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.2 Cudnn安装&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样的，来官网: https://developer.nvidia.com/rdp/cudnn-download， 选择Cudnn for CUDA10.0， 这个需要登录， 注册个邮箱或者用微信登录即可。&lt;br/&gt;&lt;img data-ratio=&quot;0.5287958115183246&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rG4mdPlAEiaNtnWPmIY2srr12D5TIjjWxfNbBaOgsk9XmZaaZ6ygLmBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;764&quot;/&gt;&lt;br/&gt;下载下来之后，解压cuDNN:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2574712643678161&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rZnQtdSCib8ib2d2tIWRNOEHNCl4MJ60hhDaWdokq0dBcKk1Rz1Ajgm5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;870&quot;/&gt;&lt;br/&gt;将解压后文件复制到CUDA文件夹下&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.28045977011494255&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rWsG0281uJP7Ey3Zb5KVhPG92wwj9mqgSQgLplVtZ9ADqqUFPrv71RA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;870&quot;/&gt;&lt;br/&gt;接下来，要配置环境变量，&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;我的电脑——&amp;gt;属性——&amp;gt;高级系统设置——&amp;gt;环境变量&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在系统环境变量中找到path&lt;br/&gt;&lt;img data-ratio=&quot;0.4389312977099237&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9r2n9TFURn2TgznxszLic8vcMWNuhbibfsp5D7P8ducetzClTmxD3tQRnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;524&quot;/&gt;&lt;br/&gt;当安装完Cuda的时候，会自动的cuda的bin目录以及libnvvp目录加入到环境变量中，但是并没有加CUPA和Cudnn的路径，我们需要把这俩加入进来，这样，在使用TensorFlow的时候，才不会报错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2414113277623027&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rBefutHY2Rj9TwHqibM00T05fbYJqbVYPpgvEibp6oFfj2Mteibsfv35LQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1077&quot;/&gt;&lt;br/&gt;Cudnn和Cupta的路径缺一不可，第三个不用管，安装anaconda的时候，会自动加入。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试cuda， 打开命令行， 输入&lt;code&gt;nvcc \-V&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3432574430823117&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rVQ0fTAsrPeOhp1C6JruVA9wQiac0uR9ib6j86fZf9xpqhWLbg4P7NA5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;571&quot;/&gt;&lt;br/&gt;这里会显示版本。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5. 建立tf虚拟环境并安装tf2.0GPU版本&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里主要是tf2.0GPU版本的安装， 有了上面的铺垫，这里会变得非常简单。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，先建立一个tfenv的虚拟环境:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;conda create -n tfenv python=&lt;span&gt;3.7&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，我这里竟然报了一个错误：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;CondaHTTPError: HTTP &lt;span&gt;000&lt;/span&gt; CONNECTION FAILED &lt;span&gt;for&lt;/span&gt; url ＜https:&lt;span&gt;//mirrors.tuna.ts&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个我一开始以为是我anaconda换了安装目录导致的，但经过查阅资料，应该是源的问题，anaconda换源后无法创建新的虚拟环境。我的解决办法：&lt;br/&gt;&lt;img data-ratio=&quot;0.2676348547717842&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9r7GWCk3sdQtNzkZiaVpJI6QbLJFCLA4KlrCcqY0bQFEiaiclz6Yic9X0Eiaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;482&quot;/&gt;&lt;br/&gt;找到这个&lt;code&gt;.condarc&lt;/code&gt;文件，这个在我的&lt;code&gt;C:\Users\ZhongqiangWu&lt;/code&gt;目录下面，把&lt;code&gt;https&lt;/code&gt;改成了&lt;code&gt;http&lt;/code&gt;就好了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就能创建出tfenv的虚拟环境，然后激活&lt;code&gt;activate tfenv&lt;/code&gt;，进入环境。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 安装TensorFlow-gpu&lt;/span&gt;&lt;br/&gt;pip install tensorflow-gpu=&lt;span&gt;2.0.0&lt;/span&gt;-beta0&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时等待下载，进行安装即可。安装完毕之后，测试是否安装成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在当前环境下，输入python进入环境，然后：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt; tensorflow as tf&lt;br/&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(tf.test.is_gpu_available())&lt;/span&gt;   &lt;span&gt;// 如果输出True，说明安装成功&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但在我这里，导入TensorFlow的时候，报了一个错误:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ImportError: Could &lt;span&gt;not&lt;/span&gt; find &lt;span&gt;&#x27;cudart64_100.dll&#x27;&lt;/span&gt;&lt;br/&gt;TensorFlow &lt;span&gt;requires&lt;/span&gt; that &lt;span&gt;this&lt;/span&gt; DLL be installed in a directory that is named in your %PATH% environment variable&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个通过查资料，大部分得出的结论是这篇文章说的那样， 即cuda版本的问题， 这里会发现100，这其实意味着cuda要用10.0版本的，因为安装完cuda的时候，会在cuda的bin目录下面有这么一个dll文件：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.35930047694753575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9r6psXwLGicBnOQ11zTiaibHXaNNe7vlPDKdVMooMDBMYZc71wEe0FtcPkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;629&quot;/&gt;&lt;br/&gt;也就是TensorFlow在导入的时候，会去找有没有这样的一个文件， 当然我这里tf2.0找的是10.0的这个，可能有的报错说找不到101.dll或者102.dll这种，这显然是cuda版本不匹配，要卸载掉当前的cuda， 重新安装对应版本的，或者卸载掉当前版本的tf，重新安装个别的版本的tf。但有种做法不提倡，有的竟然硬性的把这里的100.dll修改名字，改成101.dll这样，这叫投机取巧，并不是在解决问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我当时就非常纳闷， 我这里明明有这个文件，并且我也把这个bin目录加入到了环境变量里面，为啥还会报上面的这个找不到这个文件的错误呢？其实是费了一些时间的，网上也没找到好的办法，最后，我想到，可能是因为我anaconda启动的原因：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;我anaconda这次安装到了D盘里面，然后依然是借助Anaconda Prompt启动了命令行，然后进入的虚拟环境。此时，我再想一个问题，我在虚拟环境里面输入python，然后import tensorflow的时候，此时tensorflow去找依赖的时候，是去哪里找呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;怎么保证它这里是找的环境变量里面的配置呢？好像并没有进行设置，所以我猜测，它这里找dll的时候，可能是D:\Anaconda3\envs\tfenv\Library\bin目录下去找相关的dll文件，如果找不到，可能不会自动的去总的环境变量里面找，就直接报错了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个启发来自于，如果我们通过anaconda3自动安装cuda和Cudnn的时候，此时cudart64_100.dll是在D:\Anaconda3\envs\tfenv\Library\bin目录下的。而上面我们并没有通过anaconda3安装这俩哥们，而是手动安装的，那么在anaconda 自己的命令行里面可能找不到。&lt;/p&gt;&lt;/blockquote&gt;&lt;p line=&quot;rr1i&quot;&gt;&lt;span&gt;所以关于这个问题，我最终的解决办法，就是不用anaconda prompt启动命令行进虚拟环境，而是直接cmd打开系统的命令行，然后直接输入activate，进入root的环境，然后&lt;/span&gt;&lt;code&gt;activate tfenv&lt;/code&gt;&lt;span&gt;进入到虚拟环境，此时再运行测试，发现成功。这个应该是走环境变量里面的文件了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.31788079470198677&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rLPZCwe9FTP78oRraHA3jOQ3UDQAFRwxOVb2MusXCvlEfgMoly9icBGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;906&quot;/&gt;&lt;br/&gt;此时，tf2.0的GPU版本安装成功。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6. 建立pytorch虚拟环境并安装pytorchGPU版本&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里和上面就基本上是一样的过程了，这里是按照pytorch的GPU版本，首先是建立虚拟环境&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;conda create -n pytorch_gpu python=&lt;span&gt;3.7&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，又出现&lt;code&gt;CondaHTTPError: HTTP 000 CONNECTION FAILED for url&lt;/code&gt;， 真是服了， 此时我重新配置.condarc，修改成下面这个样子:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;channels:&lt;br/&gt;  - http:&lt;span&gt;//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/&lt;/span&gt;&lt;br/&gt;  - http:&lt;span&gt;//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/&lt;/span&gt;&lt;br/&gt;  - http:&lt;span&gt;//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/&lt;/span&gt;&lt;br/&gt;  - http:&lt;span&gt;//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/&lt;/span&gt;&lt;br/&gt;show_channel_urls: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把vpn关掉，然后好使了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来安装torch和torchvision， 进入下面这个网站: http://download.pytorch.org/whl/torch_stable.html， 找符合系统版本、cuda版本的torch，采用搜索的方式找&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.45549738219895286&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9ruBf19Xtiaaucog8nMic8FK1n7ghH2KzqsUm9tnxvFP7icAicINEj4qzFBQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;382&quot;/&gt;&lt;br/&gt;我的是cuda10.0， python3.7版本，win10系统，64位。下载下来。&lt;br/&gt;&lt;img data-ratio=&quot;0.436046511627907&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9r6ZmTkBJWicIShsyX0KVxw7f1d2A21xKvEjjh3y6B87NGg1hYdoBCjnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;516&quot;/&gt;&lt;br/&gt;torchvision同样的道理，把这两个.whl文件下载下来。然后回到命令行， 安装即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;pip install &lt;span&gt;&quot;torch-1.2.0-cp37-cp37m-win_amd64.whl&quot;&lt;/span&gt;&lt;br/&gt;pip install &lt;span&gt;&quot;torchvision-0.4.0-cp37-cp37m-win_amd64.whl&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装完毕，进行测试，依然是进入python环境，然后输入：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.1150190114068441&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsHJHibtCxibCB9kPyQbrtria9rXGia9SFt72Z9vLCyCoOxoVIJaIm3Mzm2v3CnnI8icxFiaS3hAKKa2g3cg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1052&quot;/&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;这样，pytorch的GPU版本安装完毕！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了这一整套流程，在自己机子上搭建python环境，跑模型实验，就比较方便啦，不管是tf项目还是pytorch项目，都能用这一套环境实验。Linux上其实也是这样的流程，很多地方都是一样的，原理都是通的，无法就是配置环境变量的时候不太一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前整理的文章链接也放过来:&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;大数据环境搭建下面的anaconda搭建&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;https://zhongqiang.blog.csdn.net/article/details/112376293&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Python管理包工具anaconda安装过程常见问题解决办法&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://zhuanlan.zhihu.com/p/34337889&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Python·Jupyter Notebook各种使用方法&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://blog.csdn.net/liuyanlin610/article/details/76231958&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;远程连接GPU服务器上的jupyter notebook解决方案&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://blog.csdn.net/wuzhongqiang/article/details/107555363&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Windows下GPU版本详细安装教程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://cloud.tencent.com/developer/article/1458665)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Windows下的Pytorch环境手把手搭建&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://zhongqiang.blog.csdn.net/article/details/104503860&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.40555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsGxu3P5YibTO899okS0X9WaLmQCtia4U8Eu1xWCz9t8Qtq9PH6T1bTcxibiaCIkGzAxpeRkRFYqibVmwSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;整理不易，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;赞&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;三连&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;↓&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>