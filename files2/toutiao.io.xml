<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>eb442c0b2ef77cff1075ca098040be60</guid>
<title>CURD 系统怎么做出技术含量惊艳面试官</title>
<link>https://toutiao.io/k/0hurrgr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;引子&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;h1&gt;在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485928&amp;amp;idx=1&amp;amp;sn=d60b63b554e5d1b054f273e898ed12c5&amp;amp;chksm=fafde346cd8a6a50fbf7d2d4b3eafc36ba356e161251504203465effcf187dc5368cff9f04b9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《CURD系统怎么做出技术含量--怎样引导面试》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《CURD系统怎么做出技术含量--怎样引导面试》&lt;/a&gt;有朋友开玩笑说都用上了领域驱动了，就不叫CURD系统了吧。这里我解释一下，怕大家对DDD领域驱动设计有什么误解。&lt;/h1&gt;&lt;p&gt;DDD是为解决软件复杂性而生，但不仅仅可以被用于复杂的系统。它里面提到了很多技巧，其实&lt;span&gt;CURD就是其中一种技巧。这些技巧适用于任何系统，哪怕是非常小型的系统，比如&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485928&amp;amp;idx=1&amp;amp;sn=d60b63b554e5d1b054f273e898ed12c5&amp;amp;chksm=fafde346cd8a6a50fbf7d2d4b3eafc36ba356e161251504203465effcf187dc5368cff9f04b9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《CURD系统怎么做出技术含量--怎样引导面试》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;《CURD系统怎么做出技术含量--怎样引导面试》&lt;/span&gt;&lt;/a&gt;&lt;span&gt;里提到的谦卑对象模型、充血模型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天咱们再提高一下CURD系统的门槛，连DDD技巧，咱也不用。就用写咱们平时都在写的最简单的接口。能说明设计理念，也能惊艳到面试官：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;两种设计方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;一个规范的系统要统一的入参标准和返回值标准，这种标准可以提高系统的稳定性，促进跨部门甚至跨公司之间更好的合作，价值很高。面试的时候值得跟面试官说一说。很多可能之前大家都做了，但是没有仔细思考其中的逻辑，你思考清楚了也会让面试官眼前一亮。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;n+m返回值设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;一个接口入参有n个值，需要的返回值是m个值。在返回值中可以把入参和返回值一起返回。&lt;/p&gt;&lt;p&gt;这种设计便于追踪和排查问题：&lt;/p&gt;&lt;p&gt;为了防止调用方没有日志追踪号、打印日志过多等原因造成不方便跟踪请求的问题，可以设计返回值将入参一起打印。这样调用方可以通过一条日志方便的获取到入参和返回值。线上排查问题会非常方便。&lt;/p&gt;&lt;p&gt;假设有个场景，调用方的系统设计不方便请求追踪，比如没有线程追踪号。在高并发量场景下可能日志是这样的：&lt;/p&gt;&lt;p&gt;1、thread-1|ClassName|参数1：11，参数2:11&lt;/p&gt;&lt;p&gt;2、thread-2|ClassName|参数1：22，参数2:22&lt;/p&gt;&lt;p&gt;3、thread-1|ClassName|参数1：33，参数2:33&lt;/p&gt;&lt;p&gt;4、thread-2|ClassName|返回值：44&lt;/p&gt;&lt;p&gt;5、thread-1|ClassName|返回值：55&lt;/p&gt;&lt;p&gt;6、thread-1|ClassName|返回值：66&lt;/p&gt;&lt;p&gt;你能决定55和66对应的谁是1，谁是3的返回值吗？&lt;/p&gt;&lt;p&gt;但是如果返回值包含了入参，就好办多了，举个返回值例子：&lt;/p&gt;&lt;p&gt;thread-1|ClassName|{参数1：11，参数2:11，返回值：55}&lt;/p&gt;&lt;p&gt;这样就一目了然。有的时候可能是调用方本身的设计问题，但是如果被调用方能通过巧妙的设计帮助调用方。一旦遇到问题，调用方可以自己先进行排查，不用马上联系被调用方帮忙。即节约了自身的成本，又体现了专业性，何乐不为。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;终态设计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484245&amp;amp;idx=1&amp;amp;sn=60bb5324704d43cfb0e72cb642ac4604&amp;amp;chksm=fafde9fbcd8a60edf8c96f162bfac9980c9623708bb03937969b25ef87eb4526d5a1f41aba26&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《实战并发-使用分布式缓存和有限状态机》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《实战并发-使用分布式缓存和有限状态机》&lt;/a&gt;里我讲过有限状态自动机。有限状态机涉及状态流转。状态从分类上可以分成三种：初始状态、中间状态和终态。这段时间不是一直在将TCP底层通信嘛，来一张TCP状态的流转图体会一下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1457905544147844&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;487&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9LBKNIvtzhGvak690hYJBokOn5mtWNNFSxAA3fS8p2n6Z1VBzuxic8r4vDNPtsY0nkHPokZ5LtkoA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;有限状态机的重点在于有限，要有起点和终点。也就是一定要有终态。在《稳定性三十六计-超时处理》我讲过：&lt;/p&gt;&lt;p&gt;在传统的单机系统中，调用一个函数，要么返回成功，要么返回失败。这就是两态系统(2-state system)。&lt;/p&gt;&lt;p&gt;在分布式系统中，由于系统是分布在不同机器上的。还可能有一种状态叫：超时。成功、失败和超时是分布式系统调用的三态。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9903846153846154&quot; data-type=&quot;jpeg&quot; data-w=&quot;624&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicVYPeHOxevrQLEBUbDBBKiciaDnUCKK0N50iax8Y2X76Opom64icx9fJ01FGHpfACwXp46wDE51oU72w/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;超时不是终态，而是一种中间状态：最终有可能下游是成功了，也有可能是失败了。这时候我们需要在超时之后推定一种状态，推定成功或者失败。究竟是成功还是失败因功能而已。&lt;/p&gt;&lt;p&gt;比如付款操作，不知道是否成功就推定是成功的，那用户可能没有付款就拿到了商品或者享受了服务。商家就会资金损失。所以一般会推定失败。让用户再次支付。最终通过查询或者对账发现用户实际是支付成功的，可以再把钱给用户退回去，保证交易的公平性。&lt;/p&gt;&lt;p&gt;退款恰恰相反，需要推定成功。告诉用户，钱退给你了。最终通过查询或者对账发现实际是退款失败了，可以系统重新发起退款，直到真正退成功为止。&lt;/p&gt;&lt;p&gt;后台管理系统也很需要这种终态设计。比如发布系统，发布了一个功能，发布系统如果出现了问题，这次发布没有结束。用户可能没有办法进行下一次发布。这时候可以设置超时自动结束，防止未结束的流程始终在那里，起码会干扰视线，增加判断成本。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一种思维理念&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;谁生产谁负责&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在《设计开发中要避免的两个坑和一种可借鉴的设计思想》中&lt;span&gt;我建议项目千万不要叫base、basic之类包罗万象的词，容易造成边界不清。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之前有人就跟我说过：这个数据我们只是提供，数据不是我们自己要用，而是有几个团队都要用，放在我们这里不合适。有base模块，那就应该放到base里啦。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从领域上来说，这种思维理念不对，数据应该谁生产谁负责。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;举个例子：我们创建了一个系统，是toC的。开发这个系统的人能说这个系统是十几亿中国人用的，放在我们这里不合适，让十几亿中国人自己维护去？用户有很多，系统开发源头是一个，这就是谁生产谁负责。对于系统是这样，数据也是这样。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这种小的设计技巧还有很多，比如两码一态设计。仔细思考自己的工作，你也许会被自己惊艳到。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;往期推荐&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>81362ffa723037641c0fa7c3d938b01f</guid>
<title>我在工作中常用的 C++ 开源库和框架</title>
<link>https://toutiao.io/k/bk7eqgh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;91433&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87497&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.14583333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/hQZ4NEZ2sic46rRhYlgZ1fpAoMWK7bzFqZny0d772TA2GiaJtGcicibJ40IicS481C6ZvQ3RzHavocrnrSv8NLib3oJw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;480&quot; title=&quot;引导关注&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;RPC框架：&lt;/span&gt;&lt;span&gt;brpc&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;github地址&lt;/strong&gt;：https://github.com/apache/incubator-brpc&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hQZ4NEZ2sic46rRhYlgZ1fpAoMWK7bzFqUhXFaItuWXI2E2dyF62ibN5rN52iaL0AVVvWjzXLPW2qpZD54RSLeFXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;260&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;一句话推荐&lt;/strong&gt;：如果把grpc理解成good rpc，那么brpc则是当之无愧的better rpc！&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hQZ4NEZ2sic46rRhYlgZ1fpAoMWK7bzFqiaM8CV3pn3VX9AGvGRNHIU2bico1iayYG5hh6rfY7yDEoUIib32sPC07zQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;360&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;强烈建议C++同学使用或学习的一个框架。brpc支持的协议众多，不管是grpc还是thrift，亦或是HTTP+JSON都支持。并且是单端口支持多协议！基本上可以无缝集成到你现有的工作环境中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外brpc也集成http 、redis的client，基本不需要再依赖额外的库去做请求HTTP服务或者请求redis的事了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外就是brpc的架构设计上比之其他C++框架也是优秀的，即使你公司不使用brpc，你通过阅读brpc源码和文档也是大有收获的。brpc的文档堪称一绝，巨细无遗。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;json库：rapidjson&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;github地址&lt;/strong&gt;：http://github.com/Tencent/rapidjson&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hQZ4NEZ2sic46rRhYlgZ1fpAoMWK7bzFqpbMjAqZ6OIEV7vBgmhJtdEdialKDrLzNHyEngz7NbyXFg6nlbIVnegQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;260&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;一句话推荐&lt;/strong&gt;：尽管斯人已去，但江（知）湖（乎）永远留下他的传说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.090721649484536&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hQZ4NEZ2sic46rRhYlgZ1fpAoMWK7bzFqSTZwnV3KzPgXLoyISP5UxdXvqicnNZDahpxBxo5DGNG7fVib7aj8m3bQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;485&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前见过性能最后的json解析和序列化的库，性能上比老牌的json-cpp快一个量级，而且是header-only的，引入到自己项目中比较方便。但缺点是API着实难用，而且为了追求极致性能，浅拷贝居多，导致稍不注意就踩坑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外提醒一下，如果你项目中已经使用了brpc那么通常我们不用额外安装rapidjson的，因为brpc的thirdparty已经集成了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然额外安装rapidjson也未尝不可，因为brpc里面默认集成的那个是比较旧的版本。有一次我想让rapidjson序列化json字符串时，控制浮点数精度（小数位个数）的时候，就发现brpc集成的版本不够用，最终还是额外安装了最新的rapidjson。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;内存管理库：jemalloc&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;github地址&lt;/strong&gt;：https://github.com/jemalloc/jemalloc&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hQZ4NEZ2sic46rRhYlgZ1fpAoMWK7bzFqtUDItOfia2Q9hbc95ExhJicd5bZ5bhJVEE88IEczNnwicQs8T4kfs9eQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;260&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;一句话推荐&lt;/strong&gt;：放着我来！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人感觉jemalloc比tcmalloc更好用，性能也更好。当然也可能是tcmalloc我没配置好。AnyWay，jemalloc几乎不需要你费心。直接链接进去，对代码无侵入，自动就能提高性能。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hQZ4NEZ2sic46rRhYlgZ1fpAoMWK7bzFqX6ibYHWtvlDVAFxk3SPE0FrL3VvJ0NhCnFN0egwKoWqhdFfRc9LUknw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;序列化库：protobuf&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;github地址&lt;/strong&gt;：https://github.com/protocolbuffers/protobuf&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hQZ4NEZ2sic46rRhYlgZ1fpAoMWK7bzFq7Vjqbvqa5yHNCBcReMb0NLWwvhx25bJbDpzw2DrUKqeicJoPrIicAXTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;260&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;一句话推荐&lt;/strong&gt;：不管protobuf3有多少槽点，它终将取代protobuf2，就像你从未听说过protobuf1一样&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不多说了，在很多时候pb还是一个不错的配合rpc使用的序列化解决方案。首先是性能，其次是跨语言通信。当然槽点也不少，比如向下兼容做的不好，&lt;span&gt;知乎上&lt;/span&gt;&lt;span&gt;有个帖子专门吐槽来着。不仅protobuf3阉割掉了不少protobuf2中很多好用的功能，&lt;/span&gt;即使同为protobuf3，3.7和3.6的C++ API中也有差异，且向下兼容不够好，比如3.6的protoc编译出来的pb.h，链接3.7的libprotobuf.so就会有一堆符号未定义。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;gflags&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;github地址&lt;/strong&gt;：https://github.com/gflags/gflags&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hQZ4NEZ2sic46rRhYlgZ1fpAoMWK7bzFqjoIctWfsfjB5JPqzNGOe7bh4BGBKC8AmWdiaQeaJRMUGJRr7oQdt1tQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;260&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;一句话推荐&lt;/strong&gt;：这个flag，你必须要立！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过flag（俗称开关）。可以方便的调整一些逻辑分支的走向。也可以通过flag来配置一些参数，无需每次新增配置文件和增加配置解析的逻辑。但是有时候如果依赖的第三方库也用到了gflags，有同名的flag，编译启动会有问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;官方备胎：boost&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;github地址&lt;/strong&gt;：https://github.com/boostorg/boost&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hQZ4NEZ2sic46rRhYlgZ1fpAoMWK7bzFqktaWLEym9HLbfoOwmNB3icfLjJdAlwKvOxKbSJpp3uILbUc2NHrJQWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;260&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;一句话推荐&lt;/strong&gt;：梦想还是要有的，万一一不小心备胎转正了呢？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3082706766917293&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hQZ4NEZ2sic46rRhYlgZ1fpAoMWK7bzFqsCRWfKCHVZbgGr6SJDsZcgtZD8ytqBVzskxpG0t4MiaxTFISm9via3cQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;532&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我常说boost是C++官方标准的备胎，但这有失偏颇，应该说是试金石。当然在C++11之后，你用到的boost库的地方会越来越少，但是也不是没有用武之地。另外就是如果你编译器没有支持新的C++版本，比如C++17，那么有些特性你可以从boost里找寻。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;矩阵计算库：Eigen&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;主页&lt;/strong&gt;：https://eigen.tuxfamily.org/index.php&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;github地址&lt;/strong&gt;：https://github.com/PX4/eigen&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hQZ4NEZ2sic46rRhYlgZ1fpAoMWK7bzFqJuZZ0QmRiazzYwOz0mrW9Zjic0nu12xmqkrNibGkd6jjJsrjRAAiaiba10g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;260&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;一句话推荐&lt;/strong&gt;：感觉这个库上手困难，不是因为你不懂C++，而是因为你不懂数学！&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0714285714285714&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hQZ4NEZ2sic46rRhYlgZ1fpAoMWK7bzFqe71nsp0zhubr7EXkRsQia52Jx0fLJvrZ8PiaLOYVl4PWrBnMwRSby8oA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;126&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个线性代数的C++库，主要采用的模板语法。在涉及到机器学习的一些C++工程中多有使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;你还有哪些工作中常用的或者个人推荐的开源库，欢迎留言！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3cf642c7b6f907b447cdb40bce99bfb9</guid>
<title>Intel 内存管理两板斧：分段与分页</title>
<link>https://toutiao.io/k/nq84jym</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left&quot; aria-describedby=&quot;js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzk0MjE3NDE0Ng==&amp;amp;action=getalbum&amp;amp;album_id=2123743679373688834#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2123743679373688834&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#你管这破玩意叫操作系统源码&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;10个&lt;span class=&quot;weui-hidden_abs&quot;&gt;内容&lt;/span&gt;&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;新读者看这里，老读者直接跳过。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本系列会以一个读小说的心态，从开机启动后的代码执行顺序，带着大家阅读和赏析 Linux 0.11 全部核心代码，了解操作系统的技术细节和设计思想。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1323722149410222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSsqVrEibE9LXat88ha3emc5lAsIibL0uiaBjemPeeEpabrRuZmZQeTicWkQlr5OXDUPuticchZ6XMUmww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你会跟着我一起，看着一个操作系统从啥都没有开始，一步一步最终实现它复杂又精巧的设计，读完这个系列后希望你能发出感叹，原来操作系统源码就是这破玩意。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以下是&lt;strong&gt;已发布文章&lt;/strong&gt;的列表，详细了解本系列可以先从开篇词看起。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247499207&amp;amp;idx=1&amp;amp;sn=f00bf7653ae57faa6266bfd18287e6bb&amp;amp;chksm=c2c5876af5b20e7cdf5094696d266ee3fa09514601b021ce602ecaf0ec79857045b43e286a58&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;闪客新系列！你管这破玩意叫操作系统源码&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;开篇词&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247499226&amp;amp;idx=1&amp;amp;sn=1ff3d54a3608423b7781142ae3ac62ca&amp;amp;chksm=c2c58777f5b20e61664a51d31ab779bbe68c317c3459218c7cd4b9530887dbb33470628c3248&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你管这破玩意叫操作系统源码 | 第一回 最开始的两行代码&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;第一回 | 最开始的两行代码&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247499274&amp;amp;idx=1&amp;amp;sn=23885b5b1344a1425f5a971d06ad2e7d&amp;amp;chksm=c2c584a7f5b20db1b0a75ea896e7218a9f8bcd006e68f53693bab240b13f9e2fb0ec0c9b9a6a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你管这破玩意叫操作系统源码 | 第二回 自己给自己挪个地儿&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;第二回 | 自己给自己挪个地儿&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247499307&amp;amp;idx=1&amp;amp;sn=c94575dde2b9bbdbabe2d7a832aa9ff4&amp;amp;chksm=c2c58486f5b20d907e314fdf88c5c25b8233b44f5a6a2864c418489e7ae993574150e92c9927&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你管这破玩意叫操作系统源码 | 第三回 做好最最基础的准备工作&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;第三回 | 做好最最基础的准备工作‍&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247499359&amp;amp;idx=1&amp;amp;sn=233812a464996b9566cdf3258132bc22&amp;amp;chksm=c2c584f2f5b20de40a7990c754cdbf3073b4652f318d479ac0c8ff686ca7aa74eef1ba7c6c2f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;第四回 | 把自己在硬盘里的其他部分也放到内存来&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;第四回 | 把自己在硬盘里的其他部分也放到内存来&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247499558&amp;amp;idx=1&amp;amp;sn=d5d057fae2fb835d38f82804c2649463&amp;amp;chksm=c2c5858bf5b20c9de2db5c31dd34fbe766f6c46cda17f54f4518a75fc1838f2ada6fe5717aad&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;第五回 | 进入保护模式前的最后一次折腾内存&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;第五回 | 进入保护模式前的最后一次折腾内存&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247499667&amp;amp;idx=1&amp;amp;sn=a7e2297f16d048794fa31cceaa183fc9&amp;amp;chksm=c2c5853ef5b20c286df24a28013f0fc3b0336790eca4a0d069ab831f6c536c03d1398893534b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;第六回 | 先解决段寄存器的历史包袱问题&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;第六回 | 先解决段寄存器的历史包袱问题&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247499699&amp;amp;idx=1&amp;amp;sn=000d83798b0158dbdf48d76e49d3ff96&amp;amp;chksm=c2c5851ef5b20c08bc641d4b118db78a3af5a4f90a057d1ce9f9b68f04b529124f466c743bc5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;第七回 | 六行代码就进入了保护模式&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;第七回 | 六行代码就进入了保护模式&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247499734&amp;amp;idx=1&amp;amp;sn=89045b51e41d2e74754f5475d25d7b54&amp;amp;chksm=c2c5857bf5b20c6d1698df2abd0e1eea601e83612ee6af58dc8eb79f93c751f73d7c62e565ce&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;第八回 | 烦死了又要重新设置一遍 idt 和 gdt&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;第八回 | 烦死了又要重新设置一遍 idt 和 gdt&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本系列的 GitHub 地址如下（文末阅读原文可直接跳转）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://github.com/sunym1993/flash-linux0.11-talk&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;------- 正文开始 -------&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;书接上回，上回书咱们说到，head.s 代码在重新设置了 gdt 与 idt 后。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7950310559006211&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSQzoHRAf3PqxWI3MhZhAdX5aDCsj7UdvreLRKbsx88yjxaGzbnvqdVrCyGtAs1Gd0kFC6nvLey1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;644&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;来到了这样一段代码。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;jmp after_page_tables&lt;br/&gt;...&lt;br/&gt;after_page_tables:&lt;br/&gt;    push 0&lt;br/&gt;    push 0&lt;br/&gt;    push 0&lt;br/&gt;    push L6&lt;br/&gt;    push _main&lt;br/&gt;    jmp setup_paging&lt;br/&gt;L6:&lt;br/&gt;    jmp L6&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那就是开启分页机制，并且跳转到 main 函数。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如何跳转到之后用 c 语言写的 main.c 里的 main 函数，是个有趣的事，也包含在这段代码里。不过我们先瞧瞧这&lt;strong&gt;分页机制&lt;/strong&gt;是如何开启的，也就是 &lt;strong&gt;setup_paging &lt;/strong&gt;这个标签处的代码。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;setup_paging:&lt;br/&gt;    mov ecx,1024*5&lt;br/&gt;    xor eax,eax&lt;br/&gt;    xor edi,edi&lt;br/&gt;    pushf&lt;br/&gt;    cld&lt;br/&gt;    rep stosd&lt;br/&gt;    mov eax,&lt;strong&gt;&lt;span&gt;_pg_dir&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;    mov [eax],&lt;span&gt;&lt;strong&gt;pg0&lt;/strong&gt;&lt;/span&gt;+7&lt;br/&gt;    mov [eax+4],&lt;strong&gt;&lt;span&gt;pg1&lt;/span&gt;&lt;/strong&gt;+7&lt;br/&gt;    mov [eax+8],&lt;strong&gt;&lt;span&gt;pg2&lt;/span&gt;&lt;/strong&gt;+7&lt;br/&gt;    mov [eax+12],&lt;strong&gt;&lt;span&gt;pg3&lt;/span&gt;&lt;/strong&gt;+7&lt;br/&gt;    mov edi,pg3+4092&lt;br/&gt;    mov eax,00fff007h&lt;br/&gt;    std&lt;br/&gt;L3: stosd&lt;br/&gt;    sub eax,00001000h&lt;br/&gt;    jge L3&lt;br/&gt;    popf&lt;br/&gt;    xor eax,eax&lt;br/&gt;    mov cr3,eax&lt;br/&gt;    mov eax,cr0&lt;br/&gt;    or  eax,80000000h&lt;br/&gt;    mov cr0,eax&lt;br/&gt;    ret&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;别怕，我们一点点来分析。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先要了解的就是，啥是分页机制？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;还记不记得之前我们在代码中给出一个内存地址，在保护模式下要先经过分段机制的转换，才能最终变成物理地址，就是这样。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8372093023255814&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSQzoHRAf3PqxWI3MhZhAdX2dAhd1eRCZtMnib7bibIJMth2KiaCMKQb9Iheib0l1asWZasZlB4qwZCxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这是在没有开启分页机制的时候，只需要经过这一步转换即可得到最终的物理地址了，但是在开启了分页机制后，又会&lt;strong&gt;多一步转换&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2687651331719128&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSQzoHRAf3PqxWI3MhZhAdXE0BZFmtVQIWXn0co0r1wPKPtkibs63SG2Bia1ibFKvibx2tpwb1T3UAj8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;413&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;也就是说，在没有开启分页机制时，由程序员给出的&lt;strong&gt;逻辑地址&lt;/strong&gt;，需要先通过分段机制转换成物理地址。但在开启分页机制后，逻辑地址仍然要先通过分段机制进行转换，只不过转换后不再是最终的物理地址，而是&lt;strong&gt;线性地址&lt;/strong&gt;，然后再通过一次分页机制转换，得到最终的物理地址。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;分段机制我们已经清楚如何对地址进行变换了，那分页机制又是如何变换的呢？我们直接以一个例子来学习过程。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如我们的线性地址（已经经过了分段机制的转换）是&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;15M&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;二进制表示就是&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;0000000011_0100000000_000000000000&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们看一下它的转换过程&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9062870699881376&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSQzoHRAf3PqxWI3MhZhAdXMmaEo1mxwqQF8ibvKK8OzaA47z3JgDO6kKLffIoKmuDXqOHiaBtayw5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;843&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;也就是说，CPU 在看到我们给出的内存地址后，首先把线性地址被拆分成&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;高 10 位：中间 10 位：后 12 位&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;高 10 位负责在&lt;strong&gt;页目录表&lt;/strong&gt;中找到一个&lt;strong&gt;页目录项&lt;/strong&gt;，这个页目录项的值加上中间 10 位拼接后的地址去&lt;strong&gt;页表&lt;/strong&gt;中去寻找一个&lt;strong&gt;页表项&lt;/strong&gt;，这个页表项的值，再加上后 12 位偏移地址，就是最终的物理地址。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而这一切的操作，都由计算机的一个硬件叫 &lt;strong&gt;MMU&lt;/strong&gt;，中文名字叫&lt;strong&gt;内存管理单元&lt;/strong&gt;，有时也叫 PMMU，分页内存管理单元。由这个部件来负责将虚拟地址转换为物理地址。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以整个过程我们不用操心，作为操作系统这个软件层，只需要提供好页目录表和页表即可，这种页表方案叫做&lt;strong&gt;二级页表&lt;/strong&gt;，第一级叫&lt;strong&gt;页目录表 PDE&lt;/strong&gt;，第二级叫&lt;strong&gt;页表 PTE&lt;/strong&gt;。他们的结构如下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.18771726535341832&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSQzoHRAf3PqxWI3MhZhAdXFtvZWvvL3HUyRmCwq2pU9OrSWSlbwMdsh4Ef8oXrAF8xRPJlb7R4UA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;863&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;之后再开启分页机制的开关。其实就是更改 &lt;/span&gt;&lt;strong&gt;cr0&lt;/strong&gt;&lt;span&gt; 寄存器中的一位即可（31 位），还记得我们开启保护模式么，也是改这个寄存器中的一位的值。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2302325581395349&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSQzoHRAf3PqxWI3MhZhAdXKz6I57yxNmia3zvaEFqW3icAyoialasB4OxVnlkNKn6dgic8hXr05x66xA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;860&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;然后，MMU 就可以帮我们进行分页的转换了。此后指令中的内存地址（就是程序员提供的逻辑地址），就统统要先经过分段机制的转换，再通过分页机制的转换，才能最终变成物理地址。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以这段代码，就是帮我们把页表和页目录表在内存中写好，之后开启 cr0 寄存器的分页开关，仅此而已，我们再把代码贴上来。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;setup_paging:&lt;br/&gt;    mov ecx,1024*5&lt;br/&gt;    xor eax,eax&lt;br/&gt;    xor edi,edi&lt;br/&gt;    pushf&lt;br/&gt;    cld&lt;br/&gt;    rep stosd&lt;br/&gt;    mov eax,_pg_dir&lt;br/&gt;    mov [eax],pg0+7&lt;br/&gt;    mov [eax+4],pg1+7&lt;br/&gt;    mov [eax+8],pg2+7&lt;br/&gt;    mov [eax+12],pg3+7&lt;br/&gt;    mov edi,pg3+4092&lt;br/&gt;    mov eax,00fff007h&lt;br/&gt;    std&lt;br/&gt;L3: stosd&lt;br/&gt;    sub eax,00001000h&lt;br/&gt;    jge L3&lt;br/&gt;    popf&lt;br/&gt;    xor eax,eax&lt;br/&gt;    mov cr3,eax&lt;br/&gt;    mov eax,cr0&lt;br/&gt;    or  eax,80000000h&lt;br/&gt;    mov cr0,eax&lt;br/&gt;    ret&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们先说这段代码最终产生的效果吧。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当时 linux-0.11 认为，总共可以使用的内存不会超过 &lt;strong&gt;16M&lt;/strong&gt;，也即最大地址空间为 &lt;strong&gt;0xFFFFFF&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而按照当前的页目录表和页表这种机制，1 个页目录表最多包含 1024 个页目录项（也就是 1024 个页表），1 个页表最多包含 1024 个页表项（也就是 1024 个页），1 页为 4KB（因为有 12 位偏移地址），因此，16M 的地址空间可以用 1 个页目录表 + 4 个页表搞定。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4（页表数）* 1024（页表项数） * 4KB（一页大小）= 16MB&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，上面这段代码就是，&lt;strong&gt;将页目录表放在内存地址的最开头&lt;/strong&gt;，还记得上一讲开头让你留意的 _pg_dir 这个标签吧？&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;_pg_dir:&lt;br/&gt;_startup_32:&lt;br/&gt;    mov eax,0x10&lt;br/&gt;    mov ds,ax&lt;br/&gt;    ...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;之后紧挨着这个页目录表，放置 4 个页表&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，代码里也有这四个页表的标签项。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;.org 0x1000 pg0:&lt;br/&gt;.org 0x2000 pg1:&lt;br/&gt;.org 0x3000 pg2:&lt;br/&gt;.org 0x4000 pg3:&lt;br/&gt;.org 0x5000&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最终将页目录表和页表填写好数值，来覆盖整个 16MB 的内存。随后，开启分页机制。此时内存中的页表相关的布局如下。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0814332247557004&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSQzoHRAf3PqxWI3MhZhAdXeozxohG5vYcaA5zlXKjaXGPfdsxFCdrQ7OU6UQF4tqgTfTxoib2G95A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;307&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些页目录表和页表放到了整个内存布局中最开头的位置，就是覆盖了开头的 system 代码了，不过被覆盖的 system 代码已经执行过了，所以无所谓。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;同时，如 idt 和 gdt 一样，我们也需要通过一个寄存器告诉 CPU 我们把这些页表放在了哪里，就是这段代码。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;xor eax,eax&lt;br/&gt;mov cr3,eax&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你看，我们相当于告诉 cr3 寄存器，&lt;strong&gt;0 地址处就是页目录表，再通过页目录表可以找到所有的页表&lt;/strong&gt;，也就相当于 CPU 知道了分页机制的全貌了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;至此后，整个内存布局如下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.005763688760807&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSQzoHRAf3PqxWI3MhZhAdXPrH76IEDFHibPtmCZ3IzNibSg0DN04sw8oGqhsQcJkxowX9lARAs8IZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;694&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么具体页表设置好后，映射的内存是怎样的情况呢？那就要看页表的具体数据了，就是这一坨代码。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;setup_paging:&lt;br/&gt;    ...&lt;br/&gt;    mov eax,_pg_dir&lt;br/&gt;    mov [eax],pg0+7&lt;br/&gt;    mov [eax+4],pg1+7&lt;br/&gt;    mov [eax+8],pg2+7&lt;br/&gt;    mov [eax+12],pg3+7&lt;br/&gt;    mov edi,pg3+4092&lt;br/&gt;    mov eax,00fff007h&lt;br/&gt;    std&lt;br/&gt;L3: stosd&lt;br/&gt;    sub eax, 1000h&lt;br/&gt;    jpe L3&lt;br/&gt;    ...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很简单，对照刚刚的页目录表与页表结构看。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.18771726535341832&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSQzoHRAf3PqxWI3MhZhAdXFtvZWvvL3HUyRmCwq2pU9OrSWSlbwMdsh4Ef8oXrAF8xRPJlb7R4UA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;863&quot;/&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;前五行表示，页目录表的前 4 个页目录项，分别指向 4 个页表。比如页目录项中的第一项 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;[eax]&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 被赋值为 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;pg0+7&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，也就是 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;0x00001007&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，根据页目录项的格式，表示页表地址为 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;0x1000&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，页属性为 &lt;/span&gt;&lt;span&gt;&lt;strong&gt;0x07&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 表示改页存在、用户可读写。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;后面几行表示，填充 4 个页表的每一项，一共 &lt;/span&gt;&lt;span&gt;&lt;strong&gt;4*1024=4096&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 项，依次映射到内存的前 16MB 空间。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;画出图就是这个样子，其实刚刚的图就是。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9062870699881376&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSQzoHRAf3PqxWI3MhZhAdXMmaEo1mxwqQF8ibvKK8OzaA47z3JgDO6kKLffIoKmuDXqOHiaBtayw5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;843&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;看，最终的效果就是，经过这套分页机制，&lt;strong&gt;线性地址将恰好和最终转换的物理地址一样&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;现在只有四个页目录项，也就是将前 16M 的线性地址空间，与 16M 的物理地址空间一一对应起来了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.428921568627451&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSQzoHRAf3PqxWI3MhZhAdXmTeojzoDPN58xlw2HNQPc3I7G6okwX2oyfsicickDoHnXIWAcHCFTj4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;408&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;好了，我知道你目前可能有点晕头转向，关于地址，我们已经出现了好多词了，包括&lt;strong&gt;逻辑地址&lt;/strong&gt;、&lt;strong&gt;线性地址&lt;/strong&gt;、&lt;strong&gt;物理地址&lt;/strong&gt;，以及本文中没出现的，你可能在很多地方看到过的&lt;strong&gt;虚拟地址&lt;/strong&gt;。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而这些地址后面加上空间两个字，似乎又成为了一个新词，比如&lt;strong&gt;线性地址空间&lt;/strong&gt;、&lt;strong&gt;物理地址空间&lt;/strong&gt;、&lt;strong&gt;虚拟地址空间&lt;/strong&gt;等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那就是时候展开一波讨论，将这块的内容梳理一番了，且听我说。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Intel 体系结构的&lt;strong&gt;内存管理&lt;/strong&gt;可以分成两大部分，也就是标题中的两板斧，&lt;strong&gt;分段&lt;/strong&gt;和&lt;strong&gt;分页&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;分段机制&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在之前几回已经讨论过多次了，其目的是为了为每个程序或任务提供单独的代码段（cs）、数据段（ds）、栈段（ss），使其不会相互干扰。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;分页机制&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;是本回讲的内容，开机后分页机制默认是关闭状态，需要我们手动开启，并且设置好页目录表（PDE）和页表（PTE）。其目的在于可以按需使用物理内存，同时也可以在多任务时起到隔离的作用，这个在后面将多任务时将会有所体会。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 Intel 的保护模式下，分段机制是没有开启和关闭一说的，它必须存在，而分页机制是可以选择开启或关闭的。所以如果有人和你说，它实现了一个没有分段机制的操作系统，那一定是个外行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;再说说那些地址：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;逻辑地址&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：我们程序员写代码时给出的地址叫逻辑地址，其中包含段选择子和偏移地址两部分。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;线性地址&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：通过分段机制，将逻辑地址转换后的地址，叫做线性地址。而这个线性地址是有个范围的，这个范围就叫做线性地址空间，32 位模式下，线性地址空间就是 4G。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;物理地址&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：就是真正在内存中的地址，它也是有范围的，叫做物理地址空间。那这个范围的大小，就取决于你的内存有多大了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;虚拟地址&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：如果没有开启分页机制，那么线性地址就和物理地址是一一对应的，可以理解为相等。如果开启了分页机制，那么线性地址将被视为虚拟地址，这个虚拟地址将会通过分页机制的转换，最终转换成物理地址。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2687651331719128&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSQzoHRAf3PqxWI3MhZhAdXE0BZFmtVQIWXn0co0r1wPKPtkibs63SG2Bia1ibFKvibx2tpwb1T3UAj8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;413&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但实际上，我本人是不喜欢虚拟地址这个叫法的，因为它在 Intel 标准手册上出现的次数很少，我觉得知道逻辑地址、线性地址、物理地址这三个概念就够了，逻辑地址是程序员给出的，经过分段机制转换后变成线性地址，然后再经过分页机制转换后变成物理地址，就这么简单。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;好了，我们终于把这些杂七杂八的，idt、gdt、页表都设置好了，并且也开启了保护模式，之后我们就要做好进入 main.c 的准备了，那里是个新世界！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不过进入 main.c 之前还差最后一哆嗦，就是 head.s 最后的代码，也就是本文开头的那段代码。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;jmp after_page_tables&lt;br/&gt;...&lt;br/&gt;after_page_tables:&lt;br/&gt;    push 0&lt;br/&gt;    push 0&lt;br/&gt;    push 0&lt;br/&gt;    push L6&lt;br/&gt;    push _main&lt;br/&gt;    jmp setup_paging&lt;br/&gt;L6:&lt;br/&gt;    jmp L6&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;看到没，这里有个 push _main，把 main 函数的地址压栈了，那最终跳转到这个 main.c 里的 main 函数，一定和这个压栈有关。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;压栈为什么和跳转到这里还能联系上呢？留作本文思考题，下一篇将揭秘这个过程，你会发现仍然简单得要死。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;欲知后事如何，且听下回分解。&lt;/span&gt;&lt;/section&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;strong&gt;&lt;span&gt;------- 本回扩展资料 -------&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;关于逻辑地址-线性地址-物理地址的转换，可以参考 Intel 手册：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Intel 3A Chapter 3 Protected-Mode Memory Management&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8590047393364929&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSQzoHRAf3PqxWI3MhZhAdXftXicdlmicCjmogefcpOSibvqtiaS9PQ1NmonF86huoTXHorsn8iaFnwqKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;844&quot;/&gt;&lt;/section&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;span&gt;而有关这些地址的定义和说明，在本小节中也做了详细的说明，看这里的介绍是最权威也是最透彻的。相信我，它很简单。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.635893011216566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXThwg05Eb9sKV6ibgia8ibTkxsM4y4H9aasOaOqRUF9L4BzngeGibRIC0ennzoXjed7ibBBb2b8EQ4fqYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1159&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;span&gt;页目录表和页表的具体结构，可以看 &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;span&gt;&lt;span&gt;Intel 3A Chapter 4.3 32-bit paging&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4780316344463972&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXThwg05Eb9sKV6ibgia8ibTkxsboDicxH2icr7GibXXU2BhX3XUaURk3ayRJ7wlX2gxb1u1Xl8jjL6S75hg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1138&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5352112676056338&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXThwg05Eb9sKV6ibgia8ibTkxs7GAqtaPOXOpD5Mf6nqWegiar9m8bYwYaOdDc5F8MBdQD9UvZ8OSw1iaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1136&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;------- 关于本系列 -------&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;span&gt;本系列的开篇词看这&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247499207&amp;amp;idx=1&amp;amp;sn=f00bf7653ae57faa6266bfd18287e6bb&amp;amp;chksm=c2c5876af5b20e7cdf5094696d266ee3fa09514601b021ce602ecaf0ec79857045b43e286a58&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;闪客新系列！你管这破玩意叫操作系统源码&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;闪客新系列！你管这破玩意叫操作系统源码&lt;/a&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;caE9&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;本系列的扩展资料看这（也可点击&lt;/span&gt;&lt;strong&gt;阅读原文&lt;/strong&gt;&lt;span&gt;），这里有很多有趣的资料、答疑、互动参与项目，持续更新中，希望有你的参与。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://github.com/sunym1993/flash-linux0.11-talk&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;init&quot;&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;init&quot;&gt;&lt;span&gt;本系列全局视角&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;init&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1323722149410222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSsqVrEibE9LXat88ha3emc5lAsIibL0uiaBjemPeeEpabrRuZmZQeTicWkQlr5OXDUPuticchZ6XMUmww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，祝大家都能追更到系列结束，只要你敢持续追更，并且把每一回的内容搞懂，我就敢让你在系列结束后说一句，我对 Linux 0.11 很熟悉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;另外，本系列&lt;/span&gt;&lt;strong&gt;完全免费&lt;/strong&gt;&lt;span&gt;，希望大家能多多传播给同样喜欢的人，同时给我的 GitHub 项目点个 star，&lt;/span&gt;&lt;span&gt;就在&lt;/span&gt;&lt;strong&gt;阅读原文&lt;/strong&gt;&lt;span&gt;处&lt;/span&gt;&lt;span&gt;，这些就足够让我坚持写下去了！我们下回见。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0MjE3NDE0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXRVh3YhnV9yvZK9TGpSsFykUQPtHm4TuNAOUOr5qtPyZlg4DNciaYWiasRx1Fgt6UFTDjaK9qc08Llw/0?wx_fmt=png&quot; data-nickname=&quot;低并发编程&quot; data-alias=&quot;dibingfa&quot; data-signature=&quot;战略上藐视技术，战术上重视技术&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>617921461a6cc58a5eeb16248ed22c78</guid>
<title>Arthas 发布 3.5.5 版本，支持 macOS ARM64 架构，改进易用性</title>
<link>https://toutiao.io/k/7wnin28</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;markdown编辑器&quot; data-website=&quot;https://markdown.com.cn/editor&quot;&gt;&lt;figure data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.328125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2CINxh93CWR23UcTWkhcT4SjicD4cwNvraOZctFiaQr15MhBic4HNAzpsNYKBzPH3EbSafoxE69X2pQlJuUWicU22w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;320&quot;/&gt;&lt;figcaption&gt;Arthas&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;Arthas&lt;/code&gt;是Alibaba开源的Java诊断工具，深受开发者喜爱。&lt;/p&gt;&lt;ul data-tool=&quot;markdown.com.cn编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Github：https://github.com/alibaba/arthas&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;文档：https://arthas.aliyun.com/doc/&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;Arthas 最新发布了 3.5.5 版本，主要支持macOS ARM64架构，以及改进易用性。&lt;/p&gt;&lt;h2 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;vmtool 命令支持macOS ARM64架构&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;目前&lt;code&gt;vmtool&lt;/code&gt;的动态库文件是由github action构建的。但github action还不支持mac M1环境，所以&lt;code&gt;vmtool&lt;/code&gt;命令之前没支持mac M1机器。&lt;/p&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;但通过交叉编译的方式，在使用clang编译时指定多个arch就可以生成所谓的&lt;code&gt;Fat Library&lt;/code&gt;，即在一个文件里同时支持多种架构。&lt;/p&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;-arch x86_64 -arch arm64&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;使用&lt;code&gt;file&lt;/code&gt;命令可以查看&lt;code&gt;vmtool&lt;/code&gt;使用的&lt;code&gt;dylib&lt;/code&gt;已经同时支持&lt;code&gt;x86_64&lt;/code&gt;和&lt;code&gt;arm64&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;$ file lib/libArthasJniLibrary.dylib&lt;br/&gt;lib/libArthasJniLibrary.dylib: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit dynamically linked shared library x86_64] [arm64:Mach-O 64-bit dynamically linked shared library arm64]&lt;br/&gt;lib/libArthasJniLibrary.dylib (for architecture x86_64):Mach-O 64-bit dynamically linked shared library x86_64&lt;br/&gt;lib/libArthasJniLibrary.dylib (for architecture arm64):Mach-O 64-bit dynamically linked shared library arm64&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;async-profiler 升级到2.5版本，生成html结果支持查找，支持macOS ARM64架构&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;升级到2.5版本后，&lt;code&gt;profiler&lt;/code&gt;命令只支持生成&lt;code&gt;html&lt;/code&gt;格式结果，不再支持&lt;code&gt;svg&lt;/code&gt;格式了。&lt;code&gt;html&lt;/code&gt;格式可以更好的查找过滤。&lt;/p&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;比如在查找&lt;code&gt;File&lt;/code&gt;关键字之后，可以看到&lt;code&gt;紫色&lt;/code&gt;的高亮结果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5567839195979899&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2CINxh93CWR23UcTWkhcT4SjicD4cwNvrbM0wdcXFZPib7YH3Q4F7tMj3icicTQ4D9ZDkOv5jN0aLosueNs02tdT8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1990&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;WebConsole支持配置向上回滚行数&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;目前WebConsole默认只支持向上回滚1000行，但有的命令输出结果很长，之前的结果就会被覆盖掉。因此增加&lt;code&gt;scrollback&lt;/code&gt;参数，用户可以自定义配置。比如&lt;/p&gt;&lt;ul data-tool=&quot;markdown.com.cn编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;http://localhost:8563/?scrollback=200&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;改进低版本JDK attach高版本JDK支持&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;在使用低版本JDK attach高版本JDK 进程时，可能会抛出异常&lt;code&gt;IOException: Non-numeric value found - int expected&lt;/code&gt;，但实际上已经attach成功。这对用户会造成困扰。&lt;/p&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;因此改进为打印提示，但仍然会成功连接，用户可以直接诊断。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6131455399061033&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2CINxh93CWR23UcTWkhcT4SjicD4cwNvrGsZfnpcI38ouLmIQfjnhLfz1bkcyPLE0y5twaNuR3YjImNeTW5bl4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2130&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;markdown.com.cn编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;profiler wiki: https://arthas.aliyun.com/doc/jad.html&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Release 日志: https://github.com/alibaba/arthas/releases/tag/arthas-all-3.5.5&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;投票&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;strong&gt;Arthas一直在进步，2021中国开源项目评选，请投Arthas一票!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.6292682926829267&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2CINxh93CWR23UcTWkhcT4SjicD4cwNvruicWrJ6IouVz37iadTCVnyEibEAIdjNbXJjYjz2Gnko3jboGWSBpaL4uw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;410&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;👇 点击&lt;code&gt;阅读原文&lt;/code&gt;直达投票地址！&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>da01ae00e20cbea1493c2139aa0fbb0b</guid>
<title>元宇宙时代，谁在割谁的韭菜？</title>
<link>https://toutiao.io/k/x238vdn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.586&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/L0FwK4mMGh8iaolgCSlzFAXkF4z1ldYngApQILMUM7oCer8RjXHEpvg97YSPdCZkfQcpB9W2AUQFYGVoSOuJEFw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    二〇二一年双十一，已经是元宇宙大火六个多礼拜的日子了。那一天，我独自在电商网站上徘徊，遇见粉丝Z君，他前来问我道，“先生可曾为元宇宙写了一点什么没有?” 我说：“没有”。他就正告我：“先生还是写一点罢！我上厕所的时候，很爱看先生的文章。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    我也觉得有写点东西的必要了！这一波元宇宙的大火，背后隐藏着的一盘大棋，将会深刻影响到“谁来割我们的韭菜”、“我们用什么姿势被割”这两个根本的人生诘问。虽然作为韭菜无法反抗，但还是可以选择体位享受被割的！因此，对于元宇宙背后的棋盘和棋手，我们要怀着瞧热闹不嫌事儿大的心理，以阴谋论的精神谈谈看。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    开门见山说我的观点：&lt;strong&gt;元宇宙是网络时代的新巨头们，向传统区域型权力组织的发起的一次总攻。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    人类社会的权力组织，以往主要是各级各地的政权。在一定的地域范围内做到保境安民，就有了建立政权的基础。一个传统政权控制的范围，有什么根本影响因素呢？我认为，是它掌握的通信与运输能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    两三千年前，古希腊诸国都呈现小国寡民的城邦组织形式。而西周封建制度下的“国”，也是武装殖民建立起来的一个个据点，比城外的“郊、野、封、鄙”更远的地方，是各国管理都无法触及的真空地带。无独有偶，后来罗马人建立起一条条能快速运兵的大道，而秦始皇制定了“书同文、车同轨”的通信与交通改革，才能在亚欧大陆两端分别建立起疆域广大的帝国。这要展开说话就多了，大家可以翻开从历史书，沿着这一思路理出更多脉络。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.668&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/L0FwK4mMGhibdVsz8fShdVPdJvKYHqdBYLNK732CQJa07uoVHnOhicufztbOMGYBLM4ws6CibW0zHAFE1hO3wib13Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   二战以后，这个进程它算是尘埃落定了。为什么？地球表面的土地都被瓜分完了啊！可是，人类的通信和运输能力，二战后才真正腾飞。国家疆域都扩张不了了，而除了少数霸权，国家政权的能力很难超越疆域边界，于是接棒发展的主体，就成了跨国的巨头企业。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    特别是最近二十年，互联网巨头发展起来以后，大家才发现，这些数字平台调度人、财、物的能力，效率上秒杀原有的线下组织形式！今天丰富多彩的的电商、外卖、小程序给我们带来的种种便利，都反应出这样的效率提升。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    客观地说，FB、Google和Amazon这些巨头CEO实际掌控的权力，虽然跟中美这样强大的政权相比还差点，但是恐怕已经远超世界上过百位的总统了。&lt;strong&gt;今天，我们很难再以单纯的商业组织看待这些企业，而是要把他们看成当今世界重要的新型权力组织。&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    传统上基于地理区域的监管经验，对这些巨头几乎无效：美国税率高，我可以把业务挪到爱尔兰，其他国家平价向爱尔兰供货。前些日子欧美共同要求爱尔兰提高最低税率的事儿，根儿就在这里，不过我看作用有限：任你有千般手段，只要我在全球调度生产交易，总是可以找到最低的税赋。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    而对于网络巨头的管理，则更是棘手：亚马逊上卖的货该按哪个州交消费税交？号称全球第五大经济体的阿里，该归哪个市哪个区的网信办管呢？虽然现有制度对这些也做了安排，不过怎么看都是刻舟求剑、驴唇不对马嘴。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    数字化调度人财物的能力带来了滚滚财源，而传统的区域性权力组织又无法实施有效的管理和税收，所以大家才会看到，全球的财富正在加速向跨国企业和数字巨头相关利益者转移。如今，美国1%超级富人掌控的财富，已经超过了中产阶级的财富总和，这正是此趋势下无法阻挡的结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/L0FwK4mMGhibNTVDw0uJUeR9aDW4Bbml4Vc5ZKkH3fHnbQpBBia0LJf3iajJ4LXdQLM8kSkFySEvvg5q3MebueVhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    当然，&lt;strong&gt;区域型权力组织多年经营，也不至于局面这么快就失控，他们手里还有两张重要的牌：一是实体商业，二是金融体系。&lt;/strong&gt;而目前的元宇宙构想，正是要从根本上改变这最后两张牌的组织秩序。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    先说线下商业。虽说数字平台已经渐渐位居调度人财物的核心地位，但那还只是“调度”，仍然有大量商业行为最终发生的场景，还是要回到线下实体。举个例子：虽说如今开个餐馆，不在美团上挂外卖，不在点评上买榜单，可能真的会生意惨淡，可是在哪里建商业中心、批准谁开店这些事儿，毕竟还都掌握在区域型权力组织的手里。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    于是，不管你线上怎么闹得欢，我总有办法抓住最后的命根子。但是，疫情让大家对很多行业的线下实施是否有必要，开展了全民性深入思考：教育，似乎也可以在线上开课；办公，谷歌到现在都没上班，也没影响业务；开会，加了美颜的腾讯会议似乎更让人舒适。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    进一步思考，如果虚拟现实技术成熟了，人们所有交流性的活动线上线下体验都一样了，那么线下的实体办公交易，以及配套的交通餐饮，是不是都可以一网打尽了呢？那么，这又对谁有利呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    显然，这对网络巨头，特别是那些掌控了元宇宙生态的巨头有利。&lt;strong&gt;元宇宙让他们从线下商业活动的调度器，一跃成为商业活动本身的发生地，当然，相应的经济利益也将大幅向他们转移。&lt;/strong&gt;举个例子，如果有一天办公开会都搬到元宇宙里去了，那写字楼还有人租么？而元宇宙里的房产，可能就炙手可热了。您看，八字还没一撇呢，林俊杰这就开始在元宇宙里买房子置地了。这些虚拟世界里的房产、物品，都是数字平台自产自销、无本万利的买卖。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.556923076923077&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/L0FwK4mMGhibdVsz8fShdVPdJvKYHqdBYQ4TOYWGx8xAqicLPaXuQ5H7TZxsk8oljdOYxXic1PuQRVbNmk5djr77A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;650&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    有命挣，还得有命花。这就要说到另一个问题，如果交易的结算仍然采用原有的法币，那么不可避免还是要受制于人：不管你怎么闹腾，大不了人家加税就是了。不信，大家可以看看欧盟正在酝酿的数字税。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    用法币逃不脱被割，自己发货币那是犯罪，这事儿可难办了！其实，草蛇灰线，伏脉千里，早有人埋下了解决的办法，大家肯定也都想到了——数字货币。俗话说，有主儿的干粮不能碰，这没主儿的货币体系才真香。由于它的交易和金融体系脱离了现有的区域性权力组织控制，用数字货币在虚拟世界里割韭菜，就可以摆脱二次被割的命运了！&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    数字货币名义上是去中心化的，实际上当然是按照“钱多者王”的核心资本原则运作的，而网络巨头背后的大老板也是资本，这不就一帮一对对红了嘛。很自然，这次元宇宙大火，以NFT为代表的数字货币领域动作也相当多。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    现在大家应该明白了：&lt;strong&gt;现在乃至未来仍将轰轰烈烈的元宇宙运动，是掌控了数字世界权力的网络巨头，准备釜底抽薪地摆脱实体商业和金融体系的束缚，从而向传统区域型权力组织发起的总攻。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    我们可以展望一下，在元宇宙第三个五年计划完成后，我们每个人全天候蜷缩在床上，嘴边等着定时投喂的食物，带着通向虚拟世界的眼镜，过着现实世界中箪食瓢饮、虚拟世界里声色犬马的生活。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.664&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/L0FwK4mMGh9ed594RfeSmqnibkicnAWwUvYnib6XSCph5pmwlyUsicfjOtwIiaz6AFQSiaoyjWibKXPUy03eGLYXGZk3g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    话题到这儿似乎应该告一段落，不是故事还没完：用虚拟世界抢班夺权，更大规模地收割韭菜，如果按现有的状态发展到尽头的话，有一个不容易解决的问题——割着割着，韭菜可能没了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    为什么会这样，我们举个例子：前者日子，美团为了应对不给骑手上社保的质疑，想了个新主意——让骑手都注册成个体户，跟美团合作。美团的做法有问题么？从法律和逻辑层面来看，没问题——假设一个骑手同时跑美团和饿了么，那么谁应该给他上社保呢？可是感觉上，似乎又有啥地方不对。我冥思苦想，终于有了一点线索。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    如今这些掌控了部分社会资源调度权力的数字平台，跟原来的区域型权力组织相比，有一个最大的不同：&lt;strong&gt;权利与义务的平衡性&lt;/strong&gt;。拿原有的区域政权来说，权利自然是税收，但是也有非常明确的对应义务——保障一方人民得安全与生存，做不到这两点，久了一定出事。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    现在的网络巨头和未来的元宇宙巨头，按照目前的制度设计，权利义务就不那么对等了：权利上，因为掌控了某个领域的资源调度分配能力，可以大收平台税；然而义务上，美国的国防也好、中国的低保也好，他们并不直接承担责任，而是靠交税的方式间接支持。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    可是咱们前面说了，靠元宇宙彻底抢夺了平台税权力，又靠全球化生产运营享受最低税率，平衡就被打破了：能流通到转移支付的财富越来越少，韭菜们也就越来越蔫，直到枯萎得无法可割。韭菜都没了，那顶尖那1%人的财富，自然也就是镜花水月了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    你的镰刀再快，也得靠生机勃勃的韭菜地，才能大显身手不是！从这个意义来说，&lt;strong&gt;“人民群众是历史的创造者”，正是雄辩地指出了韭菜的伟大价值啊！&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    关于权利义务不对等带来的系统性问题，近年来有个生动的例子：欧盟这个组织，给法德这些发达国家提供了的权利，就是打破关税边界，可以在全欧洲随心所欲地割韭菜；但是义务就呢？法德虽然可以盘踞欧洲市场挣钱，可是那些韭菜地的财政，人家不管啊！久而久之，希腊、葡萄牙这些躺平了被割的绿油油的韭菜地，不破产还等什么呢？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    对比一下中国的情况，常有人说，全国只有六个省市的财政有盈余。殊不知，这六省市产业固然发达，也是因为背靠全国的大市场，才能嗨置的。因此，用财政转移支付作为带动后进地区的义务，是必不可少的平衡制度设计。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    再说回元宇宙。虽说随着技术的发展，虚拟世界的重要性一定会逐渐提高，可是近来扑天盖地的元宇宙倡导与跃进，我认为是新型的数字世界权力组织，向原有的区域型权力组织吹响了总攻的号角。目的也很明确：通过虚拟现实干掉实体产业、通过数字货币绕开金融体系，从而真控掌握全球一盘棋的割韭菜大业。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    你说我站那边？我站哪边没用，还是趴桥望水流吧！不过我想说，如果线上的镰刀原来越猛，真实的韭菜越来越蔫，那么这一不平衡的体系迟早要出问题。这一点，元宇宙的倡导者也好、线下秩序的维护者也罢，都应该好好思考一下！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（下面是本文相关的视频链接）&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAABlQs3ayvVwAAAAstQy6ubaLX4KHWvLEZgBPEsYMYFhcnc9X9zNPgMIsVM_Q4B3T2oWiwBPunGD3y&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=rjD5jyTuFrIpZ2ibE8T7Ym3K77SEULgkiaAl5cbwLQw6G7vzDxH61fiaeXT1tR7CwicDeGfic5zdx3wk17Ib0vX03gyqzXbHXcCW3vicFiauKIl68A&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SZ&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=AxricY7RBHdWrx998eN9wzyErJxhsNzwrV999XJZuH1tykmt8TM9wxhjeLMCVcPEgnbiciczJvbcFI&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/ajNVdqHZLLDAqqKGKKkU2VXoQLK8GHsskbtIWdRA5DF8GkCBu2P1CQ/0&quot; data-username=&quot;v2_060000231003b20faec8c6ea8019c4d4ca06e433b0773ff828502abc8e7cb4513eda991aedf7@finder&quot; data-nickname=&quot;北冥乘海生&quot; data-desc=&quot;元宇宙，这一概念，互联网大厂造词的又一高峰，俨然已成了普通人无法抵挡的时代洪流，今天我们就来讲讲，在这大趋势下，如何建立自身的能力体系&quot; data-nonceid=&quot;855678898499975604&quot; data-type=&quot;video&quot;/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;插播个事：应邀参加&lt;span&gt;12.18在&lt;/span&gt;广州的广告优化师大会，有人让我聊聊元宇宙对优化师的影响。于是，我准备了个题目：《&lt;strong&gt;元宇宙和人工智能来临，优化师何去何从&lt;/strong&gt;》，欢迎参加交流！下面是报名链接(选择“&lt;strong&gt;优化师&lt;/strong&gt;&lt;strong&gt;闭门学堂&lt;/strong&gt;&lt;span&gt;”&lt;/span&gt;)-&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6753623188405797&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/L0FwK4mMGh9ed594RfeSmqnibkicnAWwUviaianZME4LGzyAtvcAUgdRNp5UxiapytIBX3bUZwjPbcAsSqGY7AKnkIw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>