<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>109bf9eb902e2a9355d42ab47b7b857d</guid>
<title>MySQL 那点破事！索引、SQL 调优、事务、B+树、分表</title>
<link>https://toutiao.io/k/aazub7e</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left&quot; aria-describedby=&quot;js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2NzYyNjQzNg==&amp;amp;action=getalbum&amp;amp;album_id=1911852085562703875#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1911852085562703875&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#面试&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;12个&lt;span class=&quot;weui-hidden_abs&quot;&gt;内容&lt;/span&gt;&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大家好，我是Tom哥~&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了便于大家查找问题，了解全貌，整理个目录，我们可以快速全局了解关于mysql数据库，面试官一般喜欢问哪些问题&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.0609375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwerU9KoqeOEAry59z0QHvGu2xicL4gnibHbhQkmh9Vhyx8Xa6PhqG3It2zLgsGLtCkl9F7ianL9IXqbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接下来，我们逐条来看看每个问题及答案&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;MyISAM 和 InnoDB 的区别？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：InnoDB 支持 事务、外键、聚集索引，通过MVCC来支持高并发，索引和数据存储在一起。InnoDB 不保存表的具体行数，执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;select count(*) from table&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 时需要全表扫描。而MyISAM 用一个变量保存了整个表的行数。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;InnoDB 最小的锁粒度是行锁，MyISAM 最小的锁粒度是表锁，并发能力低。MySQL 将默认存储引擎是 InnoDB&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;mysql 锁有哪些类型？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：mysql锁分为共享锁( S lock ) 、排他锁 ( X lock )，也叫做读锁和写锁。根据粒度，可以分为表锁、页锁、行锁。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;什么是间隙锁？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：间隙锁是可重复读级别下才会有的锁，mysql会帮我们生成了若干&lt;/span&gt;&lt;code&gt;&lt;span&gt;左开右闭&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的区间，结合MVCC和间隙锁可以解决幻读问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;如何避免死锁？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：死锁的四个必要条件：1、互斥 2、请求与保持 3、环路等待 4、不可剥夺。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;合理的设计索引，区分度高的列放到组合索引前面，使业务 SQL 尽可能通过索引定位更少的行，减少锁竞争。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;调整业务逻辑 SQL 执行顺序， 避免 update/delete 长时间持有锁的 SQL 在事务前面。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;避免大事务，将大事务拆成多个小事务&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;以固定的顺序访问表和行。比如两个更新数据的事务，事务 A 更新数据的顺序为 1，2;事务 B 更新数据的顺序为 2，1。这样更可能会造成死锁。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在并发比较高的系统中，不要显式加锁，特别是是在事务里显式加锁。如 select … for update 语句，如果是在事务里（运行了 start transaction 或设置了autocommit 等于0）,那么就会锁定所查找到的记录。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;尽量用主键/索引去查找记录&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;优化 SQL 和表设计，减少同时占用太多资源的情况。比如说，避免多个表join，将复杂 SQL 分解为多个简单的 SQL。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;数据库的隔离级别？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：读未提交、读已提交、可重复读（mysql的默认级别，每次读取结果都一样，但是有可能产生幻读）、串行化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;Mysql有哪些类型的索引？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;普通索引：一个索引只包含一个列，一个表可以有多个单列索引。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;唯一索引：索引列的值必须唯一，但允许有空值&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;复合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;聚簇索引：也称为主键索引，是一种数据存储方式。B+Tree结构，非叶子节点包含健值和指针，叶子节点包含索引列和行数据。一张表只能有一个聚簇索引。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;非聚簇索引：不是聚簇索引，就是非聚簇索引。叶子节点只是存索引列和主键id。如果sql还要返回除了索引列的其他字段信息，需要回表，第一次索引一般是顺序IO，回表的操作属于随机IO。回表的次数越多，性能越差。此时我们推荐&lt;/span&gt;&lt;code&gt;&lt;span&gt;覆盖索引&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;什么是覆盖索引和回表？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、覆盖索引，指的是在一次查询中，一个索引包含所有需要查询的字段的值，可能是返回值或where条件&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;select buyer_id from order &lt;span&gt;where&lt;/span&gt; money&amp;gt;100&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;假如我们创建了一个(money，buyer_id)的联合索引，索引的叶子节点包含了&lt;/span&gt;&lt;code&gt;&lt;span&gt;buyer_id&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的信息，则不会再&lt;/span&gt;&lt;code&gt;&lt;span&gt;回表&lt;/span&gt;&lt;/code&gt;&lt;span&gt;查询。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、回表，指查询时一些字段值拿不到，需要到主键索引B+树再查一次。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;Mysql的最左前缀原则？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：即最左优先，在检索数据时从联合索引的最左边开始匹配，直到遇到范围查询（如：&amp;gt; 、&amp;lt; 、between、like等）&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;例子：where a = 1 and b = 2 and c &amp;gt; 3 and d = 4 ，如果建立(a,b,c,d)组合索引，d是用不到索引的；如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;线上SQL的调优经验？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;1、&lt;/span&gt;&lt;code&gt;&lt;span&gt;slow_query_log&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 日志中收集到的慢 SQL ，结合 &lt;/span&gt;&lt;code&gt;&lt;span&gt;explain&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 分析是否命中索引。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;2、减少索引扫描行数，有针对性的优化慢 SQL。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;3、建立联合索引，由于联合索引的每个叶子节点包含检索字段的信息，按最左前缀原则匹配后，再按其它条件过滤，减少回表的数据量。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;4、还可以使用虚拟列和联合索引来提升复杂查询的执行效率。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;官方为什么建议采用自增id 作为主键？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：自增id是连续的，插入过程也是顺序的，总是插入在最后，减少了页分裂，有效减少数据的移动。所以尽量不要使用字符串（如：UUID）作为主键。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;索引为什么采用B+树，而不用B-树，红黑树？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：提升查询速度，首先要减少磁盘IO次数，也就是要降低树的高度。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;平衡二叉树、红黑树，都属于二叉树。时间复杂度为O(n)，当表的数据量上千万时，树的深度很深，mysql读取时消耗大量 IO。另外，InnoDB引擎采用&lt;/span&gt;&lt;code&gt;&lt;span&gt;页&lt;/span&gt;&lt;/code&gt;&lt;span&gt;为单位读取，每个节点一页，但是二叉树每个节点储存一个关键词，导致空间浪费。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;B-树，非叶子节点存储数据，占用较多空间，导致每个节点的&lt;/span&gt;&lt;code&gt;&lt;span&gt;指针&lt;/span&gt;&lt;/code&gt;&lt;span&gt;少很多，无形增加了树的深度。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;B+树数据都存储在叶子节点，非叶子节点只存储&lt;/span&gt;&lt;code&gt;&lt;span&gt;健值+指针&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，索引树更加扁平，三层深度可以支持千万级表存储。同时叶子节点之间通过链表关联，范围查找更快。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;更多内容，参考 &lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247485030&amp;amp;idx=1&amp;amp;sn=fae128c2991e69101e6e4732001bcb76&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;mysql 一棵 B+ 树能存多少条数据？&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;事务的特性有哪些？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案：&lt;span&gt;ACID。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;原子性。一个事务中的操作要么全部成功，要么全部失败。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;持久性。永久保存在数据库中。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一致性。总是从一个一致性的状态转换到另一个一致性的状态&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;隔离性。一个事务的修改在提交前，其他事务是感知不到的&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;如何实现分布式事务？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;1、流水任务，最终一致性，前提是接口要支持幂等性&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;2、事务消息&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;3、二阶段提交&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;4、三阶段提交&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;5、TCC&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;6、Seata 框架&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;7、更多内容，参考 &lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484829&amp;amp;idx=1&amp;amp;sn=60f39021b58762ea909ea5ae53434945&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;如何解决分布式事务&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;日常工作中，MySQL 如何做优化？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;1、分页优化。比如电梯直达，&lt;/span&gt;&lt;code&gt;&lt;span&gt;limit 100000,10&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 先查找起始的主键id，再通过&lt;/span&gt;&lt;code&gt;&lt;span&gt;id&amp;gt;#{value}&lt;/span&gt;&lt;/code&gt;&lt;span&gt;往后取10条&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;2、尽量使用&lt;/span&gt;&lt;code&gt;&lt;span&gt;覆盖索引&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，索引的叶节点中已经包含要查询的字段，减少&lt;/span&gt;&lt;code&gt;&lt;span&gt;回表查询&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;3、SQL优化（索引优化、小表驱动大表、虚拟列、适当增加冗余字段减少连表查询、联合索引、排序优化、慢日志 Explain 分析执行计划）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;4、设计优化（避免使用NULL、用简单数据类型如int、减少 text 类型、分库分表）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;5、硬件优化（使用SSD 减少 I/O 时间、足够大的网络带宽、尽量大的内存）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;mysql 主从同步具体过程？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;master主库，有数据更新，将此次更新的事件类型写入到主库的binlog文件中&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;主库会创建&lt;/span&gt;&lt;code&gt;&lt;span&gt;log dump 线程&lt;/span&gt;&lt;/code&gt;&lt;span&gt;通知slave有数据更新&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;slave，向master节点的 log dump线程请求一份指定binlog文件位置的副本，并将请求回来的&lt;/span&gt;&lt;code&gt;&lt;span&gt;binlog&lt;/span&gt;&lt;/code&gt;&lt;span&gt;存到本地的&lt;/span&gt;&lt;code&gt;&lt;span&gt;Relay log&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 中继日志中&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;slave 再开启一个&lt;/span&gt;&lt;code&gt;&lt;span&gt;SQL 线程&lt;/span&gt;&lt;/code&gt;&lt;span&gt;读取&lt;/span&gt;&lt;code&gt;&lt;span&gt;Relay log&lt;/span&gt;&lt;/code&gt;&lt;span&gt;事件，并在本地执行&lt;/span&gt;&lt;code&gt;&lt;span&gt;redo&lt;/span&gt;&lt;/code&gt;&lt;span&gt;操作。将发生在主库的事件在本地重新执行一遍，从而保证主从数据同步&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4639175257731959&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwerU9KoqeOEAry59z0QHvGuIAmxHAic1iaQ7iaLSDKrPpL79kIMlyzg85ZBJ80icXFianB6bpEEoqXCmkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;582&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;什么是主从延迟？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：指一个写入SQL操作在主库执行完后，将数据完整同步到从库会有一个时间差，称之为主从延迟。计算公式：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;主库生成一条写入SQL的binlog，里面会有一个时间字段，记录写入的时间戳 t1&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;binlog 同步到从库后，一旦开始执行，取当前时间 t2&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;t2-t1&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，就是延迟时间&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意：不同服务器要保持时钟一致&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;主从延迟排查方法？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;show slave status&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 命令输出的&lt;/span&gt;&lt;code&gt;&lt;span&gt;Seconds_Behind_Master&lt;/span&gt;&lt;/code&gt;&lt;span&gt;参数的值来判断&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5732600732600732&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwerU9KoqeOEAry59z0QHvGuexWFBt1UicXjUucmxBS3ygm6VIzfEehDiboKhatIia7JqReEVoeG2ibYlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;546&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;为零：表示主从复制良好&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;正值：表示主从已经出现延时，数字越大，表示从库延迟越严重&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;主从延迟要怎么解决？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;看业务的接受程度。如果不能接受延迟，那么建议强制走主库查询&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可以考虑引入缓存，更新主库后同步写入缓存，保证缓存的及时性&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;提升从库的机器配置，提高从库binlog的同步效率&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缩短主、从库的网络距离，减少binlog的网络传输时间&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一主多从，每个从库都启一个线程从主库同步 binlog，导致主库压力过大，可以采用&lt;/span&gt;&lt;code&gt;&lt;span&gt;canal&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 增量订阅&amp;amp;消费组件，缓解主库压力。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;因为数据库必须要等到事务完成之后才会写入binlog，所以减少大事务的执行，尽量控制数量，分批执行。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;5.6版本之前，从库是单线程复制，当遇到执行慢的sql时，就会阻塞后面的同步。5.7 版本后支持多线程复制，可以在从服务上设置&lt;/span&gt;&lt;code&gt;&lt;span&gt;slave_parallel_workers&lt;/span&gt;&lt;/code&gt;&lt;span&gt;为一个大于0的数，然后把&lt;/span&gt;&lt;code&gt;&lt;span&gt;slave_parallel_type&lt;/span&gt;&lt;/code&gt;&lt;span&gt;参数设置为&lt;/span&gt;&lt;code&gt;&lt;span&gt;LOGICAL_CLOCK&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;为从库增加浮动IP，并通过脚本检测从库的延迟，延迟大于指定阈值时，将浮动IP切换至Master库，追平后再切换回从库。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;如果数据量太大怎么办？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：mysql表的数据量一般控制在千万级别，如果再大的话，就要考虑分库分表。除了分表外，列举了面对海量数据业务的一些常见优化手段&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;分表后ID如何保证全局唯一呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：分库分表后，多张表共用一套全局id，原来单表主键自增方式满足不了要求。我们需要重新设计一套id生成器。特点：全局唯一、高性能、高可用、方便接入。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;UUID&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数据库自增ID&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数据库的号段模式，每个业务定义起始值、步长，一次拉取多个id号码&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基于Redis，通过&lt;/span&gt;&lt;code&gt;&lt;span&gt;incr&lt;/span&gt;&lt;/code&gt;&lt;span&gt;命令实现ID的原子性自增。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;雪花算法（Snowflake）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;市面的一些开源框架，如：百度（uid-generator），美团（Leaf）， 滴滴（Tinyid）等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;分表后可能遇到的哪些问题？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：分表后，与单表的最大区别是有分表键&lt;/span&gt;&lt;code&gt;&lt;span&gt;sharding_key&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，用来路由具体的物理表，以电商为例，有买家和卖家两个维度，以&lt;/span&gt;&lt;code&gt;&lt;span&gt;buyer_id&lt;/span&gt;&lt;/code&gt;&lt;span&gt;路由，无法满足卖家的需求，反之同样道理。如何解决？&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分买家库和卖家库，将买家库做为写库，保存完整的数据关系。同时将数据异构同步一份到卖家库，卖家库可以只存储&lt;/span&gt;&lt;code&gt;&lt;span&gt;seller_id，order_id，buyer_id&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 等几个简单关系字段即可，以&lt;/span&gt;&lt;code&gt;&lt;span&gt;seller_id&lt;/span&gt;&lt;/code&gt;&lt;span&gt;作为分表键&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;多线程扫描，分段查找，然后再聚合结果&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;另外也可以存到ES中，支持多维度复杂搜索&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于我：前阿里P7技术专家，出过专利，竞赛拿过奖，CSDN博客专家，负责过电商交易、社区生鲜、互联网金融等业务，多年团队管理经验。&lt;/span&gt;&lt;/section&gt;&lt;h1 accuse=&quot;qTitle&quot;&gt;&lt;span&gt;&lt;span&gt;关注公众号「微观技术」，后台回复 “算法” ，免费领取资料&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.069090909090909&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwcdJhGaQRdAk0VWLIAIU548z3Izf6mwqwwUX9X86hvNHZq158VYMEaxegjfRg8ic02O0HeWD4xIsiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;550&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247485551&amp;amp;idx=1&amp;amp;sn=533259fc15567b9f44e169943be4a305&amp;amp;chksm=ceb9f4c4f9ce7dd2debac27430c17c39fdb6ffadbd35c5494c68d39615a513336b7432b2ec1a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;聊聊 Kafka 那点破事！&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247485734&amp;amp;idx=1&amp;amp;sn=c3a2cc05b7f79e3dbe74b2162c189c3c&amp;amp;chksm=ceb9f58df9ce7c9b0f9a95304e11379206b2f27007609ff0207b37055c203a60b361f5b92b22&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;面试官问：如何保证 MQ消息是有序的？&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247485697&amp;amp;idx=1&amp;amp;sn=d0a3fd3fe1d5d70eb576d69d1d5a8399&amp;amp;chksm=ceb9f5aaf9ce7cbce50d1f5732c1ecce1dd25438c7a96d3e53499b653b4035e277b46678f6f8&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;看完这篇，code review 谁敢喷你代码写的烂？怼回去！&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247485467&amp;amp;idx=1&amp;amp;sn=de5105db459f8ffd60f34850784c8e48&amp;amp;chksm=ceb9f4b0f9ce7da6f3c25b039148d2193e3623a8fc7290debbf908e050613eb402c7fe80567c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;什么是布隆过滤器？如何解决高并发缓存穿透问题？&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484980&amp;amp;idx=1&amp;amp;sn=25a530689f0657750d579263800369a6&amp;amp;chksm=ceb9fa9ff9ce7389974d2f33bea9d861920cb75cca559f1f2810c89f729011bb3c2839ac46da&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;学会这10个设计原则，离架构师又进了一步！！！&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>eefb3424d35dfb44cf55b0ea6a4bacb0</guid>
<title>十个现象，识别程序员的 “水份”</title>
<link>https://toutiao.io/k/l2sw9ji</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left&quot; aria-describedby=&quot;js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU2NzEwMDc4OQ==&amp;amp;action=getalbum&amp;amp;album_id=1665534267625439237#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1665534267625439237&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#程序员&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;33个&lt;span class=&quot;weui-hidden_abs&quot;&gt;内容&lt;/span&gt;&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;strong&gt;&lt;span&gt;这里是Z哥的个人公众号&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;每周五11：45 按时送达&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;当然了，也会时不时加个餐～&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我的第「210」篇原创敬上&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大家好，我是Z哥。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下周五正好是国庆，我也给自己放个假，就不发文了。所以今天是节前最后一篇文章，先提前祝大家国庆快乐，可以好好放松一下。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;今天我们不聊干货了，聊点轻松的，来吐槽一下程序员的那些事儿。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在软件开发领域一直流传着一句话，它说明了程序员的水平和资历之间并不存在着相关性，并且可能相差特别大。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;26&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;到底是货真价实的十年经验？还是一年经验重复用了十年？&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;随着我在工作中遇到过的人越来越多、面试过的人越来越多，发现这句看似夸张的话讲述的的确是事实。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有些人工作了 7、8 年，所表现出来的专业性就像刚入行 1、2 年的新人。并且,比新人还不如的是，他们身上往往也没有了新人的那种学习欲望。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;与之相对的，我也与刚毕业就加入公司的应届生共事过，他们身上所表现出的惊人成长能力，让他们在不到一年的时间内就挑起了项目组的大梁。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;经过我对所接触过的程序员们的观察，我总结出了一些“信号”，他们可以帮助你识别出与你一起工作的同事到底是不是“货真价值”。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;然后，你就可以与那些“货真价实”的资深程序员们多打交道、多交流，与厉害的人多在一起，自己也更容易变得厉害。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;好了，下面开始。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你发现某位工作多年的程序员身上有这些现象出来，那么他大概率就是一位“有水份的高级程序员”。符合的现象越多，水份越大……&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;/01  总是喜欢“攒”一些代码后再提交代码/&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不知道你有没有留意过，一个团队里只要有一个人喜欢“攒”代码，那么这个项目的代码合并将会长期面临代码冲突的痛苦。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;道理很好理解，两个胖子之间的碰撞面积，总比两个瘦子大吧。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而且喜欢这么干的人往往也不太认可 CodeReview 这事，为啥？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为他大概率没有想过，做 CodeReview 的人，一次性看到几十上百个变更文件时的感受。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们可以建议他们，实现或者修复一个完整的小问题和小任务，就提交一次代码。最差也得每天提交一次，当然，需要将未实现的部分做好处理，避免编译报错。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/02  总是很早就开始 coding，但是很晚才通过验收/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;用马保国老师的话来说，“有些程序员写代码很快啊，pia 一下，我都来不及闪，他就写了好几行代码了。”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;他们实现功能很快，不熟悉的人还以为是高手。但是实际上，他们修 bug 的时间往往会明显多于其他人，最终可能反而导致拖整个项目进度的后腿。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;虽说不一定非得每次花时间正儿八经的画图，做设计。但是真正有经验的程序员，他们写代码之前脑子里是会先梳理好思路的，有一个清晰的达到终点的“路线”。这样他在写下每一行代码的时候，都知道他在做什么，而且下一步是什么。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，我们可以建议他们写代码之前，稍微多花点时间去搞清楚一些业务问题，梳理清楚需求。并且在写代码之前做一下规划，避免后来你的代码只有你自己看得懂，甚至是自己都看不懂。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;/03  看上去很忙，在多件事之间来回奔波/&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在团队里越是核心的人员总是越忙的，但并不是所有忙的人都是核心人员。因为有些忙是自己导致的。比如，当我们面前有多个问题需要处理的时候，不是谁来催得紧，你就先处理哪个。还得自己心里有一杆秤，根据优先级来处理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;否则，花费了大量时间在多个事情之间切换，实际真正的有效工作时间可能连一半都不到。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们可以建议他们不管是做任何还是修 bug，搞定一个之后再进行下一个，除非每次新来的问题都比之前的优先级高。但是，应该没那么巧吧？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，将任务分解成小任务，也更有利于自己掌控时间。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/04  固执己见/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果一位缺乏经验的程序员恰好又是团队里资历比较老的，那就很容易出现固执己见的情况。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这会使得他进入一个不太好的循环里去。自我感觉良好 -&amp;gt; 无法改掉身上的坏毛病 -&amp;gt; 资历老，听不进别人的 -&amp;gt; 自我感觉良好。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是往往获取经验最快的方式是以开放的心态与别人交流，学习别人的长处，补足自己的短处。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，我们可以建议他们多考虑一下事物好坏的另一面，毕竟任何事物都有两面性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/05  不断地重复掉进同一个坑/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;毕竟有了不少工作年限，所以当遇到生产环境的 bug 时，不会出现真正的新手那样不知从何下手的情况。他们会祭出打 log 大法，或者是调试大法，用最快的速度解决问题。然后，就没有然后了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从别人眼中看来，他们这是头痛医头，脚疼医脚。但是在他们眼里，没有任何两个“坑”是一样的，每个都不同，所以，下次相同的问题再次出现也是正常的。这种做法真的难以给人靠谱、放心的感觉。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，我们可以建议他们。在出问题后，先通过逻辑分析思考一下问题可能出在哪里，梳理相关的信息和思路。然后，即使解开了 Bug ，也应该多思考一下是否其它部分也有类似的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/06  盲目追逐技术潮流/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你说他们完全不学习吧，也不是。当从身边很多人的嘴里听到同一个技术名词的时候，他会视该技术为传说中的“ SliverBullet ”，赶紧去学习官方教程。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是，往往跟着入门教程走完一遍之后，就觉得这也没什么难的，自己已经掌握了。实际上，没有经过实战的使用就觉得掌握，仅仅是一种幻觉而已。因为一旦实际进行落地，往往会出现各种意料之外的问题等待着你去解决，甚至有些是连官网都未发现的bug。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;他们对新技术的崇拜，其实是他们觉得，如果自己不了解这个新技术，会觉得错过些什么。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，我们建议他们抱着学以致用的心态去学新技术，或者至少不要只停留在官方教程上，找一个自己工作或者生活中的场景，用新技术来实现一个功能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;/07  代码写得很随意/&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;写代码随意的场景有很多，小到变量、方法的命名规范与否，大到整体的架构设计上是否有考虑到一些非显性的问题，如性能、扩展性等等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;缺乏经验的程序员，不但全部命中上面这些点，而且写出来的代码，其它人很难看懂，特别在一些业务本身就有一定复杂度的场景中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;相反，优秀的程序员们在编写自认为复杂的代码段的时候，会写下清晰的注释来帮助后来人理解。因为他们知道代码不仅是让计算机执行，更是需要让别人也理解的，因为项目开发大多是团队协作。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，我们可以建议他们在写代码的时候考虑一下，如果两年后回头来看今天写下的代码，还看得懂吗？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;/08  总喜欢直接调试生产环境/&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“线上有问题？来说下你怎么操作的，我调试一下。”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“接口报错？参数发我，我调试一下。”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些是他们的口头禅。不可否认，从理论上来说，直接调试线上必然是解决问题最快的方式，毕竟直接面对案发现场。但也正是因为解决地过于容易，导致自己不容易“长记性”，下次大概率还会犯一样的错误。所谓，“捷径走多了，人就废了。”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，一旦对项目不是100%的熟悉，那么搞不好在调试的过程中，不知不觉给生产环境产生了垃圾数据，可能进一步导致埋下了新的隐患。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，我们可以建议他们，遇到问题先思考，用你的专业知识和业务经验进行逻辑分析，如此，也能提炼出一些普适性的规律避免自己后续再犯相同的错误。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/09  不做自测/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;前面提到过有些伙计写代码很快，其实他们之中的大部分也不会做自测，毕竟这会降低他们的开发速度。而且，在他们心里可能觉得测试嘛，不是应该测试工程师干的么，我都自测过一遍的话，不是抢他们饭碗么。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当然，如果有些公司有明确的工作要求需要自测，他们也会做，但不是去尽量模仿真实的数据，而是用很随意的数据来测试，效果其实是很差的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;自测的好处有很多，最直接的就是可以降低修复bug总时间，毕竟，开发和测试之间沟通bug的时间肯定就节省掉了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，我们可以建议他们做自测，因为这不但可以让整个项目的工期得以更快完成，也能让自己和其他人摆脱加班、摆脱996，不香么。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/10  不主动推进项目进度/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;资深的程序员身上会有那种领袖气质，这种领袖气质并不是凭空出现的，而是需要有主动推进一件事往前发展的意愿。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而那些有资历却缺乏经验的程序员们则完全相反，只着眼于自己的一亩三分地，其它的都与我无关。如此一来他们也错失了快速扩大自己能力圈的机会。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从资历的这个角度上来说，作为团队里懂得最多的人，是推动项目往前的最佳人选。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，我们可以建议他们多给出自己积累多年的经验，因为“你是专家”。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;怎么样？是不是很多现象都很熟悉？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实还有很多其它的现象，只是上面这些是比较常见的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实我们不是在吐槽他们，而是希望他们能够发挥自己真正的价值，这不仅仅是为了整个团队创造更好的工作环境，也是为了避免他们迷失在走向中年危机的道路上。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;希望大家能够多多转发，能叫醒一个算一个，帮助他人，也是帮助自己，不香么。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐阅读：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;原创不易，如果你觉得这篇文章还不错，就「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;点赞&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;」或者「&lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;」一下吧，鼓励我的创作 ：）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也可以分享我的公众号名片给有需要的朋友们。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU2NzEwMDc4OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/oB5bd6W6hI1ENbrFbGjEucl1Az92hEuwmUSdaNXxibiaWuO9sLTPHokw00p8ZxAYdIJJJ7FXj77Ts0YoV5KwEKCA/0?wx_fmt=png&quot; data-nickname=&quot;跨界架构师&quot; data-alias=&quot;Zachary_ZF&quot; data-signature=&quot;坚持原创。专注大型互联网技术，涉猎产品、运营。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果你有关于软件架构、分布式系统、产品、运营的困惑&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以试试点击「&lt;strong&gt;阅读原文&lt;/strong&gt;」&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1a18859c482f161a3f9efd84d2213d2c</guid>
<title>面试官：能绕过单例模式得到多个不同实例吗？</title>
<link>https://toutiao.io/k/npdbuga</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;猴哥有次被面试到这个问题，听到这个问题，有点懵，既然设计成单例模式，就是不想让随意实例化了，!不是闲啊，面试官非要这么搞，咱只能满足啊！思考了下，得到对象的实例，一般就是new ，再者就是反射了，但是单例对象一般都经过私有化了，new 肯定是走不通了，如果通过反射改变私有构造方法的访问权限，应该就可以拿到对象实例了，原来JDK反射提供了此方法，通过设置 setAccessible(true)，即可获取单例对象。&lt;/p&gt;&lt;h2&gt;通过反射破坏单例&lt;/h2&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;/span&gt;&lt;span&gt;.monkeyjava&lt;/span&gt;&lt;span&gt;.learn&lt;/span&gt;&lt;span&gt;.basic&lt;/span&gt;&lt;span&gt;.design&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;/span&gt;&lt;span&gt;.lang&lt;/span&gt;&lt;span&gt;.reflect&lt;/span&gt;&lt;span&gt;.Constructor&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;/span&gt;&lt;span&gt;.lang&lt;/span&gt;&lt;span&gt;.reflect&lt;/span&gt;&lt;span&gt;.InvocationTargetException&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;/**&lt;br/&gt; * @author monkeyjava&lt;br/&gt; * @description&lt;br/&gt; * @date &lt;span&gt;2021&lt;/span&gt;/&lt;span&gt;09&lt;/span&gt;/&lt;span&gt;23&lt;/span&gt;&lt;br/&gt; */&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Singleton&lt;/span&gt; {&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Singleton SINGLETON = &lt;span&gt;new&lt;/span&gt; Singleton();&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;Singleton&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Singleton &lt;span&gt;getInstance&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SINGLETON;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; NoSuchMethodException, IllegalAccessException, InvocationTargetException,&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;InstantiationException&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;Singleton&lt;/span&gt; s1 = Singleton.getInstance();&lt;br/&gt;&lt;br/&gt;        Constructor&amp;lt;Singleton&amp;gt; constructor = Singleton.&lt;span&gt;class&lt;/span&gt;.getDeclaredConstructor();&lt;br/&gt;        constructor.setAccessible(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        Singleton s2 = &lt;span&gt;constructor&lt;/span&gt;.newInstance();&lt;br/&gt;&lt;br/&gt;        System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;单例对象&quot;&lt;/span&gt; + s1);&lt;br/&gt;        System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;反射获取单例对象&quot;&lt;/span&gt;+ s2);&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;输出结果:&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;单例对象&lt;span&gt;com&lt;/span&gt;&lt;span&gt;.monkeyjava&lt;/span&gt;&lt;span&gt;.learn&lt;/span&gt;&lt;span&gt;.basic&lt;/span&gt;&lt;span&gt;.design&lt;/span&gt;&lt;span&gt;.Singleton&lt;/span&gt;@&lt;span&gt;610455d6&lt;/span&gt;&lt;br/&gt;反射获取单例对象&lt;span&gt;com&lt;/span&gt;&lt;span&gt;.monkeyjava&lt;/span&gt;&lt;span&gt;.learn&lt;/span&gt;&lt;span&gt;.basic&lt;/span&gt;&lt;span&gt;.design&lt;/span&gt;&lt;span&gt;.Singleton&lt;/span&gt;@&lt;span&gt;511d50c0&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;输出结果显示这两个不是同一个对象，单例模式失去了应有的意义，被破坏了。&lt;/p&gt;&lt;h2&gt;实例化计数防止破坏&lt;/h2&gt;&lt;p&gt;既然可以反射得到单例，有什么办法可以防止吗？如果对构造方法加一个计数器，超过2个对象实例化，抛一个异常是否能解决呢？&lt;/p&gt;&lt;p&gt;代码如下&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;/span&gt;&lt;span&gt;.monkeyjava&lt;/span&gt;&lt;span&gt;.learn&lt;/span&gt;&lt;span&gt;.basic&lt;/span&gt;&lt;span&gt;.design&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;/span&gt;&lt;span&gt;.lang&lt;/span&gt;&lt;span&gt;.reflect&lt;/span&gt;&lt;span&gt;.Constructor&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;/span&gt;&lt;span&gt;.lang&lt;/span&gt;&lt;span&gt;.reflect&lt;/span&gt;&lt;span&gt;.InvocationTargetException&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;/**&lt;br/&gt; * @author monkeyjava&lt;br/&gt; * @description&lt;br/&gt; * @date &lt;span&gt;2021&lt;/span&gt;/&lt;span&gt;09&lt;/span&gt;/&lt;span&gt;23&lt;/span&gt;&lt;br/&gt; */&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Singleton&lt;/span&gt; {&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Singleton SINGLETON = &lt;span&gt;new&lt;/span&gt; Singleton();&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; count;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;Singleton&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        synchronized (Singleton.&lt;span&gt;class&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (count &amp;gt; 0) {&lt;br/&gt;                &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(&lt;span&gt;&quot;error:创建了两个实例!&quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;            ++count;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Singleton &lt;span&gt;getInstance&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SINGLETON;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; NoSuchMethodException, IllegalAccessException, InvocationTargetException,&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;InstantiationException&lt;/span&gt; {&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;Singleton&lt;/span&gt; s1 = Singleton.getInstance();&lt;br/&gt;&lt;br/&gt;        Constructor&amp;lt;Singleton&amp;gt; constructor = Singleton.&lt;span&gt;class&lt;/span&gt;.getDeclaredConstructor();&lt;br/&gt;        constructor.setAccessible(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        Singleton s2 = &lt;span&gt;constructor&lt;/span&gt;.newInstance();&lt;br/&gt;&lt;br/&gt;        System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;单例对象&quot;&lt;/span&gt; + s1);&lt;br/&gt;        System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;反射获取单例对象&quot;&lt;/span&gt;+ s2);&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;加了一个count 计数，并且加了同步锁，首次初始化时count为，并且count++ , count=1，下次初始化时count&amp;gt;0 满足条件，直接触发RuntimeException。运行上面的方法，直接抛出异常.&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5260869565217391&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ExViakhaSiafFbVHUCibohbLJMXYKTvlQqqCs7bD9Z7lDMDyx2cctkhiakvJ0iahib4hRl0gQKMeYicvTrOIicwlNCws1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2760&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;别急，老哥！反射既然可以修改方法属性，也可以修改变量值啊，通过反射初始化后，再将count 对象值设置为0，一样不也可以初始化吗？防不胜防啊！！代码如下。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;/span&gt;&lt;span&gt;.monkeyjava&lt;/span&gt;&lt;span&gt;.learn&lt;/span&gt;&lt;span&gt;.basic&lt;/span&gt;&lt;span&gt;.design&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;/span&gt;&lt;span&gt;.lang&lt;/span&gt;&lt;span&gt;.reflect&lt;/span&gt;&lt;span&gt;.Constructor&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;/span&gt;&lt;span&gt;.lang&lt;/span&gt;&lt;span&gt;.reflect&lt;/span&gt;&lt;span&gt;.Field&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;/span&gt;&lt;span&gt;.lang&lt;/span&gt;&lt;span&gt;.reflect&lt;/span&gt;&lt;span&gt;.InvocationTargetException&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;/**&lt;br/&gt; * @author monkeyjava&lt;br/&gt; * @description&lt;br/&gt; * @date &lt;span&gt;2021&lt;/span&gt;/&lt;span&gt;09&lt;/span&gt;/&lt;span&gt;23&lt;/span&gt;&lt;br/&gt; */&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Singleton&lt;/span&gt; {&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Singleton SINGLETON = &lt;span&gt;new&lt;/span&gt; Singleton();&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; count;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;Singleton&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        synchronized (Singleton.&lt;span&gt;class&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (count &amp;gt; 0) {&lt;br/&gt;                &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(&lt;span&gt;&quot;error:创建了两个实例!&quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;            ++count;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Singleton &lt;span&gt;getInstance&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SINGLETON;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; NoSuchMethodException, IllegalAccessException, InvocationTargetException,&lt;/span&gt;&lt;br/&gt;            InstantiationException, NoSuchFieldException {&lt;br/&gt;        &lt;span&gt;// 反射获取count变量&lt;/span&gt;&lt;br/&gt;        Field countField = Singleton.&lt;span&gt;class&lt;/span&gt;.getDeclaredField(&lt;span&gt;&quot;count&quot;&lt;/span&gt;);&lt;br/&gt;        countField.setAccessible(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;Singleton&lt;/span&gt; s1 = Singleton.getInstance();&lt;br/&gt;        &lt;span&gt;// 实例化对象后，再将count 设置为0&lt;/span&gt;&lt;br/&gt;        countField.&lt;span&gt;set&lt;/span&gt;(s1, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 反射初始化时count 是0，所以可以正常初始化&lt;/span&gt;&lt;br/&gt;        Constructor&amp;lt;Singleton&amp;gt; constructor = Singleton.&lt;span&gt;class&lt;/span&gt;.getDeclaredConstructor();&lt;br/&gt;        constructor.setAccessible(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        Singleton s2 = &lt;span&gt;constructor&lt;/span&gt;.newInstance();&lt;br/&gt;&lt;br/&gt;        System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;单例对象&quot;&lt;/span&gt; + s1);&lt;br/&gt;        System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;反射获取单例对象&quot;&lt;/span&gt;+ s2);&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;运行结果&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;单例对象&lt;span&gt;com&lt;/span&gt;&lt;span&gt;.monkeyjava&lt;/span&gt;&lt;span&gt;.learn&lt;/span&gt;&lt;span&gt;.basic&lt;/span&gt;&lt;span&gt;.design&lt;/span&gt;&lt;span&gt;.Singleton&lt;/span&gt;@&lt;span&gt;511d50c0&lt;/span&gt;&lt;br/&gt;反射获取单例对象&lt;span&gt;com&lt;/span&gt;&lt;span&gt;.monkeyjava&lt;/span&gt;&lt;span&gt;.learn&lt;/span&gt;&lt;span&gt;.basic&lt;/span&gt;&lt;span&gt;.design&lt;/span&gt;&lt;span&gt;.Singleton&lt;/span&gt;@&lt;span&gt;60e53b93&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;此刻是不是感觉反射很讨厌，看来反射是解决不了单例破坏问题啊。&lt;/p&gt;&lt;h2&gt;通过序列化破坏&lt;/h2&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;/span&gt;&lt;span&gt;.monkeyjava&lt;/span&gt;&lt;span&gt;.learn&lt;/span&gt;&lt;span&gt;.basic&lt;/span&gt;&lt;span&gt;.design&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java.io.*&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;/**&lt;br/&gt; * 通过使用序列化的方式失效&lt;br/&gt; * @author monkeyjava&lt;br/&gt; * @description&lt;br/&gt; * @date &lt;span&gt;2021&lt;/span&gt;/&lt;span&gt;09&lt;/span&gt;/&lt;span&gt;23&lt;/span&gt;&lt;br/&gt; */&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Singleton2&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Serializable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Singleton2 SINGLETON = &lt;span&gt;new&lt;/span&gt; Singleton2();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;Singleton2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Singleton2 &lt;span&gt;getInstance&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SINGLETON;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException, ClassNotFoundException &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;Singleton2&lt;/span&gt; s = Singleton2.getInstance();&lt;br/&gt;&lt;br/&gt;        FileOutputStream fos = &lt;span&gt;new&lt;/span&gt; FileOutputStream(&lt;span&gt;&quot;Singleton2.obj&quot;&lt;/span&gt;);&lt;br/&gt;        ObjectOutputStream oos = &lt;span&gt;new&lt;/span&gt; ObjectOutputStream(fos);&lt;br/&gt;        &lt;span&gt;oos&lt;/span&gt;&lt;span&gt;.writeObject&lt;/span&gt;(&lt;span&gt;s&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;oos&lt;/span&gt;&lt;span&gt;.flush&lt;/span&gt;();&lt;br/&gt;        &lt;span&gt;oos&lt;/span&gt;&lt;span&gt;.close&lt;/span&gt;();&lt;br/&gt;&lt;br/&gt;        FileInputStream fis = &lt;span&gt;new&lt;/span&gt; FileInputStream(&lt;span&gt;&quot;Singleton2.obj&quot;&lt;/span&gt;);&lt;br/&gt;        ObjectInputStream ois = &lt;span&gt;new&lt;/span&gt; ObjectInputStream(fis);&lt;br/&gt;        &lt;span&gt;Singleton2&lt;/span&gt;  s1 = (Singleton2)ois.readObject();&lt;br/&gt;        System.&lt;span&gt;out&lt;/span&gt;.println(s==s1);&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;输出结果: false ， 证明序列化后的对象已不是先前的对象，出现了2个实例，违法了单例原则。有什么方法解决吗？&lt;/p&gt;&lt;h2&gt;增加readResolve方法被防止序列化破坏&lt;/h2&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;/span&gt;&lt;span&gt;.monkeyjava&lt;/span&gt;&lt;span&gt;.learn&lt;/span&gt;&lt;span&gt;.basic&lt;/span&gt;&lt;span&gt;.design&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java.io.*&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;/**&lt;br/&gt; * 通过使用序列化的方式失效&lt;br/&gt; * @author monkeyjava&lt;br/&gt; * @description&lt;br/&gt; * @date &lt;span&gt;2021&lt;/span&gt;/&lt;span&gt;09&lt;/span&gt;/&lt;span&gt;23&lt;/span&gt;&lt;br/&gt; */&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Singleton2&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Serializable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Singleton2 SINGLETON = &lt;span&gt;new&lt;/span&gt; Singleton2();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;Singleton2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Singleton2 &lt;span&gt;getInstance&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SINGLETON;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; Object &lt;span&gt;readResolve&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SINGLETON;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException, ClassNotFoundException &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;Singleton2&lt;/span&gt; s = Singleton2.getInstance();&lt;br/&gt;&lt;br/&gt;        FileOutputStream fos = &lt;span&gt;new&lt;/span&gt; FileOutputStream(&lt;span&gt;&quot;Singleton2.obj&quot;&lt;/span&gt;);&lt;br/&gt;        ObjectOutputStream oos = &lt;span&gt;new&lt;/span&gt; ObjectOutputStream(fos);&lt;br/&gt;        &lt;span&gt;oos&lt;/span&gt;&lt;span&gt;.writeObject&lt;/span&gt;(&lt;span&gt;s&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;oos&lt;/span&gt;&lt;span&gt;.flush&lt;/span&gt;();&lt;br/&gt;        &lt;span&gt;oos&lt;/span&gt;&lt;span&gt;.close&lt;/span&gt;();&lt;br/&gt;&lt;br/&gt;        FileInputStream fis = &lt;span&gt;new&lt;/span&gt; FileInputStream(&lt;span&gt;&quot;Singleton2.obj&quot;&lt;/span&gt;);&lt;br/&gt;        ObjectInputStream ois = &lt;span&gt;new&lt;/span&gt; ObjectInputStream(fis);&lt;br/&gt;        &lt;span&gt;Singleton2&lt;/span&gt;  s1 = (Singleton2)ois.readObject();&lt;br/&gt;&lt;br/&gt;        System.&lt;span&gt;out&lt;/span&gt;.println(s==s1);&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;输出结果: true&lt;/p&gt;&lt;h2&gt;防止单例破坏的正确姿势&lt;/h2&gt;&lt;p&gt;总结，实现单例模式的唯一推荐方法，使用枚举类来实现。使用枚举类实现单例模式，在对枚举类进行序列化时，还不需要添加readRsolve方法就可以避免单例模式被破坏。序列化获取到的都是同一个对象，感兴趣同学可以验证下，并且无法通过反射获取实例。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;com&lt;/span&gt;&lt;span&gt;.monkeyjava&lt;/span&gt;&lt;span&gt;.learn&lt;/span&gt;&lt;span&gt;.basic&lt;/span&gt;&lt;span&gt;.design&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; EnumSingleton {&lt;br/&gt;    I&lt;span&gt;NSTANCE&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;   &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sayHellow&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;       System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;枚举反单例测试&quot;&lt;/span&gt;);&lt;br/&gt;   }&lt;br/&gt;&lt;br/&gt;   &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;       &lt;span&gt;EnumSingleton&lt;/span&gt;&lt;span&gt;.INSTANCE&lt;/span&gt;&lt;span&gt;.sayHellow&lt;/span&gt;();&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ExViakhaSiafHS4oJfTtQW4e4eHxFOlfDE12R9g6TibicKicgrfR297DlW7VYXILBgxx2eKicXERsRaiazeZMyFRJz2YA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;344&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注 &quot;猴哥说Java&quot; 获取更多干货，海量电子书等你拿 &lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>28bfecf3c36de3c2fed317deb84dd36f</guid>
<title>[译] 基于角色的访问控制 (RBAC)：演进历史、设计理念及简洁实现 (Tailscale, 2021)</title>
<link>https://toutiao.io/k/uopf4gs</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post&quot;&gt;
  
  &lt;h1 class=&quot;postTitle&quot;&gt;[译] 基于角色的访问控制（RBAC）：演进历史、设计理念及简洁实现（Tailscale, 2021）&lt;/h1&gt;
  &lt;p class=&quot;meta&quot;&gt;Published at 2021-09-14 | Last Update 2021-09-14&lt;/p&gt;

  
  
  &lt;h3 id=&quot;译者序&quot;&gt;译者序&lt;/h3&gt;

&lt;p&gt;本文翻译自 2021 年的一篇英文博客：
&lt;a href=&quot;https://tailscale.com/blog/rbac-like-it-was-meant-to-be/&quot;&gt;RBAC like it was meant to be&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;很多系统（例如 &lt;strong&gt;&lt;mark&gt;Kubernetes&lt;/mark&gt;&lt;/strong&gt;、AWS）都在使用某种形式的 RBAC 做权限/访问控制。&lt;/p&gt;

&lt;p&gt;本文基于 access control 的发展历史，从设计层面分析了
&lt;strong&gt;&lt;mark&gt;&lt;code&gt;DAC -&amp;gt; MAC -&amp;gt; RBAC -&amp;gt; ABAC&lt;/code&gt;&lt;/mark&gt;&lt;/strong&gt;的演进历程及各模型的优缺点、适用场景等，
然后从实际需求出发，一步步地设计出一个实用、简洁、真正符合 RBAC 理念的访问控制系统。&lt;/p&gt;

&lt;p&gt;作为对比，如果想看看表达能力更强（但也更复杂）的 RBAC/ABAC 系统是什么样子，可以研究一下
&lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html&quot;&gt;AWS 的访问控制模型&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以下是译文。&lt;/p&gt;

&lt;hr/&gt;



&lt;hr/&gt;

&lt;p&gt;大部分人都听说过&lt;strong&gt;基于角色的访问控制&lt;/strong&gt;（role-based access control, RBAC）以及它
的后继演进版&lt;strong&gt;基于属性的访问控制&lt;/strong&gt;（attribute-based access control, ABAC），
但我们经常&lt;strong&gt;&lt;mark&gt;遗忘或不懂得欣赏其中的伟大思想&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;大部分如今&lt;strong&gt;&lt;mark&gt;常见的 RBAC 系统都经过了某种程度的简化&lt;/mark&gt;&lt;/strong&gt;，因此比最初的设计要弱一些。
而本文想要说明，只要&lt;strong&gt;&lt;mark&gt;回到 RBAC 最初的设计&lt;/mark&gt;&lt;/strong&gt;，我们就能构建一个
&lt;a href=&quot;https://tailscale.com/kb/1018/acls/&quot;&gt;真正的 RBAC/ABAC 安全模型&lt;/a&gt;
，它比你能见到的那些系统更&lt;strong&gt;&lt;mark&gt;简单而强大&lt;/mark&gt;&lt;/strong&gt;，而且不管网络规模大还是小，它都能适用。&lt;/p&gt;

&lt;p&gt;客户经常跟我们反馈说，他们如何震惊于如下事实：在 Tailscale 平台上，
&lt;strong&gt;&lt;mark&gt;只用如此少的规则就能表达他们的安全策略&lt;/mark&gt;&lt;/strong&gt;。这并非偶然！
但在解释为什么之前，我们先来回顾一些历史。&lt;/p&gt;

&lt;h1 id=&quot;1-从-dac-到-mac&quot;&gt;1 从 DAC 到 MAC&lt;/h1&gt;

&lt;p&gt;RBAC/ABAC 的概念和术语都源自几十年前的&lt;strong&gt;&lt;mark&gt;美国军方&lt;/mark&gt;&lt;/strong&gt;。
&lt;a href=&quot;https://www.researchgate.net/publication/24164143_Role-Based_Access_Controls&quot;&gt;Role-Based Access Controls (Ferraiolo and Kuhn, 1992)&lt;/a&gt;
是一篇很好的介绍。下面来看一下它们的一些演进过程。&lt;/p&gt;

&lt;h2 id=&quot;11-dac自主访问控制各文件-owner-自主设置文件权限&quot;&gt;1.1 DAC（自主访问控制）：各文件 owner 自主设置文件权限&lt;/h2&gt;

&lt;p&gt;最早出现的是 DAC（Discretionary Access Control），直到&lt;strong&gt;&lt;mark&gt;今天仍然很常见&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;设计&quot;&gt;设计&lt;/h3&gt;

&lt;p&gt;如下图所示，在 DAC 中 &lt;strong&gt;&lt;mark&gt;object owner&lt;/mark&gt;&lt;/strong&gt; 有权&lt;strong&gt;&lt;mark&gt;设置该 object 的访问权限&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/rbac-as-it-meant-to-be/RBAC_01.png&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; DAC：通过授予 individuals/groups 以 read/write/execute 权限，
object (file) 的创建者能完全控制该 object 的内容和权限。&lt;/p&gt;

&lt;p&gt;例如，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;在 Unix 系统中，设置 file permission&lt;/mark&gt;&lt;/strong&gt;（“模式”，这也是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod&lt;/code&gt; change mode 的来历）
  就能授予别人 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;读/写/执行&lt;/code&gt; 这个文件的权限。&lt;/li&gt;
  &lt;li&gt;在 Google Doc 中，点击 share 按钮能授予权限。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;使用场景普通用户的文件权限控制&quot;&gt;使用场景：普通用户的文件权限控制&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;军方&lt;/mark&gt;&lt;/strong&gt;不怎么喜欢 DAC，因为这种方式中，&lt;strong&gt;&lt;mark&gt;合规性很难保证，机密文件很容易被恶意 reshare 出去&lt;/mark&gt;&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;但在&lt;strong&gt;&lt;mark&gt;普通用户&lt;/mark&gt;&lt;/strong&gt;场景中，这种方式还是很常用也很合理的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;12-mac强制访问控制强制由专门的-admin-设置文件权限&quot;&gt;1.2 MAC（强制访问控制）：（强制由）专门的 admin 设置文件权限&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：不要把 MAC (mandatory access control) 与网络术语 “MAC address” 中的 MAC
(media access address) 搞混了，二者没有任何关系，只是碰巧缩写相同。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;设计dac-基础上引入专门的-admin-角色&quot;&gt;设计：DAC 基础上引入专门的 admin 角色&lt;/h3&gt;

&lt;p&gt;MAC (Mandatory access control) &lt;strong&gt;&lt;mark&gt;对 DAC 做了增强&lt;/mark&gt;&lt;/strong&gt;。如下图所示，
由 &lt;strong&gt;&lt;mark&gt;administrator&lt;/mark&gt;&lt;/strong&gt;（管理员）或 &lt;strong&gt;&lt;mark&gt;administrative rule&lt;/mark&gt;&lt;/strong&gt;（管理员级别的规则）
来&lt;strong&gt;&lt;mark&gt;定义 rules&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/rbac-as-it-meant-to-be/RBAC_02.png&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; MAC：文件 owner 只能设置一个文件 type，这个 type 包含了哪些&lt;mark&gt;权限是由 admin 或 policy 设置的&lt;/mark&gt;。
用户能编辑文件内容，但无法修改文件权限。&lt;/p&gt;

&lt;p&gt;因此在 MAC 模型中，&lt;strong&gt;&lt;mark&gt;一个人做某些事情的
能力是无法再分享给其他人&lt;/mark&gt;&lt;/strong&gt;的，从而避免了文件被 reshare 的问题。&lt;/p&gt;

&lt;h3 id=&quot;例子tcpudp-端口号&quot;&gt;例子：TCP/UDP 端口号&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;mark&gt;MAC 很难解释&lt;/mark&gt;&lt;/strong&gt;，因为在实际中很少看到它，甚至看到了之后，你都不觉得它是“访问控制”。&lt;/p&gt;

&lt;p&gt;Wikipedia 给了一个很好的例子：TCP 或 UDP 端口号。当你占用了一个 local port 之后（假设没设置
&lt;a href=&quot;https://man7.org/linux/man-pages/man7/socket.7.html&quot;&gt;SO_REUSEADDR&lt;/a&gt;），
这台机器上的其他任何人就都无法再用这个端口号了 —— 不管他们是什么级别的特权用户。
这里，&lt;strong&gt;&lt;mark&gt;端口范围不可重叠这一条件，就是强制性的&lt;/mark&gt;&lt;/strong&gt;（mandatory）。&lt;/p&gt;

&lt;h3 id=&quot;适用场景文档系统访问控制&quot;&gt;适用场景：文档/系统访问控制&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://apenwarr.ca/log/20101213&quot;&gt;之前关于 file locking&lt;/a&gt; 的文章中，我讨论了
advisory locks 和 mandatory locks 之间的区别：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;advisory lock：&lt;strong&gt;&lt;mark&gt;其他 apps 可以安全地读&lt;/mark&gt;&lt;/strong&gt;这个文件；&lt;/li&gt;
  &lt;li&gt;mandatory lock：按照规则，其他&lt;strong&gt;&lt;mark&gt;不允许 apps 读任何内容&lt;/mark&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看出，MAC 适用于对&lt;strong&gt;&lt;mark&gt;文档或系统的访问控制&lt;/mark&gt;&lt;/strong&gt;，这就不难理解为什么
军方对 MAC —— 至少在理论上 —— 如此兴奋了。理想场景：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个带锁的房间，门口有警卫站岗，&lt;/li&gt;
  &lt;li&gt;出示门禁卡能进入这个房间，&lt;/li&gt;
  &lt;li&gt;但警卫&lt;strong&gt;&lt;mark&gt;禁止携带相机进入房间&lt;/mark&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这种场景下，你自己有权限查看房间内的文档，但无法将其分享给其他人。&lt;/p&gt;

&lt;p&gt;这个例子给我们的一个启示是：&lt;strong&gt;&lt;mark&gt;数字系统中，MAC 在理论要比在实际中简单&lt;/mark&gt;&lt;/strong&gt;
（easier in theory than in practice）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个功能完整的（full-on）MAC 系统是很难真正实现的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;Digital restrictions management&lt;/mark&gt;&lt;/strong&gt; (DRM，数字限制管理) 是 MAC 的
一种，在这种模型中，文件的&lt;strong&gt;&lt;mark&gt;接收方无法再将文件分享给别人&lt;/mark&gt;&lt;/strong&gt; —— 每个
BitTorrent 用户都能体会到这种方式是如何奏效的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;13-mac-之双因素登录two-factor-login-as-mac&quot;&gt;1.3 MAC 之双因素登录（two-factor login as MAC）&lt;/h2&gt;

&lt;p&gt;大家可能没意识到，另一种 MAC 是 multi-factor authentication (&lt;strong&gt;&lt;mark&gt;MFA or 2FA&lt;/mark&gt;&lt;/strong&gt;):&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/rbac-as-it-meant-to-be/RBAC_03.png&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; 2FA as MAC：密码可以共享，但硬件 token 不能。&lt;mark&gt;密码是 DAC，而硬件 token 是 MAC&lt;/mark&gt;。&lt;/p&gt;

&lt;p&gt;用 MFA 能允许特定的人登录一台计算机或服务，如果这个人不是管理员（admin），那他
自己能登录，但将无法进一步将计算机共享给其他人，将密码告诉他们也不行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;mark&gt;这种 login 是强制性的&lt;/mark&gt;&lt;/strong&gt;（mandatory，单有密码不行，还必须有硬件 token 才能登录）。
在这个模型中，假设了第二因素（the second factor，即硬件 token）是不可分享的。&lt;/p&gt;

&lt;h2 id=&quot;14-图片分享dacmac-模型比较&quot;&gt;1.4 图片分享：DAC/MAC 模型比较&lt;/h2&gt;

&lt;p&gt;另一个例子是分享图片。&lt;/p&gt;



&lt;blockquote&gt;
  &lt;p&gt;当然，如果一个人能下载这个文件，然后发送副本给别人，那结果还是泄露了这个文件
。这也是为什么一些人认为 secret URL 的安全性在数学上与 MAC 是等价的，因为现在
分享 URL 已经和分享文件一样难了。但二者有一个区别：
你可以关闭一个 URL 的共享，但无法追回一个已经发送出去的文件副本。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;15-mac-概念限制太多又好像没什么限制&quot;&gt;1.5 MAC 概念：限制太多，又好像没什么限制&lt;/h2&gt;

&lt;p&gt;历史上，军方中的 MAC 是围绕
&lt;a href=&quot;https://en.wikipedia.org/wiki/Multilevel_security&quot;&gt;multi-level security&lt;/a&gt;
构建的，这里的&lt;strong&gt;&lt;mark&gt;设计思想&lt;/mark&gt;&lt;/strong&gt;是：
&lt;strong&gt;&lt;mark&gt;并非只有 admin 和 non-admin 两种用户，实际上有很多层的访问&lt;/mark&gt;&lt;/strong&gt;。
他们最初将其设想为同心圆（“最高机密许可”、“机密许可” 等等），但最后证明
表达力太弱（too unexpressive）。&lt;/p&gt;

&lt;p&gt;如今的访问控制更像是&lt;strong&gt;&lt;mark&gt;独立的 flags 或 subgroups&lt;/mark&gt;&lt;/strong&gt;。例如，
&lt;a href=&quot;https://en.wikipedia.org/wiki/Security-Enhanced_Linux&quot;&gt;SELinux&lt;/a&gt;
提供了对&lt;strong&gt;&lt;mark&gt;每个进程内的每个权限&lt;/mark&gt;&lt;/strong&gt;的细粒度控制，而传统 Unix/Linux
上只有 root 和常规用户权限的区分。但最终证明 SELinux 这套东西是&lt;strong&gt;&lt;mark&gt;噩梦般的复杂&lt;/mark&gt;&lt;/strong&gt;，
难以真正实用 —— 除非你在 &lt;strong&gt;&lt;mark&gt;NSA&lt;/mark&gt;&lt;/strong&gt;（发明 SELinux 的机构）工作，但即使
你在 NSA 也不一定会用。&lt;/p&gt;

&lt;p&gt;最终来说，MAC 的概念证明是&lt;strong&gt;&lt;mark&gt;过于限制又过于模糊&lt;/mark&gt;&lt;/strong&gt;（both too restrictive and too vague）。
当人们谈论 MAC 时，我们很难搞清楚他们到底指的是什么，唯一知道是：这东西
&lt;strong&gt;&lt;mark&gt;用起来非常让人抓狂&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&quot;2-第一次尝试基于-rbacabac&quot;&gt;2 第一次尝试：基于 RBAC/ABAC&lt;/h1&gt;

&lt;h2 id=&quot;21-rbac基于角色的访问控制&quot;&gt;2.1 RBAC（基于角色的访问控制）&lt;/h2&gt;

&lt;p&gt;RBAC 是 &lt;strong&gt;&lt;mark&gt;MAC 的一个子集&lt;/mark&gt;&lt;/strong&gt;，它是一种特殊类型的 MAC，更加具体，因此
在讨论及使用上会更加方便。&lt;/p&gt;

&lt;p&gt;RBAC &lt;strong&gt;&lt;mark&gt;与常见的 users/groups 模型类似&lt;/mark&gt;&lt;/strong&gt;。在 RBAC 中，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;admin&lt;/mark&gt;&lt;/strong&gt; 将某些 user 放到一个 group，然后&lt;/li&gt;
  &lt;li&gt;可以指定将&lt;strong&gt;&lt;mark&gt;某些资源&lt;/mark&gt;&lt;/strong&gt;（文件、计算机等）共享给&lt;strong&gt;&lt;mark&gt;某个 group（role）&lt;/mark&gt;&lt;/strong&gt;；&lt;/li&gt;
  &lt;li&gt;系统确保只有指定的 role 能访问指定的资源；&lt;/li&gt;
  &lt;li&gt;文件的接收方没有 reshare 权限 —— 除非拷贝一份，否则是无法 reshare 的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;22-abac基于属性的访问控制&quot;&gt;2.2 ABAC（基于属性的访问控制）&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.researchgate.net/publication/273393378_Attribute-Based_Access_Control&quot;&gt;Attribute-based access control (Hu, Kuhn, Ferraiolo, 2015)&lt;/a&gt; 是&lt;strong&gt;&lt;mark&gt;对 RBAC 的改进，加了一些细节&lt;/mark&gt;&lt;/strong&gt;（属性，Attributes）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;属性&lt;/mark&gt;&lt;/strong&gt;可以是位置、客户端设备平台、认证类型、用户的 http cookies 等。&lt;/li&gt;
  &lt;li&gt;当系统判断是否授予某个用户对某资源的访问权限时，ABAC 系统
&lt;strong&gt;&lt;mark&gt;除了检查他们的 RBAC role（group）&lt;/mark&gt;&lt;/strong&gt;，还会检查&lt;strong&gt;&lt;mark&gt;这个人携带的各种属性&lt;/mark&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你遇到过下面这种情况 —— 登录某个服务时弹出额外的&lt;strong&gt;&lt;mark&gt;图片识别认证&lt;/mark&gt;&lt;/strong&gt;
&lt;a href=&quot;https://www.google.com/recaptcha/about/&quot;&gt;reCAPTCHA&lt;/a&gt;，
而你旁边的朋友登录时却不用 —— 就&lt;strong&gt;&lt;mark&gt;说明你遇到了 ABAC&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;mark&gt;ABAC 很有用&lt;/mark&gt;&lt;/strong&gt;，因为这些额外的属性能给我们带来很多有用信息，尤其
是对于那些连接到互联网的、攻击矢量特别多的系统。但在概念上，ABAC 与 RBAC 类似，只是稍微向前演进了一点。
&lt;strong&gt;&lt;mark&gt;属性的解析和认证&lt;/mark&gt;&lt;/strong&gt;工作是&lt;strong&gt;&lt;mark&gt;中心式的&lt;/mark&gt;&lt;/strong&gt;，大部分都实现
在各家的 &lt;strong&gt;&lt;mark&gt;identity provider&lt;/mark&gt;&lt;/strong&gt; 中。有鉴于此，接下来我们的讨论重点扔将放在 RBAC。&lt;/p&gt;

&lt;h2 id=&quot;23-也许你从未用过真正的-rbac&quot;&gt;2.3 也许你从未用过真正的 RBAC&lt;/h2&gt;

&lt;p&gt;RBAC 与前面提到的 users/groups 模型类似。接下来看一个具体的文件系统安全模型，例如 Windows。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里也可以拿 Unix 作为例子，但经典 Unix 文件安全与常见的安全模型不同，
它只支持单个 owner、单个 group，以及 self/group/other 文件模式。
如今 Linux 也支持 &lt;a href=&quot;https://www.usenix.org/legacy/publications/library/proceedings/usenix03/tech/freenix03/full_papers/gruenbacher/gruenbacher_html/main.html&quot;&gt;facls&lt;/a&gt;，
这算是 RBAC，但&lt;strong&gt;&lt;mark&gt;没人知道怎么用&lt;/mark&gt;&lt;/strong&gt;，因此这个也不算数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;windows-文件安全模型每个文件一个-acl&quot;&gt;Windows 文件安全模型：每个文件一个 ACL&lt;/h3&gt;

&lt;p&gt;在 Windows 中，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;每个文件&lt;/mark&gt;&lt;/strong&gt;（或目录）都有一个 &lt;strong&gt;&lt;mark&gt;users 和 groups 列表&lt;/mark&gt;&lt;/strong&gt;，以及&lt;/li&gt;
  &lt;li&gt;每个&lt;strong&gt;&lt;mark&gt;列表中的成员可以对这个文件做什么操作&lt;/mark&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是一种访问控制列表（access control list，ACL）。&lt;strong&gt;&lt;mark&gt;owner 设置 ACL，操作系
统执行 ACL。这是 MAC，对吧？&lt;/mark&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对的 —— 大部分情况下。想一下，任何有文件读权限的人，都可以拷贝一份，然后在副本上
设置权限，因此这是&lt;strong&gt;&lt;mark&gt;某种形式的 DAC&lt;/mark&gt;&lt;/strong&gt;，或者说在执行上充满漏洞的 MAC。
但&lt;strong&gt;&lt;mark&gt;在真实文件上&lt;/mark&gt;&lt;/strong&gt;（而非 API 上）&lt;strong&gt;&lt;mark&gt;执行 MAC 非常难&lt;/mark&gt;&lt;/strong&gt;。
我们将这个难题留给军方，现在把关注点放在 &lt;strong&gt;&lt;mark&gt;ACL 语义&lt;/mark&gt;&lt;/strong&gt;上。&lt;/p&gt;

&lt;p&gt;在一个 Windows filesystem ACL 中，有如下概念：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;User&lt;/mark&gt;&lt;/strong&gt;：在这个文件上执行操作的用户。在经典 RBAC 术语中，称为 &lt;strong&gt;&lt;mark&gt;subject&lt;/mark&gt;&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;Group 或 Role&lt;/mark&gt;&lt;/strong&gt;：由管理员定义的一组 user。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;File&lt;/mark&gt;&lt;/strong&gt;：需要做访问控制的资源（&lt;strong&gt;&lt;mark&gt;resource&lt;/mark&gt;&lt;/strong&gt;）。也称为 &lt;strong&gt;&lt;mark&gt;object&lt;/mark&gt;&lt;/strong&gt;。subject 对 object 进行操作。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;Permission 或 Entitlement&lt;/mark&gt;&lt;/strong&gt;： 一条 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subject-action-object&lt;/code&gt;（用户-动作-目标文件）&lt;strong&gt;&lt;mark&gt;规则&lt;/mark&gt;&lt;/strong&gt;。
  有时会说某个 subject &lt;strong&gt;&lt;mark&gt;有&lt;/mark&gt;&lt;/strong&gt;一条 entitlement，或者说某个 object &lt;strong&gt;&lt;mark&gt;允许&lt;/mark&gt;&lt;/strong&gt;某个
  permission，这两种表达方式本质上是一样的，只是从不同的角度描述。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;ACL&lt;/mark&gt;&lt;/strong&gt;：一个 &lt;strong&gt;&lt;mark&gt;entitlements 列表&lt;/mark&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;控制谁能访问哪个文件&quot;&gt;控制谁能访问哪个文件&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;mark&gt;每个文件都有一个 ACL&lt;/mark&gt;&lt;/strong&gt;（permission 列表）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;每个文件都有一个 ACL。该 ACL 可能从文件所在子目录的 ACL中继承某些 entry，也
可能不会，这些对我们目前的讨论来说不重要。&lt;/li&gt;
    &lt;li&gt;ACL 相同的文件，它们的 ACL 可能在磁盘上是分别存储的，这些是实现细节，我们这里
也不关心。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果想&lt;strong&gt;&lt;mark&gt;控制谁能访问这些文件&lt;/mark&gt;&lt;/strong&gt;，可通过以下任一种方式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;找到 ACL 对应的 groups/roles，在其中添加或删除 user（称为修改 group/role 的 membership）；或者，&lt;/li&gt;
  &lt;li&gt;直接修改 ACL，添加或删除 permissions。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果想&lt;strong&gt;&lt;mark&gt;一次修改一组文件的 ACL&lt;/mark&gt;&lt;/strong&gt;，可以&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;修改 group/role membership（简单），或者&lt;/li&gt;
  &lt;li&gt;找到所有相关文件，逐个修改对应的 ACL（慢且易出错）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/rbac-as-it-meant-to-be/RBAC_04.png&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;文件多了之后，逐个修改 ACL 就不切实际了。&lt;/p&gt;

&lt;h2 id=&quot;24-存在的问题acl-太多到处重复批量修改麻烦&quot;&gt;2.4 存在的问题：ACL 太多，到处重复，批量修改麻烦&lt;/h2&gt;

&lt;p&gt;最后一点，也是访问控制开始出现漏洞的地方。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;几乎所有系统，不管是不是 RBAC，都支持&lt;strong&gt;&lt;mark&gt;寻找文件系统中的 objects，然后修改它们的 ACL&lt;/mark&gt;&lt;/strong&gt;，
但配套的 object 管理系统可能做的很差。&lt;/li&gt;
  &lt;li&gt;在分布式系统中，这些 objects 可能分散在世界各地，放在各种不同的存储系统中，而
它们的共同之处就是&lt;strong&gt;&lt;mark&gt;都依赖你的 identity 系统&lt;/mark&gt;&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;如果某天发现一个 permission 给错了，就必须找到这个 permission 的所有副本并解
决之，否则就遗留了一个安全问题。但如果 objects 管理系统做得比较糟糕，这里做起
来就会很麻烦。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3-第二次尝试每个-acl-对应一个用户组&quot;&gt;3 第二次尝试：每个 ACL 对应一个用户组&lt;/h1&gt;

&lt;p&gt;被以上问题折磨多次之后，你可能会尝试一些新东西：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;将尽量多的信息从 ACL（分散在各处）中移出&lt;/mark&gt;&lt;/strong&gt;，&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;将尽量多的东西移入 user groups（集中式存储，而且能审计）&lt;/mark&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;31-仍以-windows-文件系统为例&quot;&gt;3.1 仍以 Windows 文件系统为例&lt;/h2&gt;

&lt;p&gt;仍然以 Windows 文件系统为例，如下图所示，你可能会创建两个 group &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;report-readers&lt;/code&gt;
和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;report-writers&lt;/code&gt;：&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/rbac-as-it-meant-to-be/RBAC_05.png&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;将尽量多的东西从 ACL 中移出，将尽量多的东西移入 groups 中。&lt;/p&gt;

&lt;p&gt;效果是：所有 reports 文件能被 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;report-readers&lt;/code&gt; 组内的用户读，能被 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;report-writers&lt;/code&gt;
组内的用户写。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;经验不足的人在这里会犯的一个错误是：只创建一个名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;report&lt;/code&gt; 的 group，然后给
予这个 group read/write 权限。通常来说，&lt;strong&gt;&lt;mark&gt;需要文件读权限的用户，要比需要
写权限的用户更多&lt;/mark&gt;&lt;/strong&gt;。甚至在某些情况下，writer 和 reader 用户之间都
&lt;strong&gt;&lt;mark&gt;没有重叠&lt;/mark&gt;&lt;/strong&gt;（例如审计日志场景）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这种 per-file-type group（每种文件访问类型一个单独的 user group）结构是
&lt;strong&gt;&lt;mark&gt;Don&#x27;t Repeat Yourself&lt;/mark&gt;&lt;/strong&gt; (DRY) 原则在实际应用中的一个例子：
上一节 RBAC/ABAC 模型中，根源问题是&lt;strong&gt;&lt;mark&gt;每个文件都有自己的 ACL&lt;/mark&gt;&lt;/strong&gt;，
这些 ACL 到处重复，因此这里&lt;strong&gt;&lt;mark&gt;提取出了重复部分放到了一个公共的地方&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;32-存在的问题&quot;&gt;3.2 存在的问题&lt;/h2&gt;

&lt;p&gt;这个改进比较合理，尤其是在有很多 objects 的大公司中工作良好，但也有几个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;现在&lt;strong&gt;&lt;mark&gt;需要有某种形式的 IAM admin 访问控制&lt;/mark&gt;&lt;/strong&gt;，也就是对
&lt;strong&gt;&lt;mark&gt;用户组的增删查改&lt;/mark&gt;&lt;/strong&gt;做控制。&lt;/p&gt;

    &lt;p&gt;上一节的 RBAC/ABAC 模型中无需这种功能，因为它直接修改文件的 ACL。IAM admin
 管控带来的一个新问题是：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;如果管控太松，会导致很多人都有 IAM 的访问权限，存在风险；&lt;/li&gt;
      &lt;li&gt;如果管控太紧，大部分都无权修改 group membership，又会使得这种模型的好处大打折扣。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;End users 仍然能四处游荡，在需要时&lt;strong&gt;&lt;mark&gt;能修改每个 report 文件的 ACL&lt;/mark&gt;&lt;/strong&gt;
  （“Alice 真的真的需要查看这个文件”），破坏了你精心设计的系统 —— 而你自己都
  &lt;strong&gt;&lt;mark&gt;无法察觉&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;现在需要&lt;strong&gt;&lt;mark&gt;为每个 ACL 组合创建一个 user group&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

    &lt;p&gt;最后会发现，公司的每个工程师都属于 975 个 group，每个 group 都需要定义
 read/write 两种类型。你必须 review 每个 group 的 membership。这种方式虽然比
 老的 ad-hoc 文件权限方式审计性要好，但也好不了太多。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;至此，我们决定&lt;strong&gt;&lt;mark&gt;放弃文件系统的 ACL&lt;/mark&gt;&lt;/strong&gt;，原因是：文件系统已经设计成这样了，
基于文件系统的 ACL 我们只能做到目前这样。你大概率无法解决现有的文件系统和操作系统中这些问题。&lt;/p&gt;

&lt;p&gt;但接下来的好消息是：
&lt;a href=&quot;/blog/modules-monoliths-and-microservices/&quot;&gt;如今的服务都运行在无状态容器内&lt;/a&gt;，
大部分 VM &lt;a href=&quot;https://www.qubes-os.org/doc/vm-sudo/&quot;&gt;都无需密码就能执行 sudo&lt;/a&gt;，
因此我们不用再对文件系统进行控制，而是对 web 应用和 NoSQL 的 API 做控制。
这也许不是巧合，因为&lt;strong&gt;&lt;mark&gt;对细粒度分布式安全&lt;/mark&gt;&lt;/strong&gt;（fine-grained distributed security）
&lt;strong&gt;&lt;mark&gt;的需求一直在增长，而文件系统还停留在 1980s 年代&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;那么，接下来就开始设计我们想要的 permission 系统！&lt;/p&gt;

&lt;h2 id=&quot;41-根据-user-type-而非-file-type-创建-user-group&quot;&gt;4.1 根据 user type 而非 file type 创建 user group&lt;/h2&gt;

&lt;p&gt;首先，注意到，前面两节的文件系统 ACL 方案其实&lt;strong&gt;&lt;mark&gt;并不是真正意义上基于角色的（role-based）访问控制&lt;/mark&gt;&lt;/strong&gt;。
为什么呢？它把 user groups 作为 roles —— 这没有问题 —— 但如果你有 975 个像 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;report-readers&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;report-writers&lt;/code&gt;
一样的 group，那这些就不算不上是真正的 &lt;strong&gt;&lt;mark&gt;human-relevant roles&lt;/mark&gt;&lt;/strong&gt;。HR 并不知道
你的新员工是否应该是 report-reader，这个决策太底层了（low-level）。&lt;/p&gt;

&lt;p&gt;因此我们得到的第一个启示就是：应该根据&lt;strong&gt;&lt;mark&gt;用户类型&lt;/mark&gt;&lt;/strong&gt;（user types）而非
&lt;strong&gt;&lt;mark&gt;文件类型&lt;/mark&gt;&lt;/strong&gt;（file types）来创建 user groups。如下图所示：&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/rbac-as-it-meant-to-be/RBAC_06.png&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;42-roles-去扁平化增强表达力将-acl-定义为一组策略规则&quot;&gt;4.2 Roles 去扁平化，增强表达力：将 ACL 定义为一组策略规则&lt;/h2&gt;

&lt;p&gt;以上 group-per-user-type 格式还是&lt;strong&gt;&lt;mark&gt;过于扁平&lt;/mark&gt;&lt;/strong&gt;了（too flat）：它已经丢失了
“&lt;strong&gt;&lt;mark&gt;为什么&lt;/mark&gt;&lt;/strong&gt;某人会在某 group” 的语义含义（semantic meaning）。如果
Bob 离职了，我们必须修改所有可能包含 Bob 的 groups。这虽然已经比跟踪每个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;report&lt;/code&gt; 类型的文件
然后 double check 它的 permissions 是否还正确要好，但仍然&lt;strong&gt;&lt;mark&gt;很容易出错
&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我们假设有如下角色（roles）：Accounting（审计人员）、DevOps（研发运维人员）、Engineering（工程师）、Executive（高管）。&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/rbac-as-it-meant-to-be/RBAC_07.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;然后我们就可以&lt;strong&gt;&lt;mark&gt;将 ACL 定义为一组策略规则&lt;/mark&gt;&lt;/strong&gt;（a set of policy rules）：&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/rbac-as-it-meant-to-be/RBAC_08.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这种模型与最初的 flat 模型&lt;strong&gt;&lt;mark&gt;表达的东西是一样的&lt;/mark&gt;&lt;/strong&gt;，但通过增加一个间接层（indirection），
它表达了我们&lt;strong&gt;&lt;mark&gt;一直想表达（而没有表达出来）的东西&lt;/mark&gt;&lt;/strong&gt;。有了这个模型，
接下来就可以讨论：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;由 HR 部门定义的 human-relevant roles，以及&lt;/li&gt;
  &lt;li&gt;由安全部门定义的标签（tags），以及&lt;/li&gt;
  &lt;li&gt;二者是如何联系到一起的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;43-关于策略规则的进一步解释&quot;&gt;4.3 关于策略规则的进一步解释&lt;/h2&gt;

&lt;p&gt;我们正在设计一个新的权限系统。&lt;/p&gt;

&lt;p&gt;现在，先将刚才设计的&lt;strong&gt;&lt;mark&gt;能转换成的 roles 的 policy rules&lt;/mark&gt;&lt;/strong&gt; 进一步表示为：&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/rbac-as-it-meant-to-be/RBAC_09.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;有了这样一种格式的描述之后，当我们需要满足 SOC2 合规性要求时，只需将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;database&lt;/code&gt;
的 readers 改为，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[DevOps, Prod]&lt;/code&gt;，这将会立即锁定所有数据库相关的对象。&lt;/p&gt;

&lt;h2 id=&quot;44-其他特性&quot;&gt;4.4 其他特性&lt;/h2&gt;

&lt;p&gt;最后，我们来加两个其他特性：&lt;/p&gt;

&lt;p&gt;首先，与文件只有一种 type（读或写）不同，一个对象可以有零或&lt;strong&gt;&lt;mark&gt;多个 tags&lt;/mark&gt;&lt;/strong&gt;。
因此，与数据库相关的源文件可以打上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;database&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sourcefile&lt;/code&gt; 两个 tag，对应地，
它获得的是两种 &lt;strong&gt;&lt;mark&gt;permission set 的交集&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/rbac-as-it-meant-to-be/RBAC_10.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;第二，&lt;strong&gt;&lt;mark&gt;只有 tag 的 owner 有权限增加或删除&lt;/mark&gt;&lt;/strong&gt;任何对象上的&lt;strong&gt;&lt;mark&gt;该 tag&lt;/mark&gt;&lt;/strong&gt;。
例如在下图中，只有 Engineering 可以在某个对象打 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sourcefile&lt;/code&gt; tag。
这能够避免意外将对象分享给应该完全隔离的人，或在不期望的地方错误地应用已有策略。&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/rbac-as-it-meant-to-be/RBAC_13.png&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;45-mac-归来&quot;&gt;4.5 MAC 归来&lt;/h2&gt;

&lt;p&gt;至此，我们看到了 &lt;strong&gt;&lt;mark&gt;MAC 回归的身影&lt;/mark&gt;&lt;/strong&gt;。但是，现在它，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不需要一个针对 security policy 的 global admin access control。&lt;/li&gt;
  &lt;li&gt;每个 tag owner 能直接对他们的 objects 进行授权，但他们能授予哪些访问权限，是
由整体上的安全策略（the overall security policy，即 &lt;strong&gt;&lt;mark&gt;roles&lt;/mark&gt;&lt;/strong&gt;）控制的。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;46-例子api-访问控制&quot;&gt;4.6 例子：API 访问控制&lt;/h2&gt;

&lt;p&gt;在类似 Tailscale 的网络系统中，我们其实并不会用 readers和 writers 这样的文件系统术语。
我们&lt;strong&gt;&lt;mark&gt;定义node 和 port，以及允许谁连接到这些 node 和 port&lt;/mark&gt;&lt;/strong&gt;。
例如可能会如下规则：&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/rbac-as-it-meant-to-be/RBAC_11.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;有了以上规则，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Engineering 中的任何人都可以启动一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev-api-server&lt;/code&gt; node，&lt;/li&gt;
  &lt;li&gt;该 node 能接受从任何 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev-api-client&lt;/code&gt; node 来的非加密连接（TLS 太难了！开发环境就放行非加密连接吧），但反之并不亦然。&lt;/li&gt;
  &lt;li&gt;只有 Ops 中的人能启动 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod-api-server&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod-api-client&lt;/code&gt; nodes，它们只处理 https 流量，拒绝非加密 http。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面是效果：&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/rbac-as-it-meant-to-be/RBAC_12.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里注意：我们递归地用一些 tag names 来定义
permissions for other tags。Ops 中的某个人可以启动一个 node 并打上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod-api-server&lt;/code&gt; tag，
这个 node 就会获得与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod-api-server&lt;/code&gt; 而不是 Ops 相关联的 permissions 和 entitlements（
这很重要，因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod-api-server&lt;/code&gt; instance 无法像 Ops 一样启动更多 instance）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tailscale.com/kb/1018/acls/&quot;&gt;真实的 Tailscale ACLs 和 tags&lt;/a&gt; 与此很像，但更加具体。&lt;/p&gt;

&lt;h1 id=&quot;5-职责分离&quot;&gt;5 职责分离&lt;/h1&gt;

&lt;h2 id=&quot;51-根据-policy-rules-和-user-groups-自动生成访问权限&quot;&gt;5.1 根据 policy rules 和 user groups 自动生成访问权限&lt;/h2&gt;

&lt;p&gt;如果试图将这个模型反向适配到 legacy-style filesystem permissions，
我们就会发现 &lt;strong&gt;&lt;mark&gt;roles 和 tag definitions 其实是相同类型的对象&lt;/mark&gt;&lt;/strong&gt;（都是 lists of users），
二者之间通过一个（“安全策略”）算法进行单向转换：&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/rbac-as-it-meant-to-be/RBAC_14.png&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;将 roles 扩展成 tags，然后适配到传统文件系统的权限控制模型。&lt;/p&gt;

&lt;p&gt;你可以类似地写一些脚本，将给定的 roles 和 group membership rules
&lt;strong&gt;&lt;mark&gt;自动生成你的 /etc/group 内容&lt;/mark&gt;&lt;/strong&gt;，我知道有些公司就是这样做的。
这不是标准方式，维护很痛苦，而且通常用定时任务来批量执行，这意味着当修改
一个 tag 或 group membership 之后，必须要等上一段时间才能生效。但本质上来说，这
种方式是能工作的，而且比典型的操作系统默认值要好多了。&lt;/p&gt;



&lt;p&gt;前面说 &lt;strong&gt;&lt;mark&gt;tags（用于 ACL 目的）&lt;/mark&gt;&lt;/strong&gt;和 &lt;strong&gt;&lt;mark&gt;roles（用于 user management 目的）&lt;/mark&gt;&lt;/strong&gt;
都是“用户列表”（lists of users），其实这种说法有误导性。二者用于不同场景。最重要的是，
&lt;strong&gt;&lt;mark&gt;不同的人&lt;/mark&gt;&lt;/strong&gt;负责系统的不同部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;Roles&lt;/mark&gt;&lt;/strong&gt; 描述的是 &lt;strong&gt;&lt;mark&gt;identity system (authentication) 中的人&lt;/mark&gt;&lt;/strong&gt;。
  Roles &lt;strong&gt;&lt;mark&gt;变化很少&lt;/mark&gt;&lt;/strong&gt;，通常在入职、晋升或转岗时由 HR 部门设置。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;Object types (tags)&lt;/mark&gt;&lt;/strong&gt; 由 &lt;strong&gt;&lt;mark&gt;object owner&lt;/mark&gt;&lt;/strong&gt; 在这个 object 创建时设置。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;Entitlements&lt;/mark&gt;&lt;/strong&gt; 用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(Role, Tag)&lt;/code&gt; 描述，由简单的程序（安全策略）来定义，由&lt;strong&gt;&lt;mark&gt;安全团队设置&lt;/mark&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在这个架构中，这三种类型的人只有很少时候才需要交互：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Accounting 部门中的财报 writer 并不关心谁是 Executive，也不关心 Executive 是否
  有权查看或编辑财报。他们只需知道&lt;strong&gt;&lt;mark&gt;要给 report 文件打上 financial-report tag&lt;/mark&gt;&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安全团队并不关心哪个文件打了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;financial-report&lt;/code&gt;（讨论一般情况下），也不关心谁是Executive。
  他们需要的是&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;mark&gt;能读、写对应的安全策略，以及确保策略生效&lt;/mark&gt;&lt;/strong&gt;：&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;mark&gt;确保 financial-report tag 只能被 Accounting 部门打&lt;/mark&gt;&lt;/strong&gt;，对应的文件只能被
Executives 和 Accounting 读（read only）。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HR 团队不知道也不关心文件或安全策略，他们只关心&lt;strong&gt;&lt;mark&gt;这周招了一个 Accounting role 的人&lt;/mark&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;53-小结&quot;&gt;5.3 小结&lt;/h2&gt;

&lt;p&gt;回到 network permissions 场景：在大公司中，正确地围绕这些概念设计你的模型，就能避免大量摩擦。&lt;/p&gt;

&lt;p&gt;我们在实际工作中可能会遇到如下类似的例子：工程师创建了一个新的开发（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt;）集群后，
&lt;strong&gt;&lt;mark&gt;还要去提个工单，让安全团队给他开防火墙端口&lt;/mark&gt;&lt;/strong&gt;。为什么会这样？
因为在这些公司中，安全团队维护的策略并不规范，没有收敛到以上模型：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;允许 Engineers 运行 dev API servers，接受来自本机或 dev API clients 的 incoming 连接 —— 这个没问题；&lt;/li&gt;
  &lt;li&gt;通常不允许创建 outgoing connections —— 这个也没问题；&lt;/li&gt;
  &lt;li&gt;噢对了，Carol 的 dev API server 需要主动访问数据库服务器，只能开单独策略了 —— 问题来了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果安全团队能将这些安全规则固化成代码片段，结果将会更好，能确保它们在整张
网络上得到一致执行。&lt;/p&gt;

&lt;h1 id=&quot;6-结束语&quot;&gt;6 结束语&lt;/h1&gt;

&lt;p&gt;以上提到的所有东西，users、roles、object types、policies &lt;strong&gt;&lt;mark&gt;都不是新概念&lt;/mark&gt;&lt;/strong&gt;，
它们都来自 1992 提出 RBAC 模型的那篇论文，只是术语稍有不同。&lt;/p&gt;

&lt;p&gt;如今，几乎每个人都在使用 users、groups、ACLs 了。一些人认为，我们实现的东西已经
是 RBAC，但事实告诉我们：并不是。&lt;strong&gt;&lt;mark&gt;还没有谁实现过完整的 RBAC 模型&lt;/mark&gt;&lt;/strong&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;每个人都是一个 User (subject)。&lt;/li&gt;
  &lt;li&gt;每个 user 都有一个或多个 Roles。&lt;/li&gt;
  &lt;li&gt;每个 object 都有一个或多个 Tags。&lt;/li&gt;
  &lt;li&gt;一条 “security policy” &lt;strong&gt;&lt;mark&gt;定义一个&lt;/mark&gt;&lt;/strong&gt;将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(Role, Tag)&lt;/code&gt; 转换成 Entitlements 的
&lt;strong&gt;&lt;mark&gt;公式&lt;/mark&gt;&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;一个执行层（enforcement layer）负责 enforce security policy，并为每个 object 生成有效 entitlements 列表（ACL）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但另一方面，实现这样一个模型比实现常见的 users+groups 模型&lt;strong&gt;&lt;mark&gt;并没有复杂多少
&lt;/mark&gt;&lt;/strong&gt; —— 只要&lt;strong&gt;&lt;mark&gt;从一开始就将其放到系统的核心&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;最后回到文初，这就是为什么 &lt;a href=&quot;https://tailscale.com/kb/1018/acls/&quot;&gt;Tailscale RBAC、ABAC 和 security policy 不同寻常的地方&lt;/a&gt;。
Tailscale objects 都是设备和端口（devices and ports），而非文件，但所有概念在使用上与在文件系统中是一样的。
最终的产品在&lt;strong&gt;&lt;mark&gt;理念设计上很简洁&lt;/mark&gt;&lt;/strong&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Device 或 container 的 owner 可以设置 tag；&lt;/li&gt;
  &lt;li&gt;安全团队决定谁 own 哪些 tag、每个 tag 关联了哪些 permissions、tags 会授权给哪些 roles；&lt;/li&gt;
  &lt;li&gt;Identity/HR 团队决定哪些 users 应该属于哪些 roles。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;附录译者注tailscale-的安全策略模型&quot;&gt;附录（译者注）：Tailscale 的安全策略模型&lt;/h1&gt;

&lt;p&gt;ACL rules 格式：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;action&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;accept&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;users&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; list-of-sources... &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,      &lt;span class=&quot;c&quot;&gt;# 广义的访问来源，相当于 RBAC 模型中的 users/subjects&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;ports&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; list-of-destinations... &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;c&quot;&gt;# 广义的访问目标，相当于 RBAC 模型中的 objects/resources&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上 json 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ports&lt;/code&gt; 都是为了兼容公司的历史 API，它们实际上包含的
范围要比字面意思大的多，具体见 &lt;a href=&quot;https://tailscale.com/kb/1018/acls/&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;


  
  
&lt;/div&gt;


          

      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d4b67f39d4b2d7545a350c9d23592769</guid>
<title>Loki 日志系统详解</title>
<link>https://toutiao.io/k/thij6fe</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUyMDA4OTY3MQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/TwK74MzofXdtvHKjv7OHYYSTQ2QOVuyAia3LaU56kibxKLlX5Lo9bgeUfz1R4JDmdW7ZGYSLqsiaBl3nTOwOmFOFQ/0?wx_fmt=png&quot; data-nickname=&quot;浪尖聊大数据&quot; data-alias=&quot;bigdatatip&quot; data-signature=&quot;主要分享大数据框架，如spark，flink，kafka，hbase原理源码，同时会分享数据仓库，图计算等浪尖擅长领域。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;101&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;最近，在对公司容器云的日志方案进行设计的时候，发现主流的ELK或者EFK比较重，再加上现阶段对于ES复杂的搜索功能很多都用不上最终选择了Grafana开源的Loki日志系统，下面介绍下Loki的背景。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;101&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;缘起&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;当我们的容器云运行的应用或者某个节点出现问题了，解决思路应该如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNnMGibJb5rw6xlYnV0PlQicRa0OXawS5NwnSKtZpjMRhBIqicmIMJDFDicmxGT0Mq3ZKDXaAZ4icPzX3nQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们的监控使用的是基于Prometheus体系进行改造的，Prometheus中比较重要的是Metric和Alert，Metric是来说明当前或者历史达到了某个值，Alert设置Metric达到某个特定的基数触发了告警，但是这些信息明显是不够的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们都知道，Kubernetes的基本单位是Pod，Pod把日志输出到stdout和stderr，平时有什么问题我们通常在界面或者通过命令查看相关的日志，举个例子：当我们的某个Pod的内存变得很大，触发了我们的Alert，这个时候管理员，去页面查询确认是哪个Pod有问题，然后要确认Pod内存变大的原因，我们还需要去查询Pod的日志，如果没有日志系统，那么我们就需要到页面或者使用命令进行查询了：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.20092838196286472&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNnMGibJb5rw6xlYnV0PlQicRa6wNDnuw6Vst5Q5UtOruV0SWfVJUtGH2IyibzPc5o80AyhvKNibJ20cyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1508&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果，这个时候应用突然挂了，这个时候我们就无法查到相关的日志了，所以需要引入日志系统，统一收集日志，而使用ELK的话，就需要在Kibana和Grafana之间切换，影响用户体验。所以 ，loki的第一目的就是最小化度量和日志的切换成本，有助于减少异常事件的响应时间和提高用户的体验。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;101&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;ELK 存在的问题&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;现有的很多日志采集的方案都是采用全文检索对日志进行索引（如ELK方案），优点是功能丰富，允许复杂的操作。但是，这些方案往往规模复杂，资源占用高，操作苦难。很多功能往往用不上，大多数查询只关注一定时间范围和一些简单的参数（如host、service等），使用这些解决方案就有点杀鸡用牛刀的感觉了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4728789986091794&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNnMGibJb5rw6xlYnV0PlQicRaD1wO7pEz8EBSvicc78Hdl5kzBRsicwrQbLiaEsl6egT9UZiaXT0wkt98ZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;719&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此，Loki的第二个目的是，在查询语言的易操作性和复杂性之间可以达到一个权衡。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;101&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;成本&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;全文检索的方案也带来成本问题，简单的说就是全文搜索（如ES）的倒排索引的切分和共享的成本较高。后来出现了其他不同的设计方案如：OKlog，采用最终一致的、基于网格的分布策略。这两个设计决策提供了大量的成本降低和非常简单的操作，但是查询不够方便。因此，Loki的第三个目的是，提高一个更具成本效益的解决方案。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;101&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;架构&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;整体架构&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Loki的架构如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.39814814814814814&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNnMGibJb5rw6xlYnV0PlQicRaAtRuLgdYX6JjdsGiagKS0eAYZNPiadiceygNM7HnjN5eazqTEulPmia3gA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不难看出，Loki的架构非常简单，使用了和Prometheus一样的标签来作为索引，也就是说，你通过这些标签既可以查询日志的内容也可以查询到监控的数据，不但减少了两种查询之间的切换成本，也极大地降低了日志索引的存储。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Loki将使用与Prometheus相同的服务发现和标签重新标记库，编写了pormtail，在Kubernetes中promtail以DaemonSet方式运行在每个节点中，通过Kubernetes API等到日志的正确元数据，并将它们发送到Loki。下面是日志的存储架构：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.49907407407407406&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNnMGibJb5rw6xlYnV0PlQicRasNc0rwnnB8tPhDDdJ3ibyxn5ZalEtjgibHq1PBFjLLQeuqvaHaJsLsuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;读写&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;日志数据的写主要依托的是Distributor和Ingester两个组件，整体的流程如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.41203703703703703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNnMGibJb5rw6xlYnV0PlQicRabiazmXBCu3bPGIWRTdDEUs6Ng4gNDqVibCMFRE27ibCeTyrZxnheHovhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;Distributor&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一旦promtail收集日志并将其发送给loki，Distributor就是第一个接收日志的组件。&lt;/span&gt;&lt;span&gt;由于日志的写入量可能很大，所以不能在它们传入时将它们写入数据库。&lt;/span&gt;&lt;span&gt;这会毁掉数据库。&lt;/span&gt;&lt;span&gt;我们需要批处理和压缩数据。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Loki通过构建压缩数据块来实现这一点，方法是在日志进入时对其进行gzip操作，组件ingester是一个有状态的组件，负责构建和刷新chunck，当chunk达到一定的数量或者时间后，刷新到存储中去。每个流的日志对应一个ingester，当日志到达Distributor后，根据元数据和hash算法计算出应该到哪个ingester上面。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.40925925925925927&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNnMGibJb5rw6xlYnV0PlQicRasoV8JBbJCmsuAQDZMYuH4qCNJylr2ibFNWTWS2vHjf43rzzKoNQBB3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;此外，为了冗余和弹性，我们将其复制n（默认情况下为3）次。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;Ingester&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Ingester接收到日志并开始构建chunk：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.31851851851851853&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNnMGibJb5rw6xlYnV0PlQicRaAeqWDTm8rPauHLg1kJyCH2dPqR5CfRl1aRB0axk9n7Ryia0EOl6yiaIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基本上就是将日志进行压缩并附加到chunk上面。一旦chunk“填满”（数据达到一定数量或者过了一定期限），ingester将其刷新到数据库。我们对块和索引使用单独的数据库，因为它们存储的数据类型不同。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.40185185185185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNnMGibJb5rw6xlYnV0PlQicRaTjCiby0eppich4KXgXXLic4UT55KpH0zVfhuyJMRSyvKQicw9uk6WY9J8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;刷新一个chunk之后，ingester然后创建一个新的空chunk并将新条目添加到该chunk中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;Querier&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;读取就非常简单了，由Querier负责给定一个时间范围和标签选择器，Querier查看索引以确定哪些块匹配，并通过greps将结果显示出来。它还从Ingester获取尚未刷新的最新数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于每个查询，一个查询器将为您显示所有相关日志。实现了查询并行化，提供分布式grep，使即使是大型查询也是足够的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6645898234683282&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNnMGibJb5rw6xlYnV0PlQicRaz6vrBkEGvHspZfWtLfXtMm5bpFBg4GfhklQicORQgkGUHHwg5tb9ZNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;963&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Loki的索引存储可以是cassandra/bigtable/dynamodb，而chuncks可以是各种对象存储，Querier和Distributor都是无状态的组件。对于ingester他虽然是有状态的但是，当新的节点加入或者减少，整节点间的chunk会重新分配，已适应新的散列环。而Loki底层存储的实现Cortex已经 在实际的生产中投入使用多年了。有了这句话，我可以放心的在环境中实验一把了。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;部署&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;Loki的安装非常简单。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;创建namespace&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre&gt;&lt;p&gt;oc new-project loki&lt;/p&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;权限设置&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre&gt;&lt;p&gt;oc adm policy add-scc-to-user anyuid -z default -n loki&lt;br/&gt;oc adm policy add-cluster-role-to-user cluster-admin system:serviceaccount:loki:default&lt;/p&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;安装Loki&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;安装命令：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre&gt;&lt;p&gt;oc create -f statefulset.json -n loki&lt;/p&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;statefulset.json如下：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre&gt;&lt;p&gt;{&lt;br/&gt;    &lt;span&gt;&quot;apiVersion&quot;&lt;/span&gt;: &lt;span&gt;&quot;apps/v1&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;kind&quot;&lt;/span&gt;: &lt;span&gt;&quot;StatefulSet&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;metadata&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;loki&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;&quot;spec&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;podManagementPolicy&quot;&lt;/span&gt;: &lt;span&gt;&quot;OrderedReady&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;replicas&quot;&lt;/span&gt;: 1,&lt;br/&gt;        &lt;span&gt;&quot;revisionHistoryLimit&quot;&lt;/span&gt;: 10,&lt;br/&gt;        &lt;span&gt;&quot;selector&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;matchLabels&quot;&lt;/span&gt;: {&lt;br/&gt;                &lt;span&gt;&quot;app&quot;&lt;/span&gt;: &lt;span&gt;&quot;loki&quot;&lt;/span&gt;&lt;br/&gt;            }&lt;br/&gt;        },&lt;br/&gt;        &lt;span&gt;&quot;serviceName&quot;&lt;/span&gt;: &lt;span&gt;&quot;womping-stoat-loki-headless&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;template&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;metadata&quot;&lt;/span&gt;: {&lt;br/&gt;                &lt;span&gt;&quot;annotations&quot;&lt;/span&gt;: {&lt;br/&gt;                    &lt;span&gt;&quot;checksum/config&quot;&lt;/span&gt;: &lt;span&gt;&quot;da297d66ee53e0ce68b58e12be7ec5df4a91538c0b476cfe0ed79666343df72b&quot;&lt;/span&gt;,&lt;br/&gt;                    &lt;span&gt;&quot;prometheus.io/port&quot;&lt;/span&gt;: &lt;span&gt;&quot;http-metrics&quot;&lt;/span&gt;,&lt;br/&gt;                    &lt;span&gt;&quot;prometheus.io/scrape&quot;&lt;/span&gt;: &lt;span&gt;&quot;true&quot;&lt;/span&gt;&lt;br/&gt;                },&lt;br/&gt;                &lt;span&gt;&quot;creationTimestamp&quot;&lt;/span&gt;: null,&lt;br/&gt;                &lt;span&gt;&quot;labels&quot;&lt;/span&gt;: {&lt;br/&gt;                    &lt;span&gt;&quot;app&quot;&lt;/span&gt;: &lt;span&gt;&quot;loki&quot;&lt;/span&gt;,&lt;br/&gt;                    &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;loki&quot;&lt;/span&gt;&lt;br/&gt;                }&lt;br/&gt;            },&lt;br/&gt;            &lt;span&gt;&quot;spec&quot;&lt;/span&gt;: {&lt;br/&gt;                &lt;span&gt;&quot;affinity&quot;&lt;/span&gt;: {},&lt;br/&gt;                &lt;span&gt;&quot;containers&quot;&lt;/span&gt;: [&lt;br/&gt;                    {&lt;br/&gt;                        &lt;span&gt;&quot;args&quot;&lt;/span&gt;: [&lt;br/&gt;                            &lt;span&gt;&quot;-config.file=/etc/loki/local-config.yaml&quot;&lt;/span&gt;&lt;br/&gt;                        ],&lt;br/&gt;                        &lt;span&gt;&quot;image&quot;&lt;/span&gt;: &lt;span&gt;&quot;grafana/loki:latest&quot;&lt;/span&gt;,&lt;br/&gt;                        &lt;span&gt;&quot;imagePullPolicy&quot;&lt;/span&gt;: &lt;span&gt;&quot;IfNotPresent&quot;&lt;/span&gt;,&lt;br/&gt;                        &lt;span&gt;&quot;livenessProbe&quot;&lt;/span&gt;: {&lt;br/&gt;                            &lt;span&gt;&quot;failureThreshold&quot;&lt;/span&gt;: 3,&lt;br/&gt;                            &lt;span&gt;&quot;httpGet&quot;&lt;/span&gt;: {&lt;br/&gt;                                &lt;span&gt;&quot;path&quot;&lt;/span&gt;: &lt;span&gt;&quot;/ready&quot;&lt;/span&gt;,&lt;br/&gt;                                &lt;span&gt;&quot;port&quot;&lt;/span&gt;: &lt;span&gt;&quot;http-metrics&quot;&lt;/span&gt;,&lt;br/&gt;                                &lt;span&gt;&quot;scheme&quot;&lt;/span&gt;: &lt;span&gt;&quot;HTTP&quot;&lt;/span&gt;&lt;br/&gt;                            },&lt;br/&gt;                            &lt;span&gt;&quot;initialDelaySeconds&quot;&lt;/span&gt;: 45,&lt;br/&gt;                            &lt;span&gt;&quot;periodSeconds&quot;&lt;/span&gt;: 10,&lt;br/&gt;                            &lt;span&gt;&quot;successThreshold&quot;&lt;/span&gt;: 1,&lt;br/&gt;                            &lt;span&gt;&quot;timeoutSeconds&quot;&lt;/span&gt;: 1&lt;br/&gt;                        },&lt;br/&gt;                        &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;loki&quot;&lt;/span&gt;,&lt;br/&gt;                        &lt;span&gt;&quot;ports&quot;&lt;/span&gt;: [&lt;br/&gt;                            {&lt;br/&gt;                                &lt;span&gt;&quot;containerPort&quot;&lt;/span&gt;: 3100,&lt;br/&gt;                                &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;http-metrics&quot;&lt;/span&gt;,&lt;br/&gt;                                &lt;span&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span&gt;&quot;TCP&quot;&lt;/span&gt;&lt;br/&gt;                            }&lt;br/&gt;                        ],&lt;br/&gt;                        &lt;span&gt;&quot;readinessProbe&quot;&lt;/span&gt;: {&lt;br/&gt;                            &lt;span&gt;&quot;failureThreshold&quot;&lt;/span&gt;: 3,&lt;br/&gt;                            &lt;span&gt;&quot;httpGet&quot;&lt;/span&gt;: {&lt;br/&gt;                                &lt;span&gt;&quot;path&quot;&lt;/span&gt;: &lt;span&gt;&quot;/ready&quot;&lt;/span&gt;,&lt;br/&gt;                                &lt;span&gt;&quot;port&quot;&lt;/span&gt;: &lt;span&gt;&quot;http-metrics&quot;&lt;/span&gt;,&lt;br/&gt;                                &lt;span&gt;&quot;scheme&quot;&lt;/span&gt;: &lt;span&gt;&quot;HTTP&quot;&lt;/span&gt;&lt;br/&gt;                            },&lt;br/&gt;                            &lt;span&gt;&quot;initialDelaySeconds&quot;&lt;/span&gt;: 45,&lt;br/&gt;                            &lt;span&gt;&quot;periodSeconds&quot;&lt;/span&gt;: 10,&lt;br/&gt;                            &lt;span&gt;&quot;successThreshold&quot;&lt;/span&gt;: 1,&lt;br/&gt;                            &lt;span&gt;&quot;timeoutSeconds&quot;&lt;/span&gt;: 1&lt;br/&gt;                        },&lt;br/&gt;                        &lt;span&gt;&quot;resources&quot;&lt;/span&gt;: {},&lt;br/&gt;                        &lt;span&gt;&quot;terminationMessagePath&quot;&lt;/span&gt;: &lt;span&gt;&quot;/dev/termination-log&quot;&lt;/span&gt;,&lt;br/&gt;                        &lt;span&gt;&quot;terminationMessagePolicy&quot;&lt;/span&gt;: &lt;span&gt;&quot;File&quot;&lt;/span&gt;,&lt;br/&gt;                        &lt;span&gt;&quot;volumeMounts&quot;&lt;/span&gt;: [&lt;br/&gt;                            {&lt;br/&gt;                                &lt;span&gt;&quot;mountPath&quot;&lt;/span&gt;: &lt;span&gt;&quot;/tmp/loki&quot;&lt;/span&gt;,&lt;br/&gt;                                &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;storage&quot;&lt;/span&gt;&lt;br/&gt;                            }&lt;br/&gt;                        ]&lt;br/&gt;                    }&lt;br/&gt;                ],&lt;br/&gt;                &lt;span&gt;&quot;dnsPolicy&quot;&lt;/span&gt;: &lt;span&gt;&quot;ClusterFirst&quot;&lt;/span&gt;,&lt;br/&gt;                &lt;span&gt;&quot;restartPolicy&quot;&lt;/span&gt;: &lt;span&gt;&quot;Always&quot;&lt;/span&gt;,&lt;br/&gt;                &lt;span&gt;&quot;schedulerName&quot;&lt;/span&gt;: &lt;span&gt;&quot;default-scheduler&quot;&lt;/span&gt;,&lt;br/&gt;                &lt;span&gt;&quot;terminationGracePeriodSeconds&quot;&lt;/span&gt;: 30,&lt;br/&gt;                &lt;span&gt;&quot;volumes&quot;&lt;/span&gt;: [&lt;br/&gt;                    {&lt;br/&gt;                        &lt;span&gt;&quot;emptyDir&quot;&lt;/span&gt;: {},&lt;br/&gt;                        &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;storage&quot;&lt;/span&gt;&lt;br/&gt;                    }&lt;br/&gt;                ]&lt;br/&gt;            }&lt;br/&gt;        },&lt;br/&gt;        &lt;span&gt;&quot;updateStrategy&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;RollingUpdate&quot;&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;安装Promtail&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;安装命令：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre&gt;&lt;p&gt;oc create -f configmap.json -n loki&lt;/p&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;configmap.json如下：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre&gt;&lt;p&gt;{&lt;br/&gt;    &lt;span&gt;&quot;apiVersion&quot;&lt;/span&gt;: &lt;span&gt;&quot;v1&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;data&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;promtail.yaml&quot;&lt;/span&gt;: &lt;span&gt;&quot;client:\n  backoff_config:\n    maxbackoff: 5s\n    maxretries: 5\n    minbackoff: 100ms\n  batchsize: 102400\n  batchwait: 1s\n  external_labels: {}\n  timeout: 10s\npositions:\n  filename: /run/promtail/positions.yaml\nserver:\n  http_listen_port: 3101\ntarget_config:\n  sync_period: 10s\n\nscrape_configs:\n- job_name: kubernetes-pods-name\n  pipeline_stages:\n    - docker: {}\n    \n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - source_labels:\n    - __meta_kubernetes_pod_label_name\n    target_label: __service__\n  - source_labels:\n    - __meta_kubernetes_pod_node_name\n    target_label: __host__\n  - action: drop\n    regex: ^$\n    source_labels:\n    - __service__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n  - action: replace\n    replacement: &lt;span&gt;$1&lt;/span&gt;\n    separator: /\n    source_labels:\n    - __meta_kubernetes_namespace\n    - __service__\n    target_label: job\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_name\n    target_label: instance\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_container_name\n    target_label: container_name\n  - replacement: /var/log/pods/*&lt;span&gt;$1&lt;/span&gt;/*.log\n    separator: /\n    source_labels:\n    - __meta_kubernetes_pod_uid\n    - __meta_kubernetes_pod_container_name\n    target_label: __path__\n- job_name: kubernetes-pods-app\n  pipeline_stages:\n    - docker: {}\n    \n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - action: drop\n    regex: .+\n    source_labels:\n    - __meta_kubernetes_pod_label_name\n  - source_labels:\n    - __meta_kubernetes_pod_label_app\n    target_label: __service__\n  - source_labels:\n    - __meta_kubernetes_pod_node_name\n    target_label: __host__\n  - action: drop\n    regex: ^$\n    source_labels:\n    - __service__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n  - action: replace\n    replacement: &lt;span&gt;$1&lt;/span&gt;\n    separator: /\n    source_labels:\n    - __meta_kubernetes_namespace\n    - __service__\n    target_label: job\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_name\n    target_label: instance\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_container_name\n    target_label: container_name\n  - replacement: /var/log/pods/*&lt;span&gt;$1&lt;/span&gt;/*.log\n    separator: /\n    source_labels:\n    - __meta_kubernetes_pod_uid\n    - __meta_kubernetes_pod_container_name\n    target_label: __path__\n- job_name: kubernetes-pods-direct-controllers\n  pipeline_stages:\n    - docker: {}\n    \n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - action: drop\n    regex: .+\n    separator: &#x27;&#x27;\n    source_labels:\n    - __meta_kubernetes_pod_label_name\n    - __meta_kubernetes_pod_label_app\n  - action: drop\n    regex: ^([0-9a-z-.]+)(-[0-9a-f]{8,10})$\n    source_labels:\n    - __meta_kubernetes_pod_controller_name\n  - source_labels:\n    - __meta_kubernetes_pod_controller_name\n    target_label: __service__\n  - source_labels:\n    - __meta_kubernetes_pod_node_name\n    target_label: __host__\n  - action: drop\n    regex: ^$\n    source_labels:\n    - __service__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n  - action: replace\n    replacement: &lt;span&gt;$1&lt;/span&gt;\n    separator: /\n    source_labels:\n    - __meta_kubernetes_namespace\n    - __service__\n    target_label: job\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_name\n    target_label: instance\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_container_name\n    target_label: container_name\n  - replacement: /var/log/pods/*&lt;span&gt;$1&lt;/span&gt;/*.log\n    separator: /\n    source_labels:\n    - __meta_kubernetes_pod_uid\n    - __meta_kubernetes_pod_container_name\n    target_label: __path__\n- job_name: kubernetes-pods-indirect-controller\n  pipeline_stages:\n    - docker: {}\n    \n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - action: drop\n    regex: .+\n    separator: &#x27;&#x27;\n    source_labels:\n    - __meta_kubernetes_pod_label_name\n    - __meta_kubernetes_pod_label_app\n  - action: keep\n    regex: ^([0-9a-z-.]+)(-[0-9a-f]{8,10})$\n    source_labels:\n    - __meta_kubernetes_pod_controller_name\n  - action: replace\n    regex: ^([0-9a-z-.]+)(-[0-9a-f]{8,10})$\n    source_labels:\n    - __meta_kubernetes_pod_controller_name\n    target_label: __service__\n  - source_labels:\n    - __meta_kubernetes_pod_node_name\n    target_label: __host__\n  - action: drop\n    regex: ^$\n    source_labels:\n    - __service__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n  - action: replace\n    replacement: &lt;span&gt;$1&lt;/span&gt;\n    separator: /\n    source_labels:\n    - __meta_kubernetes_namespace\n    - __service__\n    target_label: job\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_name\n    target_label: instance\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_container_name\n    target_label: container_name\n  - replacement: /var/log/pods/*&lt;span&gt;$1&lt;/span&gt;/*.log\n    separator: /\n    source_labels:\n    - __meta_kubernetes_pod_uid\n    - __meta_kubernetes_pod_container_name\n    target_label: __path__\n- job_name: kubernetes-pods-static\n  pipeline_stages:\n    - docker: {}\n    \n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - action: drop\n    regex: ^$\n    source_labels:\n    - __meta_kubernetes_pod_annotation_kubernetes_io_config_mirror\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_label_component\n    target_label: __service__\n  - source_labels:\n    - __meta_kubernetes_pod_node_name\n    target_label: __host__\n  - action: drop\n    regex: ^$\n    source_labels:\n    - __service__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n  - action: replace\n    replacement: &lt;span&gt;$1&lt;/span&gt;\n    separator: /\n    source_labels:\n    - __meta_kubernetes_namespace\n    - __service__\n    target_label: job\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_name\n    target_label: instance\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_container_name\n    target_label: container_name\n  - replacement: /var/log/pods/*&lt;span&gt;$1&lt;/span&gt;/*.log\n    separator: /\n    source_labels:\n    - __meta_kubernetes_pod_annotation_kubernetes_io_config_mirror\n    - __meta_kubernetes_pod_container_name\n    target_label: __path__\n&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;&quot;kind&quot;&lt;/span&gt;: &lt;span&gt;&quot;ConfigMap&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;metadata&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;creationTimestamp&quot;&lt;/span&gt;: &lt;span&gt;&quot;2019-09-05T01:05:03Z&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;labels&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;app&quot;&lt;/span&gt;: &lt;span&gt;&quot;promtail&quot;&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;&quot;chart&quot;&lt;/span&gt;: &lt;span&gt;&quot;promtail-0.12.0&quot;&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;&quot;heritage&quot;&lt;/span&gt;: &lt;span&gt;&quot;Tiller&quot;&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;&quot;release&quot;&lt;/span&gt;: &lt;span&gt;&quot;lame-zorse&quot;&lt;/span&gt;&lt;br/&gt;        },&lt;br/&gt;        &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;lame-zorse-promtail&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;namespace&quot;&lt;/span&gt;: &lt;span&gt;&quot;loki&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;resourceVersion&quot;&lt;/span&gt;: &lt;span&gt;&quot;17921611&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;selfLink&quot;&lt;/span&gt;: &lt;span&gt;&quot;/api/v1/namespaces/loki/configmaps/lame-zorse-promtail&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;uid&quot;&lt;/span&gt;: &lt;span&gt;&quot;30fcb896-cf79-11e9-b58e-e4a8b6cc47d2&quot;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;oc create -f daemonset.json -n loki&lt;/p&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;daemonset.json如下：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;pre&gt;&lt;p&gt;     {&lt;br/&gt;            &lt;span&gt;&quot;apiVersion&quot;&lt;/span&gt;: &lt;span&gt;&quot;apps/v1&quot;&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;&quot;kind&quot;&lt;/span&gt;: &lt;span&gt;&quot;DaemonSet&quot;&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;&quot;metadata&quot;&lt;/span&gt;: {&lt;br/&gt;                &lt;span&gt;&quot;annotations&quot;&lt;/span&gt;: {&lt;br/&gt;                    &lt;span&gt;&quot;deployment.kubernetes.io/revision&quot;&lt;/span&gt;: &lt;span&gt;&quot;2&quot;&lt;/span&gt;&lt;br/&gt;                },&lt;br/&gt;                &lt;span&gt;&quot;creationTimestamp&quot;&lt;/span&gt;: &lt;span&gt;&quot;2019-09-05T01:16:37Z&quot;&lt;/span&gt;,&lt;br/&gt;                &lt;span&gt;&quot;generation&quot;&lt;/span&gt;: 2,&lt;br/&gt;                &lt;span&gt;&quot;labels&quot;&lt;/span&gt;: {&lt;br/&gt;                    &lt;span&gt;&quot;app&quot;&lt;/span&gt;: &lt;span&gt;&quot;promtail&quot;&lt;/span&gt;,&lt;br/&gt;                    &lt;span&gt;&quot;chart&quot;&lt;/span&gt;: &lt;span&gt;&quot;promtail-0.12.0&quot;&lt;/span&gt;,&lt;br/&gt;                    &lt;span&gt;&quot;heritage&quot;&lt;/span&gt;: &lt;span&gt;&quot;Tiller&quot;&lt;/span&gt;,&lt;br/&gt;                    &lt;span&gt;&quot;release&quot;&lt;/span&gt;: &lt;span&gt;&quot;lame-zorse&quot;&lt;/span&gt;&lt;br/&gt;                },&lt;br/&gt;                &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;lame-zorse-promtail&quot;&lt;/span&gt;,&lt;br/&gt;                &lt;span&gt;&quot;namespace&quot;&lt;/span&gt;: &lt;span&gt;&quot;loki&quot;&lt;/span&gt;&lt;br/&gt;            },&lt;br/&gt;            &lt;span&gt;&quot;spec&quot;&lt;/span&gt;: {&lt;br/&gt;                &lt;span&gt;&quot;progressDeadlineSeconds&quot;&lt;/span&gt;: 600,&lt;br/&gt;                &lt;span&gt;&quot;replicas&quot;&lt;/span&gt;: 1,&lt;br/&gt;                &lt;span&gt;&quot;revisionHistoryLimit&quot;&lt;/span&gt;: 10,&lt;br/&gt;                &lt;span&gt;&quot;selector&quot;&lt;/span&gt;: {&lt;br/&gt;                    &lt;span&gt;&quot;matchLabels&quot;&lt;/span&gt;: {&lt;br/&gt;                        &lt;span&gt;&quot;app&quot;&lt;/span&gt;: &lt;span&gt;&quot;promtail&quot;&lt;/span&gt;,&lt;br/&gt;                        &lt;span&gt;&quot;release&quot;&lt;/span&gt;: &lt;span&gt;&quot;lame-zorse&quot;&lt;/span&gt;&lt;br/&gt;                    }&lt;br/&gt;                },&lt;br/&gt;                &lt;span&gt;&quot;strategy&quot;&lt;/span&gt;: {&lt;br/&gt;                    &lt;span&gt;&quot;rollingUpdate&quot;&lt;/span&gt;: {&lt;br/&gt;                        &lt;span&gt;&quot;maxSurge&quot;&lt;/span&gt;: 1,&lt;br/&gt;                        &lt;span&gt;&quot;maxUnavailable&quot;&lt;/span&gt;: 1&lt;br/&gt;                    },&lt;br/&gt;                    &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;RollingUpdate&quot;&lt;/span&gt;&lt;br/&gt;                },&lt;br/&gt;                &lt;span&gt;&quot;template&quot;&lt;/span&gt;: {&lt;br/&gt;                    &lt;span&gt;&quot;metadata&quot;&lt;/span&gt;: {&lt;br/&gt;                        &lt;span&gt;&quot;annotations&quot;&lt;/span&gt;: {&lt;br/&gt;                            &lt;span&gt;&quot;checksum/config&quot;&lt;/span&gt;: &lt;span&gt;&quot;75a25ee4f2869f54d394bf879549a9c89c343981a648f8d878f69bad65dba809&quot;&lt;/span&gt;,&lt;br/&gt;                            &lt;span&gt;&quot;prometheus.io/port&quot;&lt;/span&gt;: &lt;span&gt;&quot;http-metrics&quot;&lt;/span&gt;,&lt;br/&gt;                            &lt;span&gt;&quot;prometheus.io/scrape&quot;&lt;/span&gt;: &lt;span&gt;&quot;true&quot;&lt;/span&gt;&lt;br/&gt;                        },&lt;br/&gt;                        &lt;span&gt;&quot;creationTimestamp&quot;&lt;/span&gt;: null,&lt;br/&gt;                        &lt;span&gt;&quot;labels&quot;&lt;/span&gt;: {&lt;br/&gt;                            &lt;span&gt;&quot;app&quot;&lt;/span&gt;: &lt;span&gt;&quot;promtail&quot;&lt;/span&gt;,&lt;br/&gt;                            &lt;span&gt;&quot;release&quot;&lt;/span&gt;: &lt;span&gt;&quot;lame-zorse&quot;&lt;/span&gt;&lt;br/&gt;                        }&lt;br/&gt;                    },&lt;br/&gt;                    &lt;span&gt;&quot;spec&quot;&lt;/span&gt;: {&lt;br/&gt;                        &lt;span&gt;&quot;affinity&quot;&lt;/span&gt;: {},&lt;br/&gt;                        &lt;span&gt;&quot;containers&quot;&lt;/span&gt;: [&lt;br/&gt;                            {&lt;br/&gt;                                &lt;span&gt;&quot;args&quot;&lt;/span&gt;: [&lt;br/&gt;                                    &lt;span&gt;&quot;-config.file=/etc/promtail/promtail.yaml&quot;&lt;/span&gt;,&lt;br/&gt;                                    &lt;span&gt;&quot;-client.url=http://loki.loki.svc:3100/api/prom/push&quot;&lt;/span&gt;&lt;br/&gt;                                ],&lt;br/&gt;                                &lt;span&gt;&quot;env&quot;&lt;/span&gt;: [&lt;br/&gt;                                    {&lt;br/&gt;                                        &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;HOSTNAME&quot;&lt;/span&gt;,&lt;br/&gt;                                        &lt;span&gt;&quot;valueFrom&quot;&lt;/span&gt;: {&lt;br/&gt;                                            &lt;span&gt;&quot;fieldRef&quot;&lt;/span&gt;: {&lt;br/&gt;                                                &lt;span&gt;&quot;apiVersion&quot;&lt;/span&gt;: &lt;span&gt;&quot;v1&quot;&lt;/span&gt;,&lt;br/&gt;                                                &lt;span&gt;&quot;fieldPath&quot;&lt;/span&gt;: &lt;span&gt;&quot;spec.nodeName&quot;&lt;/span&gt;&lt;br/&gt;                                            }&lt;br/&gt;                                        }&lt;br/&gt;                                    }&lt;br/&gt;                                ],&lt;br/&gt;                                &lt;span&gt;&quot;image&quot;&lt;/span&gt;: &lt;span&gt;&quot;grafana/promtail:v0.3.0&quot;&lt;/span&gt;,&lt;br/&gt;                                &lt;span&gt;&quot;imagePullPolicy&quot;&lt;/span&gt;: &lt;span&gt;&quot;IfNotPresent&quot;&lt;/span&gt;,&lt;br/&gt;                                &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;promtail&quot;&lt;/span&gt;,&lt;br/&gt;                                &lt;span&gt;&quot;ports&quot;&lt;/span&gt;: [&lt;br/&gt;                                    {&lt;br/&gt;                                        &lt;span&gt;&quot;containerPort&quot;&lt;/span&gt;: 3101,&lt;br/&gt;                                        &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;http-metrics&quot;&lt;/span&gt;,&lt;br/&gt;                                        &lt;span&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span&gt;&quot;TCP&quot;&lt;/span&gt;&lt;br/&gt;                                    }&lt;br/&gt;                                ],&lt;br/&gt;                                &lt;span&gt;&quot;readinessProbe&quot;&lt;/span&gt;: {&lt;br/&gt;                                    &lt;span&gt;&quot;failureThreshold&quot;&lt;/span&gt;: 5,&lt;br/&gt;                                    &lt;span&gt;&quot;httpGet&quot;&lt;/span&gt;: {&lt;br/&gt;                                        &lt;span&gt;&quot;path&quot;&lt;/span&gt;: &lt;span&gt;&quot;/ready&quot;&lt;/span&gt;,&lt;br/&gt;                                        &lt;span&gt;&quot;port&quot;&lt;/span&gt;: &lt;span&gt;&quot;http-metrics&quot;&lt;/span&gt;,&lt;br/&gt;                                        &lt;span&gt;&quot;scheme&quot;&lt;/span&gt;: &lt;span&gt;&quot;HTTP&quot;&lt;/span&gt;&lt;br/&gt;                                    },&lt;br/&gt;                                    &lt;span&gt;&quot;initialDelaySeconds&quot;&lt;/span&gt;: 10,&lt;br/&gt;                                    &lt;span&gt;&quot;periodSeconds&quot;&lt;/span&gt;: 10,&lt;br/&gt;                                    &lt;span&gt;&quot;successThreshold&quot;&lt;/span&gt;: 1,&lt;br/&gt;                                    &lt;span&gt;&quot;timeoutSeconds&quot;&lt;/span&gt;: 1&lt;br/&gt;                                },&lt;br/&gt;                                &lt;span&gt;&quot;resources&quot;&lt;/span&gt;: {},&lt;br/&gt;                                &lt;span&gt;&quot;securityContext&quot;&lt;/span&gt;: {&lt;br/&gt;                                    &lt;span&gt;&quot;readOnlyRootFilesystem&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;                                    &lt;span&gt;&quot;runAsUser&quot;&lt;/span&gt;: 0&lt;br/&gt;                                },&lt;br/&gt;                                &lt;span&gt;&quot;terminationMessagePath&quot;&lt;/span&gt;: &lt;span&gt;&quot;/dev/termination-log&quot;&lt;/span&gt;,&lt;br/&gt;                                &lt;span&gt;&quot;terminationMessagePolicy&quot;&lt;/span&gt;: &lt;span&gt;&quot;File&quot;&lt;/span&gt;,&lt;br/&gt;                                &lt;span&gt;&quot;volumeMounts&quot;&lt;/span&gt;: [&lt;br/&gt;                                    {&lt;br/&gt;                                        &lt;span&gt;&quot;mountPath&quot;&lt;/span&gt;: &lt;span&gt;&quot;/etc/promtail&quot;&lt;/span&gt;,&lt;br/&gt;                                        &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;config&quot;&lt;/span&gt;&lt;br/&gt;                                    },&lt;br/&gt;                                    {&lt;br/&gt;                                        &lt;span&gt;&quot;mountPath&quot;&lt;/span&gt;: &lt;span&gt;&quot;/run/promtail&quot;&lt;/span&gt;,&lt;br/&gt;                                        &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;run&quot;&lt;/span&gt;&lt;br/&gt;                                    },&lt;br/&gt;                                    {&lt;br/&gt;                                        &lt;span&gt;&quot;mountPath&quot;&lt;/span&gt;: &lt;span&gt;&quot;/var/lib/docker/containers&quot;&lt;/span&gt;,&lt;br/&gt;                                        &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;docker&quot;&lt;/span&gt;,&lt;br/&gt;                                        &lt;span&gt;&quot;readOnly&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;                                    },&lt;br/&gt;                                    {&lt;br/&gt;                                        &lt;span&gt;&quot;mountPath&quot;&lt;/span&gt;: &lt;span&gt;&quot;/var/log/pods&quot;&lt;/span&gt;,&lt;br/&gt;                                        &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;pods&quot;&lt;/span&gt;,&lt;br/&gt;                                        &lt;span&gt;&quot;readOnly&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;                                    }&lt;br/&gt;                                ]&lt;br/&gt;                            }&lt;br/&gt;                        ],&lt;br/&gt;                        &lt;span&gt;&quot;dnsPolicy&quot;&lt;/span&gt;: &lt;span&gt;&quot;ClusterFirst&quot;&lt;/span&gt;,&lt;br/&gt;                        &lt;span&gt;&quot;restartPolicy&quot;&lt;/span&gt;: &lt;span&gt;&quot;Always&quot;&lt;/span&gt;,&lt;br/&gt;                        &lt;span&gt;&quot;schedulerName&quot;&lt;/span&gt;: &lt;span&gt;&quot;default-scheduler&quot;&lt;/span&gt;,&lt;br/&gt;                        &lt;span&gt;&quot;securityContext&quot;&lt;/span&gt;: {},&lt;br/&gt;                        &lt;span&gt;&quot;terminationGracePeriodSeconds&quot;&lt;/span&gt;: 30,&lt;br/&gt;                        &lt;span&gt;&quot;volumes&quot;&lt;/span&gt;: [&lt;br/&gt;                            {&lt;br/&gt;                                &lt;span&gt;&quot;configMap&quot;&lt;/span&gt;: {&lt;br/&gt;                                    &lt;span&gt;&quot;defaultMode&quot;&lt;/span&gt;: 420,&lt;br/&gt;                                    &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;lame-zorse-promtail&quot;&lt;/span&gt;&lt;br/&gt;                                },&lt;br/&gt;                                &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;config&quot;&lt;/span&gt;&lt;br/&gt;                            },&lt;br/&gt;                            {&lt;br/&gt;                                &lt;span&gt;&quot;hostPath&quot;&lt;/span&gt;: {&lt;br/&gt;                                    &lt;span&gt;&quot;path&quot;&lt;/span&gt;: &lt;span&gt;&quot;/run/promtail&quot;&lt;/span&gt;,&lt;br/&gt;                                    &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;                                },&lt;br/&gt;                                &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;run&quot;&lt;/span&gt;&lt;br/&gt;                            },&lt;br/&gt;                            {&lt;br/&gt;                                &lt;span&gt;&quot;hostPath&quot;&lt;/span&gt;: {&lt;br/&gt;                                    &lt;span&gt;&quot;path&quot;&lt;/span&gt;: &lt;span&gt;&quot;/var/lib/docker/containers&quot;&lt;/span&gt;,&lt;br/&gt;                                    &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;                                },&lt;br/&gt;                                &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;docker&quot;&lt;/span&gt;&lt;br/&gt;                            },&lt;br/&gt;                            {&lt;br/&gt;                                &lt;span&gt;&quot;hostPath&quot;&lt;/span&gt;: {&lt;br/&gt;                                    &lt;span&gt;&quot;path&quot;&lt;/span&gt;: &lt;span&gt;&quot;/var/log/pods&quot;&lt;/span&gt;,&lt;br/&gt;                                    &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;                                },&lt;br/&gt;                                &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;pods&quot;&lt;/span&gt;&lt;br/&gt;                            }&lt;br/&gt;                        ]&lt;br/&gt;                    }&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }&lt;/p&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;安装服务&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;pre&gt;&lt;pre&gt;&lt;p&gt;oc create -f service.json -n loki&lt;/p&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;service.json的内容如下：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;pre&gt;&lt;p&gt;{&lt;br/&gt;    &lt;span&gt;&quot;apiVersion&quot;&lt;/span&gt;: &lt;span&gt;&quot;v1&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;kind&quot;&lt;/span&gt;: &lt;span&gt;&quot;Service&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;metadata&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;creationTimestamp&quot;&lt;/span&gt;: &lt;span&gt;&quot;2019-09-04T09:37:49Z&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;loki&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;namespace&quot;&lt;/span&gt;: &lt;span&gt;&quot;loki&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;resourceVersion&quot;&lt;/span&gt;: &lt;span&gt;&quot;17800188&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;selfLink&quot;&lt;/span&gt;: &lt;span&gt;&quot;/api/v1/namespaces/loki/services/loki&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;uid&quot;&lt;/span&gt;: &lt;span&gt;&quot;a87fe237-cef7-11e9-b58e-e4a8b6cc47d2&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;&quot;spec&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;externalTrafficPolicy&quot;&lt;/span&gt;: &lt;span&gt;&quot;Cluster&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;ports&quot;&lt;/span&gt;: [&lt;br/&gt;            {&lt;br/&gt;                &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;lokiport&quot;&lt;/span&gt;,&lt;br/&gt;                &lt;span&gt;&quot;port&quot;&lt;/span&gt;: 3100,&lt;br/&gt;                &lt;span&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span&gt;&quot;TCP&quot;&lt;/span&gt;,&lt;br/&gt;                &lt;span&gt;&quot;targetPort&quot;&lt;/span&gt;: 3100&lt;br/&gt;            }&lt;br/&gt;        ],&lt;br/&gt;        &lt;span&gt;&quot;selector&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;app&quot;&lt;/span&gt;: &lt;span&gt;&quot;loki&quot;&lt;/span&gt;&lt;br/&gt;        },&lt;br/&gt;        &lt;span&gt;&quot;sessionAffinity&quot;&lt;/span&gt;: &lt;span&gt;&quot;None&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;NodePort&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;&quot;status&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;loadBalancer&quot;&lt;/span&gt;: {}&lt;br/&gt;    }&lt;/p&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;Loki提供了HTTP接口，我们这里就不详解了，大家可以看：https://github.com/grafana/loki/blob/master/docs/api.md&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们这里说下查询的接口如何使用。&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第一步，获取当前Loki的元数据类型：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre&gt;&lt;p&gt;curl http://192.168.25.30:30972/api/prom/label&lt;br/&gt;{&lt;br/&gt; &lt;span&gt;&quot;values&quot;&lt;/span&gt;: [&lt;span&gt;&quot;alertmanager&quot;&lt;/span&gt;, &lt;span&gt;&quot;app&quot;&lt;/span&gt;, &lt;span&gt;&quot;component&quot;&lt;/span&gt;, &lt;span&gt;&quot;container_name&quot;&lt;/span&gt;, &lt;span&gt;&quot;controller_revision_hash&quot;&lt;/span&gt;, &lt;span&gt;&quot;deployment&quot;&lt;/span&gt;, &lt;span&gt;&quot;deploymentconfig&quot;&lt;/span&gt;, &lt;span&gt;&quot;docker_registry&quot;&lt;/span&gt;, &lt;span&gt;&quot;draft&quot;&lt;/span&gt;, &lt;span&gt;&quot;filename&quot;&lt;/span&gt;, &lt;span&gt;&quot;instance&quot;&lt;/span&gt;, &lt;span&gt;&quot;job&quot;&lt;/span&gt;, &lt;span&gt;&quot;logging_infra&quot;&lt;/span&gt;, &lt;span&gt;&quot;metrics_infra&quot;&lt;/span&gt;, &lt;span&gt;&quot;name&quot;&lt;/span&gt;, &lt;span&gt;&quot;namespace&quot;&lt;/span&gt;, &lt;span&gt;&quot;openshift_io_component&quot;&lt;/span&gt;, &lt;span&gt;&quot;pod_template_generation&quot;&lt;/span&gt;, &lt;span&gt;&quot;pod_template_hash&quot;&lt;/span&gt;, &lt;span&gt;&quot;project&quot;&lt;/span&gt;, &lt;span&gt;&quot;projectname&quot;&lt;/span&gt;, &lt;span&gt;&quot;prometheus&quot;&lt;/span&gt;, &lt;span&gt;&quot;provider&quot;&lt;/span&gt;, &lt;span&gt;&quot;release&quot;&lt;/span&gt;, &lt;span&gt;&quot;router&quot;&lt;/span&gt;, &lt;span&gt;&quot;servicename&quot;&lt;/span&gt;, &lt;span&gt;&quot;statefulset_kubernetes_io_pod_name&quot;&lt;/span&gt;, &lt;span&gt;&quot;stream&quot;&lt;/span&gt;, &lt;span&gt;&quot;tekton_dev_pipeline&quot;&lt;/span&gt;, &lt;span&gt;&quot;tekton_dev_pipelineRun&quot;&lt;/span&gt;, &lt;span&gt;&quot;tekton_dev_pipelineTask&quot;&lt;/span&gt;, &lt;span&gt;&quot;tekton_dev_task&quot;&lt;/span&gt;, &lt;span&gt;&quot;tekton_dev_taskRun&quot;&lt;/span&gt;, &lt;span&gt;&quot;type&quot;&lt;/span&gt;, &lt;span&gt;&quot;webconsole&quot;&lt;/span&gt;]&lt;br/&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;第二步，获取某个元数据类型的值：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre&gt;&lt;p&gt;curl http://192.168.25.30:30972/api/prom/label/namespace/values&lt;br/&gt;{&lt;span&gt;&quot;values&quot;&lt;/span&gt;:[&lt;span&gt;&quot;cicd&quot;&lt;/span&gt;,&lt;span&gt;&quot;default&quot;&lt;/span&gt;,&lt;span&gt;&quot;gitlab&quot;&lt;/span&gt;,&lt;span&gt;&quot;grafanaserver&quot;&lt;/span&gt;,&lt;span&gt;&quot;jenkins&quot;&lt;/span&gt;,&lt;span&gt;&quot;jx-staging&quot;&lt;/span&gt;,&lt;span&gt;&quot;kube-system&quot;&lt;/span&gt;,&lt;span&gt;&quot;loki&quot;&lt;/span&gt;,&lt;span&gt;&quot;mysql-exporter&quot;&lt;/span&gt;,&lt;span&gt;&quot;new2&quot;&lt;/span&gt;,&lt;span&gt;&quot;openshift-console&quot;&lt;/span&gt;,&lt;span&gt;&quot;openshift-infra&quot;&lt;/span&gt;,&lt;span&gt;&quot;openshift-logging&quot;&lt;/span&gt;,&lt;span&gt;&quot;openshift-monitoring&quot;&lt;/span&gt;,&lt;span&gt;&quot;openshift-node&quot;&lt;/span&gt;,&lt;span&gt;&quot;openshift-sdn&quot;&lt;/span&gt;,&lt;span&gt;&quot;openshift-web-console&quot;&lt;/span&gt;,&lt;span&gt;&quot;tekton-pipelines&quot;&lt;/span&gt;,&lt;span&gt;&quot;test111&quot;&lt;/span&gt;]}&lt;/p&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;第三步，根据label进行查询，例如：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre&gt;&lt;p&gt;http://192.168.25.30:30972/api/prom/query?direction=BACKWARD&amp;amp;&lt;span&gt;limit&lt;/span&gt;=1000&amp;amp;regexp=&amp;amp;query={namespace=&lt;span&gt;&quot;cicd&quot;&lt;/span&gt;}&amp;amp;start=1567644457221000000&amp;amp;end=1567730857221000000&amp;amp;refId=A&lt;/p&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;参数解析：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;query：一种查询语法详细见下面章节，{name=~“mysql.+”} or {namespace=“cicd”} |= &quot;error&quot;表示查询，namespace为CI/CD的日志中，有error字样的信息。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;limit：返回日志的数量&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;start：开始时间，Unix时间表示方法 默认为，一小时前时间&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;end：结束时间，默认为当前时间&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;direction：forward或者backward，指定limit时候有用，默认为 backward&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;regexp：对结果进行regex过滤&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;LogQL 语法&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;选择器&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于查询表达式的标签部分，将放在{}中，多个标签表达式用逗号分隔：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre&gt;&lt;p&gt;{app=&lt;span&gt;&quot;mysql&quot;&lt;/span&gt;,name=&lt;span&gt;&quot;mysql-backup&quot;&lt;/span&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;支持的符号有：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;=：完全相同。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;!=：不平等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;=~：正则表达式匹配。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;!~：不要正则表达式匹配。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;过滤表达式&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;编写日志流选择器后，您可以通过编写搜索表达式进一步过滤结果。&lt;/span&gt;&lt;span&gt;搜索表达式可以文本或正则表达式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;{job=“mysql”} |= “error”&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;{name=“kafka”} |~ “tsdb-ops.*io:2003”&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;{instance=~“kafka-[23]”,name=“kafka”} != kafka.server:type=ReplicaManager&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;支持多个过滤：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;{job=“mysql”} |= “error” != “timeout”&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;目前支持的操作符：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;|= line包含字符串。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;!= line不包含字符串。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;|~ line匹配正则表达式。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;!~ line与正则表达式不匹配。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;表达式遵循https://github.com/google/re2/wiki/Syntax语法。&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUyMDA4OTY3MQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/TwK74MzofXdtvHKjv7OHYYSTQ2QOVuyAia3LaU56kibxKLlX5Lo9bgeUfz1R4JDmdW7ZGYSLqsiaBl3nTOwOmFOFQ/0?wx_fmt=png&quot; data-nickname=&quot;浪尖聊大数据&quot; data-alias=&quot;bigdatatip&quot; data-signature=&quot;主要分享大数据框架，如spark，flink，kafka，hbase原理源码，同时会分享数据仓库，图计算等浪尖擅长领域。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>