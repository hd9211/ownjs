<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e5b65672b2a44aabb6818d65eea7d69e</guid>
<title>曝光了，清华计算机系最牛的课</title>
<link>https://toutiao.io/k/71s8fte</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;大家好，我是石头哥。&lt;/p&gt;&lt;p&gt;今天这篇文章，墙裂建议想提高核心竞争力的程序员同学重点关注，并付出行动。&lt;/p&gt;&lt;p&gt;我曾经在 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247484698&amp;amp;idx=1&amp;amp;sn=03cc4636e7ee7364a85788a98809cc03&amp;amp;chksm=eb4704fedc308de8efd48ab9aed4fd1ddee5665d8e76d0d3767c1f704eac8b15a83e450a08f1&amp;amp;token=920855099&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;从一道面试题谈谈一线大厂码农应该具备的基本能力&lt;/a&gt;这篇文章中，强调我们在仓促地码着繁琐的业务代码时候，希望不要抛弃一些基础的东西，多培养一下我们的编程素养。&lt;/p&gt;&lt;p&gt;在用编程语言，利用各种工具来实现我们想要达到的目的的时候，能做到“知其然，知其所以然”更好。&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据结构&lt;/span&gt;就是其中最重要的基础之一。&lt;/p&gt;&lt;p&gt;我也曾经在多次场合推荐过（比如&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247492954&amp;amp;idx=1&amp;amp;sn=b487e0164a11e6753affc8de19c92647&amp;amp;chksm=eb44e4bedc336da843f9b0a3d9b6295727e025018b039dc654ac92672e85032307d769269ea7&amp;amp;token=920855099&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;万字长文讲述我是怎样保送清华的 | 寒门学子奋斗史（四）&lt;/a&gt;），清华计算机系的邓老师这门公开课《数据结构》。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.24887556221889057&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1bPolj4q9veQXgkosN7f6WdV8ZY49xZxicfNCcbwo5UUfJYlmmXIGz2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1334&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多个场合爆吹邓老师的《数据结构》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;偶然发现这门课程，今年上半年又开课了，因此特此又来推荐给大家，发自内心推荐，实名点赞。&lt;/p&gt;&lt;p&gt;邓老师深受清华校内外的学生喜爱，他和他的课程也获奖无数，后文你将看到大家对邓老师的评价。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5817490494296578&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1Ig2e0PT35bBH2swZa1Rn2bQbiboibicyic8e8SZsagNPbnlKY6yh2mOicUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;526&quot;/&gt;&lt;figcaption&gt;43W+人学习&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;缘起&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我在清华时，上过邓老师的 2 门课程：《数据结构》、《计算几何》。《计算几何》研究生期间选修的专业课程，《数据结构》是旁听本科生的课程。&lt;/p&gt;&lt;p&gt;亲身体验过，那是真的很赞，被实力圈粉。他在讲授《数据结构》和《计算几何》方面拥有20多年的经验，课堂用的 PPT 和 动画效果也特别赞、特别赞、特别赞（还能额外学到人文知识！）。&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是我上过现场效果最好，最生动的课程（没有之一）。在学校&lt;/span&gt;&lt;span&gt;时候，线下教室也饱满，线上公开课学堂在线也是爆满。&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5969498910675382&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia15atSkvUrdxD0pIVFXDQWfgst0vtYNC2lW6ARicGQlmibt1AcA5I3fZNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;918&quot;/&gt;&lt;figcaption&gt;我曾经报名的课程&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;这真不是我在这里爆吹，这门课程是清华大学评选出的首批 7 门标杆课程之一。你可以去看看知乎上的讨论（https://www.zhihu.com/question/306632594）。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8487874465049928&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1pddzEhia4xfHYXicZLy2LmX5mIibfyHHbcM1Zo2ibysELiaxlzf7QpibCNlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1402&quot;/&gt;&lt;figcaption&gt;邓公《数据结构》实至名归，截图自知乎&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.446064139941691&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia16F9MoVOCgdGa8Oq7VBGIebaBUVLEVwgZMRVpJ5b1MrBrq33sqlMpVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1372&quot;/&gt;&lt;figcaption&gt;知乎评论：我从来没碰到过能如此深入浅出把数据结构讲得这么透彻又有趣的老师&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;识邓公好比遇美酒&lt;/span&gt;&lt;/h2&gt;&lt;figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.437570303712036&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1GGFNlIdEmibhBS00tdNjobOiby8icNPe4n7YGdXWJkJdIb9p17chJ08BA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;889&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;邓老师主页封面&lt;/span&gt;&lt;/p&gt;&lt;/figure&gt;&lt;p&gt;邓俊辉，清华大学计算机系教授。1993和1997年分别于清华大学计算机系获学士、博士学位，1997年起在清华大学任教，他在讲授“数据结构”和“计算几何”方面拥有20多年的经验。&lt;/p&gt;&lt;p&gt;古人云，“天若不爱酒，酒星不在天；地若不爱酒，地应无酒泉”，天地爱酒，人亦如此。&lt;/p&gt;&lt;p&gt;有学子言：“识邓公好比路遇美酒：越存越香，越品越醇”，好比美酒的“邓公”所言即是清华大学&lt;strong&gt;新百年教学成就奖&lt;/strong&gt;的获得者，计算机系教授 —— 邓俊辉。（来源：https://news.tsinghua.edu.cn/info/1070/40526.htm）&lt;/p&gt;&lt;p&gt;邓老师说，数据结构与算法（简称DSA）是个非常开放的专题，学习过程没有终点，任何一门课程都不可能穷尽：(内容来自邓老师课程主页)&lt;/p&gt;&lt;p&gt;若将DSA比作汽车，则熟悉基本的数据结构的基本功能与使用方法，犹如拿驾照会开车能上道。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;懂得不同DSA之间的差异及其适用场合，懂得针对问题需要选取适当的DSA，犹如懂得如何选购适宜于自己的汽车。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;懂得对DSA做适当的裁剪、扩充和改造，并优化组合，犹如玩车的行家里手，有DIY的能力和乐趣。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;探索DSA的优化极限，能够完成从内部优化到外部封装的整个过程，则是设计师与工程师的任务与要求。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;课程内容&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;PPT、板书、教材（示例代码）、教学演示，无一不称赞。&lt;/p&gt;&lt;h3&gt;制作精美的 PPT&lt;/h3&gt;&lt;p&gt;首先，我们来看看 PPT（文末附 PPT 下载）&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6400885935769657&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1aSnfQcY6rKaZyynPRNVAxlKmUug13UpfpwVgpNiaLd8sYQtiarAYjkEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1806&quot;/&gt;&lt;figcaption&gt;PPT，邓老师每年会更新迭代，图为 2021 年&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;大部分章节的首页，均有一两句“引言”：或是名言名句，或者名著节选，也有歌词。&lt;/p&gt;&lt;p&gt;可怕的是，还基本上都会和本节的内容有关系！有关系！有关系！（可见邓老师的用心程度之高！）&lt;/p&gt;&lt;p&gt;比如随便选了其中的 3 页 PPT：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;栈 —— “陛下用群臣，如积薪耳，后来者居上”，语出《史记·汲郑列传》。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;红黑树 —— “这时，我看见两只大蚂蚁，一只红不棱登，另一只个儿特大，差不离有半英寸长，是黑不溜秋的，它们两个正在相互凶殴...”，美国作家 亨利·戴维·梭罗 的《瓦尔登湖》&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图的广度优先搜索 —— 《五环之歌》，岳云鹏&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.563&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1O57Jebgu7FU91WmQrm4pQMSyJzhEDSIaWiafXobM4PosDqH9QZHh6yg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2000&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5564278704612365&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1YZf2bEicRbWeAzd9ozlWKhcwJER6qPPjoVKnm9EfvJ5WrxVTrB5nxmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2038&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.554679802955665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1cBEaXWibU84pqA4sd8SSLM7TC9Iaof0rS4q36HViakt21sVOiboDIjQiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2030&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&amp;lt;&amp;lt;&amp;lt; 记得左右滑动，一共 3 张 &amp;gt;&amp;gt;&amp;gt;&lt;/p&gt;&lt;p&gt;不好意思，知识储备不够，看《数据结构》PPT，让我一边百度一边，学起了人文知识。难怪听说不少非计算机相关专业的学生也来旁听课程，原来是为了学人文知识，笑😁&lt;/p&gt;&lt;h3&gt;生动的板书演示&lt;/h3&gt;&lt;p&gt;我们再来看看，邓老师的板书演示。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5622254758418741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1wGotzToe0noMbjKibc57T3SyUXFwJ62RXsibyujH8Q4S9ZZaG0KBOMEA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;683&quot;/&gt;&lt;figcaption&gt;看看这板书演示1&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5622254758418741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1P1OAxH8muAeibcQMsjqj86x34F8gxjGvcOcVHLNvOLIaAn90muS0GGA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;683&quot;/&gt;&lt;figcaption&gt;看看这板书演示2&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;课堂效果好的背后其实还有一套软件，叫“LectureMate”，是邓老师开发的教学演讲辅助工具。&lt;/p&gt;&lt;p&gt;邓老师也是无偿捐献出来供非盈利使用，可直接到老师主页下载使用。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.42962962962962964&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1IWg9KA9V9TBeeI8L9CSzfxhicnKicf4L6DTLib0TfcGwqRo2xuhHLox4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;正规院校教师可直接免费使用完整功能的教学工具&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;不得不说，邓老师的字也是非常漂亮。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.3074670571010249&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1MHia4UrjOy2sjjnL7VRbLob9TJu3x0mEvdUd4AJwW3xShKiakNwn9zCA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;683&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;邓老师书法&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-tools=&quot;新媒体排版&quot; data-id=&quot;1259732&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6713754646840149&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia16oibN9t1fR88aqNkNMBvkfTRzk6VLqI0Yqm1icicNkF9cs7njvLibBNgZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1345&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;邓老师写的书签送给学生，图片来源见水印&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;h3&gt;教材、教学演示、配套源码&lt;/h3&gt;&lt;p&gt;我们再来看看教材。（在公众号“程序猿石头”后台回复“清华数据结构” 免费下载）&lt;/p&gt;&lt;p&gt;教材，到目前为止一共出了 3 版，最新版如下所示：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7819548872180451&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1xwMabc06OKV1JmdvicYq1SUl6ib1ts1YoSkWbZn8wbxhOP4f0b2NFwkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;798&quot;/&gt;&lt;figcaption&gt;数据结构第三版封面&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7309697601668405&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1wmIG0wdiaSSX3ea0nkicB6mLUUD6aXUbCQtpkhECzXgwgHvBXfBibQsbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;959&quot;/&gt;&lt;figcaption&gt;数据结构第三版截图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我手里有的实体书是第二版，长这个样子：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7437145174371452&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1QOR2sbDp6ic1euC3xrbuL3VaGj5ht3v65k6a964tdLNmzmtu3wJ4paA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1233&quot;/&gt;&lt;figcaption&gt;数据结构（C++语言版）&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;目前，邓老师教材均以 C++语言作为示例，但其实数据结构掌握并不依赖于某一门特定的语言。重点是我们要掌握其中的思想。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9724025974025974&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1lfMD6RdaCU4bK7icu4hlzRialBQRYwM3xGZPNsdnqibURVugAWouuh7Fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1232&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;配套源码&lt;/figcaption&gt;&lt;p&gt;我看邓老师，早年期间（2006年）也出过 Java 版本的教材，如下：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6190476190476191&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1d9ANs0WTib0BgpWnhtoSxoVByPiawMY5RDrPzqqUI3TZiaqDJl1LdZH8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1008&quot;/&gt;&lt;figcaption&gt;数据结构与算法（Java描述）&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;邓老师一直把教书育人、传播知识放在首位。你看，他将上述所有相关教学材料均向公众开放。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5639913232104121&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1EJTD7jPqWJu68XUP4cjxc5ukSZ4ict2qicfNwynXDLibt8GG2K9ntw0zg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;922&quot;/&gt;&lt;figcaption&gt;邓老师相关教学资料向公共开放&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7684210526315789&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1x9U7wR4O6fjukbibAfcmKEczeh6MTZOkEKibZPe61J8IQ1hmbGSwWTzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;855&quot;/&gt;&lt;/figure&gt;&lt;p&gt;还在等什么呢？抓紧去学堂在线学习邓老师的数据结构课程吧。&lt;/p&gt;&lt;p&gt;这门课程不仅适用于在校生，工作之后，若想补齐巩固相应的基础，也是很好的选择，关键还免费（证书认证收费）。&lt;/p&gt;&lt;p&gt;这不比外面各种培训班香太多吗？&lt;/p&gt;&lt;p&gt;也感谢现在科技的发达，同时也感谢邓老师的无私，让你足不出户即可享受清华名师的教学。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;后记&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;真正能学好了这门课程，什么 BAT 大厂，都是小 case，学完后你找我，帮你推荐到各个大厂。&lt;/p&gt;&lt;p&gt;大家抓紧去清华学堂免费在线注册学习（学堂在线，打钱&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibtwNJw9tAEnJ0KgLBF9RDf1WAZuepzJBBhS9RtjbGqv6adk4pGIrETYs8mFmLUTbqYPQuIt55dbeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;）吧，视频公开课、配合邓老师的教材，真的很棒！网址点击左下角阅读原文直达。&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了方便大家，我已经把相关学习资料下载打包好了（当然你也可以到前文提到的邓老师课程主页下&lt;/span&gt;&lt;span&gt;载），你只需要在公众号后台回复“清华数据结构”，我就将上述所有资料提供给你。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI3OTUzMzcwNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibsGrjJaF5hvicrswVeQicFujw8LhrKnbvzEUPibAQINJDc60oDZ9S1XrQsrxQf6M8iakCatO0YA4jXbvA/0?wx_fmt=png&quot; data-nickname=&quot;程序猿石头&quot; data-alias=&quot;tangleithu&quot; data-signature=&quot;清华毕业的打工仔，分享计算机领域的技术、职场和大学生学习方法，涉及后端技术、互联网、计算机基础、编程技术、程序员职场、程序员面试等话题。欢迎关注。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;点↑小卡片，回复“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;清华数据结构&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”获取公开学习资料&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;学习过程中，有问题欢迎交流讨论。精力有限，不然我组织一波共同学习，定期交流。感兴趣的同学可以进入交流群报团。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你可能还感兴趣：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247488892&amp;amp;idx=1&amp;amp;sn=1b026c5a8688b880ca06c51c816265b1&amp;amp;chksm=eb471498dc309d8eaac5bd296a3971901e624e9abfc5a0add8928f5ebc3a83b8402ebfadd95d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;关于 AI 的数百个问题，清华男神刘云浩教授的 3 万字回复给整得明明白白&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5ffa84268cd775c929002e1dd5b61a74</guid>
<title>并发编程：Double-Checked Locking Pattern</title>
<link>https://toutiao.io/k/a3x8y4h</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Double-Checked Locking Pattern&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;，简称 DCLP，是并发编程的一个常见学习案例。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DCLP 的故事要从一个常见且简单的设计模式 —— 单例（Singleton）模式开始。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;Singleton* &lt;span&gt;Singleton::getInstance&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (instance == &lt;span&gt;nullptr&lt;/span&gt;) {&lt;br/&gt;        instance = &lt;span&gt;new&lt;/span&gt; Singleton;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; instance;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们限制只能通过 &lt;code&gt;getInstance&lt;/code&gt;静态成员函数获取 &lt;code&gt;Singleton&lt;/code&gt;对象，并由 &lt;code&gt;getInstance&lt;/code&gt;函数保证只分配一个实例对象。这样，就可以实现一个简单的单例模式。但是，这里的 &lt;code&gt;getInstance&lt;/code&gt;不是线程安全的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了保证线程安全，我们需要对 &lt;code&gt;getInstance&lt;/code&gt;进行同步，最简单的同步方式，就是使用一个互斥锁（mutex）。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;Singleton* &lt;span&gt;Singleton::getInstance&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;std&lt;/span&gt;::lock_guard&amp;lt;&lt;span&gt;std&lt;/span&gt;::mutex&amp;gt; &lt;span&gt;lock&lt;/span&gt;&lt;span&gt;(instance_mtx)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (instance == &lt;span&gt;nullptr&lt;/span&gt;) {&lt;br/&gt;        instance = &lt;span&gt;new&lt;/span&gt; Singleton;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; instance;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如此，可以保证 &lt;code&gt;getInstance&lt;/code&gt;函数是线程安全的。但是，这会导致在程序的长期运行中产生很多非必要的“加锁”操作——因为在所有线程都看到 &lt;code&gt;instance&lt;/code&gt;成功创建之后，&lt;code&gt;getInstance&lt;/code&gt;就不会有线程安全问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在低并发的场景下，锁争用并不多，这个“加锁”的开销并不明显。但是，在高并发的场景下，存在大量的锁争用，这个“加锁”的开销可能就无法接受了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了减少这种情况下的加锁操作，DCLP 出现了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;Singleton* &lt;span&gt;Singleton::getInstance&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (instance == &lt;span&gt;nullptr&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;&lt;span&gt;std&lt;/span&gt;::lock_guard&amp;lt;&lt;span&gt;std&lt;/span&gt;::mutex&amp;gt; &lt;span&gt;lock&lt;/span&gt;&lt;span&gt;(instance_mtx)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (instance == &lt;span&gt;nullptr&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;auto&lt;/span&gt; t = &lt;span&gt;new&lt;/span&gt; Singleton;&lt;br/&gt;            instance = t;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; instance;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样看起来，如果 &lt;code&gt;instance&lt;/code&gt;已经成功创建，就不会再走“加锁”的路径了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而，这里依然有问题：第一个 &lt;code&gt;instance == nullptr&lt;/code&gt; 没有加锁保护，也不是原子操作。&lt;code&gt;instance = t&lt;/code&gt;也不是原子操作。这意味着，第一个 &lt;code&gt;instance == nullptr&lt;/code&gt;可能看到一个“初始化了一半”的 instance，然后也返回这个“不完整的 instance”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们需要用原子操作来解决这个问题。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;std&lt;/span&gt;::atomic&amp;lt;Singleton*&amp;gt; instance;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Singleton* &lt;span&gt;Singleton::getInstance&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;auto&lt;/span&gt; t = instance.load(&lt;span&gt;std&lt;/span&gt;::memory_order_acquire);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (t == &lt;span&gt;nullptr&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;&lt;span&gt;std&lt;/span&gt;::lock_guard&amp;lt;&lt;span&gt;std&lt;/span&gt;::mutex&amp;gt; &lt;span&gt;lock&lt;/span&gt;&lt;span&gt;(instance_mtx)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;        t = instance.load(&lt;span&gt;std&lt;/span&gt;::memory_order_acquire);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (t == &lt;span&gt;nullptr&lt;/span&gt;) {&lt;br/&gt;            t = &lt;span&gt;new&lt;/span&gt; Singleton;&lt;br/&gt;            instance.store(t, &lt;span&gt;std&lt;/span&gt;::memory_order_release);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; t;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不明白 Release-Acquire 语意的，可以参考我之前写的一篇文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0NjA1MTU5Ng==&amp;amp;mid=2247484061&amp;amp;idx=1&amp;amp;sn=01c91276bc03ae44442c633a9cb1ef06&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;并发编程：内存模型&lt;/a&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Double-Checked Locking Pattern: &lt;em&gt;https://www.aristeia.com/Papers/DDJ_Jul_Aug_2004_revised.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3dd19e09dfb22149c9f7139fe3032584</guid>
<title>localhost 就一定是 localhost 么？</title>
<link>https://toutiao.io/k/4w956kj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;markdown-body&quot;&gt;&lt;blockquote&gt;&lt;p&gt;我们在本地测试或者本地通讯的时候经常使用 localhost 域名，但是访问 localhost 的对应的一定就是我们的本机地址么？&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;/&gt;背景&lt;/h2&gt;&lt;p&gt;在一个风和日丽下午，突然收到了运维同学的反馈，说我们的一个服务调用突然报错了，关键是这个服务已经半年没有更新发版过了，询问后得知最近基础架构也没有什么变更，这就很迷了&lt;/p&gt;&lt;p&gt;我们排查日志后发现这个服务去调用了一个不知名的 ip 地址，这个地址还能 ping 通，但是我们明明是配置的 localhost，为什么会出现这个地址？localhost 不应该指向的是 &lt;code&gt;127.0.0.1&lt;/code&gt; 么？我们使用 &lt;code&gt;dig&lt;/code&gt; 和 &lt;code&gt;nslookup&lt;/code&gt; 之后发现 localhost 的确是 &lt;code&gt;127.0.0.1&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;我们修改了应用的配置，让这个调用直接调用 &lt;code&gt;127.0.0.1&lt;/code&gt; 结果发现这个时候服务就正常了，然后我们在机器上抓包之后发现 localhost 竟然走了域名解析! 并且 &lt;code&gt;localhost&lt;/code&gt; 这个域名在我们内网还被注册了，解析出来的地址就是最开始发现的这个不知名的地址&lt;/p&gt;&lt;h3 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;/&gt;小结&lt;/h3&gt;&lt;p&gt;所以我们下意识认为的域名解析流程应该是这样的，先去找 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件，localhost 找到了（默认是 127.0.0.1）就返回了&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://mohuishou-blog-sz.oss-cn-shenzhen.aliyuncs.com/image/20210615212124.gif&quot; srcset=&quot;/img/loading.gif&quot; alt=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;排查之后发现，实际上的流程是这样的，先做了 DNS 查询 DNS 没查到然后去查了 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://mohuishou-blog-sz.oss-cn-shenzhen.aliyuncs.com/image/20210615212206.gif&quot; srcset=&quot;/img/loading.gif&quot; alt=&quot;2&quot;/&gt;&lt;/p&gt;&lt;p&gt;直到有一天，我们的内网域名解析中添加了一个 localhost 的域名解析，就直接查询成功返回了&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://mohuishou-blog-sz.oss-cn-shenzhen.aliyuncs.com/image/20210615213112.gif&quot; srcset=&quot;/img/loading.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;复现&quot;&gt;&lt;a href=&quot;#复现&quot; class=&quot;headerlink&quot; title=&quot;复现&quot;/&gt;复现&lt;/h2&gt;&lt;p&gt;我们先使用一段简单的代码复现一下，简单请求一下 &lt;code&gt;localhost&lt;/code&gt; 就行了&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;client := &amp;amp;http.Client{}&lt;br/&gt;_, err := client.Get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;)&lt;br/&gt;fmt.Println(err)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后我们使用 &lt;code&gt;GODEBUG=&quot;netdns=go+2&quot;&lt;/code&gt; 环境变量执行程序，带上这个环境变量之后程序运行时就会输出是先执行 dns 查询还是先从 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件进行查询&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;GODEBUG=&lt;span class=&quot;hljs-string&quot;&gt;&quot;netdns=go+2&quot;&lt;/span&gt; go run main.go &lt;br/&gt;go package net: GODEBUG setting forcing use of Go&lt;span class=&quot;hljs-string&quot;&gt;&#x27;s resolver&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;go package net: hostLookupOrder(localhost) = files,dns&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;Get &quot;http://localhost:8080&quot;: dial tcp [::1]:8080: connect: connection refused&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面显示的 &lt;code&gt;files,dns&lt;/code&gt; 的意思就是先从 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件中查询，再去查询 &lt;code&gt;dns&lt;/code&gt; 结果，但是我们当时服务的运行结果是 &lt;code&gt;dns,files&lt;/code&gt; 这个问题出现在哪里呢？和 Go 的版本以及本地环境有关系&lt;/p&gt;&lt;p&gt;我们使用 Docker 模拟了线上环境，我们线上也是用的 Docker&lt;/p&gt;&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs dockerfile&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; golang:&lt;span class=&quot;hljs-number&quot;&gt;1.15&lt;/span&gt; as builder&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; /app&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; main.go main.go&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; run.sh run.sh&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ENV&lt;/span&gt; CGO_ENABLED=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ENV&lt;/span&gt; GOOS=linux&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;RUN&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; go build main.go&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; alpine:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; /app&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; --from=builder /app /app&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; run.sh run.sh&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;RUN&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; chmod +x run.sh&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ENV&lt;/span&gt; GODEBUG=&lt;span class=&quot;hljs-string&quot;&gt;&quot;netdns=go+2&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ENV&lt;/span&gt; CGO_ENABLED=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ENV&lt;/span&gt; GOOS=linux&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; /app/run.sh&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;使用这个容器运行的结果如下，可以看到已经变成了 &lt;code&gt;dns,files&lt;/code&gt; 为什么会这样呢？&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;go package net: built with netgo build tag; using Go&lt;span class=&quot;hljs-string&quot;&gt;&#x27;s DNS resolver&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;go package net: hostLookupOrder(localhost) = dns,files&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;Get &quot;http://localhost:8080&quot;: dial tcp 127.0.0.1:8080: connect: connection refused&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&quot;排查&quot;&gt;&lt;a href=&quot;#排查&quot; class=&quot;headerlink&quot; title=&quot;排查&quot;/&gt;排查&lt;/h2&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/golang/go/blob/20a838ab94178c55bc4dc23ddc332fce8545a493/src/net/dnsclient_unix.go#L492&quot;&gt;src/net/dnsclient_unix.go&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Go 中定义了下面几种 DNS 解析顺序，其中 &lt;code&gt;files&lt;/code&gt; 表示查询 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件，&lt;code&gt;dns&lt;/code&gt; 表示执行 dns 查询&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// hostLookupOrder specifies the order of LookupHost lookup strategies.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// It is basically a simplified representation of nsswitch.conf.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;files&quot; means /etc/hosts.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; hostLookupOrder &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; (&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// hostLookupCgo means defer to cgo.&lt;/span&gt;&lt;br/&gt;hostLookupCgo      hostLookupOrder = &lt;span class=&quot;hljs-literal&quot;&gt;iota&lt;/span&gt;&lt;br/&gt;hostLookupFilesDNS                 &lt;span class=&quot;hljs-comment&quot;&gt;// files first&lt;/span&gt;&lt;br/&gt;hostLookupDNSFiles                 &lt;span class=&quot;hljs-comment&quot;&gt;// dns first&lt;/span&gt;&lt;br/&gt;hostLookupFiles                    &lt;span class=&quot;hljs-comment&quot;&gt;// only files&lt;/span&gt;&lt;br/&gt;hostLookupDNS                      &lt;span class=&quot;hljs-comment&quot;&gt;// only DNS&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/golang/go/blob/go1.14/src/net/conf.go&quot;&gt;src/net/conf.go&lt;/a&gt; 中可以看到&lt;/p&gt;&lt;p&gt;Go 会先根据一些初始条件判断查询的顺序，然后就查找 &lt;code&gt;/etc/nsswitch.conf&lt;/code&gt; 文件中的 &lt;code&gt;hosts&lt;/code&gt; 配置项，如果不存在就会走一些回退逻辑。这次的问题出现在这个回退逻辑上&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(c *conf)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;hostLookupOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(r *Resolver, hostname &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(ret hostLookupOrder)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// ... 省略&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;nss := c.nss&lt;br/&gt;srcs := nss.sources[&lt;span class=&quot;hljs-string&quot;&gt;&quot;hosts&quot;&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// If /etc/nsswitch.conf doesn&#x27;t exist or doesn&#x27;t specify any&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// sources for &quot;hosts&quot;, assume Go&#x27;s DNS will work fine.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.IsNotExist(nss.err) || (nss.err == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(srcs) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; c.goos == &lt;span class=&quot;hljs-string&quot;&gt;&quot;solaris&quot;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// illumos defaults to &quot;nis [NOTFOUND=return] files&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fallbackOrder&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; c.goos == &lt;span class=&quot;hljs-string&quot;&gt;&quot;linux&quot;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// glibc says the default is &quot;dns [!UNAVAIL=return] files&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// https://www.gnu.org/software/libc/manual/html_node/Notes-on-NSS-Configuration-File.html.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; hostLookupDNSFiles&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; hostLookupFilesDNS&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; nss.err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// We failed to parse or open nsswitch.conf, so&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// conservatively assume we should use cgo if it&#x27;s&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// available.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fallbackOrder&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过上面的代码我们可以发现，当前系统如果是 linux 并且不存在 &lt;code&gt;/etc/nsswitch.conf&lt;/code&gt; 文件的时候，会直接返回 &lt;code&gt;dns,files&lt;/code&gt; 的顺序，这个是参考了 glibc 的实现&lt;sup id=&quot;fnref:2&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;glibc 实现 https://www.gnu.org/software/libc/manual/html_node/Notes-on-NSS-Configuration-File.html&amp;#10;&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;这个问题其实一般在虚拟机上没有问题，因为一般操作系统都会默认有这个配置文件，但是容器化之后我们一般喜欢使用 alpine linux 这种比较小的基础镜像，alpine 中就不存在的 &lt;code&gt;/etc/nsswitch.conf&lt;/code&gt; 这个文件，所以就有可能会出现问题&lt;/p&gt;&lt;p&gt;上面这段逻辑不能再 1.16 中进行复现，是因为 1.16 已经修改了这个逻辑，主要就是把 &lt;code&gt;linux&lt;/code&gt; 的这个判断分支删除掉了，感兴趣可以看这个&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/golang/go/commit/c80022204e8fc36ec487888d471de27a5ea47e17#diff-a7c29e18c1a96d08fed3e81f367d079d14c53ea85d739e7460b21fb29a063128&quot;&gt;修改记录&lt;/a&gt;&lt;sup id=&quot;fnref:3&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;修改记录: https://github.com/golang/go/commit/c80022204e8fc36ec487888d471de27a5ea47e17#diff-a7c29e18c1a96d08fed3e81f367d079d14c53ea85d739e7460b21fb29a063128&amp;#10;&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt; 和这个 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/golang/go/issues/35305&quot;&gt;issue&lt;/a&gt;&lt;sup id=&quot;fnref:4&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;https://github.com/golang/go/issues/35305&amp;#10;&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;/&gt;总结&lt;/h2&gt;&lt;p&gt;最大的感受就是经验主义害死人，很多时候由于我们知识点的原因所以可能会出现一些和我们认为的常识相违背的地方，这个时候就需要大胆假设小心求证了&lt;/p&gt;&lt;p&gt;针对这次这个问题的修复方案，我们是直接先删除了 localhost 的解析，复盘之后给出我不成熟的几点小建议&lt;/p&gt;&lt;ul&gt;&lt;li&gt;公司内网就不要搞注册 localhost 域名这种骚操作了&lt;/li&gt;&lt;li&gt;基础镜像的维护很重要，建议大家最好能够统一一个基础镜像这样不仅仅可以减少一些磁盘空间，同时还可以做一些统一的变更，例如这次这种就可以直接在基础镜像加上 &lt;code&gt;/etc/nsswitch.conf&lt;/code&gt; 文件，避免其他业务也进坑里&lt;/li&gt;&lt;li&gt;如果没有什么特别的版本依赖（绝大部分应用其实都没有）Go 版本建议升级 1.16 可以省很多事&lt;/li&gt;&lt;li&gt;dns 解析并不一定会先查询 hosts 文件，除了这种默认的情况外，还可以手动修改 &lt;code&gt;/etc/nsswitch.conf&lt;/code&gt; 文件，调整解析的顺序，这个感兴趣的话可以试试&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这篇文章还试着用 figma 做了几个小动画，感觉还是不错，后续有空写文章可以再搞搞（曹大不要再卷了，快学不动了）&lt;/p&gt;&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;/&gt;参考文献&lt;/h2&gt;&lt;section class=&quot;footnotes&quot;/&gt;&lt;h2 id=&quot;关注我获取更新&quot;&gt;&lt;a href=&quot;#关注我获取更新&quot; class=&quot;headerlink&quot; title=&quot;关注我获取更新&quot;/&gt;关注我获取更新&lt;a class=&quot;anchorjs-link&quot; aria-label=&quot;Anchor&quot; data-anchorjs-icon=&quot;&quot; href=&quot;#关注我获取更新&quot;/&gt;&lt;/h2&gt;&lt;h2 id=&quot;猜你喜欢&quot;&gt;猜你喜欢&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7c589c406fdc79759d8e90d6fccc8c80</guid>
<title>Android 之最全面总结 Native 与 H5 的交互方式和 WebView 简单使用</title>
<link>https://toutiao.io/k/2748dn8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;130&quot; data-source-title=&quot;&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;随着H5性能的提升，在我们移动应用开发的过程中，我们会越来越多的在我们的App页面内嵌入H5页面，使得App变的更加动态灵活。而H5页面往往并不是独立，很多时候需要和native进行交互，调用native的一些方法，或者Web中的一些方法被native所调用。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、WebView介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;281&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;Android WebView在Android平台上是一个特殊的View，基于webkit引擎、展现web页面的控件，这个类可以被用来在你的app中仅仅显示一张在线的网页，还可以用来开发浏览器。WebView内部实现是采用渲染引擎来展示view的内容，提供网页前进后退，网页放大，缩小，搜索。Android的Webview在低版本和高版本采用了不同的webkit版本内核，4.4后直接使用了ChromeWebview功能强大，可以直接使用html文件（本地sdcard/assets目录），还可以直接加载url，使用JavaScript可以html跟原生APP互调&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;WebView中最主要的两个辅助类&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;WebViewClient与WebChromeClient&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;WebViewClient主要帮助WebView处理各种通知、请求事件的，有以下常用方法：&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;diff&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__deletion&quot;&gt;- onPageFinished 页面请求完成&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__deletion&quot;&gt;- onPageStarted 页面开始加载&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__deletion&quot;&gt;- shouldOverrideUrlLoading 拦截url&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt; onReceivedError 访问错误时回调，例如访问网页时报错404，在这个方法回调的时候可以加载错误页面。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;WebChromeClient主要辅助WebView处理Javascript的对话框、网站图标、网站title、加载进度等，有以下常用方法。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;onJsAlert webview不支持js的alert弹窗，需要自己监听然后通过dialog弹窗&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;diff&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__deletion&quot;&gt;- onReceivedTitle 获取网页标题&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__deletion&quot;&gt;- onReceivedIcon 获取网页icon&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__deletion&quot;&gt;- onProgressChanged 加载进度回调&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;webView设置代码如下：&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;http&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attribute&quot;&gt;webView = (WebView) findViewById(R.id.webview);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        webView.loadUrl(&quot;http://www,baidu.com&quot;);//加载url&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        webView.addJavascriptInterface(this,&quot;android&quot;);//添加js监听 这样html就能调用客户端&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        webView.setWebChromeClient(webChromeClient);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        webView.setWebViewClient(webViewClient);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        WebSettings webSettings=webView.getSettings();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        webSettings.setJavaScriptEnabled(true);//允许使用js&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        /**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         * LOAD_CACHE_ONLY&lt;/span&gt;: 不使用网络，只读取本地缓存数据&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         * &lt;span class=&quot;code-snippet__attribute&quot;&gt;LOAD_DEFAULT&lt;/span&gt;: （默认）根据cache-control决定是否从网络上取数据。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         * &lt;span class=&quot;code-snippet__attribute&quot;&gt;LOAD_NO_CACHE&lt;/span&gt;: 不使用缓存，只从网络获取数据.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         * &lt;span class=&quot;code-snippet__attribute&quot;&gt;LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         */&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        webSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);//不使用缓存，只从网络获取数据.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //支持屏幕缩放&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        webSettings.setSupportZoom(true);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        webSettings.setBuiltInZoomControls(true);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; //WebViewClient主要帮助WebView处理各种通知、请求事件&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private WebViewClient webViewClient=new WebViewClient(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        public void onPageFinished(WebView view, String url) {//页面加载完成&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            progressBar.setVisibility(View.GONE);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        public void onPageStarted(WebView view, String url, Bitmap favicon) {//页面开始加载&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            progressBar.setVisibility(View.VISIBLE);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        public boolean shouldOverrideUrlLoading(WebView view, String url) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Log.i(&quot;ansen&quot;,&quot;拦截url:&quot;+url);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            if(url.equals(&quot;http://www.google.com/&quot;)){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                Toast.makeText(MainActivity.this,&quot;国内不能访问google,拦截该url&quot;,Toast.LENGTH_LONG).show();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                return true;//表示我已经处理过了&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            return super.shouldOverrideUrlLoading(view, url);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   //WebChromeClient主要辅助WebView处理Javascript的对话框、网站图标、网站title、加载进度等&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private WebChromeClient webChromeClient=new WebChromeClient(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //不支持js的alert弹窗，需要自己监听然后通过dialog弹窗&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        public boolean onJsAlert(WebView webView, String url, String message, JsResult result) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            AlertDialog.Builder localBuilder = new AlertDialog.Builder(webView.getContext());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            localBuilder.setMessage(message).setPositiveButton(&quot;确定&quot;,null);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            localBuilder.setCancelable(false);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            localBuilder.create().show();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            //注意:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            //必须要这一句代码:result.confirm()表示:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            //处理结果为确定状态同时唤醒WebCore线程&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            //否则不能继续点击按钮&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            result.confirm();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            return true;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //获取网页标题&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        public void onReceivedTitle(WebView view, String title) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            super.onReceivedTitle(view, title);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Log.i(&quot;ansen&quot;,&quot;网页标题:&quot;+title);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //加载进度回调&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        public void onProgressChanged(WebView view, int newProgress) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            progressBar.setProgress(newProgress);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public boolean onKeyDown(int keyCode, KeyEvent event) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Log.i(&quot;ansen&quot;,&quot;是否有上一个页面:&quot;+webView.canGoBack());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        if (webView.canGoBack() &amp;amp;&amp;amp; keyCode == KeyEvent.KEYCODE_BACK){//点击返回按钮的时候判断有没有上一页&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            webView.goBack(); // goBack()表示返回webView的上一页面&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            return true;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        return super.onKeyDown(keyCode,event);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、Js和java的交互&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;191&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;方法有3种&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;通过WebView的addJavascriptInterface（）进行对象映射&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 WebViewClient 的shouldOverrideUrlLoading ()方法回调拦截 url&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 WebChromeClient 的onJsAlert()、onJsConfirm()、onJsPrompt（）方法回调拦截JS对话框alert()、confirm()、prompt（） 消息&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;1、通过 WebView的addJavascriptInterface（）进行对象映射&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;①定义一个与JS对象映射关系的Android类：AndroidtoJs&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AndroidtoJs&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Object&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@JavascriptInterface&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String msg)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;JS调用了Android的hello方法&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;②在Android里通过WebView设置Android类与JS代码的映射&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;http&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__attribute&quot;&gt;WebSettings webSettings = mWebView.getSettings();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // 设置与Js交互的权限&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        webSettings.setJavaScriptEnabled(true);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // 通过addJavascriptInterface()将Java对象映射到JS对象&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //参数1：Javascript对象名&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //参数2：Java对象名&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWebView.addJavascriptInterface(new AndroidtoJs(), &quot;test&quot;);//AndroidtoJS类对象映射到js的test对象&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // 加载JS代码&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // 格式规定为:file:///android_asset/文件名.html&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWebView.loadUrl(&quot;file:///android_asset/javascript.html&quot;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;2、通过 WebViewClient 的方法shouldOverrideUrlLoading ()回调拦截 url&lt;/strong&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;95&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;具体原理：&lt;/p&gt;&lt;p&gt;Android通过 WebViewClient 的回调方法shouldOverrideUrlLoading ()拦截 url&lt;/p&gt;&lt;p&gt;解析该 url 的协议&lt;/p&gt;&lt;p&gt;如果检测到是预先约定好的协议，就调用相应方法&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;①在JS约定所需要的Url协议&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;②在Android通过WebViewClient复写shouldOverrideUrlLoading （）&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mWebView.setWebViewClient(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WebViewClient() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                      &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                      &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt; shouldOverrideUrlLoading(WebView view, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; url) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                          Uri uri = Uri.parse(url);                                 &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                          &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ( uri.getScheme().equals(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;js&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                              &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (uri.getAuthority().equals(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;webview&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                 &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                  System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;js调用了Android的方法&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                  HashMap&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;&amp;gt; params = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                  Set&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;&amp;gt; collection = uri.getQueryParameterNames();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                              }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                              &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                          }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                          &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.shouldOverrideUrlLoading(view, url);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        );&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;3、通过WebChromeClient 的onJsAlert()、onJsConfirm()、onJsPrompt（）方法回调拦截JS对话框alert()、confirm()、prompt（） 消息&lt;/strong&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;105&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;原理：Android通过 WebChromeClient 的onJsAlert()、onJsConfirm()、onJsPrompt（）方法回调分别拦截JS对话框&lt;/p&gt;&lt;p&gt;（即上述三个方法），得到他们的消息内容，然后解析即可&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;①商定协议&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;clickprompt&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; result=prompt(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;js://demo?arg1=111&amp;amp;arg2=222&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    alert(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;demo &quot;&lt;/span&gt; + result);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;②在Android通过WebChromeClient复写onJsPrompt（）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;代码如下&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        webSettings.setJavaScriptEnabled(&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        webSettings.setJavaScriptCanOpenWindowsAutomatically(&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWebView.loadUrl(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;file:///android_asset/javascript.html&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWebView.setWebChromeClient(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WebChromeClient() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                        &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt; onJsPrompt(WebView view, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; url, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; message, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; defaultValue, JsPromptResult result) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                            Uri uri = Uri.parse(message);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ( uri.getScheme().equals(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;js&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (uri.getAuthority().equals(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;webview&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                    System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;js调用了Android的方法&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                    HashMap&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;&amp;gt; params = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                    Set&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;&amp;gt; collection = uri.getQueryParameterNames();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                    result.confirm(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;js调用了Android的方法成功啦&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.onJsPrompt(view, url, message, defaultValue, result);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                        &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt; onJsAlert(WebView view, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; url, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; message, JsResult result) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.onJsAlert(view, url, message, result);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                        &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt; onJsConfirm(WebView view, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; url, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; message, JsResult result) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.onJsConfirm(view, url, message, result);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        );&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3595505617977528&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhFRyFIZU4zdW5BnkS9WJ4FEWVVsO9zLVjF0TicAIUTOxZQORMaXLGSXJHUcQINetlklheVzlf90zYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;890&quot;/&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;webview还有很多知识点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0NDE3MjM1Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhFRZkgpibUGGz2NIiaBUpj7NeBSJASje1M1ZhVvpDIGibicMUeCiad3ptsJLaLUjhrVYs5bGZWuenY6UaQ/0?wx_fmt=png&quot; data-nickname=&quot;Android开发编程&quot; data-alias=&quot;&quot; data-signature=&quot;一个有10多年经验开发的android、java、前端等语言的老程序员，在这里一起聊聊技术，一起聊聊生活、一起聊聊中年危机的生存之道，一起进步一起加油，感兴趣的欢迎订阅；不定时的更新。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4ef4a1b1cdb092207c4d60915b3d9610</guid>
<title>[译] Data Mesh 的原则和逻辑架构</title>
<link>https://toutiao.io/k/fp0fgog</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry-content&quot; itemprop=&quot;articleBody&quot;&gt;&amp;#13;
&lt;p&gt;原文链接：&lt;a href=&quot;https://martinfowler.com/articles/data-mesh-principles.html&quot;&gt;https://martinfowler.com/articles/data-mesh-principles.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者简介：Zhamak是ThoughtWorks的首席技术顾问，专注于企业的分布式系统架构和数字平台策略。作为ThoughtWorks技术顾问委员会的成员，她为创建ThoughtWorks技术雷达做出了贡献。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;我们渴望通过数据来增强和改善商业和生活的各个方面，这驱使我们在大规模管理数据方面进行范式转变。 尽管过去十年的技术进步已解决了数据量和数据处理计算的规模问题，但它们无法解决其他方面的规模问题：数据格局的变化，数据来源的泛滥，数据用例和用户的多样性 ，以及对变化的响应速度。 Data Mesh解决了这些问题，它由以下四个原则组成：面向领域的去中心化数据所有权和架构，数据即产品，自助服务数据基础设施即平台，联合治理。 每个原则都驱动着技术架构和人员组织结构的新的逻辑视图。&lt;/p&gt;
&lt;p&gt;当前，许多企业面临的挑战在于如何在技术架构和人员组织层面形成数据驱动、运用数据建立竞争优势以及规模化地利用数据驱动价值，“&lt;a href=&quot;https://insights.thoughtworks.cn/data-monolith-to-mesh/&quot;&gt;从单体数据湖到分布式数据网格&lt;/a&gt;”对上述痛点有深入的理解（我鼓励您先阅读该文章）。它提供了一种替代的观点，该观点吸引了许多组织的注意力，并给我们带来了一个不同前景的希望。虽然这篇文章描述了这种观点，但它在很多设计和实现的细节上留下了让人想象的空间。 我并不想在本文中过分规范这些，以至于扼杀了大家实现Data Mesh的想象力和创造力。但是，我认为作为推动范式向前发展的垫脚石，本文只负责在架构层面规范它的定义。&lt;/p&gt;
&lt;p&gt;本文是上述文章的后续， 它通过列举Data Mesh的基本原则和这些原则驱动的高级逻辑架构，总结出了Data Mesh方法。 在我之后写文章深入研究Data Mesh核心组件的详细架构之前，建立高级逻辑模型是非常必要的。 因此，如果您正在为Data Mesh寻求确切的工具和方法，那么本文可能会让您感到失望。 如果您正在寻求简单且无关技术细节的模型来建立描述该方法的通用语言，请快来。&lt;/p&gt;
&lt;h3&gt;合理划分数据&lt;/h3&gt;
&lt;p&gt;数据到底是什么？ 这个问题的答案取决于您问谁。从现阶段的视角来看， 我们将数据分为业务数据和分析型数据。 业务数据位于业务微服务背后的数据库中，它具有事务性，能够记录当前状态并且满足业务应用的需求。 分析型数据是一段时间内业务事实形成的聚合视图，它的数据模型通常被用来支持历史数据分析或未来趋势预测， 也用于机器学习的模型训练或生成分析报告。&lt;/p&gt;
&lt;p&gt;目前，技术、架构和组织结构的现状都反映了业务与分析数据平面的差异，它们集成在一起但是又相互独立存在。这种差异使架构变得脆弱。 对于那些试图连接这两个平面，想要将数据从业务数据平面流转到分析平面然后再返回到业务数据平面的人来说，不断失败的ETL（提取，转换，加载）流程以及日益复杂的数据管道迷宫是一个很常见的现象。&lt;br/&gt;
&lt;/p&gt;&lt;div id=&quot;attachment_14382&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/1-data-mesh-principles.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-14382&quot; src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/1-data-mesh-principles-768x594.png&quot; alt=&quot;图一：合理划分数据&quot; class=&quot;size-medium_large wp-image-14382&quot; srcset=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/1-data-mesh-principles-768x594.png 768w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/1-data-mesh-principles-300x232.png 300w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/1-data-mesh-principles.png 936w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;&lt;p id=&quot;caption-attachment-14382&quot; class=&quot;wp-caption-text&quot;&gt;图一：合理划分数据&lt;/p&gt;&lt;/div&gt;&lt;p&gt;
分析型数据平面本身已经分叉为两套主要的架构和技术栈：&lt;/p&gt;&lt;a href=&quot;https://martinfowler.com/bliki/DataLake.html&quot;&gt;数据湖和数据仓库&lt;/a&gt;&lt;p&gt;。 数据湖支持数据科学访问模式，数据仓库支持分析和商业智能报告访问模式。 在本文中， 我暂不考虑这两种技术栈之间的交叉：数据仓库试图去引入&lt;/p&gt;&lt;a href=&quot;https://cloud.google.com/bigquery-ml/docs&quot;&gt;数据科学工作流&lt;/a&gt;&lt;p&gt;，而数据湖则试图&lt;/p&gt;&lt;a href=&quot;https://databricks.com/blog/2020/01/30/what-is-a-data-lakehouse.html&quot;&gt;服务于数据分析师&lt;/a&gt;&lt;p&gt;以及商业智能。前文中提到的“&lt;/p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/data-monolith-to-mesh/&quot;&gt;从单体数据湖到分布式数据网格&lt;/a&gt;&lt;p&gt;”探讨了&lt;/p&gt;&lt;a href=&quot;https://martinfowler.com/articles/data-monolith-to-mesh.html#ArchitecturalFailureModes&quot;&gt;现有分析数据平面架构的挑战&lt;/a&gt;&lt;p&gt;。
&lt;/p&gt;&lt;div id=&quot;attachment_14381&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/2-data-mesh-principles.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-14381&quot; src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/2-data-mesh-principles-768x594.png&quot; alt=&quot;图2: 分析型数据的进一步划分-数据仓库&quot; class=&quot;size-medium_large wp-image-14381&quot; srcset=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/2-data-mesh-principles-768x594.png 768w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/2-data-mesh-principles-300x232.png 300w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/2-data-mesh-principles.png 936w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;&lt;p id=&quot;caption-attachment-14381&quot; class=&quot;wp-caption-text&quot;&gt;图2: 分析型数据的进一步划分-数据仓库&lt;/p&gt;&lt;/div&gt;
&lt;div id=&quot;attachment_14380&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/3-data-mesh-principles.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-14380&quot; src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/3-data-mesh-principles-768x594.png&quot; alt=&quot;图3：分析型数据的进一步划分-数据湖&quot; class=&quot;size-medium_large wp-image-14380&quot; srcset=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/3-data-mesh-principles-768x594.png 768w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/3-data-mesh-principles-300x232.png 300w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/3-data-mesh-principles.png 936w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;&lt;p id=&quot;caption-attachment-14380&quot; class=&quot;wp-caption-text&quot;&gt;图3：分析型数据的进一步划分-数据湖&lt;/p&gt;&lt;/div&gt;&lt;p&gt;
Data Mesh认可并尊重这两个数据平面之间的差异：数据不同的数据性质和拓扑结构，不同的用例，不同的数据消费者，以及不同的访问模式。 但是，它试图以不同的结构（一个基于领域而不是技术栈的倒置模型和拓扑结构）连接这两个平面，并且将关注点放在分析型数据平面上。 当今管理这两种数据原型的可用技术的差异不应导致组织，团队和工作人员的分离。 我认为，业务型的和事务性数据的技术和拓扑结构相对成熟，并且在很大程度上由微服务架构驱动。 数据隐藏在每个微服务的内部，并通过微服务的API进行控制和访问。 是的，还需要继续创新才能真正实现多云原生业务型数据库解决方案，但从架构的角度来看，业务型数据平面已经满足了业务的需求。 然而，管理和访问分析型数据仍然是规模化问题。 而这便是Data Mesh的关注点。
&lt;/p&gt;&lt;p&gt;我相信，在将来的某个时刻，不断发展的技术，将使这两个平面更加紧密地联系在一起，但就目前而言，我建议将它们的关注点分开。&lt;/p&gt;
&lt;h4&gt;Data Mesh的核心原理和逻辑架构&lt;/h4&gt;
&lt;p&gt;Data Mesh的目标是为大规模地从分析型数据和历史事实中获得价值提供基础，以适应数据格局的不断变化、数据源和消费者的大量涌现，用例所需的转换和处理的多样性，对变化的响应速度。 为了实现此目标，我认为，任何Data Mesh的实现都应体现四个基本原则，以实现规模化的承诺，同时保证数据可用所需的质量和完整性：1）面向领域的去中心化的数据所有权和架构，2 ）数据即产品； 3）自助式数据基础设施即平台； 4）联合治理。&lt;/p&gt;
&lt;p&gt;尽管我预见这些原则的实践、技术和实现会随着时间的推移而变化和成熟，但是这些原则会保持不变。&lt;/p&gt;
&lt;p&gt;我有意让这四个原则在总体上是必要和充分的；以实现具有韧性的扩展，同时解决不兼容数据的孤岛和增加的运营成本的担忧。 让我们深入研究每个原理，然后设计支持该原理的概念架构。&lt;/p&gt;
&lt;h3&gt;领域所有权&lt;/h3&gt;
&lt;p&gt;Data Mesh的核心是将责任分散，并分配给最接近数据的人，从而能够支持持续的变更和扩展。问题是，如何分解和分散数据生态和它们的所有权？这里的组件是由分析数据，元数据和服务数据所需的算力组成。&lt;/p&gt;
&lt;p&gt;Data Mesh沿着组织单元的交界线作为分解轴。现在我们的组织是基于他们的业务领域来划分的。这样的划分，在很大程度上局部化了持续变更和演进所带来的影响。因此，通过&lt;a href=&quot;https://martinfowler.com/articles/data-monolith-to-mesh.html#ArchitecturalFailureModes&quot;&gt;业务领域的上下文&lt;/a&gt;来划分数据的所有权是一个很好的选择。&lt;/p&gt;
&lt;p&gt;在本文中，我将继续使用和之前文章相同的用例，一家数字媒体公司。你可以想象这家公司是基于领域来划分业务，各个业务部门都有支持运营的系统和团队。例如，podcasts（播客）业务，其团队和系统管理 podcast 发行物和其主持人；还有 artists （艺术家）业务，其团队和系统负责artists的入职并支付其费用，等等。Data Mesh 的观点是分析数据的所有权和其提供的服务应该遵从于这些领域的划分。例如，对于管理 podcasts，以及提供 API 来发布 podcasts 的团队，他们应该同时提供过去一段时间内已经发布的“播客” 和收听率数据。想要更深入的了解这个划分原则，可以参考《面向领域的数据分解和所有权》这篇文章。&lt;/p&gt;
&lt;h4&gt;逻辑架构：面向领域的数据和计算&lt;/h4&gt;
&lt;p&gt;为了推动这样的划分，我们需要建立一个把分析数据安放到各个领域去的架构模型。在这个架构中，某领域暴露给组织中其他领域的接口，不仅仅暴露业务能力，还暴露对于这个领域的分析数据的访问能力。例如，Podcast 这个领域，不仅提供了“创建新一集的 podcast”的API，也提供了获取“过去n个月的所有 podcasts 数据”的接口。这意味着该架构必须移除所有阻力或者耦合，以便让领域对外暴露分析数据，发布计算数据的代码，这必须是独立于其他领域的。为了扩展，该架构必须支持各领域团队的自治，使得各领域团队能够自主发布和部署其业务系统和分析数据系统。&lt;/p&gt;
&lt;p&gt;下面这个例子展示了面向领域的数据所有权原则。图例只是逻辑上和示例性的表示，并不试图展示完整的例子。&lt;/p&gt;
&lt;p&gt;每个领域可以暴露一个或多个业务型API，以及一个或多个分析型数据端点。&lt;br/&gt;
&lt;/p&gt;&lt;div id=&quot;attachment_14379&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/4-data-mesh-principles.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-14379&quot; src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/4-data-mesh-principles-768x335.png&quot; alt=&quot;图4: 注意：领域，及其包含的分析数据能力和业务能力&quot; class=&quot;size-medium_large wp-image-14379&quot; srcset=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/4-data-mesh-principles-768x335.png 768w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/4-data-mesh-principles-300x131.png 300w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/4-data-mesh-principles.png 936w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;&lt;p id=&quot;caption-attachment-14379&quot; class=&quot;wp-caption-text&quot;&gt;图4: 注意：领域，及其包含的分析数据能力和业务能力&lt;/p&gt;&lt;/div&gt;&lt;p&gt;
自然地，各个领域可以依赖其他领域的业务和分析数据 API。在下面这个例子中，podcasts 领域消费 users 领域提供的用户更新的分析数据，从而通过 podcasts 听众数据集，来提供 podcasts 听众人口统计全貌。
&lt;/p&gt;&lt;div id=&quot;attachment_14378&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/5-data-mesh-principles.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-14378&quot; src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/5-data-mesh-principles-768x594.png&quot; alt=&quot;图5：示例：面向领域划分分析数据和业务能力所有权&quot; class=&quot;size-medium_large wp-image-14378&quot; srcset=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/5-data-mesh-principles-768x594.png 768w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/5-data-mesh-principles-300x232.png 300w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/5-data-mesh-principles.png 936w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;&lt;p id=&quot;caption-attachment-14378&quot; class=&quot;wp-caption-text&quot;&gt;图5：示例：面向领域划分分析数据和业务能力所有权&lt;/p&gt;&lt;/div&gt;&lt;p&gt;
在这个例子中，我使用了命令式的语言来访问业务数据或者能力，例如付钱给 artists。这只是想要强调访问业务数据和分析数据意图之间的不同。实际上业务API会使用一种更表意的方式来实现，例如访问 RESTFul 资源或者通过GraphQL 查询。
&lt;/p&gt;&lt;h3&gt;数据即产品&lt;/h3&gt;
&lt;p&gt;现有分析型数据架构的挑战之一是探索，理解，信任以及最终使用优质数据的高摩擦和高成本。 如果不解决，随着提供数据（即领域）的场所和团队数量的增加，该问题只会伴随着数据网格加剧。 这是Data Mesh 第一原则去中心化将会造成的结果。数据即产品原则旨在解决数据质量和陈旧的数据孤岛问题； 或Gartner所说的“&lt;a href=&quot;https://www.gartner.com/en/information-technology/glossary/dark-data&quot;&gt;暗数据&lt;/a&gt;”——“在正常的商业活动中收集，处理和存储的信息资产，通常不能用于其他目的”。领域提供的分析数据须被视为产品，数据的消费者也应该被视为客户。&lt;/p&gt;
&lt;p&gt;“&lt;a href=&quot;https://insights.thoughtworks.cn/data-monolith-to-mesh/&quot;&gt;从单体数据湖到分布式数据网格&lt;/a&gt;”一文列举了一系列&lt;a href=&quot;https://martinfowler.com/articles/data-monolith-to-mesh.html#DataAndProductThinkingConvergence&quot;&gt;能力&lt;/a&gt;，包括可发现性，安全性，可探索性，可理解性，可信赖性等，所以在实现Data Mesh时应该把领域数据视为一种产品。这片文章还详细介绍了团队必须引入的领域数据产品负责人，该角色负责定义客观的度量指标来确保数据作为产品交付。这些度量指标包括数据质量，缩短数据消耗的前置时间，以及一般而言的通过净&lt;a href=&quot;https://en.wikipedia.org/wiki/Net_Promoter&quot;&gt;推荐值（Net Promoter Score&lt;/a&gt;）所体现的数据用户满意度。 领域数据产品负责人必须深入了解数据用户是谁，他们如何使用数据，以及他们消费数据的顺手方法。 对数据用户的深入了解可以设计出满足其需求的数据产品接口。实际上，网格上的大多数数据产品，都有一些常规的用户角色，比如数据分析师和数据科学家，基于他们独有的工具和需求来使用数据。 所有数据产品都可以开发标准化的接口来支持消费者。 数据用户与产品负责人之间的对话是建立数据产品接口的必要环节。&lt;/p&gt;
&lt;p&gt;每个领域都会有数据产品开发人员，他们负责构建，维护和提供各自领域的数据产品。 数据产品开发人员将与该领域的其他开发人员一起工作。 每个领域团队可以服务一个或多个数据产品。 也可以组建新的团队，给那些不适合现有业务领域的数据产品提供服务。&lt;/p&gt;
&lt;p&gt;注意：与过去的范式相比，这是一种责任的倒置模型。 数据质量的责任向上游转移，尽可能靠近数据源。&lt;/p&gt;
&lt;h4&gt;逻辑架构：将数据产品视为架构量子&lt;/h4&gt;
&lt;p&gt;在体系结构上，为了支持数据作为领域可以自主服务或使用的产品，Data mesh引入了数据产品的概念，并作为其&lt;a href=&quot;https://www.oreilly.com/library/view/building-evolutionary-architectures/9781491986356/ch04.html&quot;&gt;架构量子&lt;/a&gt;。由&lt;a href=&quot;https://www.thoughtworks.com/books/building-evolutionary-architectures&quot;&gt;演进式架构&lt;/a&gt;定义的架构量子是最小的架构单元，它可以独立部署，具有高度的功能内聚性，并包含其功能所需的所有结构元素。&lt;/p&gt;
&lt;p&gt;数据产品是网格上的节点，它封装了其功能所需的三个结构组件，作为产品提供对领域分析数据的访问。&lt;/p&gt;

&lt;p&gt;(a)数据流水线代码，负责消费，转换和服务来自业务领域系统或者上游数据产品的数据；&lt;/p&gt;
&lt;p&gt;(b) API代码，提供对数据、语义和语法模式、可观察性指标和其他元数据的访问;&lt;/p&gt;
&lt;p&gt;(c)强制约束性代码，包含诸如访问控制策略，合规性，来源等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据和元数据: 这就是我们的讨论内容，以多种语言形态提供底层的分析和历史数据。根据领域数据的性质及其消费模型，数据可以通过事件，批处理文件、关系型数据表、图等方式提供给消费者，同时保持相同的语义。为了使数据可用，需要定义一组相关的元数据，包括数据计算文档、语义和语法声明、质量指标等。有些元数据是数据所固有的，例如语法定义，而有些元数据通过&lt;a href=&quot;https://martinfowler.com/articles/data-mesh-principles.html#FederatedComputationalGovernance&quot;&gt;计算治理&lt;/a&gt;传达数据特征，从而实现预期行为，例如 访问控制策略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基础设施:基础设施组件支持构建、部署和运行数据产品代码，以及存储和访问大数据和元数据。&lt;br/&gt;
&lt;/p&gt;&lt;div id=&quot;attachment_14377&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/6-data-mesh-principles.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-14377&quot; src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/6-data-mesh-principles-768x594.png&quot; alt=&quot;图6：数据产品的组成部分&quot; class=&quot;size-medium_large wp-image-14377&quot; srcset=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/6-data-mesh-principles-768x594.png 768w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/6-data-mesh-principles-300x232.png 300w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/6-data-mesh-principles.png 936w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;&lt;p id=&quot;caption-attachment-14377&quot; class=&quot;wp-caption-text&quot;&gt;图6：数据产品的组成部分&lt;/p&gt;&lt;/div&gt;&lt;br/&gt;
下面的示例建立在上一节的基础上，展示了数据产品作为架构量子。图例只包括示例内容，并不试图包括完整的设计和实现细节。虽然这依旧是一种逻辑表示，但它离真实实现更近了一步。&lt;br/&gt;
&lt;div id=&quot;attachment_14401&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/7-data-mesh-principles.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-14401&quot; src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/7-data-mesh-principles-768x351.png&quot; alt=&quot;图 7：注意：领域，及其包含的分析数据能力和业务能力&quot; class=&quot;size-medium_large wp-image-14401&quot; srcset=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/7-data-mesh-principles-768x351.png 768w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/7-data-mesh-principles-300x137.png 300w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/7-data-mesh-principles.png 936w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;&lt;p id=&quot;caption-attachment-14401&quot; class=&quot;wp-caption-text&quot;&gt;图 7：注意：领域，及其包含的分析数据能力和业务能力&lt;/p&gt;&lt;/div&gt;&lt;br/&gt;
&lt;div id=&quot;attachment_14402&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/8-data-mesh-principles.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-14402&quot; src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/8-data-mesh-principles-768x533.png&quot; alt=&quot;图 8：服务于面向领域分析数据的数据产品&quot; class=&quot;size-medium_large wp-image-14402&quot; srcset=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/8-data-mesh-principles-768x533.png 768w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/8-data-mesh-principles-300x208.png 300w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/8-data-mesh-principles.png 936w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;&lt;p id=&quot;caption-attachment-14402&quot; class=&quot;wp-caption-text&quot;&gt;图 8：服务于面向领域分析数据的数据产品&lt;/p&gt;&lt;/div&gt;&lt;br/&gt;
注意:Data mesh模型不同于过去的范式，在过去的范式中，数据管道作为独立组件管理，与它们产生的数据无关; 基础设施，比如数据仓库或数据湖存储帐户的实例，通常会在许多数据集之间共享。数据产品是所有组件(代码、数据和基础设施)在领域限界上下文粒度上的组合。
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;自助数据基础设施平台&lt;/h3&gt;
&lt;p&gt;可以想象，要构建，部署，执行，监控和访问一个不起眼的六边形（即数据产品），需要搭建和运行相当多的基础设施。用来提供这些基础设施的技术是相对专业的，并且难以在各个领域中复制。最重要的是，团队能够自主管理其数据产品的唯一方法，就是团队可以访问基础设施的高级抽象——这层抽象移除了搭建数据产品和管理数据产品生命周期的复杂性和难度。这就需要一种新的原则，即使领域自治的自助数据基础设施即平台。&lt;/p&gt;
&lt;p&gt;数据平台可以被视为对已经存在的可以运行和监控各种服务的交付平台的延伸。但现实是，用来操作数据产品的底层技术栈与针对业务服务的交付平台 所使用的技术栈大相径庭。这完全是由于大数据平台与业务平台之间技术栈的差异所导致的。例如，领域团队可能使用Docker容器来部署其服务，而交付平台使用Kubernetes进行编排；但是，相邻的数据产品可能正在以Spark作业的形式在Databricks群集上运行数据流水线代码。这需要搭建和连接两组非常不同的基础设施，数据网格之前的技术并不需要这种级别的互连性。我个人的希望是，在合理的地方开始看到业务和数据基础设施的融合。例如，我希望能够在和业务系统相同的编排系统上运行Spark，比如Kubernetes。&lt;/p&gt;
&lt;p&gt;现实是，为了使多面手的开发人员可以开发分析数据产品，自助平台除了简化产品搭建外，还需要针对既有的领域开发人员提供一套新的工具和接口类别。自助数据平台必须能创建工具，以支持领域数据产品开发人员在创建、维护和运行工作流时减少对专业技术知识的依赖。上篇文章中提到了自助数据平台提供&lt;a href=&quot;https://martinfowler.com/articles/data-monolith-to-mesh.html#DataAndSelf-servePlatformDesignConvergence&quot;&gt;一系列功能列表&lt;/a&gt;，包括访问：可扩展的不同类型的数据存储，数据产品模式，数据管道声明和编排，数据产品血缘，计算和数据本地性等。&lt;/p&gt;
&lt;h4&gt;逻辑架构：多平面数据平台&lt;/h4&gt;
&lt;p&gt;自助服务平台功能可分为多个类别或平面，如模型中所述。注意：平面对存在层面的抽象表达-他们相互集成但独立。类似于物理或意识平面，或网络中的控制和数据平面。平面既不是层，也不意味着森严的分层访问模型。&lt;br/&gt;
&lt;/p&gt;&lt;div id=&quot;attachment_14376&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/9-data-mesh-principles.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-14376&quot; src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/9-data-mesh-principles-768x469.png&quot; alt=&quot;图9：注意：平台中一个通过自服务接口提供了多种相关能力的平面&quot; class=&quot;size-medium_large wp-image-14376&quot; srcset=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/9-data-mesh-principles-768x469.png 768w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/9-data-mesh-principles-300x183.png 300w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/9-data-mesh-principles.png 936w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;&lt;p id=&quot;caption-attachment-14376&quot; class=&quot;wp-caption-text&quot;&gt;图9：注意：平台中一个通过自服务接口提供了多种相关能力的平面&lt;/p&gt;&lt;/div&gt;&lt;p&gt;
自助平台可以具有多个平面，每个平面服务于不同类型的用户。在以下示例中，列出了三个不同的数据平台平面：
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据基础设施配置平面&lt;/strong&gt;：支持底层基础设施的配置，这是运行数据产品和网格所必需的。其中包括配置分布式文件存储，存储帐户，访问控制管理系统，运行数据产品内部代码的编排引擎，以及为数据产品集群提供分布式查询引擎等。我希望其他任何数据平台或高级数据产品开发人员都能直接使用这个平面提供的接口。这是一个相当底层的数据基础设施生命周期管理平面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据产品开发人员体验平面&lt;/strong&gt;：这是典型的数据产品开发人员主要使用的接口。这些接口抽象了许多复杂的内容，以支持数据产品开发人员的工作流程。它提供了比“配置平面”更高的抽象级别。它使用简单的声明性接口来管理数据产品的生命周期。它会自动横切一些关注点，这些关注点被定义为为一组标准和全局约定，适用于所有数据产品及其接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据网格监督平面&lt;/strong&gt;：有些能力最好能在网格（数据产品形成的网络）层面全局地提供。尽管每个接口的实现可能都依赖于单独的数据产品功能，但在网格层面提供这些功能更为方便。例如，最好通过搜索或浏览数据产品的网格来提供发现特定用例的数据产品的能力；或者最好通过在数据网格上执行跨数据产品的数据语义查询操作来创造更高阶的洞见。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下模型仅是示例性的，并不完整。尽管图中平面间存在层级，但并不表示平面间存在严格的层级关系。&lt;br/&gt;
&lt;/p&gt;&lt;div id=&quot;attachment_14375&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/10-data-mesh-principles.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-14375&quot; src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/10-data-mesh-principles-768x594.png&quot; alt=&quot;图10：多平面的自服务数据平台 其中DP指的是数据产品&quot; class=&quot;size-medium_large wp-image-14375&quot; srcset=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/10-data-mesh-principles-768x594.png 768w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/10-data-mesh-principles-300x232.png 300w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/10-data-mesh-principles.png 936w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;&lt;p id=&quot;caption-attachment-14375&quot; class=&quot;wp-caption-text&quot;&gt;图10：多平面的自服务数据平台 其中DP指的是数据产品&lt;/p&gt;&lt;/div&gt;
&lt;h3&gt;联合治理&lt;/h3&gt;
&lt;p&gt;正如你所看到的，数据网格遵循分布式系统架构，由独立的数据产品组成，每个数据产品具有独立的生命周期，通常由独立团队构建和部署 。然而，在大多数现实场景下，为了通过高阶数据集、洞见以及机器智能的形式获取价值，独立的数据产品需要相互操作；并能够让数据相互关联、合并、找到交集，或者对数据进行大规模的图或集合操作。为了实现这些操作，数据网格的实现需要一个治理模型，这个模型包含去中心化，领域自治，支持全局标准化的互操作性、动态拓扑，以及最重要的是由平台自动执行决策。我称之为联合计算治理。它是由领域数据产品经理和数据平台产品经理组成的联合所领导的决策模型，具备自治权和领域内的决策能力，同时创建和遵守一套全局规则，这套规则应用于所有数据产品及其接口，以确保一个健康和可互操作的生态系统。该小组有一项棘手的工作：如何保持中央中心化和去中心化之间的平衡；哪些决策需要作用于单个领域，那些决策需要作用于所有领域。 最终，全局决策有一个目的，即通过发现和组合数据产品来创造互操作性和复杂的网络效应。&lt;br/&gt;
Data mesh中治理的优先级不同于传统的分析型数据管理系统。虽然它们最终都希望从数据中获取价值，但是传统的数据治理试图通过中心化的决策权来达成目标并建立全局规范的数据呈现方式，但难以支持变更。相反的是， Data mesh 的联合计算治理拥抱变化和多种解释性上下文。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将系统置于恒定状态会导致演进的脆弱。-- C.S. Holling, ecologist&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;逻辑架构：向网格中嵌入的计算策略&lt;/h4&gt;
&lt;p&gt;支持型的组织结构、激励模型和架构对于联合治理模型的运行必不可少：它们有助于在尊重本地领域自治的同时，制定全局互操作性决策和标准，并有效实施全局政策。&lt;br/&gt;
&lt;/p&gt;&lt;div id=&quot;attachment_14374&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/11-data-mesh-principles.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-14374&quot; src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/11-data-mesh-principles-768x594.png&quot; alt=&quot;图11：注意：联合计算治理模型&quot; class=&quot;size-medium_large wp-image-14374&quot; srcset=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/11-data-mesh-principles-768x594.png 768w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/11-data-mesh-principles-300x232.png 300w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/11-data-mesh-principles.png 936w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;&lt;p id=&quot;caption-attachment-14374&quot; class=&quot;wp-caption-text&quot;&gt;图11：注意：联合计算治理模型&lt;/p&gt;&lt;/div&gt;&lt;p&gt;
如前所述，哪些应该针对所有领域和其数据产品进行全局标准化，实施，甚至强制执行？哪些应该留给领域自己决策？在这两个问题之间作出平衡是一门艺术。例如，领域数据模型应该是领域自身需要关注的问题，因为领域最熟悉它。就像，如何定义“播客受众”数据模型的语义和语法，这件事情必须交给“播客领域”团队。然而，相比之下，如何识别“播客听众”是一个全局关注的问题。podcast 听众是“用户”群体（其&lt;/p&gt;&lt;a href=&quot;https://medium.com/ingeniouslysimple/context-mapping-in-domain-driven-design-9063465d2eb8&quot;&gt;上游限界上下文&lt;/a&gt;&lt;p&gt;）的成员，他们可以跨越领域的边界并同时存在于“用户播放流”之类的其他领域。统一的标识让我们可以关联既是“podcast听众”又是“播放流听众”的“用户”的信息。&lt;/p&gt;&lt;p&gt;
以下是 data mesh管理模型中涉及的元素的示例。 这不是一个全面的例子，仅说明了在全局范围内的相关问题。
&lt;/p&gt;&lt;div id=&quot;attachment_14408&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/12-data-mesh-principles-1.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-14408&quot; src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/12-data-mesh-principles-1-768x594.png&quot; alt=&quot;图12：联合治理包含的元素示例：团队，动机//TODO，自动实现和全局标准化&quot; class=&quot;size-medium_large wp-image-14408&quot; srcset=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/12-data-mesh-principles-1-768x594.png 768w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/12-data-mesh-principles-1-300x232.png 300w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/12-data-mesh-principles-1.png 936w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;&lt;p id=&quot;caption-attachment-14408&quot; class=&quot;wp-caption-text&quot;&gt;图12：联合治理包含的元素示例：团队，动机//TODO，自动实现和全局标准化&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;作为中心化的职能， 数据网格之前的很多治理实践，不再适用于数据网格。例如，过去被认为非常重要的黄金数据集认证（即经过集中质量控制和认证过程并标记为可信赖的数据集）作为中心治理功能将不再适用。这源于以下事实：在以前的数据管理范例中，无论质量和格式如何，数据都是从业务领域数据库中提取，并集中存储在数据仓库或数据湖中，现在需要中心化的团队来对数据进行清洗，整理和加密；这通常由中央治理小组负责。数据网格完全分散了这些问题。领域数据集仅在领域内通过了质量保障处理（满足预期的数据产品质量指标和全局标准化规则）之后，才成为数据产品。领域数据产品经理最先决定如何衡量其领域的数据质量，因为他们最早了解产生数据的领域操作的详细信息。尽管有这样的本地化决策和自治权，但它们仍需要遵循由全局联合治理团队定义并由平台自动化的全局质量标准和SLO（服务水平目标）规格进行建模。&lt;/p&gt;
&lt;p&gt;下表展示了中心化的数据治理（如数据湖、数据仓库）模型和数据网格之间的对比。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data mesh之前的数据治理&lt;/th&gt;
&lt;th&gt;Data mesh的数据治理&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;中心化的治理团队&lt;/td&gt;
&lt;td&gt;联合治理团队&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;负责数据质量&lt;/td&gt;
&lt;td&gt;负责定义如何对构成质量的模型进行建模&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;负责数据安全&lt;/td&gt;
&lt;td&gt;负责定义数据安全的各个方面，即平台内置和自动监控的数据敏感度级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;负责遵守法规&lt;/td&gt;
&lt;td&gt;负责定义平台的法规要求，将其构建到平台中并自动监控&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中心化的数据监管&lt;/td&gt;
&lt;td&gt;领域的联合数据监管&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;负责全局规范数据建模&lt;/td&gt;
&lt;td&gt;负责建模多义性数据-跨越多个领域边界的数据元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;团队独立于领域&lt;/td&gt;
&lt;td&gt;团队由领域代表组成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;旨在定义明确的数据静态结构&lt;/td&gt;
&lt;td&gt;旨在实现有效的网格操作，拥抱网格的持续变化和动态拓扑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;单体数据湖/数据仓库使用的中心化技术&lt;/td&gt;
&lt;td&gt;每个领域都使用的自助平台技术&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通过管理的数据量或数据表的数量多少来衡量是否成功&lt;/td&gt;
&lt;td&gt;基于网络效应 (代表网格上数据消耗的连接)来度量成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;手动的流程，需要人工干预&lt;/td&gt;
&lt;td&gt;由平台实现的自动化流程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可以预防错误&lt;/td&gt;
&lt;td&gt;通过平台的自动化流程监测问题和恢复&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;原则总结与顶层逻辑架构&lt;/h3&gt;
&lt;p&gt;综上所述，我们讨论了支撑Data mesh的四个原则。&lt;/p&gt;

&lt;p&gt;因此，生产和消费数据的生态系统可以随着数据源的数量、用例的数量和数据访问模型的多样性的增加而扩展; 只需增加网格上的自治节点就可以实现这种扩展。&lt;/p&gt;

&lt;p&gt;因此，针对分布在多个领域的数据，其使用者可以很方便地去发现、理解以及安全地去使用这些高质量的数据，同时获得良好的消费者体验。&lt;/p&gt;

&lt;p&gt;因此，领域团队就可以通过平台抽象自主地创建和使用数据产品，从而隐藏了构建、执行和维护安全且可互操作的数据产品的复杂性。&lt;/p&gt;

&lt;p&gt;因此，数据用户可以从独立数据产品的聚合和关联中获得价值——数据网格就像遵循全局互操作性标准的生态系统，通过计算将标准整合到平台中。&lt;/p&gt;
&lt;p&gt;这些原理形成了一个逻辑架构模型，使分析数据和业务数据在同一个领域中更加紧密地联系在一起, 同时尊重它们的基础技术的差异。这些差异包括分析数据的存储位置，处理业务服务和分析服务的不同计算机技术，查询和访问数据的不同方式等等。&lt;br/&gt;
&lt;/p&gt;&lt;div id=&quot;attachment_14372&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/13-data-mesh-principles.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-14372&quot; src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/13-data-mesh-principles-768x994.png&quot; alt=&quot;图13：数据网格的逻辑架构&quot; class=&quot;size-medium_large wp-image-14372&quot; srcset=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/06/13-data-mesh-principles-768x994.png 768w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/13-data-mesh-principles-232x300.png 232w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/13-data-mesh-principles-791x1024.png 791w, https://insights.thoughtworks.cn/wp-content/uploads/2021/06/13-data-mesh-principles.png 936w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;&lt;p id=&quot;caption-attachment-14372&quot; class=&quot;wp-caption-text&quot;&gt;图13：数据网格的逻辑架构&lt;/p&gt;&lt;/div&gt;&lt;p&gt;
我希望到这里我们已经建立了一套通用的语言和逻辑思维模型，可以用来进一步详述Data Mesh组件的蓝图，例如数据产品，数据平台和必需的标准。
&lt;/p&gt;&amp;#13;
&lt;/div&gt;&amp;#13;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>