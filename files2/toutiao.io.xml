<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>d1319ccfc3d40f953d3e986f3caedf8d</guid>
<title>堪称神器的命令行工具系列之 curl</title>
<link>https://toutiao.io/k/paa1opr</link>
<content:encoded>&lt;div&gt;&lt;html lang=&quot;zh-CN&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;/&gt;
  

    &lt;title&gt;堪称神器的命令行工具系列之 curl | 晚晴幽草轩&lt;/title&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,user-scalable=no&quot;/&gt;
    
    &lt;meta name=&quot;author&quot; content=&quot;晚晴幽草轩轩主&quot;/&gt;
    
    &lt;meta name=&quot;theme-color&quot; content=&quot;#fffffb&quot;/&gt;
    &lt;meta name=&quot;baidu-site-verification&quot; content=&quot;PKEtLPjO56&quot;/&gt;
    

    &lt;meta name=&quot;keywords&quot; content=&quot;curl, 命令行工具, URL, 妙用, referer, 开源软件, 免费&quot;/&gt;
    &lt;meta name=&quot;description&quot; content=&quot;curl 非常有用的命令行工具库，用于通过 URL 传输数据。它的名字就是客户端（client）的 URL 工具的意思（command line tool and library for transferring data with URLs）。它的功能非常强大，命令行参数多达几十种。如能熟练使用，可以在很多应用场景下，发挥巨大的价值。本篇文章，就跟大家一起探讨下 curl 以及关于它的那些妙用。&quot;/&gt;
&lt;meta property=&quot;og:type&quot; content=&quot;article&quot;/&gt;
&lt;meta property=&quot;og:title&quot; content=&quot;堪称神器的命令行工具系列之 curl&quot;/&gt;
&lt;meta property=&quot;og:url&quot; content=&quot;https://www.jeffjade.com/2021/02/07/180-magic-tools-series-curl/index.html&quot;/&gt;
&lt;meta property=&quot;og:site_name&quot; content=&quot;晚晴幽草轩&quot;/&gt;
&lt;meta property=&quot;og:description&quot; content=&quot;curl 非常有用的命令行工具库，用于通过 URL 传输数据。它的名字就是客户端（client）的 URL 工具的意思（command line tool and library for transferring data with URLs）。它的功能非常强大，命令行参数多达几十种。如能熟练使用，可以在很多应用场景下，发挥巨大的价值。本篇文章，就跟大家一起探讨下 curl 以及关于它的那些妙用。&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://image.nicelinks.site/curl-wttr-in.png&quot;/&gt;
&lt;meta property=&quot;og:updated_time&quot; content=&quot;2021-02-06T16:46:27.889Z&quot;/&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;/&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;堪称神器的命令行工具系列之 curl&quot;/&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;curl 非常有用的命令行工具库，用于通过 URL 传输数据。它的名字就是客户端（client）的 URL 工具的意思（command line tool and library for transferring data with URLs）。它的功能非常强大，命令行参数多达几十种。如能熟练使用，可以在很多应用场景下，发挥巨大的价值。本篇文章，就跟大家一起探讨下 curl 以及关于它的那些妙用。&quot;/&gt;
&lt;meta name=&quot;twitter:image&quot; content=&quot;https://image.nicelinks.site/curl-wttr-in.png&quot;/&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@nicejadeyang&quot;/&gt;

    
    
    
    
    
    
    
    
    
    

    
    
    

    
    
    
    
    

    
    
    

    
    
    
    
    
    
&lt;/head&gt;&lt;/html&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8a23bb537e39c9d53559b38710e668c2</guid>
<title>微信小程序之大转盘抽奖原生开发</title>
<link>https://toutiao.io/k/hp5efzn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;_2rhmJa&quot;&gt;&lt;p&gt;临近过年了，想在公司的小程序产品上开发一个大转盘抽奖的娱乐功能。应用场景就是给过年的朋友在聚会时抽奖送红包及喝酒时决定谁喝多少杯。&lt;/p&gt;
&lt;p&gt;在网上找了好几个案例，不是写得不够详尽。要不就是使用其他第三方开发工具或第三方小程序库来实现。&lt;/p&gt;
&lt;p&gt;我的需要很简单，就是想用原生来实现这个功能。这样的好处是可以让小程序主包变得非常的小。不然会超过小程序主包只能 2MB 的限制。需要可能通过分包实现。但是，不想如此麻烦。&lt;/p&gt;
&lt;h3&gt;一、需求梳理&lt;/h3&gt;
&lt;p&gt;1）原生开发。避免代码包臃肿。&lt;br/&gt;
2）大转盘奖品6个。并且可以动态修改其奖品内容。&lt;br/&gt;
3）无须借助服务端 API 接口的数据。&lt;br/&gt;
4）点击抽奖按钮要实现音效的播放。&lt;/p&gt;
&lt;h3&gt;二、技术实现&lt;/h3&gt;
&lt;p&gt;1）wxml 核心代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;view class=&quot;random-dial-area&quot; animation=&quot;{{animationData}}&quot;&amp;gt;
      &amp;lt;image class=&quot;random-dial&quot; mode=&quot;widthFix&quot; src=&quot;/images/random-dial.png&quot;&amp;gt;&amp;lt;/image&amp;gt;
      &amp;lt;block wx:for=&quot;{{ awards }}&quot;&amp;gt;
        &amp;lt;text class=&quot;random-dial-name random-dial-name-{{ item.id }}&quot;&amp;gt;{{ item.name }}&amp;lt;/text&amp;gt;
      &amp;lt;/block&amp;gt;
    &amp;lt;/view&amp;gt;
    &amp;lt;image class=&quot;random-dial-pointer&quot; bindtap=&quot;start&quot; src=&quot;/images/random-dial-pointer.png&quot;&amp;gt;&amp;lt;/image&amp;gt;

&amp;lt;view class=&quot;random-list&quot;&amp;gt;
    &amp;lt;van-grid column-num=&quot;2&quot; border=&quot;{{ false }}&quot;&amp;gt;
      &amp;lt;block wx:for=&quot;{{ awards }}&quot;&amp;gt;
        &amp;lt;view class=&quot;award-item&quot;&amp;gt;
          &amp;lt;van-grid-item use-slot content-class=&quot;award-item-content&quot;&amp;gt;{{ item.name }}&amp;lt;/van-grid-item&amp;gt;
          &amp;lt;van-grid-item use-slot content-class=&quot;award-item-content&quot;&amp;gt;
            &amp;lt;view data-id=&quot;{{ item.id }}&quot; bindtap=&quot;showEditAwardDialog&quot;&amp;gt;修改&amp;lt;/view&amp;gt;
          &amp;lt;/van-grid-item&amp;gt;
        &amp;lt;/view&amp;gt;
      &amp;lt;/block&amp;gt;
    &amp;lt;/van-grid&amp;gt;
  &amp;lt;/view&amp;gt;
&amp;lt;/view&amp;gt;

&amp;lt;van-dialog zIndex=&quot;1000&quot; use-slot title=&quot;转盘内容修改&quot; show=&quot;{{ showDialog }}&quot; show-cancel-button
  bind:confirm=&quot;onEditAwardName&quot; bind:close=&quot;onClose&quot;&amp;gt;
  &amp;lt;view class=&quot;exchange-area&quot;&amp;gt;
    &amp;lt;van-field value=&quot;{{ editName }}&quot; auto-focus=&quot;{{ true }}&quot; input-align=&quot;center&quot; center=&quot;{{ true }}&quot; maxlength=&quot;5&quot; placeholder=&quot;请输入名称(最多5个字)&quot; border=&quot;{{ false }}&quot; bind:change=&quot;onChangeEdit&quot; /&amp;gt;
  &amp;lt;/view&amp;gt;
&amp;lt;/van-dialog&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;view class 等于 random-dial-area 的区域是整个大转盘的区域。它的奖品通过数据绑定展示。这样是为了后续可以动态修改才如此操作。&lt;/p&gt;
&lt;p&gt;转盘图片如下：&lt;/p&gt;
&lt;br/&gt;

&lt;p&gt;转盘的图片我们是留空处理的。所以，并不会在转盘图片上写死。&lt;/p&gt;
&lt;p&gt;转盘指针图片如下：&lt;/p&gt;
&lt;br/&gt;

&lt;p&gt;我们在指针图片上绑定了一个抽奖的方法：start。点击这个图片大转盘就开会开始旋转。&lt;/p&gt;
&lt;p&gt;van-dialog 是我使用了 vant weapp 的弹框组件。因为我们项目里面已经内置了。懒得再去重写一个。大家可以使用自己的弹框组件替换。&lt;/p&gt;
&lt;p&gt;2）JS 代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Page({

  /**
   * 页面的初始数据
   */
  data: {
    src: &#x27;&#x27;,                // 音频播放组件。

    deg: 0,                 // 初始化角度
    singleAngle: 60,        // 每片扇形的角度
    isStart: false,

    showDialog: false,      // 修改奖项的弹出框是否显示。
    editId: 0,              // 当前弹框中修改的 ID。
    editName: &#x27;&#x27;,           // 当前弹框中修改的名称。

    animationData: {},
    awards: [],             // 奖项。
    isDefaultAward: false,  // 是否默认的奖项。默认显示系统的奖项。如果用户自己设置了则使用用户设置的奖项。
    defaultAward: [
      {
        &quot;id&quot;: 1,
        &quot;name&quot;: &quot;喝一杯&quot;
      },
      {
        &quot;id&quot;: 2,
        &quot;name&quot;: &quot;喝两杯&quot;
      },
      {
        &quot;id&quot;: 3,
        &quot;name&quot;: &quot;喝半杯&quot;
      },
      {
        &quot;id&quot;: 4,
        &quot;name&quot;: &quot;喝一杯&quot;
      },
      {
        &quot;id&quot;: 5,
        &quot;name&quot;: &quot;替人喝&quot;
      },
      {
        &quot;id&quot;: 6,
        &quot;name&quot;: &quot;免喝&quot;
      }
    ]
  },

  /**
   * 检测是否登录。
   * -- 未登录跳转到授权界面。
   */
  checkLoginStatus() {
    const token = wx.getStorageSync(&#x27;token&#x27;) ? wx.getStorageSync(&#x27;token&#x27;) : &#x27;&#x27;;
    if (token.length == 0 || token == undefined) {
      wx.navigateTo({
        url: &#x27;/pages/auth/auth&#x27;,
      })
    }
  },

  /**
   * 启动抽奖。
   */
  start() {
    this.checkLoginStatus();
    if (this.data.isStart) {
      return;
    } else {
      this.setData({ isStart: true })
    }
    /**
     * 播放音效。
     */
    this.audioCtx = wx.createInnerAudioContext()
    this.audioCtx.src = &#x27;/packageA/voice/dial.m4a&#x27;
    this.audioCtx.seek(0.3)
    this.audioCtx.play()

    let randomVal = Math.random()
    let endAddAngle = parseInt(randomVal * 360)
    // 为了避免指针指到分隔线上或过于相近的区域没有偏差感。我们要进行角度修饰。
    let offsetVal = endAddAngle % 60;
    if (offsetVal &amp;lt; 10) {
      endAddAngle += 10;
    } else if (offsetVal &amp;gt; 50) {
      endAddAngle -= 10;
    }
    const rangeAngle = (Math.floor(Math.random() * 4) + 4) * 360 // 随机旋转几圈再停止
    this.animation.rotate(this.data.deg + endAddAngle + rangeAngle).step()
    let deg = this.data.deg + rangeAngle
    this.setData({ deg: deg, animationData: this.animation.export() })
    this.setData({ isStart: false })
  },

  /**
   * 弹框中输入变动事件。
   */
  onChangeEdit(event) {
    this.setData({ editName: event.detail })
  },

  /**
   * 修改奖项内容。
   */
  onEditAwardName(event) {
    let awards = this.data.awards
    if (this.data.editName.length &amp;gt; 0) {
      for (let i in awards) {
        if (awards[i].id == this.data.editId) {
          awards[i].name = this.data.editName
        }
      }
    }
    this.setData({ awards: awards })
  },

  /**
   * 显示修改奖项内容的弹出框。
   */
  showEditAwardDialog(event) {
    let editId = event.currentTarget.dataset.id;
    let editName = &#x27;&#x27;
    for (let i in this.data.awards) {
      if (this.data.awards[i].id == editId) {
        editName = this.data.awards[i].name
      }
    }
    this.setData({ showDialog: true, editId: editId, editName: editName })
  },

  /**
   * 关联弹出框。
   */
  onCloseDialog() {
    this.setData({ showDialog: false })
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    this.setData({ awards: this.data.defaultAward })
    const animation = wx.createAnimation({
      duration: 3000,
      timingFunction: &#x27;ease-in-out&#x27;
    })
    this.animation = animation
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们在 onLoad 方法里面创建了动画对象。在 start 里面对这个动画进行了角度计算。实现指针停放的区域。&lt;/p&gt;
&lt;p&gt;随后，我们通过调用小程序提供的音频播放接口实现了音效的播放。&lt;/p&gt;
&lt;p&gt;3）wxss 样式&lt;br/&gt;
这个样式主要是针对大转盘上奖品名称的角度计算。这个确实要花费一些时间。我贴一下我的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.container .random-dial-area {
  position: absolute;
  width: 683rpx;
  height: 683rpx;
  top: 323rpx;
  left: 36rpx;
}

.container .random-dial {
  width: 683rpx;
  height: 683rpx;
  display: block;
}

.container .random-dial-area .random-dial-name {
  position: absolute;
  font-size: 31rpx;
  width: 170rpx;
  text-align: center;
  color: #ff302d;
  font-weight: 700;
}

.container .random-dial-area .random-dial-name-1 {
  transform: rotate(-30deg);
  top: 135rpx;
  left: 155rpx;
}

.container .random-dial-area .random-dial-name-2 {
  transform: rotate(-90deg);
  top: 320rpx;
  left: 50rpx;
}

.container .random-dial-area .random-dial-name-3 {
  transform: rotate(-150deg);
  top: 515rpx;
  left: 150rpx;
}

.container .random-dial-area .random-dial-name-4 {
  transform: rotate(150deg);
  top: 515rpx;
  left: 365rpx;
}

.container .random-dial-area .random-dial-name-5 {
  transform: rotate(90deg);
  top: 320rpx;
  left: 475rpx;
}

.container .random-dial-area .random-dial-name-6 {
  transform: rotate(30deg);
  top: 135rpx;
  left: 370rpx;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为过于简单。我把代码贴出来。大家跟着操作就一定能得到想要的效果。大家也可以关注微信小程序“娱乐卡”，点击首页的“转轮盘”体验其实际效果。&lt;/p&gt;

&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cf543a9d94709e4c8a792b5a354e04a7</guid>
<title>如何判断一个员工是潜力无限，还是 “烂泥扶不上墙”？</title>
<link>https://toutiao.io/k/cga5vsn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;53&quot; data-source-title=&quot;&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;此篇文章写于2021.1.15，之前写了一半，所以拖到今天才发。拖延症发作了，尴尬。好了，下面进入正文吧。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;2020年结束了，想必大家都在做各种总结吧，我们部门也一样，一封封总结邮件，发到我的邮箱。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看到总结ppt的心情是复杂的，有一种过山车的感觉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有的PPT很有后现代艺术感，还掺杂着一些抽象派的味道……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有的PPT就很好，一眼就能看出来，很用心，对自己的总结也很到位。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过一份简单的PPT，大致的就能判断这个人是否能够委以重任。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很多人又会喷了：你看就是你们这些无能的管理者，只会看谁PPT写的好，根本不看谁的能力强。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我想说，对不起，PPT写的好的人，能力一般情况下也很强。一个连PPT这么简单的事情都敷衍了事，凭什么让我相信，能够做好一个项目，带好一个团队，这是悖论。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在我7年工作生涯中，面试的人应该不低于200人。看过的简历那就更多了，可能已经远超过1000份了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;如何判断一个员工是潜力无限，火箭般晋升，还是“烂泥扶不上墙”？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;到底要怎么判断呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实我自己有一套标准，或者是方法吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天，我把我这么多年的观察，分享给你，聊一聊我是怎么判断一个人是否能够有潜力，值得委以重任。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第一、看当前这个人能力是不是很强，有没有能力积累。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;能力的高低是非常重要的，是我们能够一眼看出来的。也就直接关系到此时他解决问题的能力，是否能够解决实际问题。我们口中常常提到了牛人，就是能力非常强的人。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第二、看这个人思维格局。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很多人往往存在一种误解，就是用能力来描述这个人的发展潜力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我碰到一些主管经常跟我提到说，这个人工作5/6年了，工作经验很丰富，非常有潜力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实这是不对的，思维方式才决定着这个人的成长“天花板”有多高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;思维方式狭隘的人就很难从别人的角度去思考问题，无法追求彼此间双赢的合作关系。也就是我们常说的利他思维。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在自己的小循环宇宙体系中，以自我感觉为轴心，周而复始的自转，却始终无法和周边关系进行联动，形成大循环正向增强回路体系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;或者说呢，这个人的思维方式，在遇到困难之后，总是在告诉自己：其实我已经做的挺好的，其实这个问题没有更好的解决办法，其实没有做好，都是因为意外。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你会发现，他总是要试图推卸责任给别人，以此来发泄内心的不满。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种思维格局狭隘的人，以后很难快速成长起来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;人的成就，永远无法超越他的思维格局。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第三、是否有旺盛的求知欲&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有些人的能力水平，可能现在并不强，那是因为他还年轻，工作年限不够，工作经验不足，没有好的导师，走了很多弯路，一系列原因才导致了目前能力水平不够。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些人很有可能就是一块“海绵”，你浇灌的“知识泉水”，只要倒下，立刻就被全部吸收。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而有一些人呢，就像一块“瓷砖”，外表华丽，炫彩夺目，其实就是滴水不进，吸收不了任何新的知识和建议。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;“海绵体质”的人，对很多事情充满了好奇心。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总是关心这件事儿，他是怎么做的？你告诉我，你怎么做成功的？这个事儿的处理方式，还有更好的办法吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在追求甘甜的“知识泉水”道路上，永不止步。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而且，总是乐意接受很大的挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如：这事儿还能做得更好吗？我不相信这就是最好的状态，我再来试试看，然后一次次兴奋地去尝试，一次，又一次，哪怕头破血流，也要达到“最优解”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;判断一个人是不是“难堪大用”，还是说这个人可以“委以重任”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;衡量标准就是3点，&lt;/span&gt;&lt;span&gt;即:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）能力&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）思维格局&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3）求知欲&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个人目前能力水平很低，但是思维格局很大，求知欲旺盛，能力提升很快的人，这人就值得委以重任。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外一个人目前能力看似很强，后面不思进取，滴水不进，然后未来无法补充“知识泉水”，且用“瓷砖”封口，这样的人，“难堪大用”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然有的时候，第二种人，有着积累，能力水平看似比第一种人能力水平高，但是依然是不能重用的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;希望大家通过这三个标准之后，能够针对自身的情况“无则加勉、有则补之”，未来属于你们，加油！&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;我是袁吴范，一个教你如何提升认知、快速晋升的90后技术总监&lt;span&gt;，&lt;/span&gt;公众号：”pointers“&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;你可以长按这个二维码加我微信，空位不多。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;记得备注“技术方向”，我会将你拉进一个高品质群，&lt;/span&gt;&lt;span&gt;&lt;span&gt;群里有开发、产品、技术经理、技术总监&lt;/span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;512&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PVZcww4Su3icxqW28rtgt1ib4Iia7XUeWT9EdiapicwxdyHQCKDTRFDWqvErKb0FiaLWzZXQkPANFr00h9RRBC249MHQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3d1600ef115e6fa2b5d153a9e63545a7</guid>
<title>唯品会 Spark 3.0 升级之路</title>
<link>https://toutiao.io/k/lom46j6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;导读&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;唯品会离线平台SPARK2.3.2无缝升级到SPARK3.0.1版本，完全做到了对用户透明，目前正按着既定方案进行升级，新的版本SPARK CORE/SQL/PySpark进行了优化和BugFix，并且Merge了SPARK vip 2.3.2 重要Patch，在性能和易用性上比旧版本都有较大提升。这篇文章介绍了我们升级SPARK过程中遇到的挑战和思考，希望能给大家带来启发。 &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;Spark应用现状&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;本次版本升级之前，唯品会大数据平台使用的主要版本为SPARK2.3.2，并且在社区版本上做了增强和BugFix，为用户提供SparkSQL/SparkJar/PySpark/SparkStream/Spark ML。现在集群有2300物理机，每天有1.2w SPARK 定时作业，8w个实例 在YARN上运行，Spark Adhoc日查询次数9000。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;SPARK在公司推荐使用效果不错，作为批处理默认引擎。从下面图反映SPARK在唯品会大数据应用有半壁江山。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8535825545171339&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wIBWhsMhicga5Cepq06jl4kzHByaw6KicazQ0zMqgHchLaxvvcWa51vUR6nicKnNLFZ7QGzQsFicBKchNLPV6IoyTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;642&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图：离线平台SPARK/HIVE个数对比   &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8551587301587301&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wIBWhsMhicga5Cepq06jl4kzHByaw6KicaXpwzfNYxoUwWbbcXe8I0nmmYvqIR7Mjb3icAAwCzO1dBCb5MgKslZyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1008&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;图：&lt;/span&gt;离线平台SPARK作业个数对比&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9777424483306836&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wIBWhsMhicga5Cepq06jl4kzHByaw6KicaEE0gVIibzMJ02Onovib8e7qxybUDClqOEuGRYteCeT9FOSicVzpV99ibaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1258&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图：离线平台SPARK/PRESTO/HIVE ADHOC查询次数对比 &lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0503778337531486&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wIBWhsMhicga5Cepq06jl4kzHByaw6KicabVQHRiaUIBibql0utezq4oZicN9XM7NfP9ud6UZo1mkKIvWyDcymjg0mA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;794&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图：AI平台各组件应用个数对比&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;SPARK3.0特性和升级背景 &lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Spark SQL是3.0.1中最侧重组件。已解决ISSUE 46％用于Spark SQL。使基于SQL高级别的库（包括结构化流和MLlib）和更高级别的API包括SQL和DataFrames）受益。这也迎合我们现在的主要场景(我们现在90%是SQL)，同时也是优化痛点和主要功能点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;PySpark现在是Spark非常活跃的模块。此版本改善了功能和可用性，包括使用Python类型提示重新设计了Pandas UDF API，新的Pandas UDF类型以及更多的Python错误处理。这为我们新的战场比如推荐，特征工程，下一代AI平台等项目提供更好支持。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Spark 3.0中的功能亮点：自适应查询执行；动态分区修剪；符合ANSI SQL；Pandas API的重大改进；用于结构化流的新UI；加速器感知调度器；增强测试和SQL参考文档。达到了增效降本的目的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8490740740740741&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wIBWhsMhicga5Cepq06jl4kzHByaw6KicaRpcxH6gPSMibst8vlJrdDebuXq0U2iaTI8FoPMY54tuEvZbFyRs8Vu8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 图：3.0.1特性ISSUE模块分布&lt;/span&gt; &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8926174496644296&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wIBWhsMhicga5Cepq06jl4kzHByaw6KicaSrJgaibicl6uYDhyhkox7Yz0UapicibFD2KqIuXxRmFkEr0xcggvlTR1eQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;894&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图：Spark2.3.2的缺点&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;#&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;目标&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;现状&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;痛点&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;解决方案（3.0特性支持）&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;背景1&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;智能优化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;性能提升&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;▲自动合并小文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;▲&lt;/span&gt;仅仅自动调整shuffle partition数&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;▲&lt;/span&gt;主要基于规则优化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;▲&lt;/span&gt;优化靠资源堆砌&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;▲&lt;/span&gt;主要人工分析: 1.倾斜分析靠人工和加盐处理;2.Broadcast Join靠经验判断;3.读写和混洗并发靠人为分析指定&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;手工调参&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;被动优化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;只能基于规则优化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;靠资源堆砌&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;集群资源有限&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;有些场景加了资源效果不佳(倾斜)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;自适应查询执行:1.shuffle partition自动调整;2.动态查询重用;3.本地shuffle读;4.join倾斜自动优化;5.连续读shuffle优化 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;动态分区优化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;其他规则优化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;最小化表缓存同步成本&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;将聚合代码拆分为小函数&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;在INSERT和ALTER TABLE Add PARTITION中添加批处理&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;允许聚合器注册为UDAF&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;背景2&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;基础依赖升级&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;目前线上HIVE为2.3.4&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;SPARK2.x依赖HIVE为1.2.1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;spark2.x依赖Hadoop2.6&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;Hadoop线上为3.2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;HIVE和SPARK函数和语法兼容性问题&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;线上场景多，差异突显就更多&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;Spark2.x升级Hadoop3.x费时费力&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;Spark2.x和Hadoop有第三方依赖冲突&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;SPARK3.0依赖2.3.7 HIVE&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;升级后线上SPARK依赖HIVE和HIVE基准都为2.3&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;Hadoop 3 support&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;Java 11 support &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;GA Scala 2.12 and remove 2.11&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;背景3&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;数据湖&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;Spark2.x通过API操作delta lake &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;实时增量入仓(替换离线抽取装载)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;缺失SQL on  delta lake&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;易用性差&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;Merge性能低&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;数据湖SQL支持&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;SPARK3.0性能加强给delta lake带来性能提升&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;背景4&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;数据源增强&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;Orc默认存储格式&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;SPARK2.X支持Orc/Parquet/sequence/text/csv/jdbc/json&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;列裁剪不确定表达式失效&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;嵌套子字段下推失效&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;CSV下推失效&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;parquet/ ORC:  1.析取谓词的下推;2.通用化嵌套列修剪;3.嵌套字段的parquet谓词下推(仅限parquet);4.支持ORC的合并模式(仅限ORC)5.;ORC的嵌套模式修剪(仅限ORC);6.减少ORC的谓词转换复杂度(仅限ORC)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;Kafka:  1.增加对Kafka报头的支持;2.在Kafka源代码中引入新的选项:3.时间戳偏移(开始/结束);4.&lt;span&gt;支持Kafka批处理源和流处理源v1中的minPartitions选项;5.升级Kafka到2.4.1&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;背景5&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;pyspark增强&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;PySpark2.x UDF多接口实现&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;PySpark2.x错误提示词不达意&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;pyspark应用越来越广但分析维护难&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;重新设计的带有类型提示的pandas udf&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;允许Pandas UDF接受pd.DataFrames的迭代器&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;支持StructType作为标量pandas UDF的参数和返回类型&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;通过Pandas udf支持dataframe Cogroup&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;添加mapInPandas来允许数据帧的迭代器&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;使PySpark SQL异常更加python化&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;背景6&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;spark on cloud&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;Stream on k8s&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;ML on k8s&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;Spark on k8s功能不完善&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;driver和executor的日志收集困难&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;缺乏Spark SQL on k8s&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;缺乏STS on k8s&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;支持用户指定的driver和executor pod模板&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;允许没有外部shuffle服务的动态分配&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;使用k8s进行响应更灵敏的动态分配&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;与Hadoop兼容的文件系统支持客户端依赖关系&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;支持Kubernetes的子路径安装&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;背景7&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;功能增强&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;只支持broadcast join Hints&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;只支持API REPARTITIONS Hints by column&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;Catalyst只支持SELECT/INSERT&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;SQL支持Hints不全&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;Catalyst不支持DML&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;已有些函数性能差&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;引入完整Hints join语法&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;SQL支持REPARTITION BY hint &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;Thrift Server中元数据处理&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;在Catalyst支持删除/更新/合并操作符&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;新的35个内建函数&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;对现有内置函数的改进&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;背景8&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;监控/调试增强&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;SHS日志大且杂乱&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;SHS加载日志性能差&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;metric信息不全&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;UI信息不多&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;metric信息不够&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;分析问题困难&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;测试手段不多&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;新的结构化流UI&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;SHS:允许滚动流应用程序的事件日志&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;SQL exchange操作符添加shuffle度量&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;提高历史服务器的并发性能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;解释格式化命令&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;改进SQL解析器的错误消息&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;向度量系统添加执行器度量和内存使用测量&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;升级Vip SPARK3.0&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;主要升级节点(如下图)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.46015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wIBWhsMhicga5Cepq06jl4kzHByaw6KicaFPWRX5OMeTH8TaMU2LUjHzbgThunibm79vicoPyqV4BYSELYvkFcerVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;合并HIVE VIP1.2.1 patch到2.3.7&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;strong&gt;#&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;strong&gt;Patch描述&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;修复Spark3.0能删非默认hdfs namespace表的目录&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Spark3.0加载vip数据平台函数&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;屏蔽Hive audit log日志&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;解决函数冲突问题&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;合并SPARK VIP2.x patch到3.0.1&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;#&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;strong&gt;Patch描述&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;1&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;小文件合并&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;shuffle文件准实时清理,防止nodemanager磁盘压力大&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Thrift server 删临时目录 bugfix&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Thrift server支持代理用户&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;5&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;支持Hive权限检验&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;6&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Thrift server 超时杀任务&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;7&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;支持bucket 超集&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;8&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;支持Spark bucket(datasource)读写同一目录&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;9&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;支持tf/es/kudu/alluxio/delta到2.1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;灰度上线spark3.0和bugfix&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;线上作业灰度计划&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;*注解p0/p1/p2/p3 为作业重要度级别，以此递减（下图为灰度作业流程）&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.415625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wIBWhsMhicga5Cepq06jl4kzHByaw6KicaXhaN2ib91azpYfJU0JCzas5DFG2Y3dGQfLBqTo8OcDS5OmsRicU5nMqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;bugfix和兼容线上2.3.2&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;灰度线上作业发现BUG不少，但BUG分优先级，优先级高先处理。&lt;/p&gt;&lt;p&gt;灰度线上作业和不断bugfix是一个迭代过程，不断完善和修复因为SPARK3.0上线导致线上问题。&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;strong&gt;#&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;strong&gt;bug/兼容性问题&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;strong&gt;解决方案&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;分号在 -- 注释后面bug，导致SQL执行失败&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;在spark sql语句 每个分号加上换行符&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;数据存储时,不对数据类型和列类型进行校验&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;spark.sql.storeAssignmentPolicy默认值改为LEGACY&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;3&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;stage 和 推测task 映射关系不存在报错bug&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;先判断映射关系存在，再从map去掉结束task和stage映射关系&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;java.text.SimpleDataFormat用于以区域设置敏感的方式格式化和解析日期/时间戳，&lt;/span&gt;&lt;span&gt;默认值是EXCEPTION，当我们得到不同的结果时抛出RuntimeException&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;set spark.sql.legacy.timeParserPolicy默认值改为LEGACY&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;5&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;执行SQL文件，中间某段SQL报错，不会马上退出整个执行&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;SQL顺序执行, 中间有结果状态不为0，直接将状态返回给driver直接退出&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;6&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;stage retry多个active taskSetManager在运行&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;stage retry，设置历史taskSetManager为Zombie状态&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;7&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;静态插入 UI，显示动态分区个数不为0 ，只影响ui显示，不影响执行结果&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;8&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Spark ui 作业结束，但是 history sql 还有显示running job，不影响执行结果&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;.&lt;strong&gt;挑战和应对&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;内部 patch 如何兼容&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;挑战：&lt;/strong&gt;Spark2.x 自研功能比如: 小文件合并；支持权限检验；STS 超时杀任务；Shuffle 文件动态清理等都是是基于2.x打的patch，但是3.0相比2.x整个核心变化比较大， merge到3.0难度增大，测试和灰度工作量增加。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;应对：&lt;/strong&gt;有些patch基于3.0是重新开发一次。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;SQL 语法兼容 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;挑战：&lt;/strong&gt;历史包袱， 线上用户SQL掌握熟练程度不一样，不规范的SQL大有存在，2.x对语法没有那么强制，但3.0默认相对2.x严格一点，这样对灰度线上作业阻力巨大，对保障SLA有冲击。比如: 表不存在删表；数据插入数据列类型和元数据字段是否检验；敏感日期格式化；SQL文件设置非SQL参数报错等。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;应对：&lt;/strong&gt;大部分是兼容2.x版本，少数修改作业兼容3.0.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;新版本BUG不少&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;挑战：&lt;/strong&gt;灰度线上作业出现十几个bug，比如: 注释后面分号无法识别；stage和推测task对应关系找不到；执行SQL文件，中间某段SQL报错，不会立刻退出整个执行，导致数据质量问题；metric 在application结束之后没有complete等。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;应对：&lt;/strong&gt;及时快速Bugfix。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;线上作业灰度工作量大&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;挑战：&lt;/strong&gt;线上作业类型(批处理、流处理、机器学习、adhoc、pyspark和sparkjar)多，作业量大(线上有1.2w个作业)，重要业务，核心全链路必须保障SLA 等情况下， 灰度作业压力不小。而且出现新的bug, 压力就倍增。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;应对：&lt;/strong&gt;必须停止灰度，快速BugFix再灰度。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;平滑升级，SPARK组件每次升级都需要做到尽量对用户毫无感知(后台修改spark_version切换)，升级，灰度，回滚，监控都是平台自动统一处理；&lt;/p&gt;&lt;p&gt;升级充分准备，对新版本的憧憬和敬畏都不可或缺，升级之前要对社区新版本的feature和BUG要有足够的认知，甚至对升级版本和最新版本之间的issue也要有足够的了解，因为后面版本issue很大一部分是对前面的版本进行优化和bugfix，这样才能做到心中有数，比如3.1已经修复不少3.0bug；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;升级策略，社区重大版本一般与线上版本核心架构差异很大，比如3.0加入自适应导致spark sql模块和shuffle service服务发生重大变化，直接在2.3.2基础上 merge 3.0难度较大，风险也高，建议3.x基础之上merge 2.3.2的patch进行升级；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;真理来源于实践，从2.1.1升级到2.3.2为本次2.3.2升级3.0积累不少的经验和套路，为本次升级少走弯路和保障SLA;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;吸取社区，本次升级完3.0不是终点，Spark社区非常活跃，3.1已经出来了，中间有很多非常好的issue, 都需要merge vip SPARK 3.0, SPARK优化永无止境;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;回馈社区，近期打算把VIP SPARK main Patch 比如: 小文件合并；支持权限检验；STS 超时杀任务；Shuffle 文件动态清理 等提交社区。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“&lt;/span&gt;&lt;span&gt;唯技术”一档专为唯品技术人发声的公众号&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;欢迎投稿！！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只要是&lt;span&gt;&lt;strong&gt;技术相关的文章&lt;/strong&gt;&lt;/span&gt;尽管砸过来！&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;88102&quot; data-custom=&quot;rgb(21, 87, 95)&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4073394495412844&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;545&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wIBWhsMhicgYsoZeKGcRicbZteCGTjLicndB3DZFHsmTDo7vibuVZKbhSo5iaEY7l6EQIGA3SBd7XBSAIEJq252aLFQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ac88613d27648817bbf6ea12f4bf643e</guid>
<title>阿里研究员：线下环境为何不稳定？怎么破</title>
<link>https://toutiao.io/k/45uco2u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naJWpqoRh8UzWykicYKtFaxV2AjMibJrMDoUYSt4yNia95LeFCCso14zJUso0BFMd5EsrLVZ7rcspIXVg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这篇文章想讲两件事：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;为什么线下环境[1]的不稳定是必然的？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我们怎么办？怎么让它尽量稳定一点？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;此外，还会谈一谈如何理解线下环境和线上环境的区别。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果没有时间读完全文的话，这里是本文的主要观点：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1. 线下环境不稳定是必然的，在没有实现TiP之前，当前我们能做的是尽量让它稳定一点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2. 避免过多的笼统使用”环境问题“的说法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3. 业务应用线下环境的基础设施必须按照生产环境标准运维。一个实现手段就是直接使用生产环境的基础设施。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4. stable层首先要把单应用可用率提升上去。单应用如果无法做到99.999%或100% 都是能调通的，链路的稳定性就是缘木求鱼、根本无从谈起。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5. 减少dev环境的问题，主要有四个重点：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;做好联调集成前的自测；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;架构上的投入（契约化、可测性）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过多环境、数据库隔离等手段减少相互打扰；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过持续集成尽早暴露问题，降低问题的影响和修复成本。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;6. IaC（Infrastructure-as-Code）是解题的一个关键点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;7. 线下环境是一个场景。要深刻理解线下环境和线上环境这两个不同场景的差异。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以下是正文：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;一  线下环境不稳定的必然性&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;说起线下环境为什么不稳定，经常会听到大家给出这些原因：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实这些原因中大部分都不是本质问题。换句话说，即便狠狠的砸钱、砸人、上KPI，即使机器不用过保机、硬件不超卖、工具建设好把配置监控自愈等和生产环境保持对齐、问题响应机制建立起来，线下环境也还是会不稳定的。因为线下环境不稳定的根源在于：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;线下环境里面有不稳定的代码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;线下环境不稳定带来的影响小&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这两个原因是相互有关系的：我们需要有一个地方运行不稳定的代码，但我们怕不稳定的代码引起很大的问题，所以我们需要这个地方是低利害关系的（low-stakes）；因为这个地方是低利害关系的，所以对它的问题我们必然是低优先级处理的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，线下环境必然是不稳定的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;之所以Testing-in-Production（TiP）是一条出路，就是因为TiP把这两个根源中的一个（即第二点）给消除了：production不稳定带来的影响是很大的。但TiP注定是一条很漫长且艰难的道路，因为我们怕不稳定的代码引起很大的问题。我们需要首先在技术上有充分的能力充分确保不稳定的代码也不会引起很大的问题。这是很有难度的，今天我们还没有100%的信心做到能充分确保稳定的代码不会引起很大的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;既然TiP一时半会儿还用不上、发挥不了很大的作用，那么接下去的问题就是：怎么办？既然线下环境的不稳定是必然的，那我们怎么用不太夸张的投入让它尽量稳定一点？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对策还是要有的。否则，线下环境太不稳定了，大家就都放弃了，不用了，直接跳过，直接把还不太稳定的代码部署到预发环境（pre-production）去了。把预发环境当线下环境用，结果就是预发环境也被搞得像线下环境那样不稳定了。这样再发展下去，预发环境越来越不稳定了，我们还有地方可以去吗？所以，还是要有一整套对策让线下环境尽量稳定一点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;二  怎么让线下环境尽量稳定一点&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  避免过多的笼统使用“环境问题”的说法&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很多同学习惯用“环境问题”、“环境不稳定”来指代线下环境里除了他自己的那个应用之外的所有的问题：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;物理机和网络的问题是“环境问题”&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;中间件的问题是“环境问题”&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据库本身的问题是“环境问题”&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据库里的“脏”数据[2]是“环境问题”&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我的数据被别人的应用消费掉了是&lt;span&gt;“&lt;/span&gt;环境问题&lt;span&gt;”&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;其他应用的配置配错了是&lt;span&gt;“&lt;/span&gt;环境问题&lt;span/&gt;&lt;span&gt;”&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;其他应用重启了导致我的调用失败是&lt;span&gt;“&lt;/span&gt;环境问题&lt;span&gt;”&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;其他应用里的代码bug也是&lt;span&gt;“&lt;/span&gt;环境问题&lt;span&gt;”&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;...&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“环境问题”这个说法太笼统了，过多的笼统使用这个说法是很有害的，因为它会掩盖很多真正的问题。其中的一些问题也是有可能造成生产环境的稳定性和资金安全风险的。过多的笼统使用“环境问题”这个说法的另一个坏处是：会造成在大家的意识里“环境问题”是必然存在的、是无法避免的，导致大家一听到“环境问题”第一反应就是放弃，放弃排查、放弃抗争、放弃探究、放弃改进优化。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;要提升线下环境稳定性，首先要正本清源，尽量避免笼统的使用“环境问题”这个说法。要尽量用具体一点的说法，比如，“网关配置问题”、“某某应用启动超时&lt;span&gt;”&lt;/span&gt;、&lt;span/&gt;&lt;span&gt;“&lt;/span&gt;数据库查询超时“。这些表象/症状背后的原因有很多种可能，是需要我们去排查清楚的，不能&lt;span&gt;“&lt;/span&gt;刷墙&lt;span&gt;”&lt;/span&gt;。所谓的&lt;span&gt;“&lt;/span&gt;刷墙&lt;span&gt;”&lt;/span&gt;的意思是：看到墙上有条裂缝，就找一桶乳胶漆刷一道，把裂缝遮盖掉。&lt;span&gt;“&lt;/span&gt;刷墙&lt;span&gt;”&lt;/span&gt;的行为的一个例子：某个应用启动失败，就换台服务器再试一试，成功了就继续干下面的事情，不去探究之前启动失败背后的原因了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有些时候的确是项目时间太紧了，没时间排查每一个问题。可以现实一点，如果同样的问题出现第二次或第三次（例如，同一个应用、同一个项目分支，这周遇到两三次启动失败），就要追究一下了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  问题拆解&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“环境问题”，归根到底，无外乎来自于三个地方：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基础设施（中间件、数据库、等等）的问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;stable环境的问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;dev环境的问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里要解释一下什么是stable和dev。线下环境的结构在蚂蚁集团和阿里集团的做法一般是这样的：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.40546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJicjcqNFvEMxOpzkDrdCViaBC4asx9Nd9gzTnKdPZYCdhELOBjcic73OSaBf8nFJVphgLicibaVNE0LLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;虽然这三趴对“环境问题”会因人而异，但都不可忽视。要提升线下环境稳定性，必须对基础设施、stable、dev这三趴三管齐下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3  对策：基础设施&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基础设施的稳定是非常关键的一环。如果基础设施不稳定，就会出现“排查疲劳”：每次遇到一些奇怪的问题（启动超时、调不通、等等），如果排查下来10次有9次是基础设施的问题，大家渐渐就不愿意排查了（因为不是代码的问题），一些真正的代码问题也会被漏过。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基础设施层要遵循的原则是：（业务应用的）线下环境的基础设施必须按照生产标准运维 。如果一个系统是运行在公有云上的，那么这个原则就很容易实现，因为线下环境也可以直接运行在公有云上。但有些公司、有些系统，是运行在自建机房、私有云上的，那最好的做法是撤销“线下机房”，直接把业务应用的线下环境放在基础设施的生产机房去跑（同时做好必要的访问控制和业务数据隔离）。线下环境直接放在基础设施的生产机房跑之后，基础设施团队直接按照运维其他生产机房那样去运维，中间件、数据库、缓存、物理机、网络、机房等所有的监控告警、巡检、发布和变更管控、应急、自愈能力、容量管理、等等都能做到位，稳定性可用率有明确的metrics和SLA。慢慢的，就能形成这样的心智：例如，当线下环境的某个业务应用出现数据库查询timeout的时候，我们首先怀疑的是应用自己的SQL查询语句有问题，而不是怀疑数据库有问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4  对策：stable环境&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;线下环境不稳定性的时候，工程师的心智是：当我在dev环境跑测试遇到错误的时候，我的第一反应是&lt;span&gt;“&lt;/span&gt;一定是‘环境问题’&lt;span&gt;”&lt;/span&gt;。也就是说，我的第一反应是&lt;span&gt;“&lt;/span&gt;别人的问题&lt;span&gt;”&lt;/span&gt;，只有当&lt;span&gt;“&lt;/span&gt;别人的问题&lt;span&gt;”&lt;/span&gt;都排出后我才会认真的去看是不是我自己的问题（包括项目的问题）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当基础设施层稳定保障好以后，就能形成这样的心智：当某个应用出现数据库查询timeout的时候，我们首先怀疑的是应用（可能是stable的、可能是dev的）的SQL有问题，而不是怀疑数据库有问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当stable和基础设施这两趴的稳定性都治理好以后，就能形成这样的心智：当我在dev环境跑测试遇到错误的时候，我的第一反应是&lt;span&gt;“&lt;/span&gt;一定是我们的项目有问题&lt;span&gt;”&lt;/span&gt;。其实今天在生产环境大家就是这样的心智。一次变更、一次发布后，如果出现问题，做发布做变更的同学的第一反应都是怀疑是不是这个变更/发布有问题，而不是怀疑是不是（生产）环境本身不稳定。做stable和基础设施的稳定性治理也要达成这样的心智。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;stable的稳定性治理，最终就是在做一道证明题：拿出数据来，证明stable是稳定的（所以，如果有问题，请先排查你的项目）。证明stable是稳定的数据分两类：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;单应用就是检查应用是否起来了、是否或者、RPC调用是否调通（不管业务结果是成功还是失败，但至少RPC调用没有system error）。它验证的是单个应用是可用的，不管业务逻辑对不对，不管配置对不对，不管签约绑卡能不能work，至少这个应用、这个服务、这个微服务是up and running的。单应用稳定性必须达到100%，或者至少应该是“五个9”。这个要求是合理的，因为单应用的稳定性是链路稳定性的基础。如果单应用都没有up and running，链路功能的可用和正确性就根本无从谈起。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;单应用的稳定性度量是很通用的，不需要理解业务场景就可以度量。我们需要做的事情就是：对目标形成共识，把度量跑起来，然后根据度量数据投入人力，一个个问题的排查解决，把稳定性一点点提升上来；后续再出现问题，第一时间排查解决，让稳定性维持在很高的水平。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;链路的稳定性，说白了就是跑脚本、跑测试用例。频率是分钟级也可以，小时级也可以。验证链路的脚本是需要不断的补充丰富的，当发生了一个stable的问题但是验证脚本没有发现，就要把这个问题的场景补充到链路验证脚本（测试用例）里面去。也可以借用测试用例充分度的度量手段（例如，行覆盖率、业务覆盖率、等等），主动的补充链路验证脚本。很多其他测试用例自动生成的技术也可以用上来。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后，达到的效果就是：用数据说话。用很有说服力的数据说话：stable的单应用都是好的，链路也都是通的，这时候出现了问题，就应该先怀疑是项目（dev环境）的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;顺便说一句：stable能不能像基础设施那样也直接用生产环境呢？可以的，stable用生产就是Testing-in-Production了。蚂蚁的影子链路压测就是这种做法的一个例子。只不过如果要把这个做法推广到更大面积的日常功能测试、支持更多链路和场景，复杂度和难度会比影子链路压测更高。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5  对策：dev环境&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;严格来说，dev环境的问题不能算是“环境问题”，也不能算是“线下环境稳定性问题”。因为dev环境就是被测对象（SUT），既然是还在写代码、联调集成和测试，那我们的预期就是它是不稳定的，是会有问题的。只不过实际工作中，dev环境本身的问题也构成了大家对线下环境不稳定的体感。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;根据我们对一些项目进行的具体数据分析来分类，在dev环境遇到的问题的几个头部类型是：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;自测没做好，解法就是要做好自测：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接口契约在软件行业已经有比较多的实践了，例如OpenAPI、ProtoBuf、Pact等。应用间的接口（包括RPC调用和消息），如果只是在一个文档里面用中文或者英文来描述的，上下游之间就比较容易出现gap。也经常出现接口改动只是通过钉钉说了一下，连文档都没有更新。应用间的接口应该以某种DSL来规范的描述，并且在单应用层面根据这个DSL描述进行契约测试，这样能大大减少两个应用到了dev环境放在一起一跑才发现跑不通的情况。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;6  dev环境：隔离&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上面讲到，dev环境问题的第三个主要来源是相互干扰。既有同一个项目中几个同学各自在做联调集成时候的相互干扰，也有几个项目之间的相互干扰。项目之间的相互干扰的根源是共享数据库：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.40078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJicjcqNFvEMxOpzkDrdCViaBSVq3zKXfEzLvDFl9D7eXjUFOU5ibjGIicEvZShJrMtarj8Iq07ibVmGbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;过去，stable环境以及多个项目的dev环境的代码都是访问同一个库的，相互影响就是不可避免的。数据的逻辑隔离和物理隔离都可以解决多项目间的干扰：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.39765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJicjcqNFvEMxOpzkDrdCViaBKNvQ9ktVNgxhZRamUONUPIhmFvhIvLOks8mH4LCH2QpmQW2Iiagvmgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了数据库，缓存、DRM等也需要进行隔离，减少多个项目之间的相互干扰。做好隔离对提升稳定性有很大的帮助。而且，数据库和缓存等的隔离也能大大降低“脏”数据引起的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;7  dev环境：多环境&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了多个项目之间的干扰以外，同一个项目中几个同学各自在做联调集成时候，由于大家都在同一套dev环境（项目环境）上工作，也会出现相互干扰。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;解决项目内相互干扰的出路是多环境：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.63125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJicjcqNFvEMxOpzkDrdCViaBILF7DFnYaagAtkHd4HAzZMWk87cfull9wBkUibGoMeOvtpWSicuHr6Bg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;IaC（Infrastructure-as-Code）和GitOps是实现多环境能力的关键。有了GitOps能力（包括Configuration-as-Code和Database-as-Code），能反复快速创建出一套套新的项目环境，并且保证新创建的项目环境中的配置都是对的（IaC也能更好更有效的确保stable的配置、二方包版本、CE版本等和生产环境是一致的）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;8  dev环境：持续集成&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;单应用的持续集成已经是比较普遍了：在master分支和项目分支上，每次有代码提交都会触发一次单应用的编译构建和测试（包括unit test和接口测试），或者以某个固定周期（例如每15分钟或者每小时）定时触发一次，确保该应用的编译构建和测试一直是好的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;多应用的持续集成就是：在项目分支上，每次有代码提交、或者每隔一定时间，把本项目各个应用的项目分支最新代码部署到dev环境上，并且跑一遍链路级别的用例，确保本项目的这些应用的项目分支代码还是好的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在很多团队，今天开发同学的很多受挫感和时间的浪费都与缺乏项目级别的多应用持续集成有关，例如：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;做好了多应用的持续集成，这些问题就都解决了：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;做好了多应用的持续集成，其他的好处还有：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;三  线下环境和线上环境的区别&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;线下环境和线上环境的区别是什么，不同的人有不同的回答。有的说线下的容量没有线上大，有的说线下没有真实用户，有的说线下缺少生产的真实数据，等等，各种答案都有。线下环境和线上环境还有一个很本质的区别是：它们是两个不同的场景。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;线下环境是一个场景。&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们做业务架构，先要搞明白业务场景，然后才能正确的设计业务架构和技术实现。数据的读和写是高频的还是低频的，数据块是大而少的还是小而多的，读取数据的时间段上有没有明显的峰谷，数据写入后是否会修改（mutable vs. immutable）等等，这些都会影响我们的架构和技术实现方案。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;线下环境也是一个场景，一个和生产环境有不少差异的场景[3]：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  基础设施层面&lt;/span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;中间件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个配置值、一个开关值，在线上的改动是低频的，大部分情况下一天可能也就推个一两次，但在线下可能每天会有几十次、几百次，因为推送一个配置一个开关可能是测试的一部分。这个差异就是场景的差异。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;服务器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;服务器重启，在生产环境里是一个低频事件，很多应用只会在发布的时候重启一次，两次重启间的间隔一般都是数天。但在线下环境，重启的频率可能会高很多。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;数据库&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在生产环境，库的创建和销毁是一个低频事件，但是在线下，如果搞了持续回归和一键拉环境，线下环境数据库就会有比生产高的多得多的库创建销毁操作。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;数据丢失&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;生产环境，我们是不允许数据丢失的。所以，数据库（例如蚂蚁的OceanBase）和DBA团队花了大量的心血在数据丢失场景上。但在线下，数据丢失是完全可以接受的。这个差异，对数据层的架构和技术实现意味着什么？例如，数据库在生产环境是三副本、五副本的，在线下不能支持单副本，能不能很容易的在单服务器、单库级别配置成单副本。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;代码版本&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;生产环境，一个系统，最多同时会有几个不同的代码版本在运行？线下环境呢？这个差异，意味着什么？&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;抖动&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;“&lt;/span&gt;抖动&lt;span&gt;”&lt;/span&gt;是很难避免的，业务应用一般都有一些专门的设计能够容忍线上的基础设施层的一些”抖动“。因此，在生产环境场景里，基础设施层面每天抖N次、每次抖10-20秒，不是一个太大的问题。但这样的抖动在线下环境就是个比较大的问题：每次抖动，都会造成测试用例的失败。这并不是因为这些用例写的不够“健壮”，而是有很多时候测试用例就是不能有防抖逻辑的。例如，如果测试用例有某种retry逻辑，或者测试平台会自动重跑失败的案例[4]，那么就会miss掉一些偶发的的bug[5]。在线下环境里，我们宁可接受每周有一次30分钟的outage（不可用），也不愿意接受每周几十次的10-20秒抖动。一次30分钟的outage，大不了就直接忽略掉那段时间的所有测试结果。而每周几十次的10-20秒抖动意味着大量的测试噪音[6]，意味着要么是大量的额外的排查成本，要么是漏过一些问题的可能。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;2  业务应用层面&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;业务数据&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;线下的数据模式和生产是不一样的。由于执行测试用例，线下的营销系统里的当前营销活动的数量可能比生产要高一个数量级。所以营销应用要在技术层面处理好线下这个场景，如果一个营销应用会在启动的时候就加载所有的当前活动，可能就会在线下出现很长的启动时间。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;数据的生命周期&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我一直倡导的一个原则是“Test environment is ephemeral”，也就是说，线下环境的存在时间是很短的。存在时间短，要求create的成功率高、时间短，但对数据清理要求比较低。存在时间长的，就要求upgrade的成功率高，对create的要求很低，对数据完整性和测试数据清理的要求非常高。继续推演下去，要做好测试数据清理，需要什么？基建层有什么技术方案？业务层需要做什么？业务层是否需要对数据进行打标？测试数据清理这件事，是放在业务层做（基建层提供原子能力），还是在基础设施层做（业务层按照规范打标）？这就是一个架构设计问题。这样的问题，要有顶层设计、架构设计，要针对场景进行设计，不能有啥用啥、凑合将就。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;业务流程&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;生产环境入驻一个商户，会经过一个人工审批流程，这个流程也许会走两三天，有六七个审批步骤。这在线上是OK的，因为线上的商户入驻是相对低频且能够接受较长的处理周期的。但在线下，由于要执行自动化的测试用例，而且要确保测试用例是“自包含”的，商户的创建就会是高频，而且必须快速处理的。所以在技术层面，针对线下环境的场景，要能够“短路”掉审批流程（除非本身要测试的就是审批流程）。类似的流程还有网关的映射配置，线上的网关配置是低频的，但线下的网关配置是高频动作，而且会反反复复。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3  其他&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题排查&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;线上环境是有比较清楚的基线的，比较容易把失败的交易的链路数据和成功的交易的链路做比较。这个做法在线下环境同样有效吗？如果不是，为什么？是什么具体的线下环境的场景差异导致的？又比如说，对日志的需求，线上线下有差异吗？&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;权限模型&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;线下数据库的权限，如果读和写的权限是绑定的、申请权限就是同时申请了读和写，就会很难受。因为工程师为了更好的做问题排查，希望申请上下游应用的数据库读权限，但他们只需要读权限，不需要写权限。如果读写权限是绑定的，即便他们只需要读权限，也要经过繁琐的申请审批，因为涉及了写权限，写权限如果缺乏管控，容易出现数据经常被改乱掉的情况。读写权限申请的时候是绑定的，这在线上环境的场景下也许是OK的，因为生产环境要跑DML本身是有工单流程的，不容易出现数据被改乱掉的情况。但读写权限绑定在线下就不合适了。从架构和设计层面说，读写权限绑定是因为ACL的模型本身没有支持到那个颗粒度。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们一直说，做技术的要理解业务。比如，做支付系统的，要深刻理解不同的支付场景的差异（比如，代扣、协议支付、收银台、…），才能有效的进行架构设计和技术风险保障。例如，代扣场景，没有uid。这意味着什么？没有uid，意味着灰度引流的做法会不一样，精准灰度的做法可能会不一样，新建机房的切流方案也会不一样。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;线下环境也是类似的道理。线下环境也是一个场景。这个场景和生产是不同的场景。每一层（SaaS、PaaS、IaaS）都要深刻的理解不同场景的差异，才能有效的把不同场景都保障好。如果一个应用、一个平台，它的设计和实现只考虑了X场景、没有考虑Y场景，那么它在Y场景下就会遇到这样那样的不舒服，也会使得Y场景下的客户不满意。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;充分理解“线下环境”这个场景，把这个场景纳入到架构和技术实现的考虑中，有助于让线下环境尽量保持稳定。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;四  结语&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;总结一下上面所说的一些关键点：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1. 线下环境不稳定是必然的，在没有实现TiP之前，当前我们能做的是尽量让它稳定一点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2. 避免过多的笼统使用&lt;span&gt;“&lt;/span&gt;环境问题&lt;span&gt;”&lt;/span&gt;的说法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3. 业务应用线下环境的基础设施必须按照生产环境标准运维。一个实现手段就是直接使用生产环境的基础设施。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4. stable层首先要把单应用可用率提升上去。单应用如果无法做到99.999%或100%都是能调通的，链路的稳定性就是缘木求鱼、根本无从谈起。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5. 减少dev环境的问题，主要有四个重点：a）做好联调集成前的自测；b）架构上的投入（契约化、可测性）；c）通过多环境、数据库隔离等手段减少相互打扰；d）通过持续集成尽早暴露问题，降低问题的影响和修复成本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;6. IaC（Infrastructure-as-Code）是解题的一个关键点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;7. 线下环境是一个场景。要深刻理解线下环境和线上环境这两个不同场景的差异。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;[1] 线下环境：这里主要讲的是互联网应用的分布式系统的线下环境。也就是通常说的“服务端”的线下环境。这是阿里集团和蚂蚁集团里面涉及技术人员最多的一类线下环境。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;[2] 其实，很多”脏“数据一点都不”脏“。很多时候，”脏“数据只不过是之前其他人测试和调试代码留下的数据，但这些数据的存在使得后面的执行结果不符合我们的预期。例如，我要测试的是一个文件打批功能，这个功能会把数据库里面尚未清算的支付都捞出来、写到一个文件里。我创建了一笔未清算的支付，然后运行打批，我预期结果是文件里面只有一条记录，但打出来实际有两条记录，不符合我的预期。这种情况其实是我的预期有问题，是我的测试用例里面的assert写的有问题，或者是我的测试用例的设计、我的测试架构的设计有问题，也有可能是被测代码的可测性（testability）有问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;[3] 这些场景的差异，也许有人会把它们都归结为“可测性”。这样说也不是没有道理，因为测试就是线下环境最大的一个作用。但我们还是不建议把线下环境这个场景就直接说成“可测性”，因为“可测性”是一种能力，能力是用来支撑场景的，这就好像“可监控”是一种能力，“可监控”这种能力是用来支撑线上环境这个场景的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;[4] 我们是坚决反对测试平台提供自动重跑失败用例能力的，因为自动重跑对质量是有害的。自动重跑会掩盖一些bug和设计不合理的地方，久而久之这些问题就会积累起来。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;[5] 偶发bug也可以是很严重的bug。曾经有过一个bug，这个bug会以1/16的几率出现。最后排查发现，原因是这段业务应用代码在处理GUID的时候代码逻辑有问题（而GUID是16进制编码的）。当时的test case只要rerun一下，大概率就会通过（有15/16的通过几率）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;[6] 有噪音的测试，比没有测试 还要糟糕。没有测试，是零资产。有噪音的测试，是负资产。有噪音的测试，要额外搭进去很多排查的时间，而且还会损害大家对测试的信心（类似“狼来了”）。&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;想学习找不到资料？&lt;/span&gt;扫码加&lt;/span&gt;&lt;/span&gt;&lt;span&gt;「阿里妹」好友，回复【资料大全&lt;/span&gt;&lt;span&gt;】领取吧~&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;300&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naI2xgQgk6PED6fTkXgXiaOq2ibR1LG1nPQZtmGTVnYia9UGQY4LgCgTd6eEwdqxuEQV9wKjBBiboAsm6A/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;加&lt;/span&gt;&lt;/span&gt;&lt;span&gt;「阿里妹」&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;好友&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;领取技术资料干货&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>