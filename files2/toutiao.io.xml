<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ec01c865a461a815aa3c9cf81ed5839f</guid>
<title>网易数据治理工具产品实践</title>
<link>https://toutiao.io/k/nzo9kek</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPrNu9nX4CQ5LWZo92nujVmphoLhP3tCsiaB8DeOEv1XNRfBB4yQViblGA/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;880&quot; data-cropy1=&quot;85.25951557093425&quot; data-cropy2=&quot;456.74740484429066&quot; data-fileid=&quot;100003453&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.42159090909090907&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPCmibT7Q4eibfclyPCaNkGjZGpCK4z2Mqnxq6GfB8GziboUIfTE4GgX6icg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;880&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;10月中旬，在DataFunSummit的数据产品在线峰会上，我分享了有关数据治理工具的产品实践，从公司内部过往数据治理回顾、当前的治理痛点，针对痛点产品的整体策略以及对于数据治理工具的未来规划四个方面进行了分享，分享收到了在线用户较好的反馈，有关文稿内容整理记录如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;听众收益：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在公司内部，业务线经常面临数据有哪些、质量如何、是否可用、能产生多大价值的困惑，并且，随着数据量的增加，计算和存储资源面临瓶颈。本次分享将围绕数据治理重点关注的计算、存储等方面，分享数据治理的产品实践。通过分享，一方面可以了解当前业务线主要面临的待治理的数据问题，另一方面，从计算、存储等主要方面，了解数据治理需要重点关注的内容，同时，对数据治理的整体产品实践有宏观的认识，对内部业务线的数据治理提供针对性的建议。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;分享正文：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;大家好，&lt;/span&gt;&lt;span&gt;下面由我来给大家分享数据治理工具的产品实践&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;整个分享我将从下面这四个方面进行介绍，分别是网易内部业务线过往的数据治理回顾，当前面临的数据治理痛点，针对痛点，数据治理平台整体的产品策略以及未来的规划。&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003459&quot; data-ratio=&quot;0.5571120689655172&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcP8SV52sVjKXr9mo5AicgnBcWHgPbC5zOBueP2m2qFdAuW2LCaLnicq2Pw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;928&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;1&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;span&gt;过往数据治理回顾&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003461&quot; data-ratio=&quot;0.5709421112372304&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPdEdMiaia5Axz7xYoVF9x2X7GzUviaDbCYLBLsGMVjLh29FbqctwBiaXiakQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;881&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，对于内部业务线，包括严选、传媒和音乐，都做过数据治理专项活动，也取得了初步的成效。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003463&quot; data-ratio=&quot;0.5714285714285714&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcP5Q3pp2aHWJ4wY4JlmAMh3VXpkNqBrb8VyBMiakUvXocfDww3gVicZNicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;882&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于进行数据治理专项活动的背景，一方面随着业务的发展，内部业务线的计算和存储达到瓶颈，但业务方很难判断，是应该继续扩容增加资源，还是对劣质数据进行治理来降低资源危机，但这个过程中，如何定义劣质数据，定义了劣质资源后，要怎么对其进行治理，都是亟待确定和解决的问题；另一方面，数据本身的加工链路长，数据的加工处理没有统一的标准，整个团队内到底有哪些数据，数据的负责人是谁，这些数据是通过哪些任务产出的，这些数据有没有被有效的使用，数据的存在是否有意义，这些都是管理者比较关心的问题，但数据团队都很难回答。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003464&quot; data-ratio=&quot;0.5655913978494623&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPcFrsXGZJpCUfzVY4ddZaaSO9ADWL1XvEyYGkN59mmO4NI20uPT6Ttw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;930&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于各个业务线面临的共同问题，在专项治理活动中，我们给出了针对性的策略。首先将表和任务具体化到责任人，由责任人进行资产梳理，对于没有人认领的资产，比如没有负责人、负责人离职或者负责人为项目等情况，那么就由各个业务线指定专门的治理负责人进行专项治理；然后对于存储资源，首先对无用数据进行规则定义，明确到底达到什么指标可以作为无用数据，比如近90天访问次数均为0等，确定好无用数据的规则后，将项目内无用数据扫描出来，业务方对无用数据进行二次确认，产品上提供操作入口快速下线，同时提供下线列表或累计下线数据等，进行闭环分析；对于计算资源，会对离线任务、自助查询任务消耗的成本进行分析，包括任务的执行时长、预估消耗的费用、消耗的CU等内容，便于业务进行优化，也给任务的下线治理提供依据，成本分析会默认保留近半年的数据，在对任务进行优化后，也可以进行对比分析；最后，对于存储和计算优化后，治理效果要可量化和评估，比如确认下线的存储有多少，对任务优化后节约的资源有多少，便于管理者和治理负责人对治理成果进行评估。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003465&quot; data-ratio=&quot;0.5689851767388826&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcP1cZ7RJy3loqF5rLaQTl7VGP14mdqZoQVq9vCVmEVNgGCKibMWicrd36w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;877&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于治理效率量化可评估这一策略，我们内部有一套自己的成本度量体系。基于底层的表信息、计算任务信息和任务/表之间的血缘信息，汇总为计算、存储的元数据仓库，结合网易内部自己的账单体系，体系中对计算和存储均进行了定价，从而将调度任务、自助查询每次执行消耗的计算成本预估出来，对于存储成本，一方面包含数据表本身的存储成本，另一方面产出该表的计算任务也会分摊该数据表的成本，最终得到数据表总的存储成本。将计算和存储成本转化为费用，更加一目了然的对治理效果进行量化评估。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003466&quot; data-ratio=&quot;0.5678879310344828&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPSyTrfv1PwZp1CZHBd4aMWNZKTBjFz5ysvTdouicdu18JCvicRiaIgHialg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;928&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上述专项治理中提到的策略，在数据治理工具平台均进行了产品功能的落地，通过平台化的功能，进一步提高治理效率。&lt;/span&gt;&lt;span&gt;对任务/表具体化到责任人策略，平台提供项目内所有表的列表，支持查询、转交责任人等功能；&lt;/span&gt;&lt;span&gt;对于无用数据下线功能，平台基于对无用数据的规则定义进行扫描，提供对无用数据下线的入口，确认下线后，默认会将数据表移到灰度空间保存一定时间，到期之后，平台才真正对数据进行删除；&lt;/span&gt;&lt;span&gt;对于数据表的生命周期管理，提供功能入口，针对内外部表均可设置，并且对于外部表，支持可选是否删除目录文件；&lt;/span&gt;&lt;span&gt;对于计算任务的成本分析，对项目内所有调度和Query任务进行扫描，分析任务成本，默认保留近半年的成本记录，便于对任务优化前后进行对比分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003467&quot; data-ratio=&quot;0.5689851767388826&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcP1LibeiaqMbNxdfbvVEfedHKz91phSGwC9GlJF1OyPh9gy8WnEH2Gibqvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;877&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在治理效果衡量体系中，提供待治理和已治理的负责人红黑榜单，便于管理员和个人进行查看，对于产生的费用和下线的存储等内容，从项目和个人角度，提供资产大盘，更加清晰的了解治理的效果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003468&quot; data-ratio=&quot;0.5710928319623971&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPlE7jRNXF6hcictNyRic9n7c94JWBJ6wEwQcd7Qnv9ibFlEVKgFjISicjlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;851&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时，为了更好地触达负责人进行数据治理，建立了邮件和内部工具的通知机制，通知内容分为了两个视角，一方面是治理负责人，可以了解当前自己还有哪些数据需要进行治理，治理后可以给项目节省多少年费用；&lt;/span&gt;&lt;span&gt;另一方面是项目的管理员/负责人，可以知道当前项目下一共还有多少数据需要治理，治理后总共可以节省多少年费用，也可以知道整个项目中治理做的好的负责人Top5，以及还有哪些人占据的成本最多，可以以此为依据，催促负责人进行治理工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003469&quot; data-ratio=&quot;0.5694117647058824&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcP2bGxJtpwibU9xBvjS8pjIqZMg1wg8199W1laeGnicQxY8FTxUOd557qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在专项治理活动中，通过上述的多种策略，初步取得了治理成效。2020年，为云音乐和严选分别优化了47.6%和61%的表，也为传媒业务线节省了约38%的计算资源，数据治理各个业务线的专项活动策略得到了业务方的肯定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;span&gt;当前的数据治理痛点&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003470&quot; data-ratio=&quot;0.5657142857142857&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPqGdhJD0iays7OswLVgdoawhLYPLo7KGbpzcaWJibAYxFTyx6uMjCKib5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一章主要讲解了内部业务线数据治理专项活动采取的策略以及初步取得的成效，接下来重点阐述当前数据治理仍然面临的痛点和那些怎么也填不完的数据&quot;坑&quot;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003471&quot; data-ratio=&quot;0.572992700729927&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPhth7FibLGG9iaKibaJKbAicEZciawMT6d2dG9OUHgGiaTJApgCUj54ibRN6HQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;822&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当前的业务数据治理，主要面临这样几个关键的痛点：&lt;/span&gt;&lt;span&gt;首先业务数据本身没有规范化创建和管理，比如外部表定义目录不规范，有些分区目录location的是表的目录，在对表生命周期进行管理时，若选择删除目录，那么文件就会有被误删的风险；&lt;/span&gt;&lt;span&gt;数据开发团队人员更换频繁，面对众多的业务需求，疲态应对，处于只开发不治理的循环中，数据治理的动力不足，项目内遗留大量的历史数据；&lt;/span&gt;&lt;span&gt;还有就是当计算和存储等资源达到瓶颈后，被领导催着进行治理，缺乏长效的数据治理机制，导致阶段性治理和资源告急循环往复；&lt;/span&gt;&lt;span&gt;然后是治理的效果量化指标粗糙，哪些负责人下线了哪些数据，为项目节省了多少存储，具体节省了多少费用，没有有效的可评估的数据，这也衍生了治理者的消极心态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003472&quot; data-ratio=&quot;0.571590909090909&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPdia6NGAt39yBPxb7LbayfCUhKo5Rq3ntXKUYh1ZCqFlHUOGSMnPNcyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然在上一章也有讲到，数据治理专项活动取得了初步的成效，但依然还存有很多成本问题需要持续进行治理，包括严选、传媒和云音乐都各自有一定比重的表处于待下线状态，占据了相当一部分的存储空间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003473&quot; data-ratio=&quot;0.5699658703071673&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPEDybB7zqs0rLbj9bRhrJRiaIATAZBoY0ia5NMHBZxNiayMHAuwPRia1NkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;879&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据治理这条道路，真的可以用前路漫漫，道阻且长来形容了。&lt;/span&gt;&lt;span&gt;针对成本，包括计算和存储成本，数据量持续在增加，源源不断的带来存储成本，队列的资源也持续紧张，任务优化也亟待解决；&lt;/span&gt;&lt;span&gt;对于质量，数据的加工链路长，任何一个环节都可能带来质量问题；&lt;/span&gt;&lt;span&gt;对于规范，基于ODS、DWD层直接制作的报表数量居高不下，模型的复用率低；&lt;/span&gt;&lt;span&gt;对于安全，项目内的管理员数量众多，太多人有比较高的权限，权限太大应该要怎么控制，以及离职等人员闲置下来的权限应该怎么收回；&lt;/span&gt;&lt;span&gt;对于价值，API、BI等这些下游应用系统，引用表和计算成本要如何进行估量，怎么根据下游应用来量化数据价值。&lt;/span&gt;&lt;span&gt;这些都是在数据治理过程中需要持续关注和解决的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;3&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;span&gt;产品整体策&lt;/span&gt;&lt;span&gt;略&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003474&quot; data-ratio=&quot;0.571917808219178&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPiasMsdLdp2VGH0Y065UDicslJCNueEDPkwGoD6g41YGKqeribFKtAorFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;876&quot;/&gt;第二章讲到了当前面临的数据治理痛点，以及从成本、质量、规范、安全和价值各个方面都有亟待解决的问题。本章将针对上述面临的问题，提出治理方案，并将数据治理过程进行体系化建设，整体形成闭环。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003475&quot; data-ratio=&quot;0.5700110253583242&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPtvSPhyNl0eG7MnVy2COKObraia635YppWsYrlmeYx5YCY1Q7n2F7PXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;907&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据治理本就是一个阶段化的工作，做不到一口能吃个&quot;胖子&quot;，达不到一开始就能把治理工作做到极致，数据治理整体可以分为这样三个阶段：&lt;/span&gt;&lt;span&gt;治理的范围、治理的价值和体系化的治理。&lt;/span&gt;&lt;span&gt;首先要让决策者能够看见和关注，对数据治理的范围进行系统性的梳理，明确需要进行数据治理的范围；&lt;/span&gt;&lt;span&gt;其次需要有一套抓手，能够让真正做治理工作的负责人看到问题，并且有可量化的体系，对治理成效可评估；&lt;/span&gt;&lt;span&gt;最后将治理过程中的策略能够落地到产品功能上，通过短期业务线的宣传运营和长期的闭环机制，整体达到体系化的治理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003477&quot; data-ratio=&quot;0.5694760820045558&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcP2xcD9S2cTVUKfAlWRgGsrUNJwv4rA5FicHRwXICSxJR63Y9vt9M9aqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;878&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面针对上述提到的阶梯化治理的各个过程进行详细的介绍。&lt;/span&gt;&lt;span&gt;初阶段是明确治理范围，整个是围绕数据的全生命周期展开的，在数据生产阶段，需要对需求进行分析，明确业务口径，对数据进行规范采集、任务开发和监控运维；&lt;/span&gt;&lt;span&gt;在数据消费阶段，涉及到快速的查找数据，对数据的分析和对数据质量的探查；&lt;/span&gt;&lt;span&gt;在数据管理过程中，包含权限和成本管理等。&lt;/span&gt;&lt;span&gt;整个流程涉及到成本、标准、质量、安全和价值，各个阶段都会面临对数据的治理工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003479&quot; data-ratio=&quot;0.5701254275940707&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPM0JHncSQkCFDwtNpSW0wdxk3rS47VhBPeJg7gxv66fUWZ77pGZvc0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;877&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;明确了数据治理范围后，然后是对于数据治理价值的量化。&lt;/span&gt;&lt;span&gt;基于数据的全生命周期，包含了成本、质量、安全、标准和价值五个方面，针对每个方面，都要有可量化的指标项，对于成本，包括计算和存储成本的费用量化，对无用数据的下线治理等；&lt;/span&gt;&lt;span&gt;对于价值，需要能够评估每个数据模型、数据报告和API的价值；&lt;/span&gt;&lt;span&gt;对于质量，会包含监控任务覆盖了多少稽核规则，涵盖了多少强弱规则；&lt;/span&gt;&lt;span&gt;对于标准，需要对指标和模型进行规范化定义；&lt;/span&gt;&lt;span&gt;对于安全，会包含数据安全登记和数据权限的治理等工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003480&quot; data-ratio=&quot;0.5689851767388826&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPD6q02uUVqyTWuRO2rb0jdib4SzNJwYQ3ptQxc8IKQTInuGib1nkwweHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;877&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数&lt;/span&gt;&lt;span&gt;据治理不是一个临时性要做的工作，从数据生命周期的全过程到治理体系的健康运行，需要一个长效的治理机制来保证，最后就是体系化的数据治理。&lt;/span&gt;&lt;span&gt;最开始是发现问题，包含成本、标准、质量、安全和价值五个方面，明确需要进行治理的内容；&lt;/span&gt;&lt;span&gt;然后基于需要治理的内容配套专题的治理工具，比如对无用数据的推荐下线，对表生命周期的管理，对计算任务的优化等；&lt;/span&gt;&lt;span&gt;最后在治理工作过程中，持续有治理抓手，包括推送整个项目、个人的资产账单，数据治理的红黑榜，并将资产健康分和个人的任务优先级或资源申请等挂钩，然后内部也举办了数据治理大赛、业务线专项治理活动等来持续运营产品功能。&lt;/span&gt;&lt;span&gt;整体通过发现问题--&amp;gt;解决手段--&amp;gt;持续运营和持续沉淀形成资产治理的闭环。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;4&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;span&gt;未来规划 &lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003481&quot; data-ratio=&quot;0.5743473325766175&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPOoo7f9m3CjYhSopOKTrc77Qk4xyeNmeWR02YibUHoiaWL6SYI8nMI4pw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;881&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第三章主要基于之前提到的数据治理痛点，给出了治理的整体策略方案，下面讲一下数据治理工具的未来规划。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003482&quot; data-ratio=&quot;0.5699658703071673&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXA9MjpHPU87yaJia4XzZWcPC15HTDsrS6cgvOPEC69SKUdyjhuPTjN5YuSJp2ybzyde8pyF8Wm7QQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;879&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于资产治理产品的架构，绘制了一个房子图，如图所示，数据资产治理平台的使命是降本提效、省钱省力，愿景是能够打造成一款全流程、自动化、可落地、高质量的大数据评估和优化工具，成为数据治理的利刃。在这个过程中，以资产健康分为主要抓手，涵盖成本、质量、安全、标准和价值，各个模块均包含需要治理的内容，并且针对资产健康分的不同等级，也会和任务的优先级、申请资源等权限挂钩。&lt;/span&gt;&lt;span&gt;同时配合通知机制，从管理员和用户个人不同角度，对资产治理工作进行触达，调动治理的积极性，提供便捷的治理入口，形成体系化的治理体系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上就是本次有关于网易数据治理工具产品实践的分享，感谢大家~&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101582&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;作者简介&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p hm_fix=&quot;322:369&quot;&gt;云水谣，网易有数产品经理，主要负责数据服务、指标系统和数据治理相关内容。从0到1构建数据服务平台，从1到1.1实现数据治理整体闭环，有丰富的数据平台产品经验。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwNTUxNTI1Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOV4Bfic2e5zqTMCl0XxmMuVq1XpDOBrbXicVB4KmrEXglsWcnMREoQXfX24sscdvQIR74ic3SiciaLoMFA/0?wx_fmt=png&quot; data-nickname=&quot;网易有数&quot; data-alias=&quot;Youdata_Netease&quot; data-signature=&quot;网易有数致力于帮助用户快速在业务场景中应用大数据，助力业务发展和产业升级，让数据更高效地驱动生产力。网易有数旗下包含有数BI，大数据平台，标签画像、CDP、AI机器学习平台等子产品&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sYBGQlzfEOXECeWKgyIia3c7bom7Ir4rh4qI4XdxuRW4lyHudFyglytmLrOM4yYOWs3XNqqj0XlXTEw8icZ2Eb1Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot; data-fileid=&quot;100003451&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;317:401&quot;&gt;分享，点赞，在看，安排一下？&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6b7cd75e142ecbdfa0ab600ece4f9d12</guid>
<title>DDD 到底是银弹还是垃圾</title>
<link>https://toutiao.io/k/gzb5akn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每过一段时间，就会有人跳出来批判 DDD，这东西到底是垃圾还是银弹？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在某某公司干活的时候，有一批人声称要用 DDD 改造老旧系统，彻底解决核心流程规模化之后，项目难以维护的问题。之前某篇文章里的这张图，就是在用 DDD 做项目重构之前的烂摊子：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100000885&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lq0XA1b7xbcTNGQRXoxyQffT0ibyQKzL35qXlhWyia6dyPrgzTyuTypKl2UL0WlZYNYxVMCXIl0Q5zcfOhQZ8B9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3840&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家都很聪明，聪明到最后没人知道这新需求到底该往哪里写了。架构师们聚在一起学习 DDD 精神，产出学习报告，大半年过去，终于出了一些成果，有些子项目完成了用 DDD 进行的重构，年底可以拿来在酒会上邀功了，这下我们跟上了业界业务开发的主流方法论，可喜可贺，可喜可贺啊。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;年末的时候部门内匿名提问的小纸条却向架构师们发直球：“&lt;strong&gt;为什么用了 DDD 以后，代码更难懂了&lt;/strong&gt;？”，当时引得各位 DDD 推手尴尬无比，只能搪塞过去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以你觉得我是要批判么？那倒不是。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在某某司工作期间，到离职前，我把市面上所有 DDD 相关的书全部看了一遍。对其理论体系进行了完整的了解，可以说这套理论还是有些用处的，DDD 的理论诞生时间比较早，微服务的趋势是后来才爆发的。但微服务刚开始没有明确的拆分指导，人们发现 DDD 里的 bounded context 好像看着正好和服务的粒度是可以做个对应的，DDD 就成为了很多公司做业务的绝对主流方法论。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然很多技术人员不爱听，但是技术优劣和商业成败其实没什么必然的联系。同样的，方法论的对错和项目的成功与否也没有必然的关系。很多大公司做业务的人出来讲他们的技术方法论，这些人可能连自己的项目为啥成功都不一定知道，你指望能对你的场景产生直接帮助那可能是想多了。只是当听个乐，得个借鉴那可能还没什么问题。真的当金科玉律去执行，那撞一头包也正常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DDD 和其它的工程方法论一样，没有办法证伪。放眼望去，纯粹堆砌人肉电池，不用 DDD 的项目也那么多成功的，大家的屁股还是在跟着公司的市值跑，哪家公司市值涨到中国第一了，那他们的技术就牛逼，这叫看市值决定价值观。如果一家公司靠 996 成功了，那 996 就是商业致胜的法宝，不学你就落后了。屁股可以决定脑袋嘛。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过作为一个矜持的技术人员，我们在批判方法论的时候，还是应该要先对敌人有一些了解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以这一篇，我就简单带你们看看 DDD 里那些鬼名词都是什么意思。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;战术设计与战略设计&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个 DDD 的方法论可以划分为两个大模块，战术设计、战略设计。这个你顾名思义，战术是小，战略是大。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;战术设计指的就是单模块级的设计，基本都是纯技术范畴的东西，只DDD 中给代码命名和模块设计给出了一些指导方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;战略设计指的是大项目的模块拆分，这个和一线程序员关系不大，主要是公司内怎么在 bu 之间切蛋糕，bu 内怎么在 team 之间分赃&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在很多校招程序员可能或多或少都会碰到一些 OOP 方面的面试题，比如三大特性五大原则之类的，&lt;strong&gt;这些原则是设计项目的时候可以参考的原则， DDD 的战术设计就是在单模块上的各种命名规则和设计方法&lt;/strong&gt;。只不过 OOP 这些原则的发明人(严格的说应该是汇总人)是 uncle bob，就是 《clean code》，《clean architecture》 的作者，这位白胡子爷爷大概率和 DDD 社区是尿不到一个壶里的，所以 《clean architecture》 这本书里只字未提 DDD。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;公司的业务要怎么分派给不同的 bu(部门)去完成&lt;/strong&gt;，这个一般是公司 CTO 或者 GM 要做的事情，&lt;strong&gt;部门内的项目要怎么分，哪些组做哪些事情。这是战略设计的范畴&lt;/strong&gt;。DDD 声称战略设计也是要有方法的。这部分也是很多程序员认为最没用的一部分，我们后面来批判一下这些程序员。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;战术设计&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;战术设计是纯技术范畴的东西，最让人头痛的就是里面的名词。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;贫血模式和充血模式&lt;/strong&gt;：DDD 推荐你用充血模式写代码，也就是按 OOP 的方式去做抽象，然后把行为挂在对象上，而不是以纯过程式 的方法去写代码。所谓的充血，就是对象本身有很多关联的行为，而不只是一个单纯的数据库的表的字段映射。DDD 声称的充血模式的优势是，大部分的行为被封装到了对象内部，这样我们在阅读流程代码的时候，是一目了然的，直接能看到 step 1，step 2，step 3。但实际即使我们不用 OOP 来组织行为，一样可以把不同的业务 step 做好封装和复用。有些公司的服务粒度拆的特别细，比如只有 5000-10000 行代码，在 DDD 里声称的充血模式的优势没有那么明显。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;值对象和实体&lt;/strong&gt;：这个也挺离谱的，值对象就是纯粹的数值、文本类型，比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; person struct {&lt;br/&gt;  age int&lt;br/&gt;  name string&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就是值对象，如果我们给这个 person 加一个 id，让它能表示 person 的唯一性了；&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; person struct {&lt;br/&gt;  id  int&lt;br/&gt;  age int&lt;br/&gt;  name string&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那它就是实体了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个概念只是给我们日常用的对象们进行了一个简单的分类，没什么大用处。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;聚合根&lt;/strong&gt;：DDD 里所谓的聚合根是事务粒度的 entity，也就是说，如果我们对 db 进行存取，那么我们就需要有一个聚合根，如果在一个事务里需要操作多张表，那么就需要给多张表关联一个单独的聚合根。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100000881&quot; data-ratio=&quot;0.5355450236966824&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lq0XA1b7xbcTNGQRXoxyQffT0ibyQKzL3BtfINJLquWXGEMn1efP1DvItkvRM3bNE4u3rv0xwyd6KLwhpib9HW6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;422&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;聚合根可以由一个 entity 组成，也可以由多个 entity 组成，就是你完成一个 db 事务的时候有多少关联的对象 ，那可能就有多少在同一个聚合根下面的 entity。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;六边形架构&lt;/strong&gt;：这个所谓的六边形架构，就是除了业务以外的所有外部变化都抽象成 adapter interface 做适配。如果你稍微理解一点点点依赖反转，那应该知道怎么样去做这种抽象。如果你一点都不了解，那我建议你去看看 go-micro 的代码。如果看不懂，建议还是尽早转行吧~&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100000882&quot; data-ratio=&quot;0.9409340659340659&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lq0XA1b7xbcTNGQRXoxyQffT0ibyQKzL36eBBjVMMXiaUb6H1qaE9mOntRPJ6h6Bg7tu9Ie82eAuEh08MShicnZcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;728&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;六边形架构这东西主要是名字实在起的太奇怪，在 《clean architecture》那本书里，uncle bob 也给过一张图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100000884&quot; data-ratio=&quot;0.7344559585492227&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lq0XA1b7xbcTNGQRXoxyQffT0ibyQKzL326DicbZRuQISsjRLDxmiaetVVBKiaZbUxdZ5BJ4dsic0LfcgLyDO9pFHtw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;772&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《evolutionary architecture》这本书出自造词大本营 thoughtworks 的员工之手，里面有一个 plugin architecture，就是有些人特别喜欢说的插件化架构：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100000883&quot; data-ratio=&quot;0.49808429118773945&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lq0XA1b7xbcTNGQRXoxyQffT0ibyQKzL36eicfXRjxCLuI9ZW7jynPVOEPaOsgRj0LFmCX0kOmnYBFDrRuZJRNOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1044&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Repo Pattern&lt;/strong&gt;：DDD 理论认为我们业务项目的存储这一层是可能经常变化的，所以就专门存储层的 interface 设计单独拿出来，称为 Repo Pattern，这东西实在没啥可说的，find，getlist，save，你只要有一点点 orm 经验，里面有啥接口应该自己都可以默写出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事实是在 2021 年，我们的存储系统基本是不太可能做切换的了，即使切换，那些新兴的社区存储系统也会支持 MySQL 协议，基础设施想要侵入代码，那简单是大逆不道啊。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;领域事件&lt;/strong&gt;：其实就是做上下游解耦的 kafka message，我们用 domain event 显得会更洋气一些。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;领域服务&lt;/strong&gt;：Domain service，顾名思义，你认为是自己部门或者组内的局部 api gateway 也是可以的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上，如果你是在大公司一线工作了两三年的程序员，上面这些东西应该马上就能理解，没有啥值得说的。如果是为了去架构师大会上秀一秀，你总得包装一下让自己显得没那么土吧？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;战略设计&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Domain&lt;/strong&gt;：领域，你们公司是干啥的，你都不知道吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Core Domain&lt;/strong&gt;：你们公司的卖货的，那卖货就是你们与其它竞争对手的关键竞争环节。这就是核心域，就是核心业务，为啥聪明人都往核心业务挤？核心业务的汤也比边缘业务的饭好啊。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;SubDomain&lt;/strong&gt;：你们公司的卖货的，但是用户没法付钱，那也没法干，支付就是子领域。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Supporting Domain&lt;/strong&gt;：你们公司是卖货的，但是客户想看一些指标，你总得有系统能支持吧？可能就是些写写 SQL 的系统。支持域。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Generic Domain&lt;/strong&gt;：你管你们公司干什么呢？员工的在职离职，工资发放总得有系统能支持吧，这些就是通用域。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了第一个 Domain ，其余四个 domain 重要性逐级递减，递减的意思是，如果公司要裁员，那是从下面往上面裁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我说有些程序员觉得 DDD 战略设计没用，你连自己所在的组，从事的工作职责对于公司来说重不重要都不清楚，那被裁的时候也别哭哦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;统一语言&lt;/strong&gt;：这个就更好理解了，比如跳水这个词，你说跳水的时候指的是这个：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100000889&quot; data-ratio=&quot;1.15&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lq0XA1b7xbcTNGQRXoxyQffT0ibyQKzL3ENdvvXqicXPEW5VU0qswHMHricU0Reliad4VgEDibDchGN5LXGYaKLuV7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而你同事说跳水的时候指的是这个：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100000888&quot; data-ratio=&quot;0.46402877697841727&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lq0XA1b7xbcTNGQRXoxyQffT0ibyQKzL3hxaJZUc91AxjjxibboQqbql0dnNktHBia43GbQQibDSO5IBnnZf5jT1Yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;556&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里你们聊的是工作，那说明你们一定不是在同一个上下文里工作，可能你们俩一个在体育赛事部门，另一个可能是在金融部门， DDD 认为可以用统一语言来进行领域划分工作。划分后在同一个上下文内，同一个名词大家说出来意思一致。这就是 &lt;strong&gt;Bounded Context，  ain。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然拆分了，如果我们还在同一个 domain 内，那完成业务流程是需要协作的，这个不同 Context 的协作方式就叫 &lt;strong&gt;Context Maps 或者 Integration Type。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;名词很恶心，但具体的方法就两种，两个微服务要么通过 RPC 通信，要么通过 MQ 通信。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果通过 RPC 通信，那 callee 一般是 caller 的爹，很多时候 callee 挂了是要影响 caller 的(当然也有熔断之类的方法避免一起死)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过通过 MQ 通信，那上游一般是下游的爹，因为上游一个重构，下游们可能就都炸了，最终一致都是屁话，多少公司的最终一致都是靠人肉修的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种爹和儿子的关系就是 &lt;strong&gt;Conformist&lt;/strong&gt;。如果爹能多考虑一下儿子的需求，那就是 &lt;strong&gt;Customer-Supplier&lt;/strong&gt; 关系，毕竟顾客名义上还是上帝。如果跨系统有一些需要共享的定义，比如公司里的业务分类，可能大家都要从某个系统的 PHP 文件里解析出来在自己的系统里去用，那这时候可能得去使用别人的代码，这种叫 &lt;strong&gt;Shared-Kernel，Kernel 一改，大家一起死。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，有时候我们可以用一个叫 ACL 的东西拦住上游的一些修改对我们的业务逻辑侵入：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;防腐层&lt;/strong&gt;：Anti-Corruption-Layer，就是我要把外部系统的变化拦截在对接层，不要让别人的屎甩到我身上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;讲到这里，基本的概念我们已经都过一遍了，你要说 DDD 一点用处都没有，那我也是不同意的，至少看完了这些书，我知道去哪里能赚到更多的钱了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;额外再说一句，DDD 的书写的都不怎么样。&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7f1fd9bf065e6e93623afef0b1c07938</guid>
<title>Go：使用 sync.Map 来解决 map 的并发操作问题</title>
<link>https://toutiao.io/k/hk038xd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left&quot; aria-describedby=&quot;js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MjM5NDM4MDIwNw==&amp;amp;action=getalbum&amp;amp;album_id=1338087502032470016#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1338087502032470016&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#Go 语言入门到实战&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;39个&lt;span class=&quot;weui-hidden_abs&quot;&gt;内容&lt;/span&gt;&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;文章目录：&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;前言&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;map 并发操作出现问题&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;sync.Map 解决并发操作问题&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;计算 map 长度&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;计算 sync.Map 长度&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;小结&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;推荐阅读&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;前言&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 &lt;code&gt;Golang&lt;/code&gt; 中 &lt;code&gt;map&lt;/code&gt; 不是并发安全的，自 1.9 才引入了 &lt;code&gt;sync.Map&lt;/code&gt; ，&lt;code&gt;sync.Map&lt;/code&gt; 的引入确实解决了 &lt;code&gt;map&lt;/code&gt; 的并发安全问题，不过 &lt;code&gt;sync.Map&lt;/code&gt; 却没有实现 &lt;code&gt;len()&lt;/code&gt; 函数，如果想要计算 &lt;code&gt;sync.Map&lt;/code&gt; 的长度，稍微有点麻烦，需要使用 &lt;code&gt;Range&lt;/code&gt; 函数。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;map 并发操作出现问题&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt; demo := make(map[int]int)&lt;br/&gt;&lt;br/&gt; go &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; j := 0; j &amp;lt; 1000; j++ {&lt;br/&gt;   demo[j] = j&lt;br/&gt;  }&lt;br/&gt; }()&lt;br/&gt;&lt;br/&gt; go &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; j := 0; j &amp;lt; 1000; j++ {&lt;br/&gt;   fmt.Println(demo[j])&lt;br/&gt;  }&lt;br/&gt; }()&lt;br/&gt;&lt;br/&gt; time.Sleep(time.Second * 1)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;fatal error: concurrent map &lt;span&gt;read&lt;/span&gt; and map write&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;sync.Map 解决并发操作问题&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt; demo := sync.Map{}&lt;br/&gt;&lt;br/&gt; go &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; j := 0; j &amp;lt; 1000; j++ {&lt;br/&gt;   demo.Store(j, j)&lt;br/&gt;  }&lt;br/&gt; }()&lt;br/&gt;&lt;br/&gt; go &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; j := 0; j &amp;lt; 1000; j++ {&lt;br/&gt;   fmt.Println(demo.Load(j))&lt;br/&gt;  }&lt;br/&gt; }()&lt;br/&gt;&lt;br/&gt; time.Sleep(time.Second * 1)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;nil&amp;gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;1 &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;...&lt;br/&gt;&lt;br/&gt;999 &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;计算 map 长度&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt; demo := make(map[int]int)&lt;br/&gt;&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; j := 0; j &amp;lt; 1000; j++ {&lt;br/&gt;  demo[j] = j&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;len of demo:&quot;&lt;/span&gt;, len(demo))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;len of demo: 1000&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;计算 sync.Map 长度&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt; demo := sync.Map{}&lt;br/&gt; &lt;br/&gt; &lt;span&gt;for&lt;/span&gt; j := 0; j &amp;lt; 1000; j++ {&lt;br/&gt;  demo.Store(j, j)&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; lens := 0&lt;br/&gt; demo.Range(func(key, value interface{}) bool {&lt;br/&gt;  lens++&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt; })&lt;br/&gt;&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;len of demo:&quot;&lt;/span&gt;, lens)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;len of demo: 1000&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小结&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Load&lt;/code&gt; 加载 key 数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Store&lt;/code&gt; 更新或新增 key 数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Delete&lt;/code&gt; 删除 key 数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Range&lt;/code&gt; 遍历数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;LoadOrStore&lt;/code&gt; 如果存在 key 数据则返回，反之则设置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;LoadAndDelete&lt;/code&gt; 如果存在 key 数据则删除&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上，希望对你能够有所帮助。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;推荐阅读&lt;/h2&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MjM5NDM4MDIwNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/go9jpG3BuhQHrM0sshKxdaibyDNjXooZvnwwy0yRjdhlXrtVUkJSvQib4Ppwib1v5HucaRc8WPtgvhPBicMeiadAv9Q/0?wx_fmt=png&quot; data-nickname=&quot;新亮笔记&quot; data-alias=&quot;XinLiangTalk&quot; data-signature=&quot;程序猿的打怪升级之路。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;318&quot; data-backw=&quot;578&quot; data-fileid=&quot;301352370&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/go9jpG3BuhSP7wibS4BHtlu4hduFYq8VbSAgRic8ib6hdd6qTRGxYSic7UFF9yPyGd4pGUw1XicibFRlGHBe9RJ09Smw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ffee5e5597eee987e2c36b29aaf431be</guid>
<title>关于缓存更新的一些可借鉴套路</title>
<link>https://toutiao.io/k/nif5tvl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-mpa-category=&quot;背景&quot; data-mpa-template=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h3 data-pm-slice=&quot;1 1 []&quot;&gt;&lt;span&gt;hello，大家好，我是张张，「架构精进之路」公号作者。&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-pm-slice=&quot;1 1 []&quot;&gt;&lt;span&gt;&lt;strong&gt;一、背景&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;目前随着缓存架构方案越来越成熟化，通常做法是引入「缓存」来提高读性能，架构模型就变成了这样：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-fileid=&quot;301282633&quot; data-ratio=&quot;0.4928131416837782&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgQMfpw6cUPWibWevU6ed3icDvMuV5EyBgMIddFF9daXqbJS7XbaZKkR2GjraI5He1f9QPic6UgxlTdKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;974&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;先来看一下什么时候创建缓存，前端请求的读操作先从缓存中查询数据，如果没有命中数据，则查询数据库，从数据库查询成功后，返回结果，同时更新缓存，方便下次操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在数据不发生变更的情况下，这种方式没有问题，如果数据发生了更新操作，就必须要考虑如何操作缓存，保证一致性。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;如何保证缓存和数据库的一致性&lt;/span&gt;&lt;span&gt;，这算得上是个老生常谈的话题啦，看到好多技术新人在写更新缓存数据代码，采用了非常复杂甚至“诡异”的方案，甚为不解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天就一起花点儿时间来聊聊吧~&lt;/span&gt;&lt;/p&gt;&lt;h3 data-pm-slice=&quot;1 1 []&quot;&gt;&lt;span&gt;&lt;strong&gt;二、缓存和数据库数据一致性问题&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1）先更新缓存，后更新数据库&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果缓存更新成功了，但数据库更新失败，那么此时缓存中是最新值，但数据库中是「旧值」。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然此时读请求可以命中缓存，拿到正确的值，但是，一旦缓存「失效」，就会从数据库中读取到「旧值」，重建缓存也是这个旧值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这时用户会发现自己之前修改的数据又「变回去」了，对业务造成影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2）先更新数据库，后更新缓存&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果数据库更新成功了，但缓存更新失败，那么此时数据库中是最新值，缓存中是「旧值」。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之后的读请求读到的都是旧数据，只有当缓存「失效」后，才能从数据库中得到正确的值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这时用户会发现，自己刚刚修改了数据，但却看不到变更，一段时间过后，数据才变更过来，对业务也会有影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可见，上面两种情况，无论谁先谁后，但凡后者发生异常，就会对业务造成影响。那怎么解决这个问题呢？&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;三、&lt;span&gt;缓存更新Design Pattern&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;介绍几个也许有效的套路给大家吧~ 希望有帮助。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;1）Cache Aside Pattern&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;img data-fileid=&quot;301282632&quot; data-ratio=&quot;0.31333333333333335&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgQMfpw6cUPWibWevU6ed3icDvh0aW3a13AmFRWyhus8F50n90hEmFwTaq1OSibRrsYBsaIogcCOsqNlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-fileid=&quot;301282630&quot; data-ratio=&quot;0.31&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgQMfpw6cUPWibWevU6ed3icDv27FhGOEFfFNISv0UzAgn503ZOpqD9J6PO6ic9sL4jUZJq2bFXVDibOpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如上图所示，一个是查询操作，一个是更新操作的并发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，没有了删除cache数据的操作了，而是先更新了数据库中的数据，此时，缓存依然有效，所以，并发的查询操作拿的是没有更新的数据，但是，更新操作马上让缓存的失效了，后续的查询操作再把数据从数据库中拉出来。而不会像文章开头的那个逻辑产生的问题，后续的查询操作一直都在取旧数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么，&lt;/span&gt;&lt;span&gt;是不是Cache Aside这个就不会有并发问题了？&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;89&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;不是的。&lt;/section&gt;&lt;section&gt;比如，一个是读操作，但是没有命中缓存，然后就到数据库中取数据，此时来了一个写操作，写完数据库后，让缓存失效，然后，之前的那个读操作再把老的数据放进去，所以，会造成脏数据。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;2）Read/Write Through Pattern&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;Read Through 套路就是在查询操作中更新缓存，也就是说，当缓存失效的时候（过期或LRU换出），Cache Aside是由调用方负责把数据加载入缓存，而Read Through则用缓存服务自己来加载，从而对应用方是透明的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Write Through 套路和Read Through相仿，不过是在更新数据时发生。当有数据更新的时候，如果没有命中缓存，直接更新数据库，然后返回。如果命中了缓存，则更新缓存，然后再由Cache自己更新数据库（这是一个同步操作）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;操作逻辑如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-fileid=&quot;301282631&quot; data-ratio=&quot;1.3478260869565217&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgQMfpw6cUPWibWevU6ed3icDvvRxxKtv7vhD35F2cgicSmFkNMAYmNOGIc3iavCmVUlibfia32pcBm3NwHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;460&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）Write Behind Caching Pattern&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基本逻辑如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-fileid=&quot;301282634&quot; data-ratio=&quot;1.28125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgQMfpw6cUPWibWevU6ed3icDvuohXp7Ig9cLDeC3stOfDckJibaKAY1BXpqHWw6vWN5bNkXibibtEOZ0WQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Write Behind 又叫 Write Back。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简单说就是，在更新数据的时候，只更新缓存，不更新数据库，而我们的缓存会异步地批量更新数据库。这个设计的好处就是让数据的I/O操作飞快无比（直接操作内存的嘛 ），因为异步，write backg还可以合并对同一个数据的多次操作，所以性能的提高是相当可观的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是，其带来的问题是，数据不是强一致性的，而且可能会丢失（我们知道Unix/Linux非正常关机会导致数据丢失，类似这种情况）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外，Write Back实现逻辑比较复杂，因为他需要track有哪些数据是被更新了的，需要刷到持久层上。操作系统的write back会在仅当这个cache需要失效的时候，才会被真正持久起来，比如，内存不够了，或是进程退出了等情况，这又叫lazy write。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;四、总结&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;对于这个老生常谈的问题，分析起来其实并不简单。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;额外分享几点自己心得给你：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、性能和一致性不能同时满足，为了性能考虑，通常会采用「最终一致性」的方案；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、掌握缓存和数据库一致性问题，核心问题有 3 点：缓存利用率、并发、缓存 + 数据库一起成功问题；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、失败场景下要保证一致性，常见手段就是「重试」，同步重试会影响吞吐量，所以通常会采用异步重试的方案；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、订阅变更日志的思想，本质是把权威数据源（例如 MySQL）当做 leader 副本，让其它异质系统（例如 Redis / Elasticsearch）成为它的 follower 副本，通过同步变更日志的方式，保证 leader 和 follower 之间保持一致。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;🎉&lt;/span&gt; 福利&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;关注公众号回复关键字：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，即可免费获取&lt;strong&gt;《&lt;span&gt;Redis设计与实现&lt;/span&gt;》电子书&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;·················· &lt;/span&gt;&lt;span&gt;END&lt;/span&gt;&lt;span&gt; ··················&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关注公众号，免费领学习资料&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA3MDg5MDkzOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgQmUQ0Aca9qSYNFn0tQEXQc5EibBkqQLYtibYBj1hXuagwXkNc3kVwplHxIl7KQfBIiagysgn9GDUUibw/0?wx_fmt=png&quot; data-nickname=&quot;架构精进之路&quot; data-alias=&quot;jiagou_jingjin&quot; data-signature=&quot;十年研发风雨路，大厂架构师，CSDN博客专家，InfoQ写作平台签约作者。专注软件架构研究，技术学习与职业成长，坚持分享接地气儿的架构技术干货文章！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;十年研发路，大厂架构师，&lt;/span&gt;&lt;span&gt;CSDN博客专家&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;专注架构技术学习及分享，职业与认知升级&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;坚持分享接地气儿的干货，&lt;span&gt;期待与你一起成长&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98311&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;301282636&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgTqLjdQBs7fV8zqHRaQhA2ibia13fFn6ibS5qr5PpmZoxd8nlhAyJu7d1CjLicAruicOEb7uxibEGM476xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87502&quot;&gt;&lt;p&gt;&lt;span&gt;「架构精进之路」专注架构研究，技术分享&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97708&quot;&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;点“赞”和“在看”哦&lt;/span&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;1.5925925925925926&quot; data-type=&quot;gif&quot; data-w=&quot;135&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/noz2jw2hPlWiaCrGuJxBicU5mcib3QapDLyo6eKnNVm9dPTV4Z1SicHLtrCCwOG9gblMBFlKf7p9cvwL6wIkZJvamg/640?wx_fmt=gif&quot; data-fileid=&quot;301282635&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bef19657d1c40ccffa2ccd6332ffac54</guid>
<title>架构师之路：Redis 集群解析</title>
<link>https://toutiao.io/k/s5y6khz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;引子&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;387&quot; data-backw=&quot;489&quot; data-fileid=&quot;100002217&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7914110429447853&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicgibf1ZSZNG1VHPB2kgIj6EskHEhWB45GXNliczkNNMjknrckFVch8icWm9uGL9DdlF7uCcdDb5w22A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;489&quot;/&gt;&lt;/p&gt;&lt;p&gt;上篇&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485862&amp;amp;idx=1&amp;amp;sn=414f61b537094b14dab2682a343700e9&amp;amp;chksm=fafde308cd8a6a1e993ed8774cef1c8dc1233761a17b27395b89e3d2c74b0908e0971aeedf9a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《架构师之路-https底层原理》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《架构师之路-https底层原理》&lt;/a&gt;里我提到了上面的整体视图，文章也介绍了想要真正能在工作中及时正确解决问题的基本功：原理理解透彻。今天以redis集群解析为例介绍一个及时敏锐的发现问题的基本功：深入分析。&lt;/p&gt;&lt;p&gt;我认为达到深入分析有三个步骤：&lt;/p&gt;&lt;p&gt;第一步，深入理解&lt;/p&gt;&lt;p&gt;第二步，学以致用&lt;/p&gt;&lt;p&gt;第三步，千人千问&lt;/p&gt;&lt;p&gt;第一步redis集群各种原理介绍的人也很多；第二步很多人实际项目中大概也对redis集群不陌生；所以本文主要讲第三步：千人千问。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;提出问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&quot;redis集群使用时有什么注意事项？&quot;这是之前有段时间我面试喜欢问的一个问题。我的一个观点是作为redis集群的使用方而不是开发者首先要做的是用好。通过这个问题确定候选人用好了，再去挖掘他是通过了解了怎么用好的。所以我通常不会一开始就问一些中间件的原理，而是先从使用者的角度提出问题。&lt;/p&gt;&lt;p&gt;下面列举了6条代表性的回答：&lt;/p&gt;&lt;p&gt;1&amp;gt;防止集中失效&lt;/p&gt;&lt;p&gt;2&amp;gt;单线程执行，注意不要卡住&lt;/p&gt;&lt;p&gt;3&amp;gt;注意客户端和服务端的版本匹配&lt;/p&gt;&lt;p&gt;4&amp;gt;分片要保持流量均匀&lt;/p&gt;&lt;p&gt;5&amp;gt;注意超时时间配置&lt;/p&gt;&lt;p&gt;6&amp;gt;当内存缓存用，推荐删除代替更新&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;每条问题前面加上个为什么，就引出了6条新的问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;解决问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Q1：为什么要防止缓存集中失效？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A：缓存穿透、缓存集中失效和缓存雪崩并称为缓存世界的三大问题。先来总结理解一下这三个概念。这三个概念都是建立在缓存的一大作用就是对后端存储，比如mysql的保护。缓存没有保护住mysql，一个或一些到mysql了，那就是穿透；一个时间点缓存数据没有了，打到mysql了就是集中失效；缓存完全丧失了保护mysql的能力，请求全打到mysql了，就是雪崩。&lt;/p&gt;&lt;p&gt;所以防止缓存集中失效是对后端存储的保护。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Q2：为什么单线程执行，注意不要卡住？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A：卡住换个专业点的词就是阻塞嘛。什么叫阻塞呢，一辆小轿车A在单行道跑，遇到前面一辆车B停了，那A就被阻塞了。如果A和B都在高速单行道上跑，A开了160迈、B开了140迈。就算高速的允许最高速度是120迈(咱就当路过的是没有摄像头的路段，这俩车肆无忌惮)，那A是不是还是被B给阻塞了呢？所以卡住造成的最直接影响就是快的快不起来，因为单线程不能绕行嘛。&lt;/p&gt;&lt;p&gt;有人说不是可以多开几个redis嘛。是滴，但是客户端分请求使用的是crc16，根本不会先探测哪个服务端比较空闲呀。所以后面来的总会被阻塞。&lt;/p&gt;&lt;p&gt;注意不要卡住还有个大家更常听到的名字：“避免大key问题”。其实我刚听到这个名字的时候是觉得很奇怪的。因为避免大key实际上是要避免key所对应的value不要太大。我之前一直觉得这个名字取的不对。那应该叫“避免大value问题”。后来想想这确实是正宗的中国话。比如张三的媳妇，人家都怎样叫呢？一般都是张三媳妇、张三家的。因为他家主要是张三出来抛头露面。那redis取值也一样，一般是先知道key，从key取value。用这个key取出来的数据大，就是大key问题啦。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Q3：如果不注意客户端和服务端版本匹配会引发什么问题？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A：先来思考客户端做了什么事情。我理解它就做了两件事：第一是使用RESP（Redis自定义的序列化协议）传输客户端命令并返回结果。第二是为了做第一件事，因为Redis集群是直连服务端模式，所以计算命令要落在哪个节点、哪个哈希槽上也是客户端来做的，我就称为选节点吧。&lt;/p&gt;&lt;p&gt;其实要回答客户端和服务端不匹配会引发什么问题，正规的方法应该是查看客户端版本升级都做过什么更新。&lt;/p&gt;&lt;p&gt;一般升级会做的是客户端依赖的jar包变了。这个可能会引起程序启动错误，但是这个往往启动成功了就不会再有问题，和服务端版本没有直接关系。&lt;/p&gt;&lt;p&gt;十年前还在用memcache的时候，发生过一次升级客户端版本，因为算法发生了变化，所以导致缓存全部不命中的问题。Redis最近的算法一直是crc16。如果不存在分布式算法不兼容问题的话，下一个要考虑的是大迭代是Redis3.0版本，支持了集群，集群模式是必须要匹配的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Q4：为什么分片要保持流量均匀？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A：要提分片先来回忆一下redis集群的发展史，从单机版到主从版，后来有了大家可能很耳熟的哨兵模式。哨兵模式就是给主从增加一个监控，发现主节点挂了自动把从节点升级为主节点，有了故障自动迁移的功能。但是直到哨兵时代都只有一个主节点，也就是处理写请求的节点，不能称之为真正的集群。这也是很无奈的事情，一旦多个节点写一份数据，就涉及到数据一致性的问题。&lt;/p&gt;&lt;p&gt;一个蜂巢只能有一个蜂后，多出来一个，蜜蜂们就不会正常提供采蜜服务了，都打架去了。但是分成两个蜂巢呢？秩序就会恢复。所以现在的集群基本都是分片的原理。之前主从和哨兵的经验不能废弃，加上分片。redis集群就是将一个完整服务数据分成几份，每份都带着从节点，故障时可自动转移的一个整体。之前在《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485567&amp;amp;idx=1&amp;amp;sn=0644277d2c046890a14442830a4ed0f3&amp;amp;chksm=fafde2d1cd8a6bc70307efef696654f89074c2219f824af72effe5eb027cee983b364e4279c8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Redis集群搭建采坑总结&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Redis集群搭建采坑总结&lt;/a&gt;&lt;span&gt;》里讲过，1个节点的集群会有问题，最少需要3主3从也就是6个redis进程。3个主方便在1个挂掉之后重新选主。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;梳理了这个之后，分片保持流量均匀这件事也很容易了。就是Q2的问题，均匀更不容易阻塞嘛。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Q5：为什么要注意超时时间配置？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;A：提到redis的key的过期时间，首先想到的是redis的术语中，带过期时间的key又叫volatile key，就是不稳定key。怎么不稳定呢？就相当key这个对象有value和过期时间2个属性。过期时间这个属性1s改变一次(redis领域内时间都是以秒为单位)，一直在变，当然不稳定。&lt;/p&gt;&lt;p&gt;如果把过期时间理解为key的一个属性，那也很好理解：对其进行del、set命令时过期时间也会删除；rename会把过期时间传给新的key；incr、lpush、hset等命令改变的是key的存储容器，没有改变key这个对象本身所以不会影响过期时间。&lt;/p&gt;&lt;p&gt;值得注意的是persist命令就是持久化保存的意思，将不稳定变成稳定，过期时间也自动删除了。&lt;/p&gt;&lt;p&gt;Redis在服务端有过期策略，但是对客户端是不感知的。客户端访问过期的就是一个表现，访问不到了。实际上服务端是有两种策略配合使用，一个是惰性删除，就是访问的时候发现过期了，就直接删除了；另一个策略会定期去删除，这个是为了防止一个过期的key总是不被访问到，还占着资源不释放。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Q6：为什么当内存缓存用，推荐删除代替更新？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;A：一般大家出于数据一致性的考虑，会选择删除代替更新。这都是基于更新一定要更新数据库的固有思路。并发场景下，A的值1先被更新到数据库再更新缓存时，又来了一个更新请求把A的值更新为2。如果这时候执行更新为1的服务器性能不好或者网络传输速度比更新为2的慢，导致2在数据库是最新值，而设置为1的后更新了缓存。缓存就和数据库不一致了。&lt;/p&gt;&lt;p&gt;但只是记住删除代替更新不太够。如果先删除缓存再更新数据库，其他请求可能会把数据库老的值再加载到缓存中。记得之前有人介绍缓存还有三大种模式：Cache-Aside、Read-Through/Write-Through、Write-Behind。&lt;/p&gt;&lt;p&gt;Cache-Aside就是先更新数据库再删除缓存数据，可以避免上面提到的持续脏读的问题，顶多就是更新数据库的那一小段时间有更新延迟可见。我们给Cache-Aside起个中文名，叫经典模式。&lt;/p&gt;&lt;p&gt;Read-Through/Write-Through就是数据以缓存为准，数据库的操作是缓存发起的。Read-Through是在读数据时发现缓存过期了，那缓存自己去数据库加载新的数据，读数据还是读取缓存值。Write-Through写数据时调用方只负责写缓存，缓存自己去同步更新数据库。Read-Through/Write-Through一般配合使用。&lt;/p&gt;&lt;p&gt;Write-Behind和Write-Through的区别是虽然都是是写数据时调用方只负责写缓存，但是Write-Behind缓存自己去异步更新数据库。&lt;/p&gt;&lt;p&gt;因为Read-Through/Write-Through、Write-Behind都是以缓存为准，缓存不可靠，所以还是推荐经典模式。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;后记&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;一些朋友问我一边上班一边写文章哪有那么多时间呀。细心的朋友可能会发现我的文章一般是周末或者周一，再不就是节假日或者哪天失眠了发出来。因为内容都是非上班时间写的，但是每次下笔腹稿都是提前打好的。个人意见哈，作为架构师，很多人都会形成随时随地为工作思考和总结的习惯。所以很多人看着下班很早，人家回家路上，晒太阳的时候……未必没在想工作的事情。&lt;/p&gt;&lt;p&gt;架构师三件占时间的事：会议、评审和演讲。对应有三大难：提出有水平的问题、做出有水平的总结和建议、做出有水平的回答。所以每天有很多的腹稿要打。腹稿按照一定的框架结构整理就是文章。&lt;/p&gt;&lt;p&gt;如果大家都架构师的三大难有兴趣，我可以举一些具体的示例和解决方法。大家投票吧，如果在看超过10个，我就写这个。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>