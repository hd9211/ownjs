<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f6bc120485cfae23d36fc86b81aa6724</guid>
<title>[推荐] 求你别再用 Swagger 了，给你推荐几个在线文档生成神器</title>
<link>https://toutiao.io/k/ftaw3bc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近公司打算做一个openapi开放平台，让我找一款好用的在线文档生成工具，具体要求如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;必须是开源的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;能够实时生成在线文档&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持全文搜索&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持在线调试功能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;界面优美&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说实话，这个需求看起来简单，但是实际上一点的都不简单。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我花了几天时间到处百度，谷歌，技术博客 和 论坛查资料，先后调研了如下文档生成工具：&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;gitbook&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;github地址：https://github.com/GitbookIO/gitbook&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源协议：Apache-2.0 License&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Star: 22.9k&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发语言：javascript&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户：50万+&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐指数：★★★&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例地址：https://www.servicemesher.com/envoy/intro/arch_overview/dynamic_configuration.html&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5666666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxFoDghynYUibHJVV7Xcvf1Fhd801faxA5fxqJZIPQnWUommZez3Pd80fw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;gitBook是一款文档编辑工具。它的功能类似金山WPS中的word或者微软office中的word的文档编辑工具。它可以用来写文档、建表格、插图片、生成pdf。当然，以上的功能WPS、office可能做得更好，但是，gitBook还有更最强大的功能：它可以用文档建立一个网站，让更多人了解你写的书，另外，最最核心的是，他支持Git，也就意味着，它是一个分布式的文档编辑工具。你可以随时随地来编写你的文档，也可以多人共同编写文档，哪怕多人编写同一页文档，它也能记录每个人的内容，然后告诉你他们之间的区别，也能记录你的每一次改动，你可以查看每一次的书写记录和变化，哪怕你将文档都删除了，它也能找回来！这就是它继承git后的厉害之处！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：使用起来非常简单，支持全文搜索，可以跟git完美集成，对代码无任何嵌入性，支持markdown格式的文档编写。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：需要单独维护一个文档项目，如果接口修改了，需要手动去修改这个文档项目，不然可能会出现接口和文档不一致的情况。并且，不支持在线调试功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：如果对外的接口比较少，或者编写之后不会经常变动可以用这个。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;smartdoc&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;gitee地址：https://gitee.com/smart-doc-team/smart-doc&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源协议：Apache-2.0 License&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Star: 758&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发语言：html、javascript&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户：小米、科大讯飞、1加&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐指数：★★★★&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例地址：https://gitee.com/smart-doc-team/smart-doc/wikis/文档效果图?sort_id=1652819&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5444444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxFxtbdsXn4JcE2YRNfjkrWOSBVkI3QU8jFia3F9fxNNGTIKibK1GKseKpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;smart-doc是一个java restful api文档生成工具，smart-doc颠覆了传统类似swagger这种大量采用注解侵入来生成文档的实现方法。smart-doc完全基于接口源码分析来生成接口文档，完全做到零注解侵入，只需要按照java标准注释的写就能得到一个标准的markdown接口文档。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：基于接口源码分析生成接口文档，零注解侵入，支持html、pdf、markdown格式的文件导出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：需要引入额外的jar包，不支持在线调试&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：如果实时生成文档，但是又不想打一些额外的注解，比如：使用swagger时需要打上@Api、@ApiModel等注解，就可以使用这个。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;redoc&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;github地址：https://github.com/Redocly/redoc&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源协议：MIT License&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Star: 10.7K&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发语言：typescript、javascript&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户：docker、redocly&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐指数：★★★☆&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例地址：https://docs.docker.com/engine/api/v1.40/&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.43425925925925923&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxF6eNeuExicFIWANoT9VxAwictdsic3btiaZHx6eolnP6kkEfKTOxpqleEOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;redoc自己号称是一个最好的在线文档工具。它支持swagger接口数据，提供了多种生成文档的方式，非常容易部署。使用redoc-cli能够将您的文档捆绑到零依赖的 HTML文件中，响应式三面板设计，具有菜单/滚动同步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：非常方便生成文档，三面板设计&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：不支持中文搜索，分为：普通版本 和 付费版本，普通版本不支持在线调试。另外UI交互个人感觉不适合国内大多数程序员的操作习惯。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：如果想快速搭建一个基于swagger的文档，并且不要求在线调试功能，可以使用这个。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;knife4j&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;gitee地址：https://gitee.com/xiaoym/knife4j&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源协议：Apache-2.0 License&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Star: 3k&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发语言：java、javascript&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户：未知&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐指数：★★★★&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例地址：http://swagger-bootstrap-ui.xiaominfo.com/doc.html&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5527777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxF4URrQv4xcPd5l3ATmHAdBJsC9Q5GpKKFDbouycBr4bqO2UFVGDyibvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;knife4j是为Java MVC框架集成Swagger生成Api文档的增强解决方案,前身是swagger-bootstrap-ui,取名kni4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：基于swagger生成实时在线文档，支持在线调试，全局参数、国际化、访问权限控制等，功能非常强大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：界面有一点点丑，需要依赖额外的jar包&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：如果公司对ui要求不太高，可以使用这个文档生成工具，比较功能还是比较强大的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;yapi&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;github地址：https://github.com/YMFE/yapi&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源协议：Apache-2.0 License&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Star: 17.8k&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发语言：javascript&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户：腾讯、阿里、百度、京东等大厂&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐指数：★★★★★&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例地址：http://swagger-bootstrap-ui.xiaominfo.com/doc.html&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxFpRhftEzicYPWxIANx0k88n2iaNJLPGbic00R6gMCODQvYmmrbnxtmCu1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;yapi是去哪儿前端团队自主研发并开源的，主要支持以下功能：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;可视化接口管理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据mock&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自动化接口测试&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据导入（包括swagger、har、postman、json、命令行）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;权限管理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持本地化部署&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持插件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持二次开发&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：功能非常强大，支持权限管理、在线调试、接口自动化测试、插件开发等，BAT等大厂等在使用，说明功能很好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：在线调试功能需要安装插件，用户体检稍微有点不好，主要是为了解决跨域问题，可能有安全性问题。不过要解决这个问题，可以自己实现一个插件，应该不难。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：如果不考虑插件安全的安全性问题，这个在线文档工具还是非常好用的，可以说是一个神器，笔者在这里强烈推荐一下。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;apidoc&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;github地址：https://github.com/apidoc/apidoc&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源协议：MIT License&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Star: 8.7k&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发语言：javascript&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户：未知&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐指数：★★★★☆&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例地址：https://apidocjs.com/example/#api-User&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9585253456221198&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxFat1GOnJHuFdicILiaV3liaaeMk4uYnT60ib5EUM0MTDZTz2A3haUlh5ltQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1085&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;apidoc 是一个简单的 RESTful API 文档生成工具，它从代码注释中提取特定格式的内容生成文档。支持诸如 Go、Java、C++、Rust 等大部分开发语言，具体可使用 apidoc lang 命令行查看所有的支持列表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;apidoc 拥有以下特点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;跨平台，linux、windows、macOS 等都支持；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持语言广泛，即使是不支持，也很方便扩展；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持多个不同语言的多个项目生成一份文档；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;输出模板可自定义；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;根据文档生成 mock 数据；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：基于代码注释生成在线文档，对代码的嵌入性比较小，支持多种语言，跨平台，也可自定义模板。支持搜索和在线调试功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：需要在注释中增加指定注解，如果代码参数或类型有修改，需要同步修改注解相关内容，有一定的维护工作量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：这种在线文档生成工具提供了另外一种思路，swagger是在代码中加注解，而apidoc是在注解中加数据，代码嵌入性更小，推荐使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;showdoc&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;github地址：https://github.com/star7th/showdoc&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源协议：Apache Licence&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Star: 8.1k&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发语言：javascript、php&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户：超过10000+互联网团队正在使用&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐指数：★★★★☆&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例地址：https://www.showdoc.com.cn/demo?page_id=9&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5317919075144508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxFiaGq8eIRFRJ2xgcGOsV3Y3CEK3uvCb2mpkyOvLXbbyvEKC8iamvXc3Bg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2422&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ShowDoc就是一个非常适合IT团队的在线文档分享工具，它可以加快团队之间沟通的效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它都有些什么功能：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;响应式网页设计，可将项目文档分享到电脑或移动设备查看。同时也可以将项目导出成word文件，以便离线浏览。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;权限管理，ShowDoc上的项目有公开项目和私密项目两种。公开项目可供任何登录与非登录的用户访问，而私密项目则需要输入密码验证访问。密码由项目创建者设置。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ShowDoc采用markdown编辑器，点击编辑器上方的按钮可方便地插入API接口模板和数据字典模板。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ShowDoc为页面提供历史版本功能，你可以方便地把页面恢复到之前的版本。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持文件导入，文件可以是postman的json文件、swagger的json文件、showdoc的markdown压缩包，系统会自动识别文件类型。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：支持项目权限管理，多种格式文件导入，全文搜索等功能，使用起来还是非常方便的。并且既支持部署自己的服务器，也支持在线托管两种方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：不支持在线调试功能&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：如果不要求在线调试功能，这个在线文档工具值得使用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;最后说一句(求关注)&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果这篇文章对您有所帮助，或者有所启发的话，帮忙扫描下发二维码关注一下，您的支持是我坚持写作最大的动力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;求一键三连：点赞、转发、在看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在公众号中回复：面试、代码神器、开发手册、时间管理有超赞的粉丝福利，另外回复：加群，可以跟很多大厂的前辈交流和学习。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxFT8TOzlT8pD8icRrmCp8u3CzT5MqHVxUXpic6IYj8kwT80Juu0Obzarjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p&gt;推荐阅读：&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247485262&amp;amp;idx=1&amp;amp;sn=abe19452e4c13876270f329cc6929be7&amp;amp;chksm=f9800194cef78882e5ad4d8eb00b7e3f745a4159aee6afb1858cc16cae599f8889afa330e17b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;让人头痛的大事务问题到底要如何解决？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247485244&amp;amp;idx=1&amp;amp;sn=ea47bdaf3f3681c5e5fa8e6044a95a40&amp;amp;chksm=f98001e6cef788f02320b1607bfcc3b7fe059b59cdee3ee1163503a131e72a5874020476ddb5&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;mybatis日志功能是如何设计的？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247485157&amp;amp;idx=1&amp;amp;sn=aa513ce2687162c0083b8b1c9dbf0152&amp;amp;chksm=f980003fcef78929b2c3b8322976a4c908f68727ace867553e46db5ba952959d8d946e682ac9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;zuul如果两个filter的order一样，是如何排序的？&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;zuul如果两个filter的order一样，是如何排序的？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247484811&amp;amp;idx=1&amp;amp;sn=0d97b7ed61f7010704f24bd78e6cc9ee&amp;amp;chksm=f9800351cef78a47f43f5478d8f5b359b4e9f0158af9a2c1e13f1b7622c343d343998517450d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;mysql的这几个坑你踩过没？真是防不胜防&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247484746&amp;amp;idx=1&amp;amp;sn=77146a6e05e8164d26f39e34fd15dc15&amp;amp;chksm=f9800390cef78a862543c15e1feeb4f722f393bed0f5aed151a60fa4d55c4b295f0d3cf365d9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;线程池最佳线程数量到底要如何配置？&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247484698&amp;amp;idx=1&amp;amp;sn=12999ca31f93a8a3fd582d282a522714&amp;amp;chksm=f98003c0cef78ad6473a38cf0f42f44a8fbbe0bb58f20297cca92d5db47351f543631a69087d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;这8种保证线程安全的技术你都知道吗？&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247484664&amp;amp;idx=1&amp;amp;sn=46922fa7acd8e485a2b1a9a341b226ac&amp;amp;chksm=f9800222cef78b34d26883f86563d36444303d480b5b81d279685828c941dad86baf577a9e75&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;springboot面试杀手锏-自动配置原理&lt;/a&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>eaf2531520103a60dc5e75243b1a73a5</guid>
<title>[推荐] 中台的本质及中台建设的 4 点思考</title>
<link>https://toutiao.io/k/9octogz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8f439f959435f5b281dd5b796835d2ed</guid>
<title>[推荐] 从烟囱式到 SOA 再到微服务，我把阿里面试官说懵了</title>
<link>https://toutiao.io/k/otecb5i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt; &lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;大家都听过&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;SOA架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;，也都知道现在特别火的&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;微服务架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;，那么这两个有什么区别呢，别傻傻分不清了，这篇告诉你，学会它，把阿里面试官都说懵逼！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;之前找工作面试的时候，面试官总是问我你了解SOA吗，你知道为什么微服务这么火吗，他们有什么区别吗，之前乱说一通的我现在才知道，了解这个可能比你会开发更重要，所以它来了！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;系统架构的发展&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;烟囱式的架构&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;很多公司老的IT架构属于传统的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;“烟囱式”架构&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，也就是每个业务线之间由不同的开发团队独立建设，技术栈不同，互不联系。大多数的架构会被打包成为war包并且被部署到Apache Tomcat Web容器中， 整个结构趋于传统的单体架构，业务逻辑耦合在一个项目中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.056&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/YUg6EDkZ5ThUYCMJ8fOWfFRIXpZVfp3khoACnFPVUwmuicA1xxe2PGEs64lSTGn9azUjrSHcnB5MLm6usxZPXEg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;375&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;这样的架构有几个主要的弊端：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;重复开发。每个业务线中间同样的模块会重复开发，比如会员营销模块，A业务线要建一个会员营销系统，B业务线也要建一个会员营销系统，这会造成很大的开发资源浪费；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;技术栈不统一。可能A系统用的是Spring MVC, B系统用的就是Spring Boot/Cloud。这会造成公司内部IT架构无法统一规划，且技术能力难以积累的问题；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据分布广，格式不统一，导致数据难以打通。A系统的会员存在A系统的MySQL库中，B系统的会员存在B系统的Oracle库中，如果要识别A系统中的001会员和B系统中的002会员是同一个人，也许只能在数仓中实现了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;总结：这样的架构的好处就是可以互不影响地独立部署独立迭代了，适合业务线较少且比较独立的公司采用。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;SOA架构&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;SOA 全称是: Service Oriented Architecture&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，中文释义为 “&lt;/span&gt;&lt;span&gt;&lt;strong&gt;面向服务的架构&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”它是一种设计理念，其中包含多个服务， 服务之间通过相互依赖最终提供一系列完整的功能。各个服务通常以独立的形式部署运行，服务之间 通过网络进行调用。&lt;span&gt;架构图如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7137931034482758&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YUg6EDkZ5ThUYCMJ8fOWfFRIXpZVfp3kad5bm3aueop8OiaQ8iasez154t2A6xoqEoeP3e9H7ze3Yaib5870CZcMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;290&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;SOA的核心理念为：&lt;/span&gt;&lt;span&gt;松耦合带来的服务重用，通过服务编排助力业务的快速响应和创新&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;在SOA时代，有两种SOA的主要实现方式，分别是&lt;/span&gt;&lt;span&gt;Web Service&lt;/span&gt;&lt;span&gt; 和&lt;/span&gt;&lt;span&gt;ESB&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;下面会着重讲一下ESB&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;微服务架构&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;微服务架构和 SOA 架构非常类似,微服务只是的 SOA 升华，只不过微服务架构强调的是“业务需要彻底的组件化及服务化”，原单个业务系统会被拆分为多个可以独立开发、设计、部署运行的小应用。这些小应用间通过服务化完成交互和集成。组件表示的就是一个可以独立更换和升级的单元，就像 PC 中的 CPU、内存、显卡、硬盘一样，独立且可以更换升级而不影响其他单元。若我们把 PC 中的各个组件以服务的方式构建，那么这台 PC 只需要维护主板和一些必要的外部设备就可以。CPU、内存、硬盘等都是以组件方式提供服务，例如PC 需要调用 CPU 做计算处理，只需知道 CPU 这个组件的地址就可以了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;微服务架构的特性：&lt;/h4&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;单一职责&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;轻量级通信&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;独立性&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;进程隔离&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;微服务架构的缺点：&lt;/h4&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;运维要求较高&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分布式的复杂性&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;接口调整成本高&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;重复劳动&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;单体架构和微服务架构对比：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;table data-sort=&quot;sortDisabled&quot; align=&quot;left&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;center&quot;&gt;&lt;br/&gt;&lt;/th&gt;&lt;th align=&quot;center&quot;&gt;传统单体架构&lt;/th&gt;&lt;th align=&quot;center&quot;&gt;分布式微服务化架构&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;新功能开发&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;需要时间&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;容易开发和实现&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;部署&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;不经常而且容易部署&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;经常发布，部署复杂&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;隔离性&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;故障影响范围大&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;故障影响范围小&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;架构设计&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;初期技术选型难度大&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;设计逻辑难度大&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;系统性能&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;相对时间快，吞吐量小&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;相对时间慢，吞吐量大&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;系统运维&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;运维难度简单&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;运维难度复杂&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;新人上手&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;学习曲线大（应用逻辑）&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;学习曲线大（架构逻辑）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;技术&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;技术单一而且封闭&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;技术多样而且容易开发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;测试和差错&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;简单&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;复杂（每个服务都要进行单独测试，还需要集群测试）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;系统扩展性&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;扩展性差&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;扩展性好&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;系统管理&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;重点在于开发成本&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;重点在于服务治理和调度&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;使用微服务架构的原因：&lt;/h4&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;开发简单&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;快速响应需求变化&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;随时随地更新&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;系统更加稳定可靠&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;接下来聊一聊SOA中的ESB&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;随着我们的业务越来越复杂，会发现服务越来越多，SOA架构下，他们的调用关系会变成&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如下所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;1.0520833333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YUg6EDkZ5ThUYCMJ8fOWfFRIXpZVfp3kXwGzGpo2SMPfrP0fAbT086iasIekoPPUFMicMaDE80W4lGFfyvmXicAjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;480&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;怎么去清理这一团糟的东西呢？ESB(企业服务总线)来了！&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;当你理解系统并不直接交换信息，理解什么是服务，那么现在你可以开始使用ESB了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.8115942028985508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YUg6EDkZ5ThUYCMJ8fOWfFRIXpZVfp3kQOTd41rdXQC4jWSbOlW9VXnIBdnJuvCgkpGGTiaCeXwJQLBtNl7ZSiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;414&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简单来说 &lt;/span&gt;&lt;span&gt;&lt;strong&gt;ESB &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;就是一根管道，用来连接各个服务节点。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;ESB&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的存在是为了集成基于不同协议的不同服务，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;ESB &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;做了消息的转化、解释以及路由的工作，以此来让不同的服务互联互通。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;从名称就能知道，它的概念借鉴了计算机组成原理中的通信模型——总线，所有需要和外部系统通信的系统，统统接入&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;ESB&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;，岂不是完美地兼容了现有的互相隔离的异构系统，可以利用现有的系统构建一个全新的松耦合的异构的分布式系统&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;ESB&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;做了消息的转换解释与路由等工作，让不同的服务互联互通。传统的&lt;/span&gt;&lt;span&gt;&lt;strong&gt;ESB&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;的服务调用方式是，每一次服务的调用者要向服务提供者进行服务交互请求时都必须通过中心的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;ESB&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;来进行路由。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;每一次服务交互的路线是：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;服务调用者--&amp;gt;ESB（接收服务请求）--&amp;gt;服务提供者（服务处理）--&amp;gt;ESB（服务提供返回结果）--&amp;gt;服务调用者（服务返回）&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6465863453815262&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/YUg6EDkZ5ThUYCMJ8fOWfFRIXpZVfp3kH6yLjEp4kLiaO5XM2xJBIcZnBBwIkRrbBYsK59hygTb1S7JHd1phxwA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;996&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;使用了ESB，也需要注意！&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;毁掉SOA概念的最好的方法就是，推出ESB，就期待所有的事情自己顺顺利利。虽然ESB是一个了不起的想法，但很不幸，只是简单的安装ESB不会解决你太多问题。最好的方法，你还是要整理一下你的架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;像下图一样，如果不打扫，即使用了ESB也得不到任何好处。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6935779816513762&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YUg6EDkZ5ThUYCMJ8fOWfFRIXpZVfp3kS68qLLCygibtdnmkc6SNsQ0SYkU2rgjp3EyXxmJpSsUC9qnHcVUtebA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;545&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;所以从最开始的架构设计到之后的定时整理都至关重要！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;从SOA到微服务&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;SOA的出现其实是为了解决历史问题：企业在信息化的过程中会有各种各样互相隔离的系统，需要有一种机制将他们整合起来，所以才会有上边所述的ESB的出现。同样的，也造成了SOA初期的服务是很大的概念，通常指定的一个可以独立运作的系统（这样看，好像服务间天然的松耦合）。这种做法相当于是「把子系统服务化」。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;而微服务没有历史包袱，轻装上阵，服务的尺寸通常不会太大，关于服务的尺寸，在实际情况中往往是一个服务应该能够代表「实际业务场景中的一块不可分割或不易分割的业务实体」。将服务的尺寸控制在一个较小的体量可以带来很多的好处&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;微服务架构倡导将软件应用设计成多个可独立开发、可配置、可运行和可维护的子服务&lt;/strong&gt;，子服务之间通过良好的接口定义通信机制，通常使用 RESTful 风格的 API 形式来通信 ，因为RESTful 风格的 API 通常是在 HTTP 或者 HTTPS 通道上传输 JSON 格式的数据来实现的， HTTP协议有跨语言、跨异构系统的优点， 当然，也可以通过底层的 进制协议、消息队列协议等进行交互。这些服务不需要中心化的统 管理，每个服务的功能可自治，并且可以由不同的语言、系统和平台实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;微服务的架构如下图所示：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/YUg6EDkZ5ThUYCMJ8fOWfFRIXpZVfp3k9OQLibbN0CDMtVQp3jzozdIC1Sb9EcgCAezCxl3GMgicwk9qCqHg3Qug/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看到微服务架构的 些特点与 SOA 服务化架构相似， 事实上微服务架构与 SOA服务化架构并不冲突，它们一脉相承，却略有不同：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;目的不同&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;微服务使用 系列的微小服务来实现整体的业务流程，目的是有效地拆分应用，实现敏捷开发和部署，在每个微小服务的团队里，减少了跨团队的沟通，让专业的人做专业的事，缩小变更和迭代影响的范围，并达到单一微服务更容易水平扩展的目的。&lt;br/&gt;SOA 服务化涉及的范围更广 些，强调不同的异构服务之间的协作和契约 ，并强调有效集成、业务流程编排、历史应用集成等，典型代表为 Web Service 和ESB。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;部署不同&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;微服务将完整的应用拆分成多个细小的服务，通常使用敏捷扩容、缩容的 Docker 技术来实现自动化的容器管理 每个微服务运行在单 的进程内，微服务中的部署互相独立互不影响。&lt;br/&gt;SOA 服务化通常将多个业务服务通过组件化模块方式打包在 War 包里，然后统部署在一个应用服务器上。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;服务粒度不同&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;微服务倡导将服务拆分成更细的粒度，通过多个服务组合来实现业务流程的处理，拆到职责单一，甚至小到不能再进行拆分。&lt;br/&gt;SOA对粒度没有要求，在实践中服务通常是粗粒度的，强调接口契约的规范化，内部实现可以更粗粒度。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;SOA，ESB，微服务的区别和关系&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;1、SOA是一种理念，它的主要特性--面向服务的分布式计算，服务间松散耦合，支持服务的封装，服务注册和自动发现，以服务契约方式定义服务交互方式。但是，SOA并没有定义出具体的实现方式，目前有两套SOA理念的实现方式：中心化和去中心化，这两套架构并没有优劣之分，还是要针对企业的根本诉求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;/span&gt;&lt;span&gt;&lt;strong&gt;SOA中心化的实现方式就是ESB&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，ESB的根本诉求是为了解决异构系统之间的连通性，通过协议转换、消息解析、消息路由把服务提供者的数据传送到服务消费者。所以，ESB是中心化的，很重，有一定的逻辑，但它的确可以解决一些公用逻辑的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;/span&gt;&lt;strong&gt;&lt;span&gt;SOA去中心化的实现方式&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的根本诉求是扩展性，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;实现方式就是微服务&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;分布式服务框架&lt;/span&gt;，主要有dubbo、spring cloud，实现后端服务治理的功能。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;本文主要讲了架构的演变过程，以及各个架构模式的解析，从SOA出发了解它的概念和实现方式，了解ESB的作用和原理，探讨了SOA和微服务之间的关系。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;SOA是一种概念，拿SOA和微服务做对比不太恰当，微服务是SOA去中心化的实现方式，而ESB是SOA中心化的实现方式，要分清两者的区别，不要混淆了！&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;假如面试中你被问到这些，我相信你看了这篇一定能拨动面试官的心！&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;下篇将会更加深入的来了解微服务的知识哦，&lt;strong&gt;希望你们是我最好的观众！&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;乐于输出&lt;span&gt;干货&lt;/span&gt;的Java技术公众号：Garnett的Java之路。公众号内有大量的技术文章、海量视频资源、精美脑图，不妨来&lt;span&gt;关注&lt;/span&gt;一下！&lt;span&gt;回复【资料】领取大量学习资源和免费书籍！&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YUg6EDkZ5ThgRCBaRHic38hicRLZU31vdEialoicFrXTjetMY9QLgnqIcbK636w3z7unway0rIC07YrlISMD9a9ofg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;转发朋友圈是对我最大的支持！&lt;/span&gt;&lt;/figcaption&gt;&lt;figcaption/&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;23&quot; data-width=&quot;100%&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAujO0pvtNCLzZCiaWxGBfq2xaPwze1NRLTSQZYbzWNnTJwDwsReHiam91Wojzvw3RLibjicWkLWJjicgsvw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt; 觉得有点东西就点一下“赞和在看”吧！感谢大家的支持了！&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bd6915ff744fd0616f29e26769317dc5</guid>
<title>[推荐] CTO 怒了：“如果中台不省钱，我建个屁中台啊！”</title>
<link>https://toutiao.io/k/batmypd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;span&gt;点击“&lt;/span&gt;&lt;span&gt;技术领导力&lt;/span&gt;&lt;span&gt;”关注&lt;/span&gt;&lt;span&gt;∆&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;每天&lt;/span&gt;&lt;span&gt;早上8:30&lt;/span&gt;&lt;span&gt;推送&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;作者| Mr.K   整理| Emma&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;来源| 技术领导力(ID：jishulingdaoli)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;“妈的，A厂说的什么玩意儿，老子听不懂！你就告诉我，这次中台建设，投资多少钱，投了这些钱后，以后的信息化系统是否可以集约化建设？大概平均每个系统能省多少钱？” L总参观完杭州的A厂、深圳的T厂，一脸懵逼地对小M说。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M急忙回复领导：“中台省钱这个事，它可以当成结果，但千万不能当成目标。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;L总一听又怒了：“我建中台的目的就是为了省钱，公司一年信息化开支几千万上亿，如果中台不省钱，我建个屁中台啊！你还是没搞明白中台，再回去研究！”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M是我的一位读者，他是某大型国企的中台项目经理，今年的工作目标就是规划和落地中台项目。L总是该国企IT部的负责人，相当于CTO。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M跟我吐槽了一个小时，我大概知道他们中台项目的问题所在了，先来听听小M公司上中台的故事。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6633333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sqibwUCydDhzLd7hhMrVTggQN9SbiasvsLGlc322Xx2pmCpQ6oyVWh6BChRctiaibhEreqY4qu5qamWUxtZJPicGpdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;01&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;云平台专家，初露锋芒&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M之前一直从事企业信息化改革工作，帮助过几家公司实现了云化，积累了一定的项目经验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;L总所在的企业，信息系统架构老旧，经过10几年的发展，形成了几十个大“烟囱”系统，数据的互联互通是难题，严重制约了业务的发展，让集团大领导非常不满。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如客服系统、BOSS系统（Business &amp;amp; Operation Support System），数据是不联通的，市场人员和客服人员工作难以协同，售后都跟不上，更不用说客户关系的主动维护了，这直接导致了客户流失率高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是L总聘用了小M，先是任命他为“基础资源整合”负责人，具体干什么呢？就是建云平台，把集团各部门的服务器、网络资源统一管理，提高硬件使用率，降低成本。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个事情，目标明确，又是小M经验所在，小M思路也很清晰：新系统全部上云，老旧系统改造迁移上云，实在无法改造迁云的系统，继续运行，但各部门得制定未来的业务升级计划，逐步实现业务迁云。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不到一年的时间就理顺了，L总对小M的工作表现非常满意，似乎觉得可以委以重任了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M是个有理想的年轻人，他的理想就是三十岁的时候，在北京拥有一套自己的房子。现在他的理想已经实现一半了：他已经三十岁了。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;02&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;上中台：没吃过猪肉，还没薅过猪毛？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;去年年底的某一天，L总把小M叫到办公室。L总说，年底了，要提出明年的公司技术板块工作规划。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;L总认为，现在公司虽然做到了业务系统上云，实现了资源的统一调度、统一管理，但存在业务不通、业务架构老旧、重复建设等等很多问题，无法快速应对外部市场的变化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;L总经过调研，觉得现在热门的“数据中台”应该是公司技术架构改革的方向。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M领的任务就是，规划和落地数据中台项目。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M虽然一直在搞云计算，但是大数据这块，没吃过猪肉，也薅过猪毛。不敢说很懂，至少是略知一二吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是小M无知者无畏，接下了这个项目，赶紧开始学习，在百度上一查可把小M吓坏了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原来，A厂们提出的数据中台、AI中台、视频中台、技术中台、移动中台......新概念层出不穷、眼花缭乱。各种敏捷开发、快速响应、集约建设、沉淀能力，网上的噱头一个比一个闪瞎狗眼。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是，小M整合了几篇文章，给L总写了个整体思路，“明年，公司将构建数据中台，整合公司内外数据资源，打造公司新一代技术基础设施，实现公司技术升级，支撑好公司未来的内外业务……”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;L总看了这个规划，非常满意，认可小M的思路，正式把中台建设写入了2020年度规划里。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/sqibwUCydDhzLd7hhMrVTggQN9SbiasvsLHLeblZktPKCwo39Z3x9mTrI8CzicdtmORaw1575adPW0zfSlLOyiazlA/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;900&quot; data-cropy1=&quot;98.09688581314879&quot; data-cropy2=&quot;599.4809688581314&quot; data-ratio=&quot;0.5577777777777778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sqibwUCydDhzLd7hhMrVTggQN9SbiasvsL24mu30CHaLaufXAytaEmib57bWvynnHQ68Nbpc6kJJr3jT4fpW15gNg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;03&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;上中台吗？会送命的那种！&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M又看了一些中台实施文章，咨询了A厂、T厂们的中台架构师，制定出详细的中台规划。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M的报告指出，公司信息化存在的业务墙、数据墙、重复投资建设等问题，提出“三中台——数据中台、AI中台、视频中台”的技术架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;并提出几个推进机制：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、开展公司信息化资产盘点；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、研究公司发展战略规划、开展顶层设计；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、公司一把手牵头项目，各部门立军令状；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、制定里程碑：5月底完成调研，6月份完成方案设计，9月份前完成中台产品部署实施，年底前完成核心业务基于中台架构的改造。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你闻到熟悉的味道了吗？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M初学中台，听信A厂的中台实施方法论套路，准备从顶层设计开始，盘点信息化资产，中台必须是一把手工程，得领导挂帅，中台急不得，是中长期战略......&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;L总不傻，把方案一棒子打死了：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“谁TM让你做顶层设计？老子都未必做得了顶层设计！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还盘点资产？盘你老木，捅出篓子，我TM都未必兜得住。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一把手挂帅？中台干好了，是领导英明，干不好你就给老子滚蛋。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;什么中长期规划？我明年还在不在这个位子上，都不好说......”&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;04&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;没有中台的命，却得了中台的病&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;故事讲到这，其实这个项目的命运已经基本注定了，总结下来有那么几个原因：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第一，中台实施缺乏场景&lt;/strong&gt;。小M正在发愁中台怎么落地，A厂的顾问给他承诺：“我们做的很多中台项目，都是基于一些具体的需求来构建的。例如，一些公司要做某几个系统的数据治理，一些公司要做某些新业务要上中台。只要有场景，我们一定能建好中台。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可惜，小M不知道，供应商的承诺就像放屁，当时惊天动地，过后苍白无力。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M跑遍了各业务部门，推销他的中台梦想，得到的答复是，“这不是找事情做吗？我们的系统，一点儿问题都没有！”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M碰了一鼻子灰，回来给L总汇报，被L总一顿骂，“你去管那些业务部门的需求干什么？你先把中台搭建起来，就跟云一样！搭建起来后，后续我们不给他们批信息项目资金就可以了！”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在领导眼里，所有的问题都是人和钱的问题，没有人和钱搞不定的问题。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第二，规划不充分、预算不足&lt;/strong&gt;。小M听L总的，赶紧和A厂、T厂的顾问商量，那就先搭建中台系统吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是，按照小M原先的三中台：数据中台、AI中台、视频中台的规划，让A厂、T厂拉了产品清单，报了产品价格。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;结果，A厂报了个上亿的价格，T厂好一点，才报了4000万。小M给L总汇报了下，L总冒火了：“我们是先行先试，不是要推翻全公司的技术设施！我们最多投资300万，先做出一些效果，落地一两个场景，再来推动后期建设！”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M心想，L总也真是“节俭”，中台这么好一副牌，就押这么点注，即使赢了又有多大意思？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M把情况跟A厂、T厂进行说明，看看能不能先按框架招标，再一步步实施。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A厂、T厂行走江湖多年，一看就明白了，给不起钱呗，没钱TM不早说。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是，翻脸比翻书还快，这些顾问，突然都变得忙起来，电话也经常接不通了，微信、钉钉也不怎么回了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M在技术世界里呆太久了，没被社会狠狠地毒打过。其实生活就是这样，一半是倒霉，别一半是如何处理倒霉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M自己不懂中台，项目预算还不够上个OA的，现在连供应商也不鸟他了，这还怎么玩啊？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第三，中台建设的目标没搞清楚&lt;/strong&gt;。小M是正儿八经想操盘一把中台项目的，毕竟年轻的时候多吃点苦，到老了吃苦才会习惯。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可是L总不这么想，大家都是打工人，尤其是做到了他那么高职位，保住乌纱帽是最重要的，在此基础上如果能捞点油水，是最好的，其它都是扯淡。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M就没有领悟到这一点，一上来就提出资产盘点、顶层设计，一点都不懂领导的意图，你不死谁死？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先不说它是个中台项目，但凡任何IT项目，有三个原则是要注意的：一，不要去折腾业务部门，要帮他们解决实际问题；二、花钱要花在看得见的地方，花小钱办大事；三、要尽可能争取更多干系人的支持，至少他们不反对。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这么看下来，中台项目要想“成功”，其实也不是那么难。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第四，对中台的理解不在一个层面上&lt;/strong&gt;。L总看着小M负责的中台项目，半天嘣不出个屁来，于是自己琢磨起中台来了，L总是搞网络出身的，不懂研发，更不用说中台了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是宏观层面的理解是有的，经过研究后，L总给小M提出了中台建设的三个目标：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、让BOSS系统长在中台上&lt;/strong&gt;。公司的BOSS系统，十多年了，每年光是升级一点功能，都要几百万。中台要让BOSS系统接进来，以后BOSS的改造就用轻应用进行部署，每年只需要花几十万。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、用中台代替OA&lt;/strong&gt;。公司的OA系统不是很好用，要用这个中台来代替OA。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不得不佩服L总，“用中台代替OA”这个方案还是很有想象力的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、&lt;/strong&gt;&lt;strong&gt;用中台管理云、网络、业务系统&lt;/strong&gt;。这个中台要实现对公司云、网络、业务系统的统一运维。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;L总啊，人家可是个正经的中台，你把人家当什么了？（咦？这句话好像在哪里听过的样子）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;听到这里，小M已经崩溃了：这TM怎么搞啊。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6088888888888889&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sqibwUCydDhwCCIUY8bibBCSkQh5fm6U8rXBxHnmvLJflxyVfEG9hOTWJrYNqKsFsaDeib7KiaZplxaFx8ibtDe2IhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;05&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;写在末尾的话&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此时的小M感到很无力，&lt;/span&gt;&lt;span&gt;公司就他一个人在推动这个所谓的中台项目，业务方不搭理他、项目预算少得可怜、A厂和T厂也越来越不愿意配合、L总又一直责怪他项目推动不力......&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;仿佛被套在一个死循环里，无从解脱。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;俗话说，当局者迷，旁观者清。希望通过以上梳理，能让小M看清这个项目的全貌。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;混职场的核心能力是什么？就是做局与破局的能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有些局哪怕输个精光，也要All in。有些局即使赢面很大，也要选择退出。究竟路要怎么走，只能自己选择了。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，祝福小M。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;作者简介&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Mr.&lt;/span&gt;&lt;span&gt;K&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，知名电商公司技术老K级人物。文出过畅销书，&lt;span&gt;武做过CTO&lt;/span&gt;，若非生活所迫，谁愿一身才华。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt; -END- &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p yahei=&quot;yahei&quot; sans=&quot;sans&quot; px=&quot;px&quot; normal=&quot;normal&quot; ui=&quot;ui&quot; gb=&quot;gb&quot; sc=&quot;sc&quot; neue=&quot;neue&quot; important=&quot;important&quot; helvetica=&quot;helvetica&quot; break-word=&quot;break-word&quot; sans-serif=&quot;sans-serif&quot; arial=&quot;arial&quot; microsoft=&quot;microsoft&quot; hiragino=&quot;hiragino&quot; pingfang=&quot;pingfang&quot; center=&quot;center&quot;&gt;&lt;span&gt;这是公众号作者老K的私人微信&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;围观老K的朋友圈！席位珍贵，快来占坑&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sqibwUCydDhzulVBFYfrZrhGoJyXbiaTKb98oJqVAGibhprOVrjuVSkoASNHQYu9DahrrM96gVGp0GxcYglD5yJtw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;430&quot;/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;大家在看：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjE3NDQ1Mw==&amp;amp;mid=2649711026&amp;amp;idx=1&amp;amp;sn=e49c1ecdcbd3dd54089d7bcc7ba8d4e8&amp;amp;chksm=886ae0a8bf1d69be984001bd3e9221d35a9506ad24f07d8eb65b9b9fa7d28d0184e42cb6f74e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;呼兰辞掉百万&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;呼兰辞掉百万年薪工作,去做脱口秀,有病吧？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjE3NDQ1Mw==&amp;amp;mid=2649710803&amp;amp;idx=1&amp;amp;sn=ed243eb16f7cb3607489b2e2f15ed13d&amp;amp;chksm=886ae1c9bf1d68df2c356a27a631dbbc6522fb6932135af6d98d91591a9d2cf3122b4b3d6be9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;35岁，总监，离职创业，赔了魔都一套房&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjE3NDQ1Mw==&amp;amp;mid=2649710250&amp;amp;idx=1&amp;amp;sn=3b2bc771325ea94e78d2a5b21a4a9e8c&amp;amp;chksm=886adfb0bf1d56a6f00a4daf904ceced855c456b7db69f1569d62b7b95a5623221f55c43e36f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;张一鸣：成功的反义词不是失败，而是平庸！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjE3NDQ1Mw==&amp;amp;mid=2649711005&amp;amp;idx=1&amp;amp;sn=fa7b21ab73ae119a6ee782fcfbbc384f&amp;amp;chksm=886ae087bf1d6991cde50210a496f66c9f8fb626286a2b71fa37410dd580d90de364ec6398e0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;阿里彭蕾：向上管理的最高境界，不是跪舔&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjE3NDQ1Mw==&amp;amp;mid=2649710978&amp;amp;idx=1&amp;amp;sn=073da9859691d43a4073aa36d19463d9&amp;amp;chksm=886ae098bf1d698eb74a7b164bc6040dad63a54720bdd01958e60b6d98e3815c6c08cd5d368f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;中台为什么做不好？拆系统“烟囱”容易...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dc160b028565b4cfeba5bedf4d489ce6</guid>
<title>[推荐] 四种缓存的避坑总结</title>
<link>https://toutiao.io/k/fzh8zfu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;分布式、缓存、异步和多线程被称为互联网开发的四大法宝。今天我总结一下项目开发中常接触的四种缓存实际项目中遇到过的问题。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;JVM堆内缓存&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;JVM堆内缓存因为可以避免memcache、redis等集中式缓存网络通信故障问题，目前还在项目中广泛使用。&lt;/section&gt;&lt;section&gt;堆内缓存需要注意GC的问题。假如我们的设计是定时的从远程来拉取数据更新本地缓存。一定要注意两点：第一不要全量拉取覆盖，第二不要把一个大对象整体替换为新对象。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;先说全量拉取覆盖。全量拉取会有很大的网络开销，会造成网络流量尖刺。有人说没事，我们带宽很足，内网访问，不怕不怕。但是稳定性需要修炼的一项是削峰填谷。让系统在平稳的环境中运行。不然，在拉取大缓存新数据的数据突然来了个突发流量？根据墨菲定律，凡是有几率会发生的事情就一定会发生。编程需谨慎。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;再说大对象整体替换的问题，这会造成GC问题。伪代码如下：&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;List&amp;lt;POJO&amp;gt; oldList = initList();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;refresh&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      List&amp;lt;POJO&amp;gt; newList = dataFromNetworkService.getAll();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      oldList = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; List();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;(POJO pojo : newList) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          oldList.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(pojo);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;如果从网上拉取的数据和在缓存里存储的数据，对象类型没有发生改变。引起的转换开销还稍微小点。因为比如对象POJO存在一个列表里。这个列表虽然很大，但是里面存的都是对象的引用。实际的POJO并没有发生变化。上面伪代码虽然新建一个list对象，遍历添加新对象比直接oldList=newList要傻些。但是遍历过程实际上pojo对象没有发生改变。所以这里影响GC的只是oldList这个对象(不包括从网络上拉取回来数据的过程)。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;但是如果代码这样写：&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;List&amp;lt;POJO2&amp;gt; oldList = initList();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;refresh&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      List&amp;lt;POJO1&amp;gt; newList = dataFromNetworkService.getAll();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      oldList = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; List();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;(POJO2 pojo : newList) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          oldList.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(Beanutils.copy(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; POJO2(), pojo));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;遍历过程将会将原来的POJO1全部新建一遍，这些对象一般情况下全部先进入堆内存的新生代，再经过数次young gc后进入老年代。会造成GC频繁。&lt;/section&gt;&lt;section&gt;我所做过的项目，一般认为一天一到2次fullgc为合理值。这样，如果比如预先知道某个时间点有大促，可通过提前触发GC等方式避免高峰期爆发fullgc。younggc至少是5分钟一次，甚至更久触发认为是正常。这样可以通过控制避过秒杀等场景。&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;JVM堆外缓存&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;堆外缓存的内存回收原理使用的是Java的虚引用(参见&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485542&amp;amp;idx=1&amp;amp;sn=488be1c113af4a7fcb3ed9b3467c6a36&amp;amp;chksm=fafde2c8cd8a6bde14cf4a4ee3b84d966cd6318c3c20dfadee99dfc8e178c1f372e0faf1f334&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《Java的强引用、软引用、弱引用、虚引用》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《&lt;span&gt;Java的强引用、软引用、弱引用、虚引用&lt;/span&gt;&lt;span&gt;》&lt;/span&gt;&lt;/a&gt;)。这个设计可以避免JVM的GC问题，但是处理不好可能会造成更严重的后果：整个机器内存被打满，机器可能会挂掉。其实挂掉一台在一般企业的生产环境还好，因为一般都会有容灾的冗余机器。但是更常见的一种情况是机器忙于swap内存交换，机器活着但是响应很慢。属于半死不活。&lt;/section&gt;&lt;section&gt;这个问题我没在线上遇到过，但是我同事之前在超级大厂的时候遇到过。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;有的同学说那我严格算好内存，做好监控。这里面要就要依赖人为的因素来做紧急处理。而人是稳定性中最不可靠的。因为问题通常不发生在人清醒、手里事情很少的时候。而是一种雪上加霜的存在。比如大促时，流量上来了，线程数会增多，每个线程都会申请线程栈资源，系统处理IO，这时候系统会申请更多的buffers/cached内存。&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;linux的buffers/cached&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;linux系统上运行一下top 命令或者free命令，都能够看到buffers和cached相关的数据。需要注意的是通常我们看到的监控数据 空闲内存百分比，&lt;strong&gt;&lt;span&gt;并非是下面显示的free/total，而是(free+buffers+cached)/total&lt;/span&gt;&lt;/strong&gt;。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2880371660859466&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibhwOAibvHhIlcT097tJpGJ5Zib7bQUvibnfYDg4tiaFgMhptQ3tXMFGB0fI5e3bXWV514FBy5ic72faZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;861&quot;/&gt;&lt;/p&gt;&lt;section&gt;buffers在Linux系统中通常被作为与块存储的IO缓存使用。所谓块存储可简单理解为将数据直接写到裸磁盘。而cached则一般会用于文件系统的IO缓存。比如page cache这种内存换页功能。&lt;/section&gt;&lt;section&gt;听不明白也没关系，因为事实上它们两个经常配合使用。比如与磁盘交换数据、进行网络通信时都会用。buffers和cached是实实在在被操作系统的系统进程在使用的，但是如果用户进程需要可以很快释放。所以通常会将它算到剩余可用内存里。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;但是这个也要注意了。比如在IO密集型的系统，如果buffers/cached被大幅占用，会降低IO速度，进而降低系统吞吐。甚至有可能一个请求几秒才能到达应用程序，造成请求超时。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;集中式缓存&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;redis缓存其实也有本机代理，可以缓存一些活跃的数据在本机上，本机可以取到不数据时不需要跨网络通信。但是因为redis本质是key-value的结构。如果需要根据通配符取数据全量，如果网络出现故障，可能会影响数据的完整性。&lt;/section&gt;&lt;section&gt;但是redis缓存最让人担心的是不规范的使用方法。比如存一个很大的value。具体这个对网络和存储造成的问题就不详细说了。可以想象下马桶堵了的情景。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;贝尔实验室的面向对象编程专家&lt;span&gt;Tom Cargill&lt;/span&gt;说：&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;54&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;最初90%的开发工作将会用去你最初90%的开发时间。剩下的10%的开发量将会用去你另外一个90%的开发时间。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;我理解剩下10%占用了90%的时间是由于超出了原有知识贮备，需要临时抱佛脚，甚至需要拿着锤子找钉子造成的。所以&lt;span&gt;或者也可&lt;/span&gt;&lt;span&gt;以这样做：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;每周持续投入5%的学习时间，10%的思考时间，再用100%的时间去完成100%的开发。&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;相关阅读&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>