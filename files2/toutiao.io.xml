<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>1e22e4414b07b7f0d29b33c0799106a1</guid>
<title>2022 年别再焦虑啦！加入我们！</title>
<link>https://toutiao.io/k/9f0514g</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c0594cc4ed364ad2e72edd824e2fcfc2</guid>
<title>【超赞】技术架构的战略和战术原则</title>
<link>https://toutiao.io/k/j9872pc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUyMDA4OTY3MQ==&amp;amp;action=getalbum&amp;amp;album_id=1847433240647614467#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1847433240647614467&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#数据中台&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;12个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section class=&quot;mp_profile_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUyMDA4OTY3MQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/TwK74MzofXdtvHKjv7OHYYSTQ2QOVuyAia3LaU56kibxKLlX5Lo9bgeUfz1R4JDmdW7ZGYSLqsiaBl3nTOwOmFOFQ/0?wx_fmt=png&quot; data-nickname=&quot;浪尖聊大数据&quot; data-alias=&quot;bigdatatip&quot; data-signature=&quot;主要分享大数据框架，如spark，flink，kafka，hbase原理源码，同时会分享数据仓库，图计算等浪尖擅长领域。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;技术架构，是将产品需求转变为技术实现的过程。技术架构解决的问题包括了如何进行纯技术层面的分层、开发框架选择、语言选择（这里以 JAVA 语言为主）、涉及到各自非功能性需求的技术点（安全、性能、大数据）。技术架构是确定组成应用系统实际运行的技术组件、技术组件之间的关系，以及部署到硬件的策略。&lt;/p&gt;&lt;p&gt;技术架构面临最大的挑战是“不确定性”。在技术架构上，很多时候就会面临这种选择。是要选择业界最新的技术？还是选择团队最熟悉的技术？如果选择最新的技术，遇到新技术出了问题怎么解决？如果选择目前熟悉的技术，后续技术演进怎么办？这些都是架构师在做技术架构过程中需要考虑的。&lt;/p&gt;&lt;p&gt;业务在千变万化、技术在层出不穷，没有一套通用的技术架构模式来适用所有的系统。那么，我们如何保证在做技术架构时，能够实现一个稳定、出色的系统。面对这些“不确定性”时的架构设计问题，这里从战略和战术两个层面来提供一些设计原则。战略层提供的是技术架构的方法和思路，属于顶层设计；战术层提供的是技术架构的技术实践方式，更偏向详细设计。&lt;/p&gt;&lt;p&gt;&lt;span&gt;战&lt;/span&gt;&lt;span&gt;略层设计原则&lt;/span&gt;&lt;/p&gt;&lt;p&gt;战略层的设计原则就是：合适原则、简单原则、演化原则。&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.1 合适原则&lt;/span&gt;&lt;/p&gt;&lt;p&gt;技术人员有一种很强的技术情怀，就是在做设计的过程中，很希望挑战新的技术、在项目中采用最新的框架、或者自己重造一个比业界的还要牛的轮子。这样才能够显示出自己的优秀，以至于不让自己显的那么平庸。比如，在项目中重新造一个能够解决亿万级数据的新的 xx 流式计算技术，比 flink 还要牛一百倍；有或者在项目中使用最新的 xx 技术，能让系统承担亿级用户的访问。&lt;/p&gt;&lt;p&gt;那么现实是，如果在设计过程中一味追求新技术，往往失败的可能性很高。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;没有那么多人，却想干那么多活&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;现实环境中我们一个业务团队可能就十几个人，项目工期短、上线要求快。在这种情况下，如果还要抽调几个人去研究、搭建、维护新的技术框架，对于项目势必会造成延期的影响。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;没有那么多积累，却想一步登天&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;很多业界领先的方案，不是一帮优秀的开发加在一起，加班加点就能做出来的。而是经过几年时间的发展才逐步完善和初具规模。如果我们也想自己做一套类似的技术，不是说不可能。我们需要集合当下的技术实力、技术积累，做出适合自己团队情况的技术评估。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;没有最新，只要最合适&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;所有新的技术刚出来都是打着比旧技术拥有更加出色的性能、提供更加优秀的扩展性。是不是使用新技术，就能解决一切问题了？新技术的出道，势必是解决某一场景下的问题，并不是一味万能良药。只有了解清楚每种技术的产生背景，适用场景，才能出一个对自己项目最优的选择。技术选型没有最新，只有最合适。&lt;/p&gt;&lt;p&gt;总结一下，合适原则就是适合优于业界领先。&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.2 简单原则&lt;/span&gt;&lt;/p&gt;&lt;p&gt;我们总是希望能将我们的软件设计的精美、宏大，这样才能彰显我们系统的复杂度和难度。我们是不是会遇到这样的场景，在做设计方案的时候，如果一个解决方案很简单，而且能很快的满足需求。在评审方案时，就会有人觉得这个方案是不是太简单了，没有什么技术含量，是不是需要再设计的复杂一点。&lt;/p&gt;&lt;p&gt;系统是不是一定要设计的复杂？在回答这个问题前，我们先看下软件领域的结构复杂性和逻辑复杂性。&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）结构复杂性&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;结构复杂的系统有两个特点：&lt;/span&gt;&lt;span&gt;第一，组成的组件数量很多；&lt;/span&gt;&lt;span&gt;第二，这些组件之间的关系很复杂。&lt;/span&gt;&lt;span&gt;如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26835043409629045&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VOjoNXrahuic8dvLOo1r958Az7miaDhVrDYJicr9p0EukwAxgHoz84xwEEDTrqU8uLkkjZVzR1icEyDpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1267&quot;/&gt;&lt;/p&gt;&lt;p&gt;图 1&lt;/p&gt;&lt;p&gt;结构上的复杂性存在的第一个问题是，组件越多，就越有可能其中某个组件出现故障，从而导致系统故障。假设组件的故障概率是 1%（有 1% 的时间不可用），那么 2 个组件的系统可用性是 99%&lt;span&gt;*&lt;/span&gt;&lt;span&gt;99%=98%，5 个组件的系统可用性是 99%&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;99%&lt;span&gt;*&lt;/span&gt;&lt;span&gt;99%&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;99%*99%=95%，两者相差 3%。说明组件越多，系统稳定性就越差。&lt;/p&gt;&lt;p&gt;结构上的复杂性存在的第二个问题是，某个组件改动，会影响关联的组件。比如上图中 C 组件发生改动，会影响 A、B、D，而 A 有会影响 E。这样就会形成一连串的多比诺效应。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt; （2）逻辑复杂性&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;意识到结构复杂性的问题后，只要减少组件就能让系统结构变简单？&lt;/span&gt;&lt;span&gt;这样做还是行不通，原因在于除了结构的复杂性，还有逻辑的复杂性，如果一个组件的逻辑太复杂，通用会带来问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;我们试想一下，把淘宝的所有功能都在一个组件中实现，可以想象这个系统要有多庞大：几百人维护一个系统、代码分支几十个、需求变更应接不暇、不同分支的回归测试、修改一段代码可能影响整个系统的运行等等。这些场景相信大家都不希望看到的。&lt;/p&gt;&lt;p&gt;总结一下，简单原则就是大道至简。&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.3 演化原则&lt;/span&gt;&lt;/p&gt;&lt;p&gt;软件架构和建筑架构很多相同的地方，架构这个词也是从建筑领域借鉴过来的。比如，软件架构描述的是系统的结构、以及各模块之间的关系。而建筑结构描述的是一幢建筑的结构，以及建筑内部各部件如何有机的组成。&lt;/p&gt;&lt;p&gt;但是，软件架构和建筑架构有一个本质上的差异：那就是建筑一旦完成就不会再变，而软件却需要根据业务的发展不断的变化。对于建筑来说，永恒是主题；而对于软件来说，变化才是主题。&lt;/p&gt;&lt;p&gt;如果没有意识到“软件架构需要根据业务发展不断变化”这个本质，在做架构设计的时候很容易陷入一个误区：试图一步到位设计一个软件架构，期望不管业务如何变化，架构都稳如磐石。如果是按照这样的目标是设计，一开始上来就做出一套看似是终极的方案，投入庞大的资源做各种预测、分析。结果是投入巨大的资源、开发周期漫长，最终跌跌撞撞落地的系统，却发现已经无法很好的满足现有的业务。&lt;/p&gt;&lt;p&gt;所以技术架构设计需要一个过程：&lt;/p&gt;&lt;p&gt;首先，要满足当前的业务需求进行技术架构设计&lt;/p&gt;&lt;p&gt;其次，架构要不断地在实际应用过程中迭代，保留优秀的设计，修复有缺陷的设计，改正错误的设计，去掉无用的设计，使架构逐渐完善。&lt;/p&gt;&lt;p&gt;第三，当业务发生变化时，架构要扩展、重构、甚至重写；代码也许会重写，但有价值的经验、教训、逻辑、设计却可以在新架构中延续。&lt;/p&gt;&lt;p&gt;总结一下，演化原则就是演化优于一步到位。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;战术层设计原则&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;战术层的设计原则分为 3 部分：&lt;/span&gt;&lt;span&gt;高并发原则、高可用原则、业务设计原则。&lt;/span&gt;&lt;span&gt;这些原则是对技术架构设计过程中提供详细的指导思路，帮助你做技术选型、技术拆分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2.1 高并发原则&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;设计高并发的系统，需要考虑以下几个方面的设计：&lt;/span&gt;&lt;span&gt;无状态、拆分、服务化、消息队列、数据异构、缓存。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;（1）无状态&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;无状态应用，&lt;/span&gt;&lt;span&gt;便于水平&lt;/span&gt;&lt;span&gt;扩展&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;有&lt;/span&gt;&lt;span&gt;状态配置可通过配置中心实现无状&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;（2） 拆分&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;系统维度：按照系统功能、业务拆分，比如购物车、结算、订单等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;功能维度：对系统功能再做细粒度拆分。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;读写维度：根据读写比例特征拆分；读多，可考虑多级缓存；写多，可考虑分库分表。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;AOP 维度：根据访问特征，按照 AOP 进行拆分.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;模块维度：对整体代码结构划分 web、service、dao。&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）服务化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务&lt;/span&gt;&lt;span&gt;化演进：&lt;/span&gt;&lt;span&gt;进程内服务 - 单机远程服务 - 集群手动注&lt;/span&gt;&lt;span&gt;册服务 - 自动注册和发现服务 - 服务的分组、隔离、路由 - 服务治理。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;考虑服务分组、隔离、限流、黑白名单、超时、重试机制、路由、故障补偿等。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;（4）消&lt;/span&gt;&lt;span&gt;息队列&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（5&lt;/span&gt;&lt;span&gt;）数&lt;/span&gt;&lt;span&gt;据异构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; （6）缓存&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;用户层：DNS 缓存、浏览器 DNS 缓存、操作系统 DNS 缓存、本地 DNS 服务商缓存、DNS 服务器缓存、客户端缓存、浏览器缓存、APP 客户端缓存。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;代理层：CDN 缓存（一般基于 ATS、Varnish、Nginx、Squid 等构建，边缘节点 - 二级节点 - 中心节点 - 源站）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;接入层：Nginx 的 Proxy_cache 代理缓存，或者 Nginx+Lua+Redis 做业务数据缓存。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;应用层：页面静态化、业务数据缓存（Redis/Memcache/ 本地文件等）、消息队列&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据层：NoSQL（Redis、Memcache、SSDB 等）&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2.2 高可用原则&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. 降级&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;降级开关集中化管理：将开关配置信息推送到各个应用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;可降级的多级读服务：如服务调用降级为只读本地缓存。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;开关前置化：如 Nginx+Lua 配置降级策略，引流流量；可基于此做灰度策略。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;业务降级：高并发下，保证核心功能，次要功能可由同步改为异步策略或屏蔽功能。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2. 限流&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;3. 可回滚&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.3 业务设计原则&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;防重设计&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;幂等设计&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;流程定义&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;状态与状态机&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;后台系统操作可反馈&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;后台系统审批化&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;文档注释&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;备份&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;技术架构图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;技术架构图是将系统的技术方案、技术选型通过视图的方式进行展现。技术架构图分为两类：一类，功能需求技术架构图（逻辑架构图），是描绘如何通过技术组件来实现系统产品功能的图。另一来，非功能需求技术架构图（物理架构图），是描绘如何通过物理部署的来实现系统运行的图。&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.1 逻辑架构图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;功能需求技术架构图以产品架构图和应用架构图为基础。实现每个功能点需要使用什么技术、技术实现逻辑如何，就提现在技术架构图上。功能需要技术架构图绘制可以按照“整体 - 局部 - 整体”的思路实现。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt; 1. 整体&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;首先可以按照应用架构图的应用分布得到应用分布框架。如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.584375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VOjoNXrahuic8dvLOo1r958ASqzB3ickhoXSI1NW5edw8ofWMh4IsgprWPtia23U8Ouk8Cic6gB9HH8XA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 2&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2. 局部&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在整体框架的基础上，对每一个局部的子系统进行详细的技术实现的表达。子系统的技术架构图中需要展示每个子系统使用的技术组件，比如（缓存技术、消息中间件、流程引擎、流式计算框架等等）。同时，这些技术组件是如何实现业务功能，需要清晰的展示技术实现逻辑。&lt;/p&gt;&lt;p&gt;下图是对风控系统中的实时引擎、离线引擎、准实时引擎三个子系统的进行的技术架构。在实时引擎中，主要使用 RuleEngine（规则引擎）作为技术特点，这里就重点列出 RuleEngine。准实时引擎使用 Blink 作为流计算的技术框架，并概要的展示了计算逻辑。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5576619273301737&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VOjoNXrahuic8dvLOo1r958A6zsDY3BVLB47AcEVhuvYnsOVwPLG5A2ra3AcLsuTFWuK9qyOXgsxCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1266&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 3&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt; 3. 整体&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在完成每个子系统的技术实现后，最终进行一次整合，绘制一张总体的系统技术架构图。各子系统之间通过服务接口、数据库、缓存或消息中间等技术实现数据交互，以此将打通各个子系统，实现最终整个产品从数据、技术的串联。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5803149606299213&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VOjoNXrahuic8dvLOo1r958AWI6GaIicx63pUauFjte2CL9jKX5ia1uNXwgZ5G12EETaNX9BpVp3z3Cw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1270&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 4&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;3.2 物理架构图&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;物理架构偏重于网络设计、集群设计、中间件设计、数据存储设计等基础软硬件的设计架构。非功能需求的技术架构图重点在于展示企业系统在物理上是如何部署。物理架构规定了组成系统的物理元素、物理元素之间的关系以及他们的部署策略。物理架构反映出软件系统动态运行时的组织情况。从物理架构图中，我们能够全局的得知整个系统是如何从流量访问、数据流转、数据存储到技术组件的运转。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8264984227129337&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VOjoNXrahuic8dvLOo1r958AySEjrTcwCj7lewmvN5fUgdpCnq1e0QWhEzNGQic3k5LBic8gk8OcmH4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1268&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 5&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;总  结&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;我们从架构的本质开始，分别对业务架构、产品架构、数据架构、应用架构、技术架构的设计提供了一些思路和原则。这些思路和原则在进行架构设计和画架构图的过程中提供一些指导帮助。最后我们再来思考一个问题，好的软件架构是规划还是演化出来？&lt;/p&gt;&lt;p&gt;架构规划对架构的影响是很重大的。首先，好的架构是设计出来的。好的架构，系统的性能和质量都将很高。架构设计的质量直接影响架构后续向好的方向演化的难易程度。架构设计如同城市规划一样，缺少规划将难于演化。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34490923441199683&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VOjoNXrahuic8dvLOo1r958A3fJARZKlibOSQXfL937NC81HBaCia68DZHgzMnTQ3Eh4l0h9EPWnNRsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1267&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 6&lt;/span&gt;&lt;/p&gt;&lt;p&gt;演化是一个过程，这个过程或长或短，所以演化需要考虑系统的生命周期。如果演化的过程非常漫长，超出了软件的生命周期，即使架构越来越优化，对于产品或者项目的帮助也将有限，所以时间这个约束条件是非常苛刻的。&lt;/p&gt;&lt;p&gt;在现有规划的基础上进行演化，我们无法得到普适的架构，但可以得到确定领域的通用架构，可以在特定领域通过演化使架构逐步优化，帮助业务快速的发展。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt; 作者简介&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;胡斌，菜鸟网络技术专家，目前负责菜鸟风控系统的建设。曾在淘宝技术部先后负责卖家平台、商家运营等领域。在大规模分布式应用、大数据、架构领域有多年的开发和管理经验。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6764091858037579&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TwK74MzofXd78W49nBaME6TkGc8gv8DBzMJvytIYy9Dibfsl7qq5ibATfYh9BN1xQO5qU1OejK3Gic6dfl8iafXwGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;958&quot;/&gt;&lt;/p&gt;&lt;pre/&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c70ffbf08e8b4c8eb1dc07e4227347b9</guid>
<title>Windows 是最安全的操作系统</title>
<link>https://toutiao.io/k/66e0ect</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;建了一个用户交流群，我在群里说：“Windows 是最安全的操作系统。” 立刻引发了很多有意思的观点。我在群里一个人说不过大家，先篇文章把自己的论点罗列一下。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;对操作系统攻击的方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有5类基本的攻击方式：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1、 系统口令攻击：猜测攻击、字典攻击、穷举攻击、混合攻击、直接破译攻击、网络嗅探、键盘记录、中间人攻击、社会工程学&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2、 SMB/NetBIOS协议攻击：空会话攻击&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3、 脚本攻击：SQL注入技术、PHP+MySQL注入技术、跨站脚本攻击技术、cookie攻击技术、WebShell提权技术&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;4、 恶意代码攻击：木马技术、Rootkit技术、病毒技术、蠕虫技术、网页恶意代码&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;5、 网络安全设备攻击：路由技术、Dos攻击、防火墙攻击&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一项对参加了 DEFCON 会议的黑客的调查表明，“84％ 的人使用社会工程学作为攻击策略的一部分。” 社会工程学又叫社交工程学，发起“社会工程学”攻击的人也有一个被美化的称号是&lt;span&gt;社工工程师&lt;/span&gt;。Windows 系统因为用户基础的关系，社会工程学的攻击主要也是针对 Windows 系统。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面大家来做一道单选题，&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;vote_area&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在 Windows 、macOS 和 Linux 三个用户最多的系统中，Windows 在安全方面做了更多的工作。因为其用户量不但碾压其他两个系统，其用户的技术水平也最为参差。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然这只是个人观点。目前业界并没有全面的统计数据。甚至安全的指标都不明确。到底什么才是安全的指标呢？是 攻击成功率、被攻破次数？到底是以那个时间段作为衡量指标？衡量覆盖范围到底涉及哪些？统统没有定论，所以没有标准答案。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;业界影响较大的攻击举例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;案例一 Equifax 数据安全事件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2017 年 9 月，美国征信巨头 Equifax 承认 1.45 亿美国居民个人隐私信息泄露，这是该国历史上最严重的数据安全事件，以美国人口 3.2 亿计算，受影响的超过 40%。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;由于征信局采集的数据涉及到消费、贷款等大量隐私数据，这让征信局成了黑客眼中的香馍馍，偏偏本次事件的主角 Equifax 的安全防范系统实在不堪一击，让犯罪分子得以利用其漏洞获取对部分文件的访问权，于是 1.45 亿用户的姓名、社会安全号码（SSN）、出生日期、地址、驾驶证号码(这相当于是中国的身份证号码)等信息就这样泄露了出去。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个漏洞是 Apache Struts 的低版本安全漏洞引起的，其实只要及时升级版本，问题可以避免。但是特别是这种重要的应用，版本升级等变更就越困难。所以在一个新应用投产时，特别是边界应用，尽量选择无高危漏洞的版本。而事实上，新应用在选择版本时，架构师们往往并不根据实际情况，而是采取“跟随策略”。就是使用其他应用在长期稳定运行的版本。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;问题是首先要考虑，如果自己的应用边界应用，并且是很多黑客觊觎的产品的一部分，安全是第一重要的，应该尽量选用无已经被发现漏洞的高级版本。因为像 Equifax 被攻击这种事情，30年也就发生一次。作为边界应用被攻击成功，不会有其他应用给做背书，一损俱损。后果还是自己扛。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;案例二 Log4j2 lookup 漏洞&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2021年12月9日，国内多家机构监测到 Apache Log4j2 存在任意代码执行漏洞，并紧急通报相关情况。由于Apache Log4j存在递归解析功能，未取得身份认证的用户，可以从远程发送数据请求输入数据日志，轻松触发漏洞，最终在目标上执行任意代码。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;虽然有这个漏洞，目前还没有对企业造成任何损失。并且如果没有用到 Message Pattern Lookups&lt;/p&gt;&lt;p&gt;的程序，可以使用 - Dlog4j2.formatMsgNoLookups=true 禁用它解决问题。而且 log4j2 官方也已经为此漏洞打上补丁。其实我很想为 log4j2 说两句话。高版本的 log4j2 相比logback等其他主流日志框架更加强大，它提供了更加强大优雅的API、默认无垃圾模式运行、更强的异步性能。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5257595772787318&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8EdcKu0AX9ibfAdTpVDtD7As9JgNYEz2c0piapAg751ChWlqWuUDtOMiaYoGTibwwMIRuFUjQHibTQjRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;757&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Log4j2 在安全方面给我的启迪有两点：第一，尽量使用官方还在维护的软件版本。现在设想一下：假如发现 log4j2 漏洞之后，log4j2 开发者明确表示不会修复此漏洞，使用的公司们打算怎么办？第二，不要在不需要的情况下开启软件的高级特性，增加引入漏洞的几率。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;近年来，由于操作系统本身的问题引起的漏洞要少了上面运行的软件的漏洞。而 Windows 操作系统由于拥有更多的用户量，配套的软件也更多更全，很多都很难从官方渠道免费使用，使得携带病毒的软件有可乘之机。而MacOS由于基本只能通过官方应用商店下载；而 linux 系统上运行大多是开源软件，完全可以通过官方渠道免费下载。所以这其实使得 Windows 系统不如其他两个系统安全，这个是 Windows 从一开始的设计理念决定，这个锅 Windows 得背。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;春节前我建了一个群，旨在答谢用户，用了全年收入的 1800% 给大家发了红包。之后还有很多朋友说要入群交流，不是为红包来的。非常欢迎。给出入【编程一生】用户交流群官方渠道：加微信 brmayi 注明入群。或者已经是好友的朋友可以私信我：入群。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;今年红包已经发完了，要增加明年红包的预算要靠大家了。关注、点赞、在看、点广告。明年收入多少我发多少。不过目前为止大家的预算堪忧啊。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.932475884244373&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8EdcKu0AX9ibfAdTpVDtD7AXE4UWAH9QsZAETvUFQjDQ6KLZPY0xq1ibdZwwDiaAAf1rhfibBKZhNk9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;622&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f812b91704f5e41e3e1dbb10f5c4aa3e</guid>
<title>139 python|第八部分：并发网络编程（四）多任务编程下--线程</title>
<link>https://toutiao.io/k/4ck5hyn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6785714285714286&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qyCxOUeIP6qsdzRia282A2X0DhiadMlhAq1xHcxb5gBf3tTGjJjswJM4trpQIYUjSrS8INicJXBIDBniafQEoXd2Sg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;56&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;引 言&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;线程和进程有一些相似性，在其他的后端编程语言主要学习线程，线程在资源消耗上要小于进程。Python的进程有一些局限，比如GIL问题，在实际的开发过程中，线程和进程需要搭配使用。接着让我们一起来了解一下线程的相关知识吧。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt; 线程概述&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;18&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;25&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUQ2ORiaDHIlr4Xw64zhj0RpicIt7q38C2p7EVuCvOoOutGuaPFXd4HBUnftjrfh8R3TtuKwZdWrkaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;        &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;21&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;21&quot; data-ratio=&quot;1.2425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXc5KIQIDfgMiaiaic9qKMicyACWq0kH1b52QzXNaYXHaQib1icIbV0SOicadJJiaXMmZoibsSfhVQPjxDklvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;1.1 认识线程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍什么是线程&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1.线程被称为轻量级的进程，也是多任务编程的一种方式&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2.线程也可以利用计算机的多CPU资源&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3.线程可以理解为&lt;/span&gt;&lt;span&gt;进程中再开辟的分支任务&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍线程的特征&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1.一个进程可以包含多个线程&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2.线程也是一种运行行为，消耗计算机资源&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3.一个进程的所有线程&lt;strong&gt;共享&lt;/strong&gt;这个进程的资源&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4.多个线程在执行上互不影响&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5.线程的创建和销毁消耗资源远小于进程&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍应用场景&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;一个大型服务往往包含多个独立的任务模块，每个任务模块又有多个小独立任务构成，此时整个项目可能有多个进程，每个进程又有多个线程。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;▍进程和线程该如何选择&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;我们可能会有点疑惑，在学习进程时我们也说过，创建多进程也可以完成多任务编程，那么在实际工作中，多进程和多线程该如何选择呢？是创建一个进程，下面再创建多个线程；还是直接创建多个进程呢？&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;打个比方，我们可以把进程理解为一个公司，把线程理解为公司的不同部门，公司有它的企业目标，目标的实现要依靠各个部门协同配合。如果一个进程没有创建线程，既可以理解为单进程，也可以称之为单线程。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;java，c#，php，go等编程语言&lt;/span&gt;在执行多任务时一般都用&lt;span&gt;多&lt;/span&gt;&lt;span&gt;线程&lt;/span&gt;完成，因为线程资源消耗少；而&lt;span&gt;python&lt;/span&gt;由于GIL问题（在后文中介绍）往往使用&lt;span&gt;多进程&lt;/span&gt;来提高效率。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;对于后端开发来说，了解多线程编程是必要的。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;02 多线程编程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;18&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;18&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUQ2ORiaDHIlr4Xw64zhj0RpicIt7q38C2p7EVuCvOoOutGuaPFXd4HBUnftjrfh8R3TtuKwZdWrkaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;        &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;python有thread和threading两个标准库支持线程。threading库在thread的基础之上，建立了更高级的线程接口。可以在下面的链接中查看具体使用&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://docs.python.org/zh-cn/3/library/threading.html&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对threading模块的使用要更多一些。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;thre&lt;/span&gt;&lt;span&gt;ading基于Java的线程模型设计。锁（Lock）和条件变量（Condition）在Java中是对象的基本行为（每一个对象都自带了锁和条件变量），而在Python中则是独立的对象。Python Thread提供了Java Thread的行为的子集；没有优先级、线程组，线程也不能被停止、暂停、恢复、中断。&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;Java Thread中的部分被Python实现了的静态方法在threading中以模块方法的形式提供。&lt;span&gt;引用自&lt;/span&gt;&lt;span&gt;AstralWind&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;20&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;20&quot; data-ratio=&quot;1.2425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXc5KIQIDfgMiaiaic9qKMicyACWq0kH1b52QzXNaYXHaQib1icIbV0SOicadJJiaXMmZoibsSfhVQPjxDklvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;threading模块提供的类有：&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Thread 线程类, &lt;span class=&quot;code-snippet__keyword&quot;&gt;Lock&lt;/span&gt; 指令锁, Rlock 可重入锁, Condition 条件变量, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Semaphore 信号量, &lt;span class=&quot;code-snippet__keyword&quot;&gt;Event&lt;/span&gt; 事件,  Timer 定时器 , &lt;span class=&quot;code-snippet__keyword&quot;&gt;local&lt;/span&gt; 线程本地数据 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;本文主要梳理&lt;span&gt;Thread 线程类&lt;/span&gt;，&lt;span class=&quot;code-snippet__keyword&quot;&gt;Event 事件&lt;/span&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;&lt;span&gt;和&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Lock 指令锁。&lt;/span&gt;&lt;/p&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;21&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;21&quot; data-ratio=&quot;1.2425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXc5KIQIDfgMiaiaic9qKMicyACWq0kH1b52QzXNaYXHaQib1icIbV0SOicadJJiaXMmZoibsSfhVQPjxDklvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;2.1 Thread 线程类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍创建线程&lt;/span&gt;&lt;/section&gt;&lt;section&gt;python3使用threading模块创建新线程&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;table align=&quot;center&quot; interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;th rowspan=&quot;1&quot; colspan=&quot;2&quot; align=&quot;center&quot; valign=&quot;top&quot;&gt;创建线程&lt;br/&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;类和函数&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;功能&amp;amp;语法&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;Thread()&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;span&gt;功能&lt;/span&gt;：创建线程对象&lt;br/&gt;&lt;span&gt;参数&lt;/span&gt;：&lt;br/&gt;  &lt;span&gt;name&lt;/span&gt;：线程名&lt;br/&gt;  &lt;span&gt;target&lt;/span&gt;：线程函数&lt;br/&gt;  &lt;span&gt;args&lt;/span&gt;：元组，给线程函数传参&lt;br/&gt;  &lt;span&gt;kwargs&lt;/span&gt;：字典，给线程函数传参&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;start()&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;启动线程&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;join([timeout])&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;回收线程&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;可以发现线程和进程的创建方式基本相似。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍线程的属性和函数&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;table align=&quot;center&quot; interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;th rowspan=&quot;1&quot; colspan=&quot;2&quot; align=&quot;center&quot; valign=&quot;top&quot;&gt;线程对象属性&amp;amp;函数&lt;br/&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;功能&amp;amp;语法&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;属性&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;span&gt;name&lt;/span&gt;：线程名，不写默认为Thread-1&lt;br/&gt;&lt;span&gt;daemon&lt;/span&gt;：默认为False，主线程结束不会影响分支线程；如果设置为True，主线程退出分支线程也会退出&lt;br/&gt;&lt;span&gt;daemon设置方法：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  setDaemon(True)：&lt;br/&gt;  对象.setDaemon(True)&lt;br/&gt;  isDaemon() 判断daemon属性值&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;函数&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;isalive()：查看线程状态&lt;br/&gt;setName()：设置线程名称&lt;br/&gt;getName()：获取线程名称&lt;br/&gt;&lt;p&gt;&lt;span&gt;current_thread()&lt;/span&gt;：当前存活的 Thread 对象的数量&lt;/p&gt;&lt;p&gt;&lt;span&gt;active_count() &lt;/span&gt;：当前对应调用者的控制线程的 Thread 对象&lt;/p&gt;&lt;p&gt;&lt;span&gt;enumerate()&lt;/span&gt;： 当前所有存活的 Thread 对象的列表&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;实例1:&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;基本线程创建示例&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; threading &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; Thread&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; sleep&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;music&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;下一首:好运来&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;thread = Thread(target=music)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;thread.start()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;上一首:喜羊羊&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;运行可以发现，上面这个实例的主线程和分支线程是各自执行，互不影响的，大概4秒左右执行完。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.38726790450928383&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXPBkRSC8jTnScylrkEqS1DrLnoq0nuWsJbibVdKEh2A0SQ7I7nCTqfpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;754&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;打印当前进程的进程号，发现主线程和分支线程的进程号相同，说明多个线程同属于一个进程。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9593267882187938&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXBeNRgy8tL5XCT3B0aOUCaINYFSGfW3wZNcFUPVwSL9l0cMEmowOcMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;713&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;定义全局变量a，先在分支进程中声明，打印，重新赋值；然后在分支线程结束后再次打印。会发现第二次打印a的值已经改变，这说明，一个进程的所有线程虽然互不影响、独自运行，但是共享进程的空间。&lt;/p&gt;&lt;p&gt;&lt;span&gt;这也是和多进程的区别之一&lt;/span&gt;，在多进程中，父子进程有独立的执行空间，在本进程对空间的操作，不影响其他进程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.918918918918919&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXtFE34bBp0kwNZuvwUfvAf3MerbMJW7agLpBvQZLyQ6gENVD3jTGP9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;740&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;实例2:&lt;/strong&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;线程函数传参&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;同时创建多个线程&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; threading &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; Thread&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; sleep&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(sec,name)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;含有参数的线程&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sleep(sec)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%s 线程执行完毕&quot;&lt;/span&gt;%name)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    t = Thread(target = func,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               args = (&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               kwargs = {&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;T-%d&quot;&lt;/span&gt;%i}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    t.start()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;strong/&gt;运行结果：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;说明了多个线程是在抢占cpu执行，各个线程的执行顺序是不确定的。上面的代码主线程（自上而下）执行结束后，分支线程还在继续执行。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0326340326340326&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXjI8G6wLIIib23LMjiaIGhP7cKCHKeahMp7fQrFZ2sJia0DubwiaDDbwYHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;429&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;注：以上打印出来的内容都是分支线程函数的一部分，只是通过“含有参数的线程”的打印结果可以确定主线程已经结束了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过把daemon设置为True，可以让分支线程和主线程一起结束。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9118541033434651&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXaQdLrlZ4rBZgtuPzrDuJa6Micb5yyHLPwrpHBNlz2bog6G0QP1lCDkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;658&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;▍创建线程类&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;1.创建步骤&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;继承Thread类&lt;br/&gt;&lt;/section&gt;&lt;section&gt;重写__init__方法&lt;span&gt;添加自己的属性，使用super()加载父类属性&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;重写run()方法&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;2.使用方法&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;实例化对象&lt;/section&gt;&lt;section&gt;调用start自动执行run方法&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;实例1：&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;自定义线程类&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; threading &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; Thread&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; sleep&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MyThread&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Thread)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, song)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        self.song = song&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        super().__init__()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;下一首:&quot;&lt;/span&gt;,self.song)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;t = MyThread(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;白龙马&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;t.start()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;运行结果：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;此时，没有设置daemon，默认主进程和分支进程不会同时结束。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6494252873563219&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXKBuMQDicGmIQTBXfuIicDkLPBobPyuAdrYCAdVr6fT7MZzOKTtuUXjhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;348&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;设置daemon=True后，分支线程和主线程会一起结束。把主进程的sleep时间设置为3，在主进程和分支进程一起结束时，分支进程执行出了一条print语句。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9378698224852071&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXb5rJYPX4WibwcXZv9674LZgtu9xh3ia1iaic3Uhv9xlibmd9DkAficyxv1dQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;676&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;实例2：&lt;/strong&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;需求：用线程实现现在有500张票，存在一个列表中 [&quot;T1&quot;,....&quot;T500&quot;]，10个窗口同时卖这500张票 W1-W10使用10个线程模拟这10个窗口，同时卖票，直到所有的票都卖出为止，每出一张票 需要0.1秒，打印表示即可print(&quot;W1----T250&quot;)&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; threading &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; Threadfrom time &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; sleep&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;pop()&lt;/span&gt;的使用&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3582295988934993&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXR8v5yfibdXDbYfHEnVHDcDYJLE0Dq3f5JWLf5h35OpxW2R3pNXHutSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;723&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;用列表jobs存储10个进程对象,等它们都启动之后,再统一回收&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6793296089385474&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXrYK7Elxrs1RsLZriaWzVSI1evQI3icC2eqoPl5U1uaLPkvb6BC4gJUFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;895&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;运行结果：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2320261437908497&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXVosoGfRt1tcJy2CkicxpJ8ZBsuI625jRKVc8eTNUmPbHgmPC3yR8FPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;306&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;报错&lt;/span&gt;：pop from empty list&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4957627118644068&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXKl4bibmsASzwLb4Weu0YbMVVqdBn0uJOewbIOstfxTu77pojiaZKnfKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;472&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;调整sleep的顺序，放在打印之前会报错。按理说进入while tickets: 的前提是列表不为空，&lt;span&gt;为什么会报列表为空的错误呢？&lt;/span&gt;原因在于，我们有10个进程，当出现一种情况，比如列表只有5张票，而10个进程全部涌入while循环，那么一定有5个线程因没有抢到票报错。其实把sleep放在打印之后，也会有这样的报错可能。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6038251366120219&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzX2iaDC1dnageaiabmRF2sZnocQwzVgnN6CRwzOSib3EkZs82UVsqDmRLVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1098&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过&lt;/span&gt;&lt;span&gt;加入异常处理&lt;/span&gt;&lt;span&gt;，我们可以从&lt;em&gt;表面上&lt;/em&gt;解决这个问题，这个问题本质上是“&lt;/span&gt;&lt;span&gt;共享资源争夺”&lt;/span&gt;&lt;span&gt;的问题，接着我们来了解一下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3951965065502183&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXVeBic22avMlwRVB291tuAm5Qfn89oSsCTn28gawIeQFq6TRGQMFYtng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;916&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;03 同步互斥&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;18&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;18&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUQ2ORiaDHIlr4Xw64zhj0RpicIt7q38C2p7EVuCvOoOutGuaPFXd4HBUnftjrfh8R3TtuKwZdWrkaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;        &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;21&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;21&quot; data-ratio=&quot;1.2425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXc5KIQIDfgMiaiaic9qKMicyACWq0kH1b52QzXNaYXHaQib1icIbV0SOicadJJiaXMmZoibsSfhVQPjxDklvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1 概述&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;▍线程通信方法&lt;/span&gt;&lt;/p&gt;&lt;p&gt;多个线程共用进程空间，所以进程的全局变量对进程内的线程均可见。&lt;span&gt;使用全局变量通信是线程主要通信方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;▍注意事项&lt;/span&gt;&lt;/p&gt;&lt;p&gt;线程间通信更容易产生资源争夺现象，往往需要&lt;span&gt;同步互斥机制&lt;/span&gt;保证通信安全。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;▍共享资源争夺&lt;/span&gt;&lt;/p&gt;&lt;p&gt;多个进程或线程都可以操作的资源叫做&lt;strong&gt;共享资源&lt;/strong&gt;，对共享资源的操作代码段 称为&lt;span&gt;临界区&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;进程中的共享资源比如，文件（多个进程可以读写一个文件），消息队列中的内存空间（多个进程都可以操作）；线程的共享资源比如全局变量。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;只不过&lt;span&gt;在进程中共享资源争夺问题不太突出，而在线程中更加明显&lt;/span&gt;，这是由线程的通信方法决定的—线程不像进程一样有自己独立的通信方法，线程主要使用全局变量进行通信。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对共享资源的&lt;span&gt;无序操作&lt;/span&gt;可能会带来数据的混乱或操作错误，此时往往需要同步互斥机制协调操作顺序。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;同步互斥机制通过&lt;span&gt;强加阻塞&lt;/span&gt;的方式可以影响线程对共享资源的&lt;span&gt;操作顺序&lt;/span&gt;，就像马路上的红绿灯在一定程度上放慢了通行速度，但保证了道路行驶的安全性。&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;▍同步&lt;/span&gt;&lt;/p&gt;&lt;p&gt;同步是一种&lt;strong&gt;协作关系&lt;/strong&gt;，为完成操作，多进程或者线程间形成一种协调，按照必要的步骤&lt;span&gt;有序&lt;/span&gt;执行操作。比如进程通信中的消息队列，放消息和取消息有先后，这种先后的协调是同步的一种体现。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;▍互斥&lt;/span&gt;&lt;/p&gt;&lt;p&gt;互斥是一种&lt;strong&gt;制约关系&lt;/strong&gt;，当一个进程或线程占用资源时会进行&lt;span&gt;加锁处理&lt;/span&gt;，此时其他进程线程就无法操作该资源，直到解锁后才能操作。并不是所有的进程或线程都有先后顺序的要求，比如两台打印机都要打印，这时顺序变得不重要了，但是对完整性有要求，一台打完，另一台才能打。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48412698412698413&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXtZyWibLrCLS1nc9d7nH6icP5J4PlXV4sAhw4etGzX9lVvnYBc62EOia3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;504&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;图源：AstralWind&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;线程的同步互斥机制本质上是提供阻塞，接下来分别用Event和Lock两种方法来实现。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;21&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;21&quot; data-ratio=&quot;1.2425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXc5KIQIDfgMiaiaic9qKMicyACWq0kH1b52QzXNaYXHaQib1icIbV0SOicadJJiaXMmZoibsSfhVQPjxDklvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2 Event 事件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;▍Event类&lt;/span&gt;&lt;/p&gt;&lt;p&gt;导入：from threading import Event&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table align=&quot;center&quot; interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;th rowspan=&quot;1&quot; colspan=&quot;2&quot; align=&quot;center&quot; valign=&quot;top&quot;&gt;Event&lt;br/&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;函数&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;功能&amp;amp;语法&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;Event()&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;创建事件&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;strong&gt;wait([timeout])&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;未设置则阻塞，返回值为False；&lt;/span&gt;设置事件状态则不阻塞，返回值为True&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;strong&gt;set()&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;将事件变为设置状态&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;strong&gt;clear()&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;将事件设置去除&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;strong&gt;is_set()&lt;/strong&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;查看事件状态&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;通过Event创建的对象有两种状态（阻塞和不阻塞），初始状态为阻塞状态。调用wait时，进入阻塞等待状态，可以通过timeout设置阻塞时间，不设置会一直阻塞。调用set会进入到设置状态，此时再调用wait，就进入到不阻塞状态。clear则会去除设置状态，此时再调用wait，又重新进入到阻塞状态。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;实例: 参考&lt;strong&gt;AstralWind&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;同步互斥--Event&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; threading&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;event = threading.Event()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;%s 进入阻塞状态&#x27;&lt;/span&gt; % threading.currentThread().getName())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    event.wait()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;%s 进入运行状态&#x27;&lt;/span&gt; % threading.currentThread().getName())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;a = threading.Thread(target=func)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;b = threading.Thread(target=func)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;a.start()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;b.start()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;time.sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;主线程设置事件状态&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;event.set()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;打印结果：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.633177570093458&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXKH7dBoFqtYX3Jmm23TDMOicOnwibZb9J95vibFhsibq61iaYnKFVEfBPEYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;428&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;接下来看另外一种同步互斥方法—Lock &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;21&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;21&quot; data-ratio=&quot;1.2425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXc5KIQIDfgMiaiaic9qKMicyACWq0kH1b52QzXNaYXHaQib1icIbV0SOicadJJiaXMmZoibsSfhVQPjxDklvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;3.3 Lock 指令锁&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;span&gt;▍Lock类&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;table align=&quot;center&quot; interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;th rowspan=&quot;1&quot; colspan=&quot;2&quot; align=&quot;center&quot; valign=&quot;top&quot;&gt; Lock&lt;br/&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;函数&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;功能&amp;amp;语法&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;Lock()&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;创建锁&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;strong&gt;acquire([timeout])&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;上锁&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;strong&gt;release()&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;解锁&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;实例: &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;分支线程func和主线程在没有上锁的情况下，会出现抢占cpu执行的情况，所以即使a和b在初始时值相同，但在程序运行过程中并不会同时增加1，有可能a刚加1，func函数就判断a和b的值是否相等了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1669595782073814&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXwU8E1op3gpqoQb6DQqm9CYF6ibKF5lksX5dnUc89y7JOXpkkbX3zCSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;569&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这时，如果想要主线程和分支线程一个执行完，另一个才开始执行，可以通过加锁的方式实现。在所有用共享资源的地方都要上锁和解锁，这样就可以执行一处的时候，另一处就进入阻塞。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;同步互斥--Lock&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; threading &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; Thread,Lock&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;lock = Lock()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;a=b=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        lock.acquire()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; a != b:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            print(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;a = %d,b = %d&quot;&lt;/span&gt;%(a,b))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        lock.release()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;t = Thread(target=func)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;t.start()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    lock.acquire()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    a += &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    b += &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    lock.release()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;运行结果：（没有出现阻塞）&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.12825860271115747&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXibBK3icgWTIjs68taMIXBKyxw5rUTiaNrTr9KRuhHicxtmoGSxib5tAXpjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;959&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;04 死锁&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;18&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;18&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUQ2ORiaDHIlr4Xw64zhj0RpicIt7q38C2p7EVuCvOoOutGuaPFXd4HBUnftjrfh8R3TtuKwZdWrkaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;        &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;21&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;21&quot; data-ratio=&quot;1.2425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXc5KIQIDfgMiaiaic9qKMicyACWq0kH1b52QzXNaYXHaQib1icIbV0SOicadJJiaXMmZoibsSfhVQPjxDklvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;4.1 概念，产生条件，避免方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍概念&lt;/span&gt;&lt;/section&gt;&lt;section&gt;死锁指的是两个或两个以上线程在执行过程中，&lt;span&gt;由于竞争资源或彼此通信而造成的一种阻塞现象&lt;/span&gt;，若无外力作用，它们都将无法推进下去，此时称系统处于死锁状态或系统产生了死锁。&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▍产生条件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1.互斥条件&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;线程使用了互斥方法，&lt;/span&gt;&lt;span&gt;使用一个资源时其他线程无法使用&lt;/span&gt;&lt;span&gt;。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2.请求和保持条件&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;线程&lt;/span&gt;&lt;span&gt;已经保持至少一个资源，但又提出新的资源请求&lt;/span&gt;&lt;span&gt;，在获取新的资源前不会释放自己保持的资源。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3.不剥夺条件&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;线程&lt;/span&gt;&lt;span&gt;已经获得的资源，未使用完成之前，不能被剥夺&lt;/span&gt;&lt;span&gt;，不会受到线程外部的干扰，只能在使用完时自己释放（通常cpu内存资源是可以被系统强行调配剥夺的）。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4.环路等待条件&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;指在发生死锁时，必然存在一个线程—&lt;/span&gt;&lt;span&gt;资源的环形链&lt;/span&gt;&lt;span&gt;，即进程集合{T0,T1...Tn}中的T0在等待一个T1占用的资源，T1在等待T2占用的资源，Tn在等待T0占用的资源。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;▍避免方式&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1.逻辑清晰，&lt;/span&gt;&lt;span&gt;不要同时出现&lt;/span&gt;&lt;span&gt;以上死锁的四个产生条件&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2.通过测试工程师进行死锁&lt;/span&gt;&lt;span&gt;检测&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;实例: &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;死锁问题&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; sleep&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; threading &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; Thread,Lock&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self,id,balance,lock)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        self.id = id&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        self.balance = balance&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        self.lock = lock&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self,amount)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        self.balance -= amount&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self,amount)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        self.balance += amount&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getbalance&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; self.balance&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Peiqi = Account(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Peiqi&#x27;&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;,Lock())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;George = Account(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;George&#x27;&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;200&lt;/span&gt;,Lock())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(from_,to,amount)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    from_.lock.acquire()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    from_.get(amount)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    to.lock.acquire()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    to.put(amount)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    from_.lock.release()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    to.lock.release()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;trans(Peiqi,George,&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Peiqi:&#x27;&lt;/span&gt;,George.getbalance())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;George:&#x27;&lt;/span&gt;,Peiqi.getbalance())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;运行结果：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;在这段代码中，场景是一方给另一方转钱，程序运行没有问题。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4134790528233151&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXh30ZibWxuGmHbQCTkOS8zZuB8n4TfkicKd4pYruqwB0T4ia9xfFe6C0sA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;549&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;但是如果两方同时向对方转钱，会出现阻塞。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.650542941757157&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXNvwNzGdIM4TWhUogbkyRqOFve2FRlzeLKuHLKMRMWiac5uFRtIVS9lw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1013&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;阻塞的原因是产生了死锁。根据上面提到的死锁的避免方式，我们只要让死锁四个产生条件不要同时出现即可。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5487465181058496&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXqqejPJqxSHoJBoIm3DAtzzbC9NeHajNYia7xqA9nCWQaoNtmjOTdloA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;718&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;这题可以通过破坏“请求和保持条件&lt;/span&gt;&lt;span&gt;”入手。&lt;/span&gt;可以让出钱一方上锁-取钱后直接进行解锁来实现需求。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5234460196292258&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXMD4S1j2FpTAj0lTFKicS53XHWn0yRGIFHr0wTTmagOu1E61NGNU6FvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;917&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;运行结果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5254691689008043&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXKhcnOIcVCXSM0GmgAu6hqJdWpvA73UIfKbOibUDIRQM647jlJUPWtjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;373&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;05 GIL(global interpreter lock)问题 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;18&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;18&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUQ2ORiaDHIlr4Xw64zhj0RpicIt7q38C2p7EVuCvOoOutGuaPFXd4HBUnftjrfh8R3TtuKwZdWrkaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;        &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;21&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;21&quot; data-ratio=&quot;1.2425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXc5KIQIDfgMiaiaic9qKMicyACWq0kH1b52QzXNaYXHaQib1icIbV0SOicadJJiaXMmZoibsSfhVQPjxDklvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;5.1 概念&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍GIL（全局解释器锁）概念&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;为了利用多核，Python利用支持多线程，为了解决&lt;strong&gt;多线程之间数据完整性和状态同步&lt;/strong&gt;&lt;strong&gt;的问题&lt;/strong&gt;，python通过加锁的方式来处理（通过GIL给解释器加锁，让解释器同一时刻只能解释一个线程）。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;但这也大大降低了线程的执行效率，因为遇到阻塞时线程会主动让出解释器，去解释其他线程。所以python在&lt;span&gt;执行多阻塞任务时&lt;/span&gt;可以提升程序效率，其他情况并不能对效率有所提升。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;为了提高效率，我们可以&lt;span&gt;尽量使用进程完成无阻塞的并发行为&lt;/span&gt;，还可以不使用c作为解释器，&lt;span&gt;改用java或者c#解释器&lt;/span&gt;。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;关于python的解释器，可以看下面这篇文章了解&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://blog.csdn.net/orangleliu/article/details/39204897&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍结论&lt;/span&gt;&lt;/section&gt;&lt;p&gt;1.GIL问题与python语言本身没什么关系，属于解释器设置历史的问题。&lt;/p&gt;&lt;p&gt;2.在无阻塞状态下，多线程程序执行效率并不高，甚至还不如单线程。&lt;/p&gt;&lt;p&gt;3.python多线程&lt;strong&gt;只适用于&lt;/strong&gt;执行&lt;strong&gt;有阻塞延迟&lt;/strong&gt;的任务情形。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;06 进程和线程的联系&amp;amp;区别 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;18&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;18&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUQ2ORiaDHIlr4Xw64zhj0RpicIt7q38C2p7EVuCvOoOutGuaPFXd4HBUnftjrfh8R3TtuKwZdWrkaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;21&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;21&quot; data-ratio=&quot;1.2425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXXc5KIQIDfgMiaiaic9qKMicyACWq0kH1b52QzXNaYXHaQib1icIbV0SOicadJJiaXMmZoibsSfhVQPjxDklvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;6.1 联系&amp;amp;区别&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;table align=&quot;center&quot; interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;th rowspan=&quot;1&quot; colspan=&quot;2&quot; align=&quot;center&quot; valign=&quot;top&quot;&gt;进程和线程的联系&amp;amp;区别&lt;br/&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;类别&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;3&quot;&gt;&lt;span&gt;&lt;strong&gt;联系&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;1.两者都是多任务编程，都能使用计算机多核资源&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;2.一个进程可以有多个分支线程，两者有包含关系&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;3.多个线程共享进程资源，在共享资源操作时往往需要同步互斥处理。&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; rowspan=&quot;3&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;区别&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;1.进程的创建和删除消耗的计算机资源比线程多&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;2.进程空间独立，数据互不干扰，有专门的通信方法；线程使用全局变量通信&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;3.python线程存在GIL问题，但进程没有&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;mysql也是一个由多进程构成的例子，mysql的InnoDB引擎是单进程里包含多线程的例子。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4594222833562586&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXViac1Ea0ACh8RIbGb12PuzXBUn036n6oa7vlicg1Gaw9ia6yaE9FAGficg3ZFOzI2oNsM28jeibIhOiaqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;727&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▍下期预告：网络并发模型&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>035170dd3d61c9099d7f5a615a485d48</guid>
<title>月薪2千KTV服务员到月薪2万Java工程师真的很励志啊！</title>
<link>https://toutiao.io/k/ef8oh4r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU5NTg1ODg2MQ==&amp;amp;action=getalbum&amp;amp;album_id=2276333101176012807#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2276333101176012807&quot; data-tag_source=&quot;1&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#还有什么理由不努力&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;1个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;这是来自公众号粉丝小志的分享，高中肄业，2015年从月薪2千多KTV服务员，转行到Java工程师亲身经历，我看了后感触很深，真的很励志，分享给大家。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;原文如下:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3644736842105263&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67W96DsMaU7Mragzc1QiaWdOdAMk1kibAgA20qRJNwAO3fZrQChSzPgRic5niagMcTmJLCXwvgPKkuV1CHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;760&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.4304291287386215&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67W96DsMaU7Mragzc1QiaWdOdACT7yPDcaQj6A5OJhic25rMib9VydxgRocyPPIttAKCjX9ogOBPUjUEhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;769&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;以下是我和他的部分对话:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6694444444444444&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kulR6Bq67W96DsMaU7Mragzc1QiaWdOdAUT3erJL1fH5TPXtxBYXLG1Hx9YoJFaMicePAnuTW5VfSpJlAhSmHDeg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7359375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kulR6Bq67W96DsMaU7Mragzc1QiaWdOdAXoHnk9sE5ghulf5cYXn1BOburm0oCNqQgppq00jf1QC4Rn7kkdVTng/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;说实话，看完这篇分享我沉思了很久，还有什么理由不好好努力，对，努力可能没有结果，但是不努力，一定没有结果。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;路是人走出来的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里我也对一些小白说明一下，小志是在2015年开始转行Java的，&lt;/p&gt;&lt;p&gt;现在编程行业相对来说很卷了，不太建议大专以下学历入行。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;也欢迎有故事的朋友和我分享经历。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;欢迎关注 ”浅谈架构“ 公众号，有需要入行，转行，编程进阶同学欢迎后台私信我交流，公众号也会不定期分享正能量。&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>