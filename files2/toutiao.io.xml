<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>cb0a51d8ebddc6b71980236f4745b12e</guid>
<title>「码农周刊 VIP 会员专属邮件周报」每周五发送，赶紧上车吧！</title>
<link>https://toutiao.io/k/vlohxda</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;明天周五啦！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第 082 期「码农周刊 VIP 会员专属邮件周报」，将于本周五晚发送。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;数位上市公司 CTO 都在订阅，你还等什么？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;img class=&quot;rich_pages js_insertlocalimg wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;255&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;255&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/t8lpVibticjQ4LlicrXjOxMtaQDWoib2X24FnCibVaaZDqGa6VhDuw5a6cJtG8eg35xVuS75hozib0Z3Kib07lhzJsTSA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;274&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;码农周刊是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;码农周刊是一份专为广大程序员、编程爱好者们打造的 IT 技术周刊。每周发送。&lt;br/&gt;2013 年 9 月 12 日创刊至今，已发送 300 多期，订阅用户超 20 万。&lt;br/&gt;&lt;span&gt;专业、简单、有用&lt;/span&gt;，是我们一直坚持的办刊宗旨。一路走来，我们见证了不少订阅用户从编程新手进阶成了高级程序员、架构师、CTO……&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2020 年 4 月，为了给用户提供更优质的服务，我们推出了「&lt;span&gt;码农周刊VIP会员&lt;/span&gt;」服务。&lt;br/&gt;&lt;strong&gt;你与 BAT 技术大牛，只差一份「码农周刊VIP会员」的距离！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;VIP会员特权&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 52 期码农周刊VIP会员&lt;span&gt;专属邮件周报&lt;/span&gt;，让你及时掌握技术动向；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 只限VIP会员加入的&lt;span&gt;交流圈子&lt;/span&gt;，让你与技术大牛切磋学习；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. VIP会员独享的&lt;span&gt;工作机会&lt;/span&gt;，为你介绍好公司的好机会；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. 更多会员特权，持续更新……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;如何加入「码农周刊VIP会员」？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 微信扫描下方二维码，加入码农周刊VIP会员知识星球。&lt;strong&gt;&lt;span&gt;促销期间，一年仅需 108 元！平均一天花费不到 3 毛！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;391&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;425&quot; data-ratio=&quot;1.3478260869565217&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/t8lpVibticjQ6elqZKJKdKVMrGKUKjLwPpIFaDmrXyf1iaRtelGc6Fm6W4vp1uEAbb7Nz7QuBzxXNW96CiauDAL3Aw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 加入码农周刊VIP会员知识星球后，客服会联系您，请留意知识星球内的私信。&lt;br/&gt;3. 客服向您发送码农周刊VIP会员欢迎邮件，开启您的码农周刊VIP会员之旅。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;心动不如心动，赶快订阅吧！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b9d8a0b134d8dfb909f44cc16d23a201</guid>
<title>云上共享文件系统的兼容性大比拼</title>
<link>https://toutiao.io/k/cjuez0d</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post_content markdown&quot;&gt;&lt;p&gt;「一切皆文件」是 UNIX 的基本设计哲学。文件按照层级关系组织为树形目录，构成了&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F&quot;&gt;文件系统&lt;/a&gt; 的基本形态。用户使用文件系统来保存数据时，不必关心数据底层的存储方式，便可以按照约定的接口规范进行访问。&lt;/p&gt;&lt;h1 id=&quot;概念篇&quot;&gt;概念篇&lt;/h1&gt;&lt;p&gt;关于文件系统的接口规范，应用最为广泛的莫过于 &lt;a href=&quot;https://zh.wikipedia.org/wiki/POSIX&quot;&gt;POSIX&lt;/a&gt;，源于 IEEE 委员会编写的相关标准，其中有些章节是关于文件及目录操作的。标准本身比较冗长晦涩，在此不作深入探讨。我们可以参考 Quora 上的一个问答 &lt;a href=&quot;https://www.quora.com/What-does-POSIX-conformance-compliance-mean-in-the-distributed-systems-world&quot;&gt;“What does POSIX conformance/compliance mean in the distributed systems world?”&lt;/a&gt; ，对此概括的比较全面。&lt;/p&gt;&lt;p&gt;POSIX 兼容要求文件系统具备以下几项特征：&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;层级化的目录结构，支持任意深度&lt;/li&gt;&lt;li&gt;文件通过 &lt;code&gt;open(O_CREAT)&lt;/code&gt;，目录通过 &lt;code&gt;mkdir&lt;/code&gt; 创建等等&lt;/li&gt;&lt;li&gt;目录可以通过 &lt;code&gt;opendir/readdir&lt;/code&gt; 遍历&lt;/li&gt;&lt;li&gt;路径/命名空间可以通过 &lt;code&gt;rename&lt;/code&gt; 、 &lt;code&gt;link&lt;/code&gt; / &lt;code&gt;unlink&lt;/code&gt;、 &lt;code&gt;symlink&lt;/code&gt; / &lt;code&gt;readlink&lt;/code&gt; 等修改&lt;/li&gt;&lt;li&gt;数据通过 &lt;code&gt;write&lt;/code&gt; 或 &lt;code&gt;writev&lt;/code&gt; 写入， &lt;code&gt;fsync&lt;/code&gt; 时要求持久化，通过 &lt;code&gt;read&lt;/code&gt; 或 &lt;code&gt;readv&lt;/code&gt; 读取&lt;/li&gt;&lt;li&gt;其他一些接口如 &lt;code&gt;stat&lt;/code&gt;, &lt;code&gt;chmod&lt;/code&gt; / &lt;code&gt;chown&lt;/code&gt; 等&lt;/li&gt;&lt;li&gt;与某些流行的说法相悖，扩展属性看起来并不是 POSIX 的一部分，参见&lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/&quot;&gt;The Open Group Base Specifications Issue 7, 2018 edition&lt;/a&gt; 里的函数列表&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;测试篇&quot;&gt;测试篇&lt;/h1&gt;&lt;p&gt;一个文件系统是否真正满足 POSIX 兼容性，我们可以通过测试工具来检验。比较流行的一个测试用例集是 &lt;a href=&quot;https://github.com/pjd/pjdfstest&quot;&gt;pjdfstest&lt;/a&gt;，来源于 FreeBSD，也适用于 Linux 等系统。pjdfstest 的测试用例需要以 root 身份来运行，并且要求系统里安装了 Perl 和 TAP::Harness（Perl 软件包），测试过程如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /path/to/filesystem/under/test
sudo prove --recurse --verbose /path/to/pjdfstest/tests
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们选取了几种云环境中的共享文件系统进行测试，统计测试结果中的失败用例如下：&lt;/p&gt;&lt;p&gt;因为 Amazon EFS 失败的测试用例相比其他产品大了几个数量级，为了方便比较，上图的横坐标使用了对数坐标。&lt;/p&gt;&lt;p&gt;我们还同时测试了 &lt;a href=&quot;https://github.com/s3fs-fuse/s3fs-fuse&quot;&gt;S3FS&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/kahing/goofys&quot;&gt;Goofys&lt;/a&gt;，失败的用例数均为数百项乃至上千项，其根本原因是这两个项目并不是严格按照文件系统来设计的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Goofys&lt;/strong&gt; 可以将 S3 挂载为文件系统，但仅仅是 “POSIX-ish” 接口的 “Filey” 系统（这两个描述来自于官方项目介绍，翻译成中文即“似是而非”或“貌合神离”）。Goofys 在设计理念上为了性能而牺牲了 POSIX 兼容性，所支持的文件操作极大地受限于 S3 等对象存储本身。测试结果也验证了这一点。建议在生产使用之前全面评审应用的数据访问方式，以免落入陷阱。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;S3FS&lt;/strong&gt; 尽管名为文件系统，但实际上更接近于用&lt;strong&gt;文件系统视图&lt;/strong&gt;管理 S3 bucket 中对象的一种方法。尽管 S3FS 支持了 POSIX 的一个较大子集，但只是将系统调用一一映射为对象存储请求，并不支持常规文件系统的语义及一致性（例如目录的原子重命名，独占模式打开时的互斥，附加文件内容会导致重写整个文件以及不支持硬连接等等）。这些缺陷导致 S3FS 并不能用于替代常规文件系统（即便不考虑性能问题），因为当应用访问文件系统时，预期的行为应该是符合 POSIX 规范的，而 S3FS 远远不能满足这一点。&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;分析篇&quot;&gt;分析篇&lt;/h1&gt;&lt;p&gt;下面我们将测试的失败用例进行分类统计，挑选几类比较有代表性的来分析下会对应用造成何种限制。&lt;/p&gt;&lt;p&gt;总的来说，无论从数量还是类别来看，JuiceFS 的失败用例都更少，有更好的兼容性。Amazon EFS 的失败用例无论从总数及类别均大大超出其它几种文件系统，无法放入同一图表对比，后面将单独分析。&lt;/p&gt;&lt;h2 id=&quot;juicefs&quot;&gt;JuiceFS&lt;/h2&gt;&lt;p&gt;JuiceFS 在本次测试中通过了8811项用例中的绝大多数，仅在 utimensat 测试集上失败了 3 项。对应日志如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;…
/root/pjdfstest/tests/utimensat/08.t ........
not ok 5 - tried &#x27;lstat pjdfstest_bfaee1fc7f2c1f80768e30f203f41627 atime_ns&#x27;, expected 100000000, got 0
not ok 6 - tried &#x27;lstat pjdfstest_bfaee1fc7f2c1f80768e30f203f41627 mtime_ns&#x27;, expected 200000000, got 0
Failed 2/9 subtests
/root/pjdfstest/tests/utimensat/09.t ........
not ok 5 - tried &#x27;lstat pjdfstest_7911595d91adcf915009f551ac48e1f2 mtime&#x27;, expected 4294967296, got 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这几个测试用例出自&lt;a href=&quot;https://github.com/pjd/pjdfstest/blob/master/tests/utimensat/08.t&quot;&gt;utimensat/08.t&lt;/a&gt;和&lt;a href=&quot;https://github.com/pjd/pjdfstest/blob/master/tests/utimensat/09.t&quot;&gt;utimensat/09.t&lt;/a&gt;。其中 08.t 是测试亚秒级的文件访问时间和修改时间精度，09.t 则是要求支持64位时间戳。&lt;/p&gt;&lt;p&gt;JuiceFS 目前只支持秒，时间戳保存为32位整数，故无法通过这三个测试（实际上本次测试涉及的所有文件系统都无法100%通过这个测试集）。如果您的应用场景要求秒以下的时间精度或者更大范围，欢迎联系我们商讨解决方案。&lt;/p&gt;&lt;h2 id=&quot;gcp-filestore&quot;&gt;GCP Filestore&lt;/h2&gt;&lt;p&gt;除了和 JuiceFS 一样在 utimesat 测试集上存在若干失败结果之外，GCP Filestore 还在 unlink 测试集中失败了 1 项。这一项在其他所有文件系统中也都是失败的。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/root/pjdfstest/tests/unlink/14.t ...........
not ok 4 - tried &#x27;open pjdfstest_b03f52249a0c653a3f382dfe1237caa1 O_RDONLY : unlink pjdfstest_b03f52249a0c653a3f382dfe1237caa1 : fstat 0 nlink&#x27;, expected 0, got 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该测试集（&lt;a href=&quot;https://github.com/pjd/pjdfstest/blob/master/tests/unlink/14.t&quot;&gt;unlink/14.t&lt;/a&gt;）用于验证一个文件在打开状态下被删除时的行为：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;desc=&quot;An open file will not be immediately freed by unlink&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除文件的操作在系统层面实际对应于 unlink，即移除该文件名到对应 inode 的链接，对应 nlink 的值减 1，这个测试用例就是要验证这一点。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# A deleted file&#x27;s link count should be 0
expect 0 open ${n0} O_RDONLY : unlink ${n0} : fstat 0 nlink
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;文件内容只有在链接数（nlink）减少至 0 并且没有打开的文件描述符（fd）指向该文件时才会被真正删除。如果 nlink 没有被正确更新，可能会导致本该删除的文件仍然残留在系统里。&lt;/p&gt;&lt;h2 id=&quot;腾讯云-cfs&quot;&gt;腾讯云 CFS&lt;/h2&gt;&lt;p&gt;腾讯云 CFS 相比 Google Filestore，还未能通过 open 和 symlink 的几项测试。&lt;/p&gt;&lt;h3 id=&quot;open-失败用例&quot;&gt;open 失败用例&lt;/h3&gt;&lt;p&gt;选取其中一部分失败日志如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/root/pjdfstest/tests/open/07.t .............
not ok 5 - tried &#x27;-u 65534 -g 65534 open pjdfstest_f24a42815d59c16a4bde54e6559d0390 O_RDONLY,O_TRUNC&#x27;, expected EACCES, got 0
not ok 7 - tried &#x27;-u 65533 -g 65534 open pjdfstest_f24a42815d59c16a4bde54e6559d0390 O_RDONLY,O_TRUNC&#x27;, expected EACCES, got 0
not ok 9 - tried &#x27;-u 65533 -g 65533 open pjdfstest_f24a42815d59c16a4bde54e6559d0390 O_RDONLY,O_TRUNC&#x27;, expected EACCES, got 0
Failed 3/23 subtests
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此测试集 &lt;a href=&quot;https://github.com/pjd/pjdfstest/blob/master/tests/open/07.t&quot;&gt;open/07.t&lt;/a&gt; 用于验证不具备写权限时，应该对 O_TRUNC 模式返回 EACCES 错误这一行为。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;desc=&quot;open returns EACCES when O_TRUNC is specified and write permission is denied&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面这三个失败日志需要结合测试代码来分析，分别对应 owner，group 和 other 三种情况。不失一般性，我们仅就 owner 情况进行分析 ：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;expect 0 -u 65534 -g 65534 chmod ${n1} 0477
expect EACCES -u 65534 -g 65534 open ${n1} O_RDONLY,O_TRUNC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先设置文件 owner 权限为 4，即 &lt;code&gt;r--&lt;/code&gt; 只读，然后尝试以 O_RDONLY,O_TRUNC 模式打开文件，预期应该返回 EACCES，实际返回了 0。&lt;/p&gt;&lt;p&gt;根据 &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/007908799/xsh/open.html&quot;&gt;The Single UNIX ® Specification, Version 2&lt;/a&gt; 中对 O_TRUNC 的说明&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;O_TRUNC
If the file exists and is a regular file, and the file is successfully opened O_RDWR or O_WRONLY, its length is truncated to 0 and the mode and owner are unchanged. It will have no effect on FIFO special files or terminal device files. Its effect on other file types is implementation-dependent. The result of using O_TRUNC with O_RDONLY is undefined.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;O_TRUNC 与 O_RDONLY 组合使用的结果是未知的，而且此用例的被测文件本身就是空文件，O_TRUNC 不会产生任何效果。&lt;/p&gt;&lt;h3 id=&quot;symlink-失败用例&quot;&gt;symlink 失败用例&lt;/h3&gt;&lt;p&gt;对应测试日志如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/root/pjdfstest/tests/symlink/03.t ..........
not ok 1 - tried &#x27;symlink 7ea12171c487d234bef89d9d77ac8dc2929ea8ce264150140f02a77fc6dcad7c3b2b36b5ed19666f8b57ad861861c69cb63a7b23bcc58ad68e132a94c0939d5/.../... pjdfstest_57517a47d0388e0c84fa1915bf11fe4a&#x27;, expected 0, got EINVAL
not ok 2 - tried &#x27;unlink pjdfstest_57517a47d0388e0c84fa1915bf11fe4a&#x27;, expected 0, got ENOENT
Failed 2/6 subtests
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该测试集（&lt;a href=&quot;https://github.com/pjd/pjdfstest/blob/master/tests/symlink/03.t&quot;&gt;symlink/03.t&lt;/a&gt;）用于测试路径超出 PATH_MAX 长度时 symblink 的行为&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;desc=&quot;symlink returns ENAMETOOLONG if an entire length of either path name exceeded {PATH_MAX} characters&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;失败的用例对应代码如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;n0=`namegen`
nx=`dirgen_max`
nxx=&quot;${nx}x&quot;

mkdir -p &quot;${nx%/*}&quot;
expect 0 symlink ${nx} ${n0}
expect 0 unlink ${n0}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该测试用例是要创建长度为 PATH_MAX (包括结尾的0在内）的符号链接，通不过表明无法在 腾讯云 NAS 上创建长度为 PATH_MAX 的符号链接。&lt;/p&gt;&lt;h2 id=&quot;阿里云-nas&quot;&gt;阿里云 NAS&lt;/h2&gt;&lt;p&gt;相比腾讯云 NAS，阿里云 NAS 在 symlink 上表现正常，但未能通过 chmod 和 rename 上的几项测试用例。&lt;/p&gt;&lt;h3 id=&quot;chmod-失败用例&quot;&gt;chmod 失败用例&lt;/h3&gt;&lt;p&gt;在这个测试集中，阿里云 NAS 失败了以下几个项目&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/root/pjdfstest/tests/chmod/12.t ............
not ok 3 - tried &#x27;-u 65534 -g 65534 open pjdfstest_db85e6a66130518db172a8b6ce6d53da O_WRONLY : write 0 x : fstat 0 mode&#x27;, expected 0777, got 04777
not ok 4 - tried &#x27;stat pjdfstest_db85e6a66130518db172a8b6ce6d53da mode&#x27;, expected 0777, got 04777
not ok 7 - tried &#x27;-u 65534 -g 65534 open pjdfstest_db85e6a66130518db172a8b6ce6d53da O_RDWR : write 0 x : fstat 0 mode&#x27;, expected 0777, got 02777
not ok 8 - tried &#x27;stat pjdfstest_db85e6a66130518db172a8b6ce6d53da mode&#x27;, expected 0777, got 02777
not ok 11 - tried &#x27;-u 65534 -g 65534 open pjdfstest_db85e6a66130518db172a8b6ce6d53da O_RDWR : write 0 x : fstat 0 mode&#x27;, expected 0777, got 06777
not ok 12 - tried &#x27;stat pjdfstest_db85e6a66130518db172a8b6ce6d53da mode&#x27;, expected 0777, got 06777
Failed 6/14 subtests
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该测试集（&lt;a href=&quot;https://github.com/pjd/pjdfstest/blob/master/tests/chmod/12.t&quot;&gt;chmod/12.t&lt;/a&gt;）用于测试 SUID/SGID 位的行为&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;desc=&quot;verify SUID/SGID bit behaviour&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们选取其中的第11和12个测试用例来详细解释一下，同时覆盖了这两个权限位&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Check whether writing to the file by non-owner clears the SUID+SGID.
expect 0 create ${n0} 06777
expect 0777 -u 65534 -g 65534 open ${n0} O_RDWR : write 0 x : fstat 0 mode
expect 0777 stat ${n0} mode
expect 0 unlink ${n0}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此处，我们先以 06777 的权限创建目标文件，然后修改文件内容，检查 SUID 和 SGID 是否被正确清除。文件权限里的 777 大家会比较熟悉，分别对应 owner，group和 other 的 rwx，即可读、可写、可执行。最前面的 0 表示八进制数。&lt;/p&gt;&lt;p&gt;第二位 6 需要着重解释下，这个八位元组（octet）代表特殊权限位，其中前两位分别对应 setuid/setgid（或称 SUID/SGID），可以应用于可执行文件及公共目录。该权限位被设置时，任何用户都会以 owner （或 group）身份来运行该文件。这个特殊的属性允许用户获取通常只对 owner 开放的文件和目录访问权限。例如 passwd 命令就设置了 setuid 权限，这允许普通用户修改密码，因为保存密码的文件是只允许 root 访问的，用户不可直接修改。&lt;/p&gt;&lt;p&gt;setuid/setgid 设计的出发点是提供一种方法，让用户以限定的方式（指定可执行文件）访问受限文件（非当前用户所有）。因此，当文件被非 owner 修改时应自动清除此权限位，以避免用户通过这个途径获取其他权限。&lt;/p&gt;&lt;p&gt;从测试结果中我们可以看到在阿里云 NAS 中，&lt;strong&gt;文件被非 owner 修改时，setuid/setgid 均未被清除，这样实际上用户可以通过修改文件内容以该 owner 身份进行任意操作，这将会是个安全隐患。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;参考阅读： &lt;a href=&quot;https://docs.oracle.com/cd/E19683-01/816-4883/secfile-69/index.html&quot;&gt;Special File Permissions (setuid, setgid and Sticky Bit) (System Administration Guide: Security Services)&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;rename-失败用例&quot;&gt;rename 失败用例&lt;/h3&gt;&lt;p&gt;阿里云 NAS 在这个测试集上失败数量较多，达到了 24 项，全部出现在 &lt;a href=&quot;https://github.com/pjd/pjdfstest/blob/master/tests/rename/09.t&quot;&gt;rename/09.t&lt;/a&gt; 中：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;desc=&quot;rename returns EACCES or EPERM if the directory containing &#x27;from&#x27; is marked sticky, and neither the containing directory nor &#x27;from&#x27; are owned by the effective user ID&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个测试集用于检验 sticky 位被设置时 rename 的行为：当包含源对象的目录设置了 sticky 权限位的时候，并且源对象和包含目录的 owner 都与有效用户ID（effective user ID）不同时，rename 应该返回 EACCES 或 EPERM。（这样的复杂逻辑令人联想到三国杀的武将技能设定……）。&lt;/p&gt;&lt;p&gt;sticky 位的典型应用是 /tmp 目录，允许所有人创建内容，但是只有 owner 才能删除文件。FTP 里面的公共上传目录通常也是这种设置。&lt;/p&gt;&lt;p&gt;几个失败的测试用例表明阿里云 NAS 对 sticky 位的支持还不够完善，非 owner 的 rename 操作没有被拒绝，并且产生了实际的效果——源文件被重命名。这种行为越过了文件系统的访问控制，对用户文件的安全性造成了威胁。&lt;/p&gt;&lt;h2 id=&quot;amazon-efs-中的失败用例&quot;&gt;Amazon EFS 中的失败用例&lt;/h2&gt;&lt;p&gt;Amazon Elastic File System (EFS) 在 pjdfstest 测试中的不仅失败比例极高（8811个测试用例失败了1533个），而且几乎覆盖了所有类别，这比较令人意外。&lt;/p&gt;&lt;p&gt;EFS 支持以 NFS 方式挂载，但对 NFS 特性的支持并不完整。比如EFS 不支持块设备和字符设备，这直接导致了 pjdfstest 中大量测试用例的失败。排除这两类文件之后，仍然有上百项不同类别的失败，所以在复杂场景中应用 EFS 必须慎之又慎。&lt;/p&gt;&lt;h1 id=&quot;总结篇&quot;&gt;总结篇&lt;/h1&gt;&lt;p&gt;通过上面的对比分析，JuiceFS 在兼容性方面表现最好，像大多数网络文件系统一样，为了性能牺牲了秒以下的时间精度和范围（1970 - 2106 年）。Google Filestore 和腾讯云 CFS 次之，有几类未能通过。而阿里云 NAS 和 Amazon EFS 的兼容性最差，有大量的兼容性测试通不过，其中包括有严重安全隐患的若干个测试用例，使用前建议做安全性评估。&lt;/p&gt;&lt;p&gt;JuiceFS 一直非常重视对 POSIX 标准的高度兼容，我们把 pjdfstest 等兼容性测试工具同其他随机和并发测试工具（比如 &lt;a href=&quot;https://github.com/billziss-gh/secfs.test/tree/master/fsracer&quot;&gt;fsracer&lt;/a&gt;、&lt;a href=&quot;https://github.com/billziss-gh/secfs.test/tree/master/fstools&quot;&gt;fstool&lt;/a&gt; 等）一起作为集成测试工具，在持续完善功能、提高性能的同时，尽力保持最大程度的 POSIX 兼容性，避免用户在使用过程中落入各种陷阱，从而更加专注于自身业务的发展。人生苦短，我用 JuiceFS！&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9372c50c10782b107c1fb72364698da1</guid>
<title>一文掌握go语言的泛型</title>
<link>https://toutiao.io/k/3fdrlea</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article&gt;
&lt;header&gt;
&lt;p&gt;&lt;i class=&quot;fa-regular fa-calendar&quot;/&gt; &lt;span class=&quot;app-item-time&quot;&gt;2022年2月12日&lt;/span&gt;
&lt;/p&gt;&lt;h1 class=&quot;center-text article-title&quot;&gt;Go 泛型初步&lt;/h1&gt;&lt;/header&gt;&lt;p&gt;
&lt;h4 class=&quot;text-center&quot;&gt;&lt;strong&gt;摘  要&lt;/strong&gt;&lt;/h4&gt;&lt;span&gt;Go 1.18 版本之后正式引入泛型，它被称作类型参数（type parameters），本文初步介绍 Go 中泛型的使用。&lt;/span&gt;
&lt;/p&gt;&lt;p&gt;
&lt;strong&gt;关键词: &lt;/strong&gt;
&lt;code class=&quot;keyword&quot;&gt;go&lt;/code&gt;
&lt;code class=&quot;keyword&quot;&gt;泛型&lt;/code&gt;
&lt;code class=&quot;keyword&quot;&gt;类型参数&lt;/code&gt;
&lt;/p&gt;&lt;aside data-toc-type=&quot;float-right&quot;&gt;
&lt;span&gt;目录&lt;/span&gt;
&lt;nav id=&quot;TableOfContents&quot;&gt;
&lt;/nav&gt;&lt;/aside&gt;&lt;h2 id=&quot;1-go-的泛型&quot;&gt;1. Go 的泛型&lt;/h2&gt;&lt;p&gt;长期以来 go 都没有泛型的概念，只有接口 &lt;code&gt;interface&lt;/code&gt; 偶尔类似的充当泛型的作用，然而接口终究无法满足一些基本的泛型需求，比如&lt;/p&gt;&lt;p&gt;(1). 函数体内需要对参数做运算而不是使用接口方法，如下的写法连编译都不可行。&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;+b&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Sum 函数尝试对输入的任意多个参数求和。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 然而 interface{} 不可以做加法，这段代码是不能编译的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Sum&lt;/span&gt;(&lt;span&gt;values&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;{}) &lt;span&gt;interface&lt;/span&gt;{} {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;_&lt;/span&gt;, &lt;span&gt;v&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; &lt;span&gt;values&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;sum&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(2). 使用接口常常存在极其令人厌恶的接口转换，一个例子是标准库 &lt;code&gt;container/heap&lt;/code&gt;。&lt;code&gt;Pop&lt;/code&gt; 方法返回值几乎总是需要在逻辑上再转换为 &lt;code&gt;Push&lt;/code&gt; 时传入的类型，这使得代码不仅丑陋而且低效（曾经因为 interface{} 实际是 int 类型，但是因为类型转换导致大量的内存分配次数）&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;-&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Push pushes the element x onto the heap.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// The complexity is O(log n) where n = h.Len().
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Push&lt;/span&gt;(&lt;span&gt;h&lt;/span&gt; &lt;span&gt;Interface&lt;/span&gt;, &lt;span&gt;x&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;{}) {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Pop removes and returns the minimum element (according to Less) from the heap.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// The complexity is O(log n) where n = h.Len().
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Pop is equivalent to Remove(h, 0).
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Pop&lt;/span&gt;(&lt;span&gt;h&lt;/span&gt; &lt;span&gt;Interface&lt;/span&gt;) &lt;span&gt;interface&lt;/span&gt;{} {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为没有泛型而带来的其他问题就不一一列举，相信许多开发者都有遇到需要泛型的场景。从 go 1.18 版本开始，将正式引入泛型，官方称谓叫做类型参数 &lt;code&gt;type parameter&lt;/code&gt;，由于各种原因，现阶段的泛型比起一些流行语言中的泛型功能上还是差很多，不过总比没有好了。目前泛型主要使用的方式有两类：&lt;code&gt;函数&lt;/code&gt;的类型参数，&lt;code&gt;类型&lt;/code&gt;的类型参数。&lt;/p&gt;&lt;h2 id=&quot;2-安装-go-118-以上的版本&quot;&gt;2. 安装 go 1.18 以上的版本&lt;/h2&gt;&lt;p&gt;在 go1.18 尚未正式发布时可以通过如下命令安装 beta 版本体验&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;span&gt;go install golang.org/dl/go1.18beta2@latest
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;go1.18beta2 download
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此后可以使用 &lt;code&gt;go1.18beta2&lt;/code&gt; 命令取代原来的 go 命令编译支持泛型的代码。&lt;/p&gt;&lt;h2 id=&quot;3-函数类型参数&quot;&gt;3. 函数类型参数&lt;/h2&gt;&lt;h3 id=&quot;31-泛型版本的求和函数&quot;&gt;3.1. 泛型版本的求和函数&lt;/h3&gt;&lt;p&gt;仍以求和函数为例，泛型版本的写法如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;sum&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&quot;golang.org/x/exp/constraints&quot;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Sum&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Integer&lt;/span&gt;](&lt;span&gt;values&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;_&lt;/span&gt;, &lt;span&gt;v&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; &lt;span&gt;values&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;sum&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;constraints 原本是放在标准库的包，但是近期被移除了，改到了 x/exp 中，参见 &lt;a href=&quot;https://github.com/golang/go/issues/50792&quot; target=&quot;_blank&quot;&gt;#50792&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这个版本实现了对任意多个同类型的整数求和。&lt;code&gt;Sum&lt;/code&gt; 后面的中括号 &lt;code&gt;[]&lt;/code&gt; 内就是定义类型参数的地方，其中 &lt;code&gt;T&lt;/code&gt; 为类型参数名，&lt;code&gt;constraints.Integer&lt;/code&gt; 是对该类型参数的约束，即 T 应该满足的条件，在这里我们要求 &lt;code&gt;T&lt;/code&gt; 是一个整数。剩下的代码就和普通没有泛型的代码一致了，只不过后面 T 可以当作一个类型来使用。标准库 &lt;code&gt;constraints&lt;/code&gt; 中预定义了一些基本的约束，另外还有两个特殊的内置类型可用作约束：&lt;code&gt;any&lt;/code&gt; 和 &lt;code&gt;comparable&lt;/code&gt;，其中 &lt;code&gt;any&lt;/code&gt; 就是原来的 &lt;code&gt;interface{}&lt;/code&gt;，在 go1.18 开始所有空 interface{} 都改成 any 了，而 &lt;code&gt;comparable&lt;/code&gt; 则表示类型是可以通过 &lt;code&gt;==&lt;/code&gt; 运算符进行比较的。&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;go 的泛型参数为什么不使用其他流行语言的 &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; 定义泛型？这个主要是会引起语法上的歧义，比如下面这一段代码&lt;/p&gt;&lt;p&gt;x, y := a &amp;lt; b, c &amp;gt; d&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在可以来使用一下刚才定义的 &lt;code&gt;Sum&lt;/code&gt; 方法：&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;sum+x&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Sum&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;ints&lt;/span&gt; = []&lt;span&gt;int&lt;/span&gt;{&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Sum&lt;/span&gt;(&lt;span&gt;ints&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;int32s&lt;/span&gt; = []&lt;span&gt;int32&lt;/span&gt;{&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Sum&lt;/span&gt;(&lt;span&gt;int32s&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;uint32s&lt;/span&gt; = []&lt;span&gt;uint32&lt;/span&gt;{&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Sum&lt;/span&gt;(&lt;span&gt;uint32s&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 调用 Sum 函数时也可以将类型参数带上，只是经常都能够通过实际参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;// 类型推断类型参数，所以常常省略
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Sum&lt;/span&gt;[&lt;span&gt;uint32&lt;/span&gt;](&lt;span&gt;uint32s&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个版本仍有一些问题，比如可以做加法的不止整数啊，还有浮点数，甚至是复数。修改类型参数 &lt;code&gt;T&lt;/code&gt; 的约束来支持浮点数和复数：&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;sum2+x&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&quot;golang.org/x/exp/constraints&quot;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Sum&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Integer&lt;/span&gt; | &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Float&lt;/span&gt; | &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Complex&lt;/span&gt;](&lt;span&gt;values&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;_&lt;/span&gt;, &lt;span&gt;v&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; &lt;span&gt;values&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;sum&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Sum&lt;/span&gt;(&lt;span&gt;1.0&lt;/span&gt;, &lt;span&gt;2.0&lt;/span&gt;, &lt;span&gt;3.5&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过符号 &lt;code&gt;|&lt;/code&gt; 连接多个约束表示 &lt;code&gt;T&lt;/code&gt; 只需满足其中任意一个。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Sum&lt;/code&gt; 函数的例子只用了一个类型参数，go 的类型参数也支持多个，这个定义和函数参数的格式类似。&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;-&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;FuncA&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;U&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;]() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;FuncB&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;, &lt;span&gt;U&lt;/span&gt;, &lt;span&gt;V&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;]() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来通过几个简单的例子熟练一下泛型函数的使用。&lt;/p&gt;&lt;h3 id=&quot;32-使用泛型实现一个类似脚本语言比如-javascript的或运算&quot;&gt;3.2. 使用泛型实现一个类似脚本语言（比如 javascript）的或运算&lt;/h3&gt;&lt;p&gt;这个例子用于判定 &lt;code&gt;a&lt;/code&gt; 是否为 zero 值，如果是则返回 &lt;code&gt;b&lt;/code&gt;，反之返回 &lt;code&gt;a&lt;/code&gt;。&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;$+x&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Or&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;](&lt;span&gt;a&lt;/span&gt;, &lt;span&gt;b&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;zero&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;zero&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;doSomething&lt;/span&gt;(&lt;span&gt;x&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;, &lt;span&gt;y&lt;/span&gt;, &lt;span&gt;z&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Or&lt;/span&gt;(&lt;span&gt;x&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Or&lt;/span&gt;(&lt;span&gt;y&lt;/span&gt;, &lt;span&gt;&quot;default&quot;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Or&lt;/span&gt;(&lt;span&gt;z&lt;/span&gt;, &lt;span&gt;createString&lt;/span&gt;()))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;createString&lt;/span&gt;() &lt;span&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;hello&quot;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;doSomething&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;doSomething&lt;/span&gt;(&lt;span&gt;12&lt;/span&gt;, &lt;span&gt;&quot;y&quot;&lt;/span&gt;, &lt;span&gt;&quot;z&quot;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过不同于一般的或运算，这里 &lt;code&gt;Or(a, b)&lt;/code&gt; 时 b 的值已经确定，如果 b 是一个函数调用，那么当 a 不是 zero 值时，b 的函数调用完全浪费了。&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;javascript 中的 &lt;code&gt;a || b()&lt;/code&gt; 不同于此处的 &lt;code&gt;Or(a, b())&lt;/code&gt;，前者在 a 非空时不会调用函数 b&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;可以再实现一个延迟函数调用的版本 &lt;code&gt;OrNew&lt;/code&gt; 处理这种情况：&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;$+x&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Or&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;](&lt;span&gt;a&lt;/span&gt;, &lt;span&gt;b&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;zero&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;zero&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;OrNew&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;](&lt;span&gt;a&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;()&lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;zero&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;zero&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; new()
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;doSomething&lt;/span&gt;(&lt;span&gt;x&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;, &lt;span&gt;y&lt;/span&gt;, &lt;span&gt;z&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Or&lt;/span&gt;(&lt;span&gt;x&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Or&lt;/span&gt;(&lt;span&gt;y&lt;/span&gt;, &lt;span&gt;&quot;default&quot;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;OrNew&lt;/span&gt;(&lt;span&gt;z&lt;/span&gt;, &lt;span&gt;createString&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;createString&lt;/span&gt;() &lt;span&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;hello&quot;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;doSomething&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;doSomething&lt;/span&gt;(&lt;span&gt;12&lt;/span&gt;, &lt;span&gt;&quot;y&quot;&lt;/span&gt;, &lt;span&gt;&quot;z&quot;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;33-使用泛型实现三元条件运算&quot;&gt;3.3. 使用泛型实现三元条件运算&lt;/h3&gt;&lt;p&gt;go 语言不存在三元条件运算符 &lt;code&gt;&amp;lt;condition&amp;gt;? value1 : value2&lt;/code&gt;，导致经常存在需要这种场景时只好用 &lt;code&gt;if&lt;/code&gt; 写好几行的代码，不过现在可以通过泛型实现一个条件运算了。&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;$+x&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;If&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;](&lt;span&gt;yes&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;, &lt;span&gt;a&lt;/span&gt;, &lt;span&gt;b&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;yes&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;IfNew&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;](&lt;span&gt;yes&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;, &lt;span&gt;a&lt;/span&gt;, &lt;span&gt;b&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;() &lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;yes&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;b&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;createA&lt;/span&gt;() &lt;span&gt;string&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;a&quot;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;createB&lt;/span&gt;() &lt;span&gt;string&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;b&quot;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;b&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;If&lt;/span&gt;(&lt;span&gt;a&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;IfNew&lt;/span&gt;(&lt;span&gt;b&lt;/span&gt;, &lt;span&gt;createA&lt;/span&gt;, &lt;span&gt;createB&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;4-类型泛型&quot;&gt;4. 类型泛型&lt;/h2&gt;&lt;h3 id=&quot;41-类型泛型的基本使用方法&quot;&gt;4.1. 类型泛型的基本使用方法&lt;/h3&gt;&lt;p&gt;以一个 c++ 的 &lt;code&gt;std::pair&lt;/code&gt; 为例，来说明 go 的类型泛型的使用。&lt;code&gt;pair&lt;/code&gt; 包含 first 和 second 两个成员，并且每一个都有独立的类型，所以我们需要两个类型参数，先看代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;] &lt;span&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;First&lt;/span&gt;  &lt;span&gt;T1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Second&lt;/span&gt; &lt;span&gt;T2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;MakePair&lt;/span&gt;[&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;](&lt;span&gt;first&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;second&lt;/span&gt; &lt;span&gt;T2&lt;/span&gt;) &lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt;] {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt;]{&lt;span&gt;First&lt;/span&gt;: &lt;span&gt;first&lt;/span&gt;, &lt;span&gt;Second&lt;/span&gt;: &lt;span&gt;second&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;pair&lt;/span&gt; &lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt;]) &lt;span&gt;Elements&lt;/span&gt;() (&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;pair&lt;/span&gt;.&lt;span&gt;First&lt;/span&gt;, &lt;span&gt;pair&lt;/span&gt;.&lt;span&gt;Second&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在定义 Pair 时在类型名称之后使用 &lt;code&gt;[T1, T2 any]&lt;/code&gt; 定义了类型参数，即 T1, T2 都可以是任意类型。&lt;/p&gt;&lt;p&gt;然后定义了泛型函数 &lt;code&gt;MakePair&lt;/code&gt; 用于创建 Pair 对象，函数的返回值类型为 &lt;code&gt;Pair[T1, T2]&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;最后实现了 Pair 的成员方法 &lt;code&gt;Elements&lt;/code&gt; 返回两个成员值，这个函数看起来很无聊，似乎没什么用，就是用来展示如何定义泛型类型的成员方法。和一般的类型的成员方法的定义的区别在于类型 Pair 之后必须要使用声明 Pair 类型时定义的类型参数（就是这里的 &lt;code&gt;[T1, T2]&lt;/code&gt;）。&lt;/p&gt;&lt;p&gt;另外 go 的泛型目前不支持给成员方法声明新的类型参数，比如这种成员方法的定义就不允许：&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;+b&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Bad: 成员方法后面不能声明类型参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;pair&lt;/span&gt; &lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt;]) &lt;span&gt;Something&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;]() {}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了 &lt;code&gt;struct&lt;/code&gt; 之外，interface 的定义也支持类型参数（但是它的接口方法不支持类型参数），但是 &lt;code&gt;type alias&lt;/code&gt; 不支持类型参数&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;-&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Interface&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;] &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;User&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 自己定义的接口 User 可用作类型参数的约束
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;InterfaceTwo&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;, &lt;span&gt;U&lt;/span&gt; &lt;span&gt;User&lt;/span&gt;] &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;IntPair&lt;/span&gt; &lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Slice&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;] []&lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Bad: 这个不允许
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Vector&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;] = []&lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类型约束除了内置的 &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;comparable&lt;/code&gt; 以及 &lt;code&gt;golang.org/x/exp/constraints&lt;/code&gt; 中定义的之外，也可以使用自己定义的任意接口用作约束，就像上例中的 &lt;code&gt;User&lt;/code&gt;。另外现在除了以前概念中的 interface 定义之外，还有一种纯粹只能用于类型参数约束的 interface。像这类使用了基础类型或者 &lt;code&gt;|&lt;/code&gt; 运算的接口。&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;-&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 实数约束 Real 只能用于类型参数约束，而不能作为普通参数或变量类型。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Real&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Integer&lt;/span&gt; | &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Float&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Number 包含一个只能用于约束的接口，所以也只能用于类型参数的约束了
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Number&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Real&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Cat&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Float&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;float32&lt;/span&gt; | &lt;span&gt;~&lt;/span&gt;&lt;span&gt;float64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;PureString&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Name 满足 String 约束，但是不满足 PureString
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Name&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;go 1.18 开始引入一个新的符号 &lt;code&gt;~&lt;/code&gt; 用于约束前缀，这表示该约束包含 underlying 为该类型的参数。比如上面的 &lt;code&gt;Name&lt;/code&gt; 类型的 underlying 是 string，所以 &lt;code&gt;Name&lt;/code&gt; 也满足 &lt;code&gt;String&lt;/code&gt; 约束，但是不满足 &lt;code&gt;PureString&lt;/code&gt; 约束。&lt;/p&gt;&lt;h3 id=&quot;42-实现一个通用的事件系统&quot;&gt;4.2. 实现一个通用的事件系统&lt;/h3&gt;&lt;p&gt;有了类型泛型可以实现一个比较实用的功能：事件派发系统。&lt;/p&gt;&lt;p&gt;首先我们需要定义一个事件接口：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Event 是一个事件接口，类型参数 T 表示事件类别的数据类型，比如可以使用
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//reflect.Type
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 该接口定义 Type 方法获取事件类别
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Event&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;] &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Type&lt;/span&gt;() &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后定一个事件处理接口 &lt;code&gt;Listener&lt;/code&gt;，同时为了使用方便实现一个内置的 listener&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Listener 接口用于处理被触发的事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Listener&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;] &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;EventType&lt;/span&gt;() &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Handle&lt;/span&gt;(&lt;span&gt;Event&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Listen 创建一个 Listener 对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Listen&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;, &lt;span&gt;E&lt;/span&gt; &lt;span&gt;Event&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]](&lt;span&gt;eventType&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;, &lt;span&gt;handler&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;E&lt;/span&gt;)) &lt;span&gt;Listener&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;] {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;listenerFunc&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;E&lt;/span&gt;]{&lt;span&gt;eventType&lt;/span&gt;, &lt;span&gt;handler&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;listenerFunc&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;, &lt;span&gt;E&lt;/span&gt; &lt;span&gt;Event&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]] &lt;span&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;eventType&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;handler&lt;/span&gt;   &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;E&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;h&lt;/span&gt; &lt;span&gt;listenerFunc&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;E&lt;/span&gt;]) &lt;span&gt;EventType&lt;/span&gt;() &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;h&lt;/span&gt;.&lt;span&gt;eventType&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;h&lt;/span&gt; &lt;span&gt;listenerFunc&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;E&lt;/span&gt;]) &lt;span&gt;Handle&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt; &lt;span&gt;Event&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]) {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;e&lt;/span&gt;, &lt;span&gt;ok&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;event&lt;/span&gt;.(&lt;span&gt;E&lt;/span&gt;); &lt;span&gt;ok&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;h&lt;/span&gt;.&lt;span&gt;handler&lt;/span&gt;(&lt;span&gt;e&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;} &lt;span&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;panic(&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Sprintf&lt;/span&gt;(&lt;span&gt;&quot;unexpected event %T for type %v&quot;&lt;/span&gt;, &lt;span&gt;event&lt;/span&gt;, &lt;span&gt;event&lt;/span&gt;.&lt;span&gt;Type&lt;/span&gt;()))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面这段代码需要特别说明一下 &lt;code&gt;Listen&lt;/code&gt; 函数，该函数有 2 个类型参数 &lt;code&gt;T&lt;/code&gt; 和 &lt;code&gt;E&lt;/code&gt;，前者是事件类别的类型参数，后者是事件类型参数，而 &lt;code&gt;E&lt;/code&gt; 的约束 &lt;code&gt;Event[T]&lt;/code&gt; 中依赖了前一个泛型参数，这样一来事件处理函数 &lt;code&gt;handler&lt;/code&gt; 的参数就不再是 &lt;code&gt;Event&lt;/code&gt; 接口而是一个泛型参数了，这避免了每次在回调函数中进行一次类型转换（因为已经统一在 listenerFunc.Handle 中转换了）。比如以前经常是这样写回调函数&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;-&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;onSomething&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt; &lt;span&gt;Event&lt;/span&gt;) &lt;span&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;somethingEvent&lt;/span&gt;, &lt;span&gt;ok&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;event&lt;/span&gt;.(&lt;span&gt;*&lt;/span&gt;&lt;span&gt;SomethingEvent&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; !&lt;span&gt;ok&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;errors&lt;/span&gt;.&lt;span&gt;New&lt;/span&gt;(&lt;span&gt;&quot;unexpected event type&quot;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// doSomething with somethingEvent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而现在回调函数就可以避免每次手动转换类型了&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;-&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;onSomething&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;SomethingEvent&lt;/span&gt;) &lt;span&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// doSomething with event
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来实现事件派发管理器 &lt;code&gt;Dispatcher&lt;/code&gt;。&lt;code&gt;Dispatcher&lt;/code&gt; 需要实现事件注册(Add)，删除(Remove)，检查(Has)和派发(Dispatch) 方法。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Dispatcher 管理事件注册与派发
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Dispatcher&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;] &lt;span&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;nextid&lt;/span&gt;    &lt;span&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;listeners&lt;/span&gt; &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;][]&lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;Listener&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;mapping&lt;/span&gt;   &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;int&lt;/span&gt;]&lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// AddEventListener 注册事件回调
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;dispatcher&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;Dispatcher&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]) &lt;span&gt;AddEventListener&lt;/span&gt;(&lt;span&gt;listener&lt;/span&gt; &lt;span&gt;Listener&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]) &lt;span&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt; = make(&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;][]&lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;Listener&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;mapping&lt;/span&gt; = make(&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;int&lt;/span&gt;]&lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;nextid&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; = &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;nextid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;eventType&lt;/span&gt; = &lt;span&gt;listener&lt;/span&gt;.&lt;span&gt;EventType&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;listeners&lt;/span&gt; = &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;eventType&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;index&lt;/span&gt; = len(&lt;span&gt;listeners&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;eventType&lt;/span&gt;] = append(&lt;span&gt;listeners&lt;/span&gt;, &lt;span&gt;MakePair&lt;/span&gt;(&lt;span&gt;id&lt;/span&gt;, &lt;span&gt;listener&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;mapping&lt;/span&gt;[&lt;span&gt;id&lt;/span&gt;] = &lt;span&gt;MakePair&lt;/span&gt;(&lt;span&gt;eventType&lt;/span&gt;, &lt;span&gt;index&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// HasEventListener 判定是否存在事件回调
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;dispatcher&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;Dispatcher&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]) &lt;span&gt;HasEventListener&lt;/span&gt;(&lt;span&gt;id&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;) &lt;span&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;mapping&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;_&lt;/span&gt;, &lt;span&gt;ok&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;mapping&lt;/span&gt;[&lt;span&gt;id&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;ok&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// RemoveEventListener 删除事件回调
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;dispatcher&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;Dispatcher&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]) &lt;span&gt;RemoveEventListener&lt;/span&gt;(&lt;span&gt;id&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;) &lt;span&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;index&lt;/span&gt;, &lt;span&gt;ok&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;mapping&lt;/span&gt;[&lt;span&gt;id&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; !&lt;span&gt;ok&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;eventType&lt;/span&gt; = &lt;span&gt;index&lt;/span&gt;.&lt;span&gt;First&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;listeners&lt;/span&gt; = &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;eventType&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;last&lt;/span&gt; = len(&lt;span&gt;listeners&lt;/span&gt;) &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;index&lt;/span&gt;.&lt;span&gt;Second&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;last&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;index&lt;/span&gt;.&lt;span&gt;Second&lt;/span&gt;] = &lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;last&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;newId&lt;/span&gt; = &lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;index&lt;/span&gt;.&lt;span&gt;Second&lt;/span&gt;].&lt;span&gt;First&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;mapping&lt;/span&gt;[&lt;span&gt;newId&lt;/span&gt;] = &lt;span&gt;MakePair&lt;/span&gt;(&lt;span&gt;eventType&lt;/span&gt;, &lt;span&gt;index&lt;/span&gt;.&lt;span&gt;Second&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;last&lt;/span&gt;].&lt;span&gt;Second&lt;/span&gt; = &lt;span&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;eventType&lt;/span&gt;] = &lt;span&gt;listeners&lt;/span&gt;[:&lt;span&gt;last&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;delete(&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;mapping&lt;/span&gt;, &lt;span&gt;id&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// DispatchEvent 派发事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;dispatcher&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;Dispatcher&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]) &lt;span&gt;DispatchEvent&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt; &lt;span&gt;Event&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]) &lt;span&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;listeners&lt;/span&gt;, &lt;span&gt;ok&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;event&lt;/span&gt;.&lt;span&gt;Type&lt;/span&gt;()]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; !&lt;span&gt;ok&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; len(&lt;span&gt;listeners&lt;/span&gt;) &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; &lt;span&gt;listeners&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;i&lt;/span&gt;].&lt;span&gt;Second&lt;/span&gt;.&lt;span&gt;Handle&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此，一个基本的事件系统就完成了，接下来看看如何使用。&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;+x&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 这个例子中事件的 Type 使用 string 类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;testEventA&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;testEventB&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;testEventA&lt;/span&gt;) &lt;span&gt;Type&lt;/span&gt;() &lt;span&gt;string&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;A&quot;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;testEventB&lt;/span&gt;) &lt;span&gt;Type&lt;/span&gt;() &lt;span&gt;string&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;B&quot;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt; &lt;span&gt;Dispatcher&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 注册事件，listener 通过 Listen 方法构建
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;AddEventListener&lt;/span&gt;(&lt;span&gt;Listen&lt;/span&gt;(&lt;span&gt;&quot;A&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;e&lt;/span&gt; &lt;span&gt;testEventA&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;&quot;test event &#x27;A&#x27; fired&quot;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;AddEventListener&lt;/span&gt;(&lt;span&gt;Listen&lt;/span&gt;(&lt;span&gt;&quot;B&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;e&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;testEventB&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;&quot;test event &#x27;B&#x27; fired&quot;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 派发事件，注意由于通过 Listen 注册的时候回调函数的参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;// 没有使用指针，所以这里派发事件时也不能用 testEvent 的指针。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;// 这两者的类型必须要一致
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;DispatchEvent&lt;/span&gt;(&lt;span&gt;testEventA&lt;/span&gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 事件 B 的类型就需要指针了，因为注册时使用了指针。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;DispatchEvent&lt;/span&gt;(new(&lt;span&gt;testEventB&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了这个例子中的使用 string 作为事件类别的类型外，还可以使用整数，reflect.Type 或其他任意可比较的类型。&lt;/p&gt;&lt;p&gt;事件系统的完整代码可参见 &lt;a href=&quot;https://github.com/gopherd/doge/blob/main/event/event.go&quot; target=&quot;_blank&quot;&gt;github.com/gopherd/doge/blob/main/event/event.go&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;5-结语&quot;&gt;5. 结语&lt;/h2&gt;&lt;p&gt;总体来说，go 的泛型功能还是较少的，使用限制较多。另外 go 1.18 版本的泛型存在一个严重的性能问题：范型参数存在不必要的内存逃逸，而且执行速度低下，在 go 1.19 的 Milestone 中已经有提交来修正这个问题了（&lt;a href=&quot;https://github.com/golang/go/issues/50182&quot; target=&quot;_blank&quot;&gt;#50182&lt;/a&gt;）。然而内存逃逸的问题修复了，性能却仍然比非范型的版本差。&lt;/p&gt;&lt;p&gt;目前建议只在满足以下条件之一的时候使用范型：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;普通基础类型用作类型参数约束&lt;/li&gt;&lt;li&gt;参数类型约束没有成员方被调用&lt;/li&gt;&lt;li&gt;对性能没有极致要求&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;
&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1e9b3b05d6906c81131608099e5ffbaf</guid>
<title>微服务从代码到k8s部署应有尽有系列全集</title>
<link>https://toutiao.io/k/dcd3fuh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们用一个系列来讲解从需求到上线、从代码到k8s部署、从日志到监控等各个方面的微服务完整实践。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个项目使用了go-zero开发的微服务，基本包含了go-zero以及相关go-zero作者开发的一些中间件，所用到的技术栈基本是go-zero项目组的自研组件，基本是go-zero全家桶了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg0ZKAF1ZPmceo2iccqkuibkmN5ty7DznTjgXGYiaHDOY3baLZx5OlHkcy6KmBdXuYdf1tiafPWcJMiaeaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实战项目地址：https://github.com/Mikaelemmmm/go-zero-looklook&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;知乎文章列表：&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;系统介绍：https://zhuanlan.zhihu.com/p/464544668&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网关：https://zhuanlan.zhihu.com/p/464810481&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;鉴权：https://zhuanlan.zhihu.com/p/465690784&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户中心：https://zhuanlan.zhihu.com/p/465720564&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;民宿服务：https://zhuanlan.zhihu.com/p/466923244&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;订单服务：https://zhuanlan.zhihu.com/p/467200888&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;支付服务：https://zhuanlan.zhihu.com/p/467805751&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;各种队列：https://zhuanlan.zhihu.com/p/468061200&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事务精讲：https://zhuanlan.zhihu.com/p/468513367&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;错误处理：https://zhuanlan.zhihu.com/p/468992801&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日志收集：https://zhuanlan.zhihu.com/p/470472858&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链路追踪：https://zhuanlan.zhihu.com/p/470686081&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务监控：https://zhuanlan.zhihu.com/p/471273291&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;部署环境：https://zhuanlan.zhihu.com/p/471742493&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;k8s部署：https://zhuanlan.zhihu.com/p/472182788&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;更多实践系列&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了帮助大家更好的掌握微服务开发和 go-zero 的相关知识，我们后续会推出更多的微服务实践相关系列文章。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时也热烈欢迎广大 go-zero 用户投稿本公众号，文章的推广也会给文章作者带来人气、同时也可以帮助项目的推广，一般经过本公众号审核通过并推广的项目会有几百 stars。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;项目地址&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://github.com/zeromicro/go-zero&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎使用 &lt;code&gt;go-zero&lt;/code&gt; 并 &lt;strong&gt;star&lt;/strong&gt; 支持我们！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;我的知乎&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关注我的知乎，所有「微服务实践」公众号的文章勘误都在这里。&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dccb18b27e4bd3a92eaa93baf015ef0c</guid>
<title>程序员如何高效的分析HC岗位</title>
<link>https://toutiao.io/k/hghmrf8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0OTI0NzIzMQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwyavDTedzsA7hicJ3r55tiaOxjDhO01LRxYCmqCRowLFRFjN9ZrEiafbBSYUATl9QBlJSY1UWwB25k4w/0?wx_fmt=png&quot; data-nickname=&quot;35岁程序员那些事&quot; data-alias=&quot;&quot; data-signature=&quot;畅销书-Spring Cloud Alibaba微服务架构实战派（上下册）的作者&quot; data-from=&quot;1&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;程序员在高效的分析HC岗位之前，一定要搞清楚自己想找一份什么样的工作，只有这样才能有的放矢。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;找准定位&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;何为“找准定位”，那就是你的工作方向是什么？举一个简单的例子，你是要做业务开发还是技术开发，你是要做开发还是做管理，这个在找工作之前一定要先定下来，或者有一个优先级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你是想做技术，但是前一份工作并不是专门做技术的，只是你觉得需要有这个一个平台，去发挥你自己的兴趣爱好，那么咱们需要去招聘平台上review相关的岗位。为了增加面试成功的概率，我们需要尽量的找中小型公司的HC岗位，为什么呢？主要是你缺乏技术研发的经验，另外中小企业也会有更多的机会放手去做一些事情，如果运气好，还能见证某一个新技术，从0到1落地的过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你是想做技术，并且技术非常牛，一直都是专门做技术的，那么为了进一步的提升自己技术造诣，那么建议去一线大厂，这样可以在大的平台上，将你的价值最大化，关键是还能结识更多的技术牛人，拓广自己技术的人脉关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你是想做业务开发，但是之前的公司的业务规模偏小。比如你是一个某支付公司的业务开发（小的支付平台），但是你现在想去某某支付大厂，那么咱们就得在业务理解的基础之上，多增加一些与落地业务相关能力拓展，比如高效的代码重构、高效的业务建模、高效的业务架构以及高效的解决技术问题的能力等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你是还是想做业务开发，但是之前的公司的业务规模已经很大了，那么这个时候你是否应该考虑转做管理，为什么呢？因为大厂的业务沉淀，能够驱动自己快速的拿业务结果，那么为了提升自己这方面的优势，那在定位HC时，可以尝试转型管理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分析HC&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好吧，我这里拿某某大厂的技术线上的“高级技术专家”的岗位来举例，岗位要求如下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5283582089552239&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwzCK0yQtRyA4LTVY3OoAoR2ib8mM44QRt7iakLFvB7mgb2CsdNHxGECsbFNxSg6Pq7TqLxtvlL8DtUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;670&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先看岗位职责。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，我们看岗位职责1，“管理研发团队，制定团队目标，对团队产出负责。对研发团队进行系统性的技术指导和培训，规范研发流程，提升团队整体技术水平”：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt; 管理研发团队。肯定很多人会问，一个“高级技术专家”并不是管理岗位，为什么要管理研发团队呢？管理岗位会有虚线和实线两类，那么这个岗位大概率是虚线管理，比如通过项目管理人和事，并拿结果；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;制定团队目标。又会有人会问，不是做技术的吗？还要制定虚线成员的目标，好吧，这&lt;/span&gt;&lt;span&gt;个岗位大概&lt;/span&gt;&lt;span&gt;率是团队老大的“二把手”，就是老大是管人，你是管事和负责落地，并拿结果；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对团队产出负责。这个要求就更加明显了，不是团队的“一把手”，还要对产出负责，这个从能力矩阵的角度来看，已经越界了。但是人家既然这样要求，要么是“一把手”是一个甩手掌柜，要么是“一把手”需要培养你，自己要高升了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对研发团队进行系统性的技术指导和培训，规范研发流程，提升团队整体技术水平。这个技能点才是“高级技术专家”的看家本领，但是居然放在了最后，大家可以思考一下这个岗位的挑战性有多大。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后，我们看看岗位职责2，“对项目进行合理的架构设计、重构、优化已有系统，提高系统性能和稳定性，攻克技术实施中的难题”：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;对项目进行合理的架构设计、重构、优化已有系统。这个岗位职责其实要求非常高，无论是候选人的技术功底，还是架构和规划落地能力功底，最后就是跨部分协作，并推动项目落地的功底，都需要候选人达到一定的层次，才能胜任。为什么这样说呢？“合理的架构设计”其实要求你懂业务，并能够快速的出业务和技术解决方案；“重构”其实需要你能落地代码（不管是自己亲自写代码，还是协调一线开发）；“优化已有系统”其实要求你改造旧的系统，去做创新，那么有创新就去做跨部门沟通，协调落地。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;提高系统性能和稳定性。从技术的角度去看，这个要求是最高的。它要求候选人不仅要懂常规的性能优化的技术手段，比如代码重构、服务拆分、读写分离等，还要确保改造之后服务运行的稳定性，这个就太难了。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再看任职要求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看任职要求1，“全日制本科及以上学历，计算机相关专业“，好吧这个条件估计要筛出一部分人，如果人家有这个要求了，那么肯定会拿这个作为筛选简历的基本要求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看任职要求2，“8年以上开发工作经验，4年以上架构设计经验“，我来解读下这个要求，并不是说要求我们要有12年的工作经验，也就是说你要有8年以上的开发经验，但是其中有4年你是按照工作职责的比重，是积累了4年的架构设计经验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看任职要求3，“熟悉敏捷开发体系，管理过10人以上研发团队，并有跨团队协作经验”，这个就是和我在前面分析的不谋而合，虽然不是管理岗位，但是从职责的角度去看，他需要你具备管理的经验，好吧，大概率这个岗位就是一个“拿结果的二把手的岗位”，没有资源，还要去拿团队结果，哈哈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看任职要求4，“有丰富的高并发、高可靠性应用的研发和设计经验，有分布式业务系统的设计与开发经验，有微服务架构应用设计经验。3年以上基于Spring Cloud、Dubbo等主流框架开发经验”，这个要求就定位这个岗位的方向，它就是一个一线的高级研发而已，不仅要参与架构设计，还要参与代码编写，还要懂各种技术的细节，当然还要做虚线管理，去拿结果。哈哈，就是一个“全职打工人”的岗位，当然责任大，成长也快。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看任职要求5，“有主导过大型企业级应用架构设计的经验，有交易系统、电商等相关经验的优先”，这个要求就有点偏离岗位角色了，但是其实也不无道理，如果你前面几条都不满足，那么人家要你去面试，拿就是一个业务线上开发的备胎，所以这个时候你会发现，就算是你不是做技术的，人家也会让你去面试，但最终得到的岗位并不是和HC相匹配的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外，圈子里面一直在说“金三银四”，其实我是不太认同这个概念的，有准备的人是不太会看中这个所谓的时间节点的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后希望程序员都能够找到一份合适自己的工作，并工作开心和快乐。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;粉丝福利时间&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了回馈广大技术人和书友，本公众号和电子工业出版社合作，一起给大家赠送一些技术类书籍。&lt;/span&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;              &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibl6u6nJ01g9icia42icDbWWvO2ObicnIUHjwQKVp30YzLS8xSInYupoEXAKjYeYDibY50CgKLz6ViaDjTjuRqUqaae0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;参与方式&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K8beZoNWDcUm9I6ia4UU97K1XHrQx2PavruEm3xAL2W3Vd7JxrB8PLXtmT5JkwqpC9Dg9hEmtVZkY2hibnlkib0Qg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;关注公众号：35岁程序员那些事，后台回复关键词“参与抽奖”，获取抽奖链接，点击抽奖。 中奖之后，可以联系笔者的微信号或者公众号后台回复关键词“联系笔者”，获取联系方式。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果没有中奖的技术人，还可以参与本次文章的点赞和留言，笔者会按照留言的时间顺序和点赞的时间顺序，随机的再抽取一名技术人，再赠送一本技术书籍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;笔者会在抽奖结果出来之后，进行留言和点赞技术人的抽奖，抽奖结果会同步公布。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;部分书单列表&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一本 &lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__78&quot;&gt;《&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__79&quot;&gt;Spring Cloud Alibaba 微服务架构实战派（上下册）&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__80&quot;&gt;》&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;li&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;span&gt;技术新。采用目前的新版本（2.2. 5.RELEASE）来编写，相关技术也采用的是目前新的稳定版本；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;span&gt;精心设计的主线：零基础入门，循序渐进，直至项目实战；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;span&gt;不只介绍框架本身，而是微服务架构全栈技术（比如Seata、Skywalking、Redis、RocketMQ等），本书是“一站到底”的解决方案：读者只需从这里上车，中途无需转乘，读者需要什么，本书就提供什么，直达终点；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;span&gt;绘制了大量的图，便于理解原理、架构、流程。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;span&gt;本书的目标是：①让读者在动手中学习，而不是“看书时好像全明白了，一动手却发现什么都不会”；②读者可以掌握微服务全栈技术，而不仅仅是框架，对于相关的技术（Seata、RocketMQ），基本都是从零讲起，这样避免了读者为了学会微服务技术，得找Spring Cloud 框架的书、Seata的书、RocketMQ的书……本书是一站式解决方案。&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__78&quot;&gt;《&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__79&quot;&gt;Spring Cloud Alibaba 微服务架构实战派（上下册）&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__80&quot;&gt;》&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;是笔者自己出版的书籍，肯定是要放在第一位的，资源多多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二本 &lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__54&quot;&gt;《&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__55&quot;&gt;Spring Boot实战派》&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;span&gt;本书花费大量的力气对比讲解多种同类技术的知识、使用和区别，读者可以根据自己的喜欢进行技术选型；还讲解了时下流行的接口架构风格RESTFUL、用来实现高并发的Redis、用来实现系统间通信的中间件RabbitMQ。&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;span&gt;最后两章融合了本书所讲知识点，讲解了两个常用又实用的实战项目。本书适合所有对Spring Boot感兴趣的读者阅读。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__55&quot;&gt;第三本 &lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__148&quot;&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__147&quot;&gt;《&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__148&quot;&gt;剑指Offer（专项突破版）：数据结构与算法名企面试题精讲&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__149&quot;&gt;》&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;span&gt;本书全面、系统地总结了在准备程序员面试过程中必备的数据结构与算法。本书首先详细讨论整数、数组、链表、字符串、哈希表、栈、队列、二叉树、堆和前缀树等常用的数据结构，然后深入讨论二分查找、排序、回溯法、动态规划和图搜索等算法。除了介绍相应的基础知识，每章还通过大量的高频面试题系统地总结了各种数据结构与算法的应用场景及解题技巧。&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;span&gt;本书适合所有正在准备面试的程序员阅读。无论是计算机相关专业的应届毕业生还是初入职场的程序员，本书总结的数据结构和算法的基础知识及解题经验都不仅可以帮助他们提高准备面试的效率，还可以增加他们通过面试的成功率。&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__55&quot;&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__148&quot;&gt;第四本 《微服务项目实战派:从Spring Boot到Spring Cloud》&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书以项目实战的形式来介绍Spring Cloud微服务体系。书中所有实例都来自作者多年工作实践，内容覆盖构建Spring Cloud微服务所需的绝大部分内容——包括微服务工程搭建、微服务网关、熔断限流、分布式任务调度、自动化CI/CD构建、Kubernetes容器化部署、微服务监控系统、分布式链路追踪等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书适合希望快速提升项目经验的Java初学者、正在转型微服务架构的传统项目研发人员、希望提升Spring Cloud微服务全栈技术经验的高级开发人员、对特定系统设计感兴趣的产品经理及研发人员。无论读者是否接触过微服务开发，只要具备一定的Java开发基础，都能通过本书的学习快速掌握实际场景中的微服务开发技巧，并快速提升项目实战经验。&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__55&quot;&gt;第五本&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__55&quot;&gt; 《正本清源分布式事务之Seata》&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__55&quot;&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在微服务架构下，分布式事务一直是痛点和难点。Seata是阿里巴巴开源的分布式事务中间件，致力于以高效且对业务无侵入的方式，解决在微服务场景下面临的分布式事务问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书作者是阿里巴巴GTS创始人和Seata作者，结合其多年在分布式事务领域设计、研发和应用的经验，深入浅出地阐述了分布式事务技术基础、Seata AT模式、TCC模式、RPC设计、事务协调器技术的原理，并给出了两个开发实例（AT模式和TCC模式）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书可以为微服务系统架构师、研发人员解决核心业务实际问题提供思路，也适合分布式技术相关专业的学生阅读，帮助他们建立分布式事务的知识框架。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如上书籍只是笔者列举的一些资源，如果中奖的技术人的书架上已经入驻了上述书籍，可以通过“微信”和笔者联系。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;公众号初衷&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;知识输出是笔者的初衷，借助知识输出，能够认识更多的牛人,能够和牛人沟通，也是自己技术提升的一个机会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;                        &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;     本人微信ID，如有需要惠请联系&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2982954545454546&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Eb8TPxx4xwwHsTjeO8OsSJoG3Rg657x1BmzoeKGBExTk6yk6ibDyZwIX7zFMvX1HmDaKvaribkjWNqZPJpOeHYrw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1056&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0OTI0NzIzMQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwwRBMXF2V1EnW3pB79Rk1CZicwibngNE3omwCwhO0A41EaR8uBx7tfSh3e30IPqVmEauR1nTTzxvlAw/0?wx_fmt=png&quot; data-nickname=&quot;35岁程序员那些事&quot; data-alias=&quot;cxynxs_35&quot; data-signature=&quot;畅销书-Spring Cloud Alibaba微服务架构实战派（上下册）的作者&quot; data-from=&quot;1&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;一路向北&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9482758620689655&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/IaMeK4iaQqbia5GiaVShU9NPibJ3wwSxZ2QVukfO2r651QwQoHwcA5hiapibrrkRh9AFJpvGZVRMFiaHzhPPKLs8RmdibQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;174&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;人间灯火无不休，爱与山水与春&lt;br/&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;                                                                            ----无题&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4255555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwzofM1ESK3E9bErfo0AfKL8x9F7cremVGV5D6uAn1XoFMUVAp9tpK3QrunygNEJlSXUuFrMAqBm1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;span/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>