<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>8ee3a7802c7aef67694663a7b800112b</guid>
<title>微服务如何划分</title>
<link>https://toutiao.io/k/f4vabj7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h2&gt;摘要&lt;/h2&gt;&lt;p&gt;作为团队架构师/技术负责人你该如何进行微服务的划分呢?在以前的文章中讨论过这个话题，&lt;span&gt;可落地的DDD(4)-如何利用DDD进行微服务的划分(2)&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt;，最近结合在不同的开发团队实践，又有了新的思考，相比较之前的基于DDD会更加全面可落地，也欢迎大家留言讨论。&lt;/p&gt;&lt;h2&gt;为何要划分微服务&lt;/h2&gt;&lt;p&gt;微服务架构被广泛用于互联网公司，其优势在于每个服务足够小，相互之间具备隔离性。配合一些基础设施，能够使得需求快速迭代上线。但是每个服务的粒度应该多大呢，服务之间的关系应该是怎样的呢?&lt;/p&gt;&lt;p&gt;首先我们来探讨一下微服务划分的目标。微服务划分涉及到两个对象，一个是微服务，一个是开发人员。所以目标是&lt;strong&gt;高效有序&lt;/strong&gt;将微服务及开发人员组织起来。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;如何衡量有序呢?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.职责清晰2.相互间的依赖关系清晰 一个无序的微服务调用，会陷入混乱地狱。&lt;img data-ratio=&quot;0.8351893095768375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/to5t8icQhBHp6zHicKATj4u0mpLO5SZNGk7rEGicKpVBdaDDib0IHJN4fnJ1XJkwMhxm2FBzBDdZ5s83RibEWn4Sk8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;449&quot; title=&quot;null&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;因此制定一些&lt;strong&gt;标准&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;横向&lt;/strong&gt;：按照业务流程拆，业务流程反映的是数据流程，数据从上游流下下游。上游需要和下游解耦，上游不可通过服务间调用下游。下游可以。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;纵向&lt;/strong&gt;：按照技术拆分，由上到下分为4层，上层可以调用下层，同级可以相互调用，下层强制不能调用上层。&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;应用系统 面向各个端，比如pc端，面向用户的，面向小二的。app端。属于前端应用。&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;核心领域 整个系统的核心业务，与&lt;strong&gt;业务&lt;/strong&gt;紧密相连。支撑业务发展。&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;基础能力 从核心领域中下沉抽象出来的更通用的服务，不只是服务当前业务。也服务于公司其他业务。&lt;/p&gt;&lt;p&gt;4.&lt;/p&gt;&lt;p&gt;依赖系统 一些通用的公共模块以及与其他兄弟部门的服务依赖。&lt;/p&gt;&lt;p/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如此调用关系比较清晰了。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8625482625482626&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/to5t8icQhBHp6zHicKATj4u0mpLO5SZNGk077RAgTTA913ULRp7ZjZ8SIrFvDeVvXnTzQWtHoia78nKhgLRs3Ah9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1295&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;如何衡量高效呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于服务是性能高且稳定 对于开发人员是效率高且有技术成长空间&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业务量上来一个，后端的很多工作就是围绕着性能和稳定，微服务的划分也深深影响着。因此服务划分还会按照&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.基于迭代频次 &lt;/span&gt;&lt;span&gt;     变更是引发故障的主要原因，因此如果一个服务是稳定的，我们可以把他单独拆分为一个微服务，这样在项目快速迭代时，不会影响已有功能。不需要投入太多回归测试时间。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    2. &lt;span&gt;基于可靠性     核心服务需要重点保障，流量高的应用和流量低的应用稳定性要求也不一样。可以将核心服务，流量高的应用单独拆出来，这样使得核心服务功能逻辑简单，依赖减少，存储独立。稳定性得到极大保障。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    3.基于开发人员     架构活动不仅要关心机器，还要关心人。开发人员的工作效率极大影响了业务的交付速度和质量。一个微服务需要一个唯一owner和2-3个开发人员(owner也参与开发)。owner是第一责任人，负责整个应用的代码质量，服务稳定性。2-3个人负责开发一个系统，不会有单点，在人员流动的情况能够进行相互补位，同时相互之间可以进行技术方案深度讨论，能够应对一定级别的复杂需求。人数不宜超过4个人，人太多，在同一个应用中开发不同的需求，可能每天都要处理不同的分支之间冲突，多套环境进行测试，效率比较低。同时人数太多，讨论效率也比较低。此外需要尽量保证每个中高级别的开发者都是一个微服务的owner，有自己的一块自留地，在需求承接之外，能够在做一些技术相关的开发工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然高效和有序并不总是统一的，有时候我们需要去做架构取舍。&lt;/p&gt;&lt;h2&gt;如何划分&lt;/h2&gt;&lt;p&gt;举个例子，比如你公司是做在线教育的，你入职负责开发公司的客户管理系统(CRM,下面统一用CRM代替)业务。首先你需要从全局分析CRM这块业务。&lt;/p&gt;&lt;h3&gt;流程&lt;/h3&gt;&lt;p&gt;CRM按照流程划分主要是获客-跟进-转化-签约-服务。按照领域进行抽象，可以分为售前，售中，售后。&lt;/p&gt;&lt;h3&gt;服务&lt;/h3&gt;&lt;p&gt;按照服务来划分，主要有投放服务、营销活动服务、呼叫服务、客户管理、日程管理、消息提醒、订单、合同、工单、销售效果分析。&lt;/p&gt;&lt;h3&gt;功能&lt;/h3&gt;&lt;p&gt;每个服务有更细粒度的功能。比如 投放服务：提供多渠道投放方式，百度，头条，微信等，投放分析。营销活动服务：营销落地页，开学季优惠活动，抽奖活动，优惠券活动。客户管理服务：客户档案，销售机会，销售看板。其他不再赘述。&lt;/p&gt;&lt;h3&gt;人员&lt;/h3&gt;&lt;p&gt;目前业务还是在初级阶段，负责这块的开发总共有6人，3个后端，2个前端，一个测试。&lt;/p&gt;&lt;h3&gt;服务划分&lt;/h3&gt;&lt;p&gt;基于以上考虑，服务划分为以下6个服务。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8048595292331056&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/to5t8icQhBHp6zHicKATj4u0mpLO5SZNGkn0PYTlPzo4J0NfbpXyeeibt1jobibPAnuWaDPcjS3cWYibCHLicYgOuxVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1317&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;考虑到只需要一个pc工作台，市场人员、销售人员都用同一个工作台，应用系统这一层不需要。然后核心领域分为售前（市场人员）、售中（客服，销售）、售后（客服，财务）三个服务，每个开发负责一个服务。同时抽象出3个通用基础能力服务，每个开发负责一个。&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 公司内部的账号系统 提供统一的账号管理能力，组织架构能力，权限管理能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;     2. &lt;span&gt;服务系统        通用的一些工具能力，比如隐私号、坐席呼叫、待办、消息提醒等能力。这些并不属于同一个领域，但是考虑到当前阶段，服务不宜拆分的过细。所以都放在同一个服务中。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    3.数据分析        各个模块都需要数据分析，所以抽象出一个单独能力，统一处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;演进&lt;/h2&gt;&lt;p&gt;经过半年的发展，业务蒸蒸日上，需求越来越多。人员也在逐步扩展。后端人员扩大到了10人。原有的微服务架构逐渐不太适应。因此需要进行适当调整。经过分析，当前业务重点是&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;售前 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;两个核心指标一个是有效线索量，一个是单个线索成本&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;       2. &lt;span&gt;售中     &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;         售中决定了线索能否转化为订单。目前对应的运营人员最多，客服100人，销售300人。提高运营人员效率是重点。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      3. 售后            &lt;/span&gt;&lt;span&gt;          工单响应时长&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;售前这块基本系统功能已搭建完毕，通用的营销工具已经有了，市场人员可以进行组件组合，搭建不同营销页，然后根据投放效果进行适当调整。服务比较稳定了，所以这块有2个开发即可。主要负责营销工具开发。&lt;/p&gt;&lt;p&gt;售后相对也比较稳定了，2个开发。售中是重点，需求迭代也比较多，6个开发。之前只有一个微服务，开发效率比较低了。需要进行适当拆分。增加3个服务&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.应用系统增加一个移动工作台 因为销售人员经常在外部，所以需要移动端，而移动端通常是销售管理活动中的操作类功能。pc端则是查看分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;     2.&lt;span&gt;核心领域层增加一个售中服务域&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;售中拆成2个服务，一个是线索域，主要围绕着公海、私海，线索推荐。另外一个是服务域，是面向销售日常活动的。如活动，拜访，小记，客户标签等。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;3 .&lt;/span&gt;基础能力层增加一个流程引擎服务 各个角色人员需要经常发起审批，流程编排，所以新构建一个基础能力，流程引擎。能够服务于整个crm业务，同时如果公司其他业务需要，可以提供给其他业务使用。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8290094339622641&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/to5t8icQhBHp6zHicKATj4u0mpLO5SZNGkRbguklib1vcCH8z1oH4NPwzEnZKN0w61Oj38Iec6rXiaT5DhY3sPxHHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1696&quot; title=&quot;null&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;参考文章&lt;/h2&gt;&lt;p&gt;&lt;span&gt;    http://www.woshipm.com/pd/3983693.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; 可落地的DDD(4)-如何利用DDD进行微服务的划分(2): &lt;em&gt;https://blog.csdn.net/FS1360472174/article/details/90738148?spm=1001.2014.3001.5501&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>60781e371b0328310bce765bc34ba71c</guid>
<title>推荐 2 个 Spring Boot 的工作流项目</title>
<link>https://toutiao.io/k/nr9m1nz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>64befdd59ca87e6ccfea813106db10e8</guid>
<title>《2021年美国侵犯人权报告》终端版</title>
<link>https://toutiao.io/k/ukti0ut</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;其实写这个东西很简单，因为目标网站结构十分简单，也没有任何反爬措施，所以主要目的还是想PR一波这个报告。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;具体而言，爬虫部分的核心代码如下：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;爬虫部分&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;crawler&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, url)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    headers = {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;User-Agent&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    response = requests.get(url, headers=headers)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    response.encoding = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;utf-8&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    soup = BeautifulSoup(response.text, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;lxml&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    soup = soup.find(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;div&#x27;&lt;/span&gt;, class_=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Article&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    title = soup.find(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;div&#x27;&lt;/span&gt;, class_=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Articletitle&#x27;&lt;/span&gt;).text.strip()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    date = soup.find(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;div&#x27;&lt;/span&gt;, class_=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;date&#x27;&lt;/span&gt;).text.strip()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    contents = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; soup.find_all(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;p&#x27;&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        content = item.text.strip()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; content == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;分享到：&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        contents.append(content)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    article_info = {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;: title,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;date&#x27;&lt;/span&gt;: date,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;contents&#x27;&lt;/span&gt;: contents,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; article_info&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;换句话说，只需要requests请求一下文件链接，然后用beautifulsoup4把文件里的主要内容提取出来就行了。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后写个简单的终端查看文本的程序即可：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;contents, cur_content = [], f&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;标题: {article_info[&quot;title&quot;]}\n日期: {article_info[&quot;date&quot;]}&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; content in article_info[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;contents&#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; len(cur_content) &amp;gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.max_characters: &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        contents.append(cur_content)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        cur_content = content&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        cur_content = cur_content + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\n&#x27;&lt;/span&gt; + content&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.clearterminal()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.page_pointer, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.contents = &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;, contents&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;\n\n在终端看中华人民共和国国务院新闻办公室\n\n操作简介: 输入&amp;lt;↑&amp;gt;或&amp;lt;←&amp;gt;查看上一页; 输入&amp;lt;↓&amp;gt;或&amp;lt;→&amp;gt;查看下一页; 输入&amp;lt;q&amp;gt;退出程序。\n\n作者: Charles\n\n微信公众号: Charles的皮卡丘\n\n&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;def previouspage(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.page_pointer = max(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.page_pointer&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.clearterminal()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\x1b[6;30;42m&#x27;&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;分界线&#x27;&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;+&#x27;&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;分界线&#x27;&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\x1b[0m&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\x1b[6;30;42m&#x27;&lt;/span&gt; + &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.contents[&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.page_pointer] + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\x1b[0m&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\x1b[6;30;42m&#x27;&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;分界线&#x27;&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;+&#x27;&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;分界线&#x27;&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\x1b[0m&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;def nextpage(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.page_pointer = min(len(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.contents)&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.page_pointer+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.clearterminal()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\x1b[6;30;42m&#x27;&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;分界线&#x27;&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;+&#x27;&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;分界线&#x27;&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\x1b[0m&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\x1b[6;30;42m&#x27;&lt;/span&gt; + &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.contents[&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.page_pointer] + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\x1b[0m&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\x1b[6;30;42m&#x27;&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;分界线&#x27;&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;+&#x27;&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;分界线&#x27;&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\x1b[0m&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;def quitsys(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.clearterminal()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sys.&lt;span class=&quot;code-snippet__keyword&quot;&gt;exit&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    with pynput.keyboard.Events() &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; event:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        key = event.get()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; hasattr(key.key, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;char&#x27;&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; isinstance(key, pynput.keyboard.Events.Release) &lt;span class=&quot;code-snippet__keyword&quot;&gt;and&lt;/span&gt; key.key.char == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;q&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            quitsys(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; isinstance(key, pynput.keyboard.Events.Release) &lt;span class=&quot;code-snippet__keyword&quot;&gt;and&lt;/span&gt; (key.key.name == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;up&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; key.key.name == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;left&#x27;&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            previouspage(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        elif isinstance(key, pynput.keyboard.Events.Release) &lt;span class=&quot;code-snippet__keyword&quot;&gt;and&lt;/span&gt; (key.key.name == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;down&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; key.key.name == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;right&#x27;&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            nextpage(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;大功告成啦，完整源代码详见相关文件~&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7d968a3501f7cf64e32f741e95a6a9d4</guid>
<title>go单例实现—双重检测是否安全</title>
<link>https://toutiao.io/k/xdbiifd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;原文 ：&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;https://blog.csdn.net/q5706503/article/details/105870179&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;起因&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天看到项目中的kafka客户端包装结构体的获取是单例模式&lt;br/&gt;单例的实现是老生常谈的问题了，懒汉饿汉线程安全，因为看到项目中写的还是有些问题，网上go单例实现的搜索结果比较少经测试也并不靠谱，所以在这记录下&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;现状&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当前有的项目直接使用Mutex锁，有的就直接判断nil则创建，对于前者，每次都加锁性能差，对于后者则会出现多个实例，也就不是单例了&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;改进&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进而想要改进一下，在这不讨论饿汉和线程非安全的实现，对于go中线程安全的懒汉实现，常见两种：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;双重检验示例：&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt; &lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;sync&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;testing&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt; &lt;br/&gt;var (&lt;br/&gt;    instance *int&lt;br/&gt;    lock      sync.Mutex&lt;br/&gt;)&lt;br/&gt; &lt;br/&gt;func getInstance() *int {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; instance == nil {&lt;br/&gt;        lock.Lock()&lt;br/&gt;        defer lock.Unlock()&lt;br/&gt; &lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; instance == nil {&lt;br/&gt;            i := 1&lt;br/&gt;            instance = &amp;amp;i&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; instance&lt;br/&gt;}&lt;br/&gt; &lt;br/&gt;// 用于下边基准测试&lt;br/&gt;func BenchmarkSprintf(b *testing.B){&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; i:=0;i&amp;lt;b.N;i++{&lt;br/&gt;        go getInstance()&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;是否线程安全&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于java中双重检验锁的经验，因为jvm的内存模型，双重检验锁会出现可见性问题，可以通过 volatile解决
那么在go里会有类似问题吗？关键点在于instance变量的读和写是否是原子操作
这里做了个race竞态检测：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8821362799263351&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/otNtibX96l98I1AzhbuxBfI0YJOLHFIsUQw0UuyAsQ9DQtPba9rib0KoibLG8F6Ttd3XZckwZknSq6M2WiaOQIiaQxA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1086&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到
20行的写入和14行的读取发生了竞态
上例中用64位(系统是64位)的int指针表示一个实例，也说明了对于64位数据的写入和读取是非原子操作&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看另一种实现：sync.Once方法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt; &lt;br/&gt;import (&lt;br/&gt;    &lt;span&gt;&quot;sync&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;testing&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt; &lt;br/&gt;var (&lt;br/&gt;    instance *int&lt;br/&gt;    once      sync.Once&lt;br/&gt;)&lt;br/&gt; &lt;br/&gt;func getInstance() *int {&lt;br/&gt;    once.Do(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; instance == nil {&lt;br/&gt;            i := 1&lt;br/&gt;            instance = &amp;amp;i&lt;br/&gt;        }&lt;br/&gt;    })&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; instance&lt;br/&gt;}&lt;br/&gt; &lt;br/&gt;func BenchmarkSprintf(b *testing.B){&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; i:=0;i&amp;lt;b.N;i++{&lt;br/&gt;        go getInstance()&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现比双重检验看起来要整洁许多&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;race检测结果：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1843065693430657&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/otNtibX96l98I1AzhbuxBfI0YJOLHFIsUuSQwnBiacX8IPiapvnUODcEvT5VbP8DGTkNSx3TgEf3VA789IMIpoMAw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1096&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没有发生竞态&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;关于sync.Once&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么sync.Once是怎么实现的呢&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看下源码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package sync&lt;br/&gt; &lt;br/&gt;import (&lt;br/&gt;   &lt;span&gt;&quot;sync/atomic&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt; &lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Once struct {&lt;br/&gt;   &lt;span&gt;done&lt;/span&gt; uint32&lt;br/&gt;   m    Mutex&lt;br/&gt;}&lt;br/&gt; &lt;br/&gt;func (o *Once) Do(f func()) {&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; atomic.LoadUint32(&amp;amp;o.done) == 0 {&lt;br/&gt;      o.doSlow(f)&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt; &lt;br/&gt;func (o *Once) doSlow(f func()) {&lt;br/&gt;   o.m.Lock()&lt;br/&gt;   defer o.m.Unlock()&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; o.done == 0 {&lt;br/&gt;      defer atomic.StoreUint32(&amp;amp;o.done, 1)&lt;br/&gt;      f()&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到sync.Once内部其实也是一个双重检验锁，但是对于&lt;strong&gt;共享变量（done字段）的读和写使用了atomic包的StoreUint32和LoadUint32方法&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;sync.Once使用一个32位无符号整数表示共享变量，即使是32位变量的读写操作都需要atomic包方法来实现原子性，更说明了go里边指针的读写不能保证原子性&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;关于atomic和metex&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;引用一段话：&lt;span&gt;https://ms2008.github.io/2019/05/12/golang-data-race/&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;解决 race 的问题时，无非就是上锁。可能很多人都听说过一个高逼格的词叫「无锁队列」。都一听到加锁就觉得很 low，那无锁又是怎么一回事？其实就是利用 atomic 特性，那 atomic 会比 mutex 有什么好处呢？go race detector 的作者总结了这两者的一个区别：Mutexes do no scale. Atomic loads do.
mutex 由操作系统实现，而 atomic 包中的原子操作则由底层硬件直接提供支持。在 CPU 实现的指令集里，有一些指令被封装进了 atomic 包，这些指令在执行的过程中是不允许中断（interrupt）的，因此原子操作可以在 lock-free 的情况下保证并发安全，并且它的性能也能做到随 CPU 个数的增多而线性扩展。若实现相同的功能，后者通常会更有效率，并且更能利用计算机多核的优势。所以，以后当我们想并发安全的更新一些变量的时候，我们应该优先选择用 atomic 来实现。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;结论&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;go单例实现—双重检测法对共享变量直接读取和赋值是不安全的，需要atomic包实现原子操作的读写&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于懒汉模式单例的实现，sync.Once是更好的办法，简洁安全，&lt;strong&gt;sync.Once已经帮我们实现了安全的双重检验&lt;/strong&gt;，能做到加载完成后不再加锁&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这里也提醒我们，只要是对于共享变量的并发访问，一定要注意安全性，go更推崇避免共享变量，使用chan来交流信息，如果无法避免共享内存，优先使用atomic实现，其次sync，安全第一！&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;欢迎关注Go生态。生态君会不定期分享 Go 语言生态相关内容。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-id=&quot;Mzk0NTI4MTQ4MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/otNtibX96l9ibfdCtXiasKpFiaNy4fGm3FvraU4AibvhdaVanAj4Dew6AQApWu2JJg7icPoX7ueDdgnDWoDMuDyoJibiag/0?wx_fmt=png&quot; data-nickname=&quot;Go生态&quot; data-alias=&quot;go-ecology&quot; data-signature=&quot;专注分享Go语言相关技术生态&quot; data-from=&quot;0&quot; data-pluginname=&quot;mpprofile&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>39106216f0967f51acbd5bffae5794fd</guid>
<title>SQL中如何给指定数据库创建只读用户？</title>
<link>https://toutiao.io/k/u608889</link>
<content:encoded>&lt;div&gt;&lt;div&gt;

                

                
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>