<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>a553c482a8776b84536dd7083370d8cc</guid>
<title>盘点2021｜「避坑宝典」为大家分享一下笔者在2021年所遇到“匪夷所思”的Bug趣事（上）</title>
<link>https://toutiao.io/k/zdaoba0</link>
<content:encoded>&lt;div&gt;&lt;body id=&quot;readabilityBody&quot;&gt;
&lt;p id=&quot;app&quot;/&gt;
&lt;img src=&quot;https://static001.infoq.cn/static/infoq/img/logo-121-75.yuij86g.png&quot; alt=&quot;盘点2021｜「避坑宝典」为大家分享一下笔者在2021年所遇到“匪夷所思”的Bug趣事（上）&quot;/&gt;





    

&lt;/body&gt;
&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ab405e9121e0e45a1ae7b50d026aa069</guid>
<title>千亿级金融场景下，基于Pulsar的云原生消息队列有怎样的表现？</title>
<link>https://toutiao.io/k/upkl2yx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;腾讯云中间件&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;gh_6ea1bc2dd5fd&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;腾讯云中间件官方账号。关注微服务、容器、API网关、消息中间件、DevOps、Serverless等云原生技术热点资讯，发布腾讯云中间件产品、用户手册、实践案例以及技术干货。定期举办技术沙龙，与你分享有效的技术解决方案。&amp;#13;
&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>66338119fb21d2b3cdcbdf4326f036ec</guid>
<title>我被这个浏览了 746000 次的问题惊住了！</title>
<link>https://toutiao.io/k/c7xllwm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;span&gt;这个一个很有意思，但是卵用不大的小知识点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;先给你搞个程序看一下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MainTest&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;String[] args&lt;/span&gt;) throws Exception&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SimpleDateFormat simpleDateFormat = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Date date = simpleDateFormat.parse(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1900-01-01 08:00:00&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(simpleDateFormat.format(date));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你说上面的程序逻辑就是一个简单的时间格式化，你说输出结果是什么？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;只是需要瞟一眼就知道，肯定是输出这个结果呀：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;1900-01-01 08:00:00&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是，你把上面的程序拿出来，直接跑起来，你会发现输出结果竟然是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;1900-01-01 08:05:43&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当时就懵逼了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我知道时差 8 小时，是因为有时区问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我知道时间差 1 小时，是因为有夏令时的原因。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是这里差了 5 分 43 秒，有零有整，就让我有点摸不着头脑了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9454545454545454&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgDBstWVOPuicTIu162zpXSVPOaQLyfgT0lhJjH8xJsbkZiafLSLicCibuXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;440&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面这个案例就是一个读者分享给我的，他们在数据库里面默认时间是 1900-01-01，再加上时区问题，刚好变成了 1900-01-01 08:00:00，于是在通过程序做数据迁移的时候就踩到了这个莫名其妙的时间问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1021069692058347&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUglCMh0dt44LXRoNEkXJKiahs0PSzNSqhee0t3iarlGZpEo2DC44iccaL7A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1234&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同时他还给我附送了一个关于这个 bug 的链接：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://bugs.openjdk.java.net/browse/JDK-8266262&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34278180619644033&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgIEVSREB3c6ybM8EicxXBCwPCLIBhDxeJWPzlhwmtbctaKoQVy66ZZNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1517&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我乍一看，这个 bug 还挺新的呢，属于今年提出来的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;仔细又看了一眼发现是和之前的 bug 重复了：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33424283765347884&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgoV9CBG8SGFcs31iaKOkyoibiavrjy3LcKmmoJulThZ34AUJZuMZQu8FDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;733&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是这里提到了原因：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;他说可以看一下这个链接&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://www.timeanddate.com/time/zone/china/shanghai?year=1900&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里面，在 1900 年的时候，发生了一个变化：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;The timezone offset was UTC +8:05:43 hours all of the period.&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;虽然我没太看明白具体是什么意思，但是我看到了“&lt;strong&gt;5 分 43 秒&lt;/strong&gt;”：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44933469805527126&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUglkEicficwtDR5Y6icf7noPxhvCRXyAMKEwxN3e1LKI3OY8CxKTtnL8Xnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;977&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我理解就是由于时区的变化，导致时间发生了重置。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接着我顺藤摸瓜，在 stackoverflow 上找到了这个：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://stackoverflow.com/questions/6841333/why-is-subtracting-these-two-times-in-1927-giving-a-strange-result&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当时我就震惊了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个 10 年前被提出的问题居然已经被浏览过 746k 次了，非常热门的问题了，我居然没注意到过：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.10849539406345957&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgbiaibp7t4qVtko01FJeoZ32U7jwAy9OowZdcWicgrYTUuHPgW4BMiapgYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;977&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个问题具体是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8216783216783217&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgxic4KcUUd67aqLJNAW4reicC4d6WvrRZa0n9ItY4Kwo9RP8tAkeQEOMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;858&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你就大概瞟一眼，我给你翻译翻译。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;提问者说，他发现 1927-12-31 23:54:07 到 1927-12-31 23:54:08 之间差了 353 秒，按理来说应该是 1 秒才对啊？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是把时间改成下面这样，又正常了：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; str3 = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1927-12-31 23:54:07&quot;&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; str4 = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1927-12-31 23:54:08&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;span/&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我把程序粘出来你也可以跑一下，看看结果非常的神奇啊：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;[] args) throws ParseException {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    SimpleDateFormat sf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;);  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; str3 = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1927-12-31 23:54:07&quot;&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; str4 = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1927-12-31 23:54:08&quot;&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;Date&lt;/span&gt; sDt3 = sf.parse(str3);  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;Date&lt;/span&gt; sDt4 = sf.parse(str4);  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    long ld3 = sDt3.getTime() /&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    long ld4 = sDt4.getTime() /&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    System.out.println(ld4-ld3);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;span/&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是当我跑了一遍之后，我发现：我去，说好的 353 秒呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;跑出来怎么是 1 秒呢，毫无毛病啊：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgFxqmd9IL133Knyk0sJ5XKAsjS0c6XVauibmdWF0AEN6f3EzicoO0xk2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;603&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我甚至怀疑是 JDK 版本的问题，于是我换了 JDK 9,11,15 都跑了一下，都是 1 秒。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这就很奇怪了啊。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;感觉这个问题提的就有问题啊。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8324175824175825&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgMlZ5lgE0hVEl9ficsRkxXXVRvI1kQHsiaOydAmuxKbAxYibeyGBicqOicfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;364&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是当我读了下面最高赞的答案之后，我才仿佛窥见了一点端倪。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个回答比较长，我先全部截图下来给你看看：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3228021978021978&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgkT9VrX0pCcZwjfzt7Ee5d99H5iatOeAkTcbLONUTicibQjEaY5J4hp6PQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;728&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;比较长的原因是作者修改了几次回答。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为什么会修改回答呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;且往后看吧，一切的答案都藏在这里面。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我选关键的给你说。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先看第一段：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2857142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgtzJWfIOaZjbHUQdjVx4gQuspibHEk3gOBsd2eZlSDLNXjwoMnVwNLPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;658&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;他说&lt;strong&gt;（1927年） 12 月 31 日的时候，上海的时区发生了变化&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;而关于 1927 年上海的详细情况，他附上了一个超链接，这个超链接就是前面出现的网站，点进去之后是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4155653450807636&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgVRnGRFzDJbFbPUbNLnBwfZhVujwsx6gzHUvgny40bHrRnEoXme03ibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;681&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是这个里面显示：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;No further time changes in 1927 in Shanghai&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;翻译过来就是：1927 年上海的时间没有进一步变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这特么就和他下面说的那一坨内容对不上了啊？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;他下面说，在 1927 年底的午夜时分，时钟往回走了 5 分 52 秒。因此，&quot;1927-12-31 23:54:08&quot;实际上发生了两次，而 Java 取的是第二次的的时刻，因此存在差异。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;看到这里其实我都懵逼了，这玩意前后不符啊，于是我又接着开始搜索。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;直到我发现了这个：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://coolshell.cn/articles/5075.html/comment-page-2#comments&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这也是十年前的文章。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里面作者把当时网站截了个图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7089452603471295&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgkUVko0oB3ibO39W0WVxMmAicGxDLz8EnXkibTLldvXBB7icNF7Dicdia4JlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;749&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当年的截图显示：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在1927年12月31日23:59:59时，往后面的一秒应该是1928年1月1日 0:0:0，但是这个时间被往后调整了5分52秒，而成了，1927年12月31日的，23:54:08，于是，完成了352秒的穿越。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这说明了什么？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;说明数据发生了篡改，有人篡改了网页上的信息！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgyVSyZ6WvcUGfEYLOj4TeiazdcH5wZqJGkNeV7jWxT7ESPOiaD4kHDrXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;458&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;到底是怎么回事呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们回到 stackoverflow 接着往下看：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2916666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgngiaGJEGRklVMbbPUUp3FgPcslsDibccOEroWicVwdia6w0xBWIJ2I1ckw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;648&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是他第一次修改回答，因为 History changes...&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;历史发了变化了...&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;他这里说，如果用 TZDB 的 2013a 版本的数据，原来的问题将不再表现出完全相同的行为。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 2013a 中，结果将是 358 秒，过渡时间为 23:54:03，而不是 23:54:08。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;他提到了一个 TZDB，这是个啥东西呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我也不知道，但是我搜索了一下。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3971631205673759&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgcfo7PkMG7lBFmkR27CpUYV2JCUWgChiaD9nYxibZ9icwR6icKzkvG5TO9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;705&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;他应该说的是这个的东西。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.iana.org/time-zones&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;看名字你也知道了，它是一个时区数据库，里面应该是维护的时区相关的数据。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;也就是说，在这个时区数据库里面，用 2013a 版本的数据，前面的代码就是另外一种输出了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;也就是说数据确实发生了变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;而关键的回答在于下一次编辑：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16798732171156894&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgrVqWHOldECPJtmtxwQoJKLZbiag8qzC0DNAFNbSZEjq1Y4fs2UeasgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;631&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;History has changed again...&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;历史再次发生了变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在这个时区数据库里面，2014f 版本中，变化的时间已经移到了1900-12-31，现在只是一个 343 秒的变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;343 秒？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不就是我们前面的 5 分 43 秒吗？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.437410071942446&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUg0N3kkXsuibSl0iay7bM6q4v2csNNJPKlAJMrChhML4wz2WlE565CWZvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;695&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好了，现在时差能对上了，343 秒，但是时间还是没对上啊。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们的测试时间 1900-01-01 08:00:00，他这里写的时间是 1900-12-31。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;差了整整一年呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好，我们看他最后一次编辑的内容：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13902053712480253&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgDDrFMVJFvvkLaMZXiaL4wbePibuQzX7jrHt3O9zWS3J7p4ibrb8tYenQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;633&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我个人理解他要表达的意思是这样的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Java 为了在时区上统一标准，所以来了个一刀切的政策。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;统一的标准就是让 UTC 时区下 1900 年之前的任何瞬间都是标准时间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;至于产生的时差嘛...&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;就在最开始的时候补上去吧。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以，1900-01-01 00:00:00 加上 8 小时时差，是 1900-01-01 08:00:00，在这个基础上预先加上 27 年后来自 1927-12-31 那个午夜由于时间回拨带来的 343 秒。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1900-01-01 08:05:43，我个人认为就是这样来的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;而前面 stackoverflow 里面对应的那个程序，我们现在执行是输出 1，但是在 10 年前，输出结果确实是 353 。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;就像我把程序改成这样：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5826513911620295&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgA7H4SzScv0hzHpEh3QJJu4GTrE9gVibgW5OW5ib4hKjicxoPLp7L1gcIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;611&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最终的输出结果不是 1，而是 -342。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;时间，发生了“倒流”&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好了，又是一个没啥卵用的知识点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后，再补充两个冷知识。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第一个是我在 JDK Bug 列表里面追溯了一下，能找到最早提出相关问题的时间是 2005 年：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://bugs.openjdk.java.net/browse/JDK-6281408&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.479607250755287&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUggoMAzEPrxWBeLhibNxibEaUpNo0HDyxEPVkicdUOdwUbsV4DhstsH6DvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1324&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在这个里面，官方是这样回复的：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1332116788321168&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgFOrwb4icrTmiaLfq4cPUQ6ATsWO6x94BmiayjQDBWkibWh4FyIOg6I6FoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;548&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个问题不会被修复，以避免任何兼容性问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;意思就是：问题我知道了，但是这玩意不太好弄，bug 先变成 feature 吧，就先这样吧。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;别问，问就是有历史原因在里面。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第二个冷知识是，前面提到的，时区在 1927 年发生了变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你知道为什么吗？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我在某网站上找到了这样的描述：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17686424474187382&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt2YUiaoQOia5OTeNW5EHBeXUgicxXFCzoce3ficricswofFLeNPzKwx4eUHj0B3uhxmq1p5rwo8dQSLRbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1046&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651492514&amp;amp;idx=1&amp;amp;sn=4102f57635ae3c7594c70b100551eda3&amp;amp;chksm=bd25fcdd8a5275cb468f9090ef39a41758340d6a367c11f8d4810d70584908e9d29faec91da4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;死磕18个Java8日期处理，工作必用！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;死磕18个Java8日期处理，工作必用！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651486675&amp;amp;idx=2&amp;amp;sn=8986b0a6a3d19ec402af899b89cc4c51&amp;amp;chksm=bd2515ac8a529cba356a8b39810eed7d92a488e5f8d5d2f1ad690a793390dbe07e8aee76eeae&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;18 个 Java8 日期处理的实践，太有用了！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;18 个 Java8 日期处理的实践，太有用了！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651486675&amp;amp;idx=2&amp;amp;sn=8986b0a6a3d19ec402af899b89cc4c51&amp;amp;chksm=bd2515ac8a529cba356a8b39810eed7d92a488e5f8d5d2f1ad690a793390dbe07e8aee76eeae&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;18 个 Java8 日期处理的实践，太有用了！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651497941&amp;amp;idx=2&amp;amp;sn=f74161345cff588f62d9a52d601c5094&amp;amp;chksm=bd25c9aa8a5240bcc32b8965c25bcbbba1660d4ca034dcbb3eb118493af6b63c86d403d77331&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;计算机时间到底是怎么来的？程序员必看的时间知识！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;计算机时间到底是怎么来的？程序员必看的时间知识！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点赞和在看就是最大的支持❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a1a3746d5b61924e2f5dabb92cc89d01</guid>
<title>Kvrocks 在 RocksDB 上的优化实践</title>
<link>https://toutiao.io/k/wy3k98f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不久前 Kvrocks 发布 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxNTg5NzM1Nw==&amp;amp;mid=2247483717&amp;amp;idx=1&amp;amp;sn=6a0a6f92030d738cc6df2270504d7ecc&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;2.0.5&lt;/a&gt; 版本，该版本不仅增加了许多新功能，还使用了RocksDB 的新特性大大提升了性能。本文将重点介绍 Kvrocks 是如何使用这些特性来提升磁盘类型 Redis 服务的性能，希望能给大家带来一些参考。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;背景&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在介绍性能优化之前，首先简单介绍一下 Kvrocks 是如何与 RocksDB 交互的。从实现上来看，Kvrocks 会将 Redis 数据类型编码成 Key-Value 数据写入 RocksDB 的不同 Column Family （以下简称 CF）中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前主要有以下几种 CF：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Metadata CF：主要存储 String 类型的数据，以及 Hash/Set/List 这些复杂类型的元数据 (长度，过期时间等)，不存储具体元素内容&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Subkey CF：存储复杂类型元素内容&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ZSetScore CF：存储 ZSet Score 信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Pub/Sub CF：Pub/Sub 相关信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Propagated CF: 作为主从同步和存放数据之外的内容，比如  Lua 脚本&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;此外，Kvrocks 还利用 RocksDB 的原生 WAL 日志实现主从同步，&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxNTg5NzM1Nw==&amp;amp;mid=2247483681&amp;amp;idx=1&amp;amp;sn=e05dbf64f71a44977b38ba64a5bb9e8f&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Kvrocks: 一款开源的企业级磁盘 KV 存储服务&lt;/a&gt; 一文&lt;span&gt;详细&lt;/span&gt;介绍了 Kvrocks 的设计与实现，感兴趣的同学可以去看看。&lt;/span&gt;&lt;span&gt;交互逻辑如图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7311827956989247&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hl28EX8RHpODP6uXs3SytbQgnxHBg0dJoEulCvcSvsWHpyK9zS04fpLGj3IsZtc13380ibOYUWAnickVcy8GBAnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;465&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来重点看 Kvrocks 如何用 RocksDB 多维度的特性来优化性能:&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;优化细节&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;Memtable 优化&lt;span/&gt;&lt;/h4&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kvrocks 当前使用的是 SkipList Memtable，相比 HashSkipList Memtable 跨多个前缀查找的性能更好，也更节省内存。同时针对 SkipList Memtable 打开 &lt;code&gt;whole_key_filtering&lt;/code&gt; 选项，该选项会为 Memtable 中的 key 创建 Bloom Filter，这可以减少在跳表中的比较次数，从而降低点查询时的 CPU 使用率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相关配置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;metadata_opts.memtable_whole_key_filtering = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;metadata_opts.memtable_prefix_bloom_size_ratio = &lt;span&gt;0.1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;SST 优化&lt;span/&gt;&lt;/h4&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Data Block&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Data Block 上使用 Hash 索引来提升点查询的效率。之前 Kvrocks 在查找 Data Block 时使用二分查找，这会导致 CPU Cache Miss，增加 CPU 使用率。如果在 Data Block 上使用 Hash 索引，可以避免二分查找，在点查询场景下降低 CPU 利用率。官方的测试数据显示：&lt;strong&gt;该特性可降低 21.8% 的CPU 利用率，提升 10% 的吞吐，但会增加 4.6% 的空间占用&lt;/strong&gt;。相比磁盘资源，CPU 资源更加昂贵，权衡之下，Kvrocks 选择开启 Hash 索引来提升点查询的效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相关配置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;BlockBasedTableOptions::data_block_index_type = DataBlockIndexType::kDataBlockBinaryAndHash&lt;br/&gt;&lt;span&gt;// 如果此值小的话，说明 Hash 桶多，冲突就比较小。&lt;/span&gt;&lt;br/&gt;BlockBasedTableOptions::data_block_hash_table_util_ratio = &lt;span&gt;0.75&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Filter/Index Block&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;旧版本的 RocksDB 默认使用的是 BlockBasedFilter 类型的 Bloom Filter，这也是 LevelDB 的方式。基本原理是每 2KB 的 Key-Value 数据产生一个 Filter，最后组成一个 Filter 数组。查找的时候，先查 Index Block, 对于可能存在该 Key 的 Data Block，再通过对应的 Filter Block 来判断 Key 是否存在。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新版本的 RocksDB 通过引入 Full Filter 来对原有的 Filter 机制进行优化。每个 SST 都有一个 Filter，这样可以检查 Key 是否存在于 SST 中，避免读取 Index Block。但在 SST 中 key 较多的场景下，仍会导致 Filter Block 和 Index Block 较大。对于 256MB 的 SST 来说，Index 和 Filter Block 的大小约为 0.5MB 和 5MB，这比 Data Block（通常 4-32KB）大得多。最理想的情况下， Index/Filter Block 完全存于内存时，每个 SST 生命周期只会读取一次，但当与 Data Block 竞争 Block Cache 时，很可能因为被剔除的原因，从磁盘上重新读取很多次，导致读放大非常严重。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kvrocks 以前的做法是动态的调节 SST 相关的配置，使得 SST 文件不会过大，从而避免 Index/Filter Block 过大。但是这种机制存在的问题是当数据量非常大时，SST 文件数量过多会占用比较多的系统资源，也会带来性能的衰减。新版本 Kvrocks 对此进行了优化，打开 Partitioned Block 相关的配置， Partitioned Block 的原理是在 Index/Filter Block 加一层二级索引，当读 Index 或者 Filter 时，先将二级索引读入内存，然后根据二级索引找到所需的分区 Index Block，将其加载进 Block Cache 里面。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Partitioned Block 带来的优点如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;增加缓存命中率：大 Index /Filter Block 会污染缓存空间，将大的 Block 进行分区，允许以更细的粒度加载 Index/Filter Block，从而有效地利用缓存空间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提高缓存效率：分区 Index/Filter Block 将变得更小，在 Cache 中锁的竞争将进一步降低，提升了高并发下的效率&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;降低 IO 利用率：当索引 / 过滤器分区的缓存 Miss 时，只需要从磁盘加载一个小的分区，与读取整个 SST 文件的 Index/Filter Block 相比，这会使磁盘上的负载更小&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相关配置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;format_version = &lt;span&gt;5&lt;/span&gt;  &lt;br/&gt;index_type = IndexType::kTwoLevelIndexSearch  # 使用 partition index &lt;br/&gt;NewBloomFilterPolicy(BITS, &lt;span&gt;false&lt;/span&gt;) : 使用 Full Filter&lt;br/&gt;BlockBasedTableOptions::partition_filters = &lt;span&gt;true&lt;/span&gt;  # 使用partition filter, index_type 必须为 kTwoLevelIndexSearch&lt;br/&gt;cache_index_and_filter_blocks = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;pin_top_level_index_and_filter = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;cache_index_and_filter_blocks_with_high_priority = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;pin_l0_filter_and_index_blocks_in_cache = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;optimize_filters_for_memory = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数据压缩优化&lt;span/&gt;&lt;/h3&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RocksDB 在数据落盘时会对数据进行压缩，我们在 Kvrocks 上对不同的压缩算法进行了对比测试，发现不同的压缩算法对性能影响非常大，特别是 CPU 资源紧张的情况下，会显著增加长尾延迟。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下图是不同压缩算法压缩速度和压缩比的测试数据：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7337192474674384&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hl28EX8RHpODP6uXs3SytbQgnxHBg0dJNQYCml8h7vgefJIPflp51sMpss8K1u4XCrqMtu3ux1o13n3LlkE5IA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;691&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Kvrocks 中对 L0 层和 L1 层的 SST 不设置压缩，因为这两层数据量较少，压缩这些层级的数据并不能减少很多磁盘空间，但不压缩这些层级的数据可以节省 CPU。每个 L0 到 L1 的 Compaction 都需要访问 L1 中的所有文件，另外，范围扫描不能使用 Bloom Filter，需要查找 L0 中的所有文件。如果读 L0 和 L1 中的数据时不需要解压缩，写 L0 和 L1 中的数据不需要压缩，那么这两种频繁的 CPU 密集型操作会占用更少的 CPU，相比通过压缩节省的磁盘空间来说收益更大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;从压缩速度以及压缩比两方面权衡考虑，Kvrocks 主要选择 LZ4 和 ZSTD 两种算法。&lt;/strong&gt; 对于其他层级，使用 LZ4 是因为该压缩算法速度更快，压缩比也较高，RocksDB 官方建议使用 LZ4。对于大数据量、低 QPS 的场景，还会将最后一层设置为 ZSTD，进一步降低存储空间和减少成本，ZSTD 的优点是压缩比更高，压缩速度也较快。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Cache 优化&lt;span/&gt;&lt;/h3&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于简单数据类型 (String 类型)，直接将数据存到 Metadata CF 中，而复杂数据类型只会将元数据存到 Metadata CF，实际数据存储在 Subkey CF。Kvrocks 之前默认为这两个 CF 分配了相同大小的 Block Cache，而线上场景复杂，无法预知用户的使用数据类型，所以不能提前给每个 CF 分配合适的 Block Cache 大小。如果用户使用简单类型和使用复杂类型比例不相当时，会使得 Block Cache 命中率降低。&lt;strong&gt;Kvrocks 通过共享同一个大 Block Cache 的方式来 Cache 的命令率，实现提升了 30% 的性能。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，还引入 Row Cache 应对热点 Key 的问题。RocksDB 先检查 Row Cache，再检查 Block Cache，对于存在热点的场景，数据会优先存放在 Row Cache 中，进一步提高 Cache 利用率。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Key-Value 分离&lt;span/&gt;&lt;/h3&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;LSM 存储引擎会将 Key 和 Value 存放在一起，在 Compaction 的过程中，Key 和 Value 都会被重写一遍，当 Value 较大时，会带来严重的写放大问题。针对此问题，&lt;span&gt;WiscKey&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;（FAST&#x27;16）这篇论文提出了 Key-Value 分离的方案，业界也基于此论文实现了 LSM 型存储引擎的 KV 分离，比如：RocksDB 的 BlobDB、PingCAP 的 Titan 引擎、百度的 UNDB 所使用的 Quantum 引擎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RocksDB 6.18 版本重新实现了 BlobDB（RocksDB 的 Key-Value 分离方案），将其集成到 RocksDB 的主逻辑中，并且也一直在完善和优化 BlobDB 相关特性。Kvrocks 在 2.0.5 引入此特性，应对大 Value 的场景。测试显示，&lt;strong&gt;当 Kvrocks 打开 KV 分离开关时，针对 Value 为 10KB 的场景，写性能提升 2.5 倍，读性能并没有衰减；Value 越大，写性能提升幅度越大，Value 为 50KB 场景下，写性能提升了 5 倍。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相关配置:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ColumnFamilyOptions.enable_blob_files = config_-&amp;gt;RocksDB.enable_blob_files;&lt;br/&gt;min_blob_size = &lt;span&gt;4096&lt;/span&gt;&lt;br/&gt;blob_file_size = &lt;span&gt;128&lt;/span&gt;M&lt;br/&gt;blob_compression_type = lz4&lt;br/&gt;enable_blob_garbage_collection = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;blob_garbage_collection_age_cutoff = &lt;span&gt;0.25&lt;/span&gt;&lt;br/&gt;blob_garbage_collection_force_threshold = &lt;span&gt;0.8&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;未来工作&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2021 年已经接近尾声，&lt;span&gt;Kvrocks 2.0&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; 的相关工作已基本完成，&lt;span&gt;Kvrocks 3.0&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt; 的计划也已经在 Github 上列出，本文列举如下两个重要的特性。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;持久内存的应用&lt;span/&gt;&lt;/h3&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;英特尔傲腾持久内存（Optane PMem）弥补了传统 SSD 和 DRAM 之间的空白，以创新的技术提供独特的操作模式，满足各种工作负载的需求。随着高性能存储硬件的发展，传统的存储架构逐渐无法发挥新硬件的性能，传统引擎的架构需要在 PMem 上重新调整。&lt;strong&gt;Intel 的 KVDK 对 Kvrocks 进行了适配，并进行了测试（详见 https://github.com/pmem/kvdk/tree/main/examples/kvrocks）。&lt;/strong&gt; Kvrocks 社区也在积极跟进新存储硬件的发展，探索在 RocksDB 上以及 Redis 场景下如何更好的使用 PMem，进而降低用户成本和提升访问性能。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;计算存储分离架构&lt;span/&gt;&lt;/h3&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Rocksdb Virtual Meetup 2021 上， RocksDB 团队分享了计算存储分离方案，将 SST 文件存储到远程分布式文件系统之上，其团队负责人也透露未来将高优开发计算存储分离相关特性，尽快将此特性在 Facebook 内部落地。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;LSM 型数据库需要进行 Compaction 来减少空间放大，Compaction 是 CPU 密集型的操作，传统架构下 Compaction 和上层服务耦合在一起，相互影响，甚至会阻塞上层写入（称为 Write Stall）。RocksDB 引入 Remote Compaction 特性将 CPU 密集型的 Compaction 转移到远程去执行，实现服务计算与存储引擎计算剥离，达到计算资源的极致弹性。为了降低访问远程存储的延迟 RocksDB 引入 Secondary Cache（可以是内存、PMem、NVMe-SSD 组成的多级 Cache），将 Block Cache 淘汰的数据缓存在本地，减少访问远程存储的次数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;未来 Kvrocks 社区也会持续跟进 RocksDB 的进展，尽快推出计算存储分离架构的 Kvrocks，积极拥抱云原生，实现计算、存储极致的弹性，进一步降低用户云上成本。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kvrocks 通过使用 RocksDB 的新特性进一步提升了性能，为用户带来了极致的性能体验。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前 Kvrocks 已经在线上大规模运行两年之久，基本功能已充分验证，大家可以放心使用。如遇到问题，大家可以在微信群，Slack (见 GitHub README)，Github issue 和 discussion 上反馈和交流，Kvrocks 社区也欢迎提大家提 PR 来一起完善 Kvrocks。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;GitHub Repo: https://github.com/KvrocksLabs/kvrocks&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在社区维护上，希望可以有更加开放的交流氛围，而不只是把代码放到 GitHub 的开源。不管是功能设计还是代码开发，都会尽量把相关细节在 GitHub 里面公开去讨论。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不久前，Kvrocks 荣获&lt;span&gt;「2021 年度 OSCHINA 优秀开源技术团队」&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;，感谢大家的支持！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;WiscKey: &lt;em&gt;https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;Kvrocks 2.0: &lt;em&gt;https://github.com/KvrocksLabs/kvrocks/projects/1&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;Kvrocks 3.0: &lt;em&gt;https://github.com/KvrocksLabs/kvrocks/projects/2&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;2021 年度 OSCHINA 优秀开源技术团队: &lt;em&gt;https://my.oschina.net/oscpyaqxylk/blog/5350757&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>120209112991ebf53d38c4b0f0a398fb</guid>
<title>Go：记一次提升18倍的性能优化</title>
<link>https://toutiao.io/k/dwkzreb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;背景&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近负责的一个自研的 Dubbo 注册中心经常收到 CPU 使用率的告警，于是进行了一波优化，效果还不错，于是打算分享下思考、优化过程，希望对大家有一些帮助。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自研 Dubbo 注册中心是个什么东西，我画个简图大家稍微感受一下就好，看不懂也没关系，不影响后续的理解。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7168674698795181&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0QgpiaicmhQxRaYqQKBF1WHRwicDhHxz2nWUDaW0gXXwRHwpZCWqia8aR2eNOickuMUiaPG12EqlQxNoD8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;996&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Consumer 和 Provider 的服务发现请求（注册、注销、订阅）都发给 Agent，由它全权代理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Registry 和 Agent 保持 Grpc 长链接，长链接的目的主要是 Provider 方有变更时，能及时推送给相应的 Consumer。为了保证数据的正确性，做了推拉结合的机制，Agent 会每隔一段时间去 Registry 拉取订阅的服务列表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Agent 和业务服务部署在同一台机器上，类似 Service Mesh 的思路，尽量减少对业务的入侵，这样就能快速的迭代了&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到今天的重点，这个注册中心最近 CPU 使用率长期处于中高水位，偶尔有应用发布，推送量大时，CPU 甚至会被打满。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以前没感觉到，是因为接入的应用不多，最近几个月应用越接越多，慢慢就达到了告警阈值。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;寻找优化点&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于这项目是 Go 写的（不懂 Go 的朋友也没关系，本文重点在算法的优化，不在工具的使用上）， 找到哪里耗 CPU 还是挺简单的：打开 pprof 即可，去线上采集一段时间即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体怎么操作可以参考我之前的&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5NjE2MDQwNg==&amp;amp;mid=2247484717&amp;amp;idx=1&amp;amp;sn=79b15577f555896eedbdc705e9fb2c61&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;这篇文章&lt;/a&gt;，今天文章中用到的知识和工具，这篇文章都能找到。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.32934553131597466&quot; data-type=&quot;png&quot; data-w=&quot;2842&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0QgpiaicmhQxRaYqQKBF1WHRwzxU0CiamIgXBSCHLQmN9xffbcBpVbmaiaHDVOHKc0fRZqan9Cn1LlbtA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CPU profile 截了部分图，其他的不太重要，可以看到消耗 CPU 多的是 &lt;code&gt;AssembleCategoryProviders&lt;/code&gt;方法，与其直接关联的是&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;2个 redis 相关的方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;1个叫&lt;code&gt;assembleUrlWeight&lt;/code&gt;的方法&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;稍微解释下，AssembleCategoryProviders 方法是构造返回 Dubbo provider 的 url，由于会在返回 url 时对其做一些处理（比如调整权重等），会涉及到对这个 Dubbo url 的解析。又由于推拉结合的模式，线上服务使用方越多，这个处理的 QPS 就越大，所以它占用了大部分 CPU 一点也不奇怪。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个 redis 操作可能是序列化占用了 CPU，更大头在 assembleUrlWeight，有点琢磨不透。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们就分析下 assembleUrlWeight 如何优化，因为他占用 CPU 最多，优化效果肯定最好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是 assembleUrlWeight 的伪代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;AssembleUrlWeight&lt;/span&gt;&lt;span&gt;(rawurl &lt;span&gt;string&lt;/span&gt;, lidcWeight &lt;span&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; u, err := url.Parse(rawurl)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; rawurl&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; values, err := url.ParseQuery(u.RawQuery)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; rawurl&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; values.Get(&lt;span&gt;&quot;lidc_weight&quot;&lt;/span&gt;) != &lt;span&gt;&quot;&quot;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; rawurl&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; endpointWeight := &lt;span&gt;100&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; values.Get(&lt;span&gt;&quot;weight&quot;&lt;/span&gt;) != &lt;span&gt;&quot;&quot;&lt;/span&gt; {&lt;br/&gt;  endpointWeight, err = strconv.Atoi(values.Get(&lt;span&gt;&quot;weight&quot;&lt;/span&gt;))&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;   endpointWeight = &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; values.Set(&lt;span&gt;&quot;weight&quot;&lt;/span&gt;, strconv.Itoa(lidcWeight*endpointWeight))&lt;br/&gt;&lt;br/&gt; u.RawQuery = values.Encode()&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; u.String()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;传参 rawurl 是 Dubbo provider 的url，lidcWeight 是机房权重。根据配置的机房权重，将 url 中的 weight 进行重新计算，实现多机房流量按权重的分配。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个过程涉及到 url 参数的解析，再进行 weight 的计算，最后再还原为一个 url&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dubbo 的 url 结构和普通 url 结构一致，其特点是参数可能比较多，没有 &lt;code&gt;#&lt;/code&gt;后面的片段部分。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3757183908045977&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0QgpiaicmhQxRaYqQKBF1WHRwh63ghoibeQnVWiaKiaibpwNPXohpaOLrFfYV6SzObZkCuaeR9DricByLhDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2784&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CPU 主要就消耗在这两次解析和最后的还原中，我们看这两次解析的目的就是为了拿到 url 中的 &lt;code&gt;lidc_weight&lt;/code&gt; 和 &lt;code&gt;weight&lt;/code&gt; 参数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;url.Parse 和 url.ParseQuery 都是 Go 官方提供的库，各个语言也都有实现，其核心是解析 url 为一个对象，方便地获取 url 的各个部分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果了解信息熵这个概念，其实你就大概知道这里面一定是可以优化的。&lt;code&gt;Shannon（香农）&lt;/code&gt; 借鉴了热力学的概念，把信息中排除了冗余后的平均信息量称为&lt;code&gt;信息熵&lt;/code&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7171875&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/xacdaKuBM0QgpiaicmhQxRaYqQKBF1WHRwWoFWXTeOVujGjv6N0EicGodM046BqFibiaNJpT476Rxhgq6QLkxHA1lQA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;url.Parse 和 url.ParseQuery 在这个场景下解析肯定存在冗余，冗余意味着 CPU 在做多余的事情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为一个 Dubbo url 参数通常是很多的，我们只需要拿这两个参数，而 url.Parse 解析了所有的参数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子，给定一个数组，求其中的最大值，如果先对数组进行排序，再取最大值显然是存在冗余操作的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;排序后的数组不仅能取最大值，还能取第二大值、第三大值...最小值，信息存在冗余了，所以先排序肯定不是求最大值的最优解。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;优化&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;优化获取 url 参数性能&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一想法是，不要解析全部 url，只拿相应的参数，这就很像我们写的算法题，比如获取 weight 参数，它只可能是这两种情况（不存在 #，所以简单很多）：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;dubbo://127.0.0.1:20880/org.newboo.basic.MyDemoService?weight=100&amp;amp;...&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;dubbo://127.0.0.1:20880/org.newboo.basic.MyDemoService?xx=yy&amp;amp;weight=100&amp;amp;...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要么是 &lt;code&gt;&amp;amp;weight=&lt;/code&gt;，要么是 &lt;code&gt;?weight=&lt;/code&gt;，结束要么是&lt;code&gt;&amp;amp;&lt;/code&gt;，要么直接到字符串尾，代码就很好写了，先手写个解析参数的算法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;GetUrlQueryParam&lt;/span&gt;&lt;span&gt;(u &lt;span&gt;string&lt;/span&gt;, key &lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(&lt;span&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; sb := strings.Builder{}&lt;br/&gt; sb.WriteString(key)&lt;br/&gt; sb.WriteString(&lt;span&gt;&quot;=&quot;&lt;/span&gt;)&lt;br/&gt; index := strings.Index(u, sb.String())&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; (index == &lt;span&gt;-1&lt;/span&gt;) || (index+&lt;span&gt;len&lt;/span&gt;(key)+&lt;span&gt;1&lt;/span&gt; &amp;gt; &lt;span&gt;len&lt;/span&gt;(u)) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;, UrlParamNotExist&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; value = strings.Builder{}&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i := index + &lt;span&gt;len&lt;/span&gt;(key) + &lt;span&gt;1&lt;/span&gt;; i &amp;lt; &lt;span&gt;len&lt;/span&gt;(u); i++ {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; i+&lt;span&gt;1&lt;/span&gt; &amp;gt; &lt;span&gt;len&lt;/span&gt;(u) {&lt;br/&gt;   &lt;span&gt;break&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; u[i:i+&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;&quot;&amp;amp;&quot;&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;break&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;  value.WriteString(u[i : i+&lt;span&gt;1&lt;/span&gt;])&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; value.String(), &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原先获取参数的方法可以摘出来：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;getParamByUrlParse&lt;/span&gt;&lt;span&gt;(ur &lt;span&gt;string&lt;/span&gt;, key &lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; u, err := url.Parse(ur)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; values, err := url.ParseQuery(u.RawQuery)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; values.Get(key)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先对这两个函数进行 benchmark：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;BenchmarkGetQueryParam&lt;/span&gt;&lt;span&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ {&lt;br/&gt;  getParamByUrlParse(u, &lt;span&gt;&quot;anyhost&quot;&lt;/span&gt;)&lt;br/&gt;  getParamByUrlParse(u, &lt;span&gt;&quot;version&quot;&lt;/span&gt;)&lt;br/&gt;  getParamByUrlParse(u, &lt;span&gt;&quot;not_exist&quot;&lt;/span&gt;)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;BenchmarkGetQueryParamNew&lt;/span&gt;&lt;span&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ {&lt;br/&gt;  GetUrlQueryParam(u, &lt;span&gt;&quot;anyhost&quot;&lt;/span&gt;)&lt;br/&gt;  GetUrlQueryParam(u, &lt;span&gt;&quot;version&quot;&lt;/span&gt;)&lt;br/&gt;  GetUrlQueryParam(u, &lt;span&gt;&quot;not_exist&quot;&lt;/span&gt;)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Benchmark 结果如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;BenchmarkGetQueryParam-4          103412              9708 ns/op&lt;br/&gt;BenchmarkGetQueryParam-4          111794              9685 ns/op&lt;br/&gt;BenchmarkGetQueryParam-4          115699              9818 ns/op&lt;br/&gt;BenchmarkGetQueryParamNew-4      2961254               409 ns/op&lt;br/&gt;BenchmarkGetQueryParamNew-4      2944274               406 ns/op&lt;br/&gt;BenchmarkGetQueryParamNew-4      2895690               405 ns/op&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到性能大概提升了20多倍&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新写的这个方法，有两个小细节，第一是返回值中区分了参数是否存在，这个后面会用到；第二是字符串的操作用到了 &lt;code&gt;strings.Builder&lt;/code&gt;，这也是实际测试的结果，使用 &lt;code&gt;+&lt;/code&gt;或者 &lt;code&gt;fmt.Springf&lt;/code&gt; 性能都没这个好，感兴趣可以测试下看看。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;优化 url 写入参数性能&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;计算出 weight 后再把 weight 写入 url 中，这里直接给出优化后的代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;AssembleUrlWeightNew&lt;/span&gt;&lt;span&gt;(rawurl &lt;span&gt;string&lt;/span&gt;, lidcWeight &lt;span&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; lidcWeight == &lt;span&gt;1&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; rawurl&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; lidcWeightStr, err1 := GetUrlQueryParam(rawurl, &lt;span&gt;&quot;lidc_weight&quot;&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err1 == &lt;span&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; lidcWeightStr != &lt;span&gt;&quot;&quot;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; rawurl&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; err error&lt;br/&gt; endpointWeight := &lt;span&gt;100&lt;/span&gt;&lt;br/&gt; weightStr, err2 := GetUrlQueryParam(rawurl, &lt;span&gt;&quot;weight&quot;&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; weightStr != &lt;span&gt;&quot;&quot;&lt;/span&gt; {&lt;br/&gt;  endpointWeight, err = strconv.Atoi(weightStr)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;   endpointWeight = &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err2 != &lt;span&gt;nil&lt;/span&gt; { &lt;span&gt;// url中不存在weight&lt;/span&gt;&lt;br/&gt;  finUrl := strings.Builder{}&lt;br/&gt;  finUrl.WriteString(rawurl)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; strings.Contains(rawurl, &lt;span&gt;&quot;?&quot;&lt;/span&gt;) {&lt;br/&gt;   finUrl.WriteString(&lt;span&gt;&quot;&amp;amp;weight=&quot;&lt;/span&gt;)&lt;br/&gt;   finUrl.WriteString(strconv.Itoa(lidcWeight * endpointWeight))&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; finUrl.String()&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;   finUrl.WriteString(&lt;span&gt;&quot;?weight=&quot;&lt;/span&gt;)&lt;br/&gt;   finUrl.WriteString(strconv.Itoa(lidcWeight * endpointWeight))&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; finUrl.String()&lt;br/&gt;  }&lt;br/&gt; } &lt;span&gt;else&lt;/span&gt; { &lt;span&gt;// url中存在weight&lt;/span&gt;&lt;br/&gt;  oldWeightStr := strings.Builder{}&lt;br/&gt;  oldWeightStr.WriteString(&lt;span&gt;&quot;weight=&quot;&lt;/span&gt;)&lt;br/&gt;  oldWeightStr.WriteString(weightStr)&lt;br/&gt;&lt;br/&gt;  newWeightStr := strings.Builder{}&lt;br/&gt;  newWeightStr.WriteString(&lt;span&gt;&quot;weight=&quot;&lt;/span&gt;)&lt;br/&gt;  newWeightStr.WriteString(strconv.Itoa(lidcWeight * endpointWeight))&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; strings.ReplaceAll(rawurl, oldWeightStr.String(), newWeightStr.String())&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要就是分为 url 中是否存在 weight 两种情况来讨论：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;url 本身不存在 weight 参数，则直接在 url 后拼接一个 weight 参数，当然要注意是否存在 &lt;code&gt;?&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;url 本身存在 weight 参数，则直接进行字符串替换&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;细心的你肯定又发现了，当 &lt;code&gt;lidcWeight = 1&lt;/code&gt; 时，直接返回，因为 &lt;code&gt;lidcWeight = 1&lt;/code&gt; 时，后面的计算其实都不起作用（Dubbo 权重默认为100），索性别操作，省点 CPU。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;全部优化完，总体做一下 benchmark：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;BenchmarkAssembleUrlWeight&lt;/span&gt;&lt;span&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; _, ut := &lt;span&gt;range&lt;/span&gt; []&lt;span&gt;string&lt;/span&gt;{u, u1, u2, u3} {&lt;br/&gt;   AssembleUrlWeight(ut, &lt;span&gt;60&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;BenchmarkAssembleUrlWeightNew&lt;/span&gt;&lt;span&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; _, ut := &lt;span&gt;range&lt;/span&gt; []&lt;span&gt;string&lt;/span&gt;{u, u1, u2, u3} {&lt;br/&gt;   AssembleUrlWeightNew(ut, &lt;span&gt;60&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;BenchmarkAssembleUrlWeight-4               34275             33289 ns/op&lt;br/&gt;BenchmarkAssembleUrlWeight-4               36646             32432 ns/op&lt;br/&gt;BenchmarkAssembleUrlWeight-4               36702             32740 ns/op&lt;br/&gt;BenchmarkAssembleUrlWeightNew-4           573684              1851 ns/op&lt;br/&gt;BenchmarkAssembleUrlWeightNew-4           646952              1832 ns/op&lt;br/&gt;BenchmarkAssembleUrlWeightNew-4           563392              1896 ns/op&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大概提升 18 倍性能，而且这可能还是比较差的情况，如果传入 lidcWeight = 1，效果更好。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;效果&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优化完，对改动方法写了相应的单元测试，确认没问题后，上线进行观察，CPU Idle（空闲率） 提升了10%以上&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4010462074978204&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0QgpiaicmhQxRaYqQKBF1WHRwzoiah70K1suL53yME4CMCBAllBMOEIWCvkjsh7eoPfXOfZuU1RcickdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2294&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;最后&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实本文展示的是一个 Go 程序非常常规的性能优化，也是相对来说比较简单，看完后，大家可能还有疑问：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;为什么要在推送和拉取的时候去解析 url 呢？不能事先算好存起来吗？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么只优化了这点，其他的点是否也可以优化呢？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对第一个问题，其实这是个历史问题，当你接手系统时他就是这样，如果程序出问题，你去改整个机制，可能周期比较长，而且容易出问题&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.899505766062603&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0QgpiaicmhQxRaYqQKBF1WHRwVzynLxUgaqUIaEqCbKmst6Lsicjkhpfs6muLLLtOjcvLFiaxQ4g3BBKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;607&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二个问题，其实刚也顺带回答了，这样优化，改动最小，收益最大，别的点没这么好改，短期来说，拿收益最重要。当然我们后续也打算对这个系统进行重构，但重构之前，这样优化，足以解决问题。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span&gt;&lt;strong&gt;福利&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span/&gt;&lt;span&gt;我为大家整理了一份&lt;/span&gt;&lt;span&gt;从入门到进阶的Go学习资料礼包&lt;/span&gt;&lt;span&gt;，包含学习建议：入门看什么，进阶看什么。&lt;/span&gt;&lt;span&gt;关注公众号 「polarisxu」，回复 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;ebook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 获取；还可以回复「&lt;strong&gt;进群&lt;/strong&gt;」，和数万 Gopher 交流学习。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UWba2ryLMqm8cgtrMXjG1BLGg46vQNmUompBL02uYYwic9RicPbCnlKdZiacBF5Wv6RLgmGIqnBnwuWyP82ibYusiag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>