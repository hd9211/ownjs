<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>c81082f34201c28d06588404c6ca624e</guid>
<title>[推荐] 总是感觉时间不够用？程序员如何管理时间？</title>
<link>https://toutiao.io/k/leud24r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;▲ &lt;/span&gt;&lt;span&gt;点击上方&quot;pointers&quot;&lt;/span&gt;&lt;span&gt;关注公众号&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6671875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4XQ0RVoHjpx5goZfBeXlEAXKs4NWzw4NicUh9cibYTkicNGvnKxDEic4tgm0CVlGYj9ib9o9FW4LGcpR7q3lEeA3yVA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;成长&amp;amp;认知 &lt;/span&gt;&lt;/strong&gt;丨 作者&lt;/span&gt;&lt;span&gt; / &lt;/span&gt;&lt;span&gt;袁吴范&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;pointers公众号&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;分享的第&lt;/span&gt;&lt;span&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;篇原创文章&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;总是有粉丝会问我，袁总，你现在每天这么忙，公司的事情这么多，公众号还要更新文章，帮助解答粉丝的问题，还要照顾家庭，周末还可以带孩子去逛一逛。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你哪有这么多时间啊，你是怎么做到的啊？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;你到底是如何管理时间的啊？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天，咱们就来聊一聊时间管理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这篇文章，不谈关于时间管理的一些方法，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;例如GTD，番茄工作法，又或者是目标设定的SMART，重要紧急的矩阵式&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;咱们就从几点做事的方法入手，我相信下面几点你全部做到了，你的时间管理的水平已经非常高了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;做事的方法我总结就是四招：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;做好重要的事情、拒绝拖延、保持专注、养成习惯&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;1&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;做好重要的事&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为什么是做好重要的事，而不是做紧急的事。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;重要的事情，代表着这件事情对你来说非常关键，同时又不像紧急的事情，时间非常的紧张。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这意味着什么？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也就是说你可以对&lt;/span&gt;&lt;strong&gt;&lt;span&gt;重要的事进行周全的规划、详细的设计、仔细的验证&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。它需要一段时间的积累、沉淀、坚持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些需要时间投资的事情，它的影响也不会立马看出来。人和人的差距慢慢的就在这些事情上拉开，你却浑然不知。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在我看来，时间管理不是让你每一秒钟都用上，原来10分钟的活，你1分钟干完，而是这10分钟里做的事是重要的事。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为团队负责人的你，有如下ToDoList。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、客户问题处理&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、一个面试&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、技术方案&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、需求review&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很明显作为团队负责人，技术方案决定了产品的好坏，这才是重要的事情。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;紧急的事情可以指派给你下属完成，不重要的事情可以按照优先级排在最后&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样列出要做的事情，按照优先级排序。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天先做最重要的事情，不必去顾及其他事情。第一件事做完后，再做第二件，依此类推。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;到了晚上，如果你列出的事情没有做完也没关系，因为你已经把最重要的事情都做完了，剩下的事情明天再做。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;理想是丰满的，现实是骨感的，安排的再好，也会有意外发生，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;如果中间被打断怎么办？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果是无法延后的事情，比如老板安排的即时任务，或者突然发现一个
deadline 就在眼前，那么自然先去完成这个任务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;如果不是很紧急的事情，我的建议是不做，或者让别人做，实在不行，优先级降到最低。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt; 2&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;拒绝拖延&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个人有一样东西是公平的，就是时间。每天每个人24小时。有人把24小时计划的井井有条，有的人得过且过，毫无章法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;领导给小明，小芳两个人同样的任务，编写一个测试工具。结果小明3天完成了，而小芳7天还没有完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;什么原因？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你可能会说小明的能力比小芳强，肯定他完成的快啊&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是如果你仔细的观察，在你身边能力差不多的两个人，对于同一件任务完成时间也会大不一样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;其中最重要的一个原因之一就是拖延&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;拖延的本质是带有厌恶情绪的自我欺骗。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;它只会浪费时间，永远无法从根本上解决任何问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以想要减少时间的浪费，首选必须克服这种心理状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;怎么做呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们先来看一个公式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;改变的动力=（期望*价值感）/（冲动*推迟）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个公式的提出者是世界上研究拖延最著名的学者之一、加拿大心理学家皮尔斯·斯蒂尔。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;他综合了经济学和心理学的理论，从
801 项研究中总结出了导致拖延最直接的四个原因，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;期望、价值感、冲动和推迟。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们先来看这个公式的分子部分：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;期望*价值感。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一部分是什么意思呢：所有的生物都是趋利避害的。也就是说你做一件事情，你的期望越大，价值感越高，动力就会越大，就越不会拖延。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;通俗一点就是做这件事是否能得到快乐，还有对这件事情是否有控制感，是否容易达成。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;打一个比方：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果说我喜欢吃香蕉，一吃香蕉其他烦恼就抛在脑后了，而吃香蕉这件事情是非常容易达成的。所以我就不会拖延。想吃就吃，立刻就吃。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相反有一个开发任务，非常的困难，我一时半会搞不定，这件事情就是价值感很低的事情，就很容易拖延。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以接下来就好办了，对症下药。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;既然这件事情很难，价值感和期望感很低。我们可以调整期望值。把遥远的目标分解成为简单的，必定可以完成，又可以靠近最终目标的目标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还是以开发任务为例，可以分为需求，设计，开发，测试等一个个小目标。这些步骤不是一次性完成，你只要迈出一小步后面就会慢慢完成。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;保持专注&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;既然解决了拖延心理问题，接下来就是下定决定，开始认认真真的做事情。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可写了刚写了一会代码，忍不住玩一会手机，过了十分钟，又起身泡个茶喝个水，然后又过了几分钟，去厕所带薪拉个屎。回来之后之前的思路全无，至少需要5分钟来努力集中注意力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你自己认为一直在认真的写代码，实际上工作十分钟，浪费了50分钟。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是一个非常不好的习惯，你的时间就这样在无形中浪费掉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你做不到专注，就会浪费比你意识到的还要多的多的时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我这里给大家两个建议。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一个建议是顺应自己的生物钟，合理安排自己的任务。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;人在一天中的3个时间段比较活跃：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;早起后3~4个小时，中午过后的3~4小时，晚上的7~9点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然这是因人而异的，可以根据自己的状态来，根据自己的思维活跃时间来安排任务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以在思维活跃的时间内安排重要的事情。将不重要的事情尽量放到其他时间段来做。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第二个建议是记录时间每天复盘&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就像上面谈到的，时间浪费了自己都还不知道。时间是看不见摸不着，想要管理时间，必须通过量化的方式将时间消耗记录下来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7494646680942184&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4XQ0RVoHjpywSkeziclxv1IfSZYJT2RNvCqS3zdBgwuT6uUrVK0gpNC75icpiaOiaxZDknGsC1YnRu9OuUX1BfQzHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;934&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个是清华学霸的时间表，当然我们都是普通人，也不可能记录的这么详细，可以通过一些Todolist工具将时间记录下来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如我是用OneNote，记录每天的时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每天晚上花个几分钟，复盘下，到底哪些地方消耗的时间有点多，哪些时间的消耗是没有必要的。哪些时间是可以优化的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;只有记录时间+复盘，这种闭环下，才能真正的管理好时间。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;养成习惯&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我刚刚开始学汉字的时候，看报纸经常有不懂的词语冒出来，每次看一篇报道要很久，而且满是文字，插图非常少，很是痛苦。我当时就很羡慕，那些对着这些文字，一目十行的人，这些太厉害了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当我进入初中，对常用汉字都熟悉之后，看报纸已经不是一种痛苦，而是一种享受，能够享受其中文字表达的乐趣，不知不觉的就看完一整份报纸。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;到现在我还保持着看报纸的习惯，只是变成了电子版的形式了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;显然，看报纸已经成为了一种习惯。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;时间管理也是一样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当我们把时间管理作为一项规则来遵守，毫无乐趣可言，甚至很痛苦，是时间在管理我们。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当时间管理成为习惯之后，一切自然而然，才是我们在管理时间。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;习惯不会让人痛苦，养成习惯的过程才会让人痛苦。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;最后的总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然每个人的管理时间都会不一样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;每个人可以摸索出自己的管理时间方式，适合自己的才是最好的。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在职场中，每个人都有自己的生存方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是不管怎样，有一点不会变。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你要有价值，给公司带来价值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至于你应该以怎么的方式给公司带来价值，是你自己的选择，不应该由别人决定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我会遵循我自己的方式，你也可以保持自己的方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;这些都不是最重要的，最重要的是你享受其中，持续成长！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;仅此献上！&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;推荐阅读（干货）&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247484011&amp;amp;idx=1&amp;amp;sn=e52d915760314e3300c145039ede831b&amp;amp;chksm=cf209779f8571e6f81be5951b70607c2a2518fd0fc94c80c8f96c3331f82bdd6e07807179ce4&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;技术总监7年总结，如何进行正确的沟通？&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247484027&amp;amp;idx=1&amp;amp;sn=fb6fe35037e1693bf0f1c0a81d059bdc&amp;amp;chksm=cf209769f8571e7f311b5195d1f4c8fc1dc7f6905375bbdc6b0afbec0abc4775889b1012db7c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;程序员成为高级管理者的三次跃升&lt;/a&gt;（强烈推荐）&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247484027&amp;amp;idx=1&amp;amp;sn=fb6fe35037e1693bf0f1c0a81d059bdc&amp;amp;chksm=cf209769f8571e7f311b5195d1f4c8fc1dc7f6905375bbdc6b0afbec0abc4775889b1012db7c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483962&amp;amp;idx=1&amp;amp;sn=cc73b3d2124fc23d89ccc4c5c612d18c&amp;amp;chksm=cf209728f8571e3e4345d4737029960d1e5c3f7b005fd4c8545a1ac283c086a73e4ca914ede0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;程序员如何打造个人品牌？&lt;/a&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483946&amp;amp;idx=1&amp;amp;sn=7629654c4acf6bd1c5f53639707a9c61&amp;amp;chksm=cf209738f8571e2e66764576dfa494bec92059058c9f2609391ede8c40bc010c167b2d535820&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;聊一聊 软件系统中的“热力学第二定律”&lt;/strong&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483907&amp;amp;idx=1&amp;amp;sn=a170a555f571d4cbd2c4136b8ed57eff&amp;amp;chksm=cf209711f8571e07d674b4582488fe61e4e64d7179be7cb5ca5574edeee36f207d0cf7b0ea52&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;谈一谈程序员的职业发展路线&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483891&amp;amp;idx=1&amp;amp;sn=24cd8a6abf3b0681179dc5e5e846e0ba&amp;amp;chksm=cf2094e1f8571df70c1e37be4f3a3a81df0165e5e3359006a16ed64730fe9e5cc7fe97c37289&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;程序员进阶必备能力——晋升之道&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;程序员进阶必备能力——晋升之道&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483792&amp;amp;idx=1&amp;amp;sn=f30fe58e4ea99d647b1853eca6bd5a6a&amp;amp;chksm=cf209482f8571d94e7dd372851397f98a838e84a9fbea9299337e5ee2301084228a4f57d315c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;送给刚毕业的程序员——7点建议&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;送给刚毕业的程序员——7点建议&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483826&amp;amp;idx=1&amp;amp;sn=c82601363825ba261b88c0198ee3a91d&amp;amp;chksm=cf2094a0f8571db6b69603ba66b1ac62ef588fc3668ffdcddd4ca2fa62713eb8c614e279290b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;程序员进阶技术专家必备能力——深度思考&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;程序员进阶技术专家必备能力——深度思考&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247483879&amp;amp;idx=1&amp;amp;sn=96067a68ebe584002a64dc0e21edb21d&amp;amp;chksm=cf2094f5f8571de38333e04d03d1dd60a56574d08d62324ae65bc73a3bc414e6d6e5e9d17121&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;程序员如何选择一家好公司&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;程序员如何选择一家好公司&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__136&quot;&gt;&lt;br data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot;/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__137&quot;&gt;&lt;strong&gt;&lt;span data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(49, 49, 49)&quot; data-style=&quot;max-width: 100%; color: rgb(49, 49, 49); font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 15px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__1&quot;&gt;觉得不错，记得关注、转发和在看！多年经验分享，实属不易，感谢支持！&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;hr data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;white-space: normal; max-width: 100%; letter-spacing: 0.544px; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; background-color: rgb(255, 255, 255); border-style: solid; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: rgba(0, 0, 0, 0.098); transform-origin: 0px 0px 0px; transform: scale(1, 0.5); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__139&quot;/&gt;&lt;p data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;white-space: normal; max-width: 100%; min-height: 1em; letter-spacing: 0.544px; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__140&quot;&gt;&lt;br data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot;/&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__141&quot;&gt;&lt;span&gt;博主是一位物联网大厂技术总监，从业7年。从软件开发、高级软件开发、技术经理再到技术总监，分享职业发展、技术管理、职场晋升、技术成长等个人多年经验和心得。一起成长！有问题可以加我微信交流：&lt;/span&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__145&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;pointersss&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__146&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__148&quot;&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__149&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;如果你有技术成长的瓶颈、对未来迷茫、关注我，帮你答疑解惑！&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__148&quot;&gt;&lt;span data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__149&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4XQ0RVoHjpx4fJoOHia8o9pebg6ffoYJ3SueWibyfyfUpyBqtcmMwSUg5DrJ3bXLPnhrJya3Xjk0JHkJ9uJu7IrA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;1&quot; data-w=&quot;430&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-qa class=&quot;js_uneditable custom_select_card qa_iframe&quot; data-pluginname=&quot;insertquestion&quot; data-id=&quot;1602517700306665473&quot; data-bizuin=&quot;Mzg3NzUxMTgwNQ==&quot; data-title=&quot;你怎样管理时间的？&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>312f3b6502fa554fdd3690c6fff7353f</guid>
<title>[推荐] 深入理解 Java 线程池</title>
<link>https://toutiao.io/k/dwlr0t4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;在开发过程中，合理地使用线程池能够带来至少以下几个好处。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;降低资源消耗&lt;/strong&gt;：通过重复利用已创建的线程降低线程创建和销毁造成的消耗。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;提高响应速度&lt;/strong&gt;：当任务到达时，任务可以不需要等到线程创建就能立即执行。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;提高线程的可管理性&lt;/strong&gt;：线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。但是，要做到合理利用线程池，必须了解其实现原理。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;代码解耦&lt;/strong&gt;：比如生产者消费者模式。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;线程池实现原理&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;当提交一个新任务到线程池时，线程池的处理流程如下：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果当前运行的线程少于corePoolSize，则创建新线程来执行任务（注意，执行这一步骤需要获取全局锁）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果运行的线程等于或多于corePoolSize，则将任务加入BlockingQueue。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果无法将任务加入BlockingQueue（队列已满），则创建新的线程来处理任务（注意，执行这一步骤也需要获取全局锁）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果创建新线程将使当前运行的线程数超出maximumPoolSize，该任务将被拒绝，并调用相应的拒绝策略来处理（RejectedExecutionHandler.rejectedExecution()方法，线程池默认的饱和策略是AbortPolicy，也就是抛异常）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;ThreadPoolExecutor采取上述步骤的总体设计思路，是为了在执行execute()方法时，尽可能地避免获取全局锁（那将会是一个严重的可伸缩瓶颈）。在ThreadPoolExecutor完成预热之后（当前运行的线程数大于等于corePoolSize），几乎所有的execute()方法调用都是执行步骤2，而步骤2不需要获取全局锁。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;线程池任务 拒绝策略包括 &lt;strong&gt;抛异常&lt;/strong&gt;、&lt;strong&gt;直接丢弃&lt;/strong&gt;、&lt;strong&gt;丢弃队列中最老的任务&lt;/strong&gt;、&lt;strong&gt;将任务分发给调用线程处理&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;线程池的创建&lt;/strong&gt;：通过ThreadPoolExecutor来创建一个线程池。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, timeUnit, runnableTaskQueue, handler);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;创建一个线程池时需要输入以下几个参数：&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;corePoolSize（线程池的基本大小）：当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到线程池的线程数等于线程池基本大小时就不再创建。如果调用了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有基本线程。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;maximumPoolSize（线程池最大数量）：线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。值得注意的是，如果使用了无界的任务队列这个参数就没什么效果。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;keepAliveTime（线程活动保持时间）：线程池的工作线程空闲后，保持存活的时间。所以，如果任务很多，并且每个任务执行的时间比较短，可以调大时间，提高线程的利用率。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;TimeUnit（线程活动保持时间的单位）：可选的单位有天（DAYS）、小时（HOURS）、分钟（MINUTES）、毫秒（MILLISECONDS）、微秒（MICROSECONDS，千分之一毫秒）和纳秒（NANOSECONDS，千分之一微秒）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;runnableTaskQueue（任务队列）：用于保存等待执行的任务的阻塞队列。可以选择以下几个阻塞队列。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;- ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按FIFO（先进先出）原则对元素进行排序。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;LinkedBlockingQueue：一个基于链表结构的阻塞队列，此队列按FIFO排序元素，吞吐量通常要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;SynchronousQueue：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue，静态工厂方法Executors.newCachedThreadPool使用了这个队列。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;PriorityBlockingQueue：一个具有优先级的无界阻塞队列。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;线程的状态&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;在HotSpot VM线程模型中，Java线程被一对一映射到本地系统线程，Java线程启动时会创建一个本地系统线程；当Java线程终止时，这个本地系统线程也会被回收。操作系统调度所有线程并把它们分配给可用的CPU。&lt;/p&gt;&lt;p&gt;thread运行周期中，有以下6种状态，在 java.lang.Thread.State 中有详细定义和说明：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Thread类&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; State {&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 刚创建尚未运行&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    NEW,&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 可运行状态，该状态表示正在JVM中处于运行状态，不过有可能是在等待其他资源，比如CPU时间片，IO等待&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    RUNNABLE,&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 阻塞状态表示等待monitor锁（阻塞在等待monitor锁或者在调用Object.wait方法后重新进入synchronized块时阻塞）&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    BLOCKED,&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 等待状态，发生在调用Object.wait、Thread.join (with no timeout)、LockSupport.park&lt;br/&gt;     * 表示当前线程在等待另一个线程执行某种动作，比如Object.notify()、Object.notifyAll()，Thread.join表示等待线程执行完成&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    WAITING,&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 超时等待，发生在调用Thread.sleep、Object.wait、Thread.join (in timeout)、LockSupport.parkNanos、LockSupport.parkUntil&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    TIMED_WAITING,&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     *线程已执行完成，终止状态&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    TERMINATED;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;线程池操作&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;向线程池提交任务，可以使用两个方法向线程池提交任务，分别为execute()和submit()方法。execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功。通过以下代码可知execute()方法输入的任务是一个Runnable类的实例。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;threadsPool.execute(&lt;span&gt;new&lt;/span&gt; Runnable() {&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;submit()方法用于提交需要返回值的任务。线程池会返回一个future类型的对象，通过这个future对象可以判断任务是否执行成功，通过future的get()方法来获取返回值，future的get()方法会阻塞当前线程直到任务完成，而使用get（long timeout，TimeUnit unit）方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务还没有执行完。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Future&amp;lt;Object&amp;gt; future = executor.submit(harReturnValuetask);&lt;br/&gt;&lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;    Object s = future.get();&lt;br/&gt;} &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;    &lt;span&gt;// 处理中断异常&lt;/span&gt;&lt;br/&gt;} &lt;span&gt;catch&lt;/span&gt; (ExecutionException e) {&lt;br/&gt;    &lt;span&gt;// 处理无法执行任务异常&lt;/span&gt;&lt;br/&gt;} &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// 关闭线程池&lt;/span&gt;&lt;br/&gt;    executor.shutdown();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;合理配置线程池&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;要想合理配置线程池，必须先分析任务的特点，可以从以下几个角度分析：&lt;/p&gt;&lt;p&gt;性质不同的任务可以用不同规模的线程池分开处理。CPU密集型任务应配置尽可能少的线程，如配置Ncpu+1个线程的线程池。由于IO密集型任务线程并不是一直在执行任务，则应配置多一点线程，如2*Ncpu。混合型的任务，如果可以拆分，将其拆分成一个CPU密集型任务和一个IO密集型任务，只要这两个任务执行的时间相差不是太大，那么分解后执行的吞吐量将高于串行执行的吞吐量。如果这两个任务执行时间相差太大，则没必要进行分解。可以通过Runtime.getRuntime().availableProcessors()方法获得当前设备的CPU个数。&lt;/p&gt;&lt;p&gt;优先级不同的任务可以使用优先级队列&lt;strong&gt;PriorityBlockingQueue&lt;/strong&gt;来处理。它可以让优先级高的任务先执行。执行时间不同的任务可以交给不同规模的线程池来处理，或者可以使用优先级队列，让执行时间短的任务先执行。依赖数据库连接池的任务，因为线程提交SQL后需要等待数据库返回结果，等待的时间越长，则CPU空闲时间就越长，那么线程数应该设置得越大，这样才能更好地利用CPU。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;线程池中线程数量未达到coreSize时，这些线程处于什么状态？&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这些线程处于RUNNING或者WAITING，RUNNING表示线程处于运行当中，WAITING表示线程阻塞等待在阻塞队列上。当一个task submit给线程池时，如果当前线程池线程数量还未达到coreSize时，会创建线程执行task，否则将任务提交给阻塞队列，然后触发线程执行。（从submit内部调用的代码也可以看出来）&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6526548672566371&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jOD3PUUxTibMoBzhvMx0xbu7cXpjyWBXMuep0rdzx1icxm1xSShebibnUTtV5vgZuDcGZPI1YGmJ4pRibHzPACoAQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;452&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;ScheduledThreadPoolExecutor&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;ScheduledThreadPoolExecutor继承自ThreadPoolExecutor。它主要用来在给定的延迟之后运行任务，或者定期执行任务。ScheduledThreadPoolExecutor的功能与Timer类似，但ScheduledThreadPoolExecutor功能更强大、更灵活。Timer对应的是单个后台线程，而ScheduledThreadPoolExecutor可以在构造函数中指定多个对应的后台线程数。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9209932279909706&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jOD3PUUxTibMoBzhvMx0xbu7cXpjyWBXMuiaHusXfjPicW0JIqs8xkXp0evETFvalz2o8LAEw4C67LfNA5HXWP78A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;443&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;ScheduledThreadPoolExecutor继承自ThreadPoolExecutor，ScheduledThreadPoolExecutor和ThreadPoolExecutor的区别是，ThreadPoolExecutor获取任务时是从BlockingQueue中获取的，而ScheduledThreadPoolExecutor是从DelayedWorkQueue中获取的（注意，DelayedWorkQueue是BlockingQueue的实现类）。&lt;/p&gt;&lt;p&gt;ScheduledThreadPoolExecutor把待调度的任务（ScheduledFutureTask）放到一个DelayQueue中，其中ScheduledFutureTask主要包含3个成员变量：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4896810506566604&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jOD3PUUxTibMoBzhvMx0xbu7cXpjyWBXMHvAQwOJa0NIatEG7QhsuroP3iaEnEKosbM0QCywCibaK5u60obbsaQCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;533&quot;/&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;sequenceNumber：任务被添加到ScheduledThreadPoolExecutor中的序号；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;time：任务将要被执行的具体时间；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;period：任务执行的间隔周期。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;ScheduledThreadPoolExecutor会把待执行的任务放到工作队列DelayQueue中，DelayQueue封装了一个PriorityQueue，PriorityQueue会对队列中的ScheduledFutureTask进行排序，具体的排序比较算法实现如下：&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.604989604989605&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jOD3PUUxTibMoBzhvMx0xbu7cXpjyWBXMiaqBRgmib83YVl2NFUic1MrlqhH62Ds6TMzpHric45AGc9DGJCV8JsYZxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;481&quot;/&gt;&lt;/p&gt;&lt;p&gt;ScheduledFutureTask在DelayQueue中被保存在一个PriorityQueue（基于数组实现的优先队列，类似于堆排序中的优先队列）中，在往数组中添加/移除元素时，会调用siftDown/siftUp来进行元素的重排序，保证元素的优先级顺序。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DelayedWorkQueue&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;AbstractQueue&lt;/span&gt;&amp;lt;&lt;span&gt;Runnable&lt;/span&gt;&amp;gt;&lt;br/&gt;    &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BlockingQueue&lt;/span&gt;&amp;lt;&lt;span&gt;Runnable&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; INITIAL_CAPACITY = &lt;span&gt;16&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RunnableScheduledFuture&amp;lt;?&amp;gt;[] queue =&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; RunnableScheduledFuture&amp;lt;?&amp;gt;[INITIAL_CAPACITY];&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ReentrantLock lock = &lt;span&gt;new&lt;/span&gt; ReentrantLock();&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; size = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Thread leader = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Condition available = lock.newCondition();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从DelayQueue获取任务的主要逻辑就在take()方法中，首选获取lock，然后获取queue[0]，如果为null则await等待任务的来临，如果非null查看任务是否到期，是的话就执行该任务，否则再次await等待。这里有一个leader变量，用来表示当前进行awaitNanos等待的线程，如果leader非null，表示已经有其他线程在进行awaitNanos等待，自己await等待，否则自己进行awaitNanos等待。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// DelayedWorkQueue&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; RunnableScheduledFuture&amp;lt;?&amp;gt; take() &lt;span&gt;throws&lt;/span&gt; InterruptedException {&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; ReentrantLock lock = &lt;span&gt;this&lt;/span&gt;.lock;&lt;br/&gt;    lock.lockInterruptibly();&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (;;) {&lt;br/&gt;            RunnableScheduledFuture&amp;lt;?&amp;gt; first = queue[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (first == &lt;span&gt;null&lt;/span&gt;)&lt;br/&gt;                available.await();&lt;br/&gt;            &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;long&lt;/span&gt; delay = first.getDelay(NANOSECONDS);&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (delay &amp;lt;= &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;                    &lt;span&gt;return&lt;/span&gt; finishPoll(first);&lt;br/&gt;                first = &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;// don&#x27;t retain ref while waiting&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (leader != &lt;span&gt;null&lt;/span&gt;)&lt;br/&gt;                    available.await();&lt;br/&gt;                &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                    Thread thisThread = Thread.currentThread();&lt;br/&gt;                    leader = thisThread;&lt;br/&gt;                    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                        available.awaitNanos(delay);&lt;br/&gt;                    } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;                        &lt;span&gt;if&lt;/span&gt; (leader == thisThread)&lt;br/&gt;                            leader = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;                    }&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (leader == &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; queue[&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;null&lt;/span&gt;)&lt;br/&gt;            available.signal();&lt;br/&gt;        lock.unlock();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获取到任务之后，就会执行task的run()方法了，即ScheduledFutureTask.run()：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;boolean&lt;/span&gt; periodic = isPeriodic();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!canRunInCurrentRunState(periodic))&lt;br/&gt;        cancel(&lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (!periodic)&lt;br/&gt;        ScheduledFutureTask.&lt;span&gt;super&lt;/span&gt;.run();&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (ScheduledFutureTask.&lt;span&gt;super&lt;/span&gt;.runAndReset()) {&lt;br/&gt;        setNextRunTime();&lt;br/&gt;        reExecutePeriodic(outerTask);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4b46b9db53b295a3bb11afb56250d942</guid>
<title>[推荐] MyBatis 的本质和原理</title>
<link>https://toutiao.io/k/613ifih</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    项目需要，我们需要自己做一套mybatis，或者使用大部分mybatis的原始内容。对其改造，以适应需要。这就要求我再次学习一下mybatis，对它有更深入的了解。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;是什么&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;    MyBatis是一个持久层框架，用来处理对象关系映射。说白了就是以相对面向对象的方式来提交sql语句给jdbc。如果想找个简单、快速上手的例子，最好是和spring想结合的。直接用官网的吧，简单清晰也没谁了：http://mybatis.org/spring/getting-started.html&lt;/p&gt;&lt;p&gt;https://mybatis.org/mybatis-3/getting-started.html&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;为什么&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    Java开发都是面向对象的思维，如果用传统下面自己去调用连接拼装sql的方式，维护成本高，代码可读性差。&lt;/p&gt;&lt;pre&gt;&lt;span&gt;public static void &lt;/span&gt;&lt;span&gt;main&lt;/span&gt;(String[] args) {&lt;br/&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据&lt;/span&gt;&lt;span&gt;库连&lt;/span&gt;&lt;span&gt;接&lt;/span&gt;&lt;span&gt;对&lt;/span&gt;&lt;span&gt;象&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;Connection conn = &lt;span&gt;null;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据&lt;/span&gt;&lt;span&gt;库&lt;/span&gt;&lt;span&gt;操作&lt;/span&gt;&lt;span&gt;对&lt;/span&gt;&lt;span&gt;象&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;PreparedStatement stmt = &lt;span&gt;null;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;//1&lt;/span&gt;&lt;span&gt;、加&lt;/span&gt;&lt;span&gt;载驱动&lt;/span&gt;&lt;span&gt;程序&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;try &lt;/span&gt;{&lt;br/&gt;        Class.&lt;span&gt;forName&lt;/span&gt;(&lt;span&gt;DBDRIVER&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;} &lt;span&gt;catch &lt;/span&gt;(ClassNotFoundException e) {&lt;br/&gt;        e.printStackTrace()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;br/&gt;    &lt;span&gt;//2&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;连&lt;/span&gt;&lt;span&gt;接数据&lt;/span&gt;&lt;span&gt;库&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通&lt;/span&gt;&lt;span&gt;过连&lt;/span&gt;&lt;span&gt;接管理器&lt;/span&gt;&lt;span&gt;连&lt;/span&gt;&lt;span&gt;接数据&lt;/span&gt;&lt;span&gt;库&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;try &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在&lt;/span&gt;&lt;span&gt;连&lt;/span&gt;&lt;span&gt;接的&lt;/span&gt;&lt;span&gt;时&lt;/span&gt;&lt;span&gt;候直接&lt;/span&gt;&lt;span&gt;输&lt;/span&gt;&lt;span&gt;入用&lt;/span&gt;&lt;span&gt;户&lt;/span&gt;&lt;span&gt;名和密&lt;/span&gt;&lt;span&gt;码&lt;/span&gt;&lt;span&gt;才可以&lt;/span&gt;&lt;span&gt;连&lt;/span&gt;&lt;span&gt;接&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;conn = DriverManager.&lt;span&gt;getConnection&lt;/span&gt;(&lt;span&gt;DBURL&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;USERNAME&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;PASSWORD&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;} &lt;span&gt;catch &lt;/span&gt;(SQLException e) {&lt;br/&gt;        e.printStackTrace()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;br/&gt;    &lt;span&gt;//3&lt;/span&gt;&lt;span&gt;、向数据&lt;/span&gt;&lt;span&gt;库&lt;/span&gt;&lt;span&gt;中插入一条数据&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;String sql = &lt;span&gt;&quot;INSERT INTO person(name,age) VALUES (?,?)&quot;&lt;/span&gt;&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    try &lt;/span&gt;{&lt;br/&gt;        stmt = conn.prepareStatement(sql)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;stmt.setString(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;陈&lt;/span&gt;&lt;span&gt;昆&lt;/span&gt;&lt;span&gt;仑&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;stmt.setInt(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;stmt.executeQuery()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;} &lt;span&gt;catch &lt;/span&gt;(SQLException e) {&lt;br/&gt;        e.printStackTrace()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;br/&gt;    &lt;span&gt;//4&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;执&lt;/span&gt;&lt;span&gt;行&lt;/span&gt;&lt;span&gt;语&lt;/span&gt;&lt;span&gt;句&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;try &lt;/span&gt;{&lt;br/&gt;        ResultSet resultSet = stmt.executeQuery()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;} &lt;span&gt;catch &lt;/span&gt;(SQLException e) {&lt;br/&gt;        e.printStackTrace()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;br/&gt;    &lt;span&gt;//5&lt;/span&gt;&lt;span&gt;、关&lt;/span&gt;&lt;span&gt;闭&lt;/span&gt;&lt;span&gt;操作，步&lt;/span&gt;&lt;span&gt;骤&lt;/span&gt;&lt;span&gt;相反哈&lt;/span&gt;&lt;span&gt;~&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;try &lt;/span&gt;{&lt;br/&gt;        stmt.close()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;conn.close()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;} &lt;span&gt;catch &lt;/span&gt;(SQLException e) {&lt;br/&gt;        e.printStackTrace()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;br/&gt;}&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;怎么做&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;    我们来看一下底层是怎么处理和交互的。基本流程如下：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8kINd9hW6JctZMvRNg5GibNvYQySUAKMgmDiaib46wVLhFZuYU1ZA4cGxIRvD4KIIyiaIVNJoCAdUNFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.1336971350613916&quot; data-w=&quot;733&quot;/&gt;&lt;/p&gt;&lt;p&gt;    看着头大？没事，我们先从最简化的版本开始添枝加叶。MyBatis可以用配置文件或者注解形式注入sql。因为配置文件方式可以方便的处理动态SQL(动态SQL就是sql语句里有if else for这些的，可以根据参数的变化最终sql也跟着变化)等优点，用的更为普遍。&lt;/p&gt;&lt;p&gt;    假设现在是2000年，Clinton Begin还没有发起ibatis(mybatis的前身)项目。而apache基金会内部发起了讨论要设计这样一个产品，指派你作为项目负责人。现在思考，你的思路是什么？&lt;/p&gt;&lt;p&gt;    一般思路是先把架构搭建起来，做成一个MVP最小可行性版本，然后再做功能增强。&lt;/p&gt;&lt;p&gt;    从功能最简化方面来看，需要两步：第一步要将sql及所需要的元素以对象的形式输入，第二步是获取到这些信息转换成jdbc信息处理。&lt;/p&gt;&lt;p&gt;    这样拆解后的思路是将sql及所需要的元素拆解成类方法的参数形式，方法本身要做的事情就是将这些参数以jdbc编程需要的形式传给jdbc执行。这里方法内部做的事情是一样的，那就自然而然的想到不用每个类都有一个实现。只要定义好接口，把实现用代理或者上层切面的方式统一处理就可以了。&lt;/p&gt;&lt;p&gt;    根据这个思路，首先要用代理来获取参数。我设计使用方式是Insert、Select等注解里写sql元语句。通过方法参数注入参数。最终返回结果。如下&lt;/p&gt;&lt;pre&gt;&lt;span&gt;public interface &lt;/span&gt;UserMapper {&lt;br/&gt;&lt;/pre&gt;&lt;pre&gt;    &lt;span&gt;@Insert&lt;/span&gt;(&lt;span&gt;&quot;INSERT INTO person(name,age) VALUES (#{name},#{age})&quot;&lt;/span&gt;)&lt;br/&gt;    Integer &lt;span&gt;insertUser&lt;/span&gt;(User user)&lt;span&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span/&gt;}&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;    要实现接口的解析。先建立一个类，里面构造一个代理类，实现类似于SqlSession，所以起名叫YunaSession（yuna是我给经典java学习场景工程https://github.com/xiexiaojing/yuna 起的名字）&lt;/p&gt;&lt;pre&gt;&lt;span&gt;public class &lt;/span&gt;YunaSession {&lt;br/&gt;   &lt;span&gt;public static &lt;/span&gt;Object &lt;span&gt;dealSql&lt;/span&gt;(Class clazz) {&lt;br/&gt;       Class c[] = &lt;span&gt;new &lt;/span&gt;Class[]{clazz}&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;p&gt;&lt;span&gt;       return &lt;/span&gt;Proxy.&lt;span&gt;newProxyInstance&lt;/span&gt;(YunaSession.&lt;span&gt;class&lt;/span&gt;.getClassLoader()&lt;span&gt;, &lt;/span&gt;c&lt;span&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;new &lt;/span&gt;YunaInvocationHandler())&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;span&gt;   &lt;/span&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;    下面要实现的是代理中YunaInvocationHandler真正要实现的逻辑：将这些参数以jdbc编程需要的形式传给jdbc执行。也就是说把上面【为什么】部分一开始的那段执行jdbc的代码贴进去，将sql和参数的部分做替换。&lt;/p&gt;&lt;p&gt;     我们把关键再贴一遍便于说明问题&lt;/p&gt;&lt;pre&gt;&lt;span&gt;//3&lt;/span&gt;&lt;span&gt;、向数据&lt;/span&gt;&lt;span&gt;库&lt;/span&gt;&lt;span&gt;中插入一条数据&lt;br/&gt;&lt;/span&gt;String sql = &lt;span&gt;&quot;INSERT INTO person(name,age) VALUES (?,?)&quot;&lt;/span&gt;&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;try &lt;/span&gt;{&lt;br/&gt;    stmt = conn.prepareStatement(sql)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;stmt.setString(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;陈&lt;/span&gt;&lt;span&gt;昆&lt;/span&gt;&lt;span&gt;仑&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;stmt.setInt(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;stmt.executeQuery()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;} &lt;span&gt;catch &lt;/span&gt;(SQLException e) {&lt;br/&gt;    e.printStackTrace()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;p&gt;    这里有两个?，而jdbc的预处理语句传入参数的时候要明确的知道第一个参数的类型是什么，如果传过来是对象的话，要知道对应对象的哪个值。这就是为什么接口里的预处理语句传入是&lt;/p&gt;&lt;pre&gt;&lt;span&gt;INSERT INTO person(name,age) VALUES (#{name},#{age})&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;    因为可以通过匹配#{XX}这样的确定都是哪些参数，因为User对象里有定义参数的类型。所以类型和值都确定了。这个就是MappedStatement对象做的事情。以下是用正则表达式匹配+反射来达到解析sql并和对象值做匹配的实现：&lt;/p&gt;&lt;pre&gt;&lt;span&gt;public static void &lt;/span&gt;&lt;span&gt;main&lt;/span&gt;(String[] args) &lt;span&gt;throws &lt;/span&gt;Exception{&lt;br/&gt;    Matcher m= &lt;span&gt;pattern&lt;/span&gt;.matcher(&lt;span&gt;&quot;INSERT INTO person(name,age) VALUES (#{name},#{age})&quot;&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;User user1 = &lt;span&gt;new &lt;/span&gt;User()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;user1.setId(&lt;span&gt;1&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;user1.setName(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;贾&lt;/span&gt;&lt;span&gt;元春&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;user1.setAge(&lt;span&gt;27&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    int &lt;/span&gt;i=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    while&lt;/span&gt;(m.find()) {&lt;br/&gt;        System.&lt;span&gt;out&lt;/span&gt;.println(m.group())&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;String group = m.group()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;String fieldName = group.replace(&lt;span&gt;&quot;#{&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;).replace(&lt;span&gt;&quot;}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;Field field = User.&lt;span&gt;class&lt;/span&gt;.getDeclaredField(fieldName)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;field.setAccessible(&lt;span&gt;true&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        if&lt;/span&gt;(&lt;span&gt;&quot;java.lang.Integer&quot;&lt;/span&gt;.equals(field.getType().getName())) {&lt;br/&gt;            System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;stmt.setInt(&quot;&lt;/span&gt;+i+&lt;span&gt;&quot;,&quot;&lt;/span&gt;+field.get(user1)+&lt;span&gt;&quot;)&quot;&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;} &lt;span&gt;else if&lt;/span&gt;(&lt;span&gt;&quot;java.lang.String&quot;&lt;/span&gt;.equals(field.getType().getName())) {&lt;br/&gt;            System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot; stmt.setString(&quot;&lt;/span&gt;+i+&lt;span&gt;&quot;,&quot;&lt;/span&gt;+field.get(user1)+&lt;span&gt;&quot;)&quot;&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;br/&gt;        i++&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;br/&gt;}&lt;/pre&gt;&lt;p&gt;运行结果是&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7423469387755102&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicPPxcYCb63l1j0KiaRkeQmuXvCSdnab1V0YLVt2ibCDGIrW6Up2b6QAKJMR0jApnicUVYaOb8l4o6xA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;392&quot;/&gt;&lt;/p&gt;&lt;p&gt;可以看到实现了效果。下面就是和jdbc连接结合起来。&lt;/p&gt;&lt;pre&gt;&lt;span&gt;public class &lt;/span&gt;YunaInvocationHandler &lt;span&gt;implements &lt;/span&gt;InvocationHandler {&lt;br/&gt;    &lt;span&gt;public static final &lt;/span&gt;String &lt;span&gt;DBDRIVER &lt;/span&gt;= &lt;span&gt;&quot;org.xx.mm.mysql.Driver&quot;&lt;/span&gt;&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    public static final &lt;/span&gt;String &lt;span&gt;DBURL &lt;/span&gt;= &lt;span&gt;&quot;jdbc:mysql://localhost:3306/mydb&quot;&lt;/span&gt;&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;现&lt;/span&gt;&lt;span&gt;在使用的是&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;数据&lt;/span&gt;&lt;span&gt;库&lt;/span&gt;&lt;span&gt;，是直接&lt;/span&gt;&lt;span&gt;连&lt;/span&gt;&lt;span&gt;接的，所以此&lt;/span&gt;&lt;span&gt;处&lt;/span&gt;&lt;span&gt;必&lt;/span&gt;&lt;span&gt;须&lt;/span&gt;&lt;span&gt;有用&lt;/span&gt;&lt;span&gt;户&lt;/span&gt;&lt;span&gt;名和密&lt;/span&gt;&lt;span&gt;码&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;public static final &lt;/span&gt;String &lt;span&gt;USERNAME &lt;/span&gt;= &lt;span&gt;&quot;root&quot;&lt;/span&gt;&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    public static final &lt;/span&gt;String &lt;span&gt;PASSWORD &lt;/span&gt;= &lt;span&gt;&quot;mysqladmin&quot;&lt;/span&gt;&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;@Override&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;public &lt;/span&gt;Object &lt;span&gt;invoke&lt;/span&gt;(Object proxy&lt;span&gt;, &lt;/span&gt;Method method&lt;span&gt;, &lt;/span&gt;Object[] args) &lt;span&gt;throws &lt;/span&gt;Exception{&lt;br/&gt;        Object result = &lt;span&gt;null;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;Insert &lt;/span&gt;insert = method.getAnnotation(&lt;span&gt;Insert&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        if &lt;/span&gt;(insert != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            String sql = insert.value()[&lt;span&gt;0&lt;/span&gt;]&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;插入&lt;/span&gt;&lt;span&gt;语&lt;/span&gt;&lt;span&gt;句&lt;/span&gt;&lt;span&gt;为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+s)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;YunaSqlDeal yunaSqlDeal = &lt;span&gt;new &lt;/span&gt;YunaSqlDeal()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;yunaSqlDeal.&lt;span&gt;insert&lt;/span&gt;(s&lt;span&gt;, &lt;/span&gt;Arrays.&lt;span&gt;toString&lt;/span&gt;(args))&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;//1&lt;/span&gt;&lt;span&gt;、加&lt;/span&gt;&lt;span&gt;载驱动&lt;/span&gt;&lt;span&gt;程序&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;try &lt;/span&gt;{&lt;br/&gt;                Class.&lt;span&gt;forName&lt;/span&gt;(&lt;span&gt;DBDRIVER&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;} &lt;span&gt;catch &lt;/span&gt;(ClassNotFoundException e) {&lt;br/&gt;                e.printStackTrace()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;br/&gt;            &lt;span&gt;//2&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;连&lt;/span&gt;&lt;span&gt;接数据&lt;/span&gt;&lt;span&gt;库&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通&lt;/span&gt;&lt;span&gt;过连&lt;/span&gt;&lt;span&gt;接管理器&lt;/span&gt;&lt;span&gt;连&lt;/span&gt;&lt;span&gt;接数据&lt;/span&gt;&lt;span&gt;库&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据&lt;/span&gt;&lt;span&gt;库连&lt;/span&gt;&lt;span&gt;接&lt;/span&gt;&lt;span&gt;对&lt;/span&gt;&lt;span&gt;象&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;Connection conn = &lt;span&gt;null;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            try &lt;/span&gt;{&lt;br/&gt;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在&lt;/span&gt;&lt;span&gt;连&lt;/span&gt;&lt;span&gt;接的&lt;/span&gt;&lt;span&gt;时&lt;/span&gt;&lt;span&gt;候直接&lt;/span&gt;&lt;span&gt;输&lt;/span&gt;&lt;span&gt;入用&lt;/span&gt;&lt;span&gt;户&lt;/span&gt;&lt;span&gt;名和密&lt;/span&gt;&lt;span&gt;码&lt;/span&gt;&lt;span&gt;才可以&lt;/span&gt;&lt;span&gt;连&lt;/span&gt;&lt;span&gt;接&lt;br/&gt;&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;conn = DriverManager.&lt;span&gt;getConnection&lt;/span&gt;(&lt;span&gt;DBURL&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;USERNAME&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;PASSWORD&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;} &lt;span&gt;catch &lt;/span&gt;(SQLException e) {&lt;br/&gt;                e.printStackTrace()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;br/&gt;            &lt;span&gt;composeStatement&lt;/span&gt;(sql&lt;span&gt;, &lt;/span&gt;args[&lt;span&gt;0&lt;/span&gt;]&lt;span&gt;, &lt;/span&gt;conn)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;br/&gt;    &lt;span&gt;private static final &lt;/span&gt;String &lt;span&gt;PATTERN &lt;/span&gt;= &lt;span&gt;&quot;#&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;{[A-Za-z0-9]+&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;}&quot;&lt;/span&gt;&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    private static &lt;/span&gt;Pattern &lt;span&gt;pattern &lt;/span&gt;= Pattern.&lt;span&gt;compile&lt;/span&gt;(&lt;span&gt;&quot;(&quot;&lt;/span&gt;+&lt;span&gt;PATTERN&lt;/span&gt;+&lt;span&gt;&quot;)&quot;&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    public static void &lt;/span&gt;&lt;span&gt;composeStatement&lt;/span&gt;(String sql&lt;span&gt;, &lt;/span&gt;Object obj&lt;span&gt;, &lt;/span&gt;Connection conn) &lt;span&gt;throws &lt;/span&gt;Exception{&lt;br/&gt;        PreparedStatement stmt = conn.prepareStatement(sql.replaceAll(&lt;span&gt;PATTERN&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;))&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;Matcher m= &lt;span&gt;pattern&lt;/span&gt;.matcher(sql)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        int &lt;/span&gt;i=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        while&lt;/span&gt;(m.find()) {&lt;br/&gt;            System.&lt;span&gt;out&lt;/span&gt;.println(m.group())&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;String group = m.group()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;String fieldName = group.replace(&lt;span&gt;&quot;#{&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;).replace(&lt;span&gt;&quot;}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;Field field = User.&lt;span&gt;class&lt;/span&gt;.getDeclaredField(fieldName)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;field.setAccessible(&lt;span&gt;true&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            if&lt;/span&gt;(&lt;span&gt;&quot;java.lang.Integer&quot;&lt;/span&gt;.equals(field.getType().getName())) {&lt;br/&gt;                System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;stmt.setInt(&quot;&lt;/span&gt;+i+&lt;span&gt;&quot;,&quot;&lt;/span&gt;+field.get(obj)+&lt;span&gt;&quot;)&quot;&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;stmt.setInt(i&lt;span&gt;, &lt;/span&gt;Integer.&lt;span&gt;parseInt&lt;/span&gt;(field.get(obj).toString()))&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;} &lt;span&gt;else if&lt;/span&gt;(&lt;span&gt;&quot;java.lang.String&quot;&lt;/span&gt;.equals(field.getType().getName())) {&lt;br/&gt;                stmt.setString(i&lt;span&gt;, &lt;/span&gt;field.get(obj).toString())&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;br/&gt;            i++&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;br/&gt;        stmt.execute()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;stmt.close()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;conn.close()&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;br/&gt;}&lt;/pre&gt;&lt;p&gt;    这个实现的是insert的，返回值类型固定，如果是select查询语句，涉及到返回的结果封装成对象。思路也是通过反射，和参数转换步骤差不多，就不贴代码了。&lt;/p&gt;&lt;p&gt;    到此，我们实现了一个简化版的mybatis框架。比贴的架构图简化在少用了很多设计模式的东西，和出于性能考虑重用的东西。mybatis的核心就实现完了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总结&lt;/p&gt;&lt;p&gt;    本文从mybatis的设计者角度出发，构造了一个简化的mybatis框架。具体可运行的完整代码放到了我的github上，地址：&lt;/p&gt;&lt;p&gt;https://github.com/xiexiaojing/yuna。&lt;/p&gt;&lt;p&gt;    很多原理性的东西看过之后会忘，但是如果真正站在设计者角度实现过一个简化的版本，相信会增强记忆。同时也能和真正的实现做对比，更深层学习技术大牛们的设计精华。&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>812f43f30aa83b4293fa0d1ffaf223c3</guid>
<title>[推荐] 走向卓越，领域驱动设计的思维方式</title>
<link>https://toutiao.io/k/n4lq0bo</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article tabindex=&quot;0&quot;&gt;&lt;p data-lake-id=&quot;cd353918583b40368f80dc49ca68eef7&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ee731f686343085ed735440c7219c806&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域驱动设计是一套方法论，是从业务视角对需求的分析，指导我们将复杂问题进行拆分，帮助我们解决大型复杂系统在落地中遇到的问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ee731f686343085ed735440c7219c806&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;领域驱动设计，要从繁杂的需求中找出确定的领域模型。基于统一明确的领域模型，在需求、产品、开发、测试等团队之间能够形成【统一语言】，降低需求对焦的成本。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;582ce846afeabbee849544463add7f73&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;7305d3cc357a397d4b2438737067f345&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2962962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlceAEs2eux2DT8R5Z959DP9w28cdP8LWwAr9Z5DE6PibTzEcwDN8M5ibWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;27&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;领域驱动的核心概念&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;7305d3cc357a397d4b2438737067f345&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;e11b2c905855197da5081586e5e96ea0&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域驱动设计提出的核心概念包括：域、子域、限界上下文、领域实体、值对象、领域服务、领域事件、聚合、工厂、资源库等。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;54499f02d5dc194fbe24915758ef58f0&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;13a314ed71afa0fc52039d4dc9031e0b&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域实体是指我们使用唯一的标识符跟踪具有重要业务意义的对象。实体代表的业务对象不变，但是会产生状态和业务属性的变更。实体一般和主要的业务/领域对象有一个直接的关系。一个实体的基本概念是一个持续抽象的生命，可以变化不同的状态和情形，但总是有相同的标识。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;04284d2e2899ccc5ab69f99ea9d2de30&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;645f74ec326d126c4ad4769d01f77c8a&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;值对象用来描述特征。值对象不需要唯一标识，通常只关心具体的属性。值对象用来表示临时的事物，或者实体的属性。如果两个对象的所有的属性值都相同，可以认为它们是同一个对象的话，那么我们就可以把这种对象设计为值对象。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;2751ae0018a05896bea1d1a9b8367e77&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;dfb20f34cb723b3f030d862f8332ccdf&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域服务代表的是一些商业逻辑或业务处理过程，并不和领域对象相关，涉及的领域概念通常不属于一个实体或者值对象。领域服务是无状态的，在领域服务中实现领域逻辑的调用。它存在的意义就是协调领域对象共同完成某个操作，所有的状态还是都保存在相应的领域对象中。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8931e856f4a6f17f6c93c4bac11fe0c0&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;46196b6f508d84575813965d59f0c532&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域事件代表的是系统中发生了什么，是一种特殊的值对象。领域事件由实体触发，通过事件解耦领域模型内部的一些依赖，会对领域模型中的其他部分产生业务影响。并不是所有的事件都是领域事件，领域事件必须对业务有价值，有助于形成完整的业务闭环，将导致进一步的业务操作。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;46196b6f508d84575813965d59f0c532&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b2e60ccc23453678553ef6d1cb5c643e&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;img data-height=&quot;439px&quot; data-ratio=&quot;0.44979508196721313&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlcLiaItPSDO3o2Zj67ZvHrhxFsGlQxOYZIZGuU9jzXP6RkveEgewHjdDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;976&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8b485678d0889ddd553e85ab7ce026c7&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f36b705045faec1233e1528b716c40d3&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;根据业务需要可以聚合实体和值对象，并围绕聚合定义边界。聚合作为一个整体来定义属性，选择一个实体作为聚合的根对象，只允许外部对象引用聚合的根对象。聚合内对象具有一致的生命周期，一旦聚合根对象消失，则聚合内其他对象也要消失。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ba01ea37edb668abf7b5d7703c653cc4&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9e348e51fa6ec3ed10247e13b0c0e4b0&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域驱动设计使用了工厂模式来构造聚合对象。工厂方法只能返回聚合对象，不能返回聚合内细分的实体和值对象，需要确保外界对聚合的引用一定是通过根对象实现的。通过工厂来分离聚合的构造和使用，保证业务一致性。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5e93906b498b005491360462edaa4c67&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4799073e495354f36eae14b75cafffbc&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;聚合的仓储通过资源库来实现。外部系统只能通过资源库访问聚合。一个聚合只能有一个资源库对象，也就是以聚合根对象命名的资源库，不能再提供其他的资源库。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e318c5fcd00dffa2af5d780b6a71c316&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8fc01e7e0f54c9dc2f5891cd15e40257&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;域和子域的划分是为了能够对复杂问题分而治之。在系统化思维中，特别强调系统中部分的划分和部分之间关系的处理。域的概念可以理解为系统化思维的一种实践。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8fc01e7e0f54c9dc2f5891cd15e40257&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;划分域后，可以简化认知、隔离域的变化、聚焦重点。一般通过观察业务流程、观察领域模型、观察分析过程，从业务视角出发来划分业务能力，实现域的定义和划分。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4c517bd4923fedf528bfb67fe8308e35&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;dca73cd89ad4b032f43c17774d6c7088&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;限界上下文是一个显式的边界，和子域的边界保持一致，如用户上下文（对应用户域）、支付上下文（对应支付域）。限界上下文能够明确领域模型的清晰的、达成共识的边界。边界不清晰常常引起诸多问题，如业务需求由哪个团队开发、模型定义放在哪个域。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1f1f05b82e88d8cb19345b1654daeb46&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;9341a06cc72cafb2696a62212722f285&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2962962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlceAEs2eux2DT8R5Z959DP9w28cdP8LWwAr9Z5DE6PibTzEcwDN8M5ibWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;27&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;领域驱动的架构设计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;9341a06cc72cafb2696a62212722f285&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;22a128d9543f96d2332ef5123c1d5d45&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;在一般的架构设计中，架构分层具有依赖关系。上层一定依赖于下层，下层为上层提供接口和服务。而在领域驱动设计中，推荐六边形架构来强化领域模型的重要地位。让外界系统服务于领域模型，实现领域内部的确定性。领域内部关注如何通过模型及其相关概念，在抽象的层次上把业务表达出来。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;449782fbca7928fec0bee0aa8e33cc8d&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;2df1c3cb9c088499d900b1a1496fffc1&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域模型定义接口，由其他层实现接口。整体的设计完全围绕领域模型进行。一般架构设计中都把基础设施作为最底层，并且通常认为基础设施具有确定性。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;2df1c3cb9c088499d900b1a1496fffc1&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;而在领域驱动设计中，对于基础设施（如数据持久化），由领域模型定义接口并由基础设施层实现接口。这样的设计保证领域模型对抽象有确定的定义，而基础设施作为六边形外围接口的实现可以随时替换。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5e1419225eddf2175a4b171fe72efb0e&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;7979316b42e362ea071350533489874c&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;img data-height=&quot;427px&quot; data-ratio=&quot;0.963882618510158&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlcXNqHWmd2HcOXicBzVGcmD2rwtKCqDHK0qFsibO5gd4uicJGpP8icEfjXLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;886&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;fbaaf3dca0955add2a0240eecfe0e51c&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;17219984c44596047d96d3dda6aa4ae0&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2962962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlceAEs2eux2DT8R5Z959DP9w28cdP8LWwAr9Z5DE6PibTzEcwDN8M5ibWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;27&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;领域驱动的事件风暴&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;17219984c44596047d96d3dda6aa4ae0&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;0ebc43d46554f0923a25d2dbafb48340&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;领域模型的定义是在需求分析过程中产生的。需求分析一般使用被称为【事件风暴】的分析方法。使用领域驱动设计的理念去做需求分析，意味着我们将把事件作为项目的中心。通过【事件风暴】可以发现完整的业务场景和潜在的遗漏点，可以建立端到端的共识，能够帮助梳理出测试用例。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a58641cdabc1433f9bb6023aa0df75ff&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e383f748a7e535638076f034d9e1c977&quot;&gt;&lt;span&gt;&lt;img data-height=&quot;612px&quot; data-ratio=&quot;0.356&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlc9ghGwhn303aEvbG0Picbbs59HtNoBmOC83uy1V1WyIs6bM3ibZXW73Fw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot; title=&quot;image&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;073a5daecddb1277742e6e730dedfd7e&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9cce8cd06962ec4494ab107d263b9846&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;事件的发生一般会对领域对象产生影响。因此【事件风暴】的分析步骤一般包括：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5b3ca5a99c295696b30ff19173991fac&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b0477ecd636f78cfff0e68fb551b3c91&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;通过【事件风暴】可以同步产出领域模型。任何在需求中出现的概念都要反应在领域模型中。如果需求中概念之间存在关系，则领域模型中也存在同样的关系。因此需求分析完成后，领域模型是自然而然产生的，统一语言也有了实现的基础。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ac728bd84c5f4d5335da2d5f7d78eea2&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;08d21af194b377e1a0d20b6f20374a9b&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;通过【事件风暴】还可以梳理出完整的业务场景。在显式明确领域模型后，常常可以发现模糊的需求或者产生新需求，能够明确看到需求的遗漏点。梳理出完整的场景后，测试用例也能同步产出，进一步在各个团队之间达成共识。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;86f879dbbf9c9814767edf9c222c61ae&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;615d8c3cbfc52a3bf3005ae9885b6b29&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2962962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlceAEs2eux2DT8R5Z959DP9w28cdP8LWwAr9Z5DE6PibTzEcwDN8M5ibWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;27&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;领域驱动的开发思维&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;615d8c3cbfc52a3bf3005ae9885b6b29&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;ae9f91aec50933ff6c44961cca96bb39&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;除了前面提到的概念外，领域驱动设计还影响了开发思维，也就是由外而内和测试先行。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8e02c96caa5684843a4b79c628ed6753&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;dd629b38ae1713486979992353308a48&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;由外而内是指开发代码从外部代码开始，以内部代码结束。外部的需求和场景具有确定性，能够提供关于系统的重要的信息。从外部代码开始开发，能够在开发中聚焦于当前层级代码，可以在到达内部代码时明确关键的细节，可以从更好的视角看清楚职责分配。也就是先确定代码需求，后实现代码。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;99ce058c163265002b0f4d7cbcec0857&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ee44b364c387d2ca28c7509393c5151e&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;测试先行是指在由外而内开发的基础上，用测试来表达设计契约。设计契约就是代码入参、出参、期望行为的一系列信息。在领域驱动设计中，倡导首先确认测试用例，写出测试代码，明确对业务代码的预期，然后再写业务代码。实际上，在领域模型探索和发现中，已经明确了测试用例范围。测试先行能够在早期发现业务代码问题，把缺陷暴露在修改成本最低的时候。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;c4d6843015cda568b3736c73d3d9f089&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;e5b96a4e0e3f6c6ff115d9b5e3ba4897&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2962962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3cfNeMrD2uweOUSqkMJuBjhRX6zNhQlceAEs2eux2DT8R5Z959DP9w28cdP8LWwAr9Z5DE6PibTzEcwDN8M5ibWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;27&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;e5b96a4e0e3f6c6ff115d9b5e3ba4897&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;014284314eb2607055f00d0fdeff0a01&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;本文初步整理了领域驱动设计的核心概念、架构设计、事件风暴和开发思维：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;6861d6d1f9ca488ba0dccf812c3ee3b5&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1b14da88f834e12fee29db5e52a1956b&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;关于领域驱动设计，网络上概念比较多，代码比较少。需要在工作中实践和思考才能体会领域驱动设计的精髓。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;推荐阅读：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwNDE2NTgzNQ==&amp;amp;mid=2247486219&amp;amp;idx=1&amp;amp;sn=16bb2f630411b669aeee9ca9c1902344&amp;amp;chksm=9b3152afac46dbb910202a25a6cf3ba7e9230423ff9101ee62b150e6629ec63d1b39df12c98a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;老旧系统重构技巧，轻松搞定遗留代码&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwNDE2NTgzNQ==&amp;amp;mid=2247486208&amp;amp;idx=1&amp;amp;sn=f533a64403750db67fff9cc4c8437120&amp;amp;chksm=9b3152a4ac46dbb2d326f7b382740f7d53fdf719d4f5e5d203c0e430b763bf4dfe6721fa4652&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;工作还好找吗？面试官的建议——阿里篇&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwNDE2NTgzNQ==&amp;amp;mid=2247486195&amp;amp;idx=1&amp;amp;sn=8bd8c7594e0a7999d08990fc417e095a&amp;amp;chksm=9b315357ac46da41316f637638886be750993067ce14728b7fad4868d0e21f07599038ad9451&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;被老程序员压榨怎么办？我不想辞职&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/article&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d704c46cf0ee3c346859f44ff6e7f5a1</guid>
<title>[推荐] 漫画面试回答 kafka 为何如此之快</title>
<link>https://toutiao.io/k/jeuqdr2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>