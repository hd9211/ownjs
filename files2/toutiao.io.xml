<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>62697c710c7c3ab713052d597a364dbb</guid>
<title>四种缓存的避坑总结</title>
<link>https://toutiao.io/k/fzh8zfu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;分布式、缓存、异步和多线程被称为互联网开发的四大法宝。今天我总结一下项目开发中常接触的四种缓存实际项目中遇到过的问题。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;JVM堆内缓存&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;JVM堆内缓存因为可以避免memcache、redis等集中式缓存网络通信故障问题，目前还在项目中广泛使用。&lt;/section&gt;&lt;section&gt;堆内缓存需要注意GC的问题。假如我们的设计是定时的从远程来拉取数据更新本地缓存。一定要注意两点：第一不要全量拉取覆盖，第二不要把一个大对象整体替换为新对象。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;先说全量拉取覆盖。全量拉取会有很大的网络开销，会造成网络流量尖刺。有人说没事，我们带宽很足，内网访问，不怕不怕。但是稳定性需要修炼的一项是削峰填谷。让系统在平稳的环境中运行。不然，在拉取大缓存新数据的数据突然来了个突发流量？根据墨菲定律，凡是有几率会发生的事情就一定会发生。编程需谨慎。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;再说大对象整体替换的问题，这会造成GC问题。伪代码如下：&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;List&amp;lt;POJO&amp;gt; oldList = initList();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;refresh&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      List&amp;lt;POJO&amp;gt; newList = dataFromNetworkService.getAll();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      oldList = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; List();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;(POJO pojo : newList) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          oldList.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(pojo);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;如果从网上拉取的数据和在缓存里存储的数据，对象类型没有发生改变。引起的转换开销还稍微小点。因为比如对象POJO存在一个列表里。这个列表虽然很大，但是里面存的都是对象的引用。实际的POJO并没有发生变化。上面伪代码虽然新建一个list对象，遍历添加新对象比直接oldList=newList要傻些。但是遍历过程实际上pojo对象没有发生改变。所以这里影响GC的只是oldList这个对象(不包括从网络上拉取回来数据的过程)。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;但是如果代码这样写：&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;List&amp;lt;POJO2&amp;gt; oldList = initList();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;refresh&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      List&amp;lt;POJO1&amp;gt; newList = dataFromNetworkService.getAll();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      oldList = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; List();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;(POJO2 pojo : newList) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          oldList.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(Beanutils.copy(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; POJO2(), pojo));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;遍历过程将会将原来的POJO1全部新建一遍，这些对象一般情况下全部先进入堆内存的新生代，再经过数次young gc后进入老年代。会造成GC频繁。&lt;/section&gt;&lt;section&gt;我所做过的项目，一般认为一天一到2次fullgc为合理值。这样，如果比如预先知道某个时间点有大促，可通过提前触发GC等方式避免高峰期爆发fullgc。younggc至少是5分钟一次，甚至更久触发认为是正常。这样可以通过控制避过秒杀等场景。&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;JVM堆外缓存&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;堆外缓存的内存回收原理使用的是Java的虚引用(参见&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485542&amp;amp;idx=1&amp;amp;sn=488be1c113af4a7fcb3ed9b3467c6a36&amp;amp;chksm=fafde2c8cd8a6bde14cf4a4ee3b84d966cd6318c3c20dfadee99dfc8e178c1f372e0faf1f334&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《Java的强引用、软引用、弱引用、虚引用》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《&lt;span&gt;Java的强引用、软引用、弱引用、虚引用&lt;/span&gt;&lt;span&gt;》&lt;/span&gt;&lt;/a&gt;)。这个设计可以避免JVM的GC问题，但是处理不好可能会造成更严重的后果：整个机器内存被打满，机器可能会挂掉。其实挂掉一台在一般企业的生产环境还好，因为一般都会有容灾的冗余机器。但是更常见的一种情况是机器忙于swap内存交换，机器活着但是响应很慢。属于半死不活。&lt;/section&gt;&lt;section&gt;这个问题我没在线上遇到过，但是我同事之前在超级大厂的时候遇到过。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;有的同学说那我严格算好内存，做好监控。这里面要就要依赖人为的因素来做紧急处理。而人是稳定性中最不可靠的。因为问题通常不发生在人清醒、手里事情很少的时候。而是一种雪上加霜的存在。比如大促时，流量上来了，线程数会增多，每个线程都会申请线程栈资源，系统处理IO，这时候系统会申请更多的buffers/cached内存。&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;linux的buffers/cached&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;linux系统上运行一下top 命令或者free命令，都能够看到buffers和cached相关的数据。需要注意的是通常我们看到的监控数据 空闲内存百分比，&lt;strong&gt;&lt;span&gt;并非是下面显示的free/total，而是(free+buffers+cached)/total&lt;/span&gt;&lt;/strong&gt;。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2880371660859466&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibhwOAibvHhIlcT097tJpGJ5Zib7bQUvibnfYDg4tiaFgMhptQ3tXMFGB0fI5e3bXWV514FBy5ic72faZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;861&quot;/&gt;&lt;/p&gt;&lt;section&gt;buffers在Linux系统中通常被作为与块存储的IO缓存使用。所谓块存储可简单理解为将数据直接写到裸磁盘。而cached则一般会用于文件系统的IO缓存。比如page cache这种内存换页功能。&lt;/section&gt;&lt;section&gt;听不明白也没关系，因为事实上它们两个经常配合使用。比如与磁盘交换数据、进行网络通信时都会用。buffers和cached是实实在在被操作系统的系统进程在使用的，但是如果用户进程需要可以很快释放。所以通常会将它算到剩余可用内存里。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;但是这个也要注意了。比如在IO密集型的系统，如果buffers/cached被大幅占用，会降低IO速度，进而降低系统吞吐。甚至有可能一个请求几秒才能到达应用程序，造成请求超时。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;集中式缓存&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;redis缓存其实也有本机代理，可以缓存一些活跃的数据在本机上，本机可以取到不数据时不需要跨网络通信。但是因为redis本质是key-value的结构。如果需要根据通配符取数据全量，如果网络出现故障，可能会影响数据的完整性。&lt;/section&gt;&lt;section&gt;但是redis缓存最让人担心的是不规范的使用方法。比如存一个很大的value。具体这个对网络和存储造成的问题就不详细说了。可以想象下马桶堵了的情景。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;贝尔实验室的面向对象编程专家&lt;span&gt;Tom Cargill&lt;/span&gt;说：&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;54&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;最初90%的开发工作将会用去你最初90%的开发时间。剩下的10%的开发量将会用去你另外一个90%的开发时间。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;我理解剩下10%占用了90%的时间是由于超出了原有知识贮备，需要临时抱佛脚，甚至需要拿着锤子找钉子造成的。所以&lt;span&gt;或者也可&lt;/span&gt;&lt;span&gt;以这样做：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;每周持续投入5%的学习时间，10%的思考时间，再用100%的时间去完成100%的开发。&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;相关阅读&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fb4550c3c40f54868ced5e5adfe00a76</guid>
<title>MySQL 查询性能优化前，必须先掌握 MySQL 索引理论</title>
<link>https://toutiao.io/k/klmrzk8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h1 cid=&quot;n0&quot; mdtype=&quot;heading&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;欢迎关注公众号【&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;Ccww技术博客&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;】，原创技术文章第一时间推出&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/h1&gt;&lt;hr/&gt;&lt;blockquote cid=&quot;n363&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n2370&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;越努力，越幸运，&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2370&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;本文已收藏在GitHub中&lt;/span&gt;&lt;span&gt;JavaCommunity&lt;/span&gt;&lt;span&gt;, 里面有面试分享、源码分析系列文章，欢迎收藏，点赞&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2370&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;https://github.com/Ccww-lx/JavaCommunity&lt;/span&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n2366&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n2377&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;数据库索引在平时的工作是必备的，怎么建好索引，怎么使用索引，可以提高数据的查询效率。而且在面试过程，数据库的索引也是必问的知识点，比如：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n2209&quot; mdtype=&quot;list&quot; data-mark=&quot;+&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n2211&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;索引底层结构选型，那为什么选择B+树？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n2213&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;不同存储引擎的索引的体现形式有哪些？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n2215&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;索引的类型&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n2224&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;覆盖索引是什么？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n2225&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;看着这些，能说出多少，理解多少呢？因此我们需要去探究其内在原理。&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n2226&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;那索引是什么？&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;索引的目的为了加速检索数据而设计的一种分散存储（索引常常很大，属于硬盘级的东西，所以是分散存储）的数据结构,其原理以空间换时间。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2228&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;快速检索的实现的本质是数据结构，通过不同数据结构的选择，实现各种数据快速检索，索引有哈希索引和B+树索引。&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n2229&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;索引底层结构选型，那为什么选择B+树？&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n2230&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;数据库索引底层选型归根到底就是为提高检索效率，那么就需要考虑几个问题：&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n2238&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n2239&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;NOTE：&lt;/strong&gt; 考虑到磁盘IO是非常高昂的操作，计算机操作系统做了一些优化，当一次IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内，因为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据也会很快被访问到。每一次IO读取的数据我们称之为一页(page)。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 cid=&quot;n2240&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;哈希表( Hash Table,散列表 )&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n2241&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt; 哈希表是根据键（Key）而直接访问在内存存储位置的数据结构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.41851106639839036&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgQtX9icARI9gQSSYrjhHNqoyWD4YXg8EJXk0MDPmiavDGEFW3KClicTwNsHhgU5tbrxBgbkmkmw24rg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;497&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n2243&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。虽然查询时间复杂度为&lt;em&gt;O&lt;/em&gt;(1)，但存在着碰撞问题，最坏情况会导致时间复杂急剧增加;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2244&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;而且哈希表其只适合精准key（等于）检索，不适合范围式检索，范围检索就需要一次把所有数据找出来加载到内存，没有效率，因此不适合Mysql的底层索引的数据结构。&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n2246&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;普通的二叉查找树&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n2247&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;为了优化高效范围查询，且时间复杂度小，引入二叉查找树&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6790697674418604&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgQtX9icARI9gQSSYrjhHNqoib3l8jgpye63DdRmiaBenEksGJRZuHdehicRPHk2OQUAkmh0ODmycXHSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;430&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n2249&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;     二叉查找树的时间复杂度是 O(lgn)，由于数据已排序好了，所以范围查询是可以高效查询，&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2250&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;但会存在的问题：左右子节点的深度可能相差很大，最极端的情况只有左子树或者右子树，此时查找的效率为O(n)，检索性能急剧下降，因此也不适合Mysql的底层索引的数据结构。&lt;span md-inline=&quot;tab&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.853763440860215&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgQtX9icARI9gQSSYrjhHNqogxvWze6E6BDCW3qGKRbLwLd5RBsQnoQ9hVAYK34fA0XHBicU6AP6Q9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;465&quot;/&gt;&lt;/p&gt;&lt;h4 cid=&quot;n2253&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;平衡二叉树（AVL树）&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n2254&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;为了优化二叉树左右子树深度相差太大的问题，我们引入了平衡二叉树，即左右子节点的深度差不超过1，平衡二叉树看来好像适合，实现了：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8902691511387164&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgQtX9icARI9gQSSYrjhHNqo6XAgJEtbiciaxNCDqTSeZdZTea0pNvbmdgXdEwNyMpn111BUpbdQGm1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;483&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p cid=&quot;n2260&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;NOTE:&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;上图中一个磁盘块，代表硬盘上的一个存储位置&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2260&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;但是我们还有一个最重要因素需要考虑，磁盘IO与预读，且数据库查询数据的瓶颈在于磁盘 IO,使用平衡二叉树根据索引进行查找时，每读一个磁盘块就进行一次IO，这样没有实现计算机的预读能力，导致检索效率下降，总结出平衡二叉树作为索引的问题&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n2266&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;B+树&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n2267&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;为了优化磁盘IO和预读，减少IO操作，条路太少了，那么换成多条路，那么会想到使用&lt;strong&gt;B树&lt;/strong&gt;和&lt;strong&gt;B+树&lt;/strong&gt;，但&lt;strong&gt;B树&lt;/strong&gt;每个节点限制最多存储两个 key，也会造成IO操作过于频繁，因此优化思路为：尽可能在一次磁盘 IO 中多读一点数据到内存，那么&lt;strong&gt;B+树&lt;/strong&gt;也该出场：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5032967032967033&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgQtX9icARI9gQSSYrjhHNqotYfwTH89WQ40WZLHic7LXCa1HPibKkNKm4zYibTw5c4flzUSbaybVibyrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;910&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p cid=&quot;n2275&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;  &lt;strong&gt;相对于B树，B+树的优势有&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n2289&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;索引的体现形式&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n2290&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;索引在不同的存储引擎中体现形式步一样， 最常见的是：&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n2296&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;聚集索引方式（InnoDB存储引擎）&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n2297&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;InnoDB存储引擎中，索引和数据是存放在同一个文件的，属于聚集索引 。而且InnoDB会自动建立好主键 ID 索引树, 因此建表时要求必须指定主键的原因。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2298&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;其中，主键索引（聚集索引）的叶子节点记录了数据，而不是数据的物理地址。辅助索引的叶子节点存放的是主键key。所以当利用辅助索引查找数据时，实际上查了两遍索引（辅助索引和主键索引）:&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n2299&quot; mdtype=&quot;list&quot; data-mark=&quot;+&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n2301&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;先查询辅助索引树找出主键&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n2303&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;然后在主键索引树中根据主键查询数据&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.1874105865522175&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgQtX9icARI9gQSSYrjhHNqo25pbichX1VIUN8yjgBf6Ckp2thbl37wp8AqfznZpsO3Cqs5BJrRSagA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;699&quot;/&gt;&lt;/p&gt;&lt;h4 cid=&quot;n2306&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;非聚集索引方式（Myisam存储引擎）&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n2307&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;Myisam存储引擎中，索引和数据是存放在两个文件中的，属于非聚集索引 。不管是主键索引还是辅助索引，其叶子节点都是记录了数据的物理地址。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7220744680851063&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgQtX9icARI9gQSSYrjhHNqoVF4n6lqUpbQfDJjD5PhqIk6CU1ibwbooxMqcb6TJlx7JagmNC0sDW1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;752&quot;/&gt;&lt;/p&gt;&lt;h3 cid=&quot;n2310&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;MySQL的索引类型&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n2311&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;MySQL索引可以分为：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2333&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;其中，主要理解一下联合索引的问题，存储结构，查询方式。&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n2334&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;联合索引&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n2335&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;联合索引，多个列组成的索引叫做联合索引，单列索引是特殊的联合索引。&lt;strong&gt;其存储结构如下：&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.605515587529976&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgQtX9icARI9gQSSYrjhHNqo0cJm8jnJFrWJZobxsAJmwttGSxZpmjia6aZFribibRwRvFopoP5DXDE8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;834&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2336&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;对于联合索引来说其存储结构只不过比单值索引多了几列，组合索引列数据都记录在索引树上，（不同的组合索引，B+树也是不同的），且存储引擎会首先根据第一个索引列排序后，其他列再依次将相等值的进行排序。&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n2339&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n2340&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;叶节点第一排，按顺序排序好，第二列，会基于第一列排序好的，将第一列相等的再下一列再排序，依次类推。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n2341&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;联合索引查询方式，存储引擎首先从根节点（一般常驻内存）开始查找，然后再依次在其他列中查询，直到找到该索引下的data元素即ID值，再从主键索引树上找到最终数据。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2342&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;而且联合索引其选择的原则：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n2343&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n2345&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;最左前缀匹配原则（经常使用的列优先）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n2347&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;离散度高的列优先&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n2349&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;宽度小的列优先&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 cid=&quot;n2350&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;最左前缀匹配原则&lt;/span&gt;&lt;/h5&gt;&lt;p cid=&quot;n2351&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;最左前缀匹配原则和联合索引的&lt;strong&gt;索引构建方式及存储结构&lt;/strong&gt;是有关系的。根据上述理解分析，可以得出联合索引只能从多列索引的第一列开始查找索引才会生效，比如:&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n2352&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n2353&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;假设表user上有个联合索引(a,b,c)，那么 select * from user where b = 1 and c = 2将不会命中索引&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2354&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;原因是联合索引的是存储引擎先按第一个字段排序，再按第二个字段排序，依次排序。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h5 cid=&quot;n2355&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;离散度&lt;/span&gt;&lt;/h5&gt;&lt;p cid=&quot;n2356&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;当索引中的一列离散度过低时，优化器可能直接不走索引，离散度计算方法：&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n2357&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n2358&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;离散度 = 列中不重复的数据量  /  这一列的总数据量&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n2359&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3 cid=&quot;n2360&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;覆盖索引&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n2361&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt; 如果一个索引包含(或覆盖)所有需要查询的字段的值，称为覆盖索，即只需扫描索引而无须回表查询 。&lt;strong&gt;覆盖索引可减少数据库IO，将随机IO变为顺序IO，可提高查询性能。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2362&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;对于InnoDB辅助索引在叶子节点中保存了行的主键值，所以如果辅助索引(包括联合索引)能够覆盖查询，则可以避免对主键索引的二次查询。比如：&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;sql&quot; cid=&quot;n2363&quot; mdtype=&quot;fences&quot;&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot;&gt;--创建联合索引&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;create&lt;/span&gt; index name_phone_idx &lt;span&gt;on&lt;/span&gt; user(name,phoneNum);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;--此时是覆盖索引，原因是根据name来查，命中索引name_phone_idx，&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;--其关键字为name,phoneNum，本身就已经包含了查询的列。&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;select&lt;/span&gt; name,phoneNum &lt;span&gt;where&lt;/span&gt; name = &lt;span&gt;&quot;张三&quot;&lt;/span&gt;;  &lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;--如果id为主键的话，此时也称作覆盖索引，原因：辅助索引的叶子节点存的就是主键&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;select&lt;/span&gt; id,name,phoneNum &lt;span&gt;where&lt;/span&gt; name = &lt;span&gt;&quot;张三&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;h3 cid=&quot;n2364&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n2365&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;MySQL的索引有很多知识点要掌握，已学习了索引的底层存储结构，不同存储引擎中的索引体现，以及索引类型的基础原理知识分析，可以为后续的数据库优化提供理论知识的支撑，也会更好的理解优化方案。后续会有优化篇章&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n2379&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n2382&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;谢谢各位点赞，没点赞的点个赞支持支持&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2382&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;最后，微信搜《Ccww技术博客》观看更多文章，也欢迎关注一波。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2382&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;https://segmentfault.com/img/bVcHt1K&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgQtX9icARI9gQSSYrjhHNqoU7RO1EbGj64bHzFUhNFJXsJcxjN1Jc1JFp6cicias9xCD2RT8sMxfTJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.36857142857142855&quot; data-w=&quot;350&quot;/&gt;&lt;/span&gt; &lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9cce9e7cd7c6923b1e41f43e6254a511</guid>
<title>AutoExcel 实现百万数据秒级导入导出</title>
<link>https://toutiao.io/k/ui65fqe</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;logged-out env-production page-responsive page-blob&quot; id=&quot;readabilityBody&quot;&gt;
    

    

  &lt;p id=&quot;start-of-content&quot; class=&quot;show-on-focus&quot;/&gt;





    


    

  &lt;include-fragment class=&quot;js-notification-shelf-include-fragment&quot; data-base-src=&quot;https://github.com/notifications/beta/shelf&quot;/&gt;




  &lt;div class=&quot;application-main &quot; data-commit-hovercards-enabled=&quot;&quot; data-discussion-hovercards-enabled=&quot;&quot; data-issue-and-pr-hovercards-enabled=&quot;&quot;&gt;
        &lt;div itemscope=&quot;&quot; itemtype=&quot;http://schema.org/SoftwareSourceCode&quot; class=&quot;&quot;&gt;
    &lt;main&gt;
      

    






  


  


&lt;div class=&quot;container-xl clearfix new-discussion-timeline px-3 px-md-4 px-lg-5&quot;&gt;
  &lt;div class=&quot;repository-content &quot;&gt;

    
      
  


    &lt;a class=&quot;d-none js-permalink-shortcut&quot; data-hotkey=&quot;y&quot; href=&quot;/feng-haitao/auto-excel/blob/1878ddc0afbadd45b23e702baa29a23b296a8320/README.zh.md&quot;&gt;Permalink&lt;/a&gt;

    
      &lt;signup-prompt class=&quot;signup-prompt-bg rounded-1&quot; data-prompt=&quot;signup&quot; data-optimizely-experiment=&quot;signup_prompt_launchpad&quot; hidden=&quot;&quot;&gt;
    &lt;div class=&quot;signup-prompt p-4 text-center mb-4 rounded-1&quot; data-optimizely-variation=&quot;control&quot;&gt;
      &lt;div class=&quot;position-relative&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;position-absolute top-0 right-0 btn-link link-gray&quot; data-action=&quot;click:signup-prompt#dismiss&quot; data-ga-click=&quot;(Logged out) Sign up prompt, clicked Dismiss, text:dismiss&quot; data-optimizely-event=&quot;click.dismiss_signup_prompt, 1922723437.1606955254&quot;&gt;
          Dismiss
        &lt;/button&gt;
        &lt;h3 class=&quot;pt-2&quot;&gt;Join GitHub today&lt;/h3&gt;
        &lt;p class=&quot;col-6 mx-auto&quot;&gt;GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.&lt;/p&gt;
        &lt;a class=&quot;btn btn-primary&quot; data-ga-click=&quot;(Logged out) Sign up prompt, clicked Sign up, text:sign-up&quot; data-optimizely-event=&quot;click.signup, 1922723437.1606955254&quot; data-hydro-click=&quot;{&amp;quot;event_type&amp;quot;:&amp;quot;authentication.click&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;location_in_page&amp;quot;:&amp;quot;files signup prompt&amp;quot;,&amp;quot;repository_id&amp;quot;:null,&amp;quot;auth_type&amp;quot;:&amp;quot;SIGN_UP&amp;quot;,&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/feng-haitao/auto-excel/blob/master/README.zh.md?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&amp;quot;,&amp;quot;user_id&amp;quot;:null}}&quot; data-hydro-click-hmac=&quot;75a67d253d908c00e3e2bd8972fe8979e31a2270acea9038607ce0e985749f36&quot; href=&quot;/join?source=prompt-blob-show&amp;amp;source_repo=feng-haitao%2Fauto-excel&quot;&gt;Sign up&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;position-relative p-4 p-lg-5 mb-4&quot; data-optimizely-variation=&quot;launchpad&quot; hidden=&quot;&quot;&gt;
      &lt;div class=&quot;d-sm-flex&quot;&gt;
        &lt;div class=&quot;col-sm-8 col-md-9 col-lg-8&quot;&gt;
          &lt;h3 class=&quot;h2 lh-condensed mt-sm-1 mt-lg-0&quot;&gt;GitHub is where the world builds software&lt;/h3&gt;
          &lt;p class=&quot;f4 text-gray mt-2 mb-3&quot;&gt;Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world.&lt;/p&gt;
          
        &lt;/div&gt;
        &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; preserveaspectratio=&quot;none&quot; viewbox=&quot;0 0 1680 40&quot; class=&quot;d-none d-sm-block position-absolute width-full&quot;&gt;&lt;path d=&quot;M0 40h1680V30S1340 0 840 0 0 30 0 30z&quot; fill=&quot;#fff&quot;/&gt;&lt;/svg&gt;

        
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/signup-prompt&gt;


    



    &lt;div class=&quot;Box d-flex flex-column flex-shrink-0 mb-3&quot;&gt;
      
  

  &lt;div class=&quot;Box-body d-flex flex-items-center flex-auto border-bottom-0 flex-wrap&quot;&gt;
    &lt;details class=&quot;details-reset details-overlay details-overlay-dark lh-default text-gray-dark float-left mr-3&quot; id=&quot;blob_contributors_box&quot;&gt;
      &lt;summary class=&quot;link-gray-dark&quot;&gt;
        &lt;svg class=&quot;octicon octicon-people text-gray&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M5.5 3.5a2 2 0 100 4 2 2 0 000-4zM2 5.5a3.5 3.5 0 115.898 2.549 5.507 5.507 0 013.034 4.084.75.75 0 11-1.482.235 4.001 4.001 0 00-7.9 0 .75.75 0 01-1.482-.236A5.507 5.507 0 013.102 8.05 3.49 3.49 0 012 5.5zM11 4a.75.75 0 100 1.5 1.5 1.5 0 01.666 2.844.75.75 0 00-.416.672v.352a.75.75 0 00.574.73c1.2.289 2.162 1.2 2.522 2.372a.75.75 0 101.434-.44 5.01 5.01 0 00-2.56-3.012A3 3 0 0011 4z&quot;/&gt;&lt;/svg&gt;
        &lt;strong&gt;1&lt;/strong&gt;
        
        contributor
      &lt;/summary&gt;
      &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast&quot; aria-label=&quot;Users who have contributed to this file&quot; src=&quot;/feng-haitao/auto-excel/contributors-list/master/README.zh.md&quot; preload=&quot;&quot;&gt;
        &lt;div class=&quot;Box-header&quot;&gt;
          &lt;button class=&quot;Box-btn-octicon btn-octicon float-right&quot; type=&quot;button&quot; aria-label=&quot;Close dialog&quot; data-close-dialog=&quot;&quot;&gt;
            &lt;svg class=&quot;octicon octicon-x&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;&lt;/svg&gt;
          &lt;/button&gt;
          &lt;h3 class=&quot;Box-title&quot;&gt;
            Users who have contributed to this file
          &lt;/h3&gt;
        &lt;/div&gt;
        &lt;include-fragment&gt;
          &lt;svg viewbox=&quot;0 0 16 16&quot; fill=&quot;none&quot; class=&quot;my-3 mx-auto d-block&quot;&gt;
  &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;7&quot; stroke=&quot;currentColor&quot; stroke-opacity=&quot;0.25&quot; stroke-width=&quot;2&quot; vector-effect=&quot;non-scaling-stroke&quot;/&gt;
  &lt;path d=&quot;M15 8a7.002 7.002 0 00-7-7&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; vector-effect=&quot;non-scaling-stroke&quot;&gt;
    &lt;animatetransform attributename=&quot;transform&quot; type=&quot;rotate&quot; from=&quot;0 8 8&quot; to=&quot;360 8 8&quot; dur=&quot;1s&quot; repeatcount=&quot;indefinite&quot;/&gt;
  &lt;/path&gt;
&lt;/svg&gt;
        &lt;/include-fragment&gt;
      &lt;/details-dialog&gt;
    &lt;/details&gt;
  &lt;/div&gt;
    &lt;/div&gt;






    &lt;div class=&quot;Box mt-3 position-relative&amp;#10;      &quot;&gt;
      
&lt;div class=&quot;Box-header py-2 d-flex flex-column flex-shrink-0 flex-md-row flex-md-items-center&quot;&gt;
  &lt;p class=&quot;text-mono f6 flex-auto pr-3 flex-order-2 flex-md-order-1 mt-2 mt-md-0&quot;&gt;

      69 lines (53 sloc)
      &lt;span class=&quot;file-info-divider&quot;/&gt;
    3.89 KB
  &lt;/p&gt;

  
&lt;/div&gt;

      
  &lt;div id=&quot;readme&quot; class=&quot;Box-body readme blob js-code-block-container p-5 p-xl-6 gist-border-0&quot;&gt;
    &lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;p&gt;中文 | &lt;a href=&quot;https://github.com/feng-haitao/auto-excel/blob/master/README.md&quot;&gt;English&lt;/a&gt; | &lt;a href=&quot;http://www.fenghaitao.net/autoexcel-user-manual&quot; rel=&quot;nofollow&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-为什么使用autoexcel&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#为什么使用autoexcel&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;为什么使用AutoExcel？&lt;/h2&gt;
&lt;p&gt;Excel导入导出在软件开发中非常常见，只要你接触过开发，就一定会遇到。相信很多人会跟我一样选择用Apache POI来完成这项工作，在感受到POI功能强大的同时，我的团队也遇到了以下问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接使用POI操作Excel将产生大量硬编码，你会在编码中写死行索引和列索引&lt;/li&gt;
&lt;li&gt;大量不可复用的格式控制编码，如背景色、对齐方式、单元格样式等&lt;/li&gt;
&lt;li&gt;实施顾问明明提供了现成的模板，却还要开发用代码实现一遍，开发效率低下&lt;/li&gt;
&lt;li&gt;模板调整时不得不动用开发资源&lt;/li&gt;
&lt;li&gt;简单的导出也需要写特定的代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;AutoExcel&lt;/strong&gt;解决了上述问题，它非常简单，只需要少量的代码即可完成复杂的导入导出；使用它时，程序员对导入导出无感，即不需要直接操作POI；与此同时，实施顾问提供的Excel即是导入导出模板，除非新增数据源或字段，否则模板更新不需要动用开发资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AutoExcel&lt;/strong&gt;并没有对POI进行过重的封装，而是充分利用了Excel本身具有的特性——名称管理器，通过一些小技巧，将单元格与数据源产生映射，从而解耦程序员与POI，避免产生硬编码，让导入导出工作变得愉快而不再是枯燥乏味。&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-特点&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#特点&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;模板导出
&lt;ul&gt;
&lt;li&gt;支持基础对象和表格数据&lt;/li&gt;
&lt;li&gt;单个sheet支持多个不定长数据源&lt;/li&gt;
&lt;li&gt;支持横向填充数据&lt;/li&gt;
&lt;li&gt;自动应用单元格样式&lt;/li&gt;
&lt;li&gt;自动填充行号&lt;/li&gt;
&lt;li&gt;自动填充公式&lt;/li&gt;
&lt;li&gt;自动汇总&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;直接导出

&lt;/li&gt;
&lt;li&gt;导入

&lt;/li&gt;
&lt;li&gt;支持百万数据秒级导入导出&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-功能预览&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#功能预览&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;功能预览&lt;/h2&gt;

&lt;p&gt;实现以上导出只需要编写以下少量代码（你需要额外的代码来准备数据源，例如从数据库中获取）&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;List&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;TemplateExportPara&lt;/span&gt;&amp;gt;&lt;/span&gt; paras &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;ArrayList&amp;lt;&amp;gt;&lt;/span&gt;();
paras&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;add(&lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;TemplateExportPara&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;BusinessUnit&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;DataGenerator&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;genBusinessUnit()));
paras&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;add(&lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;TemplateExportPara&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Contract&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;DataGenerator&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;genContracts()));
paras&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;add(&lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;TemplateExportPara&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Project&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;DataGenerator&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;genProjects()));

&lt;span class=&quot;pl-k&quot;&gt;List&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;Product&lt;/span&gt;&amp;gt;&lt;/span&gt; products &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;DataGenerator&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;genProducts();
&lt;span class=&quot;pl-smi&quot;&gt;TemplateExportPara&lt;/span&gt; para3 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;TemplateExportPara&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Product&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, products);
para3&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setInserted(&lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;);
paras&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;add(para3);

&lt;span class=&quot;pl-smi&quot;&gt;TemplateExportPara&lt;/span&gt; para5 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;TemplateExportPara&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Product2&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, products);
para5&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setDataDirection(&lt;span class=&quot;pl-smi&quot;&gt;DataDirection&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Right&lt;/span&gt;);
paras&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;add(para5);

&lt;span class=&quot;pl-smi&quot;&gt;ExcelSetting&lt;/span&gt; excelSetting &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ExcelSetting&lt;/span&gt;();
excelSetting&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setRemovedSheets(&lt;span class=&quot;pl-smi&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;asList(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;will be removed&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;));

&lt;span class=&quot;pl-smi&quot;&gt;AutoExcel&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;save(&lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getClass()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getResource(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/template/Common.xlsx&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getPath(),
               &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getClass()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getResource(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getPath() &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;ExportWithTemplate.xlsx&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
               paras,
               excelSetting);&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多功能请前往&lt;a href=&quot;http://www.fenghaitao.net/autoexcel-user-manual&quot; rel=&quot;nofollow&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;
  &lt;/div&gt;

    &lt;/div&gt;

  


  &lt;details class=&quot;details-reset details-overlay details-overlay-dark&quot; id=&quot;jumpto-line-details-dialog&quot;&gt;
    &lt;summary data-hotkey=&quot;l&quot; aria-label=&quot;Jump to line&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast linejump&quot; aria-label=&quot;Jump to line&quot;&gt;
          &lt;/details-dialog&gt;
  &lt;/details&gt;

    




  &lt;/div&gt;
&lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;

  &lt;/div&gt;

          




  &lt;div id=&quot;ajax-error-message&quot; class=&quot;ajax-error-message flash flash-error&quot;&gt;
    &lt;svg class=&quot;octicon octicon-alert&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;&lt;/svg&gt;
    &lt;button type=&quot;button&quot; class=&quot;flash-close js-ajax-error-dismiss&quot; aria-label=&quot;Dismiss error&quot;&gt;
      &lt;svg class=&quot;octicon octicon-x&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;&lt;/svg&gt;
    &lt;/button&gt;&lt;p&gt;
    You can’t perform that action at this time.
  &lt;/p&gt;&lt;/div&gt;


  &lt;div class=&quot;js-stale-session-flash flash flash-warn flash-banner&quot; hidden=&quot;&quot;&gt;
    &lt;svg class=&quot;octicon octicon-alert&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;&lt;/svg&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-in&quot; hidden=&quot;&quot;&gt;You signed in with another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-out&quot; hidden=&quot;&quot;&gt;You signed out in another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
  &lt;/div&gt;
    &lt;template id=&quot;site-details-dialog&quot;&gt;
  &lt;details class=&quot;details-reset details-overlay details-overlay-dark lh-default text-gray-dark hx_rsm&quot; open=&quot;&quot;&gt;
    &lt;summary role=&quot;button&quot; aria-label=&quot;Close dialog&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal&quot;&gt;
      &lt;button class=&quot;Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0&quot; type=&quot;button&quot; aria-label=&quot;Close dialog&quot; data-close-dialog=&quot;&quot;&gt;
        &lt;svg class=&quot;octicon octicon-x&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;&lt;/svg&gt;
      &lt;/button&gt;
      &lt;p class=&quot;octocat-spinner my-6 js-details-dialog-spinner&quot;/&gt;
    &lt;/details-dialog&gt;
  &lt;/details&gt;
&lt;/template&gt;

    

      &lt;div class=&quot;js-cookie-consent-banner&quot; hidden=&quot;&quot;&gt;
  &lt;div class=&quot;hx_cookie-banner p-2 p-sm-3 p-md-4&quot;&gt;
    &lt;div class=&quot;Box hx_cookie-banner-box box-shadow-medium mx-auto&quot;&gt;
    &lt;div class=&quot;Box-body border-0 py-0 px-3 px-md-4&quot;&gt;
      &lt;div class=&quot;js-main-cookie-banner hx_cookie-banner-main&quot;&gt;
          &lt;div class=&quot;d-md-flex flex-items-center py-3&quot;&gt;
            &lt;p class=&quot;f5 flex-1 mb-3 mb-md-0&quot;&gt;
              
  We use &lt;span class=&quot;text-bold&quot;&gt;optional&lt;/span&gt; third-party analytics cookies to understand how you use GitHub.com so we can build better products.

              &lt;span class=&quot;btn-link js-cookie-consent-learn-more&quot;&gt;Learn more&lt;/span&gt;.
            &lt;/p&gt;
            &lt;p class=&quot;d-flex d-md-block flex-wrap flex-sm-nowrap&quot;&gt;
              &lt;button class=&quot;btn btn-outline flex-1 mr-1 mx-sm-1 m-md-0 ml-md-2 js-cookie-consent-accept&quot;&gt;Accept&lt;/button&gt;
              &lt;button class=&quot;btn btn-outline flex-1 ml-1 m-md-0 ml-md-2 js-cookie-consent-reject&quot;&gt;Reject&lt;/button&gt;
            &lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;js-cookie-details hx_cookie-banner-details&quot; hidden=&quot;&quot;&gt;
          &lt;div class=&quot;d-md-flex flex-items-center py-3&quot;&gt;
            &lt;p class=&quot;f5 flex-1 mb-2 mb-md-0&quot;&gt;
              
  We use &lt;span class=&quot;text-bold&quot;&gt;optional&lt;/span&gt; third-party analytics cookies to understand how you use GitHub.com so we can build better products.

              &lt;br/&gt;
              You can always update your selection by clicking &lt;span class=&quot;text-bold&quot;&gt;Cookie Preferences&lt;/span&gt; at the bottom of the page.
              For more information, see our &lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/github/site-policy/github-privacy-statement&quot;&gt;Privacy Statement&lt;/a&gt;.
            &lt;/p&gt;
          &lt;/div&gt;

          &lt;div class=&quot;d-md-flex flex-items-center py-3 border-top&quot;&gt;
            &lt;div class=&quot;f5 flex-1 mb-2 mb-md-0&quot;&gt;
              &lt;h5 class=&quot;mb-1&quot;&gt;Essential cookies&lt;/h5&gt;
              &lt;p class=&quot;f6 mb-md-0&quot;&gt;We use essential cookies to perform essential website functions, e.g. they&#x27;re used to log you in. 
                &lt;a href=&quot;https://docs.github.com/en/github/site-policy/github-subprocessors-and-cookies&quot;&gt;Learn more&lt;/a&gt;
              &lt;/p&gt;
            &lt;/div&gt;
            &lt;p class=&quot;text-right&quot;&gt;
              &lt;h5 class=&quot;text-blue&quot;&gt;Always active&lt;/h5&gt;
            &lt;/p&gt;
          &lt;/div&gt;

          &lt;div class=&quot;d-md-flex flex-items-center py-3 border-top&quot;&gt;
            &lt;div class=&quot;f5 flex-1 mb-2 mb-md-0&quot;&gt;
              &lt;h5 class=&quot;mb-1&quot;&gt;Analytics cookies&lt;/h5&gt;
              &lt;p class=&quot;f6 mb-md-0&quot;&gt;We use analytics cookies to understand how you use our websites so we can make them better, e.g. they&#x27;re used to gather information about the pages you visit and how many clicks you need to accomplish a task. 
                &lt;a href=&quot;https://docs.github.com/en/github/site-policy/github-subprocessors-and-cookies&quot;&gt;Learn more&lt;/a&gt;
              &lt;/p&gt;
            &lt;/div&gt;
            
          &lt;/div&gt;

          &lt;p class=&quot;text-right py-3 border-top&quot;&gt;
            &lt;button class=&quot;btn btn-primary js-save-cookie-preferences&quot; type=&quot;button&quot; disabled=&quot;disabled&quot;&gt;Save preferences&lt;/button&gt;
          &lt;/p&gt;
        &lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/div&gt;


  &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f0bc64b313ba0b022d32a8e5d0972779</guid>
<title>网骗欺诈？网络裸奔？都是因为 HTTP？</title>
<link>https://toutiao.io/k/bahqqrr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;先跟大家讲个故事，我初恋是在初中时谈的，我的后桌的后桌。那个时候没有手机这类的沟通工具，上课交流有三宝，脚踢屁股、笔戳后背以及传纸条，当然我只能是那个屁股和后背，还不是能让初恋踢到的后背。&lt;/p&gt;&lt;p&gt;但是说实话传纸条真的很危险，尤其是这种早恋的纸条，被抓到就是一首《凉凉》。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b9ce2a72a0fe1ce57596fa13f067fde8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;466&quot; data-rawheight=&quot;601&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-b9ce2a72a0fe1ce57596fa13f067fde8_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;466&quot; data-rawheight=&quot;601&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-b9ce2a72a0fe1ce57596fa13f067fde8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-b9ce2a72a0fe1ce57596fa13f067fde8_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;特别我和初恋中间还隔着一个搞事的狗蛋，常年使用神乎其技的笔迹模仿技术篡改小纸条的内容，往往我写的是“放学一起去逛逛吧”，到了我初恋手里就变成了“放学一起写作业吧”。以至于我常年满怀期待的放学，然后痛苦的畅游作业的海洋。&lt;/p&gt;&lt;p&gt;不过好汉不提当年，我现在已经是一名出色的互联网人了，再也不用传纸条了，也不用再接受狗蛋的支配了。&lt;/p&gt;&lt;p&gt;这样想的我，猝不及防的就发现自己拍摄的美女图片，居然全部变成了如花！这到底是怎么回事？&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;b&gt;Q1：美女变如花，数据在裸奔！聊聊什么是网络劫持。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;在浏览器中输入相同的 URL，有的时候并不会出现同样的内容，比如想我今天遇到的美女变如花一样。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-047442744e6585bebe00d0b732f948bb_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;621&quot; data-rawheight=&quot;241&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-047442744e6585bebe00d0b732f948bb_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;621&quot; data-rawheight=&quot;241&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-047442744e6585bebe00d0b732f948bb_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-047442744e6585bebe00d0b732f948bb_b.jpg&quot;/&gt;&lt;figcaption&gt;△ 美女变如花&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;左边是正确响应会出现的图片，而右边则是莫名其妙出现的如花。这是因为 HTTP 被劫持了。&lt;/p&gt;&lt;p&gt;当 HTTP 被劫持时，虽然DNS 解析域名 IP 地址不变，但是在和网站交互过程中劫持了用户的请求。在网站返回用户信息前，就返回了其他的请求，导致正常网站出现弹窗广告，甚至跳转到其他恶意网站。除去网页内容的变化，HTTP 被劫持后还会导致以下问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;用户输入正常网址跳转到其它地址，导致用户无法正常访问，网站流量受损；&lt;/li&gt;&lt;li&gt;通过泛域名解析生成大量子域名共同指向其它地址，跳转到非法网站，造成网站权重降低；&lt;/li&gt;&lt;li&gt;域名被解析到恶意钓鱼网站，导致用户财产损失，造成客户投诉；&lt;/li&gt;&lt;li&gt;网站经常弹出广告，影响客户体验，造成信誉度下降。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;与此同时，HTTP 劫持还有很多类型，详情可以查看&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMjM5ODc5ODgyMw%3D%3D%26mid%3D2653576567%26idx%3D1%26sn%3De47a77e224fb4fc5d19b1a7085b5e2e0%26chksm%3Dbd1bc9ff8a6c40e99528cccaeb0ce4d7c41ada71fb9ff92ab69bc9e2f0930b2358a0c6fad73c%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《网站莫名跳转，从百度谈什么是网站劫持？》&lt;/a&gt;&lt;/p&gt;&lt;p&gt;这些繁杂的手段让人防不胜防，也让网站变得极为不安全。可以偏偏对于现代社会而言安全是第一要素，以致于连浏览器都进化到自带安全监测，可以在你访问网站时给你安全提示。&lt;/p&gt;&lt;p&gt;&lt;b&gt;Q2：链接不安全，链接不是私密链接，都是因为链接不是 HTTPS，这你注意到了么？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;相信各位互联网人上人在使用1024G网络高强度冲浪的时候肯定见到过下面这个提醒。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-94c72f674c999c0e1fcde3c424686f05_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1023&quot; data-rawheight=&quot;504&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-94c72f674c999c0e1fcde3c424686f05_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1023&quot; data-rawheight=&quot;504&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-94c72f674c999c0e1fcde3c424686f05_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-94c72f674c999c0e1fcde3c424686f05_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;啊？什么？你说你没见过？答应我不要再用 IE 了好吗！&lt;/p&gt;&lt;p&gt;咳咳，那么说回正经的，出现这个提示可并不是因为逛了什么让人会心一笑，你懂我也懂的网站，纯粹只是因为当前网站使用的 SSL 证书不是正规证书，或证书已经过期时， HTTPS 协议无法正常请求而已。&lt;/p&gt;&lt;p&gt;从互联网发展至今，HTTP 一直担任互联网传输信息的标准协议。传输的信息可以是互联网内计算机之间的文档，文件，图像，视频等。在 HTTP 请求过程中，客户端与服务器之间没有任何身份确认的过程，数据全部明文传输，“裸奔”在互联网上，所以很容易遭到黑客的攻击。&lt;/p&gt;&lt;p&gt;因此未来保护数据安全，带有 SSL 的 HTTP——HTTPS 诞生了。HTTPS 即 HTTP+SSL/TLS，可以理解为 HTTP 下加入 SSL 层，HTTPS 的安全基础是SSL，因此加密的详细内容就需要 SSL，用于安全的 HTTP数据传输。&lt;/p&gt;&lt;p&gt;整体来看，相比 HTTP，HTTPS拥有以下五个优点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;最大限度地提高 Web 上数据和事务的安全性；&lt;/li&gt;&lt;li&gt;加密用户敏感或者机密信息；&lt;/li&gt;&lt;li&gt;提高搜索引擎中的排名；&lt;/li&gt;&lt;li&gt;避免在浏览器中出现“不安全”的提示；&lt;/li&gt;&lt;li&gt;提升用户对网站的信赖。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;安全在现代社会是放在第一位的，所以 HTTPS 在现代互联网中有着举足轻重的地位，它保护着我们在网络上的安全。&lt;/p&gt;&lt;p&gt;&lt;b&gt;Q3：HTTPS 比 HTTP 更安全吗？为什么大多数网站还是使用 HTTP？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;尽管 HTTP 协议无法加密数据，让所有通信数据都在网络中明文“裸奔”，容易导致数据泄露、数据篡改、流量劫持、钓鱼攻击等安全问题。大家也都知道 HTTPS 是用来解决 HTTP 明文协议的缺陷，它通过在 HTTP 的基础上加入 SSL/TLS 协议，依靠 SSL 证书来验证服务器的身份，为客户端和服务器端之间建立“SSL”通道，确保数据运输安全。&lt;/p&gt;&lt;p&gt;但是大多数网站还是选择使用 HTTP 来进行访问，难道他们不知道 HTTPS 有多好，安全有多重要么？其实不是的，大家都知道 HTTPS 才是现在互联网最需要的形态，特别如果能使用全站 HTTPS 就能保证数据安全，维护用户隐私。但是大部分网站依然使用 HTTP 的原因则是以下三点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;SSL 证书费用问题：&lt;/b&gt;开启 HTTPS 的必要条件就是要有 SSL 证书，而 SSL 证书是需要申购的，看到“申购”二字，大部分人都会觉得和费用支付离不开，所以网站会因为不想每年在证书上花费不菲的费用选择使用不安全的 HTTP。&lt;/li&gt;&lt;li&gt;&lt;b&gt;服务器资源消耗问题：&lt;/b&gt;HTTPS 连接服务器端资源占用高，HTTPS 协议握手费时，为了不增加服务器资源的消耗，部分网站也会选择放弃 HTTPS。&lt;/li&gt;&lt;li&gt;&lt;b&gt;访问速度降低问题：&lt;/b&gt;比起 HTTP 而言，HTTPS 需要多几次握手，用户从 HTTP 跳转到 HTTPS 需要一些时间，这会显得网站访问速度变慢了，为了让网站访问更流畅，部分网站也会放弃 HTTPS。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;其实如果你更深入的了解一点，就会发现上述的几个问题都不存在，或者说可以通过优化来解决这些问题。而优化的方式也非常简单，想要了解的小伙伴可以点击推荐阅读，了解更多~&lt;/p&gt;&lt;p&gt;&lt;b&gt;推荐阅读：&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.upyun.com/tech/article/237/%25E4%25B8%25BA%25E4%25BB%2580%25E4%25B9%2588%25E9%259D%259E%25E5%2585%25A8%25E7%25AB%2599%25E5%258D%2587%25E7%25BA%25A7HTTPS%25E4%25B8%258D%25E5%258F%25AF%25EF%25BC%259F.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;为什么非全站升级HTTPS不可？&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.upyun.com/tech/article/193/HTTPS%25E7%25B3%25BB%25E5%2588%2597%25E5%25B9%25B2%25E8%25B4%25A7%25EF%25BC%2588%25E4%25BA%258C%25EF%25BC%2589%25EF%25BC%259A%25E7%25AA%2581%25E7%25A0%25B4%25E8%25BF%25995%25E4%25B8%25AA%25E6%258A%2580%25E6%259C%25AF%25E9%259A%25BE%25E7%2582%25B9%25EF%25BC%258CHTTPS%25E4%25BC%259A%25E5%25A5%25BD%25E7%2594%25A8%25E5%2588%25B0%25E9%25A3%259E%25E8%25B5%25B7%25E6%259D%25A5.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot;LinkCard LinkCard--noImage&quot;&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;HTTPS系列干货（二）：突破这5个技术难点，HTTPS会好用到飞起来 - 又拍云&lt;/span&gt;&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;span&gt;​&lt;svg class=&quot;Zi Zi--InsertLink&quot; fill=&quot;currentColor&quot; viewbox=&quot;0 0 24 24&quot;&gt;&lt;path d=&quot;M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;www.upyun.com&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-imageCell&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.upyun.com/tech/article/465/%25E4%25BB%258E%2520HTTP%252F1%2520%25E5%2588%25B0%2520HTTP%252F2%25EF%25BC%258C%25E4%25BB%25A5%25E5%258F%258A%25E5%258D%25B3%25E5%25B0%2586%25E5%2588%25B0%25E6%259D%25A5%25E7%259A%2584%2520HTTP%252F3.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic1.zhimg.com/v2-0d9b1543d39aeb03dfc6524b36cd51b8_180x120.jpg&quot; data-image-width=&quot;1280&quot; data-image-height=&quot;933&quot; class=&quot;LinkCard LinkCard--hasImage&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;/&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;从 HTTP/1 到 HTTP/2，以及即将到来的 HTTP/3&lt;/span&gt;&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;span&gt;​&lt;svg class=&quot;Zi Zi--InsertLink&quot; fill=&quot;currentColor&quot; viewbox=&quot;0 0 24 24&quot;&gt;&lt;path d=&quot;M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;www.upyun.com&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-imageCell&quot;&gt;&lt;img class=&quot;LinkCard-image LinkCard-image--horizontal&quot; alt=&quot;图标&quot; src=&quot;https://pic1.zhimg.com/v2-0d9b1543d39aeb03dfc6524b36cd51b8_180x120.jpg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>df4146d036adbc93af424d2a09bccbba</guid>
<title>这些图灵奖主原来就藏在身边</title>
<link>https://toutiao.io/k/k3uob96</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是&lt;strong&gt;bigsai，这是我经历的一个真实的故事&lt;/strong&gt;，在笔者今年参加考研复试的时候，由于疫情原因是线上复试，但是一些流程还是没变的，机试+笔试完之后就是面试了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后就开始紧张的面试了，大家都知道面试在最开始就是英语部分，当老师说咱们开始英语口语，我把早已背的滚瓜烂熟的个人介绍藏在脑海中正准备一泄而出等待老师说&quot;Please introduce yourself&quot;的时候，事情突然发生反转，老师来了一句：&lt;strong&gt;&quot;Do you know who won the Turing prize?&lt;/strong&gt;&quot;. 我使劲皱着眉头假装自己很努力思考的样子(实际本来就不会嘛)，说完还不忘用中文偷偷告诉我：图灵奖。我深沉的注视在场的面试官说了句：&lt;strong&gt;&quot;Sorry, I don&#x27;t know&quot;&lt;/strong&gt; (我只知道这个奖但我也不知道谁得过奖啊，哪些枯涩的名字那么难记)。&lt;/p&gt;&lt;img data-ratio=&quot;0.9927536231884058&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyib5eeXYoS551wDn9IIySYQv79hjIHQP3Wb1tGLicleynKravwiaL4wxficheGE7NrQG5zqgqNdqgxbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;276&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老师说不要紧，再来一个：&lt;strong&gt;&quot;Do you know who put forward the relational model of relational database？&quot;&lt;/strong&gt;  ，我停顿半天皱着眉头假装没听清，老师直接说中文 &lt;strong&gt;&quot;你知道关系数据库的关系模型谁提出的嘛？&quot;&lt;/strong&gt; 我眉头皱的更紧了，又说了句：&lt;strong&gt;&quot;Sorry, I don&#x27;t know&quot;&lt;/strong&gt; (这……)。&lt;/p&gt;&lt;img data-ratio=&quot;0.9782608695652174&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyib5eeXYoS551wDn9IIySYQbBMZRKMrqnWVqhKkZ6rlIrOjdVibjzKgmS1gtO1vzePNv1Aiaj1ZN6gA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;276&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时的我心情是觉得太倒霉了，咋问这个问题，不过还好后面老师问我加密算法有哪些，有一些爬虫的经验知道一些些加密算法我用英文踉踉跄跄的说了出来,并介绍了一些区别，还好后面回答的还行前面笔试机试也还行才很险的&lt;strong&gt;苟上岸。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后老师说了一句关系模型的提出者也是图灵奖的获得者，我就很纳闷：&quot;难道老师以为我知道谁提出关系模型但是不知道他拿过啥奖嘛！谁拿过图灵奖我不知道，谁提出关系模型我更不知道&quot;！但我还是笑嘻嘻的和老师说道：&lt;strong&gt;&quot;哈哈，这个触及到盲区了，回去了解一波&quot;&lt;/strong&gt;  !不过具体了解没了解，你们都知道的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;什么是图灵奖&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图灵奖（Turing Award），全称A.M. 图灵奖（A.M Turing Award），是由美国计算机协会（ACM）于1966年设立的计算机奖项，名称取自艾伦·麦席森·图灵（Alan M. Turing），旨在奖励对计算机事业作出重要贡献的个人 。图灵奖对获奖条件要求极高，评奖程序极严，一般每年仅授予一名计算机科学家。图灵奖是计算机领域的国际最高奖项，被誉为 &lt;strong&gt;&quot;计算机界的诺贝尔奖&quot;&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图灵奖一般在每年3月下旬颁发。从1966年至2019年，图灵奖共授予72名获奖者，以美国、欧洲科学家为主。据统计，截至2020年3月，世界各高校的图灵奖获奖人数依次为美国斯坦福大学（28位）、美国麻省理工学院（26位）、美国加州大学伯克利分校（25位）、美国哈佛大学（14位）和美国普林斯顿大学（14位）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2000年，&lt;strong&gt;华人科学家姚期智(生于上海)获图灵奖&lt;/strong&gt;，是华人第一次也是唯一一次获得图灵奖。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Codd博士与关系模型&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然短期内没了解谁拿过图灵奖(复试完该玩的玩、搞毕设的搞毕设、开黑的开黑)，但是这毕竟是一道曾经的坎，过了比较久的时间还是不甘心，打开了百度搜索 &lt;strong&gt;关系数据库 关系模型&lt;/strong&gt; 关键字找到了答案：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5717916137229987&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyib5eeXYoS551wDn9IIySYQh655I9gW0F7Hv7A5xqrJbaQo3g4IXx38R3V2sY7RtpcwzicicYEMZIGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1574&quot;/&gt;&lt;figcaption&gt;百度结果&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也从中找到了答案，顺便大家也科普一下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1970年，IBM的研究员&lt;strong&gt;E.F.Codd博士&lt;/strong&gt;发表《大型共享数据银行的关系模型》一文提出了关系模型的概念，论述了范式理论和衡量关系系统的12条标准，如定义了某些关系代数运算，研究了数据的函数相关，定义了关系的第三范式，从而开创了数据库的关系方法和数据规范化理论的研究，&lt;strong&gt;他为此获得了1981年的图灵奖。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后来Codd又陆续发表多篇文章，奠定了关系数据库的基础。关系模型有严格的数学基础，抽象级别比较高，而且简单清晰，便于理解和使用。但是当时也有人认为关系模型是理想化的数据模型，用来实现DBMS是不现实的，尤其担心关系数据库的性能难以接受，更有人视其为当时正在进行中的网状数据库规范化工作的严重威胁。为了促进对问题的理解，1974年ACM牵头组织了一次研讨会，会上开展了一场分别以Codd和Bachman为首的支持和反对关系数据库两派之间的辩论。这次著名的辩论推动了关系数据库的发展，使其最终成为现代数据库产品的主流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;教你们一招&lt;/strong&gt;：以后面试官问你熟悉关系数据库(MySQL)吗，你就往&lt;strong&gt;Codd博士&lt;/strong&gt; 扯上一波，然后歌颂一波他的简要事迹再说他在1981年因为在关系数据库理论的研究获得图灵奖，并带上一脸赞叹和仰慕的表情。面试官肯定感觉不错：这小伙子底子可以啊，态度也挺好的，加分加分！不出意外稳妥拿到offer概率大大增加！(如果这招有用记得回来三连一波)。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;算法大家与图灵奖&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Dijkstra(迪科斯彻)&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然心中图灵奖的获得者盲区已经打破，但是肯定止不住好奇去翻翻哪些人得了图灵奖，看了一下大部分都是人工智能数学领域还有一部分就是偏底层或者数据库相关都是陌生而难记的面孔，我有些失望。但突然找到一个熟悉的面孔：Dijkstra&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4861111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyib5eeXYoS551wDn9IIySYQhRj6DvpZN7KMLdkojr7gaXRTUXe3YUgur789TZOgqCEeYqSYWy44YQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1584&quot;/&gt;&lt;figcaption&gt;部分图灵奖得主&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哇，这个算法不是我们上数据结构与算法图论中必学的嘛，图论算法掐指可数，Dijkstra、prim、floyed再加上经典的dfs和bfs嘛！我兴致勃勃的点开Dijkstra大佬的介绍，Dijkstra大佬被称为&lt;strong&gt;结构程序设计之父&lt;/strong&gt; ，他有以下的成就：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;知晓的：goto有害论(耳熟)；第一个Algol 60编译器的设计者和实现者(厉害啊);THE操作系统的设计者和开发者(真大佬啊！);&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;熟悉的：Dijkstra最短路径算法(以它而闻名)；银行家算法的创造者;  解决了“哲学家聚餐”问题；提出信号量和PV原语;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时的我已经很震惊了，我知道pv信号量和原语，也知道银行家算法，哲学家进餐问题都是操作系统很经典的问题，没想到都是Dijkstra大佬提出和发现的，真的强强强！并且&lt;strong&gt;Dijkstra&lt;/strong&gt;和与&lt;strong&gt;D. E. Knuth&lt;/strong&gt;并称为我们这个时代最伟大的计算机科学家的人。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Floyd(弗洛伊德)&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dijkstra是经典的单源求最短路径，而与之对应很流行的多源最短路径算法—Floyd(弗洛伊德)算法，该算法名称以创始人之一、&lt;strong&gt;1978年图灵奖获得者&lt;/strong&gt;、斯坦福大学计算机科学系教授罗伯特·弗洛伊德命名。此外在算法方面，弗洛伊德（Floyd）和威廉姆斯（J．Williams）在1964年共同发明了著名的&lt;strong&gt;堆排序算法heapSort&lt;/strong&gt;(笔者前几天刚写的竟然没发现)！&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Hoare(霍尔)&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;谈起排序，那快排肯定不可缺少啊，霍尔爵士(英国计算机科学家)就是&lt;strong&gt;快速排序&lt;/strong&gt;的发明者，巧的是霍尔爵士在1980年获得图灵奖。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Niklaus Wirth(沃斯)&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;凭借一句话获得图灵奖的Pascal之父——Niklaus Wirth(沃斯)&lt;/strong&gt; ，让他获得图灵奖的这句话就是他提出的著名公式：&lt;strong&gt;&quot;算法+数据结构=程序&quot;&lt;/strong&gt; ，作为程序员，上大学第一节c语言或者数据结构与算法课堂的时候我们就听老师讲过这句话。这个公式对计算机科学的影响程度足以类似物理学中爱因斯坦的“E=MC^2”—一个公式展示出了程序的本质。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结语&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过一件小事发现了有趣的联系。都有着共同的联系—图灵奖，在以前，我的认知是这样的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6456876456876457&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyib5eeXYoS551wDn9IIySYQYyv5FiaRwkhQaUfjkmFYibVE8FFVMCdDnoibKm8KexVP5HR6uBA0Lez6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1716&quot;/&gt;&lt;figcaption&gt;以前的认知&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过本篇的整理和学习，现在对一些知识有着更条理化的认识(沃斯中文被错写成高德纳)：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7524177949709865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyib5eeXYoS551wDn9IIySYQqcSxQ9jTvwXXNibD5IKJHMMPHdmF7NgfYtOLsWDk51zGztMCPiaVGuBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2068&quot;/&gt;&lt;figcaption&gt;现在的认知&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，图灵奖的得主非常多，每位得奖主都是了不起的人才，都是我辈楷模，这里仅列举所联系到、熟悉和数据结构与算法相关的得奖主，其他的就不一一列举啦！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然这并不是一件非常大的事情，源于复试的一个提问，但通过后来的查找总让我对熟悉的算法和人物有着焕然一新的感觉：&lt;strong&gt;原来还是这样啊！&lt;/strong&gt; 而生活中、工作中、再或学习中有很多类似的地方，我们可能只差一步就能发现更多、建立更多有效的联系以及知识体系结构。而我们常常都是浮于表面，希望在日后的学习生活中能与大家同作一个&lt;strong&gt;有心人&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;最后给你一个问题，你知道图灵奖杯🏆为什么是个银碗嘛？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;原创不易，bigsai请你帮两件事帮忙一下:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;点赞、在看、分享支持一下， 您的肯定是我创作的源源动力。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;微信搜索「bigsai」，关注我的公众号，不仅免费送你电子书，我还会第一时间在公众号分享知识技术。加我还可拉你进力扣打卡群一起打卡LeetCode。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;记得关注、咱们下次再见！&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThwm52gaOjYD1rTpFBzPSct2PlYan9Bco2fVvkjNZLqqBZS9xd4SvvTyaXVezcWBlpXIwbz6cibPLHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;近期精彩：&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MTE1NjA2Mg==&amp;amp;mid=2247485498&amp;amp;idx=1&amp;amp;sn=1487f8657949d2cb849d2f0e6f953c96&amp;amp;chksm=ce1a2f8bf96da69db0778dd445662d8d1ed59706b716787f8bbb524560473bfae8221ddb0a3c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;「万字图文」史上最姨母级Java继承详解&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MTE1NjA2Mg==&amp;amp;mid=2247485575&amp;amp;idx=1&amp;amp;sn=5bf1be2af6213ee546c0435b92af149d&amp;amp;chksm=ce1a2f36f96da620957e0bf9ec87edc23087bc49800ed2456f41d3495cb16fcf7f1c2b707074&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;「干货总结」程序员必知必会的十大排序算法&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MTE1NjA2Mg==&amp;amp;mid=2247485126&amp;amp;idx=2&amp;amp;sn=d443dcabfacf4082ab089a453ca209dd&amp;amp;chksm=ce1a2177f96da861e0040e4afdd30ad2a668c5070e1a630b43df4f60b1f72f9fb2daff26e939&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;面试官:什么是缓存穿透、缓存雪崩、缓存击穿？&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MTE1NjA2Mg==&amp;amp;mid=2247485201&amp;amp;idx=1&amp;amp;sn=e2eb19410784b5bcb085d1e6775b6966&amp;amp;chksm=ce1a20a0f96da9b69778cabb9d09f70dfedef073fcc47acd131060934611c991099aac57dff9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;8张图带你分析Redis与MySQL数据一致性问题&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;点点 &lt;span data-mid=&quot;&quot;&gt;在看&lt;/span&gt; 行不行&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9347826086956522&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JUMf11lH8G7UHWGbDicPRgCn7v1PLuDYQAHgvbicEyFUfAqLeH2EB82rwqOvvn0T0UWlFnvibV7yrVDz3EMXmD3nA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;92&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>