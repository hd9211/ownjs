<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ff0ec71eb06a7364ed41de60eb86c2e6</guid>
<title>亿级流量架构演进实战：从零构建亿级流量 API 网关（二）</title>
<link>https://toutiao.io/k/56161ss</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left&quot; aria-describedby=&quot;js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI3MDU5OTU0MA==&amp;amp;action=getalbum&amp;amp;album_id=2087433865563832322#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2087433865563832322&quot; data-tag_source=&quot;0&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#亿级流量架构演进实战&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;2个&lt;span class=&quot;weui-hidden_abs&quot;&gt;内容&lt;/span&gt;&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;这不是一个讲概念的专栏，而且我也不擅长讲概念，每一篇文章都是一个故事，我希望你可以通过这些故事了解我当时在实际工作中遇到问题和背后的思考，架构设计是种经验，我有幸参与到多个亿级系统的架构设计中，有所收获的同时也希望把这些收获分享与大家。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;承接上篇，统一了接口之后并没有彻底改变被客户端碾着走的局面，因为还有一个根本的点没有被解决，就是网关对上游服务的适配问题，说白了就是每当上游有一个新的 API 要发布，网关都需要进行开发适配，我们曾经出过一个 API 标准接入的解决方案去推动上游去改造，不过遇到了很大的阻力。这个痛点直到网关实现了 API 的服务泛化调用之后才有所突破，功能一经上线，API 发布在网关就不需要再适配一行代码，完全解耦了网关与平台的业务逻辑，使网关的效能得到释放。不过，内部协议直接被转化成外部协议使得 API 在定义和格式上变得晦涩难懂和似乎不受控制，而且上游 API 的变更让网关很难处理兼容性问题，这就是所谓的有得必有失吧。再后来随着开放平台、共建生态迎来了大潮，这时已经是2015年了，我们又反客为主迅速推动上游进行 API 标准化的接入和改造，这只能说之前网关更关注 API 接入的效率，后来更关注 API 接入的质量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;1。泛化调用&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;泛化调用在当时起到了非常重要的作用，虽然现在已经很少在网关直接粗暴的提供泛化调用的 API，但是泛化调用在其它地方有了更广泛的应用，比如 API 测试等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面我们就结合着泛化调用来说下网关服务调用的那点事，回顾上文我画的一张 API 网关的架构示意图。首先，泛化调用是网关服务调用组件提供的一种服务调用方式，而整个服务调用概括的讲主要有路由寻址、协议转换、分发调度三个步骤。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3925925925925926&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FAeR52xeN391DpyUN48jy9BsjXmbZ31icqiaYUn6A9SXSxweIicnOOeHqztpF5ascdgVaDqjMFIJYqgMLQ2tuF20Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;1.1 路由寻址&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;一个 API 请求在调用上游服务之前，首先要通过请求方法名进行上游服务的路由寻址，寻址包括上游服务端的接口名、方法以及分组。具体来讲，网关会通过请求方法名在内存路由表中去寻找对应的服务实例地址，如果没有找到，就会去 API 元数据库中读取配置并完成服务的实例化。这是因为网关的泛化调用是一种基于配置的实现方式，所有 API 的方法和参数都以配置的方式存储在元数据库中。所以，这类 API 服务在网关是一种动态实例化的方式，它不是在服务端启动时就初始化好的服务，而是一种懒加载的方式。&lt;/p&gt;&lt;p&gt;在 API 服务初始化的时候我曾有过这样的设计考量，API 服务是否可以改成配置发布加载的方式？之所以没有这么做，主要因为 API 实在是太多了，有很多 API 都没有被调用过，另外就是1～2次调用 API 只会被初始化在少量的 API 网关上，对整体而言也不会有太多的资源占用。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;1.2 协议转换&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;在获取到对应的服务地址之后，就需要对请求参数进行协议的转换和解析。当时在没有泛化调用之前，网关依赖上游提供二方包，并需要依据二方包的接口定义，才能完成请求参数的解析与协议的转换。而在有了泛化调用之后，网关可以不依赖于上游服务提供的二方包，就可以进行协议转换了，这是因为泛化调度在实现上采用了反射和动态代理的方式。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;1.3 分发调度&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;泛化调用不仅可以去掉对上游二方包的依赖，网关还在泛化调用的基础上实现了一套通用协议的适配模型，基于代理模式实现对上游不同服务的分发调用，解决了之前每个服务在网关都需要开发一套适配逻辑的实现。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;1.4 配置中心&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;在网关实现了统一接口和泛化调用之后，服务端似乎进入开挂的时代，主要是彻底释放了服务端的研发效能，需要哪个 API 客户端去配置一下就好了，不过好景不长，此时网关已经进入了深水区，出现的问题就比较难解决了。接下来面对的就是 API 元数据的即时更新问题，由于泛化调用是依赖于配置的，所以当配置变更后，就需要对网关的服务实例进行重新初始化，所以为了解决这个问题，一个网关 API 元数据配置中心的系统就这样诞生了，以下简称为配置中心。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.359375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FAeR52xeN391DpyUN48jy9BsjXmbZ31icHj22UIQfhkkBw2d65yMc6BRsxibTBDVkEDcNe9CvUnkCkUaGj1zPsBw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;配置中心的演进主要有3个版本，第一个版本是定时检查数据库变更配置的处理方式，第二个版本是消息广播变更配置的处理方式，第三种是基于 Zookeeper 监听配置的处理方式。下面我们就逐一来看下这三个不同版本的实现方式。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;v1 定时检查数据库变更配置&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;其实无论哪个版本都是采用数据库作为元数据的持久化存储的，不同之处主要是在触发网关进行服务重载的机制不同。&lt;/p&gt;&lt;p&gt;由于泛化调用是一种懒加载的实现方式，所以只有当一个请求需要获取元数据信息时，网关才会去查询元数据库，并将获取到的配置信息缓存到网关的内存中，同时进行服务实例的初始化。而当数据发生变更时，网关是如何感知到配置变更的呢？所以网关采用的是线程轮训的方式，通过对比数据进行判断，如果对比数据不一致，就进行服务实例的重载，如果一致，就不做任何处理。不过，这个方案有个硬伤，就是即时性的问题，由于线程轮训的间隔不能过快，以防止对数据库造成不必要的压力，而且，元数据库变更也不会很频繁，过于频繁的轮训也是一种资源的浪费，所以，我们设置的时间间隔大概是10分钟，当然，网关只有一个轮询线程，不是每个 API 都有一个。&lt;/p&gt;&lt;p&gt;除了线程轮训的方式，我也思考过有没有别的方式，比如使用缓存定时过期的方式，缓存过期了就去数据库里查询一次，Guava 的 LocalCache 就可以实现多种本地缓存策略 ，不过这种方式比较适合在防止热点数据穿透缓存的场景里，在网关里缓存过期了是要与服务重载相关联的，所以什么场景下网关去检查缓存是否过期了，这之间并没有建立起直接的关系，总不能每调用一次接口就去检查一下缓存吧。而且缓存穿透本身也是有风险的，尤其是冷数据加载，可能直接将下层的数据库打爆，这种方式造成的线上问题也是屡见不鲜。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;v2 消息广播变更配置&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;后来我们又上线了一版消息广播变更配置的版本，改造点是网关的配置中心客户端里将线程轮训的方式替换消费 MQ 的方式，MQ 是在配置中心 OPS 里变更配置时进行生产，以广播的方式发送给网关所有实例。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;v3 基于 Zookeeper 监听配置&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;再后来终于迎来主流版本 —— 基于 ZooKeeper 构建配置中心的实现方式，ZooKeeper 是一个分布式的协同系统，它有很多优势，比如，基于树型的存储方式、分布式的部署架构、Leader 选举机制、基于长连接的双向通道等，我还是比较推崇它的。&lt;/p&gt;&lt;p&gt;基于 ZooKeeper 的 Watcher 特性，我们把网关的 API 配置信息存到 ZooKeeper 节点里，在网关的配置中心客户端加载到 API 服务后，就去订阅 Zookeeper 中对应节点的数据变更事件，当 ZooKeeper 数据节点变更后，ZooKeeper 就可以以事件驱动的方式通知到网关实例，从而进行配置变更和服务重载。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;如何解决配置中心的一些小问题？&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;其实在整个演变过程中，除了技术选型有了大的调整外，在细节方面我们也&lt;/span&gt;在&lt;span&gt;不断优化，与线上的各种小问题进行坚持不懈的斗争。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;小问题1：首次获取配置失败&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;为什么强调一下首次，因为重启服务器就会造成内存数据的丢失，网关就需要去配置中心重新获取配置，这就是首次获取，不过这时如果获取配置失败了，网关就尴尬了。所以为了应对异常情况下可能无法获取到配置信息的情况，最开始的解决办法是接口调用时传入一个默认值，在异常情况下会返回默认值，简单又有效。不过这种方式在某些场景下，又往往会产生一些意想不到是小事故，我说的就是那种有新老流程需要切流而设置的开关场景，默认配置设置为 false 走老流程，可是在逐步切流完成之后，这个配置开关和老流程并应该被遗弃，而是由于各种原因活了下来，随后又随着各种演进，老流程逐渐变成了僵尸代码，然后某一次重启一个网络抖动就把系统的僵尸炸醒了，紧接着报警就想起了，而这种情况，我还真的遇到不止一次。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.33125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FAeR52xeN391DpyUN48jy9BsjXmbZ31ic1nzoKJl7osziaib4KTzwQiaYoXOkstpglUwZQ168QrXV4ZrxjGOHfL7cg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;所以，后来在配置中心客户端里做了一点过度的设计，为啥说是过度，因为废弃的代码还是要删掉的，不能指望着别人去保障你的业务。所谓的过度设计其实只是增加了通过本地 Properties 文件对配置数据进行落地存储的容灾策略，其策略是服务器重启后，如果无法从 ZooKeeper 获取配置后，就从本地 Properties 文件获取上一次的配置数据进行加载，如果也无法从本地 Properties 文件获取配置，才返回设置的默认值。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.36796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FAeR52xeN391DpyUN48jy9BsjXmbZ31icaqsxCDbQCb5oCiaMOZhiahedH4OUXKoRaichwpy4bFAenjGKZB3qafQZg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;这里再说下在 v1 基于数据库通过线程轮询的实现方式里，网络抖动导致大量回源查询，如果查询没有设好超时时间和重试次数，就可能会产生大量的异常日志和线程阻塞，严重的还会把服务器拖死了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;小问题2：更新配置失败了&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这里的更新失败不是指数据库更新失败，而是指发送 MQ 或写 Zookeeper 失败，这里提醒一下，千万不要把这步操作放到数据库事务里，否则一个网络抖动你的数据库可能就死了，这样写的我看到过好几例。大多数场景下配置中心都是要一定先数据库成功后再进行别的操作，这里我们取了个巧，就是先发送 MQ 或写 Zookeeper 然后再保存数据库，因为这里的每个操作都是幂等的，而且数据保存失败了也容易识别出来，所以即使数据库保存失败进行了重试，对 MQ 和 Zookeeper 也不会有任何影响。&lt;/p&gt;&lt;p&gt;之前曾考虑在保存操作完成后在后端启动一个线程，对两个数据源的数据进行校对，如果不一致就进行订正，订正成功就结束线程，订正失败的话，就短暂休眠，然后继续订正。对比来看，这种实现方式就已经有些复杂了，更别说分布式事务了，所以一个先后策略的调整就可以解决的问题，不一定非要把系统做的很复杂，这在我后来的架构修炼之路上，遇到过很多这样的情况，大道至简方是王道。&lt;/p&gt;&lt;p&gt;再后来随着微服务框架的逐步完善和成熟，配置中心已经有越来越的产品被推出，比如 spring cloud config、diamond、apollo、disconf 等等，而不必要自己去开发了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;3。总结&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;言而总之，本篇文章重点讲述了流量调度的配置中心、泛化调用。下篇文章，我将继续介绍架构演进构建TCP长连接网关。如果你觉得有收获，欢迎你把今天的内容分享给更多的朋友。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;4。扩展阅读&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;故事1：从零构建亿级流量API网关&lt;/strong&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3MDU5OTU0MA==&amp;amp;mid=2247484496&amp;amp;idx=1&amp;amp;sn=30a3646447bf11623a0467edb1902b67&amp;amp;chksm=eacfd04bddb8595d6d4f94fa44733d887a7dd1b747ddf16c1b4d157daba375d0fce8304d0d82&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;01 | API网关：统一接入、分层架构、高可用架构&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;01 | API网关：统一接入、分层架构、高可用架构&lt;/a&gt;&lt;br/&gt;02 | 流量调度：配置中心、泛化调用&lt;/p&gt;&lt;p&gt;&lt;strong&gt;故事2：架构演进构建TCP长连接网关&lt;/strong&gt;&lt;br/&gt;03 | TCP网关：Netty框架、Protobuf格式、业务线程池&lt;br/&gt;04 | TCP长连接：心跳、Session管理、断线重连&lt;/p&gt;&lt;p&gt;&lt;strong&gt;故事3：架构演进重构消息PUSH系统&lt;/strong&gt;&lt;br/&gt;05 | 消息PUSH：消息推送、消息送达率、APNs&lt;/p&gt;&lt;p&gt;&lt;strong&gt;故事4：从焦油坑爬出来的交易系统&lt;/strong&gt;&lt;br/&gt;06 | 交易平台：订单管道、订单状态机、服务编排、任务引擎&lt;br/&gt;07 | 微服务化：服务治理、领域设计&lt;/p&gt;&lt;p&gt;&lt;strong&gt;故事5：烦人的焦油开始到处都是&lt;/strong&gt;&lt;br/&gt;08 | 新老系统：业务整合、数据融合、系统迁移&lt;br/&gt;09 | 高可用架构：隔离部署、系统监控与日志、可灰度、可降级&lt;/p&gt;&lt;p&gt;&lt;strong&gt;故事6：稳定性架构与大促保障&lt;/strong&gt;&lt;br/&gt;10 | 大道至简：系统复杂度、三明治架构&lt;br/&gt;11 | 大促保障：自动化测试、故障演练、性能压测&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4b5d9231b23009e1e7b8ebca3318369f</guid>
<title>ACID 过时？用  Sagas 搞定数据一致性</title>
<link>https://toutiao.io/k/punwwu7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;

&lt;/p&gt;&lt;p&gt;&lt;span&gt;ACID Is So Yesterday:
Maintaining Data Consistency
with Sagas&lt;/span&gt;&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;span&gt;Chris Richardson&lt;/span&gt;&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;span&gt;Founder of Eventuate.io&lt;br/&gt;Founder of the original CloudFoundry.com
Author of POJOs in Action&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文素材作者  &lt;strong&gt;Chris Richardson&lt;/strong&gt;，由坐馆老G先生注解&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZt17Bv3FrNwKcKb0NrP9h81LRULMcWuD2icBqI2x3qia0FluEjbTjjtLHw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;讲义goal：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;分布式数据管理在微服务架构下的挑战&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Sagas 是一种事务模型&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtX244ianca4eKrCjR4iaP3Ymc5PiagdAAyGRSics6kibWia5K2ia87wFrzCGCw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于作者Chris&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大大有名&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;POJO‘s in action&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Microservice Patterns&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtqVFhtoARuwluCKkwWgnLLW94MtkqTU2y0euHCU3rkG1PlCcdOic6VtQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZticwbe0x2T8ZILn0nx3kYndMQwVtGRADmiayYryaeW3vhBibOibQ9BIWJzQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtgGfUGGg1YVMjTiasYiaMZjruukm8oeEWO0rvtlicKWFLWQe3SO1ia3lUnQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtRUN8DMC3vZap9V8KoYuyAZyEBCusUpsSTJ1Wcfeeb9xguR5Od7paSw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtjmX96icImELK1tOxBVw5ibCicymKvP2zOax2MKz2MoGqoIoWwYIAA5xhg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZthoTFvicPExH7Vg0A4zkaztnYypFz30bVZX2IraWCseXT63buSk6d9jQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;微服务enable 持续部署&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构、组织和过程三角&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;架构：&lt;/strong&gt;微服务架构&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;组织：&lt;/strong&gt;小、敏捷、自组织功能团队&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;过程：&lt;/strong&gt;持续交付/部署&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;services = testability  and deployability&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtibPZA0nOMI7AnccRqgrtTw80BEaicoZG1NHgX6ibLgIUooMy3wFgIxeiaQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtcA5RQ4RkvHsYqMib0XhXSrEyWwoJcfXMPsULnia9jiaPyibPWWCKQ5kFqw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtMcicicuOs87LfycYYE0ibRKlTQWiaOMBicqt7wlzKWNoPaOlnuciaFmX6iciaw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;松耦合，数据封装&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtZlFxuSx6ibiaxBAANHyGfibWhkM6pGp48KpEbibOrDUVV784oa1WMVRrPQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如何维护数据一致性呢？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtDA46mkxnLDjr1hj9VWr1gQZZxPZS8W1sTxhO9ja24oEHPzj1lFU7UQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于不在一个（本地）事务中......&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtwJjd4alnybRq2eNeNKJ5nP2Rp3LjK7Wn7hj7WafYkgBvPdS2JrrNhg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2PC 不是一个好的选择&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、2PC事务协调器单点故障问题&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、通讯：至少有O（4n）条消息，并重试O（n^2）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、锁导致吞吐量降低&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、许多NoSQL数据库（或消息代理）不支持&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5、CAP理论 ⇒ 2PC影响可用性&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtIMHXFkiaoCNfYWqZvhicnvv4zOkYfFpPbe1hLKte7NgVB78GdBp6bEsQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Ebay的Dan Pritchett 提出：&lt;/span&gt;&lt;/h3&gt;&lt;h2&gt;&lt;span&gt;In partitioned databases, trading some consistency for availability can lead to dramatic improvements in scalability.&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;并有一个著名的Base理论。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;Base: An Acid Alternative&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;Basically Available &lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Soft state&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Eventually consistent&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZt9CRN84TibFgduyOhWx2VuianzicT2JBhfBpc5PR11NXDXSdG6PV9zRMbQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtib5w2dXcicPNQozib3xKRZHHCh0rxOricbcIQcgqBzWBoogxROAibiaibiciccA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;sagas 可以追溯到1987年的论文&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1987年普林斯顿大学的Hector Garcia-Molina和Kenneth Salem发表了一篇Paper Sagas，讲述的是如何处理long lived transaction（长活事务）。Saga是一个长活事务可被分解成可以交错运行的子事务集合。其中每个子事务都是一个保持数据库一致性的真实事务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtmf0UzxKQibbsKtWgcF3IqJp7La0oNZLmib56C99X3sgoMuZzJNAkjOicQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtRC0Su9mmEicRcic9Bic8FapWjmOsKheBmJhZhhFyUTAEDh76RBBZzOc6A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtQ04MgBCvXQy1SibRpciaIQHTCgSEq6wlIktSjtt22qPhtcqBgKsEJWLQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtsBxnmD7RxPQBKntsIGLXUKRIasIYM8JiagNwLxWAf6jGhI6ZgYcP4OQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZt2fQ1mGU1UxueYPh6scp54nUhtIFSXrZbo9K3g0w5Yl1xKOqqlSHPbA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Saga的组成&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;可以看到，和TCC相比，Saga没有“预留”动作，它的T&lt;sub&gt;i&lt;/sub&gt;就是直接提交到库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Saga的执行顺序有两种：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;T&lt;sub&gt;1&lt;/sub&gt;, T&lt;sub&gt;2&lt;/sub&gt;, T&lt;sub&gt;3&lt;/sub&gt;, ..., T&lt;sub&gt;n&lt;/sub&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;T&lt;sub&gt;1&lt;/sub&gt;, T&lt;sub&gt;2&lt;/sub&gt;, ..., T&lt;sub&gt;j&lt;/sub&gt;, C&lt;sub&gt;j&lt;/sub&gt;,..., C&lt;sub&gt;2&lt;/sub&gt;, C&lt;sub&gt;1&lt;/sub&gt;，其中0 &amp;lt; j &amp;lt; n&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Saga定义了两种恢复策略：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;backward recovery，向后恢复，补偿所有已完成的事务，如果任一子事务失败。即上面提到的第二种执行顺序，其中j是发生错误的sub-transaction，这种做法的效果是撤销掉之前所有成功的sub-transation，使得整个Saga的执行结果撤销。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;forward recovery，向前恢复，重试失败的事务，假设每个子事务最终都会成功。适用于必须要成功的场景，执行顺序是类似于这样的：T&lt;sub&gt;1&lt;/sub&gt;, T&lt;sub&gt;2&lt;/sub&gt;, ..., T&lt;sub&gt;j&lt;/sub&gt;(失败), T&lt;sub&gt;j&lt;/sub&gt;(重试),..., T&lt;sub&gt;n&lt;/sub&gt;，其中j是发生错误的sub-transaction。该情况下不需要C&lt;sub&gt;i&lt;/sub&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtg4WIkpNQ1qicmK806LIrsNr9ruAP8CJic7cHxWFnLd9l5zKia4YBAODCA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtvia2ycWSuIzqGllLk2EcFpOuLmpPqswDLveANKK9zCHbGialBr52VdDw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Sagas complicate API design （&lt;/span&gt;&lt;span&gt;Sagas 使 API 设计 复杂化 &lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Synchronous API vs Asynchronous Saga&lt;br/&gt;Request initiates the saga. When to send back the response? &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Option #1: Send response when saga completes:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;span&gt;+ Response specifies the outcome
- Reduced availability&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;选择一：saga完成的时候发送响应&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Option #2: Send response immediately after creating the saga&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(recommended)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;选择二：创建saga之后马上发送响应（推荐）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;+ Improved availability（&lt;span&gt;提高可用性&lt;/span&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- Response does not specify the outcome. Client must poll or be notified&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（响应没有指定结果。必须轮询或通知Client端）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZticKQzS8YQJnic5n1fhlTiaQ0FxZ08r2boVrBUnq6nTRAWtdAm2vwEQliag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtFYLIajAtZEW5gVfEicqYvKxibnWSY78jhxYgsZL0OSmIm5LAFrWRfwdQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用Sagas，可能影响用户体验。&lt;/p&gt;&lt;p&gt;UI界面向用户隐藏异步API&lt;/p&gt;&lt;p&gt;如果需要更长的时间， 用户界面显示“处理中”弹出窗口&lt;/p&gt;&lt;p&gt;服务器可以将通知推送到UI&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtd0fNco4T2GUVKqa4qF32ufIpRj2FpR7RqC4J6urOIBJl1VGZeTiaAmw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtgZyYfRXAMpL4v7ystHcSsfJXpP6ibiaVKy4UaEneGvH4SP3iaibUwbpePA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtsllKCeRNaxHwLgTXBQibJwkasWEbYKRBAiafc6K0FtFbXtX1PgMrIt8A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZthtIFjrOhV6ictcaruyewYicV0o7B6tnMyuAibWCth5VcOp8XhoZR9rIJQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;Sagas 拥有 ACD 特性&lt;/p&gt;&lt;p&gt;原子性、一致性、持久性&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtu4TqLSADNSVE2GExiaU0fsbjiaBwXr1kUFibibCYicNh3KBibKwZrbzlXibicA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;缺失隔离性&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtYXCbHHRQ61qTjJCtibfW6SSqLKm4aoibkfAg1WGAQ0jj32QuESZazKXA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Commutative updates&lt;/p&gt;&lt;p&gt;e.g. debit account can compensate for a credit account&lt;/p&gt;&lt;p&gt;Version file （版本文件）&lt;/p&gt;&lt;p&gt;Record history of changes （记录变化历史）&lt;/p&gt;&lt;p&gt;Use them to make updates commutative&lt;/p&gt;&lt;p&gt;e.g. record cancel reservation（记录 取消 预定） so that create/cancel = cancel/ create&lt;/p&gt;&lt;p&gt;Sounds suspiciously like event sourcing&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtwBYsQ3OnjRwLt7yGBW04lJsKzoicib9DJ4gBWC8v6ae14rhJ70rGZ0yQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtnGEpxskyqIadia8byoNF6nn1EibYibCObKUJ7lAsOXZhicM1RycHZpQvQw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtWyF9RGzJVPTlocN3FicwtMNg1DxOwE9nbtj1XhiaqFhOqYSeBic2CHfxg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtwg9se57qZc7iagN4pMI4yxVJP7uQh5dM6b0k7aSKw2locLxyIPmn0uQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZt10l32EfGJEArIJicjl9wnR7RBicS0kA3LJekbLOIOAOArbtCP5VwFkZQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;

&lt;/p&gt;&lt;p&gt;&lt;span&gt;Choreography （编排）: &lt;/span&gt;&lt;span&gt;distributed &lt;/span&gt;&lt;span&gt;decision making
vs.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Orchestration（协调）: &lt;/span&gt;&lt;span&gt;centralized &lt;/span&gt;&lt;span&gt;decision making&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtEdBTySgtq00P20acOFRUGsLnRkNwgdl2yPsibGCujOR7cHW586dvRqw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;方案1:使用事件做基于编排模式的协作&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtecfjeJLibJpXmv4aZvcM1LdiaUyWy7DJRKQuNMcXEXJQWicGxB4ehfRlA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;优缺点：&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;span&gt;Benefits （&lt;/span&gt;&lt;span&gt;好处&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简单，尤其使用事件溯源时&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参与者松耦合&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Drawbacks （缺点）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;span&gt;循环依赖&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;领域对象过载，例如订单和客户相互知道太多&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Events = &lt;/span&gt;&lt;span&gt;ndirect way to
make something happen to
make something happen&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtKQSia2jiaAMGvDMHQtXY2SaMEL6maUsj3a2nKNhuAjoTRTMbOia54S6qg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;选项2：基于编排的saga协调&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtySEsJvhFlPgSbVBCUyIfHGvudPINdqLrjGvB00ic2ia9EkCT9X2GYe8g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;saga（&lt;/span&gt;&lt;span&gt;orchestrator &lt;/span&gt;&lt;/span&gt;&lt;span&gt;） &lt;/span&gt;&lt;span&gt;是一个持久性对象，跟踪&lt;span&gt;saga&lt;/span&gt;的状态，以及调用参与者&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtdw7RWvDXEkKvoaWLgOYhVICVud6rEz40vDaibRW5nEw1ibXBMaqtfU9w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtEdZJjN8SlfGTIqWicZDt3X7JLw5mXyYTmppdzxdm2op91dQibibicunYPg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtS28AsqnmPOg2yzafEL7AZ2Mf73jYoz3YUWoCeiaV7qbiaDwcLCGj7fnw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZt7Pgm3bmhEXuuyIJe0tKRiacjdic236K33KHoj4VPdBvkUNibSEQasc31w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtFHXANQZRIibIHicw8Xo8IFXn7IqwtEEjD43uKNloYviccFc1b6UibSgGTQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;这里有一个例子，开源的saga 框架&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZt8uAxuOl7jccWsmfurGu9ghvK3C3NhYodXdGWU4GFRiaibBsKricvVUibmw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt; &lt;span&gt;优缺点&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Benefits&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Centralized coordination logic is easier to understand&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Reduced coupling, e.g. Customer knows less&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Reduces cyclic dependencies&lt;/span&gt;&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;span&gt;Drawbacks&lt;/span&gt;&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;span&gt;Risk of smart sagas
directing dumb services&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtwv1gVecKN4fV1NWIcvbmpicBH8ACbI1dEwMIiaJSbk98q8UlHlcRTMUw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtlyKpgCyMHJbd0WIfpvCaaqGNtkWM12MPgN4z3XWKF1GDX6ntiaWUvDw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtOJJm8Eia4oxicuy0W23v4G7f1QyMAekicGTyqua8fMHBLnfzicfdQ8QnJA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtpdNGeiaOIJTlGQiaoQkMVO0DjvcCsUhATomQVVd08zsKldMicVp1sGrcw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtbpFXz2jJcp4IeUxvTBk1wsRBkvL1yzWMHKQ0ibJKdLeACYwxY9kRZCg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;消息必须支持事务&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtFbwJNr8JANHNdkMrDpSrZzee9CRnxedWKIkrlHt3ibm4ZKMelEHhw5A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;选择1:使用数据库表作为消息队列，ebay的案例&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZta3NXqMazIsnvA7bpH3Jib8xZP59Bv1kJZ2OOPnXZm5VCbG9KGxuD3nw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtQFX580rBMGsEaUkAsUxTxngI3wte0gF6eY63210M7ACEibWRftlcGHA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtP4UwYx9iaicKndeyYOQtXWEaQ0WFPKUeGXbH5t11rZcKuggnicyqzYgicA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;选择2: 使用事件溯源：以事件为中心的持久化&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.77265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtD9acZ2vnvNh7NvpFC4BXUjhjam7RRSr4gUc90wpX29gdLicKRH1dhIw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.77265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZt6gEYeJUlootoiaJU5BzWPtia3mV9D5SM0hJbuIgB74bWDDccXAt05tFA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.77265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWE5JGuOWRPSRcfQgZeI2uZtY54reVHkia3zBNwl0F9gWrO81IzBgvPdP8XUWia3RHuVYLdkC3ZZQYIg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;pre ng-bind-html=&quot;message.MMActualContent&quot;&gt;&lt;pre ng-bind-html=&quot;message.MMActualContent&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;加入技术琐话粉丝群，&lt;/span&gt;公众号回复：技术群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;下载“&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIxMzEzMjM5NQ==&amp;amp;mid=2651053870&amp;amp;idx=1&amp;amp;sn=e88f8a63230f0abfb04cc88cdd8b566a&amp;amp;chksm=8c4c0a2abb3b833cd80374bfb8d9856e3a3f39deaa0265fa3d7a98327100fa74d0f8879bdc84&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;100页ppt讲清楚云原生&lt;/a&gt;&lt;span&gt; ” ppt，&lt;/span&gt;公众号回复：高磊。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;下载本&lt;/span&gt;&lt;span&gt;ppt，&lt;/span&gt;公众号回复：sagas。&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  往期推荐：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;技术琐话 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;以分布式设计、架构、体系思想为基础，兼论研发相关的点点滴滴，不限于代码、质量体系和研发管理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;188&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;188&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWEup6pcFSoqDWX2CnKtr2ibick4zKc3GbnGwOU6OfRibTYDbP4ueZgYDVIQX96Wic9KibEX710j1jsqWicg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;860&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9bfa159dc39272ed4653fc3f153669c9</guid>
<title>金融应用场景下跨数据中心的 MGR 架构方案（二）</title>
<link>https://toutiao.io/k/ak6z4dh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;本文来源：原创投稿&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;* GreatSQL社区原创内容未经授权不得随意使用，转载请联系小编并注明来源。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;h2&gt;内容提纲&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkzMTIzMDgwMg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/zYias49R9JlSj1pIMHo1yz8zELQRia2ia2RtticSicQpYHhSQBiarib6oRS0hcnGJpbScibmIumHjxpKbT0dWOpDMR3yMw/0?wx_fmt=png&quot; data-nickname=&quot;GreatSQL社区&quot; data-alias=&quot;GreatSQL&quot; data-signature=&quot;专注GreatSQL数据库及相关产品&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;如何在多个数据中心部署多套MGR集群，并实现故障快速切换。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkzMTIzMDgwMg==&amp;amp;mid=2247484798&amp;amp;idx=1&amp;amp;sn=c76c87241529524768b4e3faef7513e1&amp;amp;chksm=c26f6043f518e95520020dfb609ba5199a67b520fc733d4d8b5ae67c146ae6f19c4bdcfa6c02&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;上篇文章介绍了如何在多数据中心部署多套MGR集群&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;上篇文章介绍了如何在多数据中心部署多套MGR集群&lt;/strong&gt;&lt;/a&gt;，并构建集群间的复制通道。这样一旦主AZ不可用时，在校验完数据后，就可以切换到备用AZ的MGR集群，非常方便。&lt;/p&gt;&lt;p&gt;本文我们继续深入介绍如何利用 &lt;strong&gt;Async Replication Auto failover&lt;/strong&gt; 实现故障自动转移的。&lt;/p&gt;&lt;h2&gt;1、什么是Async Replication Auto failover&lt;/h2&gt;&lt;p&gt;从MySQL 8.0.22开始，推出一个新特性&quot;&lt;strong&gt;Async Replication Auto failover&lt;/strong&gt;&quot;，当MGR集群发生故障时，其从库可以更方便的实现快速自动切主。直译过来是“&lt;strong&gt;异步复制自动故障转移&lt;/strong&gt;”，但实际上它也是支持半同步复制场景的。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;You can use MySQL Server&lt;span&gt;&#x27;s new asynchronous connection failover mechanism to automatically establish an asynchronous (source to replica) replication connection to a new source after the existing connection from a replica to its source fails. The connection fails over if the replication I/O thread stops due to the source stopping or due to a network failure. The asynchronous connection failover mechanism can be used to keep a replica synchronized with multiple MySQL servers or groups of servers that share data. To activate asynchronous connection failover for a replication channel set SOURCE_CONNECTION_AUTO_FAILOVER=1 on the CHANGE MASTER TO statement for the channel, and set up a source list for the channel using the asynchronous_connection_failover_add_source and asynchronous_connection_failover_delete_source functions.&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;详细介绍见官方文档 17.4.9 Switching Sources with Asynchronous Connection Failover&lt;/p&gt;&lt;h2&gt;2、基于MGR的两地三中心数据库架构方案&lt;/h2&gt;&lt;p&gt;在两地三中心架构下，可以采用下面这个部署方案&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;559&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9673024523160763&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zYias49R9JlShq9SEBr5NgQiag0veP2ODDl4zcQqD21iaj0S9HiaBEf5KRVgm5FFQtzDyl2akOiar5aJut9ecatHo4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1468&quot;/&gt;&lt;/p&gt;&lt;p&gt;在这个架构方案里，MGR-B可以采用 &lt;strong&gt;异步复制&lt;/strong&gt; 或 &lt;strong&gt;增强半同步复制&lt;/strong&gt; 通道从MGR-A复制数据，这要取决于两个AZ之间的网络状况。&lt;/p&gt;&lt;p&gt;在金融应用场景下，这个网络条件一般可以得到保障，因此&lt;strong&gt;优先采用增强版同步方式&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;而跨城异地AZ里的MGR C则因为网络延迟较大，大概率会采用异步复制方式。&lt;/p&gt;&lt;p&gt;在上述方案中，不管是MGR-B还是C，都面临一个问题：&lt;strong&gt;那就是复制源指向的主机实例，发生故障不可用之后，如何快速切换，实现自动故障转移&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;在以往，只能靠第三方工具实现切换。&lt;/p&gt;&lt;p&gt;在MySQL 8.0.22新增&quot;Async Replication Auto failover&quot;特性后，就没这个烦恼了。&lt;/p&gt;&lt;p&gt;其工作机制是 &lt;strong&gt;在一个复制通道上设置多个复制源（source），它还支持对多个源设置不同权重。当发现主复制源发生故障异常中断后（会先尝试重连几次），即可实现自动切换到新的复制源。当原来的复制源恢复后，如果其权重更高，还会再切换回去&lt;/strong&gt;。&lt;/p&gt;&lt;h2&gt;3、配置Async Replication Auto failover&lt;/h2&gt;&lt;p&gt;部署的过程很简单，几条命令就搞定了。&lt;/p&gt;&lt;h3&gt;3.1、创建复制通道&lt;/h3&gt;&lt;p&gt;按照常规方式，在从实例上（本案以MGR-B为例）创建一个复制通道&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@GreatSQL mgrB-1][(none)]&amp;gt; CHANGE REPLICATION SOURCE TO&lt;br/&gt;MASTER_HOST=&lt;span&gt;&#x27;172.16.16.10&#x27;&lt;/span&gt;, MASTER_PORT=3306, &lt;br/&gt;MASTER_USER=&lt;span&gt;&#x27;repl&#x27;&lt;/span&gt;, MASTER_PASSWORD=&lt;span&gt;&#x27;repl&#x27;&lt;/span&gt;,&lt;br/&gt;MASTER_AUTO_POSITION=1,&lt;br/&gt;SOURCE_CONNECTION_AUTO_FAILOVER=1, &lt;span&gt;#这里是关键，表示开启自动故障转移&lt;/span&gt;&lt;br/&gt;MASTER_RETRY_COUNT=3, &lt;span&gt;#最多重试3次&lt;/span&gt;&lt;br/&gt;MASTER_CONNECT_RETRY=10 &lt;span&gt;#每次重试间隔10秒&lt;/span&gt;&lt;br/&gt;FOR CHANNEL &lt;span&gt;&#x27;MGR-A&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#简单解释下几个参数&lt;/span&gt;&lt;br/&gt;- SOURCE_CONNECTION_AUTO_FAILOVER=1  &lt;span&gt;#这里是关键，表示开启自动故障转移&lt;/span&gt;&lt;br/&gt;- MASTER_RETRY_COUNT=3  &lt;span&gt;#表示最多重试3次，默认是是86400次&lt;/span&gt;&lt;br/&gt;- MASTER_CONNECT_RETRY=10 &lt;span&gt;#表示每次重试间隔10秒，默认是60秒&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;确认添加的复制通道生效了：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@GreatSQL mgrB-1][(none)]&amp;gt; SELECT * FROM performance_schema.replication_applier_status\G&lt;br/&gt;*************************** 1. row ***************************&lt;br/&gt;              CHANNEL_NAME: mgr&lt;span&gt;-a&lt;/span&gt;&lt;br/&gt;             SERVICE_STATE: ON&lt;br/&gt;           REMAINING_DELAY: NULL&lt;br/&gt;COUNT_TRANSACTIONS_RETRIES: 0&lt;br/&gt;*************************** 2. row ***************************&lt;br/&gt;              CHANNEL_NAME: group_replication_applier&lt;br/&gt;             SERVICE_STATE: ON&lt;br/&gt;           REMAINING_DELAY: NULL&lt;br/&gt;COUNT_TRANSACTIONS_RETRIES: 0&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;3.2、对复制通道添加多个复制源&lt;/h3&gt;&lt;p&gt;接下来再对这个复制通道添加多个复制源（多次调用该UDF即可）：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@GreatSQL mgrB-1][(none)]&amp;gt; SELECT asynchronous_connection_failover_add_source(&lt;span&gt;&#x27;MGR-A&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;172.16.16.10&#x27;&lt;/span&gt;,3306,null,60);&lt;br/&gt;[root@GreatSQL mgrB-1][(none)]&amp;gt; SELECT asynchronous_connection_failover_add_source(&lt;span&gt;&#x27;MGR-A&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;172.16.16.11&#x27;&lt;/span&gt;,3306,null,60);&lt;br/&gt;[root@GreatSQL mgrB-1][(none)]&amp;gt; SELECT asynchronous_connection_failover_add_source(&lt;span&gt;&#x27;MGR-A&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;172.16.16.12&#x27;&lt;/span&gt;,3306,null,60);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#简单解释下几个参数&lt;/span&gt;&lt;br/&gt;MGR-A  &lt;span&gt;#表示复制通道，和上面的复制通道同名&lt;/span&gt;&lt;br/&gt;172.16.16.10 &lt;span&gt;#表示该复制源的IP&lt;/span&gt;&lt;br/&gt;3306 &lt;span&gt;#表示该复制源的端口&lt;/span&gt;&lt;br/&gt;null &lt;span&gt;#表示network_namespace，未来的特性，现在先放空即可&lt;/span&gt;&lt;br/&gt;60 &lt;span&gt;#表示该复制源的权重，上面我们介绍了不同权重的作用，值越大越有机会抢到成为复制源&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;确认多个复制源生效：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@GreatSQL mgrB-1][(none)]&amp;gt; SELECT * FROM performance_schema.replication_asynchronous_connection_failover;&lt;br/&gt;+--------------+--------------+------+-------------------+--------+--------------+&lt;br/&gt;| CHANNEL_NAME | HOST         | PORT | NETWORK_NAMESPACE | WEIGHT | MANAGED_NAME |&lt;br/&gt;+--------------+--------------+------+-------------------+--------+--------------+&lt;br/&gt;| mgr&lt;span&gt;-a&lt;/span&gt;        | 172.16.16.10 | 3306 |                   |     60 |              |&lt;br/&gt;| mgr&lt;span&gt;-a&lt;/span&gt;        | 172.16.16.11 | 3306 |                   |     60 |              |&lt;br/&gt;| mgr&lt;span&gt;-a&lt;/span&gt;        | 172.16.16.12 | 3306 |                   |     60 |              |&lt;br/&gt;+--------------+--------------+------+-------------------+--------+--------------+&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;启动该复制通道：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@GreatSQL mgrB-1][(none)]&amp;gt; START REPLICA FOR CHANNEL &lt;span&gt;&#x27;MGR-A&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;确认复制通道和MGR的状态都正常：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@GreatSQL mgrB-1][(none)]&amp;gt; SELECT * FROM performance_schema.replication_connection_status\G&lt;br/&gt;*************************** 1. row ***************************&lt;br/&gt;                                      CHANNEL_NAME: mgr&lt;span&gt;-a&lt;/span&gt;&lt;br/&gt;                                        GROUP_NAME:&lt;br/&gt;                                       SOURCE_UUID: b084f8a1-96a8-11eb-9a70-525400fb993a&lt;br/&gt;                                         THREAD_ID: 3084&lt;br/&gt;                                     SERVICE_STATE: ON&lt;br/&gt;                         COUNT_RECEIVED_HEARTBEATS: 5974&lt;br/&gt;                          LAST_HEARTBEAT_TIMESTAMP: 2021-05-29 18:53:13.879720&lt;br/&gt;                          RECEIVED_TRANSACTION_SET: 476c0276-be03-11eb-bd34-525400e802e2:21-31:1000016-1000017&lt;br/&gt;                                 LAST_ERROR_NUMBER: 0&lt;br/&gt;                                LAST_ERROR_MESSAGE:&lt;br/&gt;                              LAST_ERROR_TIMESTAMP: 0000-00-00 00:00:00.000000&lt;br/&gt;                           LAST_QUEUED_TRANSACTION: 476c0276-be03-11eb-bd34-525400e802e2:31&lt;br/&gt; LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP: 0000-00-00 00:00:00.000000&lt;br/&gt;LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP: 2021-05-27 17:19:43.201000&lt;br/&gt;     LAST_QUEUED_TRANSACTION_START_QUEUE_TIMESTAMP: 2021-05-27 17:19:43.203315&lt;br/&gt;       LAST_QUEUED_TRANSACTION_END_QUEUE_TIMESTAMP: 2021-05-27 17:19:43.203349&lt;br/&gt;                              QUEUEING_TRANSACTION:&lt;br/&gt;    QUEUEING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP: 0000-00-00 00:00:00.000000&lt;br/&gt;   QUEUEING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP: 0000-00-00 00:00:00.000000&lt;br/&gt;        QUEUEING_TRANSACTION_START_QUEUE_TIMESTAMP: 0000-00-00 00:00:00.000000&lt;br/&gt;*************************** 2. row ***************************&lt;br/&gt;                                      CHANNEL_NAME: group_replication_applier&lt;br/&gt;                                        GROUP_NAME: f195537d-19ac-11eb-b29f-5254002eb6d6&lt;br/&gt;                                       SOURCE_UUID: f195537d-19ac-11eb-b29f-5254002eb6d6&lt;br/&gt;                                         THREAD_ID: NULL&lt;br/&gt;                                     SERVICE_STATE: ON&lt;br/&gt;                         COUNT_RECEIVED_HEARTBEATS: 0&lt;br/&gt;                          LAST_HEARTBEAT_TIMESTAMP: 0000-00-00 00:00:00.000000&lt;br/&gt;                          RECEIVED_TRANSACTION_SET: 476c0276-be03-11eb-bd34-525400e802e2:1-31:1000015-1000017,&lt;br/&gt;f195537d-19ac-11eb-b29f-5254002eb6d6:1-18&lt;br/&gt;                                 LAST_ERROR_NUMBER: 0&lt;br/&gt;                                LAST_ERROR_MESSAGE:&lt;br/&gt;                              LAST_ERROR_TIMESTAMP: 0000-00-00 00:00:00.000000&lt;br/&gt;                           LAST_QUEUED_TRANSACTION: f195537d-19ac-11eb-b29f-5254002eb6d6:18&lt;br/&gt; LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP: 0000-00-00 00:00:00.000000&lt;br/&gt;LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP: 0000-00-00 00:00:00.000000&lt;br/&gt;     LAST_QUEUED_TRANSACTION_START_QUEUE_TIMESTAMP: 2021-05-27 17:04:03.407281&lt;br/&gt;       LAST_QUEUED_TRANSACTION_END_QUEUE_TIMESTAMP: 2021-05-27 17:04:03.407317&lt;br/&gt;                              QUEUEING_TRANSACTION:&lt;br/&gt;    QUEUEING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP: 0000-00-00 00:00:00.000000&lt;br/&gt;   QUEUEING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP: 0000-00-00 00:00:00.000000&lt;br/&gt;        QUEUEING_TRANSACTION_START_QUEUE_TIMESTAMP: 0000-00-00 00:00:00.000000&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行 &lt;code&gt;SHOW REPLICA STATUS&lt;/code&gt; 查看状态：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;*************************** 1. row ***************************&lt;br/&gt;             Replica_IO_State: Waiting &lt;span&gt;for&lt;/span&gt; master to send event&lt;br/&gt;                  Source_Host: 172.16.16.10&lt;br/&gt;                  Source_User: repl&lt;br/&gt;                  Source_Port: 3306&lt;br/&gt;                Connect_Retry: 10&lt;br/&gt;...&lt;br/&gt;           Replica_IO_Running: Yes&lt;br/&gt;          Replica_SQL_Running: Yes&lt;br/&gt;...&lt;br/&gt;                  Source_UUID: 5499a6cb-91cb-11eb-966f-525400e802e2&lt;br/&gt;...&lt;br/&gt;           Source_Retry_Count: 3&lt;br/&gt;...&lt;br/&gt;           Retrieved_Gtid_Set: 476c0276-be03-11eb-bd34-525400e802e2:21-31:1000016-1000017&lt;br/&gt;            Executed_Gtid_Set: 476c0276-be03-11eb-bd34-525400e802e2:1-31:1000015-1000017,&lt;br/&gt;f195537d-19ac-11eb-b29f-5254002eb6d6:1-18&lt;br/&gt;                Auto_Position: 1&lt;br/&gt;         Replicate_Rewrite_DB:&lt;br/&gt;                 Channel_Name: mgr&lt;span&gt;-a&lt;/span&gt;&lt;br/&gt;...               &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先记住上面输出结果中的 &lt;code&gt;Source_Host&lt;/code&gt; 和 &lt;code&gt;Source_UUID&lt;/code&gt; 等信息，下面模拟一次复制源服务器宕机后，自动切换复制源的场景。&lt;/p&gt;&lt;h2&gt;4、模拟故障，确认可自动切换&lt;/h2&gt;&lt;p&gt;在当前复制源服务器上，执行 &lt;code&gt;kill -9&lt;/code&gt; 杀掉 mysqld 进程，然后就能看到从服务器上有类似如下日志：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 先尝试3次（每次间隔10秒）重连旧的复制源服务器&lt;/span&gt;&lt;br/&gt;[ERROR] [MY-010584] [Repl] Slave I/O &lt;span&gt;for&lt;/span&gt; channel &lt;span&gt;&#x27;mgr-a&#x27;&lt;/span&gt;: error connecting to master &lt;span&gt;&#x27;repl@172.16.16.10:3306&#x27;&lt;/span&gt; - retry-time: 10 retries: 3 message: Can&lt;span&gt;&#x27;t connect to MySQL server on &#x27;&lt;/span&gt;172.16.16.10:3306&lt;span&gt;&#x27; (111), Error_code: MY-002003&lt;br/&gt;&lt;br/&gt;#重试失败，停止复制I/O线程&lt;br/&gt;[Note] [MY-010563] [Repl] Slave I/O thread for channel &#x27;&lt;/span&gt;mgr&lt;span&gt;-a&lt;/span&gt;&lt;span&gt;&#x27; killed while connecting to master&lt;br/&gt;[Warning] [MY-010897] [Repl] Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the &#x27;&lt;/span&gt;START SLAVE Syntax&lt;span&gt;&#x27; in the MySQL Manual for more information.&lt;br/&gt;&lt;br/&gt;# 再次启动复制I/O线程，连接到新的复制源服务器&lt;br/&gt;[System] [MY-010562] [Repl] Slave I/O thread for channel &#x27;&lt;/span&gt;mgr&lt;span&gt;-a&lt;/span&gt;&lt;span&gt;&#x27;: connected to master &#x27;&lt;/span&gt;repl@172.16.16.11:3306&lt;span&gt;&#x27;,replication started in log &#x27;&lt;/span&gt;FIRST&lt;span&gt;&#x27; at position 8598&lt;br/&gt;# 告知UUID发生切换了&lt;br/&gt;[Warning] [MY-010549] [Repl] The master&#x27;&lt;/span&gt;s UUID has changed, although this should not happen unless you have changed it manually. The old UUID was ec2fcbeb-976c-11eb-a652-525400e2078a.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再次执行 &lt;code&gt;SHOW REPLICA STATUS&lt;/code&gt; 确认复制源切换了：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;*************************** 1. row ***************************&lt;br/&gt;             Replica_IO_State: Waiting &lt;span&gt;for&lt;/span&gt; master to send event&lt;br/&gt;                  Source_Host: 172.16.16.11&lt;br/&gt;                  Source_User: repl&lt;br/&gt;                  Source_Port: 3306&lt;br/&gt;                Connect_Retry: 10&lt;br/&gt;...&lt;br/&gt;           Replica_IO_Running: Yes&lt;br/&gt;          Replica_SQL_Running: Yes&lt;br/&gt;...&lt;br/&gt;                  Source_UUID: ec2fcbeb-976c-11eb-a652-525400e2078a&lt;br/&gt;...&lt;br/&gt;           Source_Retry_Count: 3&lt;br/&gt;...&lt;br/&gt;           Retrieved_Gtid_Set: 476c0276-be03-11eb-bd34-525400e802e2:21-32:1000016-1000017&lt;br/&gt;            Executed_Gtid_Set: 476c0276-be03-11eb-bd34-525400e802e2:1-32:1000015-1000017,&lt;br/&gt;f195537d-19ac-11eb-b29f-5254002eb6d6:1-18&lt;br/&gt;                Auto_Position: 1&lt;br/&gt;         Replicate_Rewrite_DB:&lt;br/&gt;                 Channel_Name: mgr&lt;span&gt;-a&lt;/span&gt;&lt;br/&gt;...               &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为3个复制源的权重设置为一样，所以当原来的复制源服务器宕机恢复后，不会再切换回去。而如果旧的复制源服务器权重设置较高的话，当他恢复后，会再次发生切换，切回原来的源：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#没有任何尝试重连的行为，直接发起切换&lt;/span&gt;&lt;br/&gt;[Note] [MY-011026] [Repl] Slave I/O thread killed &lt;span&gt;while&lt;/span&gt; reading event &lt;span&gt;for&lt;/span&gt; channel &lt;span&gt;&#x27;mgr-a&#x27;&lt;/span&gt;.&lt;br/&gt;[Note] [MY-010570] [Repl] Slave I/O thread exiting &lt;span&gt;for&lt;/span&gt; channel &lt;span&gt;&#x27;mgr-a&#x27;&lt;/span&gt;, &lt;span&gt;read&lt;/span&gt; up to &lt;span&gt;log&lt;/span&gt; &lt;span&gt;&#x27;FIRST&#x27;&lt;/span&gt;, position 8871&lt;br/&gt;[Warning] [MY-010897] [Repl] Storing MySQL user name or password information &lt;span&gt;in&lt;/span&gt; the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options &lt;span&gt;for&lt;/span&gt; START SLAVE; see the &lt;span&gt;&#x27;START SLAVE Syntax&#x27;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; the MySQL Manual &lt;span&gt;for&lt;/span&gt; more information.&lt;br/&gt;[System] [MY-010562] [Repl] Slave I/O thread &lt;span&gt;for&lt;/span&gt; channel &lt;span&gt;&#x27;mgr-a&#x27;&lt;/span&gt;: connected to master &lt;span&gt;&#x27;repl@172.16.16.10:3306&#x27;&lt;/span&gt;,replication started &lt;span&gt;in&lt;/span&gt; &lt;span&gt;log&lt;/span&gt; &lt;span&gt;&#x27;FIRST&#x27;&lt;/span&gt; at position 8871&lt;br/&gt;[Warning] [MY-010549] [Repl] The master&lt;span&gt;&#x27;s UUID has changed, although this should not happen unless you have changed it manually. The old UUID was 5499a6cb-91cb-11eb-966f-525400e802e2. -- 再次切回原来的主&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这就很方便的可以实现自动故障转移了。&lt;/p&gt;&lt;p&gt;现在，我们利用MGR + 增强半同步复制 + 自动故障转移 构建了一套金融级应用场景下的两地多中心数据库架构方案。推荐选用可靠性、稳定性更高的GreatSQL，可以更放心的使用MGR（&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkzMTIzMDgwMg==&amp;amp;mid=2247483656&amp;amp;idx=1&amp;amp;sn=ca60b3875450cd3dfaad3519b12c9dcb&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;GreatSQL，打造更好的MGR生态&lt;/a&gt;）。&lt;/p&gt;&lt;p&gt;后面再继续介绍基于MGR的其他架构解决方案。&lt;/p&gt;&lt;p&gt;Enjoy GreatSQL :)&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;文章推荐：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;扫码添加GreatSQL社区助手微信好友&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;发送“&lt;strong&gt;加群&lt;/strong&gt;”加入GreatSQL/MGR交流群&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zYias49R9JlQhvyQrQeTTkmznA0JxvCdx55j0lJ0DndtV7L5Nuyuv4zqyxkQ418yIgfEHibHu4wesJmDQxl3Xwkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;430&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;亦可扫码加入&lt;span&gt;GreatSQL/MGR交流&lt;/span&gt;&lt;strong&gt;&lt;span&gt;QQ群&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3488888888888888&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zYias49R9JlRh5u1vLDXuNWYwSW1QhD77kJdCGYvtJoW7yiamG8ZIHQvuZe5iaAlKMYXpPtx0xnYZgVGFngxxR3Cw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;想看更多技术好文，点个&lt;strong&gt;&lt;span&gt;“在看”&lt;/span&gt;&lt;/strong&gt;吧！ &lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b9818053360512f5f3fc6901bdcdaa81</guid>
<title>Android 读取应用列表权限详解</title>
<link>https://toutiao.io/k/zy799vm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000662&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.21786833855799373&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/n5WtWCY9vpAuLhzbU8ic3bQP8wTasEsTTPLHCY1ZExkx2YnKqRdFhlNxQoPMx30TCw6X4n9pAEzXUE6RRbDl8hA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;638&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;106021&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;10月4日，Google将Android12源代码推送到AOSP，标志着Android12正式发布。在Android12中，Google增强了一系列安全与隐私功能，包括但不限于软件包可见性、剪切板权限以及敏感权限提示等。&lt;/p&gt;&lt;p&gt;其中，对于“软件包可见性”权限做了进一步的限制[1]。为了更清楚了解“软件包可见性”权限，本文接下来将讲述该权限的演变过程。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img align=&quot;bottom&quot; border=&quot;0&quot; data-fileid=&quot;100003911&quot; data-ratio=&quot;0.5258620689655172&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/n5WtWCY9vpA7O2g46pcAcFMA2ZMzRpbkSssaTupSQbSfZrt82a5eLzUSYAicb0lFsqms2zX4TCWqDqduuCRzKDQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;464&quot;/&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106010&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-fileid=&quot;100003910&quot; data-ratio=&quot;0.6571428571428571&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/n5WtWCY9vpA7O2g46pcAcFMA2ZMzRpbkaak6iag9lkhZhU3h1yzMIYFOVibBeOf6gpy9WT6eKicWduCOp4VpVuaJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;50&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;286:398&quot;&gt;&lt;span&gt;&lt;strong&gt;一、Android 11以下版本系统&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Android11以下版本系统中，Android官方并未定义读取已安装应用列表的管控权限，可以直接通过getInstalledPackages()接口获取设备上所有已安装的应用列表，示例代码如下所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img align=&quot;bottom&quot; border=&quot;0&quot; data-fileid=&quot;100003912&quot; data-ratio=&quot;0.13793103448275862&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/n5WtWCY9vpA7O2g46pcAcFMA2ZMzRpbktXyJtoQgAE1xKUVLxiaklMUgkiasAoZibpWmq025Liarf1qzNiaX8JFRRGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;464&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;与此同时，国内部分厂商为了提升用户隐私感知，将读取已安装应用列表的权限暴露给用户，由用户决定应用程序是否能读取已安装应用列表。但是，即使当用户拒绝应用程序读取已安装应用列表时，应用程序仍可通过执行adb命令adbshell pm list package去获取已安装的应用列表，示例代码如下所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img align=&quot;bottom&quot; border=&quot;0&quot; data-fileid=&quot;100003913&quot; data-ratio=&quot;0.23060344827586207&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/n5WtWCY9vpA7O2g46pcAcFMA2ZMzRpbksbjk3oxEsI5ew67xBV5GxGpbVr1nU9rth4UcXmltOCvRRibWuQWYVsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;464&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此外，应用程序还可以通过反向查找的方式，即通过包名或者符合指定intent的Activity，从而判断是否安装了某款应用程序。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用包名进行反向查找时可通过getPackageManager().getPackageInfo()方法查询[3]，示例代码如下所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img align=&quot;bottom&quot; border=&quot;0&quot; data-fileid=&quot;100003914&quot; data-ratio=&quot;0.33189655172413796&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/n5WtWCY9vpA7O2g46pcAcFMA2ZMzRpbkazU50XMCUItl8fPpWTMcM2ntIxTOEnavmNqhQbcYSHFjcxX7x90ykA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;464&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用符合指定intent的Activity进行反向查找时可通过getPackageManager().queryIntentActivities()方法查询[2]，示例代码如下所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img align=&quot;bottom&quot; border=&quot;0&quot; data-fileid=&quot;100003918&quot; data-ratio=&quot;0.21120689655172414&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/n5WtWCY9vpA7O2g46pcAcFMA2ZMzRpbkj832Op2kSWiaG3gVjos7MmibAqlwawfORliaHd3T9IGWEmpO65ib5RU1Vw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;464&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上为Android11以下版本系统中，获取已安装应用列表的方法；在Android11及以上版本系统中，Google引入了“软件包可见性”权限，下面将进行介绍。&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106010&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-fileid=&quot;100003915&quot; data-ratio=&quot;0.6571428571428571&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/n5WtWCY9vpA7O2g46pcAcFMA2ZMzRpbkaak6iag9lkhZhU3h1yzMIYFOVibBeOf6gpy9WT6eKicWduCOp4VpVuaJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;50&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;317:392&quot;&gt;&lt;span&gt;&lt;strong&gt;二、Android11版本系统&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Android11版本系统中，Google为了增强对隐私保护的关注，首次引入了“软件包可见性”权限，该权限的标识为QUERY_ALL_PACKAGES，Google对于该权限的说明为Allowsquery of any normal app on the device, regardless of manifestdeclarations，即允许查询设备上任何normal级别的应用程序，无论Manifest如何声明。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在GooglePlay中，应用程序开发者需要提供使用该权限的说明，因为该权限可以查询设备上所有已安装的应用，并与其交互。因此，只有少部分类型应用适合使用该权限，例如浏览器、输入法等[5]。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了尊重用户隐私，Google引入了&amp;lt;queries&amp;gt;标签，使应用程序定义一组自身可访问的其他应用，告知系统应向应用程序显示哪些其他应用，从而实现最小软件包可见性。使用该标签时，可以通过包名、intent过滤器签名等进行定义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如，应用程序A需要与应用程序B和应用程序C进行交互，则需要在应用程序的Manifest文件中进行如下定义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img align=&quot;bottom&quot; border=&quot;0&quot; data-fileid=&quot;100003917&quot; data-ratio=&quot;0.22629310344827586&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/n5WtWCY9vpA7O2g46pcAcFMA2ZMzRpbkcq68MiahcAxibaFoJNO8fBPQXicTiadPOep383JHtzIiaDYtZV9IFYtLDeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;464&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再例如，应用程序需要与支持查看JPEG图片的应用进行交互，，则需要在应用程序的Manifest文件中进行如下定义[6]。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img align=&quot;bottom&quot; border=&quot;0&quot; data-fileid=&quot;100003916&quot; data-ratio=&quot;0.2543103448275862&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/n5WtWCY9vpA7O2g46pcAcFMA2ZMzRpbkC63TnFbdkZazMyY1POPCQw3LszhOQgiaMsHcAibYZsgV9CAjjOSynngA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;464&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了凸显出QUERY_ALL_PACKAGES权限的作用，笔者使用了GooglePixel 3的Android 10以及Android11版本系统进行测试，其中系统应用262个，非系统应用2个(包含测试demo)，结果如下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-fileid=&quot;100003919&quot; data-ratio=&quot;0.39870689655172414&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/n5WtWCY9vpA7O2g46pcAcFMA2ZMzRpbkViaOfatoev3yco4msshsfvicZPfuUXakWtxNUDWSqXsv4rbH64zOdK9A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;779&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此外，在Android11及以上版本系统中，应用程序如果未申请QUERY_ALL_PACKAGES权限，则无法监听到安装应用程序动作的广播，只能监听到卸载应用程序动作的广播；只有申请了该权限，才能同时监听到安装应用程序动作和卸载应用程序动作的广播。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106010&quot;&gt;&lt;section&gt;&lt;section hm_fix=&quot;279:364&quot;&gt;&lt;section&gt;&lt;img data-fileid=&quot;100003921&quot; data-ratio=&quot;0.6571428571428571&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/n5WtWCY9vpA7O2g46pcAcFMA2ZMzRpbkaak6iag9lkhZhU3h1yzMIYFOVibBeOf6gpy9WT6eKicWduCOp4VpVuaJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;50&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;三、Android12版本系统&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Android12版本系统中，Google对QUERY_ALL_PACKAGES权限做了进一步限制，当应用程序在使用getAllPermissionGroups()、getPermissionGroupInfo()、getPermissionInfo()和queryPermissionsByGroup()等四个接口时，应用程序必须申请该权限，才能访问有效数据。以上四个接口分别为获取所有权限组集合、根据指定权限组名称获取权限组信息、根据指定权限获取权限信息和根据权限组查询权限。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时，在Android12版本系统中，应用程序可以声明并创建一个自定义Activity，该Activity在启动后可让用户管理应用存储在用户设备上的数据。而应用程序使用该Activity的前提是必须同时具有MANAGE_EXTERNAL_STORAGE 权限和QUERY_ALL_PACKAGES 权限。&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106010&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-fileid=&quot;100003922&quot; data-ratio=&quot;0.6571428571428571&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/n5WtWCY9vpA7O2g46pcAcFMA2ZMzRpbkaak6iag9lkhZhU3h1yzMIYFOVibBeOf6gpy9WT6eKicWduCOp4VpVuaJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;50&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;四、总结&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img align=&quot;bottom&quot; border=&quot;0&quot; data-fileid=&quot;100003920&quot; data-ratio=&quot;0.33620689655172414&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/n5WtWCY9vpA7O2g46pcAcFMA2ZMzRpbkOjHkSl5my4ZUJqX7zKoql4Dh5slqQKC3ibHDFrkjB4gAAYOXqKPYMVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;464&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;106017&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-fileid=&quot;100003923&quot; data-ratio=&quot;0.8125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/n5WtWCY9vpA7O2g46pcAcFMA2ZMzRpbkWnGW93w6a7ygxQxnsnNYYUwX5lbkQXGF86wZ9sXCccMoPHeV0WsINw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;46&quot; data-width=&quot;90%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;单从“软件包可见性”权限演变来看，从最开始Android无相应的权限标识，依赖手机厂商或第三方二次开发，到Android11引入“软件包可见性”权限，再到Android12对“软件包可见性”权限进行增强，可以看出Android对应用程序获取用户相关数据的管控逐渐增强。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;而随着Android大版本的升级，一系列针对用户安全和隐私的新功能接踵而至，如隐私控制面板、剪切板权限以及敏感权限提示等，用户安全与隐私体验与日俱增，同时也意味着消费者对于个人数据安全和隐私的意识逐渐增强。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;五.参考链接&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;[1].Android12行为变更https://developer.android.com/about/versions/12/behavior-changes-all&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; [2].Android如何完整的获取到用户已安装应用列表https://blog.csdn.net/q384415054/article/details/72972405&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; [3].Android读取已安装应用列表需要申请权限https://www.jianshu.com/p/dee8bc1fb847&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; [4].Android-读取已安装应用列表https://www.jianshu.com/p/45e295e12bde&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; [5].Android 11 中的软件包可见性和数据访问审核https://zhuanlan.zhihu.com/p/158784964&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; [6].Android获取应用列表https://blog.csdn.net/lovelease/article/details/106843122&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; [7].Android上的软件包可见性过滤https://developer.android.com/training/package-visibility[8].&amp;lt;queries&amp;gt;:https://developer.android.com/guide/topics/manifest/queries-elementhttp://km.vivo.xyz/pages/viewpage.action?pageId=401595078&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;往期推荐&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0Njg4NzE3MQ==&amp;amp;mid=2247487085&amp;amp;idx=1&amp;amp;sn=9db2259b5e8fa3a16702fbaa67ff3eb3&amp;amp;chksm=e9b92801decea117c13dcd038ae4e5d5bc63d05b5bb0e38ccf5a225edeee6263508f5d2b3266&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;小白训练营|模糊测试从基本介绍开始&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;小白训练营|模糊测试从基本介绍开始&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0Njg4NzE3MQ==&amp;amp;mid=2247487017&amp;amp;idx=1&amp;amp;sn=194eda06c888cb45f8e10f6281dc66f1&amp;amp;chksm=e9b92845decea153f74410d8020bb58a004f24346c5025f838ed1b20eebf28839659bbc2fc5a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;小白训练营|Android软件保护技术介绍&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;小白训练营|Android软件保护技术介绍&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0Njg4NzE3MQ==&amp;amp;mid=2247486788&amp;amp;idx=1&amp;amp;sn=2977a0bcb85199bdf42ae1a09b2eb87b&amp;amp;chksm=e9b92b28decea23ef2ed3c5db0028d46f0497617b7878f6e99f322f5e1fedad7be3aceb01f97&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;小白训练营 | Android WebView安全浅谈&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;小白训练营 | Android WebView安全浅谈&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p hm_fix=&quot;387:501&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0Njg4NzE3MQ==&amp;amp;mid=2247486616&amp;amp;idx=1&amp;amp;sn=2f5d9ea90406a165bd4e47f45b527f55&amp;amp;chksm=e9b92af4decea3e256b4b21186f1eb84d210db9bacfc1da0d00ce05aee226804a1814b7a0e26&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;小白训练营|Android应用签名介绍&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;小白训练营|Android应用签名介绍&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000500&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.49608763693270735&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/n5WtWCY9vpBPJxNUqvxPP2JU5WPcfAsIWsWPzCNxDlbHepdmxszDyF5t7fWGu2fF06ibJEA4UH7GtCicOmM8ficGg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;639&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>17603399ee4dca547a9cbdf2617741c2</guid>
<title>深入理解云原生下自适应限流技术原理与应用</title>
<link>https://toutiao.io/k/7iizpj1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;作者简介：乔卓越，于19年毕业，热爱开源，乐于思考。拥有基础架构和游戏领域的一线开发经验。独立负责过大规模后端服务的开发与性能测试平台搭建。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;本文将深入讨论现今后端服务关于负载的测量、优化、治理手段，通过对比分析TCP-BBR技术核心痛点，进而带读者尽可能理解并掌握自适应限流技术。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;背景&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;负载（load)，通常与并发关系密切。对于后端服务而言，任意时间内的并发用户访问都会提升服务负载，进而进一步消耗计算资源。然而计算资源是有限的，如CPU、memory、network等等，过载将会导致服务性能下降，进而回复滞缓甚至不可用。描述服务应对日益增长的负载的能力称之为&lt;strong&gt;Scalability&lt;/strong&gt;， 即可伸缩/扩展性。以下是DDIA（Designing Data Intensive Application）中的解释：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Scalability is the term we use to describe a system’s ability to cope with increased load&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;&lt;span&gt;测量负载&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;负载的具体指标&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;为了提升可扩展性，我们第一步要做的是固定资源下对服务请求接口进行测试，进行服务能力上限评估以及相应优化。显然，单纯将并发用于对负载的测量是不够具体的。对于后端服务，我们会进一步关注以下两个指标。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;负载因子(load parameter)&lt;/span&gt;&lt;/h3&gt;&lt;figure&gt;&lt;img data-fileid=&quot;100000010&quot; data-ratio=&quot;0.3372093023255814&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAWycU1yRW5JCEshmuDluf2GIMsBbvgS0GwnDNEdNzbG9TWxhqDGWSMFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;430&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;本服务中最能引起现负载增加的指标&lt;/strong&gt;。对&lt;/span&gt;于&lt;span&gt;web服务而言，显然就是每秒请求数QPS；&lt;/span&gt;&lt;span&gt;对于数据库等服务来说，可能就是读写率的上升。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;关键结果(performance number)&lt;/span&gt;&lt;/h3&gt;&lt;figure&gt;&lt;img data-fileid=&quot;100000011&quot; data-ratio=&quot;0.2920892494929006&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAWPiag2IxibSxnNO7ZdB7IibzCApib8ZZVzrYUwPKp00TGeOzAsjoKRLEZZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;493&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;本服务负载增加时最需要关注的指标&lt;/strong&gt;。对&lt;/span&gt;于&lt;span&gt;web服务而言，显然就是用户的等待时间即respond time/latency；&lt;/span&gt;&lt;span&gt;对于数据库等服务来说，就是对吞吐率的影响。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;性能观测&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;以web服务为例，我们通过增加请求数来收集对应的时延消耗如下图。其中X轴表示请求的数量，Y轴表示对应消耗的时间。其中，每次请求所消耗的时间通过灰色柱如所示。从实践经历来看，同类型的请求每次消耗的时延会受到多种因素的影响，因而都不是固定的。（后文会详细解释）&lt;/p&gt;&lt;figure&gt;&lt;img data-fileid=&quot;100000014&quot; data-ratio=&quot;0.28&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAWlAXOFCc8lHWZzqrf27lLcoQyib1I2Seicw2xt4RymLm7rDc1RBcOhAHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1225&quot;/&gt;&lt;/figure&gt;&lt;p&gt;所以，单纯将总请求数/总耗时的平均结果不具代表性。为此业内广泛使用百分位数，又称水位线来表示用户实际经历的时延情况。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;p &lt;code&gt;N&lt;/code&gt; th&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;其中N表示百分比，例如图中95th，又称95线。假设95线对应的时延为1.5s，总请求数为100， 那么&lt;strong&gt;p95&lt;/strong&gt;就表示在100个请求中有95个请求的时延小于1.5s。&lt;/p&gt;&lt;p&gt;在大型后端服务中，工程师会更倾向于关注高水位线如99th下的时延分布，因为这是最直接对用户产生影响的&lt;strong&gt;关键结果&lt;/strong&gt;。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;定位优化&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;通过水位线获得的时延分布可以针对性的优化相应接口逻辑，以尽可能减少业务层导致的延迟较大的问题。如优化代码数据结构、缓存部署、数据隔离以提高命中率等等。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;资源与性能瓶颈&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;请求时延的增高不仅与业务逻辑有关，在有限的硬件资源下(cpu、memory、带宽)，负载升高同样会进一步影响用户请求时延。在对预期正常流量下的请求表现出的时延进行业务优化后，我们还需要对服务进一步压测以至&lt;strong&gt;过载&lt;/strong&gt;情况下服务对请求的响应情况，尽可能找出负载上限，保护服务。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;压测视图&lt;/span&gt;&lt;/h3&gt;&lt;figure&gt;&lt;img data-fileid=&quot;100000012&quot; data-ratio=&quot;0.6028571428571429&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAWX7l4jPnpkzAzwbY2QnDTb2ggyM84hxGXMB1Des0Tt0tO1m1TvqVrgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;/figure&gt;&lt;p&gt;当我们使用压测工具一步步加大强度时，关于负载各项指标的宏观理想变化基本如上图所示。其中&lt;strong&gt;红色曲线&lt;/strong&gt;表示每秒请求被处理的用户数TPS（throughput per second），&lt;strong&gt;蓝色曲线&lt;/strong&gt;表示对应请求时延，X轴表示QPS量。&lt;/p&gt;&lt;p&gt;可以直观的看出：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;初始阶段&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;随着QPS的上升，TPS也在逐步提高，时延相对稳定。因为此时CPU和内存等计算资源相对充裕，请求在系统中无需排队就可以处理。&lt;/p&gt;&lt;ol start=&quot;2&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;瓶颈阶段&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;当QPS加大到对应TPS曲线顶点附近时，此时计算资源负载接近满额，服务中的请求处理出现排队情况，时间非线性上涨。&lt;/p&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;过载阶段&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;此时进一步加压QPS，计算资源超额负载，进一步导致GC、进程调度、网络等资源压力导致TPS迅速下降，同理请求排队过长导致时延进一步类指数级上升，最终导致服务资源耗尽出现宕机无响应等情况。&lt;/p&gt;&lt;p&gt;直观来看，由于固定计算资源的限制，当QPS加压超过TPS峰值时系统的处理能力会被反噬。从服务保护、资源利用的角度，我们会认为&lt;strong&gt;将TPS顶点附近值作为对QPS的限制阈值&lt;/strong&gt;相对理想。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;过载保护&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;本节将着重介绍基于具体阈值的限流办法以及相关的局限性，提出服务稳定前提下的核心预期。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;基于QPS阈值的限流&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;在很长一段时间内，工程师都会采用上述阈值作为服务的兜底QPS限制以防止过载。此时就出现了优秀的限流算法，即令牌桶（Token-bucket）和漏桶（leak-bucket）以及众多衍生。&lt;/p&gt;&lt;figure&gt;&lt;img data-fileid=&quot;100000013&quot; data-ratio=&quot;0.2898120672601385&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAWIyQyxT3uDiaMMLtkMmdj1WxoHSENFBtSAd5EHHDFey94uWjhr7jBOoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1011&quot;/&gt;&lt;/figure&gt;&lt;p&gt;互联网上关于这两种算法原理的介绍多如牛毛，在这就不再赘述。总的来说，桶算法对流量提供了整形的功能，以防止瞬时流量等极端情况打垮服务。在小规模后端服务而言基于阈值的限流方式简单高效，能够应付绝大多数问题。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;基于具体阈值的局限性&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;上节在进行阈值测量时，对测试的整体描述为&lt;strong&gt;理想情况&lt;/strong&gt;下。这意味着在大规模分布式系统中，测量结果从工程的角度忽略了很多必要细节。这其中包括测试方式、硬件资源配额、线上scale、服务环境、阈值可用性等等众多情况。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;测试之痛&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;现如今后端领域已经进入了云原生时代，微服务架构早已经是事实标准。其中通讯方面是以典型的事件驱动方式（Event-driven），这表示所有的请求都是通过RPC即以接口调用的方式实现的。一个合理划分的微服务，在稍具规模的情况下拥有的接口数量保守估计至少是在十位数以上，因此对接口级别、服务级别的阈值获取将变得相当繁琐和困难。在Netflix的技术博客中，他们使用&lt;code&gt;arduous task&lt;/code&gt;来形容测试的艰巨。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;接口压测&lt;/p&gt;&lt;p&gt;如前文提到的，即使是同一个接口，每轮压测的结果也会有差距。这是因为机器资源在测试中同时会受到垃圾回收、线程/进程资源抢占、磁盘I/O抖动、网络带宽质量等因素的影响。在服务级别的测试、线上环境中，此类问题会被进一步放大。为此，测试人员不得不多次测量求个均值以求准确。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;服务级压测&lt;/p&gt;&lt;p&gt;不同接口显然对资源的消耗程度不同，因其包含读、写、下游扇出等各种情况时延也会产生差异。对于服务级别的限流阈值确定可以说是相当困难，因为基于接口级的阈值组合会在不同用户请求不同接口时产生波动。为此进行流量录制并全链路压测虽能够阈值的范围，但仍无法做到精准，且成本过大。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;维护之痛&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;所有测试以及线上环境中，最关键其实是计算资源的配置。所测试机器的CPU核心数和内存等配置时刻影响着测试结果。再者，如今基于容器网络如k8s的自动资源scale能力，会使得基于具体数字的阈值设定难以维护。再者，秒级的流量限制显然对于100ms内突发流量洪峰无法做出有效干预，导致服务异常过载。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;干预成本&lt;/p&gt;&lt;p&gt;当无论遇到线上激增流量机器指标异常、自动扩容等导致阈值不再适用，进而要增加或者减小时，工程师从发现问题到上机操作发布配置的耗时已经错过了干预的最佳时机。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;认知负担&lt;/p&gt;&lt;p&gt;从上述测量流程来看，工程师必须对计算资源、接口业务、容器配合、调度时机等各方面有足够认知才能应对各种流量突发状况，显然会消耗大量的精力和时间。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;综上所述，基于具体数字的阈值方式在大规模后端服务中会进一步捉襟见肘，可延展和可伸缩性较差。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;过载下的服务预期&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;在讨论进一步的解决方案之前，我们要明确在负载加大时对服务情况的&lt;strong&gt;预期&lt;/strong&gt;。即在使服务不垮掉情况下，充分利用计算资源服务用户。结合具体的负载因素预期如下：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;尽可能多的处理request，即高TPS&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;尽可能快的处理request，即低时延&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;尽可能使得request不产生堆积，当前计算资源下存在的最佳处理量&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img data-fileid=&quot;100000015&quot; data-ratio=&quot;1.0561797752808988&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAWTWjmlYC72GjXYdwrqm6IDtY1bxDfmoFjbzS5piaEWANKV6BnMrLeKibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;445&quot;/&gt;&lt;/figure&gt;&lt;p&gt;很明显，想要同时获取上述指标是相悖的。对于高TPS，意味着尽可能要将计算资源利用，请求产生拥塞进而导致&lt;strong&gt;关键结果&lt;/strong&gt;——时延的指数上升；对于时延，那么就尽可能需要服务中处理的请求相对宽松。虽然时延低下来了但同时TPS也会很低，造成计算资源的浪费；对于服务进程中的请求最佳处理量，结合各种变化因素也不好确定。那么有最佳的解决办法吗？&lt;/p&gt;&lt;h1&gt;&lt;span&gt;传输层自适应拥塞控制&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;本节将引出传输层TCP-BBR算法要解决的问题，以及和我们上述服务预期问题的同质性。进一步挖出共通点。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;传输层TCP现状&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;TCP是面向字节流保序的传输层协议。在面对未知的网络中转节点以及对端网络状态，如果最大化利用网络带宽是其要面对的首要问题之一。为此，应运而生了经典的拥塞控制算法。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000020&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5072869955156951&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAWlopuLiaIy1y6U6vFyMhpAgpgIGzfSDib2Qv9x4N4m4FMAiaDdev6SQOdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1784&quot;/&gt;&lt;/p&gt;&lt;p&gt;上图是传统的基于丢包检测的拥塞控制算法，代表有CUBIC、RENO等实现。详细解析已经超出本文的讨论范围，此处简述基本原理以及其核心特点。其控制周期基本上有四个组成部分，分别是慢启动、拥塞避免、快重传、快恢复。其中CWND表示拥塞窗口，也就是可以向网络中一次性发送的数据量，最终窗口大小由其与对端接收窗口中的较小值来决定。&lt;/p&gt;&lt;p&gt;在不考虑对端窗口的影响下，由于网络状况未知，算法会依据不同状态针对性的加大CWND窗口的大小。当出现丢包时CWND大小会大幅度减小，如图中陡降部分所示。在后续的优化重传等策略之下，仍然能够看到当出现丢包时CWND的减幅程度十分明显。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;基于丢包的控制算法局限&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;figure&gt;&lt;img data-fileid=&quot;100000016&quot; data-ratio=&quot;1.4430379746835442&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAWXVo8AfCat3GTskZIVP3hTuCDhqGkEc4ibo5Y23CS0oV4qZVAibTEOWdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;474&quot;/&gt;&lt;/figure&gt;&lt;p&gt;该类算法的核心思想在于对丢包数据的测量，然而在现代网络设施的发展下某些场景如长肥网络（高延迟、高带宽）等已经不再适用。结合上图，由于路由节点的buffer大小日益增长，同时增加了数据包在队列中等待时间。再加上多跳路由节点的计算、传输等能力的不同会很容易导致CUBIC等算法的认为丢包，采取锐减CWND窗口的行为。也就说当开始介入拥塞避免时，拥塞早已发生且会进一步负反馈导致吞吐下降。也就是说，基于检测&lt;strong&gt;丢包&lt;/strong&gt;信号这单一指标来衡量拥塞达不到最优解。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;基于真实的网络负载特点分析&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;显然网络拥塞的发生同样是由各个路由节点网络负载升高产生的，既然是负载，那么就需要对其具体负载指标的分析。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;负载因子&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;抛开网络拓扑现状的复杂性，能够首要引起网络负载升高的显然是网络流量的增加。那么，对应的指标就是网络&lt;strong&gt;Bps&lt;/strong&gt;（bytes per second），即每秒的数据传输量。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;关键结果&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;面对负载Bps的增加，会影响到的关键结果就是网络传输的往返时延&lt;strong&gt;RTT&lt;/strong&gt;（Round-trip time）上升，导致传输拥塞。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;传输观测&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;下图是理想情况下网络设备在传输过程中的负载变化图，上半部分为流量传输速度（Delivery rate&lt;span&gt;≈&lt;/span&gt;Bps）和对应时延（RTT）的变化，下半部分为对应网络设备的物理状态变化。分为三个阶段：&lt;/p&gt;&lt;figure&gt;&lt;img data-fileid=&quot;100000017&quot; data-ratio=&quot;1.3038167938931298&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAWcumM4EDnMonLEmz0GibJcf4NgNL15LmB7lBtFdCJU1pRNZPRwnvicAhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;655&quot;/&gt;&lt;/figure&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;初始阶段&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;初始阶段网络设备中的队列为空，数据包无需排队。随着发送速率的增加RTT保持稳定。&lt;/p&gt;&lt;ol start=&quot;2&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;瓶颈阶段&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;此时排队已经逐渐形成，设备的传输吞吐能力即带宽达到上限，保持稳定。对于RTT而言，由于排队的原因逐渐增加。&lt;/p&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;拥塞阶段&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;此时网络设备的队列已经被流量完全打满，多余的数据包被拒绝，进一步导致RTT大幅上升。&lt;/p&gt;&lt;p&gt;从图中红圈标注的RTT和传输率折线图出看到，RTT在瓶颈阶段开始大幅度上升，传输速率在该阶段同样达到了瓶颈即带宽上限。可以看出，从此处开始拥塞就要发生了，然而基于丢包的拥塞控制算法反而在上述第三阶段才能够生效，这显然滞后太多了。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;最佳预期&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;从上述理想分析，我们相对确定出了在一波数据传输过程中RTT的下限，即minRTT；数据传输带宽能达到的上限 max BW（max bandwidth）。对于这两个网络层的负载指标，至今已经有了很成熟的衡量体系，在网络传输中其关系如下图所示。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000021&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5852272727272727&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAWMuQgib4DRGSbg6FB2hHHdkQNx8lYc2fWrBuX1hyFkF6zx8Z3aMv86Vw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;/p&gt;&lt;p&gt;我们可通过 &lt;strong&gt;网络节点每秒传输数据的能力&lt;/strong&gt;即带宽（bandwidth）&lt;strong&gt;乘&lt;/strong&gt; &lt;strong&gt;数据包在节点中的传输处理时间时延&lt;/strong&gt;（即latency&lt;span&gt;≈&lt;/span&gt;RTT）的结果作为网络上正在处理的报文数量，即&lt;strong&gt;带宽时延积BDP&lt;/strong&gt;。BDP决定了需要向网络中发送的数据包量。&lt;/p&gt;&lt;p&gt;综合上述，我们可以确定理想情况下向网络传输数据的最佳数量，即瓶颈期指标特征： &lt;code&gt;BestBDP = maxBW * minRTT&lt;/code&gt;&lt;/p&gt;&lt;p&gt;显然，我们应对负载的关键指标测量已经不仅要关注&lt;strong&gt;关键结果&lt;/strong&gt;，还与&lt;strong&gt;负载因子&lt;/strong&gt;进行综合。相对的，多年来基于丢包的拥塞控制算法都只关注了&lt;strong&gt;时延&lt;/strong&gt;这单一指标。&lt;/p&gt;&lt;p&gt;虽然有了理论预期，但同样出现摆在工程师面前的难题：&lt;strong&gt;如何在拓扑结构复杂，路由情况多变的网络环境中测得这两个指标？&lt;/strong&gt; 这个测试过程本质上和上节我们提出的业务负载预期指标相悖论如出一辙。那么该如何解决这一难题呢？接下来就是BBR登场的时刻。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;TCP-BBR算法&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;BBR（Bottleneck Bandwidth and Round-trip propagation time）是Google近年来提出的拥塞控制算法，诞生后大幅度提高了在高延迟等情况下网络传输的吞吐。从命名就可以看到带宽（Bandwidth）和往返时延（Round-trip time)关键字，在上述铺垫过程中，对应的就是&lt;strong&gt;maxBW&lt;/strong&gt;和&lt;strong&gt;minRTT&lt;/strong&gt;。对于多变的网络环境BBR大胆的采用了&lt;strong&gt;以预期公式驱动，实时交替探测两个负载指标的办法&lt;/strong&gt;，下文会对此详细解释。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;算法核心解读&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;BBR认为：既然网络多变，且最佳带宽和时延不好同时测量，那么就采取实时交替探测的方式。通过滑动窗口细粒度的交替收集一段时间内的每秒最大传输量和最小的RTT，通过计算就可以获得目前最佳的BDP。即 &lt;code&gt;BestBDP = BtlBw (bottleneck bandwidth) * RTprop (round-trip propagation time)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;表示目前网络中的瓶颈带宽，也就是上节中的maxBW，是网络设施传输的上限。BBR会取得一段时间内滑动窗口的统计的最大BtlBw值作为参考。其测量方式简述为一段时间内的数据包总量除以他们所抵达花费的时间。&lt;/p&gt;&lt;p&gt;表示抛开任何外在噪音，如ack重发耗时，网络抖动等等导致RTT偏高情况。即在滑动窗口统计中的RTT最小值作为参考，其测量方式为数据包发送和回复耗时。&lt;/p&gt;&lt;p&gt;这指的是，在BBR工作期间内，已经发送至网络但是还是没有收到答复的数据包。也就说真实的，在网络设备里正在传输的数据量，即负载。有了预期公式计算出的BestBDP指导将RTprop与BtlBW相乘，BBR就可以得出&lt;strong&gt;当前时刻外界网络最佳的负载量与实际inflight的关系&lt;/strong&gt;。有了这样的简单的数值比对，算法就可以控制发包的最佳量以进行拥塞控制。&lt;/p&gt;&lt;p&gt;以下伪代码直观的体现了BBR算法在发包和收包时的处理逻辑。&lt;/p&gt;&lt;figure&gt;&lt;img data-fileid=&quot;100000022&quot; data-ratio=&quot;0.34957882069795426&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAW40LzBIIFgHmJEN63h1zstp3iaCC5NWctzsGS2CRsXu3tTUyula8VMrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1662&quot;/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-fileid=&quot;100000023&quot; data-ratio=&quot;0.5678670360110804&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAW1gZX0DKQzYVrWI5lmcgicdcTEmcNngE3uMuBvibhkoFibJBz5bEpGwDSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1444&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;span&gt;算法组成&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;了解了核心的算法逻辑，接下来将简述其运作周期，进一步了解算法是如何充分利用未知网络设备传输能力的。算法运行状态主要分为启动阶段（Startup）、排空阶段（Drain）、带宽探测（ProbeBW）、时延探测（ProbeRTT)。同样，本文将不会阐述具体细节，具体细节可以参考文末的reference。我们回到核心关注点，BBR是如何探测以及适应当前网络设备传输能力的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000024&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9152777777777777&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAWmj5DUH8VOVtqnYVCjNicTgvUYZWQk8YJV7kibJucvzyricpX6v3kkKoDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p&gt;上图摘自google BBR论文，展示了在稳定网络传输节点下BBR算法中关键指标RTT、BW、inflight的变化图。其中灰色&lt;strong&gt;cycle gain&lt;/strong&gt;数组，相当于滑动窗口。其中每个元素装载了带宽探测时的增益系数，通过与当前最大BW相乘可以实现增加/减少向网络中的数据发送，从而实现适应未知网络传输能力目的；同理，对于时延探测，简单来说BBR同样会周期性的发送小体量数据包收集最佳RTT。&lt;/p&gt;&lt;p&gt;可见，基于预期的负载控制算法，即同时集合负载因子和关键结果的计算，相比只关注一个指标的实现方式在高吞吐场景下具备一定的优越性。同时，基于滑动窗口细粒度的动态探测极值，使得测量结果更具时效性与说服力。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;自适应限流算法&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;经过上面长篇大论的分析和讨论，我们终于到了本章最为核心的自适应限流算法介绍。目的在于找到应用层与传输层面对负载、过载情况应对措施的共同点，以及如何应用于后端服务。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;负载在传输层的同质性&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;综合来看，传输层在面对网络负载的测量、治理、实施历程与应用层负载有很多共同点，如下表所示。&lt;/p&gt;&lt;section&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;传输层&lt;/th&gt;&lt;th&gt;应用层&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;负载因子&lt;/td&gt;&lt;td&gt;Bps&lt;/td&gt;&lt;td&gt;Qps&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;关键结果&lt;/td&gt;&lt;td&gt;RTT&lt;/td&gt;&lt;td&gt;latency&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;加压负载因子时处理端表现&lt;/td&gt;&lt;td&gt;delivery Rate（带宽传输速率）上涨直至瓶颈&lt;/td&gt;&lt;td&gt;TPS上涨直至瓶颈，由于进程资源抢占等压力会进一步反噬下跌&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;加压负载因子时关键结果表现&lt;/td&gt;&lt;td&gt;RTT从理想稳定状态升高至瓶颈，伴随拥塞指数上升&lt;/td&gt;&lt;td&gt;latency请求等待时延理想情况下至瓶颈期处于稳定状态，伴随排队导致服务过载指数上升&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;核心预期&lt;/td&gt;&lt;td&gt;尽可能大利用网络传输带宽，即最大传输速率maxBW；最小的包等待RTT；不拥塞前提下最佳发包量BestBDP&lt;/td&gt;&lt;td&gt;尽可能多的处理请求，即高TPS；尽可能快的处理请求，即低时延；极可能充分的利用服务计算资源，不产生堆积的数量&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;核心需求&lt;/td&gt;&lt;td&gt;能够得到网络设施的最佳处理数据量，以避免拥塞且实现高吞吐&lt;/td&gt;&lt;td&gt;能够得到服务进程在当前计算资源下的最佳请求处理量，以避免请求排队资源抢占实现高吞吐，进一步保护服务防止过载&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;难点&lt;/td&gt;&lt;td&gt;无法同时测量最佳带宽和最低时延，基于复杂的网络拓扑和设施数量难以确定数值&lt;/td&gt;&lt;td&gt;无法同时测量最佳TPS和最佳latency，众多接口耗时不同，且包含进程GC、网络抖动、资源scale多变的情况下基于服务级别的限流数值不好确定&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;历史阶段&lt;/td&gt;&lt;td&gt;基于RTT耗时检测，即丢包认为网络发生拥塞进行干预&lt;/td&gt;&lt;td&gt;基于压测得到的qps阈值作为限流标准&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;现阶段&lt;/td&gt;&lt;td&gt;TCP-BBR&lt;/td&gt;&lt;td&gt;Sentinel、Kratos ……&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p&gt;（我们会在后文介绍sentinel与kratos）&lt;/p&gt;&lt;h3&gt;&lt;span&gt;利特尔法则&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;通过上表可看出应用层和传输层在应对负载时本质需求是相同的，那么关于应用层的核心预期公式的推导显然具有相似性，那就是最佳请求数&lt;code&gt;TW（当前最佳处理任数目） = TPS * latency&lt;/code&gt;。如下所示&lt;/p&gt;&lt;figure&gt;&lt;img data-fileid=&quot;100000025&quot; data-ratio=&quot;0.5978339350180505&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAWKspTibOJkARyk3dLfuzRmM5jE48Or5TciakTSnWNdsSHsZ1hmFNLpxrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1385&quot;/&gt;&lt;/figure&gt;&lt;p&gt;其实这个公式的依据是显赫有名的利特尔法则little&#x27;s law，为通过对工业中平均生产数量和对应耗时提供了理论基础，以进一步衡量生产能力。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;基于TCP-BBR的自适应算法&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;我们已经具备充分的理论基础和传输层实现指导，下一步就是因地制宜的实施在应用层后台服务。在业内最初版目前所知是由阿里的sentinel组件引入，由kratos进行了进一步拓展。在此我们需要搞清楚两个关键问题，才能保证最大化吞吐的同时防止服务过载。&lt;/p&gt;&lt;p&gt;BBR作为数据发送方，需要面临的问题&lt;strong&gt;未知&lt;/strong&gt;网络设施传输能力。由于网络设施的传输能力、拥塞状态对发送方是非直接可见的，所以才有了上文提到的BBR带宽&lt;strong&gt;探测&lt;/strong&gt;。滑动窗口内通过cycle gain变化，来适应不同时刻的传输能力。&lt;/p&gt;&lt;p&gt;应用层作为请求处理方，无论是在容器网络和物理机上部署，计算资源是相对&lt;strong&gt;固定&lt;/strong&gt;的。这意味着存在着最佳处理量上限，我们要保证的是在流量上升或者因为其他因素导致计算资源紧张时，通过计算出的最佳TW来&lt;strong&gt;限制入口流量&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;了解了控制时机，可就是当计算资源紧张时进行干预。那么该如何确定资源紧张信号呢？总的来说就是CPU利用率或者操作系统负载，或者内存、磁盘等资源。以入口流量特征来看（进程RPC调用下游服务按照业务需求进行组装、计算、返回），无论时内存资源不足导致的GC（依赖CPU）、磁盘I/O吞吐下降、调度抢占等等因素，都会导致用户请求增加、序列化成本增加（CPU）进而时延上升恶性循环。所以在sentinel和kratos的实现中都选择了适用CPU作为资源信号限流，只不过前者使用的是cpu load1，后者使用的是服务基于cgroup对CPU的实时采样使用率。&lt;/p&gt;&lt;p&gt;两者使用各有千秋，但我们认为，基于load1作为控制信号仍不够敏感。在linux下操作系统load1表示一分钟内CPU的平均负载值，对于流量洪峰等过载的发生干预有效性较慢。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;具体方案&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;em&gt;本部分屏蔽到绝大部分代码与设施细节，关注应用方式与过程中上线效果、遇到的问题以及优化。基于bbr算法的完整kratos代码可进入referenc阅读&lt;/em&gt;&lt;/p&gt;&lt;p&gt;kratos以是当前容器网络服务CPU利用率的80%作为控制信号临界点，通过为此服务会开启独立的goroutine每隔250ms进行基于本服务的cgroup(&lt;code&gt;/sys/fs/cgroup/cpu/*&lt;/code&gt;)CPU占用信息采集，以及系统总cpu tick（&lt;code&gt;proc/stat&lt;/code&gt;)占用采集。&lt;/p&gt;&lt;p&gt;对CPU占用率的计算本质是间隔内 &lt;strong&gt;本进程占用的CPU时间增量/系统的总CPU时间占用增量&lt;/strong&gt;。显然CPU的变化是相当迅速的，会受到各种因素的影响来回抖动动。为此我们采用了滑动均值（算法原理参考）的办法进行降噪稳定。通过确定参考衰退率β(&amp;lt;1)，使得最终结果等于：&lt;code&gt;β*上次的CPU占用率 + (1-β)*本次的时机测得CPU占用率&lt;/code&gt;。如下所示：&lt;/p&gt;&lt;figure&gt;&lt;img data-fileid=&quot;100000026&quot; data-ratio=&quot;0.6774193548387096&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAWEWDo5UziaSA4yJsCaIKOp555icop2qgEVAjiawjZosjwcqaf7pEeKCiakA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;651&quot;/&gt;&lt;/figure&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;深蓝色折线代表了正常实际测量下CPU的变化折线图，可以看到抖动十分不稳定。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;橘色公式折线表示了在滑动均值算法下趋于平稳变动的CPU变化图，但是能看到前提CPU数值较低。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;绿色公式折线是在具体滑动均值算法作用下，对前期数据量不足导致CPU起点低的问题进行的&lt;strong&gt;偏差修正&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;最终经过上述修正，我们得到线上具有参考使用价值的CPU占用率。&lt;/p&gt;&lt;p&gt;pass和RT分别表示处理完成请求数和对应请求所消耗的时间，即TPS和Latency。相应的，我们的测量办法同样是通过滑动窗口对pass和RT进行统计，如下图。&lt;/p&gt;&lt;figure&gt;&lt;img data-fileid=&quot;100000018&quot; data-ratio=&quot;0.33587786259541985&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAW6HBcNdpxX8DggsbFibyo5gUZDd3oXGahKHibem4Y7uvFSSZFLOnL1AwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;655&quot;/&gt;&lt;/figure&gt;&lt;p&gt;sample window表示窗口采样周期，sample bucket表示周期内的采样批次。假设现在采样窗口时间为1000ms，bucket采样批次时间持续500ms，那么就表示在前500ms内完成的请求数和这些请求消耗的平均时延都会被原子（atomic）统计在bucket1中。同理，当第501ms会被统计在bucket2中，当第1001ms时会再次回到bucket1，以此类推。可见当bucket足够多，以及统计间隔足够小时最能够得到真实的数据，更有效的应对秒内流量洪峰。&lt;/p&gt;&lt;p&gt;当CPU利用率过载时，就需要通过预期公式进行干预了。我们会在服务运行期间持续统计当前服务的请求数，即inflight，通过在滑动窗口内的所有buckets中比较得出最多请求完成数maxPass，以及最小的耗时minRT，相乘就得出了预期的最佳请求数maxFlight。通过inflight与maxFlight对比，如果前者大于后者那么就已经过载，进而拒绝后续到来的请求防止服务过载。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;线上效果与调优&lt;/span&gt;&lt;/h3&gt;&lt;figure&gt;&lt;img data-fileid=&quot;100000019&quot; data-ratio=&quot;0.42209072978303747&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gvgwWZq1lBZ5ImdKpUQib3PfriciblIaXAWWSHmf2KER7k6lbHnRicSzUjMHYdmzdPjKjyWJVyYos6OW0Fzw4tqz3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1014&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上图是在线上部署了基于kratos的自适应算法后的效果图，其中蓝色曲线代表了并发访问的用户数，深黄色代表对应请求的时延，浅绿色则表示成功处理的请求数。左侧为最终版，右侧为第一版。&lt;/p&gt;&lt;p&gt;不难看出，第一版时当算法控制后黄色的时延仍然很高，成功处理的请求数也并非稳定。产生这样结果的原因其实依然是CPU利用率很敏感且粒度很细，当CPU大于80%利用率阈值时算法生效，当微量请求被拒绝时算法便停止了干预。最终的结果便是算法会因为流量的涌入与拒绝中频繁开启与关闭，导致结果不符合预期。&lt;/p&gt;&lt;p&gt;为此我们简单加入了1s的冷却时间，也就是说算法开启后会持续至少1s的冷却时间，再次期间保持算法开启。当冷却时间过后会再次统计当前CPU利用率，并根据阈值对比进行持续或者关闭。最终测试结果如最终版左图所示，在流量持续涌入的情况下请求的成功处理数和时延都十分稳定。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;后记&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;本文尽可能通过应对负载的迭代历程优劣分析，抽丝剥茧完整的引出基于TCP-BBR的自适应算法实现与优势。自适应过载保护同样不是完美的，一方面在请求等排队过长的情况下虽然计算资源未满载，但是同样增加了等待时间。为此，可以选择结合排队论相关算法如CoDel进行干预；另一方面，在极端流量的涌入下可能单纯的拒绝回复成本就会打垮CPU，从而导致宕机，此时可以参考reference中google sre里的自适应熔断等策略合力保障服务的可用性。&lt;/p&gt;&lt;p&gt;另外，对于自适应限流技术的发展，从Netflix最早基于传输层vegas的限流手段推出中间件&lt;code&gt;concurrency-limits&lt;/code&gt;， 再到如今基于TCP-BBR的自适应限流算法改进与实现，都体现了很强的发散性和优化空间。期待读者的进一步讨论！&lt;/p&gt;&lt;h1&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;Google SRE：https://sre.google/sre-book/handling-overload/&lt;/p&gt;&lt;p&gt;Alibaba Sentinel：https://sentinelguard.io/zh-cn/docs/system-adaptive-protection.html&lt;/p&gt;&lt;p&gt;Netflix 限流技术：https://netflixtechblog.medium.com/performance-under-load-3e6fa9a60581&lt;/p&gt;&lt;p&gt;TensorFlow滑动窗口简读：https://blog.csdn.net/m0_38106113/article/details/81542863&lt;/p&gt;&lt;p&gt;Kratos 自适应限流源码：https://github.com/go-kratos/kratos/tree/v1.0.x/pkg/ratelimit/bbr&lt;/p&gt;&lt;p&gt;CoDel 排队论简读：https://blog.csdn.net/dog250/article/details/72849893&lt;/p&gt;&lt;p&gt;TCP-BBR: https://queue.acm.org/detail.cfm?id=3022184&lt;/p&gt;&lt;p&gt;https://www.net.in.tum.de/fileadmin/bibtex/publications/papers/IFIP-Networking-2018-TCP-BBR.pdf&lt;/p&gt;&lt;p&gt;https://blog.csdn.net/russell_tao/article/details/98723451&lt;/p&gt;&lt;p&gt;Golang进阶训练营之微服务可用性设计-毛剑&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>