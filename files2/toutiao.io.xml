<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>56579331c3fbdd6b67189183fd49be03</guid>
<title>每个 gopher 都需要了解的 Go AST</title>
<link>https://toutiao.io/k/w1je9qc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近业务迁移，大约 100+ 个接口需要从旧的服务，迁到公司框架。遇到几个痛点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;结构体 dto 做 diff, 对比结果&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自定义的结构体与 protobuf 生成的互相转换，基于 json tag&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这类工作要么手写(编译期), 要么 reflect 反射实现(运行时)。其中 #1 考滤到性能问题，手写最优，但是结构体太大，同时 100+ 个接口迁移，工作量可以想象&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;google 开源的 &lt;span&gt;go-cmp&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;, 输出美观，反射性能开销大了点。当前业务大量使用，堆机器吧又不是不能用&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;#2 目前不好解决，可以简单的 json Marshal 再 Unmarshal, 但有些字段类型不一致，同时如何做 json tag 到 pb tag 转换呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们当前的方案是通过解析 ast, 读源码生成结构体树，然后 BFS 遍历自动生成转换代码&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;//go:generate ast-tools --action convert --target-pkg aaa/dto/geresponse --src-pkg bbb/dto --source aaaResponse  --target bbbResponse&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结合 go generate 自动生成，这是我们的目标&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Go AST 基础&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不搞编译器的大多只需要懂前端，不涉及 IR 与后端，同时 go 官方还提供了大量开箱即用的库 &lt;span&gt;go/ast&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.0256&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/9OBDxDDV6f01FFTBgpjIxuCCzU4fdExTVQ04kKL1zVTxlD7U3vMrKTToDTHwqIsgv8UTmXyvhibEfJYEy8jumnA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1250&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Node &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; Pos() token.Pos &lt;span&gt;// position of first character belonging to the node&lt;/span&gt;&lt;br/&gt; End() token.Pos &lt;span&gt;// position of first character immediately after the node&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所有实现 &lt;code&gt;Pos&lt;/code&gt; &lt;code&gt;End&lt;/code&gt; 的都是 Node&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Comments&lt;/code&gt; 注释， //-style 或是 /*-style&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Declarations&lt;/code&gt; 声明，&lt;code&gt;GenDecl&lt;/code&gt; (generic declaration node) 代表 import, constant, type 或 variable declaration. &lt;code&gt;BadDecl&lt;/code&gt; 代表有语法错误的 node&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Statements&lt;/code&gt; 常见的语句表达式，return, case, if 等等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;File&lt;/code&gt; 代表一个 go 源码文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Package&lt;/code&gt; 代表一组源代码文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Expr&lt;/code&gt; 表达式 ArrayExpr, StructExpr, SliceExpr 等等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看一个例子吧，&lt;span&gt;goast可视化界面&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt; 更直观一些&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// Manager ...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Manager &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; Same      &lt;span&gt;string&lt;/span&gt;&lt;br/&gt; All       &lt;span&gt;bool&lt;/span&gt;   &lt;span&gt;`json:&quot;all&quot;`&lt;/span&gt;&lt;br/&gt; Version   &lt;span&gt;int&lt;/span&gt;    &lt;span&gt;`json:&quot;-&quot;`&lt;/span&gt;&lt;br/&gt; NormalStruct  pkgcmd.RootApp&lt;br/&gt; PointerStruct *pkgcmd.RootApp&lt;br/&gt; SlicesField       []&lt;span&gt;int&lt;/span&gt;&lt;br/&gt; MapField           &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们定义结构体 &lt;code&gt;Manager&lt;/code&gt; 来看一下 goast 输出结果&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;29&lt;/span&gt;  .  &lt;span&gt;1&lt;/span&gt;: *ast.GenDecl {&lt;br/&gt;&lt;span&gt;30&lt;/span&gt;  .  .  Doc: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;31&lt;/span&gt;  .  .  TokPos: foo:&lt;span&gt;7&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;32&lt;/span&gt;  .  .  Tok: &lt;span&gt;type&lt;/span&gt;&lt;br/&gt;&lt;span&gt;33&lt;/span&gt;  .  .  Lparen: -&lt;br/&gt;&lt;span&gt;34&lt;/span&gt;  .  .  Specs: []ast.Spec (&lt;span&gt;len&lt;/span&gt; = &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;&lt;span&gt;35&lt;/span&gt;  .  .  .  &lt;span&gt;0&lt;/span&gt;: *ast.TypeSpec {&lt;br/&gt;&lt;span&gt;36&lt;/span&gt;  .  .  .  .  Doc: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;37&lt;/span&gt;  .  .  .  .  Name: *ast.Ident {&lt;br/&gt;&lt;span&gt;38&lt;/span&gt;  .  .  .  .  .  NamePos: foo:&lt;span&gt;7&lt;/span&gt;:&lt;span&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span&gt;39&lt;/span&gt;  .  .  .  .  .  Name: &lt;span&gt;&quot;Manager&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;40&lt;/span&gt;  .  .  .  .  .  Obj: *ast.Object {&lt;br/&gt;&lt;span&gt;41&lt;/span&gt;  .  .  .  .  .  .  Kind: &lt;span&gt;type&lt;/span&gt;&lt;br/&gt;&lt;span&gt;42&lt;/span&gt;  .  .  .  .  .  .  Name: &lt;span&gt;&quot;Manager&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;43&lt;/span&gt;  .  .  .  .  .  .  Decl: *(obj @ &lt;span&gt;35&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;44&lt;/span&gt;  .  .  .  .  .  .  Data: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;45&lt;/span&gt;  .  .  .  .  .  .  Type: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;46&lt;/span&gt;  .  .  .  .  .  }&lt;br/&gt;&lt;span&gt;47&lt;/span&gt;  .  .  .  .  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;*ast.GenDecl&lt;/code&gt; 通用声明，&lt;code&gt;*ast.TypeSpec&lt;/code&gt; 代表是个类型的定义，名称是 &lt;code&gt;Manager&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;48&lt;/span&gt;    .  Assign: -&lt;br/&gt;&lt;span&gt;49&lt;/span&gt;    .  Type: *ast.StructType {&lt;br/&gt;&lt;span&gt;50&lt;/span&gt;    .  .  Struct: foo:&lt;span&gt;7&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span&gt;51&lt;/span&gt;    .  .  Fields: *ast.FieldList {&lt;br/&gt;&lt;span&gt;52&lt;/span&gt;    .  .  .  Opening: foo:&lt;span&gt;7&lt;/span&gt;:&lt;span&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span&gt;53&lt;/span&gt;    .  .  .  List: []*ast.Field (&lt;span&gt;len&lt;/span&gt; = &lt;span&gt;7&lt;/span&gt;) {&lt;br/&gt;&lt;span&gt;54&lt;/span&gt;    .  .  .  .  &lt;span&gt;0&lt;/span&gt;: *ast.Field {&lt;br/&gt;&lt;span&gt;55&lt;/span&gt;    .  .  .  .  .  Doc: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;56&lt;/span&gt;    .  .  .  .  .  Names: []*ast.Ident (&lt;span&gt;len&lt;/span&gt; = &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;&lt;span&gt;57&lt;/span&gt;    .  .  .  .  .  .  &lt;span&gt;0&lt;/span&gt;: *ast.Ident {&lt;br/&gt;&lt;span&gt;58&lt;/span&gt;    .  .  .  .  .  .  .  NamePos: foo:&lt;span&gt;8&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;59&lt;/span&gt;    .  .  .  .  .  .  .  Name: &lt;span&gt;&quot;Same&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;60&lt;/span&gt;    .  .  .  .  .  .  .  Obj: *ast.Object {&lt;br/&gt;&lt;span&gt;61&lt;/span&gt;    .  .  .  .  .  .  .  .  Kind: &lt;span&gt;var&lt;/span&gt;&lt;br/&gt;&lt;span&gt;62&lt;/span&gt;    .  .  .  .  .  .  .  .  Name: &lt;span&gt;&quot;Same&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;63&lt;/span&gt;    .  .  .  .  .  .  .  .  Decl: *(obj @ &lt;span&gt;54&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;64&lt;/span&gt;    .  .  .  .  .  .  .  .  Data: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;65&lt;/span&gt;    .  .  .  .  .  .  .  .  Type: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;66&lt;/span&gt;    .  .  .  .  .  .  .  }&lt;br/&gt;&lt;span&gt;67&lt;/span&gt;    .  .  .  .  .  .  }&lt;br/&gt;&lt;span&gt;68&lt;/span&gt;    .  .  .  .  .  }&lt;br/&gt;&lt;span&gt;69&lt;/span&gt;    .  .  .  .  .  Type: *ast.Ident {&lt;br/&gt;&lt;span&gt;70&lt;/span&gt;    .  .  .  .  .  .  NamePos: foo:&lt;span&gt;8&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span&gt;71&lt;/span&gt;    .  .  .  .  .  .  Name: &lt;span&gt;&quot;string&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;72&lt;/span&gt;    .  .  .  .  .  .  Obj: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;73&lt;/span&gt;    .  .  .  .  .  }&lt;br/&gt;&lt;span&gt;74&lt;/span&gt;    .  .  .  .  .  Tag: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;75&lt;/span&gt;    .  .  .  .  .  Comment: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;76&lt;/span&gt;    .  .  .  .  }&lt;br/&gt;&lt;span&gt;77&lt;/span&gt;    .  .  .  .  &lt;span&gt;1&lt;/span&gt;:&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;*ast.StructType&lt;/code&gt; 代表类型是结构体，&lt;code&gt;*ast.Field&lt;/code&gt; 数组保存结构体成员声明，一共 7 个元素，第 0 个字段名称 &lt;code&gt;Same&lt;/code&gt;, 类型 &lt;code&gt;string&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;131  .  3: *ast.Field {&lt;br/&gt;132  .  .  Doc: nil&lt;br/&gt;133  .  .  Names: []*ast.Ident (len = 1) {&lt;br/&gt;134  .  .  .  0: *ast.Ident {&lt;br/&gt;135  .  .  .  .  NamePos: foo:11:2&lt;br/&gt;136  .  .  .  .  Name: &lt;span&gt;&quot;NormalStruct&quot;&lt;/span&gt;&lt;br/&gt;137  .  .  .  .  Obj: *ast.Object {&lt;br/&gt;138  .  .  .  .  .  Kind: var&lt;br/&gt;139  .  .  .  .  .  Name: &lt;span&gt;&quot;NormalStruct&quot;&lt;/span&gt;&lt;br/&gt;140  .  .  .  .  .  Decl: *(obj @ 131)&lt;br/&gt;141  .  .  .  .  .  Data: nil&lt;br/&gt;142  .  .  .  .  .  Type: nil&lt;br/&gt;143  .  .  .  .  }&lt;br/&gt;144  .  .  .  }&lt;br/&gt;145  .  .  }&lt;br/&gt;146  .  .  Type: *ast.SelectorExpr {&lt;br/&gt;147  .  .  .  X: *ast.Ident {&lt;br/&gt;148  .  .  .  .  NamePos: foo:11:16&lt;br/&gt;149  .  .  .  .  Name: &lt;span&gt;&quot;pkgcmd&quot;&lt;/span&gt;&lt;br/&gt;150  .  .  .  .  Obj: nil&lt;br/&gt;151  .  .  .  }&lt;br/&gt;152  .  .  .  Sel: *ast.Ident {&lt;br/&gt;153  .  .  .  .  NamePos: foo:11:23&lt;br/&gt;154  .  .  .  .  Name: &lt;span&gt;&quot;RootApp&quot;&lt;/span&gt;&lt;br/&gt;155  .  .  .  .  Obj: nil&lt;br/&gt;156  .  .  .  }&lt;br/&gt;157  .  .  }&lt;br/&gt;158  .  .  Tag: nil&lt;br/&gt;159  .  .  Comment: nil&lt;br/&gt;160  .  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;*ast.SelectorExpr&lt;/code&gt; 代表该字段类型是 A.B，其中 A 代表 package, 具体 B 是什么类型不知道，还需要遍历包 A&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;221&lt;/span&gt;  .  &lt;span&gt;6&lt;/span&gt;: *ast.Field {&lt;br/&gt;&lt;span&gt;222&lt;/span&gt;  .  .  Doc: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;223&lt;/span&gt;  .  .  Names: []*ast.Ident (&lt;span&gt;len&lt;/span&gt; = &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;&lt;span&gt;224&lt;/span&gt;  .  .  .  &lt;span&gt;0&lt;/span&gt;: *ast.Ident {&lt;br/&gt;&lt;span&gt;225&lt;/span&gt;  .  .  .  .  NamePos: foo:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;226&lt;/span&gt;  .  .  .  .  Name: &lt;span&gt;&quot;MapField&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;227&lt;/span&gt;  .  .  .  .  Obj: *ast.Object {&lt;br/&gt;&lt;span&gt;228&lt;/span&gt;  .  .  .  .  .  Kind: &lt;span&gt;var&lt;/span&gt;&lt;br/&gt;&lt;span&gt;229&lt;/span&gt;  .  .  .  .  .  Name: &lt;span&gt;&quot;MapField&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;230&lt;/span&gt;  .  .  .  .  .  Decl: *(obj @ &lt;span&gt;221&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;231&lt;/span&gt;  .  .  .  .  .  Data: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;232&lt;/span&gt;  .  .  .  .  .  Type: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;233&lt;/span&gt;  .  .  .  .  }&lt;br/&gt;&lt;span&gt;234&lt;/span&gt;  .  .  .  }&lt;br/&gt;&lt;span&gt;235&lt;/span&gt;  .  .  }&lt;br/&gt;&lt;span&gt;236&lt;/span&gt;  .  .  Type: *ast.MapType {&lt;br/&gt;&lt;span&gt;237&lt;/span&gt;  .  .  .  Map: foo:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span&gt;238&lt;/span&gt;  .  .  .  Key: *ast.Ident {&lt;br/&gt;&lt;span&gt;239&lt;/span&gt;  .  .  .  .  NamePos: foo:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span&gt;240&lt;/span&gt;  .  .  .  .  Name: &lt;span&gt;&quot;string&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;241&lt;/span&gt;  .  .  .  .  Obj: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;242&lt;/span&gt;  .  .  .  }&lt;br/&gt;&lt;span&gt;243&lt;/span&gt;  .  .  .  Value: *ast.Ident {&lt;br/&gt;&lt;span&gt;244&lt;/span&gt;  .  .  .  .  NamePos: foo:&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span&gt;245&lt;/span&gt;  .  .  .  .  Name: &lt;span&gt;&quot;string&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;246&lt;/span&gt;  .  .  .  .  Obj: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;247&lt;/span&gt;  .  .  .  }&lt;br/&gt;&lt;span&gt;248&lt;/span&gt;  .  .  }&lt;br/&gt;&lt;span&gt;249&lt;/span&gt;  .  .  Tag: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;250&lt;/span&gt;  .  .  Comment: &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;251&lt;/span&gt;  .  }&lt;br/&gt;&lt;span&gt;252&lt;/span&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;*ast.MapType&lt;/code&gt; 代表类型是字段，&lt;code&gt;Key&lt;/code&gt;, &lt;code&gt;Value&lt;/code&gt; 分别定义键值类型&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;内容有点多，大家感兴趣自行实验&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;遍历&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看懂了 go ast 相关基础，我们就可以遍历获取结构体树形结构，广度 + 深度相结合&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(p *Parser)&lt;/span&gt; &lt;span&gt;IterateGenNeighbours&lt;/span&gt;&lt;span&gt;(dir &lt;span&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; path, err := filepath.Abs(dir)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; p.visitedPkg[dir] = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; pkgs, err := parser.ParseDir(token.NewFileSet(), path, filter, &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; todo := &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;struct&lt;/span&gt;{}{}&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; pkgName, pkg := &lt;span&gt;range&lt;/span&gt; pkgs {&lt;br/&gt;  nbv := NewNeighbourVisitor(path, p, todo, pkgName)&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; _, astFile := &lt;span&gt;range&lt;/span&gt; pkg.Files {&lt;br/&gt;   ast.Walk(nbv, astFile)&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// update import specs per file&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; name := &lt;span&gt;range&lt;/span&gt; nbv.locals {&lt;br/&gt;   fmt.Sprintf(&lt;span&gt;&quot;IterateGenNeighbours find struct:%s pkg:%s path:%s\n&quot;&lt;/span&gt;, name, nbv.locals[name].importPkg, nbv.locals[name].importPath)&lt;br/&gt;   nbv.locals[name].importSpecs = nbv.importSpec&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; path := &lt;span&gt;range&lt;/span&gt; todo {&lt;br/&gt;  dir := os.Getenv(&lt;span&gt;&quot;GOPATH&quot;&lt;/span&gt;) + &lt;span&gt;&quot;/src/&quot;&lt;/span&gt; + strings.Replace(path, &lt;span&gt;&quot;\&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;-1&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; _, visited := p.visitedPkg[dir]; visited {&lt;br/&gt;   &lt;span&gt;continue&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;  p.IterateGenNeighbours(dir)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的工作量比较大，涉及 import 包，调试了很久，有些 linter 只需读单一文件即可，工作量没法比&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;模板输出&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后一步就是输出结果，这里要 BFS 广度遍历结构体树，然后渲染模板&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; convertSlicePointerScalarTemplateString = &lt;span&gt;`&lt;br/&gt;    {% if ArrayLength == &quot;&quot; %}&lt;br/&gt;    dst.{{ TargetFieldName }} = make([]{{ TargetType }}, len(src.{{ SrcFieldName }}))&lt;br/&gt;    {% endif %}&lt;br/&gt;    for i := range src.{{ SrcFieldName }} {&lt;br/&gt;     if src.{{ SrcFieldName }}[i] == nil {&lt;br/&gt;      continue&lt;br/&gt;     }&lt;br/&gt;&lt;br/&gt;     tmp := *src.{{ SrcFieldName }}[i] &lt;br/&gt;     dst.{{ TargetFieldName }}[i] = &amp;amp;tmp&lt;br/&gt;    }&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面是转换 &lt;code&gt;[8]*Scalar&lt;/code&gt; 可以是数组或切片，模板使用 &lt;span&gt;pongo2&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt; 实现的 jinji2 语法，非常强大&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// ConvertDtoInsuranceOptionToCommonInsuranceOptionV2 only convert exported fields&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ConvertDtoInsuranceOptionToCommonInsuranceOptionV2&lt;/span&gt;&lt;span&gt;(src *dto.InsuranceOption)&lt;/span&gt; *&lt;span&gt;common&lt;/span&gt;.&lt;span&gt;InsuranceOptionV2&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; src == &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    dst := &amp;amp;common.InsuranceOptionV2{}&lt;br/&gt;    dst.ID = src.ID&lt;br/&gt;    dst.OptionPremium = src.OptionPremium&lt;br/&gt;    dst.InsuranceSignature = src.InsuranceSignature&lt;br/&gt;    dst.Title = src.Title&lt;br/&gt;    dst.Subtitle = src.Subtitle&lt;br/&gt;    dst.ErrorText = src.ErrorText&lt;br/&gt;    dst.IsIncluded = src.IsIncluded&lt;br/&gt;    starCurrency := ConvertDtoCurrencyDTOToCommonCurrencyDTO(src.Currency)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; starCurrency != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;        dst.Currency = *starCurrency&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; dst&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面是输出结果的样例，整体来讲比手写靠谱多了，遇到个别 case 还是需要手工 fix&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;AST 其它应用场景&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 规则&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;工作当中用到编译原理的场景非常多，比如去年高老板分享的&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIxODcxMTIzNQ==&amp;amp;mid=2247486008&amp;amp;idx=1&amp;amp;sn=3121686a3df62752b1e8e86feabe080c&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;用规则引擎让你一天上线十个需求&lt;/a&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;If aa.bb.cc == &lt;span&gt;1&lt;/span&gt;  &lt;span&gt;// 说明是多车型发单&lt;/span&gt;&lt;br/&gt;  Unmarshal(bb.cc.ee)&lt;br/&gt;  看&lt;span&gt;type&lt;/span&gt;是否为 &lt;span&gt;4&lt;/span&gt; &lt;br/&gt;&lt;span&gt;else&lt;/span&gt;  &lt;span&gt;// 单车型发单&lt;/span&gt;&lt;br/&gt; Unmarshal(bb.cc.ff)&lt;br/&gt;  看&lt;span&gt;type&lt;/span&gt;是否为 &lt;span&gt;4&lt;/span&gt; &lt;br/&gt;(&lt;span&gt;type&lt;/span&gt; = &lt;span&gt;4&lt;/span&gt; 的是拼车)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务需要多种多样，订阅 MQ 根据需求做各种各样的统计，入库，供业务查询。如果业务类型少还好，但是 DIDI 业务复杂，如果每次都人工手写 go 代码效率太低&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后解决思路是 &lt;code&gt;JPATH + Expression Eval&lt;/code&gt;, 需求只需要写表达式，服务解析表达示即可。Eval 库也是现成的 &lt;span&gt;govaluate&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 模板&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;jinja2 就是这类的代表&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.563302752293578&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/9OBDxDDV6f01FFTBgpjIxuCCzU4fdExTQ1qyZqsKbibbkdXl65wlQJUFJFfDffs6WqoM7eEV2ACKG0NjDlA9H4A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;545&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原理非常简单，感兴趣的可以看官方实现&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. Inject 代码&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里要介绍两个项目 pingcap &lt;span&gt;failpoint&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt; 和 uber-go 的 gopatch&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.65390625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/9OBDxDDV6f01FFTBgpjIxuCCzU4fdExT4zC2RCQCkqYaoRoMRX1Wia8kMeUNU8aJml9pF8qlCDLVC2TuiageEWFg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;failpoint 实现很简单，代码里写 &lt;code&gt;Marker&lt;/code&gt; 函数，这些空函数在正常编译时会被编译器优化去掉，所以正常运行时 zero-cost&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; outerVar = &lt;span&gt;&quot;declare in outer scope&quot;&lt;/span&gt;&lt;br/&gt;failpoint.Inject(&lt;span&gt;&quot;failpoint-name-for-demo&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(val failpoint.Value)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;unit-test&quot;&lt;/span&gt;, val, outerVar)&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;故障注入时通过 failctl 将 &lt;code&gt;Marker&lt;/code&gt; 函数转换为故障注入函数，这里就用到了 go-ast 做劫持转换&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;uber-go 的 gopatch 也非常强大，假如你的代码有很多 &lt;code&gt;go func&lt;/code&gt; 开启的 goroutine, 你想批量加入 &lt;code&gt;recover&lt;/code&gt; 逻辑，如果数据特别多人工加很麻烦，这时可以用 gopatcher&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; patchTemplateString = &lt;span&gt;`@@&lt;br/&gt;@@&lt;br/&gt;+ import &quot;runtime/debug&quot;&lt;br/&gt;+ import &quot;{{ Logger }}&quot;&lt;br/&gt;+ import &quot;{{ Statsd }}&quot;&lt;br/&gt;&lt;br/&gt;go func(...) {&lt;br/&gt;+    defer func(){&lt;br/&gt;+        if err := recover(); err != nil {&lt;br/&gt;+            statsd.Count1(&quot;{{ StatsdTag }}&quot;, &quot;{{ FileName }}&quot;)&lt;br/&gt;+            logging.Error(&quot;{{ LoggerTag }}&quot;, &quot;{{ FileName }} recover from panic, err=%+v, stack=%v&quot;, err, string(debug.Stack()))&lt;br/&gt;+        }&lt;br/&gt;+    }()&lt;br/&gt;   ...&lt;br/&gt; }()&lt;br/&gt;`&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编写模板，上面的例子自动在 &lt;code&gt;go func(...) {&lt;/code&gt; 开头注入 &lt;code&gt;recover&lt;/code&gt; 语句块，非常方便&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个库能做的事情特别多，感兴趣自行实验&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. linter&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大部分 linter 工具都是用 go ast 实现的，比如对于大写的 Public 函数，如果没有注释报错&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// BuildArgs write a&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;BuildArgs&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; a &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;    a = a + bbb.c&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; a&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看下该代码的 ast 代码&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;29  .  .  1: *ast.FuncDecl {&lt;br/&gt;30  .  .  .  Doc: *ast.CommentGroup {&lt;br/&gt;31  .  .  .  .  List: []*ast.Comment (len = 1) {&lt;br/&gt;32  .  .  .  .  .  0: *ast.Comment {&lt;br/&gt;33  .  .  .  .  .  .  Slash: foo:7:1&lt;br/&gt;34  .  .  .  .  .  .  Text: &lt;span&gt;&quot;// BuildArgs write a&quot;&lt;/span&gt;&lt;br/&gt;35  .  .  .  .  .  }&lt;br/&gt;36  .  .  .  .  }&lt;br/&gt;37  .  .  .  }&lt;br/&gt;38  .  .  .  Recv: nil&lt;br/&gt;39  .  .  .  Name: *ast.Ident {&lt;br/&gt;40  .  .  .  .  NamePos: foo:8:6&lt;br/&gt;41  .  .  .  .  Name: &lt;span&gt;&quot;BuildArgs&quot;&lt;/span&gt;&lt;br/&gt;42  .  .  .  .  Obj: *ast.Object {&lt;br/&gt;43  .  .  .  .  .  Kind: func&lt;br/&gt;44  .  .  .  .  .  Name: &lt;span&gt;&quot;BuildArgs&quot;&lt;/span&gt;&lt;br/&gt;45  .  .  .  .  .  Decl: *(obj @ 29)&lt;br/&gt;46  .  .  .  .  .  Data: nil&lt;br/&gt;47  .  .  .  .  .  Type: nil&lt;br/&gt;48  .  .  .  .  }&lt;br/&gt;49  .  .  .  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;linter 只需要检查 &lt;code&gt;FuncDecl&lt;/code&gt; 的 Name 如果是可导出的，同时 &lt;code&gt;Doc.CommentGroup&lt;/code&gt; 不存在，或是注释不以函数名开头，报错即可&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外如果大家对代码 cycle 有要求，那么是不是可以 ast 扫一遍来发现呢？如果大家要求函数不能超过 100 行，是不是也可以实现呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;玩法很多 ^^&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小结&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编译原理虽然难，但是搞业务的只需要前端知识即可，不用研究的太深，有需要的场景，知道 AST 如何解决问题就行&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天的分享就这些，写文章不容易，如果对大家有所帮助和启发，请大家帮忙点击&lt;code&gt;再看&lt;/code&gt;，&lt;code&gt;点赞&lt;/code&gt;，&lt;code&gt;分享&lt;/code&gt; 三连&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于 &lt;code&gt;Go AST&lt;/code&gt; 大家有什么看法，欢迎留言一起讨论，大牛多留言 ^_^&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;go-cmp: &lt;em&gt;https://github.com/google/go-cmp,&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;go ast: &lt;em&gt;https://pkg.go.dev/go/ast,&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;goast-viewer 可视化界面: &lt;em&gt;https://yuroyoro.github.io/goast-viewer/index.html,&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;go pongo2 jinja2: &lt;em&gt;github.com/flosch/pongo2,&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;govaluate: &lt;em&gt;https://github.com/Knetic/govaluate,&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;pingcap failpoint: &lt;em&gt;https://github.com/pingcap/failpoint,&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a6a311170f38483bf6d284da04315dd4</guid>
<title>Golang本地缓存选型对比及原理总结</title>
<link>https://toutiao.io/k/0jakz0b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe977Xa5zfy5iaV3agpS11Cqm4psjPOibic6BZSicnBFh6uWzCFp3uqN5R114Fq85DmuCzdL3eESlQ37bFA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;导语 |&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;提到本地缓存大家都不陌生，只要是个有点经验的后台开发人员，都知道缓存的作用和弊端。本篇文章我们就来简单聊聊在golang做业务开发的过程中，本地缓存的一些可选的开源方案，分析它们的特点，以及内部的实现原理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;一、本地缓存需求分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;fc176b1e788c8c9af9d30f250205c2bd&quot;&gt;&lt;span&gt;首先来梳理一下业务开发过程中经常面临的本地缓存的一些需求。我们一般做&lt;/span&gt;&lt;span&gt;缓存就是为了能提高系统的读写性能&lt;/span&gt;&lt;span&gt;，缓&lt;/span&gt;&lt;span&gt;存的命中率越高，也就意味着缓存的效果越好&lt;/span&gt;&lt;span&gt;。其次本地缓存一般都受限于本地内存的大小，所有全量的数据一般存不下。那基于这样的场景一方面是想缓存的数据越多，则命中率理论上也会随着缓存数据的增多而提高；另外一方面是想，既然所有的数据存不下那就想办法利用有限的内存存储有限的数据。这些有限的数据需要是经常访问的，同时有一定时效性(不会频繁改变)的。基于这两个点展开，我们一般对本地缓存会要求其满 足支持过期时间、支持淘汰策略。最后再使用自动管理内存的语言例如golang等开发时，还需要考虑在加入本地缓存后引发的GC问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;3&quot; data-type=&quot;p&quot; data-sign=&quot;b13a5699e7474be20a43c0832506c1ff&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;3&quot; data-type=&quot;p&quot; data-sign=&quot;b13a5699e7474be20a43c0832506c1ff&quot;&gt;&lt;span&gt;分析完我们日常本地缓存的诉求，再结合我们日常开发用到的golang语言，我们可以提炼得到golang本地缓存组件必须具备以下几个能力：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.40703125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe96Ea0lvkice7wKKMQn8UgCybUibw2fgE0wDq8t7v3spCPr2YgFibLDcdK2hgTBMy1p1RHshQbRXgEunA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;3&quot; data-type=&quot;p&quot; data-sign=&quot;7abd04b2af99817156ac807999525c36&quot;&gt;&lt;span&gt;分析清楚了我们的需求，也明确了我们需要的能力。那自然优先考虑golang内置的标准库中是否存在这样的组件可以直接使用呢？很遗憾，没有。golang中内置的可以直接用来做本地缓存的无非就是map和sync.Map。而这两者中，map是非并发安全的数据结构，在使用时需要加锁；而sync.Map虽然是线程安全的。但是需要在并发读写时加锁。此外二者均无法支持数据的过期和淘汰，同时在存储大量数据时，又会产生比较频繁的GC问题，更严重的情况下导致线上服务无法稳定运行。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e194e270efbcd3f4b7e65ba4b49fae85&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e194e270efbcd3f4b7e65ba4b49fae85&quot;&gt;&lt;span&gt;既然标准库中没有我们满足上述需求的本地缓存组件，那我们就想只有两种解决方案了：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;d43503b75313967a42d2a5e9ef12cadb&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;d43503b75313967a42d2a5e9ef12cadb&quot;&gt;&lt;span&gt;那首先面临的第一个问题就是方案的调研和选型，没有合适的方案时自己再来动手构建。下面我们就来给大家介绍下golang中哪些可以直接来使用的本地缓存组件吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;二、golang本地缓存组件概览&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;dc5b94e7a5e1602c74bc758c9953e1d5&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;37d3aa647eff69e20956e681b4f5d616&quot;&gt;&lt;span&gt;golang中本地缓存方案可选的有如下一些：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;0ba3aeb034981dce05ac8cee26ad827d&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;0ba3aeb034981dce05ac8cee26ad827d&quot;&gt;&lt;span&gt;下面通过笔者一段时间的调研和研究，将golang可选的开源本地缓存组件汇总为下表，方便大家在方案选型时作参考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.509375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe96Ea0lvkice7wKKMQn8UgCybKGjVYq9s7blXrkBXtWeQKiaAQEs37eYEveFavPic48YQ5xoaBL4PPc6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;08e57ec08e270d5fe2551a147a80b937&quot;&gt;&lt;span&gt;在上述方案中，freecache、bigcache、fastcache、ristretto、groupcache这几个大家根据实际的业务场景首选，offheap有定制需求时可考虑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;0b8466081593a86f1c85c27fd9e60130&quot;&gt;&lt;span&gt;通过上表的总结，个人想再此再谈几点关于本地缓存组件的理解：&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;83436ed5ddd750ea867c0a106caefdb4&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;83436ed5ddd750ea867c0a106caefdb4&quot;&gt;&lt;span&gt;（一）上述本地缓存组件中，实现零GC的方案主要就两种&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;83436ed5ddd750ea867c0a106caefdb4&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;ce8ba7704f006af54e33e36d61bb4fd4&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;45382bba3c40bc0d4eef0be27eae875f&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e519087e7f65acb93cce23e882658696&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e519087e7f65acb93cce23e882658696&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e519087e7f65acb93cce23e882658696&quot;&gt;&lt;span&gt;（二）实现高性能的关键&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;17ce80ecb7dfc2e34f804135e625f290&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;17ce80ecb7dfc2e34f804135e625f290&quot;&gt;&lt;span&gt;数据分片(降低锁的粒度)&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;05a8a9dfdfc6634bb480832f3b176c86&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;05a8a9dfdfc6634bb480832f3b176c86&quot;&gt;&lt;span&gt;上述几种缓存组件每种组件的实现都是（一）和（二）的几个分支的组合。下面我们大概给大家介绍每种组件的核心原理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;三、主流缓存组件实现原理剖析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;8342c0d15a1fadd6c24e2d7d7e1ce0c2&quot;&gt;&lt;span&gt;在本节中我们会重点分析下freecache、bigcache、fastcache、offheap这几个组件内部的实现原理。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;3779d22e4c36308a96ef0cd290a73f63&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;3779d22e4c36308a96ef0cd290a73f63&quot;&gt;&lt;span&gt;（一）freecache实现原理&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;96a454b41c72e652d4e283700011a649&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;96a454b41c72e652d4e283700011a649&quot;&gt;&lt;span&gt;首先分析下freecache的内部实现原理。在freecache中它通过segment来进行对数据分片，freecache内部包含256个segment，每个segment维护一把互斥锁，每一条kv数据进来后首先会根据k进行计算其hash值，然后根据hash值决定当前的这条数据落入到哪个segment中。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;a5989805b05fab9c65f00e49dfc2c641&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;a5989805b05fab9c65f00e49dfc2c641&quot;&gt;&lt;span&gt;对于每个segment而言，它由索引、数据两部分构成。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;0bc2514dbb21b0964171003302270987&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;0bc2514dbb21b0964171003302270987&quot;&gt;&lt;span&gt;索引&lt;/span&gt;&lt;span&gt;：其中索引最简单的方式采用map来维护，例如map[uint64]uint32这种。而freecache并没有采用这种做法，而是通过采用slice来底层实现一套无指针的map，以此避免GC扫描。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;b9e25aec4f45ad57601af1592a80b838&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;b9e25aec4f45ad57601af1592a80b838&quot;&gt;&lt;span&gt;数据&lt;/span&gt;&lt;span&gt;：数据采用环形缓冲区来循环使用，底层采用[]byte进行封装实现。数据写入环形缓冲区后，记录写入的位置index作为索引，读取时首先读取数据header信息，然后再读取kv数据。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;3&quot; data-type=&quot;p&quot; data-sign=&quot;1aad1d1412f60144dad2edc06336023d&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;3&quot; data-type=&quot;p&quot; data-sign=&quot;1aad1d1412f60144dad2edc06336023d&quot;&gt;&lt;span&gt;在freecache中数据的传递过程是：freecache-&amp;gt;segment-&amp;gt;(slot，ringbuffer) 下图是freecache的内部实现框架图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.38828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe96Ea0lvkice7wKKMQn8UgCyblUGNy2vOVfe8P4tlVOoe5KLvrKlYTpgFM6qic83Eich7l3LpUczicZxIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;6e1ac14910fc4630cb58a002493672b8&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span&gt;：freecache通过利用数据分片减小锁的粒度，然后再存储时索引并没有采用内置的map来维护而是采用自建map减少指针来避免GC，同时数据存储时采用预先分配内存然后后边循环使用。通过上述两种方法保证了在堆上分配内存同时减少GC对系统性能的影响。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;6e1ac14910fc4630cb58a002493672b8&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;6e1ac14910fc4630cb58a002493672b8&quot;&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;efba603afd6eec1bcc820cbbd11bd325&quot;&gt;&lt;span&gt;（二）bigcache实现原理&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;7995fe1b1333a090f8480b1322317722&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;7995fe1b1333a090f8480b1322317722&quot;&gt;&lt;span&gt;bigcache和freecache类似，也是一个零GC、高性能的cache组件，但是它的实现和freecache还是有些差异，有篇&lt;/span&gt;&lt;span&gt;英文博客&lt;/span&gt;&lt;span&gt;（https://blog.allegro.tech/2016/03/writing-fast-cache-service-in-go.html）&lt;/span&gt;&lt;span&gt;介绍bigcache设计原理的，内容稍长感兴趣的可以阅读下，下面我们介绍一下bigcache的实现原理。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;81cacf823cd53d566aafbe2fe377b0d9&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;81cacf823cd53d566aafbe2fe377b0d9&quot;&gt;&lt;span&gt;bigcache同样是采用分片的方式构成，一个bigcache对象包含2^n个cacheShard对象，默认是1024个。每个cacheShard对象维护着一把sync.RWLock锁(读写锁)。所有的数据会分散到不同的cacheShard中。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;64acdc4ae2a0bf9cd23127190cf1d7a2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;64acdc4ae2a0bf9cd23127190cf1d7a2&quot;&gt;&lt;span&gt;每个cacheShard同样由索引和数据构成。索引采用map[uint64]uint32来存储，数据采用entry([]byte)环形队列存储。索引中存储的是该条数据在entryBuffer写入的位置pos。每条kv数据按照TLV的格式写入队列。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;c678846faad46a0a088c1c7915a0f694&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;c678846faad46a0a088c1c7915a0f694&quot;&gt;&lt;span&gt;不过值得注意的是，和bigcache和freecache不同的一点在于它的环形队列可以自动扩容。同时bigcache中数据的过期是通过全局的时间窗口维护的，每个单独的kv无法设置不同的过期时间。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;8add312177cf339ee5074773501d872f&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;8add312177cf339ee5074773501d872f&quot;&gt;&lt;span&gt;下面是bigcache的内容实现原理框架图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5609375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe96Ea0lvkice7wKKMQn8UgCybb8ibfOjSNI1ibhu4ygPp1d6QZ31l4yzWsxQKw7RFl7yyD7HCw2HscmZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;1eb1f3c752b6a29fee40e2b40a1a2269&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span&gt;：bigcache思路和freecache大体相同，只不过在索引存储时更为巧妙，直接采用内置的map结构加上基础数据类型来实现。同时底层存储数据的队列也可以根据空间大小来决定是否扩容。唯一的缺陷是无法针对每个key进行设置不同的过期时间。这个个人认为如果想用bigcache同时想要这个特性，可以进行二次开发一下。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;784d65c7566368a65384a3ee616cb276&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;784d65c7566368a65384a3ee616cb276&quot;&gt;&lt;span&gt;通过&lt;/span&gt;&lt;span&gt;性能测试数据&lt;/span&gt;&lt;span&gt;（https://github.com/allegro/bigcache-bench）&lt;/span&gt;&lt;span&gt;来看，bigcache性能要比freecache稍微好一点。大家可以思考下他们性能的差异可能会在哪里呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;1&quot; data-sign=&quot;fb04b40df55314e0fc24a90d02f2cc65&quot;&gt;&lt;span&gt;（三）fastcache实现原理&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;3&quot; data-type=&quot;p&quot; data-sign=&quot;ed686a0ee2ea98e7cc6239b84721a897&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;3&quot; data-type=&quot;p&quot; data-sign=&quot;ed686a0ee2ea98e7cc6239b84721a897&quot;&gt;&lt;span&gt;本节介绍下fastcache的实现原理，根据fastcache官方文档介绍，它的灵感来自于bigcache。所以整体的思路和bigcache很类似，数据通过bucket进行分片。fastcache由512个bucket构成。每个bucket维护一把读写锁。在bucket内部数据同理是索引、数据两部分构成。索引用map[uint64]uint64存储。数据采用chunks二维的切片(二维数组)存储。不过值得注意的是fastcache有一个很大的特性是，它的内存分配是在堆外分配的，而不是在堆上分配的。堆外分配的内存。这样做也就避免了golang GC的影响。下图是fastcache内部实现框架图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe96Ea0lvkice7wKKMQn8UgCyb4tchV9YCtZfaEt6lf7rg0E6yKsJP0M22tM4gEY5R8oaicibTwMhx3Afg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;6c137d1f37ec956f74d3aa063bfbf8d6&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span&gt;：fastcache一方面充分利用了分片来降低锁的粒度，另一方面在索引存储时采用了对map的优化，同时在分配内存时，直接从堆外申请内存，自己实现了分配和释放内存的逻辑。通过上述手段使得GC的影响降到了最低。fastcache唯一的缺陷是官方提供的版本没有提供针对kv数据的过期时间这个特性。所以如果需要这个特性的话，需要自己动手二次开发。整体从性能上来看是比bigcache和freecache都更优。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;a3492df1bb06648bc1f852b1a24fd1a2&quot;&gt;&lt;span&gt;（四）offheap实现原理&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;36bd70d70495a36613b87330392d6135&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;36bd70d70495a36613b87330392d6135&quot;&gt;&lt;span&gt;本节介绍下offheap的相关内容，offheap其实功能就比较简单了，就是一个基于堆外内存构建的哈希表。它通过直接调用系统调用函数来分配内存。然后在内部通过数组来实现哈希表。实现过程中当发生哈希冲突时，它是采用探测法来解决。由于是在堆外分配的内存上构建的哈希表。导致它的GC开销非常的小。下图是offheap的内部实现框架图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.665625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe96Ea0lvkice7wKKMQn8UgCybMAlPILdI7icnOIKZQDeEPrlrLnVicaJ3fxLiaJUbuxlzXwJlfVZ4yibWOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;7c11d6cb507118fdb8029f214753c4b4&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span&gt;：offheap内部由于是采用探测法解决哈希冲突的，所以当哈希冲突严重时数据删除、查询都会带来非常复杂的处理流程。而且性能也会有一些损耗。可以作为学习和研究的项目还是非常不错的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;73d1864181e6db56d8b7269a77202ffc&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;90aa1ee57d97b2b1e7c5efeadf74f333&quot;&gt;&lt;span&gt;本文主要从日常需求出发，分析了日常业务过程中对本地缓存的需求，再调研了业界可选的一些组件并进行了对比，希望对本地缓存选型上起到一些参考和帮助。最后再对其中比较重要的几个组件如freecache、bigcache、fastcache、offheap等做了内部实现的简单介绍。上述内容只是从架构层面展开介绍，后续有时间再从源码层面做一些分析。由于篇幅限制本篇内容并未对map、sync.Map、go-cache、groupcache进行介绍。感兴趣的读者可以自行搜索资料进行阅读。如果大致理解了上述原理的童鞋也可以自己动手实践起来，造个轮子看看。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;90aa1ee57d97b2b1e7c5efeadf74f333&quot;&gt;&lt;/p&gt;&lt;h1 data-lines=&quot;1&quot; data-sign=&quot;381759e8570981ca8c2525ac43ac6e29&quot;&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/h1&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;dff82711a4d247732b97d4a892564a8c&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;1.Writing a very fast cache service with millions of entries in Go&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.深入理解Freecache&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.如何打造高性能的Go缓存库&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4.freecache和bigcache性能测试数据对比&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt; 作者简介&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;105&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;103&quot; data-fileid=&quot;100044396&quot; data-ratio=&quot;1.0198511166253101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe96Ea0lvkice7wKKMQn8UgCybU19kGz5Yhxkef0c52o6HeDEbfM3MibYRO5ojictKkgUVTUYibxZsAjnicQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;403&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;文小飞&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;腾讯后台开发工程师&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;Cloud9项目组后台开发工程师，3年后台开发经验，熟悉推荐系统后台工作；对网络、存储、分布式共识算法(raft)等技术比较感兴趣。目前在PCG Cloud9项目组，主要负责后台核心模块研发工作。个人微信公众号：毛里求斯的爱。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt; 推荐阅读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247535846&amp;amp;idx=1&amp;amp;sn=60598abb377b94b95fac71b21e839586&amp;amp;chksm=eaa856b6dddfdfa0e1167701d230692cdbca6830cdad8476e939652e0c520db93db42679a106&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;图文并茂！推荐算法架构——粗排&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;图文并茂！推荐算法架构——粗排&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247535827&amp;amp;idx=1&amp;amp;sn=18464a7c3008e698738ee42e2eb6216e&amp;amp;chksm=eaa85683dddfdf9556550a021207d4a9301d121e9c83ca47d5d8a479ba8b0ee93b809dca0ac3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;第四届 Techo TVP 开发者峰会回来了！这次我们线上见&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;第四届 Techo TVP 开发者峰会回来了！这次我们线上见&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247535783&amp;amp;idx=1&amp;amp;sn=e9736107bfb467fedb5cbcd4bcfa6f01&amp;amp;chksm=eaa856f7dddfdfe1cba3fa86754926632aaabf63870cd129ff3dbf11385199f4413bf9fe4240&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;来了！Go的2个黑魔法技巧&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;来了！Go的2个黑魔法技巧&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247535713&amp;amp;idx=1&amp;amp;sn=a37218245c7f62e2a12cb72fa6d86d25&amp;amp;chksm=eaa85631dddfdf27006a788a4101efcbab827be8ef986785a1dd91561e434e39f4859ab77bc1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Kafka 3.0新特性全面曝光，真香！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Kafka 3.0新特性全面曝光，真香！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI2NDU4OTExOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe96FK2eEg86vUicOR3n6kAHk1PHvTb8VBicYk0RmNQYsQyibgg8iaZqT0bCEU9VKo3Z3iceoQfgycyMpKWQ/0?wx_fmt=png&quot; data-nickname=&quot;云加社区&quot; data-alias=&quot;QcloudCommunity&quot; data-signature=&quot;腾讯云官方社区公众号，汇聚技术开发者群体，分享技术干货，打造技术影响力交流社区。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.59375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/VY8SELNGe977Xa5zfy5iaV3agpS11Cqm4xV7ckfbmtFLyUjFID2k7yO4q8hvB4OqYoNkARZ2xuvzKvMtnmVN2BQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b039abdd80acf9ad00022a7974cf7518</guid>
<title>想活得更久？「程序员延寿指南」已开源，收好！</title>
<link>https://toutiao.io/k/xvjb20a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Njk2NDAzMA==&amp;amp;mid=2660216765&amp;amp;idx=2&amp;amp;sn=3297f27c0bc85c7da3f6ed416b194afc&amp;amp;chksm=84bbadecb3cc24fa09b2f49a4279b1c2aeef351715deaa4d5456a205affeb92d4ce5e59b4a06&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;‍‍&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavibHVJLA1Veb2tAXpnl02QjBcWiaSWj9vUVqq42f2lQNOicxEyUB86OwrE3YovoAQTWY9eMNzz74SttQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Njk2NDAzMA==&amp;amp;mid=2660216765&amp;amp;idx=2&amp;amp;sn=3297f27c0bc85c7da3f6ed416b194afc&amp;amp;chksm=84bbadecb3cc24fa09b2f49a4279b1c2aeef351715deaa4d5456a205affeb92d4ce5e59b4a06&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;选对圈子，一切都‍对了！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;选对圈子，一切都对了！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GitHub 上真是啥都有！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;想活得更久？这份「程序员延寿指南」收好！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;术语&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;目标&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;关键结果&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;降低66.67%全因死亡率&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;增加~20年预期寿命&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;维持多巴胺于中轴&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;主要参考：对ACM的学术文献相对较多，可以作为主要参考&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;增加寿命与ACM关系非线性：显然增加寿命与ACM关系是非线性函数，这里假设 DeltaLifeSpan=(1/(1-ACM)-1)*10&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;变量无法简单叠加：显然各个变量之间并不符合独立同分布假设，变量之间的实际影响也并不明确&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;存在矛盾观点：所有的证据都有文献/研究对应，但注意到：有些文献之间有显著矛盾的观点（如对于碳水摄入比例的矛盾）；有些文献存在较大争议（如认为22点前睡觉会提升43%全因死亡率）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;研究仅表达相关：所有文献表明的更多是相关而非因果，在阅读时要考虑文献是否充分证明了因果 —— 如某文献表明了日均&amp;gt;=7000步的人有显著低的全因死亡率。但步数少的人可能包含更多长期病患，如果没有合理的排除这块数据，那此文献调查失真&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;行动&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;输入&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;固体：吃白肉（-3%~-11% ACM）、蔬果为主（-17%~-26% ACM），多吃辣（-23% ACM），多吃坚果（-4%~-27% ACM），少吃蛋黄（否则+7% ACM/0.5颗/天），中量碳水、多吃植物蛋白（-10% ACM）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;液体：喝咖啡（-12%~-22% ACM），喝牛奶（-10%~-17% ACM），喝茶（-8%~15% ACM），少喝或不喝甜味饮料（否则每天一杯+7% ACM，+多巴胺），戒酒或每周100g（纯酒精量(g)=饮酒量(ml)×酒精浓度(%)×酒精密度0.8g/ml）内（否则+~50% ACM，无上限）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;气体：不吸烟（否则+~50% ACM，-11~-12年寿命）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;光照：晒太阳（-~40% ACM）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;药物：二甲双胍（糖尿病人相比正常人可以+3年）、复合维生素（-8%癌症风险）、亚精胺（-30%~-60% ACM）、葡萄糖胺（-39% ACM）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;输出&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;上下文&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;GitHub &lt;/span&gt;&lt;span&gt;地址：&lt;/span&gt;&lt;span&gt;https://github.com/geekan/HowToLiveLonger&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;成为「码农周刊VIP会员」，做更好的开发者！&lt;/strong&gt;&lt;strong&gt;&lt;br/&gt;↓↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;318&quot; data-ratio=&quot;1.0857487922705313&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/t8lpVibticjQ6F3uclDbSh5Wo7uh5ubSztrWSpyiccyad8PsxCYRDflRhWklWl0tw96zrIeHlOlvaiatmgObzuSmnQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;828&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>913a19baef56ef2680e01a7f716ba2d0</guid>
<title>今晚发车，别说我没提醒你哦～</title>
<link>https://toutiao.io/k/n6kc8vf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;提个醒！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;第 089 期「码农周刊 VIP 会员专属邮件周报」，将于本周五晚发送。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078432&amp;amp;idx=2&amp;amp;sn=f1ba1fa5fbfbcf98a3e6f610b258cf05&amp;amp;chksm=bd2918178a5e9101b993d9e84d783562c995577cec855adf32ccb5946ff4da21fd6e89ba078e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;想邮件订阅周报？点此即刻订阅！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078432&amp;amp;idx=2&amp;amp;sn=f1ba1fa5fbfbcf98a3e6f610b258cf05&amp;amp;chksm=bd2918178a5e9101b993d9e84d783562c995577cec855adf32ccb5946ff4da21fd6e89ba078e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg wxw-img&quot; data-backh=&quot;255&quot; data-backw=&quot;453&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavibxN2ZVP72EwkSLibibWpkyHxyJ9h3jlN45cDia9gELfqK5QibDhPb4YXaryX2SQkhlwnwKlyHTuEc6Ag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;码农周刊是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;码农周刊是一份专为广大程序员、编程爱好者们打造的 IT 技术周刊。每周发送。&lt;br/&gt;2013 年 9 月 12 日创刊至今，已发送 300 多期，订阅用户超 20 万。&lt;br/&gt;&lt;span&gt;专业、简单、有用&lt;/span&gt;，是我们一直坚持的办刊宗旨。一路走来，我们见证了不少订阅用户从编程新手进阶成了高级程序员、架构师、CTO……&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2020 年 4 月，为了给用户提供更优质的服务，我们推出了「&lt;span&gt;码农周刊VIP会员&lt;/span&gt;」服务。&lt;br/&gt;&lt;strong&gt;你与 BAT 技术大牛，只差一份「码农周刊VIP会员」的距离！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;VIP会员特权&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 52 期码农周刊VIP会员&lt;span&gt;专属邮件周报&lt;/span&gt;，让你及时掌握技术动向；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 只限VIP会员加入的&lt;span&gt;交流圈子&lt;/span&gt;，让你与技术大牛切磋学习；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. VIP会员独享的&lt;span&gt;工作机会&lt;/span&gt;，为你介绍好公司的好机会；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. 更多会员特权，持续更新……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;如何加入「码农周刊VIP会员」？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 微信扫描下方二维码，加入码农周刊VIP会员知识星球。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;47&quot; data-cropselx2=&quot;438&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;527&quot; data-ratio=&quot;1.0857487922705313&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNav8VtEoYeI2aW2FrTZROXlicl84Pu8zqAqakWxWxVB1rUnmuc1ic5UdESLxvcQfRTHQDe3rFq5H02F4A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;828&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 加入码农周刊VIP会员知识星球后，客服会联系您，请留意知识星球内的私信。&lt;br/&gt;3. 客服向您发送码农周刊VIP会员欢迎邮件，开启您的码农周刊VIP会员之旅。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;心动不如行动，赶快订阅吧！&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e5bd144fb72c8b6838358db7a9c4b9d5</guid>
<title>来自TMDB的5000部电影数据集</title>
<link>https://toutiao.io/k/bylfdkg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原文：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;TMDB 5000 Movie Dataset&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;Metadata on ~5,000 movies from TMDb&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;What can we say about the success of a movie before it is released? Are there certain companies (Pixar?) that have found a consistent formula? Given that major films costing over $100 million to produce can still flop, this question is more important than ever to the industry. Film aficionados might have different interests. Can we predict which films will be highly rated, whether or not they are a commercial success?&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;This is a great place to start digging in to those questions, with data on the plot, cast, crew, budget, and revenues of several thousand films.&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We  have removed the original version of this dataset per a &lt;/span&gt;&lt;span&gt;DMCA&lt;/span&gt;&lt;span&gt; takedown request from IMDB. In order to minimize the impact, we&#x27;re replacing it with a similar set of films and data fields from &lt;/span&gt;&lt;span&gt;The Movie Database (TMDb)&lt;/span&gt;&lt;span&gt; in accordance with &lt;/span&gt;&lt;span&gt;their terms of use&lt;/span&gt;&lt;span&gt;. The bad news is that kernels built on the old dataset will most likely no longer work.&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The good news is that:&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;You can port your existing kernels over with a bit of editing. &lt;/span&gt;&lt;span&gt;This kernel&lt;/span&gt;&lt;span&gt; offers functions and examples for doing so. You can also find &lt;/span&gt;&lt;span&gt;a general introduction to the new format here&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;The new dataset contains full credits for both the cast and the crew, rather than just the first three actors.&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Actor and actresses are now listed in the order they appear in the credits. It&#x27;s unclear what ordering the original dataset used; for the movies I spot checked it didn&#x27;t line up with either the credits order or IMDB&#x27;s stars order.&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;The revenues appear to be more current. For example, IMDB&#x27;s figures for Avatar seem to be from 2010 and understate the film&#x27;s global revenues by over $2 billion.&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Some of the movies that we weren&#x27;t able to port over (a couple of hundred) were just bad entries. For example, &lt;/span&gt;&lt;span&gt;this IMDB entry&lt;/span&gt;&lt;span&gt; has basically no accurate information at all. It lists Star Wars Episode VII as a documentary.&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Data Source Transfer Details&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Several of the new columns contain json. You can save a bit of time by porting the load data functions [from this kernel]().&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Even in simple fields like runtime may not be consistent across versions. For example, previous dataset shows the duration for Avatar&#x27;s extended cut while TMDB shows the time for the original version.&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;There&#x27;s now a separate file containing the full credits for both the cast and crew.&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;All fields are filled out by users so don&#x27;t expect them to agree on keywords, genres, ratings, or the like.&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Your existing kernels will continue to render normally until they are re-run.&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;If you are curious about how this dataset was prepared, the code to access TMDb&#x27;s API is posted &lt;/span&gt;&lt;span&gt;here&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;New columns:&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;homepage&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;id&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;original_title&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;overview&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;popularity&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;production_companies&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;production_countries&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;release_date&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;spoken_languages&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;status&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;tagline&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;vote_average&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Lost columns:&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;actor&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;facebook_likes&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;actor&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;facebook_likes&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;actor&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;facebook_likes&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;aspect_ratio&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;cast&lt;/span&gt;&lt;span&gt;total&lt;/span&gt;&lt;span&gt;facebook_likes&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;color&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;content_rating&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;director&lt;/span&gt;&lt;span&gt;facebook&lt;/span&gt;&lt;span&gt;likes&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;facenumber&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt;poster&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;movie&lt;/span&gt;&lt;span&gt;facebook&lt;/span&gt;&lt;span&gt;likes&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;movie&lt;/span&gt;&lt;span&gt;imdb&lt;/span&gt;&lt;span&gt;link&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;critic&lt;/span&gt;&lt;span&gt;for_reviews&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;for_reviews&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;译：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;TMDB 5000电影数据集&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;来自TMDb的约5000部电影的元数据&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在一部电影上映之前，我们能对它的成功说些什么呢？是否有某些公司（皮克斯？）找到了一致的公式？鉴于制作成本超过1亿美元的大型电影仍可能失败，这个问题对电影业来说比以往任何时候都更重要。电影迷可能有不同的兴趣。我们能否预测哪些电影会获得高评价，无论它们是否在商业上取得成功？&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是一个开始深入研究这些问题的好地方，有几千部电影的情节、演员阵容、工作人员、预算和收入的数据。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;已根据IMDB的DMCA删除请求删除了该数据集的原始版本。为了将影响降至最低，我们根据电影数据库（TMDb）的使用条款，将其替换为一组类似的电影和数据字段。坏消息是，基于旧数据集构建的内核很可能不再工作。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好消息是：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;● 您可以通过一些编辑来移植现有内核。这个内核提供了相关函数和示例。你也可以在这里找到新格式的一般介绍。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;● 新的数据集包含演员和剧组的全部学分，而不仅仅是前三名演员。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;● 男演员和女演员现在按他们在演员名单中出现的顺序排列。目前尚不清楚原始数据集使用了什么顺序；对于我抽查的电影，它既不符合信用卡订单，也不符合IMDB的明星订单。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;● 收入似乎更具流动性。例如，IMDB关于《阿凡达》的数据似乎是从2010年开始的，并且低估了这部电影的全球收入超过20亿美元。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;● 有些我们没能搬过去的电影（几百部）只是糟糕的作品。例如，这个IMDB条目基本上没有准确的信息。它将《星球大战》第七集列为纪录片。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据源传输详细信息&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;● 几个新列包含json。通过[从这个内核]（）移植load data函数，可以节省一些时间。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;● 即使在运行时这样的简单字段中，各版本之间也可能不一致。例如，之前的数据集显示了《阿凡达》延长剪辑的持续时间，而TMDB显示了原始版本的时间。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;● 现在有一个单独的文件，包含演员和工作人员的全部学分。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;● 所有字段都由用户填写，所以不要期望他们在关键词、类型、评分等方面达成一致。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;● 现有内核将继续正常渲染，直到重新运行。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;● 如果您对这个数据集是如何准备的感到好奇，可以在这里发布访问TMDb API的代码。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;新增字段：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;homepage&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;id&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;original_title&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;overview&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;popularity&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;production_companies&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;production_countries&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;release_date&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;spoken_languages&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;status&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;tagline&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;vote_average&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Lost columns:&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;actor&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;facebook_likes&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;actor&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;facebook_likes&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;actor&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;facebook_likes&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;aspect_ratio&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;cast&lt;/span&gt;&lt;span&gt;total&lt;/span&gt;&lt;span&gt;facebook_likes&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;color&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;content_rating&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;director&lt;/span&gt;&lt;span&gt;facebook&lt;/span&gt;&lt;span&gt;likes&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;facenumber&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt;poster&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;movie&lt;/span&gt;&lt;span&gt;facebook&lt;/span&gt;&lt;span&gt;likes&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;movie&lt;/span&gt;&lt;span&gt;imdb&lt;/span&gt;&lt;span&gt;link&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;critic&lt;/span&gt;&lt;span&gt;for_reviews&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;for_reviews&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下载链接：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;链接：https://pan.baidu.com/s/10e-TY5I30eQB_Oosm1lDMA &lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;提取码：lj0u &lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>