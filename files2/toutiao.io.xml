<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f2714a6e862ac70abccad2990f481e92</guid>
<title>成为更好的开发者！行动起来！</title>
<link>https://toutiao.io/k/bcodelm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c3be80313559b0a4830ea317b3a2b32a</guid>
<title>架构师如何选型分布式业务网关</title>
<link>https://toutiao.io/k/enmg99d</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在日常工作中，不同的场合下，我们可能都会听说网关的概念，当然通常是指业务网关（API网关），负责API的输入和输出。有了业务网关之后，各个API服务提供者可以专注于自己的业务逻辑处理，而API网关更专注于安全、流量、路由等问题。从功能层次我们又会联想到一个概念——代理。网关与代理的区别：代理本质是数据的透传，协议不会发生变化；网关在数据透传的背景下，还会涉及协议的转换，比如从HTTP到Dubbo。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;那么作为一名架构师，我们该如何选型“业务网关”呢？我们自己先要学会做技术选型，自己预期有一个技术成本的预判，比如我推荐使用Spring Cloud Alibaba+Spring Gateway，就是我自己作为一个架构师的技术预判。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Zuul&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Zuul是Netflix开源的微服务网关，可以和Eureka、Ribbon、Hystrix等组件配合使用，Spring Cloud对Zuul进行了整合与增强，Zuul总共有两个大的版本：Zuul1.0和Zuul2.0，目前最新的版本为v2.2.0，Zuul1.0和Zuul2.0版本之间功能差异性非常大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Netflix的Zuul包含如下功能：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;身份认证与安全：&lt;/span&gt;&lt;span&gt;识别每个资源的验证要求，并拒绝那些与要求不符的请求；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;审查与监控：在边缘位置追踪有意义的数据和统计结果；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;动态路由：&lt;/span&gt;&lt;span&gt;动态地将请求路由到不同的后端集群；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;压力测试&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;逐渐增加指向集群的流量，以了解性能；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;负载分配：&lt;/span&gt;&lt;span&gt;为每一种负载类型分配对应容量&lt;/span&gt;&lt;span&gt;，并弃用超出限定值的请求&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;静态响应处理：在边缘位置直接建立部分响应，从而避免其转发到内部集群；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;多区域弹性：&lt;/span&gt;&lt;span&gt;跨越AWS &lt;/span&gt;&lt;span&gt;Region进行请求路由，旨在实现ELB（Elastic Load Balancing）使用的多样化和&lt;/span&gt;&lt;span&gt;以及让系统的边缘更贴近系统的使用者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;以上介绍来自Zuul官方文档，但其实开源版本的Zuul以上功能一个都没有——开源的Zuul只是几个Jar包而已，以上能力指的应该是Netflix官方自用的Zuul的能力；Netflix自用的Zuul能力是比较强大的，可使用Groovy编写过滤器，并且可动态加载/卸载、修改规则，而且使用Cassandra作为数据库，然而开源版本这些一个都没有；Spring Cloud中，Zuul绝大部分功能都是Spring Cloud团队为Zuul开发的；所以Zuul 2.x的开源进度延后一年，Spring Cloud团队开发了自己的SCG，并宣布Spring Cloud不打算支持Zuul 2.x，你还觉得意外吗？看到这里，很多人可能没有动力学习Zuul了，个人认为还是可以了解一下的，后面讲到SCG时，你会发现很多设计理念是相通的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;既然说到了Spring Cloud对Zuul的封装，那么我们来简单的分析下Spring Cloud与Zuul的关系。Spring Cloud通过Spring Cloud Netflix 1.X来封装Zuul1.0，1.X的最后一个版本是v1.4.7.RELEASE，对应的Zuul版本是1.3.1。Spring Cloud Netflix从3.X开始就没有封装Zuul网关，包括Zuul1.0和Zuul2.0，也就是说开发者想要通过Spring Cloud来复用Zuul，只能使用Zuul1.0，暂时不能复用Zuul2.0。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Zuul目前在github上的star数为10.2k，fork数为2k，也就是说还是有很多开源爱好者会基于Zuul来定制化业务网关。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了开源的Spring Cloud定制化Zuul，开源微服务框架jhipster也参与了定制，并集成到它的生态中。Jhipster主要包含generator-jhipster和jhipster-registry，前者star数微17.7k，fork数为3.5k，后者star数为604，fork为607。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Zuul1.0整体架构设计如图所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7104377104377104&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwyWT6MTWtPib6eKFUI9D02lCqb1SicPrjI8bzZZFdZz2t6USvVP17Akn6veAmiaBvmanamgadXJSjsZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;594&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Zuul2.0整体架构设计如图所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6771929824561403&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwyWT6MTWtPib6eKFUI9D02lC4HskII7icXnrOakI3f1qYqrpW5vsvjfUT2LYRXWPIaCvxkFCoctliaIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;570&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Spring Cloud Gateway&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SCG是基于Spring Framework 5.0和Spring Boot 2.0构建的API网关，提供路由等功能。其旨在提供一种简单而有效的方法路由到API，并为它们提供跨领域的关注点，例如：安全性、监视/指标和弹性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主要特性：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;J&lt;/span&gt;&lt;span&gt;ava8&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Spring Framework5&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Spring Boot2&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;动态路由&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Spring Handler Mapping&lt;/span&gt;&lt;span&gt;内置的路由匹配&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;HTTP&lt;/span&gt;&lt;span&gt;请求的路由匹配（路径、方法、&lt;/span&gt;&lt;span&gt;Hea&lt;/span&gt;&lt;span&gt;der&lt;/span&gt;&lt;span&gt;、主机等）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;过滤器限定范围以匹配路由&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;过滤器可以修改下游&lt;/span&gt;&lt;span&gt;HTTP&lt;/span&gt;&lt;span&gt;请求和&lt;/span&gt;&lt;span&gt;HTTP&lt;/span&gt;&lt;span&gt;响应（添加、删除&lt;/span&gt;&lt;span&gt;Header&lt;/span&gt;&lt;span&gt;、添加&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;删除参数、重写路径、设置路径等）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;API或配置驱动&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持Spring Cloud Discovery Client配置路由&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SCG的专业术语包括：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;路由：它是基本构建模块，主要包含ID、URI、断言集合以及过滤器集合，如果能够匹配断言就会执行路由；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;断言：&lt;/span&gt;&lt;span&gt;主要是指Java8的函数式断言，输入类型是Spring Framework的ServerWebExchange，基于断言可以匹配基于headers或者parameters的http请求；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;过滤器：&lt;/span&gt;&lt;span&gt;它是通过特殊的工厂方法构造的基于Spring Framework GatewayFilter的实现，通过过滤器开发者可以在http请求下行之前修改请求响应参数，在请求响应返回之后可以修改响应的结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;SCG整体架构设计如图所示。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7508896797153025&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwyWT6MTWtPib6eKFUI9D02lCM4JFeJpgVrodhL3nEt9ibS4l0C0ibwoKp5BgbAAMhWiakpSlzaQKneq2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;562&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;自研网关&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个API网关的基本功能包括统一接入、协议适配、流量管控与容错，以及安全防护，这个四大基本功能构成了网关的核心能力。网关首要的功能是负责统一接入，然后将请求的协议转换成内部的接口协议，在调用的过程中还要限流、降级和熔断等容错的方式来保护网关的整体稳定，同时网关还要做到基本的安全防护（防刷控制），以及黑白名单（比如IP地址白名单）等基本的安全措施，主要包括：统一标准接入，具备高性能、高并发和高可靠性，具备负载均衡的能力；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5185185185185185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwyWT6MTWtPib6eKFUI9D02lCKumL0Y3CqMic3uclBq11OK1SLz0nbSyibVYOfVuYq5t2Z28bhkx8Odew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;486&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了基本的四个功能，网关运行良好的环境还包括注册中心（比如通过Nacos读取已经发布的API接口的动态配置）。为了实现高性能，将数据全部异构到缓存（比如Redis）中，同时还可以配合本机缓存来进一步的提高网关系统的性能。为了提高网关的吞吐率，可以使用NIO+Servlet3异步的方式，还可以利用Servlet3的异步特性将请求线程与业务处理线程分开，为后续的线程池隔离做好基本的支撑。访问日志的存储我们可以放到Hbase或者ES中，如果要作为开放网关使用，那么需要一个支持OAuth2.0协议的授权中心，同时还可以引入Nginx+Lua的方式，将一些基本的校验判断前置到应用系统之上，这样可以更加轻量级的处理网关接入的问题。&lt;/span&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7288135593220338&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwyWT6MTWtPib6eKFUI9D02lC95FriaJKLRcKeuhXcBrfGIfbbeJtI05ic4Tx5VmzqcfRHfty44O5iaL8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;590&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主要包括接入层，开发者可以通过Nginx和Lua脚本，解决限流、黑白名单、路由、负载均衡、长短连接以及容灾切换的问题。网关需要保证服务的稳定性，需要接入注册中心，因为本书是Spring Cloud Alibaba的布道书籍，所以强烈推荐使用Nacos作为注册中心和配置中心。统一的鉴权中心，主要是统一解决网关为各个API服务的鉴权问题，当然可以按照服务维度做隔离，自定义鉴权规则。统一用户中心主要是解决用户登录问题，确保微服务调用的安全性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;自研网关还需要有泛化功能，使用者在调用提供者的接口的时候，不再需要API提供者的客户端JAR包，因此也就没有了POJO，通过泛化的方式进行远程调用。一般情况下我们要通过RPC调用接口提供方的服务，首先在系统中嵌入接口提供者的JAR包，然后使用JAR包里面的类和方法。对于一个网关系统来说，如果要调用N个接口，就需要N个JAR包，这样的网关是很难维护的，当然Dubbo RPC是支持泛化的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;网关要具备时间校验、方法校验、版本校验和签名校验等功能，当然网关还需要具备服务降级、日志记录以及监控与告警功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;对比以上三种网关&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;网关&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;限流&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;鉴权&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;监控&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;易用性&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;可维护性&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;成熟度&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;SCG&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;可以通过IP，用户，集群限流，提供了相应的接口进行扩展&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;普通鉴权auth2.0&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Gateway Metrics Filter&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;简单易用&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Spring系列可扩展强，易配置和可维护性好&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Spring社区成熟，但Gateway资源少。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Zuul2&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;可以通过配置文件配置集群限流和单服务器限流，也可以通过filter实现限流扩展&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;filter中实现&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Filter中实现&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;参考资料比较少&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;可维护性差&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;开源不就资源少。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Zuul1&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;同上&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;同上&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;同上&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;同上&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;同上&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;同上&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;自研网关&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;需要开发&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;需要开发&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;需要开发&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;需要开发&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;可维护性极高&lt;/span&gt;&lt;span lang=&quot;ZH-CN&quot;&gt;&lt;span/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;需要开发&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐使用Spring Cloud Alibaba+Spring Cloud Gateway，可以更加高效的利用Spring Cloud ALibaba的服务治理能力去融合网关API的治理，从而提升业务服务API的系统稳定性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fbf6a25cadb535221e74ec06eee88645</guid>
<title>结合最近的感受谈谈《原则》和《浪潮之巅》给我的启示</title>
<link>https://toutiao.io/k/tkb15br</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;《原则》和《浪潮之巅》我很多年前看过，虽然不是技术书，却是程序员界的经典名著。推荐有时间时去看一下。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6392785571142284&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRliccdk0hxtiax7HDgkAoibyVrEAMKV7Yvf2UCNyfeD38oaah4ZEYAJiaweVicLV8wTGzptwFtwEJWElWZg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;998&quot;/&gt;&lt;/p&gt;&lt;p&gt;我在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485046&amp;amp;idx=2&amp;amp;sn=afcb67fa121782b101a59e7b3f28250c&amp;amp;chksm=fafdecd8cd8a65cef8ba549f4cb9e3eff6457da609871fa21e7eb1ac163511d06062ab3a5941&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《三言|比做什么事更重要的是找对做事的人》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《三言|比做什么事更重要的是找对做事的人》&lt;/a&gt;中还引用了《原则》里的名言：痛苦+反思=进步。在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484659&amp;amp;idx=1&amp;amp;sn=42b7296d0e53a7c181aca4aa47d47718&amp;amp;chksm=fafdee5dcd8a674b16c55f18068b25071eb312ae820f6cad4ac0013e4e7366ff8d4ec182ebf1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《技术境界的二三四》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《技术境界的二三四》&lt;/a&gt;中，我还对《浪潮之巅》的模式做过总结。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;昨天凌晨，我友情转发了一个朋友的文章。朋友说帮他发了这个他才能拿到授权，他急需用。这个朋友是我上周末认识的，是公众号的粉丝，之前因为入咱们用户群加了微信，也是老用户了。我知道帮这个忙会大量流失用户，结果也是果不其然。但是我仍然坚持自己是对的。因为做人要有原则，义气比自己的得失重要，这是我做人的原则。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这让我想起《原则》这本书，我对书中记忆最深的是人要坚持自己的道德标准，这样才能成大事。我倒不是想成什么大事，但是我深切知道一个道理：周围的人都否定我、不认可我做的事，虽然是一件很伤心的事情。却没有自己否定自己更难受。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;马云说：“任何团队的核心骨干，都必须学会在没有鼓励，没有认可，没有帮助，没有理解，没有宽容，没有退路，只有压力的情况下，一起和团队获得胜利。成功，只有一个定义，就是对结果负责。如果你靠别人的鼓励才能发光，你最多算个灯泡。我们必须成为发动机，去影响其他人发光，你自然就是核心！”&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;自己在做什么，别人一个月、两个月、一年、两年不理解没有关系。自己在沿着自己规划的路线走，有自己的坚持，只要有希望，每天都是可以笑着对面对。但是放弃了自己的原则，一定不会成功。而且做什么都会差些运气。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我还挣扎在这一步。经常幻想着到达《浪潮之巅》里的境界：坚持自己的原则与理念，终于成功的登上了浪潮之巅。坚守的原则成为了公司的基因，禁锢了公司跟随时代发展的脚步，被滚滚后浪淹没。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;也许这一天永远不会到来，但是在这一天来临之前，一定要固守好自己的原则。因为有原则，就有希望。&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1ec0133bb9cb3e6d01801aa4ef5f30f6</guid>
<title>最常用的架构模式</title>
<link>https://toutiao.io/k/qnfl3t6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;
      
      
      
      
      &lt;blockquote&gt;
&lt;p&gt;观其设计知其人&lt;/p&gt;
&lt;p&gt;A MAN is KNOWN by the DESIGN he keeps&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文:&lt;a href=&quot;https://shadman-jamil.medium.com/most-useful-software-architecture-patterns-68e171405292&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Most Useful Software Architecture Patterns&lt;/a&gt; by Shadman Jamil&lt;/p&gt;
&lt;a id=&quot;more&quot;/&gt;
&lt;p&gt;&lt;img src=&quot;Software-Architecture.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;分层模式_(Layered_Pattern_(n-tier))&quot;&gt;分层模式 (Layered Pattern (n-tier))&lt;/h2&gt;
&lt;p&gt;分层架构模式是最常见的模式之一。分层模式背后的理念是，具有相同功能的组件将被组织成水平层。因此，每一层在应用程序中都扮演着特定的角色。&lt;/p&gt;
&lt;p&gt;在这种模式中，我们对应用程序可以拥有的层数没有限制。在这方面，我们还提倡关注点分离的概念。分层模式风格抽象了整个软件的视图；同时提供足够的细节，以了解各个层的角色和职责以及它们之间的关系。分层模式的典型实现如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UI展示层(&lt;strong&gt;UI / Presentation Layer&lt;/strong&gt;): 渲染并运行用户界面，向服务器应用程序发送请求。&lt;/li&gt;
&lt;li&gt;应用层(&lt;strong&gt;Application Layer&lt;/strong&gt;): 包含表示层、应用程序层、域对象层和持久化层。&lt;/li&gt;
&lt;li&gt;域对象层/业务层(&lt;strong&gt;Domain / Business Layer&lt;/strong&gt;): 该层包含所有业务逻辑、实体、事件和其他包含业务逻辑的对象类型。&lt;/li&gt;
&lt;li&gt;数据库层(&lt;strong&gt;Database Layer&lt;/strong&gt;): 这是数据层，用于持久化数据，应用服务器将使用这些数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;layers.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;: 桌面应用程序、电子商务、web应用程序等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考例子： &lt;a href=&quot;https://github.com/bxcodec/go-clean-arch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;go-clean-arch&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;客户端-服务器模式_(Client-Server_Pattern)&quot;&gt;客户端-服务器模式 (Client-Server Pattern)&lt;/h2&gt;
&lt;p&gt;这是最简单的架构模式，由一台服务器和多个客户端组成。这种模式是一种分布式架构，在资源/服务的提供者（称为服务器）和服务请求者（称为客户端）之间划分任务/工作负载。&lt;/p&gt;
&lt;p&gt;在客户端-服务器模式中，当客户端向服务器发送数据请求时，服务器接受请求的进程，并向客户机发送所需的数据。客户不共享他们的任何资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;client-server.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;: Email、文档共享、银行等&lt;/p&gt;
&lt;h2 id=&quot;事件总线模式_(Event-Bus_Pattern_(Event-Driven_Architecture))&quot;&gt;事件总线模式 (Event-Bus Pattern (Event-Driven Architecture))&lt;/h2&gt;
&lt;p&gt;该模式是一种分布式异步体系架构模式，用于创建高度可扩展的响应式应用程序。适用于从小型到复杂的各级应用程序技术栈。此模式的主要思想是异步传递和处理事件。&lt;/p&gt;
&lt;p&gt;这个模式包含四个组件:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事件源(Event Source)&lt;/li&gt;
&lt;li&gt;事件监听器(Event Listener)&lt;/li&gt;
&lt;li&gt;通道(Channel)&lt;/li&gt;
&lt;li&gt;事件总线(Event Bus)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;源将消息发布到事件总线上的特定通道。监听器订阅特定的频道，监听器可以获取发布到其订阅的频道的消息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;event-source.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;: 电子商务、手机应用程序、通知服务等&lt;/p&gt;
&lt;h2 id=&quot;代理人模式(Broker_Pattern)&quot;&gt;代理人模式(Broker Pattern)&lt;/h2&gt;
&lt;p&gt;此模式可用于构造具有通过远程服务调用进行交互的解耦组件的分布式系统。代理组件负责协调组件之间的通信；例如转发请求，以及传输结果和异常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务器&lt;/strong&gt;将其能力（服务和特性）发布给&lt;strong&gt;代理&lt;/strong&gt;(Broker)。&lt;strong&gt;客户端&lt;/strong&gt;向&lt;strong&gt;代理&lt;/strong&gt;请求服务，然后&lt;strong&gt;代理&lt;/strong&gt;将&lt;strong&gt;客户端&lt;/strong&gt;的请求重定向到合适的服务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;broker.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;: 消息Broker程序，如Apache ActiveMQ、Apache Kafka、RabbitMQ、JBOSS Messaging等&lt;/p&gt;
&lt;h2 id=&quot;微服务模式_(Microservices_Pattern)&quot;&gt;微服务模式 (Microservices Pattern)&lt;/h2&gt;
&lt;p&gt;在这种模式中，服务通过使用HTTP/REST等同步协议或AMQP（高级消息队列协议）等异步协议进行通信。服务可以独立开发和部署，每个服务都有自己的数据库。服务之间的数据一致性是通过使用Saga模式（一系列本地事务）来维护的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;microservices.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;: 可以在许多用例上实现，尤其是广泛的数据管道处理上&lt;/p&gt;
&lt;h2 id=&quot;点对点模式_(Peer-to-Peer_Pattern)&quot;&gt;点对点模式 (Peer-to-Peer Pattern)&lt;/h2&gt;
&lt;p&gt;在通用客户端-服务器体系架构中，多个客户端与中央服务器通信。但P2P模式由分散的对等网络组成。&lt;/p&gt;
&lt;p&gt;在这种模式中，节点的行为类似于客户端和服务器。对等点既可以作为客户端向其他对等点请求服务，也可以作为服务器向其他对等点提供服务。&lt;/p&gt;
&lt;p&gt;P2P网络在节点之间分配工作负载，所有节点贡献并消耗网络中的资源，而不需要集中的服务器。对等方可能会随着时间动态地改变其角色。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;peer-2-peer.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;: 文件分享网络、多媒体协议PDTP,P2PTV、比特币、区块链等&lt;/p&gt;
&lt;h2 id=&quot;黑板模式(Blackboard_Pattern)&quot;&gt;黑板模式(Blackboard Pattern)&lt;/h2&gt;
&lt;p&gt;这种模式对于不知道确定性解决方案策略的问题很有用。&lt;/p&gt;
&lt;p&gt;所有部件都可以接触到黑板。组件可能会产生新的数据对象，这些对象将被添加到黑板上。组件在黑板上寻找特定类型的数据，并通过与现有知识源的模式匹配找到这些数据。&lt;/p&gt;
&lt;p&gt;这个模式包含三个组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;黑板(blackboard): 含解决方案空间中的对象的结构化全局内存&lt;/li&gt;
&lt;li&gt;知识源(knowledge source:):具有自己表示形式的专用模块&lt;/li&gt;
&lt;li&gt;控制组件(control component):选择、配置和执行模块。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;blackboard.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;: 速度识别、蛋白质结构识别、声纳信号解释、机器学习程序等。&lt;/p&gt;
&lt;h2 id=&quot;组件模式_(Component-based_Pattern)&quot;&gt;组件模式 (Component-based Pattern)&lt;/h2&gt;
&lt;p&gt;基于组件的软件工程（Component-based software engineering，简称CBSE）或基于组件的开发（Component-Based Development，简称CBD）是针对系统的广泛功能，进行关注点分离的软件工程方式。此方式是以复用为基础的作法，定义、实现许多松耦合的独立组件（Component），再将组件组合成为系统。此作法的目的是希望在软件本身的短期益处以及开发软件组织的长期益处之间获取平衡。&lt;/p&gt;
&lt;p&gt;一旦组件进行了划分，可以将组件分布式的开发部署，就会演化成面向服务或者微服务的架构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;component-based.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;: 常见大型项目中或者单个服务中。&lt;/p&gt;
&lt;h2 id=&quot;管道模式_(Pipes_和_filters)&quot;&gt;管道模式 (Pipes 和 filters)&lt;/h2&gt;
&lt;p&gt;管道(pipeline)由一系列处理元素（进程、线程、协同程序、函数等）组成，每个元素的输出都是下一个元素的输入；这个名字类似于一个物理管道。通常在连续元素之间提供一定量的缓冲。在这些管道中流动的信息通常是记录流、字节流或比特流，管道中的元素可以称为过滤器(filter)；这也称为管道和过滤器设计模式。将元素连接到管道中类似于函数合成。&lt;/p&gt;
&lt;p&gt;管道模式可以将数据的处理解耦，并且可以动态的增加或者删除特定的处理流程。每个处理单元可以结合下面插件模式，实现定制化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;pipeline.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;: 多任务操作系统、数据处理程序等。&lt;/p&gt;
&lt;h2 id=&quot;插件模式&quot;&gt;插件模式&lt;/h2&gt;
&lt;p&gt;在计算技术中，插件（或插件、外接程序、外接程序、外接程序或外接程序）是一种软件组件，用于向现有计算机程序添加特定功能。当程序支持插件时，它会启用自定义功能。&lt;/p&gt;
&lt;p&gt;插件模式可以方便对程序进行扩展，以及动态实现功能的开启和禁用等功能，方便进行定制化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;plugin.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;: IDE程序如Eclipse，IDEA Intellj、网络应用程序入netty等。&lt;/p&gt;

      
    &lt;/div&gt;
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>28a5dd21b20a62f28bf38d81ab826fab</guid>
<title>基于Web内核的微信小程序框架实践</title>
<link>https://toutiao.io/k/zusq063</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在正式进入分享之前，简单介绍一下做这个小程序新框架的背景思路，主要目的有以下几点：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;新框架&lt;strong&gt;和微信的主客户端解耦&lt;/strong&gt;，能够独立运行，并且可以同时支持小程序和小游戏。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;新框架能去&lt;strong&gt;拥抱更多的Web特性&lt;/strong&gt;，深入到Chromium内核中，去&lt;strong&gt;支持更多平台&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;还有一个目的就是，通过新框架去&lt;strong&gt;拓宽小程序生态的边界&lt;/strong&gt;，能够在许多非移动端设备，提供微信小程序生态。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1 小程序和PWA&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;首先来了解一下小程序和PWA，可以说小程序设计之初，还是吸收了很多Web特性，这也使得小程序和PWA应用的用户体验很接近，包括技术特点也有很多相似的地方。所以关于小程序和PWA的讨论也非常多，接下来会从框架的角度入手，来对比一下小程序和PWA的相关特点。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.1 小程序框架简介&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7953271028037383&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3tcKTvAbPlNVttpmhkdmtqV6xY0lNXVUtJxaGrPTLlBU2oX8Sp4UicO2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1070&quot;/&gt;&lt;/p&gt;&lt;p&gt;上面这个图，是移动端小程序的框架，它主要由三部分组成，分别是视图层，逻辑层和JS绑定。其中：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;视图层&lt;/strong&gt;，用来展示用户的UI，通过Web内核的WebPage来进行展示。 &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;逻辑层&lt;/strong&gt;，运行开发者代码，在一个独立的JS线程环境中，这个JS环境在Android是独立的V8提供的，iOS上是JSCore 。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;JSAPI&lt;/strong&gt;，都是通过JS绑定，将平台和微信相关的能力暴露给逻辑层，从而给开发者提供相应的JSAPI接口。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;setData&lt;/strong&gt;，传输视图层和逻辑层的数据。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.2 PWA简介&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8229284903518729&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3thg7AsjW0ibaGdUbF1gfLEsZ9XakCRBLIGawicB7LUTbtptQSo7xfkgRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;881&quot;/&gt;&lt;/p&gt;&lt;p&gt;上面这个图，是一个PWA架构的简图，在这里我们可以看到：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;PWA的运行环境，是一个完整的Web内核。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;：类似小程序的视图层，运行在Web内核的Render线程，可以执行JS。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;sw.js&lt;/strong&gt;：类似小程序的逻辑层，运行在Web内核的ServiceWorker线程，管理PWA的生命周期。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;JSAPI&lt;/strong&gt;：Web内核通过WebIDL绑定的方式，将底层能力暴露出来。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;postMessage&lt;/strong&gt;：用于给ServiceWorker线程和Render线程提供通信能力，性能非常好，支持Transferable 对象传输。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.3 小程序和PWA对比&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;通过上文的介绍，可以看到小程序和PWA的主体上都是双线程架构的模型，但是有区别的是：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;视图层：PWA可以执行JSAPI，小程序不行。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;逻辑层：&lt;strong&gt;PWA&lt;/strong&gt;的JSRuntime是Web内核提供的，&lt;strong&gt;不再需要独立的V8&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;JS绑定: PWA的接口都是标准的H5能力，通过WebIDL绑定，小程序是微信相关接口能力，独立绑定。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;另外就是，PWA的应用开发者拥有完全的代码控制能力，但是&lt;strong&gt;小程序为了保护微信相关数据安全，都会让开发者代码运行在一个沙箱环境上。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong/&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.4 向PW&lt;/strong&gt;&lt;strong&gt;A学习&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.862937062937063&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3t9UhI2jTej9aKyaVbt3T8NAS5icPQjKBfFLf5o19VhrXBJ4YYw0hu9xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;715&quot;/&gt;&lt;/p&gt;&lt;p&gt;PWA的优点非常多，非常值得小程序学习，其中有几点：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Service Worker线程&lt;/strong&gt;，非常轻量，&lt;strong&gt;不再需要额外的V8环境&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;PostMessage&lt;/strong&gt;：支持结构化Clone和Transable对象传输，&lt;strong&gt;性能非常高&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;PWA还拥有非常&lt;strong&gt;丰富的H5 API&lt;/strong&gt;，比如Canvas、WebSocket等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;PWA拥有Chrome Devtools的Inspector能力，非常方便进行调试。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这些特点都能提高整个小程序的运行性能，同时还能降低框架的开发维护成本。所以在设计新的小程序框架的时候，我们希望能够吸收PWA的优点，同时能够灵活满足自己业务的需要。这样就需要&lt;strong&gt;深入Web内核中做一些修改和定制&lt;/strong&gt;，来实现一个符合业务需求的小程序框架。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 基于Chromium内核的小程序框架&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.1 整体框架&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;先来看一下新框架最终的架构图，这个图其实和PWA的架构很接近，运行环境是在Chromium内核的基础上。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5736079328756675&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3tpyibpZH5BdhxYc25d80TAIxXQAwtqvNQdrT8INok4vkImJ0rThkenaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1311&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;视图层&lt;/strong&gt;：是Chromium内核的Render线程，用来渲染Page页面&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;逻辑层&lt;/strong&gt;：是修改Chromium内核，&lt;strong&gt;实现自定义的XWeb Worker线程，这样就不再需要额外的V8了。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;JSAPI&lt;/strong&gt;：通过&lt;strong&gt;给逻辑层,集成Node&lt;/strong&gt;,使得JSAPI 能力由 H5 API和 Node API 以及 Node扩展接口支持.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;PostMessage&lt;/strong&gt;: 由于是基于Chromium内核的Worker线程，所以关于数据通信这块，很自然的也会拥有PostMessage的能力，来替代原有的setData。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;这里修改Chromium内核，是存在几个挑战点的：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;如何在Chromium中增加&lt;strong&gt;自定义的Web Worker线程&lt;/strong&gt;，作为小程序的逻辑层。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如何&lt;strong&gt;给Chromium集成Node&lt;/strong&gt;，用来扩展小程序的JSAPI。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如何&lt;strong&gt;给Web Worker增加沙箱能力&lt;/strong&gt;，确保微信环境的数据安全。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;接下来将详细介绍，我们如何解决这些问题的。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.2 自定义XWeb Worker线程&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;那么如何设计XWeb Worker的线程，从以下两个分析点入手：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分析Chromium中Web Workers实现类。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分析Chromium中Web Workers的创建流程。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这里需要解决的核心问题包括两个，一个是运行环境问题、另一个就是运行线程的问题。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.47792408985282725&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3tn793hib84qvmJ8fGY5yrwYXU0CQ5IS36nrichBKGLgtxialfzn4IIoLYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1291&quot;/&gt;&lt;/p&gt;&lt;p&gt;通过上图可以看到所有的Web workers的运行环境实现其父类都是 WorkerGlobalScope 对象，提供了基本的JS运行环境， 因此我们XWebWorker运行环境的实现同样继承自该类。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后我们参考Chromium中关于SharedWorker的实现，设计了我们XWebWorker。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2995535714285714&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3t2y9FYL4roC3wuvoia83wibySaNuSmjdwvphJq8V6rGBJbwpXlKicIU50g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2240&quot;/&gt;&lt;/p&gt;&lt;p&gt;通过上面这个流程图，可以看到：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;WorkerGlobalScope对象的创建流程首先是由JS在Render进程发起。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;接着调到Browser进程，在Browser进程完成加载资源、构建依赖对象等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;接下来创建请求会再次回到Render进程进行真正的创建，这时就会创建Worker线程以及WorkerGlobalScope对象。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;参考上面这个流程，实现自定义的XWeb Worker，这样就可以&lt;strong&gt;共享Chromium内核的V8，不再需要额外JS运行环境&lt;/strong&gt;。同时我们可以复用更多的H5 API的接口能力，以及&lt;strong&gt;PostMessage的高性能通信能力&lt;/strong&gt;。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.3 集成Node，支持JSAPI&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;由于Chromium内核本身没有提供JS绑定的能力，这样也不方便我们灵活扩展JS接口，所以在这里参考了electron的思路，将node融合Chromium内核中。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6602564102564102&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3tYswEYTfJoUy0OGuzicsdPKFd9lWKnKMHWiaZep9phSg2zfjcjVDrhibnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;780&quot;/&gt;&lt;/p&gt;&lt;p&gt;这里将Node融合到Chromium内核，最大的困难在于消息循环的融合：&lt;/p&gt;&lt;p&gt;&lt;span&gt;electron非常巧妙的利用epoll事件机制，通过独立线程轮询backend fd，将libuv融入Chromium的message loop，从而避免了大量修改Chromium内核的代码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;大家如果对这个原理感兴趣,可以深入阅读一下《Electron Internals: Message Loop Integration》这篇文章。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;成功融合Node之后的Chromium内核，将&lt;strong&gt;共用同一个V8&lt;/strong&gt;，而且在逻辑端，也会拥有非常丰富的JSAPI 能力：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;在XWeb Worker中可以使用丰富的&lt;strong&gt;H5 API能力&lt;/strong&gt;。比如PostMessage，WebSocket还有offscreen Canvas 等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;同时我们也会拥有&lt;strong&gt;Node相关的API能力&lt;/strong&gt;，比如file的读写 http相关接口等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果业务有需求变更的话，可以通过 &lt;strong&gt;node 的 addon模块&lt;/strong&gt;来增加我们自己的JSAPI能力&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6259220231822972&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3txQBMPS6V8hic8IJib36sPjg01OUZO1jDlBUpXsUVQ9QY3MXWh2dd5ckg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;949&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样下来，就能在自定义XWeb Worker线程的基础上，实现JSAPI的能力支持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.4 沙箱能力支持&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;小程序还有一个非常重要的能力，就是&lt;strong&gt;沙箱能力&lt;/strong&gt;，这个主要是&lt;strong&gt;确保开发者代码运行在一个受到控制的安全环境&lt;/strong&gt;&lt;strong&gt;中&lt;/strong&gt;。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.4.1 挑战点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这里的挑战点在于：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.49637023593466423&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3t1FCqoGV7hpXu0XxtE4XdMe6zySaFjqFKjOIiaAnspStqMMUw96zYdrQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1102&quot;/&gt;&lt;/p&gt;&lt;p&gt;这也使得Electron团队已在Renderer进程中禁用了Node VM。&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2.4.2 V8::Context的分析&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;所以在这里，就必须深入分析Chromium内核对V8：Context的封装，只有深入了解后，才能封装出所需要的沙箱接口。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7204797047970479&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3tgWywKuTJLc9gdv4OVJ51FiccSJ01mQSibCNdARia0l9DEcV3LJiaibK3diaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1084&quot;/&gt;&lt;/p&gt;&lt;p&gt;在Chromium下有两种类型的JS执行环境：一种是iframe类型、另外一种是worker类型：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对于iframe来说，在blink层对应的是Document对象，其继承自 Context 类,它提供了JS脚本执行环境的公共属性。Document对象通过 Context类、 ScriptState类、ScriptState类，完成了对裸v8 context的封装。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同样的对于ServiceWorker端，也是基于类似的流程完成了对裸v8 context的包装。其中 WorkerGlocalScope，则提供了满足JS运行的基本口实现。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2.4.3 实现XWeb Worker 的沙箱接口&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5944779982743744&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3tVwib4mW5W7ZDk6JORu78SzfR9RNvDO7tAvmmibyySq6Lx5W7EvrACyjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1159&quot;/&gt;&lt;/p&gt;&lt;p&gt;在这里借鉴Chromium内核中Web Worker创建Context的思路：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;创建VMWorkerGlobalScope，用于创建context及ScriptState等关联对象。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;VM Context的Js 通过调用父类的封装对象调用执行。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对外暴露CreateVMContext等API接口，从而提供沙箱能力支持。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.基于Chromium内核的小游戏框架&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7804878048780488&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3thGkBoOM4k5B5ialb4W0icIY7yknLCgnEjcrMKicQ05anPrXMOF1IOnhgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;861&quot;/&gt;&lt;/p&gt;&lt;p&gt;基于Chromium内核的小游戏框架，相比小程序而言就简洁很多了，它同样运行在Chromium内核中，只会使用Render线程，作为小游戏的JS线程。然后会使用 H5 的接口，比如canvas webgl，同样也会融合 node 进来，来做JS API的扩展。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.1 JSAPI能力支持&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5698070374574348&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3tibM46T1xQsEpP2OKPsjq29Cx3cgPJ8Y2DmtaInrAiaxNEtuCxs036hyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;881&quot;/&gt;&lt;/p&gt;&lt;p&gt;小游戏的JS API，由于是运行在Chromium的Render线程上，能够直接使用 很多 H5的能力，比如Canvas、WebGL、WebAudio 等。同样融入Node后，会获得node相应的api能力，比如node 的 file http socket 等。如果业务有扩展，比如要新增jsapi接口，可以通过 node addon 来增加实现。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.2 沙箱能力支持&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8463541666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3t60QaibKtRPIO4071t0vic5ZiaY7En6yiccjHo3f2dMtIibfaGEhohkfeXpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;768&quot;/&gt;&lt;/p&gt;&lt;p&gt;小游戏的沙箱能力，我们这里直接使用iframe，来作为独立的js context，当然考虑到安全，我们会在Chromium内核中，禁用iframe中的DOM和BOM相关接口。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.进程模型&amp;amp;跨平台实践&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.1 进程模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如下图所示，左侧是Host进程，右边是Chromium的多进程模型：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.692&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3tzvcGsgoQ585NAL2oPtiblm50SKqTsHicmjO5wI6Yu7Bibk4bVouRgGNaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1250&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;每一个小程序和小游戏都是一个独立的Render进程 。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Host进程，比如PC微信，小程序一些微信相关的能力，需要和Host进程打交道。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在这里，我们通过IPC通信的方式，来降低小程序和Host进程的耦合程度。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;而通过Chromium的多进程模型，来保证每个小程序和小游戏 以及Host之间互相不影响。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;2&lt;span&gt; 跨平台SDK&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;得益与Chromium的架构和跨平台能力，也使得我们小程序框架非常容易移植和集成。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.538961038961039&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3tiaXVmVj2K9hQeVpbA0UkjNP9EibzEo2IwTk7ZI8gicm5Itk4kXjYwkK8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1232&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;多个平台，使用同一份源码&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;SDK可独立使用&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;PC微信集成&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.3 Windows 和 Linux 平台演示&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1.集成到Windows微信，从桌面拉起小程序。&lt;/p&gt;&lt;section/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.独立的SDK Demo运行在Linux平台。&lt;/span&gt;&lt;/p&gt;&lt;section/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;4.4 移植到 Android Native 环境&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;基于新框架的跨平台特性，这里尝试将新的小程序框架移植到Android的Native环境，&lt;strong&gt;不会依赖任何的Android Java框架代码&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;其实移植到Android Native后的整体架构，和【曾经的&lt;strong&gt;FirefoxOS&lt;/strong&gt;】以及【现在的&lt;strong&gt;KaiOS&lt;/strong&gt;】架构比较接近，没有任何Java代码，只有Web的技术栈。下面通过一个Demo视频，看看如何在pixel3手机上开机到一个【小程序列表】，并且运行【小程序app】：&lt;/p&gt;&lt;section/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;5.总结与展望&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Chromium可以说是目前终端领域最复杂的软件之一了，而小程序也是目前前端最火的领域。本文给出了一个全新的小程序框架思路，基于Chromium内核，进行深度定制，复用H5生态，灵活满足小程序的业务需求，不仅能减少大量的开发成本，而且性能指标也有大幅提升。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而我们在实际性能评测中，新框架相比过去的框架方案，小程序首屏显示，冷启动耗时减少70%，用户体验大幅度改善。而且由于减少了逻辑端的V8，以及大量JSAPI 复用H5的能力，使得内存占用方面，也有显著减少。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而Chromium的跨平台能力，也使得整个框架，非常方便移植到各个平台，无论是Windows，Linux，Mac还是Android，甚至类似WebOS的架构，新框架都可以轻松适应。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后，希望这篇文章能给到大家一些新的思路。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后的最后，我们招人，招人，招人！ 如果大家对微信终端技术感兴趣，大家可以在 hr.tencent.com 搜索[微信终端]相关岗位，或者扫描下面的二维码投递简历。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9981818181818182&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/csvJ6rH9McsKfQmPIELoFnry6paCWs3teyJBZ5SA65QW5raYHqEK9iaAAXibKDNv7YTnEI6yiaOibm7gWzjoePQNyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;550&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;https://www.chromium.org/Home&lt;/p&gt;&lt;p&gt;https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps&lt;/p&gt;&lt;p&gt;https://www.electronjs.org/blog/electron-internals-node-integration&lt;/p&gt;&lt;p&gt;https://github.com/electron/electron&lt;/p&gt;&lt;p&gt;https://chromium.googlesource.com/chromium/src/+/HEAD/docs/ozone_overview.md&lt;/p&gt;&lt;p&gt;https://zh.wikipedia.org/wiki/Firefox_OS&lt;/p&gt;&lt;p&gt;https://developer.kaiostech.com/docs/sfp-3.0/&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>