<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ac892cdca5e4ad6ccd791fe7911be38d</guid>
<title>谈谈 Git 存储原理及相关实现</title>
<link>https://toutiao.io/k/mzszqf0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;post-intro&quot;&gt;摘要：Git 是目前最流行的版本控制系统，从本地开发到生产部署，我们每天都在使用 Git 进行我们的版本控制，除了日常使用的命令之外，如果想要对 Git 有更深一步的了解，那么研究下 Git 的底层存储原理将会对理解 Git 及其使用非常有帮助，就算你不是一个 Git 开发者，也推荐你了解下 Git 的底层原理，你会对 Git 的强大有一个全新的认识，并且将会在日常的 Git 使用过程中更加得心应手。&lt;/p&gt;&lt;div class=&quot;markdown-body&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://zoker.io/uploads/images/2021/0221/232751_a88e9997.png&quot; alt=&quot;输入图片说明&quot; title=&quot;在这里输入图片标题&quot;/&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;这篇文章面向的读者主要是对 Git 有一定的了解的群体，并不会介绍具体 Git 的作用及其使用，也不会介绍与其它版本控制系统如 Subversion 之间的差异，主要是介绍下 Git 的本质以及他的存储实现的相关原理，旨在帮助 Git 使用者更加清晰的了解在使用 Git 进行版本控制的时候其内部实现。&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;git-本质是什么&quot;&gt;Git 本质是什么&lt;/h2&gt;&amp;#13;
&lt;p&gt;Git 本质上是一个内容寻址的 Key-Value 数据库，我们可以向 Git 仓库内插入任意类型的内容，Git 会返回给我们一个唯一的键值，可以通过这个键取出当时我们插入的值，我们可以通过底层命令&lt;code&gt;git hash-object&lt;/code&gt;命令来尝试：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ &lt;span class=&quot;hljs-keyword&quot;&gt;cat&lt;/span&gt; testfile&amp;#13;
Hello Git&amp;#13;
➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ git hash-object testfile -&lt;span class=&quot;hljs-keyword&quot;&gt;w&lt;/span&gt;&amp;#13;
&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;f4d96d5b00d98959ea9960f069585ce42b1349a&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到我们目录下有一个名为&lt;code&gt;testfile&lt;/code&gt;的文件，内容是&lt;code&gt;Hello Git!&lt;/code&gt; 我们使用&lt;code&gt;git hash-object&lt;/code&gt;命令将这个文件的内容写入到 Git 仓库，&lt;code&gt;-w&lt;/code&gt; 选项告诉 Git 把这个内容写到 Git 的&lt;code&gt;.git/objects&lt;/code&gt;对象数据库目录，并且 Git 返回了一个 SHA 值，这个 SHA 值就是后续我们要取出这个文件的键值：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ git &lt;span class=&quot;hljs-keyword&quot;&gt;cat&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; -&lt;span class=&quot;hljs-keyword&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;f4d96d5b00d98959ea9960f069585ce42b1349a&amp;#13;
Hello Git&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们使用了&lt;code&gt;git cat-file&lt;/code&gt;命令取回刚刚存入到 Git 仓库的内容，虽然不像&lt;code&gt;Redis&lt;/code&gt;的命令&lt;code&gt;get&lt;/code&gt; &lt;code&gt;set&lt;/code&gt; 那么直观，但是它确实是一个 KV 数据库，不是吗？&lt;/p&gt;&amp;#13;
&lt;p&gt;我们刚刚尝试插入的这种数据是基础的&lt;code&gt;blob&lt;/code&gt;类型的对象，Git 还有其它如 &lt;code&gt;tree&lt;/code&gt;、&lt;code&gt;commit&lt;/code&gt;等对象类型，这些不同的对象类型之间有特定的关联关系，它们将不同的对象有逻辑的关联起来，才能够帮我们进行不同版本的控制和检出。稍后会展开讲解这几种不同的对象类型，我们先来了解下 Git 的目录结构，看看在 Git 中数据是如何存放的。&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;git-目录结构&quot;&gt;Git 目录结构&lt;/h2&gt;&amp;#13;
&lt;p&gt;通过上一节的介绍，我们知道了 Git 本质就是一个 KV 数据库，而且还提到了内容都是写到 &lt;code&gt;.git/objects&lt;/code&gt;对象目录，那么这个目录放在哪里？Git 又是如何存储这些数据的呢？本节我们重点介绍一下 Git 的存储目录结构，了解下 Git 是如何存放不同类型的数据的。&lt;/p&gt;&amp;#13;
&lt;blockquote&gt;&amp;#13;
&lt;p&gt;更详细的介绍参见：&lt;a href=&quot;https://github.com/git/git/blob/master/Documentation/gitrepository-layout.txt&quot;&gt;https://github.com/git/git/blob/master/Documentation/gitrepository-layout.txt&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;/blockquote&gt;&amp;#13;
&lt;p&gt;通过 &lt;code&gt;git init&lt;/code&gt; 我们可以在当前目录初始化一个空的 Git 仓库，Git 会自动生成 &lt;code&gt;.git&lt;/code&gt; 目录，这个 &lt;code&gt;.git&lt;/code&gt; 目录就是后续所有的 Git 元数据的存储中心，我们来看一下它的目录结构：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker git init&amp;#13;
Initialized empty Git repository &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; /Users/zoker/tmp/Zoker/.git/&amp;#13;
➜  Zoker git:(master) ✗ tree &lt;span class=&quot;hljs-class&quot;&gt;.git&lt;/span&gt;&amp;#13;
&lt;span class=&quot;hljs-class&quot;&gt;.git&lt;/span&gt;&amp;#13;
├── HEAD              &lt;span class=&quot;hljs-comment&quot;&gt;// 是一个符号引用，指明当前工作目录的版本引用信息，我们平时执行 checkout 命令时就会改变 HEAD 的内容&lt;/span&gt;&amp;#13;
├── config             &lt;span class=&quot;hljs-comment&quot;&gt;// 配置当前存储库的一些信息，如：Proxy、用户信息、引用等，此处的配置项相对于全局配置权重更高&lt;/span&gt;&amp;#13;
├── description      &lt;span class=&quot;hljs-comment&quot;&gt;// 仓库描述信息&lt;/span&gt;&amp;#13;
├── hooks             &lt;span class=&quot;hljs-comment&quot;&gt;// 钩子目录，执行 Git 相关命令后的回调脚本，默认会有一些模板&lt;/span&gt;&amp;#13;
│   ├── update&lt;span class=&quot;hljs-class&quot;&gt;.sample&lt;/span&gt;&amp;#13;
│   ├── pre-receive&lt;span class=&quot;hljs-class&quot;&gt;.sample&lt;/span&gt;&amp;#13;
│   └── ...&amp;#13;
├── info                &lt;span class=&quot;hljs-comment&quot;&gt;// 存储一些额外的仓库信息如 refs、exclude、attributes 等&lt;/span&gt;&amp;#13;
│   └── exclude&amp;#13;
├── objects           &lt;span class=&quot;hljs-comment&quot;&gt;// 元数据存储中心&lt;/span&gt;&amp;#13;
│   ├── info&amp;#13;
│   └── pack&amp;#13;
└── refs               &lt;span class=&quot;hljs-comment&quot;&gt;// 存放引用信息，也就是分支、标签&lt;/span&gt;&amp;#13;
    ├── heads&amp;#13;
    └── tags&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认初始化生成的 Git 仓库就只有这些文件，除此之外还存在一些其它类型的文件和目录如&lt;code&gt;packed-refs&lt;/code&gt; &lt;code&gt;modules&lt;/code&gt; &lt;code&gt;logs&lt;/code&gt;等，这些文件都有特定的用途，都是在特定的操作或者配置后才会出现，这里我们只关注核心存储的实现，这些额外文件或目录的作用及使用场景再可自行翻阅文档，这里仅介绍核心的一些文件。&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;hooks-目录&quot;&gt;hooks 目录&lt;/h3&gt;&amp;#13;
&lt;p&gt;hooks 目录主要存储的是 Git 钩子，Git 钩子可以在很多事件发生后或者发生前触发，能够提供给我们非常灵活的使用方式，默认情况下全部都是带&lt;code&gt;.sample&lt;/code&gt;后缀的，需要移除这个后缀并赋予可执行权限方可生效，下面列举下常用的一些钩子及其常见的用途：&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;客户端钩子&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;ul&gt;&amp;#13;
&lt;li&gt;pre-commit：提交前触发，比如检查提交信息是否规范，测试是否运行完毕，代码格式是否符合要求&lt;/li&gt;&amp;#13;
&lt;li&gt;post-commit：相反，这个是整个提交完成后触发，可以用来发通知&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;服务端钩子&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;ul&gt;&amp;#13;
&lt;li&gt;pre-receive：服务端接收推送请求首先被调用的脚本，可以检测这些被推送的引用是否符合要求&lt;/li&gt;&amp;#13;
&lt;li&gt;update：与 pre-receive 相似，但是 pre-receive 只会运行一次，而 update 将会为每一个推送的分支分别运行一次&lt;/li&gt;&amp;#13;
&lt;li&gt;post-receive：整个推送过程完成后触发，可以用来发送通知、触发构建系统等&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&amp;#13;
&lt;h3 id=&quot;objects-目录&quot;&gt;objects 目录&lt;/h3&gt;&amp;#13;
&lt;p&gt;如上一节我们提到的，Git 将所有接收到的内容生成对象文件存储在这个目录下，我们通过&lt;code&gt;git hash-object&lt;/code&gt;生成了一个对象并写入了 Git 仓库，这个对象的键值是&lt;code&gt;9f4d96d5b00d98959ea9960f069585ce42b1349a&lt;/code&gt;，这个时候我们来查看下 &lt;code&gt;objects&lt;/code&gt; 目录的结构：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker git:(master) ✗ git hash-object testfile -w&amp;#13;
&lt;span class=&quot;hljs-number&quot;&gt;9f&lt;/span&gt;4d96d5b00d98959ea9960f069585ce42b1349a&amp;#13;
➜  Zoker git:(master) ✗ tree .git/objects&amp;#13;
.git/objects&amp;#13;
├── &lt;span class=&quot;hljs-number&quot;&gt;9f&lt;/span&gt;&amp;#13;
│   └── &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;d96d5b00d98959ea9960f069585ce42b1349a&amp;#13;
├── info&amp;#13;
└── pack&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到&lt;code&gt;objects&lt;/code&gt;目录已经有了新的内容，多了一个&lt;code&gt;9f&lt;/code&gt;的文件夹以及其中的文件，这个文件就是插入到 Git 仓库的内容的对象文件，Git 取其键值的前两个字母作为文件夹，将后面的字母作为对象文件的文件名进行存储，这里（也就是&lt;code&gt;objects/[0-9a-f][0-9a-f]&lt;/code&gt;）所存储的对象我们一般称为&lt;code&gt;loose objects&lt;/code&gt;或者&lt;code&gt;unpacked objects&lt;/code&gt;，也就是松散对象。&lt;/p&gt;&amp;#13;
&lt;p&gt;除了对象的存储文件夹，细心的同学应该已经注意到了&lt;code&gt;objects/pack&lt;/code&gt;文件夹的存在，这里对应的是打包后的文件，为了节省空间和提升效率，当存储库中有过多的松散对象文件或者手动执行&lt;code&gt;git gc&lt;/code&gt;命令时，亦或是推送拉取的传输过程中，Git 都会将这些松散的对象文件打包成&lt;code&gt;pack&lt;/code&gt;文件来提升效率，这里存放的就是这些打包后的文件:&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  objects git:(master) git gc&amp;#13;
&lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;&amp;#13;
Compressing objects: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;% (&lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;), done.&amp;#13;
&lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;&amp;#13;
➜  objects git:(master) tree&amp;#13;
.&amp;#13;
├─ pack&amp;#13;
    ├── pack-fe24a22b0313342a6732cff4759bedb25c2ea55d.idx&amp;#13;
    └── pack-fe24a22b0313342a6732cff4759bedb25c2ea55d.pack&amp;#13;
└── &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到&lt;code&gt;objects&lt;/code&gt;目录已经没有了松散对象，取而代之的是&lt;code&gt;pack&lt;/code&gt;目录的两个文件，一个是打包后的文件，另一个是对这个打包的内容进行索引的&lt;code&gt;idx&lt;/code&gt;文件，方便查询某个对象是否在这个对应的&lt;code&gt;pack&lt;/code&gt;包内。&lt;/p&gt;&amp;#13;
&lt;p&gt;需要注意的是，如果在刚刚我们手动创建的一个&lt;code&gt;blob&lt;/code&gt;对象的仓库进行 GC，将不会产生任何效果，因为这个时候整个 Git 仓库并没有任何一个引用指向这个对象，我们说这个对象是游离的，下面我们来介绍下存储引用的目录。&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;refs-目录&quot;&gt;refs 目录&lt;/h3&gt;&amp;#13;
&lt;p&gt;refs 目录存储我们的引用（references），引用可以看做是对一个版本号的别名，它存储的实际就是某一个 Commit 的 SHA 值，上面我们用来测试的仓库并没有任何一个提交，所以只有一个空的目录结构&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;└── refs&amp;#13;
    ├── heads&amp;#13;
    └── &lt;span class=&quot;hljs-keyword&quot;&gt;tags&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们随便找一个包含提交的仓库查看他的默认分支&lt;code&gt;master&lt;/code&gt;&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  .git &lt;span class=&quot;hljs-string&quot;&gt;git:&lt;/span&gt;(master) cat refs&lt;span class=&quot;hljs-regexp&quot;&gt;/heads/&lt;/span&gt;master&amp;#13;
&lt;span class=&quot;hljs-number&quot;&gt;87e917616712189&lt;/span&gt;ecac8c4890fe7d2dc2d554ac6&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到这个&lt;code&gt;master&lt;/code&gt;的引用只是存储了一个 Commit 的 SHA 值，好处当然就是我们不需要记着那长长的一串 SHA 值，我们只需要用&lt;code&gt;master&lt;/code&gt;这个别名就可以获取到这个版本。同样的 tags 目录下存储的就是我们的标签，与分支不同的是，标签的所记录的引用值一般是不会变化的，而分支可以我们的版本变化而变化。除此之外，还可能会看到&lt;code&gt;refs/remotes&lt;/code&gt; &lt;code&gt;refs/fetch&lt;/code&gt; 等目录，这些里面存储的是特定命名空间的引用。&lt;/p&gt;&amp;#13;
&lt;p&gt;还有一种情况，就是上面我们讲到的 GC 机制，如果一个仓库执行了 GC，那么不仅&lt;code&gt;objects&lt;/code&gt;目录下的松散对象会被打包，&lt;code&gt;refs&lt;/code&gt;下面的引用同样也会被打包，只不过它存放在裸仓库的根目录下&lt;code&gt;.git/packed-refs&lt;/code&gt;&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  .git&lt;span class=&quot;hljs-function&quot;&gt; git:(&lt;/span&gt;master&lt;span class=&quot;hljs-function&quot;&gt;)&lt;/span&gt; cat&lt;span class=&quot;hljs-instruction&quot;&gt; packed-refs&amp;#13;
&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# pack-refs with: peeled fully-peeled sorted&lt;/span&gt;&amp;#13;
87e917616712189ecac8c4890fe7d2dc2d554ac6 refs/heads/master&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当我们需要访问分支&lt;code&gt;master&lt;/code&gt;的时候，Git 会首先去&lt;code&gt;refs/heads&lt;/code&gt;里面进行查找，如果找不到就会前往&lt;code&gt;.git/packed-refs&lt;/code&gt;进行查找，将所有的引用打包到一个文件无疑提升了不少效率。需要注意的是，如果我们在这个时候往&lt;code&gt;master&lt;/code&gt;分支上更新了一些提交，这个时候 Git 并不会直接修改 &lt;code&gt;.git/packed-refs&lt;/code&gt;文件，它会直接在&lt;code&gt;refs/heads/&lt;/code&gt;下重新创建一个&lt;code&gt;master&lt;/code&gt;引用，包含最新的提交的 SHA 值，根据刚刚我们介绍的 Git 的机制，Git 会首先在&lt;code&gt;refs/heads/&lt;/code&gt;查找，找不到才会去&lt;code&gt;.git/packed-refs&lt;/code&gt;查找。&lt;/p&gt;&amp;#13;
&lt;p&gt;那么引用里面存储的 Commit 的 这串 SHA 值到底是指向什么内容呢，我们可以使用之前查看&lt;code&gt;blob&lt;/code&gt;对象内容的&lt;code&gt;cat-file&lt;/code&gt;命令进行查看：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  .git git:(master) git cat-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; -p &lt;span class=&quot;hljs-number&quot;&gt;87e917616712189&lt;/span&gt;ecac8c4890fe7d2dc2d554ac6&amp;#13;
tree aab1a9217aa6896ef46d3e1a90bc64e8178e1662 &lt;span class=&quot;hljs-comment&quot;&gt;// 指向的tree对象&lt;/span&gt;&amp;#13;
&lt;span class=&quot;hljs-keyword&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;d000309cb780fa27898b4d103afcfa95a8c04db &lt;span class=&quot;hljs-comment&quot;&gt;// 父提交&lt;/span&gt;&amp;#13;
author Zoker &amp;lt;kaixuanguiqu&lt;span class=&quot;hljs-variable&quot;&gt;@gmail&lt;/span&gt;.com&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1607958804&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;0800&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// 作者信息&lt;/span&gt;&amp;#13;
committer Zoker &amp;lt;kaixuanguiqu&lt;span class=&quot;hljs-variable&quot;&gt;@gmail&lt;/span&gt;.com&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1607958804&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;0800&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// 提交者信息&lt;/span&gt;&amp;#13;
&amp;#13;
test ssh &lt;span class=&quot;hljs-comment&quot;&gt;// 提交信息&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;它是一个&lt;code&gt;commit&lt;/code&gt;类型的对象，主要的属性是它指向的&lt;code&gt;tree&lt;/code&gt;对象，它的父提交（如果它是第一个提交，那么这里是0000000...），以及作者和提交信息。&lt;/p&gt;&amp;#13;
&lt;p&gt;那么&lt;code&gt;commit&lt;/code&gt;对象是什么？它所指向的&lt;code&gt;tree&lt;/code&gt;对象又是什么？与之前我们手工创建的&lt;code&gt;blob&lt;/code&gt;对象有什么差别？接下来我们来谈谈 Git 存储对象。&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;git-存储对象&quot;&gt;Git 存储对象&lt;/h2&gt;&amp;#13;
&lt;p&gt;在 Git 的世界里，一共有四种类型的存储对象： 文件（blob）、树（tree）、提交（commit）、标签（tag），这里我们主要探讨头三种类型，因为这三种是最基础的 Git 元数据，而标签对象只是一个包含了额外属性信息的 Tag 而已，也就是附注标签（annotated tag），这里不再过多的介绍。&lt;/p&gt;&amp;#13;
&lt;blockquote&gt;&amp;#13;
&lt;p&gt;轻量标签（lightweight）与附注标签（annotated）介绍：&lt;a href=&quot;https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE&quot;&gt;https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;/blockquote&gt;&amp;#13;
&lt;h3 id=&quot;blob-对象&quot;&gt;Blob 对象&lt;/h3&gt;&amp;#13;
&lt;p&gt;在介绍 Git 本质的时候，为了演示 Git 是一个基于内容寻址的 KV 数据库，我们向 Git 仓库插入了一个文件的内容：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ &lt;span class=&quot;hljs-keyword&quot;&gt;cat&lt;/span&gt; testfile&amp;#13;
Hello Git&amp;#13;
➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ git hash-object testfile -&lt;span class=&quot;hljs-keyword&quot;&gt;w&lt;/span&gt;&amp;#13;
&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;f4d96d5b00d98959ea9960f069585ce42b1349a&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个 Key 为&lt;code&gt;9f4d96d5b00d98959ea9960f069585ce42b1349a&lt;/code&gt;的 Git 对象实际上就是一个 Blob 对象，他存储了这个&lt;code&gt;testfile&lt;/code&gt;文件的值，我们可以使用&lt;code&gt;cat-file&lt;/code&gt;命令来进行查看：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ git &lt;span class=&quot;hljs-keyword&quot;&gt;cat&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; -&lt;span class=&quot;hljs-keyword&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;f4d96d5b00d98959ea9960f069585ce42b1349a&amp;#13;
Hello Git&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;每一次我们修改文件，Git 都会完整的保存一份这个文件的快照而非记录差异，所以如果我们修改了&lt;code&gt;testfile&lt;/code&gt;文件的内容再次存入到 Git 仓库中的时候，Git 会基于当前最新的内容来生成它的 Key，需要注意的是当内容不变的时候，它的 Key 值是固定的，毕竟我们前面也说了，Git 是一个基于内容寻址的 KV 数据库。&lt;/p&gt;&amp;#13;
&lt;p&gt;另外，这里的 Blob 对象存储的是文本内容，它还可以是二进制内容，但是这里并不建议使用 Git 管理二进制文件的版本。我们 Gitee 平台在日常运营过程中遇到最多的问题就是用户仓库过大，这种情况一般都是用户提交了大的二进制文件导致的，因为每次文件的变更记录的是快照，所以这个二进制文件如果变更频繁，它占用的空间是倍增的。而且对于文本内容的 Blob，Git 在 GC 的过程中会只保存两次提交之间的文件差异，是可以达到节省空间的效果的，但是对于二进制内容的 Blob 是无法像文本内容的 Blob 那样处理的，所以尽量不要把频繁变动的二进制内容存储到 Git 仓库，可以使用 LFS 的方式进行存储。如果已经存在了大量的二进制文件，可以使用&lt;code&gt;filter-branch&lt;/code&gt;进行瘦身，新加入的同事在首次 Clone 仓库的时候肯定会感激你的。&lt;/p&gt;&amp;#13;
&lt;blockquote&gt;&amp;#13;
&lt;p&gt;LFS 的使用：&lt;a href=&quot;https://gitee.com/help/articles/4235&quot;&gt;https://gitee.com/help/articles/4235&lt;/a&gt;&amp;#13;
大仓库的瘦身：&lt;a href=&quot;https://gitee.com/help/articles/4232&quot;&gt;https://gitee.com/help/articles/4232&lt;/a&gt;&amp;#13;
filter-branch：&lt;a href=&quot;https://github.com/git/git/blob/master/Documentation/git-filter-branch.txt&quot;&gt;https://github.com/git/git/blob/master/Documentation/git-filter-branch.txt&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;/blockquote&gt;&amp;#13;
&lt;p&gt;到了这里是不是觉得哪里不对劲？没错，这个 Blob 对象只存储了这个文件的内容，却没有记录文件名，那我们该怎么知道这个内容是属于哪个文件的啊？答案是 Git 的另外一个重要的对象：Tree 对象。&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;tree-对象&quot;&gt;Tree 对象&lt;/h3&gt;&amp;#13;
&lt;p&gt;在 Git 中，Tree 对象主要的作用是将多个 Blob 或者 子 Tree 对象组织到一起，所有的内容都是通过 Tree 和 Blob 类型的对象进行存储的。一个 Tree 对象包含了一个或者多个 Tree Entry（树对象记录），每个树对象记录都包含了一个指向 Blob 或者子 Tree SHA 值的指针，还有它们对应的文件名等信息，其实就可以理解为索引文件系统中的&lt;code&gt;inode&lt;/code&gt;和&lt;code&gt;block&lt;/code&gt;的关系，图示一个 Tree 对象的话，如下图：&amp;#13;
&lt;img src=&quot;https://zoker.io/uploads/images/2021/0221/232855_c0f2e4e8.png&quot; alt=&quot;输入图片说明&quot; title=&quot;在这里输入图片标题&quot;/&gt;&amp;#13;
这个 Tree 对象对应的目录结构就是下面这样的：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;.&amp;#13;
├── LICENSE&amp;#13;
├── readme&lt;span class=&quot;hljs-class&quot;&gt;.md&lt;/span&gt;&amp;#13;
└── src&amp;#13;
    ├── libssl&lt;span class=&quot;hljs-class&quot;&gt;.so&lt;/span&gt;&amp;#13;
    └── logo.png&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过这种方式，我们可以像组织 Linux 下目录的方式一样来结构化的存储我们仓库的内容，把 Tree 看作目录结构，把 Blob 看作具体的文件内容。&lt;/p&gt;&amp;#13;
&lt;p&gt;那么该如何创建一个 Tree 对象呢？在 Git 中是根据暂存区的状态来创建对应的 Tree 对象的，这里的暂存区其实就是我们日常在使用 Git 的过程中所理解的暂存区（Staged），一般我们使用&lt;code&gt;git add&lt;/code&gt;命令将某些文件添加到暂存区待提交。在没有任何提交的空仓库里，这个暂存区的状态就是你通过&lt;code&gt;git add&lt;/code&gt;所添加的那些文件，如：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker git:(master) ✗ git status&amp;#13;
&lt;span class=&quot;hljs-keyword&quot;&gt;On&lt;/span&gt; branch master&amp;#13;
&amp;#13;
No commits yet&amp;#13;
&amp;#13;
Changes &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; be committed:&amp;#13;
  (&lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;git rm --cached &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; unstage)&amp;#13;
    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt;:   LICENSE&amp;#13;
    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt;:   readme.md&amp;#13;
&amp;#13;
Untracked files:&amp;#13;
  (&lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;git add &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; include &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; what will be committed)&amp;#13;
    src/&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里当前的暂存区状态就是在根目录有两个文件，暂存区的状态是保存在&lt;code&gt;.git/index&lt;/code&gt;文件的，我们使用&lt;code&gt;file&lt;/code&gt;命令来看看它是什么：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker git:(master) ✗ &lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; .git/&lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;&amp;#13;
.git/&lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;: Git &lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;, version &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; entries&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以发现在&lt;code&gt;index&lt;/code&gt;文件中有两个&lt;code&gt;entry&lt;/code&gt;，也就是根目录的两个文件&lt;code&gt;LICENSE&lt;/code&gt;和&lt;code&gt;readme.md&lt;/code&gt;。对于已经有提交的仓库，如果暂存区没有任何内容，那么这个&lt;code&gt;index&lt;/code&gt;表示的就是当前版本的目录树状态，如果修改或者增删了文件，并且加入了暂存区，那么&lt;code&gt;index&lt;/code&gt;就会发生改变，将相关文件的指针指向该文件新的 Blob 对象的 SHA 值。&lt;/p&gt;&amp;#13;
&lt;p&gt;所以如果想要创建一个 Tree 对象，我们需要往暂存区放点东西，除了使用&lt;code&gt;git add&lt;/code&gt;，我们还可以使用底层命令&lt;code&gt;update-index&lt;/code&gt;来创建一个暂存区。接下来我们根据上面已经创建好的&lt;code&gt;testfile&lt;/code&gt;文件来创建一个树对象，首先就是将文件&lt;code&gt;testfile&lt;/code&gt;加入到暂存区：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker git:(master) ✗ git &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;update&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;--add testfile // 与 git add testfile 一样&lt;/span&gt;&amp;#13;
➜  Zoker git:(&lt;span class=&quot;hljs-keyword&quot;&gt;master&lt;/span&gt;) ✗ git &lt;span class=&quot;hljs-keyword&quot;&gt;status&lt;/span&gt;&amp;#13;
&lt;span class=&quot;hljs-keyword&quot;&gt;On&lt;/span&gt; branch &lt;span class=&quot;hljs-keyword&quot;&gt;master&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;hljs-keyword&quot;&gt;No&lt;/span&gt; commits yet&amp;#13;
&amp;#13;
Changes &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; be committed:&amp;#13;
  (&lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;git rm --cached &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; unstage)&amp;#13;
    new file:   testfile&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个过程 Git 主要是先把&lt;code&gt;testfile&lt;/code&gt;的内容以 Blob 的形式插入到 Git 仓库，然后将返回的这个 Blob 的 SHA 值记录到&lt;code&gt;index&lt;/code&gt;中，告诉暂存区目前这个文件的内容是哪个。&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ tree .git/objects&amp;#13;
.git/objects&amp;#13;
├── &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;f&lt;/span&gt;&amp;#13;
│   └── &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;d96d5b00d98959ea9960f069585ce42b1349a&amp;#13;
├── info&amp;#13;
└── pack&amp;#13;
&amp;#13;
&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; directories, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt;&amp;#13;
➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ git &lt;span class=&quot;hljs-keyword&quot;&gt;cat&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; -&lt;span class=&quot;hljs-keyword&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;f4d96d5b00d98959ea9960f069585ce42b1349a&amp;#13;
Hello Git&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Git 在执行&lt;code&gt;update-index&lt;/code&gt;命令的时候，把指定文件的内容存储为 Blob 对象，并且记录在&lt;code&gt;index&lt;/code&gt;文件状态内。由于在之前我们已经通过&lt;code&gt;git hash-object&lt;/code&gt;命令将这个文件的内容插入过了，并且我们可以发现因为内容不变，所以生成的这个 Blob 对象的 SHA 值也是一致的，如果像我们这样已经做过插入的动作，下面的命令是等效的：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;git &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;update&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;--add --cacheinfo 9f4d96d5b00d98959ea9960f069585ce42b1349a testfile&lt;/span&gt;&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个命令其实就是把之前已经生成的 Blob 对象放到暂存区，并且指定它的文件名字是&lt;code&gt;testfile&lt;/code&gt;。由于我们的暂存区已经有一个文件&lt;code&gt;testfile&lt;/code&gt;，所以我接下来我们可以使用&lt;code&gt;git write-tree&lt;/code&gt;命令来基于当前暂存区的状态来创建一个 Tree 对象了：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ git &lt;span class=&quot;hljs-keyword&quot;&gt;write&lt;/span&gt;-tree&amp;#13;
aa406ee8804971cf8edfd8c89ff431b0462e250c&amp;#13;
➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ tree .git/objects&amp;#13;
.git/objects&amp;#13;
├── &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;f&lt;/span&gt;&amp;#13;
│   └── &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;d96d5b00d98959ea9960f069585ce42b1349a&amp;#13;
├── aa&amp;#13;
│   └── &lt;span class=&quot;hljs-number&quot;&gt;406&lt;/span&gt;ee8804971cf8edfd8c89ff431b0462e250c&amp;#13;
├── info&amp;#13;
└── pack&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行完命令后，Git 会基于当前暂存区的状态生成一个 SHA 值为&lt;code&gt;aa406ee8804971cf8edfd8c89ff431b0462e250c&lt;/code&gt;的 Tree 对象，并把这个 Tree 对象像 Blob 对象一样存储在&lt;code&gt;.git/objects&lt;/code&gt;目录下。&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ git &lt;span class=&quot;hljs-keyword&quot;&gt;cat&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; -&lt;span class=&quot;hljs-keyword&quot;&gt;p&lt;/span&gt; aa406ee8804971cf8edfd8c89ff431b0462e250c&amp;#13;
&lt;span class=&quot;hljs-number&quot;&gt;100644&lt;/span&gt; blob &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;f4d96d5b00d98959ea9960f069585ce42b1349a    testfile&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用&lt;code&gt;cat-file&lt;/code&gt;命令查看这个 Tree 对象，可以看到这个对象下只有一个文件，名为&lt;code&gt;testfile&lt;/code&gt;&amp;#13;
&lt;img src=&quot;https://zoker.io/uploads/images/2021/0221/232928_772a3f62.png&quot; alt=&quot;输入图片说明&quot; title=&quot;在这里输入图片标题&quot;/&gt;&amp;#13;
我们继续创建第二个 Tree 对象，我们需要第二个 Tree 对象下有修改后的&lt;code&gt;testfile&lt;/code&gt;文件，有新增的 &lt;code&gt;testfile2&lt;/code&gt;文件，并且需要把第一个 Tree 对象作为 第二个 Tree 对象的&lt;code&gt;duplicate&lt;/code&gt;目录。首先我们先把修改后的&lt;code&gt;testfile&lt;/code&gt;和新增的&lt;code&gt;testfile2&lt;/code&gt;文件加入到暂存区：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker git:(master) ✗ git &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;update&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt; testfile&amp;#13;
➜  Zoker git:(&lt;span class=&quot;hljs-keyword&quot;&gt;master&lt;/span&gt;) ✗ git &lt;span class=&quot;hljs-keyword&quot;&gt;update&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;--add testfile2&lt;/span&gt;&amp;#13;
➜  Zoker git:(&lt;span class=&quot;hljs-keyword&quot;&gt;master&lt;/span&gt;) ✗ git &lt;span class=&quot;hljs-keyword&quot;&gt;status&lt;/span&gt;&amp;#13;
&lt;span class=&quot;hljs-keyword&quot;&gt;On&lt;/span&gt; branch &lt;span class=&quot;hljs-keyword&quot;&gt;master&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;hljs-keyword&quot;&gt;No&lt;/span&gt; commits yet&amp;#13;
&amp;#13;
Changes &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; be committed:&amp;#13;
  (&lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;git rm --cached &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; unstage)&amp;#13;
    new file:   testfile&amp;#13;
    new file:   testfile2&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;紧接着我们需要把第一个 Tree 对象挂到&lt;code&gt;duplicate&lt;/code&gt;目录下，我们可以使用&lt;code&gt;read-tree&lt;/code&gt;命令来实现：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker git:(master) ✗ git read-tree &lt;span class=&quot;hljs-comment&quot;&gt;--prefix=duplicate aa406ee8804971cf8edfd8c89ff431b0462e250c &lt;/span&gt;&amp;#13;
➜  Zoker git:(master) ✗ git status&amp;#13;
&lt;span class=&quot;hljs-keyword&quot;&gt;On&lt;/span&gt; branch master&amp;#13;
&amp;#13;
No commits yet&amp;#13;
&amp;#13;
Changes &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; be committed:&amp;#13;
  (&lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;git rm --cached &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; unstage)&amp;#13;
    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt;:   duplicate/testfile&amp;#13;
    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt;:   testfile&amp;#13;
    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt;:   testfile2&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我们执行&lt;code&gt;write-tree&lt;/code&gt;并通过&lt;code&gt;cat-file&lt;/code&gt;查看第二个 Tree 对象：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ git &lt;span class=&quot;hljs-keyword&quot;&gt;write&lt;/span&gt;-tree&amp;#13;
&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;d62cef754e6cc995ed8d34f0d0e233e1dfd5d1&amp;#13;
➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ git &lt;span class=&quot;hljs-keyword&quot;&gt;cat&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; -&lt;span class=&quot;hljs-keyword&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;d62cef754e6cc995ed8d34f0d0e233e1dfd5d1&amp;#13;
&lt;span class=&quot;hljs-number&quot;&gt;040000&lt;/span&gt; tree aa406ee8804971cf8edfd8c89ff431b0462e250c    duplicate&amp;#13;
&lt;span class=&quot;hljs-number&quot;&gt;100644&lt;/span&gt; blob &lt;span class=&quot;hljs-number&quot;&gt;106287&lt;/span&gt;c47fd25ad9a0874670a0d5c6eacf1bfe4e    testfile&amp;#13;
&lt;span class=&quot;hljs-number&quot;&gt;100644&lt;/span&gt; blob &lt;span class=&quot;hljs-number&quot;&gt;098&lt;/span&gt;ffe6f84559f4899edf119c25d276dc70607cf    testfile2&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;成功完成了，我们不仅修改了&lt;code&gt;testfile&lt;/code&gt;的文件内容，还新增了一个&lt;code&gt;testfile2&lt;/code&gt;文件，并且还把第一个 Tree 对象当作第二个 Tree 对象的&lt;code&gt;duplicate&lt;/code&gt;目录了，这个时候 Tree 对象看起来应该是这样的：&amp;#13;
&lt;img src=&quot;https://zoker.io/uploads/images/2021/0221/232948_54b120f4.png&quot; alt=&quot;输入图片说明&quot; title=&quot;在这里输入图片标题&quot;/&gt;&amp;#13;
至此，我们知道了如何手动创建一个 Tree 对象，但是后面如果我需要这两个不同的 Tree 的快照该怎么办？总不能都记住这三个 Tree 对象的 SHA 值吧？没错，记起来费老大劲了，关键是还不知道是谁在什么时间为了什么而创建的这个快照，而 Commit 对象（提交对象）就能够帮我们解决这个问题。&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;commit-对象&quot;&gt;Commit 对象&lt;/h3&gt;&amp;#13;
&lt;p&gt;Commit 对象主要是为了记录快照的一些附加信息，并且维护快照之间的线性关系。我们可以通过&lt;code&gt;git commit-tree&lt;/code&gt;命令来创建一个提交，这个命令看字面意思就知道，它是用来将 Tree 对象提交为一个 Commit 对象的命令：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker git:(master) ✗ git commit-tree -h&amp;#13;
usage: git commit-tree [(-p &amp;lt;parent&amp;gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;] [-S[&amp;lt;keyid&amp;gt;]] [(-m &amp;lt;message&amp;gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;] [(-&lt;span class=&quot;hljs-literal&quot;&gt;F&lt;/span&gt; &amp;lt;file&amp;gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;] &amp;lt;tree&amp;gt;&amp;#13;
&amp;#13;
    -p &amp;lt;parent&amp;gt;           id of a parent commit object&amp;#13;
    -m &amp;lt;message&amp;gt;          commit message&amp;#13;
    -&lt;span class=&quot;hljs-literal&quot;&gt;F&lt;/span&gt; &amp;lt;file&amp;gt;             read commit log message from file&amp;#13;
    -S, --gpg-sign[=&amp;lt;key-id&amp;gt;]&amp;#13;
                          GPG sign commit&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关键的两个参数是&lt;code&gt;-p&lt;/code&gt;和&lt;code&gt;-m&lt;/code&gt;，&lt;code&gt;-p&lt;/code&gt;是指定这个提交的父提交，如果是初始的第一个提交，那这里可以忽略；&lt;code&gt;-m&lt;/code&gt;则是指定本次提交的信息，主要是用来描述提交的原因。我们来把第一个 Tree 对象作为我们的初始提交：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker git:&lt;span class=&quot;hljs-comment&quot;&gt;(master)&lt;/span&gt; ✗ git commit-tree -m &lt;span class=&quot;hljs-string&quot;&gt;&quot;init commit&quot;&lt;/span&gt; aa&lt;span class=&quot;hljs-number&quot;&gt;406&lt;/span&gt;ee&lt;span class=&quot;hljs-number&quot;&gt;8804971&lt;/span&gt;cf&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;edfd&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;c&lt;span class=&quot;hljs-number&quot;&gt;89&lt;/span&gt;ff&lt;span class=&quot;hljs-number&quot;&gt;431&lt;/span&gt;b&lt;span class=&quot;hljs-number&quot;&gt;0462&lt;/span&gt;e&lt;span class=&quot;hljs-number&quot;&gt;250&lt;/span&gt;c&amp;#13;
&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;ae&lt;span class=&quot;hljs-number&quot;&gt;181&lt;/span&gt;bd&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;c&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;e&lt;span class=&quot;hljs-number&quot;&gt;703&lt;/span&gt;df&lt;span class=&quot;hljs-number&quot;&gt;7851&lt;/span&gt;c&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;f&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;ea&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;d&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;e&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;a&lt;span class=&quot;hljs-number&quot;&gt;675&lt;/span&gt;b&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用&lt;code&gt;cat-file&lt;/code&gt;来查看这个提交：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;tree&lt;/span&gt; aa406ee8804971cf8edfd8c89ff431b0462e250c&amp;#13;
author Zoker &amp;lt;kaixuanguiqu&lt;span class=&quot;hljs-variable&quot;&gt;@gmail&lt;/span&gt;.com&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1613225370&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;0800&lt;/span&gt;&amp;#13;
committer Zoker &amp;lt;kaixuanguiqu&lt;span class=&quot;hljs-variable&quot;&gt;@gmail&lt;/span&gt;.com&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1613225370&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;0800&lt;/span&gt;&amp;#13;
&amp;#13;
init commit&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Commit 所存储的内容是一个 Tree 对象，并且记录了提交者、提交时间以及提交信息。我们基于这个 Commit 将第二个 Tree 对象作为引用：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ git commit-tree -&lt;span class=&quot;hljs-keyword&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;ae181bd -&lt;span class=&quot;hljs-keyword&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;add dir&quot;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;d62cef754e6cc995ed8d34f0d0e233e1dfd5d1&amp;#13;
de96a74725dd72c10693c4896cb74e8967859e58&amp;#13;
➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ git &lt;span class=&quot;hljs-keyword&quot;&gt;cat&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; -&lt;span class=&quot;hljs-keyword&quot;&gt;p&lt;/span&gt; de96a74725dd72c10693c4896cb74e8967859e58&amp;#13;
tree &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;d62cef754e6cc995ed8d34f0d0e233e1dfd5d1&amp;#13;
parent &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;ae181bd6c3e703df7851c0f7ea01d9e33a675b&amp;#13;
author Zoker &amp;lt;kaixuanguiqu@gmail.&lt;span class=&quot;hljs-keyword&quot;&gt;com&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1613225850&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;0800&lt;/span&gt;&amp;#13;
committer Zoker &amp;lt;kaixuanguiqu@gmail.&lt;span class=&quot;hljs-keyword&quot;&gt;com&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1613225850&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;0800&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;hljs-built_in&quot;&gt;add&lt;/span&gt; dir&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以使用&lt;code&gt;git log&lt;/code&gt;来查看这两个提交，这里添加&lt;code&gt;--stat&lt;/code&gt;参数查看文件变更记录：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;commit&lt;/span&gt; de96a74725dd72c10693c4896cb74e8967859e58&amp;#13;
Author: Zoker &amp;lt;kaixuanguiqu@gmail.com&amp;gt;&amp;#13;
&lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;:   Sun Feb &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2021&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;0800&lt;/span&gt;&amp;#13;
&amp;#13;
    &lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt; dir&amp;#13;
&amp;#13;
 duplicate/testfile | &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; +&amp;#13;
 testfile           | &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; +-&amp;#13;
 testfile2          | &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; +&amp;#13;
 &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; files &lt;span class=&quot;hljs-keyword&quot;&gt;changed&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; insertions(+), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; deletion(-)&amp;#13;
&amp;#13;
&lt;span class=&quot;hljs-keyword&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;ae181bd6c3e703df7851c0f7ea01d9e33a675b&amp;#13;
Author: Zoker &amp;lt;kaixuanguiqu@gmail.com&amp;gt;&amp;#13;
&lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;:   Sun Feb &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;09&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2021&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;0800&lt;/span&gt;&amp;#13;
&amp;#13;
    init &lt;span class=&quot;hljs-keyword&quot;&gt;commit&lt;/span&gt;&amp;#13;
&amp;#13;
 testfile | &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; +&amp;#13;
 &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;changed&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; insertion(+)&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个时候整个对象的结构如下图：&amp;#13;
&lt;img src=&quot;https://zoker.io/uploads/images/2021/0221/233021_a6ed134f.png&quot; alt=&quot;输入图片说明&quot; title=&quot;在这里输入图片标题&quot;/&gt;&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;练习：使用底层命令创建一个提交&quot;&gt;练习：使用底层命令创建一个提交&lt;/h3&gt;&amp;#13;
&lt;p&gt;仅使用我们上面提到的&lt;code&gt;hash-object&lt;/code&gt; &lt;code&gt;write-tree&lt;/code&gt; &lt;code&gt;read-tree&lt;/code&gt; &lt;code&gt;commit-tree&lt;/code&gt;等底层命令来创建一个提交，思考哪些过程是与&lt;code&gt;git add&lt;/code&gt; &lt;code&gt;git commit&lt;/code&gt;等价的。&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;对象存储方式&quot;&gt;对象存储方式&lt;/h3&gt;&amp;#13;
&lt;p&gt;我们通过前面的介绍，知道了 Git 是将数据以不同的对象类型归纳，并且根据内容计算出一个 SHA 值用来作为寻址，那么到底是如何计算的呢？以 Blob 对象为例，Git 主要是做了如下几步：&lt;/p&gt;&amp;#13;
&lt;ol&gt;&amp;#13;
&lt;li&gt;识别对象的类型，构造头部信息，以&lt;code&gt;类型+内容字节数+空字节&lt;/code&gt;作为头部信息如&lt;code&gt;blob 151\u0000&lt;/code&gt;&lt;/li&gt;&amp;#13;
&lt;li&gt;将头部信息与内容拼接，并且计算 SHA-1 校验和&lt;/li&gt;&amp;#13;
&lt;li&gt;通过 zlib 压缩内容&lt;/li&gt;&amp;#13;
&lt;li&gt;通过 SHA 值将其内容放到对应的&lt;code&gt;objects&lt;/code&gt;目录&lt;/li&gt;&amp;#13;
&lt;/ol&gt;&amp;#13;
&lt;p&gt;整个过程就做了这些事情，Tree 对象和 Commit 对象也差不多，只是头部类型有所差异而已，这里不再赘述，《Pro Git 2》在 Git 内部原理章节中有介绍如何使用 Ruby 来实现同等的逻辑，感兴趣的可以自行翻阅。&lt;/p&gt;&amp;#13;
&lt;blockquote&gt;&amp;#13;
&lt;p&gt;Git-内部原理：&lt;a href=&quot;https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1&quot;&gt;https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;/blockquote&gt;&amp;#13;
&lt;h2 id=&quot;git-引用&quot;&gt;Git 引用&lt;/h2&gt;&amp;#13;
&lt;p&gt;我们在上面通过&lt;code&gt;git log --stat 17ae181b&lt;/code&gt;能够查看第一个版本的相关信息，并且可以通过这串 SHA 值拿到这个快照的内容，但是还是挺麻烦的，因为我们要记住一串毫无意义的字符串，这个时候 Git 的引用就派上用场了，在 Git 目录结构章节我们已经介绍了&lt;code&gt;refs&lt;/code&gt;目录，我们知道在引用中存储的就是 Commit 对象的键值，也就是这个对象的 SHA 值，既然如此，我们就给我们当前的版本起一个有意义的名字，一般我们会拿&lt;code&gt;master&lt;/code&gt;作为默认分支引用：&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;17ae181bd6c3e703df7851c0f7ea01d9e33a675b&quot;&lt;/span&gt; &amp;gt;&amp;gt; .git/refs/heads/master&amp;#13;
➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ tree .git/refs&amp;#13;
.git/refs&amp;#13;
├── heads&amp;#13;
│   └── master&amp;#13;
└── &lt;span class=&quot;hljs-keyword&quot;&gt;tags&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个时候，&lt;code&gt;master&lt;/code&gt;里面存储了我们的第一个 Commit 的 SHA 值，我们可以使用&lt;code&gt;master&lt;/code&gt;来代替&lt;code&gt;17ae181b&lt;/code&gt;这串毫无意义的字符串了&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  Zoker gi&lt;span class=&quot;hljs-variable&quot;&gt;t:&lt;/span&gt;(master) ✗ git &lt;span class=&quot;hljs-keyword&quot;&gt;cat&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; -&lt;span class=&quot;hljs-keyword&quot;&gt;p&lt;/span&gt; master&amp;#13;
tree aa406ee8804971cf8edfd8c89ff431b0462e250c&amp;#13;
author Zoker &amp;lt;kaixuanguiqu@gmail.&lt;span class=&quot;hljs-keyword&quot;&gt;com&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1613916447&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;0800&lt;/span&gt;&amp;#13;
committer Zoker &amp;lt;kaixuanguiqu@gmail.&lt;span class=&quot;hljs-keyword&quot;&gt;com&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1613916447&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;0800&lt;/span&gt;&amp;#13;
&amp;#13;
init commit&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是，这个并不是我们最新的版本，我们最新的版本是第二个提交&lt;code&gt;de96a74725dd72c10693c4896cb74e8967859e58&lt;/code&gt;，同样的，我们可以把&lt;code&gt;refs/heads/master&lt;/code&gt;的内容更改为这个提交的 SHA 值，但是这里我们使用一个底层命令来完成&lt;/p&gt;&amp;#13;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;➜  &lt;span class=&quot;hljs-type&quot;&gt;Zoker&lt;/span&gt; git:(master) ✗ git update-&lt;span class=&quot;hljs-keyword&quot;&gt;ref&lt;/span&gt; refs/heads/master de96a74725dd72c10693c4896cb74e8967859e58&amp;#13;
➜  &lt;span class=&quot;hljs-type&quot;&gt;Zoker&lt;/span&gt; git:(master) ✗ cat .git/refs/heads/master&amp;#13;
de96a74725dd72c10693c4896cb74e8967859e58&amp;#13;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个时候，分支&lt;code&gt;master&lt;/code&gt;就指向了我们最新的版本&amp;#13;
&lt;img src=&quot;https://zoker.io/uploads/images/2021/0221/233032_874f10d4.png&quot; alt=&quot;输入图片说明&quot; title=&quot;在这里输入图片标题&quot;/&gt;&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;&amp;#13;
&lt;p&gt;以上主要讨论了 Git 基础的存储原理以及一些实现，还有一些如 Pack 的打包、传输协商机制以及存储格式等，限于篇幅并没有说到，后面根据一些场景再另行讨论。&lt;/p&gt;&amp;#13;
&lt;blockquote&gt;&amp;#13;
&lt;p&gt;永远不要停下提升的脚步，想想还贷的压力、小孩的压力、渐渐老去的父母的压力，你是想要那种滥竽充数的心惊胆战，还是要怀才不遇的怆然涕下？&lt;/p&gt;&amp;#13;
&lt;/blockquote&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;https://zoker.io/uploads/images/2021/0125/003521_d71b3ff1.png&quot; alt=&quot;输入图片说明&quot; title=&quot;在这里输入图片标题&quot;/&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;转载请保留出处：微信公众号「Zoker 随笔」（zokersay）&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d29ae4d6c1d4d520e0c23dcd88d5526f</guid>
<title>性格内向的人如何快速成长？</title>
<link>https://toutiao.io/k/zjup9p2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span/&gt;&lt;span&gt;我在之前的一篇文章中《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4MTU0NTkxNA==&amp;amp;mid=2247484602&amp;amp;idx=1&amp;amp;sn=aa643d51ca41574449a945b90829eaee&amp;amp;chksm=cf65036ff8128a794508f31beec25e9ef2a0c18fbba86c66dc6e0a437f2cddcf7bc94cff2adb&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;内向不应该被误解&lt;/a&gt;&lt;/span&gt;&lt;span&gt;》，主要谈到了我们对内向人的误解。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;性格内向的人在职场上还是会有一些劣势的，如因为不够积极主动而失去机会，不太喜欢经营人际关系而使职业发展受阻等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;今天这篇文章，我就来分享下我的经验，性格内向的人如何打通自己的职业成长通道？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;一、充分发挥内向者的优势&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;内向者专注于自己的内心世界，喜欢通过仔细考虑资讯、观点、概念来获得满足感，而不是通过与人相处、团队合作来获得满足感。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;内向的人更注重深度，更容易把事情想得透彻并做出明智的抉择。而且，有时人在单独工作的时候往往更有成效，所以内向者可以充分利用这方面的优势，更好地进行独立思考、自我探索及提升。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在和他人沟通或交往的过程中，内向的人更加热衷于有意义或价值的探讨，能够认真地聆听，审慎地分析并提出有见地的见解，而这更有利于建立高质量的人脉和关系。&lt;/span&gt;&lt;/section&gt;&lt;h5 data-original-font-size=&quot;13&quot; data-original-line-height=&quot;16&quot;&gt;&lt;strong&gt;&lt;span&gt;二、选择那些内向者有竞争优势的职业或领域&lt;/span&gt;&lt;/strong&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;在什么样的职业或领域，内向者会更有优势呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;答案是那些需要专注思考、独立思考与抽象思考的领域，如开发、算法岗等知识或技术密集型职业，而不是销售，技术支持等此类岗位。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这些领域，绩效的获得更多地依赖于任职者的专业知识和技术，而非人际沟通、协调与关系处理等。因此，内向性格的人可以充分发挥他们的优势，独立思考，深入钻研，谨慎节制，而不必过于担心身边的“杂音”和干扰。&lt;/span&gt;&lt;/section&gt;&lt;h5 data-original-font-size=&quot;13&quot; data-original-line-height=&quot;16&quot;&gt;&lt;strong&gt;&lt;span&gt;三、用另类的方式扩展人脉和社交&lt;/span&gt;&lt;/strong&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;扩展人脉和社交的方式有很多，吃饭喝酒、应酬或者溜须拍马只是其中一种而已。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你性格内向，不喜欢这些无聊的应酬，其实也没必要强迫自己去适应或改变，完全可以通过其他的方式去扩展人脉和社交。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如，在社交网络或问答社区通过不断输出和写作积累粉丝和人气，而后“以文会友”，寻找志趣相投、三观相符的人做朋友，而后又可以由点到面认识更多优秀的朋友。&lt;/span&gt;&lt;/section&gt;&lt;h5 data-original-font-size=&quot;13&quot; data-original-line-height=&quot;16&quot;&gt;&lt;strong&gt;&lt;span&gt;四、展现内向者独特的领导魅力&lt;/span&gt;&lt;/strong&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;性格内向的人不但可以成为领导者，而且可以成为优秀的领导者。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实际上，很多领导者就是内向的，如圣雄甘地、乔布斯、林肯等，包括我的领导也是。对于内向的领导者来说，可以充分展现内向性格所具有的优势，如深思熟虑的规划。内向的领导者不一定光芒四射，但可以不怒而威。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;内向还是外向并不是关键，最关键的是要有领导的意愿、宽广的胸怀和睿智的洞察力。有关领导能力的提升，我会单独写一篇文章来讲一讲。&lt;/span&gt;&lt;/section&gt;&lt;h5 data-original-font-size=&quot;13&quot; data-original-line-height=&quot;16&quot;&gt;&lt;strong&gt;&lt;span&gt;五、寻找性格互补的事业搭档&lt;/span&gt;&lt;/strong&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;一个内向、不善交际、“不够圆滑”的领导者，可以去寻找一个性格外向、处事灵活甚至是八面玲珑、左右逢源的事业搭档。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-original-font-size=&quot;14&quot; data-original-line-height=&quot;18&quot;&gt;&lt;span&gt;在自己擅长的领域做到最优。&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;每个人都有自己的特点，成功的道路也有千万条。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果自己本身性格内向，就喜欢独处和思考、分析和钻研，对于各种人际活动并没有太大的热情，也不是很擅长，那我们没有必要为了培养所谓的“高情商”或拓展所谓的“人脉”而放弃自己的优势，转向自己不擅长的活动。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们可以充分发挥内向性格中的专注、自制、自我激励和自我驱动等优势，在自己擅长的领域做到最优，成为行业内或领域内真正的专家。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当然，我们可以内向，可以偏爱独处，但不能趋于自我封闭，同样需要在沟通能力和领导力等方面加以刻意练习和提升。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;---------END---------&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我是袁吴范，一个教你如何提升认知、快速晋升的90后技术总监&lt;span&gt;，&lt;/span&gt;公众号：”pointers“&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;你可以加我微信，&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;拉你进一个高品质群，&lt;/span&gt;&lt;span&gt;&lt;span&gt;群里有开发、产品、技术经理、技术总监&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg4MTU0NTkxNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/PVZcww4Su38XVBkNk2LxyaH1M8JQxTS3zcqP7QooB7uKPrqMZar5mWMJVYI6j7gzWJdwpE7at6dHmlZMVUKk6w/0?wx_fmt=png&quot; data-nickname=&quot;pointers&quot; data-alias=&quot;cpointers&quot; data-signature=&quot;技术大厂总监，专注技术人的认知提升和职业成长&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;经验的结晶&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c7af400b70381cbb45cd534d5bcdea41</guid>
<title>漫画：产品经理的八大罪状（上）</title>
<link>https://toutiao.io/k/o889qin</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-darkmode-bgcolor-16044963779928=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16044963779928=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16044963779928=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16044963779928=&quot;rgb(89, 89, 89)&quot; data-style=&quot;letter-spacing: 0.544px; color: rgb(89, 89, 89); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; font-size: 16px; text-align: center; visibility: visible;&quot; data-darkmode-bgcolor-16048351688060=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16048351688060=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16048351688060=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16048351688060=&quot;rgb(89, 89, 89)&quot; class=&quot;js_darkmode__1&quot;&gt;&lt;span data-darkmode-bgcolor-16044963779928=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16044963779928=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16044963779928=&quot;rgb(127, 127, 127)&quot; data-darkmode-original-color-16044963779928=&quot;rgb(127, 127, 127)&quot; data-darkmode-bgcolor-16048351688060=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16048351688060=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16048351688060=&quot;rgb(127, 127, 127)&quot; data-darkmode-original-color-16048351688060=&quot;rgb(127, 127, 127)&quot;&gt;点击上方“&lt;/span&gt;&lt;span data-darkmode-bgcolor-16044963779928=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16044963779928=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16044963779928=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16044963779928=&quot;rgb(89, 89, 89)&quot; data-darkmode-bgcolor-16048351688060=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16048351688060=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16048351688060=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16048351688060=&quot;rgb(89, 89, 89)&quot;&gt;蓝色字体&lt;/span&gt;&lt;span data-darkmode-bgcolor-16044963779928=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16044963779928=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16044963779928=&quot;rgb(127, 127, 127)&quot; data-darkmode-original-color-16044963779928=&quot;rgb(127, 127, 127)&quot; data-darkmode-bgcolor-16048351688060=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16048351688060=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16048351688060=&quot;rgb(127, 127, 127)&quot; data-darkmode-original-color-16048351688060=&quot;rgb(127, 127, 127)&quot;&gt;”，选择“&lt;strong&gt;设为星标&lt;/strong&gt;”&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16044963779928=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16044963779928=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16044963779928=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16044963779928=&quot;rgb(62, 62, 62)&quot; data-style=&quot;letter-spacing: 0.544px; color: rgb(62, 62, 62); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; font-size: 16px; text-align: center; visibility: visible;&quot; data-darkmode-bgcolor-16048351688060=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16048351688060=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16048351688060=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16048351688060=&quot;rgb(62, 62, 62)&quot; class=&quot;js_darkmode__2&quot;&gt;&lt;span data-darkmode-bgcolor-16044963779928=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16044963779928=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16044963779928=&quot;rgb(127, 127, 127)&quot; data-darkmode-original-color-16044963779928=&quot;rgb(127, 127, 127)&quot; data-darkmode-bgcolor-16048351688060=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16048351688060=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16048351688060=&quot;rgb(127, 127, 127)&quot; data-darkmode-original-color-16048351688060=&quot;rgb(127, 127, 127)&quot;&gt;第一时间收到漫画更新推送哦！&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16044963779928=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16044963779928=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16044963779928=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16044963779928=&quot;rgb(62, 62, 62)&quot; data-style=&quot;letter-spacing: 0.544px; color: rgb(62, 62, 62); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; font-size: 16px; text-align: center; visibility: visible;&quot; data-darkmode-bgcolor-16048351688060=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16048351688060=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16048351688060=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16048351688060=&quot;rgb(62, 62, 62)&quot; class=&quot;js_darkmode__2&quot;&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16044963779928=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16044963779928=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16044963779928=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16044963779928=&quot;rgb(62, 62, 62)&quot; data-style=&quot;letter-spacing: 0.544px; color: rgb(62, 62, 62); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; font-size: 16px; text-align: center; visibility: visible;&quot; data-darkmode-bgcolor-16048351688060=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16048351688060=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16048351688060=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16048351688060=&quot;rgb(62, 62, 62)&quot; class=&quot;js_darkmode__2&quot;&gt;&lt;span data-darkmode-bgcolor-16044963779928=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16044963779928=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16044963779928=&quot;rgb(127, 127, 127)&quot; data-darkmode-original-color-16044963779928=&quot;rgb(127, 127, 127)&quot; data-darkmode-bgcolor-16048351688060=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16048351688060=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16048351688060=&quot;rgb(127, 127, 127)&quot; data-darkmode-original-color-16048351688060=&quot;rgb(127, 127, 127)&quot;&gt;&lt;strong&gt;这是&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;南哥&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;的 第13篇 原创漫画推送&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5344444444444445&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0ibQSLyzOQsNQlZLXLVcU4ggCOViaXbCtClaFwxGvWHN0pZoqKwDbGlqVCXafkPautsCwn4EfGUCOsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;互联网人罪状系列&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ol start=&quot;0&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MjQ0Mjk2NA==&amp;amp;action=getalbum&amp;amp;album_id=1740832322750300164#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;互联网人罪状系列 - 序&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MjQ0Mjk2NA==&amp;amp;action=getalbum&amp;amp;album_id=1740832322750300164#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;上班第一天，前端把后端告上县衙，还列了 5 宗罪&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;这篇漫画是&lt;span&gt;「&lt;/span&gt; &lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MjQ0Mjk2NA==&amp;amp;action=getalbum&amp;amp;album_id=1740832322750300164#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;互联网人罪状系列&lt;/a&gt; &lt;strong&gt;#2&lt;/strong&gt;&lt;span&gt; 」&lt;/span&gt;,讲述的是上一次王大拿告完后端以后，公司的产品经理各种作妖、虐待、压榨开发，终于引起了程序员们的反击，一起列了状词，并联名把产品告上了县衙,希望县老爷能还大家一个公道.&lt;/section&gt;&lt;section&gt;你认为这些罪状合理吗？&lt;br/&gt;产品经理的结局又会如何呢？&lt;br/&gt;一起来看看吧…&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本期漫画情节纯属虚构，切勿对号入座&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如有雷同，纯属巧合.&lt;/span&gt;&lt;/section&gt;&lt;p data-darkmode-bgcolor-16044963779928=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16044963779928=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16044963779928=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16044963779928=&quot;rgb(62, 62, 62)&quot; data-style=&quot;letter-spacing: 0.544px; color: rgb(62, 62, 62); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; font-size: 16px; text-align: center; visibility: visible;&quot; data-darkmode-bgcolor-16048351688060=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16048351688060=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16048351688060=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16048351688060=&quot;rgb(62, 62, 62)&quot; class=&quot;js_darkmode__2&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.8518518518518519&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0ibQSLyzOQsNQlZLXLVcU4ggYaE8bOm69T7OA8aGYtPibVq0ds7PF11KiaMA0PhzwPNEULWSoh4AWFXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.8518518518518519&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0ibQSLyzOQsNQlZLXLVcU4ggWpF3B6BUVo9w2x9gF5oMF6S4mGCkIX6cuo3FiaEOJCld7VbgJ837bYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.8527777777777779&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0ibQSLyzOQsNQlZLXLVcU4ggFSCY1STfHWjlqBaA0kFzg0EId43zaBwvwQKNHbED8OlLDzYqbnEgsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.8518518518518519&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0ibQSLyzOQsNQlZLXLVcU4ggL3UG1j7YBOYZApVyrmYUqtbTBTqj96WMNRZxricx0vJCMpqHnRdkYRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.8518518518518519&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0ibQSLyzOQsNQlZLXLVcU4ggTuUoCUyibn5yEbhkWuia5tffpuSrqkBby2dVdHw0W2Ej81nmWnHjaKog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.8574074074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0ibQSLyzOQsNQlZLXLVcU4ggPQ3DRibMgTpoFS42FKSVEgG228hxHCgGPABqjE1pgbIH8tkhUhmJwgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.8518518518518519&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0ibQSLyzOQsNQlZLXLVcU4ggZZV629nMZM02QJzj3cxw51Mw4PdbtBd9y8JHzRxNLdIgUjibH1GEIBA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.8518518518518519&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0ibQSLyzOQsNQlZLXLVcU4gg7fQVzk5s3YYMcj3kKLKwVHgliakDNfdt1bL4C8qXvokeYMdOW9lKq3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.849074074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0ibQSLyzOQsNQlZLXLVcU4ggI0avkliac8bZpzc0iaUrou4VoYEc3wT1zNH8FxUPicQkVfdQg2YiaxXZpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.8518518518518519&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0ibQSLyzOQsNQlZLXLVcU4ggDKejA7wg2riahdV6bh3k1Wbd3DDh3QyhDfC4VCEUAiaQPlWNoQIL78tQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;1070&quot; data-ratio=&quot;2.1731481481481483&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy08KSAUhjWXSpmVIJNtGbzWFXKGicBxkp7ibgOVZ4iamoyibL08BIoa32VgtdAGgAkw6ZueXpK0SLCjqgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9898148148148148&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy08KSAUhjWXSpmVIJNtGbzWFwK5zcbG5XVX0HkkPdJHo1JzyT7A7A9whtGltUeBbJX6VlIHnl7jY6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;编后&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.1503268&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ibsfLhQMgy08kVbiaWx3EvXnZDYOldMy0kWKChBNIvreAVrN3lsaOVsRKMJ16TAzwJhj5aQrsfHb6P7sBFgIMFVA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;306&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于产品经理作恶多年，实在是罪孽深重，很多罪状&lt;span&gt;县令&lt;/span&gt;都不得不一一核实，导致篇幅太长，审案实在太过辛苦，&lt;span&gt;县令&lt;/span&gt;强烈要求南哥暂停，产品经理暂扣押监牢，明日继续审判！&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;县令&lt;/span&gt;不敢得罪，南哥也不得不分篇啊，后续产品经理的结局将会如何呢？&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;敬请期待明天的&lt;/span&gt; &lt;strong&gt;&lt;span&gt;产品经理的八大罪状(下)&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;，更多精彩不要走开哦…&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;文中部分素材来源网络，如有侵权，请联系删除&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本文系 “ &lt;strong&gt;前端布道师&lt;/strong&gt; ”  原创&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;转载请先微信联系苏南 (&lt;/span&gt;&lt;span&gt;su-south&lt;/span&gt;&lt;span&gt;)授权，并标明出处！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;撰稿：苏南&lt;br/&gt;插画 / 排版：苏南&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;最后&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.1503268&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ibsfLhQMgy08kVbiaWx3EvXnZDYOldMy0kWKChBNIvreAVrN3lsaOVsRKMJ16TAzwJhj5aQrsfHb6P7sBFgIMFVA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;306&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这是&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;南哥&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;的 第13篇 原创漫画推送&lt;/strong&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你可以叫我南南，但 不可叫我渣南&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;转发到朋友圈，让朋友们发现我这个有趣的宝藏&lt;/span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;点击下方卡片，就能关注我啦&lt;/strong&gt;&lt;/span&gt;👇👇&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA5MjQ0Mjk2NA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy08SDGpLn32tiaq4PF02CMn2ArzCrj9e5WTwmXgjMicCypfsrNgg2g8qecSWeLfibemLvbr9IqTy0wODQ/0?wx_fmt=png&quot; data-nickname=&quot;前端布道师&quot; data-alias=&quot;honeyBadger8&quot; data-signature=&quot;分享前端最新技术、大厂面试题，聊点程序员轶事、职场感悟，你想要的都在这里.&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更多精彩程序员漫画，尽在&lt;/span&gt;&lt;strong&gt;前端布道师&lt;/strong&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools-id=&quot;95905&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93529&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span data-role=&quot;width&quot; data-width=&quot;80%&quot;&gt;&lt;img border=&quot;0&quot; data-type=&quot;gif&quot; data-width=&quot;80%&quot; height=&quot;&quot; title=&quot;&quot; class=&quot;__bg_gif&quot; data-ratio=&quot;0.08658008658008658&quot; data-w=&quot;462&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/dkwuWwLoRKicK7LlBwRVRUNO1BKzhTclI3kcTvSYr5NibF9W3ibImycHptnicePuavU3qOgR452gT8MQOibjV1Wgoicg/640?wx_fmt=gif&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjQ0Mjk2NA==&amp;amp;mid=2247488844&amp;amp;idx=1&amp;amp;sn=2ee3861ea6316910f616312dc34acb11&amp;amp;chksm=906c4d77a71bc461aea4a1fd9b0c17ab5f0512d0fa8339c99bec88f36636e7a3dd373b26f5ca&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;京东强哥公司，面试官一般都问什么？&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-role=&quot;width&quot; data-width=&quot;80%&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjQ0Mjk2NA==&amp;amp;mid=2247488620&amp;amp;idx=1&amp;amp;sn=0036836ae7098df8d4c7ac0ccb5a4ddd&amp;amp;chksm=906c4c57a71bc54163572db0e1479404a05007f52c2b93268029b54d03ef92e85e90b77721c7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.42567567567567566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0iby62tdLGEItwv62ElKWI6QaDUWEUHGQhway5nFJwofQvttMWk7s8M8Y8uz6iayjzicd7MaWnnbbALA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjQ0Mjk2NA==&amp;amp;mid=2247487885&amp;amp;idx=1&amp;amp;sn=97f2eead7e4bdad9132ab9f95485c101&amp;amp;chksm=906c49b6a71bc0a0e66737b92f7fdef84e1e25b5a766ea5af93ca16f741be5a90b333218b171&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.42567567567567566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy08KW2Sic2JeL0ibKA6L6GsH9ca0jHOtiaicwbXFTD1Ba73pvcwl6KZ6MtAz5CS2CNk3kzwf4XAo1ibiaLibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjQ0Mjk2NA==&amp;amp;mid=2247487763&amp;amp;idx=1&amp;amp;sn=1b26fc088f6292a0787311f4c0afeb8b&amp;amp;chksm=906c4928a71bc03eacf9920dd8e04f8f8b5cffc6777a68122951038a532e20a3b0ccb0d99f4e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.42567567567567566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy09hhLbnWpZ2OzAmGhiaGjScK0Dry0jOzsZBIcQsvsvaJ6ZOia6mCV3AmXmExeGl7vSrMMojdyCn0r2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjQ0Mjk2NA==&amp;amp;mid=2247487697&amp;amp;idx=1&amp;amp;sn=b5fd047614b1c26513fde26a63390553&amp;amp;chksm=906c48eaa71bc1fc417c435263062f9f9205e9738f72db6f9e4350c86d9453da8bc420959251&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.42567567567567566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy09hhLbnWpZ2OzAmGhiaGjScKIAaAvjquM3zCtBbdT4T6n1SLWqGYkyorYNhUXRKGxJha4PrfmKicBLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjQ0Mjk2NA==&amp;amp;mid=2247487499&amp;amp;idx=1&amp;amp;sn=8a41ac50466d8782b0358c5f7d7a08a1&amp;amp;chksm=906c4830a71bc12609b0d6e928a3f6246c045e6484e7f69f12d45ba18764c19ff78c012bcb87&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.42567567567567566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0ic2tHucZhMZMibqia1ScPJETlBFz1FicRYTUicXibwLTt6XKQDJhicVbuJdgPEDHNOe56T2QHpTK1CzbNYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjQ0Mjk2NA==&amp;amp;mid=2247487356&amp;amp;idx=1&amp;amp;sn=ba0d1e883519a4c2cfe5d836ae1a7e6a&amp;amp;chksm=906c5747a71bde5176359d313ef0465ad2a78f69ec4e4921139a828fce61c9897523066ea3b4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.42567567567567566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0ibIDDe9L8hPq9yxNnerTeebiaaBichn1rJKaCzk04BibdfqOJ6lcPeN3kUqBJJVialkVHmP9Z0sT16HUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools-id=&quot;95905&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93529&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjQ0Mjk2NA==&amp;amp;mid=2247487173&amp;amp;idx=1&amp;amp;sn=bc356e8e9703416531e29a8c92cd5c50&amp;amp;chksm=906c56fea71bdfe842e44b412059530cd6d4ad58695569e0e7754eaf4bb5db48f276b9b074d8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.42567567567567566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0ibvicApEqxGpXN32YrsZQvCBLE4XNWicooQGpDntj3S8iab3iaHjyDotZkjKAKrSQ3QHDxANxbac77Gww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjQ0Mjk2NA==&amp;amp;mid=2247487013&amp;amp;idx=1&amp;amp;sn=545e85b985583d603a631cb620299fee&amp;amp;chksm=906c561ea71bdf0820423b583ebe90c4af31fe4dda791297d12e1e4962ef1be2000b7f0eea36&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.42567567567567566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibsfLhQMgy0icDqebPNNgRALkVbU1UPiblbY5K9sr61zS5OzZ25pJCrOOdc2FicTo01ibR7ibia7D4exJDktt4rl0iaZibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;创作不易，点个「&lt;/span&gt;&lt;strong&gt;&lt;span&gt;在看&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;」给我点动力&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;img data-ratio=&quot;0.5691057&quot; data-type=&quot;png&quot; data-w=&quot;123&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pDibwBSrmL6j7exDMu0DV2tJnLyFibnD8NJs4ACC0sqUb3uWk052g53Aw3lOiaTmFvvFp3fRSRed22XTsEexnGMhg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f4bdd8562d54ce24227e0cc51dcadcb1</guid>
<title>详解低延时高音质：编解码篇</title>
<link>https://toutiao.io/k/naeaupk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-id=&quot;97593&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section hm_fix=&quot;377:406&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2173913043478262&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBFkj0DYqoBT4b2b339voWoic5qy7qp6RjBmvjj34mPV3YUjRsjoaLiafJkibtNyk9NicLmvFWxGB6955g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;23&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;语音社交已经出现了数十年，而近期的“互动播客”场景让音频互动再次成为业界焦点。如何提供好的音频互动体验？怎么优化音质？如何应对全球传输下的网络挑战？如何在高音质的基础上让声音更悦耳？我们将从今天开始通过「详解低延时高音质」系列内容，从多个层面深入浅出逐一解答这些问题。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;继 Elon Musk 后，Bill Gates 也开了一场“&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNzA1OTA2OQ==&amp;amp;mid=2657215248&amp;amp;idx=1&amp;amp;sn=87e20042f1a3bba1747a6d7296d6e4f9&amp;amp;chksm=8c8d6202bbfaeb14d7b11ecbb671c7fea3c274a84736c98f9c6293c161d3498681bf2d03c5ce&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;互动播客&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;互动播客&lt;/a&gt;”。&lt;/span&gt;&lt;span&gt;现在，已有很多团队开始加码音频社交场景。&lt;/span&gt;&lt;span&gt;这个场景看似实现简单，但想让身处不同国家的用户得到相同的高音质体验，却没那么容易。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.11386138613861387&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBFkj0DYqoBT4b2b339voWoicETTjp1SraLSM2UI7bIB5DYwTianTuLx6IjOfNdHmwTA6uvheoKG1RDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1616&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么我们接下来就从编解码、降噪与回声消除算法、网络传输、音质优化几方面，由浅入深地讲讲高音质、低延时背后的技术原理与“改造”思路。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们今天先来讲一下语音编解码器。不过在讲语音编解码器之前，我们需要先了解音频编解码的原理，才能更快地理解到底是什么在影响着音质体验。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101598&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9774436090225563&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YO07vjlZVBFkj0DYqoBT4b2b339voWoicPzAgmuvxfuX05WxW8ujU8CO3icb7h0BIJIRghn7iaN1icxiaHrDx5a4DKg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;266&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;362:305&quot;&gt;语音编码与音乐编码&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p line=&quot;oVi2&quot;&gt;&lt;span&gt;音频编码指的是把音频信号转化为数字码流的过程（如下图所示）。在这个过程中，音频信号会被分析从而产生特定参数。随后，这些参数会按照一定规则写入比特流。这个比特流也就是我们常说的码流。解码端接收到码流后，会按照约定好的规则将码流还原为参数，再使用这些参数构建出音频信号。&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4397163120567376&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBFkj0DYqoBT4b2b339voWoicmWtysmTkzvPeDF7GYqSy87p4ob44micric9FZibdOZ61vy524y08fkckg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;705&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;图片源自：&lt;span&gt;Earlham College&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;音频编解码器的发展历史非常悠久，早期编解码器的核心算法是非线性量化，这是一种现在看来比较简单的算法，其压缩效率并不算高，但适用于包括语音和音乐在内的绝大多数音频类型。之后，随着技术的发展和编解码分工的细化，编解码器的演进方向分成了两条路——语音编码器和音乐编码器。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;主要用来编码语音信号的语音编解码器，开始逐渐向基于时域线性预测框架的方向演化。这种编解码器参考了声道的发音特性，将语音信号分解为主要的线性预测系数和次要的残差信号。&lt;strong&gt;线性预测系数编码所需的比特率非常少，却能高效的构建出语音信号的“骨骼”；残差信号则像是“血肉”，能够补充出语音信号的细节。&lt;/strong&gt;这种设计大幅提升了语音信号的压缩效率，但是这种基于时域的线性预测框架在有限复杂度下无法很好的编码音乐信号。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而针对音乐信号进行编码的音乐编解码器则走上了另一条演化的道路。因为相比时域信号，频域信号的信息更多的集中在少部分频点上，更利于编码器对其进行分析和压缩。所以音乐编解码器基本都会选择对在频域上对信号进行编码。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;后来，随着技术日趋成熟，两种编解码架构又再次走到了一起，即语音音乐混合编码器，WebRTC 中默认使用的编解码器 Opus 就是这类编解码器。这类编解码器的特点是融合了两种编码框架，并针对信号类型自动切换合适的编码框架。一些国内外知名的产品都会用到 Opus ，比如Discord。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101598&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9774436090225563&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YO07vjlZVBFkj0DYqoBT4b2b339voWoicPzAgmuvxfuX05WxW8ujU8CO3icb7h0BIJIRghn7iaN1icxiaHrDx5a4DKg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;266&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;362:305&quot;&gt;语音编码中，什么在影响互动体验？&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;说起语音编解码器的一些技术指标，一般会谈到采样率、码率、复杂度、抗丢包能力等，那这些技术指标分别代表什么，对音频体验的影响又是怎样的呢？&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;你可能看到过“采样率越高，音质越好”、“编码复杂度越高越好”的说法，但事实并非如此！&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、采样率&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从人耳可以听到的模拟信号，转化到计算机可以处理的数字信号，需要一个采样的过程。声音可以被分解为不同频率不同强度正弦波的叠加。采样可以想象成在声波上采集了一个点。而采样率指的就是在这个过程中每秒采样的点数，采样率越高，表示在这个转化过程损失的信息越少，也就是越接近原声。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;p line=&quot;F1kW&quot;&gt;&lt;img data-ratio=&quot;0.475&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YO07vjlZVBFkj0DYqoBT4b2b339voWoicIvRVuWXgFHs7CFjf8m60LILPJIpd9Plwf3c70RRQmyWIfFJWZX3Ppg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;采样率决定了音频信号的分辨率。在人耳可感知范围内，&lt;strong&gt;采样率越高，高频分量就被保留的越多，这段信号的听感就越清晰明亮。&lt;/strong&gt;举个例子，我们打传统电话时，往往会感觉对方的声音比较沉闷，这是因为传统电话的采样率是 8kHz，只保留了能保证可懂度的低频信息，很多高频的分量被丢失了。所以想要音频互动体验越好，就需要在人耳可感知范围内尽量提高采样率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、码率&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;经过采样，声音从模拟信号转化为数字信号。码率表示的就是这个数字信号在单位时间内的数据量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;码率决定了音频信号经过编解码后的细节还原度。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;编解码器会把给定的码率按优先级分配给各个分析模块输出的参数。在编码码率有限的情况下，编解码器会优先保证对语音质量影响较大的参数进行编码，而放弃编码一些影响较小的参数。这样在解码端，因为使用的参数并不完整，所以其构建出的语音信号也会有难以避免的损伤。一般来说，同一款编解码器的码率越高，其编解码后的损伤就越小。&lt;strong&gt;但码率并不是越高越好，一方面，码率和编解码质量并不是线性关系，在超过“质量甜点”后，码率升高对质量的提升开始变得不明显；另一方面，在实时互动中，码率过高可能挤占带宽产生网络拥塞，从而引发丢包，反过来破坏了用户体验。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;73&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;关于质量甜点：在视频领域，质量甜点指的是在既定的码率和屏幕大小下通过设定合理的分辨率和帖速率来得到最佳视频主观质量体验。在音频领域也有类似的情况。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、编码复杂度&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;编码复杂度一般集中在编码端信号分析模块。一般来说，对语音信号分析的越详尽，其潜在压缩率可能就越高，所以编码效率和复杂度有一定相关性。同样的，编码复杂度和编解码质量亦不是线性关系，两者之间也存在一个“质量甜点”，&lt;strong&gt;能否在有限复杂度的前提下设计出高质量的编解码算法往往直接影响了编解码器的可用性。&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;四、抗丢包能力&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，抗丢包的原理是什么？我们在传输音频数据的时候会遇到丢包，如果当前数据包丢失了，我们希望可以通过某种手段来猜出来或者得到当前帧大概的信息，然后利用这些不完全准确的信息，解码出一个和原始信号相近的语音帧。当然，只靠凭空猜一般是没什么好结果的，如果前一个数据包或者后一个数据包能告诉解码器当前丢失包的一些关键信息就好了，这个信息越多，越有利于解码端恢复出丢失的语音帧。这些包含在“前一个数据包”或“后一个数据包”中的“关键信息”，也就是我们之后要提到的“帧间冗余信息”。（&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNzA1OTA2OQ==&amp;amp;mid=2657207420&amp;amp;idx=1&amp;amp;sn=6edffa677dd1c897a990847c23941f5c&amp;amp;chksm=8c8d456ebbfacc78b735fed6535d663d7c9857761ced0196d7b182ca410c05078b3d674bcf1f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;往期我们讲过丢包对抗的更多知识&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;往期我们讲过丢包对抗的更多知识&lt;/a&gt;）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，抗丢包能力和编码效率是相对互斥的，编码效率的提升往往需要尽量减少帧间的信息冗余，而抗丢包能力又依赖一定的帧间信息冗余，帧间信息冗余可以保证在当前数据包丢失时，通过前/后序语音帧恢复出当前语音帧。在实时互动场景下，因为用户的网络是非可靠网络，可能一个用户走着走着就进了电梯，或坐在高速行驶的车上。在这种网络里，充斥着丢包与延时抖动，所以编解码抗丢包能力又是不可或缺的。因此，&lt;strong&gt;如何平衡编码效率和抗丢包能力，也需要经过详尽的算法设计和打磨验证。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101598&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9774436090225563&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YO07vjlZVBFkj0DYqoBT4b2b339voWoicPzAgmuvxfuX05WxW8ujU8CO3icb7h0BIJIRghn7iaN1icxiaHrDx5a4DKg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;266&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;362:305&quot;&gt;如何平衡音频体验与技术指标？&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;那&lt;/span&gt;声&lt;span&gt;网&lt;/span&gt;&lt;/span&gt;&lt;span&gt;是怎么做的呢？我们的工程师综合考虑了上述几点，打造了一款专为实时通讯使用的高清语音编解码器 Agora Nova（以下简称 Nova）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;32kHz 采样率&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先在采样率上的选择，Nova 并没有选择其他语音编解码器使用的8khz采样率或16khz采样率，而是选择了更高的 32kHz 采样率。这意味着 Nova 首先在通话音质的起跑线上就取得了较大的领先优势。虽然业内常用的 16kHz 采样率（备注：微信用的就是 16kHz）已经满足了语音可懂度的基本需求，但部分语音细节仍然需要更高的采样率才能捕捉到，我们希望提供更高清的语音通话能力，即既保证了可懂度，又提升了清晰度，这也是我们选择 32kHz 的原因。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;优化编码复杂度&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;采样率越高，语音清晰度就越高，同时意味着单位时间内需要分析/编码/传输的采样点就越多，编码码率和复杂度都需要相应地增加。编码码率和复杂度的增加势必会给用户的带宽和设备性能功耗带来压力。但这不是我们想看到的。为此，我们经过理论推导和大量实验验证，设计了一套精简的语音高频分量编码系统，在分析复杂度增加很小前提下，最低使用 0.8kbps 即可实现高频信号的编码（基于不同技术，以往要表达高频信号，码率一般需要高于1~2kbps），极大增加了语音信号的清晰度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;平衡抗丢包性能与编码效率&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在抗丢包能力的保障上，我们也在保证编码效率的前提下选择了最平衡的方案，经过实验验证，这种方案即又保证了编码压缩效率，又保证了丢包时的恢复率。此外，除了 Nova，针对不稳定的网络环境，我们还研发上线了抗丢包能力更强的&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNzA1OTA2OQ==&amp;amp;mid=2657211380&amp;amp;idx=2&amp;amp;sn=bd6f907fe212535350636a84a4924368&amp;amp;chksm=8c8d52e6bbfadbf0b0674b0f5f3f3f510bc90ecf2ee671c02347b176adeb9ba802780402e417&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;语音编解码器 Solo&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;语音编解码器 Solo&lt;/a&gt; 和&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNzA1OTA2OQ==&amp;amp;mid=2657209868&amp;amp;idx=1&amp;amp;sn=203abbb53ff24c84a25b63bd0c75fb38&amp;amp;chksm=8c8d4f1ebbfac6083c7a5120f4d8737badf09f7a519ba625fa0fee44b1a06f3efdc5352fd2ae&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;语音音乐混合编解码器 SoloX &quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;语音音乐混合编解码器 SoloX &lt;/a&gt;等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Agora Nova vs. Opus&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Nova 有着丰富的模式选择以供不同场景选择，诸如可适应模式、高品质模式、低能耗高品质模式、超高频模式和超低比特率模式等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果把 Nova 和先进的开源编解码器 Opus 做对比，得益于 Nova 高效的信号处理算法，其在通用语音编码码率下，有效频谱信息要比同等码率下的 Opus 多 30%。在主、客观评价体系下，Nova 的语音编码质量高于 Opus：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;得益于这款高清的语音编解码器，声网 SDK 为全球用户提供了一致的高质量音频互动体验。其实一段语音通话体验的好坏，除了直接与编解码器的编码质量关联，也会极大地受到其他模块的影响，比如回声消除、降噪、网络传输等，我们将在下一期介绍声网在回声消除与降噪算法方面的最佳实践。&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101592&quot;&gt;&lt;section&gt;&lt;section hm_fix=&quot;363:352&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9774436090225563&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YO07vjlZVBFkj0DYqoBT4b2b339voWoicPzAgmuvxfuX05WxW8ujU8CO3icb7h0BIJIRghn7iaN1icxiaHrDx5a4DKg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;266&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;END&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3037037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YO07vjlZVBEHqOZjJmEPvV8JHfEDRRkq4aQIgGKpLLGE7KUcBVJVMhkRibEKbYLzKkOYzMbia7B90GEslXrkCYUg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>320bc3c3c1a8ea2658bb427fb3ae9f5f</guid>
<title>Tailwind 入门</title>
<link>https://toutiao.io/k/8a4wd36</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-header&quot;&gt;&lt;h1 class=&quot;title&quot;&gt;Tailwind 入门&lt;/h1&gt;&lt;p class=&quot;meta&quot;&gt;胡伟红 Posted at — Mar 9, 2021
&lt;span class=&quot;meta&quot; id=&quot;busuanzi_container_page_pv&quot;&gt;阅读 &lt;span id=&quot;busuanzi_value_page_pv&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;markdown&quot;&gt;&lt;p&gt;作为前端开发，最痛苦的就是项目后期调整 CSS 代码，复杂凌乱的 CSS “牵一发动全身”。Tailwind 为 CSS 的使用提供了便利，让开发者可直接在 HTML 源码上构建完全定制化的设计。&lt;/p&gt;&lt;h2 id=&quot;postcss&quot;&gt;PostCSS&lt;/h2&gt;&lt;p&gt;PostCSS 是对 CSS 进行处理的工具，通过各种不同的插件编译出你所需要的的 CSS。
常用的插件有：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;自动补全浏览器前缀：autoprefixer&lt;/li&gt;&lt;li&gt;使用下个版本 css 的草案语法：postcss-cssnext&lt;/li&gt;&lt;li&gt;自动把 px 代为转换成 rem： postcss-pxtorem&lt;/li&gt;&lt;li&gt;将 px 转为 viewport 的单位：postcss-px-to-viewport&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;tailwind&quot;&gt;Tailwind&lt;/h2&gt;&lt;p&gt;Tailwind 的理念是工具优先（Utilities First），它不提供 UI 组件，而是提供了基础的工具类（utility classes），让开发者可直接在 HTML 源码上构建完全定制化的设计。&lt;/p&gt;&lt;p&gt;Tailwind 可以作为 PostCSS 插件来使用。&lt;/p&gt;&lt;h3 id=&quot;为什么选择-tailwind&quot;&gt;为什么选择 Tailwind&lt;/h3&gt;&lt;p&gt;先来看一张图:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;imgs/tailwind-sample.png&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;再看下面两段代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-HTML&quot; data-lang=&quot;HTML&quot;&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; HTML + CSS &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;chat-notification&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;chat-notification-logo-wrapper&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span&gt;img&lt;/span&gt;
      &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;chat-notification-logo&quot;&lt;/span&gt;
      &lt;span&gt;src&lt;/span&gt;=&lt;span&gt;&quot;/assets/images/logo.png&quot;&lt;/span&gt;
      &lt;span&gt;alt&lt;/span&gt;=&lt;span&gt;&quot;ChitChat Logo&quot;&lt;/span&gt;
    /&amp;gt;
  &amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;chat-notification-content&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span&gt;h4&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;chat-notification-title&quot;&lt;/span&gt;&amp;gt;ChitChat&amp;lt;/&lt;span&gt;h4&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span&gt;p&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;chat-notification-message&quot;&lt;/span&gt;&amp;gt;You have a new message!&amp;lt;/&lt;span&gt;p&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span&gt;style&lt;/span&gt;&amp;gt;
  .&lt;span&gt;chat-notification&lt;/span&gt; {
    &lt;span&gt;display&lt;/span&gt;: &lt;span&gt;flex&lt;/span&gt;;
    &lt;span&gt;max-width&lt;/span&gt;: &lt;span&gt;24&lt;/span&gt;&lt;span&gt;rem&lt;/span&gt;;
    &lt;span&gt;margin&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt; &lt;span&gt;auto&lt;/span&gt;;
    &lt;span&gt;padding&lt;/span&gt;: &lt;span&gt;1.5&lt;/span&gt;&lt;span&gt;rem&lt;/span&gt;;
    &lt;span&gt;border-radius&lt;/span&gt;: &lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;rem&lt;/span&gt;;
    &lt;span&gt;background-color&lt;/span&gt;: &lt;span&gt;#fff&lt;/span&gt;;
    &lt;span&gt;box-shadow&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;&lt;span&gt;px&lt;/span&gt; &lt;span&gt;25&lt;/span&gt;&lt;span&gt;px&lt;/span&gt; &lt;span&gt;-5&lt;/span&gt;&lt;span&gt;px&lt;/span&gt; &lt;span&gt;rgba&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0.1&lt;/span&gt;), &lt;span&gt;0&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;span&gt;px&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;span&gt;px&lt;/span&gt; &lt;span&gt;-5&lt;/span&gt;&lt;span&gt;px&lt;/span&gt; &lt;span&gt;rgba&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0.04&lt;/span&gt;);
  }
  .&lt;span&gt;chat-notification-logo-wrapper&lt;/span&gt; {
    &lt;span&gt;flex-shrink&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;
  }
  .&lt;span&gt;chat-notification-logo&lt;/span&gt; {
    &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;rem&lt;/span&gt;;
    &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;rem&lt;/span&gt;;
  }
  .&lt;span&gt;chat-notification-content&lt;/span&gt; {
    &lt;span&gt;margin-left&lt;/span&gt;: &lt;span&gt;1.5&lt;/span&gt;&lt;span&gt;rem&lt;/span&gt;;
    &lt;span&gt;padding-top&lt;/span&gt;: &lt;span&gt;0.25&lt;/span&gt;&lt;span&gt;rem&lt;/span&gt;;
  }
  .&lt;span&gt;chat-notification-title&lt;/span&gt; {
    &lt;span&gt;color&lt;/span&gt;: &lt;span&gt;#1a202c&lt;/span&gt;;
    &lt;span&gt;font-size&lt;/span&gt;: &lt;span&gt;1.25&lt;/span&gt;&lt;span&gt;rem&lt;/span&gt;;
    &lt;span&gt;line-height&lt;/span&gt;: &lt;span&gt;1.25&lt;/span&gt;;
    &lt;span&gt;font-weight&lt;/span&gt;: &lt;span&gt;500&lt;/span&gt;;
  }
  .&lt;span&gt;chat-notification-message&lt;/span&gt; {
    &lt;span&gt;color&lt;/span&gt;: &lt;span&gt;#718096&lt;/span&gt;;
    &lt;span&gt;font-size&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;rem&lt;/span&gt;;
    &lt;span&gt;line-height&lt;/span&gt;: &lt;span&gt;1.5&lt;/span&gt;;
  }
&amp;lt;/&lt;span&gt;style&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-HTML&quot; data-lang=&quot;HTML&quot;&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; HTML + Tailwind&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span&gt;div&lt;/span&gt;
  &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4&quot;&lt;/span&gt;
&amp;gt;
  &amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;flex-shrink-0&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span&gt;img&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;h-12 w-12&quot;&lt;/span&gt; &lt;span&gt;src&lt;/span&gt;=&lt;span&gt;&quot;/assets/images/logo.png&quot;&lt;/span&gt; &lt;span&gt;alt&lt;/span&gt;=&lt;span&gt;&quot;ChitChat Logo&quot;&lt;/span&gt; /&amp;gt;
  &amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;text-xl font-medium text-black&quot;&lt;/span&gt;&amp;gt;ChitChat&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span&gt;p&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;text-gray-500&quot;&lt;/span&gt;&amp;gt;You have a new message!&amp;lt;/&lt;span&gt;p&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很明显，使用 Tailwind 的代码量少了很多，代码也清晰了。&lt;/p&gt;&lt;p&gt;Tailwind 的部分优点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;自定义&lt;/li&gt;&lt;li&gt;支持响应式&lt;/li&gt;&lt;li&gt;压缩后 CSS 文件非常小&lt;/li&gt;&lt;li&gt;不需要关注命名&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;&lt;p&gt;下面讲解在 Angular 下，如何安装、配置 Tailwind。如下是安装命令：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;npm install -D tailwindcss@latest postcss@latest autoprefixer@latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;配置&quot;&gt;配置&lt;/h3&gt;&lt;p&gt;执行如下命令，会生成 tailwind.config.js 文件：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;npx&lt;/span&gt; &lt;span&gt;tailwindcss&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;
&lt;span&gt;npx&lt;/span&gt; &lt;span&gt;tailwindcss&lt;/span&gt; &lt;span&gt;init&lt;/span&gt; -&lt;span&gt;p&lt;/span&gt; &lt;span&gt;//同时生成 postcss.config.js 文件
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;tailwind.config.js 内容如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;module&lt;/span&gt;.&lt;span&gt;exports&lt;/span&gt; = {
  &lt;span&gt;purge&lt;/span&gt;: [],
  &lt;span&gt;darkMode&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;// or &#x27;media&#x27; or &#x27;class&#x27;
&lt;/span&gt;&lt;span/&gt;  &lt;span&gt;theme&lt;/span&gt;: {
    &lt;span&gt;extend&lt;/span&gt;: {},
  },
  &lt;span&gt;variants&lt;/span&gt;: {
    &lt;span&gt;extend&lt;/span&gt;: {},
  },
  &lt;span&gt;plugins&lt;/span&gt;: [],
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;postcss.config.js 内容如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;module&lt;/span&gt;.&lt;span&gt;exports&lt;/span&gt; = {
  &lt;span&gt;plugins&lt;/span&gt;: {
    &lt;span&gt;tailwindcss&lt;/span&gt;: {},
    &lt;span&gt;autoprefixer&lt;/span&gt;: {},
  },
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果想了解 Tailwind 的配置，还可以通过如下命令生成 Tailwind 的所有缺省配置：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;npx tailwindcss init --full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;不使用-postcss&quot;&gt;不使用 PostCSS&lt;/h3&gt;&lt;p&gt;如果不熟悉 PostCSS，可以直接用如下命令生成 Tailwind.css 文件：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;npx tailwindcss-cli@latest build -o /assets/styles/tailwind.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样会根据 Tailwind 的配置文件，在项目的 assets/styles 目录下生成一个名为 tailwind.css 文件，查看这个文件你会发现 Tailwind 中定义的类都在这个文件中。在 index.html 中引入这个文件：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-HTML&quot; data-lang=&quot;HTML&quot;&gt;&amp;lt;&lt;span&gt;link&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;=&lt;span&gt;&quot;/tailwind.css&quot;&lt;/span&gt; &lt;span&gt;rel&lt;/span&gt;=&lt;span&gt;&quot;stylesheet&quot;&lt;/span&gt; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以使用 Tailwind 了。&lt;/p&gt;&lt;p&gt;如果希望在自定义的 css 文件中使用 Tailwind 的内容，比如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span&gt;//app.css
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;@tailwind&lt;/span&gt; &lt;span&gt;base&lt;/span&gt;;
&lt;span&gt;@tailwind&lt;/span&gt; &lt;span&gt;components&lt;/span&gt;;

&lt;span&gt;.&lt;/span&gt;&lt;span&gt;btn&lt;/span&gt; {
  &lt;span&gt;@apply&lt;/span&gt; &lt;span&gt;px-4&lt;/span&gt; &lt;span&gt;py-2&lt;/span&gt; &lt;span&gt;bg-blue-600&lt;/span&gt; &lt;span&gt;text-white&lt;/span&gt; &lt;span&gt;rounded&lt;/span&gt;;
}

&lt;span&gt;@tailwind&lt;/span&gt; &lt;span&gt;utilities&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样可以通过这个命令生成对应的 css 文件：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;npx tailwindcss-cli@latest build ./src/assets/styles/app.css -o ./dist/assets/styles/app.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;使用-postcss&quot;&gt;使用 PostCSS&lt;/h3&gt;&lt;p&gt;通过提前编译，可以正常使用 Tailwind CSS，但是对于开发着而言有些麻烦，开发过程中对 css 的更改不能做到“即改即得”的效果。这就需要 PostCSS 来出力了，在开发模式下随时编译更新 CSS。&lt;/p&gt;&lt;p&gt;执行如下命令安装相关包：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;npm install postcss-loader@^4.2.0 postcss-scss ngx-build-plus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里需要注意，ngx-build-plus 会将 angular.json 文件中的 @angular-devkit/build-angular 替换为 ngx-build-plus。&lt;/p&gt;&lt;p&gt;在 postcss.config.js 引入插件，内容如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;module&lt;/span&gt;.&lt;span&gt;exports&lt;/span&gt; = {
  &lt;span&gt;plugins&lt;/span&gt;: [
    &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;postcss-import&quot;&lt;/span&gt;),
    &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;tailwindcss&quot;&lt;/span&gt;),
    &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;autoprefixer&quot;&lt;/span&gt;),
  ],
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新增文件 webpack.config.js , 内容如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;module&lt;/span&gt;.&lt;span&gt;exports&lt;/span&gt; = {
  &lt;span&gt;module&lt;/span&gt;: {
    &lt;span&gt;rules&lt;/span&gt;: [
      {
        &lt;span&gt;test&lt;/span&gt;: &lt;span&gt;/\.scss$/&lt;/span&gt;,
        &lt;span&gt;loader&lt;/span&gt;: &lt;span&gt;&quot;postcss-loader&quot;&lt;/span&gt;,
        &lt;span&gt;options&lt;/span&gt;: {
          &lt;span&gt;postcssOptions&lt;/span&gt;: {
            &lt;span&gt;ident&lt;/span&gt;: &lt;span&gt;&quot;postcss&quot;&lt;/span&gt;,
            &lt;span&gt;syntax&lt;/span&gt;: &lt;span&gt;&quot;postcss-scss&quot;&lt;/span&gt;,
            &lt;span&gt;path&lt;/span&gt;: &lt;span&gt;&quot;./postcss.config.js&quot;&lt;/span&gt;,
          },
        },
      },
    ],
  },
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改 package.json 文件：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;...
&lt;span&gt;&quot;scripts&quot;&lt;/span&gt;: {
    &lt;span&gt;&quot;ng&quot;&lt;/span&gt;: &lt;span&gt;&quot;ng&quot;&lt;/span&gt;,
    &lt;span&gt;&quot;start&quot;&lt;/span&gt;: &lt;span&gt;&quot;ng serve --extra-webpack-config webpack.config.js&quot;&lt;/span&gt;,
    &lt;span&gt;&quot;build&quot;&lt;/span&gt;: &lt;span&gt;&quot;ng build --extra-webpack-config webpack.config.js&quot;&lt;/span&gt;,
    ...
},
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 style.scss 文件中添加如下内容：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span&gt;@import&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tailwindcss/base&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;
&lt;span&gt;@import&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tailwindcss/components&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;
&lt;span&gt;@import&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tailwindcss/utilities&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以正常使用 Tailwind 了。&lt;/p&gt;&lt;h3 id=&quot;配置项&quot;&gt;配置项&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;theme：可定义颜色、字体、边框等跟视觉设计有关的内容；&lt;/li&gt;&lt;li&gt;variants：为工具插件定义的变量；&lt;/li&gt;&lt;li&gt;plugins：注册插件；&lt;/li&gt;&lt;li&gt;important：设置 Tailwind 的工具类是否添加上!important；&lt;/li&gt;&lt;li&gt;separator：分隔符；&lt;/li&gt;&lt;li&gt;purge：去掉无用的文件；&lt;/li&gt;&lt;/ol&gt;&lt;h4 id=&quot;colors&quot;&gt;colors&lt;/h4&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;theme&lt;/span&gt;: {
    &lt;span&gt;colors&lt;/span&gt;: {
      &lt;span&gt;maskblue&lt;/span&gt;:{&lt;span&gt;50&lt;/span&gt;: &lt;span&gt;&#x27;#037dd6&#x27;&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;: &lt;span&gt;&#x27;#037d06&#x27;&lt;/span&gt;}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述配置会直接对 textColor, backgroundColor, borderColor 生效，比如 bg-maskblue-50，这样直接使用即可。&lt;/p&gt;&lt;h4 id=&quot;断点breakpoints&quot;&gt;断点（Breakpoints）&lt;/h4&gt;&lt;p&gt;所谓断点就是屏幕 min-width 的限定，比如&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;theme&lt;/span&gt;: {
  &lt;span&gt;screens&lt;/span&gt;: {
    &lt;span&gt;tablet&lt;/span&gt;: &lt;span&gt;&quot;640px&quot;&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span&gt;/* 如下是编译后的内容*/&lt;/span&gt;
.&lt;span&gt;max-w-screen-tablet&lt;/span&gt; {
  &lt;span&gt;max-width&lt;/span&gt;: &lt;span&gt;640&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;;
}

@&lt;span&gt;media&lt;/span&gt; (&lt;span&gt;min-width&lt;/span&gt;: &lt;span&gt;640px&lt;/span&gt;) {
  .&lt;span&gt;tablet&lt;/span&gt;\:&lt;span&gt;container&lt;/span&gt; {
    &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;100&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;;
  }
  ...;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述设置方法会将缺省的断点覆盖掉，仅保留一个名为 tablet 的断点，如果需要使用 Tailwind 缺省的断点，可以通过 extend 来扩展：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;theme&lt;/span&gt;: {
    &lt;span&gt;extend&lt;/span&gt;: {
      &lt;span&gt;screens&lt;/span&gt;: {
        &lt;span&gt;&#x27;3xl&#x27;&lt;/span&gt;: &lt;span&gt;&#x27;1600px&#x27;&lt;/span&gt;,
      },
    },
  },
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，extend 会将设置的断点添加到断点列表的末尾，如果你添加的是一个尺寸小的断点，那就不能用 extend 的方式了，因为这会导致断点按照从小到大重新排序，可以选用如下方式将缺省断点引入：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;defaultTheme&lt;/span&gt; = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;tailwindcss/defaultTheme&#x27;&lt;/span&gt;)

&lt;span&gt;theme&lt;/span&gt;: {
  &lt;span&gt;screens&lt;/span&gt;: {
    &lt;span&gt;&#x27;tablet&#x27;&lt;/span&gt;: &lt;span&gt;&#x27;360px&#x27;&lt;/span&gt;,
    ...&lt;span&gt;defaultTheme&lt;/span&gt;.&lt;span&gt;screens&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&quot;伪类variants&quot;&gt;伪类（Variants）&lt;/h4&gt;&lt;p&gt;常见的 hover、focus、dark 就是 Variants，也可以理解为变量。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;  &lt;span&gt;//扩展伪类
&lt;/span&gt;&lt;span/&gt;  &lt;span&gt;variants&lt;/span&gt;: {
    &lt;span&gt;extend&lt;/span&gt;: {}
  },

  &lt;span&gt;//直接取代缺省的伪类
&lt;/span&gt;&lt;span/&gt;  &lt;span&gt;variants&lt;/span&gt;: {
    &lt;span&gt;backgroundColor&lt;/span&gt;: [&lt;span&gt;&#x27;active&#x27;&lt;/span&gt;],   &lt;span&gt;//只会生成 active 伪类
&lt;/span&gt;&lt;span/&gt;  },

  &lt;span&gt;variantOrder&lt;/span&gt;: [],  &lt;span&gt;//定义伪类的统一顺序
&lt;/span&gt;&lt;span/&gt;
  &lt;span&gt;//或者单独指定顺序
&lt;/span&gt;&lt;span/&gt;  &lt;span&gt;variants&lt;/span&gt;: {
    &lt;span&gt;backgroundColor&lt;/span&gt;: [&lt;span&gt;&#x27;hover&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;focus&#x27;&lt;/span&gt;],  &lt;span&gt;//hover 先于focus
&lt;/span&gt;&lt;span/&gt;    &lt;span&gt;borderColor&lt;/span&gt;: [&lt;span&gt;&#x27;focus&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;hover&#x27;&lt;/span&gt;],      &lt;span&gt;// focus 先于 hover
&lt;/span&gt;&lt;span/&gt;  },

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于更多配置这里就不详细赘述，可参见 &lt;a href=&quot;https://tailwindcss.com/docs/configuration&quot;&gt;配置文档&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;&lt;h3 id=&quot;可以在-css-中自行组合但是推荐在-html-中直接使用&quot;&gt;可以在 CSS 中自行组合，但是推荐在 HTML 中直接使用&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-CSS&quot; data-lang=&quot;CSS&quot;&gt;.&lt;span&gt;my-css&lt;/span&gt;{
  @apply &lt;span&gt;hover&lt;/span&gt;:&lt;span&gt;bg-indigo-700&lt;/span&gt;;
}

&lt;span&gt;/* 编译后的CSS代码 */&lt;/span&gt;
.&lt;span&gt;my-css&lt;/span&gt;:&lt;span&gt;hover&lt;/span&gt; {
  &lt;span&gt;--tw-bg-opacity&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;;
  &lt;span&gt;background-color&lt;/span&gt;: &lt;span&gt;rgba&lt;/span&gt;(&lt;span&gt;67&lt;/span&gt;, &lt;span&gt;56&lt;/span&gt;, &lt;span&gt;202&lt;/span&gt;, &lt;span&gt;var&lt;/span&gt;(--&lt;span&gt;tw&lt;/span&gt;-&lt;span&gt;bg&lt;/span&gt;-&lt;span&gt;opacity&lt;/span&gt;));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-HTML&quot; data-lang=&quot;HTML&quot;&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;hover:bg-indigo-700&quot;&lt;/span&gt;&amp;gt;我是hover&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;my-css&quot;&lt;/span&gt;&amp;gt;我是hover&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这里需要注意，如果在 CSS 组合会导致编译后的 CSS 文件很大，看如下代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-CSS&quot; data-lang=&quot;CSS&quot;&gt;.&lt;span&gt;my-css&lt;/span&gt;{
  @apply &lt;span&gt;hover&lt;/span&gt;:&lt;span&gt;bg-indigo-700&lt;/span&gt; &lt;span&gt;py-2&lt;/span&gt; &lt;span&gt;px-4&lt;/span&gt; &lt;span&gt;bg-maskblue-50&lt;/span&gt;;
}
&lt;span&gt;/* 编译成如下内容*/&lt;/span&gt;
.&lt;span&gt;my-css&lt;/span&gt; {
  &lt;span&gt;--tw-bg-opacity&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;;
  &lt;span&gt;background-color&lt;/span&gt;: &lt;span&gt;rgba&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;125&lt;/span&gt;, &lt;span&gt;214&lt;/span&gt;, &lt;span&gt;var&lt;/span&gt;(--&lt;span&gt;tw&lt;/span&gt;-&lt;span&gt;bg&lt;/span&gt;-&lt;span&gt;opacity&lt;/span&gt;));
}

.&lt;span&gt;my-css&lt;/span&gt;:&lt;span&gt;hover&lt;/span&gt; {
  &lt;span&gt;--tw-bg-opacity&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;;
  &lt;span&gt;background-color&lt;/span&gt;: &lt;span&gt;rgba&lt;/span&gt;(&lt;span&gt;67&lt;/span&gt;, &lt;span&gt;56&lt;/span&gt;, &lt;span&gt;202&lt;/span&gt;, &lt;span&gt;var&lt;/span&gt;(--&lt;span&gt;tw&lt;/span&gt;-&lt;span&gt;bg&lt;/span&gt;-&lt;span&gt;opacity&lt;/span&gt;));
}

.&lt;span&gt;my-css&lt;/span&gt; {
  &lt;span&gt;padding-top&lt;/span&gt;: &lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;rem&lt;/span&gt;;
  &lt;span&gt;padding-bottom&lt;/span&gt;: &lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;rem&lt;/span&gt;;
  &lt;span&gt;padding-left&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;rem&lt;/span&gt;;
  &lt;span&gt;padding-right&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;rem&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以通常不建议在 CSS 中使用 apply，而是直接在 HTML 中使用。&lt;/p&gt;&lt;h3 id=&quot;尽量使用组合类&quot;&gt;尽量使用组合类&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-HTML&quot; data-lang=&quot;HTML&quot;&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ml-7 mr-7&quot;&lt;/span&gt;&amp;gt;我是mx&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 可以合成下面的用法 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;mx-7&quot;&lt;/span&gt;&amp;gt;我是mx&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Tailwind 提供了丰富的工具类，选择合适的使用，“宁少勿多”。&lt;/p&gt;&lt;h3 id=&quot;定义自己的工具类&quot;&gt;定义自己的工具类&lt;/h3&gt;&lt;p&gt;如果 Tailwind 提供的工具类不够用，还可以定义自己的工具类：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-CSS&quot; data-lang=&quot;CSS&quot;&gt;@&lt;span&gt;layer&lt;/span&gt; &lt;span&gt;utilities&lt;/span&gt; {
  .&lt;span&gt;my-fontsize&lt;/span&gt; {
    &lt;span&gt;font-size&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;不要组件嵌套组件&quot;&gt;不要组件嵌套组件&lt;/h3&gt;&lt;p&gt;避免使用如下类型的代码:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;.&lt;span&gt;btn&lt;/span&gt; {
  ...;
}

.&lt;span&gt;btn-blue&lt;/span&gt; {
  @apply btn;
}

&lt;span&gt;/*建议分拆成如下*/&lt;/span&gt;
.&lt;span&gt;btn-blue&lt;/span&gt; {
  ...;
}

.&lt;span&gt;btn&lt;/span&gt; {
  ...;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;挑战&quot;&gt;挑战&lt;/h2&gt;&lt;p&gt;使用 Tailwind 的首要挑战是需要记住 Tailwind 的工具类的名字，刚开始使用时，会觉得不适应，好在 Tailwind 的&lt;a href=&quot;https://tailwindcss.com/docs&quot;&gt;文档&lt;/a&gt;中详细介绍了各个工具类。&lt;/p&gt;&lt;p&gt;第二个挑战就是 HTML 代码的可读性，如果直接在 HTML 使用工具类，会导致代码的可读性差。&lt;/p&gt;&lt;p&gt;第三个挑战是在开发初期进行组件设计，这就避免了开发过程中不停的定义 CSS 的类，从而导致开发后期不敢轻易的改动 CSS，以及越来越多的垃圾代码。&lt;/p&gt;&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;&lt;p&gt;Tailwind 为开发者提供了丰富的工具类，方便开发者使用。如果没有合适的组件设计或者使用方法不当，反而发挥不了 Tailwind 的优势，且增加了开发者的学习成本。这也就逼迫前端在动工前，做好组件的设计、CSS 的设计，以期提升前端开发的效率和工作质量。工具很好，且用且珍惜。&lt;/p&gt;&lt;h2 id=&quot;参考文档&quot;&gt;参考文档&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://tailwindcss.com/docs&quot;&gt;Tailwind 文档&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://tailwindcss.com/docs/optimizing-for-production&quot;&gt;产品优化&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/sandren/0f22e116f01611beab2b1195ab731b63&quot;&gt;Tailwind 最佳实践&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>