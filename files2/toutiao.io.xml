<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>b56596d46553bef1132d3efe24d274e9</guid>
<title>爬虫管理平台 Crawlab 新版本的正确打开姿势（一）</title>
<link>https://toutiao.io/k/rz78afm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Crawlab&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; 是开源分布式爬虫管理平台，近期发布了 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIxOTMxMjA1NQ==&amp;amp;mid=2247483981&amp;amp;idx=1&amp;amp;sn=073668649bb9977cd70a7c1f09d5011e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;v0.6 beta 版本&lt;/a&gt;，在性能、稳定性、易用性等方面做了大量的优化。它相对于之前的 v0.5 版本有什么区别？其中主要优化的部分主要是什么？作为 Crawlab 用户我是否应该迁移到新版本上？本篇文章将从新版本的新特性出发，介绍新老版本的主要区别，以及如何安装使用新版本，让对 Crawlab v0.6 新版本感兴趣的小伙伴更容易上手。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;新特性介绍&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;众所周知，v0.6 新版本做了大量的底层优化，不过作者不打算介绍底层原理，我们将在之后的文章中详细介绍。这个小节将从使用方面主要介绍新版本的主要新功能和特性。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;文件上传优化&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Crawlab v0.6 版本之前，上传爬虫文件有 2 种方式：ZIP 打包或者使用 CLI 工具。ZIP 打包上传被证明是一种落后的方式，特别是遇到 Scrapy 项目，必须要求在 &lt;code&gt;scrapy.cfg&lt;/code&gt; 所在目录（根目录）进行打包，否则 Crawlab 内置的 Scrapy 辅助工具将识别不出来，或者运行时因为目录层级结构不一致导致错误；此外，即使使用 CLI 上传，也会出现类似的目录层级结构问题。在新版本中，我们保留了 CLI 上传的方式，移除了 ZIP 上传方式，另外添加了拖拽、选择目录、选择文件等非 ZIP 打包上传文件的方式。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;拖拽上传&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拖拽上传非常简单，就跟在 IDE 里操作一样，将文件从操作系统目录中拖拽到文件编辑器导航栏其中一个目录上，即可上传。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6108333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sczKD2TyOPhfyuuKZwdX83rhD83DWlqkpxLWKTglDcZ2Mf00A9bJdz61THLSamu2yn2HOtrvHDgjx1FCOGyltQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1200&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;crawlab-drag-drop-upload&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;选择目录上传&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果您想上传整个爬虫目录，同样可以在 Crawlab 新版本中操作。操作方式非常简单，点击文件上传按钮，点选目录，再点击上传按钮并选择待上传目录，就可以将整个爬虫项目上传到 Crawlab 了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.611157368859284&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sczKD2TyOPhfyuuKZwdX83rhD83DWlqkzqiaMAbtYFKl7TmNiaAmZUqBuThyLhsibl6lSJl68hLYjLKt3ymz5AtRw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1201&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;crawlab-select-folder-upload&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;选择文件上传&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了拖拽上传和选择目录上传，Crawlab 也允许单独选择文件上传。操作方式跟选择目录上传类似。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6108333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sczKD2TyOPhfyuuKZwdX83rhD83DWlqkgKoicmcRsodWdnbiaoHmp0F3goYv8rxVN1c3InCESzkcQciakAcSzfibvw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1200&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;crawlab-select-file-upload&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;文件编辑器优化&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老版本 (v0.5) 的文件编辑器虽然可以做一些基础的文件编辑功能，但它似乎还不够像主流文件编辑器软件这样完善，说白了就是用得不爽。Crawlab 新版本在文件编辑器方面做了大量的优化，几乎是推倒重做。目的就是为了让用户在界面上操作文件更舒服，而不用勉强采用 “本地编辑再上传运行” 的蹩脚方式。很多时候，爬虫工程师需要及时调试代码，而 Crawlab 新版本希望通过这次优化让用户尽可能方便的在界面上操作文件，从而摆脱对本地编辑的依赖。除了之前提到的优化后的文件目录上传方式以外，Crawlab 文件编辑器还支持更多现代化代码编辑器功能，包括文件标签、右键菜单操作、拖拽移动、智能图标等功能。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;文件标签&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候编辑代码时需要多个文件同时操作，这在主流代码编辑器中都有实现，而 Crawlab 新版本也同样支持。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以双击文件打开多个标签。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6108333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sczKD2TyOPhfyuuKZwdX83rhD83DWlqkWdutbYuR7rKYAuOcdpOsokFu42G1cQF9iagE1zibwYeboANQdeuZ2oAw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1200&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;crawlab-file-editor-open-tabs&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也可以点击文件标签来回切换。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6108333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sczKD2TyOPhfyuuKZwdX83rhD83DWlqkwnAL1g07l2EaRf5b7uiapDHDD39s61UyDAP2KCicyXnibkmEIy4HekxBQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1200&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;crawlab-file-editor-switch-tabs&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有更多复杂操作，例如拖拽和右键菜单操作。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6108333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sczKD2TyOPhfyuuKZwdX83rhD83DWlqkFOFY2InOJmuAdB0tu7nIBfg97cwIliciaYBGgnLoeAs1sUGPjN3VET3A/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1200&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;crawlab-filer-editor-drag-tabs&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;右键菜单操作&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Crawlab 文件编辑器可以右键点击左侧的文件或目录进行更多的操作，新建文件、新建目录、重命名、复制、删除，应有尽有。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6108333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sczKD2TyOPhfyuuKZwdX83rhD83DWlqkHeXoCqo6LprcMkyTXxo3ibrtqHnaDejD2dUpNErmsRuEOq4IibesE8Ag/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1200&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;crawlab-file-editor-context-menu&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;拖拽移动&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Crawlab 文件编辑器还可以像主流 IDE 那样拖拽移动文件或目录。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6108333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sczKD2TyOPhfyuuKZwdX83rhD83DWlqksNMEEgT0KKfG4pIYBnVvY0JSpwYic7oyXQEhX8FXysfs7FjZry4Rnjg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1200&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;crawlab-file-editor-drag-drop&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;智能图标&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多人可能比较习惯 JebBrains IDEA 或 VS Code 等 IDE 中各种类别文件目录的自动指定图标，而 Crawlab 文件编辑器中也支持这个功能，让开发者可以一目了然的了解各个文件或目录是用做什么功能的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.5584415584415585&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sczKD2TyOPhfyuuKZwdX83rhD83DWlqk0HjFicQ9KSlkA9iaib7c8xD6WgdvVq8iaqzL8VaialVnZQJs1JFedq4ZJGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;308&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;crawlab-file-editor-icons&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Crawlab 文件编辑器的智能图标是基于 &lt;span&gt;atom-material-icons&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; 实现的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;表格功能优化&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Crawlab 新版本中加强了表格的优化。表格是展现列表的有效方式，例如爬虫列表、任务列表等都是以表格形式展现的。Crawlab 在新版本中允许用户进行一些高级操作，例如搜索、筛选、自定义列等功能。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;搜索&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Crawlab 表格可以点击表头的筛选按钮搜索获取相关项。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6108333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sczKD2TyOPhfyuuKZwdX83rhD83DWlqkaxB6qr2YkTUYvoRNvnYGmdvCuibgiaIMxGHZxiamo3kicLC6FOuJbpX7lw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1200&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;crawlab-table-search&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;筛选&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户也可以在 Crawlab 表格中进行筛选操作。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6108333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sczKD2TyOPhfyuuKZwdX83rhD83DWlqkA4XVuGaUNXFmTbhqb1Bs0NjZqhUXicGNnmamwxOJm1mtyVSap0pwjDQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1200&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;crawlab-table-filter&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;自定义列&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户可以在 Crawlab 表格中自定义想要展现或隐藏的列，还可以进行排序。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6108333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sczKD2TyOPhfyuuKZwdX83rhD83DWlqkYS0k9RbW9b1LmW5C5j5n7hX9eiaicneeepPe3Iw8OuKn2QZmckLYJeLw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1200&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;crawlab-table-customize-columns&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;如何安装&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看了上面一些新功能介绍，一些读者可能会迫不及待想要开始使用了。虽然 v0.6 还未发布正式版本，但想要尝鲜体验最新的 beta 版本还是很简单的，跟之前版本的 Docker 部署方式是类似的。这里介绍一下本地伪多节点部署（MND），只是做 Demo 用。其他部署方式包括生成环境部署请参考 &lt;span&gt;官方文档&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;。同时，你也可以参考官方文档中的 &lt;span&gt;快速开始&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪多节点部署步骤如下。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;安装 &lt;span&gt;Docker&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt; 和 &lt;span&gt;Docker-Compose&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;创建 &lt;code&gt;docker-compose.yml&lt;/code&gt; 并进行配置，内容如下:&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;version:&lt;/span&gt; &lt;span&gt;&#x27;3.3&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;services:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;master:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;crawlabteam/crawlab:latest&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;environment:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;CRAWLAB_NODE_MASTER:&lt;/span&gt; &lt;span&gt;&quot;Y&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;CRAWLAB_NODE_NAME:&lt;/span&gt; &lt;span&gt;&quot;Master Node&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;CRAWLAB_MONGO_HOST:&lt;/span&gt; &lt;span&gt;&quot;mongo&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;GOPROXY:&lt;/span&gt; &lt;span&gt;https://goproxy.cn,direct&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&quot;8080:8080&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;depends_on:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;mongo&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;worker01:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;crawlabteam/crawlab:latest&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;environment:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;CRAWLAB_NODE_MASTER:&lt;/span&gt; &lt;span&gt;&quot;N&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;CRAWLAB_NODE_NAME:&lt;/span&gt; &lt;span&gt;&quot;Worker Node 01&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;CRAWLAB_GRPC_ADDRESS:&lt;/span&gt; &lt;span&gt;&quot;master&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;CRAWLAB_FS_FILER_URL:&lt;/span&gt; &lt;span&gt;&quot;http://master:8080/api/filer&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;GOPROXY:&lt;/span&gt; &lt;span&gt;https://goproxy.cn,direct&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;depends_on:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;master&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;worker02:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;crawlabteam/crawlab:latest&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;environment:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;CRAWLAB_NODE_MASTER:&lt;/span&gt; &lt;span&gt;&quot;N&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;CRAWLAB_NODE_NAME:&lt;/span&gt; &lt;span&gt;&quot;Worker Node 02&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;CRAWLAB_GRPC_ADDRESS:&lt;/span&gt; &lt;span&gt;&quot;master&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;CRAWLAB_FS_FILER_URL:&lt;/span&gt; &lt;span&gt;&quot;http://master:8080/api/filer&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;GOPROXY:&lt;/span&gt; &lt;span&gt;https://goproxy.cn,direct&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;depends_on:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;master&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;mongo:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;mongo:4&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;restart:&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;执行 &lt;code&gt;docker-compose pull&lt;/code&gt; 拉取 Docker 镜像&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;执行 &lt;code&gt;docker-compose up -d&lt;/code&gt; 启动 Docker 容器&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动完毕之后，就可以在浏览器中打开 http://localhost:8080 访问 Crawlab 主界面。默认登陆用户名密码为 &lt;code&gt;admin/admin&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文简单介绍了一下 Crawlab v0.6 beta 新版本中的部分新功能和特性。其中，本文图文并茂的介绍了文件上传、文件编辑器、表格高级功能几个非常实用的易用性方面的优化。当然，Crawlab 新版本中的优化和新特性还远不限于&lt;strong&gt;「易用性」&lt;/strong&gt;，在后面的相关文章中，将介绍更多的新特性和功能，包括&lt;strong&gt;「健壮性」&lt;/strong&gt;、&lt;strong&gt;「可扩展性」&lt;/strong&gt;、&lt;strong&gt;「可维护性」&lt;/strong&gt;方面的优化，例如插件框架等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;社区&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果您认为 Crawlab 对您的工作或学习有帮助，可以加作者微信 tikazyq1，在技术讨论群与 Crawlab 使用者和开发者进行交流和学习。同时，如果您认为 Crawlab 好用，请您分享给可能会需要爬虫管理平台的朋友，您的分享可能对别人产生重要的价值。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Crawlab: &lt;span&gt;https://github.com/crawlab-team/crawlab&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;atom-material-icons: &lt;span&gt;https://github.com/tikazyq/atom-material-icons&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;官方文档: &lt;span&gt;https://docs-next.crawlab.cn/zh/guide/installation/docker.html&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;快速开始: &lt;span&gt;https://docs-next.crawlab.cn/zh/guide/quick-start.html&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;Docker: &lt;span&gt;https://www.docker.com/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;Docker-Compose: &lt;span&gt;https://docs.docker.com/compose/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>aee289b64c928be0e00a5a462ce8a692</guid>
<title>聊聊分布式事务方案Seata的那些过人之处</title>
<link>https://toutiao.io/k/82r2ded</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这篇文章主要介绍一些目前主流的几种分布式解决方案，以及阿里开源的一站式分布式解决方案 Seata。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;文章有点长，请耐心看完。&lt;/span&gt;&lt;span&gt;看完你还不懂分布式事务，欢迎来捶我......&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;文章目录如下：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015719&quot; data-ratio=&quot;0.44015696533682147&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJICguLZClH4qpnib8NNPdg7tHhuB9TrRiaHn0iaXrFGnakfyqaSRl9RCXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1529&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 什么是分布式事务？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;分布式对应的是单体架构，互联网早起单体架构是非常流行的，好像是一个家族企业，大家在一个家里劳作，单体架构如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015718&quot; data-ratio=&quot;0.9118993135011442&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJ33GD20blu0E8sAiazdHeo0aRT47GvCnFvXbiagn6FM64eKCkEf4peNKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;874&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是随着业务的复杂度提高，大家族人手不够，此时不得不招人。这样逐渐演变出了分布式服务互相协作，每个服务负责不同的业务，架构如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015720&quot; data-ratio=&quot;0.563858695652174&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJCAEH8V9ibibibr8Xn8Zwbs1YXiaFiaNoEfzIkoAwcMaPEK7k7eyzrU2jjBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;736&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;分布式架构&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因此需要服务与服务之间的远程协作才能完成事务，这种分布式系统环境下由不同的服务之间通过网络远程协作完成事务称之为分布式事务，例如用户注册送积分 事务、创建订单减库存事务，银行转账事务等都是分布式事务。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;典型的场景就是微服务架构 微服务之间通过远程调用完成事务操作。比如订单微服务和库存微服务，下单的同时订单微服务请求库存微服务减库存。简言之，跨 JVM 进程产生分布式事务。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 什么是 CAP 原则？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;CAP 原则又叫 CAP 定理，同时又被称作布鲁尔定理（Brewer&#x27;s theorem），指的是在一个分布式系统中，不可能同时满足以下三点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015721&quot; data-ratio=&quot;0.9375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/19cc2hfD2rA1jnXCV97ep52Via2buLoxJT8pN1m5eOdyt9QD8t2LX1TzO4I0Ja2lSCdZukWxbaSMTnE4WYgL76g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;720&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.1 一致性（Consistency）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;指强一致性，在写操作完成后开始的任何读操作都必须返回该值，或者后续写操作的结果。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也就是说，在一致性系统中，一旦客户端将值写入任何一台服务器并获得响应，那么之后 client 从其他任何服务器读取的都是刚写入的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一致性保证了不管向哪台服务器写入数据，其他的服务器能实时同步数据。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.2 可用性（Availability）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;可用性（高可用）是指：每次向未崩溃的节点发送请求，总能保证收到响应数据（允许不是最新数据）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.3 分区容忍性（Partition tolerance）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。也就是说，服务器 A 和 B 发送给对方的任何消息都是可以放弃的，也就是说 A 和 B 可能因为各种意外情况，导致无法成功进行同步，分布式系统要能容忍这种情况。除非整个网络环境都发生了故障。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.4 为什么只能在 A 和 C 之间做出取舍？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;分布式系统中，必须满足 CAP 中的 P，此时只能在 C/A 之间作出取舍。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果选择了 CA，舍弃了 P，说白了就是一个单体架构。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 一致性有几种分类？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;CAP 理论告诉我们只能在 C、A 之间选择，在分布式事务的最终解决方案中一般选择牺牲一致性来获取可用性和分区容错性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里的 “牺牲一致性” 并不是完全放弃数据的一致性，而是放弃强一致性而换取弱一致性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一致性可以分为以下三种：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.1 强一致性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;系统中的某个数据被成功更新后，后续任何对该数据的读取操作都将得到更新后的值。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;也称为：原子一致性（Atomic Consistency）、线性一致性（Linearizable Consistency）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;简言之，在任意时刻，所有节点中的数据是一样的。例如，对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是强一致性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一个集群需要对外部提供强一致性，所以只要集群内部某一台服务器的数据发生了改变，那么就需要等待集群内其他服务器的数据同步完成后，才能正常的对外提供服务；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;保证了强一致性，务必会损耗可用性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.2 弱一致性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;系统中的某个数据被更新后，后续对该数据的读取操作可能得到更新后的值，也可能是更改前的值。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但即使过了不一致时间窗口这段时间后，后续对该数据的读取也不一定是最新值。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以说，可以理解为数据更新后，如果能容忍后续的访问只能访问到部分或者全部访问不到，则是弱一致性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;例如 12306 买火车票，虽然最后看到还剩下几张余票，但是只要选择购买就会提示没票了，这就是弱一致性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.3 最终一致性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;是弱一致性的特殊形式，存储系统保证在没有新的更新的条件下，最终所有的访问都是最后更新的值。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不保证在任意时刻任意节点上的同一份数据都是相同的，但是随着时间的迁移，不同节点上的同一份数据总是在向趋同的方向变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;简单说，就是在一段时间后，节点间的数据会最终达到一致状态。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.4 总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;弱一致性即使过了不一致时间窗口，后续的读取也不一定能保证一致，而最终一致过了不一致窗口后，后续的读取一定一致。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. 什么是 BASE 理论？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;BASE 理论是对 CAP 中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.1 BA (Basic Available) 基本可用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;整个系统在某些不可抗力的情况下，仍然能够保证“可用性”，即一定时间内仍然能够返回一个明确的结果。这里是属于基本可用。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;基本可用和高可用的区别：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;“一定时间”可以适当延长 当举行大促（比如秒杀）时，响应时间可以适当延长；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;给部分用户返回一个降级页面 给部分用户直接返回一个降级页面，从而缓解服务器压力。但要注意，返回降级页面仍然是返回明确结果。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.2 S (Soft State) 柔性状态&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;称为柔性状态，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统不同节点的数据副本之间进行数据同步的过程存在延时。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.3 E (Eventual Consisstency) 最终一致性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同一数据的不同副本的状态，可以不需要实时一致，但一定要保证经过一定时间后仍然是一致的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5. 分布式事务有哪几种解决方案？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在分布式架构下，每个节点只知晓自己操作的失败或者成功，无法得知其他节点的状态。当一个事务跨多个节点时，为了保持事务的原子性与一致性，而引入一个协调者来统一掌控所有参与者的操作结果，并指示它们是否要把操作结果进行真正的提交或者回滚（rollback）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5.1 二阶段提交（2 PC）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二阶段提交协议（Two-phase Commit，即 2PC）是常用的分布式事务解决方案，即将事务的提交过程分为两个阶段来进行处理。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;两个阶段分别为：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参与的角色：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;事务协调者（事务管理器）：事务的发起者&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;事务参与者（资源管理器）：事务的执行者&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;准备阶段（投票阶段）&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是两阶段的第一段，这一阶段只是准备阶段，由事务的协调者发起询问参与者是否可以提交事务，但是这一阶段并未提交事务，流程图如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015724&quot; data-ratio=&quot;0.3587548638132296&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJamTTVmb7DAxYkIC0kSzPCxHl2eibMLJM06KDN2ia03njhe6l33N4wMiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1285&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;准备提交阶段&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;协调者向所有参与者发送事务内容，询问是否可以提交事务，并等待答复；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;各参与者执行事务操作，将 undo 和 redo 信息记入事务日志中（但不提交事务）；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如参与者执行成功，给协调者反馈同意，否则反馈中止。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;提交阶段&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这一段阶段属于 2PC 的第二阶段（提交执行阶段），协调者发起正式提交事务的请求，当所有参与者都回复同意时，则意味着完成事务，流程图如下：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015723&quot; data-ratio=&quot;0.450354609929078&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJ4yMiaPDlLubwdONfaBXtJBUVvRduxgQ4U6jw19XNdOiatMePaIMGAMFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1128&quot;/&gt;&lt;figcaption&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;提交事务阶段&lt;/span&gt;&lt;/figure&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;协调者节点向所有参与者节点发出正式提交 (commit) 的请求；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;参与者节点正式完成操作，并释放在整个事务期间内占用的资源；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;参与者节点向协调者节点发送 ack 完成消息；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;协调者节点收到所有参与者节点反馈的 ack 完成消息后，完成事务。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是，如果任意一个参与者节点在第一阶段返回的消息为终止，或者协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时，那么这个事务将会被回滚。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;回滚的流程图如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015722&quot; data-ratio=&quot;0.5519429024583664&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJlGj3jh5EU90ialS0h2EuNyUw0AG3tQ8H6czkS8FuAIsthhb6rVWiastA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1261&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;回滚&lt;/span&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/figure&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;协调者节点向所有参与者节点发出回滚操作 (rollback) 的请求；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;参与者节点利用阶段 1 写入的 undo 信息执行回滚，并释放在整个事务期间内占用的资源；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;参与者节点向协调者节点发送 ack 回滚完成消息；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;协调者节点受到所有参与者节点反馈的 ack 回滚完成消息后，取消事务。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不管最后结果如何，第二阶段都会结束当前事务。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二阶段提交的事务正常提交的完整流程如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015725&quot; data-ratio=&quot;0.49739776951672865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJEGAY6177MfqC6ukd29MmuGOJ5elabr1K3tuEoClPlzaZ9icJZGicdwFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1345&quot;/&gt;&lt;figcaption&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;事务正常提交完整流程&lt;/span&gt;&lt;/figure&gt;&lt;/figure&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/figure&gt;&lt;/figure&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二阶段提交事务回滚的完整流程如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015729&quot; data-ratio=&quot;0.49739776951672865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJrVWxkN0dUostkr4an9Eicia6bXicicMibKBEOEZM0ZDDmfgkPwVuJ5Jr3Yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1345&quot;/&gt;‍&lt;figcaption&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;事务回滚完整流程&lt;/span&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;举个百米赛跑的例子来具体描述下 2PC 的流程：学校运动会，有三个同学，分别是A、B、C、2PC 流程如下：&lt;/span&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/figure&gt;&lt;/figure&gt;&lt;/figure&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;裁判：A 同学准备好了吗？准备进入第一赛道;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;裁判：B 同学准备好了吗？准备进入第一赛道;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;裁判：C 同学准备好了吗？准备进入第一赛道;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果有任意一个同学没准备好，则裁判下达回滚指令;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果裁判收到了所有同学的 OK 回复，则再次下令跑;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;裁判：1, 2, 3 跑;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;A 同学冲刺到终点，汇报给裁判;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;B、C同学冲刺失败，汇报给裁判.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;2PC 的缺点&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二阶段提交看起来确实能够提供原子性的操作，但是不幸的是，二阶段提交还是有几个缺点的：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;性能问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：执行过程中，所有参与节点都是事务阻塞型的。当参与者占有公共资源时，其他第三方节点访问公共资源不得不处于阻塞状态；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;可靠性问题&lt;/strong&gt;：参与者发生故障。协调者需要给每个参与者额外指定超时机制，超时后整个事务失败。协调者发生故障。参与者会一直阻塞下去。需要额外的备机进行容错；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;数据一致性问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：二阶段无法解决的问题：协调者在发出 commit 消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了。那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;实现复杂&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：牺牲了可用性，对性能影响较大，不适合高并发高性能场景。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;2PC 的优点&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;尽量保证了数据的强一致，适合对数据强一致要求很高的关键领域。（其实也不能 100% 保证强一致）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5.2 三阶段提交（3PC）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;三阶段提交协议，是二阶段提交协议的改进版本，三阶段提交有两个改动点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在协调者和参与者中都引入超时机制；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;也就是说，除了引入超时机制之外，3PC 把 2PC 的准备阶段再次一分为二。这样三阶段提交就有 CanCommit、PreCommit、DoCommit 三个阶段。处理流程如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015730&quot; data-ratio=&quot;0.8539944903581267&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJgGjkemZyynzWME5BPKZ8K6mvYwicPWECiaOEicAyMdic3h8Tsd9M9Qy3FQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1089&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;3PC时序图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;阶段一：CanCommit 阶段&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3PC 的 CanCommit 阶段其实和 2PC 的准备阶段很像。协调者向参与者发送 commit 请求，参与者如果可以提交就返回 Yes 响应，否则返回 No 响应。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;事务询问：协调者向所有参与者发出包含事务内容的 canCommit 请求，询问是否可以提交事务，并等待所有参与者答复；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;响应反馈：参与者收到 canCommit 请求后，如果认为可以执行事务操作，则反馈 yes 并进入预备状态，否则反馈 no。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;CanCommit 阶段流程如下图：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015726&quot; data-ratio=&quot;0.518174133558749&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJicJ0yicGvzD1CyOXZUCbyh5s2D4hZFicuOxKZlCCBZWLUZhhgZkm1icxeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1183&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;CanCommit 阶段&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;阶段二：PreCommit 阶段&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;协调者根据参与者的反应情况来决定是否可以进行事务的 PreCommit 操作。根据响应情况，有以下两种可能。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;假如所有参与者均反馈 yes，协调者预执行事务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;发送预提交请求 ：协调者向参与者发送 PreCommit 请求，并进入准备阶段；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;事务预提交 ：参与者接收到 PreCommit 请求后，会执行事务操作，并将 undo 和 redo 信息记录到事务日志中（但不提交事务）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;响应反馈 ：如果参与者成功的执行了事务操作，则返回 ACK 响应，同时开始等待最终指令。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015728&quot; data-ratio=&quot;0.4977934686672551&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJdIv0KbmvfgL0TBb5yTFzf8VLHffPc6OKJTWqyChYJ0H79sa87ibR9PA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1133&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;PreCommit&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;假如有任何一个参与者向协调者发送了 No 响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;发送中断请求 ：协调者向所有参与者发送 abort 请求；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;中断事务 ：参与者收到来自协调者的 abort 请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015727&quot; data-ratio=&quot;0.4977934686672551&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJiaEOZEic58pvBiaAdXBhfnzqLrKGSgdN3XKibia7xkQVsmc8v0fJh3NGgCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1133&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;PreCommit&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;阶段三：doCommit 阶段&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;该阶段进行真正的事务提交，也可以分为以下两种情况。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进入阶段 3 后，无论协调者出现问题，或者协调者与参与者网络出现问题，都会导致参与者无法接收到协调者发出的 do Commit 请求或 abort 请求。此时，参与者都会在等待超时之后，继续执行事务提交。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;执行提交&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;发送提交请求：协调接收到参与者发送的 ACK 响应，那么他将从预提交状态进入到提交状态。并向所有参与者发送 doCommit 请求；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;事务提交：参与者接收到 doCommit 请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;响应反馈：事务提交完之后，向协调者发送 ack 响应；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;完成事务：协调者接收到所有参与者的 ack 响应之后，完成事务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015732&quot; data-ratio=&quot;0.49914236706689535&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJkL8Yx7qdoVQH4aUgRcIHEpEicuMoia5wlqOEEfMATo8nGXHMUIVSBCAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1166&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;docommit-提交事务&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;中断事务：任何一个参与者反馈 no，或者等待超时后协调者尚无法收到所有参与者的反馈，即中断事务：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;发送中断请求：如果协调者处于工作状态，向所有参与者发出 abort 请求；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;事务回滚：参与者接收到 abort 请求之后，利用其在阶段二记录的 undo 信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;反馈结果：参与者完成事务回滚之后，向协调者反馈 ACK 消息；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;中断事务：协调者接收到参与者反馈的 ACK 消息之后，执行事务的中断。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015731&quot; data-ratio=&quot;0.4974402730375427&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJ9bbERBDTvar92O5fu7oYVeakroz4w75LHSJkBEgEeicFp7yMiaN7IRSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1172&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;docommit-中断事务&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;优点&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;相比二阶段提交，三阶段提交降低了阻塞范围，在等待超时后协调者或参与者会中断事务。避免了协调者单点问题，阶段 3 中协调者出现问题时，参与者会继续提交事务。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;缺点&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数据不一致问题依然存在，当在参与者收到 preCommit 请求后等待 doCommit 指令时，此时如果协调者请求中断事务，而协调者无法与参与者正常通信，会导致参与者继续提交事务，造成数据不一致。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5.3 TCC (事务补偿)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TCC（Try Confirm Cancel）方案是一种应用层面侵入业务的两阶段提交。是目前最火的一种柔性事务方案，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TCC 分为两个阶段，分别如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;第一阶段：Try（尝试），主要是对业务系统做检测及资源预留 (加锁，锁住资源)。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第二阶段：本阶段根据第一阶段的结果，决定是执行 confirm 还是 cancel&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015733&quot; data-ratio=&quot;0.4546684709066306&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJBAz3Z9ict4qChMNwUD9SaOkog8yZARhcaYcsJX0DXaJo0IyhSnxINmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1478&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;TCC&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了方便理解，下面以电商下单为例进行方案解析，这里把整个过程简单分为扣减库存，订单创建 2 个步骤，库存服务和订单服务分别在不同的服务器节点上。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;假设商品库存为 100，购买数量为 2，这里检查和更新库存的同时，冻结用户购买数量的库存，同时创建订单，订单状态为待确认。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;Try 阶段&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TCC 机制中的 Try 仅是一个初步操作，它和后续的确认一起才能真正构成一个完整的业务逻辑，这个阶段主要完成：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;完成所有业务检查( 一致性 ) &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;预留必须业务资源( 准隔离性 ) &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Try 尝试执行业务&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015734&quot; data-ratio=&quot;0.685251798561151&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJV4amHruPywZWtO6nSyiccibDB0yE7nqYVt0XJ7s0qQiaSzNLJptCibicfrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;556&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;Try 阶段&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;Confirm / Cancel 阶段&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根据 Try 阶段服务是否全部正常执行，继续执行确认操作（Confirm）或取消操作（Cancel）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Confirm 和 Cancel 操作满足幂等性，如果 Confirm 或 Cancel 操作执行失败，将会不断重试直到执行完成。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Confirm：当 Try 阶段服务全部正常执行， 执行确认业务逻辑操作，业务如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015735&quot; data-ratio=&quot;0.3555045871559633&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJgqWVHgJGUXuROgND9Ny377hERzoE0BEdRFGzddp7Kcj0vib77B2Npgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1308&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;Try-&amp;gt;Confirm&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里使用的资源一定是 Try 阶段预留的业务资源。在 TCC 事务机制中认为，如果在 Try 阶段能正常的预留资源，那 Confirm 一定能完整正确的提交。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Confirm 阶段也可以看成是对 Try 阶段的一个补充，Try+Confirm 一起组成了一个完整的业务逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Cancel：当 Try 阶段存在服务执行失败， 进入 Cancel 阶段，业务如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015736&quot; data-ratio=&quot;0.3555045871559633&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJ6F0jnxDwQj3VdRV2CuQS4gc4tZZyzAZMrPWVRDLGlYKJ3dvbPKr3ZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1308&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;Try-Cancel&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Cancel 取消执行，释放 Try 阶段预留的业务资源，上面的例子中，Cancel 操作会把冻结的库存释放，并更新订单状态为取消。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;最终一致性保证&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;TCC 事务机制以初步操作（Try）为中心的，确认操作（Confirm）和取消操作（Cancel）都是围绕初步操作（Try）而展开。因此，Try 阶段中的操作，其保障性是最好的，即使失败，仍然有取消操作（Cancel）可以将其执行结果撤销；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Try 阶段执行成功并开始执行 Confirm 阶段时，默认 Confirm 阶段是不会出错的。也就是说只要 Try 成功，Confirm 一定成功（TCC 设计之初的定义）；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Confirm 与 Cancel 如果失败，由 TCC 框架进行==重试==补偿；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;存在极低概率在 CC 环节彻底失败，则需要定时任务或人工介入。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;方案总结&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TCC 事务机制相对于传统事务机制（X/Open XA），TCC 事务机制相比于上面介绍的 XA 事务机制，有以下优点：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;性能提升&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：具体业务来实现控制资源锁的粒度变小，不会锁定整个资源；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;数据最终一致性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：基于 Confirm 和 Cancel 的幂等性，保证事务最终完成确认或者取消，保证数据的一致性；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;可靠性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：解决了 XA 协议的协调者单点故障问题，由主业务方发起并控制整个业务活动，业务活动管理器也变成多点，引入集群。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;缺点：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;TCC 的 Try、Confirm 和 Cancel 操作功能要按具体业务来实现，业务耦合度较高，提高了开发成本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5.4 本地消息表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本地消息表的方案最初是由 eBay 提出，核心思路是将分布式事务拆分成本地事务进行处理。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;角色&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过在事务主动发起方额外新建事务消息表，事务发起方处理业务和记录事务消息在本地事务中完成，轮询事务消息表的数据发送事务消息，事务被动方基于消息中间件消费事务消息表中的事务。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这样可以避免以下两种情况导致的数据不一致性：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务处理成功、事务消息发送失败&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务处理失败、事务消息发送成功&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;整体的流程如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015738&quot; data-ratio=&quot;0.3614663256606991&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJr2ueDvUoSskQNdEIrKeicfT7BibOdJbjNVq6eLW1YRr9Uh4obZwUO35w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1173&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;本地消息表&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上图中整体的处理步骤如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;①：事务主动方在同一个本地事务中处理业务和写消息表操作&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;②：事务主动方通过消息中间件，通知事务被动方处理事务通知事务待消息。消息中间件可以基于 Kafka、RocketMQ 消息队列，事务主动方主动写消息到消息队列，事务消费方消费并处理消息队列中的消息。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;③：事务被动方通过消息中间件，通知事务主动方事务已处理的消息。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;④：事务主动方接收中间件的消息，更新消息表的状态为已处理。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一些必要的容错处理如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当 ① 处理出错，由于还在事务主动方的本地事务中，直接回滚即可；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当 ②、③ 处理出错，由于事务主动方本地保存了消息，只需要轮询消息重新通过消息中间件发送，事务被动方重新读取消息处理业务即可；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果是业务上处理失败，事务被动方可以发消息给事务主动方回滚事务；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果事务被动方已经消费了消息，事务主动方需要回滚事务的话，需要发消息通知事务主动方进行回滚事务。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;优点&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;从应用设计开发的角度实现了消息数据的可靠性，消息数据的可靠性不依赖于消息中间件，弱化了对 MQ 中间件特性的依赖；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;方案轻量，容易实现。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;缺点&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;与具体的业务场景绑定，耦合性强，不可公用；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息数据与业务数据同库，占用业务系统资源；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务系统在使用关系型数据库的情况下，消息服务性能会受到关系型数据库并发性能的局限。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5.5 MQ 事务方案（可靠消息事务）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;基于 MQ 的分布式事务方案其实是对本地消息表的封装，将本地消息表基于 MQ 内部，其他方面的协议基本与本地消息表一致。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;MQ 事务方案整体流程和本地消息表的流程很相似，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015739&quot; data-ratio=&quot;0.36177474402730375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJficu7FUOYt4IMozRic1VcZqZV2Ufj7e1fp4ia2A2woLCicoMo2c2jGPMcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1172&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;MQ 事务方案&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从上图可以看出和本地消息表方案唯一不同就是将本地消息表存在了 MQ 内部，而不是业务数据库中。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么 MQ 内部的处理尤为重要，下面主要基于 RocketMQ 4.3 之后的版本介绍 MQ 的分布式事务方案。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在本地消息表方案中，保证事务主动方发写业务表数据和写消息表数据的一致性是基于数据库事务，RocketMQ 的事务消息相对于普通 MQ 提供了 2PC 的提交接口，方案如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;正常情况：事务主动方发消息&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015737&quot; data-ratio=&quot;0.19507186858316222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJiaF6bhicLIl6FVomr33Je3bSic0j3ggNEib4ibSMe0rrPmQEAC9I5rcWedg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;974&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;事务主动方发消息&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这种情况下，事务主动方服务正常，没有发生故障，发消息流程如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;步骤①：发送方向 MQ 服务端 (MQ Server) 发送 half 消息；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;步骤②：MQ Server 将消息持久化成功之后，向发送方 ack 确认消息已经发送成功；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;步骤③：发送方开始执行本地事务逻辑；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;步骤④：发送方根据本地事务执行结果向 MQ Server 提交二次确认（commit 或是 rollback）；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;步骤⑤：MQ Server 收到 commit 状态则将半消息标记为可投递，订阅方最终将收到该消息；MQ Server 收到 rollback 状态则删除半消息，订阅方将不会接受该消息。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;异常情况：事务主动方消息恢复&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015740&quot; data-ratio=&quot;0.24578790882061446&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJOYFTylXFOdnZ29gPH5snsqWjeXp4icH00KMlC1s0cJ2vaAOBrmnM4Ag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1009&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;事务主动方消息恢复&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在断网或者应用重启等异常情况下，图中 4 提交的二次确认超时未到达 MQ Server，此时处理逻辑如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;步骤⑤：MQ Server 对该消息发起消息回查；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;步骤⑥：发送方收到消息回查后，需要检查对应消息的本地事务执行的最终结果；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;步骤⑦：发送方根据检查得到的本地事务的最终状态再次提交二次确认；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;步骤⑧：MQ Server基于 commit/rollback 对消息进行投递或者删除。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;优点&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;相比本地消息表方案，MQ 事务方案优点是：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息数据独立存储 ，降低业务系统与消息系统之间的耦合；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;吞吐量大于使用本地消息表方案。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;缺点&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一次消息发送需要两次网络请求 (half 消息 + commit/rollback 消息) ；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务处理服务需要实现消息状态回查接口。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5.6 最大努力通知&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最大努力通知也称为定期校对，是对 MQ 事务方案的进一步优化。它在事务主动方增加了消息校对的接口，如果事务被动方没有接收到消息，此时可以调用事务主动方提供的消息校对的接口主动获取。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最大努力通知的整体流程如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015744&quot; data-ratio=&quot;0.38320209973753283&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJbPAZ3FUmEv87DCbrz6Qgbh75ORiafoeicR8Qlej3XichBYgibNH7do8Klw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1143&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;最大努力通知&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在可靠消息事务中，事务主动方需要将消息发送出去，并且消息接收方成功接收，这种可靠性发送是由事务主动方保证的；&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是最大努力通知，事务主动方尽最大努力（重试，轮询....）将事务发送给事务接收方，但是仍然存在消息接收不到，此时需要事务被动方主动调用事务主动方的消息校对接口查询业务消息并消费，这种通知的可靠性是由事务被动方保证的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最大努力通知适用于业务通知类型，例如微信交易的结果，就是通过最大努力通知方式通知各个商户，既有回调通知，也有交易查询接口。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5.7 Saga 事务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Saga 事务源于 1987 年普林斯顿大学的 Hecto 和 Kenneth 发表的如何处理 long lived transaction（长活事务）论文。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Saga 事务核心思想是将长事务拆分为多个本地短事务，由 Saga 事务协调器协调，如果正常结束那就正常完成，如果某个步骤失败，则根据相反顺序一次调用补偿操作。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Saga 事务基本协议如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个 Saga 事务由一系列幂等的有序子事务(sub-transaction) Ti 组成；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个 Ti 都有对应的幂等补偿动作 Ci，补偿动作用于撤销 Ti 造成的结果。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TCC 事务补偿机制有一个预留 (Try) 动作，相当于先报存一个草稿，然后才提交；Saga 事务没有预留动作，直接提交。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对于事务异常，Saga提供了两种恢复策略，分别如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;向后恢复 (backward recovery)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在执行事务失败时，补偿所有已完成的事务，是“一退到底”的方式。如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015742&quot; data-ratio=&quot;0.8878504672897196&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJYFofibhtnC28Vg23oI6icziatZE2yOFLiaZ0rpmHaAvFuc1pObow5qcFrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;856&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;向后恢复&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从上图可知事务执行到了支付事务T3，但是失败了，因此事务回滚需要从C3,C2,C1依次进行回滚补偿。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对应的执行顺序为：T1,T2,T3,C3,C2,C1&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这种做法的效果是撤销掉之前所有成功的子事务，使得整个 Saga 的执行结果撤销。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;向前恢复 (forward recovery)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;也称之为：勇往直前。对于执行不通过的事务，会尝试重试事务，这里有一个假设就是每个子事务最终都会成功。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;流程如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015741&quot; data-ratio=&quot;0.7243510506798516&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJa4gbpGsRibFnyWqLyhjpqWiaIbpIrbSu5DpYFicymC1Z01QI4f8bG6Xqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;809&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;向前恢复&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;适用于必须要成功的场景，事务失败了重试，不需要补偿。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Saga 事务有两种不同的实现方式，分别如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;命令协调（Order Orchestrator）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;事件编排（Event Choreographyo）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;命令协调&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;中央协调器（Orchestrator，简称 OSO）以命令/回复的方式与每项服务进行通信，全权负责告诉每个参与者该做什么以及什么时候该做什么。整体流程如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015743&quot; data-ratio=&quot;0.4714475431606906&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJUJTLNMGTlYMicR3EBlCzWXLQwQHhVhXULcFcmBBhI5WEmatC2av678g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;753&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;命令协调&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上图步骤如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;事务发起方的主业务逻辑请求 OSO 服务开启订单事务；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;OSO 向库存服务请求扣减库存，库存服务回复处理结果；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;OSO 向订单服务请求创建订单，订单服务回复创建结果；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;OSO 向支付服务请求支付，支付服务回复处理结果；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;主业务逻辑接收并处理 OSO 事务处理结果回复。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;中央协调器必须事先知道执行整个订单事务所需的流程(例如通过读取配置)。如果有任何失败，它还负责通过向每个参与者发送命令来撤销之前的操作来协调分布式的回滚。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;基于中央协调器协调一切时，回&lt;/span&gt;&lt;span&gt;滚要容易得多，因为协调器默认是执行正向流程，回滚时只要执行反向流程即可。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;事件编排&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;没有中央协调器（没有单点风险）时，每个服务产生并观察其他服务的事件，并决定是否应采取行动。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在事件编排方法中，第一个服务执行一个事务，然后发布一个事件。该事件被一个或多个服务进行监听，这些服务再执行本地事务并发布（或不发布）新的事件。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当最后一个服务执行本地事务并且不发布任何事件时，意味着分布式事务结束，或者它发布的事件没有被任何 Saga 参与者听到都意味着事务结束。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015745&quot; data-ratio=&quot;0.6423529411764706&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJfKscJdskYgX3WMkbxbNH8JwTtgxhZwubnld8pd2o6mwyyljXBkuYHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;850&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;事件编排&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上图步骤如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;事务发起方的主业务逻辑发布开始订单事件；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;库存服务监听开始订单事件，扣减库存，并发布库存已扣减事件；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;订单服务监听库存已扣减事件，创建订单，并发布订单已创建事件；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;支付服务监听订单已创建事件，进行支付，并发布订单已支付事件；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;主业务逻辑监听订单已支付事件并处理。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;事件/编排是实现 Saga 模式的自然方式，它很简单，容易理解，不需要太多的代码来构建。如果事务涉及 2 至 4 个步骤，则可能是非常合适的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;优点&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;命令协调设计的优点如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;服务之间关系简单，避免服务之间的循环依赖关系，因为 Saga 协调器会调用 Saga 参与者，但参与者不会调用协调器；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;程序开发简单，只需要执行命令/回复(其实回复消息也是一种事件消息)，降低参与者的复杂性；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;易维护扩展，在添加新步骤时，事务复杂性保持线性，回滚更容易管理，更容易实施和测试。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;事件/编排设计优点如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;避免中央协调器单点故障风险；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当涉及的步骤较少服务开发简单，容易实现。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;缺点&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;命令协调设计缺点如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;中央协调器容易处理逻辑容易过于复杂，导致难以维护；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;存在协调器单点故障风险。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;事件/编排设计缺点如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;服务之间存在循环依赖的风险；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当涉及的步骤较多，服务间关系混乱，难以追踪调测。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于 Saga 模型中没有 Prepare 阶段，因此事务间不能保证隔离性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当多个 Saga 事务操作同一资源时，就会产生更新丢失、脏数据读取等问题，这时需要在业务层控制并发，例如：在应用层面加锁，或者应用层面预先冻结资源。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5.8 总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;总结一下各个方案的常见的使用场景：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2PC/3PC&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：依赖于数据库，能够很好的提供强一致性和强事务性，但相对来说延迟比较高，比较适合传统的单体应用，在同一个方法中存在跨库操作的情况，不适合高并发和高性能要求的场景；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;TCC&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：适用于执行时间确定且较短，实时性要求高，对数据一致性要求高，比如互联网金融企业最核心的三个服务：交易、支付、账务；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;本地消息表/ MQ 事务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：都适用于事务中参与方支持操作幂等，对一致性要求不高，业务上能容忍数据不一致到一个人工检查周期，事务涉及的参与方、参与环节较少，业务上有对账/校验系统兜底；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Saga 事务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：由于 Saga 事务不能保证隔离性，需要在业务层控制并发，适合于业务场景事务并发操作同一资源较少的情况。Saga 相比缺少预提交动作，导致补偿动作的实现比较麻烦，例如业务是发送短信，补偿动作则得再发送一次短信说明撤销，用户体验比较差。Saga 事务较适用于补偿动作容易处理的场景。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6. 什么是 Seata？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面讲了这么多的分布式事务的理论知识，都没看到一个落地的实现，这不是吹牛逼吗？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;对业务无侵入&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：即减少技术架构上的微服务化所带来的分布式事务问题对业务的侵入；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;高性能&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：减少分布式事务解决方案所带来的性能消耗。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;官方文档：&lt;/span&gt;&lt;span&gt;https://seata.io/zh-cn/index.html&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Seata 的几种术语：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;TC（Transaction Coordinator）&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：事务协调者。管理全局的分支事务的状态，用于全局性事务的提交和回滚；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;TM（Transaction Manager）&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：事务管理者。用于开启、提交或回滚事务；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;RM（Resource Manager）&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：资源管理器。用于分支事务上的资源管理，向 TC 注册分支事务，上报分支事务的状态，接收 TC 的命令来提交或者回滚分支事务。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6.1 AT 模式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Seata 目前支持多种事务模式，分别有 AT、TCC、SAGA 和 XA 。文章篇幅有限，今天只讲常用的 AT 模式。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;AT 模式的特点就是对业务无入侵式，整体机制分二阶段提交（2PC）&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;一阶段&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;二阶段&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;提交异步化，非常快速地完成；回滚通过一阶段的回滚日志进行反向补偿。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 AT 模式下，用户只需关注自己的业务 SQL。用户的业务 SQL  作为一阶段，Seata 框架会自动生成事务的二阶段提交和回滚操作。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015748&quot; data-ratio=&quot;0.6020151133501259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJHeefd4XCBSTicnanQn4IdWUXkw9giaBiaZ4GbgWF4icGssvEYDMhrYTSUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;794&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一个典型的分布式事务过程：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;XID 在微服务调用链路的上下文中传播；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;TM 向 TC 发起针对 XID 的全局提交或回滚决议；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6.2 搭建 Seata TC 协调者&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Seata 的协调者其实就是阿里开源的一个服务，我们只需要下载并且启动它。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下载地址：&lt;/span&gt;&lt;span&gt;http://seata.io/zh-cn/blog/download.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;陈某下载的版本是 1.3.0，各位最好和我版本一致，这样不会出现莫名的Bug。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下载完成后，直接解压即可。但是此时还不能直接运行，还需要做一些配置。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6.3 创建 TC 所需要的表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TC 运行需要将事务的信息保存在数据库，因此需要创建一些表。找到 seata-1.3.0 源码的 script\server\db 这个目录，将会看到以下 SQL 文件：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015747&quot; data-ratio=&quot;0.23625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJEGRdhKagP1ewUEBjYzTomU6SuLXmaV9v97PTAFk4asO10o7UL2O3fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;陈某使用的是 MySQL 数据库，因此直接运行 mysql.sql 这个文件中的 sql 语句，创建的三张表如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015746&quot; data-ratio=&quot;0.1289308176100629&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJjzkPBqibusels8qfUBWPbs9ACQNwZ2SUBIdhPECSRUXicFVm9hwV4Ckg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;954&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6.4 修改 TC 的注册中心&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;找到 seata-server-1.3.0\seata\conf这个目录，其中有一个 registry.conf 文件，其中配置了TC的注册中心和配置中心。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;默认的注册中心是 file 形式，实际使用中肯定不能使用，需要改成 Nacos 形式。改动的地方如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015749&quot; data-ratio=&quot;0.35089567966280294&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJRAfVpsWxvO4QSlLiby4sdaxAouibicTEFH3ZKHgcicZ8axkfhOpHxm7S9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;949&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;需要改动的地方如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;type：改成nacos，表示使用nacos作为注册中心&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;application：服务的名称&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;serverAddr：nacos的地址&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;group：分组&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;namespace：命名空间&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;username：用户名&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;password：密码&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后这份文件都会放在项目源码的根目录下，源码下载方式见文末。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6.5 修改TC的配置中心&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TC 的配置中心默认使用的也是file形式，当然要是用 nacos 作为配置中心了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;直接修改 registry.conf 文件，需要改动的地方如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015750&quot; data-ratio=&quot;0.32130777903043967&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJqeTnTG85WM1RNFSwtLDY36WqDiaNu7fepmYV2v62E8nX2FibpGadZApQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;887&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;需要改动的地方如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;type：改成nacos，表示使用nacos作为配置中心&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;serverAddr：nacos的地址&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;group：分组&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;namespace：命名空间&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;username：用户名&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;password：密码&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上述配置修改好之后，在TC启动的时候将会自动读取 nacos 的配置。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么问题来了：TC需要存储到Nacos中的配置都哪些，如何推送过去？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 seata-1.3.0\script\config-center 中有一个 config.txt 文件，其中就是 TC 所需要的全部配置。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 seata-1.3.0\script\config-center\nacos 中有一个脚本 nacos-config.sh 则是将 config.txt 中的全部配置自动推送到 nacos 中，运行下面命令（Windows 可以使用 git  bash 运行）：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;# -h 主机，你可以使用localhost，-p 端口号 你可以使用&lt;span class=&quot;code-snippet__number&quot;&gt;8848&lt;/span&gt;，-t 命名空间ID，-u 用户名，-p 密码&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ sh nacos-config.sh -h &lt;span class=&quot;code-snippet__number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.1&lt;/span&gt; -p &lt;span class=&quot;code-snippet__number&quot;&gt;8080&lt;/span&gt; -g SEATA_GROUP -t &lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;a7581ef&lt;span class=&quot;code-snippet__number&quot;&gt;-433d&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;-46f&lt;/span&gt;3&lt;span class=&quot;code-snippet__number&quot;&gt;-93f&lt;/span&gt;9&lt;span class=&quot;code-snippet__number&quot;&gt;-5f&lt;/span&gt;dc18239c65 -u nacos -w nacos&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;推送成功则可以在 Nacos 中查询到所有的配置，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015753&quot; data-ratio=&quot;0.4359281437125748&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJuDOEibJtiaCib5JoP8voyicYJzyVpZBIuDY7AOLRp5BI2D0CkAqQz5Hagw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1670&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6.6 修改 TC 的数据库连接信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TC 是需要使用数据库存储事务信息的，那么如何修改相关配置呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上一节的内容已经将所有的配置信息都推送到了 Nacos 中，TC 启动时会从 Nacos 中读取，因此我们修改也需要在 Nacos 中修改。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;需要修改的配置如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;store.mode=db&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;store.db.datasource=druid&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;store.db.dbType=mysql&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;store.db.driverClassName=com.mysql.jdbc.Driver&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;store.db.url=jdbc:mysql://127.0.0.1:3306/seata_server?useUnicode=true&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;store.db.user=root&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;store.db.password=Nov2014&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 nacos 中搜索上述的配置，直接修改其中的值。比如修改 store.mode，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015752&quot; data-ratio=&quot;0.47146666666666665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJFHunklgxnn7iaJxibBwtqOEtU6ib3G2RZ8nuhuMljDYDoCusJwia3pYqNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1875&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当然 Seata 还支持 Redis 作为 TC 的数据库，只需要改动以下配置即可：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;store.mode=redis&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;store.redis.host=127.0.0.1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;store.redis.port=6379&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;store.redis.password=123456&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6.7 启动 TC&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;按照上述步骤全部配置成功后，则可以启动 TC，在 seata-server-1.3.0\seata\bin 目录下直接点击 seata-server.bat（Windows）运行。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;启动成功后，在 Nacos 的服务列表中则可以看到 TC 已经注册进入，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015751&quot; data-ratio=&quot;0.2491846053489889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJJQc0Ga9wdnwic1bSGAqrpH4afOibC9OVq6lwwNvIs81Gl9FXVfbLcBgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1533&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;至此，Seata 的 TC 就启动完成了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;7. Seata 客户端搭建（RM）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上述已经将 Seata 的服务端（TC）搭建完成了，下面就以电商系统为例介绍一下如何编码实现分布式事务。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;用户购买商品的业务逻辑。整个业务逻辑由 3个微服务提供支持：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;仓储服务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：对给定的商品扣除仓储数量。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;订单服务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：根据采购需求创建订单。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;帐户服务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：从用户帐户中扣除余额。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;需要了解的知识：Nacos 和 openFeign。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;7.1 仓储服务搭建&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;陈某整个教程使用的都是同一个聚合项目，关于 Spring Cloud 版本有不清楚的可以看我第一篇文章的说明。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;添加依赖&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;新建一个 seata-storage9020 项目，新增依赖如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015755&quot; data-ratio=&quot;0.6766848816029144&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJRBj1ySwgbsLXseKDb1ZeyiajZiaopbBhuAvRK50nqWvEnYZUHhlkYJPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1098&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于使用的 Spring Cloud Alibaba 依赖版本是 2.2.1.RELEASE，其中自带的 Seata 版本是1.1.0，但是我们 Seata 服务端使用的版本是 1.3.0，因此需要排除原有的依赖，重新添加 1.3.0 的依赖。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注意：Seata 客户端的依赖版本必须要和服务端一致。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;创建数据库&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;创建一个数据库 seata-storage，其中新建两个表：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;storage 库存的业务表，SQL如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`storage`&lt;/span&gt;  (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`name`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;code-snippet__built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;SET&lt;/span&gt; utf8mb4 &lt;span class=&quot;code-snippet__keyword&quot;&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`num`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;数量&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`create_time`&lt;/span&gt; datetime(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`price`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;单价，单位分&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  PRIMARY &lt;span class=&quot;code-snippet__keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;code-snippet__string&quot;&gt;`id`&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;USING&lt;/span&gt; BTREE&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;ENGINE&lt;/span&gt; = &lt;span class=&quot;code-snippet__keyword&quot;&gt;InnoDB&lt;/span&gt; AUTO_INCREMENT = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;SET&lt;/span&gt; = utf8mb4 &lt;span class=&quot;code-snippet__keyword&quot;&gt;COLLATE&lt;/span&gt; = utf8mb4_general_ci ROW_FORMAT = &lt;span class=&quot;code-snippet__keyword&quot;&gt;Compact&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`storage`&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;码猿技术专栏&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;2021-10-15 22:32:40&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;undo_log：回滚日志表，这是Seata要求必须有的，每个业务库都应该创建一个。SQL如下：&lt;/span&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`undo_log`&lt;/span&gt;  (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`branch_id`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;branch transaction id&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`xid`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;code-snippet__built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;SET&lt;/span&gt; utf8 &lt;span class=&quot;code-snippet__keyword&quot;&gt;COLLATE&lt;/span&gt; utf8_general_ci &lt;span class=&quot;code-snippet__keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;global transaction id&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`context`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;128&lt;/span&gt;) &lt;span class=&quot;code-snippet__built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;SET&lt;/span&gt; utf8 &lt;span class=&quot;code-snippet__keyword&quot;&gt;COLLATE&lt;/span&gt; utf8_general_ci &lt;span class=&quot;code-snippet__keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;undo_log context,such as serialization&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`rollback_info`&lt;/span&gt; longblob &lt;span class=&quot;code-snippet__keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;rollback info&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`log_status`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;0:normal status,1:defense status&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`log_created`&lt;/span&gt; datetime(&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;create datetime&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`log_modified`&lt;/span&gt; datetime(&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;modify datetime&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`ux_undo_log`&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;`xid`&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;`branch_id`&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;USING&lt;/span&gt; BTREE&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;ENGINE&lt;/span&gt; = &lt;span class=&quot;code-snippet__keyword&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;SET&lt;/span&gt; = utf8 &lt;span class=&quot;code-snippet__keyword&quot;&gt;COLLATE&lt;/span&gt; = utf8_general_ci &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;AT transaction mode undo table&#x27;&lt;/span&gt; ROW_FORMAT = &lt;span class=&quot;code-snippet__keyword&quot;&gt;Compact&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;配置 Seata 相关配置&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对于 Nacos、MySQL 数据源等相关信息就省略了，项目源码中都有。主要讲一下 Seata 如何配置，详细配置如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;spring&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;application&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;seata-storage&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;seata&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;enabled&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;application-id&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;${spring.application.name}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;tx-service-group&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;${spring.application.name}-tx-group&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;config&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;nacos&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;nacos&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;namespace&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;7a7581ef-433d-46f3-93f9-5fdc18239c65&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;server-addr&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;localhost:8848&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;group&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;SEATA_GROUP&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;nacos&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;nacos&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;registry&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;nacos&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;nacos&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;application&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;seata-server&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;group&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;SEATA_GROUP&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;namespace&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;7a7581ef-433d-46f3-93f9-5fdc18239c65&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;nacos&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;nacos&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;server-addr&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;localhost:8848&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以上配置注释已经很清楚，这里着重强调以下几点：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;客户端 Seata 中的 nacos 相关配置要和服务端相同，比如地址、命名空间等；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;tx-service-group：这个属性一定要注意，这个一定要和服务端的配置一致，否则不生效；比如上述配置中的，就要在nacos中新增一个配置service.vgroupMapping.seata-storage-tx-group=default，如下图：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015754&quot; data-ratio=&quot;0.44143484626647145&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJqFehh4ibz6e7gZgNJGp9W07qnKP15S5EkfCHLTp4uBCiapLW5I4Isd9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1366&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注意：seata-storage-tx-group 仅仅是后缀，要记得添加配置的时候要加上前缀service.vgroupMapping。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;扣减库存的接口&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;逻辑很简单，这里仅仅是做了减库存的操作，代码如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015758&quot; data-ratio=&quot;0.6037151702786377&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJAtkkFOhCXZxw8RCHyiazdCVmJ7FWM2icX0h20A1vAM4rbzO3hKhVKIYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;969&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里的接口并没有不同，还是使用 @Transactional 开启了本地事务，并没有涉及到分布式事务。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;到这里仓储服务搭建好了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;7.2 账户服务搭建&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;搭建完了仓储服务，账户服务搭建很类似了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;添加依赖&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;新建一个seata-account9021服务，这里的依赖和仓储服务的依赖相同，直接复制&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;创建数据库&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;创建一个seata-account数据库，其中新建了两个表：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;account 账户业务表，SQL如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`account`&lt;/span&gt;  (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`user_id`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;) &lt;span class=&quot;code-snippet__built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;SET&lt;/span&gt; utf8mb4 &lt;span class=&quot;code-snippet__keyword&quot;&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;用户userId&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`money`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;余额，单位分&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`create_time`&lt;/span&gt; datetime(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  PRIMARY &lt;span class=&quot;code-snippet__keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;code-snippet__string&quot;&gt;`id`&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;USING&lt;/span&gt; BTREE&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;ENGINE&lt;/span&gt; = &lt;span class=&quot;code-snippet__keyword&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;SET&lt;/span&gt; = utf8mb4 &lt;span class=&quot;code-snippet__keyword&quot;&gt;COLLATE&lt;/span&gt; = utf8mb4_general_ci ROW_FORMAT = &lt;span class=&quot;code-snippet__keyword&quot;&gt;Compact&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`account`&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;abc123&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;2021-10-19 17:49:53&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;undo_log：回滚日志表，同仓储服务&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;配置 Seata 相关配置&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Seata 相关配置和仓储服务相同，只不过需要在 nacos 中添加一个service.vgroupMapping.seata-account-tx-group=default，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015756&quot; data-ratio=&quot;0.44373284537968893&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJMc2GvicNEfpdhO6bpic26xjdDmJKJaHm9QZFohtpH1wWmT3sHicNzPqAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1093&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;扣减余额的接口&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;具体逻辑自己完善，这里我直接扣减余额，代码如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015759&quot; data-ratio=&quot;0.5807086614173228&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJHKXD2UD6PEpoNNgrRLHLj7uMWoG5WmDbGLY9mqOea22LN4mxmWGY8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1016&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;依然没有涉及到分布式事务，还是使用 @Transactional 开启了本地事务，是不是很爽。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;7.3 订单服务搭建（TM）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里为了节省篇幅，陈某直接使用订单服务作为 TM，下单、减库存、扣款整个流程都在订单服务中实现。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;添加依赖&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;新建一个 seata-order9022 服务，这里需要添加的依赖如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Nacos 服务发现的依赖&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Seata 的依赖&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;openFeign 的依赖，由于要调用账户、仓储的微服务，因此需要额外添加一个 openFeign 的依赖&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;创建数据库&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;新建一个 seata_orde r数据库，其中新建两张表，如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;t_order 订单的业务表&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`t_order`&lt;/span&gt;  (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`product_id`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;商品Id&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`num`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;数量&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`user_id`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;) &lt;span class=&quot;code-snippet__built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;SET&lt;/span&gt; utf8mb4 &lt;span class=&quot;code-snippet__keyword&quot;&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;用户唯一Id&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`create_time`&lt;/span&gt; datetime(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`status`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;订单状态 1 未付款 2 已付款 3 已完成&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  PRIMARY &lt;span class=&quot;code-snippet__keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;code-snippet__string&quot;&gt;`id`&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;USING&lt;/span&gt; BTREE&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;ENGINE&lt;/span&gt; = &lt;span class=&quot;code-snippet__keyword&quot;&gt;InnoDB&lt;/span&gt; AUTO_INCREMENT = &lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;SET&lt;/span&gt; = utf8mb4 &lt;span class=&quot;code-snippet__keyword&quot;&gt;COLLATE&lt;/span&gt; = utf8mb4_general_ci ROW_FORMAT = &lt;span class=&quot;code-snippet__keyword&quot;&gt;Compact&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;undo_log 回滚日志表，同仓储服务&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;配置和 Seata 相关配置&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Seata相关配置和仓储服务相同，只不过需要在nacos中添加一个service.vgroupMapping.seata-order-tx-group=default，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015757&quot; data-ratio=&quot;0.5444664031620553&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJeGIF6lKTa63U7nZZBvQzicCspm6a23pGtjzsuQU4iao3vTyv8j5WLa4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1012&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;扣减库存的接口&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里需要通过 openFeign 调用仓储服务的接口进行扣减库存，接口如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015760&quot; data-ratio=&quot;0.4946550048590865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJ6BcNLsmWibSmeWkibCePJVb4X1kBWeVnhmevNNKu5h7VghVibwzQZtZPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1029&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以上只是简单的通过 openFeign 调用，更细致的配置，比如降级、自己完善。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;扣减余额的接口&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里仍然是通过 openFeign 调用账户服务的接口进行扣减余额，接口如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015761&quot; data-ratio=&quot;0.34633490248823134&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJxz3ibvx4JEXZXH3iaPD1gc350DL47iaEb0q4VQxGpD2xy9kxVFCsaxfqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1487&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;创建订单的接口&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下订单的接口就是一个事务发起方，作为 TM，需要发起一个全局事务，详细代码如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015762&quot; data-ratio=&quot;1.016374269005848&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJibTMDzXTbav9p0zNzhJZHyo6Hic1qhBU2hEkyegm9iaQcqQHk19lapEyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;855&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有什么不同？不同之处就是使用了@GlobalTransactional 而不是 @Transactional。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;@GlobalTransactional 是Se ata 提供的，用于开启才能全局事务，只在 TM 中标注即可生效。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;7.4 测试&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;分别启动 seata-account9021、seata-storage9020、seata-order9022，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015763&quot; data-ratio=&quot;0.28322440087145967&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJ2CofQedo083F2ribFzJAVvsooyOEH7iaxGXEX2LKroib7d4v2xKwxbe7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;459&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面调用下单接口，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015764&quot; data-ratio=&quot;0.3360957642725598&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJyumGGk4ZgOBbWS521gIC1egyo4QyX4F70UZ5gPicKsvjM0XuXo7s7AA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1086&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从控制台输出的日志可以看出，流程未出现任何异常，事务已经提交，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015765&quot; data-ratio=&quot;0.24819435325016415&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJNHBbL1L9eI21Q2kvj0f2Cyn2n3WdJqhDsEtJac0AbXdjeMjeWuEEXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1523&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;果然，查看订单、余额、库存表，数据也都是正确的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是，这仅仅是流程没问题，并不能说明分布式事务已经配置成功了。因此需要手动造个异常。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在扣减余额的接口睡眠 2 秒钟，因为 openFeign 的超时时间默认是 1 秒，这样肯定是超时异常了，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015767&quot; data-ratio=&quot;0.3555758683729433&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJbBPgRicPsia1Axg633hQJDh1yOXcHR1zyEpgtCvnAh0ztib9eJLGBnegQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1094&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;此时，调用创建订单的接口，控制台日志输出如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015766&quot; data-ratio=&quot;0.26643990929705214&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJ9QuRqk8kZ4uia5ZssIL4FpMvPhgtcrUBib1jVKPvkVd6dtTR4R8NsqkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1764&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;发现在扣减余额处理中超时了，导致了异常。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;此时，看下库存的数据有没有扣减，很高兴，库存没有扣减成功，说明事务已经回滚了，分布式事务成功了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;7.5 总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Seata 客户端创建很简单，需要注意以下几点内容：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Seata 客户端的版本需要和服务端保持一致；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个服务的数据库都要创建一个 undo_log 回滚日志表；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;客户端指定的事务分组名称要和 Nacos 相同，比如 service.vgroupMapping.seata-account-tx-group=default。&lt;/span&gt;&lt;span&gt;前缀 service.vgroupMapping，后缀 {自定义}。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;8. AT 模式原理分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;AT 模式最大的优点就是对业务代码无侵入，一切都像在写单体业务逻辑一样。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TC 相关的三张表：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;global_table&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：全局事务表，每当有一个全局事务发起后，就会在该表中记录全局事务的ID；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;branch_table&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：分支事务表，记录每一个分支事务的 ID，分支事务操作的哪个数据库等信息；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;lock_table&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：全局锁。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;8.1 一阶段步骤&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;TM：seata-order.create() &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;方法执行时，由于该方法具有 @GlobalTranscational标志，该 TM 会向 TC 发起全局事务，生成 XID（全局锁）；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;RM：StorageService.deduct()&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：写表，UNDO_LOG 记录回滚日志（Branch ID），通知 TC 操作结果；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;RM：AccountService.deduct()&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：写表，UNDO_LOG 记录回滚日志（Branch ID），通知 TC 操作结果；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;RM：OrderService.create()&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：写表，UNDO_LOG 记录回滚日志（Branch ID），通知 TC 操作结果。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;RM 写表的过程，Seata 会拦截业务 SQL。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先解析 SQL 语义，在业务数据被更新前，将其保存成 before image（前置镜像）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;然后执行业务 SQL，在业务数据更新之后，再将其保存成 after image（后置镜像）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后生成行锁。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以上操作全部在一个数据库事务内完成，这样保证了一阶段操作的原子性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015768&quot; data-ratio=&quot;0.5148895292987512&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJPOaLvpdDYzMMbOGl6aZJWePFwibicvWwTuZbalY2Qr2t2GicTL1nG3Ajw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1041&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;8.2 二阶段步骤&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因为“业务 SQL”在一阶段已经提交至数据库， 所以 Seata 框架只需将一阶段保存的快照数据和行锁删掉，完成数据清理即可。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;正常&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：TM 执行成功，通知 TC 全局提交，TC 此时通知所有的 RM 提交成功，删除 UNDO_LOG 回滚日志。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015769&quot; data-ratio=&quot;0.5563186813186813&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJG9mL7wEqV3sb5YIEH0SDCwfEt3iaKfQ7ctjb8y6ibwmjeBlicx5uSib5iaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;728&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;异常&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：TM 执行失败，通知TC全局回滚。TC 此时通知所有的 RM 进行回滚，根据  UNDO_LOG 反向操作，使用 before image 还原业务数据，删除 UNDO_LOG。但在还原前要首先要校验脏写，对比“数据库当前业务数据”和 “after image”。如果两份数据完全一致就说明没有脏写，可以还原业务数据，如果不一致就说明有脏写，出现脏写就需要转人工处理。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015770&quot; data-ratio=&quot;0.6133162612035852&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rA1jnXCV97ep52Via2buLoxJPgMhchoFibjcGSLroYQVMoAeSHic3keBN2DysYwTt3oq3jppHGez66lQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;781&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;AT 模式的一阶段、二阶段提交和回滚均由 Seata 框架自动生成，用户只需编写业务 SQL，便能轻松接入分布式事务，AT 模式是一种对业务无任何侵入的分布式事务解决方案。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2e423425712ce5aae243c0843a7bf342</guid>
<title>彻底理解Golang Slice</title>
<link>https://toutiao.io/k/ifttln2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.327445652173913&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/zG4cYveMXGSFibF7EIQ1C91s62r2GC5pUQKsmCgrerzQ95q8aUqtZTGIRkN5vHCg87sJA7xFfzzaprPHUAStUjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;736&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;看完这篇文章，下面这些高频面试题你都会答了吧&lt;/p&gt;&lt;/blockquote&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Go slice的底层实现原理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go array和slice的区别&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go slice深拷贝和浅拷贝&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go slice扩容机制是怎样的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么Go slice是非线程安全的？&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实现原理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;slice是无固定长度的数组，底层结构是一个结构体，包含如下3个属性&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个 &lt;code&gt;slice&lt;/code&gt; 在 golang 中占用 24 个 bytes&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; slice struct {&lt;br/&gt; array unsafe.Pointer &lt;br/&gt; len   int &lt;br/&gt; &lt;span&gt;cap&lt;/span&gt;   int &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;array : 包含了一个指向一个数组的指针，数据实际上存储在这个指针指向的数组上，占用 8 bytes&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;len:  当前 slice 使用到的长度，占用8 bytes&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;cap :  当前 slice 的容量，同时也是底层数组 array 的长度， 8 bytes&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4594594594594595&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eTBFF2uBxbBp7gOCYs62ic0KM3RCDE1p6v6sj2OrWBxrfjkfpaDWVLtjR3rVdq38eAXHXwOFLWrs8ibaUpofYp6kvOMOR9YUvx/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;481&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;slice并不是真正意义上的动态数组，而是一个引用类型。slice总是指向一个底层array，slice的声明也可以像 array一样，只是长度可变。&lt;strong&gt;「golang中通过语法糖，使得我们可以像声明array一样，自动创建slice结构体」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根据&lt;/span&gt;索引位置取切片&lt;span&gt;slice&lt;/span&gt; 元素值时，默认取值范围是（0～&lt;span&gt;len&lt;/span&gt;(&lt;span&gt;slice&lt;/span&gt;)-1），一般输出slice时，通常是指 slice[0:len(slice)-1]，根据下标就可以输出所指向底层数组中的值&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;主要特性&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;引用类型&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;golang 有三个常用的高级类型&lt;span&gt;slice&lt;/span&gt;、map、channel, 它们都是&lt;span&gt;引用类型&lt;/span&gt;，当引用类型作为函数参数时，可能会修改原内容数据。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func sliceModify(s []int) {&lt;br/&gt; s[0] = 100&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;func sliceAppend(s []int) []int {&lt;br/&gt; s = append(s, 100)&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; s&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;func sliceAppendPtr(s *[]int) {&lt;br/&gt; *s = append(*s, 100)&lt;br/&gt; &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// 注意：Go语言中所有的传参都是值传递（传值），都是一个副本，一个拷贝。&lt;br/&gt;// 拷贝的内容是非引用类型（int、string、struct等这些），在函数中就无法修改原内容数据；&lt;br/&gt;// 拷贝的内容是引用类型（interface、指针、map、slice、chan等这些），这样就可以修改原内容数据。&lt;br/&gt;func TestSliceFn(t *testing.T) {&lt;br/&gt; // 参数为引用类型slice：外层slice的len/&lt;span&gt;cap&lt;/span&gt;不会改变，指向的底层数组会改变&lt;br/&gt; s := []int{1, 1, 1}&lt;br/&gt; newS := sliceAppend(s)&lt;br/&gt; // 函数内发生了扩容&lt;br/&gt; t.Log(s, len(s), &lt;span&gt;cap&lt;/span&gt;(s))&lt;br/&gt; // [1 1 1] 3 3&lt;br/&gt; t.Log(newS, len(newS), &lt;span&gt;cap&lt;/span&gt;(newS)) &lt;br/&gt; // [1 1 1 100] 4 6&lt;br/&gt;&lt;br/&gt; s2 := make([]int, 0, 5)&lt;br/&gt; newS = sliceAppend(s2)&lt;br/&gt; // 函数内未发生扩容&lt;br/&gt; t.Log(s2, s2[0:5], len(s2), &lt;span&gt;cap&lt;/span&gt;(s2)) &lt;br/&gt; // [] [100 0 0 0 0] 0 5&lt;br/&gt; t.Log(newS, newS[0:5], len(newS), &lt;span&gt;cap&lt;/span&gt;(newS))&lt;br/&gt; // [100] [100 0 0 0 0] 1 5&lt;br/&gt;&lt;br/&gt; // 参数为引用类型slice的指针：外层slice的len/&lt;span&gt;cap&lt;/span&gt;会改变，指向的底层数组会改变&lt;br/&gt; sliceAppendPtr(&amp;amp;s)&lt;br/&gt; t.Log(s, len(s), &lt;span&gt;cap&lt;/span&gt;(s)) &lt;br/&gt;  // [1 1 1 100] 4 6&lt;br/&gt; sliceModify(s)&lt;br/&gt; t.Log(s, len(s), &lt;span&gt;cap&lt;/span&gt;(s)) &lt;br/&gt;  // [100 1 1 100] 4 6&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;公众号后台caspar回复【代码】获取本文所有示例代码&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;切片状态&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;切片有3种特殊的状态，分为「零切片」、「空切片」和「nil 切片」&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func TestSliceEmptyOrNil(t *testing.T) {&lt;br/&gt; var slice1 []int           &lt;br/&gt;  // slice1 is nil slice&lt;br/&gt; slice2 := make([]int, 0)    &lt;br/&gt; // slcie2 is empty slice&lt;br/&gt; var slice3 = make([]int, 2) &lt;br/&gt; // slice3 is zero slice&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; slice1 == nil {&lt;br/&gt;  t.Log(&lt;span&gt;&quot;slice1 is nil.&quot;&lt;/span&gt;) &lt;br/&gt;  // 会输出这行&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; slice2 == nil {&lt;br/&gt;  t.Log(&lt;span&gt;&quot;slice2 is nil.&quot;&lt;/span&gt;) &lt;br/&gt;  // 不会输出这行&lt;br/&gt; }&lt;br/&gt; t.Log(slice3) // [0 0]&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;非线程安全&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;slice不支持并发读写，所以并不是线程安全的，使用多个 goroutine 对类型为 slice 的变量进行操作，每次输出的值大概率都不会一样，与预期值不一致;  slice在并发执行中不会报错，但是数据会丢失&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/**&lt;br/&gt;* 切片非并发安全&lt;br/&gt;* 多次执行，每次得到的结果都不一样&lt;br/&gt;* 可以考虑使用 channel 本身的特性 (阻塞) 来实现安全的并发读写&lt;br/&gt; */&lt;br/&gt;func TestSliceConcurrencySafe(t *testing.T) {&lt;br/&gt; a := make([]int, 0)&lt;br/&gt; var wg sync.WaitGroup&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i := 0; i &amp;lt; 10000; i++ {&lt;br/&gt;  wg.Add(1)&lt;br/&gt;  go func(i int) {&lt;br/&gt;   a = append(a, i)&lt;br/&gt;   wg.Done()&lt;br/&gt;  }(i)&lt;br/&gt; }&lt;br/&gt; wg.Wait()&lt;br/&gt; t.Log(len(a)) &lt;br/&gt; // not equal 10000&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想实现slice线程安全，有两种方式：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方式一：通过加锁实现slice线程安全，适合对性能要求不高的场景。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func TestSliceConcurrencySafeByMutex(t *testing.T) {&lt;br/&gt; var lock sync.Mutex //互斥锁&lt;br/&gt; a := make([]int, 0)&lt;br/&gt; var wg sync.WaitGroup&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i := 0; i &amp;lt; 10000; i++ {&lt;br/&gt;  wg.Add(1)&lt;br/&gt;  go func(i int) {&lt;br/&gt;   defer wg.Done()&lt;br/&gt;   lock.Lock()&lt;br/&gt;   defer lock.Unlock()&lt;br/&gt;   a = append(a, i)&lt;br/&gt;  }(i)&lt;br/&gt; }&lt;br/&gt; wg.Wait()&lt;br/&gt; t.Log(len(a)) &lt;br/&gt; // equal 10000&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方式二：通过channel实现slice线程安全，适合对性能要求高的场景。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func TestSliceConcurrencySafeByChanel(t *testing.T) {&lt;br/&gt; buffer := make(chan int)&lt;br/&gt; a := make([]int, 0)&lt;br/&gt; // 消费者&lt;br/&gt; go &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; v := range buffer {&lt;br/&gt;   a = append(a, v)&lt;br/&gt;  }&lt;br/&gt; }()&lt;br/&gt; // 生产者&lt;br/&gt; var wg sync.WaitGroup&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i := 0; i &amp;lt; 10000; i++ {&lt;br/&gt;  wg.Add(1)&lt;br/&gt;  go func(i int) {&lt;br/&gt;   defer wg.Done()&lt;br/&gt;   buffer &amp;lt;- i&lt;br/&gt;  }(i)&lt;br/&gt; }&lt;br/&gt; wg.Wait()&lt;br/&gt; t.Log(len(a)) &lt;br/&gt; // equal 10000&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;共享存储空间&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多个切片如果共享同一个底层数组，这种情况下，对其中一个切片或者底层数组的更改，会影响到其他切片&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/**&lt;br/&gt;* 切片共享存储空间&lt;br/&gt; */&lt;br/&gt;func TestSliceShareMemory(t *testing.T) {&lt;br/&gt; slice1 := []string{&lt;span&gt;&quot;1&quot;&lt;/span&gt;, &lt;span&gt;&quot;2&quot;&lt;/span&gt;, &lt;span&gt;&quot;3&quot;&lt;/span&gt;, &lt;span&gt;&quot;4&quot;&lt;/span&gt;, &lt;span&gt;&quot;5&quot;&lt;/span&gt;, &lt;span&gt;&quot;6&quot;&lt;/span&gt;, &lt;span&gt;&quot;7&quot;&lt;/span&gt;, &lt;span&gt;&quot;8&quot;&lt;/span&gt;, &lt;span&gt;&quot;9&quot;&lt;/span&gt;, &lt;span&gt;&quot;10&quot;&lt;/span&gt;, &lt;span&gt;&quot;11&quot;&lt;/span&gt;, &lt;span&gt;&quot;12&quot;&lt;/span&gt;}&lt;br/&gt; Q2 := slice1[3:6]&lt;br/&gt; t.Log(Q2, len(Q2), &lt;span&gt;cap&lt;/span&gt;(Q2)) &lt;br/&gt; // [4 5 6] 3 9&lt;br/&gt; Q3 := slice1[5:8]&lt;br/&gt; t.Log(Q3, len(Q3), &lt;span&gt;cap&lt;/span&gt;(Q3)) &lt;br/&gt; // [6 7 8] 3 7&lt;br/&gt; Q3[0] = &lt;span&gt;&quot;Unkown&quot;&lt;/span&gt;&lt;br/&gt; t.Log(Q2, Q3) &lt;br/&gt; // [4 5 Unkown] [Unkown 7 8]&lt;br/&gt;&lt;br/&gt; a := []int{1, 2, 3, 4, 5}&lt;br/&gt; shadow := a[1:3]&lt;br/&gt; t.Log(shadow, a)             &lt;br/&gt; // [2 3] [1 2 3 4 5]&lt;br/&gt; shadow = append(shadow, 100) &lt;br/&gt; // 会修改指向数组的所有切片&lt;br/&gt; t.Log(shadow, a)            &lt;br/&gt;  // [2 3 100] [1 2 3 100 5]&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;常用操作&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;创建&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;slice 的创建有4种方式，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func TestSliceInit(t *testing.T) {&lt;br/&gt; // 初始化方式1：直接声明&lt;br/&gt; var slice1 []int&lt;br/&gt; t.Log(len(slice1), &lt;span&gt;cap&lt;/span&gt;(slice1)) &lt;br/&gt; // 0, 0&lt;br/&gt; slice1 = append(slice1, 1)&lt;br/&gt; t.Log(len(slice1), &lt;span&gt;cap&lt;/span&gt;(slice1)) &lt;br/&gt; // 1, 1, 24&lt;br/&gt;&lt;br/&gt; // 初始化方式2：使用字面量&lt;br/&gt; slice2 := []int{1, 2, 3, 4}&lt;br/&gt; t.Log(len(slice2), &lt;span&gt;cap&lt;/span&gt;(slice2)) &lt;br/&gt; // 4, 4, 24&lt;br/&gt;&lt;br/&gt; // 初始化方式3：使用make创建slice&lt;br/&gt; slice3 := make([]int, 3, 5)           &lt;br/&gt;  // make([]T, len, &lt;span&gt;cap&lt;/span&gt;) &lt;span&gt;cap&lt;/span&gt;不传则和len一样&lt;br/&gt; t.Log(len(slice3), &lt;span&gt;cap&lt;/span&gt;(slice3))       &lt;br/&gt;  // 3, 5&lt;br/&gt; t.Log(slice3[0], slice3[1], slice3[2]) &lt;br/&gt; // 0, 0, 0&lt;br/&gt; // t.Log(slice3[3], slice3[4]) &lt;br/&gt; // panic: runtime error: index out of range [3] with length 3&lt;br/&gt; slice3 = append(slice3, 1)&lt;br/&gt; t.Log(len(slice3), &lt;span&gt;cap&lt;/span&gt;(slice3)) &lt;br/&gt; // 4, 5, 24&lt;br/&gt;&lt;br/&gt; // 初始化方式4: 从切片或数组“截取”&lt;br/&gt; arr := [100]int{}&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i := range arr {&lt;br/&gt;  arr[i] = i&lt;br/&gt; }&lt;br/&gt; slcie4 := arr[1:3]&lt;br/&gt; slice5 := make([]int, len(slcie4))&lt;br/&gt; copy(slice5, slcie4)&lt;br/&gt; t.Log(len(slcie4), &lt;span&gt;cap&lt;/span&gt;(slcie4), unsafe.Sizeof(slcie4)) &lt;br/&gt; // 2，99，24&lt;br/&gt; t.Log(len(slice5), &lt;span&gt;cap&lt;/span&gt;(slice5), unsafe.Sizeof(slice5)) &lt;br/&gt; // 2，2，24&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;增加&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func TestSliceGrowing(t *testing.T) {&lt;br/&gt; slice1 := []int{}&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i := 0; i &amp;lt; 10; i++ {&lt;br/&gt;  slice1 = append(slice1, i)&lt;br/&gt;  t.Log(len(slice1), &lt;span&gt;cap&lt;/span&gt;(slice1))&lt;br/&gt; }&lt;br/&gt; // 1 1&lt;br/&gt; // 2 2&lt;br/&gt; // 3 4&lt;br/&gt; // 4 4&lt;br/&gt; // 5 8&lt;br/&gt; // 6 8&lt;br/&gt; // 7 8&lt;br/&gt; // 8 8&lt;br/&gt; // 9 16&lt;br/&gt; // 10 16&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;删除&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func TestSliceDelete(t *testing.T) {&lt;br/&gt; slice1 := []int{1, 2, 3, 4, 5}&lt;br/&gt; var x int&lt;br/&gt; // 删除最后一个元素&lt;br/&gt; x, slice1 = slice1[len(slice1)-1], slice1[:len(slice1)-1] &lt;br/&gt; t.Log(x, slice1, len(slice1), &lt;span&gt;cap&lt;/span&gt;(slice1)) &lt;br/&gt; // 5 [1 2 3 4] 4 5&lt;br/&gt;&lt;br/&gt; // 删除第2个元素 &lt;br/&gt; slice1 = append(slice1[:2], slice1[3:]...) &lt;br/&gt; t.Log(slice1, len(slice1), &lt;span&gt;cap&lt;/span&gt;(slice1))    &lt;br/&gt; // [1 2 4] 3 5&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;查找&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;v := s[i] // 下标访问&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;修改&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;s[i] = 5 // 下标修改&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;截取&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/**&lt;br/&gt;* 切片截取&lt;br/&gt; */&lt;br/&gt;func TestSliceSubstr(t *testing.T) {&lt;br/&gt; slice1 := []int{1, 2, 3, 4, 5}&lt;br/&gt; slice2 := slice1[:]&lt;br/&gt; // 截取 slice[left:right:max]&lt;br/&gt; // left：省略默认0&lt;br/&gt; // right：省略默认len(slice1)&lt;br/&gt; // max: 省略默认len(slice1)&lt;br/&gt; // len = right-left+1&lt;br/&gt; // &lt;span&gt;cap&lt;/span&gt; = max-left&lt;br/&gt; t.Log(slice2, len(slice2), &lt;span&gt;cap&lt;/span&gt;(slice2)) &lt;br/&gt; // 1 2 3 4 5] 5 5&lt;br/&gt; slice3 := slice1[1:]&lt;br/&gt; t.Log(slice3, len(slice3), &lt;span&gt;cap&lt;/span&gt;(slice3)) &lt;br/&gt; // [2 3 4 5] 4 4&lt;br/&gt; slice4 := slice1[:2]&lt;br/&gt; t.Log(slice4, len(slice4), &lt;span&gt;cap&lt;/span&gt;(slice4)) &lt;br/&gt; // [1 2] 2 5&lt;br/&gt; slice5 := slice1[1:2]&lt;br/&gt; t.Log(slice5, len(slice5), &lt;span&gt;cap&lt;/span&gt;(slice5)) &lt;br/&gt; // [2] 1 4&lt;br/&gt; slice6 := slice1[:2:5]&lt;br/&gt; t.Log(slice6, len(slice6), &lt;span&gt;cap&lt;/span&gt;(slice6)) &lt;br/&gt; // [1 2] 2 5&lt;br/&gt; slice7 := slice1[1:2:2]&lt;br/&gt; t.Log(slice7, len(slice7), &lt;span&gt;cap&lt;/span&gt;(slice7)) &lt;br/&gt; // [2] 1 1&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;遍历&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;切片有3种遍历方式&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/**&lt;br/&gt;* 切片遍历&lt;br/&gt; */&lt;br/&gt;func TestSliceTravel(t *testing.T) {&lt;br/&gt; slice1 := []int{1, 2, 3, 4}&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i := 0; i &amp;lt; len(slice1); i++ {&lt;br/&gt;  t.Log(slice1[i])&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; idx, e := range slice1 {&lt;br/&gt;  t.Log(idx, e)&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; _, e := range slice1 {&lt;br/&gt;  t.Log(e)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;反转&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func TestSliceReverse(t *testing.T) {&lt;br/&gt; a := []int{1, 2, 3, 4, 5}&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; left, right := 0, len(a)-1; left &amp;lt; right; left, right = left+1, right-1 {&lt;br/&gt;  a[left], a[right] = a[right], a[left]&lt;br/&gt; }&lt;br/&gt; t.Log(a, len(a), &lt;span&gt;cap&lt;/span&gt;(a)) &lt;br/&gt; // [5 4 3 2 1] 5 5&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;拷贝&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发中会经常的把一个变量复制给另一个变量，那么这个过程，可能是深浅拷贝，那么今天帮大家区分一下这两个拷贝的区别和具体的区别&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;深拷贝&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拷贝的是数据本身，创造一个样的新对象，新创建的对象与原对象不共享内存，新创建的对象在内存中开辟一个新的内存地址，新对象值修改时不会影响原对象值。既然内存地址不同，释放内存地址时，可分别释放&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;值类型的数据，默认赋值操作都是深拷贝，Array、Int、String、Struct、Float，Bool。引用类型的数据如果想实现深拷贝，需要通过辅助函数完成&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如golang深拷贝copy 方法会把源切片值(即 from Slice )中的元素复制到目标切片(即 to Slice )中，并返回被复制的元素个数，copy 的两个类型必须一致。copy 方法最终的&lt;strong&gt;「复制结果取决于较短的那个切片」&lt;/strong&gt;，当较短的切片复制完成，整个复制过程就全部完成了&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/**&lt;br/&gt;* 深拷贝&lt;br/&gt; */&lt;br/&gt;func TestSliceDeepCopy(t *testing.T) {&lt;br/&gt; slice1 := []int{1, 2, 3, 4, 5}&lt;br/&gt; slice2 := make([]int, 5, 5)&lt;br/&gt; // 深拷贝&lt;br/&gt; copy(slice2, slice1)                   &lt;br/&gt; t.Log(slice1, len(slice1), &lt;span&gt;cap&lt;/span&gt;(slice1)) &lt;br/&gt; // [1 2 3 4 5] 5 5&lt;br/&gt; t.Log(slice2, len(slice2), &lt;span&gt;cap&lt;/span&gt;(slice2)) &lt;br/&gt; // [1 2 3 4 5] 5 5&lt;br/&gt; slice1[1] = 100                        &lt;br/&gt; t.Log(slice1, len(slice1), &lt;span&gt;cap&lt;/span&gt;(slice1)) &lt;br/&gt; // [1 100 3 4 5] 5 5&lt;br/&gt; t.Log(slice2, len(slice2), &lt;span&gt;cap&lt;/span&gt;(slice2)) &lt;br/&gt; // [1 2 3 4 5] 5 5&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;浅拷贝&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拷贝的是数据地址，只复制指向的对象的指针，此时新对象和老对象指向的内存地址是一样的，新对象值修改时老对象也会变化。释放内存地址时，同时释放内存地址。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;引用类型的数据，默认全部都是浅拷贝，Slice、Map等&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目的切片和源切片指向同一个底层数组，任何一个数组元素改变，都会同时影响两个数组。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/**&lt;br/&gt;* 浅拷贝&lt;br/&gt; */&lt;br/&gt;func TestSliceShadowCopy(t *testing.T) {&lt;br/&gt; slice1 := []int{1, 2, 3, 4, 5}&lt;br/&gt; // 浅拷贝（注意 := 对于引用类型是浅拷贝，对于值类型是深拷贝）&lt;br/&gt; slice2 := slice1     &lt;br/&gt; t.Logf(&lt;span&gt;&quot;%p&quot;&lt;/span&gt;, slice1) // 0xc00001c120&lt;br/&gt; t.Logf(&lt;span&gt;&quot;%p&quot;&lt;/span&gt;, slice2) // 0xc00001c120&lt;br/&gt; // 同时改变两个数组，这时就是浅拷贝，未扩容时，修改 slice1 的元素之后，slice2 的元素也会跟着修改&lt;br/&gt; slice1[0] = 10&lt;br/&gt; t.Log(slice1, len(slice1), &lt;span&gt;cap&lt;/span&gt;(slice1)) &lt;br/&gt; // [10 2 3 4 5] 5 5&lt;br/&gt; t.Log(slice2, len(slice2), &lt;span&gt;cap&lt;/span&gt;(slice2)) &lt;br/&gt; // [10 2 3 4 5] 5 5&lt;br/&gt; // 注意下：扩容后，slice1和slice2不再指向同一个数组，修改 slice1 的元素之后，slice2 的元素不会被修改了&lt;br/&gt; slice1 = append(slice1, 5, 6, 7, 8)&lt;br/&gt; slice1[0] = 11   &lt;br/&gt;  // 这里可以发现，slice1[0] 被修改为了 11, slice1[0] 还是10&lt;br/&gt; t.Log(slice1, len(slice1), &lt;span&gt;cap&lt;/span&gt;(slice1)) &lt;br/&gt; // [11 2 3 4 5 5 6 7 8] 9 10&lt;br/&gt; t.Log(slice2, len(slice2), &lt;span&gt;cap&lt;/span&gt;(slice2))&lt;br/&gt;  // [10 2 3 4 5] 5 5&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「在复制 slice 的时候，slice 中数组的指针也被复制了，在触发扩容逻辑之前，两个 slice 指向的是相同的数组，触发扩容逻辑之后指向的就是不同的数组了」&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;扩容&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩容会发生在slice append的时候，当slice的cap不足以容纳新元素，就会进行扩容&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;源码：https://github.com/golang/go/blob/master/src/runtime/slice.go&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func growslice(et *_type, old slice, &lt;span&gt;cap&lt;/span&gt; int) slice {&lt;br/&gt;   // 省略一些判断...&lt;br/&gt;    newcap := old.cap&lt;br/&gt;    doublecap := newcap + newcap&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;cap&lt;/span&gt; &amp;gt; doublecap {&lt;br/&gt;        newcap = &lt;span&gt;cap&lt;/span&gt;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; old.len &amp;lt; 1024 {&lt;br/&gt;            newcap = doublecap&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            // Check 0 &amp;lt; newcap to detect overflow&lt;br/&gt;            // and prevent an infinite loop.&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; 0 &amp;lt; newcap &amp;amp;&amp;amp; newcap &amp;lt; &lt;span&gt;cap&lt;/span&gt; {&lt;br/&gt;                newcap += newcap / 4&lt;br/&gt;            }&lt;br/&gt;            // Set newcap to the requested &lt;span&gt;cap&lt;/span&gt; when&lt;br/&gt;            // the newcap calculation overflowed.&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; newcap &amp;lt;= 0 {&lt;br/&gt;                newcap = &lt;span&gt;cap&lt;/span&gt;&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    // 省略一些后续...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果新申请容量比两倍原有容量大，那么扩容后容量大小 等于 新申请容量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果原有 slice 长度小于 1024， 那么每次就扩容为原来的 2 倍&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果原 slice 大于等于 1024， 那么每次扩容就扩为原来的 1.25 倍&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;内存泄露&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于slice的底层是数组，很可能数组很大，但slice所取的元素数量却很小，这就导致数组占用的绝大多数空间是被浪费的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Case1:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如下面的代码，如果传入的&lt;code&gt;slice b&lt;/code&gt;是很大的，然后引用很小部分给全局量&lt;code&gt;a&lt;/code&gt;，那么&lt;code&gt;b&lt;/code&gt;未被引用的部分（下标1之后的数据）就不会被释放，造成了所谓的内存泄漏。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;var a []int&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;test&lt;/span&gt;(b []int) {&lt;br/&gt; a = b[:1] // 和b共用一个底层数组&lt;br/&gt; &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么只要全局量&lt;code&gt;a&lt;/code&gt;在，&lt;code&gt;b&lt;/code&gt;就不会被回收。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何避免？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这样的场景下注意：如果我们只用到一个slice的一小部分，那么底层的整个数组也将继续保存在内存当中。当这个底层数组很大，或者这样的场景很多时，可能会造成内存急剧增加，造成崩溃。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以在这样的场景下，我们可以将需要的分片复制到一个新的slice中去，减少内存的占用&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;var a []int&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;test&lt;/span&gt;(b []int) {&lt;br/&gt; a = make([]int, 1)&lt;br/&gt; copy(a, b[:0])&lt;br/&gt; &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Case2:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如下面的代码，返回的slice是很小一部分，这样该函数退出后，原来那个体积较大的底层数组也无法被回收&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func test2() []int{&lt;br/&gt; s = make([]int, 0, 10000)&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i := 0; i &amp;lt; 10000; i++ {&lt;br/&gt;  s = append(s, p)&lt;br/&gt; }&lt;br/&gt; s2 := s[100:102]&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; s2&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何避免？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将需要的分片复制到一个新的slice中去，减少内存的占用&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func test2() []int{&lt;br/&gt; s = make([]int, 0, 10000)&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i := 0; i &amp;lt; 10000; i++ {&lt;br/&gt;   // 一些计算...&lt;br/&gt;  s = append(s, p)&lt;br/&gt; }&lt;br/&gt; s2 := make([]int, 2)&lt;br/&gt; copy(s2, s[100:102])&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; s2&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;切片与数组对比&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数组是一个固定长度的，初始化时候必须要指定长度，不指定长度的话就是切片了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数组是值类型，将一个数组赋值给另一个数组时，传递的是一份深拷贝，赋值和函数传参操作都会复制整个数组数据，会占用额外的内存；切片是引用类型，将一个切片赋值给另一个切片时，传递的是一份浅拷贝，赋值和函数传参操作只会复制len和cap，但底层共用同一个数组，不会占用额外的内存。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//a是一个数组，注意数组是一个固定长度的，初始化时候必须要指定长度，不指定长度的话就是切片了&lt;br/&gt;a := [3]int{1, 2, 3}&lt;br/&gt;//b是数组，是a的一份深拷贝&lt;br/&gt;b := a&lt;br/&gt;//c是切片，是引用类型，底层数组是a&lt;br/&gt;c := a[:]&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i := 0; i &amp;lt; len(a); i++ {&lt;br/&gt; a[i] = a[i] + 1&lt;br/&gt;}&lt;br/&gt;//改变a的值后，b是a的拷贝，b不变，c是引用，c的值改变&lt;br/&gt;fmt.Println(a) &lt;br/&gt;//[2,3,4]&lt;br/&gt;fmt.Println(b) &lt;br/&gt;//[1 2 3]&lt;br/&gt;fmt.Println(c) &lt;br/&gt;//[2,3,4]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//a是一个切片，不指定长度的话就是切片了&lt;br/&gt;a := []int{1, 2, 3}&lt;br/&gt;//b是切片，是a的一份拷贝&lt;br/&gt;b := a&lt;br/&gt;//c是切片，是引用类型&lt;br/&gt;c := a[:]&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i := 0; i &amp;lt; len(a); i++ {&lt;br/&gt; a[i] = a[i] + 1&lt;br/&gt;}&lt;br/&gt;//改变a的值后，b是a的浅拷贝，b的值改派，c是引用，c的值改变&lt;br/&gt;fmt.Println(a) &lt;br/&gt;//[2,3,4]&lt;br/&gt;fmt.Println(b) &lt;br/&gt;//[2,3,4]&lt;br/&gt;fmt.Println(c) &lt;br/&gt;//[2,3,4]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;创建切片时可根据实际需要预分配容量，尽量避免追加过程中进行扩容操作，有利于提升性能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用 append() 向切片追加元素时有可能触发扩容，扩容后将会生成新的切片&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用 len()、cap()计算切片长度、容量时，时间复杂度均为 O(1)，不需要遍历切片&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;切片是非线程安全的，如果要实现线程安全，可以加锁或者使用Channel&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;大数组作为函数参数时，会复制整个数组数据，消耗过多内存，建议使用切片或者指针&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;切片作为函数参数时，可以改变切片指向的数组，不能改变切片本身len和cap；想要改变切片本身，可以将改变后的切片返回 或者 将&lt;strong&gt;「切片指针」&lt;/strong&gt;作为函数参数。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果只用到大slice的一小部分，建议将需要的分片复制到一个新的slice中去，减少内存的占用&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fae532b3c3603114df73d958063ce428</guid>
<title>2021 年马上就要结束了！抓紧啦！</title>
<link>https://toutiao.io/k/rf8ezjy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fb590f864f38901698af64ff8a26c9b0</guid>
<title>Go 泛型简明入门教程</title>
<link>https://toutiao.io/k/nvynuss</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是 polarisxu。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有泛型的 Go 版本 1.18 已经发布了 Beta1 版本，之前陆陆续续介绍了泛型，但可能有些人还是对 Go 泛型没有完整的了解，因此有这份入门教程。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;01 准备工作&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开始学习泛型之前，你应该安装 Go1.18 Beta1 或之后发布的版本，建议&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxNzY0NDE3NA==&amp;amp;mid=2247485026&amp;amp;idx=1&amp;amp;sn=dcc047b6afe0e4e4daf37f8c9e499fce&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;使用 goup 等版本管理工具&lt;/a&gt;，当然也可以直接通过 playground 来验证：https://go.dev/play/?v=gotip。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，本教程基于本地安装 Go1.18 Beta1 为例进行。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ goup install 1.18beta1&lt;br/&gt;Downloaded   0.0% (    16384 / 143162528 bytes) ...&lt;br/&gt;Downloaded   5.9% (  8404928 / 143162528 bytes) ...&lt;br/&gt;Downloaded  14.1% ( 20234096 / 143162528 bytes) ...&lt;br/&gt;Downloaded  22.3% ( 31981328 / 143162528 bytes) ...&lt;br/&gt;Downloaded  30.5% ( 43695808 / 143162528 bytes) ...&lt;br/&gt;Downloaded  38.7% ( 55443040 / 143162528 bytes) ...&lt;br/&gt;Downloaded  45.7% ( 65486352 / 143162528 bytes) ...&lt;br/&gt;Downloaded  53.9% ( 77200832 / 143162528 bytes) ...&lt;br/&gt;Downloaded  62.1% ( 88866144 / 143162528 bytes) ...&lt;br/&gt;Downloaded  70.3% (100580624 / 143162528 bytes) ...&lt;br/&gt;Downloaded  78.4% (112295088 / 143162528 bytes) ...&lt;br/&gt;Downloaded  85.5% (122371168 / 143162528 bytes) ...&lt;br/&gt;Downloaded  93.7% (134102032 / 143162528 bytes) ...&lt;br/&gt;Downloaded 100.0% (143162528 / 143162528 bytes)&lt;br/&gt;INFO[0013] Unpacking /Users/xuxinhua/.go/go1.18beta1/go1.18beta1.darwin-amd64.tar.gz ...&lt;br/&gt;INFO[0020] Success: go1.18beta1 downloaded &lt;span&gt;in&lt;/span&gt; /Users/xuxinhua/.go/go1.18beta1&lt;br/&gt;INFO[0020] Default Go is &lt;span&gt;set&lt;/span&gt; to &lt;span&gt;&#x27;go1.18beta1&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;验证是否安装成功：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ go version&lt;br/&gt;go version go1.18beta1 darwin/amd64&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;02 创建项目&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;切换到 &lt;code&gt;$HOME&lt;/code&gt; 目录，Linux/Mac 执行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ &lt;span&gt;cd&lt;/span&gt; ~&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Windows 下执行（在 C 盘，基于 cmd 或 PowerShell）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;C:\&amp;gt; &lt;span&gt;cd&lt;/span&gt; %HOMEPATH%&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后创建目录并初始化模块：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ mkdir generics&lt;br/&gt;$ &lt;span&gt;cd&lt;/span&gt; generics&lt;br/&gt;$ go mod init github.com/polaris1119/generics&lt;br/&gt;go: creating new go.mod: module github.com/polaris1119/generics&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;其中的模块前缀可以替换为你喜欢的名字。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;03 添加非泛型函数&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面以 map 为例，先看非泛型如何处理，泛型又是如何处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如有两个 map，分别是 map[string]int 和 map[string]float64，编写函数将 map 中的 value 值相加，返回结果。因为有两个类型，因此编写两个函数。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;SumInts&lt;/span&gt;&lt;span&gt;(m &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; s &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; _, v := &lt;span&gt;range&lt;/span&gt; m {&lt;br/&gt;        s += v&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; s&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;SumFloats&lt;/span&gt;&lt;span&gt;(m &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;float64&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;float64&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; s &lt;span&gt;float64&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; _, v := &lt;span&gt;range&lt;/span&gt; m {&lt;br/&gt;        s += v&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; s&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 main 函数中初始化两个 map 并调用上面的函数。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    ints := &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;int&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;&quot;first&quot;&lt;/span&gt;:  &lt;span&gt;34&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;second&quot;&lt;/span&gt;: &lt;span&gt;12&lt;/span&gt;,&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    floats := &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;float64&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;&quot;first&quot;&lt;/span&gt;:  &lt;span&gt;35.98&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;second&quot;&lt;/span&gt;: &lt;span&gt;26.99&lt;/span&gt;,&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;非泛型计算结果，SumInts: %v, SumFloats: %v\n&quot;&lt;/span&gt;, SumInts(ints), SumFloats(floats))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行后，输出结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ go run main.go&lt;br/&gt;非泛型计算结果，SumInts: 46, SumFloats: 62.97&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然得到了想要的结果，但 SumInts 和 SumFloats 的逻辑差不多。如果将来有其他类型，我们必须增加额外的函数，代码逻辑也类似。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了泛型，只需要一个函数就可以实现以上两个函数的功能，而且可以方便扩展为支持其他相关类型，比如 map[iint]float64 等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;03 泛型处理多类型&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要支持任一类型的值，该函数将需要一种方法来声明它支持的类型。同时，调用者需要一种方法来指定它是使用整数 map 还是浮点数 map 进行调用，即调用时指定实际参数的类型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了支持这一点，需要编写一个函数，除了它的普通函数参数外，还需要声明类型参数。这些类型参数使函数具有通用性，使其能够处理不同类型的参数。这样，你可以使用类型参数和普通函数参数调用该通用函数，即泛型函数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个类型参数都有一个类型约束，作为类型参数的一种元类型。每个类型约束指定调用代码可以用于相应类型参数的允许类型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然类型参数的约束通常表示一组类型，但在编译时类型参数代表单个类型——调用代码作为类型参数提供的类型。如果类型参数的约束不允许该调用者指定的类型，则代码将无法编译。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请记住，类型参数必须支持泛型代码对其执行的所有操作。例如，函数对参数执行加减运算，而 string 是不支持的，因此约束中不能包含 string 类型，否则代码将无法编译。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果没看懂，就看具体代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;SumIntsOrFloats&lt;/span&gt;[&lt;span&gt;K&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;, &lt;span&gt;V&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; | &lt;span&gt;float64&lt;/span&gt;]&lt;span&gt;(m &lt;span&gt;map&lt;/span&gt;[K]V)&lt;/span&gt; &lt;span&gt;V&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; s V&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; _, v := &lt;span&gt;range&lt;/span&gt; m {&lt;br/&gt;        s += v&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; s&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;函数 SumIntsOrFloats 声明了两种参数：类型参数和普通函数参数。其中类型参数放在 &lt;code&gt;[]&lt;/code&gt; 中，普通参数依然放在 &lt;code&gt;()&lt;/code&gt; 中。（别问类型参数为什么不用 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;，官方给了解释：https://groups.google.com/g/golang-nuts/c/7t-Q2vt60J8/m/65D5xBDvBgAJ）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该函数的类型参数是：&lt;code&gt;K comparable, V int | float64&lt;/code&gt;，其中 K、V 的名字不重要，分别表示某种类型，comparable 和 &lt;code&gt;int | float64&lt;/code&gt; 是 K、V 类型的约束，即调用该方法时，K、V 允许的类型。comparable 是语言预定义的约束，官方的解释如下：https://pkg.go.dev/builtin@master#comparable&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;comparable is an interface that is implemented by all comparable types (booleans, numbers, strings, pointers, channels, interfaces, arrays of comparable types, structs whose fields are all comparable types). The comparable interface may only be used as a type parameter constraint, not as the type of a variable.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即表示所有可比较类型，也就是说，K 可以是任意可比较类型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 V 的类型约束 &lt;code&gt;int | float64&lt;/code&gt; 表示只允许是 int 或 float64，其他类型编译会报错。关于类型约束更多内容，可以参考我之前写的文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxNzY0NDE3NA==&amp;amp;mid=2247488768&amp;amp;idx=1&amp;amp;sn=fff49e608b40b25493543e08034aca63&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Go1.18 类型约束那些事&lt;/a&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再看该函数的普通参数：m map[K]V，这表明，m 是一个 map，它的 key 类型是 K，value 类型是 V。很显然，这两个是该函数「类型参数」定义的类型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;泛型函数有了，该如何调用呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 main 中增加如下调用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;fmt.Printf(&lt;span&gt;&quot;泛型计算结果，Ints 结果: Floats 结果: %v\n&quot;&lt;/span&gt;, SumIntsOrFloats[&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;](ints), SumIntsOrFloats[&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;float64&lt;/span&gt;](floats))&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同一个函数，支持 map[string]int 和 map[string]float64。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意，我们在调用函数和声明函数类型，用 &lt;code&gt;[]&lt;/code&gt; 指定了具体的类型，比如 &lt;code&gt;SumIntsOrFloats[string, int](ints)&lt;/code&gt;，即调用时普通参数是什么类型通过 &lt;code&gt;[]&lt;/code&gt; 指定。很显然，这很繁琐，实际上 Go 会进行类型推断，即编译器会通过普通参数的类型推导出「类型参数」。不过，跟 Go 中其他类型自动推导类似，有些情况是无法自动推导的，这时候必须手动指定实际的类型参数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，上面的调用代码也可以简写为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;fmt.Printf(&lt;span&gt;&quot;泛型计算结果，Ints 结果: Floats 结果: %v\n&quot;&lt;/span&gt;, SumIntsOrFloats(ints), SumIntsOrFloats(floats))&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行后，得到如下结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ go run main.go&lt;br/&gt;非泛型计算结果，SumInts: 46, SumFloats: 62.97&lt;br/&gt;泛型计算结果，Ints 结果: 46, Floats 结果: 62.97&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;04 声明类型约束&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上文已经大概解释了类型约束，针对本文例子，解释下类型约束。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面没有将 &lt;code&gt;int | float64&lt;/code&gt; 定义为一个命名约束，相当于约束字面量（或联合类型）。一般有两种场景会单独声明类型约束：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;约束太长，比如有很多类型，直接写在函数中，会严重影响可读性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;方便类型约束重用&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将上面 V 的约束定义为单独的类型约束：（实际是接口，但不能作为单独类型使用）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Number &lt;span&gt;interface&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;int&lt;/span&gt; | &lt;span&gt;float64&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于此定义另外一个函数 SumNumbers：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;SumNumbers&lt;/span&gt;[&lt;span&gt;K&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;, &lt;span&gt;V&lt;/span&gt; &lt;span&gt;Number&lt;/span&gt;]&lt;span&gt;(m &lt;span&gt;map&lt;/span&gt;[K]V)&lt;/span&gt; &lt;span&gt;V&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; s V&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; _, v := &lt;span&gt;range&lt;/span&gt; m {&lt;br/&gt;        s += v&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; s&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类似的，可以这样调用（省略了「类型参数」）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;fmt.Printf(&lt;span&gt;&quot;泛型计算结果（带 Constraint），Ints 结果: %v, Floats 结果: %v\n&quot;&lt;/span&gt;,&lt;br/&gt;    SumNumbers(ints),&lt;br/&gt;    SumNumbers(floats))&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;05 总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;泛型的内容远不止这些，但本文作为入门教程，旨在介绍基础内容，让大家对泛型使用有一个基本了解。本文的示例参照官方泛型教程：https://go.dev/doc/tutorial/generics。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文完整代码见 playground：https://go.dev/play/p/TwS6wda3nbv?v=gotip。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>