<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>eb8e9206e54416ac1e29ba4d3f9c7a31</guid>
<title>面试写：如何优雅地给对象的所有方法添加异常处理</title>
<link>https://toutiao.io/k/r81a6pj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwNDMyMTg4Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/wIDSOebZK4NvWoUN1gSpNiaxwF4VLvroSV4fibB1a5iaLEaR23sVIW9ickg4StvsXlxnPpslKAltA6mvJUhkT2PsaA/0?wx_fmt=png&quot; data-nickname=&quot;JavaScript 每日一练&quot; data-alias=&quot;&quot; data-signature=&quot;每天一道JavaScript 实战题，让大家平时多多积累实用的知识，提高开发效率，才有更多的时间摸鱼。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码不会全部按照我们的预期运行，可能会有意料之外的情况，为了保证程序的健壮性，要进行异常处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如一个对象的所有方法，都应该做异常处理，但是，如果每个方法都加 try catch 又太麻烦：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; obj = {&lt;br/&gt;    aaa() {&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;// aaa&lt;/span&gt;&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt;(e) {&lt;br/&gt;            &lt;span&gt;// xxxx&lt;/span&gt;&lt;br/&gt;        } &lt;br/&gt;    },&lt;br/&gt;    bbb() {&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;// bbb&lt;/span&gt;&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt;(e) {&lt;br/&gt;            &lt;span&gt;// xxxx&lt;/span&gt;&lt;br/&gt;        } &lt;br/&gt;    },&lt;br/&gt;    ccc() {&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;// ccc&lt;/span&gt;&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt;(e) {&lt;br/&gt;            &lt;span&gt;// xxxx&lt;/span&gt;&lt;br/&gt;        } &lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有没有一种方式既能对所有方法做异常处理，又不用重复写这么多次呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有，就是代理模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;代理模式是通过对目标对象做一层包装，提供和目标对象同名的方法，最终的功能实现还是调用目标对象的方法，但可以额外添加一些职责，比如日志、权限等，透明地对目标对象做一些扩充。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如 React 里的高阶组件就是代理模式的实现，可以透明的扩展被包装的组件的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很明显，这里的异常处理，也可以用代理的方式来做。但不用完全自己实现，ES6 提供了 Proxy，可以基于它来实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;定义 createProxy 方法来实现代理，创建一个 Proxy 对象，对目标对象 target 做一层包装，定义 get、set 时的处理：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;createProxy&lt;/span&gt;(&lt;span&gt;target&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; proxy = createExceptionProxy();&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Proxy&lt;/span&gt;(target, {&lt;br/&gt;        &lt;span&gt;get&lt;/span&gt;: proxy,&lt;br/&gt;        &lt;span&gt;set&lt;/span&gt;: proxy&lt;br/&gt;    });&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;createExceptionProxy&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;span&gt;target, prop&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!(prop &lt;span&gt;in&lt;/span&gt; target)) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; target[prop] === &lt;span&gt;&#x27;function&#x27;&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; createExceptionZone(target, prop);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; target[prop];&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果 target 不包含 prop，就返回空，否则返回对应的属性值 target[prop]。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果属性值是函数，则做一层包装:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;createExceptionZone&lt;/span&gt;(&lt;span&gt;target, prop&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;span&gt;...args&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;let&lt;/span&gt; result;&lt;br/&gt;        ExceptionsZone.run(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;          result = target[prop](...args);&lt;br/&gt;        });&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; result;&lt;br/&gt;    };&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终的功能实现还是调用 target，传入参数，把调用结果作为代理方法的结果返回。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;包装这一层的目的是为了做异常处理，也就是 ExceptionsZone.run 做的事情：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ExceptionsZone&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; exceptionHandler = &lt;span&gt;new&lt;/span&gt; ExceptionHandler();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; run(callback) {&lt;br/&gt;      &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        callback();&lt;br/&gt;      } &lt;span&gt;catch&lt;/span&gt; (e) {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.exceptionHandler.handle(e);&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用目标方法，并做 try catch，当出现异常的时候，用 ExceptionHandler 来处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的异常处理我们就简单打印下日志：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ExceptionHandler&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    handle(exception) {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;记录错误：&#x27;&lt;/span&gt;,exception.message, exception.stack);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就实现了给目标对象的所有方法添加异常处理的目的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; obj = {&lt;br/&gt;    &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;guang&#x27;&lt;/span&gt;,&lt;br/&gt;    say() {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Hi, I\&#x27;m &#x27;&lt;/span&gt; + &lt;span&gt;this&lt;/span&gt;.name);&lt;br/&gt;    },&lt;br/&gt;    coding() {&lt;br/&gt;        &lt;span&gt;//xxx&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;bug&#x27;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    coding2() {&lt;br/&gt;        &lt;span&gt;//xxx&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;bug2&#x27;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; proxy = createProxy(obj);&lt;br/&gt;&lt;br/&gt;proxy.say();&lt;br/&gt;proxy.coding();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的 coding、coding2 方法都会抛出异常，但并没有做异常处理，我们用代理给它加上：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0471869328493648&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGhOauW8OLCDUN2yyyeT0ykX9a2pcRibpDmF3HzcFicGlD8dt07Fr5LYztb7X2FKQcYEnCWIxnynKAiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1102&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们成功地通过代理模式给对象方法添加了异常处理！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是现在这样还是有问题的，比如我把 coding 方法改为 async 的就不行了：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9936170212765958&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGhOauW8OLCDUN2yyyeT0ykXsKJH1Bcc0mWTxA5nVfV89TODbyRvsQOrjNZlcofGeVobwv3Co1cBzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;940&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那怎么办呢？能不能统一对异步和同步方法做代理呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;确实没办法，因为没法区分方法是同步还是异步，而且这两种方法的调用方式也不同，但我们可以单独提供一个 runner 方法来运行这些异步逻辑：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ExceptionsZone&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; exceptionHandler = &lt;span&gt;new&lt;/span&gt; ExceptionHandler();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; asyncRun(callback) {&lt;br/&gt;      &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;await&lt;/span&gt; callback();&lt;br/&gt;      } &lt;span&gt;catch&lt;/span&gt; (e) {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.exceptionHandler.handle(e);&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后这样运行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;(&lt;span&gt;async&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;await&lt;/span&gt; ExceptionsZone.asyncRun(proxy.coding2);&lt;br/&gt;})();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就能处理异步逻辑中的异常了：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9741035856573705&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGhOauW8OLCDUN2yyyeT0ykXOosScx9G5iaVkQYmbDp6OMHXn3kvKnM1IsrgWrPzNzjegibYTU6XrIicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1004&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;我们通过代理的方式给对象的所有同步方法添加了异常处理，然后又提供了运行异步方法的 runner 函数，对异步的异常做了处理，结合这两种方式，优雅地给目标对象的所有方法加上了异常处理。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能你会说，代理就代理，你定义这么多 class 干啥？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为这段逻辑是我从 Nest.js 源码里摘出来的，它源码里就是这样来给对象添加异常处理的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0945674044265594&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGhOauW8OLCDUN2yyyeT0ykXQE6bIOKyBs6YfAwZoDib7Yu2Ou9CrfparHZ4Zc3QGJo6aLPpc4RMSsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;994&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;异步逻辑也是单独提供了个方法来运行：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3582089552238806&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGhOauW8OLCDUN2yyyeT0ykXqNezpkKDO9IjV4JTRg68XJdMsm4qiaaQiazCKLCibHB9gTzTaqjbrHomQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;670&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我觉得这个透明给对象添加异常处理的方式很优雅，就把它从 Nest.js 源码里抽了出来。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了保证健壮性，我们要对所有可能报错的代码添加异常处理，但是每个方法都添加 try catch 又太麻烦，所以我们利用 Proxy 实现了代理，透明的给对象的所有方法都添加上了异常处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，代理添加的只是同步的异常处理，并没有捕获异步逻辑的异常，我们可以单独一个一个函数来运行异步方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结合代理 + 提供运行异步方法的 runner 这两种方式，就能给一个没有做任何异常处理的对象加上异常处理。是不是很优雅～&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;欢迎&lt;/span&gt;&lt;code&gt;长按图片加刷碗智为好友&lt;/code&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;我会第一时间和你分享前端行业趋势，学习途径，搞怪趣事，生活中的另一面幽默等等。&lt;span&gt;新的一年我们一起洗刷刷！！！！！！&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;68&quot; data-cropselx2=&quot;361&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;385&quot; data-fileid=&quot;100021057&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8948194662480377&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy55d6jntYlvCrOVACPvqJkZuaOwJiaecIvQdzSq8lLVBibrGRZPxlWKvV7sGqC3CtOjZ1QxHu56tWZwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;637&quot;/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>aede97631824d9cc439684347f4c5fb9</guid>
<title>MySQL-Seconds_behind_master的精度误差</title>
<link>https://toutiao.io/k/qgmx99e</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;h1&gt;MySQL-Seconds_behind_master的精度误差&lt;/h1&gt;&lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;Seconds_behind_master是我们观察主从延迟的一个重要指标。但任何指标所能表示的精度都是有限的。例如用精度只能到秒的指标去衡量毫秒级的表现就会产生非常大的误差。如果再以此误差去分析问题，就会让思维走上弯路。例如用Seconds_behind_master去评估1s内的主从延迟就是一个典型的例子。&lt;/p&gt;&lt;h2&gt;问题现场&lt;/h2&gt;&lt;p&gt;在一些问题的排查中，我们注意到一个很奇怪的现象。那就是相同配置的从库表现出来的主从延迟差距有将近500ms。而这两个从库之间的差别就是所在的机房不一样(和主库都不在同一个机房)。如下图所示：&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43105756358768405&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yiaiaFLiaflYRS2CtQsRjRiaJLtH5B5Ewnkw7BJibk9tW4wdPSpiadPGpYa3CSycfic1hLTn2ThP9Bichxsvfh8gzk7wXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1494&quot;/&gt;&lt;/p&gt;&lt;h2&gt;网络问题&lt;/h2&gt;&lt;p&gt;难道是网络问题？那我们ping一下吧，最多也就相差1ms。那么还有499ms去哪里了呢，看来还得继续挖掘。&lt;/p&gt;&lt;h2&gt;Seconds_behind_master的取点数据&lt;/h2&gt;&lt;p&gt;直觉上来说网络问题不可能导致500ms这么大的误差，而机器配置和MySQL版本又是一样的。这就让笔者不得不怀疑这个兼容数据的准确性。所以就先看看这个500ms是怎么计算出来的。&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5501955671447197&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yiaiaFLiaflYRS2CtQsRjRiaJLtH5B5EwnkwlqdPPrKZicbkXzuyicg9EBJeIXVs9cnOaQjCpkjo2VicaenW9kdZp8tPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1534&quot;/&gt;&lt;br/&gt;从监控取点数据来看从库C确实有主从延迟，不然为什么有那么多取点为0呢。&lt;/p&gt;&lt;h2&gt;Seconds_behind_master什么时候计算出来为1&lt;/h2&gt;&lt;p&gt;这时候笔者突然想到一个点，如果主从延迟一个是501ms一个是499ms，那么Seconds_behind_master计算的时候会不会采用四舍五入法。501ms(&amp;gt;=500ms)的就是1，499(&amp;lt;500ms)的就是0？为了了解这一问题，笔者就去翻了翻源码。&lt;/p&gt;&lt;h3&gt;Seconds_behind_master在MySQL中的计算源码&lt;/h3&gt;&lt;p&gt;计算这个指标的代码有很多微妙的分支，应对了各种corner case。在此笔者只列出和当前问题相关的源码。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;long time_diff= ((long)(time(0) - mi-&amp;gt;rli-&amp;gt;last_master_timestamp)&lt;br/&gt;                       - mi-&amp;gt;clock_diff_with_master);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前面time(0) - mi-&amp;gt;rli-&amp;gt;last_master_timestamp明显就是指时间差。但是，我们要考虑到一个很容易被忽略的常识，也就是不同机器的时间戳是不一样的！&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37978560490045943&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yiaiaFLiaflYRS2CtQsRjRiaJLtH5B5EwnkwV5bAibPqCEDVg5kibia6Ce5s7wyDacmYzLric9MgY8YgknRefib54lM7HfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1306&quot;/&gt;&lt;br/&gt;那么很明显的，如果主从实际延迟是0，但是计算的时候没有剔除掉机器时钟的差异。那么主从延迟就是6s。源码中的mi-&amp;gt;clock_diff_with_master就是去修正这个差距！而计算这个&lt;br/&gt;clock_diff_with_master就会引起不小的误差。&lt;/p&gt;&lt;h3&gt;什么时候计算clock_diff_with_master&lt;/h3&gt;&lt;p&gt;笔者在源码中翻阅时候注意到clock_diff_with_master不是每次都去计算的，而是在主从连接上或者重连(reconnect)的那一刻去计算一次。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;handle_slave_io&lt;br/&gt;    /* 建立主从连接 */&lt;br/&gt;    |-&amp;gt;safe_connect(thd, mysql, mi)) &lt;br/&gt;    /* connected: 主从连接成功后，计算一下主从clock_diff_with_master */&lt;br/&gt;    |-&amp;gt;get_master_version_and_clock&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这就自然会导致下面的现象，假设一旦clock_diff_with_master计算有了误差。那么这个误差就会一直存在，直到下次重连为止！&lt;/p&gt;&lt;h3&gt;clock_diff_with_master跨秒误差&lt;/h3&gt;&lt;p&gt;接着笔者又注意到clock_diff_with_master精度只能到秒。那么自然就会出现下面这几种现象。为了简单起见，我们假设绝对时钟是从0开始，而且我们假设主从延迟是0。只看精度误差所能造成的影响。&lt;/p&gt;&lt;h3&gt;在实际主从延迟为0的情况下clock_diff_with_master计算出来是-1，Seconds_behind_master计算为1&lt;/h3&gt;&lt;p&gt;尽管有NTP，我们也不可能做到两台机器的时间戳在完全一致(除非两台机器有铯原子钟，那基本就没有毫秒级的误差了）。两台机器之间出现几百毫秒甚至数秒的延迟非常正常。例如假设我当前从库的clock是0.5s，主库的clock是1s。那么由于计算精度(只能到秒)的原因，实际实际只有0.5s的时间差会放大到1s。&lt;br/&gt;&lt;img data-ratio=&quot;0.49713631156930127&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yiaiaFLiaflYRS2CtQsRjRiaJLtH5B5EwnkwfQiamib0PvHcRQHUk1DaxY9y4Mj9Fe884aKjD0NbHHbOLnDbGuicb4fNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1746&quot;/&gt;&lt;br/&gt;那么我们现在可以计算出来在这种情况下Seconds_behind_master的平均值，在这里有一个预先假设就是我们取监控点的时间是随机的。&lt;br/&gt;&lt;img data-ratio=&quot;0.44468085106382976&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yiaiaFLiaflYRS2CtQsRjRiaJLtH5B5EwnkwgOEya6icNpbibr9OwT4bgVjtRdFUww34xzBqrnJaeVyQukgYyrHNxNxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1880&quot;/&gt;&lt;br/&gt;在上图中我们可以看到，在我们取从库时钟[0.5,1.5)这个1s的时间段范围内。在前0.5s，也就是[0.5,1)这个区间中我们计算出来的Seconds_behind_master是0，而在[1,1.5)区间计算的确是1&lt;br/&gt;。那我们的平均值就可以计算出来为(0.5*0+0.5*1)/(1.5-0.5)=0.5=500ms!&lt;br/&gt;也就是说，在没有任何实际主从延迟的情况下，仅仅跨秒这一个因素就能造成好几百毫秒的误差。&lt;/p&gt;&lt;h3&gt;实际主从延迟为0的情况下clock_diff_with_master计算为0，Seconds_behind_master计算为-1并被校正为0&lt;/h3&gt;&lt;p&gt;另外一个有意思的点是，既然误差能加1，自然也能减1。也就是Seconds_behind_master计算为-1。这就会给观察人员造成一个错觉，从库比主库快！当然了MySQL源码考虑到了这一点，强制校正为0。&lt;br/&gt;在这里，笔者将主从连接的那一刻稍微往前偏移0.1s，就可以构造出刚才说的现象，如下图所示：&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47314285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yiaiaFLiaflYRS2CtQsRjRiaJLtH5B5Ewnkw3JpIJJPbITCqDKaqtpntHkbCBK7IMdiaBqbCicVXl9icx8mXd7mdDP4Og/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1750&quot;/&gt;&lt;br/&gt;MySQL中的源码注释和强行校正逻辑如下所示:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;      long time_diff= ((long)(time(0) - mi-&amp;gt;rli-&amp;gt;last_master_timestamp)&lt;br/&gt;                       - mi-&amp;gt;clock_diff_with_master);&lt;br/&gt;      /*&lt;br/&gt;        Apparently on some systems time_diff can be &amp;lt;0. Here are possible&lt;br/&gt;        reasons related to MySQL:&lt;br/&gt;        - the master is itself a slave of another master whose time is ahead.&lt;br/&gt;        - somebody used an explicit SET TIMESTAMP on the master.&lt;br/&gt;        Possible reason related to granularity-to-second of time functions&lt;br/&gt;        (nothing to do with MySQL), which can explain a value of -1:&lt;br/&gt;        assume the master&#x27;s and slave&#x27;s time are perfectly synchronized, and&lt;br/&gt;        that at slave&#x27;s connection time, when the master&#x27;s timestamp is read,&lt;br/&gt;        it is at the very end of second 1, and (a very short time later) when&lt;br/&gt;        the slave&#x27;s timestamp is read it is at the very beginning of second&lt;br/&gt;        2. Then the recorded value for master is 1 and the recorded value for&lt;br/&gt;        slave is 2. At SHOW SLAVE STATUS time, assume that the difference&lt;br/&gt;        between timestamp of slave and rli-&amp;gt;last_master_timestamp is 0&lt;br/&gt;        (i.e. they are in the same second), then we get 0-(2-1)=-1 as a result.&lt;br/&gt;        This confuses users, so we don&#x27;t go below 0: hence the max().&lt;br/&gt;&lt;br/&gt;        last_master_timestamp == 0 (an &quot;impossible&quot; timestamp 1970) is a&lt;br/&gt;        special marker to say &quot;consider we have caught up&quot;.&lt;br/&gt;      */&lt;br/&gt;      protocol-&amp;gt;store((longlong)(mi-&amp;gt;rli-&amp;gt;last_master_timestamp ?&lt;br/&gt;                                   max(0L, time_diff) : 0));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;如何获得精确的毫秒级的主从延迟&lt;/h2&gt;&lt;p&gt;由于Seconds_behind_master精度的原因，完全无法衡量毫秒级的主从延迟，所以出现了pt-heartbeat这样的工具去精确的计算主从间毫秒级的延迟。在后续采用pt-heartbeat对两个库进行监控后，这两个看上去平均延迟相差500ms的从库实际主从延迟差距在10ms之内。&lt;/p&gt;&lt;h1&gt;总结&lt;/h1&gt;&lt;p&gt;任何指标都有其表示的精度，而在其精度表示范围之外就会产生相当大的误差，以至于能够误导我们的判断。当对某一项的指标感到很反常识的时候，可以考虑是不是本身指标并不能描述当前我们想要观察的现象。例如本文中的阐述就表明Seconds_behind_master对1s的主从延迟的刻画没有太大的意义。&lt;/p&gt;&lt;h2&gt;公众号&lt;/h2&gt;&lt;p&gt;关注笔者公众号，获取更多干货文章:&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.359781121751026&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yiaiaFLiaflYRS2CtQsRjRiaJLtH5B5Ewnkwcjic6vdQrxP2nJDSglYWZVKJV2a0LXDVEiapkJAtm6TsiaCKXXRhdzCrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1462&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c1bfa012dacb6fbb836ac050eec9727f</guid>
<title>30岁转行入IT晚吗</title>
<link>https://toutiao.io/k/o6nwkbk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有人私信：非专业出身，30岁转行去做开发，业内有没有案例？下面是一些基本情况。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;计划拿出1年的时间，想通过自学入行做开发。理由：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1，薪资水平还可以； &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2，符合自己对未来的规划； &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3，周围一个文科的妹子，在别人手把手的调教下，外包到银行做测试，拿到了过万的薪资。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;心理接受度&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不比技术，看看有没有可能性？一个实际的问题：能接受一个年轻人做自己的领导吗？周围的同事更多的也是20郎当岁，能相处的愉快吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比一路从20岁出头拱到30岁的人而言，要在30岁时去跟一些职场出道没多久的年轻人去拼，有优势也有弊端。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;优势：职场经验丰富，软实力加分&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;弊端：项目经验不足，精力上拼不过年轻人，非科班欠缺一些底层逻辑&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;自学的问题&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自学的想法可以抛弃，在没有积累的情况下，线下培训是最有效的途径，可以面对面交流沟通，能解决实际疑问，少走很多弯路。另外，还能接触到商业项目的案例实战，更快速的接近职场，自学完全是没有这个氛围，也不足以支撑一个人可以坚持1年之久，更容易走弯路且不自知，一句话，没有别人的指导，快速入门没戏。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;入门后可以自学，持续提升。终身学习，是从事IT行业最基本的职业要求，如果想找个工作后躺平，被优化毕业是迟早的事。不进则退，进得慢也会退。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;年龄的问题&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按现在的行业状况来看，确实是有些晚，30岁转管理危机，35岁转行危机，40岁生存危机等等，这不是行业定数，我相信各行各业都存在这个问题，所以，接受即可，做好自己的当下。确实想清楚一件事，做就是了，任何时候都不晚。种一棵树，最好的时机是十年前，其次就是现在。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;不排期，就遥遥无期，不提上日程，就没有日程。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这依旧是一个看年纪吃饭的年代，30岁是个坎，如果没有点出彩的成绩，路起来也很难。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多事都有AB面，不要片面看待，更不要掩耳盗铃，IT也一样，不要只看到高薪、高福利、可以远程办公等等，对应的还有高压力、鼠标手、颈椎腰椎疼、掉发秃头，而且越来越多的人进入，竞争异常激烈，一边人手不足，一边人满为患，也是有原因的。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经验不足，更需要有经验的人指导，他们走过的路，吃过的亏，踩过的坑，更能对后来者形成一个启示，从他们那里来拓宽自己视野，让自己走得更稳健。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.4346153846153846&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EwukgicNDWBssXhDQQZNFfvXuZmgY1rtXr3VE6eEjvf67FXPHgXvR8RqSlbBw6n4a94H3c21H5ichgOznGARziclg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1040&quot;/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>17b545027a9c06fb4bcf4f5c4538cda2</guid>
<title>百度某部门面试原题</title>
<link>https://toutiao.io/k/l0zugzm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;本文适合最近在考虑新机会的的小伙伴阅读&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;欢迎关注&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;前端早茶&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，与广东靓仔携手共同进阶～&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3ODAyNDI0OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ic5A4V8PX4PmOXMQHa6L3OhPGOnf2BSZib7ibVcAj2j2FYkfFCWb2xmyfX63TYVlofunfD4QnB5vqELZqXfnQZMlA/0?wx_fmt=png&quot; data-nickname=&quot;前端早茶&quot; data-alias=&quot;ZeFeng_axios&quot; data-signature=&quot;专注前端，一起结伴同行，紧跟业界发展步伐~&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者：广东靓仔&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一、背景&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;    这套题目是广东靓仔认识的一位前端妹子经过“一番努力”Get到的，感谢~&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1717791411042944&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ic5A4V8PX4PmKpHrxF4VjOd39aXmquRhBfEw9F8HGGQ48a8KjiaT2ZEdibX3q4dxiaZUMq6gibKLsKAeM6xEp4kXf0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;163&quot;/&gt;&lt;/p&gt;&lt;section&gt;这套题目，比较实用的，接下来广东靓仔跟小伙伴一起来看看这套百度某部门的技术一面原题。&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二、原题&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;设置元素的backgroud 哪些区域颜色会改变&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;background&lt;/span&gt;填充区域默认为&lt;span&gt;content&lt;/span&gt;、&lt;span&gt;padding&lt;/span&gt;和&lt;span&gt;border&lt;/span&gt;区域。&lt;/p&gt;&lt;p&gt;然而该行为由&lt;span&gt;background-clip&lt;/span&gt;属性决定,默认为&lt;span&gt;border-box&lt;/span&gt;该属性对应的&lt;/p&gt;&lt;section&gt;&lt;span&gt;background&lt;/span&gt;填充对应区域如下:&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.35659760087241005&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ic5A4V8PX4PmKpHrxF4VjOd39aXmquRhBjiaQVsiaN9lCmibjksqe7VG9yfCqG5FkwNUcwq95U91kPt0F3v9YuZcUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;917&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;FOUC 无样式闪烁（文档样式短暂失效）@import&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;如果使用import方法对CSS进行导入,会导致某些页面在Windows 下的Internet Explorer出现一些奇怪的现象:以无样式显示页面内容的瞬间闪烁,这种现象称之为文档样式短暂失效(Flash of Unstyled Content),简称为FOUC。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;原因大致为：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1：使用import方法导入样式表；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2：将样式表放在页面底部；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3：有几个样式表，放在html结构的不同位置；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;其实原理很清楚：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt; 当样式表晚于结构性html加载，当加载到此样式表时，页面将停止之前的渲染。此样式表被下载和解析后，将重新渲染页面，也就出现了短暂的花屏现象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;解决方法：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;使用LINK标签将样式表放在文档HEAD中。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;重绘重排区别&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;重绘不一定需要重排（&lt;span&gt;&lt;span&gt;比如颜色的改变&lt;/span&gt;）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;重排必然导致重绘（&lt;span&gt;比如改变网页位置&lt;/span&gt;）&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;重排(Reflow)：&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;当渲染树的一部分必须更新并且节点的尺寸发生了变化，浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;重绘(Repaint)：&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;是在一个元素的外观被改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如改变某个元素的背景色、文字颜色、边框颜色等等&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;减少重排次数和缩小重排影响范围解决方式：&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;1. &lt;/span&gt;将多次改变样式属性的操作，合成一次操作。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2. 将需要多次重排的元素,嗯，position属性。设为absolute。或fixed。使其脱离文档流，这样，他的变化就不会影响到其他的元素。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3. 在内存中多次操作节点。完成后再添加到文档中去。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4. 如果对一个元素进行复杂的操作，可以将display属性设为none嗯使其隐藏。操作完后再显示。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5. 在需要经常获取那些引起浏览器重排的属性值时，要缓存到变量。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你们项目中Token是怎么拿到的&lt;/span&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;用户登陆,发送手机号码和验证码&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;后台接收参数,查找用户,用户存在就生成token,返回给前端&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;前端登陆成功,把token存到vuex(做持久化)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用axios拦截器,读取vuex中的token,并放入请求头&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;请求其他接口,就会带上token&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;后台在需要登陆的接口上,获取token,解密token获得userId,返回前端需要的数据&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;用户在下次使用app,如果token还在有效期内,不需要重新登陆&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有不同的或者更好的方案也可以回答，发散题，自由发挥&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;cookie是什么？&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;cookie 是存储在浏览器中的纯文本，浏览器的安装目录下会专门有一个 cookie 文件夹来存放各个域下设置的cookie。&lt;/section&gt;&lt;section&gt;存储量很小4kb&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;拓展说明，&lt;/strong&gt;&lt;strong&gt;加分项：&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;    当网页要发http请求时，浏览器会先检查是否有相应的cookie，有则自动添加在request header中的cookie字段中。&lt;span&gt; 这些是浏览器自动帮我们做的，而且每一次http请求浏览器都会自动帮我们做。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以对于那设置“每次请求都要携带的信息（最典型的就是身份认证信息）”就特别适合放在cookie中，其他类型的数据就不适合了。&lt;/span&gt;&lt;/section&gt;&lt;p data-pid=&quot;Rvd0FwJm&quot;&gt;&lt;span&gt;&lt;strong&gt;时效性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;expires 是 http/1.0协议中的选项，在新的http/1.1协议中expires已经由 max-age选项代替，两者的作用都是限制cookie 的有效时间。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;expires的值是一个时间点（cookie失效时刻= expires ），而max-age 的值是一个以秒为单位时间段（cookie 失效时刻= 创建时刻+ max-age ）。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;httpOnly&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;设置cookie是否能通过 js 去访问。默认情况下，cookie不会带httpOnly选项(即为空)，所以默认情况下，客户端是可以通过js代码去访问（包括读取、修改、删除等）这个cookie的。当cookie带httpOnly选项时，客户端则无法通过js代码去访问（包括读取、修改、删除等）这个cookie。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Js数据类型有哪些 &lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;值类型(基本类型)：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;引用数据类型：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对象(Object)、数组(Array)、函数(Function)。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;基本类型引用类型区别 &lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基本类型&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基本类型的访问是按值访问的，就是说我们可以操作保存在变量中的实际的值。基本类型有以下几个特点：&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基本类型的值是不可变得：   &lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;    2.基本类型的比较是值的比较：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;    3.基本类型的变量是存放在栈区的（栈区指内存里的栈内存）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;引用类型&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;引用类型可以拥有属性和方法，属性又可以包含基本类型和引用类型。引用类型的有以下一些特性：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1.引用类型的值是可变的&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2.引用类型的值是同时保存在栈内存和堆内存中的对象&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3.引用类型的比较是引用的比较&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;判断一个对象是不是数组&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;方法1：&lt;/p&gt;&lt;p&gt;根据对象的class属性来判断&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; obj = []&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;Object&lt;/span&gt;.prototype.toString.call(obj) === &lt;span&gt;&#x27;[object Array]&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;方法2：&lt;/p&gt;&lt;p&gt;&lt;span&gt;Array.isArray直接判断&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; obj = []&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;Array&lt;/span&gt;.isArray(obj))&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;js数组遍历都有哪些方法&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;这里列举12种，具体如下所示：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;strong&gt;1.for循环&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;,len=arr.length; i &amp;lt; len; i++) {   &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.foreach循环&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 没有返回值,对原数组无影响&lt;/span&gt;&lt;br/&gt;arr.forEach(&lt;span&gt;(&lt;span&gt;item,index,array&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;//执行代码&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;// 参数：value数组中的当前项, index当前项的索引, array原始数组；&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.map循环&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; ary = [&lt;span&gt;12&lt;/span&gt;,&lt;span&gt;23&lt;/span&gt;,&lt;span&gt;24&lt;/span&gt;,&lt;span&gt;42&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;]; &lt;br/&gt;&lt;span&gt;var&lt;/span&gt; res = ary.map(&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;item,index,ary &lt;/span&gt;) &lt;/span&gt;{ &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; item*&lt;span&gt;10&lt;/span&gt;; &lt;br/&gt;}) &lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(res);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;--&amp;gt;[120,230,240,420,10];  原数组拷贝了一份，并进行了修改&lt;/span&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(ary);&lt;span&gt;//--&amp;gt;[12,23,24,42,1]；  原数组并未发生变化&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.forof遍历&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; value &lt;span&gt;of&lt;/span&gt; myArray) {&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(value);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5.filter遍历&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;不会改变原始数组,返回新数组&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; arr = [&lt;span&gt;73&lt;/span&gt;,&lt;span&gt;84&lt;/span&gt;,&lt;span&gt;56&lt;/span&gt;, &lt;span&gt;22&lt;/span&gt;,&lt;span&gt;100&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; newArr = arr.filter(&lt;span&gt;&lt;span&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; item&amp;gt;&lt;span&gt;80&lt;/span&gt;)   &lt;span&gt;//得到新数组 [84, 100]&lt;/span&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(newArr,arr)&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.every遍历&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;every()是对数组中的每一项运行给定函数，如果该函数对每一项返回true,则返回true。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; arr = [ &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt; ]; &lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log( arr.every( &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt; item, index, array &lt;/span&gt;)&lt;/span&gt;{ &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; item &amp;gt; &lt;span&gt;3&lt;/span&gt;; &lt;br/&gt;    })); &lt;br/&gt;&lt;span&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;7.some遍历&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;some()是对数组中每一项运行指定函数，如果该函数对任一项返回true，则返回true。&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; arr = [ &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt; ]; &lt;br/&gt;   &lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log( arr.some( &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt; item, index, array &lt;/span&gt;)&lt;/span&gt;{ &lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; item &amp;gt; &lt;span&gt;3&lt;/span&gt;; &lt;br/&gt;})); &lt;br/&gt;&lt;span&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;8.reduce&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;      reduce() 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; total = [&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;].reduce(&lt;span&gt;(&lt;span&gt;a, b&lt;/span&gt;)=&amp;gt;&lt;/span&gt;a + b); &lt;span&gt;//10&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;     reduce接受一个函数，函数有四个参数，分别是：上一次的值，当前值，当前值的索引，数组&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;].reduce(&lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;previousValue, currentValue, index, array&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; previousValue + currentValue;&lt;br/&gt;});&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;9.reduceRight&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;reduceRight()&lt;/span&gt;&lt;span&gt;方法的功能和&lt;/span&gt;&lt;span&gt;reduce()&lt;/span&gt;&lt;span&gt;功能是一样的，不同的是&lt;/span&gt;&lt;span&gt;reduceRight()&lt;/span&gt;&lt;span&gt;从数组的末尾向前将数组中的数组项做累加。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;reduceRight()&lt;/span&gt;&lt;span&gt;首次调用回调函数&lt;/span&gt;&lt;span&gt;callbackfn&lt;/span&gt;&lt;span&gt;时，&lt;/span&gt;&lt;span&gt;prevValue &lt;/span&gt;&lt;span&gt;和 &lt;/span&gt;&lt;span&gt;curValue &lt;/span&gt;&lt;span&gt;可以是两个值之一。如果调用 &lt;/span&gt;&lt;span&gt;reduceRight() &lt;/span&gt;&lt;span&gt;时提供了 &lt;/span&gt;&lt;span&gt;initialValue &lt;/span&gt;&lt;span&gt;参数，则 &lt;/span&gt;&lt;span&gt;prevValue &lt;/span&gt;&lt;span&gt;等于 &lt;/span&gt;&lt;span&gt;initialValue&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;curValue &lt;/span&gt;&lt;span&gt;等于数组中的最后一个值。如果没有提供 &lt;/span&gt;&lt;span&gt;initialValue &lt;/span&gt;&lt;span&gt;参数，则 &lt;/span&gt;&lt;span&gt;prevValue &lt;/span&gt;&lt;span&gt;等于数组最后一个值， &lt;/span&gt;&lt;span&gt;curValue &lt;/span&gt;&lt;span&gt;等于数组中倒数第二个值。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; arr = [&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;];&lt;br/&gt; &lt;br/&gt;arr.reduceRight(&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;preValue,curValue,index,array&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; preValue + curValue;&lt;br/&gt;}); &lt;span&gt;// 10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;10.find&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;find()&lt;/span&gt;方法返回数组中符合测试函数条件的第一个元素。否则返回undefined。&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; stu = [&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;张三&#x27;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;gender&lt;/span&gt;: &lt;span&gt;&#x27;男&#x27;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;20&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;王小毛&#x27;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;gender&lt;/span&gt;: &lt;span&gt;&#x27;男&#x27;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;20&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;李四&#x27;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;gender&lt;/span&gt;: &lt;span&gt;&#x27;男&#x27;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;20&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;]&lt;br/&gt;stu.find(&lt;span&gt;(&lt;span&gt;element&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (element.name == &lt;span&gt;&#x27;李四&#x27;&lt;/span&gt;))&lt;br/&gt;&lt;span&gt;&lt;span&gt;//返回结果为&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//{name: &quot;李四&quot;, gender: &quot;男&quot;, age: 20}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;11.findIndex&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于数组中的每个元素，&lt;/span&gt;&lt;span&gt;findIndex &lt;/span&gt;&lt;span&gt;方法都会调用一次回调函数（采用升序索引顺序），直到有元素返回 &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;。只要有一个元素返回 &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;findIndex &lt;/span&gt;&lt;span&gt;立即返回该返回 &lt;/span&gt;&lt;span&gt;true &lt;/span&gt;&lt;span&gt;的元素的索引值。如果数组中没有任何元素返回 &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;，则 &lt;/span&gt;&lt;span&gt;findIndex&lt;/span&gt;&lt;span&gt; 返回 -1。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;findIndex &lt;/span&gt;&lt;span&gt;不会改变数组对象。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;].findIndex(&lt;span&gt;&lt;span&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x == &lt;span&gt;4&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;// Returns an index value of -1.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;12.keys，values，entries&lt;/strong&gt;&lt;/p&gt;&lt;p&gt; &lt;span&gt;ES6 提供三个新的方法 —— entries()，keys()和values() —— 用于遍历数组。它们都返回一个遍历器对象，可以用for...of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; index &lt;span&gt;of&lt;/span&gt; [&lt;span&gt;&#x27;a&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;b&#x27;&lt;/span&gt;].keys()) {&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(index);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;// 0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; elem &lt;span&gt;of&lt;/span&gt; [&lt;span&gt;&#x27;a&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;b&#x27;&lt;/span&gt;].values()) {&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(elem);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;// &#x27;a&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// &#x27;b&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; [index, elem] &lt;span&gt;of&lt;/span&gt; [&lt;span&gt;&#x27;a&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;b&#x27;&lt;/span&gt;].entries()) {&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(index, elem);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;// 0 &quot;a&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 1 &quot;b&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Js事件循环机制&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;Event Loop 包含两类：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1. 一类是基于 Browsing Context ，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 一种是基于 Worker &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;二者是独立运行的。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;JavaScript 是一门单线程语言，异步操作都是放到事件循环队列里面，等待主执行栈来执行的，并没有专门的异步执行线程。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;任务队列&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任务可以分为同步任务和异步任务，同步任务，顾名思义，就是立即执行的任务，同步任务一般会直接进入到主线程中执行；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而异步任务，就是异步执行的任务，比如ajax网络请求，setTimeout 定时函数等都属于异步任务，异步任务会通过任务队列( Event Queue )的机制来进行协调。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在事件循环中，每进行一次循环操作称为tick，通过阅读规范可知，每一次 tick 的任务处理模型是比较复杂的，其关键的步骤可以总结如下：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在此次 tick 中选择最先进入队列的任务( oldest task )，如果有则执行(一次)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;检查是否存在 Microtasks ，如果存在则不停地执行，直至清空Microtask Queue&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;更新 render&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;主线程重复执行上述步骤&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;深浅拷⻉贝区别&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;strong&gt;浅拷贝(Shallow Copy)：&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;仅拷贝对象的非对象属性(基本类型属性)、不可变对象属性，但是不拷贝对象的对象属性(不含不可变对象) ，即为浅拷贝。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    以下这些函数得到的都是浅拷贝：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Object.assign&lt;/span&gt;、&lt;span&gt;Array.prototype.slice()&lt;/span&gt;、&lt;span&gt;Array.prototype.concat()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;深拷贝(Deep Copy)：&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简单理解：&lt;span&gt;深拷贝会拷贝所有的属性。深拷贝前后两个对象互不影响。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;JSON.parse(JSON.stringify())&lt;/span&gt;、&lt;span&gt;手写递归函数&lt;/span&gt;、&lt;span&gt;函数库lodash&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;箭头函数特点&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;1. 省略function换成=&amp;gt; 一个参数的时候()可以省略 一个return的时候{}可以省略&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2. 不绑定this，其中的this指向函数定义位置的上下文this&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3. 内部不存在arguments和new.target，使用的都是外部的&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4. 没有原型，占用内存空间小&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Js垃圾回收方法&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;Javascript具有自动垃圾回收机制(&lt;strong&gt;GC&lt;/strong&gt;:Garbage Collecation)。&lt;/section&gt;&lt;section&gt;&lt;strong&gt;原理：&lt;/strong&gt;垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;（1）标记清除法&lt;/span&gt;&lt;/p&gt;&lt;section&gt;    在函数声明一个变量的时候，就将这个变量标记为“进入环境”。&lt;/section&gt;&lt;section&gt;（2）引用计数法&lt;/section&gt;&lt;section&gt; 引用计数的含义是跟踪记录每个值被引用的次数。当这个值的引用次数变成0时，就可以将其占用的内存空间回收回来。&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vuex更新流程&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;vuex的工作流程就是：&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）通过dispatch去提交一个actions，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）actions接收到这个事件之后，在actions中可以执行一些异步|同步操作，根据不同的情况去分发给不同的mutations，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）actions通过commit去触发mutations，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）mutations去更新state数据，state更新之后，就会通知vue进行渲染&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;拓展：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不能在mutations执行异步操作&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Vuex中所有的状态更新的唯一途径都是&lt;span&gt;mutation&lt;/span&gt;，异步操作通过 Action 来提交 mutation实现，这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个mutation执行完成后都会对应到一个新的状态变更，这样devtools就可以打个快照存下来，然后就可以实现 &lt;span&gt;time-travel&lt;/span&gt; 了。如果mutation支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，给调试带来困难。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;vue keep-alive组件有什么用&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;用于保留组件状态或避免重新渲染（缓存的作用）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;两个属性&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;与&lt;/span&gt;&lt;span&gt;exclude&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;二者都可以用逗号分割字符串、正则表达式或者一个数组。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- 逗号分隔字符串 --&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;keep-alive&lt;/span&gt; &lt;span&gt;include&lt;/span&gt;=&lt;span&gt;&quot;a,b&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;component&lt;/span&gt; &lt;span&gt;:is&lt;/span&gt;=&lt;span&gt;&quot;view&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span&gt;component&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;keep-alive&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;!-- 正则表达式 (使用 &lt;span&gt;`v-bind`&lt;/span&gt;) --&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;keep-alive&lt;/span&gt; &lt;span&gt;:include&lt;/span&gt;=&lt;span&gt;&quot;/a|b/&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;component&lt;/span&gt; &lt;span&gt;:is&lt;/span&gt;=&lt;span&gt;&quot;view&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span&gt;component&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;keep-alive&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;!-- 数组 (使用 &lt;span&gt;`v-bind`&lt;/span&gt;) --&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;keep-alive&lt;/span&gt; &lt;span&gt;:include&lt;/span&gt;=&lt;span&gt;&quot;[&#x27;a&#x27;, &#x27;b&#x27;]&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;component&lt;/span&gt; &lt;span&gt;:is&lt;/span&gt;=&lt;span&gt;&quot;view&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span&gt;component&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;keep-alive&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如何监听一个变量的变化 长度 index&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;defineProperty&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; a = { &lt;span&gt;watchValue&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt; };&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; lastTimeValue=a.watchValue;&lt;br/&gt;&lt;span&gt;Object&lt;/span&gt;.defineProperty(a, &lt;span&gt;&#x27;watchValue&#x27;&lt;/span&gt;, {&lt;br/&gt;  &lt;span&gt;get&lt;/span&gt;: &lt;span&gt;&lt;span&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;get：&#x27;&lt;/span&gt; + watchValue);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; watchValue;&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;set&lt;/span&gt;: &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;value&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    watchValue = value;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(lastTimeValue!=watchValue){&lt;br/&gt;        lastTimeValue=watchValue;&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;value changed!! set: &#x27;&lt;/span&gt; + watchValue);&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;proxy&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; observe1 = &lt;span&gt;(&lt;span&gt;object, onChange&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; handler = {&lt;br/&gt;    &lt;span&gt;get&lt;/span&gt;(target, property, receiver) {&lt;br/&gt;      &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Proxy&lt;/span&gt;(target[property], handler);&lt;br/&gt;      } &lt;span&gt;catch&lt;/span&gt; (err) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Reflect&lt;/span&gt;.get(target, property, receiver);&lt;br/&gt;      }&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;set&lt;/span&gt;(target, key, value, receiver) {&lt;br/&gt;      onChange(value);&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Reflect&lt;/span&gt;.set(target, key, value, receiver);&lt;br/&gt;    }&lt;br/&gt;  };&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Proxy&lt;/span&gt;(object, handler);&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; obj = {&lt;br/&gt;  &lt;span&gt;foo&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;a&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;x&lt;/span&gt;:{&lt;span&gt;y&lt;/span&gt;: &lt;span&gt;4&lt;/span&gt;},&lt;br/&gt;    &lt;span&gt;b&lt;/span&gt;:[{&lt;span&gt;c&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;}]&lt;br/&gt;  }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; watchedObj = observe1(obj,(val)=&amp;gt;{&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`哈哈哈，监听到值变化为&lt;span&gt;${val}&lt;/span&gt;了`&lt;/span&gt;);&lt;br/&gt;});&lt;br/&gt;watchedObj.foo = &lt;span&gt;true&lt;/span&gt;; &lt;br/&gt;watchedObj.a.x.y = &lt;span&gt;5&lt;/span&gt;; &lt;span&gt;// 监听到值变化为5了&lt;/span&gt;&lt;br/&gt;watchedObj.a.b[&lt;span&gt;0&lt;/span&gt;].c = &lt;span&gt;true&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;webpack lorder / plugin&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;webpack是一个模块打包器（module bundler），提供了一个核心，核心提供了很多开箱即用的功能，同时它可以用loader和plugin来扩展。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;loader的使用方式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1：在配置文件webpack.config.js中配置&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;module&lt;/span&gt;.exports = {&lt;br/&gt;  &lt;span&gt;module&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;rules&lt;/span&gt;: [&lt;br/&gt;      {&lt;br/&gt;        &lt;span&gt;test&lt;/span&gt;: &lt;span&gt;/\.txt$/&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;use&lt;/span&gt;: &lt;span&gt;&#x27;raw-loader&#x27;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    ]&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;2：通过命令行参数方式&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;webpack --module-bind &lt;span&gt;&#x27;txt=raw-loader&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;3：通过内联使用&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;import txt from &lt;span&gt;&#x27;raw-loader!./file.txt&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;webpack常用的loader&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;样式：style-loader、css-loader、less-loader、sass-loader等&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;文件：raw-loader、file-loader 、url-loader等&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;编译：babel-loader、coffee-loader 、ts-loader等&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;校验测试：mocha-loader、jshint-loader 、eslint-loader等&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如下面配置，可以匹配.scss的文件，分别经过sass-loader、css-loader、style-loader的处理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;sass-loader&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;转化sass为css文件，并且包一层module.exports成为一个js module。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;style-loader&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;将创建一个style标签将css文件嵌入到html中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;css-loader&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;则处理其中的@import和url()。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;module&lt;/span&gt;.exports = {&lt;br/&gt;  &lt;span&gt;module&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;rules&lt;/span&gt;: [&lt;br/&gt;        {&lt;br/&gt;          &lt;span&gt;test&lt;/span&gt;: &lt;span&gt;/\.scss$/&lt;/span&gt;,&lt;br/&gt;          &lt;span&gt;use&lt;/span&gt;:[&lt;br/&gt;              {&lt;span&gt;loader&lt;/span&gt;:&lt;span&gt;&#x27;style-loader&#x27;&lt;/span&gt;},&lt;br/&gt;              {&lt;span&gt;loader&lt;/span&gt;:&lt;span&gt;&#x27;css-loader&#x27;&lt;/span&gt;,&lt;span&gt;options&lt;/span&gt;:{&lt;span&gt;sourceMap&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;,&lt;span&gt;modules&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;}},&lt;br/&gt;              {&lt;span&gt;loader&lt;/span&gt;:&lt;span&gt;&#x27;sass-loader&#x27;&lt;/span&gt;,&lt;span&gt;options&lt;/span&gt;:{&lt;span&gt;sourceMap&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;}}&lt;br/&gt;          ],&lt;br/&gt;          &lt;span&gt;exclude&lt;/span&gt;:&lt;span&gt;/node_modules/&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    ]&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;webpack常用的plugin&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;首先webpack内置&lt;/span&gt;&lt;span&gt;UglifyJsPlugin&lt;/span&gt;&lt;span&gt;，压缩和混淆代码。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;webpack内置&lt;/span&gt;&lt;span&gt;CommonsChunkPlugin&lt;/span&gt;&lt;span&gt;，提高打包效率，将第三方库和业务代码分开打包。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;ProvidePlugin&lt;/span&gt;&lt;span&gt;：自动加载模块，代替require和import&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;写一个webpack插件步骤如下：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. 编写一个JavaScript命名函数。&lt;/p&gt;&lt;p&gt;2. 在它的原型上定义一个apply方法。&lt;/p&gt;&lt;p&gt;3. 指定挂载的webpack事件钩子。&lt;/p&gt;&lt;p&gt;4. 处理webpack内部实例的特定数据。&lt;/p&gt;&lt;p&gt;5. 功能完成后调用webpack提供的回调。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;编写插件之前要理解compiler和compilation两个对象，以及webpack生命周期的各个阶段和钩子，plugin比loader强大，通过plugin你可以访问compliler和compilation过程，通过钩子拦截webpack的执行。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;package.json package.lock.json 区别&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Node.js 项目遵循模块化的架构，当我们创建了一个 Node.js 项目，意味着创建了一个模块，这个模块的描述文件，被称为 package.json。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt; 属性说明&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;name &lt;/span&gt;&lt;span&gt;- 包名；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;version &lt;/span&gt;&lt;span&gt;- 包的版本号；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;description &lt;/span&gt;&lt;span&gt;- 包的描述；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;homepage &lt;/span&gt;&lt;span&gt;- 包的官网URL；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;author &lt;/span&gt;&lt;span&gt;- 包的作者，它的值是你在 https://npmjs.org 网站的有效账户名，遵循“账户名&amp;lt;邮件&amp;gt;”的规则，例如：zhangsan &amp;lt;zhangsan@163.com&amp;gt;；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;contributors &lt;/span&gt;&lt;span&gt;- 包的其他贡献者；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;dependencies / devDependencies&lt;/span&gt;&lt;span&gt; - 生产/开发环境依赖包列表。它们将会被安装在 node_module 目录下；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;repository &lt;/span&gt;&lt;span&gt;- 包代码的 Repo 信息，包括 type 和 URL，type 可以是 git 或 svn，URL 则是包的 Repo 地址；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;main &lt;/span&gt;&lt;span&gt;- main 字段指定了程序的主入口文件，这个字段的默认值是模块根目录下面的 index.js；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;keywords &lt;/span&gt;&lt;span&gt;- 关键字&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;devDependencies、dependencies、peerDependencies的区别&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;package.lock.json&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;当我们安装依赖时，package-lock.json 文件会自动生成。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;package-lock.json 文件中记录了下载源地址，可以加快我们的 npm install 速度。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;怎么转化less为css&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Less &lt;/span&gt;&lt;span&gt;是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;webpack的配置如下：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;module&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;rules&lt;/span&gt;: [{&lt;br/&gt;            &lt;span&gt;test&lt;/span&gt;: &lt;span&gt;/\.less$/&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;use&lt;/span&gt;: [&lt;span&gt;&quot;style-loader&quot;&lt;/span&gt;, &lt;span&gt;&quot;css-loader&quot;&lt;/span&gt;, &lt;span&gt;&quot;less-loader&quot;&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;//编译方向从右到左less-loader=&amp;gt;css-loader=&amp;gt;style-loader&lt;/span&gt;&lt;br/&gt;        }, {&lt;br/&gt;            &lt;span&gt;test&lt;/span&gt;: &lt;span&gt;/\.js$/&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;exclude&lt;/span&gt;: &lt;span&gt;/node_modules/&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;loader&lt;/span&gt;: &lt;span&gt;&#x27;babel-loader&#x27;&lt;/span&gt;,&lt;br/&gt;        }]&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;把样式文件less转为css并且单独提取出来（不放置在bundle.js中）&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; ExtractTextPlugin = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;extract-text-webpack-plugin&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = {&lt;br/&gt; &lt;span&gt;plugins&lt;/span&gt;: [&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; ExtractTextPlugin(&lt;span&gt;&#x27;style.css&#x27;&lt;/span&gt;)&lt;br/&gt;     &lt;span&gt;   &lt;span&gt;//if you want to pass in options, you can do so:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;//new ExtractTextPlugin({&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;//  filename: &#x27;style.css&#x27;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;//})&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;    ]&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;地址栏输入一个url到页面渲染过程&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1、HTTP 请求准备阶段&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、HTTP 发送请求&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;浏览器向服务端发起http请求，把请求头和请求行一起发送个服务器，服务端解析请求头如发现cache-control和etag（if-none-match），if-modified（if-modified-since）字段就会判断缓存是否过期，如果没有返回304，否则返回200&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;3、HTTP 响应返回&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;content-type作用&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Content-Type 实体头部用于指示资源的MIME类型 media type 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在响应中，Content-Type标头告诉客户端实际返回的内容的内容类型。浏览器会在某些情况下进行MIME查找，并不一定遵循此标题的值；为了防止这种行为，可以将标题 X-Content-Type-Options 设置为 nosniff。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在请求中 (如POST 或 PUT)，客户端告诉服务器实际发送的数据类型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Content-Type 的值类型：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.1 application/json：&lt;/span&gt;消息主体是序列化后的 JSON 字符串 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.2 application/x-www-form-urlencoded：&lt;/span&gt;数据被编码为名称/值对。这是标准的编码格式 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.3 multipart/form-data：&lt;/span&gt; 需要在表单中进行文件上传时，就需要使用该格式。常见的媒体格式是上传文件之时使用的 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.4 text/plain：&lt;/span&gt;数据以纯文本形式(text/json/xml/html)进行编码，其中不含任何控件或格式字符&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;介绍知道的状态码，状态码301、302区别&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;状态码分为5类：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;1**&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;信息，服务器收到请求，需要请求者继续执行操作&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;2**&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;成功，操作被成功接收并处理&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;3**&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;重定向，需要进一步的操作以完成请求&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;4**&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;客户端错误，请求包含语法错误或无法完成请求&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;5**&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;服务器错误，服务器在处理请求的过程中发生了错误&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;301：&lt;/strong&gt;（&lt;/span&gt;&lt;span&gt;永久移动&lt;/span&gt;&lt;span&gt;）请求的网页已被永久移动到新位置。服务器返回此响应（作为对GET或HEAD请求的响应）时，会自动将请求者转到新位置。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;302：&lt;/strong&gt;（&lt;/span&gt;&lt;span&gt;临时移动&lt;/span&gt;&lt;span&gt;）服务器目前正从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。此代码与响应GET和HEAD请求的301代码类似，会自动将请求者转到不同的位置。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HTTP状态码301与302的区别：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、它们之间关键区别在，资源是否存在有效性；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、301资源还在只是换了一个位置，返回的是新位置的内容；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、302资源暂时失效，返回的是一个临时的代替页上。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;sessionstorage localstorage区别&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.生命周期&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;sessionStorage的生命周期是仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.存储大小&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;localStorage和sessionStorage的存储数据大小一般都是：5MB&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.存储位置&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.存储内容类型&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5.获取方式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;localStorage：window.localStorage&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;sessionStorage：window.sessionStorage&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.应用场景&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;localStorage：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;sessionStorage：敏感账号一次性登录&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;浏览器为啥第二次访问就快了&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;主要原因是这些网站把很多资源都缓存在了本地，浏览器缓存直接使用本地副本来回应请求，而不会产生真实的网络请求，从而节省了时间。同时，DNS 数据也被浏览器缓存了，这又省去了 DNS 查询环节。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;DNS 缓存和页面资源缓存这两块数据是会被浏览器缓存的。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）、DNS 缓存比较简单，它主要就是在浏览器本地把对应的 IP 和域名关联起来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）、重点看下浏览器资源缓存，下面是缓存处理的过程：&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;怎么减少页面加载时间&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;1、压缩css、js文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、合并js、css文件，减少http请求&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、外部js、css文件放在最底下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、减少dom操作，尽可能用变量替代不必要的dom操作&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5、优化图像（格式选择、懒加载等等）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6、使用CDN&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;7、使用缓存&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;8、减少 http 请求（合并文件，合并图片）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;9、标明高度和宽度&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;10、网址后加斜杠&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;11、优化TCP协议&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;遇到的棘手的问题,完成了什么工作&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;开放性题目，自由作答。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;三、最后&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;    这套题目，考到的知识点比较细，所以我们在平时学习的时候要多多去挖掘，&quot;蜻蜓点水 &quot;的背后是要深入。&lt;br/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;关注我，一起携手进阶&lt;/strong&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3ODAyNDI0OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ic5A4V8PX4PmOXMQHa6L3OhPGOnf2BSZib7ibVcAj2j2FYkfFCWb2xmyfX63TYVlofunfD4QnB5vqELZqXfnQZMlA/0?wx_fmt=png&quot; data-nickname=&quot;前端早茶&quot; data-alias=&quot;ZeFeng_axios&quot; data-signature=&quot;专注前端，一起结伴同行，紧跟业界发展步伐~&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎关注&lt;span&gt;&lt;strong&gt;&lt;span&gt;前端早茶&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;，与广东靓仔携手共同进阶～&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4d41e78352de4e4a68494a455e05b028</guid>
<title>用 Vue3 开发高复用、低耦合的管理后台的列表页</title>
<link>https://toutiao.io/k/9tyb2f1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常见的管理后台系统的有 3 个特点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;页面数量多。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;相似页面多。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;页面业务复杂。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;问题及解决方案&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发管理后台的相似的复杂页面，如果采用复制粘贴的方式，会出现大量的重复代码。每次改动重复的部分，都会产出巨大的工作量。以下面两个场景为例：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;场景1: 给所有列表页的搜索条件加重置功能&lt;br/&gt;如果 100 个列表页，则要加 100 个地方。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;场景2: 第三方下拉框组件升级&lt;br/&gt;下拉框是用第三方组件。新的需求要升级下拉框组件。新版本的组件的 API 变了。要把所有组件都改一遍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;场景1 是重复代码多导致的的问题。可以通过提升代码复用性来解决。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;场景2 是对第三方的耦合导致的。可以通过解耦来解决。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对相似页面，用高复用、低耦合的方式来写，能极大的提升开发效率。本文用列表页为例，来构建高复用、低耦合的代码。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;功能介绍&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;列表页包含如下功能。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;筛选条件，表格和分页&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.617208077260755&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mEakJnD74m8F8Ol2yIy3dnia3SlNEaqAPiavYhdWXJUdryhibLE7vdYaZqN91OrP5wpWlB7wufReDfmERJl58BZlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2278&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;新增，编辑，查看&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新增&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.131578947368421&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mEakJnD74m8F8Ol2yIy3dnia3SlNEaqAP3ia377DJVKtVibd0U5KaahSibynwc5icgspicYib7wq1ictmBCj6CWouTTJvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1444&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编辑&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1331484049930651&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mEakJnD74m8F8Ol2yIy3dnia3SlNEaqAPy8d6SLAJL9UcnV7cSdbYDx5EDAUicOljeAtMxPywbURdDUYShvMGyOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1442&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1186903137789905&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mEakJnD74m8F8Ol2yIy3dnia3SlNEaqAPv5mWrvkiajtgnVzfK6iaGSPibIln9475jw2ATbJzlH1WLvmz9yL1sOg2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1466&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;功能实现&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;列表页的架构如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.735632183908046&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mEakJnD74m8F8Ol2yIy3dnia3SlNEaqAP8QVXDQLib9xLZ61j2jVHZicjGoITHP9lJiaIJJuQ2Z0m5Ull3Iyla5mcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1218&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;高复用代码的关键是单一职责。单一职责的关键是划分代码的职责。上面的架构图中划分了不同代码的职责。其中的防腐层是为了降低与第三方组件的耦合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面，从下往上介绍列表页各层的实现。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;底层&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;底层是具体业务逻辑无关的。列表页的底层包含：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;UI 组件。本项目用的组件库是 &lt;span&gt;acro.design&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;工具。本项目用的工具库包含：路由库：&lt;span&gt;Vue Router&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;，接口调用库：&lt;span&gt;Axios&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;，Mock 接口数据：&lt;span&gt;Mock.js&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;防腐层&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;防腐层用来降低对底层的耦合。上层代码调用防腐层的代码，防腐层调用底部代码。当底层代码的调用发生变化后，只需改防腐层的代码，无需改上层代码。当然，加防腐层的代价是增加了代码的复杂度。因此，只对调用地方多的底层代码加防腐层。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;列表页对 UI 组件 和 接口调用库加了防腐层。下面具体来说。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;只传属性组件&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输入框等只传属性组件，靠 &lt;code&gt;v-bind&lt;/code&gt; 传所有接收到的属性。具体处理如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;script setup lang=&lt;span&gt;&quot;ts&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; props = defineProps&amp;lt;{&lt;br/&gt;  [key: string]: any,&lt;br/&gt;}&amp;gt;()&lt;br/&gt;&amp;lt;&lt;span&gt;/script&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;template&amp;gt;&lt;br/&gt;  &amp;lt;a-input v-bind=&quot;props&quot; /&lt;/span&gt;&amp;gt;&lt;br/&gt;&amp;lt;&lt;span&gt;/template&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设置属性默认值。比如，期望按钮组件的默认的 &lt;code&gt;type&lt;/code&gt; 属性是 &lt;code&gt;primary&lt;/code&gt;。这么写：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; props = withDefaults(defineProps&amp;lt;{&lt;br/&gt;  type?: string,&lt;br/&gt;  [key: string]: any,&lt;br/&gt;}&amp;gt;(), {&lt;br/&gt;  &lt;span&gt;type&lt;/span&gt;: &lt;span&gt;&#x27;primary&#x27;&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;带插槽的组件&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按钮组件等带插槽的组件。处理如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;script setup lang=&lt;span&gt;&quot;ts&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; props = withDefaults(defineProps&amp;lt;{&lt;br/&gt;  type?: string,&lt;br/&gt;  [key: string]: any,&lt;br/&gt;}&amp;gt;(), {&lt;br/&gt;  &lt;span&gt;type&lt;/span&gt;: &lt;span&gt;&#x27;primary&#x27;&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&amp;lt;&lt;span&gt;/script&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;template&amp;gt;&lt;br/&gt;  &amp;lt;a-button v-bind=&quot;props as any&quot;&amp;gt;&lt;br/&gt;    &amp;lt;slot /&lt;/span&gt;&amp;gt;&lt;br/&gt;  &amp;lt;&lt;span&gt;/a-button&amp;gt;&lt;br/&gt;&amp;lt;/&lt;/span&gt;template&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多个插槽的，写法也类似：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;script setup lang=&lt;span&gt;&quot;ts&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; props = defineProps&amp;lt;{&lt;br/&gt;  [key: string]: any,&lt;br/&gt;}&amp;gt;()&lt;br/&gt;&amp;lt;&lt;span&gt;/script&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;template&amp;gt;&lt;br/&gt;  &amp;lt;a-sub-menu v-bind=&quot;props&quot;&amp;gt;&lt;br/&gt;    &amp;lt;template #icon&amp;gt;&amp;lt;slot name=&quot;icon&quot; /&lt;/span&gt;&amp;gt;&amp;lt;&lt;span&gt;/template&amp;gt;&lt;br/&gt;    &amp;lt;template #title&amp;gt;&amp;lt;slot name=&quot;title&quot; /&lt;/span&gt;&amp;gt;&amp;lt;&lt;span&gt;/template&amp;gt;&lt;br/&gt;    &amp;lt;slot /&lt;/span&gt;&amp;gt;&lt;br/&gt;  &amp;lt;&lt;span&gt;/a-sub-menu&amp;gt;&lt;br/&gt;&amp;lt;/&lt;/span&gt;template&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;要调用实例的方法的组件&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提交表单前，要主动调用表单组件的表单验证等实例方法，需要将组件的 &lt;code&gt;ref&lt;/code&gt; 暴露出去。处理如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;script setup lang=&lt;span&gt;&quot;ts&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { ref } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;vue&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; props = defineProps&amp;lt;{&lt;br/&gt;  [key: string]: any,&lt;br/&gt;}&amp;gt;()&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; vmRef = ref(&lt;span&gt;null&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;defineExpose({&lt;br/&gt;  &lt;span&gt;form&lt;/span&gt;: vmRef&lt;br/&gt;})&lt;br/&gt;&amp;lt;&lt;span&gt;/script&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;template&amp;gt;&lt;br/&gt;  &amp;lt;a-form v-bind=&quot;props&quot; ref=&quot;vmRef&quot;&amp;gt;&lt;br/&gt;    &amp;lt;slot /&lt;/span&gt;&amp;gt;&lt;br/&gt;  &amp;lt;&lt;span&gt;/a-form&amp;gt;&lt;br/&gt;&amp;lt;/&lt;/span&gt;template&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想直接把 &lt;code&gt;vmRef&lt;/code&gt; 实例上的属性和方法直接暴露出来，但没有成功。尝试如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;defineExpose({&lt;br/&gt;  ...vmRef&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 或 &lt;/span&gt;&lt;br/&gt;defineExpose({&lt;br/&gt;  ...unref(vmRef)&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;对接口调用库的处理&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; axios &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;axios&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { API_PREFIX } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/config&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; http = axios.create({&lt;br/&gt;  &lt;span&gt;baseURL&lt;/span&gt;: API_PREFIX&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; http&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数据层&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;API 地址的配置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; API_PREFIX = &lt;span&gt;&#x27;/api&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接口调用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; http &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/utils/http&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; type { sortType } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/define/list.d&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&#x27;./staff.mock&#x27;&lt;/span&gt; &lt;span&gt;// mock接口数据&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; fetchList = &lt;span&gt;(&lt;span&gt;current: number, searchQuery: Record&amp;lt;string, any&amp;gt;, sortParams?: {key: string, value: sortType}&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; http.get(&lt;span&gt;&#x27;/pet/list&#x27;&lt;/span&gt;, {&lt;br/&gt;    &lt;span&gt;params&lt;/span&gt;: {&lt;br/&gt;      current,&lt;br/&gt;      &lt;span&gt;q&lt;/span&gt;: &lt;span&gt;JSON&lt;/span&gt;.stringify(searchQuery),&lt;br/&gt;      &lt;span&gt;sort&lt;/span&gt;: sortParams&lt;br/&gt;    }&lt;br/&gt;  })&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; edit = &lt;span&gt;(&lt;span&gt;id: number, data: Record&amp;lt;string, any&amp;gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; http.patch(&lt;span&gt;`/pet/&lt;span&gt;${id}&lt;/span&gt;`&lt;/span&gt;, data)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; create = &lt;span&gt;(&lt;span&gt;data: Record&amp;lt;string, any&amp;gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; http.put(&lt;span&gt;&#x27;/pet&#x27;&lt;/span&gt;, data)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; remove = &lt;span&gt;(&lt;span&gt;id: number, data: Record&amp;lt;string, any&amp;gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; http.delete(&lt;span&gt;`/pet/&lt;span&gt;${id}&lt;/span&gt;`&lt;/span&gt;, data)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数据管理层&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据管理用 &lt;span&gt;组合式 API&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt; 来做。列表页的数据管理层代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { onMounted, reactive, watch, toRefs } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;vue&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; SearchPanel &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/components/logic/search/SearchPanel.vue&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; Table &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/components/ui/Table.vue&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; type { sortType } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/define/list.d&#x27;&lt;/span&gt;&lt;br/&gt;interface State {&lt;br/&gt;  &lt;span&gt;list&lt;/span&gt;: Record&amp;lt;string, any&amp;gt;[]&lt;br/&gt;  &lt;span&gt;pageConfig&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;current&lt;/span&gt;: number,&lt;br/&gt;    &lt;span&gt;total&lt;/span&gt;: number,&lt;br/&gt;    &lt;span&gt;showTotal&lt;/span&gt;: boolean,&lt;br/&gt;    &lt;span&gt;showJumper&lt;/span&gt;: boolean,&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;isLoading&lt;/span&gt;: boolean&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;useList&lt;/span&gt; (&lt;span&gt;doFetchList: (current: number, searchQuery: Record&amp;lt;string, any&amp;gt;&lt;/span&gt;) =&amp;gt; &lt;span&gt;Promise&lt;/span&gt;&amp;lt;&lt;span&gt;any&lt;/span&gt;&amp;gt;, &lt;span&gt;searchQuery&lt;/span&gt;: &lt;span&gt;Record&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;any&lt;/span&gt;&amp;gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; data = reactive&amp;lt;State&amp;gt;({&lt;br/&gt;    &lt;span&gt;list&lt;/span&gt;: [],&lt;br/&gt;    &lt;span&gt;pageConfig&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;current&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;total&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;showTotal&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;showJumper&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;isLoading&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;  })&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; fetchList = &lt;span&gt;async&lt;/span&gt; (current = &lt;span&gt;1&lt;/span&gt;, sortParams?: {&lt;span&gt;key&lt;/span&gt;: string, &lt;span&gt;value&lt;/span&gt;: sortType}) =&amp;gt; {&lt;br/&gt;    data.isLoading = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    data.pageConfig.current = current&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; { &lt;span&gt;data&lt;/span&gt;: { list, total } } = &lt;span&gt;await&lt;/span&gt; doFetchList(current, searchQuery, sortParams)&lt;br/&gt;    data.list = list&lt;br/&gt;    data.pageConfig.total = total&lt;br/&gt;    data.isLoading = &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; sortList = &lt;span&gt;(&lt;span&gt;sortParams: {key: string, value: sortType}&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    fetchList(&lt;span&gt;1&lt;/span&gt;, sortParams)&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  onMounted(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    fetchList()&lt;br/&gt;  })&lt;br/&gt;&lt;br/&gt;  watch(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; searchQuery, () =&amp;gt; fetchList, { &lt;span&gt;deep&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt; })&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;    ...toRefs(data),&lt;br/&gt;    fetchList,&lt;br/&gt;    sortList,&lt;br/&gt;    &lt;span&gt;components&lt;/span&gt;: {&lt;br/&gt;      SearchPanel,&lt;br/&gt;      Table&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;业务组件层&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;列表页的业务组件有筛选条件容器组件，单个筛选条件容器组件和详情抽屉组件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这边以筛选条件容器组件为例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt; &lt;span&gt;setup&lt;/span&gt; &lt;span&gt;lang&lt;/span&gt;=&lt;span&gt;&quot;ts&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; Row &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/components/ui/layout/Row.vue&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; Button &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/components/ui/common/Button.vue&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; emit = defineEmits([&lt;span&gt;&#x27;search&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;reset&#x27;&lt;/span&gt;])&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; handleReset = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  emit(&lt;span&gt;&#x27;reset&#x27;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; handleSearch = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  emit(&lt;span&gt;&#x27;search&#x27;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;main&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;search-panel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;Row&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;slot&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;Row&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;Row&lt;/span&gt; &lt;span&gt;justify&lt;/span&gt;=&lt;span&gt;&quot;end&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;Button&lt;/span&gt; @&lt;span&gt;click&lt;/span&gt;=&lt;span&gt;&quot;handleReset&quot;&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;secondary&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;reset-btn&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;重置&lt;span&gt;&amp;lt;/&lt;span&gt;Button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;Button&lt;/span&gt; @&lt;span&gt;click&lt;/span&gt;=&lt;span&gt;&quot;handleSearch&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;搜索&lt;span&gt;&amp;lt;/&lt;span&gt;Button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;Row&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;业务组件组合层&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;列表页的业务组件组合层的主要代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt; &lt;span&gt;setup&lt;/span&gt; &lt;span&gt;lang&lt;/span&gt;=&lt;span&gt;&quot;ts&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;span&gt;// 数据管理&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;components&lt;/span&gt;: { SearchPanel, Table },&lt;br/&gt;  list,&lt;br/&gt;  fetchList,&lt;br/&gt;  sortList,&lt;br/&gt;  pageConfig,&lt;br/&gt;  isLoading&lt;br/&gt;} = useList(props.fetchList, props.searchQuery)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//表格的列&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; columns = [&lt;br/&gt;  {&lt;br/&gt;    &lt;span&gt;title&lt;/span&gt;: &lt;span&gt;&#x27;ID&#x27;&lt;/span&gt;,&lt;br/&gt;    ...&lt;br/&gt;  },&lt;br/&gt;  ...props.columns,&lt;br/&gt;  {&lt;br/&gt;    &lt;span&gt;title&lt;/span&gt;: &lt;span&gt;&#x27;操作&#x27;&lt;/span&gt;,&lt;br/&gt;    ...&lt;br/&gt;  }&lt;br/&gt;]&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 事件处理&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; handleReset = ...&lt;br/&gt;const handlePageChange = ...&lt;br/&gt;const handleSort = ...&lt;br/&gt;const handleDelete = ...&lt;br/&gt;const handleOnView = ...&lt;br/&gt;const handleOnEdit = ...&lt;br/&gt;const handleCreate = ...&lt;br/&gt;const handleSave = ...&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- 筛选条件 --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;SearchPanel&lt;/span&gt;&lt;br/&gt;      @&lt;span&gt;search&lt;/span&gt;=&lt;span&gt;&quot;fetchList(1)&quot;&lt;/span&gt;&lt;br/&gt;      @&lt;span&gt;reset&lt;/span&gt;=&lt;span&gt;&quot;handleReset&quot;&lt;/span&gt;&lt;br/&gt;    &amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;slot&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;searchPanel&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;SearchPanel&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;Divider&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;operation-wrap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;Button&lt;/span&gt; @&lt;span&gt;click&lt;/span&gt;=&lt;span&gt;&quot;handleCreate&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;operation-btn&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;新增&lt;span&gt;&amp;lt;/&lt;span&gt;Button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;Button&lt;/span&gt; &lt;span&gt;status&lt;/span&gt;=&lt;span&gt;&quot;success&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;operation-btn&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;导出&lt;span&gt;&amp;lt;/&lt;span&gt;Button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;Table&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;table&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;:columns&lt;/span&gt;=&lt;span&gt;&quot;columns&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;...&lt;/span&gt;&lt;br/&gt;    &amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;template&lt;/span&gt; #&lt;span&gt;operation&lt;/span&gt;=&lt;span&gt;&quot;{ rowData }&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;Space&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&amp;lt;&lt;span&gt;Button&lt;/span&gt; @&lt;span&gt;click&lt;/span&gt;=&lt;span&gt;&quot;handleOnEdit(rowData)&quot;&lt;/span&gt; &lt;span&gt;size&lt;/span&gt;=&lt;span&gt;&quot;xs&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;编辑&lt;span&gt;&amp;lt;/&lt;span&gt;Button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&amp;lt;&lt;span&gt;PopupConfirm&lt;/span&gt; @&lt;span&gt;ok&lt;/span&gt;=&lt;span&gt;&quot;handleDelete(rowData.id)&quot;&lt;/span&gt; &lt;span&gt;content&lt;/span&gt;=&lt;span&gt;&quot;确认删除?&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;Button&lt;/span&gt; &lt;span&gt;size&lt;/span&gt;=&lt;span&gt;&quot;xs&quot;&lt;/span&gt; &lt;span&gt;status&lt;/span&gt;=&lt;span&gt;&quot;danger&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;删除&lt;span&gt;&amp;lt;/&lt;span&gt;Button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&amp;lt;/&lt;span&gt;PopupConfirm&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;Space&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;/&lt;span&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;Table&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- 详情 --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;Detail&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;:isShow&lt;/span&gt;=&lt;span&gt;&quot;isShowDetail&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;:title&lt;/span&gt;=&lt;span&gt;&quot;detailTitle&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;...&lt;/span&gt;&lt;br/&gt;    &amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;Form&lt;/span&gt; &lt;span&gt;:model&lt;/span&gt;=&lt;span&gt;&quot;currItem&quot;&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;formRef&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;slot&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;detail&quot;&lt;/span&gt; &lt;span&gt;:type&lt;/span&gt;=&lt;span&gt;&quot;type&quot;&lt;/span&gt; &lt;span&gt;:currItem&lt;/span&gt;=&lt;span&gt;&quot;currItem&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;/&lt;span&gt;Form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;Detail&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;具体页面&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;搜索条件&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;List&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;:searchQuery&lt;/span&gt;=&lt;span&gt;&quot;searchQuery&quot;&lt;/span&gt;&lt;br/&gt;  @&lt;span&gt;reset&lt;/span&gt;=&lt;span&gt;&quot;handleReset&quot;&lt;/span&gt;&lt;br/&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;template&lt;/span&gt; #&lt;span&gt;searchPanel&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;SearchItem&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;姓名&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;Input&lt;/span&gt; &lt;span&gt;v-model&lt;/span&gt;=&lt;span&gt;&quot;searchQuery.name&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;SearchItem&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;List&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;表格和分页&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;表格的每列的内容：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; columns = [&lt;br/&gt;  {&lt;br/&gt;    &lt;span&gt;title&lt;/span&gt;: &lt;span&gt;&#x27;姓名&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;dataIndex&lt;/span&gt;: &lt;span&gt;&#x27;name&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;80&lt;/span&gt;&lt;br/&gt;  },&lt;br/&gt;  {&lt;br/&gt;    &lt;span&gt;title&lt;/span&gt;: &lt;span&gt;&#x27;年龄&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;dataIndex&lt;/span&gt;: &lt;span&gt;&#x27;age&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;100&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;sortable&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;sortDirections&lt;/span&gt;: [&lt;span&gt;&#x27;ascend&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;descend&#x27;&lt;/span&gt;],&lt;br/&gt;      &lt;span&gt;sorter&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;// 关闭客户端排序&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  },&lt;br/&gt;  {&lt;br/&gt;    &lt;span&gt;title&lt;/span&gt;: &lt;span&gt;&#x27;性别&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;dataIndex&lt;/span&gt;: &lt;span&gt;&#x27;gender&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;60&lt;/span&gt;,&lt;br/&gt;    render ({ record }: any) {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; h(&lt;span&gt;&#x27;span&#x27;&lt;/span&gt;, record.gender === &lt;span&gt;1&lt;/span&gt; ? &lt;span&gt;&#x27;男&#x27;&lt;/span&gt; : &lt;span&gt;&#x27;女&#x27;&lt;/span&gt;)&lt;br/&gt;    }&lt;br/&gt;  },&lt;br/&gt;  ...&lt;br/&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参数传入组件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;List&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;:fetchList&lt;/span&gt;=&lt;span&gt;&quot;fetchList&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;:columns&lt;/span&gt;=&lt;span&gt;&quot;columns&quot;&lt;/span&gt;&lt;br/&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;...&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;List&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;创建，编辑和详情的内容&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建和编辑的保存：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { create, edit } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/service/staff&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; handleSave = &lt;span&gt;async&lt;/span&gt; ({ type, payload, onSuccess }) =&amp;gt; {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (type === &lt;span&gt;&#x27;edit&#x27;&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;await&lt;/span&gt; edit(payload.id, payload)&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;await&lt;/span&gt; create(payload)&lt;br/&gt;  }&lt;br/&gt;  onSuccess()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建，编辑和详情的模板内容：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;List&lt;/span&gt;&lt;br/&gt;  @&lt;span&gt;save&lt;/span&gt;=&lt;span&gt;&quot;handleSave&quot;&lt;/span&gt;&lt;br/&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;template&lt;/span&gt; #&lt;span&gt;detail&lt;/span&gt;=&lt;span&gt;&quot;{ type, currItem }&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;FormItem&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;label&lt;/span&gt;=&lt;span&gt;&quot;姓名&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;field&lt;/span&gt;=&lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;:rules&lt;/span&gt;=&lt;span&gt;&quot;type !== &#x27;view&#x27; ? [{required:true,message:&#x27;姓名必填&#x27;}] : []&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;:validate-trigger&lt;/span&gt;=&lt;span&gt;&quot;[&#x27;change&#x27;,&#x27;input&#x27;]&quot;&lt;/span&gt;&lt;br/&gt;  &amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;Input&lt;/span&gt; &lt;span&gt;v-model&lt;/span&gt;=&lt;span&gt;&quot;currItem.name&quot;&lt;/span&gt; &lt;span&gt;:disabled&lt;/span&gt;=&lt;span&gt;&quot;type === &#x27;view&#x27;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;FormItem&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;FormItem&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;label&lt;/span&gt;=&lt;span&gt;&quot;年龄&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;field&lt;/span&gt;=&lt;span&gt;&quot;age&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;:rules&lt;/span&gt;=&lt;span&gt;&quot;type !== &#x27;view&#x27; ? [{required:true,message:&#x27;年龄&#x27;}] : []&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;:validate-trigger&lt;/span&gt;=&lt;span&gt;&quot;[&#x27;change&#x27;,&#x27;input&#x27;]&quot;&lt;/span&gt;&lt;br/&gt;  &amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;InputNumber&lt;/span&gt; &lt;span&gt;v-model&lt;/span&gt;=&lt;span&gt;&quot;currItem.age&quot;&lt;/span&gt; &lt;span&gt;:disabled&lt;/span&gt;=&lt;span&gt;&quot;type === &#x27;view&#x27;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;FormItem&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  ...&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;List&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;推荐阅读&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;acro.design: &lt;em&gt;https://arco.design/vue/docs/start&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;Vue Router: &lt;em&gt;https://router.vuejs.org/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;Axios: &lt;em&gt;https://axios-http.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;Mock.js: &lt;em&gt;http://mockjs.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;组合式 API: &lt;em&gt;https://v3.cn.vuejs.org/api/composition-api.html#setup&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>