<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>b8f069a011c02358777cf6ae1549932a</guid>
<title>轻轻松松打印网页并生成 pdf 文档</title>
<link>https://toutiao.io/k/gs6z30z</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;
      
      
      
      &lt;p&gt;&lt;a href=&quot;https://github.com/chromedp/chromedp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chromedp&lt;/a&gt;是一个更快更简单的支持&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chrome DevTools Protocol&lt;/a&gt;协议的Go库，它是目前最流行的headless浏览器库之一，你可以使用它做很多只能通过浏览器才能执行的任务，比如网页截屏、网页渲染测试、下载视频、模拟登录等，今天我介绍它的一个有用而且很简单的功能：为一个网页生成一个pdf格式的截屏,更多的例子你可以查看官方示例&lt;a href=&quot;https://github.com/chromedp/examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chromedp/examples&lt;/a&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;声明&lt;/strong&gt;: 未经作者同意本站文章不允许转载或者洗稿再发表，技术干饭人请挺直脊梁!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先有一点，你需要安装chrome，这样chromedp库才能通过cdp协议调用chrome执行任务(动作)。&lt;/p&gt;
&lt;h2 id=&quot;为网页生成pdf&quot;&gt;为网页生成pdf&lt;/h2&gt;
&lt;p&gt;首先，你需要引入chromedp库：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; get -u github.com/chromedp/chromedp&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后，你就可以通过&lt;code&gt;chromedp.Run&lt;/code&gt;执行一系列的动作，比如我们这个例子就是先导航到某个页面，然后将页面生成为pdf:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 生成任务列表&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; printToPDF(urlstr &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;, res *[]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;) chromedp.Tasks {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; chromedp.Tasks{&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;chromedp.Navigate(urlstr), &lt;span class=&quot;comment&quot;&gt;// 浏览指定的页面&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;chromedp.ActionFunc(&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;(ctx context.Context) error {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;buf, _, err := page.PrintToPDF().WithPrintBackground(&lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;).Do(ctx) &lt;span class=&quot;comment&quot;&gt;// 通过cdp执行PrintToPDF&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;*res = buf&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}),&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;ActionFunc&lt;/code&gt;是一个便利的方法，用来执行一个函数作为Action,就像标准库http.Handler和http.HandleFunc的关系。因为这里我们要执行的逻辑比较简单，所以就通过一个函数实现就可以了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;page.PrintToPDF()&lt;/code&gt;是定义要执行输出pdf的一些参数,你可以额外设置一些参数，这些参数包括：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;18&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PrintToPDFParams &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;Landscape               &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;                   &lt;span class=&quot;string&quot;&gt;`json:&quot;landscape,omitempty&quot;`&lt;/span&gt;               &lt;span class=&quot;comment&quot;&gt;// 横向打印. 默认false.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;DisplayHeaderFooter     &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;                   &lt;span class=&quot;string&quot;&gt;`json:&quot;displayHeaderFooter,omitempty&quot;`&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;// 打印header和footer. 默认false.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;PrintBackground         &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;                   &lt;span class=&quot;string&quot;&gt;`json:&quot;printBackground,omitempty&quot;`&lt;/span&gt;         &lt;span class=&quot;comment&quot;&gt;// 打印背景图.  默认false.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;Scale                   &lt;span class=&quot;typename&quot;&gt;float64&lt;/span&gt;                &lt;span class=&quot;string&quot;&gt;`json:&quot;scale,omitempty&quot;`&lt;/span&gt;                   &lt;span class=&quot;comment&quot;&gt;// 放缩因子. 默认为1.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;PaperWidth              &lt;span class=&quot;typename&quot;&gt;float64&lt;/span&gt;                &lt;span class=&quot;string&quot;&gt;`json:&quot;paperWidth,omitempty&quot;`&lt;/span&gt;              &lt;span class=&quot;comment&quot;&gt;// 页面宽度(英寸). 默认8.5英寸（美国Letter标准尺寸，和A4纸差不太多）.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;PaperHeight             &lt;span class=&quot;typename&quot;&gt;float64&lt;/span&gt;                &lt;span class=&quot;string&quot;&gt;`json:&quot;paperHeight,omitempty&quot;`&lt;/span&gt;             &lt;span class=&quot;comment&quot;&gt;// 页面高度(英寸). 默认11英寸(Letter标准尺寸).&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;MarginTop               &lt;span class=&quot;typename&quot;&gt;float64&lt;/span&gt;                &lt;span class=&quot;string&quot;&gt;`json:&quot;marginTop&quot;`&lt;/span&gt;                         &lt;span class=&quot;comment&quot;&gt;// 上边距(英寸). 默认1cm (大约0.4 英寸).&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;MarginBottom            &lt;span class=&quot;typename&quot;&gt;float64&lt;/span&gt;                &lt;span class=&quot;string&quot;&gt;`json:&quot;marginBottom&quot;`&lt;/span&gt;                      &lt;span class=&quot;comment&quot;&gt;// 底边距(英寸). 默认1cm (大约0.4 英寸).&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;MarginLeft              &lt;span class=&quot;typename&quot;&gt;float64&lt;/span&gt;                &lt;span class=&quot;string&quot;&gt;`json:&quot;marginLeft&quot;`&lt;/span&gt;                        &lt;span class=&quot;comment&quot;&gt;// 左边距(英寸). 默认1cm (大约0.4 英寸).&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;MarginRight             &lt;span class=&quot;typename&quot;&gt;float64&lt;/span&gt;                &lt;span class=&quot;string&quot;&gt;`json:&quot;marginRight&quot;`&lt;/span&gt;                       &lt;span class=&quot;comment&quot;&gt;// 右边距(英寸). 默认1cm (大约0.4 英寸).&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;PageRanges              &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;                 &lt;span class=&quot;string&quot;&gt;`json:&quot;pageRanges,omitempty&quot;`&lt;/span&gt;              &lt;span class=&quot;comment&quot;&gt;// 要打印的页码, 比如, &#x27;1-5, 8, 11-13&#x27;.默认为空，全打印.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;IgnoreInvalidPageRanges &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;                   &lt;span class=&quot;string&quot;&gt;`json:&quot;ignoreInvalidPageRanges,omitempty&quot;`&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 是否要忽略非法的页码范围. 默认false.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;HeaderTemplate          &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;                 &lt;span class=&quot;string&quot;&gt;`json:&quot;headerTemplate,omitempty&quot;`&lt;/span&gt;          &lt;span class=&quot;comment&quot;&gt;// HTML模板head. &lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;FooterTemplate          &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;                 &lt;span class=&quot;string&quot;&gt;`json:&quot;footerTemplate,omitempty&quot;`&lt;/span&gt;          &lt;span class=&quot;comment&quot;&gt;// HTML模板footer.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;PreferCSSPageSize       &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;                   &lt;span class=&quot;string&quot;&gt;`json:&quot;preferCSSPageSize,omitempty&quot;`&lt;/span&gt;       &lt;span class=&quot;comment&quot;&gt;// 是否首选css定义的页面大小？默认false,将自动适应.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;TransferMode            PrintToPDFTransferMode &lt;span class=&quot;string&quot;&gt;`json:&quot;transferMode,omitempty&quot;`&lt;/span&gt;            &lt;span class=&quot;comment&quot;&gt;// 返回stream&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里我们的例子不做额外的设置，只调整了打印背景图参数，当然你为了打印出漂亮的pdf话，可以调整这里的参数，更适合阅读和打印。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Do&lt;/code&gt;通过cdp协议执行打印并返回结果。&lt;/p&gt;
&lt;p&gt;主要逻辑就完成了，下一步就是执行这些任务了。&lt;/p&gt;
&lt;p&gt;首先要创建一个chromedp的Context:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;ctx, cancel &lt;span class=&quot;value&quot;&gt;:= chromedp.&lt;span class=&quot;function&quot;&gt;NewContext&lt;/span&gt;(context.&lt;span class=&quot;function&quot;&gt;Background&lt;/span&gt;())&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后调用chromedp.Run执行任务就可以了:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := chromedp.Run(ctx, printToPDF(&lt;span class=&quot;string&quot;&gt;`https://colobu.com/`&lt;/span&gt;, &amp;amp;buf)); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;log.Fatal(err)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最后把pdf写入到文件中，完成。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := ioutil.WriteFile(&lt;span class=&quot;string&quot;&gt;&quot;colobu.pdf&quot;&lt;/span&gt;, buf,&lt;span class=&quot;number&quot;&gt; 0644&lt;/span&gt;); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;log.Fatal(err)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;生成的pdf效果如下：&lt;br/&gt;&lt;img src=&quot;colobu-pdf.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完整的代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;18&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;19&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;20&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;21&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;22&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;23&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;24&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;25&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;26&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;27&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;28&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;29&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;30&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;31&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;32&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;33&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;34&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;35&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;36&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;37&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;38&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;39&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;40&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;41&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;github.com/chromedp/cdproto/page&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;github.com/chromedp/chromedp&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建 context&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;ctx, cancel := chromedp.NewContext(context.Background())&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; cancel()&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 生成pdf&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buf []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := chromedp.Run(ctx, printToPDF(&lt;span class=&quot;string&quot;&gt;`https://colobu.com/`&lt;/span&gt;, &amp;amp;buf)); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;log.Fatal(err)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := ioutil.WriteFile(&lt;span class=&quot;string&quot;&gt;&quot;colobu.pdf&quot;&lt;/span&gt;, buf,&lt;span class=&quot;number&quot;&gt; 0644&lt;/span&gt;); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;log.Fatal(err)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 生成任务列表&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; printToPDF(urlstr &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;, res *[]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;) chromedp.Tasks {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; chromedp.Tasks{&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;chromedp.Navigate(urlstr), &lt;span class=&quot;comment&quot;&gt;// 浏览指定的页面&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;chromedp.ActionFunc(&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;(ctx context.Context) error {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;buf, _, err := page.PrintToPDF().WithPrintBackground(&lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;).Do(ctx) &lt;span class=&quot;comment&quot;&gt;// 通过cdp执行PrintToPDF&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;*res = buf&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}),&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;生成漂亮的图表&quot;&gt;生成漂亮的图表&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://echarts.apache.org/zh/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;echarts&lt;/a&gt;是我厂(百度)贡献的一个非常知名的图表库，可以通过js为网页生成巨漂亮的图表，用来数据展示。Go语言虽然有一些&quot;玩具&quot;类的图表库，但是并没有一个真正拿的出手的图标库，所以有人就利用echarts，生成一个网页，把数据展示出来，这个库是&lt;a href=&quot;https://github.com/go-echarts/go-echarts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;go-echarts&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但是，毕竟这是曲折的方式，最终生成的数据是一个网页。&lt;/p&gt;
&lt;p&gt;既然刚才我们通过chromedp可以生成pdf,那么是不是也可以截图，将go-echarts生成的图表截图成一个Go的Image对象？让我们试一试。&lt;/p&gt;
&lt;p&gt;首先，我们先利用go-echarts生成一个图表，并把它保存成一个html网页:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;18&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;19&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;20&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;21&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;22&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;23&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;24&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; generateEcharts() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;bar := charts.NewBar()&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// set some global options like Title/Legend/ToolTip or anything else&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;Title:    &lt;span class=&quot;string&quot;&gt;&quot;生成一个漂亮的bar图表&quot;&lt;/span&gt;,&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;Subtitle: &lt;span class=&quot;string&quot;&gt;&quot;我要得到它的灵魂&quot;&lt;/span&gt;,&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}))&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Put data into instance&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;bar.SetXAxis([]&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;{&lt;span class=&quot;string&quot;&gt;&quot;Mon&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Tue&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Wed&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Thu&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Fri&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Sat&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Sun&quot;&lt;/span&gt;}).&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;AddSeries(&lt;span class=&quot;string&quot;&gt;&quot;Category A&quot;&lt;/span&gt;, generateBarItems()).&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;AddSeries(&lt;span class=&quot;string&quot;&gt;&quot;Category B&quot;&lt;/span&gt;, generateBarItems())&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Where the magic happens&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;f, _ := os.Create(&lt;span class=&quot;string&quot;&gt;&quot;bar.html&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;bar.Render(f)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; generateBarItems() []opts.BarData {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;items := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]opts.BarData,&lt;span class=&quot;number&quot;&gt; 0&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i :=&lt;span class=&quot;number&quot;&gt; 0&lt;/span&gt;; i &amp;lt;&lt;span class=&quot;number&quot;&gt; 7&lt;/span&gt;; i++ {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;items = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(items, opts.BarData{Value: rand.Intn&lt;span class=&quot;number&quot;&gt;(300&lt;/span&gt;)})&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; items&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下一步就是chromedp的工作了，浏览这个本地网页，并进行截图:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;18&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;19&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;20&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;21&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;22&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;23&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;24&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;25&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;26&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;27&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;28&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;29&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 生成echarts网页&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;generateEcharts()&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建chromedp context&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;ctx, cancel := chromedp.NewContext(&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;context.Background(),&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;chromedp.WithDebugf(log.Printf),&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; cancel()&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义tasks&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;elementScreenshot := &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;(urlstr, sel &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;, res *[]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;) chromedp.Tasks {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; chromedp.Tasks{&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;chromedp.Navigate(urlstr),&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;chromedp.Screenshot(sel, res, chromedp.NodeVisible),&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 生成截图&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buf []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;barFile, _ := filepath.Abs(&lt;span class=&quot;string&quot;&gt;&quot;./bar.html&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := chromedp.Run(ctx, elementScreenshot(&lt;span class=&quot;string&quot;&gt;`file://`&lt;/span&gt;+barFile, &lt;span class=&quot;string&quot;&gt;`canvas`&lt;/span&gt;, &amp;amp;buf)); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;log.Fatal(err)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将截图写入到文件中&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := ioutil.WriteFile(&lt;span class=&quot;string&quot;&gt;&quot;bar.png&quot;&lt;/span&gt;, buf,&lt;span class=&quot;number&quot;&gt; 0&lt;/span&gt;o644); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;log.Fatal(err)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最终，生成一个截图。你可以把这个截图生成Image对象，或者把它保存到一个文件中。这里我们不进行额外的处理了，所以把它保存到文件中。生成的文件如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;bar.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，利用chromedp的打印和截图功能还能做很多事，比如转换epub电子书成pdf格式，grafana截图报警等等。&lt;/p&gt;
&lt;p&gt;更多的，你可以利用chromedp干很多很多事，这依赖你的想象力，或者你可以搜一下一些网友的分享，比如&lt;a href=&quot;https://studygolang.com/topics/12596&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Golang爬虫终极杀器——Chromedp让你成为二维码登陆终结者&lt;/a&gt;&lt;/p&gt;

      
    &lt;/div&gt;
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4893be5dd8b6f5fefb200cd4ee33f68c</guid>
<title>聊聊如何在 Spring 事务中正确进行远程调用</title>
<link>https://toutiao.io/k/sudwryn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0588235294117647&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/PwsZJCUibicx5nNC424AXg1MMxNyJHzcTFjpuVIVkmNDSgP1lAxgmUvj4XB5HwvTsO5TgKeVdwatIKg12yjWbGoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;点击上方&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;3&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GQNNvZ3CEHNfic6xBdic4VFFuiavqTBVUia7zouGVhfFPsaQXKicrzqbegMJgvnQSuXQLIUbMLMVX4Uc5XOaKYMibVsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;14&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;蓝字&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;关注我们&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;01&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最近和朋友聊天，他说他承接的外包项目遇到了分布式事务问题，问我有没啥解决方案，我本可以直接跟他说，分布式事务方案网上一大堆，什么tcc、可靠消息一致性、最大努力通知之类的，直接网上找个试下，比如直接用阿里的seata。但我并没有这么做，因为分布式事务，本来就是一个很复杂的课题，真正落地的时候，会发现有时候是多种分布式方案一起混用，而非一种方案走到黑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此我就跟他说，能不用分布式事务，就尽量不用，后来我就问了一下他的业务场景，场景也不是很复杂，就是邀请好友注册，然后可以增加积分，朋友实现逻辑的伪代码大概如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;@&lt;span&gt;Transactional&lt;/span&gt;(&lt;span&gt;rollbackFor&lt;/span&gt; = Exception.class)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    public Boolean inviteUser(..){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;userService&lt;/span&gt;&lt;span&gt;.add&lt;/span&gt;(..);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;integralService&lt;/span&gt;&lt;span&gt;.addIntegration&lt;/span&gt;(..,20)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其中integralService是一个远程积分服务，20为增加的积分值。这代码乍一看是没问题，我想可能很多朋友都会这么写。后边我就问朋友说你们这个业务场景是否允许如下场景&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;允不允许邀请的用户入库成功，而积分入库失败？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;允不允许邀请的用户入库失败，而积分入库成功？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;朋友思考了一下，说第二种不允许，第一种方式可以通过补偿的方式增加积分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在我们回过头来看这段代码，我抛出以下两个问题，看文章的朋友可以思考下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这边说下我的想法&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解决耗时过长，有些朋友可能想到可以采用&lt;strong&gt;异步&lt;/strong&gt;的方式，积分抖动异常，可以通过添加&lt;strong&gt;熔断机制&lt;/strong&gt;，比如积分超时没响应，就直接进行熔断&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天我再说一种方案，就是&lt;strong&gt;在事务提交后再进行调用&lt;/strong&gt;，罗里吧嗦一大堆，才刚要进入正题，哈哈&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;02&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;如何在spring的事务中正确的进行远程调用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;16.833333333333332&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Q6e43UC3v1HiaBRGY9kMxh3tLO1aBBkGyOkLibppRwafQGLWpwuJO8ejicFmygc0xEug5gKuge6miasNIBiaIaiak0iaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;12&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;通过spring的事务同步管理器&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;16.833333333333332&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TLAfQEhpjHSPbp8RvqloqZfhr9oq4s6WqbTll9md0ZdsSxQCd5OvTakCISlraZ8vylH1cV3xQ3X6wE358HPuFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;12&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个是个什么鬼，这是我直译，它的真身是长如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;org&lt;/span&gt;&lt;span&gt;.springframework&lt;/span&gt;&lt;span&gt;.transaction&lt;/span&gt;&lt;span&gt;.support&lt;/span&gt;&lt;span&gt;.TransactionSynchronizationManager&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;这玩意有啥用，可以利用它注册一个事务同步器，这个事务同步器，&lt;/span&gt;&lt;strong&gt;可以允许在事务提交后，做一些事情&lt;/strong&gt;&lt;span&gt;，核心代码如下&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;TransactionSynchronizationManager&lt;/span&gt;&lt;span&gt;.registerSynchronization&lt;/span&gt;(new TransactionSynchronizationAdapter() {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            public void afterCommit() {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;//做你想做的业务&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        });&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看了代码，想必大家都知道怎么改造上面邀请用户，添加积分了吧&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;(rollbackFor = Exception.class)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Boolean &lt;span&gt;inviteUser&lt;/span&gt;&lt;span&gt;(..)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        userService.add(..);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        TransactionSynchronizationManager.registerSynchronization(&lt;span&gt;new&lt;/span&gt; TransactionSynchronizationAdapter() {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterCommit&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                integralService.addIntegration(..,&lt;span&gt;20&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        });&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但大家发现没有，每次都要写这么一坨代码，看着是不是很恶心，有没有什么改造的方案。答案有的，通过注解+aop来整合实现，具体实现逻辑，可以查看下面demo链接中的&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;com&lt;/span&gt;&lt;span&gt;.github&lt;/span&gt;&lt;span&gt;.lybgeek&lt;/span&gt;&lt;span&gt;.transactional&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;我这边就不贴具体代码了，为什么不贴，是因为我要介绍另外一种方案，就是&lt;/span&gt;&lt;strong&gt;基于spring的事件驱动实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;16.833333333333332&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Q6e43UC3v1HiaBRGY9kMxh3tLO1aBBkGyOkLibppRwafQGLWpwuJO8ejicFmygc0xEug5gKuge6miasNIBiaIaiak0iaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;12&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;通过TransactionalEventListener注解+ApplicationEventPublisher&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;16.833333333333332&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TLAfQEhpjHSPbp8RvqloqZfhr9oq4s6WqbTll9md0ZdsSxQCd5OvTakCISlraZ8vylH1cV3xQ3X6wE358HPuFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;12&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是spring的事件驱动实现，或者说是观察者实现方式，不过TransactionalEventListener注解是&lt;strong&gt;spring4.2版本之后&lt;/strong&gt;才提供的注解&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过这种方式如何改造上面邀请用户，添加积分的实现？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;01&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;在邀请用户注册方法中，进行事件发布&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;伪代码如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;@&lt;span&gt;Transactional&lt;/span&gt;(&lt;span&gt;rollbackFor&lt;/span&gt; = Exception.class)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  public Boolean inviteUser(..) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;userService&lt;/span&gt;&lt;span&gt;.add&lt;/span&gt;(..);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;         &lt;span&gt;applicationEventPublisher&lt;/span&gt;&lt;span&gt;.publishEvent&lt;/span&gt;(..);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        });&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;02&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;编写一个事务监听器，并在里面触发添加积分实现&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;伪代码如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;@&lt;span&gt;TransactionalEventListener&lt;/span&gt;(&lt;span&gt;phase&lt;/span&gt; = TransactionPhase.AFTER_COMMIT)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    public void addIntegration(..){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;integralService&lt;/span&gt;&lt;span&gt;.addIntegration&lt;/span&gt;(..,20)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;这边有个细节点要注意，就是&lt;/span&gt;&lt;strong&gt;监听事件的参数要和发布的参数一致&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong/&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;03&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;实现核心源码&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;@&lt;span&gt;Override&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onApplicationEvent&lt;/span&gt;(&lt;span&gt;ApplicationEvent &lt;span&gt;event&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;if&lt;/span&gt; (TransactionSynchronizationManager.isSynchronizationActive()) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      TransactionSynchronization transactionSynchronization = createTransactionSynchronization(&lt;span&gt;event&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      TransactionSynchronizationManager.registerSynchronization(transactionSynchronization);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.annotation.fallbackExecution()) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.annotation.phase() == TransactionPhase.AFTER_ROLLBACK &amp;amp;&amp;amp; logger.isWarnEnabled()) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        logger.warn(&lt;span&gt;&quot;Processing &quot;&lt;/span&gt; + &lt;span&gt;event&lt;/span&gt; + &lt;span&gt;&quot; as a fallback execution on AFTER_ROLLBACK phase&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      processEvent(&lt;span&gt;event&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;else&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;// No transactional event execution at all&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;if&lt;/span&gt; (logger.isDebugEnabled()) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        logger.debug(&lt;span&gt;&quot;No transaction is active - skipping &quot;&lt;/span&gt; + &lt;span&gt;event&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不知道大家发现没有，他本质上还是使用了TransactionSynchronizationManager，只是对他再一次进行封装&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;03&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在和朋友交流后，发现他们那个外包项目开发人员就只有三个，然后服务拆分了10来个，我就问他说这个外包项目业务有很复杂吗，他说其实还好，我就问他说业务不复杂，开发人员也不多，为什么不用单体架构，而要用微服务。他给我的答案是甲方爸爸觉得他们项目未来会承载很大的业务量，所以必须得用微服务，而且现在的主流技术栈是微服务。听到这个答复，我是该说是过度设计还是高瞻远瞩呢？技术日新月异，鬼知道后面会不会出现更厉害的东西，架构从来都不是一步到位，而是逐步演进&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;04&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;demo链接&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.24&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ojSuCgVKqGlpSKMoQN6iamKmxyQtBXVNqc8Jsnuv3BdEibkyPEEN3UibgtSuBfUfyJUY5wBich3F7VHNkjlEuYav5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;50&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;https://github.com/lyb-geek/springboot-learning/tree/master/springboot-transation-after-commit&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.24&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1VicSPZGmGib7DZJ9SroHUVjBibu8uaKDBhlCQB1aqZ69x9MagZpTZHgWL8Ims0m9HDYGtHaibadGg4ZKLs8XtVYjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;50&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0d6fc31bd139636acf84f6c6b5084630</guid>
<title>游戏业务 DDoS 攻防对抗案例分享</title>
<link>https://toutiao.io/k/rehfnn6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.146875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9pxic9plf4mUCq5CKbhAfD2qgesyTjaDj0D79If2GdicPNCLibocA02kTyng/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;文｜&lt;/strong&gt;宙斯盾DDoS防护团队&lt;/p&gt;&lt;p&gt;暴雪&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;事实证明，每年春节假期，不甘寂寞、蠢蠢欲动的除了熊孩子，往往还有以DDoS为主业的黑客，而愉快的春节假期也随之成为DDoS攻击的高峰期。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;宙斯盾DDoS防护团队其实早已习惯与各种黑客&quot;共度新春&quot;，但2021年春节期间发生在腾讯云某游戏公司客户DDoS攻防大战却比以往的攻击更为凶猛、更加胶着。黑客为达目的，专门针对这个客户的多个游戏业务量身定制了完善的DDoS攻击方案，可谓无所不用其极，誓要将这个客户置于死地……&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;0x01. 突如其来，狼烟四起&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2021年2月初，临近农历新年的一个晚上，宙斯盾系统响起一个紧急告警：腾讯云某一游戏客户大量业务IP遭受地毯式DDoS轰炸，数十个IP短时间内同时受到大流量攻击。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;很显然这是专门针对该用户的恶意DDoS攻击事件。为此宙斯盾团队联合腾讯云高防产品团队马上联系到用户，与其沟通当前攻击态势及防护应对方案。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;经初步分析，第一轮攻击中：每个IP平均攻击流量峰值230G、攻击持续4小时、多种攻击DDoS和CC手法混合、精准打击业务关键端口、选择业务高峰期攻击。这些特性组合起来似乎就是黑客要向我们宣战的号角，预示着更多攻击将接踵而来，一次攻防拉锯战即将开始。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.437963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9px9iaN7VxhGQkD6iam5yE00csicPm0W3rH6OUQnrNOvIibJsiaHgCrIEp5LDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图1：第一轮攻击流量趋势图(单位Gbps)&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;0x02. 有备而来，不讲武德&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;不出所料，在接下来的十多天里，黑客每晚风雨不改、节假日无休地准时&quot;打卡&quot;攻击，露出一副誓要置游戏于死地的狰狞面目。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;根据宙斯盾统计，在二十天内，该客户旗下多个游戏共遭受将近1300次DDoS攻击，单次攻击流量峰值更是超过500Gbps。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4685185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9pxIs06JQMVzcYWZgpRGGVhICeIa8ib3ia2UR4ceicPX41DW6YuTWeWB7kJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;图2：某游戏客户DDoS攻击态势&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从攻击带宽大小来看，这个攻击峰值其实算不上很高(早在2018年腾讯云就曾为某客户成功防护峰值1.23Tbps的DDoS攻击)。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但经过团队仔细分析攻击手法和流量构成后确认这帮黑客实际是根据业务特征和弱点，精心策划的针对性的攻击，可谓有备而来。从以下3点可以明显看出：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;1. 熟悉业务，量身定做&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;根据统计，现网的攻击者往往更喜欢用UDP反射（占现网80%以上），但我们发现这帮黑客却从未使用。因为他们知道游戏业务是基于TCP协议，所以防护方肯定会在防护系统上禁用UDP，而且云厂商可以与运营商定制ACL，在运营商骨干网直接封禁UDP协议，攻击流量再大往往也是徒劳。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以黑客很聪明，精力都花在研究TCP攻击上，并为业务量身定制攻击方案。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;2. 深谙攻防，手法刁钻&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;黑客在制定TCP攻击方案时无不表现出对DDoS攻防技术的深入理解，挑选的大多是业界公认防护难度最大的攻击手法，包括：TCP反射、TCP连接攻击、TCP四层CC、HTTP CC等(详细数据见图3)。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这些攻击流量大多基于完整的TCP连接或者存在合法的协议栈行为，甚至可以突破传统的DDoS防护策略，对防护方带来巨大的挑战，也对游戏业务乃至平台稳定带来严重的威胁。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7145923&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9pxAmlT9Q7KQaILl83ge8ibFz9At4hMBERjFepy68a1J06PsPQWibZwZFXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;932&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图3：DDoS攻击手法分布&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;3. 兵不厌诈，专攻瓶颈&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;TCP是基于连接的协议，所以在TCP攻击防护对抗时，服务器的连接数上线经常会成为防护防的瓶颈，而黑客似乎深知这一点，通过调用大量肉鸡发起低频的连接请求，通过很小的流量来耗尽服务器连接，这无疑使得防护难度大大提升，不得不说这帮黑客实在不讲武德。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;面对准备充足、技术能力强的黑客攻击，宙斯盾防护团队如何逐一击破，保障业务和平台稳定的？接下来将详细分享。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;0x03. TCP反射：自研防护算法&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;TCP反射实际并不是一种新颖的攻击手法，宙斯盾团队早在2018年就发布了业界首篇技术文章《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzE1NjA0MQ==&amp;amp;mid=2651198528&amp;amp;idx=1&amp;amp;sn=35232201e6431fc76bbccde5b3b3644c&amp;amp;chksm=bd2cf1e68a5b78f02460695d299a39425303fc7cf8e72728cb195f8881e9b8492d5251dde0d1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;无心插柳还是有意为之：TCP反射DDoS攻击手法深入分析2.0&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;无心插柳还是有意为之：TCP反射DDoS攻击手法深入分析2.0&lt;/a&gt;》，阐述该种手法的原理和危害。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;而由于这种攻击手法存在协议栈行为，传统的反向挑战、协议栈行为检查等思路难以奏效，使得这种手法越来越受到黑产的青睐，终于在2020年Q3在云上爆发。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;根据宙斯盾统计，TCP反射当前全网攻击次数从原来10+次/天上涨至1400+次/天，流量峰值从原来10+Gbps暴增至500+G，由此可见TCP反射已成为无法忽视的安全难题，且定必愈发泛滥。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4472222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9px8HDw4w4qpfgE4tJ4msKZCtE0Y9OcFYhDz0BfSgugJogalsibUzNlSTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图4：TCP反射攻击态势&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;而TCP反射最主要的特点和防护难点在于：&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;（1）通过反射可轻松获得大量来源IP合法且具有协议栈行为的流量；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（2）专业防D设备通常旁路部署，只有单向入流量，无法实现双向会话检查；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（3）可反射synack、ack、rst混合，使流量构成更加接近正常业务。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;面对此等棘手的攻击，腾讯宙斯盾团队其实早已有备无患，在TCP反射爆发前已经自研业界首个TCP反射防护算法：可以无需人工干预、玩家无感知的前提下精确区分攻击流量和正常流量，实现自动化、智能化的清洗。所以在这次对抗中，TCP反射被有效防护，黑客并未得逞。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;0x04. TCP四层CC：AI+DDoS防护&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;其实当下CC主要分为两大类：七层CC(基于HTTP协议)和四层CC(基于TCP协议)。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;而由于被攻击的游戏业务并无HTTP，所以宙斯盾团队通过配置HTTP禁用策略即可轻松解决，但对于TCP四层CC，防护难度则直接被”拉满”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所谓的TCP四层CC就是黑客控制大量肉鸡与目标服务器建立完整TCP连接后发送大量伪造的数据流量，导致耗尽服务器资源达到拒绝服务的目的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这种攻击手法在TCP的业务场景上更加常见，而防护难点在于业务本身就是基于TCP开发的私有协议，本身并不规范，可用的防护特征和规则很少，难以区分攻击和正常流量。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5573394&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9pxbvVsjLuI95ibibuQKP9Qp2Ouudia7oGmlBW5HppL65jhEzezkNu8mibg2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;436&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图5：TCP四层CC攻击过程&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;业界防护TCP四层CC最彻底的方式就是让客户端接入SDK，客户端流量完全交由SDK接管，这样防护系统就可以根据与SDK协商制定的机制，高效识别出恶意流量，完成自动化防护。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但这种方案需要客户端和服务器改造代码接入，必然有一段较长的开发和测试周期，所以”远水救不了近火”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;实际上宙斯盾团队对TCP四层CC已经有多年的防护经验，并且自研了业界首个&lt;span&gt;&lt;strong&gt;基于深度学习的TCP四层CC解决方案：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;（1）利用腾讯自身的海量流量数据优势，采集大量数据对深度学习模型进行训练；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（2）深度学习模型收敛后具备对流量进行自动识别和分类的能力；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（3）现网防护过程中，DDoS系统与AI引擎联动，最终实现TCP四层CC的自动化识别和清洗。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4904891&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9pxU5Z12TRXAcX3ULrKiartztyicoTCNnMmeSBPP0ibtn3yqjsZkaZib5x0Jw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;736&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图6：TCP四层CC AI防护模型&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;依赖该深度学习方案并结合业务特征定制的策略，宙斯盾对该黑客发起的所有TCP四层CC攻击流量实现了高精度清洗，黑客再次未能得逞。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;0x05. TCP连接攻击：流量指纹识别&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在TCP反射、四层/七层CC都没有攻击效果后，黑客将目光转向TCP连接这个方向上，最终想到一种更“脏”的攻击手法：低频TCP连接攻击。此时防护方面临着4大难题:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;（1）攻击肉鸡IP分布全国各地，没有明显集聚，且肉鸡IP不断轮换；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（2）肉鸡连接请求频率极低，与正常玩家接近，甚至比玩家更低；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（3）肉鸡建立请求后会发送极少量伪造的业务数据，攻击行为不明显；&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;面对诸多不利因素和巨大压力，宙斯盾团队经研究分析后，决定抛开黑名单、限速等传统的DDoS对抗思维，转而通过宙斯盾自研的流量指纹算法实现”绝地翻盘”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所谓的流量指纹是通过被动式的流量分析，精确地识别客户端的关键信息，包括：操作系统类型、应用程序类型甚至定位到某台终端。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以虽然肉鸡在流量、行为上已经无限接近正常玩家，但是在宙斯盾指纹识别算法下还是无所遁形，肉鸡和正常玩家被精确识别区分，攻击流量被防护系统精确拦截。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4844828&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9pxkPsjB5Nrpq0RyfSMhgEBmxYjyyfGMCIhLk9GMrpuAFRKOexhnW5F6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;580&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图7：流量指纹&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;经过对抗，黑客的所有攻击手法被全部防护，业务也恢复了正常。正义的黎明终于到来。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;0x06. 腾讯云海量DDoS防护&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;有人可能会说：有没有可能黑客会哪天恼羞成怒，转而发起超大流量的DDoS攻击呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然有可能。面对这种威胁，腾讯云依赖自身超大的带宽优势和多年的攻防对抗经验搭建了覆盖全球的DDoS防御体系，能提供国内累计防护能力5T、海外累计防护能力1.2T的服务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以即使这个客户发起超大流量DDoS攻击也只能无功而返。&lt;span&gt;&lt;em&gt;(腾讯云DDoS防护产品详情见https://cloud.tencent.com/product/ddos)&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5712963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JMH1pEQ7qP5d7qCNIR7PnUucfgzVD9pxc03f6MTBDVPXL8vad2pIHyPLyqj0RcHPz163Yb0iaLmtsFbtcicOu9lA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图8：腾讯云全球DDoS防护体系&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;0x07. 重归平静？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;黑客精心定制的攻击方案无法凑效后，其实并未放弃，尝试了例如批量更换肉鸡IP、加大肉鸡IP数量、发起协议泛洪、脉冲攻击等方式，意图掀起波浪，但这些”努力”都被证实只是垂死挣扎。经过多天尝试无果后，最终黑客逐渐失去耐心，放弃攻击。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那是不是就天下太平，重归平静呢？答案似乎很骨感：并不是。所谓“只要有利益就是争斗，有业务的网络就有DDoS”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;无论是业务方还是防护方永远不能奢求哪天黑客会思想品德会突然拔高，放弃DDoS，反倒应该不断锤炼和创新自己，才能在愈发恶劣和复杂的抗D战场中先黑客一步，从容应对。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;宙斯盾DDoS防护团队&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;宙斯盾DDoS防护团队基于十余年的DDoS防护技术积累，持续为QQ、微信、王者荣耀、英雄联盟等自研业务提供专业、可靠的DDoS攻击防护解决方案。与腾讯云安全团队合作推出高防产品为云上客户提供专业、可靠的DDoS解决方案。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;附录&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;小隐隐于野：基于TCP反射DDoS攻击分析&lt;/p&gt;&lt;p&gt;https://www.cnblogs.com/qcloud1001/p/9039227.html&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzE1NjA0MQ==&amp;amp;mid=2651198528&amp;amp;idx=1&amp;amp;sn=35232201e6431fc76bbccde5b3b3644c&amp;amp;chksm=bd2cf1e68a5b78f02460695d299a39425303fc7cf8e72728cb195f8881e9b8492d5251dde0d1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;无心插柳还是有意为之：TCP反射DDoS攻击手法深入分析2.0&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;无心插柳还是有意为之：TCP反射DDoS攻击手法深入分析2.0&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>50be696914b4b6a97735a0f36e787004</guid>
<title>玩转直播系列之从 0 到 1 构建简单直播系统（一）</title>
<link>https://toutiao.io/k/5irppk8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;在直播系统中，秀场直播，带货直播的直播间消息信令通信是比较偏多的，主要是因为业务性质所决定的，秀场直播和带货直播这两类直播的互动性相对比较强，玩法也比较多样，按照我们上图的分类，每一个业务的消息的可丢弃性和实时性要求都不一样，所以在开发消息系统的时候，也需要对消息进行优先级排序，对消息分发的实时性也要有业务性能考量。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;刚刚针对直播间消息实时性和不可丢弃性这两个属性做了业务上相关的阐述，不过对于直播消息而言，第一要素是稳定性，消息如何准确稳定地分发到指定的直播间，也是我们需要考虑的问题之一，直播消息的分发实现，从总体上说可以分为两种实现方式，第一是依靠直播间的实时通讯(Instant Messaging)，也就是我们常说的IM消息系统，第二个是依靠http短轮询，例如客户端每隔1秒来请求一次服务器，服务器返回这一秒内发生的增量消息信息，客户端获取到这些增量信息，再根据具体的消息业务类型，再进行相对业务的页面UI渲染，这样就可以了，从技术上说，一个是“推”模型，一个是“拉”模型，今天我们因为搭建一个简单的直播间消息系统，我们先用一个简单的&quot;拉&quot;模型进行简单的实现。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;基本实现思路：客户端每隔一个极短的时间，例如1秒亦或者更短的时间，根据直播间的id来调用服务端的接口，轮询该直播间发生的消息，服务端这边我们使用redis的SortedSet的数据结构来存储消息，其中key是直播间的房间id，score是服务器接收到该消息事件生成的时间戳，value可以简单地直接存储该消息序列化后的字符串，这样可以按照时间顺序地去存储消息，并且配置过期消息的删除逻辑，整个消息的存储就可以简单地搭建起来。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;消息存储用java的伪代码所示：&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;long time = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Date&lt;/span&gt;().getTime();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     jedisTemplate.zadd(V_UNIQUE_ROOM_ID, time, &lt;span class=&quot;code-snippet__built_in&quot;&gt;JSON&lt;/span&gt;.toJSONString(roomMessage));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (probability()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           deleteOverTimeCache(V_UNIQUE_ROOM_ID);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            log.error(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;message save error&quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;可以看到消息存储，如果使用redis的sortedSet进行存储还是比较方便的，接下来我们需要处理就是redis中过期消息的删除，因为无效的过期消息是没有价值的(所有的消息可以做持久化存储)，redis中如果单一的key存储的消息过多，也会导致消息的慢查，和内存的使用量不断增大，这是我们不想看到的，这边因为是示例代码，所以简单地处理一下删除逻辑。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;deleteOverTimeCache&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String roomId)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Long totalCount = jedisTemplate.zcard(roomId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;log&lt;/span&gt;.info(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;deleteOldTimeCache size is {}&quot;&lt;/span&gt;, totalCount);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (totalCount &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;600&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Set&amp;lt;Tuple&amp;gt; tuples = jedisTemplate.zrangeWithScores(roomId, &lt;span class=&quot;code-snippet__number&quot;&gt;-601&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (CollectionUtils.isNotEmpty(tuples)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Tuple tuple : tuples) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; score = tuple.getScore();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                jedisTemplate.zremrangeByScore(roomId, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;d, score);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;上面的伪代码probability()首先先做一个概率性的判断，例如我们做百分之一的随机判断，判断该次请求是否要进行消息的删除(请注意我们删除的逻辑是放在插入的逻辑之中的。如果每一次插入都需要判断是否要删除过期数据，会影响插入的性能)。如果通过概率性判断后，我们就优先判断某一个直播间的消息个数，如果消息个数还是比较少的话，则退出删除逻辑，如果超过消息阀值，则按照时间倒序删除已经过期的消息。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;说完了http短轮询消息的存储后，我们最后再简单地说一下客户端消息查询实现逻辑。客户端通过直播间id和时间戳两个字段来请求服务端以查询直播间消息，其中&quot;时间戳&quot;是每一次服务端返回的，这个时间戳是渐进式的，当下一次客户端来请求服务端的数据的时候，都会带来上次服务端返回的时间戳，伪代码如下：&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@&lt;span class=&quot;code-snippet__function&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; RoomMessage &lt;span class=&quot;code-snippet__title&quot;&gt;queryRoomMessages&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;MessageMessageReq messageMessageReq&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        RoomMessage result = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; RoomMessage();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; timestamp = messageMessageReq.getTimestamp();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Set&amp;lt;Tuple&amp;gt; tuples = &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (timestamp == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            tuples = jedisTemplate.zrevrangeWithScores(UNIQUE_ROOM_ID, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            tuples = jedisTemplate.zrangeByScoreWithScores(UNIQUE_ROOM_ID, timestamp + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, System.currentTimeMillis(), &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        List&amp;lt;EachRoomMessage&amp;gt; eachRoomMessages = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; lastTimestamp = &lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!CollectionUtils.isEmpty(tuples)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Tuple tuple : tuples) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                lastTimestamp = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Double(tuple.getScore()).longValue();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                eachRoomMessages.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(JSON.parseObject(tuple.getElement(), EachRoomMessage.class));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        result.setTimestamp(lastTimestamp);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        result.setEachRoomMessages(eachRoomMessages);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b1035ab6a825e25b11a291d0acd02be6</guid>
<title>高可用：必须修炼《流控》这把利剑</title>
<link>https://toutiao.io/k/rcxeb1m</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;国庆期间，小胖约上女朋友去上海迪士尼游玩，&lt;code&gt;创极速光轮&lt;/code&gt;、&lt;code&gt;翱翔•飞越地平线&lt;/code&gt;、&lt;code&gt;漫威英雄总部&lt;/code&gt;、&lt;code&gt;小熊维尼历险记&lt;/code&gt;、&lt;code&gt;爱丽丝梦游仙境迷宫&lt;/code&gt; 等好多童年回忆，一定可以玩的畅快淋漓。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可是到了现场，却发现人山人海，目惊口呆，刹那间好像全国的宅男们都和小&lt;span&gt;胖&lt;/span&gt;想到一块去了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3Ohm6WHibeXLL4AVYEUeBKzcTZJd7mrk9y2RzO4icSSaO951HKZka9mMB8bDrGoPIZJqWRYIDDUSmMCHUFdCdolg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面对这么热情的游客，迪士尼要怎么接待，如果放开闸口，游客一拥而上，大家都玩不好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候就需要有些应对措施，比如&lt;code&gt;一天限量3万张门票&lt;/code&gt;，并在入口检票处、各个游玩项目入口处都有排队机制，控制人数，维持秩序，保证大家都能玩的开心。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，不止是线下，线上也有流控。每年的&lt;strong&gt;春运抢火车票、天猫双十一购物狂欢节、618大促、秒杀活动、各种电商促销活动&lt;/strong&gt;，这些都会带来瞬间高访问流量，如果不做有效控制，很容易把系统冲垮，影响用户体验，甚至引发各种资损。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;这也是我们要做 《流控》 的原因，保护核心系统的可用性！&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;🌴 什么是限流&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;限流定义：&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;限制到达系统的并发请求数量，保证系统能够正常响应部分用户请求，而对于超过限制的流量，则通过拒绝服务的方式保证整体系统的可用性。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说白了，&lt;code&gt;限流&lt;/code&gt;就是敢于说&lt;code&gt;不&lt;/code&gt;。所以，为了保证效果，尽量将&lt;code&gt;限流组件&lt;/code&gt;前置化，降低&lt;code&gt;无效流量&lt;/code&gt;对系统的损耗。比如，部署在&lt;code&gt;API网关&lt;/code&gt;中，统一处理；当然如果担心分发下来的流量还是很大的话，下游的微服务系统内部也可以引入&lt;code&gt;限流组件&lt;/code&gt;，多层保障~~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;根据作用范围：限流分为单机版限流、分布式限流。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、单机版限流&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要借助于本机内存来实现计数器，比如通过&lt;code&gt;AtomicLong#incrementAndGet()&lt;/code&gt;，但是要注意之前不用的key定期做清理，释放内存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;纯内存实现，无需和其他节点统计汇总，性能最高。但是优点也是缺点，无法做到&lt;code&gt;全局统一化&lt;/code&gt;的限流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、分布式限流&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单机版限流仅能保护自身节点，但无法保护应用依赖的各种服务，并且在进行节点扩容、缩容时也无法准确控制整个服务的请求限制。而分布式限流，以集群为维度，可以方便的控制这个集群的请求限制，从而保护下游依赖的各种服务资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;限流支持多个维度：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;整个系统一定时间内（比如每分钟）处理多少请求&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;单个接口一定时间内处理多少流量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;单个IP、城市、渠道、设备id、用户id等在一定时间内发送的请求数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果是开放平台，则为每个&lt;code&gt;appkey&lt;/code&gt;设置独立的访问速率规则&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;限流维度更多体现了业务侧需求，实现原理类似，都是抽取对应的关键key数据，按照一定的限流算法来控制访问频率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;那具体常见的限流算法有哪些？&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;🌴 计数器限流&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;限制一段时间内发向系统的总体请求量，算法实现比较简单。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每次接收到了请求 ，内存中给计数器加1，并将最新值与阈值比较，低于设置的阈值则正常处理改请求，否则拒绝本次服务。&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI5NDAwMzM0MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/3Ohm6WHibeXJY3p8ibo9XeCic0sLhnu7GGMo7TiacVcs0wM8dKUzwjjsX9CVPLTZqZsVNgWCWgjTiaFhZ2elNs9RB8Q/0?wx_fmt=png&quot; data-nickname=&quot;微观技术&quot; data-alias=&quot;weiguanjishu&quot; data-signature=&quot;计算机专业出身，研究僧，校招进入阿里，架构师。负责过电商交易、社区团购、营销、金融等业务。分享后端架构技能、一线大厂面试经验、团队管理等话题。欢迎关注&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现起来比较简单，但是有一个致命缺陷，&lt;strong&gt;临界问题&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3Ohm6WHibeXLL4AVYEUeBKzcTZJd7mrk9juiaUtkNd1Vt1CaEHkGgKglUic5Mv47peOALnBuGONE65CmLkabkQIxQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如上图所示，对于一个业务接口配置限流规则，每5秒钟处理请求不能超过 1000&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;假如在第【4，5】秒间，涌进来一个900个请求，但【0，5】秒钟内的总数小于1000，所以系统照单全收&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后过了5秒这个时刻点，进入【5，10】秒这个周期，新周期会重新计数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不凑巧的是，在【5，6】秒之间，又涌进来一大波请求，有900多个，由于此时的计数还没超过1000，限流不会拦截&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这个时候【4，6】秒间，系统大约接收了 1800个请求，严重超过了系统的承载能力。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;虽然也配置了&lt;code&gt;计数器限流&lt;/code&gt;，但是用户利用&lt;code&gt;临界点&lt;/code&gt;这个漏洞，瞬间压垮我们的系统&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决这个缺陷，就有了下面要介绍的&lt;code&gt;基于滑动窗口的算法&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;🌴 滑动窗口限流&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务的限流规则没有变，还是每5秒钟处理请求不能超过 1000&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.48828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3Ohm6WHibeXLL4AVYEUeBKzcTZJd7mrk93C35W05IwAFrSDzemjgmKw0bicicFuQcz5ibWyypOIsS2Awic04jBMGaCA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;与&lt;code&gt;计数器限流&lt;/code&gt;的区别在于，将5秒钟分成了5个&lt;code&gt;1秒&lt;/code&gt;的小块，每个 &lt;code&gt;1秒&lt;/code&gt; 小块独立计数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当在第5秒钟接收到一个请求时，会将&lt;strong&gt;第1秒到第5秒间的5个格子的计数求和&lt;/strong&gt;，然后与设置的阈值比较，此时是940，如果没有超过1000，限流不会拦截&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当在第6秒的时候，接收到一个请求，则需将&lt;strong&gt;第2秒到第6秒间的5个格子的计数求和&lt;/strong&gt;，此时是2100，限流生效。&lt;code&gt;计数器限流&lt;/code&gt;的问题能够解决。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;滑动窗口限流可以有效解决这个精度问题。当滑动窗口的格子数拆分的越多，那么滑动窗口的滚动就越平滑，限流的统计就越精确。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;但是也不是窗口拆分的越多越好，空间复杂度以及统计计数开销都会大大增加&lt;/code&gt;，就像这世间万物都存在相生相克，没有什么是绝对好，只要合适就好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0114942528735633&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3Ohm6WHibeXLL4AVYEUeBKzcTZJd7mrk9WW7BLpN7q0FicRGol7RBTkK0CQVOlRJibkia5E1ePXT5dicsYBO11D342A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;522&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;滑动窗口应用广泛，除了在业务系统中大量使用，在&lt;code&gt;TCP协议&lt;/code&gt;中也有引入。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;TCP滑动窗口&lt;/code&gt;是在传输层进行流控的一种措施，分为&lt;code&gt;发送窗口&lt;/code&gt;、&lt;code&gt;接收窗口&lt;/code&gt;。接收方通过数据包发送方&lt;code&gt;自己当前窗口大小&lt;/code&gt;和&lt;code&gt;期望接收到的下一字节的序号n&lt;/code&gt;，从而控制发送方的发送速度，实现对网络传输流量的控制，防止发送方速度过快导致自己被淹没。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;虽然滑动窗口限流解决了窗口边界的大流量问题，但是它和&lt;code&gt;计数器限流&lt;/code&gt;类似，无法限制短时间之内的集中流量，也就是说无法控制流量让它们更加平滑。那么有没有解呢？答案是肯定的，接下来我们来介绍&lt;code&gt;漏桶限流&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;🌴 漏桶限流&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;漏桶限流主要是在&lt;code&gt;流量生产端&lt;/code&gt;和&lt;code&gt;接收端&lt;/code&gt;之间增加了一个漏桶，流量会先暂存在漏桶中，如果流入的流量短时间内暴增，超过了漏桶的部分会被拒绝服务，而漏桶的出口处会按照一个固定的速率将流量漏出给消费端
，进行各种业务处理。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.1548387096774193&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3Ohm6WHibeXLL4AVYEUeBKzcTZJd7mrk9McTEHw8eaxUQb38TgoLibx1FhA44sg2S9oXWfdibLEswhicD5S1TUTtFw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;620&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过了漏桶限流之后，随机产生的流量就会成为比较&lt;code&gt;平滑的流量&lt;/code&gt;到达服务端，&lt;code&gt;削峰填谷&lt;/code&gt;，从而避免了突发的大流量对于服务接口的影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;技术方案实现，我们一般使用&lt;code&gt;消息队列&lt;/code&gt;作为漏桶的实现。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;漏桶限流，虽然能应付集中高并发流量冲击，但始终恒定的处理速度（&lt;strong&gt;严重依赖于消费端的消费速度&lt;/strong&gt;）有时候并不一定是件好事，作为互联网应用，我们应该尽最大努力去快速响应用户请求，无论是处理还是拒绝。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;响应时间真的很重要，太久会严重影响用户体验，引发用户流失。另外，面对流量突增时调整起来不够方便，这时候，我们可以考虑&lt;code&gt;令牌桶限流&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;🌴 令牌桶限流&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;令牌桶限流，既能达到精确限流的作用，还能快速给用户响应。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4887063655030801&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3Ohm6WHibeXLL4AVYEUeBKzcTZJd7mrk9Xx4nAMyVGRvbshEoiaAnVNNBxRibOmvrias3wxlqJIpNx7niaVFibOiaLehQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;487&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;基本流程：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果限流规则是1秒钟1000次请求，那么每隔1毫秒，流量生产端会往桶中放入一个令牌&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;接收端在处理一个请求之前，先从桶中取一个令牌，才能继续后续的业务处理。如果桶中没有令牌，则需要等待或者拒绝服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;初始化时，&lt;code&gt;会限制桶中的令牌总数&lt;/code&gt;，如果超过了&lt;code&gt;限制数&lt;/code&gt;就不再向桶中放入新的令牌。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;令牌桶算法生成令牌的速度是&lt;strong&gt;恒定的&lt;/strong&gt;，而请求去拿令牌是没有速度限制的。意味着，面对瞬时大流量，该算法可以在短时间内请求拿到大量令牌，而且拿令牌的过程并不是消耗很大的事情。虽然瞬间拿走了桶中的令牌，但由于&lt;code&gt;流量生产端&lt;/code&gt;生产流量的速度是&lt;code&gt;恒定的&lt;/code&gt;，后续的请求会被拦截，不会冲击到系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Google的&lt;code&gt;Guava&lt;/code&gt;包中的&lt;code&gt;RateLimiter&lt;/code&gt;类就是令牌桶算法的解决方案，不过只适用于单机版。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是分布式环境，我们可以将令牌存储在&lt;code&gt;Redis&lt;/code&gt;中（&lt;strong&gt;incr 计数&lt;/strong&gt;），每次处理请求前访问一次&lt;code&gt;Redis&lt;/code&gt;获取一个令牌，但是会有性能损耗（约1~2ms）。也可以进一步优化，采用批量拉取方式，一次获取多个令牌，放在client端临时存储，待本地的令牌使用完后，再从&lt;code&gt;令牌桶&lt;/code&gt;中申请。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际项目中，令牌桶限流使用较多，我们可以基于当前系统的服务能力&lt;strong&gt;动态调整令牌的发放速率&lt;/strong&gt;，此外我们还可以&lt;strong&gt;动态调整桶大小&lt;/strong&gt;（或者为令牌设置生命周期），以防止大量令牌累积导致的“伪限流失效”现象。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;🌴 写在最后&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;限流的难点在于配置 ，不管是静态配置还是动态配置，如何让限流在不误伤的前提下尽量发挥最大作用是一个富有经验的问题，如何找到这个平衡点，&lt;strong&gt;压测&lt;/strong&gt;是一个基础且行之有效的方法。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于我：&lt;/span&gt;&lt;span&gt;前阿里架构师，出&lt;/span&gt;&lt;span&gt;过专利，竞赛拿过奖，CSDN博客专家，&lt;/span&gt;&lt;span&gt;负责过电商交易、社区、营销、金融等业务，&lt;/span&gt;&lt;span&gt;多年团队管理经验，爱思考，喜欢结交朋友&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;欢迎大家扫描 &lt;/span&gt;&lt;span&gt;↓↓↓ 二维码，加个&lt;/span&gt;&lt;span&gt;微&lt;/span&gt;&lt;span&gt;信好友，多多交流&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2021660649819494&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3Ohm6WHibeXLL4AVYEUeBKzcTZJd7mrk9XicnYiccg6n8YjsA4ibpRk6hkog7Qqx6cJNIF1rhicl992vID1IFUKWYuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5NDAwMzM0MA==&amp;amp;mid=2247485101&amp;amp;idx=1&amp;amp;sn=40ecbfba914173c99bba7acedba6478a&amp;amp;chksm=ec68314edb1fb8581b3389a8e47407cccf44b958f9411d1d2e7ca9610e6e2bba2ac0aebfe4b0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;淘宝双11千亿交易额的系统架构演变&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5NDAwMzM0MA==&amp;amp;mid=2247484438&amp;amp;idx=1&amp;amp;sn=686afd68b34579d0c38b7de67ce2b64b&amp;amp;chksm=ec6833f5db1fbae3897f2261e270e745182996f95b2fe7c3d4d57e2000607e6bf2c6ead2b446&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;淘宝订单自动确认收货的N种实现，秒杀面试官&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5NDAwMzM0MA==&amp;amp;mid=2247484307&amp;amp;idx=1&amp;amp;sn=37351d4934ee92c05f6f1beb76462cf4&amp;amp;chksm=ec683470db1fbd6625e46acc6d1e6813b072c8358dc1d7a98cc6bedd7636a182c2b09d0e8ef8&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;如何设计一个高性能的秒杀系统&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;码字不易，请不要白嫖。如果对您的工作有帮助，请转发分享，点个 “赞”&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>