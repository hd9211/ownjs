<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>627622a4ac72b98dfcb94b38000f9712</guid>
<title>Spring Boot 中优雅的使用 Swagger 2（史上最全注解篇）</title>
<link>https://toutiao.io/k/2qkwu5f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;上篇文章讲到&lt;a href=&quot;https://toutiao.io/posts/wqytyz4&quot;&gt;SpringBoot中优雅的使用Swagger2-【1/2】&lt;/a&gt;，还不会使用Swagger的小伙伴可以先去看上期文章。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;注解API使用说明&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;strong&gt;作用范围&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;&lt;strong&gt;API&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;&lt;strong&gt;API常用参数&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;&lt;strong&gt;作用位置&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;协议集描述&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@Api&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@Api(tags = {&quot;tag1&quot;,&quot;tag2&quot;,&quot;...&quot;})&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;controller类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;协议描述&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiOperation&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiOperation(value = &quot;功能描述&quot;,notes = &quot;备注&quot;)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;controller类的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;描述返回对象的意义&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiModel&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiModel(value=&quot;类名&quot;,description=&quot;类描述&quot;)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;返回对象类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;对象属性&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiModelProperty&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiModelProperty(value = &quot;类属性描述&quot;,required = &lt;em&gt;true&lt;/em&gt;,example = &quot;属性举例&quot;,notes = &quot;备注&quot;)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;出入参数对象的字段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;非对象参数集&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiImplicitParams&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiImplicitParams({@ApiImplicitParam(),@ApiImplicitParam(),...})&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;controller的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;非对象参数描述&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiImplicitParam&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiImplicitParam(name = &quot;参数名&quot;,value = &quot;参数描述&quot;,required = &lt;em&gt;true&lt;/em&gt;,paramType = &quot;接口传参类型&quot;,dataType = &quot;参数数据类型&quot;)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiImplicitParams的方法里用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Response集&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiResponses&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiResponses({     @ApiResponse(),@ApiResponse(),..})&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;controller的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Response&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiResponse&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiResponse(code = 10001, message = &quot;返回信息&quot;)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiResponses里用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;忽略注解&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiIgnore&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;@ApiIgnore&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;类，方法，方法参数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;API使用详细说明&lt;/h2&gt;

&lt;h3&gt;@Api&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;作用&lt;/code&gt;：用来指定接口的描述文字&lt;br/&gt;
&lt;code&gt;修饰范围&lt;/code&gt;：作用在类上&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;@Api(tags = &quot;TestController测试&quot;)
@RestController
public class TestController {
    ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/swagger2/02.png&quot; alt=&quot;&amp;quot;Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;@ApiOperation&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;作用&lt;/code&gt;：用来对接口中具体方法做描述&lt;br/&gt;
&lt;code&gt;修饰范围&lt;/code&gt;：作用在方法上&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;@ApiOperation(value = &quot;接口总体描述&quot;,notes = &quot;&amp;lt;span style=&#x27;color:red;&#x27;&amp;gt;详细描述：&amp;lt;/span&amp;gt;&amp;amp;nbsp;方法详细描述信息&quot;)
@GetMapping(&quot;/&quot;)
public String login(String... index) {
    return &quot;Hello login ~&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;value&lt;/code&gt;：用来对接口的总体描述&lt;br/&gt;
&lt;code&gt;notes&lt;/code&gt;：用来对接口的详细描述&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/swagger2/03.png&quot; alt=&quot;&amp;quot;Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;@ApiImplicitParams&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;作用&lt;/code&gt;：用来对接口中参数进行说明&lt;br/&gt;
&lt;code&gt;修饰范围&lt;/code&gt;：作用在方法上&lt;br/&gt;
&lt;code&gt;参数&lt;/code&gt;：@ApiImplicitParam数组&lt;/p&gt;

&lt;h3&gt;@ApiImplicitParam&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;作用&lt;/code&gt;：修饰接口方法里面的参&lt;br/&gt;
&lt;code&gt;修饰范围&lt;/code&gt;：作用方法上&lt;br/&gt;
&lt;code&gt;参数&lt;/code&gt;：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：方法参数名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt;：方法参数的描述&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dataType&lt;/code&gt;：方法参数数据类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defaultValue&lt;/code&gt; ：方法参数默认值（给测试人员做测试用的）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;paramType&lt;/code&gt; ：&lt;/li&gt;
&lt;li&gt;- &lt;code&gt;默认query&lt;/code&gt;：对应方式一

&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/swagger2/04.png&quot; alt=&quot;&amp;quot;Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;方式一：url？id=1&amp;amp;user=&#x27;qlh&#x27;后面参数&lt;/h4&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;@ApiOperation(value = &quot;接口总体描述&quot;, notes = &quot;&amp;lt;span style=&#x27;color:red;&#x27;&amp;gt;详细描述：&amp;lt;/span&amp;gt;&amp;amp;nbsp;方法详细描述信息&quot;)
@ApiImplicitParams({
        @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, dataType = &quot;String&quot;, defaultValue = &quot;qlh&quot;),
        @ApiImplicitParam(name = &quot;password&quot;, value = &quot;密码&quot;, dataType = &quot;String&quot;, defaultValue = &quot;123&quot;)
})
@PostMapping(&quot;/&quot;)
public String login(String username, String password) {
    return &quot;Hello login ~&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;方式二：url/1/2路径后 传参  在路径中获取参数&lt;/h4&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;@ApiOperation(value = &quot;接口总体描述&quot;, notes = &quot;&amp;lt;span style=&#x27;color:red;&#x27;&amp;gt;详细描述：&amp;lt;/span&amp;gt;&amp;amp;nbsp;方法详细描述信息&quot;)
@ApiImplicitParams({
        @ApiImplicitParam(name = &quot;id&quot;, value = &quot;id&quot;, dataType = &quot;String&quot;, defaultValue = &quot;qlh&quot;,paramType = &quot;path&quot;),
        @ApiImplicitParam(name = &quot;name&quot;, value = &quot;姓名&quot;, dataType = &quot;String&quot;, defaultValue = &quot;123&quot;,paramType = &quot;path&quot;)
})
@PostMapping(&quot;/index/{id}/{name}&quot;)
public String index(@PathVariable(&quot;id&quot;) String id, @PathVariable(&quot;name&quot;) String name) {
    return &quot;Hello World ~&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;方式三：在body中传参&lt;/h4&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;@ApiOperation(value = &quot;接口总体描述&quot;, notes = &quot;&amp;lt;span style=&#x27;color:red;&#x27;&amp;gt;详细描述：&amp;lt;/span&amp;gt;&amp;amp;nbsp;方法详细描述信息&quot;)
@ApiImplicitParams({
        @ApiImplicitParam(name = &quot;id&quot;, value = &quot;id&quot;, dataType = &quot;String&quot;, defaultValue = &quot;xxx&quot;, paramType = &quot;body&quot;),
        @ApiImplicitParam(name = &quot;name&quot;, value = &quot;姓名&quot;, dataType = &quot;String&quot;, defaultValue = &quot;123&quot;, paramType = &quot;body&quot;)
})
@PostMapping(&quot;/index&quot;)
public String index(@RequestBody Map&amp;lt;String, Object&amp;gt; map) {
    return &quot;Hello World ~&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;@ApiResponses&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;作用&lt;/code&gt;：用于接口的响应结果&lt;br/&gt;
&lt;code&gt;修改范围&lt;/code&gt;：作用在接口方法上&lt;br/&gt;
&lt;code&gt;参数&lt;/code&gt;：@ApiResponse数组&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;@ApiResponses({
        @ApiResponse(),
        @ApiResponse(),
        ...
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;@ApiResponse&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;作用&lt;/code&gt;：在ApiResponses里面对响应码以及响应内容进行设置&lt;br/&gt;
&lt;code&gt;修饰范围&lt;/code&gt;：作用接口方法上&lt;br/&gt;
&lt;code&gt;参数&lt;/code&gt;：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;code&lt;/code&gt;：响应状态码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt;：响应状态码对应的响应内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;@ApiResponse(code = 10001, message = &quot;签名错误&quot;),
@ApiResponse(code = 10002, message = &quot;sql错误&quot;),
@ApiResponse(code = 10003, message = &quot;服务怠机,请稍后重试&quot;),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/swagger2/05.png&quot; alt=&quot;&amp;quot;Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;@ApiIgnore&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;作用&lt;/code&gt;：忽略类，方法，参数。（忽略的意思：在swagger-ui.html中不显示）&lt;br/&gt;
&lt;code&gt;修改范围&lt;/code&gt;：作用在类，方法，参数上&lt;/p&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;@ApiIgnore
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3&gt;实体类中swagger注解&lt;/h3&gt;

&lt;h4&gt;@ApiModel&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;作用&lt;/code&gt;：用来对实体类进行说明&lt;br/&gt;
&lt;code&gt;修饰范围&lt;/code&gt;：作用在类上&lt;/p&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;@ApiModel(value=&quot;类名&quot;,description = &quot;实体类描述&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/swagger2/06.png&quot; alt=&quot;&amp;quot;Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;@ApiModelProperty&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;作用&lt;/code&gt;：用来对实体类中的属性进行说明&lt;br/&gt;
&lt;code&gt;修饰范围&lt;/code&gt;：作用在类中的属性上&lt;/p&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;@ApiModelProperty(value = &quot;类属性描述&quot;,required = true,example = &quot;属性举例&quot;,notes = &quot;备注&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/LongGroup/tinygray_picturebed/raw/master/wechat/swagger2/07.png&quot; alt=&quot;&amp;quot;Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;结束语&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt; 至此&lt;code&gt;springboot集成swagger2&lt;/code&gt;就讲完了，我相信，看完我这两篇文章之后的朋友，你们就能很熟练的在java代码中使用swagger了。&lt;br/&gt;
 因为目前&lt;code&gt;前后端分离&lt;/code&gt;比较流行，所以写一个好的&lt;code&gt;swagger接口文档是很有必要的&lt;/code&gt;，这样就会减少前后端因为一些接口表述不清楚，导致的后端开发人员来回和前端人员交流沟通，大大的提高了开发的效率。&lt;br/&gt;
 使用&lt;code&gt;swagger注解&lt;/code&gt;后，你们写的接口是不是被好多同事夸奖了呢？哈哈哈。&lt;/p&gt;

&lt;p&gt;感谢阅读小生文章。祝大家&lt;code&gt;早日富可敌国，实现财富自由&lt;/code&gt;。&lt;br/&gt;
记得&lt;code&gt;点赞、评论、收藏哦&lt;/code&gt;。&lt;br/&gt;
有任何问题可以在微信搜索&lt;code&gt;公众号&lt;/code&gt;：&lt;code&gt;Madison龙少&lt;/code&gt;进行咨询&lt;br/&gt;
或者微信扫描下面二维码进行咨询&lt;br/&gt;
&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9af8ae383ef40249747bb2278c064d9%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&amp;quot;Madison龙少&amp;quot;&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9aa42bbb5b6974cdc12fb947e3be1487</guid>
<title>小团队外包困局</title>
<link>https://toutiao.io/k/bhwr4ne</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;这里的小团队是指非全职或全职，规模小，以技术见长，有公司主体或半自由状态，没有成形的业务团队等，如果你有钱有人有资源，即便你是一个光杆司令，也不要跟上面对标（入职外包大厂上班亦不在此行列）。&lt;/p&gt;&lt;p&gt;如果正好有个外包业务，那到底要不要做呢？有几个点可以参考一下：&lt;/p&gt;&lt;p&gt;&lt;span&gt;特别缺钱用吗？除挣点外快外还有附加值吗？难度不高周期短吗？时间允许吗？团队完整吗？利润空间大吗？业务方舍得投入吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;当然不踏出第一步，怎么知道这外包业务能不能做呢，万一做好了呢？对，大家的出发点都是好的，希望把业务做大做强，进而打造出自己的产品，融资扩张......，越想越开心是不是！&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EwukgicNDWBs0xDHgwCrticJ8ib7H47jzG9zWV18bTwtvTJ3dLsiantmy4cg0eSrTgQ3iaZUh2j1D562IiaIfAwnDQOg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;理想都是好的，现实往往也是比较苍白的。结合自身的、周围朋友的一些经历，今天就聊聊小团队接外包后的困局在哪里？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;业务不稳定持续，做完一单，下一单还没有着落，没有持续的接单渠道，一旦业务中断，团队士气很受影响。突然业务量产生并行的时候，时间紧迫的影响正常生活，很容易害怕猝死。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;业务方难伺候，特别是业务对软件、互联网、信息化不懂的时候，沟通成本很高，有时还很难达到沟通效果，而小团队面对的更多的都是一些中小微客户，隐性成本是很高。需求变动大更是常有的事，如果控制不好，基本上会走向失控。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;议价能力弱，如果没有技术储备的话，定制开发的报价没有市场竞争力，特别是面对一些有完备产品形态的对手，基本上无还手之力。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;缺少产品支撑，初次与客户接洽时，没有实在的产品展现给客户看，客户没有直观的感受，也无法看到团队的实力，不太容易决策，站在他们的角度无可厚非，站在自己的角度也感觉底气不足。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;回款周期长，虽然有合同约定，往往受制于业务方，即便是正常追款，业务方会以各种小问题卡你，为了拿回款项，不得不多付出一些劳动才行。不公平的市场中进行交易，弱势一方很被动。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;成就感低，特别是利润空间薄的情况下，直接演变成体力劳动，长此以往会折腾的团队人心俱疲。人心散了，队伍就更不好带了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;工作时长不稳定，一旦处于这种状态，无所谓周末工作日，基本就是有时间就做，交付完才算完。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有困局，要生存，就要破局，如何破？各家有各家的难点，找到突破口即可，破局后就能走的更顺吗？也不一定，只能在变化中寻求稳定，才有一线生机。&lt;/p&gt;&lt;p&gt;数字化转型是趋势，对大团队讲更有利，当然小团队也可以想，但不能太当真，希望越大，失望也会更大。这两年低代码平台的流行（&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwMjE3MDIwMA==&amp;amp;mid=2247486461&amp;amp;idx=1&amp;amp;sn=04f6f0b600e0a9787f66392e96042fe8&amp;amp;chksm=96e381caa19408dca94a7e3d7cd14d303697a9f7c6b83a1e2f70964e4bfae04496a142f18755&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;低代码、无代码、零代码&lt;/span&gt;&lt;/a&gt;），更是将传统企业的数字化门槛拉的更低，一些没有竞争力的技术团队自然会在社会达尔文法则下优胜劣汰。&lt;/p&gt;&lt;p&gt;&lt;span&gt;『 周末开开脑洞，不妨再深入思考一个问题：如果现有工作的技能&lt;span&gt;丢掉&lt;/span&gt;后，还能找到新的生存破局点吗？』&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwMjE3MDIwMA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/EwukgicNDWBswFxJHbKiad1jnJCFQiaWQrRnSdQGnrHiaicTyc2FR4CId2GQk1TABicoY87kQIeoeI1z3GnwanWMg1YQ/0?wx_fmt=png&quot; data-nickname=&quot;MavenTalk&quot; data-alias=&quot;mavenTalk&quot; data-signature=&quot;传说中的大龄程序员！&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;予人玫瑰，手有余香&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3d0980026a2ee27ce1ef58596ff5dbed</guid>
<title>漫画：如何向外行解释，Bug 是如何产生的？</title>
<link>https://toutiao.io/k/9injk1e</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;68&quot; data-ratio=&quot;0.14140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu7dnTIX2vndsWLzsS6OFt51PFa27picyMIKGfDISZxqI8qTpMzuIHzmIpPlVPDJjJF5icqSwjd6kZqg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;-&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Bug就像每一个程序员的噩梦一样，像魂牵梦绕的魔咒，午夜梦回恨不得惊出一身冷汗……（这里采用了比喻和夸张的修辞手法，如果觉得也没有这么邪乎，大可不必当真。）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;至于&lt;span&gt;bug&lt;/span&gt;到底是如何产生的，如果你主观地认为是程序员业务能力不够，那大概率是你片面了&lt;span&gt;……&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUy4aoOo11AXM9KE7Mjq5MexB1P59HbPIPKYEG7ibJm02nfqgaFmNDvDoQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUy4Vbib6u2YEDHtXiaJcGe13MO9xuibibvYEGMmx06Q35iczOQ1FUn4INrx0g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUyXFIrQmcveOCJCYTI0jc0sORtianp8u2eVnlSlINprAGGeiciazk9RXiaPQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUyCia8KK4icxz9m7FQEx9HXPUvdObAThHlZHiazAvK0IiaNEXJFicR6xPa1CQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUy9K02NP0sLJ9KOa4fR85tBY6Z9ht64FgFYZY4qnLib1DYmyibVRhuMpyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUyNEqJtQXr0LT8icfzc51MANFSSEEzgweE9LjSE6mh9sSEy3Z6WnLPyaw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUyD4WT0sxAD0oNyA4icyYXNbQTVAKBY4L3KfKKrbQBCoXasxMDUia6ywVA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUyQHQrfejGqlCsC6ceFxNYdUiaMUIMPbXUDwlp6q8eRS1gYMKwB2xp6kg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUyTcxh2lg8icsSj5vGIpxur9BPjWy3dqLZmMOuOubxHLyfQYB1asOQQug/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUy9m6dWBYgv7APo0B5VE3jz4iaPDcabsgclqXXRY11h9gx9yfNR75Rjpg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUyzLjG85zhj5zq5lrRokjdqg46vOdu7Ppq1OxkFyPxIdibN6icdrobwxew/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUyeBBIJyv3Mz9xTZHmvvCWmo7Sz0ibP8DjBMjjlAspQp4EeWFtpHV0yXA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUyZibrIOO1RwricOvsJm9TTGrtXCu5vF8dS6cfibbzK0iah24veedlX1DH2w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUyXqqh4AzJA6W35JYEtPUuGc9ZDqJLsciawokY4sMWnbUEodFFCr5IYicQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9581320450885669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu73ASbIwQOtIY3EibYzCcjUycm5ONkZM9110zRicQeumQ54XRly70Hugs5o4DTicvM6y3NCk5IluqPFg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;-&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上漫画生动形象的还原了真实的工作场景，有些时候，程序员们也是身不由己……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开发过程中，新的需求产生、旧的需求更改等等，可能都会让整个开发程序陷入尴尬的境地，推倒重建势必延长交付时间、浪费时间、人力、物力；勉强坚持又会为日后的调整埋下一个又一个的隐患……无论是开发工程师本人还是后来的接盘侠，在调整参数修改代码的时候真可谓是“牵一发而动全身”，也应了那句“病来如山倒，病去如抽丝”……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总有人会很不负责任地对程序员说类似的话：“你这代码有bug啊！”“你这水平到底行不行啊？”“你到底懂不懂啊？！”…..程序员们从暴躁到冷静、从试图解释到沉默不语，因为我们知道，能说出这样的话，十有八九是个外行了……何必跟外行置气呢？！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;职场中，大家各有苦衷和不易，程序员们也是。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更多的时候，大家都只是想要个相互理解，不是么？！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;————&lt;em&gt; END &lt;/em&gt;————&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;转载声明&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本文属公众号：了不起的程序员原创作品&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;授权转载请联系客服微信（great0445）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;承蒙厚爱，请多关照&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;创      意 ｜ 哒      柏&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;编      辑 ｜ 小      小&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;插画设计｜&lt;/span&gt;&lt;span&gt; 佳      祺&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文创意来自《Bug是如何产生的？》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（https://www.zhihu.com/question/365343579/answer/967299388）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;256&quot; data-ratio=&quot;0.4421875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu4vJHnl2qFx2gLsRLceT0mNt92o0dpzhIt0bagXJwCQG1MXRW1fwZqR2nBPKtcLsjiapkf66pk3oog/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;记得点「&lt;strong&gt;赞&lt;/strong&gt;」和「&lt;strong&gt;在看&lt;/strong&gt;」↓&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;爱你们&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7c6ab789f82e3b61e59172e544f9556b</guid>
<title>Golang 中的插件开发</title>
<link>https://toutiao.io/k/0z4t2y0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;  插件化开发提供了很多便利，可动态扩展程序的相关功能，如Windows中的DLL、Linux中的So文件、还有IDEA中的插件，应用范围不可谓不广；&lt;br/&gt;  在Golang中提供了自己的插件机制，可使用其进行插件化开发；在Golang的plugin包中提供了加载插件、调用插件中函数的相关方法；&lt;/p&gt;&lt;p&gt;Golang中的插件机制使用非常简单；就只有这么三步：&lt;br/&gt;  1、编写插件库相关代码，生成so文件；&lt;br/&gt;  2、加载插件so文件；&lt;br/&gt;  3、调用相关的函数或字段；&lt;br/&gt;下面用一个简单例子来看看插件的基本使用：&lt;/p&gt;&lt;h3&gt;一、定义插件&lt;/h3&gt;&lt;p&gt;  这个插件非常简单，定义一个公开的字段V，一个公开的函数F。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; “fmt”&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; V &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;F&lt;/span&gt;(){&lt;br/&gt;  fmt.Printf(“Hello Plugin: %d\n”,V)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;二、生成插件so文件&lt;/h3&gt;&lt;p&gt;  生成so文件也和之前编译普通的go文件一样只是多了个参数；&lt;br/&gt;  go build -buildmode=plugin demo.go&lt;br/&gt;  执行上诉命令后将生成一个名为：demo.so的插件库文件；&lt;/p&gt;&lt;h3&gt;三、使用插件&lt;/h3&gt;&lt;p&gt;  有了插件现在到了使用插件，使用插件也没啥难度，具体代码如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;p,err := plugin.Open(“demo.so”)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err!=&lt;span&gt;nil&lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt;}&lt;br/&gt;v,err := p.Lookup(“V”)  &lt;span&gt;//调用插件中的V字段&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err!=&lt;span&gt;nil&lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt;}&lt;br/&gt;f,err :=p.Lookup(“F”)  &lt;span&gt;//调用插件中的F函数&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err!=&lt;span&gt;nil&lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt;}&lt;br/&gt;*v.(*&lt;span&gt;int&lt;/span&gt;) = 100         &lt;br/&gt;f.(fun())()        &lt;span&gt;//类型断言，f为一个无参无返回值的函数fun()，然后调用函数f&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;插件调用的输出结果为：Hello Plugin: 100  &lt;/p&gt;&lt;h2&gt;插件使用：&lt;/h2&gt;&lt;p&gt;插件与主程序使用的接口必须是同一个&lt;br/&gt;  通常使用流程：&lt;br/&gt;  1、定义依赖的包文件，包含相关的接口等；&lt;br/&gt;  2、插件实现上述所定义的接口&lt;br/&gt;  3、主程序应用依赖包，调用插件实现；&lt;/p&gt;&lt;h3&gt;一、包接口&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; lib&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Calculator &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt;  Add(&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;) &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;  Sub(&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;) &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;二、插件实现&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;demo/lib&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Call &lt;span&gt;struct&lt;/span&gt; {}&lt;br/&gt;&lt;span&gt;func&lt;/span&gt; (c *Call) &lt;span&gt;Sub&lt;/span&gt;(a, b &lt;span&gt;int&lt;/span&gt;) &lt;span&gt;int&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; a - b&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;func&lt;/span&gt; (c *Call) &lt;span&gt;Add&lt;/span&gt;(a, b &lt;span&gt;int&lt;/span&gt;) &lt;span&gt;int&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; a + b&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;NewCal&lt;/span&gt;() &lt;span&gt;lib&lt;/span&gt;.&lt;span&gt;Calculator&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &amp;amp;Call{}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;三、主程序引用包，调用插件的相关实现&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;&quot;demo/lib&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;plugin&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;p, err := plugin.Open(&lt;span&gt;&quot;plugin/operation_plugin.so&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt;}&lt;br/&gt;cal,err:= p.Lookup(&lt;span&gt;&quot;NewCal&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt;}&lt;br/&gt;c:= cal.(&lt;span&gt;func&lt;/span&gt; ()&lt;span&gt;lib&lt;/span&gt;.&lt;span&gt;Calculator&lt;/span&gt;)()&lt;br/&gt;fmt.Println(c.Add(3,5))&lt;br/&gt;fmt.Println(c.Sub(20,10))&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;br/&gt;  编译插件所使用的参数必须与编译主程序所使用参数一直，否则将可能出现如下异常信息：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;panic: plugin.Open(&quot;plugin/operation_plugin&quot;): plugin was built &lt;span&gt;with&lt;/span&gt; a different &lt;span&gt;version&lt;/span&gt; &lt;span&gt;of&lt;/span&gt; &lt;span&gt;package&lt;/span&gt; runtime/internal/&lt;span&gt;sys&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  如在编译插件库so文件时使用了-gcflags all=-N -l 参数，禁止优化、禁止内联，则主程序调用插件时也必须加上；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5e4e465606afcdead20f35bb14d71366</guid>
<title>Spring Boot 启动时执行任务</title>
<link>https://toutiao.io/k/kzzmbxw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwthXpSzBfe4NgF8CU0CMg0v1dREW9DeZCRavNjtibprH0ibicgLWmLcPb7PYickRYAdT7pDYpYYs49HmeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        在 SpringBoot 项目中，main 方法调用了 SpringApplication.run 方法，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;在 SpringApplication.run 方法执行之前还可以执行一些启动任务。具体的方式是实现 ApplicationRunner 或者 CommandLineRunner 这两个接口&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;ApplicationRunner 和 CommandLineRunner 的区别&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;strong&gt;ApplicationRunner 和 CommandLineRunner 两个接口都有只有一个方法 —— run 方法。两个 run 方法的参数不同，ApplicationRunner 接口的 run 方法的参数是 ApplicationArguments 类型的，CommandLineRunner 接口的 run 方法的参数是 String 数组类型的。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;strong&gt;ApplicationRunner 接口的 run 方法比 CommandLineRunner 接口的 run 方法要先执行。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;具体实现&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        创建一个 SpringBoot 项目，然后再分别创建 Test1 和 Test2 ，然后让它们全部实现 ApplicationRunner 和 CommandLineRunner 两个接口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        Test1 的代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class Test1 implements CommandLineRunner, ApplicationRunner {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void run(String... args) throws Exception {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        log.info(&quot;Test1:CommandLineRunner:run &quot; + args[0]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void run(ApplicationArguments args) throws Exception {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        log.info(&quot;Test1:ApplicationRunner:run &quot; + args.getSourceArgs()[0]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        Test2 的代码也与此类似，代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class Test2 implements CommandLineRunner, ApplicationRunner {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void run(String... args) throws Exception {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        log.info(&quot;Test2:CommandLineRunner:run &quot; + args[1]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void run(ApplicationArguments args) throws Exception {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        log.info(&quot;Test2:ApplicationRunner:run &quot; + args.getSourceArgs()[1]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        在 DemoApplication 上也完成同样的代码。然后我们打包，通过命令行启动该 jar 包。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;java -jar demo-0.0.1-SNAPSHOT.jar abc xyz&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        观察输出结果：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.coderup&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.DemoApplication&lt;/span&gt;          : &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;DemoApplication&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:ApplicationRunner&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;xyz&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.coderup&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.DemoApplication&lt;/span&gt;          : &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;DemoApplication&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:CommandLineRunner&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;abc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.coderup&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Test2&lt;/span&gt;                    : &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Test2&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:ApplicationRunner&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;xyz&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.coderup&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Test2&lt;/span&gt;                    : &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Test2&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:CommandLineRunner&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;xyz&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.coderup&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Test1&lt;/span&gt;                    : &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Test1&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:ApplicationRunner&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;abc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.coderup&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Test1&lt;/span&gt;                    : &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Test1&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:CommandLineRunner&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;abc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        输出的顺序是，DemoApplication、Test2 和 Test1。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;调整顺序&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;strong&gt;有些时候我们需要按照我们指定的顺序执行每个类中的 ApplicationRunner 和 CommandLIneRunner 中的 run 方法。想要按照我们的顺序来执行，可以使用 @Order 注解，或者实现 Ordered 接口。&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;两种方法我们都使用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        给 Test1 的类上增加 @Order 注解，代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Order(value=1)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class Test1 implements CommandLineRunner, ApplicationRunner {&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        给 DemoApplication 也增加 @Order 注解，代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Order&lt;/span&gt;(value=&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DemoApplication&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CommandLineRunner&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;ApplicationRunner&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;       让 Test2 类实现 Ordered 接口，代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Test2&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CommandLineRunner&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;ApplicationRunner&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;Ordered&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getOrder&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        重新打包执行，运行结果如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.coderup&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Test1&lt;/span&gt;                    : &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Test1&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:ApplicationRunner&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;abc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.coderup&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Test1&lt;/span&gt;                    : &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Test1&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:CommandLineRunner&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;abc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.coderup&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Test2&lt;/span&gt;                    : &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Test2&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:ApplicationRunner&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;xyz&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.coderup&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Test2&lt;/span&gt;                    : &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Test2&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:CommandLineRunner&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;xyz&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.coderup&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.DemoApplication&lt;/span&gt;          : &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;DemoApplication&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:ApplicationRunner&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;xyz&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.coderup&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.DemoApplication&lt;/span&gt;          : &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;DemoApplication&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:CommandLineRunner&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;abc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;       执行顺序&lt;/span&gt;&lt;span&gt;按照&lt;/span&gt;&lt;span&gt;我们指定的顺序进行了输出，&lt;/span&gt;&lt;span&gt;分别是 Test1、Test2 和 DemoApplication &lt;/span&gt;&lt;span&gt;这样的顺序。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        这是 Spring Boot 的一个小小知识点，希望对大家有所帮助。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwth5nBzNr9kZshQ25yhLz08JHWsQdz8yVn3MVh22hia7NFoPyNJz4ZI7XUnMa9xM50TJRqPkWf7BRibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>