<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>5cd8619e5363d8fdbf992c09adc158f2</guid>
<title>Go 工程化（八）：单元测试</title>
<link>https://toutiao.io/k/svx31y3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;markdown-body&quot;&gt;&lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;/&gt;序&lt;/h2&gt;&lt;p&gt;本系列为 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://u.geekbang.org/subject/go?utm_source=lailin.xyz&amp;amp;utm_medium=lailin.xyz&quot;&gt;Go 进阶训练营&lt;/a&gt; 笔记，预计 2021Q2 完成更新，访问 &lt;a href=&quot;https://lailin.xyz/categories/Go%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/&quot;&gt;博客: Go 进阶训练营&lt;/a&gt; 即可查看当前更新进度，部分文章篇幅较长，使用 PC 大屏浏览体验更佳。&lt;strong&gt;3 月进度: 05/15&lt;/strong&gt; 3 月开始会尝试爆更模式，争取做到两天更新一篇文章，如果感兴趣可以拉到文章最下方获取关注方式。&lt;/p&gt;&lt;p&gt;从我们开始开发以来，应该很多人都提到过测试的重要性，而在所有的测试类型当中，以单元测试为代表的单元测试无疑是成本最小，性价比最高的一种，而且有的公司为了保证质量会要求单元测试覆盖率的指标（包括我们）&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://mohuishou-blog-sz.oss-cn-shenzhen.aliyuncs.com/image/1614514088908-363f1894-098c-47e5-8289-0e223adda8a6.png&quot; srcset=&quot;/img/loading.gif&quot; alt=&quot;image.png&quot;/&gt;&lt;br/&gt;所以希望看完这篇文章，希望大家可以很快的在我们之前提出的项目结构上进行单元测试的编写，可以做到又快又好。&lt;br/&gt;本文分为两部分，前半段会简单介绍一下 go 的单元测试怎么写，不会有很复杂的技巧，如果已经比较了解可以跳过，后半段会介绍一下我们在项目当中该如何写 “单元测试”&lt;/p&gt;&lt;h2 id=&quot;单元测试简明教程&quot;&gt;&lt;a href=&quot;#单元测试简明教程&quot; class=&quot;headerlink&quot; title=&quot;单元测试简明教程&quot;/&gt;单元测试简明教程&lt;/h2&gt;&lt;h3 id=&quot;go-test&quot;&gt;&lt;a href=&quot;#go-test&quot; class=&quot;headerlink&quot; title=&quot;go test&quot;/&gt;go test&lt;/h3&gt;&lt;h4 id=&quot;一个简单的-🌰&quot;&gt;&lt;a href=&quot;#一个简单的-🌰&quot; class=&quot;headerlink&quot; title=&quot;一个简单的 🌰&quot;/&gt;一个简单的 🌰&lt;/h4&gt;&lt;p&gt;项目结构&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;.&lt;br/&gt;├── max.go&lt;br/&gt;└── max_test.go&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;max.go&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; max&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Int get the max&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(a, b &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;gt; b {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;max_test.go&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; max&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TestInt&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; got := Int(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;); got != &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; {&lt;br/&gt;t.Errorf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;exp: %d, got: %d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, got)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行结果&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;▶ go &lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;&lt;br/&gt;PASS&lt;br/&gt;ok      code/max        0.006s&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;单元测试文件说明&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;文件名必须是&lt;code&gt;_test.go&lt;/code&gt;结尾的，这样在执行&lt;code&gt;go test&lt;/code&gt;的时候才会执行到相应的代码。&lt;/li&gt;&lt;li&gt;你必须&lt;code&gt;import testing&lt;/code&gt;这个包。&lt;/li&gt;&lt;li&gt;所有的测试用例函数必须是&lt;code&gt;Test&lt;/code&gt;开头。&lt;/li&gt;&lt;li&gt;测试用例会按照源代码中写的顺序依次执行。&lt;/li&gt;&lt;li&gt;测试函数&lt;code&gt;TestX()&lt;/code&gt;的参数是&lt;code&gt;testing.T&lt;/code&gt;，我们可以使用该类型来记录错误或者是测试状态。&lt;/li&gt;&lt;li&gt;测试格式：&lt;code&gt;func TestXxx (t *testing.T)&lt;/code&gt;,&lt;code&gt;Xxx&lt;/code&gt;部分可以为任意的字母数字的组合，但是首字母不能是小写字母[a-z]，例如&lt;code&gt;Testintdiv&lt;/code&gt;是错误的函数名。&lt;/li&gt;&lt;li&gt;函数中通过调用&lt;code&gt;testing.T&lt;/code&gt;的&lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Errorf&lt;/code&gt;, &lt;code&gt;FailNow&lt;/code&gt;, &lt;code&gt;Fatal&lt;/code&gt;, &lt;code&gt;FatalIf&lt;/code&gt;方法，说明测试不通过，调用&lt;code&gt;Log&lt;/code&gt;方法用来记录测试的信息。&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;表驱动测试&quot;&gt;&lt;a href=&quot;#表驱动测试&quot; class=&quot;headerlink&quot; title=&quot;表驱动测试&quot;/&gt;表驱动测试&lt;/h4&gt;&lt;p&gt;在实际编写单元测试的时候，我们往往需要执行多个测试用例，期望达到更全面的覆盖效果，这时候就需要使用表驱动测试了。&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TestInt_Table&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;tests := []&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;name &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&lt;br/&gt;a    &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;b    &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;want &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;}{&lt;br/&gt;{name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&amp;gt;b&quot;&lt;/span&gt;, a: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, b: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, want: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;},&lt;br/&gt;{name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&amp;lt;b&quot;&lt;/span&gt;, a: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, b: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, want: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _, tt := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; tests {&lt;br/&gt;t.Run(tt.name, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; got := Int(tt.a, tt.b); got != tt.want {&lt;br/&gt;t.Errorf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;exp: %d, got: %d&quot;&lt;/span&gt;, tt.want, got)&lt;br/&gt;}&lt;br/&gt;})&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行结果&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;▶ &lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; test -v&lt;br/&gt;=== RUN   TestInt&lt;br/&gt;--- PASS: TestInt (&lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;s)&lt;br/&gt;=== RUN   TestInt_Table&lt;br/&gt;=== RUN   TestInt_Table/a&amp;gt;b&lt;br/&gt;=== RUN   TestInt_Table/a&amp;lt;b&lt;br/&gt;--- PASS: TestInt_Table (&lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;s)&lt;br/&gt;    --- PASS: TestInt_Table/a&amp;gt;b (&lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;s)&lt;br/&gt;    --- PASS: TestInt_Table/a&amp;lt;b (&lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt;s)&lt;br/&gt;PASS&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;随机执行&lt;/strong&gt;&lt;br/&gt;上面的例子是按照顺序执行的，单元测试大多随机执行更能够发现一些没有注意到的错误, 如下面的这个例子，利用 &lt;code&gt;map&lt;/code&gt; 的特性我们很容易将上面这个例子改造为随机执行的单元测试&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TestInt_RandTable&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;tests := &lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;a    &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;b    &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;want &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;}{&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&amp;gt;b&quot;&lt;/span&gt;: {a: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, b: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, want: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;},&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&amp;lt;b&quot;&lt;/span&gt;: {a: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, b: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, want: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; name, tt := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; tests {&lt;br/&gt;t.Run(name, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; got := Int(tt.a, tt.b); got != tt.want {&lt;br/&gt;t.Errorf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;exp: %d, got: %d&quot;&lt;/span&gt;, tt.want, got)&lt;br/&gt;}&lt;br/&gt;})&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;testfiy&quot;&gt;&lt;a href=&quot;#testfiy&quot; class=&quot;headerlink&quot; title=&quot;testfiy&quot;/&gt;testfiy&lt;/h3&gt;&lt;p&gt;标准库为我们提供了一个还不错的测试框架，但是没有提供断言的功能，&lt;code&gt;testify&lt;/code&gt; 包含了 断言、mock、suite 三个功能，mock 推荐使用官方的 &lt;code&gt;gomock&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;testify/assert&lt;/code&gt; 提供了非常多的方法，这里为大家介绍最为常用的一些，所有的方法可以访问 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://godoc.org/github.com/stretchr/testify/assert&quot;&gt;https://godoc.org/github.com/stretchr/testify/assert&lt;/a&gt; 查看&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 判断两个值是否相等&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t TestingT, expected, actual &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{}, msgAndArgs ...&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 判断两个值不相等&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;NotEqual&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t TestingT, expected, actual &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{}, msgAndArgs ...&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 测试失败，测试中断&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;FailNow&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t TestingT, failureMessage &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, msgAndArgs ...&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 判断值是否为nil，常用于 error 的判断&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t TestingT, object &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{}, msgAndArgs ...&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 判断值是否不为nil，常用于 error 的判断&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;NotNil&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t TestingT, object &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{}, msgAndArgs ...&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我们可以发现，断言方法都会返回一个 &lt;code&gt;bool&lt;/code&gt; 值，我们可以通过这个返回值判断断言成功/失败，从而做一些处理&lt;/p&gt;&lt;p&gt;一个例子&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TestInt_assert_fail&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;got := Int(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;br/&gt;assert.Equal(t, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, got)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行结果, 可以看到输出十分的清晰&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;=== RUN   TestInt_assert_fail&lt;br/&gt;--- FAIL: TestInt_assert_fail (0.00s)&lt;br/&gt;    max_test.go:62:&lt;br/&gt;                Error Trace:    max_test.go:62&lt;br/&gt;                Error:          Not equal:&lt;br/&gt;                                expected: 1&lt;br/&gt;                                actual  : 2&lt;br/&gt;                Test:           TestInt_assert_fail&lt;br/&gt;FAIL&lt;br/&gt;FAIL    code/max        0.017s&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;gomock&quot;&gt;&lt;a href=&quot;#gomock&quot; class=&quot;headerlink&quot; title=&quot;gomock&quot;/&gt;gomock&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;/&gt;安装&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;注意: 请在非项目文件夹执行下面这条命令&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;GO111MODULE=on GOPROXY=https://goproxy.cn go get github.com/golang/mock/mockgen&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;mockgen&lt;/code&gt; 是一个代码生成工具，可以对包或者源代码文件生成指定&lt;strong&gt;接口&lt;/strong&gt;的 Mock 代码&lt;/p&gt;&lt;h4 id=&quot;生成-Mock-代码&quot;&gt;&lt;a href=&quot;#生成-Mock-代码&quot; class=&quot;headerlink&quot; title=&quot;生成 Mock 代码&quot;/&gt;生成 Mock 代码&lt;/h4&gt;&lt;p&gt;指定源文件&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mockgen -&lt;span class=&quot;hljs-built_in&quot;&gt;source&lt;/span&gt;=./.go  -destination=./a_mock.go  INeedMockInterface&lt;br/&gt;&lt;br/&gt;mockgen -&lt;span class=&quot;hljs-built_in&quot;&gt;source&lt;/span&gt;=源文件路径  -destination=写入文件的路径(没有这个参数输出到终端) 需要mock的接口名(多个接口逗号间隔)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;指定包路径&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mockgen  -destination=写入文件的路径(没有这个参数输出到终端) 包路径 需要mock的接口名(多个接口逗号间隔)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&quot;一个简单的-gomock-🌰&quot;&gt;&lt;a href=&quot;#一个简单的-gomock-🌰&quot; class=&quot;headerlink&quot; title=&quot;一个简单的 gomock 🌰&quot;/&gt;一个简单的 gomock 🌰&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// UserAge 获取用户年龄&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; UserAge &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; {&lt;br/&gt;GetAge(user &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Simple 一个简单的例子&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Simple&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(user &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, age UserAge)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fmt.Sprintf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s age is: %d&quot;&lt;/span&gt;, user, age.GetAge(user))&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TestSimple&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 新建一个mock对象&lt;/span&gt;&lt;br/&gt;ctrl := gomock.NewController(t)&lt;br/&gt;age := mock_mock.NewMockUserAge(ctrl)&lt;br/&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// mock 返回值&lt;/span&gt;&lt;br/&gt;age.EXPECT().GetAge(gomock.Any()).Return(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).AnyTimes()&lt;br/&gt;&lt;br/&gt;assert.Equal(t, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a age is: 1&quot;&lt;/span&gt;, Simple(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;, age))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&quot;项目-“单元测试”&quot;&gt;&lt;a href=&quot;#项目-“单元测试”&quot; class=&quot;headerlink&quot; title=&quot;项目 “单元测试”&quot;/&gt;项目 “单元测试”&lt;/h2&gt;&lt;p&gt;接下来就是本文的重点，在我们之前提到的 &lt;a href=&quot;https://lailin.xyz/post/go-training-week4-project-layout.html&quot;&gt;Go 工程化(二) 项目目录结构&lt;/a&gt; 当中，如何编写单元测试。虽然这里说的是单元测试，其实后面讲的其实很多不是单元测试，像 repo 层，如果涉及到数据库后面就会讲到我们一般会启动一个真实的数据库来测试，这其实已经算是集成测试了，但是它仍然是轻量级的。&lt;/p&gt;&lt;h3 id=&quot;service&quot;&gt;&lt;a href=&quot;#service&quot; class=&quot;headerlink&quot; title=&quot;service&quot;/&gt;service&lt;/h3&gt;&lt;p&gt;这一层主要处理的 dto 和 do 数据之间的相互转换，本身是不含什么业务逻辑的，目前我们使用的是 http，所以在这一层的测试一般会使用 httptest 来模拟实际请求的测试。然后在对 usecase 层的调用上，我们使用 gomock mock 掉相关的接口，简化我们的测试。如果你不想写的那么麻烦，也可以不用启用 httptest 来测试，直接测试 service 层的代码也是可以的，不过这样的话，service 层的代码测试的内容就没有多少了，也就是看转换数据的时候符不符合预期。&lt;/p&gt;&lt;p&gt;这一层主要完成的测试是&lt;/p&gt;&lt;ul&gt;&lt;li&gt;参数的校验是否符合预期&lt;/li&gt;&lt;li&gt;数据的转换是否符合预期，如果你像我一样偷懒使用了类似 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://pkg.go.dev/github.com/jinzhu/copier&quot;&gt;copier&lt;/a&gt; 的工具的话一定要写这部分的单元测试，不然还是很容易出错，容易字段名不一致导致 copier 的工作不正常&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当然如果时间有限的话，这一层的测试也不是必须的，因为接入层相对来说变化也比较快一点，这是说写了单元测试，基本上在测试阶段很少会出现由于参数的问题提交过来的 bug&lt;/p&gt;&lt;p&gt;同样我们直接看一个例子, 首先是 service 层的代码，可以看到逻辑很简单，就是调用了一下，usecase 层的接口&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _ v1.BlogServiceHTTPServer = &amp;amp;PostService{}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// PostService PostService&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; PostService &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;Usecase domain.IPostUsecase&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// CreateArticle 创建文章&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(p *PostService)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CreateArticle&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ctx context.Context, req *v1.Article)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(*v1.Article, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;article, err := p.Usecase.CreateArticle(ctx, domain.Article{&lt;br/&gt;Title:    req.Title,&lt;br/&gt;Content:  req.Content,&lt;br/&gt;AuthorID: req.AuthorId,&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;, err&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resp v1.Article&lt;br/&gt;err = copier.Copy(&amp;amp;resp, &amp;amp;article)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;resp, err&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;再看看单元测试&lt;br/&gt;首先是初始化，之前我们讲到初始化的时候我们一般在 cmd 当中使用 wire 自动生成，但是在单元测试中 wire 并不好用，并且由于单元测试的时候我们的依赖项其实没有真实的依赖项那么复杂我们只需要关心当前这一层的依赖即可，所以一般在单元测试的时候我都是手写初始化&lt;br/&gt;一般会向下面这样，使用一个 struct 包装起来，因为在后面像是 mock 的 usecase 还需要调用&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; testPostService &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;post    *PostService&lt;br/&gt;usecase *mock_domain.MockIPostUsecase&lt;br/&gt;handler *gin.Engine&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;initPostService&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t *testing.T)&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;testPostService&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;ctrl := gomock.NewController(t)&lt;br/&gt;usecase := mock_domain.NewMockIPostUsecase(ctrl)&lt;br/&gt;service := &amp;amp;PostService{Usecase: usecase}&lt;br/&gt;&lt;br/&gt;handler := gin.New()&lt;br/&gt;v1.RegisterBlogServiceHTTPServer(handler, service)&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;testPostService{&lt;br/&gt;post:    service,&lt;br/&gt;usecase: usecase,&lt;br/&gt;handler: handler,&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;实际的测试，这一块主要是为了展示一个完整的单元测试所以贴的代码稍微长了一些，后面的两层具体的单元测试代码都大同小异，我就不再贴了，主要的思路就是把依赖的接口都用 gomock mock 掉，这样实际写单元测试代码的时候就会比较简单。&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TestPostService_CreateArticle&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;s := initPostService(t)&lt;br/&gt;s.usecase.EXPECT().&lt;br/&gt;CreateArticle(gomock.Any(), gomock.Eq(domain.Article{Title: &lt;span class=&quot;hljs-string&quot;&gt;&quot;err&quot;&lt;/span&gt;, AuthorID: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;})).&lt;br/&gt;Return(domain.Article{}, fmt.Errorf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;err&quot;&lt;/span&gt;))&lt;br/&gt;s.usecase.EXPECT().&lt;br/&gt;CreateArticle(gomock.Any(), gomock.Eq(domain.Article{Title: &lt;span class=&quot;hljs-string&quot;&gt;&quot;success&quot;&lt;/span&gt;, AuthorID: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;})).&lt;br/&gt;Return(domain.Article{Title: &lt;span class=&quot;hljs-string&quot;&gt;&quot;success&quot;&lt;/span&gt;}, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;tests := []&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;name       &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&lt;br/&gt;params     *v1.Article&lt;br/&gt;want       *v1.Article&lt;br/&gt;wantStatus &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;wantCode   &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;wantErr    &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&lt;br/&gt;}{&lt;br/&gt;{&lt;br/&gt;name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;参数错误 author_id 必须&quot;&lt;/span&gt;,&lt;br/&gt;params: &amp;amp;v1.Article{&lt;br/&gt;Title:    &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;br/&gt;Content:  &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;,&lt;br/&gt;AuthorId: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;br/&gt;},&lt;br/&gt;want:       &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;,&lt;br/&gt;wantStatus: &lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;,&lt;br/&gt;wantCode:   &lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;,&lt;br/&gt;},&lt;br/&gt;{&lt;br/&gt;name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;失败&quot;&lt;/span&gt;,&lt;br/&gt;params: &amp;amp;v1.Article{&lt;br/&gt;Title:    &lt;span class=&quot;hljs-string&quot;&gt;&quot;err&quot;&lt;/span&gt;,&lt;br/&gt;AuthorId: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;br/&gt;},&lt;br/&gt;want:       &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;,&lt;br/&gt;wantStatus: &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;,&lt;br/&gt;wantCode:   &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;,&lt;br/&gt;},&lt;br/&gt;{&lt;br/&gt;name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;成功&quot;&lt;/span&gt;,&lt;br/&gt;params: &amp;amp;v1.Article{&lt;br/&gt;Title:    &lt;span class=&quot;hljs-string&quot;&gt;&quot;success&quot;&lt;/span&gt;,&lt;br/&gt;AuthorId: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;br/&gt;},&lt;br/&gt;want: &amp;amp;v1.Article{&lt;br/&gt;Title: &lt;span class=&quot;hljs-string&quot;&gt;&quot;success&quot;&lt;/span&gt;,&lt;br/&gt;},&lt;br/&gt;wantStatus: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;,&lt;br/&gt;wantCode:   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;br/&gt;},&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _, tt := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; tests {&lt;br/&gt;t.Run(tt.name, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 下面这些一般都会封装在一起，这里是为了演示&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 初始化请求&lt;/span&gt;&lt;br/&gt;b, err := json.Marshal(tt.params)&lt;br/&gt;require.NoError(t, err)&lt;br/&gt;uri := fmt.Sprintf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/v1/author/%d/articles&quot;&lt;/span&gt;, tt.params.AuthorId)&lt;br/&gt;req := httptest.NewRequest(http.MethodPost, uri, bytes.NewReader(b))&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 初始化响应&lt;/span&gt;&lt;br/&gt;w := httptest.NewRecorder()&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 调用相应的handler接口&lt;/span&gt;&lt;br/&gt;s.handler.ServeHTTP(w, req)&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 提取响应&lt;/span&gt;&lt;br/&gt;resp := w.Result()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; resp.Body.Close()&lt;br/&gt;require.Equal(t, tt.wantStatus, resp.StatusCode)&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 读取响应body&lt;/span&gt;&lt;br/&gt;respBody, _ := ioutil.ReadAll(resp.Body)&lt;br/&gt;r := &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;Code &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;         &lt;span class=&quot;hljs-string&quot;&gt;`json:&quot;code&quot;`&lt;/span&gt;&lt;br/&gt;Msg  &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;      &lt;span class=&quot;hljs-string&quot;&gt;`json:&quot;msg&quot;`&lt;/span&gt;&lt;br/&gt;Data *v1.Article &lt;span class=&quot;hljs-string&quot;&gt;`json:&quot;data&quot;`&lt;/span&gt;&lt;br/&gt;}{}&lt;br/&gt;require.NoError(t, json.Unmarshal(respBody, &amp;amp;r))&lt;br/&gt;&lt;br/&gt;assert.Equal(t, tt.wantCode, r.Code)&lt;br/&gt;assert.Equal(t, tt.want, r.Data)&lt;br/&gt;})&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;usecase&quot;&gt;&lt;a href=&quot;#usecase&quot; class=&quot;headerlink&quot; title=&quot;usecase&quot;/&gt;usecase&lt;/h3&gt;&lt;p&gt;usecase 是主要的业务逻辑，所以一般写单元测试的时候都应该先写这一层的单远测试，而且这一层我们没有任何依赖，只需要把 repo 层的接口直接 mock 掉就可以了，是非常纯净的一层，其实也就这一层的单元测试才是真正的单元测试&lt;/p&gt;&lt;h3 id=&quot;repo&quot;&gt;&lt;a href=&quot;#repo&quot; class=&quot;headerlink&quot; title=&quot;repo&quot;/&gt;repo&lt;/h3&gt;&lt;p&gt;repo 层我们一般依赖 mysql 或者是 redis 等数据库，在测试的时候我们可以直接启动一个全新的数据库用于测试即可。&lt;/p&gt;&lt;h4 id=&quot;本地&quot;&gt;&lt;a href=&quot;#本地&quot; class=&quot;headerlink&quot; title=&quot;本地&quot;/&gt;本地&lt;/h4&gt;&lt;p&gt;直接使用 docker run 对应的数据库就可以了&lt;/p&gt;&lt;h4 id=&quot;ci-cd&quot;&gt;&lt;a href=&quot;#ci-cd&quot; class=&quot;headerlink&quot; title=&quot;ci/cd&quot;/&gt;ci/cd&lt;/h4&gt;&lt;p&gt;我们的 ci cd 是使用的 gitlab，gitlab 有一个比较好用的功能是指定 service，只需要指定对应的数据库镜像我们就可以在测试容器启动的时候自动启动对应的测试数据库容器，并且每一次都是全新的空数据库。我们只需要每次跑单元测试的时候先跑一下数据库的 migration 就可以了。&lt;/p&gt;&lt;p&gt;下面给出一个配置示例&lt;/p&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;test:&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;stage:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;test&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;image:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;golang:1.15-alpine-test&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;services:&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;redis:v4.0.11&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;postgres:10-alpine&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;docker:19-dind&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;variables:&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;POSTGRES_DB:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;test_db&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;POSTGRES_USER:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;root&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;POSTGRES_PASSWORD:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1234567&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;GOPROXY:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;这里设置 proxy 地址&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;CGO_ENABLED:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;script:&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;download&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;db/*.go&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;artifacts&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;gotestsum&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;-coverprofile=./artifacts/coverage.out&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;-coverpkg=./...&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;./...&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;# 单元测试统计去除一些不需要测试的代码&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;|&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;hljs-string&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;./artifacts/coverage.out&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;\&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;hljs-string&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/mock/&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/db/&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;hljs-string&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;pb.go&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;./artifacts/coverage.out2&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;tool&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;-func=./artifacts/coverage.out2&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# 捕获单元测试覆盖率在 gitlab job 上显示&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;coverage:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#x27;/total:\s+.*\s+\d+\.\d+%/&#x27;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;artifacts:&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;paths:&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;artifacts/coverage.out&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;/&gt;总结&lt;/h2&gt;&lt;p&gt;单元测试的介绍就到这里了，这篇文章从单元测试的基本写法，再到我们在项目当中如何写单元测试都简单介绍了一下，希望你看了这篇文章能有所收获。&lt;/p&gt;&lt;p&gt;同时我们 Go 工程化 这一章节的内容也接近尾声了，整理的材料也挺多的，下一篇就是这一节的最后一篇文章，讲一讲我在真实改造一个项目的时候遇到的一些问题和解决方案。&lt;/p&gt;&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;/&gt;参考文献&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://u.geekbang.org/subject/go?utm_source=lailin.xyz&amp;amp;utm_medium=lailin.xyz&quot;&gt;Go 进阶训练营-极客时间&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/stretchr/testify&quot;&gt;https://github.com/stretchr/testify&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/golang/mock&quot;&gt;https://github.com/golang/mock&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://pkg.go.dev/github.com/jinzhu/copier&quot;&gt;https://pkg.go.dev/github.com/jinzhu/copier&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ac9c534b493b6468dfaaf21385aecdea</guid>
<title>详解低延时高音质：回声消除与降噪篇</title>
<link>https://toutiao.io/k/axnb7n6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-id=&quot;97593&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2173913043478262&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQib3Z6zUfLX24YsAJCaD2Q7X6iagDDUpPTicc2iczkXEpoxumkGbVvuVjLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;23&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p hm_fix=&quot;328:399&quot;&gt;在实时音频互动场景中，除了我们上一篇讲到的编解码会影响音质与体验，在端上，降噪、回声消除、自动增益模块同样起着重要作用。在本篇内容中我们将主要围绕回声消除和降噪模块，讲讲实时互动场景下的技术挑战，以及我们的解决思路与实践。&lt;span&gt;「文末有个小彩蛋:) 」&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101598&quot;&gt;&lt;section hm_fix=&quot;410:202&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9774436090225563&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQT7jYhsFQCN5QPLBBFCFE8A1L2w3apkfxYYBuyvhawVPTGHKAVZpv0Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;266&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;回声消除的三大算法模块优化&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在语音通信系统中，回声消除（Echo Cancellation）一直扮演着核心算法的角色。一般来说，回声消除的效果受诸多因素的影响，包括：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;声网回声消除算法在设计之初，就将算法性能、鲁棒性和普适性作为最终的优化目标，这一点对于一个优秀的音视频 SDK 来说至关重要。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，回声是怎么产生的？简单来讲，就是你的声音从对方的扬声器发出，这个声音又被他的麦克风给收录了进去，这个被麦克风收录的声音又传回到你这一端，你就听到了回声。为了消除回声，我们就要设计一个算法将这个声音信号从麦克风信号中去除掉。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p line=&quot;jpdn&quot;&gt;&lt;img data-ratio=&quot;0.5214477211796247&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQRk2Vz0sRon1LC20FhCUIVuUdm8Bzm5V1CWia9dXHd8WLAyias7G7wrBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1492&quot;/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么声学回声消除模块（AEC, Acoustic Echo Cancellation）是如何消除回声的呢？具体的步骤见如下简图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.8365122615803815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQ1L0nTepRR1BhmgoBbKUfibCb0licr5WQudaRKdxO0fXOfVKpYfD0Pmcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;367&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第一步需要找到参考信号/扬声器信号（蓝色折线）跟麦克风信号（红色折线）之间的延迟，也就是图中的 delay=T。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第二步根据参考信号估计出麦克风信号中的线性回声成分，并将其从麦克风信号中减去，得到残差信号（黑色折线）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第三步通过非线性的处理将残差信号中的残余回声给彻底抑制掉。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;与以上的三个步骤相对应，回声消除也由三个大的算法模块组成：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其中「延迟估计」决定了AEC的下限，「线性自适应滤波器」决定了 AEC 的上限，「非线性处理」决定了最终的通话体验，特别是回声抑制跟双讲之间的平衡。&lt;/span&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;82&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;注：双讲是指在交互场景中，互动双方或多方同时讲话，其中一方的声音会受到抑制，从而出现断断续续的情况。这是由于回声消除算法“矫枉过正”，消除了部分不该去除的音频信号。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;接下来，我们先围绕这三个算法模块，分别讲讲其中的技术挑战与优化思路。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、延迟估计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;受具体系统实现的影响，当把参考信号与麦克风信号分别送入 AEC 模块进行处理之时，它们所存入的数据 buffer 之间存在一个时间上的延迟，即我们在上图中看到的“delay=T”。假设这个产生回声的设备是一部手机，那么声音从它的扬声器发出后，一部分会经过设备内部传导到麦克风，也可能会经过外部环境传回到麦克风中。所以这个延迟就包含了设备采集播放 buffer 的长度，声音在空气中传输的时间，也包含了播放线程与采集线程开始工作的时间差。&lt;strong&gt;正是由于影响延迟的因素很多，因此这个延迟的值在不同系统，不同设备，不同 SDK 底层实现上都各不相同。&lt;/strong&gt;它在通话过程中也许是一个定值，也有可能会中途变化（所谓的 overrun 和 underrun）。这也是为什么一个 AEC 算法在设备 A 上可能起作用，但换到另一个设备上可能效果会变差。延迟估计的精确性是 AEC 能够工作的先决条件，过大的估计偏差会导致 AEC 的性能急剧下降，甚至无法工作，而无法快速跟踪时延变化是出现偶现回声的重要因素。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;增强延迟估计算法鲁棒性&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;传统算法通常通过计算参考信号跟麦克风信号之间的相关性来决定延迟。相关性的计算可以放在频域上，典型的就是 Binary Spectrum 的方法，通过计算单频点上的信号能量是否超过一定门限值，实际将参考信号跟麦克风信号映射成了两维的0/1数组，然后通过不断移动数组偏移来找到延迟。最新的 WebRTC AEC3 算法通过并行的多个NLMS线性滤波器来寻找延迟，这个方法在检测速度及鲁棒性方面都取得了不错的效果，但是计算量非常大。当在时域上计算两个信号的互相关时，一个明显的问题是语音信号包含大量的谐波成分并且具有时变特性，它的相关信号常常呈现出多峰值的特征，有的峰值并不代表真正的延迟，并且算法容易受到噪声干扰。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;声网延迟估计算法通过降低信号之间的相关性（de-correlate），能够有效抑制 local maxima 的值以大大增强算法的鲁棒性。如下图所示，左边是原始信号之间的互相关，右边是声网SDK处理后的互相关，可见信号的预处理大大增强了延迟估计的鲁棒性：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p line=&quot;hzQn&quot;&gt;&lt;img data-ratio=&quot;0.27256317689530685&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQNugB0awicbicAvFnn4OkcYCadEc2SgvUpiatb1OibIDOQRBIlj0ehASPnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/p&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;算法自适应，降低计算量&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通常延迟估计算法为了降低计算量的需要，会预先假设回声信号出现在某个较低的频段内，这样就可以将信号做完下采样之后再送入延迟估计模块，降低算法的计算复杂度。然而面对市面上数以万计的设备及各种路由，以上的假设往往并不成立。下图是 VivoX20 在耳机模式下麦克风信号的频谱图，可见回声都集中在 4kHz 以上的频段内，传统的算法针对这些 case 都会导致回声消除模块的失效。声网延迟估计算法会在全频段内搜索回声出现的区域，并自适应地选择该区域计算延迟，确保算法在任何设备，路由下都有精确的延迟估计输出。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p line=&quot;4Or3&quot;&gt;&lt;img data-ratio=&quot;0.44765342960288806&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQtmyY8pVkl3qo4DRt6wJItxSia7SrTDicmwPlwXoEVMQcWArM3vvf013w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/p&gt;&lt;p line=&quot;4Or3&quot;&gt;&lt;/p&gt;&lt;p line=&quot;c5J4&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;图：VivoX20 接入耳机后的麦克风信号&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;动态更新音频算法库，提升设备覆盖率&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了确保算法的持续迭代改进，声网维护了一个音频算法的数据库。我们使用大量不同测试设备，在不同声学环境下采集到了各种参考信号和麦克风信号的组合，而它们之间的延迟全部通过离线处理的方式进行标定。除了真实采集的数据，数据库中也包含了大量仿真的数据，包括不同的说话人，不同的混响强度，不同的底噪水平，以及不同的非线性失真类型。为了衡量延迟估计算法的性能，参考信号与麦克风信号之间的延迟可以随机的变化，用以观察算法对突发延迟变化的响应。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以判断一个延迟估计算法的优劣，还需要考察：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1. 适应尽量多的设备、声学环境，且在尽量短的时间内根据设备、声学环境的因素匹配合适的算法；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 在突发随机的延迟变化后，能及时动态调整算法策略。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;以下是声网 SDK 与友商之间的延迟估计性能对比，总共使用了数据库中 8640 组测试数据。从图中数据可以看出，声网 SDK 可以在更短的时间内找到大多数测试数据的初始时延。在 96% 的测试数据中，声网 SDK 能在 1s 之内找到它们正确的延迟，而友商这一比例为 89%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6021220159151194&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQ1PdsbwrwbweNPiaZuF0cAG76KpeLEHcmHzr9Z1NqZpjCcXYPMRYlA7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;754&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p line=&quot;Mm5Z&quot;&gt;&lt;span data-comment-guid=&quot;comment-FilKQRswXFnBKHde&quot;&gt;第二个测试的是在通话过程中出现随机的延迟抖动，测试延迟估计算法要在尽量短的时间内找到精确的延迟值。如图中所示，声网 SDK 在 71% 的测试数据中能在 3s 之内重新找到变化后的精确延迟值，而友商这个比例为 44%。&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p line=&quot;VY3Z&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQCCygehVOD67pOVCqScIiaP6icscle64LwicR29YrRCGzTREJqjt7xpic1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5866336633663366&quot; data-w=&quot;808&quot;/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、线性自适应滤波器&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于线性滤波器，已有大量的文献介绍其原理及实践。当应用于回声消除的应用场景，主要考虑的指标包含收敛速度（convergence rate），稳态失调（steady-state misalignment）及跟踪性能（tracking capability）。这些指标之间往往也有冲突，譬如较大的步长可以改善收敛速度，但是会导致较大的失调。这个就是自适应滤波器中的没有免费的午餐定理(No Free Lunch Theorem)。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于自适应滤波器的类型，除了最为常用的 NLMS 滤波器（Model Independent），还可以使用 RLS 滤波器（Least Squares Model）或 Kalman 滤波器（State-Space Model）。除了各自理论推导中的各种假设，近似，优化，这些滤波器的性能最终都归结到如何计算最佳的步长因子（在卡尔曼滤波器里面步长因子合并到 Kalman Gain 的计算里面）。在滤波器尚未收敛或是环境传输函数突变的情形下，步长因子需要足够大以跟踪环境变化，当滤波器收敛及环境传递函数变化缓慢的时间段，步长因子应尽量减小以达到尽可能小的稳态失调。对于步长因子的计算，需要考虑自适应滤波器后残余回声跟残差信号间的能量比值，建模为系统的 leakage coefficients。这个变量常常等价于求滤波器系数跟真实传递函数之间的差（Kalman 滤波器里面称为状态空间状态向量误差），这也是整个估计算法中的难点。除此之外，双讲阶段的滤波器发散问题也是一个需要考虑的点，一般来说这个问题可以通过调整滤波器结构，使用 two echo path models 来解决。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;声网自适应滤波器算法并不使用单一的滤波器类型，而是兼顾了不同滤波器之间的优点，同时搭配自适应算法计算最优的步长因子。此外，算法通过线性滤波器系数实时估计环境的传递函数，自动修正滤波器长度，以覆盖通信设备连接 HDMI 外设等高混响，强回声的场景。如下是一个例子，在声网办公室的一个中型会议室中（面积约 20m2，三面玻璃墙），使用 Macbook Pro 通过 HDMI 连接小米电视，图中是线性滤波器时域信号的变化趋势，算法能自动计算并匹配实际环境传递函数的长度（在第 1400 帧左右自动检测出了强混响环境），以优化线性滤波器的性能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span line-inline=&quot;V378&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQOZib8t9rdbHLJUP94ov64mY9acpdKfAOg1w6CRkrj3AiahpxVpnqBXbA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;560&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;同样的，我们也使用数据库中大量测试数据进行声网 SDK 与友商之间的性能对比，对比的指标包括稳态失调（滤波器收敛之后对回声的抑制程度）以及收敛速度（滤波器达到收敛状态需要的时长）。第一张图代表自适应滤波器的稳态失调，声网SDK在 47%的测试数据中能达到超过 20dB 的回声抑制，而友商的比例为 39%。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span line-inline=&quot;wSkF&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQAUtJ6HVMhfobjofQKiaZFsSTl8Cgg54OCSibUmqibSciarLlOm9fryeVcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.6021220159151194&quot; data-w=&quot;754&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下图显示的是自适应滤波器的收敛速度，声网 SDK 在 51% 的测试样本中能在通话前 3s 之内收敛到稳态，而友商的比例为13%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p line=&quot;nVBX&quot;&gt;&lt;img data-ratio=&quot;0.5994694960212201&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQB2l9Av0DXZPhqNN8ODayiarM7mhbvMNb6lBGib4CP3gnyvqebAfeBk4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;754&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;三、非线性处理&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;非线性处理旨在抑制线性滤波器所没有预测出的回声成分，通常通过计算参考信号，麦克风信号，线性回声以及残差信号间的相关性，或是将相关性直接映射到抑制增益上，或是通过相关性估计出残留回声的功率谱，进一步通过维纳滤波器等传统降噪的算法抑制残留回声。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;作为回声消除算法的最后一个模块，除了抑制残留回声之外，非线性处理单元也肩负着监控整个系统是否正常工作的重任，譬如线性滤波器是否因为延迟抖动而无法正常工作？在声网 SDK 回声消除之前是否存在硬件回声消除未能处理的残余回声？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下面是一个简单的例子，通过自适应滤波器估计出的回声能量等内部参数，能够更快的发现延迟变化的现象，并且提示 NLP 采取相应的动作：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p line=&quot;m80l&quot;&gt;&lt;span line-inline=&quot;5qxP&quot;&gt;&lt;img data-ratio=&quot;0.6642599277978339&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQiauWm2HaoAjtAWiavdia3ia0hkVG9Gj0d1UxIayW41NVNADjnFlluwkWtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;随着声网 SDK 覆盖的场景越来越广，针对音乐信号的传输成为了一个重要的场景。声网 SDK 针对音乐信号的回声消除体验做了大量的优化，一个典型场景是舒适噪声的估计算法改进。传统算法使用基于 Minimum Statistics 的算法原理对信号中的底噪进行估计，当把这个算法应用于音乐信号时，因为音乐信号比之语音信号更为平稳，因此会过高的估计噪声功率，反映到回声消除中会导致处理后有回声时段与无回声时段间的底噪（背景噪声）不平稳，体验极差。声网 SDK通过信号分类以及模块融合的方式，彻底解决了 CNG 估计导致的底噪起伏现象。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除此之外，声网 SDK 还针对所有可能碰到的极端情况，包括非因果系统，设备频率偏移，采集信号溢出，声卡包含系统信号处理等等，都进行了大量的优化，确保算法能够工作在所有的通信场景中。&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101598&quot;&gt;&lt;section hm_fix=&quot;410:202&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9774436090225563&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQT7jYhsFQCN5QPLBBFCFE8A1L2w3apkfxYYBuyvhawVPTGHKAVZpv0Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;266&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;音质优先的降噪策略&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;降噪对信号音质的影响大于回声消除模块，这一点源自于在降噪算法的设计之初，我们先验的假设底噪都是平稳信号（至少是短时平稳的），而根据这个假设，音乐跟底噪的区分度明显弱于语音跟底噪的区分度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;声网 SDK 在降噪模块的前端预置了信号分类模块，能够精确的检测出信号的类型，并根据信号的类型调整降噪算法的类型及参数，常见的信号类型包括一般语音、清唱、音乐信号等。下图所示是两个降噪算法处理的信号片段，其中第一个是语音与音乐的混合信号，前15秒为含噪的语音信号，之后是40s是音乐信号，再之后是10s的含噪语音，语谱图从上到下分别是原始信号、友商处理结果、声网SDK处理结果。结果显示在语音段信号降噪性能差不多的前提下，竞品处理过信号中的音乐部分受到了严重的损伤，而声网SDK的处理并没有降低音乐的音质。&lt;/span&gt;&lt;/section&gt;&lt;p line=&quot;j21a&quot;&gt;&lt;img data-ratio=&quot;0.5327102803738317&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQ4qeibYDpySqEgx3eWaElWns4B1jcGmvwiaSiaEC1z3SK7iasngRk7y0kpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;642&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在第二个例子中，使用的音频是歌手的清唱，清唱中歌手反复发出“啊”的声音。在下图的语谱图中，从上到下分别是原始信号、友商的处理结果、声网 SDK 处理结果。结果显示，友商的降噪处理严重的损伤了原语音的频谱成分，而声网 SDK 完整的保留了原语音的谐波成分，保证了歌手清唱时候的音质体验。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p line=&quot;sgTg&quot;&gt;&lt;img data-ratio=&quot;0.5073313782991202&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQD3mI8ibMCA9t80cl3ZFDaicXxgdOTveicgwsP2qPoaJRdrjbiaJuCC9NpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;682&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;结语&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;自1967年贝尔实验室的M. M. Sondhi开创性的提出以自适应滤波器的方法来消除回声为开端，无数的研究和实践都投入到了这个语音通信的最基本问题上。要完美的解决回声问题，除了要有强大的算法作为基础，也需要在工程优化领域做很多优化。声网会持续不断的改进回声消除在各个不同应用场景下的体验。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在本系列的下一篇内容中，我们将随着音频信号，从设备端进入现实的网络环境，一边实地环行上海，一边聊聊音频互动场景下的延时、抖动，以及丢包对抗背后的优化策略。（以一张图来简单剧透，敬请期待）&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;p line=&quot;MAVh&quot;&gt;&lt;span line-inline=&quot;5x5v&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p line=&quot;nVBX&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.61171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQb9m0A2VaibQxJQVYoZlWRQc07pj3I5bNdr3W1nWHdaFicYJh3icaJL1Fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101592&quot;&gt;&lt;section&gt;&lt;section hm_fix=&quot;361:373&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9774436090225563&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YO07vjlZVBGvmIzgMnias1Gia2184vGeCQT7jYhsFQCN5QPLBBFCFE8A1L2w3apkfxYYBuyvhawVPTGHKAVZpv0Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;266&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;END&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3037037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YO07vjlZVBEHqOZjJmEPvV8JHfEDRRkq4aQIgGKpLLGE7KUcBVJVMhkRibEKbYLzKkOYzMbia7B90GEslXrkCYUg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ad534605cb0170e5d9c78384c0ee0b08</guid>
<title>大话 Python：python 基础巩固 -- Python 3 * 和 ** 运算符使用场景</title>
<link>https://toutiao.io/k/wp1dj1g</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、算数运算&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; * &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;2   6&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; ** &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;4   9&lt;/span&gt;&lt;span/&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;2、函数形参&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;*args 和 **kwargs 主要用于函数定义，&lt;/span&gt;&lt;span&gt;你可以将不定数量的参数传递给一个函数。&lt;/span&gt;&lt;span&gt;不定的意思是：&lt;/span&gt;&lt;span&gt;预先并不知道, 函数使用者会传递多少个参数给你，所以在这个场景下使用这两个关键字，&lt;/span&gt;&lt;span&gt;其实并不是必须写成 *args 和 **kwargs。&lt;/span&gt;&lt;span&gt;* 是必须要有的。 也可以写成 *r  和 **g ,&lt;/span&gt;&lt;span&gt;写成 *args 和**kwargs 是通常的一种约定。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;python函数传递参数的方式：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;*args 与 **kwargs 的区别：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果同时使用 *args 和 **kwargs 时，必须 *args 参数列要在 **kwargs 的前面。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt;&lt;span&gt;(*args, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2&lt;/span&gt;...     print(&lt;span&gt;&#x27;args=&#x27;&lt;/span&gt;, args)&lt;br/&gt;&lt;span&gt;3&lt;/span&gt;...     print(&lt;span&gt;&#x27;kwargs=&#x27;&lt;/span&gt;, kwargs)&lt;br/&gt;&lt;span&gt;4&lt;/span&gt;... &lt;br/&gt;&lt;span&gt;5&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; fun(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, A=&lt;span&gt;&#x27;a&#x27;&lt;/span&gt;, B=&lt;span&gt;&#x27;b&#x27;&lt;/span&gt;, C=&lt;span&gt;&#x27;c&#x27;&lt;/span&gt;, D=&lt;span&gt;&#x27;d&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;6&lt;/span&gt;args= (&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;7&lt;/span&gt;kwargs= {&lt;span&gt;&#x27;A&#x27;&lt;/span&gt;: &lt;span&gt;&#x27;a&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;B&#x27;&lt;/span&gt;: &lt;span&gt;&#x27;b&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;C&#x27;&lt;/span&gt;: &lt;span&gt;&#x27;c&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;D&#x27;&lt;/span&gt;: &lt;span&gt;&#x27;d&#x27;&lt;/span&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;*args 的使用&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt;&lt;span&gt;(name, *args)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2&lt;/span&gt;...     print(&lt;span&gt;&#x27;你好:&#x27;&lt;/span&gt;, name)&lt;br/&gt;&lt;span&gt;3&lt;/span&gt;...     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; args:&lt;br/&gt;&lt;span&gt;4&lt;/span&gt;...         print(&lt;span&gt;&quot;你的宠物有:&quot;&lt;/span&gt;, i)&lt;br/&gt;&lt;span&gt;5&lt;/span&gt;... &lt;br/&gt;&lt;span&gt;6&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; fun(&lt;span&gt;&quot;Geek&quot;&lt;/span&gt;, &lt;span&gt;&quot;dog&quot;&lt;/span&gt;, &lt;span&gt;&quot;cat&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;7&lt;/span&gt;你好: Geek&lt;br/&gt;&lt;span&gt;8&lt;/span&gt;你的宠物有: dog&lt;br/&gt;&lt;span&gt;9&lt;/span&gt;你的宠物有: cat&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;**kwargs 的使用&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt;&lt;span&gt;(**kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2&lt;/span&gt;...     &lt;span&gt;for&lt;/span&gt; key, value &lt;span&gt;in&lt;/span&gt; kwargs.items():&lt;br/&gt;&lt;span&gt;3&lt;/span&gt;...         print(&lt;span&gt;&quot;{0} 喜欢 {1}&quot;&lt;/span&gt;.format(key, value))&lt;br/&gt;&lt;span&gt;4&lt;/span&gt;... &lt;br/&gt;&lt;span&gt;5&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; fun(Geek=&lt;span&gt;&quot;cat&quot;&lt;/span&gt;, cat=&lt;span&gt;&quot;box&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;6&lt;/span&gt;Geek 喜欢 cat&lt;br/&gt;&lt;span&gt;7&lt;/span&gt;cat 喜欢 box&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、函数实参&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果函数的形参是定长参数，也可以使用 *args 和 **kwargs 调用函数，类似对元组和字典进行解引用：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt; 1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;fun&lt;/span&gt;&lt;span&gt;(data1, data2, data3)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span&gt; 2&lt;/span&gt;...     print(&lt;span&gt;&quot;data1: &quot;&lt;/span&gt;, data1)&lt;br/&gt;&lt;span&gt; 3&lt;/span&gt;...     print(&lt;span&gt;&quot;data2: &quot;&lt;/span&gt;, data2)&lt;br/&gt;&lt;span&gt; 4&lt;/span&gt;...     print(&lt;span&gt;&quot;data3: &quot;&lt;/span&gt;, data3)&lt;br/&gt;&lt;span&gt; 5&lt;/span&gt;... &lt;br/&gt;&lt;span&gt; 6&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; args = (&lt;span&gt;&quot;one&quot;&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;)&lt;br/&gt;&lt;span&gt; 7&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; fun(*args)&lt;br/&gt;&lt;span&gt; 8&lt;/span&gt;data1:  one&lt;br/&gt;&lt;span&gt; 9&lt;/span&gt;data2:  &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;10&lt;/span&gt;data3:  &lt;span&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span&gt;11&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; kwargs = {&lt;span&gt;&quot;data3&quot;&lt;/span&gt;: &lt;span&gt;&quot;one&quot;&lt;/span&gt;, &lt;span&gt;&quot;data2&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;&quot;data1&quot;&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;}&lt;br/&gt;&lt;span&gt;12&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; fun(**kwargs)&lt;br/&gt;&lt;span&gt;13&lt;/span&gt;data1:  &lt;span&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span&gt;14&lt;/span&gt;data2:  &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;15&lt;/span&gt;data3:  one&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;4、序列解包&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;序列解包 往期博客有写过，这里只列出一个例子，序列解包没有 **。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a, b, *c = &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;2&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a  &lt;br/&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;4&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; b  &lt;br/&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;6&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; c  &lt;br/&gt;&lt;span&gt;7&lt;/span&gt;[&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;文章引用来源：CSDN 博客平台  &lt;/span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93761&quot;&gt;&lt;section hm_fix=&quot;350:260&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.5689655172413792&quot; data-type=&quot;gif&quot; data-w=&quot;116&quot; data-width=&quot;100%&quot; class=&quot;__bg_gif&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/wzyc1ToJM6gmdOtlOP6aVquJL3WXvZzVibasgniamwNg8oibW1XNbxzprdiaEMOhxK7zpyFbbF2FRG8J9X1xcTxasQ/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;89197&quot;&gt;&lt;section hm_fix=&quot;395:444&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;老王说编程&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;分享编程技术、还原编程思想&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-role=&quot;width&quot;&gt;&lt;img border=&quot;0&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;109&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;109&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;394&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wzyc1ToJM6gmdOtlOP6aVquJL3WXvZzVmMjhUibbjhVM8lkv19nnYHC9UibfFMfzfx7HfiaG9m7Q3tQDYHw7c5FdA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Java|Python|Linux|编程趣事&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;加个鸡腿🍗&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dcebd2c50ba58c98f72d6ed32a135fa4</guid>
<title>联合国新闻专访颜宁：科学无性别，勇敢做自己</title>
<link>https://toutiao.io/k/gcovkw2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;根据联合国教科文组织的数据，占世界人口一半的女性在全球科研人员中所占的比例还不足30%。长期存在的偏见和性别方面的陈规定型观念使女童和妇女“远离”了与科学相关的领域。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在今年的2月11日妇女和女童参与科学国际日，联合国新闻的黄莉玲采访了知名生物学家、普林斯顿大学教授颜宁，请她就相关问题畅谈了自己的看法。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;撰文&lt;/strong&gt; | 黄莉玲&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;编辑 |&lt;/strong&gt;宗华&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;问：在你眼中一个科学家应该具有的最关键的素养是什么？ &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;颜宁：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我们总是试图去总结出一些职业特性，但我接触的从事科研的很多人，包括诺奖得主、非常知名的教授，多种多样，而且不同的学科对于一个人的素养的要求也是不一样的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果非要让我总结，那么就是我们经常说的好奇，这确实是因为所谓科学就是我们不断去扩展人类知识的边界。你必须要能够不断地提出问题，而不是想当然。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是仅仅有好奇心是不够的。还有其他的，比如说我自己觉得有一点天真会比较好，天真，或者说保持你童年时候对于万事万物的好奇。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;特别是实验科学，你在做的过程中，可能会有一些枯燥，你会不断的重复，这个时候如果有一些童趣在里面，让你整个人始终是一种比较乐观、比较开心的状态，我觉得这种心理也是挺重要的。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;还有我自己感觉记忆力要强，因为科学有些时候是需要一种联系，需要你对于一些数据很快能够精准地反映出来。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;虽然说网络非常发达，你可以不断地从网上去调取这些信息，但是有些时候存储在你脑子里，你可以快速地联系起来，快速地调动出来，这种能力还是要比你什么东西都要在网上去搜，要来得重要的多。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;还有一个对各行各业都重要的是身体素质要好。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;问：你的童年和少年时代是怎么度过的？你小的时候是不是就是一个有着非常强烈的好奇心的女孩子？ &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;颜宁：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;还真不是。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我可能会有一些面无漫无边际的遐想，我小时候没有想过我做科学家，因为我更感兴趣的是读小说，童话、神话、古典小说、中外的小说我都读。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以我一直以为我将来会从事的是跟文科相关的工作，或者去做记者，甚至去做作家，那是我小时候的理想。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是现在回头想，其实我小时候读那么多书，它会把我的想象力给激发出来，然后就会忍不住去想，为什么会这样？为什么会那样？有没有那种可能？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;读西游记，我自己就会想，孙悟空七十二变，他如果能把自己不断地不断变小，如果变成了一纳米高、十纳米高，这么大的一个他看到的世界是什么样子？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;现在回头想想，那个时候这种好奇心，可能奠定了我今天做结构生物学的一个最原始的基础。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;然后小时候我总是盯着夜空想，宇宙到底为什么没有边际？我到现在也没有搞明白。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实，当你带着问题去仰望星空的时候，那时候就会想想这些是不是在我心里的科学萌芽。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;问：你从小长大的环境、你的家庭是什么样吗？ &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;颜宁：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我的家庭非常普通，我父母都是工薪阶层。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们小时候其实作业也不多，基本上在学校就完成了，也没有什么太多的兴趣班，回家吃完晚饭，我最喜欢的是听评书，到现在还记得那个时候有《哪吒传》，然后8点准时休息。就是这样很普通，很放松的一个环境。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那个时候，工作单位一般都有那种所谓的宿舍楼，大家都是住在一个大院里面的，然后除了楼之外，还会有比较空旷的一片，小孩子们彼此可能也都认识，就一起疯玩。丢沙包，一起打打小扑克什么的，现在回想起来就是很轻松的一种状态。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以我现在看到网上说所谓的教育焦虑，小孩子们有多累，我就觉得跟我们小时候特别不一样，我小时候现在回想起来就是一种很被放养的状态。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;问：那么后来你是怎么样走上从事生物学研究的这条道路的？ &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;颜宁：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我们高中的时候在高二是要文理分班的，那么我当然是第一时间就报了个文科班，然后就被我们班主任给揪回来了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为什么？因为我的成绩，每次考试我几乎都是全年级第一。老师说学好数理化，走遍天下都不怕，你成绩这么好，你就过来学理，干嘛要去学文？ &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实我现在回头想想也还是不能苟同的，我觉得360行，行出状元，但是我也不讨厌理科，而且我很喜欢我们班主任，然后到了高考报志愿的时候，我的理想始终是学文，但我想报的是科技中文，当时清华有一个叫科技中文系，对我特别想报。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但这个时候我父母的意见对我影响还挺大的，因为我们那个时候有一个说法，说21世纪是生命科学的世纪。我爸就让我报生物系。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我之所以报生物系，也是因为我不反感。当时我们的生物老师是一位很酷的女老师，她当时教得也非常有趣。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如说，我还记得我们按照遗传学，比如说你知道血型是怎么回事，你父母是什么血型，那么你可能有哪些血型？如果兄弟姐妹有什么血型，那么怎样去反推父母的血型？ &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我觉得很有意思，当时确实是被这些遗传规律给震撼到了。这就是我从事生命科学的起点开端，听起来好像都挺随意的。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;问：那么后来你到了大学以后，你是不是就发现了这是你毕生致力的方向？ &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;颜宁：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;没有。我在大学的时候其实玩得挺嗨的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我到现在都跟学生说，其实大学的专业根本不能决定你未来的方向。为什么？大学更重要的应该是一个通识教育，在大学之前，孩子们大多是居家对吧？跟家庭的关系非常紧密。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于我来说，到大学相当于是第一次不在家里住了，还是挺新鲜的。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大学其实是一个对于人格的塑造和养成非常关键的时候，因为这时候你没有高考的紧箍咒在那等着你，那么其实是有自己无限的天地，你可以去探索，大学其实让你进一步放宽眼界。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那个时候我在清华有各种各样的报告可以听，有各种各样的课可以选，然后认识的人一下子就多了好几十倍那种感觉。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你有各种各样的社会活动，有各种各样的社团，所以我在大学简直是就是眼花缭乱的，很长一段时间都不知道我想做什么，而且那个时候我还做了我们系的系会主席。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;然后我去的公司叫诺华诺德，它是世界上这个提供胰岛素最大的一个公司。我也不喜欢在生物制药公司里面感觉那种有比较严格的层级，然后你的工作就被限制得比较固定，我这个人始终是比较喜欢一种自由自在的状态。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当时在清华生物系，当时大家出国的氛围也比较浓，也就跟着申请出国，其实当时觉得说世界这么大，我想出去看看。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是其实是到了普林斯顿之后，然后进了施一公老师的实验室，然后发现做科研这么好玩，这么有趣。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;然后，沉下心来以科研作为我一种毕生的事业也好，追求也好，应该是在普林斯顿三年之后大概才确定下来。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;问：你能具体跟我们讲讲做科研有什么好玩的、有什么有趣的呢？ &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;颜宁：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;做科研你会是世界上第一个。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我始终觉得我们人作为人类的一员，你有些时候会想我这一辈子如何度过。我从小就很羡慕李白、杜甫、苏轼、李清照、屈原，他们可以把他们的工作流传下来，然后你会觉得说这是人类文明的一个高峰，人类文明的瑰宝。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我就觉得这个真的是太浪漫的一件事了，你变成了人类的一个代表。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你做科学研究的时候，你是把人类的知识边界在不断的往前推动。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么当你能够得到一个答案，只要别人没有发表，你就是第一个知道答案的人，就会有一种我是在代表人类的观念。这是我这个人做事很喜欢的成就感。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当然也是有点好玩，你有一个问题，你去解决它，你解决了它，你又找到新的问题，不断的就跟打怪升级一样，或者说跟登山一样，你会觉得无穷无尽，前面就很有意思。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;问：但是有很多的女孩子，她们一谈起科学来，谈起数学或者是理工的其他任何课程，都会有一种谈虎变色的感觉。根据你的观察，为什么会这样？是这些女孩子不够聪明吗？ &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;颜宁：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我生活中还真没遇到太多这样的女生。我是在清华读的本科，普林斯顿读的博士，然后我又回清华任教，又回普林斯任教，所以我接触到的绝大多数女孩子事实上都是选择了理科的。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我有时候就会想为什么要谈虎色变？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;直到有一次，2019年我在以色列访问的时候，跟魏兹曼研究所的科学家们吃晚饭的时候，很多教授就闲聊，那些教授们好像都是一般三个孩子。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;然后他们就在说自己孩子，说到了男女从事科研的比例，然后就发现，其实好多时候反而是这种社会上的传统，大家约定俗成，让这些孩子们不由自主的受到了影响，比如说她会觉得怎么做数学的女数学家这么少，是不是女生不行？为什么我的小姐妹后来选的都是文科？ &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以其实很多时候大家没有认真的去思考是不是我能力不行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;事实上像我在高中也好，在大学也好，我们成绩靠前的那都是女生，并不是说数学跟物理成绩好的都是男生，对吧？ &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以不是因为大家的能力不行，而是在某个时间点做的选择，只是选择的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在新闻里也好，在社交媒体上，又会有这么一种经常性的说男生适合学理、女生不适合这种观念，年轻人不断的在被灌输的时候，可能就会影响了他们的信心，影响了他们的选择。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;问：还有一句俗话说，女性她天生就是比较感性的，男性是比较理性的，所以男性比较容易学好科学和理科。对这句话你怎么看呢？ &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;颜宁：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我觉得真的很无厘头。我在想为什么一定什么东西都要上升到两性？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我还可以说艺术家是感性的，科学家是理性的，但是你看艺术家，你看到的是男性比女性少很多吗？也没有，对吧？ &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当我们发现有意识的把女性从家庭解放出来，让她能有更多的精力去投入到科研里面，你会发现女性做教授的比例在越来越高。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以我都不知道这样的结论是来自于什么，基础是什么。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我经常跟我学生也在说，你不要听到别人经常怎么说就认为是对的，这就是我们做科研的另外一个素质。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;别人哪怕说的再多，你要想一想是这样吗？经常要反问，所以你每当你开始反问的时候，就会发现好多观念可能也只不过是一种传统观念而已，它是没有科学依据，甚至没有统计学数据能够支撑的。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;问：为什么女性需要去参与科学？ &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;颜宁：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;不是说女性为什么需要去参与科学，而是科学本来就不应该有性别。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;科学没有需要不需要谁，而是你应该有这个权利，我想做科研我就做科研，这是我的选择。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;就是我的学生，比如说在读博期间，甚至做博后期间，其实男女没有那么大的差别，一个是从他们发表文章，就是从他们的科研能力和科研成果来说，没有这么大的区别。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;区别在什么地方？确实是在开始求职、独立找工作这一步上，为什么呢？我自己是也没有统计学&lt;/span&gt;&lt;span&gt;（上的证据）&lt;/span&gt;&lt;span&gt;，只是觉得那个时间恰好女性她要开始孕育，就是说结婚其实本身关系不大，但是那时候正好是要生育期，然后这里面其实是一个比较大的分界线。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;特别是在亚洲，可能这种也是一个约定俗成，就是感觉大家对于女性的期待，你不仅是生孩子，你在带孩子上也要付出很多时间，然后你在家庭上要付出很多时间。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你看到一个机构里面，女教授就少，这样就会让很多女学生、女博后，可能心理上就会产生一种不自信，我跟一些学生聊过，我觉得很多时候都是心理上先受到影响了，而不是能力上。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当然也是有些客观因素，当女性在怀孕、在哺乳这一段时间的时候，是否有相应的政策给她们去提供便利，是不是把她们搞得焦头烂额？相当于给她们从事这个行业增添了不必要的壁垒。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以说我一直在鼓励大家，不要总是觉得两性该一模一样，这才叫公平，其实不是的，你应该看到两性的差别，而你应该去创造条件去把这些人为造成的不公平抹去。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而且我们也挺高兴的看到，越来越多的人意识到整个女性科学家比例偏低，不是因为能力，而因为各种各样的工作环境也好，社会舆论也好，传统观念也好，那么这就给了越来越多的年轻女性一些信心，动力，或者说是勇气。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以我觉得还是不要急，假以时日，能看到区别，或者能看到变革。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;问：我想年轻的女科学家，她结婚以后她要孕育孩子，这个过程也不是孩子在婴儿期的短暂阶段，作为一个父母，她长期要承担一个非常大的责任，会付出的额外辛劳特别多，所以可能社会需要去做一些事情，来帮她们轻装上阵。 &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;颜宁：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;只有怀孕这一件事情，或者说哺乳是只能妈妈做，对吧？除此之外其实都是父母都可以做的，比如说带孩子、哄睡，做饭，这不是妈妈特有的，父母都可以做的。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;带孩子应该是父母双方的，当你只给母亲去放育儿假不给父亲放的时候，那么这就自然会让这些招工的企业有一种歧视，对吧？我要招个女的，她将来还得休产假，我干嘛要招女的不招男的？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但当只要你为人父母，你都要休假的时候，其实又把男女放在同一竞争线上了。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;问：作为一名女性，在周围都是很多男科学家的环境里面，你会觉得孤独吗？ &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;颜宁：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;没有。我觉得真正在一个友好的环境里面，性别不应该变成一种关注因素。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我有很多朋友，有男有女，然后我们在讨论的时候，我经常会说是智力激荡，他们根本不会说因为女性就对你怎么样。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;甚至因为你是女性，有一些机构已经意识到这个问题，它反而要保证有足够的性别上的比例，比如说我们组织很多国际会议，要求至少有20%的女性报告人。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以可能我作为一个女性，我接到的会议邀请甚至要比男性还要多。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;问：在一个私营部门的公司里面，或者是政府的机构里面，很多女性觉得在职业升迁的道路上非常容易遇到天花板，一种看不到的天花板，很难晋升，在科学领域，你会有这样的感觉吗？ &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;颜宁：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;对于我们做科研来说，晋升无非是从助理教授到副教授，从副教授到正教授，正教授到讲席教授对吧？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实我觉得大家真的还是看你的科研成果说话，然后评审的时候也都是靠你的业绩、推荐信，所以这里面依旧跟性别没有关系，还是看你的成果。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;问：你会不会觉得如果女性科学家在科研管理上承担更多角色的话，会给科研界带来不同的变化？ &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;颜宁：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我们现在的系主任、副系主任都是女性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我可以显而易见看到的变革就是说我们会比较有意识的去支持女性科学家，比如说像我们系的教授，包括从助理教授开始，那么女性的比例相对是蛮高的，甚至快要达到50%了。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当你有一些女性的管理者，她可能会对于两性的问题更敏感，看到女性的困境，比如说&lt;/span&gt;&lt;span&gt;（设立）&lt;/span&gt;&lt;span&gt;哺乳间这种问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可能男性他压根就没有想过这个问题，未必是说他故意的（不做）。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;问：在妇女和女孩参与科学国际日，你对年轻的女孩和男孩有什么样的寄语？ &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;颜宁：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我对他们的寄语就是要勇敢做自己，我任何时候说都是这句话，勇敢做自己。勇敢地追寻你的梦想，不要被那些固有观念、传统观念影响到。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这是我对未来一代的一个期盼，可能因为是作为科学家，我们总是在想着不断的突破边界是一个很棒、很酷的事情。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么未来还是依靠于年轻人，对吧？希望他们到时候能有更大的勇气，不断地去打破边界，把人类文明继续向前推进。 &lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文来源：联合国新闻&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;（完）&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;更多精彩：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649454756&amp;amp;idx=1&amp;amp;sn=e5279e558544a21e2bf669cbfa69f329&amp;amp;chksm=876df304b01a7a12ce84e6825036b0a1a3d7ac124a389d0f614a03b5f08aca0f99c223f65b66&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;南大陈道蓄教授：教学生提问和教学生答问，哪个更重要？&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649454644&amp;amp;idx=1&amp;amp;sn=d7088bcd7b79911e980524889e7bd70f&amp;amp;chksm=876df394b01a7a82000288e13e45dd454041e3436aa1e996eace611d5b2a9360ec2d895de83a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;【主编寄语】“在线教学也行”带来的启示&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649453732&amp;amp;idx=1&amp;amp;sn=a3a1ac9acfb432b52b3ea6d715495d63&amp;amp;chksm=876dff04b01a7612f41823f1186e859640f8cc57cc7511a0ef2f8e413162a6ce3b356d6d1ccf&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;5118门！教育部正式公布首批国家级一流本科课程&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649453732&amp;amp;idx=2&amp;amp;sn=b9c2b81b034f187f1c34a515f7f2e1d1&amp;amp;chksm=876dff04b01a761269ac91eeb0d7dda11b5178c0ca40c238cb84d08b84731e697719e6cf7df3&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;首批国家级一流本科课程公布，教育部详解&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649453684&amp;amp;idx=1&amp;amp;sn=7105178f09df39c68f225f8c269fb429&amp;amp;chksm=876dffd4b01a76c2b89d005d13f15ac41de1d90d869961500f703991a87985bc55342d7b77c8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【言十系列】：计算机学科发展趋势及其对计算机教育的影响&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;【言十系列】：计算机学科发展趋势及其对计算机教育的影响&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649452942&amp;amp;idx=1&amp;amp;sn=e60ceb9913d396599302aa563252b932&amp;amp;chksm=876dfa2eb01a7338b57d08ce3ae29851bba0a2768e6f736780faff5bc0753805ce94d14d32ee&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;北大李晓明教授：从趣味数学到趣味算法到趣味编程——非专业学习者体会计算思维的一条途径？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649452894&amp;amp;idx=1&amp;amp;sn=e2a62a237343a1fed1af5cac07a853b0&amp;amp;chksm=876dfafeb01a73e88b9c1bd97d75f2f21711d9ae1858e5330e5714320c5afd6b45d3ee83931e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;一流计算机学科建设的几个问题思考&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649452103&amp;amp;idx=1&amp;amp;sn=e501ac95cdf2687e5dd7fd5307f3fb7b&amp;amp;chksm=876de5e7b01a6cf1f9fd75632ca753825788e28612de9342be84443de4b532453151342bac7d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;清华大学刘云浩教授回答AI两千问&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649455425&amp;amp;idx=1&amp;amp;sn=ad7d3248c49d60960fb9d82efcbbb785&amp;amp;chksm=876df0e1b01a79f7ccde59f46e9e1cfdb9a2b6082911f9eb6ccb0d09a4cbfa3e53683ea709f7&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【目录】《计算机教育》 2021年第2期&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649454822&amp;amp;idx=1&amp;amp;sn=b57e05518ee4b9025e7967cf44990a0d&amp;amp;chksm=876df346b01a7a50e1471ad0a352c8b9201dd5ae5e3a2fd0bf532a02e5c35c8666baecbd7fcc&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;【目录】《计算机教育》 2021年第1期&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649453818&amp;amp;idx=1&amp;amp;sn=6e947398c0c458d28e7a96cbdb14e75e&amp;amp;chksm=876dff5ab01a764c88d266aadc0c39974ed91064b68db41ab688bf84fdf0892ecb656dc9aa65&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;【目录】《计算机教育》 2020年第12期&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649453354&amp;amp;idx=1&amp;amp;sn=282bf63527c71cd4ff983f52ffc2e50e&amp;amp;chksm=876df88ab01a719c8e3864a5348385b34877cc4c227d5687df2d70bb027139f0294e56cbce88&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;【目录】《计算机教育》 2020年第11期&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649452966&amp;amp;idx=1&amp;amp;sn=85f6bb346cf0f8c4bd4233c8aaa2c368&amp;amp;chksm=876dfa06b01a7310fdbcc36f47eb66cd134ba4ca011221e196efc6441f617fcaafcd897d3d18&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;【目录】《计算机教育》 2020年第10期&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649450636&amp;amp;idx=1&amp;amp;sn=ded470e0a3f968ea5a22e2aebc829cb0&amp;amp;chksm=876de32cb01a6a3a8ff10bf29c1aa350ff19251232974d4addd13d00b51f9b27aefd23f775a1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;哈尔滨工业大学战德臣教授：一种确保高校教学质量的新模式——同步异步混合式教学&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;哈尔滨工业大学战德臣教授：一种确保高校教学质量的新模式——同步异步混合式教学&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649450028&amp;amp;idx=1&amp;amp;sn=92591f92fb6758609fb8c72e39c43b74&amp;amp;chksm=876ded8cb01a649af192fe64bf1f7b0497d9cf0b0b4ae15f6d262f0c7ebd43a118f690640aa9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;【校长专访】加快推进计算机科学教育 做数据科学教育的探路人——华东师范大学副校长周傲英教授专访&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649449973&amp;amp;idx=1&amp;amp;sn=b6edbbee11e2a46c7dd8cdb6a19fd927&amp;amp;chksm=876dee55b01a6743c59f1bd7254250995cfe204cb090247bd06fde8498efb39fe6abff6778d7&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;主编寄语：由“墙上的咖啡”想到的计算机教育&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649449814&amp;amp;idx=1&amp;amp;sn=3b2c55061faa7e5a712d51251c96dcda&amp;amp;chksm=876deef6b01a67e0d15e90507abfff474b5b03be0cc9acc4848311494f43929abfcd01ce0f50&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;【言十系列】计算机专业本科课程质量问题分析与建议&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649449515&amp;amp;idx=1&amp;amp;sn=4f485a5f7c0c4b493f8375b6be77dff5&amp;amp;chksm=876def8bb01a669d4b69e4d5b54c8c9b4b08529f758dec91771d2e98780b11ec6f681472d183&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;日本东京大学计算机本科课程设置分析与启示&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649449380&amp;amp;idx=1&amp;amp;sn=e1f159ce6ae8baeda803d3fd304d00f1&amp;amp;chksm=876de804b01a6112f5a4a7f76a5aeb4b79b373ead057e6501709471a273123022a4a306ade46&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;北京大学人工智能课程教学改革与实践&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649449300&amp;amp;idx=1&amp;amp;sn=80d430030204834afa30fa41641307d8&amp;amp;chksm=876de8f4b01a61e227e90691116112b0fead13f5815ad2b313c40f79d44fb9c12aedbae203b1&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;新工科与大数据专业建设&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTMzMzMyNw==&amp;amp;mid=2649448210&amp;amp;idx=1&amp;amp;sn=3954ad129a3df645ab1234320c3fb95d&amp;amp;chksm=876dd4b2b01a5da4aa310a50b5d40b3d98398dced520b7128dbd6117d294762e121e5fda01cf&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;他山之石可以攻玉——中外计算机教育研究文章汇编&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6043956043956044&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;546&quot; data-backw=&quot;392&quot; data-backh=&quot;237&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/owl7VqCXtaKRfRSvfIvcCxac3MlyjLUVHOwEYd4bIWYEym6vHOyJibicbiawIZwRJM19aTKEPxpmG23PhPEEicgiaQQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-copyright=&quot;0&quot; data-s=&quot;300,640&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/owl7VqCXtaL5KrSV2a2k2EccmCJU2La3hpPoaO0rwCI8Q1ZM4mEyKLNgxNzesXVNvdbNGbTO5pQ0f25JgdZR6A/640?wx_fmt=jpeg&quot;/&gt;&lt;span/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bef6710b30c89dfd9ec782246d0ffef9</guid>
<title>看这里！鹅厂大佬深度解析 Apache Pulsar 五大应用场景</title>
<link>https://toutiao.io/k/ptznfju</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.062037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6WZjMhzMhhribvOZV2a1MeHib3icZT0RB262WhXibhjxaiaoxRv1gQuSzX8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.1503268&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6GmC3qFyDYZNEnC0Ulclun3gCHlSVPaqEdXrjLicwxnCN5IXuksnhRibA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;306&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;导读&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;Apache Pulsar 是一个多租户、高性能的服务间消息传输解决方案，支持多租户、低延时、读写分离、跨地域复制、快速扩容、灵活容错等特性。数平 MQ 团队对 Pulsar 做了深入调研以及大量的性能和稳定性方面优化，目前已经在腾讯云消息队列 TDMQ 落地上线。本文主要简单梳理了 Pulsar 支持的一些传统消息队列应用场景，以及 Pulsar 新特性对更多场景的支持。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.1503268&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6GmC3qFyDYZNEnC0Ulclun3gCHlSVPaqEdXrjLicwxnCN5IXuksnhRibA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;306&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;作者介绍&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;张超&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;腾讯数据平台部 MQ 团队高级工程师&lt;/p&gt;&lt;p&gt;Apache TubeMQ(incubating)  PMC&lt;/p&gt;&lt;p&gt;Kafka-on-Pulsar Maintainer&lt;/p&gt;&lt;p&gt;Apache Pulsar Contributor&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7172996&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6q592zaeMS6KAzEia8pneAXwHSJULMicPJOv0DeFLI1ot2YeZ3v3mhZDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;237&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;消息队列概述&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;消息队列（Message Queue，简称MQ），是指在消息的传输中保存消息的容器或服务，是一种异步的服务间通信方式，适用于无服务器和微服务架构，是分布式系统实现高性能、高可用、可伸缩等高级特效的重要组件。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;常见的主流消息队列有 ActiveMQ、RabbitMQ、ZeroMQ、Kafka、MetaMQ、RocketMQ、Pulsar 等。而在公司内有 TubeMQ、Ckafka、&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxMTQ2NTA1Mg==&amp;amp;mid=2247485214&amp;amp;idx=1&amp;amp;sn=be9a794adf9956b95267b8f169f802cf&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;TDMQ&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;TDMQ&lt;/a&gt;、CMQ、CDMQ、Hippo 等。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;分布式&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;消息队列都是分布式的，因此才可以提供异步、解耦等功能。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;可靠性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;基于消息的通信是可靠的，消息不会丢失。大多数消息队列都提供将消息持久化到磁盘的功能。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;异步&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;通过消息队列，可将远程同步调用拆解成为异步调用。对于不需要获取远程调用结果的应用场景来说，性能提升明显。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;松耦合&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;消息直接由中间件存储和分发。消息生产者只需关注如何将消息发送给消息中介服务器；消费者只需关注如何从中介服务器订阅。生产者和消费者之间是完全解耦的，不需要知道彼此的存在。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;事件驱动&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;可以将复杂的应用系统重构成为事件驱动的系统。事件溯源（Event Sourcing），表示一个对象从创建到消亡，会经过的多种状态。如果把对象的状态变化都存储下来，不但可以根据状态变化记录获取对象的当前状态，也可以回溯对象的变化过程。消息队列能很好地支持这样的系统设计方式，将触发对象状态变化的事件放入消息队列。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在 JMS（JAVA Message Service）标准中，有P2P（Point to Point）和 Publish/Subscribe(Pub/Sub) 两种消息模型。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;P2P&lt;/strong&gt;&lt;br/&gt;P2P的特点是每个消息只有一个消费者。消息生产者将消息发送到消息队列（Queue）中，只有一个消费者能够消费此消息，消费完成之后消息即删除。任意一个消费者都可以消费这个消息，但消息绝对不会被两个消费者重复消费。&lt;/section&gt;&lt;p&gt;&lt;strong&gt;Pub/Sub&lt;/strong&gt;&lt;br/&gt;Pub/Sub 的特点是发布到 Topic 的消息会被所有订阅者消费。消息生产者将消息发送到消息主题（Topic）中，所有订阅这个主题的消费者都可以消费此消息，当所有订阅者都消费完成之后才能删除消息。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;消息的生产者和消费者之间有时间依赖，只有事先订阅这个主题的消费者才可消费。如果先发送消息，后订阅主题，那么订阅之前的消息将不能被这个订阅者消费。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;传统企业型消息队列 ActiveMQ 遵循了 JMS 规范，实现了点对点和发布订阅模型，但其他流行的消息队列 RabbitMQ、Kafka 并没有遵循 JMS 规范。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;而在&lt;strong&gt;实时流式架构&lt;/strong&gt;中，消息队列的消息传递可以分为&lt;strong&gt;队列（Queue）&lt;/strong&gt;和&lt;strong&gt;流（Stream）&lt;/strong&gt;两类。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;队列（Queue）模型&lt;/strong&gt;&lt;br/&gt;队列模型主要是采用无序或者共享的方式来消费消息。通过队列模型，用户可以创建多个消费者从单个管道中接收消息；当一条消息从队列发送出来后，多个消费者中的只有一个（任何一个都有可能）接收和消费这条消息。消息系统的具体实现决定了最终哪个消费者实际接收到消息。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;队列模型通常与无状态应用程序一起结合使用。无状态应用程序不关心排序，但它们确实需要能够确认（ACK）或删除单条消息，以及尽可能地扩展消费并行性的能力。典型的基于队列模型的消息系统包括 RabbitMQ 和 RocketMQ。&lt;/section&gt;&lt;p&gt;&lt;strong&gt;流式（Stream）模型&lt;/strong&gt;&lt;br/&gt;相比之下，流模型要求消息的消费严格排序或独占消息消费。对于一个管道，使用流式模型，始终只会有一个消费者使用和消费消息。消费者按照消息写入管道的确切顺序接收从管道发送的消息。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;流模型通常与有状态应用程序相关联。有状态的应用程序更加关注消息的顺序及其状态。消息的消费顺序决定了有状态应用程序的状态。消息的顺序将影响应用程序处理逻辑的正确性。典型的基于流模型的消息系统包括 Kafka、TubeMQ。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7172996&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6q592zaeMS6KAzEia8pneAXwHSJULMicPJOv0DeFLI1ot2YeZ3v3mhZDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;237&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;传统消息队列的应用场景&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;假设有一个系统调用链路为 A 调用 B 耗时 20ms，B 调用 C 耗时 20ms，而 C 调用 D 需要 2s，这样下来整个调用需要耗时 2040ms。但实际上 A 调用 B，B 调用 C 只需要 40ms，而 D 系统的引入直接导致系统性能下降约 50 倍。此时我们可以考虑引入消息队列，将 D 系统的调用抽离出来，做一个异步调用：系统 A 到系统 B 再到系统 C 后就直接结束，系统 C 将消息发送到消息队列中，系统 D 从消息队列里取消息进行消费，这样子我们系统的性能就提高了接近 50 倍。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.3238482&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6vYLqvWWGicUQlVCKKLwvTbUNkUqKerluTDPqnrLSxY5QG9QNo1rnYhQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;738&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;各个业务系统仅需要处理自己的业务逻辑，发送事件消息到消息队列。下游业务系统直接订阅消息队列的队列或主题获取事件。消息队列可用于单体应用被拆解为微服务后不同微服务间的通信。系统解耦的好处是不同系统的迭代不再相互依赖，能有效缩短数据链路长度，提高数据处理效率。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8224101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6ftfsSicS54CLZagH8lV3mvibvFo8qXHrtdjxIcB1nUkTZ546fUynJw4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;473&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;大型活动带来较高流量时，没有做好相应保护容易导致系统超负荷甚至崩溃，而限制太过则会导致请求大量失败而影响用户体验。消息队列服务拥有高性能的消息处理能力，可以承接流量脉冲而不被击垮，在确保系统可用性的同时，通过快速有效的请求响应技术提升用户体验。其海量消息堆积能力确保下游业务在安全水位内平滑稳定的运行，避免流量高峰的冲击。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.1580882&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6uHHQE8R2AicskAqpLvwQU8Ticn6QsWJ9UvY6XnP8ahHVNMP99I4qOs2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;544&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;系统一个状态的改变，需要通知多个相关系统，可通过消息订阅的方式推送给各个订阅者系统。比如数据库值的改变，需要通知所有的缓存系统更新，可以把数据库值改变发送消息给消息队列，然后各缓存订阅相关主题，收到消息后更新自己的缓存。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8895966&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6gPzDO1MCKtCDWdXGYfq4cECbkawUa6E9FNwH3aqf0O2Kr9GskQq0Kw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;471&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;在大数据场景中，日志分析往往需要处理大量日志，不可能存储在一台物理机上。消息队列可提供一个集群，用来存储海量消息，将其缓存到消息队列，进一步供实时分析系统分析日志。Kafka 和 TubeMQ 在大数据处理中往往充当分布式缓存的作用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.1691176&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH68elT3d4AUHZbrHZ4iarMdR3jAzFxhn2dZbrMa55icfWCiagPicF0DKwFLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;544&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7172996&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6q592zaeMS6KAzEia8pneAXwHSJULMicPJOv0DeFLI1ot2YeZ3v3mhZDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;237&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Pulsar的应用场景&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Pulsar 作为新一代存储计算分离架构的消息队列服务，&lt;strong&gt;不仅适用于上面提到的传统消息队列的应用场景，它的一些新特性还为更多应用场景带来可能。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;队列和流的融合—维护一套 MQ 服务就够了&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Apache Pulsar 抽象出了统一的 producer-topic-subscription-consumer 消费模型，既支持队列模型，也支持流模型。在 Pulsar 的消息消费模型中，Topic 是用于发送消息的通道。每一个 Topic 对应着 Apache BookKeeper 中的一个分布式日志。发布者发布的每条消息只在 Topic 中存储一次；存储的过程中，BookKeeper 会将消息复制存储在多个存储节点上；Topic 中的每条消息，可以根据消费者的订阅需求，多次被使用，每个订阅对应一个消费者组。尽管消息仅在主题（Topic）上存储一次，但是用户可以有不同的订阅方式来消费这些消息：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Pulsar 通过这种模型，将队列模型和流模型这两种模型结合在了一起，提供了统一的 API 接口。这种模型，既不会影响消息系统的性能，也不会带来额外的开销，同时还为用户提供了更多灵活性，方便用户程序以最匹配模式来使用消息系统。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在 Pulsar 架构中，为了处理 Bookie 存储消息和防止消息丢失等，基于 Managed Leger 实现了一套分布式的流程封装。Pulsar Protocol Handler 处理 Pulsar 中生产者和消费者发送出来的 TCP 请求，将其转化为可读取状态的操作。Pulsar 2.5 版本后，将 Protocol Handler 接口单独脱离了出来，利用这个框架就可以单独实现自定义协议的转换，比如 Kafka、AMQP 等，可以帮助存量的 MQ 业务轻松迁移到 Pulsar。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.325&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6icsPAQQ8PCCEGtY81qmwsQNiahEefVEQdaQOXk47hluhenpiaqiahp9Eog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Kafka Protocol Handler 目前是一个独立的项目在维护— Kafka On Pulsar（简称KoP），由于公司内存量 Kafka 业务很多，数平 MQ 团队针对 KoP 做了大量的优化工作，后续也会有专门的分享介绍这一部分工作。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;作为企业的消息中枢，Apache Pulsar 自诞生之日起就支持多租户，因为该项目最初就是为了满足 Yahoo 的严格需求，而当时市面上没有任何可用的开源系统能够提供多租户功能。在 Pulsar 的设计中，租户可以跨集群分布，每个租户都可以有单独的认证和授权机制；租户也是存储配额、消息 TTL 和隔离策略的管理单元。Pulsar 通过下列方式满足了多租户场景下的数据安全：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4698189&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6wpyFqAj2etMFWiciaqKqbEnSK03YOmaQAiadmvI8AicF0UwE5f1mRjNtDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;994&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在大型的分布式系统中，都会涉及到跨多个数据中心的需求。在对服务质量和灾备要求更高的场景中，会规划将机房部署在地理位置分散的多个数据中心内。在此类多数据中心部署中，通常会使用跨地域复制机制提供额外的冗余，以防某个数据中心故障、自然侵害或其他事件导致服务无法正常运作。Apache Pulsar 在设计之初就加入了对 Yahoo 全球十多个机房的跨地域复制的需求。Apache Pulsar 的跨地域多机房互备特性是 Pulsar 企业级特性的重要组成部分，它在保证数据稳定可靠的同时，为用户提供了便捷的操作和管理。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4268519&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6ma32VfTbGZ5ibXBtLliaLZVay9yygEtB7FIews9eukAWD60yvDHq3V7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在上图中，无论 Producer P1、P2 和 P3 在什么时候分别将消息发布给 Cluster A、Cluster B 和 Cluster C 中的 Topic T1，这些消息均会立刻复制到整个集群。一旦完成复制，Consumer C1 和 C2 即可从自己所在的集群消费这些消息。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Pulsar 的跨地域复制不仅应用在跨数据中心数据备份的场景，在 PowerFL 联邦学习平台中跨地域复制的能力还被用来做通信服务使用。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;云原生的原生即软件设计之初就考虑到了将来会被运行在云端的可能，从而在设计层面上就充分利用了云资源的特点，典型的是分布式和弹性伸缩的能力。Pulsar 之所以说是云原生的消息平台，核心就是它的架构设计能够充分利用分布式的、能够弹性伸缩的云端资源。以 Pulsar on Kubernetes 为例，Bookie 是有状态的节点，但是节点之间是对等的，可以采用 StatefulSet 来部署；而 Broker 作为无状态的节点，直接使用 ReplicaSet 即可，每个 Pod 支持水平扩展。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.3961538&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6EClxl1OapjOyWayAkphDsPCkLP7KC8745pGCatAy4ZvOyu7aL2vFZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1040&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;目前公司已经有业务使用 Pulsar on Kubernetes，如果 bookie 使用 Local Storage Volume，对 Pulsar 的性能基本没有影响。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;往期&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;推荐&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMTQ2NTA1Mg==&amp;amp;mid=2247487749&amp;amp;idx=1&amp;amp;sn=654be00bc440836facb577c75f51bff1&amp;amp;chksm=9b41e936ac3660203dce860524dd832756b73c4c7ea93526ed1e450a9f47597e50cdb8666f97&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《腾讯云中间件产品月报（2021年第2期）》&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMTQ2NTA1Mg==&amp;amp;mid=2247487724&amp;amp;idx=1&amp;amp;sn=607d85348f03c5b2581e1df70ec98701&amp;amp;chksm=9b41e8dfac3661c958698f08de9dde9ebd76955596771abf62aaf80d0034ef3c3bc6ac181045&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《独家分享：Kafka集群间信息复制攻略来了！》&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMTQ2NTA1Mg==&amp;amp;mid=2247487700&amp;amp;idx=1&amp;amp;sn=91dd1840afd849790cac0e118ec6b221&amp;amp;chksm=9b41e8e7ac3661f179e488f7705cb212a99cb262e7aa1570f923a87de22911f937d656ad6792&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《今天我们聊聊 Trace 之 OpenTelemetry And TSW |概览》&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMTQ2NTA1Mg==&amp;amp;mid=2247487649&amp;amp;idx=1&amp;amp;sn=9952744a9ee5d0a16d771e851c902c3c&amp;amp;chksm=9b41e892ac366184bbae1c17c0b05a593899019d72d896f388e3773b45628ee3a8acf61470ef&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《看他就够了！一文带你全方面了解Apache Pulsar 延迟消息投递》&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7083333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6IPMYwj0Yib8icn5sUesqOAhIjMCRSr5Awy8PicqY9rDKEWc48TOviaIhnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;240&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;扫描下方二维码关注本公众号，&lt;/p&gt;&lt;p&gt;了解更多微服务、消息队列的相关信息！&lt;/p&gt;&lt;p&gt;解锁超多鹅厂周边！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5560488&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dPkfGGYFSHUicYWVC1ar8ia3uUgf3zeVH6tunmHrfQZASf34z46bPvx8pD6bMaMicyQZgLwVV1m56sOib8OLjTQC7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;901&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87578&quot;&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot; class=&quot;__bg_gif&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yqVAqoZvDibHW4ynpBjRrolMxOZtKTiaYgT0HG1BkTeIUjfS0zrwEYVMy6Fj54m58z6pH9yWNOnFkbflRtKVicx0w/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;戳原文，了解更多消息队列TDMQ的信息&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87578&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94252&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.0740740740740742&quot; data-type=&quot;png&quot; data-w=&quot;81&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7QRTvkK2qC5ricrpxA0Tln6U4mt6c9God8owkFMgicqnvogW8znAX84Syp3PSlsnkPKnE2n4ZyZs8E73qZj6XgyA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;点亮&lt;span&gt;在看&lt;/span&gt;，你最好看&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>