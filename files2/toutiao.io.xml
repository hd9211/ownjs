<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e60777b142eec18354303e68f8de28e6</guid>
<title>浅谈软件设计</title>
<link>https://toutiao.io/k/tvv5595</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-body&quot; itemprop=&quot;articleBody&quot;&gt;

      
      

      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;/&gt;前言&lt;/h2&gt;&lt;p&gt;软件设计中，什么最重要？能让软件灵活、低成本修改的前提下，又能尽可能减少变化带来的风险。&lt;/p&gt;
&lt;p&gt;如何能达到这个目的呢？有如下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能不修改原有代码就不修改，变化的功能完全通过新增代码来解决。(&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://weread.qq.com/web/reader/480322f072021a3248038c8k98f3284021498f137082c2e&quot;&gt;OCP原则&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;必须修改原有代码时，尽量把代码的变化限制在足够小的范围内。（正交性）&lt;ul&gt;
&lt;li&gt;模块/类/方法的职责单一化，边界划分时将可能联动的变化隔离 (&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://weread.qq.com/web/reader/480322f072021a3248038c8k1f032c402131f0e3dad99f3&quot;&gt;SRP原则&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;对代码进行抽象，抽象的东西更具普适性，更容易在变化中做到不变。并且抽象的部分不要依赖于具体的部分（&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://weread.qq.com/web/reader/480322f072021a3248038c8k37632cd021737693cfc7149&quot;&gt;DIP原则&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;正交性：源于&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://book.douban.com/subject/1152111/&quot;&gt;《程序员修炼之道》&lt;/a&gt;，是一个核心指导原则。是指当某个模块有修改、变化时，对周边其它模块不造成任何影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;设计原则&quot;&gt;&lt;a href=&quot;#设计原则&quot; class=&quot;headerlink&quot; title=&quot;设计原则&quot;/&gt;设计原则&lt;/h2&gt;&lt;h3 id=&quot;OCP-SRP-DIP&quot;&gt;&lt;a href=&quot;#OCP-SRP-DIP&quot; class=&quot;headerlink&quot; title=&quot;OCP/SRP/DIP&quot;/&gt;OCP/SRP/DIP&lt;/h3&gt;&lt;p&gt;根据上面这些推导，就能看出来设计原则也是为了满足目的而总结出来的经验。虽然在&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://weread.qq.com/web/reader/480322f072021a3248038c8kc81322c012c81e728d9d180&quot;&gt;《架构整洁之道》&lt;/a&gt;中提炼了SOLID五种设计原则，但根据上面的推论，可以看出来OCP/SRP/DIP是更加核心的设计原则。&lt;/p&gt;
&lt;p&gt;如果从逻辑上来讲，OCP应该跟正交性属于同一个层次。&lt;/p&gt;
&lt;p&gt;OCP在设计模式中的使用也是非常常用的指导原则，比如&lt;code&gt;观察者模式&lt;/code&gt;、&lt;code&gt;职责链&lt;/code&gt;、&lt;code&gt;装饰器模式&lt;/code&gt;等，都是OCP原则的使用。&lt;/p&gt;
&lt;p&gt;OCP也是可大可小的原则，在越大的系统上，OCP越重要。比如互联网，核心层是非常稳定，扩展性非常强，要发布新的网站完全是不需要修改互联网底层。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;互联网的这个例子，来自&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://time.geekbang.org/column/intro/313&quot;&gt;软件设计之美&lt;/a&gt;，非常具有启发性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;针对OCP原则，在&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://time.geekbang.org/column/article/176075&quot;&gt;《设计模式之美》&lt;/a&gt;中提了一个有趣的问题：修改代码就意味着违背开闭原则吗？&lt;/p&gt;
&lt;p&gt;其实不一定。比如实现某个需求时，如果在某个类中扩展了一个接口，那么对接口来说是满足OCP，但对类来说是不满足的(对模块和类层次来说也一样)。所以是否满足OCP不能简单一概而论。专栏中给出了这样的结论：&lt;strong&gt;尽量让修改操作更集中、更少，尽量让最核心、最复杂的那部分逻辑代码满足开闭原则。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;LSP-ISP&quot;&gt;&lt;a href=&quot;#LSP-ISP&quot; class=&quot;headerlink&quot; title=&quot;LSP/ISP&quot;/&gt;LSP/ISP&lt;/h3&gt;&lt;p&gt;那SOLID中剩余的LSP及ISP原则是有什么用处呢？&lt;/p&gt;
&lt;p&gt;LSP(里氏替换原则)从定义上来说：任何基类可以出现的地方，子类都可以替换它。&lt;/p&gt;
&lt;p&gt;子类可以完全替换父类，这个约束可以产生什么样的结果呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子类只能去扩展基类，而不能隐藏或者覆盖基类行为。这其实是对OCP的实践。&lt;/li&gt;
&lt;li&gt;抽象层确定下来的行为，具体类不能改变它，只能适应它；也就是实现要依赖于抽象，而非具体。这其实是对DIP的实践。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以本质上LSP是在满足DIP和OCP的原则下推导出的一个具体原则。&lt;/p&gt;
&lt;p&gt;ISP(接口隔离原则)从定义上来说：不应强迫使用者依赖于它们不用的方法。ISP有如下作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源码层面的变化隔离，可以一定程度上提升源码编译速度。&lt;/li&gt;
&lt;li&gt;对更高层次模块来说，可以防止不必要依赖变化时，都需要重新编译、布署。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ISP与SRP一定程度上有些相似性，但并不一样。ISP更侧重于接口的设计，思考角度也是略不同的。&lt;/p&gt;
&lt;p&gt;ISP迫使我们在接口的维度上来思考，使我们站在行为的角度上来思考。行为是更加复杂易变的，实体会更加稳定。那么基于行为进行职责划分与隔离，就更容易封装变化。&lt;/p&gt;
&lt;h3 id=&quot;其它原则&quot;&gt;&lt;a href=&quot;#其它原则&quot; class=&quot;headerlink&quot; title=&quot;其它原则&quot;/&gt;其它原则&lt;/h3&gt;&lt;p&gt;除SOLID原则外，还有一些比较有名的指导原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对接口编程：本质也是将代码分层，接口设计即抽象层的设计，也即DIP的实践。&lt;/li&gt;
&lt;li&gt;KISS：使代码保持简洁。注意，如果问题很复杂，此时解决方案复杂的话，也可以认为是满足KISS原则的。&lt;/li&gt;
&lt;li&gt;YAGNI：不要做过度设计。不要提前写用不到的代码，但预留扩展性是必要的。&lt;/li&gt;
&lt;li&gt;DRY：完全重复的代码不一定违反DRY，不完全一样的代码也可能违反了DRY。详情可以参考：&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://time.geekbang.org/column/article/179607&quot;&gt;重复的代码就一定违背DRY吗？如何提高代码的复用性？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LOD：不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。 详解参考：&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://time.geekbang.org/column/article/179615&quot;&gt;如何用迪米特法则（LOD）实现“高内聚、松耦合”？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;KISS&lt;/code&gt;、&lt;code&gt;LOD&lt;/code&gt;、&lt;code&gt;YAGNI&lt;/code&gt;等原则的一些详细说明，&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://time.geekbang.org/column/intro/250&quot;&gt;《设计模式之美》&lt;/a&gt; 对这块的详细介绍是很值得看一下的&lt;br/&gt;&lt;code&gt;DRY&lt;/code&gt;原则，在《程序员修炼之道》中有更全面的说明，DRY不止指代码层面的重复，还包括意图等方面的重复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;/&gt;设计模式&lt;/h2&gt;&lt;p&gt;面向对象开发中，代码中遍布着对象。那么面向对象开发中对象及对象关系的处理就是非常重要的。GoF总结的设计模式，也可以围绕对象的关系/行为来理解。&lt;/p&gt;
&lt;p&gt;对象的处理，可以划分为如下三种关系/行为：&lt;/p&gt;

&lt;p&gt;站在这个角度来理解设计模式是更容易理解的。但我们需要先考虑的是，为什么会存在这些设计模式。要研究这个问题，还是需要基于具体场景来看&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比较简单的单例、观察者模式，以及使用场景比较受限的解释器，还有仅为了内存优化而存在的FlyWeight模式并没有涉及&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;对象的创建&quot;&gt;&lt;a href=&quot;#对象的创建&quot; class=&quot;headerlink&quot; title=&quot;对象的创建&quot;/&gt;对象的创建&lt;/h3&gt;&lt;p&gt;直接创建一个类会有什么问题呢？可能会违反DIP原则，导致抽象类依赖于具体类。&lt;/p&gt;
&lt;p&gt;如何解决这个问题呢？在抽象层中不做具体的创建，只保留基类中对象的引用。只要想办法给引用赋值即可，一种办法是在外部创建好后再传进来(即依赖注入)。如果在对象中存在继承关系，还有一种办法就是在子类中创建。&lt;/p&gt;
&lt;p&gt;在子类中创建的方式就是**&lt;code&gt;工厂模式&lt;/code&gt;**，具体实现上就是抽象类提供&lt;code&gt;create&lt;/code&gt;接口返回具体的对象，子类重载该接口返回具体对象。&lt;/p&gt;
&lt;p&gt;有批量对象需要创建，对象之间存在约束：某些类型的对象只能同时使用。为了满足该约束，需要封装创建者，并将创建者也进一步分层为抽象类及具体类，就是**&lt;code&gt;抽象工厂模式&lt;/code&gt;**&lt;/p&gt;
&lt;p&gt;有批量对象要创建，这些对象创建完之后还需要做进一步拼装/组合等操作，同样需要封装创建者并进行设计分层，将拼装/组合的差异放在具体创建者子类中，就是**&lt;code&gt;创建者模式&lt;/code&gt;**&lt;/p&gt;
&lt;p&gt;如果要对已有对象(包含状态)进行复制，就是**&lt;code&gt;原型模式&lt;/code&gt;**&lt;/p&gt;
&lt;p&gt;创建型的设计模式，都在遵循&lt;strong&gt;封装变化&lt;/strong&gt;、&lt;strong&gt;对接口编程&lt;/strong&gt;这些根本原则。&lt;/p&gt;
&lt;h3 id=&quot;对象间的关系&quot;&gt;&lt;a href=&quot;#对象间的关系&quot; class=&quot;headerlink&quot; title=&quot;对象间的关系&quot;/&gt;对象间的关系&lt;/h3&gt;&lt;p&gt;对象与对象之间有多少种关系呢？&lt;/p&gt;

&lt;p&gt;在什么场景下，可以很好的利用对象关系的处理达到设计的目的呢？&lt;/p&gt;
&lt;h4 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;/&gt;继承&lt;/h4&gt;&lt;p&gt;继承重要的作用就是将代码进行分层，分为抽象层与具体层，并且尽量保持抽象层的稳定。（虽然代码复用也是其中一个功能，但并不推荐）&lt;/p&gt;
&lt;p&gt;遇到问题需要对类进行分层时，要满足&lt;code&gt;DIP&lt;/code&gt;原则的约束，针对这种约束沉淀出来的方案，自然就可以做到具体层可以随意变化，不影响抽象层，抽象层做一些调整时，具体层也可能完全不受影响。这就是**&lt;code&gt;桥接模式&lt;/code&gt;**&lt;/p&gt;
&lt;h4 id=&quot;包装&quot;&gt;&lt;a href=&quot;#包装&quot; class=&quot;headerlink&quot; title=&quot;包装&quot;/&gt;包装&lt;/h4&gt;&lt;p&gt;如果目前已有一个对象，我们希望对其进行扩展或修改时，但又希望满足OCP原则，那如何做呢？（还一种情况，就是原始对象无法修改）&lt;/p&gt;
&lt;p&gt;有个办法就是通过一个Wrapper类，来将原有对象包装起来，并用Wrapper来替换原始对象的使用，以此来达到修改原始对象的功能。&lt;/p&gt;
&lt;p&gt;要改变原始类的接口名称时，在Wrapper的新接口中调用原始接口，就是**&lt;code&gt;适配器模式&lt;/code&gt;**&lt;/p&gt;
&lt;p&gt;要扩展原始类的功能时，Wrapper与目标类设计为同样类型的对象。在Wrapper中抽象接口实现时，除了调用目标对象的接口，还补充了自己的逻辑。就是**&lt;code&gt;装饰器模式&lt;/code&gt;**&lt;/p&gt;
&lt;p&gt;修改原始类的行为时，Wrapper与目标类设计为同样类型的对象。在Wrapper中抽象接口实现时，可以按自己的预期来调整新的行为。就是**&lt;code&gt;代理模式&lt;/code&gt;**&lt;/p&gt;
&lt;p&gt;如果对象结构间有一种递归性，比如大图案是由小图案组合而成的，并且可以不断递归组合。此时Wrapper与目标类设计为同样的类型对象，并且Wrapper中可以存储多个目标类型对象。Wrapper的接口实现上，会迭代调用内部目标对象的接口。这就是**&lt;code&gt;组合模式&lt;/code&gt;**&lt;/p&gt;
&lt;p&gt;如果要扩大被包装目标的范围，比如是多个对象，或者某个模块，要对他们的接口进行调整，就可以产生**&lt;code&gt;外观模式&lt;/code&gt;**&lt;/p&gt;
&lt;h3 id=&quot;对象的行为&quot;&gt;&lt;a href=&quot;#对象的行为&quot; class=&quot;headerlink&quot; title=&quot;对象的行为&quot;/&gt;对象的行为&lt;/h3&gt;&lt;p&gt;站在对象的行为上来考虑时，可以更多的从他们的时机和行为上来分析。&lt;/p&gt;
&lt;p&gt;如果有一系列操作需要执行，可以将这些操作封装为同一种类型的对象，然后在抽象层可以按序执行它们，就是**&lt;code&gt;Command模式&lt;/code&gt;**&lt;/p&gt;
&lt;p&gt;如果有一个数据或事件，需要交给多个对象处理或执行。可以将这些处理对象封装为同一类型对象，数据/事件在这个对象链条上进行传递，就是**&lt;code&gt;职责链模式&lt;/code&gt;**&lt;/p&gt;
&lt;p&gt;如果系统中存在不同的状态，并且这些状态可以随着系统执行不断改变其中的状态时，就可以将这些状态封装为同一类型对象，核心执行逻辑可以不关心使用的具体对象，这就是**&lt;code&gt;状态模式&lt;/code&gt;**&lt;/p&gt;
&lt;p&gt;如果系统中存在不同的状态，并且在不同场景会使用不同对象时，就可以将这些状态封装为同一类型对象，要使用不同策略，仅需要将策略对象设置给该系统，这就是**&lt;code&gt;策略模式&lt;/code&gt;**&lt;/p&gt;
&lt;p&gt;如果某容器内有多个元素，想在不了解容器内部实现的情况下枚举其中的内部元素，就可以通过提供统一访问协议，容器来实现该协议以达到遍历的目的。这就是**&lt;code&gt;迭代器模式&lt;/code&gt;**&lt;/p&gt;
&lt;p&gt;如果某个对象有存取需求，并且不想暴露内部实现，就可以让该对象提供导出/导入状态的接口，在外部来存取相应数据。这就是**&lt;code&gt;备忘录模式&lt;/code&gt;**&lt;/p&gt;
&lt;p&gt;如果在完成某件任务时，有统一的执行流程，不同场景下的差异仅在于细节上的差异，就可以在抽象层实现流程和通用的执行细节，具体差异部分通过子类重写保留的接口来实现。这就是**&lt;code&gt;模板模式&lt;/code&gt;**&lt;/p&gt;
&lt;p&gt;如果想在不同场景对容器元素进行遍历操作并得到不同结果，并且要处理的元素类型比较固定，但处理的操作可能易变时，就可以让元素对象提供一个访问接口，然后把要处理的操作封装为&lt;code&gt;访问者对象&lt;/code&gt;，访问者对象中可以对不同元素进行不同处理。这样就可以更好的满足OCP原则，这就是&lt;strong&gt;访问者模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果一组对象之间相互调用的关系比较复杂，形成了网状的结构时，通过增加一个中间交互对象的方式，来将各对象之间相互的引用解耦开，就是**&lt;code&gt;中介者模式&lt;/code&gt;**&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在行为类模式中，状态模式跟策略模式是很像的，从类图上来看也是一致的。但两个模式处理的问题场景是不同的。&lt;br/&gt;比如登录问题很适合用状态模式，登录过程分为几个状态，这几个状态在开始登录后，会自动切换其中的状态，一种状态切为另一种状态可能会执行不同的操作，该系统给外界的反馈可能也会有差异。&lt;br/&gt;一个软件是试用模式还是正式模式，就可以比较适合使用策略模式，比如试用版本时某些功能的调用受限。如果用户付了费，可以直接将另外一个策略替换当前策略。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中&lt;code&gt;Command模式&lt;/code&gt;、&lt;code&gt;职责链模式&lt;/code&gt;、&lt;code&gt;状态模式&lt;/code&gt;、&lt;code&gt;策略模式&lt;/code&gt;在类结构上是比较相似的，可以用简单语言来描述的其中差异：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一系列对象有统一行为接口，在抽象层可以按序执行它们，就是&lt;code&gt;Command模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当一系列对象有统一行为接口，并且数据或事件会沿着这一系列对象传递时，就是&lt;code&gt;职责链模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当一系列对象有统一行为接口，在不同时机会切换不同的对象，就是&lt;code&gt;状态模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当一系列对象有统一行为接口，在不同的场景使用不同的对象，就是&lt;code&gt;策略模式&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;/&gt;结语&lt;/h2&gt;&lt;p&gt;现在再回过头来看，设计模式是什么呢？设计模式其实是针对场景总结出的设计经验。&lt;/p&gt;
&lt;p&gt;学习设计模式最重要的是什么？&lt;strong&gt;透彻理解设计原则是最重要的&lt;/strong&gt;。如果熟练掌握了设计原则，即使从来不知道设计模式，仍然能在开发过程中自然而然的用上设计模式。&lt;/p&gt;
&lt;p&gt;当然并不是说设计模式没有价值，首先是它可以给我们一些指导和演示，告诉我们在某些场景下比较优秀的设计是什么样的。其次它是一种沟通语言，可以在不同的开发之间方便的传达设计思路。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;/&gt;参考资料&lt;/h2&gt;

      
    &lt;/div&gt;
    
    
    

    

    

    

    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1e771d66b30b69920cfe7ebcaaaa7f66</guid>
<title>JVM 简明笔记（四）：垃圾回收</title>
<link>https://toutiao.io/k/rqqp79j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;blogpost-body cnblogs-markdown&quot;&gt;
&lt;h2 id=&quot;1-垃圾回收相关算法&quot;&gt;1 垃圾回收相关算法&lt;/h2&gt;
&lt;p&gt;垃圾回收器首先要做的就是，判断一个对象是存活状态还是死亡状态，死亡的对象将会被标识为垃圾数据并等待收集器进行清除。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断一个对象是否为死亡状态的常用算法有两个：&lt;strong&gt;引用计数器算法&lt;/strong&gt; 、&lt;strong&gt;可达性分析算法&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;垃圾回收的常见算法有以下几个：&lt;strong&gt;标记-清除算法&lt;/strong&gt;、&lt;strong&gt;标记-复制算法&lt;/strong&gt;、标记-整理算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;11-引用计数算法（reference-counting）&quot;&gt;1.1 引用计数算法（Reference Counting）&lt;/h3&gt;
&lt;p&gt;在创建对象时关联一个与之相对应的计数器，当此对象被使用时加 1，相反销毁时 -1。当此计数器为 0 时，则表示此对象未使用，可以被垃圾收集器回收。&lt;/p&gt;
&lt;p&gt;引用计数算法的优缺点很明显，其优点是垃圾回收比较及时，实时性比较高，只要对象计数器为 0，则可以直接进行回收操作；而缺点是无法解决循环引用的问题。&lt;/p&gt;
&lt;p&gt;循环引用示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class RCTest {
    static class Test {
        public Test object = null;
    }

    public static void main(String[] args) {
        Test object1 = new Test();
        Test object2 = new Test();

        object1.object = object2;
        object2.object = object1;

        object1 = null;
        object2 = null;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;12-可达性分析算法（reachability-analysis）&quot;&gt;1.2 可达性分析算法（Reachability Analysis）&lt;/h3&gt;
&lt;p&gt;指从对象的起点（GC Roots）开始向下搜索，如果对象到 GC Roots 没有任何引用链相连时，也就是说此对象到 GC Roots 不可达时，则表示此对象可以被垃圾回收器所回收。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223223121-1409263742.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在Java语言中，可作为GC Roots的对象包括下面几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈帧中的局部变量表中的 reference 引用所引用的对象&lt;/li&gt;
&lt;li&gt;方法区中 static 静态引用的对象&lt;/li&gt;
&lt;li&gt;方法区中 final 常量引用的对象&lt;/li&gt;
&lt;li&gt;本地方法栈中 JNI（即Native方法） 引用的对象&lt;/li&gt;
&lt;li&gt;Java虚拟机内部的引用，如基本数据类型对应的 Class 对象，一些常驻的异常对象（比如 NullPointExcepiton、OutOfMemoryError） 等，还有系统类加载器&lt;/li&gt;
&lt;li&gt;所有被同步锁持有的对象，比如被 synchronized 持有的对象&lt;/li&gt;
&lt;li&gt;反映Java虚拟机内部情况的 JMXBean、 JVMTI 中注册的回调、 本地代码缓存等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;finalize()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当使用可达性分析判断一个对象不可达时，并不会直接标识这个对象为死亡状态，而是先将它标记为“待死亡”状态再进行一次校验。&lt;/p&gt;
&lt;p&gt;校验的内容就是此对象是否重写了 finalize() 方法，如果该对象重写了 finalize() 方法，那么这个对象将会被存入到 F-Queue 队列中，等待 JVM 的 Finalizer 线程去执行重写的 finalize() 方法，在这个方法中如果此对象将自己赋值给某个类变量时，则表示此对象已经被引用了。因此不能被标识为死亡状态，其他情况则会被标识为死亡状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四种引用类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强引用(Strong Reference)：强引用是使用最普遍的引用。如果一个对象具有强引用，即便发生OOM那垃圾回收器绝不会回收它。&lt;/li&gt;
&lt;li&gt;软引用(Soft Reference)：如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。&lt;/li&gt;
&lt;li&gt;弱引用(Weak Reference)：用来描述那些非必须对象， 但是它的强度比软引用更弱一些， 被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作， 无论当前内存是否足够， 都会回收掉只 被弱引用关联的对象。 在JDK 1.2版之后提供了 WeakReference 类来实现弱引用。 弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。&lt;/li&gt;
&lt;li&gt;虚引用(Phantom Reference)：如果一个对象仅持有虚引用，在任何时候都可能被垃圾回收器回收。虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用必须和引用队列 （ReferenceQueue）联合使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;13-标记-清除算法（mark-sweep）&quot;&gt;1.3 标记-清除算法（Mark-Sweep）&lt;/h3&gt;
&lt;p&gt;标记-清除算法属于最早的垃圾回收算法，它是由标记阶段和清除阶段构成的。标记阶段会给所有的存活对象做上标记，而清除阶段会把没有被标记的死亡对象进行回收。而标记的判断方法就是前面讲的引用计数算法和可达性分析算法。&lt;/p&gt;
&lt;p&gt;问题： 产生内存空间的碎片化，标记-清除算法执行完成之后会产生大量的不连续内存，这样当程序需要分配一个大对象时，因为没有足够的连续内存而导致需要提前触发一次垃圾回收动作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223247469-1036729945.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;14-标记-复制算法（mark-copy）&quot;&gt;1.4 标记-复制算法（Mark-Copy）&lt;/h3&gt;
&lt;p&gt;将内存分为大小相同的两块区域，每次只使用其中的一块区域，这样在进行垃圾回收时就可以直接将存活的东西复制到新的内存上，然后再把另一块内存全部清理掉。&lt;/p&gt;
&lt;p&gt;问题：内存的可用率大幅降低：虽然可以解决内存碎片的问题，但因为需要将内存分为大小相同的两块内存，那么内存的实际可用量其实只有原来的一半。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223312535-1085587882.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;15-标记-整理算法（mark-compact）&quot;&gt;1.5 标记-整理算法（Mark-Compact）&lt;/h3&gt;
&lt;p&gt;由两个阶段组成的：标记阶段和整理阶段。标记阶段和标记-清除算法的标记阶段一样，整理阶段不是直接对内存进行清除，而是把所有存活的对象移动到内存的一端，然后把另一端的所有死亡对象全部清除。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223327855-1391934624.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-垃圾回收器&quot;&gt;2 垃圾回收器&lt;/h2&gt;
&lt;p&gt;HotSpot 中常使用的垃圾收集器主要包括 7 个：Serial、ParNew、Parallel Scavenge、Serial Old、Parallel Old、CMS 和 G1（Garbage First）收集器。&lt;/p&gt;
&lt;h3 id=&quot;21-分代收集理论&quot;&gt;2.1 分代收集理论&lt;/h3&gt;
&lt;p&gt;收集器应该将 Java 堆划分出不同的区域，然后将回收对象依据其年龄（年龄即对象熬过垃圾收集过程的次数） 分配到不同的区域之中存储。&lt;/p&gt;
&lt;p&gt;在 Java 堆划分出不同的区域之后，垃圾收集器可以每次只回收其中某一个或者某些部分的区域，所以有了 Minor GC 、Major GC、Full GC 这样的回收类型的划分；也能够针对不同的区域安排与里面存储对象存亡特征相匹配的垃圾收集算法——因而发展出了“标记-复制算法”“标记-清除算 法”“标记-整理算法”等针对性的垃圾收集算法。&lt;/p&gt;
&lt;h3 id=&quot;22-垃圾收集器分类&quot;&gt;2.2 垃圾收集器分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;串行回收器（Serial）：串行垃圾回收是为单线程环境设计且只使用一个线程进行垃圾回收，会暂停所有的用户线程，不适合交互性强的服务器环境&lt;/li&gt;
&lt;li&gt;并行回收器（Parallel）：多个垃圾收集器线程并行工作，同样会暂停用户线程，适用于科学计算、大数据后台处理等多交互场景&lt;/li&gt;
&lt;li&gt;并发回收器（CMS）：用户线程和垃圾回收线程同时执行，不一定是并行的，可能是交替执行，可能一边垃圾回收，一边运行应用线程，不需要停顿用户线程，互联网应用程序中经常使用，适用对响应时间有要求的场景&lt;/li&gt;
&lt;li&gt;G1回收器：G1垃圾回收器将堆内存分割成不同的区域然后并发地对其进行垃圾回收&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223341910-1501531031.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;串行回收器：Serial、Serial Old&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并行回收器：ParNew、Parallel Scavenge、Parallel Old&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并发回收器：CMS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新生代垃圾收集器：Serial 、 ParNew 、Parallel Scavenge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;老年代垃圾收集器：Serial Old 、 Parallel Old 、CMS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整堆收集器：G1、ZGC、Shenandoah&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特殊：Epsilon 不进行垃圾回收&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;组合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serial + Serial Old&lt;/li&gt;
&lt;li&gt;Serial + CMS&lt;/li&gt;
&lt;li&gt;ParNew  + Serial Old&lt;/li&gt;
&lt;li&gt;ParNew + CMS&lt;/li&gt;
&lt;li&gt;Parallel Scavenge + Serial Old&lt;/li&gt;
&lt;li&gt;Parallel Scavenge + Parallel Old&lt;/li&gt;
&lt;li&gt;G1&lt;/li&gt;
&lt;li&gt;ZGC&lt;/li&gt;
&lt;li&gt;Epsilon&lt;/li&gt;
&lt;li&gt;Shenandoah&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中： Serial Old 作为 CMS 出现 Concurrent Mode Failure 失败的后备预案&lt;/p&gt;
&lt;p&gt;JDK8  废弃：Serial + CMS、ParNew + Serial Old&lt;/p&gt;
&lt;p&gt;JDK8  默认：Parallel Scavenge + ParallelOld&lt;/p&gt;
&lt;p&gt;JDK9  移除：Serial + CMS、ParNew + Serial Old&lt;/p&gt;
&lt;p&gt;JDK9  默认：G1&lt;/p&gt;
&lt;p&gt;JDK11 新增：Epsilon （实验）&lt;/p&gt;
&lt;p&gt;JDK11 新增：ZGC （实验）&lt;/p&gt;
&lt;p&gt;JDK12 新增：Shenandoah（实验）&lt;/p&gt;
&lt;p&gt;JDK13 更新：ZGC 支持的最大堆大小从 4TB 增加到 16TB&lt;/p&gt;
&lt;p&gt;JDK14 更新：ZGC 支持在 Windows 上作为实验功能&lt;/p&gt;
&lt;p&gt;JDK14 弃用：Parallel Scavenge + Parallel Old&lt;/p&gt;
&lt;p&gt;JDK14 移除：CMS&lt;/p&gt;
&lt;p&gt;JDK15 正式：ZGC 不再标记为实验功能可以在生产环境中使用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GC性能指标&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;吞吐量：即CPU用于运行用户代码的时间与CPU总消耗时间的比值（吞吐量 = 运行用户代码时间 / ( 运行用户代码时间 + 垃圾收集时间 )）。例如：虚拟机共运行100分钟，垃圾收集器花掉1分钟，那么吞吐量就是99%&lt;/li&gt;
&lt;li&gt;暂停时间：执行垃圾回收时，程序的工作线程被暂停的时间&lt;/li&gt;
&lt;li&gt;内存占用：Java 堆所占内存的大小&lt;/li&gt;
&lt;li&gt;收集频率：垃圾收集的频次&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;23-serial-收集器&quot;&gt;2.3 Serial 收集器&lt;/h3&gt;
&lt;p&gt;单线程收集器，“单线程”的意义不仅仅说明它只会使用一个CPU或一个收集线程去完成垃圾收集工作；更重要的是它在垃圾收集的时候，必须暂停其他工作线程（Stop The World），直到垃圾收集完毕；&lt;/p&gt;
&lt;p&gt;对于单CPU环境来说，由于Serial收集器没有线程间的交互，专心做垃圾收集自然可以做获得最高的垃圾收集效率&lt;/p&gt;
&lt;p&gt;使用方式：&lt;code&gt;-XX:+UseSerialGC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223400142-619633914.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（图源自《深入理解Java虚拟机（第2版）》）&lt;/p&gt;
&lt;h3 id=&quot;24-parnew-收集器&quot;&gt;2.4 ParNew 收集器&lt;/h3&gt;
&lt;p&gt;ParNew 收集器实质上是 Serial 收集器的多线程并行版本，除了同时使用多条线程进行垃圾收集之外，其余的行为包括 Serial 收集器可用的所有控制参数、 收集算法、 Stop The World、 对象分配规则、 回收策略等都与 Serial 收集器完全一致。&lt;/p&gt;
&lt;p&gt;ParNew 收集器在单 CPU 服务器上的垃圾收集效率绝对不会比 Serial 收集器高；但是在多 CPU 服务器上，效果会明显比 Serial 好。&lt;/p&gt;
&lt;p&gt;使用方式：&lt;code&gt;-XX:+UseParNewGC&lt;/code&gt;&lt;br/&gt;
设置线程数：  &lt;code&gt;XX:ParllGCThreads&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223414220-2001281962.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（图源自《深入理解Java虚拟机（第2版）》）&lt;/p&gt;
&lt;h3 id=&quot;25-parallel-scavenge-收集器&quot;&gt;2.5 Parallel Scavenge 收集器&lt;/h3&gt;
&lt;p&gt;和 ParNew 收集器类似，是一个新生代收集器。使用&lt;strong&gt;复制算法&lt;/strong&gt;的并行多线程收集器。Parallel Scavenge 是 Java1.8 默认的收集器，特点是并行的多线程回收，以吞吐量（Throughput）优先。适合后台运算，交互不多的任务，如批量处理，订单处理，科学计算等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parallel Scavenge 收集器的目标是达到一个可控制的吞吐量&lt;/li&gt;
&lt;li&gt;自适应调节策略：自动指定年轻代、Eden、Suvisor区的比例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用方式：&lt;code&gt;-XX:+UseParallelGC&lt;/code&gt;&lt;br/&gt;
分别是控制最大垃圾收集停顿时间： &lt;code&gt;-XX:MaxGCPauseMillis&lt;/code&gt;&lt;br/&gt;
吞吐量大小 &lt;code&gt;-XX:GCTimeRatio&lt;/code&gt;&lt;br/&gt;
设置年轻代线程数 &lt;code&gt;XX:ParllGCThreads&lt;/code&gt;&lt;br/&gt;
自适应调节年轻代、Eden、Suvisor区的比例 &lt;code&gt;-XX:+UseAdaptiveSizePolicy&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;26-serial-old-收集器&quot;&gt;2.6 Serial Old 收集器&lt;/h3&gt;
&lt;p&gt;Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用&lt;strong&gt;标记-整理算法&lt;/strong&gt;。 这个收集器的主要意义也是供客户端模式下的 HotSpot 虚拟机使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 JDK1.5 及之前，与 Parallel Scavenge 收集器搭配使用（JDK1.6 后有 Parallel Old 收集器可搭配）&lt;/li&gt;
&lt;li&gt;作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用方式：&lt;code&gt;-XX:+UseSerialGC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外：Parallel Scavenge 收集器架构中本身有 PS MarkSweep 收集器来进行老年代收集，并非直接调用 Serial Old 收集器，但 PS MarkSweep 收集器与 Serial Old 的实现几乎是一样的，所以在官方的许多资料中都是直接以 Serial Old 代替 PS MarkSweep 进行讲解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223533708-1369903352.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（图源自《深入理解Java虚拟机（第2版）》）&lt;/p&gt;
&lt;h3 id=&quot;27-parallel-old-收集器&quot;&gt;2.7 Parallel Old 收集器&lt;/h3&gt;
&lt;p&gt;Parallel Old 是 Parallel Scavenge 收集器的老年代版本，支持多线程并发收集，基于&lt;strong&gt;标记-整理算法&lt;/strong&gt;实现。&lt;/p&gt;
&lt;p&gt;JDK1.6 及之后用来代替老年代的 Serial Old 收集器；（在此之前，如果新生代选择了 Parallel Scavenge 收集器，老年代除了 Serial Old（PS MarkSweep） 收集器以外别无选择，其他表现良好的老年代收集器，如 CMS 无法与它配合工作。）&lt;/p&gt;
&lt;p&gt;在Server模式，多CPU的情况下；在注重吞吐量以及CPU资源敏感的场景，就有了 Parallel Scavenge 加 Parallel Old 收集器的应用组合；&lt;/p&gt;
&lt;p&gt;使用方式：&lt;code&gt;-XX:+UseParallelOldGC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223547027-880883714.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（图源自《深入理解Java虚拟机（第2版）》）&lt;/p&gt;
&lt;h3 id=&quot;28-cms-收集器&quot;&gt;2.8 CMS 收集器&lt;/h3&gt;
&lt;p&gt;CMS（concurrent mark sweep）是以获取最短垃圾收集停顿时间为目标的收集器，CMS 收集器的关注点尽可能缩短垃圾收集时用户线程的停顿时间，停顿时间越短就越适合与用户交互的程序验，CMS 收集器使用的算法是&lt;strong&gt;标记-清除算法&lt;/strong&gt;实现的；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CMS垃圾收集过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）初始标记（Initial-Mark）阶段：这个阶段程序所有的工作线程都将会因为 Stop-the-Wold 机制而出现短暂的的暂停，这个阶段的主要任务标记处 GC Roots 能够关联到的对象。一旦标记完成后就恢复之前被暂停的的所有应用。 由于直接关联对象比较小，所以这里的操作速度非常快。&lt;/p&gt;
&lt;p&gt;2）并发标记（Concurrent-Mark）阶段：从 GC Roots 的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长，但是不需要暂停用户线程，用户线程可以与垃圾回收器一起运行。&lt;/p&gt;
&lt;p&gt;3）重新标记（Remark）阶段：由于并发标记阶段，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了修正并发标记期间因为用户继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常比初始标记阶段长一些，但也远比并发标记阶段时间短。&lt;/p&gt;
&lt;p&gt;4）并发清除（Concurrent-Sweep）阶段： 此阶段清理删除掉标记判断已经死亡的对象，并释放内存空间。由于不需要移动存活对象，所以这个阶段可以与用户线程同时并发运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223611730-1711741369.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（图源自《深入理解Java虚拟机（第2版）》）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并发可达性分析与三色标记（Tri-color Marking）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可达性分析算法理论上要求全过程都基于一个能保障一致性的快照中才能够进行分析。 垃圾回收器的工作流程大体如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;标记出哪些对象是存活的，哪些是垃圾（可回收）；&lt;/li&gt;
&lt;li&gt;进行回收（清除/复制/整理），如果有移动过对象（复制/整理），还需要更新引用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三色标记（Tri-color Marking）作为工具来辅助推导，把遍历对象图过程中遇到的对象，按照“是否访问过”这个条件标记成以下三种颜色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白色：尚未访问过。&lt;/li&gt;
&lt;li&gt;黑色：本对象已访问过，而且本对象引用到的其他对象 也全部访问过了。&lt;/li&gt;
&lt;li&gt;灰色：本对象已访问过，但是本对象引用到的其他对象尚未全部访问完。全部访问后，会转换为黑色。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223628311-2091727231.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;假设现在有白、灰、黑三个集合（表示当前对象的颜色），其遍历访问过程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始时，所有对象都在 【白色集合】中；&lt;/li&gt;
&lt;li&gt;将GC Roots 直接引用到的对象 挪到 【灰色集合】中；&lt;/li&gt;
&lt;li&gt;从灰色集合中获取对象：
&lt;ul&gt;
&lt;li&gt;将本对象 引用到的 其他对象 全部挪到 【灰色集合】中&lt;/li&gt;
&lt;li&gt;将本对象 挪到 【黑色集合】里面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重复步骤3，直至【灰色集合】为空时结束&lt;/li&gt;
&lt;li&gt;结束后，仍在【白色集合】的对象即为 GC Roots 不可达，可以进行回收&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当 Stop The World 时，对象间的引用是不会发生变化的，可以轻松完成标记。 而当需要支持并发标记时，即标记期间应用线程还在继续跑，对象间的引用可能发生变化，多标和漏标的情况就有可能发生。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多标-浮动垃圾&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设已经遍历到E（变为灰色了），此时应用执行了 &lt;code&gt;objD.fieldE = null&lt;/code&gt; ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223638608-11492966.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此刻之后，对象E/F/G是“应该”被回收的。然而因为 E 已经变为灰色了，其仍会被当作存活对象继续遍历下去。最终的结果是：这部分对象仍会被标记为存活，即本轮GC不会回收这部分内存。&lt;/p&gt;
&lt;p&gt;这部分本应该回收但是没    有回收到的内存，被称之为“浮动垃圾”。浮动垃圾并不会影响应用程序的正确性，只是需要等到下一轮垃圾回收中才被清除。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;漏标&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设GC线程已经遍历到E（变为灰色了），此时应用线程先执行了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var G = objE.fieldG;
objE.fieldG = null; // 灰色E 断开引用 白色G
objD.fieldG = G; // 黑色D 引用 白色G
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223652024-600222376.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时切回 GC 线程继续跑，因为 E 已经没有对 G 的引用了，所以不会将 G 放到灰色集合；尽管因为 D 重新引用了 G，但因为D已经是黑色了，不会再重新做遍历处理。&lt;/p&gt;
&lt;p&gt;最终导致的结果是：G 会一直停留在白色集合中，最后被当作垃圾进行清除。这直接影响到了应用程序的正确性，是不可接受的。&lt;/p&gt;
&lt;p&gt;漏标只有同时满足以下两个条件时才会发生：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;灰色对象断开了白色对象的引用：即灰色对象原来成员变量的引用发生了变化&lt;/li&gt;
&lt;li&gt;黑色对象重新引用了该白色对象：即黑色对象成员变量增加了新的引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从代码的角度看：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var G = objE.fieldG;   // 1. 读取对象 E 的成员变量 fieldG 的引用值（对象 G）
objE.fieldG = null;    // 2. 对象 E 往其成员变量 fieldG 写入 null 值
objD.fieldG = G;       // 3. 对象 D 往其成员变量 fieldG 写入 对象G
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只要在上面这三步中的任意一步将对象 G 记录起来，然后作为灰色对象再进行遍历即可。&lt;br/&gt;
比如放到一个特定的集合，等初始的 GC Roots 遍历完（并发标记），该集合的对象遍历即可（重新标记）。&lt;/p&gt;
&lt;p&gt;重新标记是需要 STW 的，因为应用程序一直在跑的话，该集合可能会一直增加新的对象，导致永远都跑不完。当然，并发标记期间也可以将该集合中的大部分先跑了，从而缩短重新标记STW的时间，这个是优化问题了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CMS收集器三个缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CMS 收集器对 CPU 资源非常敏感。CMS 默认启动的回收线程数是 &lt;code&gt;(处理器核心数量 + 3) / 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CMS 收集器无法处理浮动垃圾，可能出现 Concurrent Mode Failure 失败而导致另一次 Full GC 的产生&lt;/li&gt;
&lt;li&gt;空间碎片：CMS是一款基于标记-清除算法实现的收集器，所有会有空间碎片的现象
&lt;ul&gt;
&lt;li&gt;开关参数 &lt;code&gt;-XX:+UseCMS-CompactAtFullCollection&lt;/code&gt; （默认是开启的，JDK 9开始废弃），用于在 CMS 收集器不得不进行 Full GC 时开启内存碎片的合并整理过程，由于这个内存整理必须移动存活对象，是无法并发的&lt;/li&gt;
&lt;li&gt;另外一个参数 &lt;code&gt;-XX:CMSFullGCsBeforeCompaction&lt;/code&gt;（JDK 9开始废弃），这个参数的作用是要求 CMS 收集器在执行过若干次（数量由参数值决定） 不整理空间的 Full GC 之后，下一次进入 Full GC 前会先进行碎片整理（默认值为0，表 示每次进入Full GC时都进行碎片整理）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;29--g1-收集器&quot;&gt;2.9  G1 收集器&lt;/h3&gt;
&lt;blockquote&gt;

&lt;/blockquote&gt;
&lt;p&gt;Garbage First是一款面向服务端应用的垃圾收集器，主要针对配备多核CPU及大容量内存的机器，以极高概率满足GC停顿时间的同时，还兼具高吞吐量的性能特征。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223721614-679593556.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G1 把内存划分为多个独立的区域 Region&lt;/li&gt;
&lt;li&gt;G1 仍然保留分代思想，保留了新生代和老年代，但他们不再是物理隔离，而是一部分Region的集合&lt;/li&gt;
&lt;li&gt;G1 能够充分利用多CPU、多核环境硬件优势，尽量缩短 STW 的时间&lt;/li&gt;
&lt;li&gt;G1 整体整体采用标记整理算法，局部是采用复制算法，不会产生内存碎片&lt;/li&gt;
&lt;li&gt;G1 的停顿可预测，能够明确指定在一个时间段内，消耗在垃圾收集上的时间不超过设置时间&lt;/li&gt;
&lt;li&gt;G1 跟踪各个Region里面垃圾的价值大小，会维护一个优先列表，每次根据允许的时间来回收价值最大的区域，从而保证在有限事件内高效的收集垃圾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Region区域&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;G1 不再坚持固定大小以及固定数量的分代区域划分，而是把连续的 Java 堆划分为多个独立区域（Region），每一个 Region 都可以根据需要扮演新生代的 Eden 空间、 Survivor 空间、老年代空间。&lt;/p&gt;
&lt;p&gt;① 使用G1收集器时，它将整个 Java 堆划分成约2048个大小相同的独立 Region 块，每个 Region 块大小根据堆空间的实际大小而定，为2的N次幂，即1MB，2MB，4MB，8MB，16MB，32MB。&lt;br/&gt;
② 虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region (不需要连续)的集合。通过Region的动态分配方式实现逻辑上的连续。&lt;br/&gt;
③ G1垃圾收集器还增加了一种新的内存区域，叫做 Humongous 内存区域。主要用于存储大对象，如果超过 1.5 个 Region，就放到 H 区。一般被视为老年代。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;G1 GC过程&lt;/strong&gt;&lt;br/&gt;
G1 提供了两种 GC 模式，Young GC 和 Mixed GC，两种均是完全 Stop The World 的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Young GC：选定所有年轻代里的 Region，通过控制年轻代的 Region 个数，即年轻代内存大小，来控制 Young GC 的时间开销。&lt;/li&gt;
&lt;li&gt;Mixed GC：选定所有年轻代里的 Region，外加根据 global concurrent marking 统计得出收集收益高的若干老年代 Region。在用户指定的开销目标范围内尽可能选择收益高的老年代 Region。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;初始标记（Initial Mark，STW）：和 CMS 一样只标记 GC Roots 直接关联的对象&lt;br/&gt;
并发标记（Concurrent Mark）：进行 GC Roots Traceing 过程&lt;br/&gt;
最终标记（Remark，STW）：修正并发标记期间，因程序运行导致发生变化的那一部分对象&lt;br/&gt;
筛选回收（Cleanup，STW）：根据时间来进行价值最大化收集&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223732984-1488529164.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（图源自《深入理解Java虚拟机（第2版）》）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;G1 Young GC&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行 YoungGC 前：堆分为大约2000个区域。最小大小为 1Mb，最大大小为 32Mb。蓝色区域保存老年代对象，绿色区域保存年轻对象。&lt;/li&gt;
&lt;li&gt;执行 YoungGC 时：将存活的对象（即复制或移动）到一个或多个幸存者区域。如果满足老化阈值，则某些对象将被提升到老年代区域。&lt;/li&gt;
&lt;li&gt;执行 YoungGC 后：最近升级的对象以深蓝色显示。幸存者区域为绿色。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223753503-2005955969.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223802758-459684496.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223811369-1655336037.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;堆是单个内存空间，分为多个区域。&lt;/li&gt;
&lt;li&gt;年轻代内存由一组非连续区域组成。&lt;/li&gt;
&lt;li&gt;年轻一代的垃圾收集器或年轻的 GC 出现 STW 。将停止所有应用程序线程以进行操作。&lt;/li&gt;
&lt;li&gt;年轻的 GC 使用多个线程并行完成。&lt;/li&gt;
&lt;li&gt;将活动对象复制到新的幸存者或老年代的地区。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;G1 Mix GC&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始标记阶段（Initial Marking，STW）：存活的对象的初始标记背负在年轻的垃圾收集器上。在日志中，此标记为 GC pause (young)(inital-mark) 。&lt;/li&gt;
&lt;li&gt;并发标记阶段（Concurrent Marking）：如果找到空白区域（如“ X”所示），则在 Remark 阶段将其立即删除。另外，计算确定活跃度的信息。&lt;/li&gt;
&lt;li&gt;最终标记阶段（Remark，STW）：空区域将被删除并回收。现在可以计算所有区域的区域活跃度。&lt;/li&gt;
&lt;li&gt;筛选回收阶段/复制清理阶段（Copying/Cleanup，STW）： G1选择“活度”最低的区域，这些区域可以被最快地收集。然后与年轻的GC同时收集这些区域。这在日志中表示为[GC pause (mixed)] 。因此，年轻代和老年代都是同时收集的。&lt;/li&gt;
&lt;li&gt;筛选回收阶段-(复制/清理)阶段之后：选定的区域已被收集并压缩为图中所示的深蓝色区域和深绿色区域。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223826451-1497812212.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223933876-636201427.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223941852-395806501.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102223955389-1660295970.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1282178/202111/1282178-20211102224004236-656444845.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并发标记阶段
&lt;ul&gt;
&lt;li&gt;活动信息是在应用程序运行时同时计算的。&lt;/li&gt;
&lt;li&gt;该活动信息标识在疏散暂停期间最适合回收的区域。&lt;/li&gt;
&lt;li&gt;像 CMS 中没有清扫阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最终标记阶段
&lt;ul&gt;
&lt;li&gt;使用开始快照（SATB）算法，该算法比 CMS 使用的算法快得多。&lt;/li&gt;
&lt;li&gt;完全回收空区域。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;筛选回收阶段
&lt;ul&gt;
&lt;li&gt;同时回收年轻一代和老一代。&lt;/li&gt;
&lt;li&gt;老年代地区是根据其活跃度来选择的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;210-zgc、epsilon、shenandoah&quot;&gt;2.10 ZGC、Epsilon、Shenandoah&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Epsilon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JDK11 新增的GC，一个处理内存分配但不实现任何实际内存回收机制的GC，一旦可用的Java堆耗尽，JVM将关闭。如果有 &lt;code&gt;System.gc()&lt;/code&gt; 调用，实际上什么也不会发生， 因为没有内存回收，这个实现可能会警告用户尝试强制GC是徒劳。&lt;/p&gt;
&lt;p&gt;使用方式：&lt;code&gt;-XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;性能测试（它可以帮助过滤掉 GC 引起的性能假象）&lt;/li&gt;
&lt;li&gt;内存压力测试（例如知道测试用例应该分配不超过 1GB 的内存，我们可以使用 &lt;code&gt;-XX:+UnlockExperimentalVMOptions –XX:+UseEpsilonGC -Xmx1g&lt;/code&gt;，如果程序有问题则程序会崩溃）&lt;/li&gt;
&lt;li&gt;非常短的 JOB 任务（GC 清理可能会让时间更长）&lt;/li&gt;
&lt;li&gt;VM 接口测试&lt;/li&gt;
&lt;li&gt;Last-drop 延迟&amp;amp;吞吐改进&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ZGC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ZGC的设计目标是：支持 TB 级内存容量，暂停时间低（&amp;lt;10ms），对整个程序吞吐量的影响小于15%。 将来还可以扩展实现机制，以支持不少令人兴奋的功能，例如多层堆（即热对象置于 DRAM 和冷对象置于 NVMe 闪存），或压缩堆。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK11 新增：ZGC （实验） &lt;code&gt;-XX:+UnlockExperimentalVMOptions -XX:+UseZGC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;JDK13 更新：ZGC 支持的最大堆大小从 4TB 增加到 16TB&lt;/li&gt;
&lt;li&gt;JDK14 更新：ZGC 支持在 Windows 上作为实验功能&lt;/li&gt;
&lt;li&gt;JDK15 正式：ZGC 不再标记为实验功能可以在生产环境中使用 &lt;code&gt;-XX:+UseZGC&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Shenandoah&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JDK12 新增的GC，低暂停时间垃圾收集器（实验性）Shenandoah的暂停时间与堆大小无关，这意味着无论堆是200MB还是200GB，都将具有相同的一致暂停时间。它的 evacuation 阶段工作能通过与正在运行中 Java 工作线程同时进行（即并发，concurrent），从而减少 GC 的停顿时间。&lt;/p&gt;
&lt;p&gt;使用方法： &lt;code&gt;-XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;某些 JDK 会在 build 时通过 &lt;code&gt;--with-jvm-features=-shenandoahgc&lt;/code&gt; 来禁用 Shenandoah。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内容为之前学习笔记整理，如果有问题请指正！（引用图片已标记来源）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>17ce1eb1dda3f1df6bab231376447331</guid>
<title>CameraX 曝光补偿 API 入门指南</title>
<link>https://toutiao.io/k/376c38j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-hnrfcf&quot; options=&quot;[object Object]&quot;&gt;&lt;p&gt;在移动端发展的过程中，相机设备对于推动移动设备创新起到了举足轻重的作用，而相机曝光则是能够拍摄出非凡品质照片的关键要素。在本文中，我将为大家详解移动端开发者在处理相机曝光时所遇到的挑战。之后我会为大家介绍新的 CameraX 曝光补偿 (Exposure Compensation) API 如何帮助开发者应对这些挑战，使快速拍摄高品质照片变得更加简单。最后，我将为大家展示如何在您的应用中使用该 API。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;背景&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在摄影中，曝光是决定最终相机所呈现图像的最重要因素之一，因此大多数摄影师都极力将曝光调至最佳。自动曝光 (AE) 模式在大多数常见拍摄场景下的效果都不错，比如自动快速拍照。然而在某些特定条件下，AE 模式会为了照片的整体质量而做出一些妥协，而这些妥协有时并不是您想要的。其中一个例子就是逆光，例如，在室内朝向窗户或者其它光源的位置拍摄，或者在室外拍摄，拍摄对象的后方刚好是太阳。在这些拍摄场景中，AE 模式会因为明亮的背景 (照片中高亮的区域) 而对照片进行适当曝光，但是处于黑暗前景中的主体就会变得过于昏暗或者成为剪影效果。图 1 展示的是在相同条件 (室内逆光) 下使用不同曝光进行拍摄的三张照片。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-dded1254c17d8643b620c0e8347359a8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;499&quot; data-rawheight=&quot;227&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-dded1254c17d8643b620c0e8347359a8_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;499&quot; data-rawheight=&quot;227&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-dded1254c17d8643b620c0e8347359a8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-dded1254c17d8643b620c0e8347359a8_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;AE 对于照片的整体质量控制得很好，但是更高的曝光确实能够捕获到 Android 公仔的更多画面细节。&lt;/p&gt;&lt;p&gt;传统操作中，摄影师通过调整如下三个参数来达到满意的曝光:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;光圈: 镜片的打开程度，它控制相机的进光量&lt;/li&gt;&lt;li&gt;快门速度: 照片曝光的持续时间&lt;/li&gt;&lt;li&gt;ISO (国际标准化组织): 相机感光元件对捕获光线的敏感程度&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;每个参数对于图像都有特殊的作用: 光圈可以调整景深效果，快门速度可以虚化运动的过程或者定格运动的瞬间，而更高的 ISO 会增加图像噪点。其中用到相当精准的数学计算，但是这些参数设置的不同组合可以获得相同的整体曝光效果，以及在这个过程中获得高水准的完美曝光数值。为了辅助补偿曝光，CameraX 实现了曝光补偿 API。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;实现曝光补偿 API&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;曝光补偿 API 根据生成的自动曝光值，通过曝光补偿指数调整曝光补偿度。曝光补偿指数可以为正值 (用于提高照片亮度) 或者负值 (降低照片亮度)。它将整体曝光范围映射到补偿指数的取值区间，并将曝光总量映射到 EV 步长。相机设备内部会根据曝光指数改变曝光，减少控制其它参数的操作并且达到同一效果。&lt;/p&gt;&lt;p&gt;以图 1 为例，相机的默认配置无法为我们希望对焦的主体提供足够的亮度，所以我们可以使用正值指数的曝光补偿配置来获得两倍或者四倍的曝光，从而突出主体。通过改变曝光补偿指数，相机内部会控制快门速度、光圈和 ISO 以获得合适的曝光。&lt;/p&gt;&lt;p&gt;要获得补偿指数，CameraX 实现了以下内容:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/reference/kotlin/androidx/camera/core/CameraControl%23setexposurecompensationindex&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CameraControl::setExposureCompensationIndex&lt;/a&gt;&lt;/b&gt;，用于设置新的曝光补偿指数。&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/reference/kotlin/androidx/camera/core/ExposureState&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ExposureState&lt;/a&gt;&lt;/b&gt; 用于曝光补偿性能和当前配置，包括:&lt;/li&gt;&lt;li&gt;支持调整补偿&lt;/li&gt;&lt;li&gt;所支持的补偿范围&lt;/li&gt;&lt;li&gt;所支持的补偿步长&lt;/li&gt;&lt;li&gt;当前补偿指数值&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;我们来看看在 CameraX 应用中如何使用 API 来创建曝光合适的照片。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;使用曝光补偿 API&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;要在应用中使用曝光补偿 API，您需要完成如下工作:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;查询曝光补偿范围&lt;/li&gt;&lt;li&gt;设置新的曝光补偿指数&lt;/li&gt;&lt;li&gt;当 CameraX 确认后继续后续操作&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;b&gt;查询曝光补偿指数的范围&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;曝光补偿值的范围依赖 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/reference/android/hardware/camera2/CameraCharacteristics%23INFO_SUPPORTED_HARDWARE_LEVEL&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;相机设备的配置和硬件级别&lt;/a&gt;&lt;/b&gt;；应用可以通过 ExposureState 接口查询所支持的取值范围。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;camera&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cameraProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindToLifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cameraInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exposureState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exposureCompensationRange&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;设置新的曝光补偿指数&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;如果照片显得较暗，在相机原本的修正曝光基础上设置一个正值的曝光补偿指数来提高亮度；同理，如果照片显得过亮，则设置一个负值。这可以通过 setExposureCompensationIndex() 来实现:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CameraControl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setExposureCompensationIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListenableFuture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认情况下，曝光补偿指数的值从 &quot;0&quot; 开始，新的指数值必须在相机设备所支持的范围内变化。否则 CameraX 会抛出 &lt;code&gt;IllegalArgument&lt;/code&gt; 错误。请注意如果相机设备不支持曝光补偿调节，CameraX 所返回支持的取值范围是 [0,0]。&lt;/p&gt;&lt;p&gt;举个例子，下述代码中当用户点击了 UI 中的按钮会提高曝光补偿指数直到曝光指数达到所支持的最大值为止:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;exposureIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;camera&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cameraProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindToLifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lifecycleOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;getCameraSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;preview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;imageCapture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;evButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setOnClickListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cameraInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exposureState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exposureCompensationRange&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exposureIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cameraControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setExposureCompensationIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exposureIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;ev&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cameraInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exposureState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exposureCompensationStep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exposureIndex&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CameraXLog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;EV: $ev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;setExposureCompensationIndex()&lt;/code&gt; 是 &lt;code&gt;async&lt;/code&gt; 函数，每个相机只能响应一个未处理的请求。如果应用在之前的调用未被响应之前再次调用 &lt;code&gt;setExposureCompensationIndex()&lt;/code&gt;，新的调用请求就会替代之前的请求，而之前的请求会被取消并抛出 &lt;code&gt;OperationCanceledException&lt;/code&gt;。通常，新的指数值会被迅速启用，输出流的曝光会随着 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/training/camerax/architecture%23combine-use-cases&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;绑定用例&lt;/a&gt;&lt;/b&gt; 变化。如果应用需要知道特定请求的准确执行时间和结果，可以在函数返回的 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/reference/androidx/camera/core/CameraControl%23setExposureCompensationIndex%28int%29&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ListenableFuture&lt;/a&gt;&lt;/b&gt; 之上注册监听器。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;关联补偿指数和曝光值 (EV)&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;曝光值 (EV) 是一个用于表示曝光补偿的光照度差异的度量单位。+1 EV 表示两倍光照，+2 EV 是四倍光照，依此类推。应用可以将相同的&lt;i&gt;曝光&lt;/i&gt;值应用到各种相机，甚至不同的设备，来获得相似的曝光，但是应用不应该针对相同的目标效果直接使用相同的&lt;i&gt;指数&lt;/i&gt;值，因为每个指数值是相机的专属值。&lt;/p&gt;&lt;p&gt;补偿 API 中，曝光值是通过如下公式进行计算的:&lt;/p&gt;&lt;blockquote&gt;曝光值 (EV) = exposure_compensation_index * compensation_step&lt;/blockquote&gt;&lt;p&gt;上述公式中提到的 compensation_step 是曝光值可被修改的最小单位。请注意 compensation_step 也依赖相机设备。应用可以通过 &lt;code&gt;ExposureState&lt;/code&gt; 查询相机的 compensation_step，并且可以按照下面所示计算曝光值:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;camera&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cameraProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindToLifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;exposureValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cameraInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exposureState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exposureCompensationStep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exposureIndex&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例如: exposure_compensation_index 等于 6，compensation_step 等于 ⅓，那么曝光补偿计算为 +2 EV，也就是&lt;b&gt;两倍&lt;/b&gt;的默认曝光值。&lt;/p&gt;&lt;p&gt;compensation_step 的 step_size 取值通常为 ⅓ 或者 ½，较少情况下，有些设备可能会支持 1 或者甚至 ¼。所能支持的最大曝光值一般是 2 EV 或者 3 EV。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;CameraX 曝光补偿 API 的可用性&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;曝光补偿 API 是在 &lt;code&gt;android.camera:camera-core:1.0.0-beta09&lt;/code&gt; 中首次以实验方式发布。&lt;/p&gt;&lt;p&gt;该 API 在版本 &lt;code&gt;android.camera:camera-core:1.1.0-alpha06&lt;/code&gt; 中完成了实验阶段，成为正式版本 CameraX API 的一部分。&lt;/p&gt;&lt;p&gt;要获得最新的发布版本，请查阅 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/jetpack/androidx/releases/camera&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;官方 CameraX 版本说明&lt;/a&gt;&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;总结&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/wenhungwww/android-camerax-ev-sample&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;&lt;/b&gt; 上可以找到 CameraX 曝光补偿的示例代码。结合 CameraX API 的其它部分，曝光补偿 API 可以帮助开发者实现富有创意的 Android 相机应用，并在移动应用的海洋中脱颖而出。如果您有兴趣了解更多关于 CameraX 的内容，请参阅 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/training/camerax&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;官方文档&lt;/a&gt;&lt;/b&gt;，如果希望能够持续获得 CameraX 的最新进展，可以加入 CameraX 讨论组。欢迎大家提出宝贵意见，可以在 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//groups.google.com/a/android.com/g/camerax-developers&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CameraX 讨论组&lt;/a&gt;&lt;/b&gt; 中和我们交流，或者创建 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//issuetracker.google.com/issues/new%3Fcomponent%3D618491%26template%3D1257717&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CameraX issues&lt;/a&gt;&lt;/b&gt; 提交您遇到的问题。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;相关阅读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;欢迎您 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//services.google.cn/fb/forms/androiddevswechat2/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;点击这里&lt;/a&gt;&lt;/b&gt; 向我们提交反馈，或分享您喜欢的内容、发现的问题。您的反馈对我们非常重要，感谢您的支持！&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>79528914c55048800ea6bee60b84266a</guid>
<title>回归现实：Go Leader 对 1.18 泛型的期望</title>
<link>https://toutiao.io/k/833y93c</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前段时间根据 Go 泛型的最新动态，我写了一篇《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247492667&amp;amp;idx=1&amp;amp;sn=a2ce6a7db7365831b6e6f651aa5bbaa0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;出泛型后 API 怎么办？Go 开发者要注意了&lt;/a&gt;》文章，引发了不少小伙伴的热议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 核心开发团队的现任 Leader
@Russ Cox 在 golang-dev 中正式发表《expectations for generics in Go 1.18》对 Go 泛型给出了 “期待”，其实大家&lt;strong&gt;可以认为是后续泛型的配套迭代计划&lt;/strong&gt;了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100009145&quot; data-ratio=&quot;0.12937062937062938&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4huRY4YpWHDFZxDkQTibpYPz7HfHTy14sMojGSDZBhhaDEoribdoH61MPKpAwGhRZYfCMQiavvTuscWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2288&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不出现严重的问题，Go 1.18 将会包括对泛型的支持，并且这次泛型的支持将会是有史以来最大的一次语言变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对以下几点有顾虑：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，煎鱼带大家一起了解 Russ Cox 发表的 Go 泛型进程，知悉官方一手消息。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;最佳实践&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 团队表示不知道使用泛型的最佳实践是什么，所以给出的官方文档将无法就何时使用泛型和何时不使用泛型给出精确、明确的答案，只可以给出粗略的指导。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此处可以参考《Effective Go》的最初版本，是在不间断地写了一整年的 Go 代码后，才正式输出的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100009146&quot; data-ratio=&quot;0.5098039215686274&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4huRY4YpWHDFZxDkQTibpYPzLbgCIicyUXWFU68PKhanWXHpics1OE8351VvwISiaD1X9KGMgjMKbiarJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2856&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按照现有的计划，官方只会提供关于如何使用泛型的文档，暂时无法提供任何关于风格、最佳实践的规定性文档。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在提供的标准库上，先是已经通过提案的 maps 和 slices库会先放到 golang.org/x/exp 中作为实验，不会保证向后兼容。待成熟后，再推广到标准库中。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100009144&quot; data-ratio=&quot;0.44825072886297374&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4huRY4YpWHDFZxDkQTibpYPzqwQ6xk01k06LrSY0O2ZwaHCMofRl7kaBYY5kDoNqD1wbCs3ibQq0H1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2744&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以明确，Go 泛型出来后，社区就会陆续开始百花齐放，接着有官方输出推荐方法了，历史是如此的相似。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;生产经验&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前 Go 团队没有关于泛型的生产经验，因此会在文档中给出明确提示，让大家在生产中使用泛型的时候应该适当谨慎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;泛型出来后，会陆续涉及到大量的重写工作，但是由于现在处于中间阶段。正在重写的 Go 1.18 工具链去同时适配泛型、非泛型代码是需要时间和经验的，有一定的风险。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此泛型出来后，可能会出现一些意想不到的问题，仅在生产发现（教训）。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;兼容性承诺&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go1.18 会和其他 Go1.x 版本一样，保证向后兼容的承诺：不会破坏用 Go 1.18 构建的代码，包括使用泛型的代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是最坏的情况，如果发现 Go 1.18 的语义有一些致命的问题，并需要改变它们（例如：在Go 1.19 中）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将会使用 go.mod 文件的 go 行来确定该模块中的源文件是期待 Go 1.18 还是 Go 1.19+ 语义，以此实现版本控制。但目前来看，不需要这样做。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也建议急于使用 Go 泛型的开源库作者，做好泛型和非泛型版本代表的支持和隔离，这样对用户会更加的友好。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以明确的是，Go 泛型的整体推进方案，在这篇文章中均已说明。Go 官方团队也与许多第三方工具的作者进行沟通。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三方工具可能不会在 Go 1.18 发布时就完全支持泛型，这会由各作者自行根据自己的时间表来更新。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;煎鱼猜测推进节奏就是：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持泛型语法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;观察。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;推进标准/工具库。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;逐步替换。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;修 BUG。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;观察、优化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;生产可用。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大概需要 2~3 个 Go 版本，需要 1~2 年，Go 泛型的各类配套组件就会基本完善，可用，转为持续优化了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;你对 Go 官方的推进计划此怎么看呢&lt;/strong&gt;，欢迎在评论区留言和交流！&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100009142&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4huRY4YpWHDFZxDkQTibpYPz4tR7J9psianEP0bglu39w2VOrhNxx76v2Q0THrB3stmS9HB39ABvhwQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;344&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注煎鱼，吸取他的知识 👆&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.07106598984771574&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/486RHs1WbcgGib6o96dHbvGUGGwPicd8wusUGH1cXR29tM4bO0lNzialzkQhvU6m5ZUdaKibmcF2OQayjMe9Bia6iaXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;394&quot; data-fileid=&quot;100009143&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是煎鱼，&lt;span&gt;出版过 Go 畅销书《Go 语言编程之旅》，再到获得 GOP（Go 领域最有观点专家）荣誉，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247483854&amp;amp;idx=1&amp;amp;sn=ec422fbf4d846975f2930ddeb5e81373&amp;amp;chksm=f9041493ce739d85a4b987eece14da627206cdad798f645cc770868312e4a22b6df24804f186&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;点击蓝字查看我的出书之路&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;点击蓝字查看我的出书之路&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;日常分享高质量文章，输出 Go 面试、工作经验、架构设计，&lt;span&gt;加微信拉读者交流群，和大家交流！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;&gt;来一个反馈！&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>279246eb94136a4f8e867458dbfd7dca</guid>
<title>Java 17 新功能介绍</title>
<link>https://toutiao.io/k/zsach85</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;post-content&quot; id=&quot;article-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;/img/bilibili-loading.gif&quot; data-lazy-src=&quot;https://img.wdbyte.com/img/21/11veo8wiv.jpg?x-oss-process=style/1000px&quot; alt=&quot;JDK 发布历程&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java 17&lt;/strong&gt; 在 2021 年 9 月 14 日正式发布，Java 17 是一个长期支持（LTS）版本，这次更新共带来 14 个新功能。&lt;/p&gt;
&lt;p&gt;OpenJDK Java 17 下载：&lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://jdk.java.net/archive/&quot;&gt;https://jdk.java.net/archive/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenJDK Java 17 文档：&lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/projects/jdk/17/&quot;&gt;https://openjdk.java.net/projects/jdk/17/&lt;/a&gt;&lt;/p&gt;
&lt;span id=&quot;more&quot;/&gt;


&lt;blockquote&gt;
&lt;p&gt; 此文章属于&lt;a href=&quot;https://www.wdbyte.com/java-feature&quot;&gt; Java 新特性教程&lt;/a&gt; 系列，会介绍 Java 每个版本的新功能，可以点击浏览。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-JEP-306：-恢复始终严格的浮点语义&quot;&gt;&lt;a href=&quot;#1-JEP-306：-恢复始终严格的浮点语义&quot; class=&quot;headerlink&quot; title=&quot;1. JEP 306： 恢复始终严格的浮点语义&quot;/&gt;1. JEP 306： 恢复始终严格的浮点语义&lt;/h2&gt;&lt;p&gt;既然是恢复严格的浮点语义，那么说明在某个时间点之前，是始终严格的浮点语义的。其实在 Java SE 1.2 之前，所有的浮点计算都是严格的，但是以当初的情况来看，过于严格的浮点计算在当初流行的 x86 架构和 x87 浮点协议处理器上运行，需要大量的额外的指令开销，所以在 Java SE 1.2 开始，需要手动使用关键字 &lt;strong&gt;strictfp&lt;/strong&gt;（strict float point） 才能启用严格的浮点计算。&lt;/p&gt;
&lt;p&gt;但是在 2021 年的今天，硬件早已发生巨变，当初的问题已经不存在了，所以从 Java 17 开始，恢复了始终严格的浮点语义这一特性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;扩展&lt;/strong&gt;：&lt;em&gt;&lt;strong&gt;strictfp&lt;/strong&gt;&lt;/em&gt; 是 Java 中的一个关键字，大多数人可能没有注意过它，它可以用在类、接口或者方法上，被 strictfp 修饰的部分中的 float 和 double 表达式会进行严格浮点计算。&lt;/p&gt;
&lt;p&gt;下面是一个示例，其中的 &lt;code&gt;testStrictfp()&lt;/code&gt; 被 &lt;code&gt;strictfp&lt;/code&gt; 修饰。&lt;/p&gt;
&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wdbyte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;testStrictfp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;strictfp&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;testStrictfp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;float&lt;/span&gt; aFloat &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.6666666666666666666f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; aDouble &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.88888888888888888d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; aFloat &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; aDouble&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;sum: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;2-JEP-356：增强的伪随机数生成器&quot;&gt;&lt;a href=&quot;#2-JEP-356：增强的伪随机数生成器&quot; class=&quot;headerlink&quot; title=&quot;2. JEP 356：增强的伪随机数生成器&quot;/&gt;2. JEP 356：增强的伪随机数生成器&lt;/h2&gt;&lt;p&gt;为伪随机数生成器 RPNG（pseudorandom number generator）增加了新的接口类型和实现，让在代码中使用各种 PRNG 算法变得容易许多。&lt;/p&gt;
&lt;p&gt;这次增加了 &lt;code&gt;RandomGenerator&lt;/code&gt; 接口，为所有的 PRNG 算法提供统一的 API，并且可以获取不同类型的 PRNG 对象流。同时也提供了一个新类 &lt;code&gt;RandomGeneratorFactory&lt;/code&gt; 用于构造各种 &lt;code&gt;RandomGenerator&lt;/code&gt; 实例，在 &lt;code&gt;RandomGeneratorFactory&lt;/code&gt; 中使用 &lt;code&gt;ServiceLoader.provider&lt;/code&gt; 来加载各种 PRNG 实现。&lt;/p&gt;
&lt;p&gt;下面是一个使用示例：随便选择一个 PRNG 算法生成 5 个 10 以内的随机数。&lt;/p&gt;
&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wdbyte&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;java17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;random&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RandomGenerator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;random&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RandomGeneratorFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/**
 * @author niulang
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; JEP356 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;RandomGeneratorFactory&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RandomGenerator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; l128X256MixRandom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RandomGeneratorFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;L128X256MixRandom&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 使用时间戳作为随机数种子&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;RandomGenerator&lt;/span&gt; randomGenerator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; l128X256MixRandom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;randomGenerator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到输出：&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;7
3
4
4
6&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以遍历出所有的 PRNG 算法。&lt;/p&gt;
&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;RandomGeneratorFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;factory &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到输出：&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;LXM:L32X64MixRandom
LXM:L128X128MixRandom
LXM:L64X128MixRandom
Legacy:SecureRandom
LXM:L128X1024MixRandom
LXM:L64X128StarStarRandom
Xoshiro:Xoshiro256PlusPlus
LXM:L64X256MixRandom
Legacy:Random
Xoroshiro:Xoroshiro128PlusPlus
LXM:L128X256MixRandom
Legacy:SplittableRandom
LXM:L64X1024MixRandom&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到 &lt;code&gt;Legacy:Random&lt;/code&gt; 也在其中，新的 API 兼容了老的 &lt;code&gt;Random&lt;/code&gt; 方式，所以你也可以使用新的 API 调用 &lt;code&gt;Random&lt;/code&gt; 类生成随机数。&lt;/p&gt;
&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 使用 Random&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;RandomGeneratorFactory&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RandomGenerator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; l128X256MixRandom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RandomGeneratorFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Random&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 使用时间戳作为随机数种子&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;RandomGenerator&lt;/span&gt; randomGenerator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; l128X256MixRandom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;randomGenerator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;扩展阅读：&lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/jeps/356&quot;&gt;增强的伪随机数生成器&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;3-JEP-382：使用新的-macOS-渲染库&quot;&gt;&lt;a href=&quot;#3-JEP-382：使用新的-macOS-渲染库&quot; class=&quot;headerlink&quot; title=&quot;3. JEP 382：使用新的 macOS 渲染库&quot;/&gt;3. JEP 382：使用新的 macOS 渲染库&lt;/h2&gt;&lt;p&gt;macOS 为了提高图形的渲染性能，在 2018 年 9 月抛弃了之前的 OpenGL 渲染库 ，而使用了 Apple Metal 进行代替。Java 17 这次更新开始支持 Apple Metal，不过对于 API 没有任何改变，这一些都是内部修改。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;扩展阅读：&lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://developer.apple.com/documentation/macos-release-notes/macos-mojave-10_14-release-notes?preferredLanguage=occ#3035786&quot;&gt;macOS Mojave 10.14 Release Notes&lt;/a&gt;，&lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://developer.apple.com/metal/&quot;&gt;Apple Metal&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;4-JEP-391：支持-macOS-AArch64-架构&quot;&gt;&lt;a href=&quot;#4-JEP-391：支持-macOS-AArch64-架构&quot; class=&quot;headerlink&quot; title=&quot;4. JEP 391：支持 macOS/AArch64 架构&quot;/&gt;4. JEP 391：支持 macOS/AArch64 架构&lt;/h2&gt;&lt;p&gt;起因是 Apple 在 2020 年 6 月的 WWDC 演讲中宣布，将开启一项长期的将 Macintosh 计算机系列从 x64 过度到 AArch64 的长期计划，因此需要尽快的让 JDK 支持 macOS/AArch64 。&lt;/p&gt;
&lt;p&gt;Linux 上的 AArch64 支持以及在 Java 16 时已经支持，可以查看之前的文章了解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;扩展：&lt;a href=&quot;https://www.wdbyte.com/java/java-16/&quot;&gt;Java 16 新功能介绍 - JEP 386&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;5-JEP-398：删除已弃用的-Applet-API&quot;&gt;&lt;a href=&quot;#5-JEP-398：删除已弃用的-Applet-API&quot; class=&quot;headerlink&quot; title=&quot;5. JEP 398：删除已弃用的 Applet API&quot;/&gt;5. JEP 398：删除已弃用的 Applet API&lt;/h2&gt;&lt;p&gt;Applet 是使用 Java 编写的可以嵌入到 HTML 中的小应用程序，嵌入方式是通过普通的 HTML 标记语法，由于早已过时，几乎没有场景在使用了。&lt;/p&gt;
&lt;p&gt;示例：嵌入 Hello.class&lt;/p&gt;
&lt;pre class=&quot;language-html&quot; data-language=&quot;html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;applet&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Hello.class&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;200&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;applet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Applet API 在 Java 9 时已经标记了废弃，现在 Java 17 中将彻底删除。&lt;/p&gt;
&lt;h2 id=&quot;6-JEP-403：更强的-JDK-内部封装&quot;&gt;&lt;a href=&quot;#6-JEP-403：更强的-JDK-内部封装&quot; class=&quot;headerlink&quot; title=&quot;6. JEP 403：更强的 JDK 内部封装&quot;/&gt;6. JEP 403：更强的 JDK 内部封装&lt;/h2&gt;&lt;p&gt;如 Java 16 的 JEP 396 中描述的一样，为了提高 JDK 的安全性，使 &lt;code&gt;--illegal-access&lt;/code&gt; 选项的默认模式从允许更改为拒绝。通过此更改，JDK 的内部包和 API（&lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/jeps/260#Description&quot;&gt;关键内部 API&lt;/a&gt; 除外）将不再默认打开。&lt;/p&gt;
&lt;p&gt;但是在 Java 17 中，除了 &lt;code&gt;sun.misc.Unsafe&lt;/code&gt; ，使用 &lt;code&gt;--illegal-access&lt;/code&gt; 命令也不能打开 JDK 内部的强封装模式了，除了 &lt;code&gt;sun.misc.Unsafe&lt;/code&gt; API .&lt;/p&gt;
&lt;p&gt;在 Java 17 中使用 &lt;code&gt;--illegal-access&lt;/code&gt; 选项将会得到一个命令已经移除的警告。&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;➜  bin ./java -version
openjdk version &quot;17&quot; 2021-09-14
OpenJDK Runtime Environment (build 17+35-2724)
OpenJDK 64-Bit Server VM (build 17+35-2724, mixed mode, sharing)
➜  bin ./java --illegal-access=warn
OpenJDK 64-Bit Server VM warning: Ignoring option --illegal-access=warn; support was removed in 17.0&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;扩展阅读：&lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/jeps/403&quot;&gt;JEP 403：更强的 JDK 内部封装&lt;/a&gt;，&lt;a href=&quot;https://www.wdbyte.com/java/java-16/&quot;&gt;Java 16 新功能介绍&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;7-JEP-406：switch-的类型匹配（预览）&quot;&gt;&lt;a href=&quot;#7-JEP-406：switch-的类型匹配（预览）&quot; class=&quot;headerlink&quot; title=&quot;7. JEP 406：switch 的类型匹配（预览）&quot;/&gt;7. JEP 406：switch 的类型匹配（预览）&lt;/h2&gt;&lt;p&gt;如 &lt;code&gt;instanceof&lt;/code&gt; 一样，为 &lt;code&gt;switch&lt;/code&gt; 也增加了类型匹配自动转换功能。&lt;/p&gt;
&lt;p&gt;在之前，使用 &lt;code&gt;instanceof&lt;/code&gt; 需要如下操作：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// grr...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;多余的类型强制转换，而现在：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Let pattern matching do the work!&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;switch&lt;/code&gt; 也可以使用类似的方式了。&lt;/p&gt;
&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;formatterPatternSwitch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;int %d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; l    &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;long %d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Double&lt;/span&gt; d  &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;double %f&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; s  &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;String %s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;        &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于 &lt;code&gt;null&lt;/code&gt; 值的判断也有了新的方式。&lt;/p&gt;
&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Java 17 之前&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;testFooBar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;oops!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bar&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Great&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;           &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Ok&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Java 17&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;testFooBar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;         &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Oops&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bar&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Great&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;           &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Ok&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;扩展阅读： &lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/jeps/406&quot;&gt;JEP 406：switch 的类型匹配（预览）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;8-JEP-407：移除-RMI-Activation&quot;&gt;&lt;a href=&quot;#8-JEP-407：移除-RMI-Activation&quot; class=&quot;headerlink&quot; title=&quot;8. JEP 407：移除 RMI Activation&quot;/&gt;8. JEP 407：移除 RMI Activation&lt;/h2&gt;&lt;p&gt;移除了在 JEP 385 中被标记废除的 RMI（Remote Method Invocation）Activation，但是 RMI 其他部分不会受影响。&lt;/p&gt;
&lt;p&gt;RMI Activation 在 Java 15 中的 JEP 385 已经被标记为过时废弃，至今没有收到不良反馈，因此决定在 Java 17 中正式移除。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;扩展阅读： &lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/jeps/407&quot;&gt;JEP 407：移除 RMI Activation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;9-JEP-409：密封类（Sealed-Classes）&quot;&gt;&lt;a href=&quot;#9-JEP-409：密封类（Sealed-Classes）&quot; class=&quot;headerlink&quot; title=&quot;9. JEP 409：密封类（Sealed Classes）&quot;/&gt;9. JEP 409：密封类（Sealed Classes）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Sealed Classes&lt;/strong&gt; 在 Java 15 中的 JEP 360 中提出，在 Java 16 中的 JEP 397  再次预览，现在 Java 17 中成为正式的功能，相比 Java 16 并没有功能变化，这里不再重复介绍，想了解的可以参考之前文章。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;扩展阅读：&lt;a href=&quot;https://www.wdbyte.com/java/java-16/&quot;&gt;Java 16 新功能介绍&lt;/a&gt;，&lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/jeps/409&quot;&gt;JEP 409: Sealed Classes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;10-JEP-401：移除实验性的-AOT-和-JIT-编译器&quot;&gt;&lt;a href=&quot;#10-JEP-401：移除实验性的-AOT-和-JIT-编译器&quot; class=&quot;headerlink&quot; title=&quot;10. JEP 401：移除实验性的 AOT 和 JIT 编译器&quot;/&gt;10. JEP 401：移除实验性的 AOT 和 JIT 编译器&lt;/h2&gt;&lt;p&gt;在 Java 9 的 JEP 295 中，引入了实验性的提前编译  jaotc 工具，但是这个特性自从引入依赖用处都不太大，而且需要大量的维护工作，所以在 Java 17 中决定删除这个特性。&lt;/p&gt;
&lt;p&gt;主要移除了三个 JDK 模块：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;jdk.aot - jaotc 工具。&lt;/li&gt;
&lt;li&gt;Jdk.internal.vm.compiler - Graal 编译器。&lt;/li&gt;
&lt;li&gt;jdk.internal.vm.compiler.management&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时也移除了部分与 AOT 编译相关的 HotSpot 代码：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;src/hotspot/share/aot&lt;/code&gt; — dumps and loads AOT code&lt;/li&gt;
&lt;li&gt;Additional code guarded by &lt;code&gt;#if INCLUDE_AOT&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;11-JEP-411：弃用-Security-Manager&quot;&gt;&lt;a href=&quot;#11-JEP-411：弃用-Security-Manager&quot; class=&quot;headerlink&quot; title=&quot;11. JEP 411：弃用  Security Manager&quot;/&gt;11. JEP 411：弃用  Security Manager&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Security Manager&lt;/strong&gt; 在 JDK 1.0 时就已经引入，但是它一直都不是保护服务端以及客户端 Java 代码的主要手段，为了 Java 的继续发展，决定弃用  Security Manager，在不久的未来进行删除。&lt;/p&gt;
&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Deprecated&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;since&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;17&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; forRemoval&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SecurityManager&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;12-JEP-412：外部函数和内存-API-（孵化）&quot;&gt;&lt;a href=&quot;#12-JEP-412：外部函数和内存-API-（孵化）&quot; class=&quot;headerlink&quot; title=&quot;12. JEP 412：外部函数和内存 API （孵化）&quot;/&gt;12. JEP 412：外部函数和内存 API （孵化）&lt;/h2&gt;&lt;p&gt;新的 API 允许 Java 开发者与 JVM 之外的代码和数据进行交互，通过调用外部函数，可以在不使用 JNI 的情况下调用本地库。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这是一个孵化功能；需要添加&lt;code&gt;--add-modules jdk.incubator.foreign&lt;/code&gt;来编译和运行 Java 代码。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;历史&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 14 &lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/jeps/370&quot;&gt;JEP 370&lt;/a&gt;引入了外部内存访问 API（孵化器）。&lt;/li&gt;
&lt;li&gt;Java 15 &lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/jeps/383&quot;&gt;JEP 383&lt;/a&gt;引入了外部内存访问 API（第二孵化器）。&lt;/li&gt;
&lt;li&gt;Java 16 &lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/jeps/389&quot;&gt;JEP 389&lt;/a&gt;引入了外部链接器 API（孵化器）。&lt;/li&gt;
&lt;li&gt;Java 16 &lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/jeps/393&quot;&gt;JEP 393&lt;/a&gt;引入了外部内存访问 API（第三孵化器）。&lt;/li&gt;
&lt;li&gt;Java 17 &lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/jeps/412&quot;&gt;JEP 412&lt;/a&gt;引入了外部函数和内存 API（孵化器）。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;扩展阅读：&lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/jeps/412&quot;&gt;JEP 412：外部函数和内存 API （孵化）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;13-JEP-414：Vector-API（二次孵化）&quot;&gt;&lt;a href=&quot;#13-JEP-414：Vector-API（二次孵化）&quot; class=&quot;headerlink&quot; title=&quot;13. JEP 414：Vector API（二次孵化）&quot;/&gt;13. JEP 414：Vector API（二次孵化）&lt;/h2&gt;&lt;p&gt;在 Java 16 中引入一个新的 API 来进行向量计算，它可以在运行时可靠的编译为支持的 CPU 架构，从而实现更优的计算能力。&lt;/p&gt;
&lt;p&gt;现在 Java 17 中改进了 Vector API 性能，增强了例如对字符的操作、字节向量与布尔数组之间的相互转换等功能。&lt;/p&gt;
&lt;h2 id=&quot;14-JEP-415：指定上下文的反序列化过滤器&quot;&gt;&lt;a href=&quot;#14-JEP-415：指定上下文的反序列化过滤器&quot; class=&quot;headerlink&quot; title=&quot;14. JEP 415：指定上下文的反序列化过滤器&quot;/&gt;14. JEP 415：指定上下文的反序列化过滤器&lt;/h2&gt;&lt;p&gt;Java 中的序列化一直都是非常重要的功能，如果没有序列化功能，Java 可能都不会占据开发语言的主导地位，序列化让远程处理变得容易和透明，同时也促进了 Java EE 的成功。&lt;/p&gt;
&lt;p&gt;但是 Java 序列化的问题也很多，它几乎会犯下所有的可以想象的错误，为开发者带来持续的维护工作。但是要说明的是序列化的概念是没有错的，把对象转换为可以在 JVM 之间自由传输，并且可以在另一端重新构建的能力是完全合理的想法，问题在于 Java 中的序列化设计存在风险，以至于爆出过很多和序列化相关的漏洞。&lt;/p&gt;
&lt;p&gt;反序列化危险的一个原因是，有时候我们不好验证将要进行反序列化的内容是否存在风险，而传入的数据流可以自由引用对象，很有可能这个数据流就是攻击者精心构造的恶意代码。&lt;/p&gt;
&lt;p&gt;所以，JEP 415 允许在反序列化时，通过一个过滤配置，来告知本次反序列化允许或者禁止操作的类，反序列化时碰到被禁止的类，则会反序列化失败。&lt;/p&gt;
&lt;h3 id=&quot;14-1-反序列化示例&quot;&gt;&lt;a href=&quot;#14-1-反序列化示例&quot; class=&quot;headerlink&quot; title=&quot;14.1. 反序列化示例&quot;/&gt;14.1. 反序列化示例&lt;/h3&gt;&lt;p&gt;假设 Dog 类中的 Poc 是恶意构造的类，但是正常反序列化是可以成功的。&lt;/p&gt;
&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wdbyte&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;java17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ByteArrayInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ObjectInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/**
 * @author niulang
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; JEP415 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Dog&lt;/span&gt; dog &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;哈士奇&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        dog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setPoc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Poc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 序列化 - 对象转字节数组&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ByteArrayOutputStream&lt;/span&gt; byteArrayOutputStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ObjectOutputStream&lt;/span&gt; objectOutputStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;byteArrayOutputStream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            objectOutputStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writeObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dog&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; bytes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; byteArrayOutputStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toByteArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 反序列化 - 字节数组转对象&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ByteArrayInputStream&lt;/span&gt; byteArrayInputStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ByteArrayInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bytes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ObjectInputStream&lt;/span&gt; objectInputStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ObjectInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;byteArrayInputStream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; objectInputStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Poc&lt;/span&gt; poc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Dog{&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name=&#x27;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#x27;\&#x27;&#x27;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#x27;}&#x27;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// get...set...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Poc&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;Dog{name=&#x27;哈士奇&#x27;}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;14-2-反序列化过滤器&quot;&gt;&lt;a href=&quot;#14-2-反序列化过滤器&quot; class=&quot;headerlink&quot; title=&quot;14.2. 反序列化过滤器&quot;/&gt;14.2. 反序列化过滤器&lt;/h3&gt;&lt;p&gt;在 Java 17 中可以自定义反序列化过滤器，拦截不允许的类。&lt;/p&gt;
&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wdbyte&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;java17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ByteArrayInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ObjectInputFilter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ObjectInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/**
 * @author niulang
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; JEP415 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Dog&lt;/span&gt; dog &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;哈士奇&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        dog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setPoc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Poc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 序列化 - 对象转字节数组&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ByteArrayOutputStream&lt;/span&gt; byteArrayOutputStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ObjectOutputStream&lt;/span&gt; objectOutputStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;byteArrayOutputStream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            objectOutputStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writeObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dog&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; bytes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; byteArrayOutputStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toByteArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 反序列化 - 字节数组转对象&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ByteArrayInputStream&lt;/span&gt; byteArrayInputStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ByteArrayInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bytes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ObjectInputStream&lt;/span&gt; objectInputStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ObjectInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;byteArrayInputStream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 允许 com.wdbyte.java17.Dog 类，允许 java.base 中的所有类，拒绝其他任何类&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ObjectInputFilter&lt;/span&gt; filter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ObjectInputFilter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createFilter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;token string&quot;&gt;&quot;com.wdbyte.java17.Dog;java.base/*;!*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        objectInputStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setObjectInputFilter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; objectInputStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Poc&lt;/span&gt; poc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Dog{&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name=&#x27;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#x27;\&#x27;&#x27;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#x27;}&#x27;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// get...set...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Poc&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时反序列化会得到异常。&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;Exception in thread &quot;main&quot; java.io.InvalidClassException: filter status: REJECTED
at java.base/java.io.ObjectInputStream.filterCheck(ObjectInputStream.java:1412)
at java.base/java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:2053)
at java.base/java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1907)
....&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;扩展阅读：&lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/jeps/415&quot;&gt;JEP 415：指定上下文的反序列化过滤器&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;/&gt;参考&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://openjdk.java.net/projects/jdk/17/&quot;&gt;https://openjdk.java.net/projects/jdk/17/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; href=&quot;https://docs.oracle.com/en/java/javase/17/&quot;&gt;https://docs.oracle.com/en/java/javase/17/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>