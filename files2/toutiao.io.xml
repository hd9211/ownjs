<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>5938c8a1acbfcac95810ba25cc22ccac</guid>
<title>字节“FII事件”发生的那一夜；别再说谷歌取消OKR了；Go微服务生产指南清单｜码农周刊VIP会员专属邮件周报 Vol.091</title>
<link>https://toutiao.io/k/d9oheay</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;本文内容节选自&lt;strong&gt;「码农周刊VIP会员专属邮件周报 Vol.091」&lt;/strong&gt;，感谢阅读。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078432&amp;amp;idx=2&amp;amp;sn=f1ba1fa5fbfbcf98a3e6f610b258cf05&amp;amp;chksm=bd2918178a5e9101b993d9e84d783562c995577cec855adf32ccb5946ff4da21fd6e89ba078e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;想邮件订阅周报？扫码即刻订阅！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;↓↓↓&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本期，首先分享的是&lt;strong&gt;避免「瞎忙活」的十条秘笈&lt;/strong&gt;，摘录几条，共勉。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）清晰的目标。&lt;br/&gt;2）垃圾时间处理信息。&lt;br/&gt;3）不要和别人比较。&lt;br/&gt;4）要有成长心态。&lt;br/&gt;5）锻炼身体。&lt;br/&gt;……&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;字节“FII事件”发生的那一夜&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://mp.weixin.qq.com/s/zqJ4AJjE5I9WDkcQFMlM6Q&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;信任不会忽然消失，但很难说清开头在哪里。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;别再说谷歌取消OKR了&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://mp.weixin.qq.com/s/l6sZgjnKWoTN8JWTIIwtjA&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;在OKR这件事情上，优秀的学习者不会简单地只抄老大哥的答案，他们学习的是老大哥的解题思维和过程。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;收钱吧生产环境全链路压测的实践&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/3elzr5y&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;经验总结&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;分布式数据库的高可用性简史&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/k44qn9i&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;在历史上是如何处理容错的，以及高可用性是什么样子的。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Android卡顿掉帧问题分析之工具篇&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/w3j907a&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;详细介绍&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;一份Go微服务生产指南清单给你&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/n6xubkw&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;供参考&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;如何打造一款简单易用的 React 状态管理工具&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/kew0md8&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;一步步教你&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;做好这 16 项优化，你的 Linux 操作系统焕然一新&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/63xesh3&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;实操干货&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;GitHub的4个神技，同桌直呼666&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/oaoov9m&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;试试吧&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;4 种主流的 API 架构风格对比: SOAP vs REST vs GraphQL vs RPC&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/hydzart&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;供参考&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078432&amp;amp;idx=2&amp;amp;sn=f1ba1fa5fbfbcf98a3e6f610b258cf05&amp;amp;chksm=bd2918178a5e9101b993d9e84d783562c995577cec855adf32ccb5946ff4da21fd6e89ba078e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;想邮件订阅周报？扫码即刻订阅！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;↓↓↓&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5a9e8c910403cbccb8a9b26208722eff</guid>
<title>[推荐] 架构设计资料合集</title>
<link>https://toutiao.io/k/iqlrz7b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;logged-out env-production page-responsive page-blob&quot; id=&quot;readabilityBody&quot;&gt;
    

    

  &lt;p id=&quot;start-of-content&quot; class=&quot;show-on-focus&quot;/&gt;







    


    

  &lt;include-fragment class=&quot;js-notification-shelf-include-fragment&quot; data-base-src=&quot;https://github.com/notifications/beta/shelf&quot;/&gt;





  &lt;div class=&quot;application-main &quot; data-commit-hovercards-enabled=&quot;&quot; data-discussion-hovercards-enabled=&quot;&quot; data-issue-and-pr-hovercards-enabled=&quot;&quot;&gt;
        &lt;div itemscope=&quot;&quot; itemtype=&quot;http://schema.org/SoftwareSourceCode&quot; class=&quot;&quot;&gt;
    &lt;main id=&quot;js-repo-pjax-container&quot; data-pjax-container=&quot;&quot;&gt;
      

    
    








  



&lt;div id=&quot;repo-content-pjax-container&quot; class=&quot;repository-content &quot;&gt;
  
  


  
      
  &lt;div class=&quot;clearfix container-xl px-3 px-md-4 px-lg-5 mt-4&quot;&gt;
    
    
&lt;div&gt;
  




    
&lt;a class=&quot;d-none js-permalink-shortcut&quot; data-hotkey=&quot;y&quot; href=&quot;/toutiaoio/weekly.manong.io/blob/9de8d0b1c1d02892af76f584466bb9731561a79c/archives/architecture.md?hmsr=toutiao.io&amp;amp;utm_campaign=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot;&gt;Permalink&lt;/a&gt;







    &lt;div id=&quot;spoof-warning&quot; class=&quot;mt-0 pb-3&quot; hidden=&quot;&quot; aria-hidden=&quot;&quot;&gt;
  &lt;div data-view-component=&quot;true&quot; class=&quot;flash flash-warn mt-0 clearfix&quot;&gt;
  
  
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert float-left mt-1&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;

      &lt;p class=&quot;overflow-hidden&quot;&gt;This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository.&lt;/p&gt;


  
&lt;/div&gt;&lt;/div&gt;

    &lt;include-fragment src=&quot;/toutiaoio/weekly.manong.io/spoofed_commit_check/9de8d0b1c1d02892af76f584466bb9731561a79c&quot; data-test-selector=&quot;spoofed-commit-check&quot;/&gt;

    &lt;div class=&quot;Box d-flex flex-column flex-shrink-0 mb-3&quot;&gt;
  &lt;include-fragment src=&quot;/toutiaoio/weekly.manong.io/contributors/master/archives/architecture.md&quot; class=&quot;commit-loader&quot;&gt;
    

    &lt;div class=&quot;Box-body d-flex flex-items-center&quot;&gt;
      &lt;p class=&quot;Skeleton Skeleton--text col-1&quot;&gt; &lt;/p&gt;
      &lt;span class=&quot;color-fg-danger h6 loader-error&quot;&gt;Cannot retrieve contributors at this time&lt;/span&gt;
    &lt;/div&gt;
&lt;/include-fragment&gt;&lt;/div&gt;







    &lt;readme-toc&gt;

    &lt;div data-target=&quot;readme-toc.content&quot; class=&quot;Box mt-3 position-relative&quot;&gt;
      
  &lt;div class=&quot;Box-header js-blob-header blob-header js-sticky js-position-sticky top-0 p-2 d-flex flex-shrink-0 flex-md-row flex-items-center&quot;&gt;

      &lt;details data-target=&quot;readme-toc.trigger&quot; data-menu-hydro-click=&quot;{&amp;quot;event_type&amp;quot;:&amp;quot;repository_toc_menu.click&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;target&amp;quot;:&amp;quot;trigger&amp;quot;,&amp;quot;repository_id&amp;quot;:193332705,&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/toutiaoio/weekly.manong.io/blob/master/archives/architecture.md?hmsr=toutiao.io&amp;amp;utm_campaign=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&amp;quot;,&amp;quot;user_id&amp;quot;:null}}&quot; data-menu-hydro-click-hmac=&quot;254204da5c660a71b13b6e6f1c0a2f8173b5db645f006610ab5622186dfe217e&quot; class=&quot;dropdown details-reset details-overlay&quot;&gt;
  &lt;summary class=&quot;btn btn-octicon m-0 mr-2 p-2&quot; aria-haspopup=&quot;true&quot; aria-label=&quot;Table of Contents&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-list-unordered&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M2 4a1 1 0 100-2 1 1 0 000 2zm3.75-1.5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zm0 5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zm0 5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zM3 8a1 1 0 11-2 0 1 1 0 012 0zm-1 6a1 1 0 100-2 1 1 0 000 2z&quot;/&gt;
&lt;/svg&gt;
  &lt;/summary&gt;


  &lt;details-menu class=&quot;SelectMenu&quot; role=&quot;menu&quot;&gt;
    
  &lt;/details-menu&gt;
&lt;/details&gt;


  &lt;p class=&quot;text-mono f6 flex-auto pr-3 flex-order-2 flex-md-order-1&quot;&gt;

      271 lines (259 sloc)
      &lt;span class=&quot;file-info-divider&quot;/&gt;
    38.7 KB
  &lt;/p&gt;

  

    
&lt;/div&gt;


        &lt;div id=&quot;readme&quot; class=&quot;Box-body readme blob js-code-block-container p-5 p-xl-6 gist-border-0&quot;&gt;
    &lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-架构设计---往期存档---码农周刊&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#架构设计---往期存档---码农周刊&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;架构设计 - 往期存档 - 码农周刊&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p dir=&quot;auto&quot;&gt;本项目是《码农周刊》往期存档 &amp;amp; VIP会员专属邮件周报。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a href=&quot;#%E7%AE%80%E4%BB%8B&quot;&gt;码农周刊简介&lt;/a&gt;｜&lt;a href=&quot;#VIP%E4%BC%9A%E5%91%98%E7%89%B9%E6%9D%83&quot;&gt;VIP会员特权&lt;/a&gt;｜&lt;a href=&quot;#%E6%88%90%E4%B8%BA%E7%A0%81%E5%86%9C%E5%91%A8%E5%88%8AVIP%E4%BC%9A%E5%91%98&quot;&gt;成为码农周刊VIP会员&lt;/a&gt;｜&lt;a href=&quot;#VIP%E4%BC%9A%E5%91%98%E4%B8%93%E5%B1%9E%E9%82%AE%E4%BB%B6%E5%91%A8%E6%8A%A5&quot;&gt;VIP会员专属邮件周报&lt;/a&gt;｜&lt;a href=&quot;#%E5%BE%80%E6%9C%9F%E5%AD%98%E6%A1%A3&quot;&gt;往期存档&lt;/a&gt;&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-简介&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#简介&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;简介&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;码农周刊是一份专为广大程序员、编程爱好者们打造的 IT 技术周刊。每周发送。&lt;/li&gt;
&lt;li&gt;2013 年 9 月 12 日创刊至今，已发送 300 多期，订阅用户超 20 万&lt;/li&gt;
&lt;li&gt;专业、简单、有用，是我们一直坚持的办刊宗旨。一路走来，我们见证了不少订阅用户从编程新手进阶成了高级程序员、架构师、CTO……&lt;/li&gt;
&lt;li&gt;2020 年 4 月，为了给用户提供更优质的服务，我们推出了「码农周刊VIP会员」服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-vip会员特权&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#vip会员特权&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;VIP会员特权&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;52 期码农周刊VIP会员专属邮件周报，让你及时掌握技术动向；&lt;/li&gt;
&lt;li&gt;只限VIP会员加入的交流圈子，让你与技术大牛切磋学习；&lt;/li&gt;
&lt;li&gt;VIP会员独享的工作机会，为你介绍好公司的好机会；&lt;/li&gt;
&lt;li&gt;更多会员特权，持续更新……&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-成为码农周刊vip会员&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#成为码农周刊vip会员&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;成为码农周刊VIP会员&lt;/h2&gt;
&lt;ol dir=&quot;auto&quot;&gt;
&lt;li&gt;微信扫描下方二维码，加入码农周刊VIP会员知识星球。&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/3bec7a23a8e3a8db753f5664ebe0979b29115a4dc348968d4acd1181bfdcff7a/68747470733a2f2f696d672e746f757469616f2e696f2f6164732f7669705f6769746875622e6a706567&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/3bec7a23a8e3a8db753f5664ebe0979b29115a4dc348968d4acd1181bfdcff7a/68747470733a2f2f696d672e746f757469616f2e696f2f6164732f7669705f6769746875622e6a706567&quot; data-canonical-src=&quot;https://img.toutiao.io/ads/vip_github.jpeg&quot;/&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;加入码农周刊VIP会员知识星球后，客服会联系您，请留意知识星球内的私信。&lt;/li&gt;
&lt;li&gt;客服向您发送码农周刊VIP会员欢迎邮件，开启您的码农周刊VIP会员之旅。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-vip会员专属邮件周报&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#vip会员专属邮件周报&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;VIP会员专属邮件周报&lt;/h2&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-往期存档&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#往期存档&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;往期存档&lt;/h2&gt;

&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-程序设计&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#程序设计&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;程序设计&lt;/h2&gt;

&lt;/article&gt;
  &lt;/div&gt;

    &lt;/div&gt;

  &lt;/readme-toc&gt;

  

  &lt;details class=&quot;details-reset details-overlay details-overlay-dark&quot; id=&quot;jumpto-line-details-dialog&quot;&gt;
    &lt;summary data-hotkey=&quot;l&quot; aria-label=&quot;Jump to line&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast linejump&quot; aria-label=&quot;Jump to line&quot;&gt;
          &lt;/details-dialog&gt;
  &lt;/details&gt;


&lt;/div&gt;

  &lt;/div&gt;


&lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;

  &lt;/div&gt;

          &lt;footer class=&quot;footer width-full container-xl p-responsive&quot; role=&quot;contentinfo&quot;&gt;


  
  &lt;p class=&quot;d-flex flex-justify-center pb-6&quot;&gt;
    &lt;span class=&quot;f6 color-fg-muted&quot;/&gt;
  &lt;/p&gt;
&lt;/footer&gt;




  &lt;div id=&quot;ajax-error-message&quot; class=&quot;ajax-error-message flash flash-error&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;button type=&quot;button&quot; class=&quot;flash-close js-ajax-error-dismiss&quot; aria-label=&quot;Dismiss error&quot;&gt;
      &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
    &lt;/button&gt;&lt;p&gt;
    You can’t perform that action at this time.
  &lt;/p&gt;&lt;/div&gt;

  &lt;div class=&quot;js-stale-session-flash flash flash-warn flash-banner&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-in&quot; hidden=&quot;&quot;&gt;You signed in with another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-out&quot; hidden=&quot;&quot;&gt;You signed out in another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
  &lt;/div&gt;
    &lt;template id=&quot;site-details-dialog&quot;&gt;
  &lt;details class=&quot;details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm&quot; open=&quot;&quot;&gt;
    &lt;summary role=&quot;button&quot; aria-label=&quot;Close dialog&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal&quot;&gt;
      &lt;button class=&quot;Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0&quot; type=&quot;button&quot; aria-label=&quot;Close dialog&quot; data-close-dialog=&quot;&quot;&gt;
        &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
      &lt;/button&gt;
      &lt;p class=&quot;octocat-spinner my-6 js-details-dialog-spinner&quot;/&gt;
    &lt;/details-dialog&gt;
  &lt;/details&gt;
&lt;/template&gt;

    

    &lt;template id=&quot;snippet-clipboard-copy-button&quot;&gt;
  
&lt;/template&gt;




  &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f8388155bc010ec9eb57a685bdb77d30</guid>
<title>[推荐] 跨Mysql、Redis、Mongo的分布式事务</title>
<link>https://toutiao.io/k/246clz1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;Mysql、Redis、Mongo都是非常流行的存储，并且各自有自己的优势。在实际的应用中，常常会同时使用多种存储，也会遇见在多种存储中保证数据一致性的需求，例如保证数据库中的库存和Redis中的库存一致等。&lt;/p&gt;&lt;p&gt;本文基于分布式事务框架 &lt;span&gt;https://github.com/dtm-labs/dtm&lt;/span&gt; 给出了一个跨Mysql、Redis、Mongo多种存储引擎的一个可运行的分布式事务实例，希望能够帮助大家解决这方面的问题。&lt;/p&gt;&lt;p&gt;这种灵活的组合多个存储引擎形成一个分布式事务的能力，也是dtm首创做到的，目前未看到其他的分布式事务框架有这样的能力。&lt;/p&gt;&lt;h2&gt;问题场景&lt;/h2&gt;&lt;p&gt;我们先来看问题场景，假定现在用户参加一次活动，将自己的余额，充值话费，同时活动会赠送商城积分。其中余额存储在Mysql，话费保存在Redis，商城积分保存在Mongo，并且由于活动限时，因此可能出现参加活动失败的情况，所以需要支持回滚。&lt;/p&gt;&lt;p&gt;对于上述问题场景，可以使用DTM的Saga事务，下面我们就来详细讲解方案。&lt;/p&gt;&lt;h2&gt;准备数据&lt;/h2&gt;&lt;p&gt;首先是准备数据，为了方便用户快速上手相关的例子，我们已经把相关的数据准备好了，地址在en.dtm.pub，里面包括Mysql、Redis、Mongo，具体的连接用户名密码可以在&lt;span&gt;https://github.com/dtm-labs/dtm-examples&lt;/span&gt;找到。&lt;/p&gt;&lt;p&gt;如果您想要自己在本地准备相关的数据环境，可以通过 &lt;span&gt;https://github.com/dtm-labs/dtm/blob/main/helper/compose.store.yml&lt;/span&gt; 启动Mysql、Redis、Mongo，然后通过&lt;span&gt;https://github.com/dtm-labs/dtm/tree/main/sqls&lt;/span&gt;下面的脚本准备本例子的数据，其中&lt;code&gt;busi.*&lt;/code&gt;为业务数据，&lt;code&gt;barrier.*&lt;/code&gt;为DTM使用的辅助表&lt;/p&gt;&lt;h2&gt;编写业务代码&lt;/h2&gt;&lt;p&gt;我们先看最熟悉的Mysql的业务代码&lt;/p&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;SagaAdjustBalance&lt;/span&gt;&lt;span&gt;(db dtmcli.DB, uid &lt;span&gt;int&lt;/span&gt;, amount &lt;span&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;error&lt;/span&gt; {&lt;br/&gt;    _, err := dtmimp.DBExec(db, &lt;span&gt;&quot;update dtm_busi.user_account set balance = balance + ? where user_id = ?&quot;&lt;/span&gt;, amount, uid)&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;/pre&gt;&lt;p&gt;这段代码主要是进行数据库中用户余额的调整&lt;/p&gt;&lt;p&gt;对于Saga事务模式来说，当我们回滚时，我们需要反向调整余额，这部分的处理，我们可以依旧调用上述的&lt;code&gt;SagaAdjustBalance&lt;/code&gt;，只需要传入负数的金额即可。&lt;/p&gt;&lt;p&gt;对于Redis和Mongo，业务代码的处理也是类似的，只需要对相应的余额进行增减即可&lt;/p&gt;&lt;h2&gt;如何做幂等&lt;/h2&gt;&lt;p&gt;对于Saga事务模式来说，当我们的子事务服务出现临时故障，出现故障就会进行重试，这个故障可能出现在子事务提交前，也可能出现在子事务提交之后，因此子事务服务就需要做到幂等。&lt;/p&gt;&lt;p&gt;DTM 提供了辅助表和辅助的函数，用于帮助用户快速实现幂等。对于Mysql，他会在业务数据库中创建辅助表barrier，当用户开启事务调整余额时，会先在barrier表中写入gid，如果这是一个重复请求，那么写入gid时，会发现重复而失败，此时跳过用户业务上的余额调整，保证幂等。辅助函数的使用代码如下：&lt;/p&gt;&lt;pre&gt;app.POST(BusiAPI+&lt;span&gt;&quot;/SagaBTransIn&quot;&lt;/span&gt;, dtmutil.WrapHandler2(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;{} {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; MustBarrierFromGin(c).Call(txGet(), &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(tx *sql.Tx)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;error&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SagaAdjustBalance(tx, TransInUID, reqFrom(c).Amount, reqFrom(c).TransInResult)&lt;br/&gt;    })&lt;br/&gt;}))&lt;/pre&gt;&lt;p&gt;Mongo处理幂等的原理与Mysql相近，不再赘述&lt;/p&gt;&lt;p&gt;Redis处理幂等的原理与Mysql不同，主要是因为事务的原理不同。Redis的事务主要是通过lua的原子执行来保证的。DTM的辅助函数会通过lua脚本来调整余额，调整余额前，会在redis中查询gid，如果存在，则跳过业务上的余额调整；如果不存在，则执行业务上的余额调整。辅助函数的使用代码如下：&lt;/p&gt;&lt;pre&gt;app.POST(BusiAPI+&lt;span&gt;&quot;/SagaRedisTransOut&quot;&lt;/span&gt;, dtmutil.WrapHandler2(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;{} {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; MustBarrierFromGin(c).RedisCheckAdjustAmount(RedisGet(), GetRedisAccountKey(TransOutUID), -reqFrom(c).Amount, &lt;span&gt;7&lt;/span&gt;*&lt;span&gt;86400&lt;/span&gt;)&lt;br/&gt;}))&lt;/pre&gt;&lt;h2&gt;如何做补偿&lt;/h2&gt;&lt;p&gt;对于Saga来说，我们还需要处理补偿操作，但补偿操作并不是简单的反向调整，也有很多坑需要注意，否则很容易补偿出错。&lt;br/&gt;一方面，补偿需要考虑幂等，因为在补偿过程中，也同样需要考虑故障重试的情况，与前一小节中的幂等处理一样。另一方面，补偿还需要考虑空补偿，因为正向分支返回失败，这个失败可能是在正向的数据已经调整完成提交之后的失败，也可能是还没有提交就返回了失败。对于数据已提交的失败，我们需要执行反向操作，对于数据未提交的失败，我们需要跳过反向操作，即处理空补偿。&lt;/p&gt;&lt;p&gt;DTM 提供的辅助表与辅助函数中，一方面会根据正向操作插入的gid判断是否为空补偿，另一方面还会再插入gid+&#x27;compensate&#x27;，判断补偿是否为重复操作。如果是正常补偿操作，那么会执行业务上的补偿，如果是空补偿或者重复补偿，则会跳过补偿业务上的补偿。&lt;/p&gt;&lt;p&gt;Mysql的代码如下：&lt;/p&gt;&lt;pre&gt;app.POST(BusiAPI+&lt;span&gt;&quot;/SagaBTransInCom&quot;&lt;/span&gt;, dtmutil.WrapHandler2(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;{} {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; MustBarrierFromGin(c).Call(txGet(), &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(tx *sql.Tx)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;error&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SagaAdjustBalance(tx, TransInUID, -reqFrom(c).Amount, &lt;span&gt;&quot;&quot;&lt;/span&gt;)&lt;br/&gt;    })&lt;br/&gt;}))&lt;/pre&gt;&lt;p&gt;Redis的代码如下：&lt;/p&gt;&lt;pre&gt;app.POST(BusiAPI+&lt;span&gt;&quot;/SagaRedisTransOutCom&quot;&lt;/span&gt;, dtmutil.WrapHandler2(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;{} {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; MustBarrierFromGin(c).RedisCheckAdjustAmount(RedisGet(), GetRedisAccountKey(TransOutUID), reqFrom(c).Amount, &lt;span&gt;7&lt;/span&gt;*&lt;span&gt;86400&lt;/span&gt;)&lt;br/&gt;}))&lt;/pre&gt;&lt;p&gt;补偿代码与前面的正向操作代码几乎一样，仅仅是把金额乘以-1。DTM 的辅助函数会在一个函数内部同时包含了幂等与补偿的相关逻辑&lt;/p&gt;&lt;h2&gt;其他异常&lt;/h2&gt;&lt;p&gt;编写子事务以及子事务的补偿时，其实还有一种异常情况是悬挂，可能出现在全局事务超时回滚，或者重试到达上线后回滚，正常情况是先正向操作再补偿，但是极端情况可能出现先补偿再正向操作，因此正向操作还需要判断补偿是否已执行，已执行的情况下，也需要跳过业务操作。&lt;/p&gt;&lt;p&gt;对于DTM的用户而言，这些异常都已经被优雅的妥善处理，您作为用户，只需要按照上述的&lt;code&gt;MustBarrierFromGin(c).Call&lt;/code&gt;进行调用即可，完全不再需要关心这些异常。DTM 处理这些异常的原理在这里进行了详细的讲述：异常与子事务屏障&lt;/p&gt;&lt;h2&gt;发起分布式事务&lt;/h2&gt;&lt;p&gt;前面编写完了各个子事务服务，下面这部分代码发起一个Saga全局事务：&lt;/p&gt;&lt;pre&gt;saga := dtmcli.NewSaga(dtmutil.DefaultHTTPServer, dtmcli.MustGenGid(dtmutil.DefaultHTTPServer)).&lt;br/&gt;  Add(busi.Busi+&lt;span&gt;&quot;/SagaBTransOut&quot;&lt;/span&gt;, busi.Busi+&lt;span&gt;&quot;/SagaBTransOutCom&quot;&lt;/span&gt;, &amp;amp;busi.TransReq{Amount: &lt;span&gt;50&lt;/span&gt;}).&lt;br/&gt;  Add(busi.Busi+&lt;span&gt;&quot;/SagaMongoTransIn&quot;&lt;/span&gt;, busi.Busi+&lt;span&gt;&quot;/SagaMongoTransInCom&quot;&lt;/span&gt;, &amp;amp;busi.TransReq{Amount: &lt;span&gt;30&lt;/span&gt;}).&lt;br/&gt;  Add(busi.Busi+&lt;span&gt;&quot;/SagaRedisTransIn&quot;&lt;/span&gt;, busi.Busi+&lt;span&gt;&quot;/SagaRedisTransOutIn&quot;&lt;/span&gt;, &amp;amp;busi.TransReq{Amount: &lt;span&gt;20&lt;/span&gt;})&lt;br/&gt;err := saga.Submit()&lt;/pre&gt;&lt;p&gt;在这部分代码中，创建了一个Saga全局事务，该Saga事务包括3个子事务：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;从Mysql中转出50&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;向Mongo中转入30&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;向Redis中转入20&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在整个事务过程中，如果所有的子事务都顺利完成，那么全局事务成功；如果有一个子事务返回了业务上的失败，那么全局事务回滚。&lt;/p&gt;&lt;h2&gt;运行&lt;/h2&gt;&lt;p&gt;如果您想要完整运行一个上面的示例，步骤如下：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;运行dtm&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;git &lt;span&gt;clone&lt;/span&gt; https://github.com/dtm-labs/dtm &amp;amp;&amp;amp; &lt;span&gt;cd&lt;/span&gt; dtm&lt;br/&gt;go run main.go&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot; start=&quot;2&quot;&gt;&lt;li&gt;&lt;p&gt;运行成功的例子&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;git &lt;span&gt;clone&lt;/span&gt; https://github.com/dtm-labs/dtm-examples &amp;amp;&amp;amp; &lt;span&gt;cd&lt;/span&gt; dtm-examples&lt;br/&gt;go run main.go http_saga_multidb&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot; start=&quot;3&quot;&gt;&lt;li&gt;&lt;p&gt;运行失败的例子&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;git &lt;span&gt;clone&lt;/span&gt; https://github.com/dtm-labs/dtm-examples &amp;amp;&amp;amp; &lt;span&gt;cd&lt;/span&gt; dtm-examples&lt;br/&gt;go run main.go http_saga_multidb_rollback&lt;/pre&gt;&lt;p&gt;您可以对例子进行修改，模拟各种临时的故障，空补偿的情况，以及其他各种异常，当整个全局事务最终完成时，数据是一致的。&lt;/p&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;本文给出了一个跨Mysql、Redis、Mongo的分布式事务例子，详细讲解了其中需要处理的问题，以及解决方案。&lt;/p&gt;&lt;p&gt;本文的原理适合于所有支持ACID事务的存储引擎，您可以将它快速扩展，用于其他引擎，例如TiKV等。&lt;/p&gt;&lt;h2&gt;联系我们&lt;/h2&gt;&lt;p&gt;项目地址：https://github.com/dtm-labs/dtm 欢迎访问，并star支持我们&lt;/p&gt;&lt;p&gt;关注【分布式事务】公众号，获得更多分布式事务相关知识&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwNzQ2NzMyNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/9m9OfQX94Vv04GUcaMFCzcfHeGnTECibTEibP26ByiaHcdD7qYLNFAyQcDvbVBerQs55hXppwia3XpPjIYF3MKGzVQ/0?wx_fmt=png&quot; data-nickname=&quot;分布式事务&quot; data-alias=&quot;wangxiyan0901&quot; data-signature=&quot;介绍分布式事务相关理论与实践知识。 开源项目yedf/dtm的相关信息发布。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d60d54bc3ea70ec186f0ea79f375c02a</guid>
<title>[推荐] 聊聊我们是如何做系统保障方案的</title>
<link>https://toutiao.io/k/i8q3ye4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原创不易，求分享、求一键三连。回复保障方案获取资料&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面对业务迅速增长复杂度会呈几何级增加，为了降低维护复杂度而引入了微服务，只要每个服务足够简单，那么维护成本也可以降低。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务保障也是一个非常困难的事情，今天聊一聊系统稳定性方案。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;方案设计层面&lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;业务逻辑正常是最基础的要求。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;接口安全、数据安全（数据泄漏、数据遍历、越权访问）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务扩展性（服务是否可平滑扩容，能扩的最大范围是多少个节点）、是否存在单点。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据库表结构设计、索引设计。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缓存更新机制、过期机制、是否存在单点热Key&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息系统设计、流转过程；投递速率、消费速率&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;定时任务运行方式、执行记录、失败处理、是否可以恢复&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;仅仅考虑前面的场景可能还是不够，所以继续进行系统稳定性的思考。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;系统稳定性&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5501022494887525&quot; data-type=&quot;png&quot; data-w=&quot;1956&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVIS93pagUDXfaaRI7DiayDXMJ4511ibYkiaZRtXVjxtT8omOuEyCjyhElTgQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;流量控制&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般情况下越靠近下层资源的吞吐能力越弱，数据库吞吐能力有限，要尽量将流量拦截到上层尽快返回响应，让越下层的资源做&lt;strong&gt;正确和重要&lt;/strong&gt;的事情，达到压榨系统的目的，所以上面看到的WAF拦截；限流基本都是放在网关或者离用户更近的一层。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.558641975308642&quot; data-type=&quot;png&quot; data-w=&quot;1944&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVIScvXYDAMGHutvaYVxXTvOG2sQ4PlE7xaXuXCG1OsR4zIhice2cHhjA9w/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;数据冗余&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;系统中最重要的是数据，保证数据不丢失至关重要，数据冗余是防止丢失最简单的方式。数据冗余备份方式很多种，从物理到逻辑的角度，备份可以分为以下几类：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;只对数据库操作系统的物理文件（如数据文件、日志文件等）的备份&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;物理备份又可以分为冷备(在关闭数据库时进行的备份操作，能够较好地保证数据库的完整性)和热备(在数据库运行状态中进行操作，这种备份方法依赖于数据库的日志文件)&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从数据库的备份策略角度来看，备份又可分为全量备份、增量和冗余备份&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;每次对数据进行完整的备份&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以备份整个数据库，包含用户表、系统表、索引、视图和存储过程等所有数&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但它需要花费更多的时间和空间，所以，做一次完全备份的周期要长些&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只有那些在上次完全备份或者增量备份后被修改的文件才会被备份&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;备份那些自从上次完全备份之后被修改过的文件，即只备份数据库部分的内容&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;它比最初的完全备份小，因为只包含自上次完全备份以来所改变的数据库&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;它的优点是存储和恢复速度快&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;高可用&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了保证系统的高可用，在框架、基础建设层面需要做很多建设。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;超时控制，可以让服务之间调用快速抛错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果单个请求耗时长会影响服务的性能。比如API接口设置2s超时API调用a服务用了1s，服务a调用服务b用了1s，那么现在已经超时了，如果还需要调用服务c，这个时候整体接口已经超时就不需要继续调用c服务，浪费时间和资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重试是保证一些服务可能偶尔服务抖动失效情况下，再重新发起一次，保证当前请求的准确性，重试需要有限制，不能无限循环，再则操作是否可以重试，是有支持幂等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩容策略可以分为两种，一种是对单机整体扩容，也就是机器内部包含CPU、内存、存储设备等;另一种增加机器，对于服务的扩容一定要慎重，需要考虑到扩容之后下游的资源是否能够支撑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如mysql服务器链接只有2000个，当前集群已经使用的差不多了，服务数量增加之后会导致链接不够用；业务更容易出问题。微服务k8s容器化之后，我们自研的发布系统上可以进行轻松的扩容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个业务降级的例子，定时送道具打积分榜单，榜单计算支持的QPS可能是1w，道具分多种档次，其中有一种薅羊毛的道具1积分，花钱的几十到几万积分不等，可能有刷子囤积了几亿的羊毛道具等待打榜时候使用程序投递影响活动的体验；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有大量羊毛道具并且超过榜单计算的QPS，此时就降级把羊毛道具剔除掉，只算花钱的，毕竟1积分对榜单影响小（业务定夺）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顾名思义，按照一定的原则进行划分，进行单独维护。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务隔离：将系统按照业务特性分成不同的服务模块，各个模块之间相对独立，无强依赖，某些模块出现故障不至于全部不可用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;动态接口和静态接口隔离，比如：一个接口里面有用户自己特定的一些数据，也包含了所有用户看到都是一样的数据，那么就可以把这部分拆分成两个接口；大家看到统一数据的接口可以加统一缓存或者上CDN；不拆分是无法上CDN的；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据库分库分表等；隔离之后尽量保证不可越界、不可共享防止隔离失效。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;业务保障的基础（监控&amp;amp;告警）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;怎样衡量业务系统是否表现正常？是应用在线上跑着进程还在没有宕机，这可能是一个先决条件，有的程序虽然还在跑着，但是已经不能提供服务了，能体现服务的正常需要看流量，流量是看不见的，只有通过日志监控体现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;监控需要监控哪些呢，基础资源监控-基础的资源是否出现问题了？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4050235478806907&quot; data-type=&quot;png&quot; data-w=&quot;2548&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVISxM7LMnWAMKFEjE6KDibU5xHv6dlQmH7LNh1FlAYB9nuSeSKLXsFfYicg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单服务监控-某个服务是不是指标是否出现异常了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;QPS（GRPC、http）、耗时、接口错误码、错误率监控、上下游依赖监控(DB、缓存、上游依赖服务、下游支持服务)&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5580204778156996&quot; data-type=&quot;png&quot; data-w=&quot;2344&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVISG9mROFuM2RT1CY7ykLlEkYSKnCpGkiatwvqpKxibDZIiaXAHvFrTc6GxA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微服务调用链路监控-调用链路到某个服务是否异常了？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41450777202072536&quot; data-type=&quot;png&quot; data-w=&quot;2702&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVISBPcKV4VpQGZAH5oup5WQZx3VNbghb0HD8M5yCHJXlBCxRC3riao0jcQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户端监控-用户体验端是否出现异常了？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5635208711433757&quot; data-type=&quot;png&quot; data-w=&quot;2204&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVIS4RGiaL385uN45W7gVpBxBTEfwUw3xpAhPqRkggHGdIYU1X5Z9MnvEvA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;上线规范-预演&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;预演是非常重要的环节，很多bug都可以在预演环节被干掉，这里不是因为测试同学不努力，不能把那些BUG过掉，是因为：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;预演环境有真实的庞大数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;预演环境的能还原真实的QPS，会覆盖掉很多边界场景&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有些测试必须在生产环境进行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;预演需要做方案&lt;/strong&gt;，不能引起线上脏数据&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了这些东西就可以进行预演了，然后这里有一个最大原则：预演请务必尽可能还原真实场景，包括时间点的设置！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那些之前重点关注的问题，很多重要的事情需要扣细节，扣的越多思考越细能考虑到整个事情的所拥有的发展方向，提前堵上错误的路径。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前工作中遇到一个广播的场景，是服务端会推送给web端一个命令消息，web收到消息之后需要向服务端发起一个http请求获取数据，由于命令推送是同一个，根据不同的用户获取的http响应不一样，并且http接口数量也比较大，前期用户不多的情况下http接口的QPS比较低还能接收，逐渐业务增长后，http接口内部实现使用缓存能优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当服务端已经无法优化之后，简单粗暴的，进行推送之后，web收到命令消息之后，0-5分钟内打散请求服务端也能抗一段时间，量持续增长，到0-5分钟即使打散量还是很大，给对应的http接口限流，用户会反馈为什么我没收到消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种逻辑面对大量用户在线确实比较难搞，后面将接口返回的数据进行拆分（动态和静态）静态数据加CDN并在界面上提前下发，动态数据压缩走广播，去掉广播刷接口的逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;带宽也是资源，之前遇到过一个事故，前端获取一个接口数据如果没有获取成功，则会再进行api请求拉取一次，没有做重试退出操作，导致这个接口的流量很大基本上打满了某个服务的所有资源，进而急剧恶化其他请求都无法请求到后端服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前处理的方式是在网关层面限制改接口的流量，部分正常的业务可以打到服务节点上，但是网关层量还是一直升高，最后将改接口直接挂到CDN上，不让回源到服务，但当时CDN缓存的是404响应，事后想想直接把响应结果缓存到CDN，不是所有客户端都正常了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无法及时发现线上问题，请不要乱打日志，可能这个行为是给别人埋坑，info日志能看出业务在正常运行，error日志能看出系统哪些业务出错了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;紧急故障处理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;线上故障总会出现的，我们出现故障如何紧急处理（参见：毛老师 SRE PPT）回复保障方案获&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.7761194029850746&quot; data-type=&quot;png&quot; data-w=&quot;804&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVIS33kLAWnxjriaBS5tXvz1y1TGae4njkXQwefoRibY447tNSAfZfnWjt1Q/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;经验沉淀&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;复盘本质就做两件事情① 评价结果 ② 总结过程经验教训。具体来说：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;复盘要紧密围绕事情结果来讨论。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;事情结果的好坏，取决于是否达成预定目标。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;因此，任何事在启动前必须有明确可衡量的目标。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于目标实现有贡献的，称之为经验；对于目标实现有阻碍影响的，称之为教训。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;经验、教训要能传承并指导后续的行动。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.435129740518962&quot; data-type=&quot;png&quot; data-w=&quot;1002&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVIS7BLhd9fcsnnohEAIkuwK27HdKoXyAVlBibiaXIXib4pHV79Cm5ev3heYg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;blockquote&gt;&lt;p&gt;引用：&lt;/p&gt;&lt;p&gt;https://cloud.tencent.com/developer/article/1666384&lt;/p&gt;&lt;p&gt;https://mp.weixin.qq.com/s/Rx_XuMLeor_M9EuQcYq23w&lt;/p&gt;&lt;p&gt;https://zhuanlan.zhihu.com/p/61363959&lt;/p&gt;&lt;p&gt;https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，今天的分享就到这，喜欢的同学可以四连支持：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11333333333333333&quot; data-type=&quot;png&quot; data-w=&quot;600&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVISF2j9vB6GibthRcchHichxCOJgSnQCxtXicgnsJOzMN3OGoavRfqKULndQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想要更多交流可以加我微信：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5549076773566569&quot; data-type=&quot;png&quot; data-w=&quot;2058&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVISLL8OsELTC2cib9KCGkfsZ5n7C8LzNuF6D9lCcaPJLJPpEjjQib2TXFEA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d388b6efb996179c9afd74fbc2e1544c</guid>
<title>[推荐] TCP 重传、滑动窗口、流量控制、拥塞控好难？看完图解就不愁了（重制）</title>
<link>https://toutiao.io/k/14tz08l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZclQSAM41A1ZnFukibKNKGiapfQQZJOKziaehj1pZzNHTicFkDKBMhTBzjZjys2GHM2nWd3LWt5SA7y0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1344&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;作者：小林coding&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;图解网站：&lt;/span&gt;&lt;span&gt;https://xiaolincoding.com/&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是小林。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很早之前写了这篇文章：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247484017&amp;amp;idx=1&amp;amp;sn=dc54d43bfd5dc088e48adcfa2e2bc13f&amp;amp;chksm=f98e46dbcef9cfcdab645e79138deb078d68ad843b3e424408974bd8f0ecea620a2502a79230&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你还在为 TCP 重传、滑动窗口、流量控制、拥塞控制发愁吗？看完图解就不愁了&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;你还在为 TCP 重传、滑动窗口、流量控制、拥塞控制发愁吗？看完图解就不愁了&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当时有些图片有一些小错误，而公众号文章又无法更新图片，所以我纠正了这些图片后，重新发一下。&lt;strong&gt;&lt;span&gt;还有大家看文章的话，还是尽量去网站（https://xiaolincoding.com），因为网站的内容会实时更新。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如快速恢复的图，我重新画了下，会比较好理解文字中的逻辑：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.33499288762446655&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREHVKJERVdWXGjAhPUKXSUnxib37vwkekwdXicRC5Mtj40CuichWgPibOibCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2812&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;正文&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP &lt;strong&gt;巨复杂&lt;/strong&gt;，它为了保证可靠性，用了巨多的机制来保证，真是个「伟大」的协议，写着写着发现这水太深了。。。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文的全部图片都是小林绘画的，非常的辛苦且累，不废话了，直接进入正文，Go！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相信大家都知道 TCP 是一个可靠传输的协议，那它是如何保证可靠的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了实现可靠性传输，需要考虑很多事情，例如数据的破坏、丢包、重复以及分片顺序混乱等问题。如不能解决这些问题，也就无从谈起可靠传输。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，TCP 是通过序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天，将重点介绍 TCP 的&lt;strong&gt;重传机制、滑动窗口、流量控制、拥塞控制。&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7201166180758017&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREvicJoYPbEZ99mThTev5XWv7IcSfdKlucGCjpz4ZnqQVlovAEibuQZgxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1029&quot;/&gt;&lt;/figure&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;重传机制&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 实现可靠传输的方式之一，是通过序列号与确认应答。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 TCP 中，当发送端的数据到达接收主机时，接收端主机会返回一个确认应答消息，表示已收到消息。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.6042654028436019&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREMlvkyHZ0bPmN5pBhEdcJrhC42VTT8bA4fQmeYGvucOpgQsry78tflg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;422&quot;/&gt;&lt;figcaption&gt;正常的数据传输&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但在错综复杂的网络，并不一定能如上图那么顺利能正常的数据传输，万一数据在传输过程中丢失了呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以 TCP 针对数据包丢失的情况，会用&lt;strong&gt;重传机制&lt;/strong&gt;解决。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来说说常见的重传机制：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;超时重传&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重传机制的其中一个方式，就是在发送数据时，设定一个定时器，当超过指定的时间后，没有收到对方的 &lt;code&gt;ACK&lt;/code&gt; 确认应答报文，就会重发该数据，也就是我们常说的&lt;strong&gt;超时重传&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 会在以下两种情况发生超时重传：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7747252747252747&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREzeT61Vib4I3av0pZXAqEfKFbsLMeTdC7ric6eI3ZyiagyvDstv1pxKYNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1092&quot;/&gt;&lt;figcaption&gt;超时重传的两种情况&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;超时时间应该设置为多少呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先来了解一下什么是 &lt;code&gt;RTT&lt;/code&gt;（Round-Trip Time 往返时延），从下图我们就可以知道：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8465473145780051&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREOJvkH67icJGwDvg3goGP9T7XsvmQNBOVq2REiaWxaGNodia9WBibg2zqQA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;782&quot;/&gt;&lt;figcaption&gt;RTT&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;RTT&lt;/code&gt; 指的是&lt;strong&gt;数据发送时刻到接收到确认的时刻的差值&lt;/strong&gt;，也就是包的往返时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;超时重传时间是以 &lt;code&gt;RTO&lt;/code&gt; （Retransmission Timeout 超时重传时间）表示。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设在重传的情况下，超时时间 &lt;code&gt;RTO&lt;/code&gt; 「较长或较短」时，会发生什么事情呢？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5991501416430595&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREjqDa1y01LMHJSyceiaDcFiczBcUbXNuE1mWPULfiaZIwoe3LSZash4jfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1412&quot;/&gt;&lt;figcaption&gt;超时时间较长与较短&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上图中有两种超时时间不同的情况：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当超时时间 &lt;strong&gt;RTO 较大&lt;/strong&gt;时，重发就慢，丢了老半天才重发，没有效率，性能差；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当超时时间 &lt;strong&gt;RTO 较小&lt;/strong&gt;时，会导致可能并没有丢就重发，于是重发的就快，会增加网络拥塞，导致更多的超时，更多的超时导致更多的重发。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;精确的测量超时时间 &lt;code&gt;RTO&lt;/code&gt; 的值是非常重要的，这可让我们的重传机制更高效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据上述的两种情况，我们可以得知，&lt;strong&gt;超时重传时间 RTO 的值应该略大于报文往返  RTT 的值&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7811993517017828&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRExpxutXReoIywqBf4gdE3V4NjKnZbt9z7g84T8l7M0MaPtJZ1RNhK4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;617&quot;/&gt;&lt;figcaption&gt;RTO 应略大于 RTT&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，可能大家觉得超时重传时间 &lt;code&gt;RTO&lt;/code&gt; 的值计算，也不是很复杂嘛。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好像就是在发送端发包时记下 &lt;code&gt;t0&lt;/code&gt; ，然后接收端再把这个 &lt;code&gt;ack&lt;/code&gt; 回来时再记一个 &lt;code&gt;t1&lt;/code&gt;，于是 &lt;code&gt;RTT = t1 – t0&lt;/code&gt;。没那么简单，&lt;strong&gt;这只是一个采样，不能代表普遍情况&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上「报文往返 RTT 的值」是经常变化的，因为我们的网络也是时常变化的。也就因为「报文往返 RTT 的值」 是经常波动变化的，所以「超时重传时间 RTO 的值」应该是一个&lt;strong&gt;动态变化的值&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看看 Linux 是如何计算 &lt;code&gt;RTO&lt;/code&gt; 的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;估计往返时间，通常需要采样以下两个：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;需要 TCP 通过采样 RTT 的时间，然后进行加权平均，算出一个平滑 RTT 的值，而且这个值还是要不断变化的，因为网络状况不断地变化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;除了采样 RTT，还要采样 RTT 的波动范围，这样就避免如果 RTT 有一个大的波动的话，很难被发现的情况。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RFC6289 建议使用以下的公式计算 RTO：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7668393782383419&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRE1oHvhHhd3xrl2oicNkMs9D094WrfZMgKYPOaNCPOahiakhDoE1IHQSFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1158&quot;/&gt;&lt;figcaption&gt;RFC6289 建议的 RTO 计算&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 &lt;code&gt;SRTT&lt;/code&gt; 是计算平滑的RTT ，&lt;code&gt;DevRTR&lt;/code&gt; 是计算平滑的RTT 与 最新 RTT 的差距。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Linux 下，&lt;strong&gt;α = 0.125，β = 0.25， μ = 1，∂ = 4&lt;/strong&gt;。别问怎么来的，问就是大量实验中调出来的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果超时重发的数据，再次超时的时候，又需要重传的时候，TCP 的策略是&lt;strong&gt;超时间隔加倍。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是&lt;strong&gt;每当遇到一次超时重传的时候，都会将下一次超时时间间隔设为先前值的两倍。两次超时，就说明网络环境差，不宜频繁反复发送。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;超时触发重传存在的问题是，超时周期可能相对较长。那是不是可以有更快的方式呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是就可以用「快速重传」机制来解决超时重发的时间等待。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;快速重传&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 还有另外一种&lt;strong&gt;快速重传（Fast Retransmit）机制&lt;/strong&gt;，它&lt;strong&gt;不以时间为驱动，而是以数据驱动重传&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;快速重传机制，是如何工作的呢？其实很简单，一图胜千言。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9304482225656878&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREybzjXrmSZFSNDpjmBrC5fhdCSFsjLOmLl7f86oeabMO5Nu5zNDZoPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;647&quot;/&gt;&lt;figcaption&gt;快速重传机制&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上图，发送方发出了 1，2，3，4，5 份数据：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一份 Seq1 先送到了，于是就 Ack 回 2；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;结果 Seq2 因为某些原因没收到，Seq3 到达了，于是还是 Ack 回 2；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;后面的 Seq4 和 Seq5 都到了，但还是 Ack 回 2，因为 Seq2 还是没有收到；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;发送端收到了三个 Ack = 2 的确认，知道了 Seq2 还没有收到，就会在定时器过期之前，重传丢失的 Seq2。&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最后，收到了 Seq2，此时因为 Seq3，Seq4，Seq5 都收到了，于是 Ack 回 6 。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，快速重传的工作方式是当收到三个相同的 ACK 报文时，会在定时器过期之前，重传丢失的报文段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;快速重传机制只解决了一个问题，就是超时时间的问题，但是它依然面临着另外一个问题。就是&lt;strong&gt;重传的时候，是重传之前的一个，还是重传所有的问题。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如对于上面的例子，是重传 Seq2 呢？还是重传 Seq2、Seq3、Seq4、Seq5 呢？因为发送端并不清楚这连续的三个 Ack 2 是谁传回来的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据 TCP 不同的实现，以上两种情况都是有可能的。可见，这是一把双刃剑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决不知道该重传哪些 TCP 报文，于是就有 &lt;code&gt;SACK&lt;/code&gt; 方法。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;SACK 方法&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一种实现重传机制的方式叫：&lt;code&gt;SACK&lt;/code&gt;（ Selective Acknowledgment 选择性确认）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式需要在 TCP 头部「选项」字段里加一个 &lt;code&gt;SACK&lt;/code&gt; 的东西，它&lt;strong&gt;可以将缓存的地图发送给发送方&lt;/strong&gt;，这样发送方就可以知道哪些数据收到了，哪些数据没收到，知道了这些信息，就可以&lt;strong&gt;只重传丢失的数据&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图，发送方收到了三次同样的 ACK 确认报文，于是就会触发快速重发机制，通过 &lt;code&gt;SACK&lt;/code&gt; 信息发现只有 &lt;code&gt;200~299&lt;/code&gt; 这段数据丢失，则重发时，就只选择了这个 TCP 段进行重复。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5852795470629866&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREWPfg9Pv9YY7L2cChGwfn8Y0w4CX2gs270uMYCjicbubtxGCHTffiapmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1413&quot;/&gt;&lt;figcaption&gt;选择性确认&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果要支持 &lt;code&gt;SACK&lt;/code&gt;，必须双方都要支持。在 Linux 下，可以通过 &lt;code&gt;net.ipv4.tcp_sack&lt;/code&gt; 参数打开这个功能（Linux 2.4 后默认打开）。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Duplicate SACK&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Duplicate SACK 又称 &lt;code&gt;D-SACK&lt;/code&gt;，其主要&lt;strong&gt;使用了 SACK 来告诉「发送方」有哪些数据被重复接收了。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面举例两个栗子，来说明 &lt;code&gt;D-SACK&lt;/code&gt; 的作用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;栗子一号：ACK 丢包&lt;/em&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6786922209695603&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREqgx7l2xco5SciaaRbpeuOC2HtKLmzgyxcU0licAnpwYQwwib4K6J14m7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;887&quot;/&gt;&lt;figcaption&gt;ACK 丢包&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;「接收方」发给「发送方」的两个 ACK 确认应答都丢失了，所以发送方超时后，重传第一个数据包（3000 ~ 3499）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;于是「接收方」发现数据是重复收到的，于是回了一个 SACK = 3000~3500&lt;/strong&gt;，告诉「发送方」 3000~3500 的数据早已被接收了，因为 ACK 都到了 4000 了，已经意味着 4000 之前的所有数据都已收到，所以这个 SACK 就代表着 &lt;code&gt;D-SACK&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这样「发送方」就知道了，数据没有丢，是「接收方」的 ACK 确认报文丢了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;栗子二号：网络延时&lt;/em&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1247401247401247&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREJwGh4ia0YQ7uC2mjicFK3lAfrVuVqXDMzk5FDtKTNSFw1bZibokVrIkhQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;962&quot;/&gt;&lt;figcaption&gt;网络延时&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;数据包（1000~1499） 被网络延迟了，导致「发送方」没有收到 Ack 1500 的确认报文。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;而后面报文到达的三个相同的 ACK 确认报文，就触发了快速重传机制，但是在重传后，被延迟的数据包（1000~1499）又到了「接收方」；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;所以「接收方」回了一个 SACK=1000~1500，因为 ACK 已经到了 3000，所以这个 SACK 是 D-SACK，表示收到了重复的包。&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这样发送方就知道快速重传触发的原因不是发出去的包丢了，也不是因为回应的 ACK 包丢了，而是因为网络延迟了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可见，&lt;code&gt;D-SACK&lt;/code&gt; 有这么几个好处：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;可以让「发送方」知道，是发出去的包丢了，还是接收方回应的 ACK 包丢了;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以知道是不是「发送方」的数据包被网络延迟了;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以知道网络中是不是把「发送方」的数据包给复制了;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Linux 下可以通过 &lt;code&gt;net.ipv4.tcp_dsack&lt;/code&gt; 参数开启/关闭这个功能（Linux 2.4 后默认打开）。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;滑动窗口&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;引入窗口概念的原因&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都知道 TCP 是每发送一个数据，都要进行一次确认应答。当上一个数据包收到了应答了， 再发送下一个。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个模式就有点像我和你面对面聊天，你一句我一句。但这种方式的缺点是效率比较低的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你说完一句话，我在处理其他事情，没有及时回复你，那你不是要干等着我做完其他事情后，我回复你，你才能说下一句话，很显然这不现实。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2389558232931728&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREibnoG4h8tC1zwcTbkvJ8II6LtCsPMzGu86Q1QTficBgicTI2TcIEWGjuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;498&quot;/&gt;&lt;figcaption&gt;按数据包进行确认应答&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，这样的传输方式有一个缺点：数据包的&lt;strong&gt;往返时间越长，通信的效率就越低&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为解决这个问题，TCP 引入了&lt;strong&gt;窗口&lt;/strong&gt;这个概念。即使在往返时间较长的情况下，它也不会降低网络通信的效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么有了窗口，就可以指定窗口大小，窗口大小就是指&lt;strong&gt;无需等待确认应答，而可以继续发送数据的最大值&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;窗口的实现实际上是操作系统开辟的一个缓存空间，发送方主机在等到确认应答返回之前，必须在缓冲区中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓存区清除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设窗口大小为 &lt;code&gt;3&lt;/code&gt; 个 TCP 段，那么发送方就可以「连续发送」 &lt;code&gt;3&lt;/code&gt; 个 TCP 段，并且中途若有 ACK 丢失，可以通过「下一个确认应答进行确认」。如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7024504084014003&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREFfDH7ibtQ3rMiaV5LbHhMiasicVgJDibnGRzsgUicYL1RWRhAPtgv2Z8Rgvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;857&quot;/&gt;&lt;figcaption&gt;用滑动窗口方式并行处理&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图中的 ACK 600 确认应答报文丢失，也没关系，因为可以通过下一个确认应答进行确认，只要发送方收到了 ACK 700 确认应答，就意味着 700 之前的所有数据「接收方」都收到了。这个模式就叫&lt;strong&gt;累计确认&lt;/strong&gt;或者&lt;strong&gt;累计应答&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;窗口大小由哪一方决定？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 头里有一个字段叫 &lt;code&gt;Window&lt;/code&gt;，也就是窗口大小。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，通常窗口的大小是由接收方的窗口大小来决定的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发送方发送的数据大小不能超过接收方的窗口大小，否则接收方就无法正常接收到数据。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;发送方的滑动窗口&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先来看看发送方的窗口，下图就是发送方缓存的数据，根据处理的情况分成四个部分，其中深蓝色方框是发送窗口，紫色方框是可用窗口：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3382352941176471&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREtGqTVr70mIgE9l8E1BkBGQyGYKUema83m8Pd0GKDj2IYfEC0fDof5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1428&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;#1 是已发送并收到 ACK确认的数据：1~31 字节&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;#2 是已发送但未收到 ACK确认的数据：32~45 字节&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;#3 是未发送但总大小在接收方处理范围内（接收方还有空间）：46~51字节&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;#4 是未发送但总大小超过接收方处理范围（接收方没有空间）：52字节以后&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在下图，当发送方把数据「全部」都一下发送出去后，可用窗口的大小就为 0 了，表明可用窗口耗尽，在没收到 ACK 确认之前是无法继续发送数据了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.27521008403361347&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRE7yp9no9Xib9EVicibMvicX0pVMetbd7DFrjVcN1I2FvT8VciaNXkKbOdIvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1428&quot;/&gt;&lt;figcaption&gt;可用窗口耗尽&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在下图，当收到之前发送的数据 &lt;code&gt;32~36&lt;/code&gt; 字节的 ACK 确认应答后，如果发送窗口的大小没有变化，则&lt;strong&gt;滑动窗口往右边移动 5 个字节，因为有 5 个字节的数据被应答确认&lt;/strong&gt;，接下来 &lt;code&gt;52~56&lt;/code&gt; 字节又变成了可用窗口，那么后续也就可以发送 &lt;code&gt;52~56&lt;/code&gt; 这 5 个字节的数据了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2537313432835821&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREoU3LwTicLLnCrH7MKdezgwcZ5JKknztGVKp5ZcOiaL23tQYmKuCUeqjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1608&quot;/&gt;&lt;figcaption&gt;32 ~ 36 字节已确认&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;程序是如何表示发送方的四个部分的呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 滑动窗口方案使用三个指针来跟踪在四个传输类别中的每一个类别中的字节。其中两个指针是绝对指针（指特定的序列号），一个是相对指针（需要做偏移）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3592436974789916&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRE3kCmLRlJnLWIx3jrseprMy9Yok0kreDicTuucdzDSJsO7B4NUIrWE6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1428&quot;/&gt;&lt;figcaption&gt;SND.WND、SND.UN、SND.NXT&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;SND.WND&lt;/code&gt;：表示发送窗口的大小（大小是由接收方指定的）；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;SND.UNA&lt;/code&gt;：是一个绝对指针，它指向的是已发送但未收到确认的第一个字节的序列号，也就是 #2 的第一个字节。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;SND.NXT&lt;/code&gt;：也是一个绝对指针，它指向未发送但可发送范围的第一个字节的序列号，也就是 #3 的第一个字节。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;指向 #4 的第一个字节是个相对指针，它需要 &lt;code&gt;SND.UNA&lt;/code&gt; 指针加上 &lt;code&gt;SND.WND&lt;/code&gt; 大小的偏移量，就可以指向 #4 的第一个字节了。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么可用窗口大小的计算就可以是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;可用窗口大 = SND.WND -（SND.NXT - SND.UNA）&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;接收方的滑动窗口&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们看看接收方的窗口，接收窗口相对简单一些，根据处理的情况划分成三个部分：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;#1 + #2 是已成功接收并确认的数据（等待应用进程读取）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;#3 是未收到数据但可以接收的数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;#4 未收到数据并不可以接收的数据；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3480392156862745&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREu2CFdn3mltnicJqTkcQMCiakNV28uwc9E2T3IKnI7HFwXoibqQTxBPZQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1428&quot;/&gt;&lt;figcaption&gt;接收窗口&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中三个接收部分，使用两个指针进行划分:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;RCV.WND&lt;/code&gt;：表示接收窗口的大小，它会通告给发送方。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;RCV.NXT&lt;/code&gt;：是一个指针，它指向期望从发送方发送来的下一个数据字节的序列号，也就是 #3 的第一个字节。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;指向 #4 的第一个字节是个相对指针，它需要 &lt;code&gt;RCV.NXT&lt;/code&gt; 指针加上 &lt;code&gt;RCV.WND&lt;/code&gt; 大小的偏移量，就可以指向 #4 的第一个字节了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;接收窗口和发送窗口的大小是相等的吗？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并不是完全相等，接收窗口的大小是&lt;strong&gt;约等于&lt;/strong&gt;发送窗口的大小的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为滑动窗口并不是一成不变的。比如，当接收方的应用进程读取数据的速度非常快的话，这样的话接收窗口可以很快的就空缺出来。那么新的接收窗口大小，是通过 TCP 报文中的 Windows 字段来告诉发送方。那么这个传输过程是存在时延的，所以接收窗口和发送窗口是约等于的关系。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;流量控制&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发送方不能无脑的发数据给接收方，要考虑接收方处理能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一直无脑的发数据给对方，但对方处理不过来，那么就会导致触发重发机制，从而导致网络流量的无端的浪费。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决这种现象发生，&lt;strong&gt;TCP 提供一种机制可以让「发送方」根据「接收方」的实际接收能力控制发送的数据量，这就是所谓的流量控制。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面举个栗子，为了简单起见，假设以下场景：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端是接收方，服务端是发送方&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;假设接收窗口和发送窗口相同，都为 &lt;code&gt;200&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;假设两个设备在整个传输过程中都保持相同的窗口大小，不受外界影响&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.6124082721814543&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREZIiaosKyJGcbtt60ibrMmCkvVASEopib3GTMkeibfxd6zAEWiaxEABu2AKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1499&quot;/&gt;&lt;figcaption&gt;流量控制&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据上图的流量控制，说明下每个过程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端向服务端发送请求数据报文。这里要说明下，本次例子是把服务端作为发送方，所以没有画出服务端的接收窗口。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到请求报文后，发送确认报文和 80 字节的数据，于是可用窗口 &lt;code&gt;Usable&lt;/code&gt; 减少为 120 字节，同时 &lt;code&gt;SND.NXT&lt;/code&gt; 指针也向右偏移 80 字节后，指向 321，&lt;strong&gt;这意味着下次发送数据的时候，序列号是 321。&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到 80 字节数据后，于是接收窗口往右移动 80 字节，&lt;code&gt;RCV.NXT&lt;/code&gt; 也就指向 321，&lt;strong&gt;这意味着客户端期望的下一个报文的序列号是 321&lt;/strong&gt;，接着发送确认报文给服务端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端再次发送了 120 字节数据，于是可用窗口耗尽为 0，服务端无法再继续发送数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到 120 字节的数据后，于是接收窗口往右移动 120 字节，&lt;code&gt;RCV.NXT&lt;/code&gt; 也就指向 441，接着发送确认报文给服务端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到对 80 字节数据的确认报文后，&lt;code&gt;SND.UNA&lt;/code&gt; 指针往右偏移后指向 321，于是可用窗口 &lt;code&gt;Usable&lt;/code&gt; 增大到 80。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到对 120 字节数据的确认报文后，&lt;code&gt;SND.UNA&lt;/code&gt; 指针往右偏移后指向 441，于是可用窗口 &lt;code&gt;Usable&lt;/code&gt; 增大到 200。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端可以继续发送了，于是发送了 160 字节的数据后，&lt;code&gt;SND.NXT&lt;/code&gt; 指向 601，于是可用窗口  &lt;code&gt;Usable&lt;/code&gt; 减少到 40。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到 160 字节后，接收窗口往右移动了 160 字节，&lt;code&gt;RCV.NXT&lt;/code&gt; 也就是指向了 601，接着发送确认报文给服务端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到对 160 字节数据的确认报文后，发送窗口往右移动了 160 字节，于是 &lt;code&gt;SND.UNA&lt;/code&gt; 指针偏移了 160 后指向 601，可用窗口 &lt;code&gt;Usable&lt;/code&gt; 也就增大至了 200。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;操作系统缓冲区与滑动窗口的关系&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面的流量控制例子，我们假定了发送窗口和接收窗口是不变的，但是实际上，发送窗口和接收窗口中所存放的字节数，都是放在操作系统内存缓冲区中的，而操作系统的缓冲区，会&lt;strong&gt;被操作系统调整&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当应用进程没办法及时读取缓冲区的内容时，也会对我们的缓冲区造成影响。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;那操心系统的缓冲区，是如何影响发送窗口和接收窗口的呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;我们先来看看第一个例子。&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当应用程序没有及时读取缓存时，发送窗口和接收窗口的变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;考虑以下场景：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端作为发送方，服务端作为接收方，发送窗口和接收窗口初始大小为 &lt;code&gt;360&lt;/code&gt;；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端非常的繁忙，当收到客户端的数据时，应用层不能及时读取数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.5532837670384139&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREBdBpPrONw6d6ruvfMSynOAZFTDdibfN1L5v0kJNsr2c8B0nJBSajtew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1614&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据上图的流量控制，说明下每个过程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端发送 140 字节数据后，可用窗口变为 220 （360 - 140）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到 140 字节数据，&lt;strong&gt;但是服务端非常繁忙，应用进程只读取了 40 个字节，还有 100 字节占用着缓冲区，于是接收窗口收缩到了 260 （360 - 100）&lt;/strong&gt;，最后发送确认信息时，将窗口大小通告给客户端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到确认和窗口通告报文后，发送窗口减少为 260。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端发送 180 字节数据，此时可用窗口减少到 80。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到 180 字节数据，&lt;strong&gt;但是应用程序没有读取任何数据，这 180 字节直接就留在了缓冲区，于是接收窗口收缩到了 80 （260 - 180）&lt;/strong&gt;，并在发送确认信息时，通过窗口大小给客户端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到确认和窗口通告报文后，发送窗口减少为 80。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端发送 80 字节数据后，可用窗口耗尽。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到 80 字节数据，&lt;strong&gt;但是应用程序依然没有读取任何数据，这 80 字节留在了缓冲区，于是接收窗口收缩到了 0&lt;/strong&gt;，并在发送确认信息时，通过窗口大小给客户端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到确认和窗口通告报文后，发送窗口减少为 0。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可见最后窗口都收缩为 0 了，也就是发生了窗口关闭。当发送方可用窗口变为 0 时，发送方实际上会定时发送窗口探测报文，以便知道接收方的窗口是否发生了改变，这个内容后面会说，这里先简单提一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;我们先来看看第二个例子。&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当服务端系统资源非常紧张的时候，操心系统可能会直接减少了接收缓冲区大小，这时应用程序又无法及时读取缓存数据，那么这时候就有严重的事情发生了，会出现数据包丢失的现象。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.008537279453614&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRE0L7033r8JgXibsUt7o5msxt1qYIpZ6nMRepEFTfBzFgUsBibeyaRqq6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1757&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明下每个过程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端发送 140 字节的数据，于是可用窗口减少到了 220。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;服务端因为现在非常的繁忙，操作系统于是就把接收缓存减少了 120 字节，当收到 140 字节数据后，又因为应用程序没有读取任何数据，所以 140 字节留在了缓冲区中，于是接收窗口大小从 360 收缩成了 100&lt;/strong&gt;，最后发送确认信息时，通告窗口大小给对方。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;此时客户端因为还没有收到服务端的通告窗口报文，所以不知道此时接收窗口收缩成了 100，客户端只会看自己的可用窗口还有 220，所以客户端就发送了 180 字节数据，于是可用窗口减少到 40。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端收到了 180 字节数据时，&lt;strong&gt;发现数据大小超过了接收窗口的大小，于是就把数据包丢失了。&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端收到第 2 步时，服务端发送的确认报文和通告窗口报文，尝试减少发送窗口到 100，把窗口的右端向左收缩了 80，此时可用窗口的大小就会出现诡异的负值。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，如果发生了先减少缓存，再收缩窗口，就会出现丢包的现象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;为了防止这种情况发生，TCP 规定是不允许同时减少缓存又收缩窗口的，而是采用先收缩窗口，过段时间再减少缓存，这样就可以避免了丢包情况。&lt;/strong&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;窗口关闭&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在前面我们都看到了，TCP 通过让接收方指明希望从发送方接收的数据大小（窗口大小）来进行流量控制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如果窗口大小为 0 时，就会阻止发送方给接收方传递数据，直到窗口变为非 0 为止，这就是窗口关闭。&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;窗口关闭潜在的危险&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接收方向发送方通告窗口大小时，是通过 &lt;code&gt;ACK&lt;/code&gt; 报文来通告的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，当发生窗口关闭时，接收方处理完数据后，会向发送方通告一个窗口非 0 的 ACK 报文，如果这个通告窗口的 ACK 报文在网络中丢失了，那麻烦就大了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7490942028985508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREyYHCHPZqUd9sJcZn1LU07c8GMvl8riaibTJpzUEX3adNFDf9bzERTMDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1104&quot;/&gt;&lt;figcaption&gt;窗口关闭潜在的危险&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这会导致发送方一直等待接收方的非 0 窗口通知，接收方也一直等待发送方的数据，如不采取措施，这种相互等待的过程，会造成了死锁的现象。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;TCP 是如何解决窗口关闭时，潜在的死锁现象呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决这个问题，TCP 为每个连接设有一个持续定时器，&lt;strong&gt;只要 TCP 连接一方收到对方的零窗口通知，就启动持续计时器。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果持续计时器超时，就会发送&lt;strong&gt;窗口探测 ( Window
probe ) 报文&lt;/strong&gt;，而对方在确认这个探测报文时，给出自己现在的接收窗口大小。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7491554054054054&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREelkXDGcZdnic9RqfTP7kG41HjrypQofib4QROLnQOmnMLSNffQ3EmBdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1184&quot;/&gt;&lt;figcaption&gt;窗口探测&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果接收窗口仍然为 0，那么收到这个报文的一方就会重新启动持续计时器；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果接收窗口不是 0，那么死锁的局面就可以被打破了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;窗口探测的次数一般为 3 次，每次大约 30-60 秒（不同的实现可能会不一样）。如果 3 次过后接收窗口还是 0 的话，有的 TCP 实现就会发 &lt;code&gt;RST&lt;/code&gt; 报文来中断连接。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;糊涂窗口综合症&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果接收方太忙了，来不及取走接收窗口里的数据，那么就会导致发送方的发送窗口越来越小。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到最后，&lt;strong&gt;如果接收方腾出几个字节并告诉发送方现在有几个字节的窗口，而发送方会义无反顾地发送这几个字节，这就是糊涂窗口综合症&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要知道，我们的 &lt;code&gt;TCP + IP&lt;/code&gt; 头有 &lt;code&gt;40&lt;/code&gt; 个字节，为了传输那几个字节的数据，要达上这么大的开销，这太不经济了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就好像一个可以承载 50 人的大巴车，每次来了一两个人，就直接发车。除非家里有矿的大巴司机，才敢这样玩，不然迟早破产。要解决这个问题也不难，大巴司机等乘客数量超过了 25 个，才认定可以发车。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现举个糊涂窗口综合症的栗子，考虑以下场景：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接收方的窗口大小是 360 字节，但接收方由于某些原因陷入困境，假设接收方的应用层读取的能力如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;接收方每接收 3 个字节，应用程序就只能从缓冲区中读取 1 个字节的数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在下一个发送方的 TCP 段到达之前，应用程序还从缓冲区中读取了 40 个额外的字节；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9721718088324259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRENU4U8vxerdn8EyIkNUoooGrZJuDF39NTSmJptj24ruEZbWuEMVWDWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1653&quot;/&gt;&lt;figcaption&gt;糊涂窗口综合症&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个过程的窗口大小的变化，在图中都描述的很清楚了，可以发现窗口不断减少了，并且发送的数据都是比较小的了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，糊涂窗口综合症的现象是可以发生在发送方和接收方：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是，要解决糊涂窗口综合症，就解决上面两个问题就可以了&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;让接收方不通告小窗口给发送方&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;让发送方避免发送小数据&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;怎么让接收方不通告小窗口呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接收方通常的策略如下:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当「窗口大小」小于 min( MSS，缓存空间/2 ) ，也就是小于 MSS 与 1/2 缓存大小中的最小值时，就会向发送方通告窗口为 &lt;code&gt;0&lt;/code&gt;，也就阻止了发送方再发数据过来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;等到接收方处理了一些数据后，窗口大小 &amp;gt;= MSS，或者接收方缓存空间有一半可以使用，就可以把窗口打开让发送方发送数据过来。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;怎么让发送方避免发送小数据呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发送方通常的策略:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 Nagle 算法，该算法的思路是延时处理，它满足以下两个条件中的一条才可以发送数据：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;要等到窗口大小 &amp;gt;= &lt;code&gt;MSS&lt;/code&gt; 或是 数据大小 &amp;gt;= &lt;code&gt;MSS&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;收到之前发送数据的 &lt;code&gt;ack&lt;/code&gt; 回包&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要没满足上面条件中的一条，发送方一直在囤积数据，直到满足上面的发送条件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，Nagle 算法默认是打开的，如果对于一些需要小数据包交互的场景的程序，比如，telnet 或 ssh 这样的交互性比较强的程序，则需要关闭 Nagle 算法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以在 Socket 设置 &lt;code&gt;TCP_NODELAY&lt;/code&gt; 选项来关闭这个算法（关闭 Nagle 算法没有全局参数，需要根据每个应用自己的特点来关闭）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;setsockopt(sock_fd, IPPROTO_TCP, TCP_NODELAY, (&lt;span&gt;char&lt;/span&gt; *)&amp;amp;value, &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;拥塞控制&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;为什么要有拥塞控制呀，不是有流量控制了吗？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面的流量控制是避免「发送方」的数据填满「接收方」的缓存，但是并不知道网络的中发生了什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来说，计算机网络都处在一个共享的环境。因此也有可能会因为其他主机之间的通信使得网络拥堵。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;在网络出现拥堵时，如果继续发送大量数据包，可能会导致数据包时延、丢失等，这时 TCP 就会重传数据，但是一重传就会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，这个情况就会进入恶性循环被不断地放大....&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，TCP 不能忽略网络上发生的事，它被设计成一个无私的协议，当网络发送拥塞时，TCP 会自我牺牲，降低发送的数据量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是，就有了&lt;strong&gt;拥塞控制&lt;/strong&gt;，控制的目的就是&lt;strong&gt;避免「发送方」的数据填满整个网络。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了在「发送方」调节所要发送数据的量，定义了一个叫做「&lt;strong&gt;拥塞窗口&lt;/strong&gt;」的概念。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;什么是拥塞窗口？和发送窗口有什么关系呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;拥塞窗口 cwnd&lt;/strong&gt;是发送方维护的一个的状态变量，它会根据&lt;strong&gt;网络的拥塞程度动态变化的&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在前面提到过发送窗口 &lt;code&gt;swnd&lt;/code&gt; 和接收窗口 &lt;code&gt;rwnd&lt;/code&gt; 是约等于的关系，那么由于加入了拥塞窗口的概念后，此时发送窗口的值是swnd = min(cwnd, rwnd)，也就是拥塞窗口和接收窗口中的最小值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拥塞窗口 &lt;code&gt;cwnd&lt;/code&gt; 变化的规则：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;只要网络中没有出现拥塞，&lt;code&gt;cwnd&lt;/code&gt; 就会增大；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;但网络中出现了拥塞，&lt;code&gt;cwnd&lt;/code&gt; 就减少；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;那么怎么知道当前网络是否出现了拥塞呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实只要「发送方」没有在规定时间内接收到 ACK 应答报文，也就是&lt;strong&gt;发生了超时重传，就会认为网络出现了用拥塞。&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;拥塞控制有哪些控制算法？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拥塞控制主要是四个算法：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;慢启动&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 在刚建立连接完成后，首先是有个慢启动的过程，这个慢启动的意思就是一点一点的提高发送数据包的数量，如果一上来就发大量的数据，这不是给网络添堵吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;慢启动的算法记住一个规则就行：&lt;strong&gt;当发送方每收到一个 ACK，拥塞窗口 cwnd 的大小就会加 1。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里假定拥塞窗口 &lt;code&gt;cwnd&lt;/code&gt; 和发送窗口 &lt;code&gt;swnd&lt;/code&gt; 相等，下面举个栗子：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;连接建立完成后，一开始初始化 &lt;code&gt;cwnd = 1&lt;/code&gt;，表示可以传一个 &lt;code&gt;MSS&lt;/code&gt; 大小的数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当收到一个 ACK 确认应答后，cwnd 增加 1，于是一次能够发送 2 个&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当收到 2 个的 ACK 确认应答后， cwnd 增加 2，于是就可以比之前多发2 个，所以这一次能够发送 4 个&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当这 4 个的 ACK 确认到来的时候，每个确认 cwnd 增加 1， 4 个确认 cwnd 增加 4，于是就可以比之前多发 4 个，所以这一次能够发送 8 个。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6220472440944882&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRE3LSIgDjT5fEJJEy49oLo8c6yb843aaFdfPwSyNezxIBGxv9M7aLO7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1016&quot;/&gt;&lt;figcaption&gt;慢启动算法&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看出慢启动算法，发包的个数是&lt;strong&gt;指数性的增长&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;那慢启动涨到什么时候是个头呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一个叫慢启动门限  &lt;code&gt;ssthresh&lt;/code&gt; （slow start threshold）状态变量。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当 &lt;code&gt;cwnd&lt;/code&gt; &amp;lt;  &lt;code&gt;ssthresh&lt;/code&gt; 时，使用慢启动算法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当 &lt;code&gt;cwnd&lt;/code&gt; &amp;gt;= &lt;code&gt;ssthresh&lt;/code&gt; 时，就会使用「拥塞避免算法」。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;拥塞避免算法&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面说道，当拥塞窗口 &lt;code&gt;cwnd&lt;/code&gt; 「超过」慢启动门限 &lt;code&gt;ssthresh&lt;/code&gt; 就会进入拥塞避免算法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来说 &lt;code&gt;ssthresh&lt;/code&gt; 的大小是 &lt;code&gt;65535&lt;/code&gt; 字节。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么进入拥塞避免算法后，它的规则是：&lt;strong&gt;每当收到一个 ACK 时，cwnd 增加 1/cwnd。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接上前面的慢启动的栗子，现假定 &lt;code&gt;ssthresh&lt;/code&gt; 为 &lt;code&gt;8&lt;/code&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当 8 个 ACK 应答确认到来时，每个确认增加 1/8，8 个 ACK 确认 cwnd 一共增加 1，于是这一次能够发送 9 个 &lt;code&gt;MSS&lt;/code&gt; 大小的数据，变成了&lt;strong&gt;线性增长。&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.838302752293578&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRE24rKa6myYycvJ54GJJf8RerMFKfZNxyiaicC2LoZvCtLiceTH0KXKP67w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;872&quot;/&gt;&lt;figcaption&gt;拥塞避免&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，我们可以发现，拥塞避免算法就是将原本慢启动算法的指数增长变成了线性增长，还是增长阶段，但是增长速度缓慢了一些。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就这么一直增长着后，网络就会慢慢进入了拥塞的状况了，于是就会出现丢包现象，这时就需要对丢失的数据包进行重传。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当触发了重传机制，也就进入了「拥塞发生算法」。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;拥塞发生&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当网络出现拥塞，也就是会发生数据包重传，重传机制主要有两种：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两种使用的拥塞发送算法是不同的，接下来分别来说说。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;发生超时重传的拥塞发生算法&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当发生了「超时重传」，则就会使用拥塞发生算法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个时候，ssthresh 和 cwnd 的值会发生变化：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ssthresh&lt;/code&gt; 设为 &lt;code&gt;cwnd/2&lt;/code&gt;，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;cwnd&lt;/code&gt; 重置为 &lt;code&gt;1&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7644483362521891&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvRExtA2mLaf1XM5W7UUXwMZIbd7HRjBIgkRh1FRq1pvdmibyG1IC7J1dRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1142&quot;/&gt;&lt;figcaption&gt;拥塞发送 —— 超时重传&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着，就重新开始慢启动，慢启动是会突然减少数据流的。这真是一旦「超时重传」，马上回到解放前。但是这种方式太激进了，反应也很强烈，会造成网络卡顿。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就好像本来在秋名山高速漂移着，突然来个紧急刹车，轮胎受得了吗。。。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;发生快速重传的拥塞发生算法&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有更好的方式，前面我们讲过「快速重传算法」。当接收方发现丢了一个中间包的时候，发送三次前一个包的 ACK，于是发送端就会快速地重传，不必等待超时再重传。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 认为这种情况不严重，因为大部分没丢，只丢了一小部分，则 &lt;code&gt;ssthresh&lt;/code&gt; 和 &lt;code&gt;cwnd&lt;/code&gt; 变化如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;cwnd = cwnd/2&lt;/code&gt; ，也就是设置为原来的一半;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ssthresh = cwnd&lt;/code&gt;;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;进入快速恢复算法&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;快速恢复&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;快速重传和快速恢复算法一般同时使用，快速恢复算法是认为，你还能收到 3 个重复 ACK 说明网络也不那么糟糕，所以没有必要像 &lt;code&gt;RTO&lt;/code&gt; 超时那么强烈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正如前面所说，进入快速恢复之前，&lt;code&gt;cwnd&lt;/code&gt; 和 &lt;code&gt;ssthresh&lt;/code&gt; 已被更新了：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;cwnd = cwnd/2&lt;/code&gt; ，也就是设置为原来的一半;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ssthresh = cwnd&lt;/code&gt;;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，进入快速恢复算法如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;拥塞窗口 &lt;code&gt;cwnd = ssthresh + 3&lt;/code&gt; （ 3 的意思是确认有 3 个数据包被收到了）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重传丢失的数据包；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果再收到重复的 ACK，那么 cwnd 增加 1；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果收到新数据的 ACK 后，把 cwnd 设置为第一步中的 ssthresh 的值，原因是该 ACK 确认了新的数据，说明从 duplicated  ACK 时的数据都已收到，该恢复过程已经结束，可以回到恢复之前的状态了，也即再次进入拥塞避免状态；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6457100591715976&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREy2lpkJmVLajoOIz5eyzJxU1nOQUmWjmRo7icLAUUHLFstgXNqT3U1sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1352&quot;/&gt;&lt;figcaption&gt;快速重传和快速恢复&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是没有像「超时重传」一夜回到解放前，而是还在比较高的值，后续呈线性增长。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;拥塞算法示意图&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，以上就是拥塞控制的全部内容了，看完后，你再来看下面这张图片，每个过程我相信你都能明白：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.50875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZcHKlpxE3Eyibf87WLibypvREU5BJagnDSNS1U5O5kicKFTd8VkMibeD6tSUwSh2X4RDLhP6rz7ZoKIew/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;figcaption&gt;TCP 拥塞控制&lt;/figcaption&gt;&lt;/figure&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[1] 趣谈网络协议专栏.刘超.极客时间&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[2] Web协议详解与抓包实战专栏.陶辉.极客时间&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[3] TCP/IP详解 卷1：协议.范建华 译.机械工业出版社&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[4] 图解TCP/IP.竹下隆史.人民邮电出版社&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[5] The TCP/IP Guide.Charles M. Kozierok.&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[6] TCP那些事（上）.陈皓.酷壳博客.
https://coolshell.cn/articles/11564.html&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[7] TCP那些事（下）.陈皓.酷壳博客.https://coolshell.cn/articles/11609.html&lt;/span&gt;&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是吧？TCP 巨复杂吧？看完很累吧？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但这还只是 TCP 冰山一脚，它的更深处就由你们自己去探索啦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;小林是专为大家图解的工具人，Goodbye，我们下次见！&lt;/strong&gt;&lt;/p&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;28&quot;&gt;&lt;span&gt;&lt;strong mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;28&quot;&gt;图解系列文章：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;24&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247507000&amp;amp;idx=1&amp;amp;sn=c045101b45dd70ec37f9b81361b09f14&amp;amp;chksm=f98d9892cefa1184ac8e278e468a8a225cd5a6f4c3dfba83ed223c5da69421041961bfb945cc&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;小林的网站上线啦！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;24&quot; hasload=&quot;1&quot;&gt;小林的网站上线啦！&lt;/a&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;32&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247492900&amp;amp;idx=1&amp;amp;sn=2c1d06a667b1e17e6d8caabff2bbb85b&amp;amp;chksm=f98da18ecefa28986109f13d28c1a06f304cb4d897eb2e931e79dc82d0b054ef6a9f7e1e4e91&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;小林的图解系统，大曝光！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;32&quot;&gt;小林的图解系统，大曝光！&lt;/a&gt;&lt;br mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;32&quot;/&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;32&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247491944&amp;amp;idx=1&amp;amp;sn=b90deba780ae3840668e21127e467b83&amp;amp;chksm=f98da5c2cefa2cd456045e9b2ed92837ed10e4a2c650f463b29ef5d7f8f4d01014d92225acad&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;不鸽了，小林的「图解网络 3.0 」发布！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;32&quot;&gt;&lt;span&gt;不鸽了，小林的「图解网络 3.0 」发布！&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxODAzNDg4NQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZfTwwjfpJhXgIrYMgtVcLhQQBVb02clZfKicbxaibSTNJqXe9Zu8ydiavZKJWJAIhKcnD9hBuKU92JZQ/0?wx_fmt=png&quot; data-nickname=&quot;小林coding&quot; data-alias=&quot;CodingLin&quot; data-signature=&quot;专注图解计算机基础，让天下没有难懂的八股文！刷题网站：xiaolincoding.com&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>