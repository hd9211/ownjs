<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>cbb9ac1dc92411698f9c08d5b64336b4</guid>
<title>周末别闲着，快来吧！</title>
<link>https://toutiao.io/k/sat069j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e56ca95dc12a3465b0db4a05b8bead0c</guid>
<title>百度技术：“App 优化网络，先从 HTTPDNS 开始”</title>
<link>https://toutiao.io/k/u4000j0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4255555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaczD18OicSwD5SBeyBgiapgZkg6Y5Y7EXYJJnOK3CZNmm98mIVPtJCcnK7u41VEF0Kb4DGDvt58NicM4Z1nkqaibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、前言&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hi，大家好，这里是承香墨影！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们谈到优化时，一个通用的思路是将待优化的功能，拆分成一个个小的环节，再每个环节单独去分析有没有可以优化的点，App 的网络优化也是如此。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但说到网络优化，整个链路非常的长，中间的涉及到客户端 &amp;amp; 服务端，流程非常的长。在 App 侧，只占整个链路极小的一段，可以优化的无非也就是 2 点。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;加快连接的速度&lt;/strong&gt;。例如使用 HTTPDNS、升级 TLS 协议版本等；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;减少请求的次数&lt;/strong&gt;。例如增加 HTTP 缓存；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文的主题，就是利用 HTTPDNS 来优化网络速度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 App 访问网络的时候，DNS 解析是网络请求的第一步，默认使用的是运营商的 LocalDNS 服务。有数据统计，在这一块 3G 网络下，耗时在 200~300ms，4G 网络下也需要 100ms。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然在 5G 的耗时应该更低，但是 5G 现在并没有普及，多数情况下我们还是看 4G 和 Wifi 场景下的网络情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解析慢，并不是 LocalDNS 最大的问题，它还存在一些更为严重的问题，例如：DNS 劫持、DNS 调度不准确（&lt;span&gt;缓存、转发、NAT&lt;/span&gt;）导致性能退化等等，这些才是网络优化最应该解决的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想要优化 DNS，现在最简单成熟的方案，就是使用 HTTPDNS。&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIxNjc0ODExMA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/liaczD18OicSyqdR0dH2EH3UXkJNVxb3VEOd59JWpUZSckeEIB0gK8xK9OszbSalkrljFOu4c7tEfExya24cdHWg/0?wx_fmt=png&quot; data-nickname=&quot;承香墨影&quot; data-alias=&quot;cxmyDev&quot; data-signature=&quot;我是承香墨影，8 年技术老司机。在这里，主要分享我个人的原创内容，不仅限于技术，职场、产品、设计思想等等，统统都有。这里已经汇集了有很多小伙伴了，欢迎你加入！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;今天就来聊聊，DNS、HTTPDNS，以及在 Android 下，如何使用 OKHttp 来集成 HTTPDNS。&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、DNS 和 HTTPDNS&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 什么是 DNS&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在说 HTTPDNS 之前，先简单了解一下什么是 DNS？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网络的世界中，每个有效的域名背后，都有为其提供服务的服务器，而我们网络通信的第一步，就是通过域名，解析出域名背后的服务器 IP 地址。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于大多数普通人而言，记住一串有意义的域名（&lt;span&gt;网址&lt;/span&gt;），肯定是比记忆 IP 地址简单。如果有某种方法，可以通过域名，查到其提供服务的服务器 IP 地址，那就非常方便了。这里就需要用到 DNS 服务器以及 DNS 解析。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;DNS（Domain Name System），它的作用就是根据域名，查出对应的 IP 地址&lt;/strong&gt;，它是 HTTP 协议的前提。只有将域名正确的解析成 IP 地址后，后面的 HTTP 流程才可以继续进行下去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然 DNS 服务如此重要，对于 DNS 服务器的要求，一定是高可用、高并发和分布式的服务器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它被分为多个层次结构。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;根 DNS 服务器：返回顶级域 DNS 服务器的 IP 地址；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;顶级域 DNS 服务器：返回权威 DNS 服务器的 IP 地址；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;权威 DNS 服务器：返回相应主机的 IP 地址；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这三类 DNS 服务器，类似一种树状的结构，分级构成。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8248686514886164&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaczD18OicSwD5SBeyBgiapgZkg6Y5Y7EXUhULhCtlVJmFVaAqlRHHLxMqlg9MicD9PjdgMKicRbKzGKJQZYwpwGlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;571&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当开始 DNS 解析的时候，如果 LocalDNS 没有缓存，那就会向 LocalDNS 服务器请求（&lt;span&gt;通常就是运营商&lt;/span&gt;），如果还是没有，就会一级一级的，从根域名查对应的顶级域名，再从顶级域名查权威域名服务器，最后通过权威域名服务器，获取具体域名对应的 IP 地址。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7748917748917749&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaczD18OicSwD5SBeyBgiapgZkg6Y5Y7EX3MPhMxmVndp55SEbeXO8fCnAqcjhu9Gj8XCxD1JI7O0HTVQjw5thSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;693&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DNS 在提供域名和 IP 地址映射的过程中，其实提供了很多基于域名的功能，例如服务器的负载均衡，但是它也带来了一些问题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2 DNS 的问题&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DNS 的细节还有很多，本文就不展开细说了，其问题总结来说就是以下 3 点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;1.&lt;/em&gt; &lt;strong&gt;不稳定&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DNS 劫持或者故障，导致服务不可用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;2.&lt;/em&gt; &lt;strong&gt;不准确&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;LocalDNS 调度，并不一定是就近原则。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;某些小运营商没有 DNS 服务器，会直接调用其他运营商的 DNS 服务器，最终导致跨网传输。例如：用户侧是移动运营商，调度到了电信的 IP，造成访问慢，甚至访问受限等问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;3.&lt;/em&gt; &lt;strong&gt;不及时&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运营商还可能会修改 DNS 的 TTL（&lt;span&gt;Time-To-Live，DNS 缓存时间&lt;/span&gt;），导致 DNS 的修改，延迟生效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有运营商为了保证网内用户的访问质量，同时减少跨网结算，运营商会在网内搭建内容缓存服务器，通过把域名强行指向内容缓存服务器的地址，来实现本网流量完全留在本地的目的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对此，不同运营商的策略都可能不一致，这对我们来说，就是一个黑匣子，中间有太多不可控的问题。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6527777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaczD18OicSwD5SBeyBgiapgZkg6Y5Y7EXcsk3es9hRdGz6ZCUw85DUNNGuXtYJpVSaUDD7RqLugBtMOC343KcTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正是因为 LocalDNS 存在种种问题，所以引出了 HTTPDNS。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.3 HTTPDNS 的解决方案&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DNS 不仅支持 UDP，它还支持 TCP，但是大部分标准的 DNS，都是基于 UDP 与 DNS 服务器的 53 端口进行交互。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HTTPDNS 则不同，顾名思义它是利用 HTTP 协议，与 NDS 服务器的 80 端口进行交互。不走传统的 DNS 解析，从而绕过运营商的 LocalDNS 服务器，有效的防止了域名劫持，提高域名解析的效率。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5212962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaczD18OicSwD5SBeyBgiapgZkg6Y5Y7EXxrJAhndorInyCMSa11yW7wIkMw9Jermmlw9sDbqZTiafcPgl9NZAZdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就相当于，每家各自基于 HTTP 协议，自己实现了一套域名解析，自己去维护了一份域名与 IP 的地址簿，而不是使用同一的地址簿（&lt;span&gt;DNS 服务器&lt;/span&gt;）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;据说微信有自己部署的 NETDNS，而各大云服务商，阿里云和腾讯云也提供了自己的 HTTPDNS 服务，对于我们普通开发者，只需要付出少量的费用，在手机端嵌入支持 HTTPDNS 的客户端 SDK，即可使用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、 OKHttp 接入 HTTPDNS&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然了解了 HTTPDNS 的重要性，接下来看看，如何在 OkHttp 中集成 HTTPDNS。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OkHttp 是一个处理网络请求的开源项目，是 Android 端最火热的轻量级网络框架。在 OkHttp 中，默认是使用系统的 DNS 服务 InetAddress 进行域名解析。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;InetAddress ip2= InetAddress.getByName(&lt;span&gt;&quot;www.cxmydev.com&quot;&lt;/span&gt;);&lt;br/&gt;System.out.println(ip2.getHostAddress());&lt;br/&gt;System.out.println(ip2.getHostName());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而想在 OkHttp 中使用 HTTPDNS，有两种方式。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;通过拦截器，在发送请求之前，将域名替换为 IP 地址；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;通过 OkHttp 提供的 &lt;code&gt;.dns()&lt;/code&gt; 接口，配置 HTTPDNS；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对这两种方法来说，当然是推荐使用 OkHttp 提供的 &lt;code&gt;dns()&lt;/code&gt; 这个标准 API 来实现了。拦截器的方式，也建议有所了解，实现很简单，但是有坑。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1 拦截器接入方式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;1.&lt;/em&gt; &lt;strong&gt;拦截器接入&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拦截器是 OkHttp 中，非常强大的一种机制，它可以在请求和响应之间，做一些我们的定制操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 OkHttp 中，可以通过实现 Interceptor 接口，来定制一个拦截器。使用时，只需要在 OkHttpClient.Builder 中，调用 &lt;code&gt;addInterceptor()&lt;/code&gt; 方法来注册此拦截器即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OkHttp 的拦截器不是本文的重点，我们还是回到拦截器去实现 HTTPDNS 的话题上，拦截器没什么好说的，直接上相关代码。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HTTPDNSInterceptor&lt;/span&gt; : &lt;span&gt;Interceptor&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;override fun &lt;span&gt;intercept&lt;/span&gt;&lt;span&gt;(chain: Interceptor.Chain)&lt;/span&gt;: Response &lt;/span&gt;{&lt;br/&gt;    val originRequest = chain.request()&lt;br/&gt;    val httpUrl = originRequest.url()&lt;br/&gt;&lt;br/&gt;    val url = httpUrl.toString()&lt;br/&gt;    val host = httpUrl.host()&lt;br/&gt;&lt;br/&gt;    val hostIP = HttpDNS.getIpByHost(host)&lt;br/&gt;    val builder = originRequest.newBuilder()&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(hostIP!=&lt;span&gt;null&lt;/span&gt;){&lt;br/&gt;      builder.url(HttpDNS.getIpUrl(url,host,hostIP))&lt;br/&gt;      builder.header(&lt;span&gt;&quot;host&quot;&lt;/span&gt;,hostIP)&lt;br/&gt;    }&lt;br/&gt;    val newRequest = builder.build()&lt;br/&gt;    val newResponse = chain.proceed(newRequest)&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; newResponse&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在拦截器中，使用 HttpDNS 这个帮助类，通过 &lt;code&gt;getIpByHost()&lt;/code&gt; 将 Host 转为对应的 IP。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果通过抓包工具抓包，你会发现，原本的类似 &lt;code&gt;http://www.cxmydev.com/api/user&lt;/code&gt; 的请求，被替换为：&lt;code&gt;http://220.181.57.xxx/api/user&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;2.&lt;/em&gt; &lt;strong&gt;拦截器接入的坏处&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用拦截器，直接绕过了 DNS 的步骤，在请求发送前，将 Host 替换为对应的 IP 地址。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方案，在流程上很清晰，没有任何技术性的问题。但是这种方案存在一些问题，例如：HTTPS 下 IP 直连的证书问题、代理的问题、Cookie 的问题等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中最严重的问题是，此方案（&lt;span&gt;拦截器 + HTTPDNS&lt;/span&gt;）遇到 HTTPS 时，如果存在一台服务器支持多个域名，可能导致 SSL/TLS 证书无法匹配的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在说到这个问题之前，就要先了解一下 HTTPS 和 SNI。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HTTPS 是为了保证安全的，在发送 HTTPS 请求之前，首先要进行 SSL/TLS  握手，握手的大致流程如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;客户端发起握手请求，携带随机数、支持算法列表等参数；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;服务端根据请求，选择合适的算法，下发公钥证书和随机数；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;客户端对服务端证书，进行校验，并发送随机数信息，该信息使用公钥加密；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;服务端通过私钥获取随机数信息；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;双方根据以上交互的信息，生成 Session Ticket，用作该连接后续数据传输的加密密钥；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个流程中，客户端需要验证服务器下发的证书。首先通过本地保存的根证书解开证书链，确认证书可信任，然后客户端还需要检查证书的 domain 域和扩展域，看看是否包含本次请求的 HOST。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这一步就出现了问题，当使用拦截器时，请求的 URL 中，HOST 会被替换成 HTTPDNS 解析出来的 IP。当服务器存在多域名和证书的情况下，服务器在建立 SSL/TLS 握手时，无法区分到底应该返回那个证书，此时的策略可能返回默认证书或者不返回，这就有可能导致客户端在证书验证 domain 时，出现不匹配的情况，最终导致 SSL/TLS  握手失败。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就引发出来 SNI 方案，SNI（&lt;span&gt;Server Name Indication&lt;/span&gt;）是为了解决一个服务器使用多个域名和证书的 SSL/TLS 扩展。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SNI 的工作原理，在连接到服务器建立 SSL 连接之前，先发送要访问站点的域名（&lt;span&gt;hostname&lt;/span&gt;），服务器根据这个域名返回正确的证书。现在，大部分操作系统和浏览器，都已经很好的支持 SNI 扩展。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;3.&lt;/em&gt; &lt;strong&gt;拦截器 + HTTPDNS 的解决方案&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个问题，其实也有解决方案，这里简单介绍一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对「domain 不匹配」的问题，可以通过 hook 证书验证过程中的第二步，将 IP 直接替换成原来的域名，再执行证书验证。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 HttpURLConnect，提供了一个 HostnameVerifier 接口，实现它即可完成替换。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;HostnameVerifier&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;verify&lt;/span&gt;&lt;span&gt;(String hostname, SSLSession session)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果使用 OkHttp，可以参考 OkHostnameVerifier (&lt;span&gt;source://src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java&lt;/span&gt;) 的实现，进行替换。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本身 OkHttp 就不建议通过拦截器去做 HTTPDNS 的支持，所以这里就不展开讨论了，这里只提出解决的思路，有兴趣可以研究研究源码。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.2 OKHttp 标准 API 接入&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OkHttp 其实本身已经暴露了一个 &lt;code&gt;Dns&lt;/code&gt; 接口，默认的实现是使用系统的 InetAddress 类，发送 UDP 请求进行 DNS 解析。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们只需要实现 OkHttp 的 &lt;code&gt;Dns&lt;/code&gt; 接口，即可获得 HTTPDNS 的支持。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我们实现的 &lt;code&gt;Dns&lt;/code&gt; 接口实现类中，解析 DNS 的方式，换成 HTTPDNS，将解析结果返回。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HttpDns&lt;/span&gt; : &lt;span&gt;Dns&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;override fun &lt;span&gt;lookup&lt;/span&gt;&lt;span&gt;(hostname: String)&lt;/span&gt;: List&amp;lt;InetAddress&amp;gt; &lt;/span&gt;{&lt;br/&gt;    val ip = HttpDnsHelper.getIpByHost(hostname)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!TextUtils.isEmpty(ip)) {&lt;br/&gt;      &lt;span&gt;//返回自己解析的地址列表&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; InetAddress.getAllByName(ip).toList() &lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;// 解析失败，使用系统解析&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; Dns.SYSTEM.lookup(hostname)&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用也非常的简单，在 &lt;code&gt;OkHttp.build()&lt;/code&gt; 时，通过 &lt;code&gt;dns()&lt;/code&gt; 方法配置。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;mOkHttpClient = httpBuilder&lt;br/&gt;      .dns(HttpDns())&lt;br/&gt;      .build();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样做的好处在于：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;还是用域名进行访问，只是底层 DNS 解析换成了 HTTPDNS，以确保解析的 IP 地址符合预期；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;HTTPS 下的问题也得到解决，证书依然使用域名进行校验；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OkHttp 既然暴露出 dns 接口，我们就尽量优先使用它。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四、小结时刻&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在大家知道，在做 App 的网络优化的时候，第一步就是使用 HTTPDNS 优化 DNS 的步骤。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所有的优化当然是以最终效果为目的，这里提两条大厂公开的数据，对腾讯的产品，在接入 HTTPDNS 后，用户平均延迟下降超过 10%，访问失败率下降超过五分之一。而百度 App 的 Feed 业务，Android 劫持率由 0.25% 降低到 0.05%。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此种优化方案，非常依赖 HTTPDNS 服务器，所以建议使用 阿里云、腾讯云 这样相对稳定的云服务商。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文对你有帮助吗？&lt;strong&gt;留言、点赞、转发&lt;/strong&gt;是最大的支持，谢谢！&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIxNjc0ODExMA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/liaczD18OicSyqdR0dH2EH3UXkJNVxb3VEOd59JWpUZSckeEIB0gK8xK9OszbSalkrljFOu4c7tEfExya24cdHWg/0?wx_fmt=png&quot; data-nickname=&quot;承香墨影&quot; data-alias=&quot;cxmyDev&quot; data-signature=&quot;我是承香墨影，8 年技术老司机。在这里，主要分享我个人的原创内容，不仅限于技术，职场、产品、设计思想等等，统统都有。这里已经汇集了有很多小伙伴了，欢迎你加入！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;references:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【1】&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxMzk2ODI1NQ==&amp;amp;mid=2247483654&amp;amp;idx=1&amp;amp;sn=4cac066619fef001a1aed3616ad862af&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;百度 App 网络深度优化系列一 DNS 优化&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【3】&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3ODgyNzcwMw==&amp;amp;mid=201837080&amp;amp;idx=1&amp;amp;sn=b2a152b84df1c7dbd294ea66037cf262&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;鹅厂网事，HTTPDNS 服务详解&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;-- End --&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文对你有帮助吗？&lt;strong&gt;留言、转发、点好看&lt;/strong&gt;是最大的支持，谢谢！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐阅读：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;amp;mid=2247488245&amp;amp;idx=1&amp;amp;sn=faa8feadd938fd766b76ecfd709a3959&amp;amp;chksm=97850bd4a0f282c21c191351f267267f1b0fd560b1facaf7de0124670ea580f1e5ebc89e3925&amp;amp;token=2021483215&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Android 架构，拒绝生搬硬套！&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;amp;mid=2247488222&amp;amp;idx=1&amp;amp;sn=de5599279baee8575b433886ae4cc8c0&amp;amp;chksm=97850bffa0f282e940a4ac1c7df1c5a13c345dc2d06f5a1560442bdc6d329b447f62f766a222&amp;amp;token=1635293352&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;三句话，让面试官觉得我懂 SparseArray！&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;amp;mid=2247488271&amp;amp;idx=1&amp;amp;sn=e60aa89af2f18598b8feeda3256f455b&amp;amp;chksm=97850a2ea0f2833812ec390f9de683fe84203bc879ce3c7307cf7760fd2e35142e94108f3d5d&amp;amp;token=2021483215&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Android 的 Window 如何理解？Dialog 到底是不是子窗口？&lt;/a&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaczD18OicSwD5SBeyBgiapgZkg6Y5Y7EXeCJMfrc24y7KIFibZKhohIbic2YXUwjnictBYlPZ4K8Msia3uzLqE1QDrA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dc496d31ad79cd3abfed0fdc5486ba8b</guid>
<title>手把手教你实现 Android 编译期注解</title>
<link>https://toutiao.io/k/ds5jwrd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;类似下面这种写法，当View一多得不停的findViewById 写很多行，手写起来很麻烦，我们首先尝试用运行期注解来解决这个问题，看看能不能自动处理这些findViewById的操作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.20390625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPym5WH3Qrhf9QnTcKsVNVzl8y9JmcOMf0JAq9qoRRJUtXpP1goTD4sHLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;首先是工程结构，肯定要定义一个lib module。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2625250501002004&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPymuuFfpR3mDDydxlBbPCsMHKOmvTIbV7tQoFjKKQic75eNT35reezwnVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;998&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;其次定义我们的注解类：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4666666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPymkqL3eFrUjCvzhJdsWdretsj1PZUT05rW59RqUBgN1icJHf9LAQAy4Ng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1170&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有了这个注解的类，我们就可以在我们的MainAcitivity先用起来，虽然此时这个注解还并未起到什么作用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2421875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPymibT6H1XtA2Dt7r8FtoT7ic6zHBFJy6HZdX4AmVQYlMTVMY2GmgYUKnUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;到这里要稍微想一下，此时我们要做的是 &lt;strong&gt;通过注解来将R.id.xx 赋值给对应的field&lt;/strong&gt;，也就是你定义的那些view对象(例如红框中的tv)，对于我们的lib工程来说，因为是MainActivity 要依赖lib，自然你lib不可以依赖Main所属的app工程了，这里有2个原因：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以这个问题就变成了，lib工程 只能拿到Acitivty，拿不到宿主的MainActivity , 既然拿不到宿主的MainActivity，那我怎么知道这个activity有多少个field？这里就要用到反射了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BindingView&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Activity activity&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Field[] fields = activity.getClass().getDeclaredFields();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Field field : fields) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            BindView annotation = field.getAnnotation(BindView.class);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (annotation != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; viewId = annotation.&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                field.setAccessible(&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    field.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(activity, activity.findViewById(viewId));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (IllegalAccessException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后我们在宿主的MainActivity中调用一下这个方法 即可：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.68515625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPymUqkCraGxDYewIrCLP8jAxyDy83wpQiboU8xPHA9VtPZ8icoewuORXS9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;到这里其实有人就要问了，这个运行时注解看起来也不难啊，为啥好像用的人不是很多？问题就出在刚才反射的那堆方法里，反射大家都知道 会对Android运行时带来一些性能损耗，而这里的代码是一段循环， 也就是说这里的代码会随着你使用lib的Activity的界面复杂程度的提高 而变得越来越慢，这是一个会&lt;strong&gt;随着你界面复杂度提高而逐步劣化&lt;/strong&gt;的过程， 单次反射对于今天的手机来说几乎已经不存在什么性能消耗了，但是这种for循环中使用反射还是尽量少用。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;为了解决这个问题，就要使用编译期注解。现在我们来尝试用编译期注解来解决上述的问题。前面我们说过，运行期注解可以用反射来拿到宿主的field 从而完成需求，为了解决反射的性能问题，我们其实想要的代码是这样的：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们可以在app 的module 中新建一个&lt;span&gt;MainActivityViewBinding&lt;/span&gt;的类：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.188911704312115&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPymemPqwichv2Sm8U49K0NwADrjfSfl9ib5OHBgVYc74BKfwLAGmh9hPv4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;974&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然后在我们的BindingView(注意我们的BindingView是在lib module下的)中来调用这个方法不就解决这个反射的问题了吗？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPymt28ROu1963WPicLGib7UM8w4XNwNUl25g6Gj3J6g13bIfog2c8oy11OA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但是这里会有个问题 就是你既然是一个lib 你不能依赖宿主 ，所以在lib Module 中你其实拿不到 MainActivityViewBinding 这个类的，还是得利用反射。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;141&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.24375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPym6UPrSqR3jXeY3D8g4ia7R5R2Lj5ZpFkgialre9zXTqtmFTxibDpYfgEVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可以看一下上面注释掉的代码，为啥不直接字符串写死？因为你是lib库你当然得是动态的，不然怎么给别人用？其实就是获取宿主的class名称然后加上一个固定的后缀ViewBinding 即可。这个时候 我们就拿到这个Binding的class了，对吧，剩下就是调用构造方法即可。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; BindingView {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; init(Activity activity) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Class bindingClass = Class.forName(activity.getClass().getCanonicalName() + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ViewBinding&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Constructor &lt;span class=&quot;code-snippet__keyword&quot;&gt;constructor&lt;/span&gt; = bindingClass.getDeclaredConstructor(&lt;span class=&quot;code-snippet__params&quot;&gt;activity.getClass()&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;constructor&lt;/span&gt;.newInstance(&lt;span class=&quot;code-snippet__params&quot;&gt;activity&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } catch (&lt;span class=&quot;code-snippet__params&quot;&gt;ClassNotFoundException | NoSuchMethodException e&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            e.printStackTrace(&lt;span class=&quot;code-snippet__params&quot;/&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } catch (&lt;span class=&quot;code-snippet__params&quot;&gt;IllegalAccessException e&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (InstantiationException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (InvocationTargetException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;看下此时的代码结构：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPymFbglomibnmrYCZm47fUGbUmVGRU5BIicsFxOJXVbh21zpc4yu8ebb8Mg/0?wx_fmt=png&quot; data-cropx1=&quot;-0.8754325259515571&quot; data-cropx2=&quot;837.7889273356401&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;677.584775086505&quot; data-ratio=&quot;0.8100358422939068&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPymkxOryRI2SRELIPIOkTicqs6nb7YeyD5lib31teBicjE6L4n8PZSdXr0MA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;837&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有人这里要问，这里你不还是用了反射么，对! 这里虽然用了反射，但是我这里的反射只会调用一次，不管你的activity有都少field，在我这里反射方法都只会执行一次。所以性能肯定是比之前的方案要快很多倍的。接着看，虽然此刻代码可以正常运行，但是还有一个问题， 虽然我可以在lib中调用到我们app宿主的类的构造方法，但是，&lt;span&gt;&lt;strong&gt;宿主的这个类依旧是我们手写的啊&lt;/strong&gt;？&lt;/span&gt;那你这个lib库 还是没有起到任何可以让我们少写代码的作用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个时候就需要我们的apt 出场了，也就是编译期注解的核心部分了。我们创建一个&lt;span&gt;&lt;strong&gt;J&lt;/strong&gt;&lt;strong&gt;ava Library&lt;/strong&gt;&lt;/span&gt;，注意是Java lib不是android lib，然后在app module中引入他。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;注意 引入的方式 不是imp了，是annotation processor ；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPymnZ7P2Zia4mWgBmT30x8VAxyBqoOicm6JEyoQWw3DLLF5pYND99QZicxmw/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1065&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;350.08650519031147&quot; data-ratio=&quot;0.3286384976525822&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPym7zaAsIyia8JORsKDbEoakk2ibrcHBgyCy7CQbhTU1094AuIm1jcpycCg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1065&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然后我们来修改一下lib_processor,首先创建一个 注解处理类：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;117&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.20177562550443906&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPymI9MLmxH8ibbKCzco3UPFRxJ4aVWgZYrDdoarD4fiahCU34ia32VDbqxyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1239&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;再创建文件&lt;span&gt;resources/META-&lt;/span&gt;&lt;span&gt;INF&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;services/javax.annotation.processing.Processor&lt;/span&gt; ,这里要注意 文件夹创建不要写错了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5511811023622047&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPymiaBgbaVu0icylttfxMMQtfbDTq9eQxyWPr1icUdfZ9bAGdTEMBwbVaKGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1016&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然后再这个Processor指定 一下我们的注解处理器即可：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;168&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.28984375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPymmtoTynnTogib9RvlF6TCHcwsyEgFEcJRzUfibmgtJAyfvBw0MicLdEf3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;到这里还没完，我们得告诉这个注解处理器 只处理我们的BindView注解即可，否则这个注解处理器默认处理全部注解 速度就太慢了，但是此时 我们的BindView这个注解类还在lib仓里面，显然我们要调整一下我们的工程结构：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7684630738522954&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPym6QOWoibDpL7VptLPocGYwxCwCop4fOM2uoDG22bbRNRdaWIf72lCbJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1002&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们&lt;span&gt;&lt;strong&gt;再新建一个Javalib，只放BindView即可&lt;/strong&gt;&lt;/span&gt;，然后让我们的lib_processor和app 都依赖这个lib_interface即可。再稍微修改一下代码，此时我们是编译期处理，所Policy不用是runtime了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.SOURCE)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Target&lt;/span&gt;(ElementType.FIELD)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__meta&quot;&gt;@interface&lt;/span&gt; BindView {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BindingProcessor&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AbstractProcessor&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Messager messager;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ProcessingEnvironment processingEnvironment)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        messager = processingEnvironment.getMessager();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        messager.printMessage(Diagnostic.Kind.NOTE, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; BindingProcessor init&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.init(processingEnvironment);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Set&amp;lt;? extends TypeElement&amp;gt; set, RoundEnvironment roundEnvironment)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Set&amp;lt;String&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getSupportedAnnotationTypes&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Collections.singleton(BindView.class.getCanonicalName());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;到此我们的大部分工作就处理完毕了。再看一下代码结构（这里的代码结构一定要理解清楚为什么这样设计，否则你是学不会编译期注解的）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0059055118110236&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPymDZETict5NzRBMaHHmvFl2KqcQo9xY1IBticXPUgAhlgOIZ5Bm3X0KRqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1016&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们现在已经能够做到 通过 lib 这个sdk 调用到&lt;span&gt;MainActivityViewBinding&lt;/span&gt;这个里面的方法，但是他 还在app仓是我们手写的，不太智能，还没办法用。我们需要在注解处理器里面 ，动态的生成这个类，只要能完成这个步骤，那我们的SDK也就基本完成了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里要提一下，很多人注解始终学不会就是卡在这里，因为太多的文章或者教程上来就是Javapoet 那一套代码，压根学不会，或者只能复制粘贴别人的东西，稍微变动一下就不会了，其实这里最佳的学习方式是先用StringBuffer 字符串拼接的方式 拼出我们想要的代码就可以了，通过这个字符串拼接的过程 来理解对应的api以及生成java代码的思路，然后最后再用JavaPoet来优化代码即可。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们可以先思考一下， 如果用字符串拼接的方式来做这个生成类的操作要完成哪些步骤。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;首先要获取哪些类使用了我们的BindView注解；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;获取这些类中使用了BindView注解的field以及他们对应的值；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;拿到这些类的类名称以便我们生成诸如MainActivityViewBinding这样的类名；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;拿到这些类的包名，因为我们生成的类要和注解所属的类属于同一个package 才不会出现field 访问权限的问题；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;上述条件都具备以后 就用字符串拼接的方式 拼接出我们想要的java代码 即可。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里就直接上代码了，重要部分 直接看注释即可，有了上面的步骤分析再看代码注释应该不难理解。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; BindingProcessor &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; AbstractProcessor {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Messager messager;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Filer filer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Elements elementUtils;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; synchronized &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; init(ProcessingEnvironment processingEnvironment) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        messager = processingEnvironment.getMessager();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        filer = processingEnvironment.getFiler();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        elementUtils = processingEnvironment.getElementUtils();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        messager.printMessage(Diagnostic.Kind.NOTE, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; BindingProcessor init&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.init(processingEnvironment);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; generateCodeByStringBuffer(&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; className, List&amp;lt;Element&amp;gt; elements) throws IOException {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; packageName = elementUtils.getPackageOf(elements.get(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)).getQualifiedName().toString();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        StringBuffer sb = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; StringBuffer();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sb.append(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;package &quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sb.append(packageName);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sb.append(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        final &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; classDefine = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;public class &quot;&lt;/span&gt; + className + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ViewBinding { \n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sb.append(classDefine);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; constructorName = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;public &quot;&lt;/span&gt; + className + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ViewBinding(&quot;&lt;/span&gt; + className + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; activity){ \n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sb.append(constructorName);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Element e : elements) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            sb.append(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;activity.&quot;&lt;/span&gt; + e.getSimpleName() + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;=activity.findViewById(&quot;&lt;/span&gt; + e.getAnnotation(BindView.class).value() + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;);\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sb.append(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;\n}&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sb.append(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;\n }&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        JavaFileObject sourceFile = filer.createSourceFile(className + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ViewBinding&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Writer writer = sourceFile.openWriter();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        writer.write(sb.toString());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        writer.close();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt; process(Set&amp;lt;? &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; TypeElement&amp;gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;, RoundEnvironment roundEnvironment) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Map&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;, List&amp;lt;Element&amp;gt;&amp;gt; fieldMap = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Element element : roundEnvironment.getElementsAnnotatedWith(BindView.class)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; className = element.getEnclosingElement().getSimpleName().toString();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (fieldMap.get(className) != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                List&amp;lt;Element&amp;gt; elementList = fieldMap.get(className);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                elementList.add(element);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                List&amp;lt;Element&amp;gt; elements = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                elements.add(element);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                fieldMap.put(className, elements);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;, List&amp;lt;Element&amp;gt;&amp;gt; entry : fieldMap.entrySet()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                generateCodeByStringBuffer(entry.getKey(), entry.getValue());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Set&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;&amp;gt; getSupportedAnnotationTypes() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Collections.singleton(BindView.class.getCanonicalName());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后看下效果：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;156&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.2703125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPyml9qejETB6uP4hcs2SBE5x9j4MGF1fOe06PPljQyprH4VtXc5uY2Dsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;虽然生成的代码格式不太好看，但是运行起来是ok的。这里要注意一下Element 这个接口，实际上使用编译期注解的时候 如果能够理解了Element，那后续的工作就简单不少。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;317&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5492700729927007&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt6RgrtwPGnjRCypOQgicFPymbvv9zUicmCr9DYWsVbEXYMMc3RTqDqjEN78RVFwI4I9oQBDBFYNsBmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1096&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;主要关注Element的这5个子类即可，举个例子：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; com.smart.annotationlib_2;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;VivoTest&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;VivoTest&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; b )&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.a = b;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cc578b75ae0ea0b027aaef62e21c8a1d</guid>
<title>Edge 浏览器不使用代理情况下使用 Google 的字体库</title>
<link>https://toutiao.io/k/9mqrjp9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;col-md-12 text-center&quot;&gt;

                    &lt;p&gt;
                        Copyright ©2021 All rights reserved &lt;a href=&quot;https://www.xiaolaiwo.com&quot; target=&quot;_blank&quot;&gt;小莱沃&lt;/a&gt;
                        &lt;a href=&quot;https://beian.miit.gov.cn/&quot;&gt;京ICP备15001022号&lt;/a&gt;
                        
                    &lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c20f5dcd0130dd9b24afd980f787b8d7</guid>
<title>AIX 中的 timeout 脚本</title>
<link>https://toutiao.io/k/947t07k</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post&quot;&gt;
&lt;h1 class=&quot;title&quot;&gt;AIX中的timeout脚本&lt;/h1&gt;
&lt;p&gt;
AIX 下没有现成的 &lt;code&gt;timeout&lt;/code&gt; 命令来限时运行命令，于是就想着自己实现一个类似的脚本。本来以为挺简单的一件事情，结果埋者一堆坑。
&lt;/p&gt;

&lt;p&gt;
最后的结果如下：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;&lt;span class=&quot;org-keyword&quot;&gt;ksh&lt;/span&gt;
&lt;span class=&quot;org-variable-name&quot;&gt;waitfor&lt;/span&gt;=$&lt;span class=&quot;org-variable-name&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;org-builtin&quot;&gt;shift&lt;/span&gt;
&lt;span class=&quot;org-variable-name&quot;&gt;command&lt;/span&gt;=$&lt;span class=&quot;org-variable-name&quot;&gt;*&lt;/span&gt;
$&lt;span class=&quot;org-variable-name&quot;&gt;command&lt;/span&gt; &amp;amp;
&lt;span class=&quot;org-variable-name&quot;&gt;commandpid&lt;/span&gt;=$&lt;span class=&quot;org-variable-name&quot;&gt;!&lt;/span&gt;
(sleep $&lt;span class=&quot;org-variable-name&quot;&gt;waitfor&lt;/span&gt;;&lt;span class=&quot;org-builtin&quot;&gt;kill&lt;/span&gt; $&lt;span class=&quot;org-variable-name&quot;&gt;commandpid&lt;/span&gt;) &amp;amp; 
&lt;span class=&quot;org-variable-name&quot;&gt;watchdogpid&lt;/span&gt;=$&lt;span class=&quot;org-variable-name&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;org-builtin&quot;&gt;wait&lt;/span&gt; $&lt;span class=&quot;org-variable-name&quot;&gt;commandpid&lt;/span&gt;
&lt;span class=&quot;org-builtin&quot;&gt;kill&lt;/span&gt; $&lt;span class=&quot;org-variable-name&quot;&gt;watchdogpid&lt;/span&gt;               
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
这里有两个需要关注的地方：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;code&gt;(sleep $waitof;kill $commandpid) &amp;amp;&lt;/code&gt; 在超时杀掉工作命令后就退出了，工作命令被杀掉之后 &lt;code&gt;wait $commandpid&lt;/code&gt; 执行完成，主进程继续执行 &lt;code&gt;kill $watchdogpid&lt;/code&gt;.
然而由于监控进程早已退出，在忙碌的系统中，可能出现 &lt;code&gt;$watchdogpid&lt;/code&gt; 被其他进程重复使用，导致误杀其他进程的风险。
要解决这一风险，可以让监控进程在杀掉工作进程后再等待一段时间，以便让主进程杀掉监控进程。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kill $watchdogpid&lt;/code&gt; 在 &lt;code&gt;ksh&lt;/code&gt; 中并不会把子进程一起杀掉，也就是说 &lt;code&gt;sleep $waitfor&lt;/code&gt; 这个进程依然在运行，只不过父进程从 &lt;code&gt;$watchdogpid&lt;/code&gt; 变成了 &lt;code&gt;1&lt;/code&gt;.
不仅如此 &lt;code&gt;AIX&lt;/code&gt; 上的 &lt;code&gt;kill&lt;/code&gt; 居然不支持 &lt;code&gt;PID&lt;/code&gt; 为负数的情况，这使得妄想通过 &lt;code&gt;kill -$watchdogpid&lt;/code&gt; 杀掉整个进程组变得不可能。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
最后经过尝试，发现在ksh交互模式下，用 &lt;code&gt;kill %jobID&lt;/code&gt; 的方式是能够将整个 &lt;code&gt;JOB&lt;/code&gt; 杀干净的，因此最后的结果如下：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;&lt;span class=&quot;org-keyword&quot;&gt;ksh&lt;/span&gt;
&lt;span class=&quot;org-variable-name&quot;&gt;waitfor&lt;/span&gt;=$&lt;span class=&quot;org-variable-name&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;org-builtin&quot;&gt;shift&lt;/span&gt;
&lt;span class=&quot;org-variable-name&quot;&gt;command&lt;/span&gt;=$&lt;span class=&quot;org-variable-name&quot;&gt;*&lt;/span&gt;
$&lt;span class=&quot;org-variable-name&quot;&gt;command&lt;/span&gt; &amp;amp;
&lt;span class=&quot;org-variable-name&quot;&gt;commandpid&lt;/span&gt;=$&lt;span class=&quot;org-variable-name&quot;&gt;!&lt;/span&gt;
(sleep $&lt;span class=&quot;org-variable-name&quot;&gt;waitfor&lt;/span&gt;;&lt;span class=&quot;org-builtin&quot;&gt;kill&lt;/span&gt; $&lt;span class=&quot;org-variable-name&quot;&gt;commandpid&lt;/span&gt;;sleep 1) &amp;amp;
&lt;span class=&quot;org-builtin&quot;&gt;wait&lt;/span&gt; $&lt;span class=&quot;org-variable-name&quot;&gt;commandpid&lt;/span&gt;
&lt;span class=&quot;org-builtin&quot;&gt;kill&lt;/span&gt; %2 &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
不过这种实现有个比较大的缺点就是由于整个实现实在交互式ksh环境中执行的，因此会污染 ksh 的 history 命令历史。
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>