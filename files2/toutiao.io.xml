<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>c4b9944319fbf5013c7e35484e2febc7</guid>
<title>凯文·凯利70岁生日的103条人生建议｜码农周刊VIP会员专属邮件周报 Vol.090</title>
<link>https://toutiao.io/k/d3q95iv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;logged-out env-production page-responsive page-blob&quot; id=&quot;readabilityBody&quot;&gt;
    

    

  &lt;p id=&quot;start-of-content&quot; class=&quot;show-on-focus&quot;/&gt;







    


    

  &lt;include-fragment class=&quot;js-notification-shelf-include-fragment&quot; data-base-src=&quot;https://github.com/notifications/beta/shelf&quot;/&gt;





  &lt;div class=&quot;application-main &quot; data-commit-hovercards-enabled=&quot;&quot; data-discussion-hovercards-enabled=&quot;&quot; data-issue-and-pr-hovercards-enabled=&quot;&quot;&gt;
        &lt;div itemscope=&quot;&quot; itemtype=&quot;http://schema.org/SoftwareSourceCode&quot; class=&quot;&quot;&gt;
    &lt;main id=&quot;js-repo-pjax-container&quot; data-pjax-container=&quot;&quot;&gt;
      

    
    








  



&lt;div id=&quot;repo-content-pjax-container&quot; class=&quot;repository-content &quot;&gt;
  
  


  
      
  &lt;div class=&quot;clearfix container-xl px-3 px-md-4 px-lg-5 mt-4&quot;&gt;
    
    
&lt;div&gt;
  




    
&lt;a class=&quot;d-none js-permalink-shortcut&quot; data-hotkey=&quot;y&quot; href=&quot;/toutiaoio/weekly.manong.io/blob/bfce3ea87cd5c8c85608e58ecb1dbde7503f34ff/docs/vol.090.md?hmsr=toutiao.io&amp;amp;utm_campaign=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot;&gt;Permalink&lt;/a&gt;







    &lt;div id=&quot;spoof-warning&quot; class=&quot;mt-0 pb-3&quot; hidden=&quot;&quot; aria-hidden=&quot;&quot;&gt;
  &lt;div data-view-component=&quot;true&quot; class=&quot;flash flash-warn mt-0 clearfix&quot;&gt;
  
  
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert float-left mt-1&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;

      &lt;p class=&quot;overflow-hidden&quot;&gt;This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository.&lt;/p&gt;


  
&lt;/div&gt;&lt;/div&gt;

    &lt;include-fragment src=&quot;/toutiaoio/weekly.manong.io/spoofed_commit_check/bfce3ea87cd5c8c85608e58ecb1dbde7503f34ff&quot; data-test-selector=&quot;spoofed-commit-check&quot;/&gt;

    &lt;div class=&quot;Box d-flex flex-column flex-shrink-0 mb-3&quot;&gt;
  
  

  &lt;div class=&quot;Box-body d-flex flex-items-center flex-auto border-bottom-0 flex-wrap&quot;&gt;
    &lt;details class=&quot;details-reset details-overlay details-overlay-dark lh-default color-fg-default float-left mr-3&quot; id=&quot;blob_contributors_box&quot;&gt;
      &lt;summary class=&quot;Link--primary&quot;&gt;
        &lt;svg text=&quot;gray&quot; aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-people&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M5.5 3.5a2 2 0 100 4 2 2 0 000-4zM2 5.5a3.5 3.5 0 115.898 2.549 5.507 5.507 0 013.034 4.084.75.75 0 11-1.482.235 4.001 4.001 0 00-7.9 0 .75.75 0 01-1.482-.236A5.507 5.507 0 013.102 8.05 3.49 3.49 0 012 5.5zM11 4a.75.75 0 100 1.5 1.5 1.5 0 01.666 2.844.75.75 0 00-.416.672v.352a.75.75 0 00.574.73c1.2.289 2.162 1.2 2.522 2.372a.75.75 0 101.434-.44 5.01 5.01 0 00-2.56-3.012A3 3 0 0011 4z&quot;/&gt;
&lt;/svg&gt;
        &lt;strong&gt;1&lt;/strong&gt;
        
        contributor
      &lt;/summary&gt;
      &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast&quot; aria-label=&quot;Users who have contributed to this file&quot; src=&quot;/toutiaoio/weekly.manong.io/contributors-list/master/docs/vol.090.md&quot; preload=&quot;&quot;&gt;
        &lt;div class=&quot;Box-header&quot;&gt;
          &lt;button class=&quot;Box-btn-octicon btn-octicon float-right&quot; type=&quot;button&quot; aria-label=&quot;Close dialog&quot; data-close-dialog=&quot;&quot;&gt;
            &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
          &lt;/button&gt;
          &lt;h3 class=&quot;Box-title&quot;&gt;
            Users who have contributed to this file
          &lt;/h3&gt;
        &lt;/div&gt;
        &lt;include-fragment&gt;
          &lt;svg viewbox=&quot;0 0 16 16&quot; fill=&quot;none&quot; data-view-component=&quot;true&quot; class=&quot;my-3 mx-auto d-block anim-rotate&quot;&gt;
  &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;7&quot; stroke=&quot;currentColor&quot; stroke-opacity=&quot;0.25&quot; stroke-width=&quot;2&quot; vector-effect=&quot;non-scaling-stroke&quot;/&gt;
  &lt;path d=&quot;M15 8a7.002 7.002 0 00-7-7&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; vector-effect=&quot;non-scaling-stroke&quot;/&gt;
&lt;/svg&gt;
        &lt;/include-fragment&gt;
      &lt;/details-dialog&gt;
    &lt;/details&gt;
  &lt;/div&gt;
&lt;/div&gt;







    &lt;readme-toc&gt;

    &lt;div data-target=&quot;readme-toc.content&quot; class=&quot;Box mt-3 position-relative&quot;&gt;
      
  &lt;div class=&quot;Box-header js-blob-header blob-header js-sticky js-position-sticky top-0 p-2 d-flex flex-shrink-0 flex-md-row flex-items-center&quot;&gt;

      &lt;details data-target=&quot;readme-toc.trigger&quot; data-menu-hydro-click=&quot;{&amp;quot;event_type&amp;quot;:&amp;quot;repository_toc_menu.click&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;target&amp;quot;:&amp;quot;trigger&amp;quot;,&amp;quot;repository_id&amp;quot;:193332705,&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/toutiaoio/weekly.manong.io/blob/master/docs/vol.090.md?hmsr=toutiao.io&amp;amp;utm_campaign=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&amp;quot;,&amp;quot;user_id&amp;quot;:null}}&quot; data-menu-hydro-click-hmac=&quot;22043ed9df8256ce83f5fb1aa1911a940509266306b4564c4b9f8c48a25be466&quot; class=&quot;dropdown details-reset details-overlay&quot;&gt;
  &lt;summary class=&quot;btn btn-octicon m-0 mr-2 p-2&quot; aria-haspopup=&quot;true&quot; aria-label=&quot;Table of Contents&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-list-unordered&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M2 4a1 1 0 100-2 1 1 0 000 2zm3.75-1.5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zm0 5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zm0 5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zM3 8a1 1 0 11-2 0 1 1 0 012 0zm-1 6a1 1 0 100-2 1 1 0 000 2z&quot;/&gt;
&lt;/svg&gt;
  &lt;/summary&gt;


  &lt;details-menu class=&quot;SelectMenu&quot; role=&quot;menu&quot;&gt;
    
  &lt;/details-menu&gt;
&lt;/details&gt;


  &lt;p class=&quot;text-mono f6 flex-auto pr-3 flex-order-2 flex-md-order-1&quot;&gt;

      92 lines (53 sloc)
      &lt;span class=&quot;file-info-divider&quot;/&gt;
    3.62 KB
  &lt;/p&gt;

  

    
&lt;/div&gt;


        &lt;div id=&quot;readme&quot; class=&quot;Box-body readme blob js-code-block-container p-5 p-xl-6 gist-border-0&quot;&gt;
    &lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-凯文凯利70岁生日的103条人生建议码农周刊vip会员专属邮件周报-vol090&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#凯文凯利70岁生日的103条人生建议码农周刊vip会员专属邮件周报-vol090&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;凯文·凯利70岁生日的103条人生建议｜码农周刊VIP会员专属邮件周报 Vol.090&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p dir=&quot;auto&quot;&gt;本文内容节选自「码农周刊VIP会员专属邮件周报 Vol.090」，每周五发送，欢迎订阅！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a href=&quot;#%E7%AE%80%E4%BB%8B&quot;&gt;码农周刊简介&lt;/a&gt;｜&lt;a href=&quot;#%E8%AF%BB%E8%80%85%E5%9C%88%E5%AD%90%E4%B8%93%E5%B1%9E%E9%82%AE%E4%BB%B6%E5%91%A8%E6%8A%A5&quot;&gt;读者圈子专属邮件周报&lt;/a&gt;｜&lt;a href=&quot;#%E5%BE%80%E6%9C%9F%E5%AD%98%E6%A1%A3&quot;&gt;往期存档&lt;/a&gt;&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-欢迎加入读者圈子一起交流&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#欢迎加入读者圈子一起交流&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;欢迎加入读者圈子，一起交流！&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;600+圈子成员，以中高级程序员为主，更有架构师、CTO坐镇交流；&lt;/li&gt;
&lt;li&gt;1000+优质主题，数十G独家资料，每日分享，精挑细选；&lt;/li&gt;
&lt;li&gt;全年52期专属邮件周报，让你轻松掌握业界资讯、技术干货，提升认知水平；&lt;/li&gt;
&lt;li&gt;全年52本好书共读，让你花最少的时间，获取更好的知识；&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;……&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;心动不如行动，赶快加入吧！&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/2fac8f02f427e6fd6754cc3079b5de7539bccbb010003d49d2309d0ee1a21c5a/68747470733a2f2f696d672e746f757469616f2e696f2f6164732f7669705f6769746875625f303530362e6a706567&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/2fac8f02f427e6fd6754cc3079b5de7539bccbb010003d49d2309d0ee1a21c5a/68747470733a2f2f696d672e746f757469616f2e696f2f6164732f7669705f6769746875625f303530362e6a706567&quot; data-canonical-src=&quot;https://img.toutiao.io/ads/vip_github_0506.jpeg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-本期首先分享的是凯文凯利70岁生日的103条人生建议摘录几条共勉&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#本期首先分享的是凯文凯利70岁生日的103条人生建议摘录几条共勉&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;本期，首先分享的是凯文·凯利70岁生日的103条人生建议，摘录几条，共勉。&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;不要为那种你不想成为的人工作。&lt;/li&gt;
&lt;li&gt;12个爱你的人，比12,000,000个喜欢你的人更值得。&lt;/li&gt;
&lt;li&gt;别犯同样的错，试一些新错。&lt;/li&gt;
&lt;li&gt;领导的真正工作是培养更多领导，而不是粉丝。&lt;/li&gt;
&lt;li&gt;付出（锻炼、陪伴、工作）的连续性比数量更重要。日拱一卒，比偶尔为之更重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-内容节选&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#内容节选&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;内容节选&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;1、&lt;a href=&quot;https://mp.weixin.qq.com/s/1Dv17rDRto_1i_LdHEVARA&quot; rel=&quot;nofollow&quot;&gt;TikTok内幕：张一鸣的巨浪征途&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;“另一方面，张一鸣不会感情用事，对人对事极为精确，眼睛容不下灰色和沙粒。这让他流露出一种狠绝。在早期，他把拿走公司代码的人送进了监狱。”&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;2、&lt;a href=&quot;https://mp.weixin.qq.com/s/_fZxTDOr2n1IQySjVODB8A&quot; rel=&quot;nofollow&quot;&gt;Web3革命：逃离、信仰、大迁徙&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;互联网正在发生的一场“大迁徙”&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;3、&lt;a href=&quot;https://toutiao.io/k/vduu1jt&quot; rel=&quot;nofollow&quot;&gt;B站SRE业务稳定性运营实践&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;从稳定性的相关理论定义出发，围绕稳定性的核心领域展开描述，并介绍B站在相关领域所做的实践探索。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;4、&lt;a href=&quot;https://toutiao.io/k/h7w6rt4&quot; rel=&quot;nofollow&quot;&gt;携程酒店订单缓存 &amp;amp; 存储系统升级实践&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;万字长文详解&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;5、&lt;a href=&quot;https://github.com/alibaba/fastjson2&quot;&gt;阿里巴巴开源的高性能JSON库&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;FASTJSON项目的重要升级&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;6、&lt;a href=&quot;https://github.com/k8w/tsrpc&quot;&gt;一个专为 TypeScript 设计的 RPC 框架&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;适用于 HTTP API、WebSocket 实时应用、NodeJS 微服务等场景。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;7、&lt;a href=&quot;https://toutiao.io/k/zgzh3st&quot; rel=&quot;nofollow&quot;&gt;几道高频的JVM面试题&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;供参考&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;8、&lt;a href=&quot;https://toutiao.io/k/x03gc99&quot; rel=&quot;nofollow&quot;&gt;9张图轻松吃透Go内存管理单元&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;图文并茂&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;9、&lt;a href=&quot;https://toutiao.io/k/n0gqyj1&quot; rel=&quot;nofollow&quot;&gt;Elasticsearch 数据建模指南&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;详细介绍&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;10、&lt;a href=&quot;https://toutiao.io/k/y59f508&quot; rel=&quot;nofollow&quot;&gt;我的机器学习之路&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;学习总结&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-简介&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#简介&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;简介&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;码农周刊是一份专为广大程序员、编程爱好者们打造的 IT 技术周刊。每周发送。&lt;/li&gt;
&lt;li&gt;2013 年 9 月 12 日创刊至今，已发送 300 多期，订阅用户超 20 万&lt;/li&gt;
&lt;li&gt;专业、简单、有用，是我们一直坚持的办刊宗旨。一路走来，我们见证了不少订阅用户从编程新手进阶成了高级程序员、架构师、CTO……&lt;/li&gt;
&lt;li&gt;2020 年 4 月，为了给用户提供更优质的服务，我们推出了「码农周刊VIP会员」服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-读者圈子专属邮件周报&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#读者圈子专属邮件周报&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;读者圈子专属邮件周报&lt;/h2&gt;

&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-往期存档&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#往期存档&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;往期存档&lt;/h2&gt;

&lt;/article&gt;
  &lt;/div&gt;

    &lt;/div&gt;

  &lt;/readme-toc&gt;

  

  &lt;details class=&quot;details-reset details-overlay details-overlay-dark&quot; id=&quot;jumpto-line-details-dialog&quot;&gt;
    &lt;summary data-hotkey=&quot;l&quot; aria-label=&quot;Jump to line&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast linejump&quot; aria-label=&quot;Jump to line&quot;&gt;
          &lt;/details-dialog&gt;
  &lt;/details&gt;


&lt;/div&gt;

  &lt;/div&gt;


&lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;

  &lt;/div&gt;

          &lt;footer class=&quot;footer width-full container-xl p-responsive&quot; role=&quot;contentinfo&quot;&gt;


  
  &lt;p class=&quot;d-flex flex-justify-center pb-6&quot;&gt;
    &lt;span class=&quot;f6 color-fg-muted&quot;/&gt;
  &lt;/p&gt;
&lt;/footer&gt;




  &lt;div id=&quot;ajax-error-message&quot; class=&quot;ajax-error-message flash flash-error&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;button type=&quot;button&quot; class=&quot;flash-close js-ajax-error-dismiss&quot; aria-label=&quot;Dismiss error&quot;&gt;
      &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
    &lt;/button&gt;&lt;p&gt;
    You can’t perform that action at this time.
  &lt;/p&gt;&lt;/div&gt;

  &lt;div class=&quot;js-stale-session-flash flash flash-warn flash-banner&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-in&quot; hidden=&quot;&quot;&gt;You signed in with another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-out&quot; hidden=&quot;&quot;&gt;You signed out in another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
  &lt;/div&gt;
    &lt;template id=&quot;site-details-dialog&quot;&gt;
  &lt;details class=&quot;details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm&quot; open=&quot;&quot;&gt;
    &lt;summary role=&quot;button&quot; aria-label=&quot;Close dialog&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal&quot;&gt;
      &lt;button class=&quot;Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0&quot; type=&quot;button&quot; aria-label=&quot;Close dialog&quot; data-close-dialog=&quot;&quot;&gt;
        &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
      &lt;/button&gt;
      &lt;p class=&quot;octocat-spinner my-6 js-details-dialog-spinner&quot;/&gt;
    &lt;/details-dialog&gt;
  &lt;/details&gt;
&lt;/template&gt;

    

    &lt;template id=&quot;snippet-clipboard-copy-button&quot;&gt;
  
&lt;/template&gt;




  &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cbf514eec6d2a358733f7e4faf142379</guid>
<title>聊聊我们是如何做系统保障方案的</title>
<link>https://toutiao.io/k/i8q3ye4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原创不易，求分享、求一键三连。回复保障方案获取资料&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面对业务迅速增长复杂度会呈几何级增加，为了降低维护复杂度而引入了微服务，只要每个服务足够简单，那么维护成本也可以降低。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务保障也是一个非常困难的事情，今天聊一聊系统稳定性方案。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;方案设计层面&lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;业务逻辑正常是最基础的要求。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;接口安全、数据安全（数据泄漏、数据遍历、越权访问）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务扩展性（服务是否可平滑扩容，能扩的最大范围是多少个节点）、是否存在单点。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据库表结构设计、索引设计。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缓存更新机制、过期机制、是否存在单点热Key&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息系统设计、流转过程；投递速率、消费速率&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;定时任务运行方式、执行记录、失败处理、是否可以恢复&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;仅仅考虑前面的场景可能还是不够，所以继续进行系统稳定性的思考。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;系统稳定性&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5501022494887525&quot; data-type=&quot;png&quot; data-w=&quot;1956&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVIS93pagUDXfaaRI7DiayDXMJ4511ibYkiaZRtXVjxtT8omOuEyCjyhElTgQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;流量控制&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般情况下越靠近下层资源的吞吐能力越弱，数据库吞吐能力有限，要尽量将流量拦截到上层尽快返回响应，让越下层的资源做&lt;strong&gt;正确和重要&lt;/strong&gt;的事情，达到压榨系统的目的，所以上面看到的WAF拦截；限流基本都是放在网关或者离用户更近的一层。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.558641975308642&quot; data-type=&quot;png&quot; data-w=&quot;1944&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVIScvXYDAMGHutvaYVxXTvOG2sQ4PlE7xaXuXCG1OsR4zIhice2cHhjA9w/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;数据冗余&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;系统中最重要的是数据，保证数据不丢失至关重要，数据冗余是防止丢失最简单的方式。数据冗余备份方式很多种，从物理到逻辑的角度，备份可以分为以下几类：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;只对数据库操作系统的物理文件（如数据文件、日志文件等）的备份&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;物理备份又可以分为冷备(在关闭数据库时进行的备份操作，能够较好地保证数据库的完整性)和热备(在数据库运行状态中进行操作，这种备份方法依赖于数据库的日志文件)&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从数据库的备份策略角度来看，备份又可分为全量备份、增量和冗余备份&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;每次对数据进行完整的备份&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以备份整个数据库，包含用户表、系统表、索引、视图和存储过程等所有数&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但它需要花费更多的时间和空间，所以，做一次完全备份的周期要长些&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只有那些在上次完全备份或者增量备份后被修改的文件才会被备份&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;备份那些自从上次完全备份之后被修改过的文件，即只备份数据库部分的内容&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;它比最初的完全备份小，因为只包含自上次完全备份以来所改变的数据库&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;它的优点是存储和恢复速度快&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;高可用&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了保证系统的高可用，在框架、基础建设层面需要做很多建设。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;超时控制，可以让服务之间调用快速抛错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果单个请求耗时长会影响服务的性能。比如API接口设置2s超时API调用a服务用了1s，服务a调用服务b用了1s，那么现在已经超时了，如果还需要调用服务c，这个时候整体接口已经超时就不需要继续调用c服务，浪费时间和资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重试是保证一些服务可能偶尔服务抖动失效情况下，再重新发起一次，保证当前请求的准确性，重试需要有限制，不能无限循环，再则操作是否可以重试，是有支持幂等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩容策略可以分为两种，一种是对单机整体扩容，也就是机器内部包含CPU、内存、存储设备等;另一种增加机器，对于服务的扩容一定要慎重，需要考虑到扩容之后下游的资源是否能够支撑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如mysql服务器链接只有2000个，当前集群已经使用的差不多了，服务数量增加之后会导致链接不够用；业务更容易出问题。微服务k8s容器化之后，我们自研的发布系统上可以进行轻松的扩容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个业务降级的例子，定时送道具打积分榜单，榜单计算支持的QPS可能是1w，道具分多种档次，其中有一种薅羊毛的道具1积分，花钱的几十到几万积分不等，可能有刷子囤积了几亿的羊毛道具等待打榜时候使用程序投递影响活动的体验；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有大量羊毛道具并且超过榜单计算的QPS，此时就降级把羊毛道具剔除掉，只算花钱的，毕竟1积分对榜单影响小（业务定夺）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顾名思义，按照一定的原则进行划分，进行单独维护。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务隔离：将系统按照业务特性分成不同的服务模块，各个模块之间相对独立，无强依赖，某些模块出现故障不至于全部不可用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;动态接口和静态接口隔离，比如：一个接口里面有用户自己特定的一些数据，也包含了所有用户看到都是一样的数据，那么就可以把这部分拆分成两个接口；大家看到统一数据的接口可以加统一缓存或者上CDN；不拆分是无法上CDN的；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据库分库分表等；隔离之后尽量保证不可越界、不可共享防止隔离失效。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;业务保障的基础（监控&amp;amp;告警）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;怎样衡量业务系统是否表现正常？是应用在线上跑着进程还在没有宕机，这可能是一个先决条件，有的程序虽然还在跑着，但是已经不能提供服务了，能体现服务的正常需要看流量，流量是看不见的，只有通过日志监控体现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;监控需要监控哪些呢，基础资源监控-基础的资源是否出现问题了？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4050235478806907&quot; data-type=&quot;png&quot; data-w=&quot;2548&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVISxM7LMnWAMKFEjE6KDibU5xHv6dlQmH7LNh1FlAYB9nuSeSKLXsFfYicg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单服务监控-某个服务是不是指标是否出现异常了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;QPS（GRPC、http）、耗时、接口错误码、错误率监控、上下游依赖监控(DB、缓存、上游依赖服务、下游支持服务)&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5580204778156996&quot; data-type=&quot;png&quot; data-w=&quot;2344&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVISG9mROFuM2RT1CY7ykLlEkYSKnCpGkiatwvqpKxibDZIiaXAHvFrTc6GxA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微服务调用链路监控-调用链路到某个服务是否异常了？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41450777202072536&quot; data-type=&quot;png&quot; data-w=&quot;2702&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVISBPcKV4VpQGZAH5oup5WQZx3VNbghb0HD8M5yCHJXlBCxRC3riao0jcQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户端监控-用户体验端是否出现异常了？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5635208711433757&quot; data-type=&quot;png&quot; data-w=&quot;2204&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVIS4RGiaL385uN45W7gVpBxBTEfwUw3xpAhPqRkggHGdIYU1X5Z9MnvEvA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;上线规范-预演&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;预演是非常重要的环节，很多bug都可以在预演环节被干掉，这里不是因为测试同学不努力，不能把那些BUG过掉，是因为：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;预演环境有真实的庞大数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;预演环境的能还原真实的QPS，会覆盖掉很多边界场景&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有些测试必须在生产环境进行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;预演需要做方案&lt;/strong&gt;，不能引起线上脏数据&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了这些东西就可以进行预演了，然后这里有一个最大原则：预演请务必尽可能还原真实场景，包括时间点的设置！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那些之前重点关注的问题，很多重要的事情需要扣细节，扣的越多思考越细能考虑到整个事情的所拥有的发展方向，提前堵上错误的路径。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前工作中遇到一个广播的场景，是服务端会推送给web端一个命令消息，web收到消息之后需要向服务端发起一个http请求获取数据，由于命令推送是同一个，根据不同的用户获取的http响应不一样，并且http接口数量也比较大，前期用户不多的情况下http接口的QPS比较低还能接收，逐渐业务增长后，http接口内部实现使用缓存能优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当服务端已经无法优化之后，简单粗暴的，进行推送之后，web收到命令消息之后，0-5分钟内打散请求服务端也能抗一段时间，量持续增长，到0-5分钟即使打散量还是很大，给对应的http接口限流，用户会反馈为什么我没收到消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种逻辑面对大量用户在线确实比较难搞，后面将接口返回的数据进行拆分（动态和静态）静态数据加CDN并在界面上提前下发，动态数据压缩走广播，去掉广播刷接口的逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;带宽也是资源，之前遇到过一个事故，前端获取一个接口数据如果没有获取成功，则会再进行api请求拉取一次，没有做重试退出操作，导致这个接口的流量很大基本上打满了某个服务的所有资源，进而急剧恶化其他请求都无法请求到后端服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前处理的方式是在网关层面限制改接口的流量，部分正常的业务可以打到服务节点上，但是网关层量还是一直升高，最后将改接口直接挂到CDN上，不让回源到服务，但当时CDN缓存的是404响应，事后想想直接把响应结果缓存到CDN，不是所有客户端都正常了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无法及时发现线上问题，请不要乱打日志，可能这个行为是给别人埋坑，info日志能看出业务在正常运行，error日志能看出系统哪些业务出错了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;紧急故障处理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;线上故障总会出现的，我们出现故障如何紧急处理（参见：毛老师 SRE PPT）回复保障方案获&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.7761194029850746&quot; data-type=&quot;png&quot; data-w=&quot;804&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVIS33kLAWnxjriaBS5tXvz1y1TGae4njkXQwefoRibY447tNSAfZfnWjt1Q/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;经验沉淀&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;复盘本质就做两件事情① 评价结果 ② 总结过程经验教训。具体来说：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;复盘要紧密围绕事情结果来讨论。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;事情结果的好坏，取决于是否达成预定目标。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;因此，任何事在启动前必须有明确可衡量的目标。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于目标实现有贡献的，称之为经验；对于目标实现有阻碍影响的，称之为教训。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;经验、教训要能传承并指导后续的行动。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.435129740518962&quot; data-type=&quot;png&quot; data-w=&quot;1002&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVIS7BLhd9fcsnnohEAIkuwK27HdKoXyAVlBibiaXIXib4pHV79Cm5ev3heYg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;blockquote&gt;&lt;p&gt;引用：&lt;/p&gt;&lt;p&gt;https://cloud.tencent.com/developer/article/1666384&lt;/p&gt;&lt;p&gt;https://mp.weixin.qq.com/s/Rx_XuMLeor_M9EuQcYq23w&lt;/p&gt;&lt;p&gt;https://zhuanlan.zhihu.com/p/61363959&lt;/p&gt;&lt;p&gt;https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，今天的分享就到这，喜欢的同学可以四连支持：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11333333333333333&quot; data-type=&quot;png&quot; data-w=&quot;600&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVISF2j9vB6GibthRcchHichxCOJgSnQCxtXicgnsJOzMN3OGoavRfqKULndQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想要更多交流可以加我微信：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5549076773566569&quot; data-type=&quot;png&quot; data-w=&quot;2058&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDljnmdo4aeGPU9J9dYFVISLL8OsELTC2cib9KCGkfsZ5n7C8LzNuF6D9lCcaPJLJPpEjjQib2TXFEA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8836415ad41998f285750532aa5bde67</guid>
<title>3种方式！Go Error处理最佳实践</title>
<link>https://toutiao.io/k/crmxg9t</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe977Xa5zfy5iaV3agpS11Cqm4psjPOibic6BZSicnBFh6uWzCFp3uqN5R114Fq85DmuCzdL3eESlQ37bFA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;导语 |&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;错误处理一直以一是编程必需要面对的问题，错误处理如果做的好的话，代码的稳定性会&lt;/span&gt;&lt;span&gt;很好。不同的语言有不同的出现处理的方式。Go语言也一样，在本篇文章中，我们来讨论一下Go语言的错误处理方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;一、错误与异常&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;1&quot; data-sign=&quot;fd3ba7320809aed0b3a7a7547a8647b9&quot;&gt;&lt;span&gt;（一）&lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;错误是程序中可能出现的问题，比如连接数据库失败，连接网络失败等，在程序设计中，错误处理是业务的一部分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;98262240ca8645af56770f83c7a472e8&quot;&gt;&lt;span&gt;Go内建一个error接口类型作为go的错误标准处理&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;98262240ca8645af56770f83c7a472e8&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;c7ee59e8343f82a268919b95c2deeb76&quot;&gt;&lt;span&gt;http://golang.org/pkg/builtin/#error&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; error &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__built_in&quot;&gt;Error&lt;/span&gt;() &lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;http://golang.org/src/pkg/errors/errors.go&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(text &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &amp;amp;errorString{text}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; errorString &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   s &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(e *errorString)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; e.s&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;ceb7f04d807d6a9f7a3a3d2d43bc97e3&quot;&gt;&lt;span&gt;（二）Exception&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;异常是指在不该出现问题的地方出现问题，是预料之外的，比如空指针引用，下标越界，向空map添加键值等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;5a7ea83019261901e4386de061fb5be9&quot;&gt;&lt;span&gt;（三）panic&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于真正意外的情况，那些表示不可恢复的程序错误，不可恢复才使用panic。对于其他的错误情况，我们应该是期望使用error来进行判定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;7bd74ab8deb29502b0550ccdb3aaf72f&quot;&gt;&lt;span&gt;go源代码很多地方写panic, 但是工程实践业务代码不要主动写panic，理论上panic只存在于server启动阶段，比如config文件解析失败，端口监听失败等等，所有业务逻辑禁止主动panic，所有异步的goroutine都要用recover去兜底处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;0b26c1a29a28fd8fb594a49e036e9291&quot;&gt;&lt;span&gt;（四）总结&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;理解了错误和异常的真正含义，我们就能理解Go的错误和异常处理的设计意图。传统的try...catch...结构，很容易让开发人员把错误和异常混为一谈，甚至把业务错误处理的一部分当做异常来处理，于是你会在程序中看到一大堆的catch...&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Go开发团队认为错误应该明确地当成业务的一部分，任何可以预见的问题都需要做错误处理，于是在Go代码中，任何调用者在接收函数返回值的同时也需要对错误进行处理，以防遗漏任何运行时可能的错误。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;异常则是意料之外的，甚至你认为在编码中不可能发生的，Go遇到异常会自动触发panic（恐慌），触发panic程序会自动退出。除了程序自动触发异常，一些你认为不可允许的情况你也可以手动触发异常。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外，在Go中除了触发异常，还可以终止异常并可选的对异常进行错误处理，也就是说，错误和异常是可以相互转换的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;二、Go处理错误的三种方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;705498691352a2b5c3deb99f6e904bbe&quot;&gt;&lt;span&gt;（一）经典Go逻辑&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;直观的返回error：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; ZooTour &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Enter() error &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    VisitPanda(panda *Panda) error &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Leave() error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Tour&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(t ZooTour1, panda *Panda)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err := t.Enter(); err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; errors.WithMessage(err, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Enter failed.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err := t.VisitPanda(); err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; errors.WithMessage(err, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;VisitPanda failed.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;706a2e97dde1675b05bf0d9c4df1fdc4&quot;&gt;&lt;span&gt;（二）屏蔽过程中的error的处理&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;将error保存到对象内部，处理逻辑交给每个方法，本质上仍是顺序执行。标准库的bufio、database/sql包中的Rows等都是这样实现的，有兴趣可以去看下源码：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; ZooTour &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Enter() error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    VisitPanda(panda *Panda) error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Leave() error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Err() error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Tour&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(t ZooTour, panda *Panda)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    t.Enter()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    t.VisitPanda(panda)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    t.Leave()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err := t.Err(); err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; errors.WithMessage(err, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ZooTour failed&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;d5fa3167157813114ec1f4748cff34b9&quot;&gt;&lt;span&gt;（三）利用函数式编程延迟运行&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;分离关注点-遍历访问用数据结构定义运行顺序，根据场景选择，如顺序、逆序、二叉树树遍历等。运行逻辑将代码的控制流逻辑抽离，灵活调整。kubernetes中的visitor对此就有很多种扩展方式，分离了数据和行为，有兴趣可以去扩展阅读：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Walker &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Next MyFunc&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; SliceWalker &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    index &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    funs []MyFunc&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;NewEnterFunc&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MyFunc&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(t ZooTour)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; t.Enter()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BreakOnError&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(t ZooTour, walker Walker)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        f := walker.Next() &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; f == &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err := f(t); err := &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;282f642150861c8edaf6123fab79d0b0&quot;&gt;&lt;span&gt;（四）三种方式对比&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面这三个例子，是Go项目处理错误使用频率最高的三种方式，也可以应用在error以外的处理逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;三、分层下的Error Handling&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;1&quot; data-sign=&quot;93e15a3022719528ae6836a8b688bfd0&quot;&gt;&lt;span&gt;（一）一个常见的三层调用&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在工程实践中，以一个常见的三层架构（dao-&amp;gt;service-&amp;gt;controller）为例，我们常见的错误处理方式大致如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err := mode.ParamCheck(param); err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    log.Errorf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;param=%+v&quot;&lt;/span&gt;, param)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; errs.ErrInvalidParam&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; mode.ListTestName(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;_, err := dao.GetTestName(ctx, settleId)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    log.Errorf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GetTestName failed. err: %v&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; errs.ErrDatabase&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    log.Errorf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GetTestDao failed. uery: %s error(%v)&quot;&lt;/span&gt;, sql, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;ee1c48914814b4c14626dffa3fb8b872&quot;&gt;&lt;span&gt;（二）问题总结&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; data-lines=&quot;3&quot; data-sign=&quot;09d9d0d3bca83bc0cdf56b26770851a3list3&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分层开发导致的处处打印日志；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;难以获取详细的堆栈关联；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;根因丢失。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;3601ac2df8b55e284ba998b08e9fc0af&quot;&gt;&lt;span&gt;（三）Wrap erros&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Go相关的错误处理方法很多，但大多为过渡方案，这里就不一一分析了（类似&lt;/span&gt;&lt;span&gt;github.com/juju/errors&lt;/span&gt;&lt;span&gt;库，有兴趣可以了解）。这里我以&lt;/span&gt;&lt;span&gt;github.com/pkg/errors&lt;/span&gt;&lt;span&gt;为例，这个也是官方Proposal的重点参考对象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot; data-lines=&quot;3&quot; data-sign=&quot;5865182d06afb8fd19ef3d06ba1ea4cclist3&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;错误要被日志记录；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;应用程序处理错误，保证100%完整性；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;之后不再报告当前错误（错误只被处理一次）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;github.com/pkg/errors包主要包含以下几个方法，如果我们要新生成一个错误，可以使用New函数,生成的错误，自带调用堆栈信息。如果有一个现成的error ，我们需要对他进行再次包装处理，这时候有三个函数可以选择（WithMessage/WithStack/Wrapf）。其次，如果需要对源错误类型进行自定义判断可以使用Cause,可以获得最根本的错误原因。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(message string)&lt;/span&gt;&lt;/span&gt; error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;WithMessage&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(err error, message string)&lt;/span&gt;&lt;/span&gt; error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;WithStack&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(err error)&lt;/span&gt;&lt;/span&gt; error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Wrapf&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(err error, format string, args ...interface{})&lt;/span&gt;&lt;/span&gt; error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Cause&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(err error)&lt;/span&gt;&lt;/span&gt; error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以常见的一个三层架构为例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.9291553133514986&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe94RLDb9L9KvbfjHd5tXxnc8GxCLibDxtgibo0uFfjqojDwkjRN0ksubE90ns5E7EZjlUtYk1NF8lkTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;734&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;objectivec&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; errors.Is(err, sql.ErrNoRows) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;, errors.Wrapf(ierror.ErrNotFound, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;query:%s&quot;&lt;/span&gt;, query)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;, errors.Wrapf(ierror.ErrDatabase,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;query: %s error(%v)&quot;&lt;/span&gt;, query, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    bills, err := a.Dao.GetName(ctx, param)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result, errors.WithMessage(err, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GetName failed&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(Format)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(next ihttp.MiddleFunc)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ihttp&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;MiddleFunc&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context, req *http.Request, rsp *ihttp.Response)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        format := &amp;amp;format{Time: time.Now().Unix()}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        err := next(ctx, req, rsp)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        format.Data = rsp.Data&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            format.Code, format.Msg = errCodes(ctx, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        rsp.Data = format&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;errCodes&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context, err error)&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        log.CtxErrorf(ctx, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;error: [%+v]&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; myError = &lt;span class=&quot;code-snippet__built_in&quot;&gt;new&lt;/span&gt;(erro.IError)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; errors.As(err, &amp;amp;myError) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; myError.Code, myError.Msg&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; code.ServerError, i18n.CodeMessage(code.ServerError)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果和其他库进行协作，考虑使用errors.Wrap或者errors.Wrapf保存堆栈信息。同样适用于和标准库协作的时候。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;_, err := os.Open(path)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Open failed. [%s]&quot;&lt;/span&gt;, path)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;a31093bfca1a95d298b929332ee984bf&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;a31093bfca1a95d298b929332ee984bf&quot;&gt;&lt;span&gt;最终效果样例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.1484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe94RLDb9L9KvbfjHd5tXxnc8bayiarVkHvic59J0mCpxjiaoOd1xHDibTfvdcqPb3GDHicgYhSz03khGm7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;30a4c70e7b307aafcf1c0f48b79a8f82&quot;&gt;&lt;span&gt;关键点总结：&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;四、errgroup集中错误处理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;官方的ErrGroup非常简单，其实就是解决小型多任务并发任务。基本用法golang.org/x/sync/errgroup包下定义了一个Group struct，它就是我们要介绍的ErrGroup并发原语，底层也是基于WaitGroup实现的。在使用ErrGroup时，我们要用到三个方法，分别是WithContext、Go和Wait。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;1&quot; data-sign=&quot;e753f13250226a5e021139d44f999239&quot;&gt;&lt;span&gt;（一）背景&lt;/span&gt;&lt;/h2&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;233a1509300eaac92808d6effcd928b3&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;233a1509300eaac92808d6effcd928b3&quot;&gt;&lt;span&gt;通常，在写业务代码性能优化时经常将一个通用的父任务拆成几个小任务并发执行。此时需要将一个大的任务拆成几个小任务并发执行，来提高QPS，我们需要再业务代码里嵌入以下逻辑，但这种方式存在问题：&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;233a1509300eaac92808d6effcd928b3&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;98ad53f5e0495f49e5795d9733f57189&quot;&gt;&lt;span&gt;（二）errgroup函数签名&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type &lt;span class=&quot;code-snippet__type&quot;&gt;Group&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;WithContext&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context)&lt;/span&gt;&lt;/span&gt; (*&lt;span class=&quot;code-snippet__type&quot;&gt;Group&lt;/span&gt;, context.&lt;span class=&quot;code-snippet__type&quot;&gt;Context&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(g *Group)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Go&lt;/span&gt;(f &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; error)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(g *Group)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Wait&lt;/span&gt;() error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;a6502b9ddec7b8608b7bd88b68322b35&quot;&gt;&lt;span&gt;整个包就一个Group结构体：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;d976f203b6f22aea4ce4beb6d93ee2e9&quot;&gt;&lt;span&gt;（三）使用案例&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注意这里有一个坑，在后面的代码中不要把ctx当做父 context又传给下游，因为errgroup取消了，这个context就没用了，会导致下游复用的时候出错&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;TestErrgroup&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   eg, ctx := errgroup.WithContext(context.Background())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;; i++ {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      i := i&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      eg.Go(&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         time.Sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Canceled:&quot;&lt;/span&gt;, i)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;End:&quot;&lt;/span&gt;, i)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         }})}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err := eg.Wait(); err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      log.Fatal(err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-lines=&quot;1&quot; data-sign=&quot;058e19ba2ee08865333ac4739e83dc66&quot;&gt;&lt;span&gt;（四）errgroup拓展包&lt;/span&gt;&lt;/h2&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;d9c2c93711f14087bd7abd2614d7631e&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;d9c2c93711f14087bd7abd2614d7631e&quot;&gt;&lt;span&gt;B站拓展包&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;d9c2c93711f14087bd7abd2614d7631e&quot;&gt;&lt;span&gt;（https://github.com/go-kratos/kratos/blob/v0.3.3/pkg/sync/errgroup/errgroup.go）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相比官方的结构，B站的结构多出了一个函数签名管道和一个函数签名切片,并把Context直接放入了返回的Group结构，返回仅返回一个Group结构指针。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type &lt;span class=&quot;code-snippet__type&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   err     error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   wg      sync.&lt;span class=&quot;code-snippet__type&quot;&gt;WaitGroup&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   errOnce sync.&lt;span class=&quot;code-snippet__type&quot;&gt;Once&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   workerOnce sync.&lt;span class=&quot;code-snippet__type&quot;&gt;Once&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   ch         chan &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context)&lt;/span&gt;&lt;/span&gt; error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   chs        []&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context)&lt;/span&gt;&lt;/span&gt; error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   ctx    context.&lt;span class=&quot;code-snippet__type&quot;&gt;Context&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   cancel &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;WithContext&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context)&lt;/span&gt;&lt;/span&gt; *&lt;span class=&quot;code-snippet__type&quot;&gt;Group&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &amp;amp;&lt;span class=&quot;code-snippet__type&quot;&gt;Group&lt;/span&gt;{ctx: ctx}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Go方法可以看出并不是直接起协程的（如果管道已经初始化好了），而是优先将函数签名放入管道，管道如果满了就放入切片。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(g *Group)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Go&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(f &lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;(ctx context.Context)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   g.wg.Add(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; g.ch != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; g.ch &amp;lt;- f:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         g.chs = &lt;span class=&quot;code-snippet__built_in&quot;&gt;append&lt;/span&gt;(g.chs, f)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; g.do(f)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GOMAXPROCS函数其实是起了一个并发池来控制协程数量，传入最大协程数量进行并发消费管道里的函数签名：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(g *Group)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;GOMAXPROCS&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(n &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; n &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__built_in&quot;&gt;panic&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;errgroup: GOMAXPROCS must great than 0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   g.workerOnce.Do(&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      g.ch = &lt;span class=&quot;code-snippet__built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(context.Context)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;n&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;i&lt;/span&gt; := 0; &lt;span class=&quot;code-snippet__title&quot;&gt;i&lt;/span&gt; &amp;lt; &lt;span class=&quot;code-snippet__title&quot;&gt;n&lt;/span&gt;; &lt;span class=&quot;code-snippet__title&quot;&gt;i&lt;/span&gt;++&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; f := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; g.ch {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               g.do(f)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         }()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;bd1f80fb1a0098cf3f106daa6a72df6d&quot;&gt;&lt;span&gt;整个流程梳理下来其实就是启动一个固定数量的并发池消费任务，Go函数其实是向管道中发送任务的生产者，这个设计中有意思的是他的协程生命周期的控制，他的控制方式是每发送一个任务都进行WaitGroup加一，在最后结束时的wait函数中进行等待，等待所有的请求都处理完才会关闭管道，返出错误。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;15151080bcf5a420718cf991e8721952&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;15151080bcf5a420718cf991e8721952&quot;&gt;&lt;span&gt;tips&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt; 作者简介&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;105&quot; data-backw=&quot;105&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94RLDb9L9KvbfjHd5tXxnc8uK1w7ic9UImich90T4hO0gsYHUKnnUcicO1soLiadaBfumQxQACwu6mqbw/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;955&quot; data-cropy1=&quot;18.19047619047619&quot; data-cropy2=&quot;1000.4761904761905&quot; data-fileid=&quot;100044396&quot; data-ratio=&quot;1.0282722513089004&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94RLDb9L9KvbfjHd5tXxnc8icjKKD2IQfh97X9SjImK58LIH0MFVOle5LbeNib6sic03uAmVPgV61d7A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;955&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;李森林&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;腾讯后台工程师&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;腾讯后台工程师，目前负责腾讯游戏内容平台的设计、开发和维护工作。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt; 推荐阅读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247536592&amp;amp;idx=1&amp;amp;sn=d0f64191958c0e044180361fa0311a4e&amp;amp;chksm=eaa85580dddfdc96196e8b1fd0c6e10e456a479c3bcec43475dfa890ef7fd13519f5b0014695&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;生于云，长于云，开发者如何更好地吃透云原生？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;生于云，长于云，开发者如何更好地吃透云原生？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247536389&amp;amp;idx=1&amp;amp;sn=64e654aa19f84d22d3782cc2c5586eee&amp;amp;chksm=eaa85555dddfdc434925071270ea89a3d147d140d8347760af16ea17090246a302e200e211e1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;从0到1详解ZooKeeper的应用场景及架构原理！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;从0到1详解ZooKeeper的应用场景及架构原理！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247536139&amp;amp;idx=1&amp;amp;sn=f9aaeaf85420feae4168b7d05106c2f8&amp;amp;chksm=eaa8545bdddfdd4daa6accbeb92deaf119cb7bd395b7942b0995f3ed737209895d85b6c14f91&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;分布式事务解决方案：从了解到放弃！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;分布式事务解决方案：从了解到放弃！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247536128&amp;amp;idx=1&amp;amp;sn=419b57b371a768cf3451d942941684aa&amp;amp;chksm=eaa85450dddfdd461b89b6f8b7ebcfd1748babd45bda46d9d23cdee41d064a0010dc3e72dd81&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Go语言从0到1实现最简单的数据库！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;Go语言从0到1实现最简单的数据库！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI2NDU4OTExOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe96FK2eEg86vUicOR3n6kAHk1PHvTb8VBicYk0RmNQYsQyibgg8iaZqT0bCEU9VKo3Z3iceoQfgycyMpKWQ/0?wx_fmt=png&quot; data-nickname=&quot;云加社区&quot; data-alias=&quot;QcloudCommunity&quot; data-signature=&quot;腾讯云官方社区公众号，汇聚技术开发者群体，分享技术干货，打造技术影响力交流社区。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.59375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/VY8SELNGe977Xa5zfy5iaV3agpS11Cqm4xV7ckfbmtFLyUjFID2k7yO4q8hvB4OqYoNkARZ2xuvzKvMtnmVN2BQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>949b4cb7fdae8e97a0baed110b042fb5</guid>
<title>博文推荐｜Pulsar 独立集群如何实现单一、共享 BookKeeper</title>
<link>https://toutiao.io/k/cgutegh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;blockquote&gt;&lt;p&gt;本文翻译自 StreamNative 博客《Pulsar Isolation Part III: Separate Pulsar Clusters Sharing a Single BookKeeper Cluster》，作者高冉。&lt;/p&gt;&lt;h1&gt;译者简介&lt;/h1&gt;&lt;p&gt;姚余钱@深圳觉行科技有限公司，致力于医疗大数据领域。热衷开源，活跃于 Apache Pulsar 社区。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这是关于在 Apache Pulsar 中实现资源隔离四篇博客系列中的第三篇博客。&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyMjkzMjA1Ng==&amp;amp;mid=2247487152&amp;amp;idx=1&amp;amp;sn=6181c72dd716b0d70865e76e123e38d5&amp;amp;scene=21#wechat_redirect&quot; title=&quot;第一篇博客&quot; data-linktype=&quot;2&quot;&gt;第一篇博客&lt;/a&gt;概述了在 Pulsar 中实现隔离的三种方法：&lt;/p&gt;&lt;p&gt;1.&lt;span&gt;使用 BookKeeper 独立集群的 Pulsar 独立集群&lt;/span&gt;：这种无共享方法提供了最高级别的隔离，适用于存储高度敏感的数据，例如个人身份信息或财务记录。我们在本系列中的&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyMjkzMjA1Ng==&amp;amp;mid=2247487909&amp;amp;idx=1&amp;amp;sn=5e6a22f05aa443d436383cef193d1a96&amp;amp;scene=21#wechat_redirect&quot; title=&quot;第二篇博客&quot; data-linktype=&quot;2&quot;&gt;第二篇博客&lt;/a&gt;提供了此方法的分步教程。&lt;/p&gt;&lt;p&gt;2.&lt;span&gt;共享一个 BookKeeper 集群的 Pulsar 独立集群&lt;/span&gt;：这种方式利用单独的 Pulsar broker 集群来隔离终端用户，并允许用户根据场景使用不同的身份验证方法。同时，您可以获得使用共享存储层的优势，例如减少硬件占用空间以及降低相关的硬件和维护成本。&lt;/p&gt;&lt;p&gt;3.&lt;span&gt;Pulsar 单集群和 BookKeeper 单集群&lt;/span&gt;：这是比较传统的方法，主要利用 Pulsar 内置多租户特性。&lt;/p&gt;&lt;p&gt;在本博客中，我们将通过示例展示如何实现单一、共享 BookKeeper 的方法。我们将按照以下步骤部署共享一个 BookKeeper 集群的两个 Pulsar 集群：&lt;/p&gt;&lt;p&gt;1.部署共享一个 BookKeeper 集群的两个 Pulsar 集群&lt;/p&gt;&lt;p&gt;2.验证 Pulsar 集群之间的数据隔离&lt;/p&gt;&lt;p&gt;3.bookie 扩缩容&lt;/p&gt;&lt;h1&gt;设置共享 BookKeeper 集群&lt;/h1&gt;&lt;p&gt;首先，我们在 8 核 CPU 、16GB 内存的计算机上设置共享 BookKeeper 集群。图 1 和图 2 展示了 BookKeeper 集群。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;所有元数据服务（ZooKeeper 服务）都是单节点。我们不会在本博客中详细讨论这些。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;409&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.70703125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4ibRRsibIGr0Z0KyiaAaSxnX1hMQFpv28mFKS6nG9Kg35lrLcnOP1qOAtTvqCo7UPyVpibkwNSibCVS0V4LF3jAAz6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 1：每个集群都有自己的 brokers 和本地元数据存储，并共享 BookKeeper 和配置存储（ Configuration Store）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;406&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.703125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4ibRRsibIGr0Z0KyiaAaSxnX1hMQFpv28mFlIcr5iczjSViaLl1bZC1yqM3QlrgGJ6ZkrmwOWkFIMzPjXVhGI9ll9Xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 2：在共享的 BookKeeper 集群中，每个集群都有自己的 bookie 关联组。这些 bookie 组确保每个集群各自的数据彼此隔离。&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;部署集群&lt;/h1&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. &lt;span&gt;下载&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt;最新的 Pulsar 二进制包。博文&lt;span&gt;发布时&lt;/span&gt;使用的包是 2.8.1 （目前最新版为 2.10.0）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2. 解压二进制压缩包。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;tar -zxvf apache-pulsar-2.8.1-bin.tar.gz&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;3. 准备以下集群目录，按照下表中的说明更改每个目录的配置。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;将当前目录用作 PULSAR_HOME 并创建以下目录拓扑。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cp -r apache-pulsar-2.8.1 configuration-store2&lt;br/&gt;mkdir -p bk-cluster&lt;br/&gt;cp -r apache-pulsar-2.8.1 bk-cluster/bk1&lt;br/&gt;cp -r apache-pulsar-2.8.1 bk-cluster/bk2&lt;br/&gt;cp -r apache-pulsar-2.8.1 bk-cluster/bk3&lt;br/&gt;cp -r apache-pulsar-2.8.1 bk-cluster/bk4&lt;br/&gt;mkdir -p cluster1&lt;br/&gt;cp -r apache-pulsar-2.8.1 cluster1/zk1&lt;br/&gt;cp -r apache-pulsar-2.8.1 cluster1/broker1&lt;br/&gt;mkdir -p cluster2&lt;br/&gt;cp -r apache-pulsar-2.8.1 cluster2/zk1&lt;br/&gt;cp -r apache-pulsar-2.8.1 cluster2/broker1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;目录的拓扑结构概述如下。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• PULSAR_HOME&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• configuration-store&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• bk-cluster&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;     • bk1&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;     • bk2&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;     • bk3&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;     • bk4&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;     • bk5&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• cluster1&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;     • zk1&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;     • broker1&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• cluster2&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;• &lt;/span&gt;&lt;span&gt;zk1&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;组件&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;更改配置&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;configuration-store&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;clientPort=2181&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;admin.serverPort=9991&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;bk-cluster/bk1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;bookiePort=3181&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;allowLoopback=true&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;zkServers=localhost:2181&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;httpServerPort=8011&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;bk-cluster/bk2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;bookiePort=3182&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;allowLoopback=true&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;zkServers=localhost:2181&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;httpServerPort=8012&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;bk-cluster/bk3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;bookiePort=3183&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;allowLoopback=true&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;zkServers=localhost:2181&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;httpServerPort=8013&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;bk-cluster/bk4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;bookiePort=3184&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;allowLoopback=true&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;zkServers=localhost:2181&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;httpServerPort=8014&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;bk-cluster/bk5&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;bookiePort=3185&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;allowLoopback=true&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;zkServers=localhost:2181&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;httpServerPort=8015&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;cluster1/zk1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;clientPort=2182&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;admin.serverPort=9992&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;cluster1/broker1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;zookeeperServers=localhost:2182&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;configurationStoreServers=localhost:2181&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;brokerServicePort=6650&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;webServicePort=8080&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;bookkeeperMetadataServiceUri=zk://localhost:2181/ledgers&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;managedLedgerMaxEntriesPerLedger=100&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;managedLedgerMinLedgerRolloverTimeMinutes=0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;cluster2/zk1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;clientPort=2183&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;admin.serverPort=9993&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;cluster2/broker1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;zookeeperServers=localhost:2183&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;configurationStoreServers=localhost:2181&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;brokerServicePort=6651 webServicePort=8081 bookkeeperMetadataServiceUri=zk://localhost:2181/ledgers managedLedgerMaxEntriesPerLedger=100 managedLedgerMinLedgerRolloverTimeMinutes=0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;/ul&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;4. 启动并初始化配置存储和元数据存储。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/configuration-store/bin/pulsar-daemon start configuration-store&lt;br/&gt;$PULSAR_HOME/cluster1/zk1/bin/pulsar-daemon start zookeeper&lt;br/&gt;$PULSAR_HOME/cluster2/zk1/bin/pulsar-daemon start zookeeper&lt;br/&gt;&lt;br/&gt;$PULSAR_HOME/configuration-store/bin/pulsar initialize-cluster-metadata \&lt;br/&gt;--cluster cluster1 \&lt;br/&gt;--zookeeper localhost:2182 \&lt;br/&gt;--configuration-store localhost:2181 \&lt;br/&gt;--web-service-url http://localhost:8080/ \&lt;br/&gt;--broker-service-url pulsar://localhost:6650/&lt;br/&gt;&lt;br/&gt;./configuration-store/bin/pulsar initialize-cluster-metadata \&lt;br/&gt;--cluster cluster2 \&lt;br/&gt;--zookeeper localhost:2183 \&lt;br/&gt;--configuration-store localhost:2181 \&lt;br/&gt;--web-service-url http://localhost:8081/ \&lt;br/&gt;--broker-service-url pulsar://localhost:6651/&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;5. 初始化 BookKeeper 元数据并启动 bookie 集群。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/bk-cluster/bk1/bin/bookkeeper shell metaformat&lt;br/&gt;&lt;br/&gt;$PULSAR_HOME/bk-cluster/bk1/bin/pulsar-daemon start bookie&lt;br/&gt;$PULSAR_HOME/bk-cluster/bk2/bin/pulsar-daemon start bookie&lt;br/&gt;$PULSAR_HOME/bk-cluster/bk3/bin/pulsar-daemon start bookie&lt;br/&gt;$PULSAR_HOME/bk-cluster/bk4/bin/pulsar-daemon start bookie&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;6. 在 cluster1 和 cluster2 中启动 broker。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-daemon start broker&lt;br/&gt;$PULSAR_HOME/cluster2/broker1/bin/pulsar-daemon start broker&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;7. 检查 brokers。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 brokers list cluster1&lt;br/&gt;&quot;localhost:8080&quot;&lt;br/&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8081 brokers list cluster2&lt;br/&gt;&quot;localhost:8081&quot;&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;8. 检查 cluster1 和 cluster2 的 bookie 列表。如下所示，它们共享 bookie 集群。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 bookies list-bookies&lt;br/&gt;{&lt;br/&gt;  &quot;bookies&quot; : [ {&lt;br/&gt;    &quot;bookieId&quot; : &quot;127.0.0.1:3181&quot;&lt;br/&gt;  }, {&lt;br/&gt;    &quot;bookieId&quot; : &quot;127.0.0.1:3182&quot;&lt;br/&gt;  }, {&lt;br/&gt;    &quot;bookieId&quot; : &quot;127.0.0.1:3183&quot;&lt;br/&gt;  }, {&lt;br/&gt;    &quot;bookieId&quot; : &quot;127.0.0.1:3184&quot;&lt;br/&gt;  } ]&lt;br/&gt;}&lt;br/&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8081 bookies list-bookies&lt;br/&gt;{&lt;br/&gt;  &quot;bookies&quot; : [ {&lt;br/&gt;    &quot;bookieId&quot; : &quot;127.0.0.1:3181&quot;&lt;br/&gt;  }, {&lt;br/&gt;    &quot;bookieId&quot; : &quot;127.0.0.1:3182&quot;&lt;br/&gt;  }, {&lt;br/&gt;    &quot;bookieId&quot; : &quot;127.0.0.1:3183&quot;&lt;br/&gt;  }, {&lt;br/&gt;    &quot;bookieId&quot; : &quot;127.0.0.1:3184&quot;&lt;br/&gt;  } ]&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Bookie 机架配置（Rack Placement）&lt;/h1&gt;&lt;p&gt;为了归档资源隔离，我们需要将 4 个 bookie 节点拆分为 2 个资源组。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 为 cluster1 设置 bookie rack。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 bookies set-bookie-rack \&lt;br/&gt;--bookie 127.0.0.1:3181 \&lt;br/&gt;--hostname 127.0.0.1:3181 \&lt;br/&gt;--group group-bookie1 \&lt;br/&gt;--rack rack1&lt;br/&gt;&lt;br/&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 bookies set-bookie-rack \&lt;br/&gt;--bookie 127.0.0.1:3182 \&lt;br/&gt;--hostname 127.0.0.1:3182 \&lt;br/&gt;--group group-bookie1 \&lt;br/&gt;--rack rack1&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 bookies set-bookie-rack \&lt;br/&gt;--bookie 127.0.0.1:3183 \&lt;br/&gt;--hostname 127.0.0.1:3183 \&lt;br/&gt;--group group-bookie2 \&lt;br/&gt;--rack rack2&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 bookies set-bookie-rack \&lt;br/&gt;--bookie 127.0.0.1:3184 \&lt;br/&gt;--hostname 127.0.0.1:3184 \&lt;br/&gt;--group group-bookie2 \&lt;br/&gt;--rack rack2&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;2. 检查 cluster1 的 bookie rack placement。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 bookies racks-placement&lt;br/&gt;&quot;group-bookie1    {127.0.0.1:3181=BookieInfoImpl(rack=rack1, hostname=127.0.0.1:3181), 127.0.0.1:3182=BookieInfoImpl(rack=rack1, hostname=127.0.0.1:3182)}&quot;&lt;br/&gt;&quot;group-bookie2    {127.0.0.1:3183=BookieInfoImpl(rack=rack2, hostname=127.0.0.1:3183), 127.0.0.1:3184=BookieInfoImpl(rack=rack2, hostname=127.0.0.1:3184)}&quot;&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;3. 为 cluster2 设置 bookie rack。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8081 bookies set-bookie-rack \&lt;br/&gt;--bookie 127.0.0.1:3181 \&lt;br/&gt;--hostname 127.0.0.1:3181 \&lt;br/&gt;--group group-bookie1 \&lt;br/&gt;--rack rack1&lt;br/&gt;&lt;br/&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8081 bookies set-bookie-rack \&lt;br/&gt;--bookie 127.0.0.1:3182 \&lt;br/&gt;--hostname 127.0.0.1:3182 \&lt;br/&gt;--group group-bookie1 \&lt;br/&gt;--rack rack1&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8081 bookies set-bookie-rack \&lt;br/&gt;--bookie 127.0.0.1:3183 \&lt;br/&gt;--hostname 127.0.0.1:3183 \&lt;br/&gt;--group group-bookie2 \&lt;br/&gt;--rack rack2&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8081 bookies set-bookie-rack \&lt;br/&gt;--bookie 127.0.0.1:3184 \&lt;br/&gt;--hostname 127.0.0.1:3184 \&lt;br/&gt;--group group-bookie2 \&lt;br/&gt;--rack rack2&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;4. 检查 cluster2 的 bookie rack placement。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8081 bookies racks-placement&lt;br/&gt;&quot;group-bookie1    {127.0.0.1:3181=BookieInfoImpl(rack=rack1, hostname=127.0.0.1:3181), 127.0.0.1:3182=BookieInfoImpl(rack=rack1, hostname=127.0.0.1:3182)}&quot;&lt;br/&gt;&quot;group-bookie2    {127.0.0.1:3183=BookieInfoImpl(rack=rack2, hostname=127.0.0.1:3183), 127.0.0.1:3184=BookieInfoImpl(rack=rack2, hostname=127.0.0.1:3184)}&quot;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;通过 Bookie 关联组验证命名空间隔离&lt;/h1&gt;&lt;p&gt;现在我们已经配置好了所有东西，让我们通过设置 bookie 关联组来验证命名空间隔离。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 在 cluster1 中创建命名空间。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 namespaces create -b 30 -c cluster1 public/c1-ns1&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;2. 为命名空间设置一个 bookie 关联组。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 namespaces set-bookie-affinity-group public/c1-ns1 \&lt;br/&gt;--primary-group group-bookie1&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;3. 检查命名空间的 bookie 关联组。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 namespaces get-bookie-affinity-group public/c1-ns1&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;4. 向命名空间 public/c1-ns1 的主题生产一些消息。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;# set retention for namespace `public/c1-ns1` to avoid messages were deleted automatically&lt;br/&gt;cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 namespaces set-retention -s 1g -t 3d public/c1-ns1&lt;br/&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-client --url pulsar://localhost:6650 produce -m &#x27;hello&#x27; -n 300 public/c1-ns1/t1&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;5. 检查主题内部的统计信息。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 topics stats-internal public/c1-ns1/t1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们应该得到主题中的一个 ledger 列表。在本例中，它是 ledgers 0、2 和 3。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  &quot;ledgers&quot; : [ {&lt;br/&gt;    &quot;ledgerId&quot; : 0,&lt;br/&gt;    &quot;entries&quot; : 100,&lt;br/&gt;    &quot;size&quot; : 5400,&lt;br/&gt;    &quot;offloaded&quot; : false,&lt;br/&gt;    &quot;underReplicated&quot; : false&lt;br/&gt;  }, {&lt;br/&gt;    &quot;ledgerId&quot; : 2,&lt;br/&gt;    &quot;entries&quot; : 100,&lt;br/&gt;    &quot;size&quot; : 5616,&lt;br/&gt;    &quot;offloaded&quot; : false,&lt;br/&gt;    &quot;underReplicated&quot; : false&lt;br/&gt;  }, {&lt;br/&gt;    &quot;ledgerId&quot; : 3,&lt;br/&gt;    &quot;entries&quot; : 100,&lt;br/&gt;    &quot;size&quot; : 5700,&lt;br/&gt;    &quot;offloaded&quot; : false,&lt;br/&gt;    &quot;underReplicated&quot; : false&lt;br/&gt;  } ]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;检查每个 ledger 集合，以确认 ledger 已写入属于 group-bookie1 的 bookie。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/bk-cluster/bk1/bin/bookkeeper shell ledgermetadata -ledgerid 0&lt;br/&gt;# check ensembles&lt;br/&gt;ensembles={0=[127.0.0.1:3181, 127.0.0.1:3182]}&lt;br/&gt;&lt;br/&gt;$PULSAR_HOME/bk-cluster/bk1/bin/bookkeeper shell ledgermetadata -ledgerid 2&lt;br/&gt;# check ensembles&lt;br/&gt;ensembles={0=[127.0.0.1:3182, 127.0.0.1:3181]}&lt;br/&gt;&lt;br/&gt;$PULSAR_HOME/bk-cluster/bk1/bin/bookkeeper shell ledgermetadata -ledgerid 3&lt;br/&gt;# check ensembles&lt;br/&gt;ensembles={0=[127.0.0.1:3182, 127.0.0.1:3181]}&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;6. 在 cluster2 中重复这些步骤，以便我们可以将 cluster1 的命名空间与 cluster2 的命名空间隔离开来。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;迁移命名空间&lt;/h1&gt;&lt;h2&gt;迁移 Bookie 关联组&lt;/h2&gt;&lt;p&gt;现在我们已经验证了命名空间隔离，如果 bookie 组没有足够的空间，我们可以将 bookie 关联组迁移到命名空间。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 修改命名空间的 bookie 关联组。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 namespaces set-bookie-affinity-group public/c1-ns1 --primary-group group-bookie2&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;2. 卸载命名空间，使 bookie 关联组更改生效。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 namespaces unload public/c1-ns1&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;3. 再次向主题 public/c1-ns1/t1 生产消息。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-client --url pulsar://localhost:6650  produce -m &#x27;hello&#x27; -n 300 public/c1-ns1/t1&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;4. 检查集合是否有新添加的 ledger。我们可以看到 group-bookie2 中已经添加了一个新的 ledger。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 topics stats-internal public/c1-ns1/t1&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;  &quot;ledgers&quot; : [ {&lt;br/&gt;    &quot;ledgerId&quot; : 0,&lt;br/&gt;    &quot;entries&quot; : 100,&lt;br/&gt;    &quot;size&quot; : 5400,&lt;br/&gt;    &quot;offloaded&quot; : false,&lt;br/&gt;    &quot;underReplicated&quot; : false&lt;br/&gt;  }, {&lt;br/&gt;    &quot;ledgerId&quot; : 2,&lt;br/&gt;    &quot;entries&quot; : 100,&lt;br/&gt;    &quot;size&quot; : 5616,&lt;br/&gt;    &quot;offloaded&quot; : false,&lt;br/&gt;    &quot;underReplicated&quot; : false&lt;br/&gt;  }, {&lt;br/&gt;    &quot;ledgerId&quot; : 3,&lt;br/&gt;    &quot;entries&quot; : 100,&lt;br/&gt;    &quot;size&quot; : 5700,&lt;br/&gt;    &quot;offloaded&quot; : false,&lt;br/&gt;    &quot;underReplicated&quot; : false&lt;br/&gt;  }, {&lt;br/&gt;    &quot;ledgerId&quot; : 15,&lt;br/&gt;    &quot;entries&quot; : 100,&lt;br/&gt;    &quot;size&quot; : 5400,&lt;br/&gt;    &quot;offloaded&quot; : false,&lt;br/&gt;    &quot;underReplicated&quot; : false&lt;br/&gt;  }, {&lt;br/&gt;    &quot;ledgerId&quot; : 16,&lt;br/&gt;    &quot;entries&quot; : 100,&lt;br/&gt;    &quot;size&quot; : 5616,&lt;br/&gt;    &quot;offloaded&quot; : false,&lt;br/&gt;    &quot;underReplicated&quot; : false&lt;br/&gt;  }, {&lt;br/&gt;    &quot;ledgerId&quot; : 17,&lt;br/&gt;    &quot;entries&quot; : 100,&lt;br/&gt;    &quot;size&quot; : 5700,&lt;br/&gt;    &quot;offloaded&quot; : false,&lt;br/&gt;    &quot;underReplicated&quot; : false&lt;br/&gt;  }]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们检查新添加的 ledger（15、16、17）集合，以确认 ledger 已写入属于 group-bookie2 的 bookie。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/bk-cluster/bk1/bin/bookkeeper shell ledgermetadata -ledgerid 15&lt;br/&gt;# check ensembles&lt;br/&gt;ensembles={0=[127.0.0.1:3184, 127.0.0.1:3183]}&lt;br/&gt;&lt;br/&gt;$PULSAR_HOME/bk-cluster/bk1/bin/bookkeeper shell ledgermetadata -ledgerid 16&lt;br/&gt;# check ensembles&lt;br/&gt;ensembles={0=[127.0.0.1:3183, 127.0.0.1:3184]}&lt;br/&gt;&lt;br/&gt;$PULSAR_HOME/bk-cluster/bk1/bin/bookkeeper shell ledgermetadata -ledgerid 17&lt;br/&gt;# check ensembles&lt;br/&gt;ensembles={0=[127.0.0.1:3183, 127.0.0.1:3184]}&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Bookie 扩缩容&lt;/h1&gt;&lt;p&gt;最终，我们的数据量将超过 BookKeeper 集群的容量，我们需要扩大 bookie 的数量。在本节中，我们将向你展示如何添加新的 bookie 并将其分配给现有的 bookie 关联组。&lt;/p&gt;&lt;h2&gt;扩容&lt;/h2&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 启动一个新的 bookie 节点 bk-5。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;cp -r apache-pulsar-2.8.1 bk-cluster/bk5&lt;br/&gt;$PULSAR_HOME/bk-cluster//bk-cluster/bk5/bin/pulsar-daemon start bookie&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;2. 将新添加的 bookie 节点加到 group-bookie1。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 bookies set-bookie-rack \&lt;br/&gt;--bookie 127.0.0.1:3185 \&lt;br/&gt;--hostname 127.0.0.1:3185 \&lt;br/&gt;--group group-bookie2 \&lt;br/&gt;--rack rack2&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;3. 检查 bookie rack placement。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080  bookies racks-placement&lt;br/&gt;&quot;group-bookie1    {127.0.0.1:3181=BookieInfoImpl(rack=rack1, hostname=127.0.0.1:3181), 127.0.0.1:3182=BookieInfoImpl(rack=rack1, hostname=127.0.0.1:3182)}&quot;&lt;br/&gt;&quot;group-bookie2    {127.0.0.1:3183=BookieInfoImpl(rack=rack2, hostname=127.0.0.1:3183), 127.0.0.1:3184=BookieInfoImpl(rack=rack2, hostname=127.0.0.1:3184), 127.0.0.1:3185=BookieInfoImpl(rack=rack2, hostname=127.0.0.1:3185)}&quot;&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;4 卸载命名空间 public/c1-ns1，使 bookie 关联组更改生效。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 namespaces unload public/c1-ns1&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;5. 再次向主题 public/c1-ns1/t1 生产一些消息。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/bin/pulsar-client --url pulsar://localhost:6650 produce -m &#x27;hello&#x27; -n 300 public/c1-ns1/t1&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;6. 查看主题 public/c1-ns1/t1 新增的 ledger。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 topics stats-internal public/c1-ns1/t1&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/bk-cluster/bk1/bin/bookkeeper shell ledgermetadata -ledgerid ledgerid&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以看到新添加的 ledger 现存于新添加的 bookie 节点中。&lt;/p&gt;&lt;h2&gt;缩容&lt;/h2&gt;&lt;p&gt;在分布式系统中，单个组件发生故障的情况并不少见。在本节中，我们将模拟其中一个 bookie 的故障，并证明共享的 BookKeeper 集群能够容忍故障事件。您还可以参考 https://bookkeeper.apache.org/docs/4.14.0/admin/decomission/ 获取详细示例。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 确保关联组中有足够的 bookie。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;例如，如果 broker 的配置 &lt;code&gt;managedLedgerDefaultEnsembleSize&lt;/code&gt; 为 2，那么在我们缩容 bookie 之后，我们应该至少还有 2 个 bookie 属于关联组 。&lt;/p&gt;&lt;p&gt;我们可以检查 bookie rack placement。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 bookies racks-placement&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;2. 从关联 bookie 组中删除 bookie。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/cluster1/broker1/bin/pulsar-admin --admin-url http://localhost:8080 bookies delete-bookie-rack -b 127.0.0.1:3185&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;3. 检查是否存在未复制的 ledger，鉴于我们已经删除了一个 bookie，检查结果应该是可预料的。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/bk-cluster/bk1/bin/bookkeeper shell listunderreplicated&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;4. 停止 bookie。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/bk-cluster/bk5/bin/pulsar-daemon stop bookie&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;5. 停用 bookie。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/bk-cluster/bk1/bin/bookkeeper shell decommissionbookie -bookieid 127.0.0.1:3185&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;6. 检查已停用 bookie 中的 ledger。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/bk-cluster/bk1/bin/bookkeeper shell listledgers -bookieid 127.0.0.1:3185&lt;/code&gt;&lt;/pre&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;7. 列出 bookie。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;$PULSAR_HOME/bk-cluster/bk1/bin/bookkeeper shell listbookies -rw -h&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;系列后续&lt;/h1&gt;&lt;p&gt;我们已经展示了如何通过共享一个 BookKeeper 的两个 Puslar 集群来实现隔离。你可以按照相同的步骤部署多个 Pulsar 集群。请继续关注本系列的最后一篇博客，我们将展示如何使用单个 Pulsar 集群实现隔离！&lt;/p&gt;&lt;p&gt;同时，可查看以下 Pulsar 资源：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. &lt;span&gt;获取&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt; David Kjerrumgaard 的《Manning&#x27;s Apache Pulsar in Action》电子书。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2. 在 Slack 上&lt;span&gt;加入 Pulsar 社区&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;相关阅读&lt;/h1&gt;&lt;h4&gt;引用链接&lt;/h4&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; 下载: &lt;em&gt;https://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&amp;amp;filename=pulsar/pulsar-2.8.1/apache-pulsar-2.8.1-bin.tar.gz&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; 获取: &lt;em&gt;https://app.jingsocial.com/microFrontend/leadGeneration/jsf-leads/list/contentMarketing/25dkCJUkjtVYUue9TsmKLc/GFeMfZiTPHEW5KucED4hLD&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; 加入 Pulsar 社区: &lt;em&gt;https://apache-pulsar.herokuapp.com/&lt;/em&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span data-raw-text=&quot;▼&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24273&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;▼&quot; data-textnode-index-1652184676261=&quot;150&quot; data-index-1652184676261=&quot;6018&quot; class=&quot;character&quot;&gt;▼&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24274&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1652184676261=&quot;151&quot; data-index-1652184676261=&quot;6019&quot; class=&quot;character&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;关&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24275&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;关&quot; data-textnode-index-1652184676261=&quot;152&quot; data-index-1652184676261=&quot;6020&quot; class=&quot;character&quot;&gt;关&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24276&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index-1652184676261=&quot;153&quot; data-index-1652184676261=&quot;6021&quot; class=&quot;character&quot;&gt;注&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;「&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24277&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;「&quot; data-textnode-index-1652184676261=&quot;154&quot; data-index-1652184676261=&quot;6022&quot; class=&quot;character&quot;&gt;「&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;A&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24278&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;A&quot; data-textnode-index-1652184676261=&quot;155&quot; data-index-1652184676261=&quot;6023&quot; class=&quot;character&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;p&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24279&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;p&quot; data-textnode-index-1652184676261=&quot;156&quot; data-index-1652184676261=&quot;6024&quot; class=&quot;character&quot;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24280&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index-1652184676261=&quot;157&quot; data-index-1652184676261=&quot;6025&quot; class=&quot;character&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;c&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24281&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;c&quot; data-textnode-index-1652184676261=&quot;158&quot; data-index-1652184676261=&quot;6026&quot; class=&quot;character&quot;&gt;c&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24282&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index-1652184676261=&quot;159&quot; data-index-1652184676261=&quot;6027&quot; class=&quot;character&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24283&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index-1652184676261=&quot;160&quot; data-index-1652184676261=&quot;6028&quot; class=&quot;character&quot;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24284&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1652184676261=&quot;161&quot; data-index-1652184676261=&quot;6029&quot; class=&quot;character&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24285&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index-1652184676261=&quot;162&quot; data-index-1652184676261=&quot;6030&quot; class=&quot;character&quot;&gt;P&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;u&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24286&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;u&quot; data-textnode-index-1652184676261=&quot;163&quot; data-index-1652184676261=&quot;6031&quot; class=&quot;character&quot;&gt;u&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;l&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24287&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;l&quot; data-textnode-index-1652184676261=&quot;164&quot; data-index-1652184676261=&quot;6032&quot; class=&quot;character&quot;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;s&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24288&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;s&quot; data-textnode-index-1652184676261=&quot;165&quot; data-index-1652184676261=&quot;6033&quot; class=&quot;character&quot;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24289&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index-1652184676261=&quot;166&quot; data-index-1652184676261=&quot;6034&quot; class=&quot;character&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;r&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24290&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;r&quot; data-textnode-index-1652184676261=&quot;167&quot; data-index-1652184676261=&quot;6035&quot; class=&quot;character&quot;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;」&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24291&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;」&quot; data-textnode-index-1652184676261=&quot;168&quot; data-index-1652184676261=&quot;6036&quot; class=&quot;character&quot;&gt;」&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24292&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1652184676261=&quot;169&quot; data-index-1652184676261=&quot;6037&quot; class=&quot;character&quot;&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;获&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24293&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;获&quot; data-textnode-index-1652184676261=&quot;170&quot; data-index-1652184676261=&quot;6038&quot; class=&quot;character&quot;&gt;获&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;取&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24294&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;取&quot; data-textnode-index-1652184676261=&quot;171&quot; data-index-1652184676261=&quot;6039&quot; class=&quot;character&quot;&gt;取&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24295&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index-1652184676261=&quot;172&quot; data-index-1652184676261=&quot;6040&quot; class=&quot;character&quot;&gt;更&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24296&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index-1652184676261=&quot;173&quot; data-index-1652184676261=&quot;6041&quot; class=&quot;character&quot;&gt;多&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;技&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24297&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;技&quot; data-textnode-index-1652184676261=&quot;174&quot; data-index-1652184676261=&quot;6042&quot; class=&quot;character&quot;&gt;技&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;术&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24298&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;术&quot; data-textnode-index-1652184676261=&quot;175&quot; data-index-1652184676261=&quot;6043&quot; class=&quot;character&quot;&gt;术&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;干&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24299&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;干&quot; data-textnode-index-1652184676261=&quot;176&quot; data-index-1652184676261=&quot;6044&quot; class=&quot;character&quot;&gt;干&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;货&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24300&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;货&quot; data-textnode-index-1652184676261=&quot;177&quot; data-index-1652184676261=&quot;6045&quot; class=&quot;character&quot;&gt;货&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24301&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1652184676261=&quot;178&quot; data-index-1652184676261=&quot;6046&quot; class=&quot;character&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;▼&quot; data-textnode-index-1647519714855=&quot;1580&quot; data-index-1647519714855=&quot;24302&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;24.5&quot;&gt;&lt;span data-raw-text=&quot;▼&quot; data-textnode-index-1652184676261=&quot;179&quot; data-index-1652184676261=&quot;6047&quot; class=&quot;character&quot;&gt;▼&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUyMjkzMjA1Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/4ibRRsibIGr0Y7icPiahxgXFRw8a0xAIxOhPqYtRDr0IRNpGRl2oSfGHuvkG9VtahW9thH3btBGXJu9y2dZgb3oOuQ/0?wx_fmt=png&quot; data-nickname=&quot;ApachePulsar&quot; data-alias=&quot;ApachePulsar&quot; data-signature=&quot;Apache 软件基金会顶级项目，下一代云原生分布式消息流平台，集消息、存储、轻量化函数式计算为一体，采用计算与存储分离架构设计，支持多租户、持久化存储、多机房跨区域数据复制，具有强一致性、高吞吐、低延时及高可扩展性等流数据存储特性。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span data-raw-text=&quot;👇🏻&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6048&quot; class=&quot;character&quot;&gt;👇🏻&lt;/span&gt;&lt;span data-raw-text=&quot;加&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6049&quot; class=&quot;character&quot;&gt;加&lt;/span&gt;&lt;span data-raw-text=&quot;入&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6050&quot; class=&quot;character&quot;&gt;入&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6051&quot; class=&quot;character&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;A&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6052&quot; class=&quot;character&quot;&gt;A&lt;/span&gt;&lt;span data-raw-text=&quot;p&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6053&quot; class=&quot;character&quot;&gt;p&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6054&quot; class=&quot;character&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;c&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6055&quot; class=&quot;character&quot;&gt;c&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6056&quot; class=&quot;character&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6057&quot; class=&quot;character&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6058&quot; class=&quot;character&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6059&quot; class=&quot;character&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;u&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6060&quot; class=&quot;character&quot;&gt;u&lt;/span&gt;&lt;span data-raw-text=&quot;l&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6061&quot; class=&quot;character&quot;&gt;l&lt;/span&gt;&lt;span data-raw-text=&quot;s&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6062&quot; class=&quot;character&quot;&gt;s&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6063&quot; class=&quot;character&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;r&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6064&quot; class=&quot;character&quot;&gt;r&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6065&quot; class=&quot;character&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;中&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6066&quot; class=&quot;character&quot;&gt;中&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6067&quot; class=&quot;character&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;交&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6068&quot; class=&quot;character&quot;&gt;交&lt;/span&gt;&lt;span data-raw-text=&quot;流&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6069&quot; class=&quot;character&quot;&gt;流&lt;/span&gt;&lt;span data-raw-text=&quot;群&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6070&quot; class=&quot;character&quot;&gt;群&lt;/span&gt;&lt;span data-raw-text=&quot;👇🏻&quot; data-textnode-index-1652184676261=&quot;180&quot; data-index-1652184676261=&quot;6071&quot; class=&quot;character&quot;&gt;👇🏻&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4ibRRsibIGr0Y6ZyndT2dicWCicapT1MB10aFbQ8lHezfmXjO54Kxkpy8kS3CyrTibfNGeKjdCmhtRzc2bQ8qOEW26w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;624&quot;/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>568747ab8662afc8c2aaf51e480ae37a</guid>
<title>NAT 穿透是如何工作的：技术原理及企业级实践</title>
<link>https://toutiao.io/k/unwgfa0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;译者序&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文翻译自 2020 年的一篇英文博客：&lt;span&gt;How NAT traversal works&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设想这样一个问题：在北京和上海各有一台&lt;strong&gt;局域网的机器&lt;/strong&gt;（例如一台是家里的台式机，一 台是连接到星巴克 WiFi 的笔记本），二者都是私网 IP 地址，但可以访问公网， &lt;strong&gt;如何让这两台机器通信呢？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然二者都能访问公网，那最简单的方式当然是在公网上架设一个中继服务器：两台机器分别连接到中继服务，后者完成双向转发。这种方式显然有很大的性能开销，而 且中继服务器很容易成为瓶颈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有没有办法不用中继，让&lt;strong&gt;两台机器直接通信&lt;/strong&gt;呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有一定的网络和协议基础，就会明白这事儿是可能的。Tailscale 的这篇&lt;strong&gt;史诗级长文&lt;/strong&gt;由浅入深地展示了这种“可能”，如果完全实现本文所 介绍的技术，你将得到一个企业级的 NAT/防火墙穿透工具。此外，如作者所说，&lt;strong&gt;去中心化软件&lt;/strong&gt;领域中的许多有趣想法，简化之后其实都变成了 &lt;strong&gt;跨过公网（互联网）实现端到端直连&lt;/strong&gt; 这一问题，因此本文的意义并不仅限于 NAT 穿透本身。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下是译文。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在前一篇文章 &lt;span&gt;How Tailscale Works&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; 中， 我们已经用较长篇幅介绍了 Tailscale 是如何工作的。但其中并没有详细描述我们是 &lt;strong&gt;如何穿透 NAT 设备，从而实现终端设备直连的&lt;/strong&gt; —— 不管这些终端之间 有什么设备（防火墙、NAT 等），以及有多少设备。本文试图补足这一内容。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1 引言&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1.1 背景：IPv4 地址短缺，引入 NAT&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;全球 IPv4 地址早已不够用，因此人们发明了 NAT（网络地址转换）来缓解这个问题。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单来说，大部分机器都使用&lt;strong&gt;私有 IP 地址&lt;/strong&gt;，如果它们需要访问公网服务，那么，&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;出向流量：需要经过一台 NAT 设备，它会对流量进行 SNAT，将私有 srcIP+Port 转 换成 NAT 设备的公网 IP+Port（这样应答包才能回来），然后再将包发出去；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;应答流量（入向）：到达 NAT 设备后进行相反的转换，然后再转发给客户端。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个过程对双方透明。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;更多关于 NAT 的内容，可参考 &lt;span&gt;(译) NAT - 网络地址转换（2016）&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;。译注。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上是本文所讨论问题的&lt;strong&gt;基本背景&lt;/strong&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1.2 需求：两台经过 NAT 的机器建立点对点连接&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在以上所描述的 NAT 背景下，我们从最简单的问题开始：如何在两台经过 NAT 的机器之间建立 &lt;strong&gt;点对点连接&lt;/strong&gt;（直连）。如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017826&quot; data-ratio=&quot;0.43525641025641026&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xpxII8IN4QyiabrzoVHohjXS1C7LRBtm6jRcAP0zVh4b4feeJnKibFlmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1560&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接用机器的 IP 互连显然是不行的，因为它们都是私有 IP（例如 &lt;code&gt;192.168.1.x&lt;/code&gt;）。在 Tailscale 中，我们会建立一个 &lt;strong&gt;WireGuard® 隧道&lt;/strong&gt; 来解决这个问题 —— 但这并不是太重要，因为我们将&lt;strong&gt;过去几代人努力&lt;/strong&gt;都整合到了一个工具集， &lt;strong&gt;这些技术广泛适用于各种场景&lt;/strong&gt;。例如，&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;WebRTC&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt; 使用这些技术在浏览器之间完成 peer-to-peer 语音、视频和数据传输，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;VoIP 电话和一些视频游戏&lt;/strong&gt;也使用类似机制，虽然不是所有情况下都很成功。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，本文将&lt;strong&gt;在一般意义上讨论这些技术&lt;/strong&gt;，并在合适的地方拿 Tailscale 和其他一些东西作为例子。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1.3 方案：NAT 穿透&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1.3.1 两个必备前提：UDP + 能直接控制 socket&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想&lt;strong&gt;设计自己的协议来实现 NAT 穿透&lt;/strong&gt;，那必须满足以下两个条件：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;协议应该基于 UDP&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;理论上用 TCP 也能实现，但它会给本已相当复杂的问题再增加一层复杂性， 甚至还需要定制化内核 —— 取决于你想实现到什么程度。本文接下来都将关注在 UDP 上。&lt;/p&gt;&lt;p&gt;如果考虑 TCP 是想在 NAT 穿透时获得&lt;strong&gt;面向流的连接&lt;/strong&gt;（ stream-oriented connection），可以考虑用 &lt;strong&gt;QUIC&lt;/strong&gt; 来替代，它构 建在 UDP 之上，因此我们能将关注点放在 UDP NAT 穿透，而仍然能获得一个 很好的流协议（stream protocol）。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;对收发包的 &lt;strong&gt;socket 有直接控制权&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;例如，从经验上来说，无法基于某个现有的网络库实现 NAT 穿透，因为我们 &lt;strong&gt;必须在使用的“主要”协议之外，发送和接收额外的数据包&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;某些协议（例如  WebRTC）将 NAT 穿透与其他部分紧密集成。但如果你在构建自己的协议， &lt;strong&gt;建议将 NAT 穿透作为一个独立实体，与主协议并行运行&lt;/strong&gt;，二者仅 仅是共享 socket 的关系，如下图所示，这将带来很大帮助：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017823&quot; data-ratio=&quot;0.475&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xYaZodMedGIlGvXMAMKjx8bsW9icsTpG2TKlF3YjtiaWNWXOnQXlbazqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1.3.2 保底方式：中继&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在某些场景中，直接访问 socket 这一条件可能很难满足。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;退而求其次的一个方式是设置一个 local proxy（本地代理），主协议与这个 proxy 通信 ，后者来完成 NAT 穿透，将包中继（relay）给对端。这种方式增加了一个额外的间接层 ，但好处是：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;仍然能获得 NAT 穿透，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;不需要对已有的应用程序做任何改动&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1.4 挑战：有状态防火墙和 NAT 设备&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了以上铺垫，下面就从最基本的原则开始，一步步看如何实现一个企业级的 NAT 穿透方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的&lt;strong&gt;目标&lt;/strong&gt;是：&lt;strong&gt;在两个设备之间通过 UDP 实现双向通信&lt;/strong&gt;， 有了这个基础，上层的其他协议（WireGuard, QUIC, WebRTC 等）就能做一些更酷的事情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但即便这个看似最基本的功能，在实现上也要解决&lt;strong&gt;两个障碍&lt;/strong&gt;：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;有状态防火墙&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;NAT 设备&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2 穿透防火墙&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有状态防火墙是以上两个问题中相对比较容易解决的。实际上，&lt;strong&gt;大部分 NAT 设备都自带了一个有状态防火墙&lt;/strong&gt;， 因此要解决第二个问题，必须先解决有第一个问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有状态防火墙具体有很多种类型，有些你可能见过：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Windows Defender firewall&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Ubuntu’s ufw (using iptables/nftables)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;BSD/macOS &lt;code&gt;pf&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;AWS Security Groups（&lt;strong&gt;安全组&lt;/strong&gt;）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.1 有状态防火墙&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.1.1 默认行为（策略）&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上防火墙的配置都是很灵活的，但大部分配置默认都是如下行为：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;允许所有出向连接&lt;/strong&gt;（allows all “outbound” connections）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;禁止所有入向连接&lt;/strong&gt;（blocks all “inbound” connections）&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能有少量例外规则，例如 allowing inbound SSH。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.1.2 如何区分入向和出向包&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;连接（connection）和方向（direction）都是协议设计者头脑中的概念，到了 &lt;strong&gt;物理传输层，每个连接都是双向的&lt;/strong&gt;；允许所有的包双向传输。那&lt;strong&gt;防火墙是如何区分哪些是入向包、哪些是出向包的呢&lt;/strong&gt;？这就要回到**“有状态”（stateful）**这三个字了：有状态防火墙会记录它 看到的每个包，当收到下一个包时，会利用这些信息（状态）来判断应该做什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对 UDP 来说，规则很简单：如果防火墙之前看到过一个出向包（outbound），就会允许 相应的入向包（inbound）通过，以下图为例：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017822&quot; data-ratio=&quot;0.4483695652173913&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xz4OrqmO2UicSl8ibvUoBpVA4x6KKRq1x7lIPmUnRmqGSh5EH77V5ftHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1472&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;笔记本电脑中自带了一个防火墙，当该防火墙看到从这台机器出去的 &lt;code&gt;2.2.2.2:1234 -&amp;gt; 5.5.5.5:5678&lt;/code&gt; 包时，就会记录一下：&lt;code&gt;5.5.5.5:5678 -&amp;gt; 2.2.2.2:1234&lt;/code&gt; 入向包应该放行。&lt;strong&gt;这里的逻辑&lt;/strong&gt;是：我们信任的世界（即笔记本）想主动与 &lt;code&gt;5.5.5.5:5678&lt;/code&gt; 通信，因此应该放行（allow）其回包路径。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;某些&lt;strong&gt;非常&lt;/strong&gt;宽松的防火墙只要看到有从 &lt;code&gt;2.2.2.2:1234&lt;/code&gt; 出去的包，就 会允许所有从外部进入 &lt;code&gt;2.2.2.2:1234&lt;/code&gt; 的流量。这种防火墙对我们的 NAT 穿透来说非 常友好，但已经越来越少见了。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.2 防火墙朝向（face-off）与穿透方案&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.2.1 防火墙朝向相同&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;场景特点：服务端 IP 可直接访问&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 NAT 穿透场景中，以上默认规则对 UDP 流量的影响不大 —— 只要&lt;strong&gt;路径上所有防火墙的“朝向”是一样的&lt;/strong&gt;。一般来说，从内网访问公网上的某个服务器都属于这种情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们唯一的要求是：&lt;strong&gt;连接必须是由防火墙后面的机器发起的&lt;/strong&gt;。这是因为 在它主动和别人通信之前，没人能主动和它通信，如下图所示：&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;穿透方案：客户端直连服务端，或 hub-and-spoke 拓扑&lt;/h5&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017824&quot; data-ratio=&quot;0.3318112633181126&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5x207q4wWugCI1zdyYhFHPCicxCwkZzXUIbfYYRGZRbwo34WcRws4KCPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1971&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但上图是&lt;strong&gt;假设了&lt;/strong&gt;通信双方中，其中一端**（服务端）是能直接访问到的**。在 VPN 场景中，这就形成了所谓的 &lt;strong&gt;hub-and-spoke 拓扑&lt;/strong&gt;：中心的 hub 没有任何防火墙策略，谁都能访问到；防火墙后面的 spokes 连接到 hub。如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017825&quot; data-ratio=&quot;0.4656745079212674&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xxZwnrnDgxz3PIwvOjBQKg2OwcASyc6bb3UyEhq3LiboDDyvYbWGibuHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2083&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.2.2 防火墙朝向不同&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;场景特点：服务端 IP 不可直接访问&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果两个“客户端”想直连，以上方式就不行了，此时两边的防火墙相向而立，如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017828&quot; data-ratio=&quot;0.28126944617299315&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xlaWKlcnia9fibUNmbXIcyCJeMwvmjN7qmqe76DFnJNnGNafPgyp7WdnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1607&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据前面的讨论，这种情况意味着：&lt;strong&gt;两边要同时发起连接请求&lt;/strong&gt;，但也意味着 两边都无法发起有效请求，因为对方先发起请求才能在它的防火墙上打开一条缝让我们进去！如何破解这个问题呢？一种方式是&lt;strong&gt;让用户重新配置一边或两边的防火墙，打开一个端口&lt;/strong&gt;， 允许对方的流量进来。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;这显然对用户不友好，在像 Tailscale 这样的 mesh 网络中的扩展性也不好，在 mesh 网络中，我们假设对端会以一定的粒度在公网上移动。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;此外，在很多情况下用户也没有防火墙的控制权限：例如在咖啡馆或机场中，连接的路 由器是不受你控制的（否则你可能就有麻烦了）。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，我们需要寻找一种不用重新配置防火墙的方式。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;穿透方案：两边同时主动建连，在本地防火墙为对方打开一个洞&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决的思路还是先重新审视前面提到的有状态防火墙规则：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;对于 UDP，其规则（逻辑）是：&lt;strong&gt;包必须先出去才能进来&lt;/strong&gt;（packets must flow out before packets can flow back in）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;注意，这里除了要满足包的 IP 和端口要匹配这一条件之外，&lt;strong&gt;并没有要求包必须是相关的&lt;/strong&gt;（related）。换句话说，只要某些包带着正确的源和目的地址出去了，&lt;strong&gt;任何看起来像是响应的包都会被防火墙放进来&lt;/strong&gt; —— 即使对端根本没收到你发出去的包。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，要穿透这些有状态防火墙，我们只需要&lt;strong&gt;共享一些信息：让两端提前知道对方使用的 ip:port&lt;/strong&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;手动静态配置是一种方式，但显然扩展性不好；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我们开发了一个 &lt;span&gt;coordination server&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;， 以灵活、安全的方式来同步 &lt;code&gt;ip:port&lt;/code&gt; 信息。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了对方的 &lt;code&gt;ip:port&lt;/code&gt; 信息之后，两端开始给对方发送 UDP 包。在这个过程中，我们预 料到某些包将会被丢弃。因此，双方&lt;strong&gt;必须要接受某些包会丢失的事实&lt;/strong&gt;， 因此如果是重要信息，你必须自己准备好重传。对 UDP 来说丢包是可接受的，但这里尤其需要接受。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来看一下具体建连（穿透）过程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如图所示，笔记本出去的第一包，&lt;code&gt;2.2.2.2:1234 -&amp;gt; 7.7.7.7:5678&lt;/code&gt;，穿过 Windows Defender 防火墙进入到公网。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017827&quot; data-ratio=&quot;0.34239802224969096&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xIXpQQbHFaGwkQ8C7CicrG0PxueztafoqgGSrJj4S2dnpc9vN1J5djEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1618&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;对方的防火墙会将这个包拦截掉，因为它没有 &lt;code&gt;7.7.7.7:5678 -&amp;gt; 2.2.2.2:1234&lt;/code&gt; 的流量记录。但另一方面，Windows Defender 此时已经记录了出向连接，因此会允许 &lt;code&gt;7.7.7.7:5678 -&amp;gt; 2.2.2.2:1234&lt;/code&gt; 的应答包进来。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;接着，第一个 &lt;code&gt;7.7.7.7:5678 -&amp;gt; 2.2.2.2:1234&lt;/code&gt; 穿过它自己的防火墙到达公网。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017829&quot; data-ratio=&quot;0.34833538840937117&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xmJAXt4n8kw4dYkLl5c05TefESGWkIgZXVctm31w4YK20sE7Okg0SXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1622&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;到达客户端侧时，Windows Defender &lt;strong&gt;认为这是刚才出向包的应答包，因此就放行它进入了！&lt;/strong&gt; 此外，右侧的防火墙此时也记录了：&lt;code&gt;2.2.2.2:1234 -&amp;gt; 7.7.7.7:5678&lt;/code&gt; 的包应该放行。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;笔记本收到服务器发来的包之后，发送一个包作为应答。这个包穿过 Windows Defender 防火墙  和服务端防火墙（因为这是对服务端发送的包的应答包），达到服务端。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017830&quot; data-ratio=&quot;0.3492852703542573&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5x1T1mccIDySKPe4FfqZYYFqYugkYrYibqgIxL8sJghFJDEnb2AhkOvHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1609&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;成功！这样我们就建立了一个&lt;strong&gt;穿透两个相向防火墙&lt;/strong&gt;的双向通信连接。而初看之下，这项任务似乎是不可能完成的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.3 关于穿透防火墙的一些思考&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;穿透防火墙并非永远这么轻松，有时会受一些第三方系统的间接影响，需要仔细处理。那穿透防火墙需要注意什么呢？重要的一点是：&lt;strong&gt;通信双方必须几乎同时发起通信&lt;/strong&gt;， 这样才能在路径上的防火墙打开一条缝，而且两端还都是活着的。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.3.1 双向主动建连：旁路信道&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何实现“同时”呢？一种方式是两端不断重试，但显然这种方式很浪费资源。假如双方都 知道何时开始建连就好了。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;这听上去是&lt;strong&gt;鸡生蛋蛋生鸡的问题&lt;/strong&gt;了：&lt;strong&gt;双方想要通信，必须先提前通个信&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;但实际上，我们可以通过&lt;strong&gt;旁路信道&lt;/strong&gt;（side channel）来达到这个目的 ，并且这个旁路信道并不需要很 fancy：它可以有几秒钟的延迟、只需要传送几 KB 的 信息，因此即使是一个配置非常低的虚拟机，也能为几千台机器提供这样的旁路通信服务。&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在遥远的过去，我曾用  XMPP 聊天消息作为旁路，效果非常不错。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;另一个例子是 WebRTC，它需要你提供一个自己的“信令信道”（signalling channel， 这个词也暗示了 WebRTC 的 IP telephony ancestry），并将其配置到 WebRTC API。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在 Tailscale，我们的协调服务器（coordination server）和 DERP (Detour Encrypted Routing Protocol) 服务器集群是我们的旁路信道。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.3.2 非活跃连接被防火墙清理&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有状态防火墙内存通常比较有限，因此会定期清理不活跃的连接（UDP 常见的是 30s）， 因此要保持连接 alive 的话需要定期通信，否则就会被防火墙关闭，为避免这个问题， 我们，&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;要么定期向对方发包来 keepalive，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要么有某种带外方式来按需重建连接。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.3.3 问题都解决了？不，挑战刚刚开始&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于防火墙穿透来说， 我们&lt;strong&gt;并不需要关心路径上有几堵墙&lt;/strong&gt; —— 只要它们是有状态防火墙且允许出 向连接，这种同时发包（simultaneous transmission）机制就能穿透任意多层防火墙。这一点对我们来说非常友好，因为只需要实现一个逻辑，然后能适用于任何地方了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;…对吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，&lt;strong&gt;不完全对&lt;/strong&gt;。这个机制有效的前提是：我们能&lt;strong&gt;提前知道对方的 ip:port&lt;/strong&gt;。而这就涉及到了我们今天的主题：NAT，它会使前面我们刚获得的一点满足感顿时消失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面，&lt;strong&gt;进入本文正题&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3 NAT 的本质&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3.1 NAT 设备与有状态防火墙&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以认为 NAT 设备是一个&lt;strong&gt;增强版的有状态防火墙&lt;/strong&gt;，虽然它的增强功能 对于本文场景来说并不受欢迎：除了前面提到的有状态拦截/放行功能之外，它们还会在数据包经过时修改这些包。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3.2 NAT 穿透与 SNAT/DNAT&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体来说，NAT 设备能完成某种类型的网络地址转换，例如，替换源或目的 IP 地址或端口。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;讨论连接问题和 NAT 穿透问题时&lt;/strong&gt;，我们&lt;strong&gt;只会受 source NAT —— SNAT 的影响&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;DNAT 不会影响 NAT 穿透。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3.3 SNAT 的意义：解决 IPv4 地址短缺问题&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SNAT 最常见的使用场景是&lt;strong&gt;将很多设备连接到公网，而只使用少数几个公网 IP&lt;/strong&gt;。例如对于消费级路由器，会将所有设备的（私有） IP 地址映射为&lt;strong&gt;单个&lt;/strong&gt;连接到公网的 IP 地址。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式存在的意义是：我们有远多于可用公网 IP 数量的设备需要连接到公网，（至少 对 IPv4 来说如此，IPv6 的情况后面会讨论）。NAT 使多个设备能共享同一 IP 地址，因 此即使面临 IPv4 地址短缺的问题，我们仍然能不断扩张互联网的规模。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3.4 SNAT 过程：以家用路由器为例&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设你的笔记本连接到家里的 WiFi，下面看一下它连接到公网某个服务器时的情形：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;笔记本发送 UDP packet &lt;code&gt;192.168.0.20:1234 -&amp;gt; 7.7.7.7:5678&lt;/code&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017831&quot; data-ratio=&quot;0.35005336179295626&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xpWLRXiaP07pAKTI1gKK6U2XOytiarGpdZhALqCADjUia4xuzWwBcztibQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1874&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这一步就好像笔记本有一个公网 IP 一样，但源地址 &lt;code&gt;192.168.0.20&lt;/code&gt; 是私有地址， 只能出现在私有网络，公网不认，收到这样的包时它不知道如何应答。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;家用路由器出场，执行 SNAT。&lt;/p&gt;&lt;p&gt;包经过路由器时，路由器发现这是一个它没有见过的新会话（session）。它知道 &lt;code&gt;192.168.0.20&lt;/code&gt; 是私有 IP，公网无法给这样的地址回包，但它有办法解决：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017832&quot; data-ratio=&quot;0.27333677153171737&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5x5YUeRK1IHj6ZqoKu1jV4yWriapFwRoicMmT7ogjAskQiascuwGGVGZ9EA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1939&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在它&lt;strong&gt;自己的公网 IP 上挑一个可用的 UDP 端口&lt;/strong&gt;，例如 &lt;code&gt;2.2.2.2:4242&lt;/code&gt;，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后创建一个 &lt;em&gt;NAT mapping&lt;/em&gt;：&lt;code&gt;192.168.0.20:1234&lt;/code&gt; &lt;code&gt;&amp;lt;--&amp;gt;&lt;/code&gt; &lt;code&gt;2.2.2.2:4242&lt;/code&gt;，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后将包发到公网，此时源地址变成了 &lt;code&gt;2.2.2.2:4242&lt;/code&gt; 而不是原来的 &lt;code&gt;192.168.0.20:1234&lt;/code&gt;。因此服务端看到的是转换之后地址，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;接下来，每个能匹配到这条映射规则的包，都会被路由器改写 IP 和 端口。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;反向路径是类似的，路由器会执行相反的地址转换，将 &lt;code&gt;2.2.2.2:4242&lt;/code&gt; 变回  &lt;code&gt;192.168.0.20:1234&lt;/code&gt;。对于笔记本来说，它根本感知不知道这正反两次变换过程。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里是拿家用路由器作为例子，但&lt;strong&gt;办公网的原理是一样的&lt;/strong&gt;。不同之处在 于，办公网的 NAT 可能有多台设备组成（高可用、容量等目的），而且它们有不止一个公 网 IP 地址可用，因此在选择可用的公网 &lt;code&gt;ip:port&lt;/code&gt; 来做映射时，选择空间更大，能支持 更多客户端。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017833&quot; data-ratio=&quot;0.41382488479262675&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xSRYc8B9dTzC8C34nXDKRWTQ7KoFZicjseo9ggwyAsGGBPQcSJSjcROg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2170&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3.5 SNAT 给穿透带来的挑战&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在我们遇到了与前面有状态防火墙类似的情况，但这次是 NAT 设备：&lt;strong&gt;通信双方 不知道对方的 ip:port 是什么&lt;/strong&gt;，因此&lt;strong&gt;无法主动建连&lt;/strong&gt;，如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017834&quot; data-ratio=&quot;0.28440366972477066&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xic6icWgjfiaqLVicaZCI6cW8baAwYtwQJZqF5c643W94Ao3lX1NiaLkJ8Ew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2180&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但这次比有状态防火墙更糟糕，严格来说，&lt;strong&gt;在双方发包之前，根本无法确定（自己及对方的）ip:port 信息&lt;/strong&gt;，因为 &lt;strong&gt;只有出向包经过路由器之后才会产生 NAT mapping&lt;/strong&gt;（即，可以被对方连接的 &lt;code&gt;ip:port&lt;/code&gt; 信息）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此我们又回到了与防火墙遇到的问题，并且情况更糟糕：&lt;strong&gt;双方都需要主动和对 方建连，但又不知道对方的公网地址是多少&lt;/strong&gt;，只有当对方先说话之后，我们才能拿到它的地址信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何破解以上死锁呢？这就轮到 &lt;span&gt;STUN&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt; 登场了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4 穿透 “NAT+防火墙”：STUN (Session Traversal Utilities for NAT) 协议&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;STUN&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;  既是一些对 NAT 设备行为的详细研究，也是一种协助 NAT 穿透的协议。本文主要关注 STUN 协议。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;4.1 STUN 原理&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;STUN 基于一个简单的观察&lt;/strong&gt;：从一个会被 NAT 的客户端访问公网服务器时， 服务器看到的是 &lt;strong&gt;NAT 设备的公网 ip:port 地址&lt;/strong&gt;，而非该 &lt;strong&gt;客户端的局域网 ip:port 地址&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说，服务器能告诉客户端&lt;strong&gt;它看到的客户端的 ip:port 是什么&lt;/strong&gt;。因此，只要将这个信息以某种方式告诉通信对端（peer），后者就知道该和哪个地址建连了！这样就又&lt;strong&gt;简化为前面的防火墙穿透问题了&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本质上这就是 &lt;strong&gt;STUN 协议的工作原理&lt;/strong&gt;，如下图所示：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;笔记本向 STUN 服务器发送一个请求：“从你的角度看，我的地址什么？”&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;STUN 服务器返回一个响应：“我看到你的 UDP 包是从这个地址来的：&lt;code&gt;ip:port&lt;/code&gt;”。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017835&quot; data-ratio=&quot;0.5134615384615384&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xzO3qzibicR6HvHp5AL84BwoGywjW91mtFXQPobFqicrvNMcJw7agJlIjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1560&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;The STUN protocol has a bunch more stuff in it — there’s a way of obfuscating the &lt;code&gt;ip:port&lt;/code&gt; in the response to stop really broken NATs from mangling the packet’s payload, and a whole authentication mechanism that only really gets used by TURN and ICE, sibling protocols to STUN that we’ll talk about in a bit. We can ignore all of that stuff for address discovery.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;4.2 为什么 NAT 穿透逻辑和主协议要共享同一个 socket&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;理解了 STUN 原理，也就能理解为什么我们在文章开头说，如果 &lt;strong&gt;要实现自己的 NAT 穿透逻辑和主协议，就必须让二者共享同一个 socket&lt;/strong&gt;：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;每个 socket 在 NAT 设备上都对应一个映射关系（私网地址 -&amp;gt; 公网地址），&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;STUN 服务器只是&lt;strong&gt;辅助&lt;/strong&gt;穿透的基础设施，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;与 STUN 服务器通信之后，在 NAT 及防火墙设备上打开了一个连接，允许入向包进来（回忆前面内容，  &lt;strong&gt;只要目的地址对，UDP 包就能进来&lt;/strong&gt;，不管这些包是不是从 STUN 服务器来的），&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;因此，接下来只要将这个地址告诉我们的通信对端（peer），让它往这个地址发包，就能实现穿透了。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;4.3 STUN 的问题：不能穿透所有 NAT 设备（例如企业级 NAT 网关）&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了 STUN，我们的&lt;strong&gt;穿透目的似乎已经实现了&lt;/strong&gt;：每台机器都通过 STUN 来获取自己的私网 socket 对应的公网 &lt;code&gt;ip:port&lt;/code&gt;，然后把这个信息告诉对端，然后两端 同时发起穿透防火墙的尝试，后面的过程就和上一节介绍的防火墙穿透一样了，&lt;strong&gt;对吗&lt;/strong&gt;？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是：&lt;strong&gt;看情况&lt;/strong&gt;。某些情况下确实如此，但有些情况下却不行。通常来说，&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;对于大部分&lt;strong&gt;家用路由器场景&lt;/strong&gt;，这种方式是没问题的；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;但对于一些&lt;strong&gt;企业级 NAT 网关&lt;/strong&gt;来说，这种方式无法奏效。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;NAT 设备的说明书上越强调它的安全性，STUN 方式失败的可能性就越高。（但注意，从实际意义上来说， &lt;strong&gt;NAT 设备在任何方面都并不会增强网络的安全性&lt;/strong&gt;，但这不是本文重点，因此不展开。）&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;4.4 重新审视 STUN 的前提&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再次审视前面&lt;strong&gt;关于 STUN 的假设&lt;/strong&gt;：当 STUN 服务器告诉客户端在公网看来它的地址是 &lt;code&gt;2.2.2.2:4242&lt;/code&gt; 时，那所有目的地址是 &lt;code&gt;2.2.2.2:4242&lt;/code&gt; 的包就都能穿透防火墙到达该客户端。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也正是问题所在：&lt;strong&gt;这一点并不总是成立&lt;/strong&gt;。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;某些 NAT 设备的行为与我们假设的一致，它们的有状态防火墙组件只要看到有客户端自己 发起的出向包，就会允许相应的入向包进入；因此只要利用 STUN 功能，再加上两端同时 发起防火墙穿透，就能把连接打通；&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;in theory, there are also NAT devices that are super relaxed, and don’t ship with stateful firewall stuff at all. In those, you don’t even need simultaneous transmission, the STUN request gives you an internet &lt;code&gt;ip:port&lt;/code&gt; that anyone can connect to with no further ceremony. If such devices do still exist, they’re increasingly rare.&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;另外一些 NAT 设备就要困难很多了，它会&lt;strong&gt;针对每个目的地址来生成一条相应的映射关系&lt;/strong&gt;。在这样的设备上，如果我们用相同的 socket 来分别发送数据包到 &lt;code&gt;5.5.5.5:1234&lt;/code&gt; and &lt;code&gt;7.7.7.7:2345&lt;/code&gt;，我们就会得到 &lt;code&gt;2.2.2.2&lt;/code&gt; 上的两个不同的端口，每个目的地址对应一个。如果反向包的端口用的不对，包就无法通过防火墙。如下图所示：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017836&quot; data-ratio=&quot;0.45156081808396126&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xzQ4YoGL2WL78MbZcu5Nrr9MJZOkyoFF0llCb8A2tSYaoBXo4I1LEFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1858&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5 中场补课：NAT 正式术语&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;知道 NAT 设备的行为并不是完全一样之后，我们来引入一些正式术语。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;5.1 早期术语&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果之前接触过 NAT 穿透，可能会听说过下面这些名词：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;“Full Cone”&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;“Restricted Cone”&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;“Port-Restricted Cone”&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;“Symmetric” NATs&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些都是 NAT 穿透领域的早期术语。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但其实这些术语&lt;strong&gt;相当让人困惑&lt;/strong&gt;。我每次都要 查一下 Restricted Cone NAT 是什么意思。从实际经验来看，我并不是唯一对此感到困惑的人。例如，如今互联网上将 “easy” NAT 归类为 Full Cone，而实际上它们更应该归类为 Port-Restricted Cone。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;5.2 近期研究与新术语&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近的一些研究和 RFC 已经提出了一些更准确的术语。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;首先，它们明确了如下事实：&lt;strong&gt;NAT 设备的行为差异表现在多个维度&lt;/strong&gt;， 而并非只有早期研究中所说的 “cone” 这一个维度，因此&lt;strong&gt;基于 “cone” 来划分类别并不是很有帮助&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其次，新研究和新术语能&lt;strong&gt;更准确地描述 NAT 在做什么&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面提到的所谓 &lt;strong&gt;&quot;easy&quot; 和 &quot;hard&quot; NAT，只在一个维度有不同&lt;/strong&gt;：NAT 映射是否考虑到目的地址信息。&lt;span&gt;RFC 4787&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt; 中，&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;将 &lt;strong&gt;easy NAT 及其变种&lt;/strong&gt;称为 “Endpoint-Independent Mapping” (&lt;strong&gt;EIM，终点无关的映射&lt;/strong&gt;)&lt;/p&gt;&lt;p&gt;但是，从**“命名很难”**这一程序员界的伟大传统来说，EIM 这个词其实  也并不是 100% 准确，因为这种 NAT 仍然依赖 endpoint，只不过依赖的是源 endpoint：每个 source  &lt;code&gt;ip:port&lt;/code&gt; 对应一个映射 —— 否则你的包就会和别人的包混在一起，导致混乱。&lt;/p&gt;&lt;p&gt;严格来说，EIM 应该称为 “Destination Endpoint Independent Mapping” (DEIM?)，  但这个名字太拗口了，而且按照惯例，Endpoint 永远指的是 Destination Endpoint。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;将 &lt;strong&gt;hard NAT 以及变种&lt;/strong&gt;称为 “Endpoint-Dependent Mapping”（&lt;strong&gt;EDM，终点相关的映射&lt;/strong&gt;） 。&lt;/p&gt;&lt;p&gt;EDM 中还有一个子类型，依据是只根据 dst_ip 做映射，还是根据 dst_ip + dst_port 做映射。对于 NAT 穿透来说，这种区分对来说是一样的：它们&lt;strong&gt;都会导致 STUN 方式不可用&lt;/strong&gt;。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;5.3 老的 cone 类型划分&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可能会有疑问：根据是否依赖 endpoint 这一条件，只能组合出两种可能，那为什么传 统分类中会有四种 cone 类型呢？答案是 &lt;strong&gt;cone 包含了两个正交维度的 NAT 行为&lt;/strong&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;NAT 映射行为&lt;/strong&gt;：前面已经介绍过了，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;有状态防火墙行为&lt;/strong&gt;：与前者类似，也是分为与 endpoint 相关还是无关两种类型。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此最终组合如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;NAT Cone Types&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;Endpoint 无关 NAT mapping&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;Endpoint 相关 NAT mapping (all types)&lt;/strong&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Endpoint 无关防火墙&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;Full Cone NAT&lt;/td&gt;&lt;td&gt;N/A*&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Endpoint 相关防火墙 (dst. IP only)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;Restricted Cone NAT&lt;/td&gt;&lt;td&gt;N/A*&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Endpoint 相关防火墙 (dst. IP+port)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;Port-Restricted Cone NAT&lt;/td&gt;&lt;td&gt;Symmetric NAT&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分解到这种程度之后就可以看出，&lt;strong&gt;cone 类型对 NAT 穿透场景来说并没有什么意义&lt;/strong&gt;。我们关心的只有一点：是否是 Symmetric —— 换句话说，一个 NAT 设备是 EIM 还是 EDM 类型的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;5.4 针对 NAT 穿透场景：简化 NAT 分类&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上讨论可知，虽然理解防火墙的具体行为很重要，但对于编写 NAT 穿透代码来说，这一点并不重要。我们的&lt;strong&gt;两端同时发包&lt;/strong&gt;方式（simultaneous transmission trick）能 &lt;strong&gt;有效穿透以上三种类型的防火墙&lt;/strong&gt;。在真实场景中， 我们主要在处理的是 IP-and-port endpoint-dependent 防火墙。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，对于实际 NAT 穿透实现，我们可以将以上分类简化成：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;Endpoint-Independent NAT mapping&lt;/th&gt;&lt;th&gt;Endpoint-Dependent NAT mapping (dst. IP only)&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Firewall is yes&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;Easy NAT&lt;/td&gt;&lt;td&gt;Hard NAT&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;5.5 更多 NAT 规范（RFC）&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想了解更多新的 NAT 术语，可参考&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;RFC &lt;span&gt;4787&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt; (NAT Behavioral Requirements for UDP)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RFC &lt;span&gt;5382&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt; (for TCP)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RFC &lt;span&gt;5508&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt; (for ICMP)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果自己实现 NAT，那应该（should）遵循这些 RFC 的规范，这样才能使你的 NAT 行为符合业界惯例，与其他厂商的设备或软件良好兼容。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6 穿透 NAT+防火墙：STUN 不可用时，fallback 到中继模式&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;6.1 问题回顾与保底方式（中继）&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;补完基础知识（尤其是定义了什么是 hard NAT）之后，回到我们的 NAT 穿透主题。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第 1~4 节已经解决了 STUN 和防火墙穿透的问题，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;但 &lt;strong&gt;hard NAT 对我们来说是个大问题&lt;/strong&gt;，只要路径上出现一个这种设备，前面的方案就行不通了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;准备放弃了吗？这才&lt;strong&gt;进入 NAT 真正有挑战的部分&lt;/strong&gt;：如果已经试过了前面介绍的所有方式 仍然不能穿透，我们该怎么办呢？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;实际上，确实有很多 NAT 实现在这种情况下都会选择放弃，向用户报一个**“无法连接”**之类的错误。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;但对我们来说，这么快就放弃显然是不可接受的 —— 解决不了连通性问题，Tailscale 就没有存在的意义。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的保底解决方式是：创建一个&lt;strong&gt;中继连接&lt;/strong&gt;（relay）实现双方的无障碍地通信。但是，中继方式性能不是很差吗？这要看具体情况：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果能直连，那显然没必要用中继方式；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;但如果无法直连，而中继路径又非常接近双方直连的真实路径，并且带宽足够大，那中 继方式并不会明显降低通信质量。延迟肯定会增加一点，带宽会占用一些，但 &lt;strong&gt;相比完全连接不上，还是更能让用户接受的&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过要注意：我们只有在无法直连时才会选择中继方式。实际场景中，&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;对于大部分网络，我们都能通过前面介绍的方式实现直连，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;剩下的长尾用中继方式来解决，并不算一个很糟的方式。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，某些网络会阻止 NAT 穿透，其影响比这种 hard NAT 大多了。例如，我们观察到 UC Berkeley guest WiFi 禁止除 DNS 流量之外的所有 outbound UDP 流量。不管用什么 NAT 黑科技，都无法绕过这个拦截。因此我们终归还是需要一些可靠的 fallback 机制。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;6.2 中继协议：TURN、DERP&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有多种中继实现方式。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;TURN&lt;/strong&gt; (Traversal Using Relays around NAT)：经典方式，核心理念是&lt;/p&gt;&lt;p&gt;Tailscale 并不使用 TURN。这种协议&lt;strong&gt;用起来并不是很好&lt;/strong&gt;，而且与 STUN 不同， 它没有真正的交互性，因为互联网上并没有公开的 TURN 服务器。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;用户&lt;/strong&gt;（人）先去公网上的 TURN 服务器认证，成功后后者会告诉你：“我已经为你分配了 ip:port，接下来将为你中继流量”，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后将这个 ip:port 地址告诉对方，让它去连接这个地址，接下去就是非常简单的客户端/服务器通信模型了。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;DERP (Detoured Encrypted Routing Protocol)&lt;/p&gt;&lt;p&gt;这是我们创建的一个协议，&lt;span&gt;DERP&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt;，&lt;/p&gt;&lt;p&gt;前面也简单提到过，DERP 既是我们在 NAT 穿透失败时的保底通信方式（此时的角色 与 TURN 类似），也是在其他一些场景下帮助我们完成 NAT 穿透的旁路信道。换句话说，它既是我们的保底方式，也是有更好的穿透链路时，帮助我们进行连接升 级（upgrade to a peer-to-peer connection）的基础设施。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;它是一个&lt;strong&gt;通用目的包中继协议，运行在 HTTP 之上&lt;/strong&gt;，而大部分网络都是允许 HTTP 通信的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;它根据目的公钥（destination’s public key）来中继加密的流量（encrypted payloads）。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;6.3 小结&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了“中继”这种保底方式之后，我们穿透的成功率大大增加了。如果此时不再阅读本文接下来的内容，而是把上面介绍的穿透方式都实现了，我预计：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;90% 的情况下，你都能实现直连穿透；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;剩下的 10% 里，用中继方式能穿透&lt;strong&gt;一些&lt;/strong&gt;（some）；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这已经算是一个“足够好”的穿透实现了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;7 穿透 NAT+防火墙：企业级改进&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你并不满足于“足够好”，那我们可以做的事情还有很多！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本节将介绍一些五花八门的 tricks，在某些特殊场景下会帮到我们。单独使用这项技术都 无法解决 NAT 穿透问题，但将它们巧妙地组合起来，我们能更加接近 100% 的穿透成功率。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;7.1 穿透 hard NAT：暴力端口扫描&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回忆 hard NAT 中遇到的问题，如下图所示，关键问题是：easy NAT 不知道该往 hard NAT 方的哪个 &lt;code&gt;ip:port&lt;/code&gt; 发包。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017837&quot; data-ratio=&quot;0.3027375201288245&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xOXRmqiaUS7VxgU2D5liccBfWj7YZXicSpVll6b3PzeebTbnP8VdVhssUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1863&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但&lt;strong&gt;必须&lt;/strong&gt;要往正确的 &lt;code&gt;ip:port&lt;/code&gt; 发包，才能穿透防火墙，实现双向互通。怎么办呢？&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;首先，我们能知道 hard NAT 的&lt;strong&gt;一些&lt;/strong&gt; &lt;code&gt;ip:port&lt;/code&gt;，因为我们有 STUN 服务器。&lt;/p&gt;&lt;p&gt;这里先假设我们获得的这些 IP 地址都是正确的（这一点并不总是成立，但这里先这么假 设。而实际上，大部分情况下这一点都是成立的，如果对此有兴趣，可以参考 REQ-2 in &lt;span&gt;RFC 4787&lt;/span&gt;&lt;sup&gt;[13]&lt;/sup&gt;）。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;IP 地址确定了，剩下的就是端口了。总共有 65535 中可能，我们能&lt;strong&gt;遍历这个端口范围&lt;/strong&gt;吗？&lt;/p&gt;&lt;p&gt;如果发包速度是 100 packets/s，那最坏情况下，需要 &lt;strong&gt;10 分钟&lt;/strong&gt;来找到正确的端口。还是那句话，这虽然不是最优的，但总比连不上好。&lt;/p&gt;&lt;p&gt;这很像是端口扫描（事实上，确实是），实际中可能会触发对方的网络入侵检测软件。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;7.2 基于生日悖论改进暴力扫描：hard side 多开端口 + easy side 随机探测&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;利用 &lt;span&gt;birthday paradox&lt;/span&gt;&lt;sup&gt;[14]&lt;/sup&gt; 算法， 我们能对端口扫描进行改进。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;上一节的基本前提是：hard side 只打开一个端口，然后 easy side 暴力扫描 65535 个端口来寻找这个端口；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这里的改进是：在 hard size 开多个端口，例如 256 个（即同时打开 256 个 socket，目的地址都是 easy side 的 &lt;code&gt;ip:port&lt;/code&gt;）， 然后 easy side 随机探测这边的端口。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里省去算法的数学模型，如果你对实现干兴趣，可以看看我写的  &lt;span&gt;python calculator&lt;/span&gt;&lt;sup&gt;[15]&lt;/sup&gt;。计算过程是“经典”生日悖论的一个小变种。下面是随着 easy side random probe 次数（假设 hard size 256 个端口）的变化，两边打开的端口有重合（即通信成功）的概率：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;随机探测次数&lt;/th&gt;&lt;th&gt;成功概率&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;174&lt;/td&gt;&lt;td&gt;50%&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;256&lt;/td&gt;&lt;td&gt;64%&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1024&lt;/td&gt;&lt;td&gt;98%&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2048&lt;/td&gt;&lt;td&gt;99.9%&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据以上结果，如果还是假设 100 ports/s 这样相当温和的探测速率，那 &lt;strong&gt;2 秒钟就有约 50% 的成功概率&lt;/strong&gt;。即使非常不走运，我们仍然能在 &lt;strong&gt;20s 时几乎 100% 穿透成功&lt;/strong&gt;，而此时&lt;strong&gt;只探测了总端口空间的 4%&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;非常好！虽然这种 hard NAT 给我们带来了严重的穿透延迟，但最终结果仍然是成功的。那么，如果是两个 hard NAT，我们还能处理吗？&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;7.3 双 hard NAT 场景&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017838&quot; data-ratio=&quot;0.3027375201288245&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5x1icibjZdKkqicKu1WbdGMEt8XbHaicKyNkSwoaQsuHmGxbjfY56sExsE6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1863&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种情况下仍然可以用前面的 &lt;strong&gt;多端口+随机探测&lt;/strong&gt; 方式，但成功概率要低很多了：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;每次通过一台 hard NAT 去探测对方的端口（目的端口）时，我们&lt;strong&gt;自己同时也生成了一个随机源端口&lt;/strong&gt;，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这意味着我们的搜索空间变成了二维 &lt;code&gt;{src port, dst port}&lt;/code&gt; 对，而不再是之前的一维 dst port 空间。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们也不就具体计算展开，只告诉结果：仍然&lt;strong&gt;假设目的端打开 256 个端口，从源端发起 2048 次（20 秒）&lt;/strong&gt;， 成功的概率是：&lt;strong&gt;0.01%&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你之前学过生日悖论，就并不会对这个结果感到惊讶。理论上来说，&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;要达到 &lt;strong&gt;99.9% 的成功率&lt;/strong&gt;，我们需要两边各进行&lt;strong&gt;170,000 次&lt;/strong&gt;探测 —— 如果还是以 100 packets/sec 的速度，就需要 &lt;strong&gt;28 分钟&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要达到 &lt;strong&gt;50% 的成功率&lt;/strong&gt;，“只”需要 54,000 packets，也就是 &lt;strong&gt;9 分钟&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果不使用生日悖论方式，而且&lt;strong&gt;暴力穷举，需要 1.2 年时间&lt;/strong&gt;！&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;对于某些应用来说，28 分钟可能仍然是一个可接受的时间&lt;/strong&gt;。用半个小时暴力穿透 NAT 之后， 这个连接就可以一直用着 —— 除非 NAT 设备重启，那样就需要再次花半个小时穿透建个新连接。但对于 交互式应用来说，这样显然是不可接受的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更糟糕的是，如果去看常见的办公网路由器，你会震惊于它的 active session low limit 有多么低。例如，一台 Juniper SRX 300 &lt;strong&gt;最多支持 64,000 active sessions&lt;/strong&gt;。也就是说，&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果我们想创建&lt;strong&gt;一个&lt;/strong&gt;成功的穿透连接，&lt;strong&gt;就会把它的整张 session 表打爆&lt;/strong&gt; （因为我们要暴力探测 65535 个端口，每次探测都是一条新连接记录）！这显然要求这台路由器能&lt;strong&gt;从容优雅地处理过载的情况&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这只是创建一条连接带来的影响！如果 20 台机器同时对这台路由器发起穿透呢？&lt;strong&gt;绝对的灾难！&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，我们通过这种方式穿透了比之前更难一些的网络拓扑。这是一个很大的成就，因为 &lt;strong&gt;家用路由器一般都是 easy NAT，hard NAT 一般都是办公网路由器或云 NAT 网关&lt;/strong&gt;。这意味着这种方式能帮我们解决&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;home-to-office（家-&amp;gt;办公室）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;home-to-cloud （家-&amp;gt;云）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;的场景，以及一部分&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;office-to-cloud （办公室-&amp;gt;云）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;cloud-to-cloud （云-&amp;gt;办公室）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;场景。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;7.4 控制端口映射（port mapping）过程：UPnP/NAT-PMP/PCP 协议&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们能&lt;strong&gt;让 NAT 设备的行为简单点&lt;/strong&gt;，不要把事情搞这么复杂，那建 立连接（穿透）就会简单很多。真有这样的好事吗？还真有，有专门的一种协议叫 &lt;strong&gt;端口映射协议&lt;/strong&gt;（port mapping protocols）。通过这种协议禁用掉前面 遇到的那些乱七八糟的东西之后，我们将得到一个非常简单的“请求-响应”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是三个具体的端口映射协议：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;UPnP IGD&lt;/span&gt;&lt;sup&gt;[16]&lt;/sup&gt; (Universal Plug’n’Play Internet Gateway Device)&lt;/p&gt;&lt;p&gt;最老的端口控制协议， 诞生于 1990s 晚期，因此使用了很多上世纪 90 年代的技术 （XML、SOAP、&lt;strong&gt;multicast HTTP over UDP —— 对，HTTP over UDP&lt;/strong&gt; ），而且很难准确和安全地实现这个协议。但以前很多路由器都内置了 UPnP 协议， 现在仍然很多。&lt;/p&gt;&lt;p&gt;请求和响应：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;“你好，请将我的 &lt;code&gt;lan-ip:port&lt;/code&gt; 转发到公网（WAN）”，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;“好的，我已经为你分配了一个公网映射 &lt;code&gt;wan-ip:port&lt;/code&gt; ”。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;NAT-PMP&lt;/p&gt;&lt;p&gt;UPnP IGD 出来几年之后，Apple 推出了一个功能类似的协议，名为 &lt;span&gt;NAT-PMP&lt;/span&gt;&lt;sup&gt;[17]&lt;/sup&gt; (NAT Port Mapping Protocol)。&lt;/p&gt;&lt;p&gt;但与 UPnP 不同，这个协议&lt;strong&gt;只&lt;/strong&gt;做端口转发，不管是在客户端还是服务端，实现起来都非常简单。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;PCP&lt;/p&gt;&lt;p&gt;稍后一点，又出现了 NAT-PMP v2 版，并起了个新名字&lt;span&gt;PCP&lt;/span&gt;&lt;sup&gt;[18]&lt;/sup&gt; (Port Control Protocol)。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此要更好地实现穿透，可以&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;先判断本地的默认网关上是否启用了 UPnP IGD, NAT-PMP and PCP&lt;/strong&gt;，&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果探测发现其中任何一种协议有响应，我们就&lt;strong&gt;申请一个公网端口映射&lt;/strong&gt;，&lt;/p&gt;&lt;p&gt;可以将这理解为一个&lt;strong&gt;加强版 STUN&lt;/strong&gt;：我们不仅能发现自己的公网 &lt;code&gt;ip:port&lt;/code&gt;，而且能指示我们的 NAT 设备对我们的通信对端友好一些 —— 但并不是为这个端口修改或添加防火墙规则。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;接下来，任何到达我们 NAT 设备的、地址是我们申请的端口的包，都会被设备转发到我们。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但我们&lt;strong&gt;不能假设这个协议一定可用&lt;/strong&gt;：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;本地 NAT 设备可能不支持这个协议；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;设备支持但默认禁用了，或者没人知道还有这么个功能，因此从来没开过；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;安全策略要求关闭这个特性。&lt;/p&gt;&lt;p&gt;这一点非常常见，因为 UPnP 协议曾曝出一些高危漏洞（后面都修复了，因此如果是较新的设备，可以安全地使用 UPnP —— 如果实现没问题）。不幸的是，某些设备的配置中，UPnP, NAT-PMP，PCP 是放在一个开关里的（可能 统称为 “UPnP” 功能），一开全开，一关全关。因此如果有人担心 UPnP 的安全性，他连另 外两个也用不了。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，终归来说，&lt;strong&gt;只要这种协议可用，就能有效地减少一次 NAT&lt;/strong&gt;，大大方便建连过程。但接下来看一些不常见的场景。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;7.5 多 NAT 协商（Negotiating numerous NATs）&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前为止，我们看到的客户端和服务端都各只有一个 NAT 设备。如果有多个 NAT 设备会 怎么样？例如下面这种拓扑：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017839&quot; data-ratio=&quot;0.3509052183173589&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5x6sTFnCGC4iab8niaTibWDYoPIJyK8FhV26V6sGX8RLrapibSlsaal5j2Tg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1878&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个例子比较简单，不会给穿透带来太大问题。包从客户端 A &lt;strong&gt;经过多次 NAT&lt;/strong&gt; 到达公网的过程，与前面分析的&lt;strong&gt;穿过多层有状态防火墙&lt;/strong&gt;是一样的：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;额外的这层（NAT 设备）&lt;strong&gt;对客户端和服务端来说都不可见&lt;/strong&gt;，我们的穿 透技术也不关心中间到底经过了多少层设备。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;真正有影响的其实只是最后一层设备&lt;/strong&gt;，因为对端需要在这一层设备上 找到入口让包进来。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体来说，真正有影响的是端口转发协议。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端使用这种协议分配端口时，为我们分配端口的是最靠近客户端的这层 NAT 设备；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;而我们期望的是让最离客户端最远的那层 NAT 来分配，否则我们得到的就是一个网络中间层分配的 &lt;code&gt;ip:port&lt;/code&gt;，对端是用不了的；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不幸的是，&lt;strong&gt;这几种协议都不能递归地&lt;/strong&gt;告诉我们下一层 NAT 设备是多少 ——  虽然可以用 traceroute 之类的工具来探测网络路径，再加上  猜路上的设备是不是 NAT 设备（尝试发送 NAT 请求） —— 但这个就看运气了。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是为什么互联网上充斥着大量的文章说 &lt;strong&gt;double-NAT 有多糟糕&lt;/strong&gt;，以 及警告用户为保持后向兼容不要使用 double-NAT。但实际上，double-NAT &lt;strong&gt;对于绝大部分 互联网应用来说都是不可见的（透明的）&lt;/strong&gt;，因为大部分应用并不需要主动地做这种 NAT 穿 透。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但我也绝不是在建议你在自己的网络中设置 double-NAT。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;破坏了端口映射协议之后，某些视频游戏的多人（multiplayer）模式就会无法使用，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;也可能会使你的 IPv6 网络无法派上用场，后者是不用 NAT 就能双向直连的一个好方案。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果 double-NAT 并不是你能控制的，那除了不能用到这种端口映射协议之外，其他大部分东西都是不受影响的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;double-NAT 的故事到这里就结束了吗？—— 并没有，而且更大型的 double-NAT 场景将展现在我们面前。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;7.6 运营商级 NAT 带来的问题&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即使用 NAT 来解决 IPv4 地址不够的问题，地址仍然是不够用的，ISP（互联网服务提供商） 显然 无法为每个家庭都分配一个公网 IP 地址。那怎么解决这个问题呢？ISP 的做法是&lt;strong&gt;不够了就再嵌套一层 NAT&lt;/strong&gt;：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;家用路由器将你的客户端 SNAT 到一个 “intermediate” IP 然后发送到运营商网络，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ISP’s network 中的 NAT 设备再将这些 intermediate IPs 映射到少量的公网 IP。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后面这种 NAT 就称为“运营商级 NAT”（&lt;strong&gt;carrier-grade NAT&lt;/strong&gt;，或称电信级 NAT），缩写 CGNAT。如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017840&quot; data-ratio=&quot;0.4622543950361944&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xaGLp0Xnhsdf9ibWYZjwrqvu7ALiaG7ibSwyjicR0hlrZHqDuUEyWwicZTqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1934&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CGNAT 对 NAT 穿透来说是一个大麻烦。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在此之前，办公网用户要快速实现 NAT 穿透，只需在他们的路由器上手动设置端口映射就行了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;但有了 CGNAT 之后就不管用了，因为你无法控制运营商的 CGNAT！&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好消息是：这其实是 double-NAT 的一个小变种，因此前面介绍的解决方式大部分还仍然是适用的。某些东西可能会无法按预期工作，但只要肯给 ISP 交钱，这些也都能解决。除了 port mapping protocols，其他我们已经介绍的所有东西在 CGNAT 里都是适用的。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;新挑战：同一 CGNAT 侧直连，STUN 不可用&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但我们确实遇到了一个新挑战：如何直连两个在同一 CGNAT 但不同家用路由器中的对端呢？如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017841&quot; data-ratio=&quot;0.4556765163297045&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xibz1ajjK6hbMUXnZlGIR7txk7biaDrQS0LicVgJrst7OKctx4XibBJC7yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1929&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;在这种情况下，STUN 就无法正常工作了&lt;/strong&gt;：STUN 看到的是客户端在公网（CGNAT 后面）看到的地址， 而我们想获得的是在 “middle network” 中的 &lt;code&gt;ip:port&lt;/code&gt;，这才是对端真正需要的地址，&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;解决方案：如果端口映射协议能用：一端做端口映射&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;怎么办呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你想到了端口映射协议，那恭喜，答对了！&lt;strong&gt;如果 peer 中任何一个 NAT 支持端口映射协议&lt;/strong&gt;， 对我们就能实现穿透，因为它分配的 &lt;code&gt;ip:port&lt;/code&gt; 正是对端所需要的信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里讽刺的是：double-NAT（指 CGNAT）破坏了端口映射协议，但在这里又救了我们！当然，我们假设这些协议一定可用，因为 CGNAT ISP 倾向于在它们的家用路由器侧关闭 这些功能，已避免软件得到“错误的”结果，产生混淆。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;解决方案：如果端口映射协议不能用：NAT hairpin 模式&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不走运，NAT 上没有端口映射功能怎么办？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让我们回到基于 STUN 的技术，看会发生什么。两端在 CGNAT 的同一侧，假设 STUN 告诉我们 A 的地址是 &lt;code&gt;2.2.2.2:1234&lt;/code&gt;，B 的地址是 &lt;code&gt;2.2.2.2:5678&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么接下来的问题是：如果 A 向 &lt;code&gt;2.2.2.2:5678&lt;/code&gt; 发包会怎么样？期望的 CGNAT 行为是：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;执行 A 的 NAT 映射规则，即对 &lt;code&gt;2.2.2.2:1234 -&amp;gt; 2.2.2.2:5678&lt;/code&gt; 进行 SNAT。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;注意到目的地址 &lt;code&gt;2.2.2.2:5678&lt;/code&gt; 匹配到的是 B 的入向 NAT 映射，因此接着对这个包执行 DNAT，将目的 IP 改成 B 的私有地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过  CGNAT 的 internal 接口（而不是 public 接口，对应公网）将包发给 B。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种 NAT 行为有个专门的术语，叫 &lt;strong&gt;hairpinning&lt;/strong&gt;（直译为发卡，意思 是像发卡一样，沿着一边上去，然后从另一边绕回来），&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家应该猜到的一个事实是：&lt;strong&gt;不是所以 NAT 都支持 hairpin 模式&lt;/strong&gt;。实际上，大量 well-behaved NAT 设备都不支持 hairpin 模式，&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;因为它们都有 &lt;strong&gt;“只有 src_ip 是私有地址且 dst_ip 是公网地址的包才会经过我”&lt;/strong&gt; 之类的假设。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;因此对于这种目的地址不是公网、需要让路由器把包再转回内网的包，它们会&lt;strong&gt;直接丢弃&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这些逻辑甚至是直接实现在路由芯片中的，因此除非升级硬件，否则单靠软件编程无法改变这种行为。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hairpin 是所有 NAT 设备的特性（支持或不支持），并不是 CGNAT 独有的。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;在大部分情况下，这个特性对我们的 NAT 穿透目的来说都是无所谓的，因为我们期望中  &lt;strong&gt;两个 LAN NAT 设备会直接通信，不会再向上绕到它们的默认网关 CGNAT 来解决这个问题&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;Hairpin 特性可有可无这件事有点遗憾，这可能也是为什么 hairpin 功能经常 broken 的原因。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;一旦必须涉及到 CGNAT，那 hairpinning 对连接性来说就至关重要了。&lt;/p&gt;&lt;p&gt;Hairpinning 使内网连接的行为与公网连接的行为完成一致，因此我们无需关心目的 地址类型，也不用知晓自己是否在一台 CGNAT 后面。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如果 hairpinning 和 port mapping protocols 都不可用，那只能降级到中继模式了&lt;/strong&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;7.7 全 IPv6 网络：理想之地，但并非问题全无&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;行文至此，一些读者可能已经对着屏幕咆哮：&lt;strong&gt;不要再用 IPv4 了！&lt;/strong&gt; 花这么多时间精力解决这些没意义的东西，还不如直接换成 IPv6！&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;的确，之所以有这些乱七八糟的东西，就是因为 IPv4 地址不够了，我们&lt;strong&gt;一直在用越来越复杂的 NAT 来给 IPv4 续命&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果 IP 地址够用，无需 NAT 就能让世界上的每个设备都有一个自己的公网 IP 地址，这些问题不就解决了吗？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单来说，是的，这也正是 IPv6 能做的事情。但是，也只说对了一半：在理想的全 IPv6 世界中，所有这些东西会变得更加简单，但我们面临的&lt;strong&gt;问题并不会完全消失&lt;/strong&gt; —— 因为&lt;strong&gt;有状态防火墙仍然还是存在的&lt;/strong&gt;。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;办公室中的电脑可能有一个公网 IPv6 地址，但你们公司肯定会架设一个防火墙，只允许 你的电脑主动访问公网，而不允许反向主动建连。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他设备上的防火墙也仍然存在，应用类似的规则。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，我们仍然会用到&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;本文最开始介绍的防火墙穿透技术，以及&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;帮助我们获取自己的公网 &lt;code&gt;ip:port&lt;/code&gt; 信息的旁路信道&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;仍然需要在某些场景下 fallback 到中继模式，例如 fallback 到最通用的 HTTP 中继 协议，以绕过某些网络禁止 outbound UDP 的问题。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但我们现在可以抛弃 &lt;strong&gt;STUN、生日悖论、端口映射协议、hairpin&lt;/strong&gt; 等等东西了。这是一个好消息！&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;全球 IPv4/IPv6 部署现状&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一个更加严峻的现实问题是：当前并不是一个全 IPv6 世界。目前世界上&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;大部分还是 IPv4，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;大约 33% 是 IPv6&lt;/span&gt;&lt;sup&gt;[19]&lt;/sup&gt;，而且分布极度不均匀，因此某些 通信对所在的可能是 100% IPv6，也可能是 0%，或二者之间。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不幸的是，这意味着，IPv6 &lt;strong&gt;还&lt;/strong&gt;无法作为我们的解决方案。就目前来说，它只是我们的工具箱中的一个备选。对于某些 peer 来说，它简直是完美工 具，但对其他 peer 来说，它是用不了的。如果目标是“任何情况下都能穿透（连接） 成功”，那我们就仍然需要 IPv4+NAT 那些东西。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;新场景：NAT64/DNS64&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;IPv4/IPv6 共存也引出了一个新的场景：NAT64 设备。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100017842&quot; data-ratio=&quot;0.432171581769437&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qFG6mghhA4bIB0JGxFYx49D2zC7y9n5xFvZkyHuVK9HVSLnbw5bxibOdWFnYzQRPF4kZ2Jia21MjuOqJIgQncB8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1865&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面介绍的都是 NAT44 设备：它们将一个 IPv4 地址转换成另一 IPv4 地址。NAT64 从名字可以看出，是将一个内侧 IPv6 地址转换成一个外侧 IPv4 地址。利用 DNS64 设备，我们能将 IPv4 DNS 应答给 IPv6 网络，这样对终端来说，它看到的就是一个 全 IPv6 网络，而仍然能访问 IPv4 公网。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Incidentally, you can extend this naming scheme indefinitely. There have been some experiments with NAT46; you could deploy NAT66 if you enjoy chaos; and some RFCs use NAT444 for carrier-grade NAT.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果需要处理 DNS 问题，那这种方式工作良好。例如，如果连接到 google.com，将这个域名解析成 IP 地址的过程会涉及到 DNS64 设备，它又会进一步 involve NAT64 设备，但后一步对用户来说是无感知的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但&lt;strong&gt;对于 NAT 和防火墙穿透来说，我们会关心每个具体的 IP 地址和端口&lt;/strong&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;解决方案：CLAT (Customer-side transLATor)&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果设备支持 CLAT (Customer-side translator — from Customer XLAT)，那我们就很幸运：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;CLAT 假装操作系统有直接 IPv4 连接，而背后使用的是 NAT64&lt;/strong&gt;，以对应用程序无感知。在有 CLAT 的设备上，我们无需做任何特殊的事情。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CLAT &lt;strong&gt;在移动设备上非常常见&lt;/strong&gt;，但在桌面电脑、笔记本和服务器上非常少见， 因此在后者上，必须自己做 CLAT 做的事情：检测 NAT64+DNS64 的存在，然后正确地使用它们。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;解决方案：CLAT 不存在时，手动穿透 NAT64 设备&lt;/h4&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;首先检测是否存在 NAT64+DNS64。&lt;/p&gt;&lt;p&gt;方法很简单：向 &lt;code&gt;ipv4only.arpa.&lt;/code&gt; 发送一个 DNS 请求。这个域名会解析 到一个已知的、固定的 IPv4 地址，而且是&lt;strong&gt;纯 IPv4 地址&lt;/strong&gt;。如果得到的 是一个 IPv6 地址，就可以判断有 DNS64 服务器做了转换，而它必然会用到 NAT64。这样 就能判断出 NAT64 的前缀是多少。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;此后，要向 IPv4 地址发包时，发送格式为&lt;code&gt;{NAT64 prefix + IPv4 address}&lt;/code&gt; 的 IPv6 包。类似地，收到来源格式为 &lt;code&gt;{NAT64 prefix + IPv4 address}&lt;/code&gt; 的包时，就是 IPv4 流量。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;接下来，通过 NAT64 网络与 STUN 通信来获取自己在 NAT64 上的公网 &lt;code&gt;ip:port&lt;/code&gt;，接 下来就回到经典的 NAT 穿透问题了 —— 除了需要多做一点点事情。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;幸运的是，如今的大部分 v6-only 网络都是移动运营商网络，而几乎所有手机都支持 CLAT。运营 v6-only 网络的 ISPs 会在他们给你的路由器上部署 CLAT，因此最后你其实不需要做什么事情。但如果想实现 100% 穿透，就需要解决这种边边角角的问题，即必须显式支持从 v6-only 网络连接 v4-only 对端。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;7.8 将所有解决方式集成到 ICE 协议&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;针对具体场景，该选择哪种穿透方式？&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，我们的 NAT 穿透之旅终于快结束了。我们已经覆盖了有状态防火墙、简单和高级 NAT、IPv4 和 IPv6。只要将以上解决方式都实现了，NAT 穿透的目的就达到了！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;对于给定的 peer，如何判断改用哪种方式呢？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何判断这是一个简单有状态防火墙的场景，还是该用到生日悖论算法，还是需要手动处理 NAT64 呢？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;还是通信双方在一个 WiFi 网络下，连防火墙都没有，因此不需要任何操作呢？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;早期 NAT 穿透&lt;/strong&gt;比较简单，能让我们&lt;strong&gt;精确判断出 peer 之间的路径特点&lt;/strong&gt;，然后针对性地采用相应的解决方式。但后面，网络工程师和 NAT 设备开发工程师引入了一些新理念，给路径判断造成很大困难。因此 我们需要简化客户端侧的思考（判断逻辑）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就要提到 Interactive Connectivity Establishment (ICE，交换式连接建立) 协议了。与 STUN/TURN 类似，ICE 来自&lt;strong&gt;电信领域&lt;/strong&gt;，因此其 RFC 充满了 SIP、SDP、信令会话、拨号等等电话术语。但如果忽略这些领域术语，我们会看到它&lt;strong&gt;描述了一个极其优雅的判断最佳连接路径的算法&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;真的？这个算法是：&lt;strong&gt;每种方法都试一遍，然后选择最佳的那个方法&lt;/strong&gt;。就是这个算法，惊喜吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来更深入地看一下这个算法。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;ICE (Interactive Connectivity Establishment) 算法&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的讨论不会严格遵循 ICE spec，因此如果是在自己实现一个可互操作的 ICE 客户端，应该通读&lt;span&gt;RFC 8445&lt;/span&gt;&lt;sup&gt;[20]&lt;/sup&gt;, 根据它的描述来实现。这里忽略所有电信术语，只关注核心的算法逻辑， 并提供几个在 ICE 规范允许范围的灵活建议。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;为实现和某个 peer 的通信，首先需要确定我们自己用的（客户端侧）这个 socket 的地址，  这是一个列表，至少应该包括：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;我们自己的 IPv6 &lt;code&gt;ip:ports&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我们自己的 IPv4 LAN &lt;code&gt;ip:ports&lt;/code&gt;（局域网地址）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 STUN 服务器获取到的我们自己的 IPv4 WAN &lt;code&gt;ip:ports&lt;/code&gt;（&lt;strong&gt;公网地址&lt;/strong&gt;，可能会经过 NAT64 转换）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过端口映射协议获取到的我们自己的 IPv4 WAN &lt;code&gt;ip:port&lt;/code&gt;（NAT 设备的&lt;strong&gt;端口映射协议分配的公网地址&lt;/strong&gt;）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;运营商提供给我们的 endpoints（例如，&lt;strong&gt;静态配置的端口转发&lt;/strong&gt;）&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;通过旁路信道与 peer 互换这个列表。两边都拿到对方的列表后，就开始互相探测对方提供的地址。 &lt;strong&gt;列表中地址没有优先级&lt;/strong&gt;，也就是说，如果对方给的了 15 个地址，那我们应该把这 15 个地址都探测一遍。&lt;/p&gt;&lt;p&gt;这些&lt;strong&gt;探测包有两个目的&lt;/strong&gt;：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;打开防火墙，穿透 NAT&lt;/strong&gt;，也就是本文一直在介绍的内容；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;健康检测&lt;/strong&gt;。我们在不断交换（最好是已认证的）“ping/pong” 包，来检测某个特定的路径是不是端到端通的。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;最后，一小会儿之后，从可用的备选地址中（根据某些条件）选择“最佳”的那个，任务完成！&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个算法的优美之处在于：只要选择最佳线路（地址）的算法是正确的，那就总能获得最佳路径。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;ICE 会预先对这些备选地址进行排序（通常：LAN &amp;gt; WAN &amp;gt; WAN+NAT），但用户也可以自己指定这个排序行为。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从 v0.100.0 开始，Tailscale 从原来的 hardcode 优先级切换成了根据 round-trip latency 的方式，它大部分情况下排序的结果和 &lt;code&gt;LAN &amp;gt; WAN &amp;gt; WAN+NAT&lt;/code&gt; 是一致的。但相比于静态排序，我们是动态计算每条路径应该属于哪个类别。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ICE spec 将协议组织为两个阶段：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;探测阶段&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通信阶段&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但不一定要严格遵循这两个步骤的顺序。在 Tailscale，&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;我们发现更优的路径之后就会自动切换过去，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;所有的连接都是先选择 DERP 模式（中继模式）。这意味着连接立即就能建立（&lt;strong&gt;优先级最低但 100% 能成功的模式&lt;/strong&gt;），用户不用任何等待，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后并行进行路径发现。通常几秒钟之后，我们就能发现一条更优路径，然后将现有连接透明升级（upgrade）过去。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但有一点需要关心：非对称路径。ICE 花了一些精力来保证通信双方选择的是相同的网络 路径，这样才能保证这条路径上有双向流量，能保持防火墙和 NAT 设备的连接一直处于 open 状态。自己实现的话，其实并不需要花同样大的精力来实现这个保证，但需要确保你所有使用的所有路径上，都有双向流量。这个目标就很简单了，只需要定期在所有已使用的路径上发 ping/pong 就行了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;健壮性与降级&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要实现健壮性，还需要检测当前已选择的路径是否已经失败了（例如，NAT 设备维护清掉了所有状态）， 如果失败了就要&lt;strong&gt;降级（downgrade）到其他路径&lt;/strong&gt;。这里有两种方式：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;持续探测所有路径，维护一个降级时会用的备用地址列表；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;直接降级到保底的中继模式&lt;/strong&gt;，然后再通过路径探测升级到更好的路径。&lt;/p&gt;&lt;p&gt;考虑到发生降级的概率是非常小的，因此这种方式可能是&lt;strong&gt;更经济&lt;/strong&gt;的。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;7.9 安全&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后需要提到安全。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文的所有内容都假设：我们使用的&lt;strong&gt;上层协议已经有了自己的安全机制&lt;/strong&gt;（ 例如 QUIC 协议有 TLS 证书，WireGuard 协议有自己的公钥）。如果还没有安全机制，那显然是要立即补上的。一旦动态切换路径，&lt;strong&gt;基于 IP 的安全机制就是无用的了&lt;/strong&gt; （IP 协议最开始就没怎么考虑安全性），至少要有&lt;strong&gt;端到端的认证&lt;/strong&gt;。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;严格来说，如果上层协议有安全机制，那即使收到是欺骗性的 ping/pong 流量，问题都不大， 最坏的情况也就是&lt;strong&gt;攻击者诱导两端通过他们的系统来中继流量&lt;/strong&gt;。而有了端到端安全机制，这并不是一个大问题（取决于你的威胁模型）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;但出于谨慎考虑，最好还是对路径发现的包也做认证和加密。具体如何做可以咨询你们的应用安全工程师。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;8 结束语&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们终于完成了 NAT 穿透的目标！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果实现了以上提到的所有技术，你将得到一个业内领先的 NAT 穿透软件，能在绝大多数场景下实现端到端直连。如果直连不了，还可以降级到保底的中继模式（对于长尾来说只能靠中继了）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但这些工作相当复杂！其中一些问题研究起来很有意思，但很难做到完全正确，尤其是那些 非常边边角角的场景，真正出现的概率极小，但解决它们所需花费的经历又极大。不过，这种工作只需要做一次，一旦解决了，你就具备了某种超级能力：探索令人激动的、相对还比较崭新的&lt;strong&gt;端到端应用&lt;/strong&gt;（peer-to-peer applications）世界。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;8.1 跨公网 端到端直连&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;去中心化软件&lt;/strong&gt;领域中的许多有趣想法，简化之后其实都变成了 &lt;strong&gt;跨过公网（互联网）实现端到端直连&lt;/strong&gt; 这一问题，开始时可能觉得很简单，但真正做才 发现比想象中难多了。现在知道如何解决这个问题了，动手开做吧！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;8.2 结束语之 TL; DR&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现健壮的 NAT 穿透需要下列基础：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;一种基于 UDP 的协议；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;能在程序内直接访问 socket；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有一个与 peer 通信的旁路信道；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;若干 STUN 服务器；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一个保底用的中继网络（可选，但强烈推荐）&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后需要：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;遍历所有的 &lt;code&gt;ip:port&lt;/code&gt;；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;查询 STUN 服务器来获取自己的公网 &lt;code&gt;ip:port&lt;/code&gt; 信息，以及判断自己这一侧的 NAT 的“难度”（difficulty）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用 port mapping 协议来获取更多的公网 &lt;code&gt;ip:ports&lt;/code&gt;；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;检查 NAT64，通过它获取自己的公网 &lt;code&gt;ip:port&lt;/code&gt;；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将自己的所有公网 &lt;code&gt;ip:ports&lt;/code&gt; 信息通过旁路信道与 peer 交换，以及某些加密秘钥来保证通信安全；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过保底的中继方式与对方开始通信（可选，这样连接能快速建立）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果有必要/想这么做，探测对方的提供的所有 &lt;code&gt;ip:port&lt;/code&gt;，以及执行生日攻击（birthday attacks）来穿透 harder NAT；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发现更优路径之后，透明升级到该路径；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果当前路径断了，降级到其他可用的路径；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;确保所有东西都是加密的，并且有端到端认证。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;引用链接&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;How NAT traversal works: &lt;em&gt;https://tailscale.com/blog/how-nat-traversal-works/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;How Tailscale Works: &lt;em&gt;https://tailscale.com/blog/how-tailscale-works/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;(译) NAT - 网络地址转换（2016）: &lt;em&gt;https://arthurchiao.art/blog/nat-zh/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;WebRTC: &lt;em&gt;https://webrtc.org/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;coordination server: &lt;em&gt;https://tailscale.com/blog/how-tailscale-works/#the-control-plane-key-exchange-and-coordination&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;STUN: &lt;em&gt;https://en.wikipedia.org/wiki/STUN&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;STUN: &lt;em&gt;https://en.wikipedia.org/wiki/STUN&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;RFC 4787: &lt;em&gt;https://tools.ietf.org/html/rfc4787&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;4787: &lt;em&gt;https://tools.ietf.org/html/rfc4787&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;p&gt;5382: &lt;em&gt;https://tools.ietf.org/html/rfc5382&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11]&lt;/span&gt;&lt;p&gt;5508: &lt;em&gt;https://tools.ietf.org/html/rfc5508&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12]&lt;/span&gt;&lt;p&gt;DERP: &lt;em&gt;https://tailscale.com/blog/how-tailscale-works/#encrypted-tcp-relays-derp&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[13]&lt;/span&gt;&lt;p&gt;RFC 4787: &lt;em&gt;https://tools.ietf.org/html/rfc4787&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[14]&lt;/span&gt;&lt;p&gt;birthday paradox: &lt;em&gt;https://en.wikipedia.org/wiki/Birthday_problem&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[15]&lt;/span&gt;&lt;p&gt;python calculator: &lt;em&gt;https://github.com/danderson/nat-birthday-paradox&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[16]&lt;/span&gt;&lt;p&gt;UPnP IGD: &lt;em&gt;https://openconnectivity.org/developer/specifications/upnp-resources/upnp/internet-gateway-device-igd-v-2-0/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[17]&lt;/span&gt;&lt;p&gt;NAT-PMP: &lt;em&gt;https://tools.ietf.org/html/rfc6886&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[18]&lt;/span&gt;&lt;p&gt;PCP: &lt;em&gt;https://tools.ietf.org/html/rfc6887&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[19]&lt;/span&gt;&lt;p&gt;大约 33% 是 IPv6: &lt;em&gt;https://www.google.com/intl/en/ipv6/statistics.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[20]&lt;/span&gt;&lt;p&gt;RFC 8445: &lt;em&gt;https://tools.ietf.org/html/rfc8445&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>