<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>be857711c40dbbdd3fb798d9b77fed79</guid>
<title>遇到这种面试官，去了也没啥前途</title>
<link>https://toutiao.io/k/e815f46</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原创不易，求分享、求一键三连&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前段时间有个粉丝抱怨了一个问题：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;blockquote&gt;&lt;p&gt;小钗，我最近面试遇到个非常不尊重人的面试官，全程咄咄逼人，语气轻蔑，可把我气坏了！&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然面试就是评价候选人，但并不意味着面试官就一定强，所以有以下三种行为的面试官特别要反思：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;人格侮辱；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;问很偏门的问题，并否定候选人职业生涯；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;欺骗候选人；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;怎么说呢，其实我在面试这块做的并不好，因为我觉得面试是一件&lt;strong&gt;ROI较低&lt;/strong&gt;的事，带有很大的不确定性，可说是耗时费力了，所以除非必要我全部都会躲...&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一方面，我面试尺度较大，比较宽松，只要没有重大缺陷，都倾向于放进来试试，所以绝对不能让我作为一号把关者。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但招人是人才运营至关重要重要的第一步，还是十分值得深入探讨，首先说下什么是面试。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;面试的本质&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我认为面试的本质是梯队建设，一般来说是团队某个位置缺人了，需要补足缺口。但这里马上就有一个值得玩味的问题，什么位置缺人，缺什么人？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就个人经历来说，缺三种人：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一梯队合作伙伴；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二梯队干部；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三梯队干活的；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;第一圈层&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先说第一梯队，这批人会从事团队中最核心的工作，除了能力本身没有大问题外，对&lt;strong&gt;忠诚度&lt;/strong&gt;要求极高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为重要性，这种人很难直接招，因为将资源给到了不合适的人手里，极可能&lt;strong&gt;能力越大，伤害越大&lt;/strong&gt;；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除非私交很好，否则一般不会直接外招，但私交好会走&lt;strong&gt;绿色通道&lt;/strong&gt;，也不存在面试问题了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;偶也会外招一些进来，但多数都磨合不好，一段时间流失了，落下一地鸡毛；但也有少数比较契合的会融入团队，成为中流砥柱。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;第二圈层&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次是第二梯队，从这个部分开始，一定会外招，而且必须保证每年有一定比例的进出：问渠那得清如许，为有源头活水来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一梯队一般有多年战斗情谊，但能力未必最优，因为私交甚至可能会有所放纵，团队需要在两个方面帮助他们：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;新的能力输入，可能是管理理念，可能是技术能力，这些是外招第二梯队的主要目的；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;放进一些鲶鱼，引导团队做良性竞争，毕竟作为&lt;strong&gt;Leader要让自己有的选&lt;/strong&gt;；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;第三圈层&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后就是一线同学招聘了，对于这些同学，如果职级不是太高，都是将权限下放给其他Leader就好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上，团队第一梯队很少外招，第二梯队会有不小的比例外招，招进来也就是我们俗称的中层干部了，团队对他们的期待有三：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;为团队带来新的能力，可以是拉高上限，也可以是让团队能力更加全面；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;增加团队良性竞争氛围，让有些想躺平的同学不敢躺；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;外招中层还有个重要工作就是完成本质那部分工作；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二梯队一般为市面上的P7、P8，大公司职级往上挪一两级即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看出，从招聘目的来说，第二梯队这批同学日子就是&lt;strong&gt;不好过&lt;/strong&gt;...&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而基层员工是一个萝卜一个坑，反而没什么好说的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8888888888888888&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTCLG63G4abiaxJn2P8Piaicuz8SibTneLibRw45skLqcgFdhIsogwSIwTUBqJ5aUFM5xQhxE1blE2pziaDg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不同圈层同学掌握的资源不一样，对应同学如果抓住机会好好利用资源，这种经历会造成人与人根本的差距。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;因人设岗&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因岗设人是正途，团队当前缺什么，我们就补充什么。但依旧会有因人设岗的场景：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我们面了一个人，各方面都十分契合，而且本身蕴含的潜力或者资源对团队中远期会有莫大帮助，这真的是不错的人才啊。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;短期对团队帮助很大，其能力长期来说也是团队所需，那这个时候会强行将当前蛋糕分一块出来给他：天上掉下歌林妹妹，不要白不要！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;如何面试&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面聊了站在&lt;strong&gt;团队角度&lt;/strong&gt;是怎么看面试这件事的：主要招聘的是第二梯队和第三梯队，除非特别合适，不会放入第一梯队。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以面试者可以对自己未来工作有个初步的预期，不要想一步登天。接下来我们围绕如何面试展开。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;如何面试&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试为团队是做梯队补充，对面试官来说是对人做评价。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一旦涉及评价，就会有方法论，不同的面试者用的方法论不一样，我一直用的都是五维模型及Leader的五件事：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9297052154195011&quot; data-type=&quot;png&quot; data-w=&quot;1764&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTCLG63G4abiaxJn2P8Piaicuz8oIfSlqBGJX9btk3hvo2WflLxTjqSic6OCC9vC23por9yDZOMFhlXibPg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;blockquote&gt;&lt;p&gt;leader是个相对复杂的工种，对于能力我这边用的是&lt;strong&gt;五维评价模型&lt;/strong&gt;：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;战略能力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;战术能力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;信息收集能力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;表达（营销）能力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;持之以恒的能力&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;然后话题会围绕5件事展开：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;选题做战略；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;梯队建设；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;资源协调；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;核心辅导；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;机制匹配；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从面试结构来说是这样的：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;自我介绍。考察表达能力；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你处理过&lt;strong&gt;最难的三件事&lt;/strong&gt;是什么，再来一次会如何。综合考察，重点聊天部分；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;工作中，你最讨厌的一个人。观察人际交往；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;工作中，你最认可的一个人。观察短期志向；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你的待遇期待。考察ROI；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你期望自己在新团队是什么样的角色。双方预期拉齐；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你为什么离职。考察持之以恒和忠诚度；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你未来两年的工作规划是什么。考察忠诚度和潜力；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优先从案例看是不是战略级人才，是否具备&lt;strong&gt;独立思考&lt;/strong&gt;能力，这里的核心是选题，是如何帮助团队找到接下来要以什么为目标，并且说清楚为什么是这个目标。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;交流过程中，一旦碰到以下信息都可以深挖：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;是否作为产品一号位完成了项目，项目的规模是什么，做到了什么程度，有没有数据佐证；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;是否有骚操作获取资源的案例，在什么难度下，获取了什么样的资源，如果是部门负责人，怎么做预算的，如何做资源分配的，底层逻辑是什么；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;是否有管理经验，怎么做的梯队建设，案例是什么；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何做人才辅导，项目辅导，下面同学遇到问题怎么处理的，是补位还是漠不关心，怎么看待补位的；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;所在团队运行的核心机制是什么，什么是好的机制，什么是不好的机制，是否有机制设计及推行的经历；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重要内容都是围绕&lt;strong&gt;最难三件事&lt;/strong&gt;展开，如果面试者自己有预期有节奏，面试官就应该跟着面试者的节奏走；如果面试者没节奏，那么面试官就要带节奏。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是对于中高阶人才，如果没有带节奏的意识，那是态度问题还是平时不总结问题，或者表达问题？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相信我，无论什么原因，都不是一个好的开始。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;选择权转移&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你对面试者比较满意的时候，就要思考对方入职的成本怎么样了，最后需要将选择权交给面试者，可以有以下对话：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;你的家庭情况如何；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你上班的成本如何；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你的待遇预期如何；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我们是什么样的公司；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当前团队是什么样的；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你如果进来会是什么样的工作，团队对你的期待是什么；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你有什么想问的；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样的下去，高强度30分钟的对话，可以初步了解一个人，但也就是初步了解一个人罢了，后续工作中才会真正知道该同学的能力与韧性。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;胳膊肘外拐&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果碰到特别合适的候选人，为了加大候选人入职概率，用人部门很可能会胳膊肘往外拐，比如说我常常就会扮演这个角色，一般来说会有以下行为：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;稍微抬高候选人的面试评价，提高其议价能力；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;教候选人如何与HR交流，该说什么，不该说什么，如何要待遇；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;酌情美化现有团队，忽悠其进入；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;留下微信，不断传递消息；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结语&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试属于人才运营机制（梯队建设）的一环：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.357166722352155&quot; data-type=&quot;png&quot; data-w=&quot;5986&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTCLG63G4abiaxJn2P8Piaicuz85eW4ibSpADb1jHJ5FFbCpH9kT5yd4QqKicvrLgvCZBoljYQk8gkicoexg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然面试是一个体力活，但新人入场后的表现更是直接ROI的体现，这是整个人才运营（梯队建设）的事，大家既要看到全貌，又要掌握面试分支的技巧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，今天的分享就到这，喜欢的同学可以四连支持：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11333333333333333&quot; data-type=&quot;png&quot; data-w=&quot;600&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTCLG63G4abiaxJn2P8Piaicuz8ZQdageBqiaecvLg9ITxMqk39iaY2cy43iaGDnsSt8hqG3HHBFLxyFRAqw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想要更多交流可以加我微信：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5549076773566569&quot; data-type=&quot;png&quot; data-w=&quot;2058&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTCLG63G4abiaxJn2P8Piaicuz8zGabYsLQM2vm4nGkbZEyf4W6rMENAL43FCicU0OdJsleGBn9XLvmWjw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>31b405c0cc330f13e95e101ab524aaf1</guid>
<title>全面解读！Golang中泛型的使用</title>
<link>https://toutiao.io/k/68j23an</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.13125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe94xFM2RX1fYJ1Tz9VEicAPCrbntSm88RQq2s6XBuWbyBeSleAfrPAoQvytBh3Wdiagz6sY4AHHzricYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;导语 | &lt;/span&gt;&lt;span&gt;Golang在2022-03-15发布了V1.18正式版，里面包含了对泛型的支持，那么最新版本的泛型如何使用呢？&lt;/span&gt;&lt;span&gt;有哪些坑呢？&lt;/span&gt;&lt;span&gt;本文全面且详细的带你了解泛型在Golang中的使用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;一、什么是泛型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;8c2011fe7977c79c57258f08c7c970ac1&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;d2585167cb37bd93a987c386f6b479bf2&quot;&gt;&lt;span&gt;说起泛型这个词，可能有些人比较陌生，特别是PHP或者JavaScript这类弱语言的开发者，尤其陌生。因为在这些弱语言中，语法本身就是支持不同类型的变量调用的。可以说无形之中早已把泛型融入语言的DNA中了，以至于开发者习以为常了。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;02bb12f32eaa0e6abf26f295ae4974212&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;02bb12f32eaa0e6abf26f295ae4974212&quot;&gt;&lt;span&gt;举个PHP中的泛型的例子：&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;bfa33e77ddd704e2e931d53140230ba32&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;bfa33e77ddd704e2e931d53140230ba32&quot;&gt;&lt;span&gt;我们定义了一个sum函数，参数是传入2个变量，返回值是2个变量的求和。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;($a, $b)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; $a+$b;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你可以在PHP中这样调用这个函数：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sum(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;code-snippet__regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sum(&lt;span class=&quot;code-snippet__number&quot;&gt;1.23&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2.34&lt;/span&gt;);  &lt;span class=&quot;code-snippet__regexp&quot;&gt;//return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;3.57&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sum(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;2.33&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;54.222&quot;&lt;/span&gt;);  &lt;span class=&quot;code-snippet__regexp&quot;&gt;//return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;56.552&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;115515e83223a9d33f8c60799f2e4a642&quot;&gt;&lt;span&gt;我们可以传入不同类型的变量，可以是int, string, float型，这样一来，不仅精简了代码量，也使得开发者写出更加通用的代码逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;9b64d64ab4ff15b1ae6779ffb1b7b6de1&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;402496da3138a4586d8e439e7ca7c71a2&quot;&gt;&lt;span&gt;那么回到标题，啥是泛型呢？一句话总结就是：&lt;/span&gt;&lt;span&gt;定义一类通用的模板变量，可以传入不同类型的变量，使得逻辑更加通用，代码更加精简&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;1c906d0c773c2aa58f5c20f2f1a850222&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;1c906d0c773c2aa58f5c20f2f1a850222&quot;&gt;&lt;span&gt;但是！在Java，Golang，C++等这类静态语言中，是需要严格定义传入变量的类型的，并不能随心所欲。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;b1613c60d22af0307e4913b36e955f3b2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;b1613c60d22af0307e4913b36e955f3b2&quot;&gt;&lt;span&gt;举个Golang的例子：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(a, b &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; a + b&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在函数Sum中，不仅需要严格定义传入参数a和b的变量类型，而且返回值的类型也需要严格定义。所以，你只能传入int类型，进行这样调用：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Sum(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你传入的是其他类型的变量，就会报错：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Sum(1.23, 2.54)); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./main.go:33:18: cannot &lt;span class=&quot;code-snippet__keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1.23&lt;/span&gt; (untyped &lt;span class=&quot;code-snippet__built_in&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;constant&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; argument &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;Sum&lt;/span&gt; (truncated)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./main.go:&lt;span class=&quot;code-snippet__number&quot;&gt;33&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;24&lt;/span&gt;: cannot &lt;span class=&quot;code-snippet__keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2.54&lt;/span&gt; (untyped &lt;span class=&quot;code-snippet__built_in&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;constant&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; argument &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;Sum&lt;/span&gt; (truncated)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，Golang开发者如果想开发一个类似实现2个float类型变量相加的功能，只能另写1个函数：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;func &lt;span class=&quot;code-snippet__title&quot;&gt;SumFloat&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;a, b &lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; a + b&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;或者是写一个通用的Sum函数使用interface反射来判断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(a, b &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;{} {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;switch&lt;/span&gt; a.(&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    a1 := a.(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    b1 := b.(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; a1 + b1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    a1 := a.(&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    b1 := b.(&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; a1 + b1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;c5bad9cd140607cd9b4bd6a4cc4216ac2&quot;&gt;&lt;span&gt;这样一来，不仅重复了很多的代码，而且频繁的类型转换，不仅繁琐性能低，而且在安全性上也不高。所以，&lt;/span&gt;&lt;span&gt;Golang开发者希望官方在新版中增加泛型的特性支持，从这门语言诞生至今，呼吁声从未减少过&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;二、泛型的利和弊&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;8c2011fe7977c79c57258f08c7c970ac1&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;bb63d943ef966248d88101b2184e85892&quot;&gt;&lt;span&gt;然而泛型其实是一把双刃剑，既可能给开发者带来了便利，但是同样会带来编译和效率的问题。我们都知道，Golang不仅在编译速度还是性能上，口碑一直是非常不错的，如果引入泛型的语法，虽然便利了开发者，但是在语言的系统级别上，泛型是需要系统去推倒和计算变量的类型的，这在无形中会增加编译的时间和降低运行效率。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;aa6353b782989f5d44e21a782fb22e5a2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;aa6353b782989f5d44e21a782fb22e5a2&quot;&gt;&lt;span&gt;如何既能让开发者少写代码，又能让编绎时间不会过多增加，也不能让运行效率降低 &lt;/span&gt;&lt;span&gt;，这是Golang官方苦苦在追求的平衡点。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;bd332848492a9b2420d003563776049a2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;bd332848492a9b2420d003563776049a2&quot;&gt;&lt;span&gt;然而，几千年前，孟子就说过：“鱼和熊掌不可兼得”。所以，这个事情本身就很难。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e6a0803310265fcda41119b5856cd3412&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e6a0803310265fcda41119b5856cd3412&quot;&gt;&lt;span&gt;我们先看下其他静态语言是如何实现泛型的。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;83e213a756db123908d2a0a1bf71b6912&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;83e213a756db123908d2a0a1bf71b6912&quot;&gt;&lt;span&gt;C++是在编译期间类型特化实现泛型，但是编译器的实现变得非常复杂，会生成的大量重复代码，导致最终的二进制文件膨胀和编译缓慢。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e75c6f4acc93d5682fa76339d81a60232&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e75c6f4acc93d5682fa76339d81a60232&quot;&gt;&lt;span&gt;Java是用类型擦除实现的泛型，编译器会插入额外的类型转换指令，会降低程序的执行效率。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;6519f48c81148bcad7162b47fe32468f2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;6519f48c81148bcad7162b47fe32468f2&quot;&gt;&lt;span&gt;那么Golang中是如何实现泛型的呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;三、Golang中的泛型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;8c2011fe7977c79c57258f08c7c970ac1&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;671b545906d6e32f4a75edfd8a5864d52&quot;&gt;&lt;span&gt;千呼万唤始出来，官方在进行多次的提案和投票后，终于在2022年3月15日终于推出了支持泛型的版本: Go1.18。我们可以从官网下载对应我们操作系统的1.18+版本，并且升级一下最新的goland编辑器，以便更好的学习和错误提示。当然你也可以在gotip上&lt;/span&gt;&lt;span&gt;https://gotipplay.golang.org/&lt;/span&gt;&lt;span&gt;直接运行带有泛型的代码。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;2f608079ace36893c7f3aa2885b2dc762&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;2f608079ace36893c7f3aa2885b2dc762&quot;&gt;&lt;span&gt;我们看下，在Golang 1.18版本中是如何利用泛型来实现上面的Sum函数的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;markdown&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;func Sum[&lt;span class=&quot;code-snippet__string&quot;&gt;T int|float64&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;a,b T&lt;/span&gt;) T {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  return a + b&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后，我们调用一下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;markdown&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Sum[&lt;span class=&quot;code-snippet__string&quot;&gt;int&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;1, 2&lt;/span&gt;))  //3&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Sum[&lt;span class=&quot;code-snippet__string&quot;&gt;float64&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;1.23, 2.54&lt;/span&gt;))  //3.77&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;6f5cd9124b102837c6250f67000fc7882&quot;&gt;&lt;span&gt;先不去理解这个函数中各个组件的含义，仅仅是看代码量就非常简洁，一个函数就实现了多个类型的功能。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e3d9c59b595d308cc09c090af9f1dc582&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e3d9c59b595d308cc09c090af9f1dc582&quot;&gt;&lt;span&gt;下面我们就来仔细的了解一下泛型的语法。因为泛型针对的是类型变量，在Golang中，类型是贯穿整个语法生态的，比如：变量、函数、方法、接口、通道等等。我们就先从单独的泛型变量类型说起。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;四、泛型变量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;8c2011fe7977c79c57258f08c7c970ac1&quot;&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;5e2195829165eb59bf63872e32eba4cf&quot;&gt;&lt;span&gt;（一）泛型切片变量&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;753c91672610a7c60e99e09fd3aa83892&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;753c91672610a7c60e99e09fd3aa83892&quot;&gt;&lt;span&gt;我们可以这样定义1个泛型变量，比如，我们定义一个泛型切片，切片里的值类型，即可以是int，也可以是float64，也可以是string：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Slice1 [T &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] []T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;33181a9a3382d4d0a4566b331aae14052&quot;&gt;&lt;span&gt;我们来仔细剖析一些这个写法。定义泛型和定义其他go类型一样，也是使用type关键字，后面的Slice1就是泛型变量名，后面紧接一个中括号[]。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;cd3283051f2813f716913e68347382572&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;cd3283051f2813f716913e68347382572&quot;&gt;&lt;span&gt;我们重点看下Slice1[]里面的内容，它是定义泛型的核心：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;89892913bf975585a1987e7521f1ce7c2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;89892913bf975585a1987e7521f1ce7c2&quot;&gt;&lt;span&gt;我们把这整个类型，就叫做Slice1[T]，它是一个切片泛型变量。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;1206d951d0efed885f520e2e198891bc2&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;1206d951d0efed885f520e2e198891bc2&quot;&gt;&lt;span&gt;所以，总结一下：&lt;/span&gt;&lt;span&gt;我们把需要用到的类型参数，提前在[]里进行定义，然后在后面实际的变量类型中进行使用，必须要先定义，后使用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;2b5eb01874b9637f5b7a25a1d215ffa11&quot;&gt;&lt;span&gt;所以，上面的写法，我们按照它的类型约束的范围，拆开后，就等同这样：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; SliceInt []&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; SliceFloat []&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; SliceInt []&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;89084ddb1e2f32c33b39814898f564402&quot;&gt;&lt;span&gt;是不是节省了大量的代码量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;5d21a74d00069bf6e5a788ebb9c9e210&quot;&gt;&lt;span&gt;（二）泛型map变量&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;31e6465974abb6d973011175c5f716052&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;31e6465974abb6d973011175c5f716052&quot;&gt;&lt;span&gt;同理，我们可以试着定义其他类型的泛型变量，定义Map1[KEY, VALUE]泛型变量，它是一个map类型的，其中类型参数KEY的类型约束是int|string，类型参数VALUE的类型约束为string|float64。它的类型参数列表有2个，是：KEY int|string, VALUE string| float64。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Map1 [KEY &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;, VALUE &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;| &lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;] &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[KEY]VALUE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们拆开来看，它等同于下面的集合：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Map2 &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Map3 &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Map4 &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Map5 &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;daae0ee2c6608072c15e8e233fbf220c&quot;&gt;&lt;span&gt;（三）泛型结构体变量&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;bf23a134b52c9f653c85e49a2f43ae052&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;bf23a134b52c9f653c85e49a2f43ae052&quot;&gt;&lt;span&gt;同理，我们再创建1个结构体的泛型变量。其中的泛型参数T，有3个类型约束。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Struct1 [T &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;] &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Title &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Content  T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;拆开来看，它等于下面的集合：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Struct3 &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Title &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Content  &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Struct4 &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Title &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Content  &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Struct5 &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Title &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Content  &lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;daa162857d18a21f34f460069cea42af&quot;&gt;&lt;span&gt;（四）泛型变量实例化&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;a51e9a7eb15146f001dee1fe95bffd752&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;a51e9a7eb15146f001dee1fe95bffd752&quot;&gt;&lt;span&gt;OK，我们弄清楚了如何定义一个泛型变量后，那么如何去实例化这个变量呢？我们先看下申明了一个普通的变量是如何实例化使用呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; MyInt &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; int1 MyInit = &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(int1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那我们也尝试这样子用泛型变量去实例化一下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Slice1 [T &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] []T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; MySlice Slice1[T] = []&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们运行后，是会报错的，提示T没定义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./main.go:&lt;span class=&quot;code-snippet__number&quot;&gt;47&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;21&lt;/span&gt;: &lt;span class=&quot;code-snippet__literal&quot;&gt;undefined&lt;/span&gt;: T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为，&lt;/span&gt;&lt;span&gt;在泛型里面，你如果去要实例化一个泛型变量，你需要去显示的申明实际传入的变量(也就是实参)是什么类型，用它去替换T&lt;/span&gt;&lt;span&gt;。所以你得这样：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Slice1 [T &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] []T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; MySlice1 Slice1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;] = []&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;MySlice2 := Slice1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; MySlice3 Slice1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] = []&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;small&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yang&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;MySlice4 := Slice1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;small&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yang&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; MySlice5 Slice1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;] = []&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;{&lt;span class=&quot;code-snippet__number&quot;&gt;1.222&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3.444&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;5.666&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;MySlice6 := Slice1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;]{&lt;span class=&quot;code-snippet__number&quot;&gt;1.222&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3.444&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;5.666&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;40e413d7a52bd3241f671919a5d63b272&quot;&gt;&lt;span&gt;OK，当我们知道了如何去实例化1个泛型切片变量后，我们再来快速看一下，上面其他几个泛型变量的实例化。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;69bf39d621a36981fc308d5e71f445802&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;69bf39d621a36981fc308d5e71f445802&quot;&gt;&lt;span&gt;map类型的泛型变量实例化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Map1[KEY &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;, VALUE &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;] &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[KEY]VALUE&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; MyMap1 Map1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] = &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;small&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;MyMap2 := Map1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;small&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(MyMap1,MyMap2) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; MyMap3 Map1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] = &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;one&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;two&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;small&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;MyMap4 := Map1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;one&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;two&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;small&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(MyMap3, MyMap4) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;结构体泛型变量实例化：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Struct1 [T &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;] &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Title &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Content  T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; MyStruct1 Struct1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;MyStruct1.Title = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;MyStruct1.Content = &lt;span class=&quot;code-snippet__number&quot;&gt;3.149&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; MyStruct2 = Struct1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Title:   &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Content: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;small&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(MyStruct1,MyStruct2) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;说到结构体变量，在go里面是可以使用匿名的，即把结构体的申明定义和初始化一起完成，举个例子&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;stu := &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Name &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Age &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Weight &lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;smallyang&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__number&quot;&gt;18&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__number&quot;&gt;50.5&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Student =&quot;&lt;/span&gt;, stu) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么，泛型结构体变量，是否也支持匿名呢？我们来试一下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;stu2 := &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;[T &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;] {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Name   &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Age    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Weight T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;smallyang&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__number&quot;&gt;18&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Student =&quot;&lt;/span&gt;, stu2)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你在编辑器里写出这端代码，编辑器会直接标红，提示语法错误，也就是&lt;/span&gt;&lt;span&gt;go无法识别这个匿名写法，不支持匿名泛型结构体&lt;/span&gt;&lt;span&gt;，如果你运行一下，也会报错：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./main.&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;70&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt;: syntax error: unexpected [, expecting {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./main.&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;72&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;: syntax error: unexpected &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; at end of statement&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./main.&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;73&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;: syntax error: unexpected T at end of statement&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./main.&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;74&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;: syntax error: unexpected [ after top level declaration&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;72f245d89c72f3916346b72ffddfe023&quot;&gt;&lt;span&gt;（五）泛型变量嵌套&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;ab67eb5673bd193fdc1df0d10463fca92&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;ab67eb5673bd193fdc1df0d10463fca92&quot;&gt;&lt;span&gt;就像常量申明的变量类型支持嵌套一样，泛型变量也是支持嵌套的。我们把上面几种情况结合一下，来一个复杂点的例子：&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f303e2d3f2e8d9028a2cbeb45dd94ed12&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f303e2d3f2e8d9028a2cbeb45dd94ed12&quot;&gt;&lt;span&gt;在泛型参数列表中，我们定义了2个泛型变量，1个是S，另一个是嵌套了S的map泛型变量P&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type MyStruct[S &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;, P &lt;span class=&quot;code-snippet__built_in&quot;&gt;map&lt;/span&gt;[S]&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;] &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Name    &lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Content S&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Job     P&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;或许你现在应该很轻松的就知道如何去实例化了，值得注意的是，T和S要保持实参的一致。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; MyStruct1 = MyStruct[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Name:    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;small&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Content: &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Job:     &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ss&quot;&lt;/span&gt;},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Printf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%+v&quot;&lt;/span&gt;, MyStruct1) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; MyStruct2 = MyStruct[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Name:    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;small&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Content: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yang&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Job:     &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;aa&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ss&quot;&lt;/span&gt;},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Printf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%+v&quot;&lt;/span&gt;, MyStruct2)  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;76d850d8a372cebd1e291c2825a80a5b2&quot;&gt;&lt;span&gt;我们再来看一下，稍复杂的例子，2个泛型变量之间的嵌套使用，Struct1这个结构体切片，它的第二个泛型参数的类型是Slice1。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;76d850d8a372cebd1e291c2825a80a5b2&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Slice1[T &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] []T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Struct1[P &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;, V Slice1[P]] &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Name  P&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Title V&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;c9a9c052ceec07eddad2e1ee05d69fce1&quot;&gt;&lt;span&gt;这种情况，如何实例化呢？好像有点复杂的样子，无法下手。但是，万变不离其宗，请始终记住：&lt;/span&gt;&lt;span&gt;在泛型里面，你如果去要实例化一个泛型变量，你需要去用实际传入的变量类型去替换T&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;d6b1321e3678ebe29aa3b6fb1f14b6242&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;d6b1321e3678ebe29aa3b6fb1f14b6242&quot;&gt;&lt;span&gt;明白了这个道理，应该就好下手了：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mySlice1 := Slice1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;myStruct1 := Struct1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;, Slice1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]]{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Name:  &lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Title: []&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;myStruct2 := Struct1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;, Slice1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]]{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Name:  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Title: []&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;small&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yang&quot;&lt;/span&gt;},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(mySlice1, myStruct1, myStruct2) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后再来看另一种嵌套的方式，看起来更复杂。直接来看这个例子：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Slice1[T &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] []T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Slice2[T &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] Slice1[T]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然这个例子本身是没有任何的意义，我们只是抱着学习的角度去这样尝试，那么如何实例化呢？通过上面的学习，应该就很简单了：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mySlice1 := Slice1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mySlice2 := Slice2[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;small&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(mySlice1, mySlice2) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你会发现，Slice2其实就是继承和实现了Slice1，也就是说Slice2的类型参数约束的取值范围，必须是在Slice1的取值范围里。我们可以尝试改一下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Slice1[T &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] []T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Slice2[T &lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] Slice1[T]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mySlice1 := Slice1[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mySlice2 := Slice2[&lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt;]{&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;运行一下，会报错。会提示申明Slice2的这一行代码中的泛型参数T，没有实现Slice1中定义的3个泛型参数列表。也就得出了上面的结论。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./main.&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;73&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;44&lt;/span&gt;: T does not implement &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;|&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，我们可以继续尝试一下更加变态的嵌套写法：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Slice1[T &lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;] []T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Slice2[T &lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] Slice1[T]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Slice3[T &lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;] Slice2[T]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;d880a973ba7471c31ac6c6575fdad58f2&quot;&gt;&lt;span&gt;通过上面的解释，或许你就可以一眼看出问题再哪儿了，Slice3的取值范围，并不是再Slcie2的范围中，因为多了一个int类型。或许你会说，Slice1这个母变量的取值范围里就有int啊，为啥会报错呢？因为它是单一递归继承的，只会检查它的上一级的取值范围是否覆盖。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;d880a973ba7471c31ac6c6575fdad58f2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;d880a973ba7471c31ac6c6575fdad58f2&quot;&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;五、泛型函数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;8c2011fe7977c79c57258f08c7c970ac1&quot;&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;e5e4f72270c9e1bf76bc7ee46e7ebc4f&quot;&gt;&lt;span&gt;（一）泛型函数的申明&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;36d21feb9fd1fec103e022896e10b7c82&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;36d21feb9fd1fec103e022896e10b7c82&quot;&gt;&lt;span&gt;当我们深入了解了go中各个泛型变量的申明定义和实例化，以及个各种复杂的嵌套之后，我们接下来来了解一下，go中的用的最多的函数是如何运用泛型的。这就回到了我们文章最开始的那个例子：&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;346ba83a343465241d5a99afe03a9b642&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;346ba83a343465241d5a99afe03a9b642&quot;&gt;&lt;span&gt;计算2个数之和&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;markdown&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;func Sum[&lt;span class=&quot;code-snippet__string&quot;&gt;T int|float64&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;a,b T&lt;/span&gt;) T {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  return a + b&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;4e54f727c604ce1bad8719ee263e0e802&quot;&gt;&lt;span&gt;他的写法，和泛型变量写法其实基本类似，我们解刨一下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;979cf10d0f13cd3d74ad2f1a99d5a6ef&quot;&gt;&lt;span&gt;（二）泛型函数的调用&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;917c89557e264a5a06705c11059960e62&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;917c89557e264a5a06705c11059960e62&quot;&gt;&lt;span&gt;OK，当我们剖析完成之后，我们可以这样去调用一下这个函数：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;markdown&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;//传入int的实参，返回值类型也是int&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;intSum := Sum[&lt;span class=&quot;code-snippet__string&quot;&gt;int&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;1, 2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;//传入float64的实参，返回值类型也是float64&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;float64Sum := Sum[&lt;span class=&quot;code-snippet__string&quot;&gt;float64&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;1.23, 2.45&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(intSum, float64Sum) //3 3.68&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;59ced8607018cfa46d63ecf69ec2c5482&quot;&gt;&lt;span&gt;你会发现，泛型函数的调用和泛型变量实例化一样，就是得显示的申明一下实际的这个T，到底是什么类型的。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;214fc8aaf192e2c05b45f2e95c8312f32&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;214fc8aaf192e2c05b45f2e95c8312f32&quot;&gt;&lt;span&gt;但是，这种调用写法也太奇怪了，完全不像是go语言，反倒是像是一门新语言一样，所以，贴心的go官方，允许你这样写：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;intSum := Sum(1, 2)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;float64Sum := Sum(1.23, 2.45)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(intSum, float64Sum) //3 3.68&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;ecf67a2a03fe7fc39eb6ecc622e7f4b92&quot;&gt;&lt;span&gt;是不是鹅妹子婴！这样一来，就彻底打破了普通函数和泛型函数的调用写法的沟壑，更加自然融为一体。其实这里也是利用了类型推导。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f3a87dc46074f26f5cd0e4dba93db4ba2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f3a87dc46074f26f5cd0e4dba93db4ba2&quot;&gt;&lt;span&gt;我们可以回忆一下，go里面的类型推导的用法：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;a := &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;b := &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么这里调用泛型函数也就说的通了：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;intSum := Sum(1, 2) // 自动推导出T 是int&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;float64Sum := Sum(1.23, 2.45) //自动推导出T是 float64&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来，我们把泛型函数和泛型变量结合起来，看下这个复杂一点的例子：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;markdown&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;func Foreach[&lt;span class=&quot;code-snippet__string&quot;&gt;T int | int8 | int16 | int32 | int64 | uint | uint8 | uint16 | uint32 | uint64 | float32 | float64&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;list []T&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  for _, t := range list {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__code&quot;&gt;    fmt.Println(t)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;ea78d741f74d32a15aa0b8846ed56fec2&quot;&gt;&lt;span&gt;我们定义了一个类泛型型参数T，你会发现他的类型约束巨长，把数字类型都包括进来了，函数的作用是遍历打印这个[]T切片，功能很简单。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;4c1c1b22df3d1c87d6ed55ef3e1a8bc82&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;4c1c1b22df3d1c87d6ed55ef3e1a8bc82&quot;&gt;&lt;span&gt;我们可以仔细看这个类型约束列表，你会觉得它非常长，不仅在编辑器中显示不全不美观，而且再重构或者维护的时候，也会出现问题。强迫症患者肯定会受不了。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;5c6a84a4b4240df24e25a89d8bc427392&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;5c6a84a4b4240df24e25a89d8bc427392&quot;&gt;&lt;span&gt;那么有没有啥好的解决方案呢？既然这样问了，那么肯定是有的。答案就是：自定义类型约束&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;c485e7ff6a26689e3bd338b0bdfb538b&quot;&gt;&lt;span&gt;（三）自定义类型约束&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f1e521d50199a473f2b5aa160e77c8472&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f1e521d50199a473f2b5aa160e77c8472&quot;&gt;&lt;span&gt;直接上自定义的写法，看起来一下子就清爽了许多，有没有？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; MyNumber &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int8&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int16&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int32&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int64&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint8&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint16&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint32&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint64&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;float32&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Foreach&lt;/span&gt;[&lt;span class=&quot;code-snippet__title&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MyNumber&lt;/span&gt;]&lt;span class=&quot;code-snippet__params&quot;&gt;(list []T)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, t := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; list {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.Println(t)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;170d51cd580def2556da5397526bc2122&quot;&gt;&lt;span&gt;我们仔细看下这个自定义类型约束的写法，你会发现，它用的是interface的写法。这个写法在go1.18之前的语法中，是来申明一个接口类型的。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;be428bf8410c05502d42c792e31399a72&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;be428bf8410c05502d42c792e31399a72&quot;&gt;&lt;span&gt;比如，我们熟知的这个Error的例子：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; error &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__built_in&quot;&gt;Error&lt;/span&gt;() &lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;847f10817ed595c9827d8098d63ffa682&quot;&gt;&lt;span&gt;那么如何分区，哪些是接口，哪些是自定义类型约束呢？这个我们接下来在泛型接口篇里来继续深挖。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f52040cdc3896a9b717c1050115854292&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f52040cdc3896a9b717c1050115854292&quot;&gt;&lt;span&gt;自定义约束类型的并集&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;b93afa6a807fe607810dbaef6426d3ff2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;b93afa6a807fe607810dbaef6426d3ff2&quot;&gt;&lt;span&gt;我们继续看这个自定义的类型约束。上面我们写了一个自定义的约束变量MyNumber，你有没有觉得，它还是依然是太长了，那么我们可以继续拆分，因为接口类型是支持嵌套使用的。我们可以继续拆分：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myInt &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int8&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int16&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int32&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myUint &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint8&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint16&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint32&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myFloat &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;float32&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Foreach&lt;/span&gt;[&lt;span class=&quot;code-snippet__title&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;myInt&lt;/span&gt;| &lt;span class=&quot;code-snippet__title&quot;&gt;myUint&lt;/span&gt; | &lt;span class=&quot;code-snippet__title&quot;&gt;myFloat&lt;/span&gt;]&lt;span class=&quot;code-snippet__params&quot;&gt;(list []T)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, t := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; list {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.Println(t)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样就进一步解耦了，3个类型独立分开，然后再函数Foreach的类型列表中，再用|进行集合，有点像是几个集合取并集。或者，我们可以进一步的操作：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myInt &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int8&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int16&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int32&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myUint &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint8&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint16&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint32&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myFloat &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;float32&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myNumber &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  myInt | myUint | myFloat&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Foreach&lt;/span&gt;[&lt;span class=&quot;code-snippet__title&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;myNumber&lt;/span&gt;]&lt;span class=&quot;code-snippet__params&quot;&gt;(list []T)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, t := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; list {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.Println(t)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;83d5f33df4d53c418ae21b1562fa5a601&quot;&gt;&lt;span&gt;这样就可以单独控制了，虽然代码量大了一些，但是总体的可读性和美观度以及后续的迭代都强了不少。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f7e7be9246ba18f49971176ccf3c66a92&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f7e7be9246ba18f49971176ccf3c66a92&quot;&gt;&lt;span&gt;既然是各个集合的合集，那也可以单独合上某一个具体的变量类型，比如这样：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myNumber &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  myInt | myUint | myFloat | &lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;89c18a9e78c7d0ee5ee81162225842c92&quot;&gt;&lt;span&gt;三个自定义的约束类型，最后合并上了一个具体的string类型，这种快捷的写法也是可以的，这样就可以少写一个自定义的string类型的约束类型了。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;3fa631f04e52d49ff781738a1ef539fa2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;3fa631f04e52d49ff781738a1ef539fa2&quot;&gt;&lt;span&gt;自定义约束类型的交集&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;7ed49d00c9a88f2eb0312a4ca9ffba472&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;7ed49d00c9a88f2eb0312a4ca9ffba472&quot;&gt;&lt;span&gt;上面的各个自定义的约束类似都是采用交集的形式合并的，那么，它同样也可以采用交集的方式，只不过写法有一点区别，需要换行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myInt &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int8&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int16&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int32&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myInt2 &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myFloat &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;float32&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myNumber &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  myInt&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  myInt2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样，myNumber的约束类型就是取的是myInt和myInt2的交接，即myNumber的约束范围是：int|int64。那如果是2个没有交集的约束呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myNumber2 &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  myInt&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  myFloat&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面这个，我们肉眼就可感知，它俩没有交集的，也就是空集，即：没有任何数据约束类型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;markdown&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;func Foreach[&lt;span class=&quot;code-snippet__string&quot;&gt;T myNumber2&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;list []T&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  for _, t := range list {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__code&quot;&gt;    fmt.Println(t)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;//调用一下。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Foreach[&lt;span class=&quot;code-snippet__string&quot;&gt;int&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;[]int{1, 2, 3}&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Foreach[&lt;span class=&quot;code-snippet__string&quot;&gt;int8&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;[]int8{1, 2}&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Foreach[&lt;span class=&quot;code-snippet__string&quot;&gt;string&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;[]string{&quot;hello&quot;, &quot;small&quot;}&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e19914a5f638f17a3a3807a678f817652&quot;&gt;&lt;span&gt;我们如果用编辑器，编辑器就会提示提示错误了，提示是个它是空的约束，传任何类型都不行。&lt;/span&gt;&lt;span&gt;因为go&lt;/span&gt;&lt;span&gt;里面的任何值类型都不是空集，都是有类型的&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e19914a5f638f17a3a3807a678f817652&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Cannot &lt;span class=&quot;code-snippet__keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; the &lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myNumber2 &lt;span class=&quot;code-snippet__keyword&quot;&gt;Type&lt;/span&gt; does &lt;span class=&quot;code-snippet__keyword&quot;&gt;not&lt;/span&gt; implement &lt;span class=&quot;code-snippet__keyword&quot;&gt;constraint&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;myNumber2&#x27;&lt;/span&gt; because &lt;span class=&quot;code-snippet__keyword&quot;&gt;constraint&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;empty&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;f2f8a5493e07b98834e256620da904bf&quot;&gt;&lt;span&gt;（四）any\comparable\Ordered约束类型&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;3d67ea6acdb25295d24c38c4c80a1bef2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;3d67ea6acdb25295d24c38c4c80a1bef2&quot;&gt;&lt;span&gt;你或多或少从一些文章或者文档里，看到过any这个约束类型。听这个单词的意思，好像是代表任何，比如下面这个例子：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;add&lt;/span&gt;[&lt;span class=&quot;code-snippet__title&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;any&lt;/span&gt;] &lt;span class=&quot;code-snippet__params&quot;&gt;(a, b T)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f715c86c82e9233e5e2a379ab0d1e5db2&quot;&gt;&lt;span&gt;通过上面的一系列分析，我们已经知道any就是代表一个类型约束，但是我们并没有定义过它，说明它是系统提供的，是一个全局可用的的。我们可以通过编辑器的跳转功能，查看下这个any的源码是怎么定义的。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;2c8840ae666a91811310cbf3716d68632&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;2c8840ae666a91811310cbf3716d68632&quot;&gt;&lt;span&gt;/usr/local/go/src/builtin/builtin.go 里可以看到：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;any&lt;/span&gt; = &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面的因为注释翻译一下就是说，any是interface{}的别名，它始终和interface{}是相等的。我们是知道当我们申明一个变量，如果它的类型是interface{}，表示它可以是任何的变量类型。所以如果你愿意，你也可以使用any来申明：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; MySmall &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; MySmall &lt;span class=&quot;code-snippet__built_in&quot;&gt;any&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;scans := make([]&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}, &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;scans := make([]&lt;span class=&quot;code-snippet__built_in&quot;&gt;any&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;83b0935f26a1242bf88693c13b7ce8291&quot;&gt;&lt;span&gt;你甚至可以通过全文搜索替换的方式，将老的代码中的interface{} 替换成any。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;785c4b2fc2524a9090df45a8a14184a32&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;785c4b2fc2524a9090df45a8a14184a32&quot;&gt;&lt;span&gt;所以，总结一下，&lt;/span&gt;&lt;span&gt;当你申明1个约束类似为any的时候，它表示的就是任意类型&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;c0a0e50db2514dce879b7909b67771e42&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;c0a0e50db2514dce879b7909b67771e42&quot;&gt;&lt;span&gt;但是有时候，any并不是万能可用的，比如，计算2个数之和，如果使用any约束的话，编辑器就会直接报错了：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Sum&lt;/span&gt;[&lt;span class=&quot;code-snippet__title&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;any&lt;/span&gt;] &lt;span class=&quot;code-snippet__params&quot;&gt;(a, b T)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;T&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; a+b&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;invalid operation: operator + not defined on a (variable of &lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; T constrained by any)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;3d810d32b516a6a2313fd553cc2cb2af1&quot;&gt;&lt;span&gt;我们分析一下，为啥会报错呢？因为go里面有些类型是不能进行+操作的。比如2个bool值，就无法进行+操作。那可能你会说，我实际传值的时候，我规避掉这些不能+的字符类型，不就可以了嘛？那当然不行。因为我们既然申请1个泛型变量，就相当于创建了一个通用的模板，是必须得满足所有的变量类型的。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;43e7427f2c36e89c25278329d7eb4af52&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;43e7427f2c36e89c25278329d7eb4af52&quot;&gt;&lt;span&gt;所以，鉴于这种情况，官方又给我们搞了2个约束类型关键词：comparable和constraints.Ordered。从字母意思可以看得出来，前者是约束了可比较（==、!==），后者约束了可排序 (&amp;lt;、&amp;lt;=、&amp;gt;=、&amp;gt;)。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;2f20ebf456505726d29adae3be1dd99a2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;2f20ebf456505726d29adae3be1dd99a2&quot;&gt;&lt;span&gt;所以这两者结合起来，我们就可以实现比较2个数字的大小和相等关系了。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;6471f0ac926c93ad22f5cfe73039325a2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;6471f0ac926c93ad22f5cfe73039325a2&quot;&gt;&lt;span&gt;值得注意的是：Go官方团队在Go1.18 Beta1版本的标准库里因为泛型设计而引入了ontraints包。但是由于大家都泛滥的使用了，所以在go1.18正式版本中又将这个包又移除了，放入到扩展/x/exp里面了，想用的话，可以自行下载：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go get golang.org/x/&lt;span class=&quot;code-snippet__built_in&quot;&gt;exp&lt;/span&gt;/constraints&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go: downloading golang.org/x/&lt;span class=&quot;code-snippet__built_in&quot;&gt;exp&lt;/span&gt; v0&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;-20220518171630&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;-0b&lt;/span&gt;5c67f07fdf&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go: added golang.org/x/&lt;span class=&quot;code-snippet__built_in&quot;&gt;exp&lt;/span&gt; v0&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;-20220518171630&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;-0b&lt;/span&gt;5c67f07fdf&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看下怎么去申明一个可排序的泛型函数例子。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;golang.org/x/exp/constraints&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Max&lt;/span&gt;[&lt;span class=&quot;code-snippet__title&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;constraints&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;Ordered&lt;/span&gt;]&lt;span class=&quot;code-snippet__params&quot;&gt;(a, b T)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;T&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; a &amp;gt; b {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; b&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样，就约束好了，传入的T的实参，必须是可排序，也就是满足这几个：(&amp;lt;、&amp;lt;=、&amp;gt;=、&amp;gt;)。才能去调用实例化这个函数。我们去源码看下Orderd是怎么定义的&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Ordered &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Integer | Float | ~&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;748af936ad6d070b1f0ef2496a4b5cb02&quot;&gt;&lt;span&gt;可以很清晰的看出，它采用了自定义约束类型嵌套的方式，嵌套了好几个自定义的约束类型。最后的这个~string是啥意思呢？我们接下来会讲。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;96279305a0c0208d6724064442711ecb2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;96279305a0c0208d6724064442711ecb2&quot;&gt;&lt;span&gt;这样，我们就可以实例化调用这个Max函数了:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;markdown&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Max[&lt;span class=&quot;code-snippet__string&quot;&gt;int&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;1, 2&lt;/span&gt;))  // 2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Max[&lt;span class=&quot;code-snippet__string&quot;&gt;float64&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;1.33, 2.44&lt;/span&gt;))  //2.44&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Max[&lt;span class=&quot;code-snippet__string&quot;&gt;string&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;&quot;hello&quot;, &quot;small&quot;&lt;/span&gt;))  //small&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;//省去传入的泛型变量的类型，由系统自行推导：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Max(&quot;4&quot;, &quot;5&quot;)) // 5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;说完了Orderd，我们快速的来看下comparable约束类型，这个目前是内置的，可通过编辑器调整看这个约束是如何定义的，可以看出比较的类型还挺多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; comparable &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{ comparable }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;值得注意的是，&lt;/span&gt;&lt;span&gt;这个comparable，是比较==或者!==，不能比较大小，别和Orderd搞混淆了&lt;/span&gt;&lt;span&gt;，可以这样使用：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Match(&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;)) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Match(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;))  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Match(&lt;span class=&quot;code-snippet__number&quot;&gt;1.45&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2.67&lt;/span&gt;)) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Match(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;))  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; age &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; = &lt;span class=&quot;code-snippet__number&quot;&gt;28&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; sex &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p1 := &amp;amp;age&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p2 := &amp;amp;sex&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Match(p1, p2))  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ch1 := &lt;span class=&quot;code-snippet__built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ch2 := &lt;span class=&quot;code-snippet__built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Match(ch1, ch2)) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Match([&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;}, [&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;{&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;}))  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; MyStruct &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Name &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Age  &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;s1 := MyStruct{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yang&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;18&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;s2 := MyStruct{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;small&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;18&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(Match(s1, s2))  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;5cd0c20a6ee3efb27c5cfd1992e83290&quot;&gt;&lt;span&gt;（五）约束类型&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;cabd0af073ff37a5cb3cebf93bdd0a332&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;cabd0af073ff37a5cb3cebf93bdd0a332&quot;&gt;&lt;span&gt;上面我们在讲Ordered约束类型的时候，发现它最后合并上了一个~string，这个语法看着有点奇怪。如果熟悉PHP语言的人，应该是见过的，在PHP.ini里面设置错误显示的时候，表示排除掉。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;4e284f8dd1cfa111c4507ef009b25f262&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;4e284f8dd1cfa111c4507ef009b25f262&quot;&gt;&lt;span&gt;表示显示除了警告之外的所有警告，是排除，减去的意思。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;error_reporting(E_ALL &amp;amp; ~E_WARNING);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么，在go泛型中，就不是这个意思了，它表示一个类型的超集。举个例子：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; MyInt &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ~&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | ~&lt;span class=&quot;code-snippet__keyword&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;则表示，这个约束的范围，不仅仅是int和int64本身，也包含只要最底层的是这2种类型的，都包含。那么啥时候会碰到这种情况呢？其实就是嵌套或者自定义类型的时候。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; IntAll &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int64&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int32&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; MySliceInt[T IntAll] []T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; MyInt1 MySliceInt[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; YourInt &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; MyInt2 MySliceInt[YourInt]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;bceab18005b65564e214be3daf8105c52&quot;&gt;&lt;span&gt;我们运行后，会发现，第二个会报错，因为MySliceInt允许的是int作为类型实参，而不是YourInt, 虽然YourInt类型底层类型是int，但它依旧不是int类型）。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;51ea8513e0af29ca2a7875b36a58b04b2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;51ea8513e0af29ca2a7875b36a58b04b2&quot;&gt;&lt;span&gt;这个时候~就排上用处了，我们可以这样写就可以了，表示底层的超集类型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; IntAll &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ~&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | ~&lt;span class=&quot;code-snippet__keyword&quot;&gt;int64&lt;/span&gt; | ~&lt;span class=&quot;code-snippet__keyword&quot;&gt;int32&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;六、泛型方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;8c2011fe7977c79c57258f08c7c970ac1&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f898b6307cc29ef5c83519ea4c2caecc2&quot;&gt;&lt;span&gt;接下来，我们来看下go中如何泛型方法，首先需要指出的是go里面的方法指的是接收器类型（receiver type)，我们经常会用这种方式来实现其他语言中类的作用。比如下面这个例子：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; DemoInt &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(t DemoInt)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;methodName&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(param &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e93dccb0cbf787c6a1f923bfe00e0de32&quot;&gt;&lt;span&gt;我们看这种类型，不管是前面的(t DemoInt) 还是方法名后面参数 (param string) 里面都会涉及到具体的类型变量，所以都可以改造成泛型。我们先来看下接收器(t DemoInt) 如何改照成泛型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;99305b1f5b12efccade9ceb65cb2705f&quot;&gt;&lt;span&gt;（一）接收器泛型&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;20c9181245dc9737f9b65608a062bf9c2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;20c9181245dc9737f9b65608a062bf9c2&quot;&gt;&lt;span&gt;我们先定义1个泛型变量，然后在这个变量上加上1个方法，试着写一下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; NumberAll &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ~&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;|~&lt;span class=&quot;code-snippet__keyword&quot;&gt;int64&lt;/span&gt;|~&lt;span class=&quot;code-snippet__keyword&quot;&gt;int32&lt;/span&gt;|~&lt;span class=&quot;code-snippet__keyword&quot;&gt;int16&lt;/span&gt;|~&lt;span class=&quot;code-snippet__keyword&quot;&gt;int8&lt;/span&gt;|~&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;|~&lt;span class=&quot;code-snippet__keyword&quot;&gt;float32&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; SliceNumber[T NumberAll] []T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(s SliceNumber[T])&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SumIntsOrFloats&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;T&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; sum T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, v := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; s {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sum += v&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; sum&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;3186b53387c41c8b6fa2f16e7cbfc61f1&quot;&gt;&lt;span&gt;注意一下 (s SliceNumber[T]) 这个写法，T后面是不用带上它的约束类型NumberAll的。然后返回值也是T类型。OK，这样之后，我们就完成了一个泛型接收器方法。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;5850b180469de68abaa6ebefe911fd932&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;5850b180469de68abaa6ebefe911fd932&quot;&gt;&lt;span&gt;那么如何去调用呢？其实和普通的接收器方法是一样的，只不过我们得先去实例化泛型切片。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; ss1 SliceNumber[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;] = []&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ss1.SumIntsOrFloats() &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; ss2 SliceNumber[&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;] = []&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;{&lt;span class=&quot;code-snippet__number&quot;&gt;1.11&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2.22&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3.33&lt;/span&gt;} &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ss2.SumIntsOrFloats()   &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种泛型方法的运用，在实际上的很多场景都是很好用的的，比如不同类型的堆栈的入栈和出栈，这也是一个很经典的例子：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Number &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int32&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;int64&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;float32&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Stack[V Number] &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  size  &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  value []V&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(s *Stack[V])&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Push&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(v V)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  s.value = &lt;span class=&quot;code-snippet__built_in&quot;&gt;append&lt;/span&gt;(s.value, v)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  s.size++&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(s *Stack[V])&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Pop&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;V&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  e := s.value[s.size&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; s.size != &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    s.value = s.value[:s.size&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    s.size--&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; e&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们就可以传入不同的类型数据去实例化调用一下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;s1 := &amp;amp;Stack[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;s1.Push(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;s1.Push(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;s1.Push(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(s1.size, s1.value)  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(s1.Pop())  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(s1.Pop())  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(s1.Pop())  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;s2 := &amp;amp;Stack[&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;]{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;s2.Push(&lt;span class=&quot;code-snippet__number&quot;&gt;1.1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;s2.Push(&lt;span class=&quot;code-snippet__number&quot;&gt;2.2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;s2.Push(&lt;span class=&quot;code-snippet__number&quot;&gt;3.3&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(s2.Pop())  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(s2.Pop())  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(s2.Pop())  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;8eb95c6647bac8c8f7db756e63189886&quot;&gt;&lt;span&gt;（二）方法的参数泛型&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;6860af846d20779d1ebeb091384c2dfb2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;6860af846d20779d1ebeb091384c2dfb2&quot;&gt;&lt;span&gt;说完接收器泛型之后，我们来看下第二种泛型的方式，就是方法的参数泛型，就是接收器是一个普通的类型，在方法的参数里面来设置泛型变量。我们尝试着写一下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;markdown&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type DemoSlice []int&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;func (d DemoSlice) FindOne[&lt;span class=&quot;code-snippet__string&quot;&gt;T int&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;a T&lt;/span&gt;) bool {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;d4ffa5a48ab61c22ef2bd1930b80b2af1&quot;&gt;&lt;span&gt;你会发现，你方法里面的逻辑都还没开始写，编辑器就会标红报错了：Method cannot have type parameters。方法不能有类型参数，即：方法是不支持泛型的。至少目前的1.18版本是不支持的。看后续版本会不会支持的。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;4ff04b917528f953284e14cee3f733c12&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;4ff04b917528f953284e14cee3f733c12&quot;&gt;&lt;span&gt;既然，函数是支持泛型的，接收器也是支持函数的，所以我们把他们结合起来，稍加改造：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; DemoSlice[T &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;] []T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(d DemoSlice[T])&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;FindOne&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(a T)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, t := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; d {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; t == a {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;s1 := DemoSlice[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;]{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(s1.FindOne(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;s2 := DemoSlice[&lt;span class=&quot;code-snippet__keyword&quot;&gt;float64&lt;/span&gt;]{&lt;span class=&quot;code-snippet__number&quot;&gt;1.2&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2.3&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3.4&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4.5&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(s2.FindOne(&lt;span class=&quot;code-snippet__number&quot;&gt;1.2&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;七、泛型接口&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;8c2011fe7977c79c57258f08c7c970ac1&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;654ac69b8765ae113c7d6ecc743eedb42&quot;&gt;&lt;span&gt;上面大篇幅，我们花了很多时间基本把泛型的内容都说了一遍，应该是对go泛型有了一个较为深刻的认识了，回到前面抛出的关于自定义约束用interface的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; error &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__built_in&quot;&gt;Error&lt;/span&gt;() &lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; DemoNumber &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  int | float64&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;29d5572fd4eac11f73b7e85dab32d0a91&quot;&gt;&lt;span&gt;上面2个都采用interface申明，1个是传统的接口类型，1个是约束类型，法有啥区别呢？一个叫：方法集，另一个叫：类型集。其实他们本质上是一样的。传统的接口类型是，只要我实现了接口里面定义的方法，那我就是实现了这个接口。而约束类型，其实也是一样，只要我传入的值的类型，在你这约束范围内，那就是符合要求的。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f66c1c39f28a5d3a9dcc7194e42641682&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f66c1c39f28a5d3a9dcc7194e42641682&quot;&gt;&lt;span&gt;所以，go在1.18版本后，对&lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;的定义改了，改成了：&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f66c1c39f28a5d3a9dcc7194e42641682&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;f66c1c39f28a5d3a9dcc7194e42641682&quot;&gt;&lt;span&gt;接口类型定义了一个类型集合。接口类型的变量可以存储这个接口类型集合的任意一种类型的实例值。这种类型被称之为实现了这个接口。接口类型的变量如果未初始化则它的值为nil。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那如果把这2者结合起来呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; MyError &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  int | float64&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__built_in&quot;&gt;Error&lt;/span&gt;() &lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;824ecdf4016504468a551a17acaf44872&quot;&gt;&lt;span&gt;这种写法看着好陌生，里面既有约束类型，又有方法，这是go1.18中新增的写法，这种接口叫做：一般接口(General interface)。原先1.18之前的接口定义类型叫做：基本接口(Basic interfaces)。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;cb2d515f7cb4049d9d0a5fc0229677502&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;cb2d515f7cb4049d9d0a5fc0229677502&quot;&gt;&lt;span&gt;所以总结一下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;e000364201251ae4d9da75dec5dca6a92&quot;&gt;&lt;span&gt;不得不吐槽一下，这2个类型的名字取的真是有水准啊，跟没有区别一样，本身go里面的接口可以说是非常复杂的，这样一个改动后，简直是雪上加霜啊，直接把接口的难度等级又提升了一个等级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;1&quot; data-sign=&quot;490863f10c062a98f751a06412c6da9d&quot;&gt;&lt;span&gt;（一）基本泛型接口&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;67a9e5064b38b27208101f071645401c2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;67a9e5064b38b27208101f071645401c2&quot;&gt;&lt;span&gt;我们继续看下如何定义一个泛型接口呢？它的写法和泛型变量是类似的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type MyInterface[T &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  WriteOne(data T) &lt;span class=&quot;code-snippet__function&quot;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__title&quot;&gt;ReadOne&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;) T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;a0ad369ed48a6c7c1eec678714d76a772&quot;&gt;&lt;span&gt;接口名字后面接一个[]，里面填充的接口里面方法中需要用到的泛型参数。这个和定义其他泛型变量是一致的。然后接口里面就是具体的空方法了，和泛型函数或者泛型方法的写法一样。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;c74833ce8c226ad42cfa07441ebdd3232&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;c74833ce8c226ad42cfa07441ebdd3232&quot;&gt;&lt;span&gt;但是值得注意的是，别写反了，别把泛型参数写到了方法的层面，这样是错误的语法：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type MyInterface &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  WriteOne[T &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] (data T) T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ReadOne[T &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] () T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;da8a348d00c9e956f0c322189127bd502&quot;&gt;&lt;span&gt;当我们定义好了上面这个泛型接口，因为里面只有方法，没有约束类型的定义，所以它是个基本接口。那我们看下如何去实现这个基本泛型接口。&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;af383204fac0286de4bb37198de5beb42&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;af383204fac0286de4bb37198de5beb42&quot;&gt;&lt;span&gt;我们先定义1个普通的结构体类型，然后通过接收器方式绑定上2个方法：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Note &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(n Note)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;WriteOne&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(one &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(n Note)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ReadOne&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;small&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后，我们看下如何实例化泛型接口，并且实现接口。这种写法和普通的实现接口的方式是一直的，只不过要显示的的传入T的值是什么。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; one MyInterface[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] = Note{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(one.WriteOne(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(one.ReadOne())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;d0072e099679570124ddf3d73decc66d2&quot;&gt;&lt;span&gt;值得注意的是泛型参数的值的类型，要和被实现的方法的参数值要保证一致，不然会报错：&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;d0072e099679570124ddf3d73decc66d2&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; one MyInterface[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;] = Note{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(one.WriteOne(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(one.ReadOne())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;报错如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; cannot &lt;span class=&quot;code-snippet__keyword&quot;&gt;use&lt;/span&gt; Note{} (&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Note) &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; MyInterface[&lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt;] &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;variable&lt;/span&gt; declaration:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Note does &lt;span class=&quot;code-snippet__keyword&quot;&gt;not&lt;/span&gt; implement MyInterface[&lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt;] (wrong &lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; ReadOne method)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                have ReadOne() &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                want ReadOne() &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;35fb4f84a6ff6b365e5801b9c1defb79&quot;&gt;&lt;span&gt;（二）一般泛型接口&lt;/span&gt;&lt;/h3&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;1cb292357a4416a0fd48242ab35c0faa2&quot;&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;1cb292357a4416a0fd48242ab35c0faa2&quot;&gt;&lt;span&gt;我们现在再来定义一个一般泛型接口，也就是说接口里面，有约束类型。看下怎么写：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type MyInterface2[T &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;|&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__title&quot;&gt;WriteOne&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;data T&lt;/span&gt;) T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__title&quot;&gt;ReadOne&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;) T&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那这种一般泛型接口如何实例化呢？我们试一试看看：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Note2 &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(n Note2)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;WriteOne&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(one &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(n Note2)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ReadOne&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;small&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; one MyInterface2[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;] = Note{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;编辑器直接标红报错了。提示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接口包含约束元素int和string，只能用作类型参数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简而言之，&lt;/span&gt;&lt;span&gt;一般泛型接口，只能被当做类型参数来使用，无法被实例化&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;myInterface&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-attr&quot;&gt;[T MyInterface2[int]&lt;/span&gt;] &lt;span class=&quot;code-snippet__selector-attr&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是这种这么变态的写法，如何实例化呢？这个有待研究，反正至少没报错了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1 data-lines=&quot;1&quot; data-sign=&quot;381759e8570981ca8c2525ac43ac6e29&quot;&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/h1&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;9301bd3dba8824f1e77d5384b35338b42&quot;&gt;&lt;span&gt;1.https://go.dev/ref/spec#Go_statements&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;7605d0f3d08ba00cf301798960db8e672&quot;&gt;&lt;span&gt;2.https://go.dev/doc/tutorial/generics&lt;/span&gt;&lt;/p&gt;&lt;p data-lines=&quot;2&quot; data-type=&quot;p&quot; data-sign=&quot;4b1dcd658b4ccfb96c6c13ccb4574e252&quot;&gt;&lt;span&gt;3.https://blog.csdn.net/raoxiaoya/article/details/124322746&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt; 作者简介&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;105&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;105&quot; data-fileid=&quot;100044396&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe958RSpUsDpTYzEs8Xg0Tf3gsNo6pWRicb4HSAII90kicrIxibbvo6UMAVOLVQiaw08NdCSEbqI60I20Qg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;200&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;杨义&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;腾讯高级工程师&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;腾讯高级工程师，主要负责IEG游戏活动运营及高可用平台的建设，对云服务、k8s以及高性能服务上也有很深的了解。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt; 推荐阅读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247539321&amp;amp;idx=1&amp;amp;sn=f4e1a10861041430a540d04f286476dd&amp;amp;chksm=eaa84029dddfc93fd4633ba9ec4f8a21f1f1beb031aa63bdc7577f88918b7b816707ca561ab7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;C++尝鲜：在C++中实现LINQ！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;C++尝鲜：在C++中实现LINQ！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247539236&amp;amp;idx=1&amp;amp;sn=2c1bba79c07208f7ea6ced2332f8d5e5&amp;amp;chksm=eaa84074dddfc9626f84befe753e25499b42f724629d70fb92f2ad71433ad7e3ce340628d79c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;C++异步从理论到实践！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;C++异步从理论到实践！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247538983&amp;amp;idx=1&amp;amp;sn=9f67080bc8476f41ddc1f11b32bc3620&amp;amp;chksm=eaa84377dddfca61512ca4cce1dd04b352969f06fff430620d4ef93f81786dd608a5a84082ba&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;C++反射：反射信息的自动生成！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;C++反射：反射信息的自动生成！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247539154&amp;amp;idx=1&amp;amp;sn=04b1c5e2f8d36257c9c71068b95caeea&amp;amp;chksm=eaa84382dddfca9494c58a871e5e0f41304185b5e7c3b09d885781bcf5882e6e6130c9ed97e5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;小白入门级！webpack基础、分包大揭秘&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;小白入门级！webpack基础、分包大揭秘&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI2NDU4OTExOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe96micRsO2DNDzVua8lLc5HcxgPibg1fTn5dOSNLfJpMMxbVkhOovibR4JDKdTxELmGYujyLV7308B9icg/0?wx_fmt=png&quot; data-nickname=&quot;腾讯云开发者&quot; data-alias=&quot;QcloudCommunity&quot; data-signature=&quot;腾讯云官方社区公众号，汇聚技术开发者群体，分享技术干货，打造技术影响力交流社区。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.59375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/VY8SELNGe95dHSibxPPK8ic8RtyVFEXs36jmqZibzTicu5q58duJXI8k6DRJWCSrkuz4pz3867nibLLzJY3qKicHScJg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>28aba6c13717184120b0886d04401912</guid>
<title>OceanBase Meetup第五期：复杂业务场景下的数据库应用需求及挑战</title>
<link>https://toutiao.io/k/9x0g08k</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&amp;#13;
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9bb7b7f71912be27073162aa40de05b3</guid>
<title>哈啰推荐引擎搭建实战</title>
<link>https://toutiao.io/k/fnlspfp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5504246284501062&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xdDaByDutCjxpqJIj7rtKaG5xDzuHQ9OJCl5RbrqAXunprmXqkSh4aUXEz8SFlt7aS3xnmyJOfpPQC766XliaOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1884&quot;/&gt;&lt;/p&gt;&lt;p&gt;推荐要解决的问题是在一个场景下给用户推荐他感兴趣的物品。对于逛逛业务来说，在我负责前原先使用的推荐服务是基于dataman的业务流程开发，非常复杂，需要将逛逛业务的帖子数据、用户行为数据或用户本身的数据导入到hive里，通过各个hive任务的依赖去计算出推荐的表。如图，最下面的表用来建推荐的，比如需要给用户推过去7天内看过的一些帖子，或用户看过的关注过的人发过的帖子。通过这种方式生成若干个任务，每个任务会生成一个hive表，最终业务会把这些hive表导入到业务的MySQL或者pg里。这其实是一种基于规则的推荐引擎。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5773016792125072&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xdDaByDutCjxpqJIj7rtKaG5xDzuHQ9OKjY7vJCTxWBlv3ia5gg7D45dTMnaVHwMI8Oz2iaECU8ghxAUVcnQa5pw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1727&quot;/&gt;&lt;/p&gt;&lt;p&gt;为了引入算法能力，我们构建了一个新的基于算法的推荐引擎，其中最核心的部分在于推荐服务。推荐服务用来接收用户请求并生成推荐结果，里面需要用到一些数据源，我们目前使用的是es和redis。其次，引入算法需要有排序模型，本质上是部署在决策流平台上的。如上图，黑线的实线可以认为是请求的流转过程，虚线可以认为是数据的流转过程。数据可以是物品数据、用户数据或行为数据，这三个数据存储在业务的数据库里面。由于我们最终推的是物品，所以需要把物品数据导入到数据源里面。为什么使用es和redis两个数据源，这里是有权衡考虑的。es可以支持比较复杂的搜索条件和排序需求，redis比较简单，但es的缺点在于性能相对较差。我们会根据不同的召回需求选用不同的数据源存储，物品数据我们目前存储在es。除了物品数据，我们还需要考虑用户数据和行为数据，把这些数据拿到后需要做离线定时计算，生成物品的质量分或标签。此外还需要做离线定时训练，训练出排序模型，由于每隔一段时间用户的行为模式会发生变化，所说这个模型本身也需要变化。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据源准备好后，我们整个推荐服务分为四步。第一步是召回，也就是从这两个数据源中捞取数据，这部分后面会详细介绍。第二步和第三步叫粗排和精排，粗排的性能比较好但效果会比较差，精排的性能较差但效果较好。接着我们拿到比较好的结果列表进行重排，再返回给业务后端，这里没有把业务后端画出来。业务后端把这个结果透传给前端，这样就得到了用户的推荐列表。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5619987661937076&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xdDaByDutCjxpqJIj7rtKaG5xDzuHQ9OmNAtuwCRT97Wdw2vIlaBR9icnY9xEA8QwhPxXEk1ibDsaHTkdfZXgCxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1621&quot;/&gt;&lt;/p&gt;&lt;p&gt;接下来，我们对比一下两种推荐方法。第一，原来基于规则的推荐会造成千人一面，即每个人看到的推荐页面第一页都是一样的。对于基于算法的推荐，由于引入了一些用户的特征，因此可以达到千人千面的效果。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从时效性上，基于规则的推荐由于所有的调度任务都放在dataman上，它可能是定时的处理，所以时效性较差。基于算法的推荐是基于flink任务的实时性开发，所以时效性较高，用户的行为数据可以马上影响到下一页的推荐结果。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第三，基于规则的推荐无法体现数据的价值，因为它是根据产品的需求，产品会拍脑袋认为符合某种模式的帖子效果比较好，并作为需求提出，写一个固定的Hive SQL语句。基于算法的推荐主要通过模型做数据的排序，所以它会通过模型来反映用户的行为数据，能更好体现行为数据的价值。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xdDaByDutCjxpqJIj7rtKaG5xDzuHQ9O7yibP19Zibaq26PxGd1Q2yn5gibCUZNrOAwBW35pj6mh2AmCDmeB2cvCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;接着我们讲一下召回，就是从海量数据中获取用户感兴趣的帖子。上图是我们召回的分层结构，原始数据在最下面，包括pg、hive和kafka。hive是归档数据，各种依赖全，方便计算；pg是实时业务数据，及时反映业务变化；kafka主要是用户行为数据，及时反映用户行为。接着，通过搜索平台和dataman两个产品将这些数据导入到在线存储的es和redis中，再通过这两个数据存储去支持在线服务进行多路召回。在线服务层和在线存储层间用中间件做，如rpc服务去调用。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xdDaByDutCjxpqJIj7rtKaG5xDzuHQ9Oia1MhxzdwtUswYV5iarDSH3Kl5JCtfP0vZ1SicrMw17Y1oEo6yDHWXtSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;召回后我们需要通过两轮排序进行优中选优，也就是粗排和精排。在之前的架构图中提到粗排和精排都走的模型，但实际算法同学只训练一个模型，所以我们目前粗排是基于规则的。最重要的区别在于粗排要参与排序的数量多，效果较差。精排要参与排序的数量较少，但效果更好。之所以两轮排序，是在性能和效果间取得平衡。当然如果有需求，也可以引入更多轮排序，但这样可能 rpc调用的耗时占比会更高，可能得不偿失。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xdDaByDutCjxpqJIj7rtKaG5xDzuHQ9OLBSxCe6UOLg6Eiaiamf9gyjNiadGrPAvqpVuVAKXZoNvg7y4qT3icmKpeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;在粗排和精排后，最后一步是重排。重排的目的是为了更细致地调节推荐列表，比如对逛逛来讲，如果有个大V发帖子质量分都很高，某个用户非常关注他，这样用户推荐列表里面可能一页都是同一个人发的帖子，会造成用户审美疲劳。所以，需要有一些业务规则去进行打散，目前我们的算法有滑动窗口法和权重分配法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第二个目的是为了培养用户的心智。举个例子，在逛逛业务里面我们有一个需求，对于某些人群需要给他推荐某一类帖子，但帖子质量不一定非常高，排序模型不能精确达到把这些帖子排在前面的目的。所以需要在精排后加入重排，然后把特定的帖子置顶。当然置顶也不是直接全排前面，而是通过跳一个插一个的方式把这些帖子放前面，通过这种方式来培养用户的心智。&lt;/p&gt;&lt;p&gt;还有另一种做法是流量池的设定，比如运营觉得某些帖子质量比较高，但他并不知道用户喜不喜欢，或者一些新品也可以放到流量池里面，给它相应的曝光，这样能让用户看到这些帖子并由用户来决定质量高不高。用户如何决定可以通过离线任务来计算，比如看过去一个小时内帖子的CTR怎么样来判断质量高不高，这种方式的实现也是在重排中从流量池捞一些帖子进行置顶，再去回收效果。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里可以把它抽象成一个算法问题，叫做多臂老虎机问题，解决这个问题的算法是bandit算法。多臂老虎机有多个不同的臂，摇动不同的臂会吐出不同数量的金币，要解决的问题就是通过什么样的策略摇臂，能吐出最大数量的金币。有很多算法可以去解决这个问题，bandit是其中一种算法，映射到推荐服务来讲，就是新品池里每个帖子是一个臂，帖子CTR的值是它吐的金币数，因为我们曝光量有限，应该怎样去把更优秀的帖子获取更大的曝光率，一种比较简单的解决算法叫 bandit算法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4918918918918919&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xdDaByDutCjxpqJIj7rtKaG5xDzuHQ9OWgKxzHgLXC3zsZxibdyzbOf5Yt4FSibGx8MUFWV4yb2dRrqNyT5DLoAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1850&quot;/&gt;&lt;/p&gt;&lt;p&gt;推荐的步骤讲完了，这里还涉及到一个问题是曝光过滤。曝光过滤的目的是防止给用户重复推荐物品，右边是它的实现方案。手机代表用户的APP，他的行为数据由前端采集到kafka里面，再通过flink任务实时读取kafka中的数据，写入到redis里面，redis里面就存储了用户看过的帖子。当一个用户从手机上发送请求，录入到我们的推荐服务上获取曝光数据。我们从多路召回拿到数据之后，需要经过曝光过滤，从redis中获取用户看过的帖子并删除，然后返回给用户。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里有一个细节，是怎么样定义给用户曝光的帖子。假如我们把通过flink任务写出来的数据作为用户曝光帖子的话会有个问题，比如用户一屏刷了10个，等他刚看完第10个再往下刷的时候，第二屏请求就已经发起了，这时候flink的数据还没来得及写入redis，所以会出现重复。考虑到这个问题，我们可以有另一种解决方案，就是推荐服务在我们自己这边，我们的推荐服务推出来10个，就认为这10个全曝光了，直接把它作为曝光过滤的列表。但这里也有一个问题，很可能用户请求了10个，但一屏可能只看了两三个，这时候就有七八个被浪费了。所以我们的曝光过滤有两个设计目标，一是高时效性，即不能给用户推荐重复的东西；二是避免浪费，比如接口曝光有10个，用户只看2个的话就浪费了8个。我们的实现方案就是在redis中存两个key，一个key写它的真实曝光列表，另一个key写它的接口曝光列表，接口曝光列表是会滚动过期的。我们进行曝光过滤的时候，需要把这两个列表都拿到取个并集作为曝光列表，过滤召回的物品。因为接口曝光数据会定时过期，所以被接口曝光多曝光的一些物品，会在后面适当释放出来，最终还是用真实曝光数据来作它的曝光过滤结果。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5489736070381231&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xdDaByDutCjxpqJIj7rtKaG5xDzuHQ9OCHWwGfp3ZL7XicmqGibv43z2uheoibMvssVLwxMREEgoo3Sx1Ze3PNTDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1705&quot;/&gt;&lt;/p&gt;&lt;p&gt;接下来是冷启动问题，我们考虑的不是非常多，但它是推荐中大家都面临的一个问题。冷启动分为用户冷启动和物品冷启动，用户冷启动我们没有考虑很多，因为一般用哈啰逛逛业务的用户可能只是没用过这个业务，但其他业务如单车或助力车都已经用过了，所以用户的信息我们已经存在了。假如对一些不存在信息，比如说i2i召回，即系统过滤召回，它的含义是根据用户过往点赞过或评论过的帖子，去找相似的帖子推出来，这种情况可能访问为空，但本质上一些热门或者LBS的路它能访问结果，所以说用户冷启动并不是比较大的问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;比较大的问题在于物品冷启动，因为我们大量的召回阶段都依赖于算法离线算的数据，比如帖子的质量分、帖子跟帖子的相似度。我们具体的解决算法分成两类，一类是在召回阶段新增新品召回的方法，让新品能够获得一定的曝光量。还有一类是刚提到流量池的方法，可以把一些新品放到流量池里，通过bandit算法把它展示获取一定的曝光量。考虑到排序模型中需要用到特征，因此我们需要对冷启动用户或冷启动物品添加特征默认值。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5208562019758507&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xdDaByDutCjxpqJIj7rtKaG5xDzuHQ9OszCKBAfcDAHlZwAEibC38dBtgictE0EicUeibD10A0jwGbcgljynV3nIEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1822&quot;/&gt;&lt;/p&gt;&lt;p&gt;在推荐做完之后，会涉及到很多性能优化。我们推荐服务的步骤非常多，因此整个推荐请求如果耗时比较长的话，我们并不能知道每一步耗时多久，也不能通过单个case去看，比如只看某一个请求每一步耗时多久，这种情况可能得到的数据只是特例，并没有通用性。所以最终我们的做法是埋了一些点，在推荐请求执行过程中，每一步耗时多久都打印了出来，然后通过采集功能进行采集，在grafana上根据筛选数据源配置大盘。上图就是大盘产生结果，大家可以看到我们推荐的平均耗时大概400毫秒不到，图中每条小线代表各个步骤的耗时，每次请求都是各个步骤耗时之和，取各个不重叠的步骤耗时之和来决定整个耗时，这样我们可以通过曲线的趋势来看到哪一块是耗时的性能热点，我们才需要去解决。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过这样的图表，我们主要分析出两点。一是召回耗时比较久，因为涉及到很多路召回。二是排序模型耗时比较久，排序模型耗时会由算法同学去优化。接下来重点介绍一下召回阶段如何做性能优化。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xdDaByDutCjxpqJIj7rtKaG5xDzuHQ9OmiaaNYZ19ib5GR7gnNA9iaoB74ic8gS9WoFWA7NzicKsW4Lr4cqMfKmtVicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;左边这张图是我们推荐请求召回一开始实现的版本，在性能优化时就发现了问题。第一步需要进行多路召回，比如LBS召回、标签召回、关注者召回，由于召回复杂所以走的都是es，后面两个召回走的都是redis。我们的做法是每个召回都去线程池中拿一个线程往es或redis中去查询，并返回出结果，这样它的最长耗时就是由所有请求中最长的那个耗时决定的，实际上是木桶原理，即一只水桶能装多少水取决于它最短的那块木板。但这个服务上线之后，在QPS比较低的情况下，请求耗时还可以接受；QPS一旦高起来，耗时就会变得非常长。经过分析，我们发现在访问 es的时候，es请求结果里面会带一个叫took的字段，描述了es在搜索引擎里面运行了多久。然后我们发现去访问es的时候，从一个线程发起请求到拿到结果，耗时比took耗时多了几十倍。原因就在于一个推荐请求进来之后，它会裂变成十几个请求，这样就算我们线程值设置的再大，一个请求就要占用十几个线程，很可能QPS就上不去。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;考虑到这点，我们就变成了右图的执行逻辑。每个推荐请求进来之后，同样进行多路召回，但最终从线程池发出的只是两个请求，一个请求查es，另一个请求查redis。这样一个推荐请求其实只分成了两个请求，占了两个线程。es是通过multisearch机制去访问的，比如说左边三路，LBS召回、标签召回、关注者召回，我都把它拼起来变成一个请求，这样只需要请求一次。redis是通过pipeline机制去访问，这样在QPS提升之后，还是能达到跟左边一样，甚至比左边更好的耗时结果。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xdDaByDutCjxpqJIj7rtKaG5xDzuHQ9OKxW1Osd9n47QgvB0cBz1iak6vcI4HlHrvib9sAwvncELFAtNmbibIqzGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在性能优化之后，稳定性建设也是非常重要的一点。为了在线服务阶段不报错，我们使用了多重兜底的机制。首先在召回阶段引入兜底召回，保证就算其他几路召回为空，也能有推荐结果。第二是在排序阶段也加入兜底操作，保证就算依赖的排序服务出问题，也能反馈出一个比较合理的推荐结果。另外比如说刚刚提到的i2i召回，可能需要获取用户曾经操作过的帖子，也就是说有一个外部依赖的服务去获取。所以我们对所有外部服务的错误都提供默认值作为兜底。除了上述三个在推荐服务里完成，还要考虑到非常极端的情况，即推荐服务本身故障，所以我们在业务后端对推荐服务也做了兜底，保证用户能看到东西。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;兜底会有个问题在于SOA不报错，这样我们可能就感知不到，因此必须在兜底做报警，报警我们目前是通过Argus来实现。这里我从Argus上截了一些图，左边是每路召回数据总数，如果某一路跌到变动比较大的阈值，我们就会认为这一路出问题了，需要人工排查告警。右边是依赖的外部服务SOA错误的告警。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xdDaByDutCjxpqJIj7rtKaG5xDzuHQ9OJR0eASnsO4CZR2CWxZFrmUB0sqhgtgs2sZsFUAicUdwfnwZOfAhocMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;上图展示的是推荐效果，左边是一个旧版推荐服务的 pv-ctr和uv-ctr的指标，右边是新版推荐服务的指标。可以看到提升非常大，当然绝对值还是比较小的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fe0e56453388077dc4f2c57807ee32df</guid>
<title>离开大厂，从降薪开始？推荐17个提升开发效率的“轮子”；Git存储原理及部分实现｜码农周刊VIP会员专属邮件周报 Vol.095</title>
<link>https://toutiao.io/k/5y8j5ih</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;本文内容节选自&lt;strong&gt;「码农周刊VIP会员专属邮件周报 Vol.095」&lt;/strong&gt;，感谢阅读。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078432&amp;amp;idx=2&amp;amp;sn=f1ba1fa5fbfbcf98a3e6f610b258cf05&amp;amp;chksm=bd2918178a5e9101b993d9e84d783562c995577cec855adf32ccb5946ff4da21fd6e89ba078e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;想邮件订阅周报？扫码即刻订阅！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;↓↓↓&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;对话罗永浩：再创业可能后悔，不再创业百分之百后悔&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;https://mp.weixin.qq.com/s/l-jZBoVC29H-dyGeWL_NDQ&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;一个被理想化了的理想主义者、一个更成熟的创业者、一个更合格的商人。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;被高薪“惯坏”的年轻人：离开大厂，从降薪开始？&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;https://mp.weixin.qq.com/s/e_Nv4bBrMPx9J3AMqnlwiQ&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;跳槽就涨薪，仿佛不灵了。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;数据库全量SQL分析与审计系统性能优化之旅&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/np9qvi3&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;介绍遇到的性能问题以及优化实践&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;钱大妈基于 Flink 的实时风控实践&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/bgehscf&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;经验总结&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Java 基础常见知识点&amp;amp;面试题总结&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/3wmokgz&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;2022 最新版&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;新一代Python打包、发行、依赖管理工具&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/rm2195o&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;Poetry&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;图解Go内存管理器&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/k4upoi5&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;图文并茂&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Vue开发者必须知道的实用技术点&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/u28xok7&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;代码示例&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;吐血推荐17个提升开发效率的“轮子”&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/10u7n9b&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;利器&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Git存储原理及部分实现&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/ztcw9lm&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;深入讲解&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078432&amp;amp;idx=2&amp;amp;sn=f1ba1fa5fbfbcf98a3e6f610b258cf05&amp;amp;chksm=bd2918178a5e9101b993d9e84d783562c995577cec855adf32ccb5946ff4da21fd6e89ba078e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;想邮件订阅周报？扫码即刻订阅！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;↓↓↓&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>