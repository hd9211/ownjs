<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>da684831aebef83590e2e570293c4839</guid>
<title>团队管理那点破事！OKR 绩效、核心人才、面试、技术分享、研发流程</title>
<link>https://toutiao.io/k/135ujiu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大家好，我是Tom哥~&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;今天来聊聊团队管理，可能你现在还是一线开发，没有带团队，感觉这个话题与你无关，其实不然。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;程序员的职业生涯曲折，技术更新迭代快，走技术深度，走架构师路线，势必要付出常人的时间和精力。而管理则可以更好的复用之前经验。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;知其然，知其所以然。现在，对管理拒绝的人总有一天，你会经历思想转变。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;作为管理者，我们平时都会遇到哪些问题？又是如何来解决这些问题？好的经验我们要学会借鉴，来看看今天要聊的问题概要&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100003489&quot; data-ratio=&quot;0.7683923705722071&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshweUJQcqPoODQreibRwB2ibv73zhFsficibKWObzgoIgiah19mUicJuSSicPU11y6wOdr8GxvGtlyZkn4cricw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;734&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;做为团队负责人，你是如何带领团队的？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;1、角色认知、心态转变，“管人”和“理事”，借助团队拿结果&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;2、OKR、KPI考核&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;3、平衡好技术和业务发展矛盾&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;4、技术储备和未来的技术规划，为业务预留空间&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;5、知人善任，人才梯度培养&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;6、方向要对、格局要大，与公司战略保持一致&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;7、制定好团队目标&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;8、技术分享，培养团队的技术氛围&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;9、团建&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;10、以人为本，激发每个人的积极性&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;更多内容，参考 &lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484897&amp;amp;idx=1&amp;amp;sn=69934454723b5c18b754d86d95d4a2ff&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;第一次带团队，感觉很慌怎么办？&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;开发规范流程，需要做哪些事情？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;严格约定团队的开发规范，如：IDE 代码模板、命名规范(mysql建表、redis key 前缀，以及application.properties中的各种配置项，可以参考阿里代码规约)，代码ci规范，API命名，统一日志规范，MySQL建表&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;严格的开发流程，如：需求评审、技术方案设计、方案评审、测试用例评审、编码、代码 Review、测试、发布，线上发布要注意灰度。回滚机制&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对于一些通用的逻辑，要注意抽取公共模块&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;技术框架选型要有严格流程&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;团队未来规划，负责人要怎么做？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：这个分为两部分。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一个是了解系统状况，有哪些历史技术债务（如：架构优化、性能优化、高可用、可伸缩等）需要分阶段偿还，提前做好时间安排。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;提前了解业务规划，为了实现业务目标，我们要做哪些技术储备&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何让自己的团队高效且有战斗力？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;1、业务支撑。按优先级将业务分为重点项目、日常项目。优先保证核心项目所需的开发资源。另外，经常与业务同学互通业务想法，提前做好技术储备。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;2、骨干拉平。对团队经常组织技术培训，核心的技术骨干能轮动工作内容，每个系统都有人员互补。遇到紧急项目时，一个骨干+几个研发，就可以快速支撑一个项目。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;3、架构升级，为业务预留技术储备。如：分布式、服务化、中台、中心化、中间件、平台化等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;4、工程效率。包括动态化、配置化、工具化、自动化&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;5、系统稳定性。构建完善的报警监控系统、流控、熔断、降级、容灾、回滚、灰度，保障系统的稳定性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;更多内容，&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484862&amp;amp;idx=1&amp;amp;sn=70f083d3726cba543b5369e82ba90d8b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;如何打造一个高效的研发团队&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何定制高效的研发流程？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：流程可以帮助我们更规范的做事情，提高整体的工作效率，进而提高产出。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;产品层面，统一将业务需求收集到“需求池”中，每周定期 review 需求，将一些优先级较高的需求整合、立项、排期&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;RPD 方案编写，包括界面、功能、逻辑、交互等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;PRD 方案评审，包括业务准确性、技术可行性评估&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;编写技术方案，并组织评审&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;项目计划，开发任务分解，人力成本，时间评估&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;各角色（前端、后端、客户端等）进入开发阶段，组织每日站立晨会，跟进项目遇到的问题，并及时做出调整。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码 review，对不合理的地方及时调整&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;功能测试、性能测试、集成测试&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;预发环境检验&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;发布上线&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;项目经验总结&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何营造团队的技术氛围？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：物以类聚，人以群分。大到一个公司，小到一个团队，都有自己的味道。如果【味道】缺失，那团队的稳定性存在极大风险。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;技术分享，输出倒逼输入，锻炼分享人的演讲能力，同时还能提高团队的整体技术能力&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码CR，可以点对点审查，也可以团队成员一起审查。既能保证代码质量，还能让大家对系统进一步了解&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码好坏味道，组织一些活动，对于一些优秀的代码、坏代码，拿出来通晒&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;读书会。一个人的成长离不开持续的学习输入。招聘的候选人要有很强的学习热情，有较强的自律性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;鼓励创新，紧跟市场前沿，对于一些新技术在充分验证可行性后，可以引入到工作中。当然，创新是有风险的，管理者要充分衡量利弊。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;推行自动化，工具化。管理者要鼓励工程师创造工具、引入工具，释放一些低效工作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;建立和维护好团队的技术氛围，需要自上而下的技术导向，需要各级老板的鼎力支持，需要每位团队成员参与其中、融入其中&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何做团队的绩效管理？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：肯定要引入一些科学管理方法，比如：KPI、OKR。kpi全称 Key Performance Indicator，只看结果，不关心过程，只要结果拿到了即可，适合销售、运营等考核指标相对明确的岗位。研发岗推荐使用OKR，根据目标自己定义关键节点的Key Result，更加能激发个人的主动性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;使用OKR工具，要关注几个点：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;1、如何制定OKR？目标一定要清晰明确，有很强的激励作用，振奋人心；有实际价值；通过自己的努力，短期内可以实现。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;2、持续跟踪OKR的落地执行，每周、每月、每季度都要定期回顾，不断优化对齐目标，做到信息透明、共享，让每位团队成员都能收获成长的快乐。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;3、OKR评估，分为自评、主管打分。OKR 评分 = 自我评分 x 20% + 同事评分 x 30% + 主管评分 x 50%&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;4、OKR复盘。考核不是最终目的，发现问题并最终解决问题才是我们的终极目标。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;更多内容，参考之前文章  &lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484883&amp;amp;idx=1&amp;amp;sn=f92f9dcc0f644b20aaac385fe8bfe3ba&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;作为技术团队TL，如何运用OKR提高团队产出&lt;/span&gt;&lt;/a&gt;&lt;strong/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何做一个合格的面试官？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;首先，了解招聘岗位的工作职责，技能要求，岗位定级，清楚招聘的候选人要具备什么能力&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;简历筛选，对于一些不太确定的可以约现场聊聊，毕竟人才稀缺&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;面试前，提前浏览下候选人的简历，了解其过往项目经历，这样短期内更容易全面考察候选人&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;面试不应该只局限技术，关于沟通力、团队协作、职业规划、价值观等软性方面也要考察&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;面试尾声，可以问问候选人有什么想了解的？毕竟清楚彼此双方核心诉求，才能更长远合作&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;面试结束后，及时填写面试反馈，便于后续流程推进&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何招到核心人才？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：核心人才主要关注两点：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;1、价值观。如果员工的价值观与公司不符，即使能力再强，也很难融入集体，创造价值。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;2、技术能力。这个主要是通过两个方面来把控。一个是入职的技术面试，一般有2~4轮，甚至还有部门交叉面试，全方位了解候选人的技术实力。另一个是，由于候选人之前的工作经历和方向与新工作存在一定差异性，候选人能否快速适应新工作环境，所以，会有一个试用期，试用期会制定一个考核目标，直接主管和HRBP 会定期与候选人沟通，答疑解惑，帮助候选人快速投入新的工作中。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何留住核心人才？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：做产品是为了满足用户需求。内部员工也是一样，&lt;strong&gt;先成就员工，再成就团队，最后成就企业&lt;/strong&gt;。给每个员工足够的成长机会，让他对公司有归属感，找到自己的目标与追求。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对症下药，清楚了解每个员工的诉求点：提升自身技术水平、升职加薪、想带团队。。。等，工作中尽量照顾核心员工的需求，让他们工作中能保持愉悦心态，并获得成就感。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;人嘛，干什么事都要有新鲜感，也可以尝试技术轮岗，接触一些新的东西，既开阔了员工视野，也可能碰撞出一些新的火花。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当然，作为直接负责人，你就是团队成员的天花板，所以也要严格要求自己，不断提升自己的技术能力、视野和管理能力，承担更大的职责，给团队成员预留足够的上升空间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;什么样的员工坚决开除？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;试用期制定了明确的考核目标，考核周期结束后不能很好的完成&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;踩到公司的红线，比如贪污受贿、数据泄密、威胁公司信息安全&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;态度傲慢，很难与其他同事协同工作，这种人即使能力再强，也坚决开除。因为我们是团队作战，不是搞个人英雄主义。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不认同公司的价值观，个人的品质较差&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;什么样的员工，老板喜欢？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：有人可能说，“不要工资，干活卖力！”，严肃点，不要皮&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;做事细心，考虑问题全面，工作效率高。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;工作踏实，不挑活&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;有强烈的责任心，接手一件事情，有一杆到底的精神&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;除了做好本职工作外，还会考虑系统架构优化或产品生态建设的工作，有强烈的上进心&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;善于沟通，有很强的团队协同能力&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何做好团队的激励？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：人是一种复杂动物，而且每个人的诉求都不一样，如何统一激励框架就显得非常重要。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们要找到激发员工的工作动机，用各种有效的方法来调动员工的积极性和创造性，使其完成任务。比如，现在流行的OKR 管理，自己设定目标以及关键 Key Result，并在团队中共享，做到公开透明，这样每个人都清楚了解团队的目标方向，自己在哪一个位置，起什么作用，让每个成员有强烈的参与感、掌控感，更容易激发员工的主观能动性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;具体的激励一般有以下几种：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;精神激励。领导的信任表扬；对自身价值的认同。低成本、高效率。比如：每月之星、光荣榜、各种奖项&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;晋升激励。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;物质激励，股票、期权、项目奖、季度奖、年终奖等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;量身定做，团队成员的情况千差万别，可以结合马斯洛理论，充分了解员工的情况，为员工定制化。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;作为团队负责人，如何面对压力？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案：岗位越高，承担的职责就越大，接受的挑战和压力就越大。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分阶段、分里程碑的方式来制定计划，逐步完成事项来达成目标。给自己留一些缓冲时间，以便于应对计划的灵活性调整。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;时刻保持旺盛的精力，保持跟团队成员的沟通，了解他们的工作状态和感受&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;敢于面对上层传递下来的压力，做好缓冲，避免团队过于透支，保证有一个稳固的后方。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;做好项目时间计划表，分清项目的优先级、重要性，合理安排，统筹管理&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;学会委派工作。知人善任，合理分工，发挥团队的力量，而不是当一个超级英雄&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;放松心态，工作和生活尽量分开，保证充足的睡眠和锻炼，毕竟身体是革命的本钱。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于我：前阿里P7技术专家，出过专利，竞赛拿过奖，CSDN博客专家，负责过电商交易、社区生鲜、互联网金融等业务，多年团队管理经验。&lt;/span&gt;&lt;/section&gt;&lt;h1 accuse=&quot;qTitle&quot;&gt;&lt;span&gt;&lt;span&gt;关注公众号「微观技术」，后台回复 “算法” ，免费领取资料&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2NzYyNjQzNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdmOC0H6kaQlnh3rvWF2hPpzBoAoibbfQkhLdXfEpQgd8frHoDJDH503rv3FaMK6las2rCNQY7icr6w/0?wx_fmt=png&quot; data-nickname=&quot;微观技术&quot; data-alias=&quot;weiguanjishu&quot; data-signature=&quot;前阿里P7技术专家，研究生，出过专利。负责过电商交易、社区团购、流量营销等业务。分享后端架构技能、一线大厂面试经验、团队管理等话题。欢迎关注&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247486894&amp;amp;idx=1&amp;amp;sn=8cc0ae494a7624943665a8e9d47341e1&amp;amp;chksm=ceb9f105f9ce7813b3efa57bb0c655f47a37aab82579dda3da6d05003f97adc99d83f35b6ec7&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;JAVA那点破事！并发、IO模型、集合、线程池、死锁、非阻塞、AQS....&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247486515&amp;amp;idx=1&amp;amp;sn=62a75d90d76a7f0c4cb01a64db8f4e2e&amp;amp;chksm=ceb9f098f9ce798eafec5c1e01aaeaedc00163e5c4925931da7a1b6184365d474fb1562cb664&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Redis缓存那点破事 | 绝杀面试官 25 问！&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247486281&amp;amp;idx=1&amp;amp;sn=2c0fc614dd94c93aa1172413fb340c6d&amp;amp;chksm=ceb9f7e2f9ce7ef46b0832f69b2e6e6e66d1d10c6db94fedb381da886894a1a622086e64f68a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;MYSQL 那点破事！索引、SQL调优、事务、B+树、分表 ....&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247485888&amp;amp;idx=1&amp;amp;sn=60304679c226fb6b2ebaba5bb6ad5485&amp;amp;chksm=ceb9f56bf9ce7c7d7c87fa4aa7cb70aba7af6b4aefbf1f8b3e331d5a443ccc91b3ba2fb95b9e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;TCP网络那点破事！三次握手、四次挥手、TIME-WAIT ....&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4509af965c843828c93fb4fba09c93b4</guid>
<title>一文搞懂单向散列加密：MD5、SHA-1、SHA-2 和 SHA-3</title>
<link>https://toutiao.io/k/405eqje</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;微信搜索：码农StayUp&lt;/p&gt;&lt;p&gt;主页地址：https://gozhuyinglong.github.io&lt;/p&gt;&lt;p&gt;源码分享：https://github.com/gozhuyinglong/blog-demos&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hXEWOsco2BWBFhao6P404AVlec205E5ztNwh7kIqBghdnfRQiaib3ZicBTOXhdnm1Jwd51PibMnJdTGNwpIzy8HiaSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;632&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 定义&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;单向散列函数&lt;/strong&gt;（one-way hash function）是指对不同的输入值，通过单向散列函数进行计算，得到固定长度的输出值。这个输入值称为&lt;strong&gt;消息&lt;/strong&gt;（message），输出值称为&lt;strong&gt;散列值&lt;/strong&gt;（hash value）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.20865533230293662&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hXEWOsco2BWBFhao6P404AVlec205E5zT4I3xbibz3z6v14FnOYHr7dKTPDVYyHY2lO3Id4gt0k2tyoX47eTWHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;647&quot;/&gt;&lt;figcaption&gt;单向散列函数&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单向散列函数也被称为&lt;strong&gt;消息摘要函数&lt;/strong&gt;（message digest function）、&lt;strong&gt;哈希函数&lt;/strong&gt;或者&lt;strong&gt;杂凑函数&lt;/strong&gt;。输入的消息也称为&lt;strong&gt;原像&lt;/strong&gt;（pre-image）。输出的散列值也称为&lt;strong&gt;消息摘要&lt;/strong&gt;（message digest）或者&lt;strong&gt;指纹&lt;/strong&gt;（fingerprint），相当于该消息的身份证。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单向散列函数有多种实现算法，常见的有：&lt;strong&gt;MD5&lt;/strong&gt;、&lt;strong&gt;SHA-1&lt;/strong&gt;、&lt;strong&gt;SHA-2&lt;/strong&gt;和 &lt;strong&gt;SHA-3&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 特性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上面的定义，我们对单向散列函数的了解还是模糊的。下面介绍单向散列函数的特性，加深一下印象。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1 散列值长度固定&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无论消息的长度有多少，使用同一算法计算出的散列值长度总是固定的。比如 MD5 算法，无论输入多少，产生的散列值长度总是 128 比特（16字节）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而比特是计算机能够识别的单位，而我们人类更习惯于使用十六进制字符串来表示（一个字节占用两位十六进制字符）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5670274771024146&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hXEWOsco2BWBFhao6P404AVlec205E5zB9Fk4VvrZO4RY81vAa6MDGs7Um3SoicfMGoxcdQ7ibn6zIwVDthf4HXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1201&quot;/&gt;&lt;figcaption&gt;散列值长度固定&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2 消息不同其散列值也不同&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用相同的消息，产生的散列值一定相同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用不同的消息，产生的散列值也不相同。哪怕只有一个比特的差别，得到的散列值也会有很大区别。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一特性也叫做&lt;strong&gt;抗碰撞性&lt;/strong&gt;，对于抗碰撞性弱的算法，我们不应该使用。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2656119900083264&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hXEWOsco2BWBFhao6P404AVlec205E5zPcHSibjn0SIoFvRvsgBT6856X4yQO0UR8ql0lpfKX4FxAFJE8RwNbDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1201&quot;/&gt;&lt;figcaption&gt;消息不同其散列值也不同&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.3 具备单向性&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只能通过消息计算出散列值，无法通过散列值反算出消息。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4159869494290375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hXEWOsco2BWBFhao6P404AVlec205E5z9Y0OKYdaicNIjM0wRfDgNFevLKh6lzzIib4ZrZ9sE8BuxMFGGibgC5qyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;613&quot;/&gt;&lt;figcaption&gt;具备单向性&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.4 计算速度快&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;计算散列值的速度快。尽管消息越长，计算散列值的时间也越长，但也会在短时间内完成。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 常见算法&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MD5 与 SHA-1 算法已被攻破，不应该被用于新的用途；SHA-2 与 SHA-3 还是安全的，可以使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SHA-2包括：SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SHA-3包括：SHA3-224、SHA3-256、SHA3-384、SHA3-512。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;算法名称&lt;/th&gt;&lt;th&gt;散列值长度&lt;/th&gt;&lt;th&gt;是否安全&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;MD5&lt;/td&gt;&lt;td&gt;128&lt;/td&gt;&lt;td&gt;不安全&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SHA-1&lt;/td&gt;&lt;td&gt;160&lt;/td&gt;&lt;td&gt;不安全&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SHA-224&lt;/td&gt;&lt;td&gt;224&lt;/td&gt;&lt;td&gt;安全&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SHA-256&lt;/td&gt;&lt;td&gt;256&lt;/td&gt;&lt;td&gt;安全&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SHA-384&lt;/td&gt;&lt;td&gt;384&lt;/td&gt;&lt;td&gt;安全&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SHA-512&lt;/td&gt;&lt;td&gt;512&lt;/td&gt;&lt;td&gt;安全&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SHA-512/224&lt;/td&gt;&lt;td&gt;224&lt;/td&gt;&lt;td&gt;安全&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SHA-512/256&lt;/td&gt;&lt;td&gt;256&lt;/td&gt;&lt;td&gt;安全&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SHA3-224&lt;/td&gt;&lt;td&gt;224&lt;/td&gt;&lt;td&gt;安全&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SHA3-256&lt;/td&gt;&lt;td&gt;256&lt;/td&gt;&lt;td&gt;安全&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SHA3-384&lt;/td&gt;&lt;td&gt;384&lt;/td&gt;&lt;td&gt;安全&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SHA3-512&lt;/td&gt;&lt;td&gt;512&lt;/td&gt;&lt;td&gt;安全&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. 应用场景&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单向散列函数并不能确保信息的机密性，它是一种保证信息完整性的密码技术。下面来看它的应用场景。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.1 用户密码保护&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户在设置密码时，不记录密码本身，只记录密码的散列值，只有用户自己知道密码的明文。校验密码时，只要输入的密码正确，得到的散列值一定是一样的，表示校验正确。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了防止彩虹表破解，还可以为密码进行加盐处理，只要验证密码时，使用相同的盐即可完成校验。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5024193548387097&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hXEWOsco2BWBFhao6P404AVlec205E5z4p9pKUkIy6w7lBU1rTG0zwUt7j72VnW325sSYVcU5C9b97FXBPy56g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;figcaption&gt;用户密码保护&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用散列值存储密码的好处是：即使数据库被盗，也无法将密文反推出明文是什么，使密码保存更安全。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.2 接口验签&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了保证接口的安全，可以采用签名的方式发送。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发送者与接收者要有一个&lt;strong&gt;共享秘钥&lt;/strong&gt;。当发送者向接收者发送请求时，参数中附加上签名（签名由&lt;strong&gt;共享秘钥 &lt;strong&gt;+&lt;/strong&gt; 业务参数&lt;/strong&gt;，进行单向散列函数加密生成）。接收者收到后，使用相同的方式生成签名，再与收到的签名进行比对，如果一致，验签成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样即可以验证业务参数是否被篡改，又能验明发送者的身份。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7063829787234043&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hXEWOsco2BWBFhao6P404AVlec205E5zbyJtqk1Tfte2DIw4hqrpn5UOvwR0wRA6vqOGOqDCkw0MvlMoOwRFmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;940&quot;/&gt;&lt;figcaption&gt;接口验签&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.3 文件完整性校验&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文件被挂载到网站时，同时也附上其散列值和算法，比如 Tomcat 官网。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6595238095238095&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hXEWOsco2BWBFhao6P404AVlec205E5zRv8mUWibh0c86p5XxFgKx26NibkzhGSUOWlRh77FtzhN44tKKWf8yBEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;420&quot;/&gt;&lt;figcaption&gt;Tomcat官网下载页面&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户下载后，计算其散列值，对比结果是否相同，从而校验文件的完整性。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.4 云盘秒传&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们将自己喜欢的视频放到网盘上时，发现只用了几秒的时间就上传成功了，而这个文件有几个G大小，是怎么做到的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这个“秒传”功能可以利用单向散列函数来实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们上传一个文件时，云盘客户端会先为该文件生成一个散列值。拿着这个散列值去数据库中匹配，如果匹配到，说明该文件已经在云服务器存在。只需将该散列值与用户进行关联，便可完成本次“上传”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，一个文件在云服务器上只会存一份，大大节约了云服务器的空间。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4144736842105263&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hXEWOsco2BWBFhao6P404AVlec205E5zh1picUAzkYYJXJLOO6kjG2sQXZsgnOcKtMCp2w1C2TZfKO2qKlgNsdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1064&quot;/&gt;&lt;figcaption&gt;云盘秒传&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. 代码实现&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JDK的 &lt;code&gt;java.security.MessageDigest&lt;/code&gt; 类为我们提供了消息摘要算法，用于 MD5和SHA的散列值生成。下面代码做了简单的封装，便于直接使用。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public class MDUtil {&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * MD5 加密&lt;br/&gt;     *&lt;br/&gt;     * @param data 要加密的数据&lt;br/&gt;     * @&lt;span&gt;return&lt;/span&gt; 32位十六进制字符串&lt;br/&gt;     */&lt;br/&gt;    public static String MD5(byte[] data) {&lt;br/&gt;        try {&lt;br/&gt;            MessageDigest md = MessageDigest.getInstance(&lt;span&gt;&quot;MD5&quot;&lt;/span&gt;);&lt;br/&gt;            byte[] bytes = md.digest(data);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; bytesToHexString(bytes);&lt;br/&gt;        } catch (NoSuchAlgorithmException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * MD5 加密&lt;br/&gt;     *&lt;br/&gt;     * @param data 要加密的数据&lt;br/&gt;     * @&lt;span&gt;return&lt;/span&gt; 32位十六进制字符串&lt;br/&gt;     */&lt;br/&gt;    public static String MD5(String data) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; MD5(data.getBytes());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * SHA-1 加密&lt;br/&gt;     *&lt;br/&gt;     * @param data 要加密的数据&lt;br/&gt;     * @&lt;span&gt;return&lt;/span&gt; 40位十六进制字符串&lt;br/&gt;     */&lt;br/&gt;    public static String SHA1(byte[] data) {&lt;br/&gt;        try {&lt;br/&gt;            MessageDigest md = MessageDigest.getInstance(&lt;span&gt;&quot;SHA-1&quot;&lt;/span&gt;);&lt;br/&gt;            byte[] bytes = md.digest(data);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; bytesToHexString(bytes);&lt;br/&gt;        } catch (NoSuchAlgorithmException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * SHA-1 加密&lt;br/&gt;     *&lt;br/&gt;     * @param data 要加密的数据&lt;br/&gt;     * @&lt;span&gt;return&lt;/span&gt; 40位十六进制字符串&lt;br/&gt;     */&lt;br/&gt;    public static String SHA1(String data) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SHA1(data.getBytes());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * SHA-224 加密&lt;br/&gt;     *&lt;br/&gt;     * @param data 要加密的数据&lt;br/&gt;     * @&lt;span&gt;return&lt;/span&gt; 56位十六进制字符串&lt;br/&gt;     */&lt;br/&gt;    public static String SHA224(byte[] data) {&lt;br/&gt;        try {&lt;br/&gt;            MessageDigest md = MessageDigest.getInstance(&lt;span&gt;&quot;SHA-224&quot;&lt;/span&gt;);&lt;br/&gt;            byte[] bytes = md.digest(data);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; bytesToHexString(bytes);&lt;br/&gt;        } catch (NoSuchAlgorithmException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * SHA-224 加密&lt;br/&gt;     *&lt;br/&gt;     * @param data 要加密的数据&lt;br/&gt;     * @&lt;span&gt;return&lt;/span&gt; 56位十六进制字符串&lt;br/&gt;     */&lt;br/&gt;    public static String SHA224(String data) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SHA224(data.getBytes());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * SHA-256 加密&lt;br/&gt;     *&lt;br/&gt;     * @param data 要加密的数据&lt;br/&gt;     * @&lt;span&gt;return&lt;/span&gt; 64位十六进制字符串&lt;br/&gt;     */&lt;br/&gt;    public static String SHA256(byte[] data) {&lt;br/&gt;        try {&lt;br/&gt;            MessageDigest md = MessageDigest.getInstance(&lt;span&gt;&quot;SHA-256&quot;&lt;/span&gt;);&lt;br/&gt;            byte[] bytes = md.digest(data);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; bytesToHexString(bytes);&lt;br/&gt;        } catch (NoSuchAlgorithmException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * SHA-256 加密&lt;br/&gt;     *&lt;br/&gt;     * @param data 要加密的数据&lt;br/&gt;     * @&lt;span&gt;return&lt;/span&gt; 64位十六进制字符串&lt;br/&gt;     */&lt;br/&gt;    public static String SHA256(String data) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SHA256(data.getBytes());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * SHA-384 加密&lt;br/&gt;     *&lt;br/&gt;     * @param data 要加密的数据&lt;br/&gt;     * @&lt;span&gt;return&lt;/span&gt; 96位十六进制字符串&lt;br/&gt;     */&lt;br/&gt;    public static String SHA384(byte[] data) {&lt;br/&gt;        try {&lt;br/&gt;            MessageDigest md = MessageDigest.getInstance(&lt;span&gt;&quot;SHA-384&quot;&lt;/span&gt;);&lt;br/&gt;            byte[] bytes = md.digest(data);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; bytesToHexString(bytes);&lt;br/&gt;        } catch (NoSuchAlgorithmException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * SHA-384 加密&lt;br/&gt;     *&lt;br/&gt;     * @param data 要加密的数据&lt;br/&gt;     * @&lt;span&gt;return&lt;/span&gt; 96位十六进制字符串&lt;br/&gt;     */&lt;br/&gt;    public static String SHA384(String data) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SHA384(data.getBytes());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * SHA-512 加密&lt;br/&gt;     *&lt;br/&gt;     * @param data 要加密的数据&lt;br/&gt;     * @&lt;span&gt;return&lt;/span&gt; 128位十六进制字符串&lt;br/&gt;     */&lt;br/&gt;    public static String SHA512(byte[] data) {&lt;br/&gt;        try {&lt;br/&gt;            MessageDigest md = MessageDigest.getInstance(&lt;span&gt;&quot;SHA-512&quot;&lt;/span&gt;);&lt;br/&gt;            byte[] bytes = md.digest(data);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; bytesToHexString(bytes);&lt;br/&gt;        } catch (NoSuchAlgorithmException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * SHA-512 加密&lt;br/&gt;     *&lt;br/&gt;     * @param data 要加密的数据&lt;br/&gt;     * @&lt;span&gt;return&lt;/span&gt; 128位十六进制字符串&lt;br/&gt;     */&lt;br/&gt;    public static String SHA512(String data) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; SHA512(data.getBytes());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * 将字节数组转换为十六进制字符串&lt;br/&gt;     *&lt;br/&gt;     * @param bytes 字节数组&lt;br/&gt;     * @&lt;span&gt;return&lt;/span&gt; 十六进制字符串&lt;br/&gt;     */&lt;br/&gt;    private static String bytesToHexString(byte[] bytes) {&lt;br/&gt;        StringBuilder hexValue = new StringBuilder();&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (byte b : bytes) {&lt;br/&gt;            int val = b &amp;amp; 0xFF;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (val &amp;lt; 16) {&lt;br/&gt;                hexValue.append(&lt;span&gt;&quot;0&quot;&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;            hexValue.append(Integer.toHexString(val));&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; hexValue.toString();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面分别使用这些算法计算“123456”的散列值：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;MD5\t\t&quot;&lt;/span&gt; + MDUtil.MD5(&lt;span&gt;&quot;123456&quot;&lt;/span&gt;));&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;SHA-1\t&quot;&lt;/span&gt; + MDUtil.SHA1(&lt;span&gt;&quot;123456&quot;&lt;/span&gt;));&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;SHA-224\t&quot;&lt;/span&gt; + MDUtil.SHA224(&lt;span&gt;&quot;123456&quot;&lt;/span&gt;));&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;SHA-256\t&quot;&lt;/span&gt; + MDUtil.SHA256(&lt;span&gt;&quot;123456&quot;&lt;/span&gt;));&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;SHA-384\t&quot;&lt;/span&gt; + MDUtil.SHA384(&lt;span&gt;&quot;123456&quot;&lt;/span&gt;));&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;SHA-512\t&quot;&lt;/span&gt; + MDUtil.SHA512(&lt;span&gt;&quot;123456&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;MD5      e10adc3949ba59abbe56e057f20f883e&lt;br/&gt;SHA-1    7c4a8d09ca3762af61e59520943dc26494f8941b&lt;br/&gt;SHA-224  f8cdb04495ded47615258f9dc6a3f4707fd2405434fefc3cbf4ef4e6&lt;br/&gt;SHA-256  8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92&lt;br/&gt;SHA-384  0a989ebc4a77b56a6e2bb7b19d995d185ce44090c13e2984b7ecc6d446d4b61ea9991b76a4c2f04b1b4d244841449454&lt;br/&gt;SHA-512  ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我用的是Java8，还不支持 SHA-3，所以上面代码只封装了MD5、SHA-1和SHA-2。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.31919406150583246&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hXEWOsco2BWBFhao6P404AVlec205E5z2wjsQr39iakJzCd5SnR7bgZNUSLQqyODNY5zltcVliaVxYufgSkLa5mA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;943&quot;/&gt;&lt;figcaption&gt;Java8支持的算法&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从Java9开始支持SHA-3&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3336724313326551&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hXEWOsco2BWBFhao6P404AVlec205E5zY5wmnjuKmCEBCfwl57I59FciaU2Dq7MvPVKU169zadBITDfpTy5CjwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;983&quot;/&gt;&lt;figcaption&gt;Java9支持的算法&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6. 完整代码&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完整代码请访问我的Github，若对你有帮助，欢迎给个Star，谢谢！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://github.com/gozhuyinglong/blog-demos/blob/main/java-source-analysis/src/main/java/io/github/gozhuyinglong/utils/MDUtil.java&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7. 推荐阅读&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c0ad723a17db5e9634952ff37ac1c537</guid>
<title>推荐 14 款常用的测试开发工具</title>
<link>https://toutiao.io/k/kd9j9ur</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一、UI自动化测试工具&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;1. uiautomator2&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Github地址&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://github.com/openatx/uiautomator2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;openatx开源的ui自动化工具，支持Android和iOS。主要面向的编程语言是Python，API设计简洁易用，在开源社区也是很受欢迎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;原理图：&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100010530&quot; data-ratio=&quot;0.38958990536277605&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k2FwYYrGoDmibgrlxbmj9UaUJ2VB6y0zTE8ntptQpfWSamUc2zvozbuy9ZcaIGzZ8kHkRVOLfgZ86ZI63LgYb5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;安装：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;pip install --upgrade --pre uiautomator2&lt;br/&gt;&lt;span&gt;# Or you can install directly from github source&lt;/span&gt;&lt;br/&gt;git clone https://github.com/openatx/uiautomator2&lt;br/&gt;pip install -e uiautomator2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2. Appium&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Github地址：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://github.com/appium/appium&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于Node.js的一款非常成熟的APP UI自动化工具，支持多种语言开发，在测试圈非常流行，可以说是APP UI自动化领域的标杆产品。如果你不知道Appium，都不好意思说自己干测试这行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;原理图：&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100010531&quot; data-ratio=&quot;0.3800251256281407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/k2FwYYrGoDmibgrlxbmj9UaUJ2VB6y0zTPv4XLicIQ1nq60tyfJrOusDGiaOVbTpqlz6bE90BjrwMicriag8zbSlrnw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1592&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3. ATX-Test&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Github地址：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://github.com/pengchenglin/ATX-Test&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于uiautomator2和unittest封装的一个UI自动化测试框架。项目作者已经把框架设计、可配置化、底层设备连接、日志模块、报告模块都做好了，使用者只需要编写PageObject和脚本逻辑即可，大大提高了uiautomator2的易用性。不仅如此，该项目现在还支持Monkey运行。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;4. Airtest&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Github地址：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://github.com/AirtestProject/Airtest&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网易开源的一个ui自动化测试工具，通过图像识别和UI控件检索技术，使得游戏测试简单快捷。支持Android、iOS、Windows、Unity、Cocos2dx、白鹭引擎、微信小程序，上手简单，游戏测试的朋友可以体验体验。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100010532&quot; data-ratio=&quot;0.5692464358452138&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k2FwYYrGoDmibgrlxbmj9UaUJ2VB6y0zTUgBWuaaQl8nH6oQib1MSyianr4doKeCc2ibeZlzWsJjAotfhSeurKNoLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;982&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;5. ATXServer2&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Github地址：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://github.com/openatx/atxserver2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;支持Android和iOS的移动设备管理平台。可以通过web界面，察看测试手机的状态，可以做到远程操控手机，对于测试兼容性具有较大帮助。部署方便，支持docker-compose部署。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100010533&quot; data-ratio=&quot;0.2631578947368421&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k2FwYYrGoDmibgrlxbmj9UaUJ2VB6y0zTZCl8jqbxz8P1yn4GqzuPAF9c3miao5A1lQcjQ8hKPjQe5H2icolIZXMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;874&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100010534&quot; data-ratio=&quot;0.5156069364161849&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k2FwYYrGoDmibgrlxbmj9UaUJ2VB6y0zTvgW1ouNBDIcqcarLvSqbZ0pXcMgXHbYy5qV6eicHNKA3PU77GJ6H89g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;865&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;6. STF&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Github地址：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://github.com/openstf/stf&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;远程移动设备管理平台，支持Android、iOS真机管理，功能非常强大。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100010535&quot; data-ratio=&quot;0.6450471698113207&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k2FwYYrGoDmibgrlxbmj9UaUJ2VB6y0zTkciadVuUzpiaesFmTJkloiabnNyaYSsFFfRAsK1sYrS6VdDYibbORfvrDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;848&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;7. Appetizer&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;官网地址：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://www.appetizer.io/cn/&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用十分方便。可以进行APP UI自动化测试，也可以支持APP稳定性测试，提供GUI界面操作，易用性极强，满足日常UI自动化需要。可惜只有部分组件开源。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100010539&quot; data-ratio=&quot;0.7749287749287749&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k2FwYYrGoDmibgrlxbmj9UaUJ2VB6y0zTeyWPErJgwq8lkbiaZUQibTHb3ajJHL0wfxke3J3ILjChhib6xc8uWDybA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1053&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二、APP稳定性测试工具&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;8. UICrawler&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Github地址&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://github.com/lgxqf/UICrawler&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于Appium的App UI遍历 &amp;amp; Monkey 工具，支持iOS和Android&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;9. Maxim&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Github地址&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://github.com/zhangzhao4444/Maxim&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;号称是智能monkey，用过的人都觉得真香。支持原生monkey、遍历控件、黑白名单等功能，而且也封装了更加易解析的日志文件。有了它之后，已经可以不需要再用原生monkey了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100010536&quot; data-ratio=&quot;0.684954280964256&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k2FwYYrGoDmibgrlxbmj9UaUJ2VB6y0zTT8GtQJQnV7GTo4qR91Xv7zhyfuqgIBULowiamHfichPloicNNrwic8IeMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1203&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;10. AppCrawler&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Github地址&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://github.com/seveniruby/AppCrawler&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个基于自动遍历的app爬虫工具. 支持android和iOS, 支持真机和模拟器. 最大的特点是灵活性. 可通过配置来设定遍历的规则。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;三、APP性能测试工具&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;11. SoloPi&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Github地址&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://github.com/alipay/SoloPi&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SoloPi是一个无线化、非侵入式的Android自动化工具，公测版拥有录制回放、性能测试、一机多控三项主要功能，能为测试开发人员节省宝贵时间（官方介绍）。一般用于APP的性能测试比较多。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;12. GT&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Github地址&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://github.com/Tencent/GT&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;腾讯开源的APP的随身调试平台，可对APP进行快速的性能测试(CPU、内存、流量、电量、帧率/流畅度等等)、开发日志的查看、Crash日志查看、网络数据包的抓取、APP内部参数的调试、真机代码耗时统计等。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100010538&quot; data-ratio=&quot;0.5563380281690141&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k2FwYYrGoDmibgrlxbmj9UaUJ2VB6y0zTriaUtibFEibBursV4tbLhgeicTDtxJZxJAicSFk4U0ciaQhO9F7ibqNb0q1ibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;710&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;利用 GT，仅凭一部手机，无需连接电脑，即可对 APP 进行快速的性能测试(CPU、内存、流量、电量、帧率/流畅度等等)、开发日志的查看、Crash 日志查看、网络数据包的抓取、APP 内部参数的调试、真机代码耗时统计等。如果您觉得 GT 提供的功能还不够满足您的需要，您还可以利用 GT 提供的基础 API 自行开发有特殊功能的 GT 插件，帮助您解决更加复杂的 APP 调试问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GT 支持 iOS 和 Android 两个手机平台，其中：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;iOS 版是一个 Framework 包，必须嵌入 APP 工程，编译出带 GT 的 APP 才能使用；iPhone 和 iPad 应用都能支持。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Android 版由一个可直接安装的 GT 控制台 APP 和 GT SDK 组成，GT 控制台可以独立安装使用，SDK 需嵌入被调测的应用、并利用 GT 控制台进行信息展示和参数修改。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;四、抓包工具&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;13. AnyProxy&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Github地址&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://github.com/alibaba/anyproxy&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阿里开源的抓包工具，基于Node.js可进行二次开发，使用场景：app爬虫、接口数据分析等。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100010537&quot; data-ratio=&quot;0.5758211041229909&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k2FwYYrGoDmibgrlxbmj9UaUJ2VB6y0zTM06iaWIr6gziaoPsZv7L88r8Teib9GITKIIZI85PDTql7ajMoPv5vpmPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1431&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;14. mitmproxy&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Github地址&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://github.com/mitmproxy/mitmproxy&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于Python的抓包工具，对于pythoner更加友好，主要作用是对抓包数据进行采集供后续分析。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100010540&quot; data-ratio=&quot;0.6679946879150066&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/k2FwYYrGoDmibgrlxbmj9UaUJ2VB6y0zTltr7ib01MbNuicT6ZocAlRkXu7oAtoMy8EibcC2gQ2qQT7Mediciakb8YZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;753&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>473aec99ad19efd8fe22feeefd9321f9</guid>
<title>一起学 containerd（五）：代码调试起来</title>
<link>https://toutiao.io/k/ynjqs96</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-hnrfcf&quot; options=&quot;[object Object]&quot;&gt;&lt;p&gt;研究源码的方式大抵如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;读源码自带的文档。&lt;/li&gt;&lt;li&gt;阅读源码，主要包括程序启动过程。程序提供服务的详细流程。对于containerd而言，可以研究containerd的启动流程，然后研究image、containerd具体的操作。&lt;/li&gt;&lt;li&gt;通过开启查询程序员日志了解程序员运行原理，排查问题。&lt;/li&gt;&lt;li&gt;通过调试代码调试了解细节通过本文.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过本文你可以了解如何通过debug contained实现对containerd的研究。&lt;/p&gt;&lt;h2 id=&quot;h_422522890_0&quot; data-into-catalog-status=&quot;&quot;&gt;1 调试配置&lt;/h2&gt;&lt;p&gt;由于contained依赖内核提供的cgroup、overlayfs等，所以containerd要运行在linux上，但是我们开发一般使用windows或者mac 系统开发。一般我们通过购买linux云服务器或者本地使用虚拟机实现。此时就需要远程调试了。&lt;/p&gt;&lt;p&gt;本文使用mac本地搭建虚拟机使用。使用goland作为开发工作。利用Goland的deployment实现代码同步。goland提供了强大的远程调试功能。配置非常简单，配置好deployment之后，如下图所示，run on选择远程服务器即可。这样点击goland的debug按钮就可以远程调试了。如果大家有idea 调试java 经验。流程差不多。&lt;/p&gt;&lt;p&gt;goland的中的run on功能真的很赞，可以远程实现远程测试、调试。测试用例也可以调试了爽爆了。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-cd65b3953e38f3724d4d4ec7476ac5cf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1858&quot; data-rawheight=&quot;1130&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-cd65b3953e38f3724d4d4ec7476ac5cf_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1858&quot; data-rawheight=&quot;1130&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-cd65b3953e38f3724d4d4ec7476ac5cf_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-cd65b3953e38f3724d4d4ec7476ac5cf_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;                                                                   goland 远程调试配置&lt;/p&gt;&lt;h2 id=&quot;h_422522890_1&quot; data-into-catalog-status=&quot;&quot;&gt;2. containerd中的进程&lt;/h2&gt;&lt;h3 id=&quot;h_422522890_2&quot; data-into-catalog-status=&quot;&quot;&gt;2.1 containerd中进程模型概述&lt;/h3&gt;&lt;p&gt;我们知道调试的目标是进程，那contaInerd的进程模型是什么呢？首先我们需要启动一个pod,crictl启动pod可以参考 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/kubernetes-sigs/cri-tools/blob/master/docs/crictl.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;。进程模型参考图 containerd中的进程模型。&lt;/p&gt;&lt;p&gt;1）containerd进程：containerd启动后为守护，其他进程可通过grpc进行访问。&lt;/p&gt;&lt;p&gt;2）containerd-shim进程：启动一个sandbox，需先创建container-shim进程，创建一个namespace ,创建pasuse进程，指定该进程为前面描述的namespace.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;busybox(业务进程)：启动业务进程指定为pause对应的namespace&lt;/li&gt;&lt;li&gt;&lt;b&gt;我们调试的进程是containerd和containerd-shim进程。&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-10cec29876fd63e3e68621ed98be24ea_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1091&quot; data-rawheight=&quot;411&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-10cec29876fd63e3e68621ed98be24ea_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1091&quot; data-rawheight=&quot;411&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-10cec29876fd63e3e68621ed98be24ea_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-10cec29876fd63e3e68621ed98be24ea_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;                                                         图 containerd中的进程模型&lt;/p&gt;&lt;p&gt;下面我们通过查看启动的pod的相关配置，验证图 containerd中的进程模型描述的信息。&lt;/p&gt;&lt;h3 id=&quot;h_422522890_3&quot; data-into-catalog-status=&quot;&quot;&gt;2.2 namespace配置&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;启动一个busybox&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod的结果&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;我们可以看到&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# pstree -lp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;systemd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerd-shim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6088&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;─┬─&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6105&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;                       &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6626&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;                       &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerd-shim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6089&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;                       &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerd-shim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6090&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;                       &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerd-shim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6091&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;                       &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerd-shim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6092&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;                       &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerd-shim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6093&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;                       &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerd-shim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6094&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;                       &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerd-shim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6095&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;                       &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerd-shim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;                       &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerd-shim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6112&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;                       &lt;span class=&quot;err&quot;&gt;└─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerd-shim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;查看containerd-shim对应的namespace&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# ls -l /proc/6088/ns/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531839&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnt&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531840&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531956&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531836&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531837&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uts&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531838&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6090实际是进程6088的线程&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace当然相同&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# ls -l /proc/6090/ns/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531839&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnt&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531840&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531956&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531836&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531837&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uts&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531838&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;随便找一个宿主机对应的进程的namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;与container-shim进程相同&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ls -l /proc/5103/ns(宿主主机的sshd进程)，namespace也是宿主机的namespace&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531839&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnt&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531840&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531956&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531836&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531837&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uts&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531838&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;#pod中的pause进程，namepsace不是宿主机的。&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# ls -l /proc/6105/ns/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;65535&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;65535&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026532260&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;65535&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;65535&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnt&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026532258&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;65535&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;65535&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026532183&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;65535&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;65535&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026532261&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;65535&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;65535&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531837&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;65535&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;65535&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uts&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026532259&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#pod中的top进程，namepsace不是宿主机的。且除了mnt namespace与pause不同，其他都是相同的。&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# ls -l /proc/6626/ns/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026532260&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnt&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026532262&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026532183&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026532261&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026531837&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lrwxrwxrwx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uts&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4026532259&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;h_422522890_4&quot; data-into-catalog-status=&quot;&quot;&gt;2.3 cgroup 配置&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k8s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# systemd-cgls&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Working&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k8s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a4560bca3e47ccf5b47ae168d6e7021c6280305d90ea37b7e41cfeacd8a9f224&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;└─&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6626&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└─&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4dc4f2c0b8fe5f9c2921df05d648464bba4ff85948728e08cb5b542a62cb1e74&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;└─&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;6105&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;h_422522890_5&quot; data-into-catalog-status=&quot;&quot;&gt;3 代码调试起来&lt;/h2&gt;&lt;h3 id=&quot;h_422522890_6&quot; data-into-catalog-status=&quot;&quot;&gt;3.1 调试containerd启动&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-59148c1ab58a5275014eb314609d490e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3084&quot; data-rawheight=&quot;2032&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-59148c1ab58a5275014eb314609d490e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3084&quot; data-rawheight=&quot;2032&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-59148c1ab58a5275014eb314609d490e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-59148c1ab58a5275014eb314609d490e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;                                                                    containerd调试流程&lt;/p&gt;&lt;h3 id=&quot;h_422522890_7&quot; data-into-catalog-status=&quot;&quot;&gt;3.2 调试cri相关服务&lt;/h3&gt;&lt;p&gt;containerd是k8s的运行时，我们关注kubelet和containerd的交互啊，而crictl很好的模拟了这种交互，我们通过crictl执行相关命令就可以实现这些服务的调试。&lt;/p&gt;&lt;p&gt;具体cri实现参考pkg/cri/server 里面每个go文件都是一个cri接口的实现。我们再/pkg/cri/server/image_list文件打断点，然后我们在远程主机上执行&lt;/p&gt;&lt;p&gt;crictl image list&lt;/p&gt;&lt;p&gt;看到goland中的断点进入了：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-59148c1ab58a5275014eb314609d490e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3084&quot; data-rawheight=&quot;2032&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-59148c1ab58a5275014eb314609d490e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3084&quot; data-rawheight=&quot;2032&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-59148c1ab58a5275014eb314609d490e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-59148c1ab58a5275014eb314609d490e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_422522890_8&quot; data-into-catalog-status=&quot;&quot;&gt;3.3 调试containerd-shim启动&lt;/h3&gt;&lt;p&gt;3.3.1 containerd-shim启动时机&lt;/p&gt;&lt;p&gt;创建sandbox时，会启动shim进程&lt;/p&gt;&lt;p&gt;3.3.2container-shim如何启动&lt;/p&gt;&lt;p&gt;启动命令帮助命令如下&lt;/p&gt;&lt;p&gt;markdown[root@172-0-0-4 containerd]# /usr/local/bin/containerd-shim-runc-v2 --help&lt;br/&gt;Usage of /usr/local/bin/containerd-shim-runc-v2:&lt;br/&gt;  -address string&lt;br/&gt;        grpc address back to main containerd&lt;br/&gt;  -bundle string&lt;br/&gt;        path to the bundle if not workdir&lt;br/&gt;  -debug&lt;br/&gt;        enable debug output in logs&lt;br/&gt;  -id string&lt;br/&gt;        id of the task&lt;br/&gt;  -namespace string&lt;br/&gt;        namespace that owns the shim&lt;br/&gt;  -publish-binary string&lt;br/&gt;        path to publish binary (used for publishing events) (default &quot;containerd&quot;)&lt;br/&gt;  -socket string&lt;br/&gt;        socket path to serve&lt;br/&gt;  -v    show the shim version and exit&lt;/p&gt;&lt;p&gt;实例用法&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;/usr/local/bin/containerd-shim-runc-v2 -namespace k8s.io -id 4dc4f2c0b8fe5f9c2921df05d648464bba4ff -address /var/run/containerd/containerd.sock&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.3.3 模拟containerd-shim启动&lt;/p&gt;&lt;p&gt;    这个流程很繁琐，后续再说。&lt;/p&gt;&lt;h2 id=&quot;h_422522890_9&quot; data-into-catalog-status=&quot;&quot;&gt;3 参考文档&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/d446121dbfc2&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;jianshu.com/p/d446121db&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;fc2&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt; cni插件&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/75422252&quot; class=&quot;internal&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;zhuanlan.zhihu.com/p/75&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;422252&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt; cgroup 深入&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>647b37de97a433160045755fea83bc46</guid>
<title>4000 字详解跳表实现（挑战全网中文最详细）</title>
<link>https://toutiao.io/k/o6unhkt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;_2rhmJa&quot;&gt;&lt;p&gt;最近在看研究公司业务的存储架构，现有的存储用redis 和 leveldb 通过自己写的中间件做数据落地。这样写业务和数据恢复有点麻烦，想着优化一下，就去研究redis和leveldb的源码。发现了跳表这个数据结构很有意思，性能不错，实现也相对简单，就想着自己用go实现一个跳表，在通过这个跳表实现一个类似redis 的 zset 功能。我会尽可能 详细的去介绍所有实现细节。&lt;br/&gt;
看着篇文章，首先熟悉链表的相关知识，比如链表的插入和删除。最好会一点go，不会关系也不大，go的语法很简单，和C有一点像，有计算机基础的基本很快就能看懂go的语法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面分这个几点来介绍&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跳表是什么&lt;/li&gt;
&lt;li&gt;跳表的优缺点&lt;/li&gt;
&lt;li&gt;跳表的结构&lt;/li&gt;
&lt;li&gt;怎么实现一个跳表(增删改查)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;跳表是什么&lt;/h3&gt;
&lt;p&gt;跳表是一个可以快速查找的有序链表, 搜索、插入、删除操作的时间均为O(logn), 关于跳表的详细定义 &lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fzh.wikipedia.org%2Fwiki%2F%25E8%25B7%25B3%25E8%25B7%2583%25E5%2588%2597%25E8%25A1%25A8&quot; target=&quot;_blank&quot;&gt;维基百科&lt;/a&gt;  &lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E8%25B7%25B3%25E8%25A1%25A8%2F22819833&quot; target=&quot;_blank&quot;&gt;百度百科&lt;/a&gt;   跳表虽然是非常有用的数据结构，但是很多书里都没有写这个，我在大学的数据结构课本里也没有写跳表，就导致很多人对跳表不熟悉。&lt;/p&gt;
&lt;p&gt;跳表本质上是一个链表，因为链表的随机查找性能太差，是O(N)，查找元素只能从头结点或者尾结点遍历。&lt;/p&gt;

&lt;p&gt;如图中要查找结点6，只能从结点1 一点点往右遍历。&lt;/p&gt;
&lt;p&gt;能不能在链表中使用二分查找呢，当然是可以的，就是给链表加索引，也就是跳表了&lt;/p&gt;

&lt;p&gt;上图就是一个简单的跳表了（图中的各种颜色和数字后面会有详细的介绍）。从图中可以看出，跳表是在双向链表的基础上，加了多层索引实现的。&lt;/p&gt;
&lt;h3&gt;跳表的优缺点&lt;/h3&gt;
&lt;p&gt;作为快速查找的数据结构，跳表常用来和红黑树 做比较，列一下跳表和红黑树的优缺点吧&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;跳表实现起来相对简单。红黑树的定义和左旋右旋操作，确实复杂，我资质愚钝，理解起来还是有单困难。后面我会解释跳表实现简单的原因的.&lt;/li&gt;
&lt;li&gt;区间查找方便。在跳表中找到一个节点后，就可以通过前后指针找到相邻的元素。红黑树则需要通过父节点，子节点去寻找，相对麻烦。&lt;/li&gt;
&lt;/ol&gt;

&lt;ol&gt;
&lt;li&gt;内存占用小，只需要3个指针就可以（左子树，右子树，父节点） 而跳表有一个向后的指针，每一层都有一个向前的指针&lt;/li&gt;
&lt;li&gt;红黑树的查找稳定，红黑树有着严格的定义，每次插入和删除数据都会通过左旋右旋来平衡树的结构，通过红黑树查找有着稳定的查找时间O(logn) ，为啥跳表是不稳定的，看到跳表是怎样确定层数的就明白了&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;跳表的结构和实现&lt;/h3&gt;
&lt;p&gt;跳表的实现思路借鉴了redis的zset实现思想具体代码在&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fredis%2Fredis%2Fblob%2Funstable%2Fsrc%2Ft_zset.c&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;&lt;br/&gt;
跳表简单说可以有两种实现思路，一种是跳表内不能有重复的元素，另一种是跳表内允许有重复元素。redis中的跳表是允许有重复元素的，我这次实现的也是可以有重复元素的。&lt;/p&gt;
&lt;h5&gt;跳表node 的结构&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;type SkipListLevel struct {
    //指向下一个结点
    forward *SkipListNode

    /*
     * 到下一个node的距离;
     * 思考,为啥是记录到下一个node, 而不是记录上一个node到这的距离
     */
    span int64
}

type SkipListNode struct {
    //指向上一个结点
    backward *SkipListNode
    //索引用的层
    level []SkipListLevel
    //存储的值
    value ISkipListNode
    //排名用的分数
    score float64
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在一个node中，黑色的&lt;strong&gt;1&lt;/strong&gt;是 &lt;strong&gt;value&lt;/strong&gt;， 黄色的方块是&lt;strong&gt;level&lt;/strong&gt;，白色的数字是&lt;strong&gt;span&lt;/strong&gt;，&lt;strong&gt;backward&lt;/strong&gt; 和 &lt;strong&gt;forward&lt;/strong&gt; 这两个指针在图中没有体现出来，只会有一个backward （向后的指针），level数组长度是多少，就会有多少个forward（向前的）指针。&lt;br/&gt;
span值是到下一个结点的跨度是多少，相邻的结点数值是1。这个值的作用是用来计算这个node在跳表中的排名。一开始我对span的值 不理解，以为是上个结点到这里的距离，直到在写插入和搜索结点的时候，才意识到这个是到下个结点的跨度。&lt;/p&gt;
&lt;h5&gt;跳表结构&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;type SkipList struct {
    //头结点和尾结点
    //重点,头结点是一个真实存在的,尾结点只是一个指针
    head, tail *SkipListNode

    size int64 //node总数

    level int //当前跳表的最高level

    maxLevel int //当前最大层数
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;head&lt;/strong&gt; 和 &lt;strong&gt;tail&lt;/strong&gt; 是两个指针指向跳表的头和尾，&lt;strong&gt;size&lt;/strong&gt; 是整个跳表中node的的数量， &lt;strong&gt;level&lt;/strong&gt; 是跳表中，当前的最大高度，这里会引申出一个知识点，跳表中的高度不是固定不变的，而是随着插入和删除动态变化的。&lt;strong&gt;maxLevel&lt;/strong&gt; 是跳表可以达到的最大高度，这个值是一开始就固定的不变的。&lt;/p&gt;
&lt;p&gt;再把上面的图拿过来，分析一下整个跳表结点间的组织关系&lt;/p&gt;

&lt;p&gt;跳表中会有一个 &lt;strong&gt;head&lt;/strong&gt; 结点，但是没有 &lt;strong&gt;tail&lt;/strong&gt; 结点，tail只是一个指针，指向跳表的最后一个结点。这个在初始化函数里有体现&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;//初始化一个默认的跳表
func NewDefaultSkipTable() *SkipList {
    rand.Seed(time.Now().UnixNano())
    return &amp;amp;SkipList{
        head:     NewSkipListNode(SKIP_TABLE_DEFAULT_MAX_LEVEL, 0, nil),
        size:     0,
        level:    1,
        maxLevel: SKIP_TABLE_DEFAULT_MAX_LEVEL,
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;图中向前的指针 (forward)，也就是橙色的箭头，向后的指针 (backward)，也就是绿色的箭头。&lt;br/&gt;
forward指针在level中，也就是每一层都有一个向前的指针，backward只存在于node中，也就是每个节点只有一个向后的指针。想一下为啥只需要一个向后的指针呢？？？看完整个查找过程就明白为啥只需要一个向后指针就行了。&lt;/p&gt;
&lt;h5&gt;插入node&lt;/h5&gt;
&lt;p&gt;基础知识准备的差不多了，开始进入跳表的插入逻辑，先通过一张图把逻辑展示一下&lt;/p&gt;

&lt;p&gt;插入元素的第一步就是先查找元素。因为是有序链表，元素都是按序排列的，插入元素前先找到元素应该在的位置。&lt;/p&gt;
&lt;p&gt;图中要把score为3的元素插入跳表中，带序号的箭头（指针）是搜索顺序，其中黑色的箭头是实际确定的路径，在搜索过程中，还要记录一下rank，也就是经过所有node的span之和。&lt;br/&gt;
先明确一下我们要搜索的结点是哪个。我们要找一个小于3的最大的数（先不考小数和虑链表中有多个3的情况），体现在图中，也就是我们要找到元素2的位置。&lt;/p&gt;
&lt;p&gt;搜索前先确定 当前跳表的最高level值。也可以无脑从最上层开始，但是没有意义。图中最高level是4，也就是level3（因为level数组从0开始）。然后从头结点（head）的level层（level3）开始。&lt;/p&gt;
&lt;p&gt;先设一个临时指针 &lt;strong&gt;t&lt;/strong&gt; 指向head结点。&lt;br/&gt;
先通过图中 &lt;strong&gt;1&lt;/strong&gt; 指针，指向的是元素4，要插入的节点是3，这个明显是大于3的，所以不符合。划重点了 &lt;strong&gt;当 现在的node当前层的下一个node不符合条件时，就需要开始搜索下一层&lt;/strong&gt; 这算是一个转移条件吧。&lt;br/&gt;
这时候当前node还是在head，所以从head的level2开始向右搜索。此时node的下一个node是1，1小于3，所以符合条件，所以 &lt;strong&gt;t&lt;/strong&gt; 指针要指向 &lt;strong&gt;1&lt;/strong&gt; node，再记录一下head的span值。&lt;/p&gt;
&lt;p&gt;如此往复，经过 &lt;strong&gt;3&lt;/strong&gt; &lt;strong&gt;4&lt;/strong&gt; &lt;strong&gt;5&lt;/strong&gt; 指针的判断，最终来到了node 2 的level0，这时node2的下一个node是大于3的，而此时也是最后一层了，所以node 2 就是小于3 的最大值了，也就是要找的元素。&lt;/p&gt;
&lt;p&gt;找到合适的位置，接下来就是把node 3 插入进去了，并把span调整一下。&lt;/p&gt;
&lt;p&gt;在确定好要插入的位置后，还要确定node3元素的level高度，这个高度按照理想状态跳表中间的node是最高的，类似一个 &lt;strong&gt;山&lt;/strong&gt; 字型，山字的左半边，再找到中间的node，这个node是次高的，以此类推。但实际上，跳表没有严格执行这种理想状态，node的高度是通过 &lt;strong&gt;随机&lt;/strong&gt; 数确定的，你没看错，就是通过随机数确定。这也就是跳表相对红黑树实现起来简单的原因。&lt;/p&gt;
&lt;p&gt;这是随机函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;//跳表加一层索引的概率
var SKIPLIST_P = 0.25

//随机索引的层数
func (list *SkipList) randLevel() int {
    level := 1
    for (rand.Uint32()&amp;amp;0xFFFF) &amp;lt; uint32(0xFFFF*SKIPLIST_P) &amp;amp;&amp;amp; level &amp;lt; list.maxLevel {
        level++
    }
    return level
}

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;func (list *SkipList) randLevel() int {
    level := 1
    for rand.Int31n(100) &amp;lt; 25 &amp;amp;&amp;amp; level &amp;lt; list.maxLevel {
        level++
    }
    return level
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面这两段函数功能都是一样的，都是25%的概率让node 的 level 数+1。&lt;/p&gt;
&lt;p&gt;下面就是整个插入node的源码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;//插入一个结点
func (list *SkipList) InsertByScore(score float64, value ISkipListNode) *SkipListNode {
    rank := make([]int64, list.maxLevel)
    update := make([]*SkipListNode, list.maxLevel)
    t := list.head
    //搜索node
    for i := list.level - 1; i &amp;gt;= 0; i-- {
        if i == list.level-1 {
            rank[i] = 0
        } else {
            rank[i] = rank[i+1]
        }
        //当前层的下一个结点存在 &amp;amp;&amp;amp; (下一个结点score&amp;lt;score || 当score相同时,比较这两个结点,下一个结点&amp;lt;新插入的结点)
        for t.Next(i) != nil &amp;amp;&amp;amp; (t.Next(i).score &amp;lt; score || (t.Next(i).score == value.Score() &amp;amp;&amp;amp; t.Next(i).value.Compare(value) &amp;lt; 0)) {
            rank[i] += t.level[i].span
            t = t.Next(i)
        }
        update[i] = t
    }

    level := list.randLevel()

    if level &amp;gt; list.level {
        //处理rand level后, level&amp;gt;当前level后的情况
        for i := list.level; i &amp;lt; level; i++ {
            rank[i] = 0
            update[i] = list.head
            update[i].SetSpan(i, list.size)
        }
        list.level = level
    }
    newNode := NewSkipListNode(level, score, value)
    //插入新的node
    for i := 0; i &amp;lt; level; i++ {
        newNode.SetNext(i, update[i].Next(i))
        update[i].SetNext(i, newNode)

        newNode.SetSpan(i, update[i].Span(i)-(rank[0]-rank[i]))
        update[i].SetSpan(i, rank[0]-rank[i]+1)
    }

    //处理新增结点的span
    for i := level; i &amp;lt; list.level; i++ {
        update[i].level[i].span++
    }
    //处理新节点的后退指针
    if update[0] == list.head {
        newNode.backward = nil
    } else {
        newNode.backward = update[0]
    }

    //判断新插入的节点是不是最后一个节点
    if newNode.Next(0) != nil {
        newNode.Next(0).backward = newNode
    } else {
        //如果是最后一个节点,就让tail指针指向这新插入的节点
        list.tail = newNode
    }
    list.size++
    return newNode
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在搜索过程中，需要一个 &lt;strong&gt;rank&lt;/strong&gt; 数组和一个 &lt;strong&gt;update&lt;/strong&gt; 数组 这两个辅助结构。&lt;br/&gt;
rank用来记录每层的排名值，用来后面调整新node 的rank 使用。 update用来记录从上而下经过的路径，也就是新node的每一层在跳表中的上一个node。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;        //当前层的下一个结点存在 &amp;amp;&amp;amp; (下一个结点score&amp;lt;score || 当score相同时,比较这两个结点,下一个结点&amp;lt;新插入的结点)
        for t.Next(i) != nil &amp;amp;&amp;amp; (t.Next(i).score &amp;lt; score || (t.Next(i).score == value.Score() &amp;amp;&amp;amp; t.Next(i).value.Compare(value) &amp;lt; 0)) {
            rank[i] += t.level[i].span
            t = t.Next(i)
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面是搜索过程中，判断是右移还是调到下一层的逻辑。这里不止需要判断node的socore，还要考虑两个node 的 score相同的情况，两个node 的 socre相同时，需要通过&lt;strong&gt;Compare&lt;/strong&gt; 函数判断两个node的大小。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;    level := list.randLevel()
    if level &amp;gt; list.level {
        //处理rand level后, level&amp;gt;当前level后的情况
        for i := list.level; i &amp;lt; level; i++ {
            rank[i] = 0
            update[i] = list.head
            update[i].SetSpan(i, list.size)
        }
        list.level = level
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码，是确定新node的高度后，处理一下新加层的。因为在搜索的时候，没有把现在高出层数的head放到update中，现在放到其中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;    //插入新的node
    for i := 0; i &amp;lt; level; i++ {
        newNode.SetNext(i, update[i].Next(i))
        update[i].SetNext(i, newNode)

        newNode.SetSpan(i, update[i].Span(i)-(rank[0]-rank[i]))
        update[i].SetSpan(i, rank[0]-rank[i]+1)
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码是通过调整node的前后指针，将新的node加入到跳表中。并且调整node的span值。这时候，span值是到下个node的距离而不是上个node到这的距离的好处就提现出来了，因为是到下个node的距离，只需要改当前node的span值就好了，如果存的是上个node到这个node的距离，就需要改下个node的span了，改动起了就会麻烦了。说的可能有点啰嗦，自己推导一遍就能体会出来了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;    //处理新增结点的span
    for i := level; i &amp;lt; list.level; i++ {
        update[i].level[i].span++
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段可能是不太好理解的，这段代码的作用是，如果新node的level小于跳表中的最大level时（新node的level是2，此时跳表中最大的level是5的情况），这时候要把2上面的所有的node的span+1。&lt;/p&gt;
&lt;p&gt;剩下的，处理新node的后退指针（backward）和判断是否是最后一个node，的情况就很简单了。&lt;/p&gt;
&lt;p&gt;到现在，插入node就完成了，是不是也不难嘛，对不对。其实跳表中最复杂的就是插入过程了，剩下的删除，更新，查找就是差不多的逻辑，先找到关键node，再做处理。&lt;/p&gt;
&lt;h5&gt;删除node&lt;/h5&gt;

&lt;p&gt;同样的，删除也是要先搜索，通过黑色箭头的路径，找到要删除的node前一个，然后修改目标node的上一个node的指针,跳过目标node,完成删除,最后调整目标node前面node的span值。&lt;/p&gt;
&lt;p&gt;先搜索node,并记录到update数组&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;//获取找到该结点的各层结点(路径)
func (list *SkipList) GetUpdateList(node *SkipListNode) (update []*SkipListNode) {
    update = make([]*SkipListNode, list.maxLevel)
    t := list.head
    for i := list.level - 1; i &amp;gt;= 0; i-- {
        for t.Next(i) != nil &amp;amp;&amp;amp; (t.Next(i).score &amp;lt; node.score || (t.Next(i).score == node.score &amp;amp;&amp;amp; t.Next(i).value.Compare(node.value) &amp;lt; 0)) {
            t = t.Next(i)
        }
        update[i] = t
    }
    return
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段逻辑和插入时的搜索逻辑一样&lt;/p&gt;
&lt;p&gt;下面是删除的逻辑&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;//删除对应的结点
func (list *SkipList) Delete(node *SkipListNode, update []*SkipListNode) {
    if node == nil {
        return
    }
    //head 不能删
    if node == list.head {
        return
    }

    for i := 0; i &amp;lt; list.level; i++ {
        if update[i].Next(i) == node {
            //修改span
            update[i].SetSpan(i, update[i].Span(i)+node.Span(i)-1)
            //删除对应的结点
            update[i].SetNext(i, node.Next(i))
        } else {
            update[i].level[i].span--
        }
    }

    //处理node的后指针
    if node.Next(0) == nil { //node是最后一个,把tail指针指向node的上一个(update[0])
        list.tail = update[0]
    } else { //node不是最后一个,node的下一个指向node的上一个(update[0])
        node.Next(0).backward = update[0]
    }

    //处理删掉的是最高level的情况,当前的level要对应的--
    for list.level &amp;gt; 1 &amp;amp;&amp;amp; list.head.Next(list.level-1) == nil {
        list.level--
    }

    list.size--
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;删除node的代码就简单多了，这里通过参数传入从最高到找到node的路径，也就是update数组。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;    for i := 0; i &amp;lt; list.level; i++ {
        if update[i].Next(i) == node {
            //修改span
            update[i].SetSpan(i, update[i].Span(i)+node.Span(i)-1)
            //删除对应的结点
            update[i].SetNext(i, node.Next(i))
        } else {
            update[i].level[i].span--
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个段逻辑就是删除node的，删除说白了就是让目标node的前面的node的后指针指向目标node后面的node。&lt;br/&gt;
剩下的就是处理node的后退指针和判断是否是最后一个node了。&lt;/p&gt;
&lt;h5&gt;更新node&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;//更新结点的score
func (list *SkipList) UpdateScore(node *SkipListNode, score float64) {
    if score == node.score {
        return
    }
    //更新后,分数还是 &amp;lt; next node的位置不用变
    if score &amp;gt; node.score {
        if node.Next(0) != nil &amp;amp;&amp;amp; score &amp;lt; node.Next(0).score {
            node.score = score
            return
        }
    }

    //更新后,分数还是 &amp;gt; per node的位置不用变
    if score &amp;lt; node.score {
        if node.Pre() != nil &amp;amp;&amp;amp; score &amp;gt; node.Pre().score {
            node.score = score
            return
        }
    }
    //删掉node,重新插入
    updateList := list.GetUpdateList(node)
    list.Delete(node, updateList)
    //重新插入
    list.InsertByScore(score, node.value)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更新node的score，更新node的前提是找到目标node，原理和前面的插入，删除时的搜索逻辑一样，就不赘述了。&lt;br/&gt;
说一下更新node score的逻辑把，最简单就是把node删了，然后再插入。当然这样的逻辑是可以优化的，比如有一种情况&lt;/p&gt;

&lt;p&gt;如图所示，要把node4的score更新成5，这时候修改node的score不影响node的位置，所以这种情况就只需要修改node的score就好了，不用考虑node在跳表中的位置。&lt;/p&gt;
&lt;p&gt;对于那种修改分数会改变位置的情况，就需要先删除node，再重新插入node了。&lt;/p&gt;
&lt;h5&gt;查找node&lt;/h5&gt;
&lt;p&gt;看到这里，查找node应该是非常简单了吧，因为前面的插入，更新，删除都需要前查找node。但是查找分两种情况，一种是根据排名查找，另一种是根据score查找。&lt;/p&gt;
&lt;p&gt;先看根据排名查找&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;//根据排名 范围 查找 node
func (list *SkipList) GetNodeByRank(left, right int64) (result []*SkipListNode) {
    //范围出错
    if list.Size() == 0 || left == 0 || right == 0 || right &amp;lt; left || left &amp;gt; list.Size() {
        return
    }
    tRank := int64(0)
    t := list.head
    result = make([]*SkipListNode, 0, right-left+1)
    //先找到排名最小的元素,然后向右一点点查找,直到找到排名最大的元素
    for i := list.level - 1; i &amp;gt;= 0; i-- {
        for t.Next(i) != nil &amp;amp;&amp;amp; tRank+t.level[i].span &amp;lt;= left {
            tRank += t.level[i].span
            t = t.Next(i)
        }
        if tRank == left {
            for ; t != nil &amp;amp;&amp;amp; tRank &amp;lt;= right; t = t.Next(0) {
                result = append(result, t)
                tRank++
            }
            return
        }
    }
    return
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先排除不符合的情况，再根据之前的查找逻辑，一步步去查找。不同的是，现在的限制条件时排名。&lt;/p&gt;
&lt;p&gt;在看根据score查找&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;
//判断 这个跳表 的最大值和最小值 是否包含 要查询的score范围
func (list *SkipList) ScoreInRange(findRange *SkipListFindRange) bool {
    if !findRange.MaxInf &amp;amp;&amp;amp; list.head.Next(0).score &amp;gt; findRange.Max {
        return false
    }
    if !findRange.MinInf &amp;amp;&amp;amp; list.tail.score &amp;lt; findRange.Min {
        return false
    }
    return true
}

//根据 score 范围 查找 node
func (list *SkipList) GetNodeByScore(findRange *SkipListFindRange) (result []*SkipListNode) {
    if findRange == nil || list.Size() == 0 {
        return
    }
    //查找范围不在这跳表中,直接return
    if !list.ScoreInRange(findRange) {
        return
    }
    t := list.head
    if findRange.MinInf {
        //从头开始查找
        t = list.head.Next(0)
    } else {
        //不是从头,找到最小的那个元素
        for i := list.level - 1; i &amp;gt;= 0; i-- {
            for t.Next(i) != nil &amp;amp;&amp;amp; t.Next(i).score &amp;lt; findRange.Min {
                t = t.Next(i)
            }
        }
    }
    for {
        //符合范围的条件 (从负无穷 || 当前的score &amp;gt;= 查找的最小值) &amp;amp;&amp;amp; (到正无穷 || 当前元素 &amp;lt;= 查找的最大值)
        if (findRange.MinInf || t.score &amp;gt;= findRange.Min) &amp;amp;&amp;amp; (findRange.MaxInf || t.score &amp;lt;= findRange.Max) {
            result = append(result, t)
        }
        if t.Next(0) == nil || (!findRange.MaxInf &amp;amp;&amp;amp; t.Next(0).score &amp;gt; findRange.Max) {
            //下一个元素是空(到尾了) || (不是查找到正无穷 &amp;amp;&amp;amp; 下一个元素的 score &amp;gt; 要查找的最大值)
            break
        } else {
            //向右移动
            t = t.Next(0)
        }
    }
    return
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据score查找稍微复杂一点，因为根据score会有正无穷和负无穷这两种情况。这时候只给两个简单的范围值就不够用了，需要用一个结构体来描述范围了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;//根据scores查找元素的条件
type SkipListFindRange struct {
    Min, Max       float64 //最大值和最小值
    MinInf, MaxInf bool    //是否是正无穷和负无穷
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在查找前先判断一下，给定的范围是否在跳表的范围内，如果不在就不用查找了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;    t := list.head
    if findRange.MinInf {
        //从头开始查找
        t = list.head.Next(0)
    } else {
        //不是从头,找到最小的那个元素
        for i := list.level - 1; i &amp;gt;= 0; i-- {
            for t.Next(i) != nil &amp;amp;&amp;amp; t.Next(i).score &amp;lt; findRange.Min {
                t = t.Next(i)
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段逻辑是确定查找的开始位置也就是找到目标node（根据范围找到最小的node），如果是从负无穷开始，就不用通过之前的方式去确定开始node了，直接从head开始就好了。&lt;br/&gt;
后面的逻辑就没什么特别的，找到目标弄的后，开始往后找，直到最后或者不符合范围了，就结束。&lt;/p&gt;
&lt;p&gt;好了查找也完成了。&lt;/p&gt;
&lt;p&gt;跳表的基本功能到现在已经完成，剩下的就是把跳表包装一层，去实现redis中zset的功能就好了。具体代码就不贴了，最后我会给出github的连接。&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;跳表可以看做一个支持二分查找的有序双向链表&lt;/li&gt;
&lt;li&gt;跳表中最核心的就是搜索，不管是在插入，更新，删除还是查找中，都要先搜索&lt;/li&gt;
&lt;li&gt;跳表在插入node时，通过随机数确定node中层数的&lt;/li&gt;
&lt;li&gt;跳表的node中，有一个向后的指针，在每一层中有一个向前的指针&lt;/li&gt;
&lt;li&gt;跳表相对于红黑树，优势是相对容易实现，和范围查找方便&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后在说一下常见的跳表的应用吧。&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fredis%2Fredis&quot; target=&quot;_blank&quot;&gt;redis&lt;/a&gt; 的zset就是基于跳表实现的，当然我也是通过读redis的源码，学习跳表的。还有一个是Google开发的 &lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fgoogle%2Fleveldb&quot; target=&quot;_blank&quot;&gt;leveldb&lt;/a&gt; 也是基于跳表实现的。&lt;/p&gt;
&lt;p&gt;最后放上所有的源码，&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fbruce12397%2Fskip_table&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;  &lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fgitee.com%2Fbruce_le%2Fskip_table&quot; target=&quot;_blank&quot;&gt;gitee&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果这个文章对你有帮助记得给我点个star   谢谢了&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>