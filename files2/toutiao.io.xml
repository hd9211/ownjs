<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>33a461292fcba4f49f9dbcb4c88f2073</guid>
<title>对Go存严重误导，Go开发团队leader怒驳AWS</title>
<link>https://toutiao.io/k/dif57if</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MjM5NzM0MjcyMQ==&amp;amp;action=getalbum&amp;amp;album_id=2042960611138928647#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2042960611138928647&quot; data-tag_source=&quot;3&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#aws&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;2个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzM0MjcyMQ==&amp;amp;mid=2650139642&amp;amp;idx=1&amp;amp;sn=d547a99ff986208e8130afa7a50e0b13&amp;amp;chksm=beda309489adb982fcc6079419235c67906372c1a6c141d62f837447b1a23fb5db73c74ffd75&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.13333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dkwuWwLoRK8XHJPGghvOOjPGlt5aKtiaIjgs0LuJrft9aOylIpuU7h5KSFGVGdNYMcFFXfXmQo3xAZhjria14H5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;文 | 局长&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;出品 | OSC开源社区（ID：oschina2013）&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;事件起因是 AWS 前几天发布的一篇博客：《Sustainability with Rust》。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38777292576419214&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dkwuWwLoRK9dkbwY9iaicVjvJeFjBhicpDkiaRHggZ78WxhEIn0UsTH90DiaYQbwibql3UN4ZlLia47smicSJ2GTib1N4SA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1145&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;博客原文：&lt;span&gt;https://aws.amazon.com/cn/blogs/opensource/sustainability-with-rust/&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这篇文章里，AWS 举例的时候将 Rust 和 Go 进行了对比。文章提到了早期 Discord 的一项关键 Go 服务存在问题，原本这是一个非常简单的服务，但它的尾部延迟 (Tail Latency) 非常慢。AWS 认为原因在于 Go 是一种垃圾回收 (GC) 语言，因此当对象被创建和释放时，垃圾回收器每隔一段时间就需要停止程序的执行并运行一次垃圾回收。当垃圾回收器运行时，会导致进程无法响应请求。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了解决此问题，Discord 决定尝试用 Rust 重写这个服务。测试结果显示，使用 Rust 重写后的速度提升超 10 倍，最慢的尾部延迟时间也降低至为原来的约 1%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图是运行过程中 CPU 和响应时间的峰值，左边为 Go 实现的版本，右边为 Rust 实现的版本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39043381535038935&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dkwuWwLoRK9dkbwY9iaicVjvJeFjBhicpDkK6VGRibfMW55TyAujuCx1WBIk2PldLibyyBuS2k1nbCHFKkub1vFmwxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;899&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Go 开发团队 leader Russ Cox (rsc) 认为 AWS 在这里的比较对 Go 存在严重的误导。他认为，AWS 的文章将两者进行对比时，将 Go 版本的数据与在&lt;span&gt;使用新的数据结构和更多内存&lt;/span&gt;后的 Rust 版本数据放在了一起，还特意圈出“ms”和“µs”时间刻度。rsc 表示，这要么是 AWS 对 Discord 的原贴存在误解，要么就是公然地说谎。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为在 Discord 的原文中，他们展示 Go 服务器和同级别 Rust 服务器的对比时，图表数据来源既有原始的版本，也包括重写数据结构和提供额外内存后的情况。AWS 的文章却对此进行了故意的歪曲。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而且 AWS 引用的 Discord 数据当时使用的 Go 版本还是 Go 1.10，但现在 1.18 版本很快就推出了。在这 8 个重要版本的迭代过程中，Go 团队改进了许多功能，对因 GC 而引起的中断也提供了极大的改善（这正是当时 Discord 面临的问题）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了这个，rsc 认为 AWS 引用的一份“非常有趣”的研究的真实性也十分可疑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9191321499013807&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dkwuWwLoRK9dkbwY9iaicVjvJeFjBhicpDkALFVAA1984s3tllJDXYVBwM4QrZs3EVngG8tnKSwrm2ibIxkcChqGsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;507&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9177820267686424&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dkwuWwLoRK9dkbwY9iaicVjvJeFjBhicpDkbAm3qt67IR2bKjNnaLGq9WJzxvep2qhBflYuSLNcpQw2FshqWadOww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;523&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;rsc 表示，AWS 的文章对 Rust 的描述公正客观，但对 Go 却存在误导性的描述。他认为 Rust 和 Go 不是零和的博弈关系。Rust 十分优秀，所以他更愿意关注 Go 和 Rust 相互补充并进行良好合作的方式。比如这个案例：https://thenewstack.io/rust-vs-go-why-theyre-better-together/&lt;/span&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86032&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span data-brushtype=&quot;text&quot;&gt;往期精彩回顾&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86032&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9574468085106383&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZP3JEv2BgJ7cx4oxeYNNqh2oytepen4zyw43jGnqXCiaAYWgK59RF4HTukPFrHF7FJarvFzETH87kr3It44zLmA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;94&quot;/&gt;&lt;span&gt;觉得不错，请点个&lt;/span&gt;&lt;span&gt;在看&lt;/span&gt;&lt;span&gt;呀&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fd95a4c99f17810e9edfc521895ad404</guid>
<title>横空出世，比 Visio 快 10 倍的画图工具来了</title>
<link>https://toutiao.io/k/6lm3w0b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUyMzM2ODUwMA==&amp;amp;action=getalbum&amp;amp;album_id=2086477596212428803#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2086477596212428803&quot; data-tag_source=&quot;3&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#画图工具&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;1个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section class=&quot;mp_profile_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUyMzM2ODUwMA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hs540iaTKoaIWQB73gicJGTicpAjbSjAjic3d4ytEoiaArkWw6hKMqicPSXrpd4FquTTdStuMoILtqGHS222lIQlh1mg/0?wx_fmt=png&quot; data-nickname=&quot;逆锋起笔&quot; data-alias=&quot;readdot&quot; data-signature=&quot;全网最新编程视频教程、大佬们推荐的 pdf 学习资料，全部免费分享！来到这里，你不懂程序都难。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;‍&lt;/span&gt;来源：网络&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdLkEI9sZfctFHbzjlgo7KHibSHDfGdNxF9zBacMzYRt5RCVYozIdSlqr51JrS5zf3RgcH0jkCUVFicD2wtlwVkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;960&quot;/&gt;&lt;figcaption&gt;图片&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;section&gt;总有童鞋问，这个流程图图怎么绘制的，这个UML类图用什么工具做的等等，今天给大家推荐一款idea插件PlantUml，来帮助大家快速快速完成绘制。&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;PlantUml是什么&lt;/h2&gt;&lt;section&gt;PlantUml是一个支持快速绘制的开源项目。其定义了一套完整的语言用于实现UML关系图的描述，并基于强大的Graphviz图形渲染库进行UML图的生成。绘制的UML图还可以导出为图片,以及通用的矢量SVG格式文件。&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;PlantUML的优点&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;完全文本方式编辑，无需控件拖拽，自动调节图元距离，简单美观&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;与开发平台完全无关，不受平台限制，只要有PlantUML jar包就能生成UML图&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持多种文本编辑器、ide的集成，例如idea、eclipse、notepad++等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;作为一个Java coder，通常使用idea作为首选开发工具，我们以idea中的使用为主作介绍&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;idea安装 PlantUML插件&lt;/h2&gt;&lt;section&gt;File -&amp;gt; Settings -&amp;gt; Plugins 搜索 PlantUML ，找到 PlantUML integration 并安装&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;电脑安装graphviz&lt;/h2&gt;&lt;section&gt;下载地址&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;https://graphviz.gitlab.io/_pages/Download/windows/graphviz-2.38.msi&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;配置环境变量&lt;/section&gt;&lt;section&gt;首先添加一个变量名GRAPHVIZ_HOME, 变量值为安装路径 D:\WorkWare\Graphviz2.38 在Path目录下添加 &lt;code&gt;%GRAPHVIZ_HOME%\bin&lt;/code&gt;, 多个配置之间要用 “;” 隔开 配置GRAPHVIZ_DOT, 变量值为 &lt;code&gt;%GRAPHVIZ_HOME%\bin\dot.exe&lt;/code&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8545454545454545&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/JdLkEI9sZfcMciaDXvIagicIIxOaSFaWgxNU3aicYaZvM1kDAg88iaAgFz1Zyib1ObudUbVhWSaHFwFibzWhf8DhA4LA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;825&quot;/&gt;&lt;/p&gt;&lt;section&gt;图片&lt;/section&gt;&lt;h1&gt;横空出世，比Visio快10倍的画图工具来了。&lt;/h1&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8847858197932054&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/JdLkEI9sZfcMciaDXvIagicIIxOaSFaWgxFicricD3KUZsVG2LXntWfnnNt5eoUribXs74lsdCY93hz0R8uYMUIzX7w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;677&quot;/&gt;&lt;/section&gt;&lt;section&gt;打开windows命令行, 使用dot -version出现以下页面就代表配置正常&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.45185185185185184&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/JdLkEI9sZfcMciaDXvIagicIIxOaSFaWgxxwvd9VaJCveDEFMgkCDWibDu8QskR3OXDT0hqAmW0jTBSJV0KvTBh5Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;图片&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;idea 配置graphviz&lt;/h2&gt;&lt;section&gt;File -&amp;gt; Settings -&amp;gt; Other Settings -&amp;gt; PlantUML&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5916666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/JdLkEI9sZfcMciaDXvIagicIIxOaSFaWgxdcIcDWL1LzOxcf3icCpGSncqdqenWPsia3w5ppx1G4Jokcjia5OmZCOAw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;图片&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;使用plantUML画流程图&lt;/h2&gt;&lt;section&gt;新建uml 文件&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.2930232558139534&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/JdLkEI9sZfcMciaDXvIagicIIxOaSFaWgx2l6QCTnPxL5cJsQDA9hPp63rFY8rlfGchwAI1yQNmqfGHkeh0d1Efw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;645&quot;/&gt;&lt;/p&gt;&lt;section&gt;图片&lt;/section&gt;&lt;section&gt;输入测试文字&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;section&gt;@startuml&lt;br/&gt;Alice -&amp;gt; Bob: Authentication Request&lt;br/&gt;Bob --&amp;gt; Alice: Authentication Response&lt;br/&gt;&lt;br/&gt;Alice -&amp;gt; Bob: Another authentication Request&lt;br/&gt;Alice &amp;lt;-- Bob: another authentication Response&lt;br/&gt;@enduml&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;右边会实时现实流程图&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.2831050228310502&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/JdLkEI9sZfcMciaDXvIagicIIxOaSFaWgx2bvtkOK7K0aPIf9RkaSLlqd8eVrV3zH8s9kzzrCUMFFhibEgevNrHNA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;876&quot;/&gt;&lt;/p&gt;&lt;section&gt;图片&lt;/section&gt;&lt;section&gt;也可以根据所写的类，创建一个UML类图。也可以参考我们前天推荐的方式：IDEA中一个被低估的功能，一键把项目代码绘制成UML类图&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5231481481481481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/JdLkEI9sZfcMciaDXvIagicIIxOaSFaWgxeGAGkOibDCxrUf0RvgyicIlumicDuB3oTF2RVuHcbzAicx1E7Mv7aM7ScA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;图片&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;其他&lt;/h2&gt;&lt;section&gt;如果不想装graphviz，想直接用，可以下载chrome插件PlantUML Viewer，安装之后直接编辑文本，可以在浏览器直接显示。&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7937411095305832&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/JdLkEI9sZfcMciaDXvIagicIIxOaSFaWgxBnYQxwicpUsx5gakMZicgA6exicLrIqM9RGALhlHXjiaCCSJ9kqppnRVgw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;703&quot;/&gt;&lt;/p&gt;&lt;pre&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494219&amp;amp;idx=1&amp;amp;sn=1767ba07b078ed794a2116d1c1b557d5&amp;amp;chksm=fa3f0b10cd488206bab07868dfa09afd6bbd048db5fdeee0a332f725476822dc8c39315c80d6&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;微软发布的 免费文件恢复工具&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247493797&amp;amp;idx=1&amp;amp;sn=7356bd84df9977ad3781b336c0b2e8b6&amp;amp;chksm=fa3f09fecd4880e83b060001a939ad5633e82987f70d23ddacc86b445f6e56c1626be7f359c0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;这款网络排查工具，堪称神器！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247493182&amp;amp;idx=2&amp;amp;sn=d0808be25095064df4e148faf21fb915&amp;amp;chksm=fa3f0765cd488e73c3a0ede4bbd0a31fb822afbb649f8747894ebf6532433eb8e7ca23bf1281&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;2021年 10 大流行软件测试工具&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247486092&amp;amp;idx=2&amp;amp;sn=17854561f6b6ea65f7e65d1d0b88c6f0&amp;amp;chksm=fa3cebd7cd4b62c15278eaaf8150e1bb1860a0e8673dafbd7d762aa0680499bd07d669944adf&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;阿里程序员常用的 15 款开发者工具&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247495010&amp;amp;idx=2&amp;amp;sn=a8cab1fc2451e80edf8208dd5c0a7c7f&amp;amp;chksm=fa3f0c39cd48852f2b40ecc06967472537ad022a602ee0c0b5c9bb8e46d5c3f6101d2af676ac&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;强烈推荐！开箱即用，WEB 界面一键安装（附源码）&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;点赞是最大的支持&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;1.764&quot; data-type=&quot;gif&quot; data-w=&quot;250&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ibsfLhQMgy09JhlUaCQZm4kXHBSlPxPOOpOcfiaNmJRjoem28z1x3CbXNG2eQNK8Tic1Yyf1WqKZ3VibvSicNtwcguQ/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;/pre&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>259ad0b59bc92cc81e7b2680e89d8433</guid>
<title>【大内存服务GC实践】- 一文看懂G1GC垃圾回收器</title>
<link>https://toutiao.io/k/fio8ane</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7837837837837838&quot; data-type=&quot;png&quot; data-w=&quot;74&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/siayVELeBkzWBXV8e57JJ4OyQuuMXTfadZCia0bN2sFBfdbTRlFx0S97kyKKjic5v6eaZ8cY4WQt0UEu4dkyowHYg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7837837837837838&quot; data-type=&quot;png&quot; data-w=&quot;74&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rl6daM2XiabyLSr7nSTyAzcoZqPAsfe5tOOrXX0aciaVAfibHeQk5NOfQTdESRsezCwstPF02LeE4RHaH6NBEB9Rw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;背景介绍&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;笔者在这个系列的第一篇文章&lt;/span&gt;&lt;span&gt;《一文看懂&quot;ParNew+CMS&quot;垃圾回收器》&lt;/span&gt;&lt;span&gt;中详细介绍了&quot;ParNew+CMS&quot;垃圾回收器的工作原理。文章最后笔者提到CMS垃圾回收器有两个比较显著的问题，一个是长时间运行无法避免Full GC，一个是Remark阶段STW时间较长。正是因为这两个问题的存在，CMS垃圾回收器在JDK9被标记弃用，慢慢开始退出历史舞台。有走的，就有来的，JVM重新设计了另一款垃圾回收器G1，有效地解决了CMS垃圾回收器遇到的上述两大问题。那么，这篇文章我们就详细探讨一下G1垃圾回收器是如何解决上述两大问题的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;和上篇文章介绍&quot;ParNew+CMS&quot;垃圾回收器一样，笔者会从G1垃圾回收器最基础的数据结构和算法出发，深入分析它的工作原理，对其中的一些关键机制进行剖析。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7837837837837838&quot; data-type=&quot;png&quot; data-w=&quot;74&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/siayVELeBkzWBXV8e57JJ4OyQuuMXTfadZCia0bN2sFBfdbTRlFx0S97kyKKjic5v6eaZ8cY4WQt0UEu4dkyowHYg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7837837837837838&quot; data-type=&quot;png&quot; data-w=&quot;74&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rl6daM2XiabyLSr7nSTyAzcoZqPAsfe5tOOrXX0aciaVAfibHeQk5NOfQTdESRsezCwstPF02LeE4RHaH6NBEB9Rw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;G1核心数据结构&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;1. Region&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;为什么CMS垃圾回收器长时间运行无法避免FGC？本质是因为CMS垃圾回收器中老年代采用标记清理算法，这种算法会产生较多内存碎片，当内存碎片很碎无法给对象分配出连续空间的时候，JVM就会触发FGC整理老年代。那有些同学就会问为什么不在每次老年代GC的时候执行整理操作呢？这主要是因为老年代如果很大的话，整理一次STW的时间会不可控。那怎么破这个局呢？JVM设计者提出了一个思路：&lt;/span&gt;&lt;span&gt;老年代不是很大吗，那就将老年代划分成很多小的格子，在此基础上GC算法基本不变，还是先标记，不过在标记完成后，按照优先级选择部分格子使用复制算法进行整理，这样每次整理的内存空间是可控的，STW的时间就相对可控，而且因为使用复制算法就不再会出现内存碎片。对，这就是G1垃圾回收器的核心设计思想。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;G1 是一个分代回收器，它依然保留了&quot;ParNew+CMS&quot;垃圾回收器中新生代和老年代的分代逻辑。但与&quot;ParNew+CMS&quot;回收器不同的是，它引入了一个新的数据结构 - Region，也就是上文中笔者提到的小格子。G1垃圾回收器会把整个堆划分成一个个大小相等的Region，每个Region的大小可以通过参数设置，通常大小在1~32M之间，默认大小取决于总堆的大小。下图是G1回收器堆划分的示意图：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.584&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dTQ3R5geQ2wmia7RLzhgB8BbmVmV6Zqd7V31D1DuulGjuLKpGb8ibWBNa606rM79FO963TatEyNUSzRkea0wxibRw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上图中整个堆区会被划分为新生代以及老年代，其中新生代又分为Eden区和Survivor区，这和&quot;ParNew+CMS&quot;回收器是相同的。不同的主要有两点：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（1）G1回收器不要求新生代或者老年代的Region连续分布，换言之，这些Region可以随意分布在整个堆区，它和新生代或者老年代的隶属关系属于逻辑隶属。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（2）如果一个对象大小超过Region大小的一半，就会被视为巨型对象（Humongous Object），巨型对象会被分配到Humongous Region。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. RememberedSet（RSet）和Card Table&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;《一文看懂&quot;ParNew+CMS&quot;垃圾回收器》&lt;/span&gt;&lt;span&gt;文章在介绍对象标记的时候重点说明了一个对象跨代引用的问题。比如YGC阶段标记新生代对象的时候，不仅需要扫描GC Roots标记其直接引用的新生代对象，还需要扫描所有老年代对象，查看其是否引用了新生代对象，如果引用了的话，对应新生代对象也是需要标记的，否则就会发生漏标。然而实际实现中，扫描整个老年代对象的代价相当大。文章中我们介绍了可以通过Card Table这种数据结构大幅降低扫描老年代对象查找跨代引用的代价，简单来说，就是通过写屏障技术在老年代对象引用新生代对象的时候将Card Table对应Card设置成&quot;脏卡&quot;，这样的话，查找跨代引用，只需要扫描Card Table脏卡对应的老年代区域，而不需要扫描整个老年代，大大降低了扫描代价。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;根据上文介绍，G1也是一个分代回收器，也需要处理跨代引用扫描代价大的问题。为了解决这个问题，G1引用了另一种新的数据结构 - Remembered Set，简称RSet。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;2.1 RSet是什么样的数据结构呢？&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;在G1实现中，每个Region会被划分成很多512Byte大小的小块，这样一个32M的Region就会被划分为65536个小块。与之大小对应的会有一个长度为65536的Card Table数组，数组的每个元素只有1Byte，对应Region的每个小块。Card Table数组这个结构和CMS垃圾回收器中Card Table是相同的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了Card Table数组之外，每个Region还会有一个RSet数据结构，RSet主要用来记录哪个Region的哪个Card上的对象引用了本Region中的对象。实际实现中，RSet默认是一个HashMap，Map的key是引用Region，value是一个List，List中存储引用Region中的引用Card列表。Region、Card Table以及RSet的示意图如下所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.38671875&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dTQ3R5geQ2wmia7RLzhgB8BbmVmV6Zqd7WoADaHdp3CtC46djM3gPUd7VCFPyvOLr7Gb5SY8ZyvBnzCjJQ5iblkg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上图中，RegionA和RegionB中分别有对象引用RegionC中的对象，在RegionC对应的RSet就会记录这样的引用关系。该RSet中有两个KV对，第一个KV对的key是RegionA，value是一个列表，列表中有两个元素3和65534，分别代表RegionA中引用对象在对应Card Table中的下标。第二个KV对的key是RegionB，value中列表只有一个元素1565，代表RegionB中引用对象在对应Card Table中的下标。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;介绍到这里，大家应该对RSet的结构有了初步的了解。与CMS回收器中Card Table相比，Card Table中的脏卡代表&quot;我引用了别的对象&quot;，属于一种points-out结构。而RSet记录的是哪些其他Region引用了本Region中的对象，属于points-into结构。两者是有本质区别的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;按照上述介绍，如果一个Region是热点Region，表示这个Region中的对象被大量其他Region中的对象所引用，那么RSet占用的内存空间开销就会越大。但我们要清楚一点，RSet内存开销不是为业务服务的，实际上不应该占用太多。因此为了控制RSet占用内存空间的大小，RSet会根据引用Region个数的多少，设置3种不同的实现方式（上文中介绍的是其中一种），分别称为：&lt;/span&gt;&lt;/section&gt;&lt;ul start=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;sparse per-region-table (PRT)，从字面意思来看表示这个RSet是一个稀疏的集合。具体实现使用HashMap方式记录引用关系，其中Map的key是引用Region，value是一个List，List中存储引用Region中的引用Card列表。上文有过介绍。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul start=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;fine-grained PRT，还是使用HashMap方式记录引用关系，其中Map的key是引用Region，但value不再是List，而是一个bitmap，bit位为1表示对应Card是引用Card，否则不是引用Card。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul start=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;coarse-grained bitmap，从字面意思可以看出来这就是一个bitmap，不过bitmap中每个bit位引用粒度不再是Card，而是Region。如果bit位值为1，表示这个Region是引用Region，即这个Region中有对象引用了该Region中的对象。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;很显然，上述3种实现方式中，spase PRT和fine-grained PRT都是精确到Card，而coarse-grained bitmap是精确到Region。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;2.2 G1是如何管理RSet的？&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;G1会创建一个用于管理RSet的线程池，这些线程称为Refine线程。G1中RSet的更新不是同步完成的，G1会把所有引用关系都先放入一个队列中，称为Dirty Card Queue（DCQ），然后使用Refine线程来消费这个队列完成引用关系的记录并更新RSet。如果Refine线程忙不过来，GC线程以及应用线程也可能会协助更新RSet。&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7837837837837838&quot; data-type=&quot;png&quot; data-w=&quot;74&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/siayVELeBkzWBXV8e57JJ4OyQuuMXTfadZCia0bN2sFBfdbTRlFx0S97kyKKjic5v6eaZ8cY4WQt0UEu4dkyowHYg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7837837837837838&quot; data-type=&quot;png&quot; data-w=&quot;74&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rl6daM2XiabyLSr7nSTyAzcoZqPAsfe5tOOrXX0aciaVAfibHeQk5NOfQTdESRsezCwstPF02LeE4RHaH6NBEB9Rw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;strong&gt;G1核心工作流程&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在介绍G1垃圾回收器工作流程之前，先简单回顾一下&quot;ParNew+CMS&quot;回收器的工作流程，具体流程不再赘述，参考下图：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.41875&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dTQ3R5geQ2wmia7RLzhgB8BbmVmV6Zqd7MYFIIJtOVn7IRj1HmSiaMibOZ9fuWriaibAhEm4Yj7ZbeJWHlax21f2kdg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;G1回收器核心工作流程与&quot;ParNew+CMS&quot;回收器基本相同，参考上图看下图：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.421875&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dTQ3R5geQ2wmia7RLzhgB8BbmVmV6Zqd75561RchITIS4syKIa5581cbu89icPvIsp9ben0IdhnhOELs2vwd47uw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对比&quot;ParNew+CMS&quot;回收器工作流程，G1中同样会比较频繁地进行新生代YGC，同样也有老年代并发标记周期。不同的是，G1在并发标记之后并没有直接清理全部垃圾对象，而是新增了一个混合收集周期，这个周期包含多次Mixed GC，每次Mixed GC只会回收部分Region，直至未处理Region集合占比低于特定阈值。之所以将这个周期称为&quot;Mixed Collection Cycle&quot;，是因为每次Mixed GC都会同时回收新生代和老生代中的Region。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上图中，IHOP(InitiatingHeapOccupancyPercent) Trigger代表&quot;并发标记周期&quot;触发的阈值。一旦当前JVM已使用内存/总堆内存超过这个阈值，就会触发并发标记。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;虽然G1回收器的工作流程和&quot;ParNew+CMS&quot;回收器差的不是很多，但是每个核心步骤的具体实现却有很大的不同。接下来分别来看G1中的YGC、Concurrent Marking Cycle以及Mixed GC的一些核心实现细节。&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;1. Young GC核心流程&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;和&quot;ParNew+CMS&quot;一样，一旦Eden区满了之后，就会触发YGC。YGC只负载回收堆中新生代的所有Region，不回收老年代的Region。基本流程可以表示为如下几步：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（1）将eden区和survivor区所有Region添加到CSet中准备回收。注：CSet是一个存放待回收Region的数据结构。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（2）标记阶段&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;从GC Roots开始标记直接引用的新生代对象。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基于RSet标记跨代引用的新生代对象。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;（3）复制阶段：将标记活跃的对象复制到其他Region中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了更加清楚的明白上述步骤，下图是一次真实的YGC日志片段，可以对照着上述流程来看。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.51953125&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dTQ3R5geQ2wmia7RLzhgB8BbmVmV6Zqd7t4y7ib4pvXw1uQI5JJ4PCA19RmXEibjoKyibFuo7BKQUefxOqxaIR9ib5Q/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;G1在日志的细节上比&quot;ParNew+CMS&quot;要详细很多，如果研究G1的话，日志是一个非常不错的研究入口。&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;2. Concurrent Marking Cycle核心流程&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;根据上文介绍，一旦&quot;JVM已使用内存/总内存&quot;的比例超过设定阈值IHOP（InitiatingHeapOccupancyPercent）后，G1会执行一次Concurrent Marking Cycle，并在之后进行多轮Mixed GC。和CMS回收器基本一样，G1中一轮并发标记周期包含初始标记、并发标记、重新标记，再加上一个cleanup阶，这样就可以完成整堆所有Region的对象标记。下面是一段G1回收器中并发标记周期的完整日志：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8796875&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dTQ3R5geQ2wmia7RLzhgB8BbmVmV6Zqd7daMdUdiaZ3WK1jgfL9kGjlcyHQXC68ZT13sia5p6Gia4GkynfJPLG7kgw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul start=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;初始标记（Initial Marking）：初始化标记是伴随一次普通的YGC发生的，从GC Root开始标记直接可达的对象。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul start=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;并发标记( Concurrent Marking)：这个阶段标记线程和应用线程并发工作，遍历整堆所有可达对象并标记。这个阶段需要特别关注并发标记可能产生的&quot;漏标&quot;问题，G1使用Snapshot AT Begining（简称SATB）算法避免漏标问题发生，这和CMS完全不同。3.4小节深入介绍。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul start=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;重新标记( Remark) ：标记那些在并发标记阶段发生变化的对象,将被回收。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;清理( Cleanup )：释放没有存活对象的Region。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;3. Mixed GC核心流程&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;一轮并发标记之后紧接着是混合回收周期，包括多次Mixed GC，每次Mixed GC只回收部分Region。这里有三个问题：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（1）为什么这些Region需要分为多次回收？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;主要原因是所有Region一起回收的话有可能会导致暂停时间比较长，尤其在内存较大的情况下。为了每次回收的暂停时间可控，就将一次大回收分成很多次小回收。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（2）每次回收Region集合的选择原则是什么？&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在执行混合回收之前，G1会将所有Region按照每个Region中垃圾对象占比进行一次排序，垃圾对象占比越高，排名越靠前。排好序之后，每次Mixed GC按顺序选择部分Region进行回收，选择多少Region取决于这些Region的回收预估暂停时间不超过设置的最大暂停时间。这个回收算法称为Garbage First，也就是G1的意思。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（3）每次Mixed GC的过程是怎么样的？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;具体的回收过程和上文中介绍的Young GC没有太大区别，可以参考上文介绍。&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;4. 并发标记阶段对象&quot;漏标&quot;问题解法 - SATB算法&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;在介绍SATB算法之前，先简单介绍一下并发标记过程中可能出现的对象&quot;漏标&quot;问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h5&gt;&lt;strong&gt;&lt;span&gt;4.1 对象漏标简介&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;什么是对象漏标？就是本应该被标记为活跃的对象因为某些原因最终没有被标记，被垃圾回收器认为是垃圾对象而回收掉，最终导致应用错误，很显然这种情况是不允许发生的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;并发标记阶段什么场景下会发生对象漏标？应用线程和标记线程并发执行，在下面两种场景下会出现漏标：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1. 应用线程在并发标记过程中新生成的活跃对象因为某些原因没有被标记线程标记。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2. 应用线程在并发标记过程中变更引用关系的时候在特定场景下会出现漏标，具体场景涉及标记算法&quot;三色标记法&quot;，详细可以阅读文章《【大内存服务GC实践】- 一文看懂”ParNew+CMS”垃圾回收器》。这里只简单进行描述：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6053882725832013&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1262&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dTQ3R5geQ2wmia7RLzhgB8BbmVmV6Zqd71JwLKervUHfePuicJlY7Rfu4ntXWJu2uhgl0owoFGUUBT3PNVC0uy8w/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如上图所示，老年代中有三个对象A、B和C，在标记之前的引用关系是A引用B，B引用C。先分别介绍一下他们的标记情况：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对象A已经被标记为黑色，表示为A为活跃对象且所有它引用的对象也完成标记。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对象B被标记为灰色，表示B对象是活跃对象，但是它关联的对象还没有被完全标记完。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对象C是白色，表示还没有被标记。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这种背景下，应用线程此时发生了一次引用关系变更，B引用C的关系被删除了且同时A引用了C，即如下所示代码：&lt;/span&gt;&lt;/section&gt;&lt;pre data-wrap=&quot;true&quot;&gt;&lt;section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;objB.fieldC = &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;objA.filedC = C;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;此时，标记线程就不再会标记对象C，因为对象A已经是黑色，表示所有它引用的对象都已经完成标记。然而实际上活跃的对象C就会被漏标最终被回收掉。&lt;/span&gt;&lt;/section&gt;&lt;h5&gt;&lt;br/&gt;&lt;/h5&gt;&lt;h5&gt;&lt;strong&gt;&lt;span&gt;4.2 SATB算法思想简介&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;对象漏标介绍之后简单介绍一下SATB算法的基本思想，可以概括为如下三句话：&lt;/span&gt;&lt;/section&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;并发标记之前先给Region内存打个快照，标记线程基于这个快照独立进行标记。应用线程不会直接修改这个快照中的对象，也就是说应用线程不会干扰标记线程的工作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;应用线程新分配的对象都认为是活跃对象，实际在下一个并发标记周期进行标记。上文说过漏标发生的第一种场景是&quot;应用线程在并发标记过程中新生成的活跃对象因为某些原因没有被标记线程标记&quot;，那如果能够将标记阶段新分配的对象全都集合到一起，这些对象全部都标记为活跃对象（实际肯定会有部分垃圾对象，将垃圾对象标记为活跃对象不影响程序正确性）就可以解决这个问题。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;并发标记过程中已存在对象的引用关系变更在Remark阶段单独进行处理。上文介绍了漏标发生的第二种场景，为了解决这个场景引入的漏标问题，可以将引用关系变更分解为旧的引用关系先删除，新的引用关系生成两个步骤，只要破坏任何一个步骤就可以防止漏标发生。因此有两种针对性解法：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在并发标记阶段如果有新引用关系生成，就记录下来，Remark阶段进行重标记，这个破坏了步骤二，即黑色对象重新引用了白色对象，就记录下来重新扫描黑色对象，将其引用的所有对象都标记成存活对象。这个就是CMS垃圾回收器使用的增量更新算法。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在并发标记阶段如果有引用关系被删除，就记录下来，Remark阶段对这些引用关系被删除的重标记，这个破坏了步骤一，即灰色对象断开了白色对象引用的时候，记录下来，后面重新把这个白色对象标记成存活对象。这个就是G1垃圾回收器使用的算法。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;简单来说，SATB明确将并发标记这一个大工程分成了三个字模块，分别是对快照进行并发标记、对并发标记过程中新分配的对象全部标记为活跃、对并发标记过程中引用关系变更的对象单独进行处理。&lt;/span&gt;&lt;/section&gt;&lt;h5&gt;&lt;br/&gt;&lt;/h5&gt;&lt;h5&gt;&lt;strong&gt;&lt;span&gt;4.3 SATB算法实现&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;了解了SATB算法的核心思想之后，再来看看这个算法是如何实现的。G1回收器将堆内存分成一个一个Region，在Region中分配对象时，对象都是连续分配的。这里介绍两个指针：Bottom指针和Top指针，其中Bottom指针指向Region的初始位置，Top指针指向下一个对象分配的内存位置，如果有新的对象分配，就将Top指针向前移动。如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.615686274509804&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;510&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dTQ3R5geQ2wmia7RLzhgB8BbmVmV6Zqd7SbgkJvPgvuqVQyNv3dFfCgZkjIAy9Y4HRnOegV5vp8V5yzYdNicGhGA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;G1使用的SATB算法是基于内存快照的，那SATB算法具体怎么实现基于内存快照的标记呢？现在假设在标记之前Region如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.23556231003039513&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;658&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dTQ3R5geQ2wmia7RLzhgB8BbmVmV6Zqd78ib0N8xZBsywicVb5picxHRZJQb87ZWRyWFu4VyWBNGXDGtrv4kf3xaqQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这个时候要进行一轮完整的并发标记周期，按照上面的说法是要先给这个Region打个快照，这个快照实际上就是[Bottom, Top)现在这块内存区域。但是在并发标记周期内，因为有引用线程在分配对象，所以Top指针肯定会往前移动，所以为了将标记开始前Top这个位置记录下来，需要定义另一个指针TAMS（全称Top-At-Mart-Start）指向标记前Top这个位置，从Top-At-Mark-Start这个字面含义就可以理解是标记开始时Top指针所在位置，这样快照所代表的内存区域就是[Bottom, TAMS)这块，并发标记过程中标记线程就基于这块内存对象进行标记，后面Top指针就可以随意往前移动了。所以按照正常的逻辑应该是这样：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5485362095531587&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;649&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dTQ3R5geQ2wmia7RLzhgB8BbmVmV6Zqd7mT6oJdwTZ1twOnOoicnseW6TlazrI0ymPLuxvx9AgsrJrpf5ibvia3qiag/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;上图中Initial Marking刚开始的时候，Top指针和TAMS指针指向同一个内存位置，[Bottom, TAMS）这块内存区域有一个对应的bitmap，bitmap中每一位代表对应内存区域对象是否存活。经过并发标记之后，Remark开始的时候，Top指针因为应用线程有分配对象所以会向前移动，并发标记线程独立标记[Bottom, TAMS)这块内存区域对应的对象，标记后的结果使用bitmap表示（其中黑色方块表示对应对象被标记为活跃对象）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在并发标记过程中新生成的对象都分配在[TAMS, Top) 这块内存区域，G1算法会将这部分新生成的对象都认为是存活对象，这轮标记不处理这部分新生成对象，留到下一轮标记处理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;现在继续来看SATB算法如何处理并发标记过程中引用关系变更问题。在并发标记阶段，引用变更发生后通过写屏障会将这些变更记录并保存在一个队列里（&lt;/span&gt;&lt;code&gt;&lt;span&gt;satb_mark_queue&lt;/span&gt;&lt;/code&gt;&lt;span&gt;），在remark阶段会扫描这个队列，通过这种方式，旧的引用所指向的对象就会被标记上，其子孙也会被递归标记上，这样就不会漏标记任何对象，snapshot的完整性也就得到了保证。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实际上介绍到这里基本上已经将SATB算法实现介绍的比较清楚了。下图是完整的两轮并发标记示意图（摘自网上）：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.6863636363636363&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;440&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dTQ3R5geQ2wmia7RLzhgB8BbmVmV6Zqd7hZZ5upIGVeyYMnuwfFxiaqp9W9icHWGG5thFIj4jSAaFaHEnPL99QeBg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h5&gt;&lt;br/&gt;&lt;/h5&gt;&lt;h5&gt;&lt;strong&gt;&lt;span&gt;4.4 SATB算法 vs Incremental Update算法&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;G1的SATB算法在Remark阶段不需要暂停遍历整堆对象，所以避免了这个阶段可能的长耗时。但是CMS垃圾回收器中增量更新算法因为无法知道哪些对象是并发标记阶段新增的，所以在Remark阶段需要重新扫描GC Roots标记整堆对象，这就可能带来不可控的长耗时暂停。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7837837837837838&quot; data-type=&quot;png&quot; data-w=&quot;74&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/siayVELeBkzWBXV8e57JJ4OyQuuMXTfadZCia0bN2sFBfdbTRlFx0S97kyKKjic5v6eaZ8cY4WQt0UEu4dkyowHYg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7837837837837838&quot; data-type=&quot;png&quot; data-w=&quot;74&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rl6daM2XiabyLSr7nSTyAzcoZqPAsfe5tOOrXX0aciaVAfibHeQk5NOfQTdESRsezCwstPF02LeE4RHaH6NBEB9Rw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;全文总结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;至此，笔者基本将G1GC的核心内容介绍完了。可以看到，G1相比CMS在很多地方都做了非常大的改动，整体思路还是比较清晰的。但是在具体实践中，因为G1的这种复杂性，导致想要用好G1，需要开发同学对其中各个参数的含义比较了解，并且要有一定的调优经验。尤其在一些大内存场景下，一旦参数调不好，很可能GC效果会非常差。因为笔者目前接触到的大数据系统都是大内存场景，所以在这些场景下用好G1，实际上还是需要不断地测试和调优。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a3ae1490ddce15918dd56b57332e64e2</guid>
<title>马斯克：虽然我是Rust的粉丝，但我选择C，其次是C++和Python</title>
<link>https://toutiao.io/k/xnvw7sp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.15625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/1hReHaqafad4H57UlgDZZl7lILyDiaAWDsRcksUcCYeT76ibEllhuHJU9PxRtFgAQC7QPgW6qicToOuMjnSsmsErQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;整理 | 于轩       &lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;出品 | CSDN（ID：CSDNnews）&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;近日，人工智能非营利组织OpenAI的CTO格雷格·布劳克曼（Greg Brockman）在推特上发表了他对编程中的一些错误信息的看法。他表示，编程中最不被重视的技能之一就是写出不令人沮丧的错误信息。一个好的错误信息应该是显而易见的，包括：1.用户做了什么；2.可接受的输入是什么；3.如何解决这个问题。这可以决定你对库的爱或恨。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随后，“网络冲浪达人”马斯克在评论区表示了对布劳克曼的认可，甚至还讨论起了编译器的性能。马斯克说：编译器也可以做得更好，但在这方面花费的精力还不够多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接着，推特创始人Jack在评论区推荐了Rust：“Rust极大地解决了编译器方面的问题”。这一推荐引起了马斯克的兴趣，他回复Jack：我是Rust的粉丝，鉴于Discord使用它，显然它的扩展性很好。然而，为了获得最佳的性能，最好还是使用专门硬件上包含定制编译器的严格C语言，这对车辆推理计算机的最大帧率很重要。除此之外，我们大多使用C++和Python。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.700554528650647&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAughaTIuxx7ZrzyKuwt0AcoMn5YwoTd4Tdr4QLhKYj4mnXWibCkFToQA7BUY0juTFTKQUVckTyhCJ6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;541&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;来源：推特&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一讨论也吸引来了特斯拉车主发烧友@WholeMarsBlog，他和马斯克也就编译器进行了讨论：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;@WholeMarsBlog：“但你不会说，使用C语言的开发人员会产生开销，如果你不小心，你很容易会害了自己。这就是像Go和Rust这样的现代系统级语言出现的原因，Go&amp;gt;Rust IMO用于网络服务。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;马斯克：“是的，除非针对硬件性能进行优化，否则绝对不要使用C语言！”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9183673469387755&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAughaTIuxx7ZrzyKuwt0AcoMfZSiaGBOVcLASQibJ5dELRKq1VVUjQB99ibJ0R5CZyQedPayQmibMgQp6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;539&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;来源：推特&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;马斯克的这一“表白”，很难不让人联想到SpaceX的软件开发项目。因为去年，SpaceX软件开发团队的部分成员在Reddit进行了一场AMA(Ask Me Anything) 活动，这个活动允许任何人来向他们提问有关SpaceX项目的问题。当时就有一个用户问到：是否使用了Rust编程语言？对于这个问题，SpaceX团队成员Asher表示：他们的确对Rust非常感兴趣，因为Rust是一门在安全、性能和现代工具方面有突出优势的语言。已经有部分新项目开始使用Rust制作原型，这也仅是他们Rust旅程的开始。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.574585635359116&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAughaTIuxx7ZrzyKuwt0AcoMAyOKlkDZqxQZsVibYLYxAib53w5mDEEGwtiacBwTMe45SKyelIibsgpXqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;724&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;来源：Reddit&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以此次马斯克的公开表白，难道是要在接下来的项目中广泛使用Rust编程语言吗？你觉得Rust可以成为开发者使用的主流编程语言吗？欢迎在评论区留言交流~&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考链接：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;ONsz&quot;&gt;&lt;span&gt;https://twitter.com/elonmusk/status/1496293976692899843&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;R82e&quot;&gt;&lt;span&gt;https://twitter.com/elonmusk/with_replies?lang=en&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;lao0&quot;&gt;&lt;span&gt;https://www.reddit.com/r/spacex/comments/ncj4vz/we_are_the_spacex_software_team_ask_us_anything/gy5d7ld/&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.052083333333333336&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAujJIy4Pr5C99icC8X4yWM0KdBJGNjIoTuEAHjXmjto5Z95F6TrT5rlpwauyNsmKdnLHHayQsibI21Nw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;960&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《新程序员003》正式上市，&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;50余位技术专家共同创作，&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;云原生和数字化的开发者们的一本技术精选图书。&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;内容既有发展趋势及方法论结构，&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;华为、阿里、字节跳动、网易、快手、微软、&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;亚马逊、&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;英特尔、西门子、施耐德等30多家知名公司&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;云原生和数字化一手实战经验！&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;a class=&quot;weapp_image_link&quot; data-miniprogram-appid=&quot;wx7af6615902828e5a&quot; data-miniprogram-path=&quot;pages/index/index?refChannel=57&quot; data-miniprogram-nickname=&quot;New程序员&quot; data-miniprogram-type=&quot;image&quot; data-miniprogram-servicetype=&quot;&quot; wah-hotarea=&quot;click&quot; href=&quot;&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuiaZ0oMynEicPIicVNI4HjY3pu0DCXYV4HXGwVfOGIsNibiaIJ2SXF2u5MU8aIjibkDic2dl5Aeuo90siaHIQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre data-darkmode-bgcolor-15882384789136=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882384789136=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; font-size: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; letter-spacing: 0.544px; line-height: 25.6px; widows: 1; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; data-darkmode-bgcolor-15882396318564=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882396318564=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15910964149051=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15910964149051=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15924629205581=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15924629205581=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15924629205581=&quot;rgba(163, 163, 163, 0.9)&quot; data-darkmode-original-color-15924629205581=&quot;rgba(230, 230, 230, 0.9)&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAujJIy4Pr5C99icC8X4yWM0KdicA1NQGc6bicY1jibTRrHD7OIBRiaH1EM1jMGFpwyuUvM1axLY0qZGVBuQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;960&quot;/&gt;&lt;/section&gt;&lt;pre data-darkmode-bgcolor-15882384789136=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882384789136=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; font-size: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; letter-spacing: 0.544px; line-height: 25.6px; widows: 1; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; data-darkmode-bgcolor-15882396318564=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882396318564=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15910964149051=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15910964149051=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15924629205581=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15924629205581=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15924629205581=&quot;rgba(163, 163, 163, 0.9)&quot; data-darkmode-original-color-15924629205581=&quot;rgba(230, 230, 230, 0.9)&quot;&gt;&lt;pre data-darkmode-bgcolor-15882384789136=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882384789136=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; font-size: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; letter-spacing: 0.544px; line-height: 25.6px; widows: 1; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; data-darkmode-bgcolor-15882396318564=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882396318564=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15910964149051=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15910964149051=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15924629205581=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15924629205581=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15924629205581=&quot;rgba(163, 163, 163, 0.9)&quot; data-darkmode-original-color-15924629205581=&quot;rgba(230, 230, 230, 0.9)&quot;&gt;&lt;pre data-darkmode-bgcolor-15882384789136=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882384789136=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; font-size: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; letter-spacing: 0.544px; line-height: 25.6px; widows: 1; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; data-darkmode-bgcolor-15882396318564=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882396318564=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15910964149051=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15910964149051=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15924629205581=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15924629205581=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15924629205581=&quot;rgba(163, 163, 163, 0.9)&quot; data-darkmode-original-color-15924629205581=&quot;rgba(230, 230, 230, 0.9)&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MzY4NTQwMA==&amp;amp;mid=2651059965&amp;amp;idx=1&amp;amp;sn=6102af70197ad1553e638abb8dea335f&amp;amp;chksm=8bad450abcdacc1c538c9653a3cfdbf25114868811771debb050ee44064ac62c148b20a21015&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;☞&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;☞&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MzY4NTQwMA==&amp;amp;mid=2651061063&amp;amp;idx=1&amp;amp;sn=ca849fe0faed4fdedf5e76dce6790140&amp;amp;chksm=8bad48b0bcdac1a69cd23fffd16e776a5ee23c7ad7a45d54d958b46db9fb1d894897d459a642&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;乔布斯诞辰67周年，他的这些思想仍值得我们学习&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;乔布斯诞辰67周年，他的这些思想仍值得我们学习&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;pre data-darkmode-bgcolor-15882384789136=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882384789136=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; font-size: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; letter-spacing: 0.544px; line-height: 25.6px; widows: 1; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; data-darkmode-bgcolor-15882396318564=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882396318564=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15910964149051=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15910964149051=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15924629205581=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15924629205581=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15924629205581=&quot;rgba(163, 163, 163, 0.9)&quot; data-darkmode-original-color-15924629205581=&quot;rgba(230, 230, 230, 0.9)&quot;&gt;&lt;pre data-darkmode-bgcolor-15882384789136=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882384789136=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; font-size: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; letter-spacing: 0.544px; line-height: 25.6px; widows: 1; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; data-darkmode-bgcolor-15882396318564=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882396318564=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15910964149051=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15910964149051=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15924629205581=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15924629205581=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15924629205581=&quot;rgba(163, 163, 163, 0.9)&quot; data-darkmode-original-color-15924629205581=&quot;rgba(230, 230, 230, 0.9)&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MzY4NTQwMA==&amp;amp;mid=2651059965&amp;amp;idx=1&amp;amp;sn=6102af70197ad1553e638abb8dea335f&amp;amp;chksm=8bad450abcdacc1c538c9653a3cfdbf25114868811771debb050ee44064ac62c148b20a21015&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;☞&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;☞&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MzY4NTQwMA==&amp;amp;mid=2651061001&amp;amp;idx=1&amp;amp;sn=6682396b337263f6d135be3045c3ea0f&amp;amp;chksm=8bad48febcdac1e86d82d18deafda0c637a9036b8e82395466badcb4f615f12a53e528d412f0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;脱口秀演员入职华为？破案了：人家还是博士后研究员&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;脱口秀演员入职华为？破案了：人家还是博士后研究员&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;pre data-darkmode-bgcolor-15882384789136=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882384789136=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; font-size: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; letter-spacing: 0.544px; line-height: 25.6px; widows: 1; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; data-darkmode-bgcolor-15882396318564=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882396318564=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15910964149051=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15910964149051=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15924629205581=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15924629205581=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15924629205581=&quot;rgba(163, 163, 163, 0.9)&quot; data-darkmode-original-color-15924629205581=&quot;rgba(230, 230, 230, 0.9)&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MzY4NTQwMA==&amp;amp;mid=2651059965&amp;amp;idx=1&amp;amp;sn=6102af70197ad1553e638abb8dea335f&amp;amp;chksm=8bad450abcdacc1c538c9653a3cfdbf25114868811771debb050ee44064ac62c148b20a21015&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;☞&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;☞&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MzY4NTQwMA==&amp;amp;mid=2651060964&amp;amp;idx=1&amp;amp;sn=32726bb489f6fe37031f76139306a37b&amp;amp;chksm=8bad4913bcdac005ed16a1c6ae439710e1ef02ea376b6cccf12e676da837b0966c2ffb5c9a27&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;被辞后恶意报复，程序员清除125台设备数据，被判21个月监禁&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;被辞后恶意报复，程序员清除125台设备数据，被判21个月监禁&lt;/span&gt;&lt;/a&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;pre data-darkmode-bgcolor-15882384789136=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882384789136=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; font-size: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; letter-spacing: 0.544px; line-height: 25.6px; widows: 1; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; data-darkmode-bgcolor-15882396318564=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882396318564=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15910964149051=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15910964149051=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15924629205581=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15924629205581=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15924629205581=&quot;rgba(163, 163, 163, 0.9)&quot; data-darkmode-original-color-15924629205581=&quot;rgba(230, 230, 230, 0.9)&quot;&gt;&lt;p&gt;&lt;a class=&quot;weapp_image_link&quot; data-miniprogram-appid=&quot;wx7af6615902828e5a&quot; data-miniprogram-path=&quot;pages/index/index?refChannel=57&quot; data-miniprogram-nickname=&quot;New程序员&quot; data-miniprogram-type=&quot;image&quot; data-miniprogram-servicetype=&quot;&quot; wah-hotarea=&quot;click&quot; href=&quot;&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.08888888888888889&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1hReHaqafaeZAqmpxPoVd7fndbTfHQzm5xcOI2rHRaiaUDicicE2KTZFic3UIHD7l9n85XYkHYGbofTQHMkjjy7GfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fd8c98349e8ed610f4d93f4331c8c51c</guid>
<title>Vue3.2 中的 setup 语法糖，保证你看的明明白白！</title>
<link>https://toutiao.io/k/2bonug2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;vue3.2 到底更新了什么？&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;根据原文内容的更新的内容主要有以下 5 块：&lt;br/&gt;1.SSR：服务端渲染优化。@vue/server-renderer包加了一个ES模块创建，&lt;br/&gt;与Node.js解耦，使在非Node环境用@vue/serve-render做服务端渲染成为可能，&lt;br/&gt;比如(Workers、Service Workers)&lt;br/&gt;2.New SFC Features：新的单文件组件特性&lt;br/&gt;3.Web Components：自定义 web 组件。这个我们平时很少用到，但是应该知道&lt;br/&gt;4.Effect Scope API：effect 作用域，&lt;br/&gt;用来直接控制响应式副作用的释放时间(computed 和 watchers)。&lt;br/&gt;这是底层库的更新，开发不用关心，但是应该知道&lt;br/&gt;5.Performance Improvements：性能提升。这是内部的提升，跟开发无关&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;setup 的简单介绍&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;起初 Vue3.0 暴露变量必须 &lt;span&gt;return&lt;/span&gt; 出来，template中才能使用；&lt;br/&gt;这样会导致在页面上变量会出现很多次。&lt;br/&gt;很不友好，vue3.2只需在script标签中添加setup。&lt;br/&gt;可以帮助我们解决这个问题。&lt;br/&gt;&lt;br/&gt;1.组件只需引入不用注册，属性和方法也不用返回，&lt;br/&gt;也不用写setup函数，也不用写&lt;span&gt;export&lt;/span&gt; default ，&lt;br/&gt;甚至是自定义指令也可以在我们的template中自动获得。&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;变量、方法不需要 return 出来&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;  &amp;lt;div class=&lt;span&gt;&quot;home&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    显示的值{{flag }}&lt;br/&gt;    &amp;lt;button @click=&lt;span&gt;&quot;changeHander&quot;&lt;/span&gt;&amp;gt;改变值&amp;lt;/button&amp;gt;&lt;br/&gt;  &amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&amp;lt;!-- 只需要在script上添加setup --&amp;gt;&lt;br/&gt;&amp;lt;script lang=&lt;span&gt;&quot;ts&quot;&lt;/span&gt; setup&amp;gt;&lt;br/&gt;    import { ref } from &lt;span&gt;&#x27;vue&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &amp;lt;!-- flag变量不需要在 &lt;span&gt;return&lt;/span&gt;出去了 --&amp;gt;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; flag=ref(&lt;span&gt;&quot;开端-第一次循环&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;    &amp;lt;!-- 函数也可以直接引用,不用在&lt;span&gt;return&lt;/span&gt;中返回 --&amp;gt;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; changeHander=():void=&amp;gt;{&lt;br/&gt;        flag.value=&lt;span&gt;&#x27;开端-第二次循环&#x27;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21492537313432836&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/pfCCZhlbMQTUsYJ8o8jQQjb33mhsicQiayAibpeaPVyJby6YA6OFIDxKtVdDEcQfmib4IpZAc5tyqaGLnVf97GZwmQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;670&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;组件不需要在注册&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;!-- 这个是组件 --&amp;gt;&lt;br/&gt;&amp;lt;template&amp;gt;&lt;br/&gt;    &amp;lt;div&amp;gt;&lt;br/&gt;        &amp;lt;h2&amp;gt; 你好-我是肖鹤云&amp;lt;/h2&amp;gt;&lt;br/&gt;    &amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;使用的页面&lt;br/&gt;&amp;lt;template&amp;gt;&lt;br/&gt;  &amp;lt;div class=&lt;span&gt;&quot;home&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;&lt;span&gt;test&lt;/span&gt;-com&amp;gt;&amp;lt;/&lt;span&gt;test&lt;/span&gt;-com&amp;gt;&lt;br/&gt;  &amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&amp;lt;script lang=&lt;span&gt;&quot;ts&quot;&lt;/span&gt; setup&amp;gt;&lt;br/&gt;// 组件命名采用的是大驼峰，引入后不需要在注册，是不是爽歪歪呀!&lt;br/&gt;//在使用的使用直接是小写和横杠的方式连接 &lt;span&gt;test&lt;/span&gt;-com&lt;br/&gt;import TestCom from &lt;span&gt;&quot;../components/TestCom.vue&quot;&lt;/span&gt;&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;分析引入 setup 后组件的变化&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;在 script setup 中，&lt;br/&gt;引入的组件可以直接使用无需再通过components进行注册，[是不是真的很香啊!]&lt;br/&gt;并且无法指定当前组件的名字，它会自动以文件名为主，也就是不用再写name属性了。&lt;br/&gt;当我们的页面上需要使用很多组件时，它的功能一下就体现出来了。&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;新增 defineProps&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;刚刚我一直在强调,不需要使用setup函数，机智的小伙伴会说:&lt;br/&gt;那么子组件怎么接受父组件传递过来的值呢?&lt;br/&gt;props，emit怎么获取呢?&lt;br/&gt;别担心,新的api出现了,我们的主角 defineProps&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;defineProps 的使用&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;父组件传递参数&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;  &amp;lt;div class=&lt;span&gt;&quot;home&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;&lt;span&gt;test&lt;/span&gt;-com :info=&lt;span&gt;&quot;msg&quot;&lt;/span&gt; time=&lt;span&gt;&quot;42分钟&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span&gt;test&lt;/span&gt;-com&amp;gt;&lt;br/&gt;  &amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&amp;lt;script lang=&lt;span&gt;&quot;ts&quot;&lt;/span&gt; setup&amp;gt;&lt;br/&gt;// 组件命名采用的是大驼峰，引入后不需要在注册，是不是爽歪歪呀!&lt;br/&gt;import TestCom from &lt;span&gt;&quot;../components/TestCom.vue&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; msg=&lt;span&gt;&#x27;公交车-第一次循环&#x27;&lt;/span&gt;&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;子组件接受参数&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;    &amp;lt;div&amp;gt;&lt;br/&gt;        &amp;lt;h2&amp;gt; 你好-我是肖鹤云&amp;lt;/h2&amp;gt;&lt;br/&gt;        &amp;lt;p&amp;gt;信息:{{ info}}&amp;lt;/p&amp;gt;&lt;br/&gt;        &amp;lt;p&amp;gt;{{ time }}&amp;lt;/p&amp;gt;&lt;br/&gt;    &amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&amp;lt;script lang=&lt;span&gt;&quot;ts&quot;&lt;/span&gt; setup&amp;gt;&lt;br/&gt;import {defineProps} from &lt;span&gt;&#x27;vue&#x27;&lt;/span&gt;&lt;br/&gt;defineProps({&lt;br/&gt;    info:{&lt;br/&gt;        &lt;span&gt;type&lt;/span&gt;:String,&lt;br/&gt;        default:&lt;span&gt;&#x27;----&#x27;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    time:{&lt;br/&gt;        &lt;span&gt;type&lt;/span&gt;:String,&lt;br/&gt;        default:&lt;span&gt;&#x27;0分钟&#x27;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;})&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5902255639097744&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/pfCCZhlbMQTUsYJ8o8jQQjb33mhsicQiay1y15qSjExnXdUCiby5YINhlS1xtjmKJE1O3Vg6AbHqyqfDIiaR96KXhg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;532&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;子组件怎么向父组件抛出事件？defineEmits的到来！&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;子组件使用&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;别担心，我们使用defineEmits。它可以像父组件抛出事件。&lt;br/&gt;&amp;lt;template&amp;gt;&lt;br/&gt;    &amp;lt;div&amp;gt;&lt;br/&gt;        &amp;lt;h2&amp;gt; 你好-我是肖鹤云&amp;lt;/h2&amp;gt;&lt;br/&gt;        &amp;lt;button @click=&lt;span&gt;&quot;hander1Click&quot;&lt;/span&gt;&amp;gt;新增&amp;lt;/button&amp;gt;&lt;br/&gt;        &amp;lt;button @click=&lt;span&gt;&quot;hander2Click&quot;&lt;/span&gt;&amp;gt;删除&amp;lt;/button&amp;gt;&lt;br/&gt;    &amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;script lang=&lt;span&gt;&quot;ts&quot;&lt;/span&gt; setup&amp;gt;&lt;br/&gt; import {defineEmits} from &lt;span&gt;&#x27;vue&#x27;&lt;/span&gt;&lt;br/&gt;//  使用defineEmits创建名称，接受一个数组&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;$myemit&lt;/span&gt;=defineEmits([&lt;span&gt;&#x27;myAdd&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;myDel&#x27;&lt;/span&gt;])&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; hander1Click=():void=&amp;gt;{&lt;br/&gt;    &lt;span&gt;$myemit&lt;/span&gt;(&lt;span&gt;&#x27;myAdd&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;新增的数据&#x27;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; hander2Click=():void=&amp;gt;{&lt;br/&gt;    &lt;span&gt;$myemit&lt;/span&gt;(&lt;span&gt;&#x27;myDel&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;删除的数据&#x27;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;父组件&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;  &amp;lt;div class=&lt;span&gt;&quot;home&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;&lt;span&gt;test&lt;/span&gt;-com @myAdd=&lt;span&gt;&quot;myAddHander&quot;&lt;/span&gt; @myDel=&lt;span&gt;&#x27;myDelHander&#x27;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span&gt;test&lt;/span&gt;-com&amp;gt;&lt;br/&gt;  &amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&amp;lt;script lang=&lt;span&gt;&quot;ts&quot;&lt;/span&gt; setup&amp;gt;&lt;br/&gt;// 组件命名采用的是大驼峰，引入后不需要在注册，是不是爽歪歪呀!&lt;br/&gt;//在使用的使用直接是小写和横杠的方式连接 &lt;span&gt;test&lt;/span&gt;-com&lt;br/&gt;import TestCom from &lt;span&gt;&quot;../components/TestCom.vue&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; myAddHander=(mess):void=&amp;gt;{&lt;br/&gt;  console.log(&lt;span&gt;&#x27;新增==&amp;gt;&#x27;&lt;/span&gt;,mess);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; myDelHander=(mess):void=&amp;gt;{&lt;br/&gt;  console.log(&lt;span&gt;&#x27;删除==&amp;gt;&#x27;&lt;/span&gt;, mess);&lt;br/&gt;}&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.29861849096705634&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/pfCCZhlbMQTUsYJ8o8jQQjb33mhsicQiay3TvPv5ic382aMQiaj496eh51dlWccKOtEJBcKlaNgbedwhIwQXbZINiaA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;941&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;如何获取子组件中的属性值&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;子组件&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;    &amp;lt;div&amp;gt;&lt;br/&gt;        &amp;lt;h2&amp;gt; 你好-我是肖鹤云&amp;lt;/h2&amp;gt;&lt;br/&gt;        &amp;lt;p&amp;gt;性别:{{ sex}}&amp;lt;/p&amp;gt;&lt;br/&gt;        &amp;lt;p&amp;gt;其他信息:{{ info}}&amp;lt;/p&amp;gt;&lt;br/&gt;    &amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;script lang=&lt;span&gt;&quot;ts&quot;&lt;/span&gt; setup&amp;gt;&lt;br/&gt;import { reactive, ref,defineExpose } from &lt;span&gt;&quot;vue&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; sex=ref(&lt;span&gt;&#x27;男&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; info=reactive({&lt;br/&gt;    like:&lt;span&gt;&#x27;喜欢李诗晴&#x27;&lt;/span&gt;,&lt;br/&gt;    age:27&lt;br/&gt;})&lt;br/&gt;// 将组件中的属性暴露出去，这样父组件可以获取&lt;br/&gt;defineExpose({&lt;br/&gt;    sex,&lt;br/&gt;    info&lt;br/&gt;})&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;父组件&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;  &amp;lt;div class=&lt;span&gt;&quot;home&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;&lt;span&gt;test&lt;/span&gt;-com @myAdd=&lt;span&gt;&quot;myAddHander&quot;&lt;/span&gt; @myDel=&lt;span&gt;&#x27;myDelHander&#x27;&lt;/span&gt; ref=&lt;span&gt;&quot;testcomRef&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span&gt;test&lt;/span&gt;-com&amp;gt;&lt;br/&gt;    &amp;lt;button @click=&lt;span&gt;&quot;getSonHander&quot;&lt;/span&gt;&amp;gt;获取子组件中的数据&amp;lt;/button&amp;gt;&lt;br/&gt;  &amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&amp;lt;script lang=&lt;span&gt;&quot;ts&quot;&lt;/span&gt; setup&amp;gt;&lt;br/&gt;import TestCom from &lt;span&gt;&quot;../components/TestCom.vue&quot;&lt;/span&gt;&lt;br/&gt;import {ref} from &lt;span&gt;&#x27;vue&#x27;&lt;/span&gt;&lt;br/&gt;const testcomRef = ref()&lt;br/&gt;const getSonHander=()=&amp;gt;{&lt;br/&gt;  console.log(&lt;span&gt;&#x27;获取子组件中的性别&#x27;&lt;/span&gt;, testcomRef.value.sex );&lt;br/&gt;  console.log(&lt;span&gt;&#x27;获取子组件中的其他信息&#x27;&lt;/span&gt;, testcomRef.value.info );&lt;br/&gt;}&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29430379746835444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/pfCCZhlbMQTUsYJ8o8jQQjb33mhsicQiayb6G73KjO0ZibeUE0HWcBQbw9Yhg6pdEgrSIFNyl23PrqJKgy1AWHfCQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1264&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;新增指令 v-memo&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;v-memod会记住一个模板的子树,元素和组件上都可以使用。&lt;br/&gt;该指令接收一个固定长度的数组作为依赖值进行[记忆比对]。&lt;br/&gt;如果数组中的每个值都和上次渲染的时候相同，则整个子树的更新会被跳过。&lt;br/&gt;即使是虚拟 DOM 的 VNode 创建也将被跳过，因为子树的记忆副本可以被重用。&lt;br/&gt;因此渲染的速度会非常的快。&lt;br/&gt;需要注意得是:正确地声明记忆数组是很重要。&lt;br/&gt;开发者有责任指定正确的依赖数组，以避免必要的更新被跳过。&lt;br/&gt;&amp;lt;li v-for=&lt;span&gt;&quot;item in listArr&quot;&lt;/span&gt;  :key=&lt;span&gt;&quot;item.id&quot;&lt;/span&gt;  v-memo=&lt;span&gt;&quot;[&#x27;valueA&#x27;，&#x27;valueB&#x27;]&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    {{ item.name   }}&lt;br/&gt;&amp;lt;/li&amp;gt;&lt;br/&gt;v-memod的指令使用较少，它的作用是:缓存模板中的一部分数据。&lt;br/&gt;只创建一次，以后就不会再更新了。也就是说用内存换取时间。&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;style v-bind 该同学已经从实验室毕业了&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;经过尤大大和团队的努力，&amp;lt;style&amp;gt; v-bind 已经从实验室毕业了。&lt;br/&gt;我们可以使用这个属性了。爽歪歪！&lt;br/&gt;我们可以在style中去使用变量。是不是感觉很牛逼呀！&lt;br/&gt;现在我们用起来，第一次使用&amp;lt;style&amp;gt; v-bind&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;style v-bind将span变成红色&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;  &amp;lt;span&amp;gt; 有开始循环了-开端 &amp;lt;/span&amp;gt;  &lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&amp;lt;script setup&amp;gt;&lt;br/&gt;  import { reactive } from &lt;span&gt;&#x27;vue&#x27;&lt;/span&gt;&lt;br/&gt;  const state = reactive({&lt;br/&gt;    color: &lt;span&gt;&#x27;red&#x27;&lt;/span&gt;&lt;br/&gt;  })&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&amp;lt;style scoped&amp;gt;&lt;br/&gt;  span {&lt;br/&gt;    /* 使用v-bind绑定state中的变量 */&lt;br/&gt;    color: v-bind(&lt;span&gt;&#x27;state.color&#x27;&lt;/span&gt;);&lt;br/&gt;  }  &lt;br/&gt;&amp;lt;/style&amp;gt;&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36818181818181817&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/pfCCZhlbMQTUsYJ8o8jQQjb33mhsicQiayj3dYawt2tmJ75Ad9htkHeKNib6rSOQRxr45NHjcDiaLlgyPmtDSD101Q/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1100&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;尾声&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;如果你觉得我写的不错的话，点一下推荐。&lt;br/&gt;我已经几个月没有人给我推荐了。&lt;br/&gt;听说打赏的小哥哥都追到女朋友了，&lt;br/&gt;咦！你不信，不信你给我打赏看一下！&lt;br/&gt;保准你追到到喜欢的Ta&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>