<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f60272d343e086c7e0b11f2cd03824e6</guid>
<title>惊！这个 Go 开源项目号称「不改一行代码做秒杀」</title>
<link>https://toutiao.io/k/qnyxbs9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;23&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;阅读本文大概需要 2 分钟。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是 polarisxu。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到耗子叔发推文推荐了一个新开源的网关：Easegress。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.43005181347150256&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UzjmETLXwBaZWKKF0aSaChclOHu7laFedvaxa0eueVuPxwnhF2HdGLz3ZIrMTaEwy6DJ5TfbyHNMhhYgArxW5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1158&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打开看了下，这是一个 Go 语言实现的开源项目。它有如下亮点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;高可用。内置 Raft 共识和领导者选举，提供 99.99％ 的可用性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;流量编排。将各种过滤器动态地编排到流量管道。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高性能。轻量级和基础特性提升性能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可观察性。以可读方式定期存放许多有意义的统计数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可扩展性。使用高级编程语言开发自己的过滤器或控制器很容易。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一体化。简单的接口使其易于与其他系统集成，例如 Kubernetes Ingress，Easemesh Sidecar，Workflow 等。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给一张架构图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4578125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UzjmETLXwBaZWKKF0aSaChclOHu7laFelnG5ouQsoNo4HAlGd7I5LXFaMlz93Kr5NEfywFoXLgdY4jibAxEevEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体的功能特性，耗子叔给了一张图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;3.8641509433962264&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UzjmETLXwBaZWKKF0aSaChclOHu7laFecibnIyqiak6pfS1LYmYvaicg33tbR7Tcz4fkzGmia2LfYfAicRAiakiawibemQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1060&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看起来很强大，而且他们公司的产品宣传是：&lt;strong&gt;不改一行代码做秒杀&lt;/strong&gt;。有机会可以深入学习研究下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然是国人开源项目，不过文档是全英文的，没有中文版。很显然是要走向国际的。&lt;strong&gt;阅读原文&lt;/strong&gt;可以直达项目首页：https://github.com/megaease/easegress。&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;往期推荐&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UzjmETLXwBYuP3ncUTaemHXQYjOZDS40VoicqII73Hu9RncJv06g0kJhnrVicSmUfJRg5Wf9qcDHj7zf5vTjns5A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我是 polarisxu，北大硕士毕业，曾在 360 等知名互联网公司工作，10多年技术研发与架构经验！2012 年接触 Go 语言并创建了 Go 语言中文网！著有《&lt;/span&gt;&lt;span&gt;Go语言编程之旅&lt;/span&gt;&lt;span&gt;》、开源图书《&lt;/span&gt;&lt;span&gt;Go语言标准库&lt;/span&gt;&lt;span&gt;》等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;坚持输出技术（包括 Go、Rust 等技术）、职场心得和创业感悟！欢迎关注「polarisxu」一起成长！也欢迎加我微信好友交流：&lt;/span&gt;&lt;span&gt;gopherstudio&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7f750362dc104ba85cba19194f0c076b</guid>
<title>网络连接存在大量 time_wait 和 close_wait 的原因以及解决方法</title>
<link>https://toutiao.io/k/b9vlrcu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-source-line=&quot;1&quot;&gt;如果对tcp中的握手挥手不了解的同学，请先看这篇博客：《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&amp;amp;mid=2247483765&amp;amp;idx=1&amp;amp;sn=70179fa0e28aacd42d4c15dbd08bc6fc&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;关于三次握手与四次挥手你要知道这些&lt;/a&gt;》。&lt;/p&gt;&lt;p data-source-line=&quot;3&quot;&gt;&lt;img data-ratio=&quot;0.6995305164319249&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7Gzia45CTkHaZ3W8ewRXgOZ5ayNKNuHChs2vHVS9qBKiaxTnpb6vbcmkl9nCEGQich82xDS8wSBzx5zQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;426&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;5&quot;&gt;四次挥手过程：&lt;/p&gt;&lt;p data-source-line=&quot;7&quot;&gt;第一次挥手：主机A（可以是客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机B发送一个FIN报文段；此时，主机A进入FIN_WAIT_1状态；这表示主机A没有数据要发送给主机B了。&lt;/p&gt;&lt;p data-source-line=&quot;9&quot;&gt;第二次挥手：主机B收到了主机A发送的FIN报文段，向主机A回一个ACK报文段，Acknowledgment Number为Sequence Number加1，主机A进入FIN_WAIT_2状态；主机B告诉主机A，我也没有数据要发送了，可以进行关闭连接了。&lt;/p&gt;&lt;p data-source-line=&quot;11&quot;&gt;第三次挥手：主机B向主机A发送FIN报文段，请求关闭连接，同时主机B进入CLOSE_WAIT状态。&lt;/p&gt;&lt;p data-source-line=&quot;13&quot;&gt;第四次挥手：主机A收到主机B发送的FIN报文段，向主机B发送ACK报文段，然后主机A进入TIME_WAIT状态；主机B收到主机A的ACK报文段以后，就关闭连接；此时，主机A等待2MSL后依然没有收到回复，则证明主机B已正常关闭，那好，主机A也可以关闭连接了。&lt;/p&gt;&lt;h2 data-source-line=&quot;15&quot;&gt;大量time_wait&lt;/h2&gt;&lt;h3 data-source-line=&quot;17&quot;&gt;问题原因&lt;/h3&gt;&lt;p data-source-line=&quot;19&quot;&gt;《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&amp;amp;mid=2247483765&amp;amp;idx=1&amp;amp;sn=70179fa0e28aacd42d4c15dbd08bc6fc&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;关于三次握手与四次挥手你要知道这些&lt;/a&gt;》中有关于“四次挥手释放连接时，等待2MSL的意义”的解释。正因为有2ML的存在，所以可能会发生大量time_wait存在的现象，从而影响服务器性能，甚至导致套接字数量达到服务器上限。&lt;/p&gt;&lt;blockquote data-source-line=&quot;21&quot;&gt;&lt;p&gt;实际上，TIME_WAIT对于系统资源的消耗影响比较小，而真正需要考虑因为TIME_WAIT多而触碰到限制的是如下几个方面：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;源端口数量 (net.ipv4.ip_local_port_range)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;TIME_WAIT bucket 数量 (net.ipv4.tcp_max_tw_buckets)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;文件描述符数量 (max open files)&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;h3 data-source-line=&quot;26&quot;&gt;解决方法&lt;/h3&gt;&lt;p data-source-line=&quot;28&quot;&gt;只需要优化服务器系统的网络配置，连接配置，使用socket重用或及时释放资源即可。（由于系统不断迭代，所以这里不给出具体参数修改）&lt;/p&gt;&lt;h2 data-source-line=&quot;30&quot;&gt;大量close_wait&lt;/h2&gt;&lt;h3 data-source-line=&quot;32&quot;&gt;问题原因&lt;/h3&gt;&lt;p data-source-line=&quot;34&quot;&gt;主机B一直没有进行第三次挥手，会导致主机B存在大量close_wait状态的连接。大量这种情况发生会影响服务器性能，同样可能导致套接字数量达到服务器上限。&lt;/p&gt;&lt;p data-source-line=&quot;36&quot;&gt;网络连接未及时释放，通常是服务端发生异常后未关闭连接或者close_wait的配置时间过长。如果是mysql数据库也可能存在事务开启后没有正确rollback或commit的可能。&lt;/p&gt;&lt;p data-source-line=&quot;38&quot;&gt;总之，都是大概率是服务端代码或配置的问题。&lt;/p&gt;&lt;h3 data-source-line=&quot;40&quot;&gt;解决方法&lt;/h3&gt;&lt;p data-source-line=&quot;42&quot;&gt;以下方法并不存在顺序，定位问题时也并不是一定同时需要。&lt;/p&gt;&lt;ul data-source-line=&quot;44&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;top查看cpu利用率和load情况（大量close_wait属于io密集型，会导致load相比cpu利用率高出很多）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;netstat观察close_wait的数量变化。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;wireshark辅助查看网络包的发送情况。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;perf或者火焰图定位热点函数。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;java可以将服务器线程堆栈dump，查看大量线程在哪里blocked。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e39ca2426990cde6c0193caf09cc2601</guid>
<title>ClickHouse 数据目录完全解析</title>
<link>https://toutiao.io/k/3ldiykv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;        之前文章有介绍过基础的MergeTree的物理存储结构，数据会按分区目录的形式保存到磁盘。本文着重介绍一些二进制文件的格式及内容。&lt;/p&gt;&lt;p&gt;        首先按照如下规则创建表，用于后续数据的对照查询&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;TABLE&lt;/span&gt; default.ansel&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;`a`&lt;/span&gt; Int32,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;`b`&lt;/span&gt; Int32,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;`c`&lt;/span&gt; Int32,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`idx_c`&lt;/span&gt; (c) &lt;span class=&quot;code-snippet__keyword&quot;&gt;TYPE&lt;/span&gt; minmax GRANULARITY &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;ENGINE&lt;/span&gt; = MergeTree&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;BY&lt;/span&gt; a &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;BY&lt;/span&gt; b&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SETTINGS&lt;/span&gt; index_granularity=&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, index_granularity_bytes = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;into&lt;/span&gt; default.ansel(a,b,c) &lt;span class=&quot;code-snippet__keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;8&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;9&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;        注意：设置index_granularity_bytes = 0取消自适应索引粒度，便于后续观察mrk文件结构。&lt;/section&gt;&lt;section&gt;        插入后看一下测试数据如下：&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4975609756097561&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW5aZzibwULnhUGicRWFXtGFMEBicAmR0ugTYAg6DMD4TYxeHlhwkib9xTytg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;820&quot;/&gt;&lt;/p&gt;&lt;section&gt;        生成的数据文件如下：&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[clickhouse@localhost /&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt;/lib/clickhouse/data/&lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt;/ansel ]$ tree&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;├── &lt;span class=&quot;code-snippet__number&quot;&gt;3_1_1_0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   ├── a.bin&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   ├── a.mrk&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   ├── b.bin&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   ├── b.mrk&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   ├── &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;.bin&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   ├── checksums.txt&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   ├── &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;.mrk&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   ├── columns.txt&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   ├── &lt;span class=&quot;code-snippet__built_in&quot;&gt;count&lt;/span&gt;.txt&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   ├── minmax_a.idx&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   ├── &lt;span class=&quot;code-snippet__built_in&quot;&gt;partition&lt;/span&gt;.dat&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   ├── primary.idx&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   ├── skp_idx_idx_c.idx&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   └── skp_idx_idx_c.mrk&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;├── detached&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;└── format_version.txt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;        一般的数据目录结构如下：&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;table_name                                 &lt;span class=&quot;code-snippet__meta&quot;&gt;#表名&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;├─ partition_{index}            DIR        &lt;span class=&quot;code-snippet__meta&quot;&gt;#分区目录&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  │  &lt;span class=&quot;code-snippet__meta&quot;&gt;# 基础文件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  ├─ checksums.txt             BIN        &lt;span class=&quot;code-snippet__meta&quot;&gt;#各类文件的尺寸以及尺寸的散列&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  ├─ columns.txt               TXT        &lt;span class=&quot;code-snippet__meta&quot;&gt;#列信息&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  ├─ count.txt                 TXT        &lt;span class=&quot;code-snippet__meta&quot;&gt;#当前分区目录下数据总行数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  ├─ primary.idx               BIN        &lt;span class=&quot;code-snippet__meta&quot;&gt;#稀疏索引文件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  ├─ {column}.bin              BIN        &lt;span class=&quot;code-snippet__meta&quot;&gt;#经压缩的列数据文件，以字段名命名&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  ├─ {column}.mrk              BIN        &lt;span class=&quot;code-snippet__meta&quot;&gt;#列字段标记文件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  ├─ {column}.mrk2             BIN        &lt;span class=&quot;code-snippet__meta&quot;&gt;#使用自适应索引间隔的标记文件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  │&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  │  &lt;span class=&quot;code-snippet__meta&quot;&gt;# 分区键文件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  ├─ partition.dat             BIN        &lt;span class=&quot;code-snippet__meta&quot;&gt;#当前分区表达式最终值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  ├─ minmax_{column}.idx       BIN        &lt;span class=&quot;code-snippet__meta&quot;&gt;#当前分区字段对应原始数据的最值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  │ &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  │  &lt;span class=&quot;code-snippet__meta&quot;&gt;# 跳数索引文件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  ├─ skp_idx_{column}.idx      BIN        &lt;span class=&quot;code-snippet__meta&quot;&gt;#跳数索引文件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│  └─ skp_idx_{column}.mrk      BIN        &lt;span class=&quot;code-snippet__meta&quot;&gt;#跳数索引表及文件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;└─ partition_{index}            DIR        &lt;span class=&quot;code-snippet__meta&quot;&gt;#分区目录&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;        列信息文件，使用文本文件存储，用于保存分区下的列字段信息。&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2234185733512786&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW5AhtMEntsXFP2ooXBNqwCeibufUds58xSr0RWvBw842QsqE1m6nt6HHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;743&quot;/&gt;&lt;/p&gt;&lt;section&gt;        记录了有多少个字段，及字段名字和类型。&lt;/section&gt;&lt;section&gt;        计数文件，文本文件存储，用于记录当前数据分区目录下数据的总行数。&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.094211123723042&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW5j6DU4v2jJWgNodKPiaT1L9ic6fXmwzkeL7mPhvTZyBNg8bWRQc1Tkcuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;881&quot;/&gt;&lt;/p&gt;&lt;section&gt;        记录了该part中row的数量。&lt;/section&gt;&lt;section&gt;        一级索引文件，使用二进制格式存储。&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.13459399332591768&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW5JWWICFYpZgKlYBnxqgv8VMiaJxprSn32mW01dYiaklv5cialLQuHhibRhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;899&quot;/&gt;&lt;/p&gt;&lt;section&gt;        主键索引，根据index_granularity索引粒度，每index_granularity行取一个主键列的值组合起来作为索引，例子中并没有设置PRIMARY KEY，clickhouse在这种情况下默认将ORDER BY的字段默认作为PRIMARY KEY，所以这里的primary.idx是根据b字段的数据进行固定间隔抽取的。例子中index_granularity=3，所以primary.idx中存的是4、7、10。&lt;/section&gt;&lt;section&gt;        列字段标记，使用二进制格式存储。标记文件中保存了bin文件中数据的偏移量信息，mrk文件与稀疏文件对齐，又与bin文件一一对应，所以MergeTree通过标记文件建立了primary.idx稀疏索引与bin数据文件的映射关系&lt;/section&gt;&lt;p&gt;        以b.mrk为例&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.12594187298170076&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW51oXBev7kWAanRMFIsf6aKKuPIZ7Z5tet6mg8icYmicENbeWkTr1Tdf5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;929&quot;/&gt;&lt;/p&gt;&lt;section&gt;        mrk文件分为两列，第一个值对应bin文件中压缩后数据块的偏移量，第二个值对应bin文件解压后数据块的偏移量，单位均为字节。Int32为4字节，索引粒度为3，所以数据块的偏移量是0、12、24。&lt;/section&gt;&lt;section&gt;        直观点可以表示成下面规则：&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3006198347107438&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW5P4oGuTDQaSG4q5oQvbha3e8xATHQDib8tqIvDTibj1FLtPR9vicBLq63g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;968&quot;/&gt;&lt;/p&gt;&lt;section&gt;        所以primary.idx和mrk的行是一一对应。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;        数据文件，使用压缩格式存储，默认使用LZ4压缩格式，用于存储某一列的数据。&lt;/p&gt;&lt;p&gt;        以b.bin为例&lt;/p&gt;&lt;p&gt;        一个压缩数据块由头信息和压缩数据两部分组成。头信息固定使用9位字节表示，具体由1个UInt8(1字节)和2个UInt32(4字节)整型组成，分别代表了使用的压缩算法类型、压缩后的数据大小和压缩前的数据大小。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3109700815956482&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW5d63jvsKb5Eq63wdl2tiaE0djSdia9eliaVibrbeTTBvQbKbwDpjfUCc80Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1103&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Checksum：该bin文件的校验值，16字节。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Block：数据块，包含Head和CompressedData。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Head：包含CompressionMethod、CompressedSize、UncompressedSize三部分，其中CompressionMethod类型为UInt8占4字节，包含LZ4（0x82）、ZSTD（0x90）、Multipile（0x91）、Delta（0x92）,CompressedSize类型为UInt32占4字节，UncompressedSize类型同样为UInt32占4字节。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CompressedData：压缩数据块，默认最小65535字节/64K，最大1048576字节/1M。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;        查看bin文件内容可以使用官方的clickhouse-compressor，其余bin文件都可以用这个方法&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;clickhouse-compressor &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.16717095310136157&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW5McVCHax60Of5cCa3yHB7brCnFHsEwicyz3mLhibndibib8PiaJZpWsBqWVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1322&quot;/&gt;&lt;/p&gt;&lt;section&gt;        还可以通过clickhouse-compressor查看b.bin的统计信息。&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;http&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;clickhouse-compressor --stat &amp;lt; b.bin&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.05693296602387511&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW5InggAQiavGDLLfiaw7RGfbxU8lOKR7R7pH9Kr2dY7rlF2VSqkA5tmxuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1089&quot;/&gt;&lt;/p&gt;&lt;section&gt;        其中28表示压缩前数据大小，因为从4-10，每个数字占4字节，一共28字节，39表示压缩后数据大小，因为数据量太小，压缩也要有些必要的字节表示一些元信息，所以会比压缩前大，也可以再插入些数据再观察一下，如：&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;into&lt;/span&gt; default.ansel(a,b,c) &lt;span class=&quot;code-snippet__keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;8&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;9&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;12&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;13&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;14&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;15&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;17&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/p&gt;&lt;section&gt;        可以发现，压缩后是小的，如下：&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.05853658536585366&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW5rYmuUa2doGXUQmKiajXIhN2Aia028EZnMGib6apoZHF3kAymkRAOwhKuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1025&quot;/&gt;&lt;/p&gt;&lt;section&gt;        还回到原始数据的b.bin，看下二进制文件&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.11180992313067785&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW5QViaXKnrpHFqzP1FSGtBNcxWHRGBFTfkTV8N6TVRY9EJKQ5Vc8t4Ppg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1431&quot;/&gt;&lt;/p&gt;&lt;section&gt;        第一行16个自己就是Checksum值；&lt;/section&gt;&lt;section&gt;        第二行第一个字节0x82就是压缩算法，这里就是默认的LZ4，第三到第五字节就是CompressedSize，这里centos7中安装的ck，所以是小端模式，所以要把27 00 00 00反过来看，即00 00 00 27，转换成10进制就是39，所以和上面的clickhouse-compressor中第二个数字39是一致的；继续向后看4个字节，反过来就是00 00 00 1c，即十进制的28，和上面的clickhouse-compressor中第二个数字28是一致的；再向后就涉及LZ4压缩的内容了&lt;/section&gt;&lt;section&gt;        还可以通过clickhouse-compressor直接看数据的16进制存储&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.07215189873417721&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW5BaYqryicQSqVia1lcYPgDRHLBcgVleeQXuDnPGgJkFhjibcTQ8TvC5I6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1580&quot;/&gt;&lt;/p&gt;&lt;p&gt;        可以看到从04 00 00 00到0a 00 00 00，反过来看也就是4-10&lt;/p&gt;&lt;p&gt;        用于保存当前分区下分区表达式最终生成值。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.05429864253393665&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW5DUItPdS4RNKtYAfliazeLNib53ic1cqpeHFmlTeUtsBZfSZm8IWw3ZibyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1105&quot;/&gt;&lt;/p&gt;&lt;section&gt;        记录了该part的partition最终计算值，与3_1_1_0的3是一致的&lt;/section&gt;&lt;section&gt;        用于记录当前分区字段对应原始数据的最小值和最大值&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.05258386219401632&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW5xRCUEPqZBMt7HJS63r8u1wOxIJWubyia2ibgpcrx8nMAPGR3R2fQicUlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1103&quot;/&gt;&lt;/p&gt;&lt;section&gt;        校验文件，使用二进制存储，保存了各类文件的size大小和size的哈希值，用于快速校验文件的完整性和正确性。&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5242857142857142&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPxCEXhJ7jWm6hia1Co7ZiaQW5banfrTdRXwRib9X7Lg71wcqbnSeBtOZj8rKJqW6QicxPC4UFd6EiaLLjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1400&quot;/&gt;&lt;/p&gt;&lt;section&gt;        从中能看到各个column的bin和mrk文件、primary.idx、minmax_a.idx、skp_idx_c.idx、skp_idx_c.mrk的checksum值都会记录在该二进制文件中。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;近期文章推荐：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNDIxNjQ3MQ==&amp;amp;mid=2247484154&amp;amp;idx=1&amp;amp;sn=b0f8ffc7ef927da4ee20a95851a51686&amp;amp;chksm=c1d87f02f6aff6145669a710eb80a1792e3de45eca4c2cd77fc9de98f3ddc9d172c5dac4a3ba&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;        ClickHouse优化典藏&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNDIxNjQ3MQ==&amp;amp;mid=2247484165&amp;amp;idx=1&amp;amp;sn=05b9c7ead699867b31feb3876ce8ebac&amp;amp;chksm=c1d87efdf6aff7eb5cd49c5c85142e7eb5eb98b1389beff808dc29344d5654d6da6a4b060f0c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;        ClickHouse 之 Server Settings&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNDIxNjQ3MQ==&amp;amp;mid=2247484176&amp;amp;idx=1&amp;amp;sn=651a3c543418520206ec4ebbab7e7b04&amp;amp;chksm=c1d87ee8f6aff7fefc1dc0406e1a5606930b9f51fe9cdc47c921db0f1b3d8c30bb45eb76402f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;        ClickHouse那些年我们遇到过的问题&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;更多精彩内容欢迎关注微信公众号&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WAG0WbTTFPzZwtbpCF52qmgFw01uPdHJxfSYHtbZWsial5wEnzOzicr6u916XE1ibUDvQnUxMicuAYuibfIGkGa9M7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>54dddaa291472bba1c0938c876134431</guid>
<title>详解 Go 团队不建议用的 unsafe.Pointer</title>
<link>https://toutiao.io/k/4v9vvbf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家在学习 Go 的时候，肯定都学过 “Go 的指针是不支持指针运算和转换” 这个知识点。为什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，Go 是一门静态语言，所有的变量都必须为标量类型。不同的类型不能够进行赋值、计算等跨类型的操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么指针也对应着相对的类型，也在 Compile 的静态类型检查的范围内。同时静态语言，也称为强类型。也就是一旦定义了，就不能再改变它。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;错误的示例&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt; num := 5&lt;br/&gt; numPointer := &amp;amp;num&lt;br/&gt;&lt;br/&gt; flnum := (*float32)(numPointer)&lt;br/&gt; fmt.Println(flnum)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# command-line-arguments&lt;/span&gt;&lt;br/&gt;...: cannot convert numPointer (&lt;span&gt;type&lt;/span&gt; *int) to &lt;span&gt;type&lt;/span&gt; *float32&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在示例中，我们创建了一个 &lt;code&gt;num&lt;/code&gt; 变量，值为 5，类型为 &lt;code&gt;int&lt;/code&gt;，准备干一番大事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们取了其对于的指针地址后，试图强制转换为 &lt;code&gt;*float32&lt;/code&gt;，结果失败...&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;万能的破壁 unsafe&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对刚刚的 “错误示例”，我们可以采用今天的男主角 &lt;code&gt;unsafe&lt;/code&gt; 标准库来解决。它是一个神奇的包，在官方的诠释中，有如下概述：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;围绕 Go 程序内存安全及类型的操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;很可能会是不可移植的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不受 Go 1 兼容性指南的保护。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单来讲就是，不怎么推荐你使用，因为它是 unsafe（不安全的）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是在特殊的场景下，使用了它，可以打破 Go 的类型和内存安全机制，让你获得眼前一亮的惊喜效果。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;unsafe.Pointer&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决这个问题，需要用到 &lt;code&gt;unsafe.Pointer&lt;/code&gt;。它表示任意类型且可寻址的指针值，可以在不同的指针类型之间进行转换（类似 C 语言的 void * 的用途）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其包含四种核心操作：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;任何类型的指针值都可以转换为 Pointer。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Pointer 可以转换为任何类型的指针值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;uintptr 可以转换为 Pointer。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Pointer 可以转换为 uintptr。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这一部分，重点看第一点、第二点。你再想想怎么修改 “错误的例子” 让它运行起来？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt; num := 5&lt;br/&gt; numPointer := &amp;amp;num&lt;br/&gt;&lt;br/&gt; flnum := (*float32)(unsafe.Pointer(numPointer))&lt;br/&gt; fmt.Println(flnum)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;0xc4200140b0&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上述代码中，我们小加改动。通过 &lt;code&gt;unsafe.Pointer&lt;/code&gt; 的特性对该指针变量进行了修改，就可以完成任意类型（*T）的指针转换。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是，这时还无法对变量进行操作或访问，因为不知道该指针地址指向的东西具体是什么类型。不知道是什么类型，又如何进行解析呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无法解析也就自然无法对其变更了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;unsafe.Offsetof&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上小节中，我们对普通的指针变量进行了修改。那么它是否能做更复杂一点的事呢？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Num struct{&lt;br/&gt; i string&lt;br/&gt; j int64&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt; n := Num{i: &lt;span&gt;&quot;EDDYCJY&quot;&lt;/span&gt;, j: 1}&lt;br/&gt; nPointer := unsafe.Pointer(&amp;amp;n)&lt;br/&gt;&lt;br/&gt; niPointer := (*string)(unsafe.Pointer(nPointer))&lt;br/&gt; *niPointer = &lt;span&gt;&quot;煎鱼&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; njPointer := (*int64)(unsafe.Pointer(uintptr(nPointer) + unsafe.Offsetof(n.j)))&lt;br/&gt; *njPointer = 2&lt;br/&gt;&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;n.i: %s, n.j: %d&quot;&lt;/span&gt;, n.i, n.j)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;n.i: 煎鱼, n.j: 2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在剖析这段代码做了什么事之前，我们需要了解结构体的一些基本概念：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;结构体的成员变量在内存存储上是一段连续的内存。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;结构体的初始地址就是第一个成员变量的内存地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;基于结构体的成员地址去计算偏移量。就能够得出其他成员变量的内存地址。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再回来看看上述代码，得出执行流程：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;修改 &lt;code&gt;n.i&lt;/code&gt; 值：&lt;code&gt;i&lt;/code&gt; 为第一个成员变量。因此不需要进行偏移量计算，直接取出指针后转换为 &lt;code&gt;Pointer&lt;/code&gt;，再强制转换为字符串类型的指针值即可。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;修改 &lt;code&gt;n.j&lt;/code&gt; 值：&lt;code&gt;j&lt;/code&gt; 为第二个成员变量。需要进行偏移量计算，才可以对其内存地址进行修改。在进行了偏移运算后，当前地址已经指向第二个成员变量。接着重复转换赋值即可。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;细节分析&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是，这里使用了如下方法（来完成偏移计算的目标）：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、uintptr：&lt;code&gt;uintptr&lt;/code&gt; 是 Go 的内置类型。返回无符号整数，可存储一个完整的地址。后续常用于指针运算&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; uintptr uintptr&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、unsafe.Offsetof：返回成员变量 x 在结构体当中的偏移量。更具体的讲，就是返回结构体初始位置到 x 之间的字节数。需要注意的是入参 &lt;code&gt;ArbitraryType&lt;/code&gt; 表示任意类型，并非定义的 &lt;code&gt;int&lt;/code&gt;。它实际作用是一个占位符&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func Offsetof(x ArbitraryType) uintptr&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这一部分，其实就是巧用了 &lt;code&gt;Pointer&lt;/code&gt; 的第三、第四点特性。这时候就已经可以对变量进行操作了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;糟糕的例子&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt; n := Num{i: &lt;span&gt;&quot;EDDYCJY&quot;&lt;/span&gt;, j: 1}&lt;br/&gt; nPointer := unsafe.Pointer(&amp;amp;n)&lt;br/&gt;    ...&lt;br/&gt;&lt;br/&gt; ptr := uintptr(nPointer)&lt;br/&gt; njPointer := (*int64)(unsafe.Pointer(ptr + unsafe.Offsetof(n.j)))&lt;br/&gt; ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里存在一个问题，&lt;code&gt;uintptr&lt;/code&gt; 类型是不能存储在临时变量中的。因为从 GC 的角度来看，&lt;code&gt;uintptr&lt;/code&gt; 类型的临时变量只是一个无符号整数，并不知道它是一个指针地址。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此当满足一定条件后，&lt;code&gt;ptr&lt;/code&gt; 这个临时变量是可能被垃圾回收掉的，那么接下来的内存操作，岂不成迷？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简洁回顾两个知识点，如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一是 &lt;code&gt;unsafe.Pointer&lt;/code&gt; 可以让你的变量在不同的指针类型转来转去，也就是表示为任意可寻址的指针类型。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二是 &lt;code&gt;uintptr&lt;/code&gt; 常用于与 &lt;code&gt;unsafe.Pointer&lt;/code&gt; 打配合，用于做指针运算，巧妙地很。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后还是那句，没有特殊必要的话。是不建议使用 &lt;code&gt;unsafe&lt;/code&gt; 标准库，它并不安全。虽然它常常能让你眼前一亮。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7796e32e1a60e9ef00fb231800289706</guid>
<title>信也容器云揭秘（四）：K8S 集群稳定性保障</title>
<link>https://toutiao.io/k/0kk829x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一、摘要&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;信也容器云平台基于Kubernetes和Docker开发，自2018年底上线以来，总共维护了8套k8s集群，生产接入超过850个应用，全环境实例数达到9000。作为一家金融科技公司，服务稳定性必然是逃不开的话题，本次分享就以集群部署、高可用控制器、监控智能化处理三个部分，为大家介绍容器云在稳定性保障方面的一些经验和思考。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二、集群部署&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以生产环境为例，我们有两个机房，每个机房部署了两套K8S集群，同一机房的集群节点数相等。实例通过容器云平台发布，首先根据应用类型和重要程度选择部署的机房，然后均匀分布于机房内的各个集群，同一集群的实例由kube-scheduler均匀调度到各个节点。任何一个节点或者集群挂掉，其他节点和集群上的实例依旧正常运行，不会影响服务的可用性，最大程度的保障了物理上的高可用。部署架构图如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.544256120527307&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7ianxQYSjic0oEeybicDq4elw0kCDanBLKicr8EPmVkn1hib04RcBv2h4KVhfmiaVV2ZH8mWibmZ0AqE70trck2HF6kvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1062&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为存在部分应用发单数实例的情况，这些实例不能绝对平均分配，长时间运行下来，会出现同一机房的某个集群实例数略大于另一个集群的现象，如果不加干涉，此集群实例数会越来越多，导致集群整体内存使用偏高，降低集群的稳定性，到后面更会因为集群内存不足而无法调度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于以上原因，我们开发了一个定时任务，通过Prometheus抓取集群的内存使用数据，判断出负载较低的集群，为该集群设置较高优先级。如此，下一轮的调度如果出现单数的情况，多出来的一个实例将调度到高优先级的集群。这里算法的基本逻辑为，先判断应用已有实例的集群分布情况，待发布的实例优先调度到已有实例数较少的集群，如果存在多个集群已有实例数相等，优先选择高优先级（负载低）的集群，此算法对多于两个集群的情况同样有效。生产实践下来，该措施使得各个集群的实例数和负载处在同一水平，最大化利用了集群资源，有效提高了集群稳定性。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;三、高可用控制器&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为满足不同的业务场景和发布模式，以及安全上的固定IP需求，信也容器云平台选择了以Pod为粒度进行实例部署，而没有使用常见的Deployment方式。由于K8S对单个Pod没有提供自愈机制，我们在容器云平台中使用Java自研了一个高可用控制器，容器和物理机宕机后实例会自动恢复。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在具体介绍高可用控制器之前，我们先来回顾一下就绪探针（Readiness Probe）的概念。就绪探针用于判断容器是否启动完成，即Pod的Condition是否为Ready，如果探测结果不成功，则会将Pod从Endpoint中移除，直至下次判断成功，再将Pod挂回到Endpoint上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于以上原理，我们在容器里添加了一个健康检测接口作为就绪探针，容器云平台监听Service下面的Endpoints事件，一旦发现Pod状态变为Not Ready，就会对Pod做一个删除和重新部署的操作，操作前后实例IP不变。如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7131509267431597&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7ianxQYSjic0oEeybicDq4elw0kCDanBLKic1EA7YNbxH1ZWYvYr4gicnKHOYp7BVoeCB8cichg7TecQI6vIRib0s8v4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1133&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当高可用控制器检测到Pod状态变为Ready时，则会根据实例宕机前的流量状态做上线或忽略处理。如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7033158813263525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7ianxQYSjic0oEeybicDq4elw0kCDanBLKicQbK2UaarjdMGYrrjUCLicvysQ6TXCrTm692cDtOgqzo7wsUwlmNZEww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1146&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;控制器对Endpoints采取监听和轮询两种方式，防止监听时出现异常，确保所有实例状态变更后得到处理。示例代码如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public void startEventTrigger() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Config config = new ConfigBuilder().withMasterUrl(apiServer).build();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    KubernetesClient client = new DefaultKubernetesClient(config);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    client.endpoints().watch(new Watcher&amp;lt;Endpoints&amp;gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        public void eventReceived(Action action, Endpoints endpoints) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            for (EndpointSubset endpointSubset : endpoints.getSubsets()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                for (EndpointAddress endpointAddress : endpointSubset.getNotReadyAddresses()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    processNotReadyAddress(endpoints.getMetadata().getName(), endpointAddress);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                for (EndpointAddress endpointAddress : endpointSubset.getAddresses()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    processReadyAddress(endpoints.getMetadata().getName(), endpointAddress);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        public void onClose(KubernetesClientException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            log.error(&quot;事件监听时与apiserver发生链接中断, err=&quot; + e.getMessage(), e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public void startEventPolling() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Config config = new ConfigBuilder().withMasterUrl(apiServer).build();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    KubernetesClient client = new DefaultKubernetesClient(config);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    scheduler.scheduleAtFixedRate(() -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        EndpointsList endpointsList = client.endpoints().list();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        for (Endpoints endpoints : endpointsList.getItems()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            for (EndpointSubset endpointSubset : endpoints.getSubsets()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                for (EndpointAddress endpointAddress : endpointSubset.getNotReadyAddresses()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    processNotReadyAddress(endpoints.getMetadata().getName(), endpointAddress);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                for (EndpointAddress endpointAddress : endpointSubset.getAddresses()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    processReadyAddress(endpoints.getMetadata().getName(), endpointAddress);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }, 120, 120, TimeUnit.SECONDS);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据上面的代码可以发现，我们对Not Ready事件的处理放在了processNotReadyAddress方法中，而对Ready事件的处理则放到了processReadyAddress方法里，这两个方法包含了较多的忽略逻辑，如实例有其他任务正在执行，实例处在静默期（用户刚操作完实例），应用未开启高可用，一段时间内的重复事件，等等，具体细节就不在此处展开了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是，processNotReadyAddress方法里有一段重要的特殊逻辑，由于Kubelet停止后也会产生Not Ready事件，所以我们会再次调用Pod的健康检测接口，防止因为Kubelet停止造成的误迁移。当二次检测失败之后，我们才对Pod做删除和重新部署操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这套高可用机制已在生产环境完成了多次实例、物理机宕机的自动恢复，表现良好，有效保障了集群的稳定运行。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;四、监控智能化处理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的高可用控制器应用场景主要是实例、物理机宕机，这是一种事后处理方式，或者说是一种补救行为，那么有没有一种方式能让我们事前感知到实例的异常从而在实例宕机前进行相应的处理呢？答案是有的，监控智能化处理，容器云平台联合谛听调用链监控平台、实时数据Flink计算平台共同完成了这一目标。架构如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5684430512016719&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7ianxQYSjic0oEeybicDq4elw0kCDanBLKicrbcaZrkwjBSBAN9vz5N7YerwgXu0VMw0Kq14yXLU7x8tRAbkZ7XVew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;957&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单介绍一下上图的流程，用户首先需要在谛听调用链监控平台配置应用的监控告警规则，监控的类型很多，涵盖了JVM监控、异常接口调用、主机监控、错误码、数据库指标等，规则可以配置多条，根据监控类型可以配置为堆内存使用量大于一定值、每分钟异常数超过一定值等复杂组合，同时很重要的一点，配置智能触发行为，让容器重启或者下线。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来谛听通过Cat、Prometheus等工具从应用的容器中获取实时的监控数据，并将数据写入公司的Kafka集群，由实时数据团队的Flink计算平台消费数据进行实时运算，如果运算结果满足用户配置的监控告警规则，则将一个事件写入kafka集群，消息被广播给谛听和容器云平台，谛听负责发送告警，容器云平台负责实例的重启和下线。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;容器云示例代码如下，实例的处理逻辑在processDitingEvent方法里：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public void startDitingEventListener() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Properties props = new Properties();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, brokers);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    props.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;stargate&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Consumer&amp;lt;String, String&amp;gt; ditingEventConsumer = new KafkaConsumer&amp;lt;&amp;gt;(props);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ditingEventConsumer.subscribe(Collections.singletonList(&quot;diting_alerts&quot;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ExecutorService ditingEventExecutor = Executors.newFixedThreadPool(1);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ditingEventExecutor.submit(() -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        while (true) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ConsumerRecords&amp;lt;String, String&amp;gt; records = ditingEventConsumer.poll(1000);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            for (ConsumerRecord&amp;lt;String, String&amp;gt; record : records) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                processDitingEvent(record.value());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过监控智能化处理机制，实例一旦出现异常，用户马上就能收到告警，同时实例做下线或重启操作，提前规避风险，大大提高了服务的稳定性。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;五、结语&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很高兴为大家带来这次分享，相信通过上面对集群部署、高可用控制器、监控智能化处理的介绍，大家对信也容器云平台的稳定性保障机制有了一定的了解。在这里打个小广告，信也容器云技术揭秘系列持续更新中，想了解更多容器云技术的小伙伴可以翻看一下历史文章，祝大家收货满满。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;六、回馈社区&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前我们已在github上开源了容器云平台的核心组件Stargate、Dockeryard、Pauth、Atlas以及Macvlan插件，地址如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://github.com/ppdaicorp&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家感兴趣的话可以扫描下方二维码加入微信群进行交流。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7ianxQYSjic0oEeybicDq4elw0kCDanBLKicQGOt1fFPZHj1nfOYV1ghSgrL8budoUdGYuco0eHavqJ8d84TKAAvgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;figcaption&gt;微信扫一扫进群交流&lt;/figcaption&gt;&lt;/figure&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;作者介绍&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小明，信也科技基础架构研发工程师，容器云团队成员。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>