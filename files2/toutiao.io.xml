<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f3b438075a7ca31ae49e223112d83d5c</guid>
<title>业务开发的价值</title>
<link>https://toutiao.io/k/s8mmugr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;说一下我个人的经历，其实在我刚毕业的第一家公司里，做的就是底层的中间件开发。但是做的过程中，觉得并不喜欢这种远离实际业务的感觉，所以后来换工作的时候就有意的选择了业务部门。所以，今天想讲一下为什么会做这种选择。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我为什么不做底层开发&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;首先，我想说一个很多人的认知，就是认为做底层的开发更容易学到东西，成长更快。我觉得这就是业务开发同学的臆想而已，底层开发没有大家想的那么利于学习，业务开发也没有大家想的那么不利于学习，原因我会在后边展开说。而之所以很多人有这样的认知，很大程度上是因为底层开发的招聘标准通常会高一些，所以这些人本身的学习能力和意愿就是要好一些。&lt;/p&gt;&lt;p&gt;其实底层开发的日常和业务开发也没有太大区别，都是在做需求。只是业务需求的来源是产品经理，底层需求的来源是其他开发，或者底层开发者本人的思考和想法。这里，我要说自己为什么不愿意做底层开发的第一个原因了，就是需求的来源不科学。首先，如果只做底层开发，而脱离了实际业务场景的话，对于技术的认知很可能是有偏差的，这样导致自己想做的一些事很可能是在自嗨，并没有实际应用价值。而如果从其他那些搜集需求呢，也会有类似的问题，业务开发的同学提出的意见可能也就是他自己的非常浅的想法而已，不一定经过了很完善的考虑；再者，业务同学对基础组件究竟该干什么也未必理解准确，他可能分不清楚什么事应该基础组件解决，什么事应该自己解决。&lt;/p&gt;&lt;p&gt;在这，引入了我不愿意做底层开发的第二个原因，就是职责边界不明确。这个和配合的业务方的能力强相关。有时候，自己有些事没做好，业务方也能找到办法解决；而有时，明明和自己没关系，也要被迫处理一些上层的逻辑。&lt;/p&gt;&lt;p&gt;大家也可以看到，上边两个问题都极度依赖同事的能力，所以，如果你一定要做底层开发的话，一定要去技术能力储备强的公司，这个直接关系到你的工作幸福度。公司的选择还影响一件事，就是工作内容，简单的说，就是要造轮子，还是完善开源工具，两类工作可以说是天差地别。造轮子，需要对各种底层知识很熟悉，确实是很能促进进步，这个也是“做底层有利于成长”这种想法的来源。但是这种事仅存在为数不多的几家大公司中。其他大量的完善开源工具的工作，其实和业务开发没有任何区别，只需要了解一下开源工具的边边角角，就可以完成大部分工作，既没有深度，也没有广度。我开篇的时候说底层开发并不能帮助学习，原因也就在这。&lt;/p&gt;&lt;p&gt;所以，要做底层开发，公司的选择至关重要，大，技术能力强，两个条件缺一不可。大家肯定会问，我去这样的公司做不就行了吗。话是这么说没错，但这带来的问题也就来了，这也是我不想做底层开发的第三个原因，职业选择面太窄。国内java底层做的好的也就某里某团两家而已，这两家的企业文化大家也都清楚。所以，不想去这样的公司，是不是就不干了？即使你能接受，巨大的供需量对比，也会带来疯狂的内卷，就像算法岗那样，你是否有足够的把握赢得这场内卷游戏呢？而对于业务开发来说，大厂经历只是一段必要的学习经历和自己简历上的一个亮点，当你对大厂的整个规范流程熟悉了之后，就可以自由的选择想去的公司了。&lt;/p&gt;&lt;h2/&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;业务开发的价值&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;前边讲底层开发说的太多了，下边进入正题，就是业务开发的价值。在我看来，业务开发带给我的能力提升主要在三个方面：业务知识的积累，技术广度的提升和综合能力的提升。&lt;/p&gt;&lt;p&gt;先说业务知识，业务知识其实就是对现实世界的理解。对于我个人来说，工作之余，了解一下其他行业的运转模式，首先就是一个很有意思的事情。其次，不断的去了解不同行业的行业知识，我是完全能感受的到对我认知能力的提升的。这种能力能不能变现？当然是可以的。比如去炒股，工作中的积累让我有了分析一个公司商业模式的能力，对于什么样的是好公司好股票，显然可以比一般人理解的深一些。当然，这儿扯的太远了，大家看看就好，关键是看自己的兴趣，有没有意愿去了解一些技术之外的事情。&lt;/p&gt;&lt;p&gt;接下来是技术广度。业务开发和底层开发的最大区别，其实就是底层开发对深度要求更高，而业务开发对广度要求更高。业务开发需要对各种各样的框架、中间件都有所了解，并且不能了解的太浅，也需要一定的深度，要能够理解它们能解决什么问题，又会带来什么问题，适用于什么场景；面对复杂的业务场景和复杂的系统，要能够全面理解；发生问题时，要有能力快速定位到问题在哪。这些除了需要知识的积累，也需要实际场景下经验的积累。&lt;/p&gt;&lt;p&gt;然后说一下综合能力的提升，相比底层开发，业务开发对人的通用基础能力会有更大的锻炼，比如沟通能力、分析解决问题的能力、权衡取舍的能力。这些能力可以说和技术有关，但关联也没那么大，极端的讲，即使你将来转行了，这些普适性的能力也会很有帮助。我时常在想，学着用一个开源工具，和打王者荣耀，究竟有什么区别。作为新手，参考着现成的例子做一个demo, 就相当于第一次接触这个游戏，随便打打。而随着对这个逐渐熟悉，有的人可能就成了没有感情的调包机器，而有的人就可以逐渐去了解底层的实现。就像游戏里，有的人一直浑浑噩噩，打了几千场连电刀和无尽战刃有什么区别都不知道，而有的人就会去探索伤害的数值机制。所以，我觉得大家别把程序员看成一个多特殊的职业，它和其他职业并没有什么本质的区别。大部分职业事实上都是在用不同的方式解决问题，比如律师是依靠法律，基金经理是依靠对市场和基本面的认知，程序员就是靠代码。我们在不断的工作中，锻炼的是解决问题的能力，而解决的方法并没有人要求你一定要限制在技术之内。&lt;/p&gt;&lt;p&gt;我们在业务开发中，就是要不断积累上边三个方面的能力，这样才能滚起雪球，从而从容的应对中年危机。我写这篇文章，当然也并不是要说业务开发就是好，主要还是想帮大家分析清楚业务开发和底层开发的区别，从而做出一个理性的选择。&lt;/p&gt;&lt;p&gt;如果大家有什么想法，也可以来和我沟通。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f04b761da550201e3aa4c5e747c9ef02</guid>
<title>欧洲最大云厂商遇火灾，数据安全任重道远</title>
<link>https://toutiao.io/k/ksej3if</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;blockquote&gt;&lt;p&gt;&lt;span&gt;3月10日欧洲最大云计算厂商OVH位于斯特拉斯堡的数据中心，发生历史上史无前例的灾难性事件，整个数据中心被大伙烧毁。3月11日至今仍在努力恢复中。影响包括火爆全球的视频游戏制作公司Rust、Deribit、英法波政府平台等在内的360万个网站。在云迅猛发展的今天，我们该如何应对不确定性带来的业务不可持续和数据安全灾难呢？&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;01 OVHClou&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;d火灾事&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;回顾&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3月10日 周三深夜，OVHcloud位于斯特拉斯堡的SBG2数据中心被大伙烧毁，同时SBG1数据中心也部分受损，SBG3和SBG4数据中心因受消防保护，被迫停服。360万个站点处于离线状态。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3月11日 火灾造成的破坏程度超过了想象，OVHcloud宣布下周在重新开放斯特拉斯堡的数据中心，同时将Roubaix和Gravelines数据中心的服务器交付给受影响的客户用于恢复。未来几周内，将10000新服务器用于重建斯特拉斯堡数据中心。根据Gartner分析师分析，推测此次火灾是由于UPS故障导致的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3月12日 保护和清理现场，为火灾中幸存的SBG1 SBG3 SBG4三个数据中心重新恢复电力和网络。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jmj2LkhPUr6nqyTqvJFZYIJoeOlbibB7G7dRdqSZ269NjTY2dz7EJiamcgibxT49qX1cNH4S3s13NNeoGv2AvLJOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.4408060453400504&quot; data-w=&quot;397&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;02 分析与推测&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;按照数据中心建设与运营的标准，每个设施内部都应该配置相应的消防系统，包括自动报警设备等，但此次火灾居然烧掉了整个SBG2数据中心，是否在机房消防维护及消防应急演练存在不足呢？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;日常运维工作是否存在不规范的现象？发生火灾时，值班员工做什么？（至少从OVHcloud反馈看，没有看到行动项）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不同AZ之间如果有较好的灾备能力，是否至少保障数据不丢失，也可以帮助用户在较短时间内恢复业务?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;03 灾备与业务连续性&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;定义&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;我们先看两个定义，灾难恢复(DR)与业务连续性(BCM):&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于各行各业而言，用户数据、系统数据均是企业最核心、最重要的财富，业务的稳定运行、IT系统功能正常是企业最重要的发展诉求。而这些诉求常常因为一些不可预期不可力抗“天灾人祸”变得十分困难，例如自然灾害、物理损坏、逻辑错误还是人为故障等都会导致不可用、功能异常甚至完全中断或数据丢失。我们该如何应对呢？答案就是&lt;strong&gt;DRP和BCP，永远要有PLAN B&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关键技术指标&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;进行灾备解决方案设计时，需关注灾备的两个关键技术指标：&lt;/span&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;RTO&lt;/span&gt;：RecoveryTime Object，恢复时间目标。指灾难发生后，从IT系统宕机导致业务停顿之刻开始，到IT系统恢复至可以支持各部门运作，业务恢复运营之时，此两点之间的时间段称为RTO。RTO是反映业务恢复及时性的指标，体现了企业能容忍的IT系统最长恢复时间。RTO值越小，代表容灾系统的恢复能力越强，但企业投资也越高。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;RPO&lt;/span&gt;：Recovery Point Object，恢复点目标。指灾难发生后，容灾系统进行数据恢复，恢复得来的数据所对应的时间点称为RPO。RPO是反映数据丢失量的指标，体现了企业能容忍的最大数据丢失量的指标。RPO值越小，代表企业数据丢失越少，企业损失越小。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;灾备等级&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.38046875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jmj2LkhPUr6nqyTqvJFZYIJoeOlbibB7GDGFWsrtkI8Dpia9iaTsWMGbQmcPpSLiaGgPNnMDsNUib1IicjCnE0rHkfUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《中华人民共和国国家标准 GB/T 20988-2007 信息安全技术信息系统灾难恢复规范》&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;灾备要领&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;灾备方案的核心就是围绕平衡RTO和RPO的要求，找到最佳的总体投入(TCO)和投资回报(ROI):&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;做好数据异机备份[全备/增量](首要考虑的)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;定义服务与业务SLA及容忍度&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;span&gt;解决单点故障，服务本身容错&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;span&gt;同朵云同Region内不同AZ多可用区容错(同城冷/热)&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;数据不同Region间备份&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;同朵云不同Region之间容错(异地冷/热)&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;多云之间数据备份(冷)&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;多云之间容错(冷/热，成本较高)&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;计划性验证数据备份有效及灾难恢复演练&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;人员重要岗位备份&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;最后，灾备恢复千万条，&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;数据备份第一条&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93040&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;85956&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;长按二维码加群一起聊聊~&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Jmj2LkhPUr6LEqwB0nz4zXsZylfgHu8HFCkDiaKELp0uoGcQCA69Q1OvviaQTppkRSXHELND6j2MBdCW5pGD5Gicg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93040&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;85956&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;长按二维码关注公众号&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Jmj2LkhPUr6h3CrSreKn5SViatk7B0AL5liayVdRYmSxBdcfYd82p9BSK5DIKfJoTeyA8lE0hoOIibn3Hd1YFcGXQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;*本公众号所发布内容仅代表作者观点，不代表社区立场&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a5bc86914646f6d83aee2f3a2fcf5e7f</guid>
<title>[译] BPF 可移植性和 CO-RE（一次编译，到处运行）</title>
<link>https://toutiao.io/k/o88fd7y</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post&quot;&gt;
  
  &lt;h1 class=&quot;postTitle&quot;&gt;[译] BPF 可移植性和 CO-RE（一次编译，到处运行）（Facebook，2020）&lt;/h1&gt;
  &lt;p class=&quot;meta&quot;&gt;Published at 2021-03-12 | Last Update 2021-03-12&lt;/p&gt;

  
  
  &lt;h3 id=&quot;译者序&quot;&gt;译者序&lt;/h3&gt;

&lt;p&gt;本文翻译自 2020 年 Facebook 的一篇博客：
&lt;a href=&quot;https://facebookmicrosites.github.io/bpf/blog/2020/02/19/bpf-portability-and-co-re.html&quot;&gt;BPF Portability and CO-RE&lt;/a&gt;，
作者 Andrii Nakryiko。&lt;/p&gt;

&lt;p&gt;关于 BPF CO-RE 的目标，引用文中的一段总结就是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;作为一种&lt;strong&gt;&lt;mark&gt;简单的方式&lt;/mark&gt;&lt;/strong&gt;，帮助 BPF 开发者解决&lt;strong&gt;&lt;mark&gt;简单的移植性问题&lt;/mark&gt;&lt;/strong&gt;（例如读取结构体的字段），并且&lt;/li&gt;
    &lt;li&gt;作为一种&lt;strong&gt;&lt;mark&gt;不是最优，但可用的方式&lt;/mark&gt;&lt;/strong&gt;，帮助 BPF 开发者
解决&lt;strong&gt;&lt;mark&gt;复杂的移植性问题&lt;/mark&gt;&lt;/strong&gt;（例如不兼容的数据结构改动、复杂的用户空间控制条件等）。&lt;/li&gt;
    &lt;li&gt;使开发者能遵循”一次编译、到处运行“（Compile Once – Run Everywhere）范式。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以下是译文。&lt;/p&gt;

&lt;hr/&gt;



&lt;hr/&gt;

&lt;p&gt;本文介绍 BPF 可移植性面临的问题，以及 BPF CO-RE（Compile Once – Run Everywhere）
是如何解决这些问题的。&lt;/p&gt;

&lt;h1 id=&quot;1-bpf-现状&quot;&gt;1 BPF 现状&lt;/h1&gt;

&lt;p&gt;(e)BPF 出来之后，社区一直在试图&lt;strong&gt;简化 BPF 程序的开发过程&lt;/strong&gt; —— 最好能像开发
用户空间应用程序（userspace application）一样简单直接 —— 可惜这个目标从未实现。
具体来说，在使用性（usability）方面确实有很大进步，但另一个重要方面却被忽略了
（&lt;strong&gt;大部分出于技术原因&lt;/strong&gt;）：可移植性。&lt;/p&gt;

&lt;p&gt;那么，什么是 &lt;mark&gt;”BPF 可移植性“&lt;/mark&gt;（BPF portability）？我们定义它是
&lt;strong&gt;这样一种能力&lt;/strong&gt;：编写的程序&lt;strong&gt;通过编译和内核校验之后&lt;/strong&gt;，能&lt;mark&gt;正确地&lt;/mark&gt;在
&lt;strong&gt;不同版本的内核&lt;/strong&gt;上运行 —— 而&lt;strong&gt;无需针对不同内核重新编译&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;本文首先介绍 BPF 可移植性面临的问题，然后介绍我们的&lt;strong&gt;&lt;mark&gt;解决方案：BPF CO-RE&lt;/mark&gt;&lt;/strong&gt;
（Compile Once – Run Everywhere）。接下来内容如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先讨论 BPF 可移植性问题本身，分析它所面临的挑战，以及为什么解决这些挑战如此重要；&lt;/li&gt;
  &lt;li&gt;然后从较高层次查看 BPF CO-RE 的各组件，以及它们是如何组织成一个完整方案解决这个问题的；&lt;/li&gt;
  &lt;li&gt;最后以一些例子（BPF 代码片段）结束本文，这些例子展示了 BPF CO-RE 中用户可见 API。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-bpf-可移植性面临的问题&quot;&gt;2 BPF 可移植性面临的问题&lt;/h1&gt;

&lt;p&gt;BPF 程序是&lt;strong&gt;由用户提供的&lt;/strong&gt;、经过验证之后&lt;strong&gt;&lt;mark&gt;在内核上下文中执行&lt;/mark&gt;&lt;/strong&gt;的程序。
BPF &lt;mark&gt;运行在内核内存空间&lt;/mark&gt;（kernel memory space）执行，&lt;mark&gt;能访问大量的
内核内部状态&lt;/mark&gt;（internal kernel state）。
这使得 BPF 程序功能极其强大，也是为什么它能成功地应用在大量不同场景的原因之一。&lt;/p&gt;

&lt;p&gt;但另一方面，与强大能力相伴而生的是我们如今面临的可移植性问题：&lt;mark&gt;BPF 程序
并不控制它&lt;strong&gt;运行时所在内核&lt;/strong&gt;的内存布局&lt;/mark&gt;（memory layout）。
因此，BPF 程序只能运行在&lt;strong&gt;开发和编译这些程序时&lt;/strong&gt;所在的内核。&lt;/p&gt;

&lt;p&gt;另外，&lt;strong&gt;内核类型（kernel types）和数据结构（data structures）也在不断变化&lt;/strong&gt;。
不同的内核版本中，同一结构体的同一字段所在的位置可能会不同 —— 甚至已经
移到一个新的内部结构体（inner struct）中。此外，字段还可能会被重命名、删除、
改变类型，或者（根据不同内核配置）被条件编译掉。&lt;/p&gt;

&lt;h2 id=&quot;21-可移植为什么理论上可行&quot;&gt;2.1 可移植：为什么理论上可行&lt;/h2&gt;

&lt;p&gt;以上分析可知，内核版本升级时很多东西都会发生变化，而 BPF 开发者希望能够&lt;mark&gt;
避免这些变化对 BPF 程序造成影响&lt;/mark&gt;。这听上去似乎不可能 —— 内核环境都在不断变化，
依赖内核环境执行的 BPF 程序又如何能幸免于难呢？&lt;/p&gt;

&lt;p&gt;但实际上，这是可能的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先，&lt;strong&gt;&lt;mark&gt;不是所有 BPF 程序都依赖内核内部数据结构&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

    &lt;p&gt;一个例子是 BPF 工具 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opensnoop&lt;/code&gt;，它基于 kprobes/tracepoints 跟踪进程打开的文件，
  因此&lt;strong&gt;&lt;mark&gt;只要能拦截到少数几个系统调用&lt;/mark&gt;&lt;/strong&gt;就能工作。由于系统调用接口
  提供稳定的 ABI，不会随着内核版本而变，因此这样的 BPF 程序做到可移植是问题不大的。&lt;/p&gt;

    &lt;p&gt;不幸的是，这种类型的 BPF 程序很少，而且它们能做的事情通常也是非常有限的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其次，内核 BPF 基础设施&lt;strong&gt;&lt;mark&gt;提供了一组有限的”稳定接口“&lt;/mark&gt;&lt;/strong&gt;（stable interfaces），
内核版本升级时保证稳定，因此 BPF 程序可以依赖这组接口。&lt;/p&gt;

    &lt;p&gt;实际上，底层结构体和工作机制都可能发生变化，但这组稳定接口向用户程序屏蔽了这些变动。
一个例子是网络应用中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct sk_buff&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct __sk_buff&lt;/code&gt;。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct sk_buff&lt;/code&gt; 是内核中的数据包表示，字段非常多，并且经常发生变化；&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct __sk_buff&lt;/code&gt; 是 &lt;strong&gt;&lt;mark&gt;BPF 校验器提供的一个 sk_buff 的稳定接口&lt;/mark&gt;&lt;/strong&gt;，
或者说一组属性集合。将用户程序与底层的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct sk_buff&lt;/code&gt; 解耦开来，
因此后者内存布局发生变化时，不会影响 BPF 程序。&lt;/li&gt;
      &lt;li&gt;所有对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct __sk_buff&lt;/code&gt; 字段的访问都会被&lt;strong&gt;透明地转换成对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct sk_buff&lt;/code&gt; 的访问&lt;/strong&gt;。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;很多 BPF 程序类型都有类似的机制，&lt;strong&gt;这种封装在 BPF 中称为上下文（context）&lt;/strong&gt;，触发
BPF 程序执行时，一般传递的就是这样的上下文（指针类型，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct __sk_buff
*ctx&lt;/code&gt;）。因此，如果开发 BPF 程序时使用的是这些结构体，那这样的程序大概率是可移
植的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;22-可移植挑战&quot;&gt;2.2 可移植：挑战&lt;/h2&gt;

&lt;p&gt;但是，一旦需要查看原始的内核内部数据（raw internal kernel data）—— 例如
常见的表示进程或线程的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct task_struct&lt;/code&gt;，这个结构体中有非常详细的进程信息 —— 
那你就只能靠自己了。对于 &lt;strong&gt;tracing、monitoring 和 profiling 应用&lt;/strong&gt;来说这个需求
非常常见，而这类 BPF 程序也是极其有用的。&lt;/p&gt;

&lt;h3 id=&quot;内核版本不同字段被重命名或移动位置&quot;&gt;内核版本不同：字段被重命名或移动位置&lt;/h3&gt;

&lt;p&gt;在这种情况下，&lt;strong&gt;&lt;mark&gt;如何保证读到的一定是我们期望读的那个字段呢&lt;/mark&gt;&lt;/strong&gt; —— 例如，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;原来的程序是从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct task_struct&lt;/code&gt; offset 8 地址读取数据，&lt;/li&gt;
  &lt;li&gt;由于新内核加个了 16 字节新字段，那此时正确的方式应该是从 offset 24 地址读，&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这还没完：如果这个字段被改名了呢？例如，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_struct&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs&lt;/code&gt; 字段（获取 thread-local storage 用），
在 4.6 到 4.7 内核升级时就被重命名为了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fsbase&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;内核版本相同但配置不同字段在编译时被移除compile-out&quot;&gt;内核版本相同但配置不同：字段在编译时被移除（compile out）&lt;/h3&gt;

&lt;p&gt;另一种情况：内核版本相同，但内核编译时的配置不同，导致
结构体的某些字段在编译器时被完全移除了。&lt;/p&gt;

&lt;p&gt;具体例子：某些可选的&lt;mark&gt;审计字段&lt;/mark&gt;。&lt;/p&gt;

&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;

&lt;p&gt;所有这些都意味着：依赖&lt;strong&gt;&lt;mark&gt;开发环境本地的内核头文件&lt;/mark&gt;&lt;/strong&gt;编译的 BPF 程序，
是无法直接分发到其他机器运行 —— 然后期待它们返回正确结果的。
这是由于不同版本的内核头文件所假设的内存布局是不同的。&lt;/p&gt;

&lt;h2 id=&quot;23-可移植bcc-方式&quot;&gt;2.3 可移植：BCC 方式&lt;/h2&gt;

&lt;p&gt;目前，人们可以用 &lt;a href=&quot;https://github.com/iovisor/bcc/&quot;&gt;BCC&lt;/a&gt; (BPF Compiler Collection)
解决这个问题，使用方式如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;开发：将 BPF C 源码以&lt;strong&gt;&lt;mark&gt;文本字符串&lt;/mark&gt;&lt;/strong&gt;形式，&lt;strong&gt;嵌入（Python 编写的）用户空间控制应用&lt;/strong&gt;（control application）；&lt;/li&gt;
  &lt;li&gt;部署：将控制应用以源码的形式拷贝到目标机器；&lt;/li&gt;
  &lt;li&gt;执行：在目标机器上，BCC 调用它内置的 Clang/LLVM，然后 include 本地内核头文件
  （&lt;strong&gt;需要确保本机已经安装了正确版本的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kernel-devel&lt;/code&gt; 包&lt;/strong&gt;）然后&lt;mark&gt;现场执行编译、加载、运行&lt;/mark&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这种方式能确保 BPF 程序期望的内存布局与目标机器内核的内存布局是完全一致的。&lt;/p&gt;

&lt;p&gt;对于那些&lt;strong&gt;内核版本相关的可选字段或条件编译相关的配置代码&lt;/strong&gt;，只需要在源代码中
用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#ifdef&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#else&lt;/code&gt; 做处理，BCC 内置的 Clang 能正确处理这些宏，最终剩下的就是与
当前内核相匹配的源代码。这就是 BCC 解决内核版本差异的方式。&lt;/p&gt;

&lt;h2 id=&quot;24-bcc-方式的缺点&quot;&gt;2.4 BCC 方式的缺点&lt;/h2&gt;

&lt;p&gt;BCC 方式可行，但存在一些很大的缺点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;mark&gt;Clang/LLVM 是一个庞大的库&lt;/mark&gt;&lt;/strong&gt;，在部署时除了要分发 BPF 程序，还必须一起分发这个大库。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clang/LLVM 这两个庞然大物&lt;strong&gt;非常消耗资源&lt;/strong&gt;，因此&lt;strong&gt;&lt;mark&gt;每次在目标机器上编译 BPF 代码，都将消耗大量系统资源&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;尤其在线上的生产机器，现场编译可能会使机器负载瞬间飙高，导致生产问题。&lt;/li&gt;
      &lt;li&gt;同样，如果机器本身已经负载很高，那编译一段很小的 BPF 程序可能都要几分钟。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;此外，这里有个很强的&lt;strong&gt;&lt;mark&gt;前提：内核头文件在目标机器上一定存在&lt;/mark&gt;&lt;/strong&gt;。
在大部分情况下这都不是问题，但有时可能会带来麻烦。&lt;/p&gt;

    &lt;p&gt;这对内核开发者来说也尤其头疼，因为他们经常要编译和部署一次性的内核，用于在
 开发过程中验证某些问题。而机器上没有指定的、版本正确的内核头文件包，基于 BCC
 的应用就无法正常工作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这种方式会拖慢开发和迭代速度。&lt;/p&gt;

    &lt;p&gt;BPF 程序的&lt;strong&gt;&lt;mark&gt;测试和开发过程也非常繁琐&lt;/mark&gt;&lt;/strong&gt;，很多错误只有到了运行时
（runtime）才会出现，而一旦出现就只能重启用户空间控制应用。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;总体来说，虽然 bcc 是一个很伟大的工具 —— 尤其是用于快速原型、实验和开发小工具 —— 但
当用于广泛部署生产 BPF 应用时，它存在非常明显的不足。&lt;/p&gt;

&lt;p&gt;为了更彻底地解决 BPF 移植性问题，我们&lt;strong&gt;设计了 BPF CO-RE&lt;/strong&gt;，并相信这是
&lt;mark&gt;BPF 程序的未来开发方式&lt;/mark&gt;，尤其适用于开发复杂、真实环境中的 BPF 应用。&lt;/p&gt;

&lt;h1 id=&quot;3-bpf-co-re高层机制&quot;&gt;3 BPF CO-RE：高层机制&lt;/h1&gt;

&lt;p&gt;BPF CO-RE 将它所依赖的如下软件栈和它的数据集中到了一起，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;内核&lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;用户空间 BPF 加载器库（libbpf）&lt;/mark&gt;&lt;/li&gt;
  &lt;li&gt;编译器（clang）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使得我们能以一种轻松的方式编写可移植 BPF 程序，在&lt;strong&gt;单个预编译的 BPF 程序内
（pre-compiled BPF program）处理不同内核之间的差异&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;BPF CO-RE 需要下列组件之间的紧密合作：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;BTF 类型信息：使得我们能获取&lt;mark&gt;内核、BPF 程序类型及 BPF 代码的关键信息&lt;/mark&gt;，
这也是下面其他部分的基础；&lt;/li&gt;
  &lt;li&gt;编译器（clang）：给 BPF C 代码提供了&lt;mark&gt;表达能力和记录重定位（relocation）信息的能力&lt;/mark&gt;；&lt;/li&gt;
  &lt;li&gt;BPF loader (&lt;a href=&quot;https://github.com/libbpf/libbpf&quot;&gt;libbpf&lt;/a&gt;)：将内核的 BTF 与 BPF 程序联系起来，
&lt;mark&gt;将编译之后的 BPF 代码适配到目标机器的特定内核&lt;/mark&gt;；&lt;/li&gt;
  &lt;li&gt;内核：虽然&lt;strong&gt;&lt;mark&gt;对 BPF CO-RE 完全不感知&lt;/mark&gt;&lt;/strong&gt;，但提供了一些 BPF 高级特性，使某些高级场景成为可能。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上几部分相结合，提供了一种开发可移植 BPF 程序的&lt;strong&gt;史无前例的能力&lt;/strong&gt;：这个开发
过程不仅方便（ease），而且具备很强的适配性（adaptability）和&lt;mark&gt;表达能力&lt;/mark&gt;（expressivity）。
在此之前，实现同样的可移植效果只能通过 BCC 在运行时编译 BPF C 程序，而前面也分析了，
BCC 开销非常高。&lt;/p&gt;

&lt;h2 id=&quot;31-btfbpf-type-format&quot;&gt;3.1 BTF（BPF Type Format）&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.kernel.org/doc/html/latest/bpf/btf.html&quot;&gt;BTF&lt;/a&gt; 是 BPF CO-RE 的核心之一，
它是是一种与 DWARF 类似的调试信息，但&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更通用、表达更丰富，用于描述 C 程序的所有类型信息。&lt;/li&gt;
  &lt;li&gt;更简单，空间效率更高（使用 &lt;a href=&quot;https://facebookmicrosites.github.io/bpf/blog/2018/11/14/btf-enhancement.html&quot;&gt;BTF 去重算法&lt;/a&gt;），
占用空间比 DWARF 低 100x。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如今，让 Linux &lt;strong&gt;内核在运行时（runtime）一直携带 BTF 信息&lt;/strong&gt;是可行的，
只需在编译时指定 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONFIG_DEBUG_INFO_BTF=y&lt;/code&gt;。内核的 BTF 除了被内核自身使用，
现在还用于增强 BPF 校验器自身的能力 —— 某些能力甚至超越了一年之前我们的想象力所及（例
如，已经有了直接读取内核内存的能力，不再需要通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_probe_read()&lt;/code&gt; 间接读取了）。&lt;/p&gt;

&lt;p&gt;更重要的是，内核已经将这个&lt;mark&gt;自描述的权威 BTF 信息&lt;/mark&gt;（定义结构体的精确内存布局等信息）
&lt;mark&gt;通过 sysfs 暴露出来&lt;/mark&gt;，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/kernel/btf/vmlinux&lt;/code&gt;。
下面的命令将生成一个&lt;strong&gt;&lt;mark&gt;与所有内核类型兼容的 C 头文件&lt;/mark&gt;&lt;/strong&gt;（通常称为 “&lt;strong&gt;vmlinux.h&lt;/strong&gt;“）：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bpftool btf dump file /sys/kernel/btf/vmlinux format c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里说的”所有“真的是&lt;strong&gt;”所有“&lt;/strong&gt;：&lt;mark&gt;包括那些并未通过 kernel-devel package 导出的类型&lt;/mark&gt;！&lt;/p&gt;

&lt;h2 id=&quot;32-编译器支持&quot;&gt;3.2 编译器支持&lt;/h2&gt;

&lt;p&gt;为了让 BPF 加载器（例如 libbpf）将 BPF 程序适配到目标机器所运行的内核上，
&lt;strong&gt;Clang 增加了几个新的 built-in&lt;/strong&gt;。它们的功能是导出（emit）
&lt;mark&gt;BTF relocations&lt;/mark&gt;（重定位信息），后者是对 &lt;strong&gt;BPF 程序想读取的那些信息的高层描述&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;例如，如果想访问 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_struct-&amp;gt;pid&lt;/code&gt;，那 &lt;mark&gt;clang 将做如下记录&lt;/mark&gt;：这是一个
&lt;strong&gt;位于结构体 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct task_struct&lt;/code&gt; 中、类型为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pid_t&lt;/code&gt;、名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pid&lt;/code&gt; 的字段&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;有了这种方式，即使目标内核的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_struct&lt;/code&gt; 结构体中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pid&lt;/code&gt; 字段位置已经发生了变
化（例如，由于这个字段前面加了新字段），甚至已经移到了某个内部嵌套的匿名结构体
或 union 中（在 C 语言中这种行为是完全透明的，因此内核开发者这样做时并不会有特别
的顾虑），我们&lt;mark&gt;仍然能通过名字和类型信息找到这个字段&lt;/mark&gt;。这称为
&lt;strong&gt;&lt;mark&gt;field offset relocation&lt;/mark&gt;&lt;/strong&gt;（字段偏置重定位）。&lt;/p&gt;

&lt;p&gt;除了字段重定位，其他一些字段相关的操作，例如判断 &lt;mark&gt;field existence&lt;/mark&gt;（
字段是否存在）或者 &lt;mark&gt;field size（字段长度）&lt;/mark&gt;都是支持的。
甚至对 bitfields（比特位字段，在 C 语言中是出了名的”难处理“的类型，C 社区一直在努力让它们变得可重定位）
，我们仍然能基于 BTF 信息来使它们可重定位（relocatable），并且整个过程对 BPF 开
发者透明。&lt;/p&gt;

&lt;h2 id=&quot;33-bpf-加载器libbpf&quot;&gt;3.3 BPF 加载器（libbpf）&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/libbpf/libbpf&quot;&gt;libbpf&lt;/a&gt; 作为一个 &lt;mark&gt;BPF 程序加载器&lt;/mark&gt;（loader），
处理前面介绍的内核 BTF 和 clang 重定位信息。它&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;读取编译之后得到的 BPF ELF 目标文件，&lt;/li&gt;
  &lt;li&gt;进行一些必要的后处理，&lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;设置各种内核对象&lt;/mark&gt;（bpf maps、bpf 程序等），然后&lt;/li&gt;
  &lt;li&gt;将 BPF 程序加载到内核，然后触发校验器的验证过程。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;mark&gt;libbpf 知道如何对 BPF 程序进行裁剪，以适配到目标机器的内核上&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;它会查看 BPF 程序记录的 BTF 和重定位信息，然后&lt;/li&gt;
  &lt;li&gt;拿这些信息跟当前内核提供的 BTF 信息相匹配。然后&lt;/li&gt;
  &lt;li&gt;解析和匹配所有的类型和字段，更新所有必要的 offsets 和其他可重定位数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最终确保 BPF 程序在这个特定的内核上是能正确工作的。&lt;/p&gt;

&lt;p&gt;如果一切顺利，你（作为 BPF 应用开发者）将得到一个针对目标机器”定制化裁剪“的 BPF
程序，就像这个程序是专门针对这个内核编译的一样。但这种工作方式无需将 clang 与
BPF 一起打包部署，也没有在目标机器上运行时编译（runtime）的开销。&lt;/p&gt;

&lt;h2 id=&quot;34-内核&quot;&gt;3.4 内核&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;mark&gt;内核无需太多改动就能支持 BPF CO-RE&lt;/mark&gt;&lt;/strong&gt;，这一点可能令很多人感到惊讶。
由于设计合理，因此&lt;strong&gt;对于内核来说，libbpf 处理之后的 BPF 程序，与
其他任何合法的 BPF 程序是一样的&lt;/strong&gt; —— 与在这台机器上依赖最新内核头文件编译出的
BPF 程序并无区别。这意味要 &lt;mark&gt;BPF CO-RE 并不依赖最新的内核功能&lt;/mark&gt;，因此
应用范围更广，适配速度更快。&lt;/p&gt;

&lt;p&gt;某些高级场景可能会需要更新的内核，但这些场景很少。接下来介绍 BPF CO-RE 用户侧机制
时会讨论到这样的场景。&lt;/p&gt;

&lt;h1 id=&quot;4-bpf-co-re用户侧经验&quot;&gt;4 BPF CO-RE：用户侧经验&lt;/h1&gt;

&lt;p&gt;接下来看几个真实世界中 BPF CO-RE 的典型场景，以及它是如何解决面临的一些问题的。
我们将看到，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一些可移植性问题（例如，兼容 struct 内存布局差异）能够处理地非常透明和自然，&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;而另一些则需要通过显式处理的，具体包括，&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; 条件判断（&lt;strong&gt;而不是 BCC 中的那种条件编译 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#ifdef&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#else&lt;/code&gt;&lt;/strong&gt;）。&lt;/li&gt;
      &lt;li&gt;BPF CO-RE 提供的其他一些额外机制。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;41-摆脱内核头文件依赖&quot;&gt;4.1 摆脱内核头文件依赖&lt;/h2&gt;

&lt;p&gt;内核 BTF 信息除了用来做字段重定位之外，还可以用来&lt;mark&gt;生成一个大的头文件&lt;/mark&gt;（”&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmlinux.h&lt;/code&gt;“），
这个头文件中&lt;strong&gt;&lt;mark&gt;包含了所有的内部内核类型，从而避免了依赖系统层面的内核头文件&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpftool&lt;/code&gt; 获得 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmlinux.h&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bpftool btf dump file /sys/kernel/btf/vmlinux format c &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; vmlinux.h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmlinux.h&lt;/code&gt;，就&lt;strong&gt;无需再像通常的 BPF 程序那样 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include &amp;lt;linux/sched.h&amp;gt;&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include &amp;lt;linux/fs.h&amp;gt;&lt;/code&gt; 等等头文件&lt;/strong&gt;，
现在只需要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include &quot;vmlinux.h&quot;&lt;/code&gt;，&lt;strong&gt;&lt;mark&gt;也不用再安装 kernel-devel &lt;/mark&gt;&lt;/strong&gt;了。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmlinux.h&lt;/code&gt; 包含了&lt;strong&gt;所有的内核类型&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作为 UAPI 的一部分暴露的 API&lt;/li&gt;
  &lt;li&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kernel-devel&lt;/code&gt; 暴露的内部类型&lt;/li&gt;
  &lt;li&gt;其他一些&lt;strong&gt;通过任何其他方式都无法获取的内部内核类型&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不幸的是，&lt;mark&gt;BPF（以及 DWARF）并不记录 &lt;code&gt;#define&lt;/code&gt; 宏，因此某些常用
的宏可能在 vmlinux.h 中是缺失的&lt;/mark&gt;。但这些没有记录的宏中
，最常见的一些已经在 &lt;a href=&quot;https://github.com/libbpf/libbpf/blob/master/src/bpf_helpers.h&quot;&gt;bpf_helpers.h&lt;/a&gt;
（libbpf 提供的内核侧”库“）提供了。&lt;/p&gt;

&lt;h2 id=&quot;42-读取内核结构体字段&quot;&gt;4.2 读取内核结构体字段&lt;/h2&gt;

&lt;p&gt;最常见和最典型的场景就是从某些内核结构体中读取一个字段。&lt;/p&gt;

&lt;h3 id=&quot;421-例子读取-task_struct-pid-字段&quot;&gt;4.2.1 例子：读取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_struct-&amp;gt;pid&lt;/code&gt; 字段&lt;/h3&gt;

&lt;p&gt;假设我们想&lt;strong&gt;读取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_struct&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pid&lt;/code&gt; 字段&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;方式一bcc可移植&quot;&gt;方式一：BCC（可移植）&lt;/h4&gt;

&lt;p&gt;用 BCC 实现，代码很简单：&lt;/p&gt;



&lt;p&gt;BCC 有强大的&lt;mark&gt;代码重写（rewrite）&lt;/mark&gt;能力，能自动将以上代码&lt;strong&gt;&lt;mark&gt;转换成一次 bpf_probe_read() 调用&lt;/mark&gt;&lt;/strong&gt;
（但&lt;strong&gt;有时重写之后的代码并不能正确&lt;/strong&gt;，具体取决于表达式的复杂程度）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libbpf&lt;/code&gt; 没有 BCC 的代码重写魔法（code-rewriting magic），但提供了几种其他方式来
实现同样的目的。&lt;/p&gt;

&lt;h4 id=&quot;方式二libbpf--bpf_prog_type_tracing不可移植&quot;&gt;方式二：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libbpf&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_PROG_TYPE_TRACING&lt;/code&gt;（不可移植）&lt;/h4&gt;

&lt;p&gt;如果使用的是最近新加的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BTF_PROG_TYPE_TRACING&lt;/code&gt; 类型 BPF 程序，那校验器已经足够智
能了，能&lt;mark&gt;原生地理解和记录 BTF 类型、跟踪指针，直接（安全地）读取内核内存
&lt;/mark&gt;，&lt;/p&gt;



&lt;p&gt;从而&lt;strong&gt;避免了调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_probe_read()&lt;/code&gt;&lt;/strong&gt;，格式和语法更为自然，而且&lt;strong&gt;&lt;mark&gt;无需编译器重写&lt;/mark&gt;&lt;/strong&gt;（rewrite）。
但此时，这段代码还不是可移植的。&lt;/p&gt;

&lt;h4 id=&quot;方式三bpf_prog_type_tracing--co-re可移植&quot;&gt;方式三：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_PROG_TYPE_TRACING&lt;/code&gt; + CO-RE（可移植）&lt;/h4&gt;

&lt;p&gt;要将以上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_PROG_TYPE_TRACING&lt;/code&gt; 代码其变成可移植的，只需将待访问字段 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task-&amp;gt;pid&lt;/code&gt;
放到编译器内置的一个名为
&lt;mark&gt;&lt;code&gt;__builtin_preserve_access_index()&lt;/code&gt;&lt;/mark&gt; 的宏中：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__builtin_preserve_access_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这就是全部工作了：这样的程序&lt;mark&gt;在不同内核版本之间是可移植的&lt;/mark&gt;。&lt;/p&gt;

&lt;h4 id=&quot;方式四libbpf--co-re-bpf_core_read可移植&quot;&gt;方式四：libbpf + CO-RE &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_core_read()&lt;/code&gt;（可移植）&lt;/h4&gt;

&lt;p&gt;如果使用的内核版本还没支持 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_PROG_TYPE_TRACING&lt;/code&gt;，就必须显式地使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_probe_read()&lt;/code&gt;
来读取字段。&lt;/p&gt;

&lt;p&gt;Non-CO-RE libbpf 方式：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bpf_probe_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有了 CO-RE+libbpf，我们有&lt;mark&gt;两种方式实现这个目的&lt;/mark&gt;。&lt;/p&gt;

&lt;p&gt;第一种，直接将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_probe_read()&lt;/code&gt; 替换成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_core_read()&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bpf_core_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_core_read()&lt;/code&gt; 是一个很简单的宏，直接展开成以下形式：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;bpf_probe_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__builtin_preserve_access_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到，第三个参数（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;task-&amp;gt;pid&lt;/code&gt;）放到了前面已经介绍过的编译器 built-int 中，
这样 clang 就能记录该字段的重定位信息，实现可移植。&lt;/p&gt;

&lt;p&gt;第二种方式是使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_CORE_READ()&lt;/code&gt; 宏，我们通过下面的例子来看。&lt;/p&gt;

&lt;h3 id=&quot;422-例子读取-task-mm-exe_file-f_inode-i_ino-字段&quot;&gt;4.2.2 例子：读取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task-&amp;gt;mm-&amp;gt;exe_file-&amp;gt;f_inode-&amp;gt;i_ino&lt;/code&gt; 字段&lt;/h3&gt;

&lt;p&gt;这个字段表示的是当前进程的可执行文件的 inode。
来看一下访问嵌套层次如此深的结构体字段时，面临哪些问题。&lt;/p&gt;

&lt;h4 id=&quot;方式一bcc可移植-1&quot;&gt;方式一：BCC（可移植）&lt;/h4&gt;

&lt;p&gt;用 BCC 实现的话可能是下面这样：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_inode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ino&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;BCC 会对这个表达式进行重写（rewrite），&lt;mark&gt;转换成 4 次 bpf_probe_read()/bpf_core_read() 调用&lt;/mark&gt;，
并且每个中间指针都需要一个&lt;mark&gt;额外的临时变量&lt;/mark&gt;来存储。&lt;/p&gt;

&lt;h4 id=&quot;方式二bpf-co-re可移植&quot;&gt;方式二：BPF CO-RE（可移植）&lt;/h4&gt;

&lt;p&gt;下面是 BPF CO-RE 的方式，仍然很简洁，但无需 BCC 的代码重写（code-rewriting magic）：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_CORE_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exe_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ino&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另外一个变种是：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BPF_CORE_READ_INTO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exe_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ino&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;423-其他与字段读取相关的-co-re-宏&quot;&gt;4.2.3 其他与字段读取相关的 CO-RE 宏&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_core_read_str()&lt;/code&gt;：可以直接替换 Non-CO-RE 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_probe_read_str()&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_CORE_READ_STR_INTO()&lt;/code&gt;：与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_CORE_READ_INTO()&lt;/code&gt; 类似，但会对最后一个字段执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_probe_read_str()&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_core_field_exists()&lt;/code&gt;：判断字段是否存在，&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_core_field_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_CORE_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_core_field_size()&lt;/code&gt;：判断字段大小，同一字段在不同版本的内核中大小可能会发生变化，&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comm_sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_core_field_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* will set comm_sz to 16 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_CORE_READ_BITFIELD()&lt;/code&gt;：通过&lt;strong&gt;直接内存读取&lt;/strong&gt;（direct memory read）方式，读取比特位字段&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_CORE_READ_BITFIELD_PROBED()&lt;/code&gt;：底层会调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_probe_read()&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;
    
  &lt;span class=&quot;cm&quot;&gt;/* with direct reads */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_cwnd_limited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_CORE_READ_BITFIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_cwnd_limited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
  &lt;span class=&quot;cm&quot;&gt;/* with bpf_probe_read()-based reads */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_cwnd_limited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BPF_CORE_READ_BITFIELD_PROBED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_cwnd_limited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_cwnd_limited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;43-处理内核版本和配置差异&quot;&gt;4.3 处理内核版本和配置差异&lt;/h2&gt;

&lt;p&gt;某些情况下，BPF 程序必须处理不同内核版本之间&lt;strong&gt;常用内核结构体的非细微差异&lt;/strong&gt;。例如，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;字段&lt;mark&gt;被重命名了&lt;/mark&gt;：对依赖这个字段的调用方来说，这其实变成了一个新字段（但语义没变）。&lt;/li&gt;
  &lt;li&gt;字段名字没变，但&lt;mark&gt;表示的意思变了&lt;/mark&gt;：例如，从 4.6 之后的某个内核版本开始，
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_struct&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utime&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stime&lt;/code&gt; 字段，原来单位是 jiffies，现在变成了 nanoseconds，因此
调用方必须自己转换单位。&lt;/li&gt;
  &lt;li&gt;需要从内核提取的某些数据是&lt;strong&gt;与内核配置有直接关系&lt;/strong&gt;，某些内核在编译时并&lt;mark&gt;没有将相关代码编译进来&lt;/mark&gt;。&lt;/li&gt;
  &lt;li&gt;其他一些无法用单个、通用的类型定义来适用于所有内核版本的场景。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于这些场景，BPF CO-RE 提供了两种互补的解决方式；&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;libbpf 提供的 &lt;mark&gt;extern Kconfig 变量&lt;/mark&gt;&lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;struct flavors&lt;/mark&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;libbpf-提供的-externs-kconfig-全局变量&quot;&gt;libbpf 提供的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;externs&lt;/code&gt; Kconfig 全局变量&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;系统中已经有一些”知名的“变量，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LINUX_KERNEL_VERSION&lt;/code&gt;，表示当前内核的版本。
BPF 程序能&lt;mark&gt;用 extern 关键字声明这些变量&lt;/mark&gt;。&lt;/li&gt;
  &lt;li&gt;另外，BPF 还能用 extern 的方式声明 &lt;mark&gt;Kconfig 的某些 key 的名字&lt;/mark&gt;（例如
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONFIG_HZ&lt;/code&gt;，表示内核的 HZ 数）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下来的事情交给 libbpf，它会将这些变量&lt;mark&gt;分别匹配到系统中相应的值&lt;/mark&gt;（都是常量），
并保证这些 extern 变量&lt;mark&gt;与全局变量的效果是一样的&lt;/mark&gt;。&lt;/p&gt;

&lt;p&gt;此外，由于这些 extern ”变量“都是常量，因此 &lt;strong&gt;BPF 校验器&lt;/strong&gt;能用它们来做一些
&lt;mark&gt;高级控制流分析和死代码消除&lt;/mark&gt;。&lt;/p&gt;

&lt;p&gt;下面是个例子，如何用 BPF CO-RE 来提取线程的 CPU user time：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_KERNEL_VERSION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__kconfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONFIG_HZ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__kconfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utime_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LINUX_KERNEL_VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERNEL_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;utime_ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_CORE_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* convert jiffies to nanoseconds */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;utime_ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_CORE_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000000UL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONFIG_HZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;struct-flavors&quot;&gt;struct flavors&lt;/h3&gt;

&lt;p&gt;有些场景中，&lt;strong&gt;不同版本的内核中有不兼容的类型&lt;/strong&gt;，无法用单个通用结构体来为所有内核
编译同一个 BPF 程序。struct flavor 在这种情况下可以派上用场。&lt;/p&gt;

&lt;p&gt;下面是一个例子，提取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fsbase&lt;/code&gt;（前面提到过，字段名字在内核版本升级时改了）来
做一些 thread-local 的数据处理：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* up-to-date thread_struct definition matching newer kernels */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsbase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* legacy thread_struct definition for &amp;lt;= 4.6 kernels */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_struct___v46&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* ___v46 is a &quot;flavor&quot; part */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_KERNEL_VERSION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__kconfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsbase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LINUX_KERNEL_VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERNEL_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fsbase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_CORE_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_struct___v46&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fsbase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_CORE_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsbase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个例子中，对于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=4.6&lt;/code&gt; 的内核，我们将原来的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_struct&lt;/code&gt; 定义为了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct thread_struct___v46&lt;/code&gt;。
&lt;mark&gt;双下划线及其之后的部分&lt;/mark&gt;，即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;___v46&lt;/code&gt;，&lt;strong&gt;&lt;mark&gt;称为这个 struct 的 “flavor”&lt;/mark&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;mark&gt;flavor 部分会被 libbpf 忽略&lt;/mark&gt;，这意味着&lt;strong&gt;在目标机器上执行字段重定位时，
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct thread_struct__v46&lt;/code&gt; 匹配的仍然是真正的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct thread_struct&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;这种方式使得我们能在单个 C 程序内，为同一个内核类型定义不同的（而且是不兼容的）
类型，然后在运行时（runtime）取出最合适的一个，这就是用
&lt;mark&gt;type cast to a struct flavor&lt;/mark&gt; 来提取字段的方式。&lt;/p&gt;

&lt;p&gt;没有 struct flavor 的话，就无法真正实现像上面那样“编译一次”，然后就能在不同内核
上都能运行的 BPF 程序 —— 而只能用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#ifdef&lt;/code&gt; 来控制源代码，编译成两个独立的 BPF
程序变种，在运行时（runtime）由控制应用根据所在机器的内核版本选择其中某个变种。
所有这些都添加了不必要的复杂性和痛苦。
相比之下，&lt;strong&gt;以上 BPF CO-RE 方式虽然不是透明的&lt;/strong&gt;（上面的代码中也包含了内核
版本相关的逻辑），但允许用熟悉的 C 代码结构解决即便是这样的高级场景的问题。&lt;/p&gt;

&lt;h2 id=&quot;44-根据用户提供的配置修改程序行为&quot;&gt;4.4 根据用户提供的配置修改程序行为&lt;/h2&gt;

&lt;p&gt;BPF 程序&lt;strong&gt;知道内核版本和配置信息&lt;/strong&gt;，有时还不足以判断如何 —— 以及以何种方式 —— 从该版本的内核获取数据。
在这些场景中，&lt;mark&gt;用户空间控制应用&lt;/mark&gt;（control application）可能是唯一知道
究竟需要做哪些事情，以及需要启用或禁用哪些特性的主体。
这通常是&lt;strong&gt;在用户空间和 BPF 程序之间&lt;/strong&gt;&lt;mark&gt;通过某种形式的配置数据来通信&lt;/mark&gt;的。&lt;/p&gt;

&lt;h3 id=&quot;bpf-map-方式&quot;&gt;BPF map 方式&lt;/h3&gt;

&lt;p&gt;要实现这种目的，一种不依赖 BPF CO-RE 的方式是：&lt;mark&gt;将 BPF map 作为一个存储配置
数据的地方&lt;/mark&gt;。BPF 程序&lt;strong&gt;从 map 中提取配置信息，然后基于这些信息改变它的控制流&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;但这种方式有几个主要的缺点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;BPF 程序每次执行 &lt;mark&gt;map 查询操作，都需要运行时开销&lt;/mark&gt;（runtime overhead）。&lt;/p&gt;

    &lt;p&gt;多次查询累积起来，开销就会比较比较明显，尤其在一些高性能 BPF 应用的场景。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;mark&gt;配置内容&lt;/mark&gt;（config value），虽然在 &lt;strong&gt;BPF 程序启动之后就是不可变和只读&lt;/strong&gt;
  （immutable and read-only）的了，但 &lt;mark&gt;BPF 校验器在校验时扔把它们当作未知的黑盒值&lt;/mark&gt;。&lt;/p&gt;

    &lt;p&gt;这意味着校验器&lt;mark&gt;无法消除死代码，也无法执行其他高级代码分析&lt;/mark&gt;。进一步，
 这意味着我们无法将代码逻辑放到 map 中，例如，能处理不同内核版本差异的 BPF 代
 码，因为 map 中的内容对校验器都是黑盒，因此校验器对它们是不信任的 ——
 即使用户配置信息是安全的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;只读的全局数据方式&quot;&gt;只读的全局数据方式&lt;/h3&gt;

&lt;p&gt;这种（确实复杂的）场景的&lt;mark&gt;解决方案：使用只读的全局数据&lt;/mark&gt;（read-only global data）。
这些数据是在 &lt;strong&gt;BPF 程序加载到内核之前，由控制应用设置&lt;/strong&gt;的。&lt;/p&gt;



&lt;p&gt;因此，针对上面那个例子，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;某些老内核的 BPF 校验器就能推断出，例如，代码中某个未知的 BPF helper 不可能会用到，接下来就可以将相关代码直接移除。&lt;/li&gt;
  &lt;li&gt;而对于新内核来说，应用提供的配置（application-provided configuration）会所有不
同，因此 BPF 程序就能用到功能更强大的 BPF helper，而且这个逻辑能成功通过 BPF 校验器的验证。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面的 BPF 代码例子展示了这种用法：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* global read-only variables, set up by control app */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_fancy_helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fallback_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_fancy_helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_fancy_helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_default_helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fallback_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从用户空间方面，通过 BPF skeleton 可以很方便地做这种配置。BPF skeleton 的讨论不在
本文讨论范围内，使用它来简化 BPF 应用的例子，可参考内核源码中的
&lt;a href=&quot;https://github.com/torvalds/linux/tree/master/tools/bpf/runqslower&quot;&gt;runqslower tool&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&quot;5-总结&quot;&gt;5 总结&lt;/h1&gt;

&lt;p&gt;BPF CO-RE 的目标是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作为一种&lt;strong&gt;&lt;mark&gt;简单的方式&lt;/mark&gt;&lt;/strong&gt;帮助 BPF 开发者解决&lt;strong&gt;&lt;mark&gt;简单的移植性问题&lt;/mark&gt;&lt;/strong&gt;（例如读取结构体的字段），并且&lt;/li&gt;
  &lt;li&gt;作为一种&lt;strong&gt;&lt;mark&gt;仍然可行（不是最优，但可容忍）的方式&lt;/mark&gt;&lt;/strong&gt;
解决&lt;strong&gt;&lt;mark&gt;复杂的移植性问题&lt;/mark&gt;&lt;/strong&gt;（例如不兼容的数据结构改动、复杂的用户空间控制条件等）。&lt;/li&gt;
  &lt;li&gt;使得开发者能遵循”一次编译、到处运行“（Compile Once – Run Everywhere）范式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是通过几个 BPF CO-RE 模块的组合实现的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmlinux.h&lt;/code&gt; &lt;mark&gt;消除了对内核头文件的依赖&lt;/mark&gt;；&lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;字段重定位信息&lt;/mark&gt;（字段偏置、字段是否存在、字段大小等等）使得&lt;mark&gt;从内核提取数据这个过程变得可移植&lt;/mark&gt;；&lt;/li&gt;
  &lt;li&gt;libbpf 提供的 &lt;mark&gt;Kconfig extern 变量&lt;/mark&gt;允许 BPF 程序适应不同的内核版本 —— 以及配置相关的差异；&lt;/li&gt;
  &lt;li&gt;当其他方式都失效时，应用提供的&lt;mark&gt;只读配置和 struct flavor 最终救场&lt;/mark&gt;，能解决
任何需要复杂处理的场景。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;要成功地编写、部署和维护可移植 BPF 程序，并不是必须用到所有这些 CO-RE 特性&lt;/strong&gt;。
只需选择若干，用最简单的方式解决你的问题。&lt;/p&gt;

&lt;p&gt;BPF CO-RE 使我们回到了熟悉、自然的工作流程：将 BPF C 源码编译成二进制，然后将
二进制文件分发到目标机器进行部署和运行 —— 
无需再随着应用一起分发重量级的编译器库、无需消耗宝贵的运行时资源做运行时编
译（runtime compilation），也无需等到运行之前才能捕捉一些细微的编译时错误（
compilation errors in runtime）了。&lt;/p&gt;

&lt;h1 id=&quot;参考资料&quot;&gt;参考资料&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;BPF CO-RE presentation from LSF/MM2019 conference: &lt;a href=&quot;http://vger.kernel.org/bpfconf2019.html#session-2&quot;&gt;summary&lt;/a&gt;, &lt;a href=&quot;http://vger.kernel.org/bpfconf2019_talks/bpf-core.pdf&quot;&gt;slides&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Arnaldo Carvalho de Melo’s presentation &lt;a href=&quot;http://vger.kernel.org/~acme/bpf/devconf.cz-2020-BPF-The-Status-of-BTF-producers-consumers/#/29&quot;&gt;“BPF: The Status of BTF”&lt;/a&gt; dives deep into BPF CO-RE and dissects the runqslower tool quite nicely.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebookmicrosites.github.io/bpf/blog/2018/11/14/btf-enhancement.html&quot;&gt;BTF deduplication algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


  
  
&lt;/div&gt;


          

      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2644a83c8487ae856a8f4ecf1f33c526</guid>
<title>如何构建你的沟通场域</title>
<link>https://toutiao.io/k/dujfhzb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是我的第41篇原创&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.42745709828393136&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjnjl429MticTHbINBdkJWC4tN4ObUZFdwPGSJBXPn8O21EPyzxqMOYnV6qgyOzb2oSKR2rHlw9JcAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;641&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很荣幸，昨天作为特邀嘉宾给奈学教育的架构师们分享一些跨部门沟通协调心得，全部是实操干货，每一个动作都能帮助你解决实际问题。一共50页ppt，咱开始吧！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;OK，let&#x27;s Go！&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tdfvydZOlEwKmMy7EocZgz0sV7ECgu11E8bTH8zproIBFKkibPHNZH5g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tS2EPczbUZ7DXNnfCVGxDic0KBMYy7kZyGpCm6aIcF2zPLppZFvxnpmw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正式自我介绍一下：我叫彭文华，数据领域从业15年，5年纯技术，10年管理+技术，擅长BI、数仓、商业数据分析、大数据、团队管理、项目管理、组织架构等领域。这个公众号是我个人运营的，目的是为了帮助朋友圈里的你。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tqTBWKYLGD4ia3I36o9cVQWBDlWxKqtnWkicPTI6lh2govskp3MMpiaLug/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整个PPT分为三个阶段：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;先让大家带入到场景中；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;然后带着场景中的问题，去了解沟通的基础理论及各种工具，顺便解决上述问题；&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;最后，升维，帮助大家架构自己的沟通场域，应对一切挑战。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tKJ5xqFCBEOMPF5JlwibxxT6iadBkP8iataibewlpmZHqvfh9anWjV9GXLQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4to7DR43KicCmG4e54LsX847hrkaDrhZndCDJ2VbQqictgrIoS5YiaxwBAw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tnomMD9LhsyruPxoWqCB39fXvUialVvCJT0x6u38Ficz1AJ6xia5aOYic3A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tJIeRrXn9WsO8poLH0iaSAo0goEWKAeQknsMjpWYD2QU1YhTwkygFrvQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tebwyT59LxX3uofAUkBOWjE81224RFic8wibtrib8tTSgSg5YbGBPG5ETw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4ttcmQWAibVibXGvyRG8l82maRQAlYWxOJaxwcYfBoqQ1TOwJgA9UjYAlA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;大多数人的典型应对都是退缩，有部分展现出侵略意图的，基本上都会被当成团队中的刺头。那些积极应对的人，活的大多都很累。这就是职场的现状。&lt;/p&gt;&lt;p&gt;从根因上分析，有三层原因：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4ttXg8w35mrwB1Ku1eow4Zib5ToI1iaEEGH9P3IVahPhEB7xWgqGia6Fl5Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;组织层面的问题，自然要从组织层面解决。我们身为组织中的一员，无法推动组织变革，但是可以在自己的领域进行好局部组织优化。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tfoIaKNJ2m3wz5IPPWTWR5ia4U7f5afialA995S7H9X4OnGIFyrpoj8rg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;意识层面的问题由来已久，非一时一日之功。我们同样不能改变整个组织的文化意识形态，但是我们可以影响身边的人。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tw8qCkIw9h5uNwwHczuyRyN3ORGkCW2sO5HWwWRXAdVy6vs2ASDvQyA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;人的层面最难优化，因为很多人根本没意识到问题。我们只能先优化自己，再影响他人。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tXAJV5Cs3rwAD422TOJcjaSuJ7Uj1DPp6dicNMgBCSQPbkTqvrLoJmCA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4t2tqBwQGy6EVvjwVkpgGHdNmyxGtUDpjsSS0eW9APoqa6Yk0XiaVUswQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;沟通三要素：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4t1UIY08ibibvBh3BhVBWfq0tT1rlmPkgMy37v4w5KnHZXaibmzFRd6iaj3A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4txApiclIeibrp5dZKbHktQXFuiafd75qkaHISXsuZTgmzODkm329Ng5dHA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;建议搜索“提问的智慧”，你会回来感谢我的。&lt;/p&gt;&lt;p&gt;好的问题实际上代表了你的思维层次，坏的问题一句话就能明白对方压根没懂你的意思。&lt;/p&gt;&lt;p&gt;与人讨论、聊天的时候要多问开放性的问题，少问封闭性的问题，否则你就是群聊冷场之王。&lt;/p&gt;&lt;p&gt;与人确认需求的时候，要多问封闭性的问题，少问开放性的问题，否则就没完没了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tErRtgJWFRicPoEqf6bFc8biaK1ZyRNTjHRKKdtPVU5xDztPE4YWUQmNA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;中国人研究人与人之间的关系已经到了炉火纯青的地步，之所以放卡耐基，是因为中国相关研究太多了，一页ppt放不下。推荐读曾国藩、各类官场小说，甚至甄嬛传都ok，从关系的角度上，你能分解出非常有价值的内容。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tgjurmxaAyPv86SwPoekB7AlneYT7cogSNkWwKhRfTyVOQzYUjiaNichg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;部门墙是培训老师最喜欢提的概念，但是大多数培训老师提出很多方式方法都没法落地，不够接地气。很多方法都不是扔给你一个模板就能解决的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4thJV2SKqNwXhJxTPDVibicibxLB3t4XXadbashib2LRz3KTz2bV21XmvcRQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;正式沟通大部分时间是用来保护自己的。例如：&lt;/p&gt;&lt;p&gt;各位接到的所有需求，请以邮件为准。项目管理软件也不行，因为很多项目管理软件中的需求变化了并不会自动通知你。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tKJDEqEYAppqBbysFVFAD9XFp1uNb3XlAaMCbDDO6RNLqT3QiaYVpk1A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;非正式沟通好处很多。建议平时多聊天。&lt;/p&gt;&lt;p&gt;正式沟通和非正式沟通要轮流用，以需求沟通为例：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;前期：非正式沟通，先做一轮简单沟通，双方达成共识，这件事情可以做，难度有多大，需要多长时间；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;中期：正式沟通，以会议纪要、邮件工单等形式正式递交需求；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;后期：非正式沟通，&lt;span&gt;在推进过程中&lt;/span&gt;&lt;span/&gt;时刻保持密切接触，通告推进进度、问题，防止出现偏差。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tK1yv7twl1fGpQh3rOeARxicQZFjcJksbpvtBwGlsgbrFu8YQSRiczRsQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;遇到问题无非是情、理、法。&lt;/p&gt;&lt;p&gt;当你的两个同事遇到意见不合时，你要时刻记得脑袋上戴着一顶法官假发，你要为你的职责负责。此时你需要摒弃情面，只讲法理。而在其他时间，要多戴“情”帽，平时攒人品。&lt;/p&gt;&lt;p&gt;在工厂流水线上，工头必须严守规章制度，才能让整条线高效运转，一旦开了徇私的口，整条流水线上的所有人收入将会严重降低。&lt;/p&gt;&lt;p&gt;但是在下了流水线之后，工头会与工人们打成一片，方便开展后续工作。&lt;/p&gt;&lt;p&gt;是的，我们将会逐渐活成我们讨厌的那种Poker Face，但是这些方法会让我们远离是非对错的痛苦。 &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4t5YTsokbIVia6TKeHvLh26Ec9bPp2mOe9XE93oxtAswtsnibLXJpcUqBg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;远离无效会议的方法就是有标准的会议流程。流程会增加管理成本，但是会提升N倍的沟通效率，降低N倍沟通成本。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tM2zO7G6h7sR7ZERz7EdHMyicIWbpqXsrcC6ibsFMrAMd6XIBdib4nnKvw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tRb7Z5LwF06SWz3h84mlPPakNasvr6hAU6bjcnwo0pAD0XsBia6FonfQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;建议大家看《Lie To Me》，第一季开始那集就ok，非常精彩。&lt;/p&gt;&lt;p&gt;沟通中有一个7、38、55原则，你在与人当面沟通的时候，对方接受到你的信息中，各种渠道占比为：&lt;/p&gt;&lt;p&gt;我们与人沟通时，本来就是一个损耗非常大的信息传输过程。我们把N维的思维，用一维的语言描述出来，对方再用填充、想象为N维的思维。这种信息传输效率低到令人发指。&lt;/p&gt;&lt;p&gt;幸好我们还有表情、动作可以获取到更多信息。一旦你开启微表情的阅读，就相当于开启了第三只眼，能捕捉到更多信息。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tn3jlUZ8Um8yicSzj1XPHFOCazxfib7Ao4CBtBCgCO9TRiaQsfkiacLkOfw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;还是一样，咨询师、外部培训老师总是给一些说起来正确，但是我们无法落实的意见，简称“正确的废话”。那我们如何解决这些实际问题呢？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4t4hZEV6olmoK5Oz1gicmqicfgt4vJWUdOtjuRicyhALDKouZXEGiar3vHDQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tibxFw9HQyoxBiawOl5KFcibt0J2teclphweOzN7NtYueWNianEbYFgZe9w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tDNvvSeFFx2MgwUthZ8kfQa49IuvyB3meyLauMskYBuRC9ribciaHMLFQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;为什么会扯皮？因为存在灰色地带，没有界定好职责分工。这条线划不清楚，两边永远在扯皮。所以解决办法就一个：划清道道。工具就是流程图。&lt;/p&gt;&lt;p&gt;你如果在与兄弟部门扯皮，那你们两个负责人坐下来，把道道划清楚。&lt;/p&gt;&lt;p&gt;你如果总是被其他人呼来唤去，那你自己画一个流程图（或者使用说明书），贴在你工位上，让他们按照你的逻辑走。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tV9BiasSZR5cddxHSS41KaaxzibgMHGV9nQDOY4Cb0F4HK4EVhicDTZN4g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;为什么要甩锅？因为不想背责任。为什么不想背责任？因为责权利不对等、责任划分不清楚、文化建设有问题。&lt;/p&gt;&lt;p&gt;我们作为个体，解决不了文化层的问题，那就从责任划分入手。在每件事情开始的时候，把责任说清楚，权力说清楚，利益说清楚。这件事情由你负责，那么就拥有在这件事情上的所有权力，做好了，有你的利益；事情搞砸了，追究你的责任。&lt;/p&gt;&lt;p&gt;工具有很多，什么首问负责制、Owner负责制等。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4t8Upb5q8apABWHC7GXc5ibnYFnbSql4w2icaT3VEHwqydHZlFhDwicn7Hw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;之前已经讲过会议流程，以后在开会的时候，遵循会议流程就能解决80%的问题。这里再给大家分享一个小妙招：靶子法：&lt;/p&gt;&lt;p&gt;在开会的时候，大家无法达成共识，是因为大家都沉浸在自己的世界里，各抒己见。这时候所有人都是无序的，我们可以利用一个靶子让大家变得有序。这个靶子是对是错都无所谓，甚至是错的更好，所有人都会集中火力打向这个靶子。接下来的任务就是收集意见，总结、提炼，然后落实到人、设置时间、成果物等。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4t0h1vCgticJsojM3QsUaxoajfow2LbHMPsdHofr4vFTILv19iaa5v2qAw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;如果你们平时的工作状态是：各自领完任务后，埋头开发，最后再一起做接口联调，那么联调不成功的概率是99%，剩余的1%是看在你们长时间磨合的情况下给的。&lt;/p&gt;&lt;p&gt;优化后的工作状态应该是跟居委会大妈一样，时刻盯着对方，不断跟进，相互通报，定期还得跟一下质量，有问题及时处理。这样做，问题才不会集中在最后几天爆发。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tKh5U34SKQddAgZvum32WE712ic7r1deD06appWbZoC3KJ9FSjrjafvw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;很多领导山头意识强，喜欢搞派系，这个没办法，我们作为中下层的执行层，只能是从关系入手。上层的问题我们下层是无法解决的。只能改善。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tWnotcb2EOUVGk1R1G718QSuAuic5K7vBU3SAZ69mJ9dPwOGktIRqSkg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正式沟通&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;正式沟通&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;正式沟通！一定要正式沟通，否则吃亏的就是你。还有打脸的时候不要手软，不要留情面。但是请注意，不要加你的判断，不要带入情绪，只说事实即可。你不是笨蛋，别人也不是，他们能看明白你的意思。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tsFymorPfT4TL6CCZncE7Wu0AC01PPVfribsBt5yUQ6Gng2SZ4RtOgIA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tUdIuKNMibF4Rv4GKzY6eR5icWB945UeVIkIFShtxibQgK1dSDX72wVnSQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5633587786259542&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjnjl429MticTHbINBdkJWC4toVJQqQvwvyX8KSibbXVExG9R8o5YubkZdwpicjaWsFEThWabBxhu4hiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;655&quot;/&gt;&lt;/p&gt;&lt;p&gt;到这里，职场上的各种理论、方法、手段、解决方案基本都有了。但是这都是法、术、器的层次。&lt;/p&gt;&lt;p&gt;作为架构师，我们还必须得再向上抽象一层，到达“道&lt;span&gt;”&lt;/span&gt;的层次。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4thVeib8N5zUlyEnd0Uxo3eh5nEIenTYziajnnic44yyPrC8xU039Ck3I7Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4t36uBtrBzyuJE5YcZF5s1ThfpUX0sTBwdNnIPgVDTyODQwas2ICaRLg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;沟通协作，目的是让所有人发挥出更大的力量。我们作为组织中的个体，首要的任务就是先把自己的力量全部发挥出来。&lt;/p&gt;&lt;p&gt;掌控自己的情绪是掌握自己的第一步。在给大家分享的时候，有人说我能控制负面情绪，说明我掌控的还可以。&lt;/p&gt;&lt;p&gt;对不起，我认为不是。掌控情绪的意思是让情绪成为你的武器。你控制负面情绪，是在压抑自己。你无法抗衡他人，只能压抑自己。&lt;/p&gt;&lt;p&gt;你的喜爱、自信，都应该让他人看见。你的愤怒、轻蔑，也应该成为你的武器，而不是你发泄的手段。请注意这两者的区别。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tPiaHFQhiciaaznO1Q8XHDIO9fVpaWWJWFxTYicMicbqO0AicZFiaPPHCo8Ocw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;掌控自己之后，就是驱动他人。调查问卷中80%以上的人说我人微言轻，推不动事情。其实这是你在给自己设限，是你自己的不自信。&lt;/p&gt;&lt;p&gt;管理学中，把管理能力分为权力性和非权力性。人微言轻指的是权力性中的合法权中的职级。是所有管理能力中的一种而已。其他权利全部握在你的手中，你用过吗？&lt;/p&gt;&lt;p&gt;比如奖赏权。有些人说，我没有考核他的权利。奖赏不等于考核。考核只是手段而已。你和同事成功搞定一个功能，你夸奖他算不算奖赏权？给他带一包小零食算不算奖赏权？&lt;/p&gt;&lt;p&gt;比如职责权。我在内训的时候就给大家看过一张照片：&lt;/p&gt;&lt;p&gt;我们的行政主管，一个95后的矮矮的小姑娘，说话声音很小。但是就是这样一个人拉着一个VP，三个总监，要求技术、产品、数据三个部门调整工位，原因是公司的工位不够了。技术总监反对，说很挤了，小姑娘不慌不忙，拿出工位图：三个部门总共110人，技术大厅一共140个工位，算上你们三个月的招聘需求，也还有富余。&lt;/p&gt;&lt;p&gt;这个职责权是公司赋予你的，每个人都有。每个人在自己职责范围内都是最大的，这与职级无关。所以不要再说你人微言轻，那是你自己的判断。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4t90hDxbJkdura58aXiaUHkqPCJDcjblAOGksYKoxWsMR2FRyBn5ADY7Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tVoRNWf4F7t3SSG3l3cpM66HsYVQJRc5IKiaibeEpzhgtdrovWbV5MuyA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;其实你与其他人一样，拥有以上完整的所有力，只不过你不会用而已。而且只要你以上任一种力做到极致，就可以基本忽视其他所有力。这里重点给大家讲一下“物力”。&lt;/p&gt;&lt;p&gt;管理中有向上管理、平行管理、向下管理和自我管理。各位可以去百度一下各种策略。其实这些很简单，只需要找准他们各自的利益即可。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;想要驱动领导，你只需要告诉他，这是他的OKR、KPI的内容，现在遇到问题了，需要他帮忙，这就可以了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;想要驱动平级同事，你只需告诉他，你的这个事情，我帮你搞定123了，但是45我的确搞不定，需要你帮忙做一些，这也就OK了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;想要驱动下属，这里注意，网上教程说的都是KPI，这招不好使。你这只是在用职级权利硬压。下属的利益点在哪里？在提升，在成就感。你需要去帮助他提升，帮助他获得成就感，在他成功的时候祝贺他。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tolWTKkM2sUkicZBz6g65rmjBFFdybBrTx9BH8rowIXPUKlDNuLV574Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tXGxyjE7fCicj4Ps7XONa9C5oExw26Ra4UyoZKtBUq0Y4CLpk921LKVg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;道法术器都有了，你需要做的是根据你自己的实际情况，构建专属于自己的沟通场域。或威严，或刚猛，或绅士，或温柔，或急急似山火，或&lt;span&gt;徐徐若清风。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;大家可以去做一个DISC或者其他的性格测试，让自己更了解自己。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tOvPDKNmUjFBpvV9G83CpicbA9Pero5jInEZZk9pZS3ee07ajZJTlsfg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;强烈建议大家读毛泽东选集。这是一个地狱级难度完美通关的大师秘籍，你在职场遇到的问题与毛爷爷遇到的相比，差别多大？十万分之一都不如，你认可吗？我最喜欢那句话“不管风吹浪打，胜似闲庭信步”。这就&lt;span&gt;是&lt;/span&gt;&lt;span&gt;你修炼&lt;/span&gt;&lt;span/&gt;到达的境界。那如何才能到这个境界呢？我们在道法术器之上，还能再上一个台阶吗？可以！&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tMTxaOrjJsKB2mzWcDvmlBseQItMbbeUAoLe5WBHGSnNRw37tVwKichw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;无惧任何挑战的心法-修行。&lt;/p&gt;&lt;p&gt;绝大部分人的工作状态是：忍受，忍耐，不断消耗自身的意志账户。一旦账户余额不足，就开始改简历，找工作。&lt;/p&gt;&lt;p&gt;其实你应该换一种活法。当你意识到人生就是一场修行的时候，你就不会拘泥于各种小事了。喜怒哀乐自由心，行立坐卧皆修行。此时，你巴不得遇到各种问题，因为解决问题之后，你的收货将远大于你的付出。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tMxYvqIialX1mrkUTrUvibiah1VtRicf8yAZlibA2ykkA7hoHQOVm6Yn6IWg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;同理，想要驱动他人的顶级心法不是用各种力去驱使他，而是点燃他人内心的火种。你只需要点燃他就行了。他会跑的。跑的比你还快。&lt;/p&gt;&lt;p&gt;乔布斯是如何驱动可口可乐总裁斯卡利的？他说:“你是想卖一辈子糖水呢,还是想抓住机会来改变世界?”&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4te1BJaTV8h9R8XtRjC3eibBuia0v0XGxuC3Iacd9mf0EHMz3ZtzmCCz5A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tUAD2e82aFgBBthLeFiatQ2rk0thTHKfvE6rYmYSjmnSExFZlts3cKqw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tb4xctgia7sGafe4D33cmZ2N77zj0N0qhiaQwK1BAbA1PHTGdUUOsyibAw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VHriaQOsnjnjl429MticTHbINBdkJWC4tibCBOkgUldyZia0v5aBGckXG9MKVttfZdevwVDnPf2DDMkofcawhNXrQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNjM0MTc0Ng==&amp;amp;mid=2247484028&amp;amp;idx=1&amp;amp;sn=e4a4d718c442e364b9ed26c90756c504&amp;amp;chksm=97225161a055d877fb3ec5c49fe4683f7e5bf6a833afb92c6f25aa65881ddf52ba796214dcb2&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span data-raw-text=&quot;干&quot; data-textnode-index=&quot;47&quot; data-index=&quot;2087&quot;/&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;昨天分享的时候就有很多小伙伴想要ppt，东西已经准备好了，公众号后台回复&lt;/span&gt;&lt;span&gt;GTGT&lt;/span&gt;&lt;span&gt;即可领取~~~&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;90215&quot;&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot; data-width=&quot;100%&quot;&gt;往期&lt;span&gt;精彩&lt;/span&gt;回顾&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-bdless=&quot;spin&quot; data-bdlessp=&quot;280&quot; data-bdopacity=&quot;50%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNjM0MTc0Ng==&amp;amp;mid=2247484362&amp;amp;idx=1&amp;amp;sn=34cbf684840e8fa4e4c58df655a0c498&amp;amp;chksm=972250d7a055d9c1b0188c148b7d85f560532a37c5735fba658f82dd10fd6500a64749db02d0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;干货 | 团队的温度-绩效管理的核心&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span data-raw-text=&quot;干&quot; data-textnode-index=&quot;47&quot; data-index=&quot;2087&quot;&gt;干货 | 团队的温度-绩效管理的核心&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNjM0MTc0Ng==&amp;amp;mid=2247484084&amp;amp;idx=1&amp;amp;sn=ac1479ef18e77fb12d9ab06ff1a1c56b&amp;amp;chksm=972251a9a055d8bf1e16d2ca793d6fdada0354d3ae7c1e548b27f74a16d92467ca4e57f7b3f2&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;底层规则 | 论数据驱动业务的“力”&lt;/a&gt;&lt;/section&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNjM0MTc0Ng==&amp;amp;mid=2247484184&amp;amp;idx=1&amp;amp;sn=1fc0596b8e4aaa8b1d26b83e840adbb5&amp;amp;chksm=97225005a055d9137ade173cd13b42e785b8c519a5a7bebbc33ff7f0a0b67daf7d647b815f4e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;热文 | &lt;span&gt;大数据工程师体系职业路径全解&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot; class=&quot;__bg_gif&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/7VHriaQOsnjneEneI8RuAic5xJot9DMPcukYy2iceTc1efcSQENJ71MH1rG7I1ibF0MN5LEzXxR5teia1TlFG4FyONw/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;转发，点赞，在看，安排一下？&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>28287ca4f741964eb1d96a6dbc930646</guid>
<title>如何对集合对象求合计，然后追加在该集合对象中</title>
<link>https://toutiao.io/k/qpoc0hv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;header class=&quot;post-header&quot;&gt;
        &lt;h1 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;
          如何对集合对象求合计，然后追加在该集合对象中
        &lt;/h1&gt;

        &lt;p class=&quot;post-meta&quot;&gt;
            &lt;span class=&quot;post-meta-item&quot;&gt;
              &lt;span class=&quot;post-meta-item-icon&quot;&gt;
                &lt;i class=&quot;far fa-calendar&quot;/&gt;
              &lt;/span&gt;
              &lt;span class=&quot;post-meta-item-text&quot;&gt;发表于&lt;/span&gt;

              &lt;time title=&quot;创建时间：2021-03-13 00:00:00&quot; itemprop=&quot;dateCreated datePublished&quot; datetime=&quot;2021-03-13T00:00:00+00:00&quot;&gt;2021-03-13&lt;/time&gt;
            &lt;/span&gt;

          
            &lt;span class=&quot;post-meta-item&quot; title=&quot;本文字数&quot;&gt;
              &lt;span class=&quot;post-meta-item-icon&quot;&gt;
                &lt;i class=&quot;far fa-file-word&quot;/&gt;
              &lt;/span&gt;
                &lt;span class=&quot;post-meta-item-text&quot;&gt;本文字数：&lt;/span&gt;
              &lt;span&gt;4.7k&lt;/span&gt;
            &lt;/span&gt;
            &lt;span class=&quot;post-meta-item&quot; title=&quot;热度&quot; id=&quot;busuanzi_container_page_pv&quot;&gt;
              &lt;span class=&quot;post-meta-item-icon&quot;&gt;
                &lt;i class=&quot;fa fa-eye&quot;/&gt;
              &lt;/span&gt;
              &lt;span class=&quot;post-meta-item-text&quot;&gt;热度&lt;/span&gt;
              &lt;span id=&quot;busuanzi_value_page_pv&quot;/&gt;℃
            &lt;/span&gt;

        &lt;/p&gt;
      &lt;/header&gt;

    
    
    
    &lt;div class=&quot;post-body&quot; itemprop=&quot;articleBody&quot;&gt;

      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;/&gt;前言&lt;/h3&gt;&lt;p&gt;在日常工作中，我们经常会遇到对一个列表的每一项求合计，然后追加到列表的最后一行。如&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qn.minwk.top/img/20210313165840.png&quot; alt=&quot;1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qn.minwk.top/img/20210313165921.png&quot; alt=&quot;22&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerlink&quot; title=&quot;方案&quot;/&gt;方案&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;修改该统计查询的sql，在里面追加一行合计计算。不太好的地方就是在sql有好多的函数计算，而且还要修改这个统计的sql，本来sql已经很复杂，然后再加就搞得又臭又长。&lt;a id=&quot;more&quot;/&gt;&lt;/li&gt;
&lt;li&gt;在代码中计算，这个也是比较麻烦。所以拿出来我这个方法了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之前我是这样写的，遍历集合中的每个对象，求和，将和放到新对象然后追加到集合中&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sumDataScreening&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;IpepShipWasteData&amp;gt; list)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        IpepShipWasteData data = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IpepShipWasteData();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        data.setCode(&lt;span class=&quot;string&quot;&gt;&quot;合计&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        list.stream().forEach(d-&amp;gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            data.setProvideTimes(Optional.ofNullable(data.getProvideTimes()).orElse(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + d.getProvideTimes());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            data.setShipRubbishTransportAmount(Optional.ofNullable(data.getShipRubbishReceiveAmount()).orElse(&lt;span class=&quot;number&quot;&gt;0f&lt;/span&gt;) + d.getShipRubbishReceiveAmount());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            data.setShipRubbishReceiveAmount(Optional.ofNullable(data.getShipRubbishReceiveAmount()).orElse(&lt;span class=&quot;number&quot;&gt;0f&lt;/span&gt;) + d.getShipRubbishReceiveAmount());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            data.setShipRubbishReceiveTimes(Optional.ofNullable(data.getShipRubbishReceiveTimes()).orElse(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + d.getShipRubbishReceiveTimes());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            data.setSewageTransportAmount(Optional.ofNullable(data.getShipRubbishReceiveAmount()).orElse(&lt;span class=&quot;number&quot;&gt;0f&lt;/span&gt;) + d.getShipRubbishReceiveAmount());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            data.setSewageReceiveAmount(Optional.ofNullable(data.getSewageReceiveAmount()).orElse(&lt;span class=&quot;number&quot;&gt;0f&lt;/span&gt;) + d.getSewageReceiveAmount());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            data.setSewageReceiveTimes(Optional.ofNullable(data.getSewageReceiveTimes()).orElse(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + d.getSewageReceiveTimes());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            data.setOilyTransportAmount(Optional.ofNullable(data.getOilyTransportAmount()).orElse(&lt;span class=&quot;number&quot;&gt;0f&lt;/span&gt;) + d.getOilyTransportAmount());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            data.setOilyReceiveAmount(Optional.ofNullable(data.getOilyReceiveAmount()).orElse(&lt;span class=&quot;number&quot;&gt;0f&lt;/span&gt;) + d.getOilyReceiveAmount());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            data.setOilyReceiveTimes(Optional.ofNullable(data.getOilyReceiveTimes()).orElse(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + d.getOilyReceiveTimes());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            data.setElectricityConsumption(Optional.ofNullable(data.getElectricityConsumption()).orElse(&lt;span class=&quot;number&quot;&gt;0f&lt;/span&gt;) + d.getElectricityConsumption());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        });&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        list.add(data);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;看到这密密麻麻的代码是不是想吐？我都快吐了，身为一个有志之士怎么能写这样的代码呢！太对不起我这句话了&lt;strong&gt;“致力于写出思路更加清晰，逻辑性更强，冗余度更低，可维护性和可重用性更高的代码”&lt;/strong&gt;，所以第二天我就把它优化了&lt;/p&gt;
&lt;p&gt;这是改了之后的代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sumDataScreening&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;IpepShipWasteData&amp;gt; list)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        IpepShipWasteData data = CalculateUtil.getSumValue(list, IpepShipWasteData&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        data.setCode(&lt;span class=&quot;string&quot;&gt;&quot;合计&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        list.add(data);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一下就少了好多，用到了CalculateUtil.getSumValue这个方法&lt;/p&gt;
&lt;h3 id=&quot;想法&quot;&gt;&lt;a href=&quot;#想法&quot; class=&quot;headerlink&quot; title=&quot;想法&quot;/&gt;想法&lt;/h3&gt;&lt;p&gt;从上面的密麻代码中可以发现，我是想把该集合对象的某个属性的值累加起来然后放到该对象的对应属性中。其实就是一直在重复这个操作，遍历这个集合，获取它每个属性的值，然后累加再放到一个新对象的这个属性。是不是突然发现，反射就能做到这个事。所以就有了下面这个工具代码。&lt;/p&gt;
&lt;h3 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;/&gt;工具&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Field;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.math.BigDecimal;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Objects;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Optional;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 数值计算工具&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; MinWeikai&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@date&lt;/span&gt; 2021/3/13 10:29&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CalculateUtil&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 计算集合中数值的合计值，并赋予该新对象&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; sources 源集合对象&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; voClass 源对象&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; &amp;lt;T&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; 已计算合计后的源对象&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;T &lt;span class=&quot;title&quot;&gt;getSumValue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;? extends Object&amp;gt; sources, &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Class&amp;lt;T&amp;gt; voClass)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        Field[] fields = voClass.getDeclaredFields();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        T data = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            data = voClass.newInstance();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            T finalData = data;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            sources.stream().forEach(d -&amp;gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Field field : fields) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Objects.equals(&lt;span class=&quot;string&quot;&gt;&quot;serialVersionUID&quot;&lt;/span&gt;, field.getName())) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                    Object oldTemp = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                    Object newoldTemp = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                        oldTemp = ReflectionUtil.invokeGetterMethod(d, field.getName());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                        newoldTemp = ReflectionUtil.invokeGetterMethod(finalData, field.getName());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                    } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                        e.printStackTrace();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// 此处可以自定义匹配类型，或可以结合业务重写该方法，做一些加减乘除的复杂计算&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (field.getType().getSimpleName()) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Integer&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                            oldTemp = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) Optional.ofNullable(oldTemp).orElse(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) +&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                                    (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) Optional.ofNullable(newoldTemp).orElse(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Float&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                            oldTemp = (&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;) Optional.ofNullable(oldTemp).orElse(&lt;span class=&quot;number&quot;&gt;0f&lt;/span&gt;) +&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                                    (&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;) Optional.ofNullable(newoldTemp).orElse(&lt;span class=&quot;number&quot;&gt;0f&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                            oldTemp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BigDecimal((&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;) oldTemp)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                                    .setScale(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, BigDecimal.ROUND_HALF_UP).floatValue();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;BigDecimal&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                            oldTemp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BigDecimal(String.valueOf(Optional.ofNullable(oldTemp).orElse(BigDecimal.ZERO)))&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                                    .add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BigDecimal(String.valueOf(Optional.ofNullable(newoldTemp).orElse(BigDecimal.ZERO))))&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                                    .setScale(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, BigDecimal.ROUND_HALF_UP);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                            oldTemp = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!Objects.isNull(oldTemp)) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                        ReflectionUtil.invokeSetterMethod(finalData, field.getName(), oldTemp);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            });&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InstantiationException | IllegalAccessException e) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Person&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        Person data1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        data1.setAge(&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        data1.setMoney(BigDecimal.ONE);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        data1.setWeight(&lt;span class=&quot;number&quot;&gt;15.2f&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        list.add(data1);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        Person data2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        data2.setAge(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        data2.setMoney(BigDecimal.valueOf(&lt;span class=&quot;number&quot;&gt;1.4f&lt;/span&gt;));&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        data2.setWeight(&lt;span class=&quot;number&quot;&gt;11f&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        list.add(data2);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        Person person = CalculateUtil.getSumValue(list, Person&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(person);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这个方法有优化的地方或者问题，可以联系我呦！可以在&lt;a href=&quot;https://gitee.com/mwk719/spring-learn/tree/master/src/main/java/com/mwk/utils&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gitee提issue&lt;/a&gt;。。&lt;/p&gt;
&lt;p&gt;方法中用到了一个反射方法工具&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitee.com/mwk719/spring-learn/blob/master/src/main/java/com/mwk/utils/ReflectionUtil.java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ReflectionUtil工具地址&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;

    
    
    

 

      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>