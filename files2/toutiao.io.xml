<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>cf66e2ba847b507d0ac6dc9e4ba7cb65</guid>
<title>阿里巴巴开源高性能 JSON 库 FASTJSON v2</title>
<link>https://toutiao.io/k/qy5z8im</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078619&amp;amp;idx=1&amp;amp;sn=b4db7f1880038187eecd0454d0f61be9&amp;amp;chksm=bd2918ec8a5e91fae83ccb2a9e977418dcd284c620ad44a25974071e9b1b4d8857628f26ad18&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;‍‍&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNav9oso6Gxia5jcD3Wgg3yvKNEpy1FkFVItdSic9wV0kdNVdZbLl1nID64c4NCC9U6Pmd1eNQKQmhSM2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078619&amp;amp;idx=1&amp;amp;sn=b4db7f1880038187eecd0454d0f61be9&amp;amp;chksm=bd2918ec8a5e91fae83ccb2a9e977418dcd284c620ad44a25974071e9b1b4d8857628f26ad18&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;疫情之中，写给大家的几句话｜码农周刊VIP会员专属邮件周报 Vol.089&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;码农周刊VIP会员专属邮件周报 Vol.089&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;FASTJSON v2是FASTJSON项目的重要升级，目标是&lt;strong&gt;为下一个十年提供一个高性能的JSON库&lt;/strong&gt;。通过同一套API，&lt;br/&gt;- 支持JSON/JSONB两种协议，JSONPath是一等公民；&lt;br/&gt;- 支持全量解析和部分解析；&lt;br/&gt;- 支持Java服务端、客户端Android、大数据场景。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.36&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNav9oso6Gxia5jcD3Wgg3yvKNECticLB0cOSwYRw2owmicL2m9BLdnB61L2kwdK3CkXunp38g3zuv0Bw4g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9b38c084cfc18820f204ba54e75a0761</guid>
<title>HiveQL 进阶之以柔克刚 - 将简单语法运用到极致</title>
<link>https://toutiao.io/k/nxy3pln</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-14bz7qe&quot; options=&quot;[object Object]&quot;&gt;&lt;h2 data-first-child=&quot;&quot; id=&quot;h_508038040_0&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;前言&lt;/b&gt;&lt;/h2&gt;&lt;h3 id=&quot;h_508038040_1&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;初衷&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;dsStpuLp&quot;&gt;&lt;b&gt;如何高效地使用 HiveQL ，将 HiveQL 运用到极致。&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;Zkg-Pxd5&quot;&gt;在大数据如此流行的今天，不只是专业的数据人员，需要经常地跟 SQL 打交道，即使是产品、运营等非技术伙伴，也会或多或少地使用过 SQL ，如何高效地发挥 SQL 的能力，继而发挥数据的能力，变得尤为重要。&lt;/p&gt;&lt;p data-pid=&quot;Un0-K3hI&quot;&gt;HiveQL 发展到今天已经颇为成熟，作为一种 SQL 方言，其支持大多数查询语法，具有较为丰富的内置函数，同时还支持开窗函数、用户自定义函数、反射机制等诸多高级特性。面对一个复杂的数据场景，或许有人技术娴熟，选择使用 HiveQL 高级特性解决，如：编写用户自定义函数扩展 SQL 的数据处理能力；或许有人选择敬而远之，转向使用其他非 SQL 类型的解决方案。本文并不讨论不同方式的优劣，而是尝试独辟蹊径，不是强调偏僻的语法特性或是复杂的 UDF 实现，而是强调 &lt;b&gt;通过灵活的、发散性的数据处理思维，就可以用最简单的语法，解决复杂的数据场景。&lt;/b&gt;&lt;/p&gt;&lt;h3 id=&quot;h_508038040_2&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;适合人群&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;tr_XElYl&quot;&gt;不论是数据开发初学者还是资深人员，本篇文章或许都能有所帮助，不过更适合中级、高级读者阅读。&lt;/p&gt;&lt;p data-pid=&quot;pZ7BqR9X&quot;&gt;本篇文章重点介绍数据处理思维，并没有涉及到过多高阶的语法，同时为了避免主题发散，文中涉及的函数、语法特性等，不会花费篇幅进行专门的介绍，读者可以按自身情况自行了解。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_3&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;内容结构&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;7k535JYC&quot;&gt;本篇文章将围绕数列生成、区间变换、排列组合、连续判别等主题进行介绍，并附以案例进行实际运用讲解。每个主题之间有轻微的前后依赖关系，依次阅读更佳。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_4&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;提示信息&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;NRQ0H870&quot;&gt;本篇文章涉及的 SQL 语句只使用到了 HiveQL 基本的语法特性，理论上可以在目前的主流版本中运行，同时特意注明，运行环境、兼容性等问题不在本篇文章关注范围内。&lt;/p&gt;&lt;h2 id=&quot;h_508038040_5&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;快速制造测试数据&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;8zF_Ahh2&quot;&gt;生成用户访问日志表 visit_log ，每一行数据表示一条用户访问日志。该表将被用作下文各类场景的测试数据。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 1
with visit_log as (
    select stack (
        6,
        &#x27;2022-01-01&#x27;, &#x27;101&#x27;, &#x27;湖北&#x27;, &#x27;武汉&#x27;, &#x27;Android&#x27;,
        &#x27;2022-01-01&#x27;, &#x27;102&#x27;, &#x27;湖南&#x27;, &#x27;长沙&#x27;, &#x27;IOS&#x27;,
        &#x27;2022-01-01&#x27;, &#x27;103&#x27;, &#x27;四川&#x27;, &#x27;成都&#x27;, &#x27;Windows&#x27;,
        &#x27;2022-01-02&#x27;, &#x27;101&#x27;, &#x27;湖北&#x27;, &#x27;孝感&#x27;, &#x27;Mac&#x27;,
        &#x27;2022-01-02&#x27;, &#x27;102&#x27;, &#x27;湖南&#x27;, &#x27;邵阳&#x27;, &#x27;Android&#x27;,
        &#x27;2022-01-03&#x27;, &#x27;101&#x27;, &#x27;湖北&#x27;, &#x27;武汉&#x27;, &#x27;IOS&#x27;
    ) as (dt, user_id, province, city, device_type)
)
select * from visit_log;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;h_508038040_6&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;数列&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;EcKTYznT&quot;&gt;数列是最常见的数据形式之一，实际数据开发场景中遇到的基本都是有限数列，也是本节将要重点介绍的内容。本节将从最简单的递增数列开始，找出一般方法并推广到更泛化的场景。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_7&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;仙人指路&lt;/b&gt;&lt;/h3&gt;&lt;h3 id=&quot;h_508038040_8&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;一个简单的递增数列&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;osPpRNZV&quot;&gt;首先引出一个简单的递增整数数列场景：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;42iVqSTD&quot;&gt;从数值 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+0+&quot; alt=&quot; 0 &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; 开始；&lt;/li&gt;&lt;li data-pid=&quot;Ms4DHjQb&quot;&gt;之后的每个数值递增 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+1+&quot; alt=&quot; 1 &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; ；&lt;/li&gt;&lt;li data-pid=&quot;rZ8Ocd6O&quot;&gt;至数值 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+3+&quot; alt=&quot; 3 &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; 结束； 如何生成满足以上三个条件的数列？即 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+%5B0%2C1%2C2%2C3%5D+&quot; alt=&quot; [0,1,2,3] &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; 。&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;BAujbTaN&quot;&gt;实际上，生成该数列的方式有多种，此处介绍其中一种简单且通用的方案。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 2
select
    t.pos as a_n
from (
    select posexplode(split(space(3), space(1)))
) t;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;zADWlPxf&quot;&gt;通过上述 SQL 片段可得知，生成一个递增序列只需要三个步骤：&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;MMfkR_4e&quot;&gt;生成一个长度合适的数组，数组中的元素不需要具有实际含义；&lt;/li&gt;&lt;li data-pid=&quot;Zck-p59T&quot;&gt;通过 UDTF 函数 posexplode 对数组中的每个元素生成索引下标；&lt;/li&gt;&lt;li data-pid=&quot;AkBeOn_x&quot;&gt;取出每个元素的索引下标。 以上三个步骤可以推广至更一般的数列场景：等差数列、等比数列。下文将以此为基础，直接给出最终实现模板。&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;h_508038040_9&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;等差数列&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;lzHyfwtq&quot;&gt;若设首项 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+a_1+%3D+a+&quot; alt=&quot; a_1 = a &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; ，公差为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+d+&quot; alt=&quot; d &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; ，则等差数列的通项公式为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+a_n+%3D+a_1+%2B+%28n+-+1%29d+&quot; alt=&quot; a_n = a_1 + (n - 1)d &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; 。 SQL 实现：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 3
select
    a_1 + t.pos * d as a_n
from (
    select posexplode(split(space(n - 1), space(1)))
) t;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;h_508038040_10&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;等比数列&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;dZDIrol0&quot;&gt;若设首项 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+a_1+%3D+a+&quot; alt=&quot; a_1 = a &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; ，公比为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+r+&quot; alt=&quot; r &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; ，则等比数列的通项公式为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+a_n+%3D+ar%5E%7Bn-1%7D+&quot; alt=&quot; a_n = ar^{n-1} &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; 。 SQL 实现：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 4
select
    a_1 * pow(r, t.pos) as a_n
from (
    select posexplode(split(space(n - 1), space(1)))
) t;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;h_508038040_11&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;应用场景举例&lt;/b&gt;&lt;/h3&gt;&lt;h3 id=&quot;h_508038040_12&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;如何还原任意维度组合下的维度列簇名称？&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;LKKt37p5&quot;&gt;在多维分析场景下，可能会用到高阶聚合函数，如 &lt;i&gt;cube&lt;/i&gt; 、 &lt;i&gt;rollup&lt;/i&gt; 、 &lt;i&gt;grouping sets&lt;/i&gt; 等，可以针对不同的维度组合下的数据进行聚合统计。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_13&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;场景描述&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;UufnFZLH&quot;&gt;现有用户访问日志表 visit_log ，该表定义见 &lt;b&gt;快速制造测试数据&lt;/b&gt;。 假如针对省份 province , 城市 city, 设备类型 device_type 三个维度列，通过高阶聚合函数，统计得到了不同维度组合下的用户访问量。&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;Njahkaml&quot;&gt;如何知道一条统计结果是根据哪些维度列聚合出来的？&lt;/li&gt;&lt;li data-pid=&quot;CLGo1VS_&quot;&gt;想要输出 &lt;b&gt;聚合的维度列&lt;/b&gt; 的名称，用于下游的报表展示等场景，又该如何处理？&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;h_508038040_14&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;解决思路&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;QZRLBqIN&quot;&gt;&lt;b&gt;可以借助 Hive 提供的 Grouping__ID 来实现，核心方法是对 Grouping__ID 进行逆向实现。&lt;/b&gt; 详细步骤如下：&lt;/p&gt;&lt;p data-pid=&quot;IIzS-gWa&quot;&gt;&lt;b&gt;一、准备好所有的 Grouping__ID 。&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;_f413xyP&quot;&gt;生成一个包含 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+2%5Ex+&quot; alt=&quot; 2^x &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; 个数值的递增数列，每个数值表示一种 Grouping__ID ，其中 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+x+&quot; alt=&quot; x &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; 为所有维度列的数量， &lt;img src=&quot;https://www.zhihu.com/equation?tex=+2%5Ex+&quot; alt=&quot; 2^x &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; 为所有维度组合的数量。即 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+%7B+0%2C+1%2C+2%2C+...%2C+2%5Ex+-+1+%7D+&quot; alt=&quot; { 0, 1, 2, ..., 2^x - 1 } &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt;&lt;br/&gt; &lt;/li&gt;&lt;li data-pid=&quot;Tx_HxxHU&quot;&gt;将递增数列中的每个 Grouping__ID 转为 2 进制字符串，并展开该 2 进制字符串的每个比特位。例如&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;uD4NOzjP&quot;&gt;&lt;b&gt;二、准备好所有维度列的名称。&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;{ dim_col_1, dim_col_2, ..., dim_col_x }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;2M-Ips0B&quot;&gt;&lt;b&gt;三、将 Grouping__ID 映射到维度列名称。&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;d2R7WVvk&quot;&gt;对于递增数列中的每个数值，将该数值的 2 进制的每个比特位与维度列的下标进行映射。例如&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;grouping__id：3 =&amp;gt; { 0, 0, 0, 1, 1 }
维度列：{ dim_col_1, dim_col_2, dim_col_3, dim_col_4, dim_col_5 }
映射结果：{ 0:dim_col_1, 0:dim_col_2, 0:dim_col_3, 1:dim_col_4, 1:dim_col_5 }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li data-pid=&quot;lSj8aQoq&quot;&gt;对递增数列中的每个数值进行聚合，输出所有比特位等于 0 的维度列。&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;dim_col_1,dim_col_2,dim_col_3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;SQaeeH1W&quot;&gt;注意：不同版本的 Hive 之间， Grouping__ID 实现有差异，以上处理逻辑适用于 2.3.0 及之后的版本。 2.3.0 之前的版本基于上述步骤稍加修改即可，此处不再专门花费篇幅描述。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_15&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;SQL 实现&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 5
with group_dimension as (
    select -- 每种分组对应的维度字段
        gb.group_id, concat_ws(&quot;,&quot;, collect_list(case when gb.placeholder_bit = 0 then dim_col.val else null end)) as dimension_name
    from (
     select groups.pos as group_id, pe.*
        from (
            select posexplode(split(space(cast(pow(2, 3) as int) - 1), space(1)))
        ) groups -- 所有分组
        lateral view posexplode(split(lpad(conv(groups.pos,10,2), 3, &quot;0&quot;), &#x27;&#x27;)) pe as placeholder_idx, placeholder_bit -- 每个分组的bit信息
    ) gb
    left join ( -- 所有维度字段
     select posexplode(split(&quot;省份,城市,设备类型&quot;, &#x27;,&#x27;))
    ) dim_col on gb.placeholder_idx = dim_col.pos
    group by gb.group_id
)
select 
    group_dimension.dimension_name as dimension_name,
    province, city, device_type,
    visit_count
from (
    select
        grouping__id as group_id,
        province, city, device_type,
        count(1) as visit_count
    from visit_log b
    group by province, city, device_type
    GROUPING SETS(
        (province),
        (province, city),
        (province, city, device_type)
    )
) t
join group_dimension on t.group_id = group_dimension.group_id
order by dimension_name;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table data-draft-node=&quot;block&quot; data-draft-type=&quot;table&quot; data-size=&quot;normal&quot; data-row-style=&quot;normal&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;dimension_name&lt;/th&gt;&lt;th&gt;province&lt;/th&gt;&lt;th&gt;city&lt;/th&gt;&lt;th&gt;device_type&lt;/th&gt;&lt;th&gt;visit_count&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;省份&lt;/td&gt;&lt;td&gt;湖北&lt;/td&gt;&lt;td&gt;NULL&lt;/td&gt;&lt;td&gt;NULL&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;省份&lt;/td&gt;&lt;td&gt;湖南&lt;/td&gt;&lt;td&gt;NULL&lt;/td&gt;&lt;td&gt;NULL&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;省份&lt;/td&gt;&lt;td&gt;四川&lt;/td&gt;&lt;td&gt;NULL&lt;/td&gt;&lt;td&gt;NULL&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;省份,城市&lt;/td&gt;&lt;td&gt;湖北&lt;/td&gt;&lt;td&gt;武汉&lt;/td&gt;&lt;td&gt;NULL&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;省份,城市&lt;/td&gt;&lt;td&gt;湖南&lt;/td&gt;&lt;td&gt;长沙&lt;/td&gt;&lt;td&gt;NULL&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;省份,城市&lt;/td&gt;&lt;td&gt;湖南&lt;/td&gt;&lt;td&gt;邵阳&lt;/td&gt;&lt;td&gt;NULL&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;省份,城市&lt;/td&gt;&lt;td&gt;湖北&lt;/td&gt;&lt;td&gt;孝感&lt;/td&gt;&lt;td&gt;NULL&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;省份,城市&lt;/td&gt;&lt;td&gt;四川&lt;/td&gt;&lt;td&gt;成都&lt;/td&gt;&lt;td&gt;NULL&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;省份,城市,设备类型&lt;/td&gt;&lt;td&gt;湖北&lt;/td&gt;&lt;td&gt;孝感&lt;/td&gt;&lt;td&gt;Mac&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;省份,城市,设备类型&lt;/td&gt;&lt;td&gt;湖南&lt;/td&gt;&lt;td&gt;长沙&lt;/td&gt;&lt;td&gt;IOS&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;省份,城市,设备类型&lt;/td&gt;&lt;td&gt;湖南&lt;/td&gt;&lt;td&gt;邵阳&lt;/td&gt;&lt;td&gt;Android&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;省份,城市,设备类型&lt;/td&gt;&lt;td&gt;四川&lt;/td&gt;&lt;td&gt;成都&lt;/td&gt;&lt;td&gt;Windows&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;省份,城市,设备类型&lt;/td&gt;&lt;td&gt;湖北&lt;/td&gt;&lt;td&gt;武汉&lt;/td&gt;&lt;td&gt;Android&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;省份,城市,设备类型&lt;/td&gt;&lt;td&gt;湖北&lt;/td&gt;&lt;td&gt;武汉&lt;/td&gt;&lt;td&gt;IOS&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;h_508038040_16&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;区间&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;8_FkKob4&quot;&gt;相比于数列较多用于表示离散数据，区间往往用于描述连续的数据，虽然两者具有不同的数据特征，不过在实际应用中，数列与区间的处理具有较多相通性。本节将介绍一些常见的区间场景，并抽象出通用的解决方案。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_17&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;二鬼拍门&lt;/b&gt;&lt;/h3&gt;&lt;h3 id=&quot;h_508038040_18&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;区间分割&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;vEfvPwQo&quot;&gt;已知一个数值区间 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+%5Ba%2Cb%5D+%3D+%5C%7B+x+%7C+a+%5Cleq+x+%5Cleq+b+%5C%7D+&quot; alt=&quot; [a,b] = \{ x | a \leq x \leq b \} &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; ，如何将该区间均分成 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+n+&quot; alt=&quot; n &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; 段子区间？&lt;/p&gt;&lt;p data-pid=&quot;UWHNY4-Q&quot;&gt;该问题可以简化为数列问题，数列公式为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+a_n+%3D+a_1+%2B+%28n+-+1%29d+&quot; alt=&quot; a_n = a_1 + (n - 1)d &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; ，其中 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+a_1+%3D+a+&quot; alt=&quot; a_1 = a &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; ， &lt;img src=&quot;https://www.zhihu.com/equation?tex=+d+%3D+%28b+-+a%29+%2F+n+&quot; alt=&quot; d = (b - a) / n &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; ：&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;rLBODHMA&quot;&gt;生成一个长度为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+n+&quot; alt=&quot; n &quot; loading=&quot;lazy&quot; eeimg=&quot;1&quot;/&gt; 的数组，数组中的元素不需要具有实际含义；&lt;/li&gt;&lt;li data-pid=&quot;imicPj0T&quot;&gt;通过 UDTF 函数 posexplode 对数组中的每个元素生成索引下标；&lt;/li&gt;&lt;li data-pid=&quot;q_8ErFKX&quot;&gt;取出每个元素的索引下标，并进行数列公式计算，得出每个子区间的起始值与结束值。&lt;/li&gt;&lt;/ol&gt;&lt;p data-pid=&quot;JeEOHGKC&quot;&gt;SQL 实现：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 6
select
    a_1 + t.pos * d as sub_interval_start, -- 子区间起始值
    a_1 + (t.pos + 1) * d as sub_interval_end -- 子区间结束值
from (
    select posexplode(split(space(n - 1), space(1)))
) t;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;h_508038040_19&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;区间交叉&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;3Wzn_eDP&quot;&gt;已知两个日期区间存在交叉 [&#x27;2022-01-01&#x27;, &#x27;2022-01-03&#x27;] 、 [&#x27;2022-01-02&#x27;, &#x27;2022-01-04&#x27;]&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;E9SHb3tr&quot;&gt;如何合并两个日期区间，并返回合并后的新区间？&lt;/li&gt;&lt;li data-pid=&quot;VoWgwEC3&quot;&gt;如何知道哪些日期是交叉日期，并返回该日期交叉次数？&lt;/li&gt;&lt;/ol&gt;&lt;p data-pid=&quot;UAtkkIHA&quot;&gt;解决上述问题的方法有多种，此处介绍其中一种简单且通用的方案。 核心思路是结合数列生成、区间分割方法，先将日期区间分解为最小处理单元，即多个日期组成的数列，然后再基于日期粒度做统计。具体步骤如下：&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;iLC7MPIR&quot;&gt;获取每个日期区间包含的天数；&lt;/li&gt;&lt;li data-pid=&quot;72zlNEqr&quot;&gt;按日期区间包含的天数，将日期区间拆分为相应数量的递增日期序列；&lt;/li&gt;&lt;li data-pid=&quot;oLMWWfGY&quot;&gt;通过日期序列统计合并后的区间，交叉次数；&lt;/li&gt;&lt;/ol&gt;&lt;p data-pid=&quot;o4WHSqIg&quot;&gt;SQL 实现：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 7
with tbl as (
    select stack(
        2,
        &#x27;2022-01-01&#x27;, &#x27;2022-01-03&#x27;,
        &#x27;2022-01-02&#x27;, &#x27;2022-01-04&#x27;
    ) as (date_start, date_end)
)
select 
    min(date_item) as date_start_merged, 
    max(date_item) as date_end_merged, 
    collect_set( -- 交叉日期计数
        case when date_item_cnt &amp;gt; 1 then concat(date_item, &#x27;:&#x27;, date_item_cnt) else null end
    ) as overlap_date
from (
    select 
        -- 拆解后的单个日期
        date_add(date_start, pos) as date_item,
        -- 拆解后的单个日期出现的次数
        count(1) over(partition by date_add(date_start, pos)) as date_item_cnt
    from tbl
    lateral view posexplode(split(space(datediff(date_end, date_start)), space(1))) t as pos, val
) t;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table data-draft-node=&quot;block&quot; data-draft-type=&quot;table&quot; data-size=&quot;normal&quot; data-row-style=&quot;normal&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;date_start_merged&lt;/th&gt;&lt;th&gt;date_end_merged&lt;/th&gt;&lt;th&gt;overlap_date&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2022-01-01&lt;/td&gt;&lt;td&gt;2022-01-04&lt;/td&gt;&lt;td&gt;[&quot;2022-01-02:2&quot;,&quot;2022-01-03:2&quot;]&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p data-pid=&quot;CQkMHxzV&quot;&gt;&lt;b&gt;  增加点儿难度 ！&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;-JmYYdi-&quot;&gt;如果有多个日期区间，且区间之间交叉状态未知，上述问题又该如何求解。即：&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;5pMysqoq&quot;&gt;如何合并多个日期区间，并返回合并后的多个新区间？&lt;/li&gt;&lt;li data-pid=&quot;H9mKhjwP&quot;&gt;如何知道哪些日期是交叉日期，并返回该日期交叉次数？&lt;/li&gt;&lt;/ol&gt;&lt;p data-pid=&quot;u8cs4JQo&quot;&gt;SQL 实现：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 8
with tbl as (
    select stack(
        5,
        &#x27;2022-01-01&#x27;, &#x27;2022-01-03&#x27;,
        &#x27;2022-01-02&#x27;, &#x27;2022-01-04&#x27;,
        &#x27;2022-01-06&#x27;, &#x27;2022-01-08&#x27;,
        &#x27;2022-01-08&#x27;, &#x27;2022-01-08&#x27;,
        &#x27;2022-01-07&#x27;, &#x27;2022-01-10&#x27;
    ) as (date_start, date_end)
)
select
    min(date_item) as date_start_merged, 
    max(date_item) as date_end_merged,
    collect_set( -- 交叉日期计数
        case when date_item_cnt &amp;gt; 1 then concat(date_item, &#x27;:&#x27;, date_item_cnt) else null end
    ) as overlap_date
from (
    select 
        -- 拆解后的单个日期
        date_add(date_start, pos) as date_item,
        -- 拆解后的单个日期出现的次数
        count(1) over(partition by date_add(date_start, pos)) as date_item_cnt,
        -- 对于拆解后的单个日期，重组为新区间的标记
        date_add(date_add(date_start, pos), 1 - dense_rank() over(order by date_add(date_start, pos))) as cont
    from tbl
    lateral view posexplode(split(space(datediff(date_end, date_start)), space(1))) t as pos, val
) t
group by cont;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table data-draft-node=&quot;block&quot; data-draft-type=&quot;table&quot; data-size=&quot;normal&quot; data-row-style=&quot;normal&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;date_start_merged&lt;/th&gt;&lt;th&gt;date_end_merged&lt;/th&gt;&lt;th&gt;overlap_date&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2022-01-01&lt;/td&gt;&lt;td&gt;2022-01-04&lt;/td&gt;&lt;td&gt;[&quot;2022-01-02:2&quot;,&quot;2022-01-03:2&quot;]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2022-01-06&lt;/td&gt;&lt;td&gt;2022-01-10&lt;/td&gt;&lt;td&gt;[&quot;2022-01-07:2&quot;,&quot;2022-01-08:3&quot;]&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;h_508038040_20&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;应用场景举例&lt;/b&gt;&lt;/h3&gt;&lt;h3 id=&quot;h_508038040_21&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;如何按任意时段统计时间区间数据？&lt;/b&gt;&lt;/h3&gt;&lt;h3 id=&quot;h_508038040_22&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;场景描述&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;zWNDsQAF&quot;&gt;现有用户还款计划表 user_repayment ，该表内的一条数据，表示用户在指定日期区间内 [date_start, date_end] ，每天还款 repayment 元。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 9
with user_repayment as (
    select stack(
        3,
        &#x27;101&#x27;, &#x27;2022-01-01&#x27;, &#x27;2022-01-15&#x27;, 10,
        &#x27;102&#x27;, &#x27;2022-01-05&#x27;, &#x27;2022-01-20&#x27;, 20,
        &#x27;103&#x27;, &#x27;2022-01-10&#x27;, &#x27;2022-01-25&#x27;, 30
    ) as (user_id, date_start, date_end, repayment)
)
select * from user_repayment;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;N90ZojeZ&quot;&gt;如何统计某个时段内，每天所有用户的应还款总额？&lt;/p&gt;&lt;h3 id=&quot;h_508038040_23&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;解决思路&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;ITdaB4ka&quot;&gt;核心思路是将日期区间转换为日期序列，再按日期序列进行汇总统计。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_24&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;SQL 实现&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 10
select 
    date_item as day, 
    sum(repayment) as total_repayment
from (
    select 
        date_add(date_start, pos) as date_item,
        repayment
    from user_repayment
    lateral view posexplode(split(space(datediff(date_end, date_start)), space(1))) t as pos, val
) t
where date_item &amp;gt;= &#x27;2022-01-15&#x27; and date_item &amp;lt;= &#x27;2022-01-16&#x27;
group by date_item
order by date_item;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table data-draft-node=&quot;block&quot; data-draft-type=&quot;table&quot; data-size=&quot;normal&quot; data-row-style=&quot;normal&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;day&lt;/th&gt;&lt;th&gt;total_repayment&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2022-01-15&lt;/td&gt;&lt;td&gt;60&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2022-01-16&lt;/td&gt;&lt;td&gt;50&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;h_508038040_25&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;排列组合&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;JMrmQHtz&quot;&gt;排列组合是针对离散数据常用的数据组织方法，实际应用场景中又以组合更为常见，本节将分别介绍排列、组合的实现方法，并结合实例着重介绍通过组合对数据的处理。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_26&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;双马饮泉&lt;/b&gt;&lt;/h3&gt;&lt;h3 id=&quot;h_508038040_27&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;排列&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;20Ryiuwt&quot;&gt;已知字符序列 [ &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27; ] ，每次从该序列中可重复地选取出 2 个字符，如何获取到所有的排列？&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 11
select 
    concat(val1, val2) as perm
from (select split(&#x27;A,B,C&#x27;, &#x27;,&#x27;) as characters) dummy
lateral view explode(characters) t1 as val1
lateral view explode(characters) t2 as val2;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;C-vEsb-p&quot;&gt;整体实现比较简单。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_28&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;组合&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;8YimMt8d&quot;&gt;已知字符序列 [ &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27; ] ，每次从该序列中可重复地选取出 2 个字符，如何获取到所有的组合？&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 12
select 
    concat(least(val1, val2), greatest(val1, val2)) as comb
from (select split(&#x27;A,B,C&#x27;, &#x27;,&#x27;) as characters) dummy
lateral view explode(characters) t1 as val1
lateral view explode(characters) t2 as val2
group by least(val1, val2), greatest(val1, val2);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;d1CxD-f-&quot;&gt;整体实现比较简单。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_29&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;应用场景举例&lt;/b&gt;&lt;/h3&gt;&lt;h3 id=&quot;h_508038040_30&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;如何对比统计所有组合？&lt;/b&gt;&lt;/h3&gt;&lt;h3 id=&quot;h_508038040_31&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;场景描述&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;LzAuyJm8&quot;&gt;现有用户访问日志表 visit_log ，该表定义见 &lt;b&gt;快速制造测试数据&lt;/b&gt;。 如何按省份两两建立对比组，按对比组展示省份的用户访问量？&lt;/p&gt;&lt;table data-draft-node=&quot;block&quot; data-draft-type=&quot;table&quot; data-size=&quot;normal&quot; data-row-style=&quot;normal&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;对比组&lt;/th&gt;&lt;th&gt;省份&lt;/th&gt;&lt;th&gt;用户访问量&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;湖北-湖南&lt;/td&gt;&lt;td&gt;湖北&lt;/td&gt;&lt;td&gt;xxx&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;湖北-湖南&lt;/td&gt;&lt;td&gt;湖南&lt;/td&gt;&lt;td&gt;xxx&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;h_508038040_32&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;解决思路&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;3m7PJU2S&quot;&gt;核心思路是从所有省份列表中不重复地取出 2 个省份，生成所有的组合结果，然后关联 visit_log 表分组统计结果。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_33&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;SQL 实现&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 13
select
    combs.province_comb,
    log.province,
    count(1) as visit_count
from visit_log log
join ( -- 所有对比组
    select 
        concat(least(val1, val2), &#x27;-&#x27;, greatest(val1, val2)) as province_comb,
        least(val1, val2) as province_1, greatest(val1, val2) as province_2
    from (
        select collect_set(province) as provinces
        from visit_log
    ) dummy
    lateral view explode(provinces) t1 as val1
    lateral view explode(provinces) t2 as val2
    where val1 &amp;lt;&amp;gt; val2
    group by least(val1, val2), greatest(val1, val2)
) combs on 1 = 1
where log.province in (combs.province_1, combs.province_2)
group by combs.province_comb, log.province
order by combs.province_comb, log.province;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table data-draft-node=&quot;block&quot; data-draft-type=&quot;table&quot; data-size=&quot;normal&quot; data-row-style=&quot;normal&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;对比组&lt;/th&gt;&lt;th&gt;省份&lt;/th&gt;&lt;th&gt;用户访问量&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;四川-湖北&lt;/td&gt;&lt;td&gt;四川&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;四川-湖北&lt;/td&gt;&lt;td&gt;湖北&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;四川-湖南&lt;/td&gt;&lt;td&gt;四川&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;四川-湖南&lt;/td&gt;&lt;td&gt;湖南&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;湖北-湖南&lt;/td&gt;&lt;td&gt;湖北&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;湖北-湖南&lt;/td&gt;&lt;td&gt;湖南&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;h_508038040_34&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;连续&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;eRCfoBOl&quot;&gt;本节主要介绍连续性问题，重点描述了连续活跃场景。对于静态类型的连续活跃、动态类型的连续活跃，分别阐述了不同的实现方案。 本节内容直接贴近具体的应用，大部分篇幅以 SQL 内容为主。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_35&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;静态连续活跃场景统计&lt;/b&gt;&lt;/h3&gt;&lt;h3 id=&quot;h_508038040_36&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;场景描述&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;TWXeU9Um&quot;&gt;现有用户访问日志表 visit_log ，该表定义见 &lt;b&gt;快速制造测试数据&lt;/b&gt;。 如何获取连续登录大于或等于 2 天的用户？&lt;/p&gt;&lt;p data-pid=&quot;8BraI7QM&quot;&gt;上述问题在分析连续性时，获取连续性的结果以超过固定阈值为准，可归类为 &lt;b&gt;连续活跃大于 N 天的静态连续活跃场景统计&lt;/b&gt;。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_37&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;SQL 实现&lt;/b&gt;&lt;/h3&gt;&lt;h3 id=&quot;h_508038040_38&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;基于相邻日期差实现（ lag / lead 版）&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 14
select user_id
from (
    select 
        *,
        lag(dt, 2 - 1) over(partition by user_id order by dt) as lag_dt
    from (select dt, user_id from visit_log group by dt, user_id) t0
) t1
where datediff(dt, lag_dt) + 1 = 2
group by user_id;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;ZciMVFDG&quot;&gt;整体实现比较简单。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_39&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;基于相邻日期差实现（排序版）&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 15
select user_id
from (
    select *, 
        dense_rank() over(partition by user_id order by dt) as dr
    from visit_log
) t1
where datediff(dt, date_add(dt, 1 - dr)) + 1 = 2
group by user_id;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;bCHgsALV&quot;&gt;整体实现比较简单。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_40&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;基于连续活跃天数实现&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 16
select user_id
from (
    select 
        *,
        -- 连续活跃天数
        count(distinct dt) 
            over(partition by user_id, cont) as cont_days
    from (
        select 
            *, 
            date_add(dt, 1 - dense_rank() 
                over(partition by user_id order by dt)) as cont
        from visit_log
    ) t1
) t2
where cont_days &amp;gt;= 2
group by user_id;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;S4TcMlFt&quot;&gt;可以视作 &lt;b&gt;基于相邻日期差实现（排序版）&lt;/b&gt; 的衍生版本，该实现能获取到更多信息，如连续活跃天数。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_41&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;基于连续活跃区间实现&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 17
select user_id
from (
    select 
        user_id, cont, 
        -- 连续活跃区间
        min(dt) as cont_date_start, max(dt) as cont_date_end
    from (
        select 
            *, 
            date_add(dt, 1 - dense_rank() 
                over(partition by user_id order by dt)) as cont
        from visit_log
    ) t1
    group by user_id, cont
) t2
where datediff(cont_date_end, cont_date_start) + 1 &amp;gt;= 2
group by user_id;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;MlNnz0SI&quot;&gt;可以视作 &lt;b&gt;基于相邻日期差实现（排序版）&lt;/b&gt; 的衍生版本，该实现能获取到更多信息，如连续活跃区间。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_42&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;动态连续活跃场景统计&lt;/b&gt;&lt;/h3&gt;&lt;h3 id=&quot;h_508038040_43&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;场景描述&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;otsZyDOQ&quot;&gt;现有用户访问日志表 visit_log ，该表定义见 &lt;b&gt;快速制造测试数据&lt;/b&gt;。 如何获取最长的 2 个连续活跃，输出用户、最长连续活跃天数、最长连续活跃日期区间？&lt;/p&gt;&lt;p data-pid=&quot;xPgYZLXs&quot;&gt;上述问题在分析连续性时，获取连续性的结果不是且无法与固定的阈值作比较，而是各自以最长连续活跃作为动态阈值，可归类为 &lt;b&gt;动态连续活跃场景统计&lt;/b&gt;。&lt;/p&gt;&lt;h3 id=&quot;h_508038040_44&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;SQL 实现&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;nBHgf8dR&quot;&gt;基于 &lt;b&gt;静态连续活跃场景统计&lt;/b&gt; 的思路进行扩展即可，此处直接给出最终 SQL ：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- SQL - 18
select
    user_id, 
    -- 最长连续活跃天数
    datediff(max(dt), min(dt)) + 1 as cont_days,
    -- 最长连续活跃日期区间
    min(dt) as cont_date_start, max(dt) as cont_date_end
from (
    select 
        *, 
        date_add(dt, 1 - dense_rank() 
            over(partition by user_id order by dt)) as cont
    from visit_log
) t1
group by user_id, cont
order by cont_days desc
limit 2;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table data-draft-node=&quot;block&quot; data-draft-type=&quot;table&quot; data-size=&quot;normal&quot; data-row-style=&quot;normal&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;user_id&lt;/th&gt;&lt;th&gt;cont_days&lt;/th&gt;&lt;th&gt;cont_date_start&lt;/th&gt;&lt;th&gt;cont_date_end&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;101&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2022-01-01&lt;/td&gt;&lt;td&gt;2022-01-03&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;102&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2022-01-01&lt;/td&gt;&lt;td&gt;2022-01-02&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;h_508038040_45&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;结语&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;_S7ZgFKU&quot;&gt;&lt;b&gt;通过灵活的、散发性的数据处理思维，就可以用最简单的语法，解决复杂的数据场景&lt;/b&gt; 是本篇文章贯穿全文的思想。文中针对数列生成、区间变换、排列组合、连续判别等常见的场景，给出了相对通用的解决方案，并结合实例进行了实际运用的讲解。&lt;/p&gt;&lt;p data-pid=&quot;LyOINeuF&quot;&gt;本篇文章尝试独辟蹊径，强调灵活的数据处理思维，希望能让读者觉得眼前一亮，更希望真的能给读者产生帮助。同时毕竟个人能力有限，思路不一定是最优的，甚至可能出现错误，欢迎提出意见或建议。为了便于交流探讨，文中的每个 SQL 都标记了编号，可以直接在评论区 @SQL编号 沟通。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7673d947a67377feb1af45a57d9292b6</guid>
<title>DataX 快速入门</title>
<link>https://toutiao.io/k/ltbtbsk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;DataX 版本：3.0&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Github主页地址：https://github.com/alibaba/DataX&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DataX 是一个异构数据源离线同步工具，致力于实现包括关系型数据库(MySQL、Oracle等)、HDFS、Hive、ODPS、HBase、FTP 等各种异构数据源之间稳定高效的数据同步功能。具体请查阅：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0OTYwNTQ4Ng==&amp;amp;mid=2247485711&amp;amp;idx=1&amp;amp;sn=8910e6917b9fb0ad77081e1af36b07af&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;DataX 异构数据源离线同步&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 环境要求&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Linux&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JDK(1.8 以上，推荐 1.8)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Python(推荐 Python2.6.X)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 下载&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接下载 DataX 工具包：下载地址。下载后解压至本地 /opt 目录下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;tar -zxvf datax.tar.gz -C /opt/&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;除了直接下载安装包之外，你也可以下载 DataX 源码，自己编译&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进入 bin 目录，即可运行同步作业。可以运行如下自查脚本检查安装是否成功：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;python {YOUR_DATAX_HOME}/bin/datax.py {YOUR_DATAX_HOME}/job/job.json&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我们这需要运行如下语句：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;python /opt/datax/bin/datax.py /opt/datax/job/job.json&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到如下运行信息表示我们已经运行成功了：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.0984375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nKovjAe6Lrq9O0Uj9O4MPAYIBYiaHMfFsHQxDexynVL6HyzpjDTe8Q1W0IkClic7vs0DvQqPjxs3g6NYE0czvGeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. 示例&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们第一个简单示例是从 Stream 读取数据并打印到控制台。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1 查看配置模板&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;配置文件为 json 格式&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DataX 为不同的 Reader 和 Writer 分别提供了不同的配置模块，可以通过如下命令指定 Reader 和 Writer 查看配置模板：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;python {YOUR_DATAX_HOME}/bin/datax.py -r {YOUR_READER} -w {YOUR_WRITER}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这我们需要运行如下语句：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;python /opt/datax/bin/datax.py -r streamreader -w streamwriter&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出信息中包含了如下配置模板 JSON：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;    &lt;span&gt;&quot;job&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;content&quot;&lt;/span&gt;: [&lt;br/&gt;            {&lt;br/&gt;                &lt;span&gt;&quot;reader&quot;&lt;/span&gt;: {&lt;br/&gt;                    &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;streamreader&quot;&lt;/span&gt;,&lt;br/&gt;                    &lt;span&gt;&quot;parameter&quot;&lt;/span&gt;: {&lt;br/&gt;                        &lt;span&gt;&quot;column&quot;&lt;/span&gt;: [],&lt;br/&gt;                        &lt;span&gt;&quot;sliceRecordCount&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;                    }&lt;br/&gt;                },&lt;br/&gt;                &lt;span&gt;&quot;writer&quot;&lt;/span&gt;: {&lt;br/&gt;                    &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;streamwriter&quot;&lt;/span&gt;,&lt;br/&gt;                    &lt;span&gt;&quot;parameter&quot;&lt;/span&gt;: {&lt;br/&gt;                        &lt;span&gt;&quot;encoding&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;                        &lt;span&gt;&quot;print&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;                    }&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        ],&lt;br/&gt;        &lt;span&gt;&quot;setting&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;speed&quot;&lt;/span&gt;: {&lt;br/&gt;                &lt;span&gt;&quot;channel&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从配置模板中可以看到配置文件需要配置三部分&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;配置同步任务的读取端 reader：配置同步任务的读取端数据信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置同步任务的写入端 writer：配置同步任务的写入端数据信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置通道控制 setting：配置同步任务全局信息（不包含读取端、写入端外配置信息）。你可以在 setting 中进行同步速率配置，新版本DataX 3.0 提供了包括通道(并发)、记录流、字节流三种流控模式，可以随意控制你的作业速度。此外还提供了脏数据探测能力，可以实现脏数据精确过滤、识别、采集、展示，为用户提供多种的脏数据处理模式。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2 根据模板编写配置文件&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;(1) 配置同步任务的读取端&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过配置模板已生成了基本的读取端配置。此时你可以继续手动配置同步任务的读取端数据信息，如下所示输出5条记录，第一个字段数据类型为 Long 的 10，第二个字段数据类型为 String 的 &lt;code&gt;hello，DataX&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&quot;reader&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;streamreader&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;parameter&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;column&quot;&lt;/span&gt;: [&lt;br/&gt;          {&lt;br/&gt;              &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;long&quot;&lt;/span&gt;,&lt;br/&gt;              &lt;span&gt;&quot;value&quot;&lt;/span&gt;: &lt;span&gt;&quot;10&quot;&lt;/span&gt;&lt;br/&gt;          },&lt;br/&gt;          {&lt;br/&gt;              &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;string&quot;&lt;/span&gt;,&lt;br/&gt;              &lt;span&gt;&quot;value&quot;&lt;/span&gt;: &lt;span&gt;&quot;hello，DataX&quot;&lt;/span&gt;&lt;br/&gt;          }&lt;br/&gt;        ],&lt;br/&gt;        &lt;span&gt;&quot;sliceRecordCount&quot;&lt;/span&gt;: &lt;span&gt;&quot;5&quot;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;(2) 配置同步任务的写入端&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置完成读取端数据信息后，可以继续手动配置同步任务的写入端数据信息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&quot;writer&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;streamwriter&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;parameter&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;encoding&quot;&lt;/span&gt;: &lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;print&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;(3) 配置通道控制&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当上述步骤配置完成后，则需要配置同步速率：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&quot;setting&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;speed&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;channel&quot;&lt;/span&gt;: &lt;span&gt;&quot;1&quot;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建配置文件 stream2stream.json 并放入 /opt/datax/job/ 目录下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;    &lt;span&gt;&quot;job&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;content&quot;&lt;/span&gt;: [&lt;br/&gt;            {&lt;br/&gt;                &lt;span&gt;&quot;reader&quot;&lt;/span&gt;: {&lt;br/&gt;                    &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;streamreader&quot;&lt;/span&gt;,&lt;br/&gt;                    &lt;span&gt;&quot;parameter&quot;&lt;/span&gt;: {&lt;br/&gt;                        &lt;span&gt;&quot;column&quot;&lt;/span&gt;: [&lt;br/&gt;                          {&lt;br/&gt;                              &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;long&quot;&lt;/span&gt;,&lt;br/&gt;                              &lt;span&gt;&quot;value&quot;&lt;/span&gt;: &lt;span&gt;&quot;10&quot;&lt;/span&gt;&lt;br/&gt;                          },&lt;br/&gt;                          {&lt;br/&gt;                              &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;string&quot;&lt;/span&gt;,&lt;br/&gt;                              &lt;span&gt;&quot;value&quot;&lt;/span&gt;: &lt;span&gt;&quot;hello，DataX&quot;&lt;/span&gt;&lt;br/&gt;                          }&lt;br/&gt;                        ],&lt;br/&gt;                        &lt;span&gt;&quot;sliceRecordCount&quot;&lt;/span&gt;: &lt;span&gt;&quot;5&quot;&lt;/span&gt;&lt;br/&gt;                    }&lt;br/&gt;                },&lt;br/&gt;                &lt;span&gt;&quot;writer&quot;&lt;/span&gt;: {&lt;br/&gt;                    &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;streamwriter&quot;&lt;/span&gt;,&lt;br/&gt;                    &lt;span&gt;&quot;parameter&quot;&lt;/span&gt;: {&lt;br/&gt;                        &lt;span&gt;&quot;encoding&quot;&lt;/span&gt;: &lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;,&lt;br/&gt;                        &lt;span&gt;&quot;print&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;                    }&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        ],&lt;br/&gt;        &lt;span&gt;&quot;setting&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;speed&quot;&lt;/span&gt;: {&lt;br/&gt;                &lt;span&gt;&quot;channel&quot;&lt;/span&gt;: &lt;span&gt;&quot;1&quot;&lt;/span&gt;&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3 运行&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接运行如下命令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/opt/datax/bin/datax.py /opt/datax/job/stream2stream.json&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出如下信息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;DataX (DATAX-OPENSOURCE-3.0), From Alibaba !&lt;br/&gt;Copyright (C) 2010-2017, Alibaba Group. All Rights Reserved.&lt;br/&gt;&lt;br/&gt;2022-04-30 23:19:42.460 [main] INFO  VMInfo - VMInfo&lt;span&gt;# operatingSystem class =&amp;gt; sun.management.OperatingSystemImpl&lt;/span&gt;&lt;br/&gt;2022-04-30 23:19:42.469 [main] INFO  Engine - the machine info  =&amp;gt;&lt;br/&gt;&lt;br/&gt;...&lt;br/&gt;&lt;br/&gt;2022-04-30 23:19:42.492 [main] INFO  Engine -&lt;br/&gt;{&lt;br/&gt; &lt;span&gt;&quot;content&quot;&lt;/span&gt;:[&lt;br/&gt;  {&lt;br/&gt;   &lt;span&gt;&quot;reader&quot;&lt;/span&gt;:{&lt;br/&gt;    &lt;span&gt;&quot;name&quot;&lt;/span&gt;:&lt;span&gt;&quot;streamreader&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;parameter&quot;&lt;/span&gt;:{&lt;br/&gt;     &lt;span&gt;&quot;column&quot;&lt;/span&gt;:[&lt;br/&gt;      {&lt;br/&gt;       &lt;span&gt;&quot;type&quot;&lt;/span&gt;:&lt;span&gt;&quot;long&quot;&lt;/span&gt;,&lt;br/&gt;       &lt;span&gt;&quot;value&quot;&lt;/span&gt;:&lt;span&gt;&quot;10&quot;&lt;/span&gt;&lt;br/&gt;      },&lt;br/&gt;      {&lt;br/&gt;       &lt;span&gt;&quot;type&quot;&lt;/span&gt;:&lt;span&gt;&quot;string&quot;&lt;/span&gt;,&lt;br/&gt;       &lt;span&gt;&quot;value&quot;&lt;/span&gt;:&lt;span&gt;&quot;hello，DataX&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;     ],&lt;br/&gt;     &lt;span&gt;&quot;sliceRecordCount&quot;&lt;/span&gt;:&lt;span&gt;&quot;5&quot;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;   },&lt;br/&gt;   &lt;span&gt;&quot;writer&quot;&lt;/span&gt;:{&lt;br/&gt;    &lt;span&gt;&quot;name&quot;&lt;/span&gt;:&lt;span&gt;&quot;streamwriter&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;parameter&quot;&lt;/span&gt;:{&lt;br/&gt;     &lt;span&gt;&quot;encoding&quot;&lt;/span&gt;:&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;,&lt;br/&gt;     &lt;span&gt;&quot;print&quot;&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt; ],&lt;br/&gt; &lt;span&gt;&quot;setting&quot;&lt;/span&gt;:{&lt;br/&gt;  &lt;span&gt;&quot;speed&quot;&lt;/span&gt;:{&lt;br/&gt;   &lt;span&gt;&quot;channel&quot;&lt;/span&gt;:&lt;span&gt;&quot;1&quot;&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;2022-04-30 23:19:42.511 [main] WARN  Engine - prioriy &lt;span&gt;set&lt;/span&gt; to 0, because NumberFormatException, the value is: null&lt;br/&gt;2022-04-30 23:19:42.513 [main] INFO  PerfTrace - PerfTrace traceId=job_-1, isEnable=&lt;span&gt;false&lt;/span&gt;, priority=0&lt;br/&gt;2022-04-30 23:19:42.513 [main] INFO  JobContainer - DataX jobContainer starts job.&lt;br/&gt;2022-04-30 23:19:42.515 [main] INFO  JobContainer - Set jobId = 0&lt;br/&gt;2022-04-30 23:19:42.530 [job-0] INFO  JobContainer - jobContainer starts to &lt;span&gt;do&lt;/span&gt; prepare ...&lt;br/&gt;2022-04-30 23:19:42.531 [job-0] INFO  JobContainer - DataX Reader.Job [streamreader] &lt;span&gt;do&lt;/span&gt; prepare work .&lt;br/&gt;2022-04-30 23:19:42.532 [job-0] INFO  JobContainer - DataX Writer.Job [streamwriter] &lt;span&gt;do&lt;/span&gt; prepare work .&lt;br/&gt;2022-04-30 23:19:42.532 [job-0] INFO  JobContainer - jobContainer starts to &lt;span&gt;do&lt;/span&gt; split ...&lt;br/&gt;2022-04-30 23:19:42.532 [job-0] INFO  JobContainer - Job &lt;span&gt;set&lt;/span&gt; Channel-Number to 1 channels.&lt;br/&gt;2022-04-30 23:19:42.532 [job-0] INFO  JobContainer - DataX Reader.Job [streamreader] splits to [1] tasks.&lt;br/&gt;2022-04-30 23:19:42.533 [job-0] INFO  JobContainer - DataX Writer.Job [streamwriter] splits to [1] tasks.&lt;br/&gt;2022-04-30 23:19:42.549 [job-0] INFO  JobContainer - jobContainer starts to &lt;span&gt;do&lt;/span&gt; schedule ...&lt;br/&gt;2022-04-30 23:19:42.554 [job-0] INFO  JobContainer - Scheduler starts [1] taskGroups.&lt;br/&gt;2022-04-30 23:19:42.556 [job-0] INFO  JobContainer - Running by standalone Mode.&lt;br/&gt;2022-04-30 23:19:42.563 [taskGroup-0] INFO  TaskGroupContainer - taskGroupId=[0] start [1] channels &lt;span&gt;for&lt;/span&gt; [1] tasks.&lt;br/&gt;2022-04-30 23:19:42.567 [taskGroup-0] INFO  Channel - Channel &lt;span&gt;set&lt;/span&gt; byte_speed_limit to -1, No bps activated.&lt;br/&gt;2022-04-30 23:19:42.567 [taskGroup-0] INFO  Channel - Channel &lt;span&gt;set&lt;/span&gt; record_speed_limit to -1, No tps activated.&lt;br/&gt;2022-04-30 23:19:42.580 [taskGroup-0] INFO  TaskGroupContainer - taskGroup[0] taskId[0] attemptCount[1] is started&lt;br/&gt;10 hello，DataX&lt;br/&gt;10 hello，DataX&lt;br/&gt;10 hello，DataX&lt;br/&gt;10 hello，DataX&lt;br/&gt;10 hello，DataX&lt;br/&gt;2022-04-30 23:19:42.685 [taskGroup-0] INFO  TaskGroupContainer - taskGroup[0] taskId[0] is successed, used[107]ms&lt;br/&gt;2022-04-30 23:19:42.686 [taskGroup-0] INFO  TaskGroupContainer - taskGroup[0] completed it&lt;span&gt;&#x27;s tasks.&lt;br/&gt;2022-04-30 23:19:52.573 [job-0] INFO  StandAloneJobContainerCommunicator - Total 5 records, 65 bytes | Speed 6B/s, 0 records/s | Error 0 records, 0 bytes |  All Task WaitWriterTime 0.000s |  All Task WaitReaderTime 0.000s | Percentage 100.00%&lt;br/&gt;2022-04-30 23:19:52.573 [job-0] INFO  AbstractScheduler - Scheduler accomplished all tasks.&lt;br/&gt;2022-04-30 23:19:52.574 [job-0] INFO  JobContainer - DataX Writer.Job [streamwriter] do post work.&lt;br/&gt;2022-04-30 23:19:52.574 [job-0] INFO  JobContainer - DataX Reader.Job [streamreader] do post work.&lt;br/&gt;2022-04-30 23:19:52.575 [job-0] INFO  JobContainer - DataX jobId [0] completed successfully.&lt;br/&gt;2022-04-30 23:19:52.576 [job-0] INFO  HookInvoker - No hook invoked, because base dir not exists or is a file: /opt/datax/hook&lt;br/&gt;2022-04-30 23:19:52.579 [job-0] INFO  JobContainer -&lt;br/&gt;  [total cpu info] =&amp;gt;&lt;br/&gt;  averageCpu                     | maxDeltaCpu                    | minDeltaCpu&lt;br/&gt;  -1.00%                         | -1.00%                         | -1.00%&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;  [total gc info] =&amp;gt;&lt;br/&gt;   NAME                 | totalGCCount       | maxDeltaGCCount    | minDeltaGCCount    | totalGCTime        | maxDeltaGCTime     | minDeltaGCTime&lt;br/&gt;   PS MarkSweep         | 0                  | 0                  | 0                  | 0.000s             | 0.000s             | 0.000s&lt;br/&gt;   PS Scavenge          | 0                  | 0                  | 0                  | 0.000s             | 0.000s             | 0.000s&lt;br/&gt;&lt;br/&gt;2022-04-30 23:19:52.580 [job-0] INFO  JobContainer - PerfTrace not enable!&lt;br/&gt;2022-04-30 23:19:52.580 [job-0] INFO  StandAloneJobContainerCommunicator - Total 5 records, 65 bytes | Speed 6B/s, 0 records/s | Error 0 records, 0 bytes |  All Task WaitWriterTime 0.000s |  All Task WaitReaderTime 0.000s | Percentage 100.00%&lt;br/&gt;2022-04-30 23:19:52.581 [job-0] INFO  JobContainer -&lt;br/&gt;任务启动时刻                    : 2022-04-30 23:19:42&lt;br/&gt;任务结束时刻                    : 2022-04-30 23:19:52&lt;br/&gt;任务总计耗时                    :                 10s&lt;br/&gt;任务平均流量                    :                6B/s&lt;br/&gt;记录写入速度                    :              0rec/s&lt;br/&gt;读出记录总数                    :                   5&lt;br/&gt;读写失败总数                    :                   0&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0696d5d18d715d86678293f249ac8ba4</guid>
<title>给大家整个小说下载器，一起&amp;quot;欢度&amp;quot;五一~</title>
<link>https://toutiao.io/k/eunyqty</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;原理其实很简单，主要是从之前的几个下载器那里改过来的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NDI1MjkwNA==&amp;amp;mid=2247488833&amp;amp;idx=1&amp;amp;sn=2c0603e474f1221a8d7160767447f8f5&amp;amp;chksm=fc4c8cc6cb3b05d05ca167f6fffc6a5e33ff5bed47fbe27cc983ef6a7f6cc6779b88e8242c94&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;简单升级一下之前写的两款让生活更加舒心的下载器~&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;简单升级一下之前写的两款让生活更加舒心的下载器~&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NDI1MjkwNA==&amp;amp;mid=2247488666&amp;amp;idx=1&amp;amp;sn=48d321348227f18ee4c542358a0b90e6&amp;amp;chksm=fc4c8d1dcb3b040b6a79d77febe18769d2ff68b5ee03623b071f8e0fe4213c84222365344831&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;致敬Sci-Hub，带大家用python实现一波论文自由~&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;致敬Sci-Hub，带大家用python实现一波论文自由~&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只需要把sources改成解析并下载小说就可以了。具体而言，我们找了两个小说网站所为这个小说下载器的初始版本，后续有时间会继续添加。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;其中一个小说网站是八一中文网：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;从www.81zw.com搜索和下载小说&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Zw81Novel&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(BaseNovel)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, config=None, logger_handle=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        super(Zw81Novel, self).__init__(config=config, logger_handle=logger_handle)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        self.source = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;zw81&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        self.search_url = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;https://www.81zw.com/search.php?q={}&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;搜索&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, keyword)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        search_url = self.search_url.format(keyword)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        html = etree.HTML(self.session.get(search_url).content.decode(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;utf-8&#x27;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        novel_infos = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        titles = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;/html/body/div[3]/div/div[2]/h3/a/span/text()&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        authors = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;/html/body/div[3]/div/div[2]/div/p[1]/span[2]/text()&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        download_urls = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;/html/body/div[3]/div/div[2]/h3/a/@href&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; idx &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(len(authors)):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            title = filterBadCharacter(titles[idx])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            author = filterBadCharacter(authors[idx])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            download_url = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;https://www.81zw.com&#x27;&lt;/span&gt; + download_urls[idx]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            novel_infos.append({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;source&#x27;&lt;/span&gt;: self.source,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;: title,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;author&#x27;&lt;/span&gt;: author,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;download_url&#x27;&lt;/span&gt;: download_url,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; len(novel_infos) == self.config[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;search_size_per_source&#x27;&lt;/span&gt;]: &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; novel_infos&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;解析小说信息&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, novel_info)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        response = self.session.get(novel_info[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;download_url&#x27;&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; response.status_code != &lt;span class=&quot;code-snippet__number&quot;&gt;200&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; novel_info&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        html = etree.HTML(response.content.decode(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;utf-8&#x27;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        title = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;info&quot;]/h1/text()&#x27;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        author = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;info&quot;]/p[1]/text()&#x27;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].split(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;：&#x27;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        image_url = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;fmimg&quot;]/img/@src&#x27;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        introduction = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;intro&quot;]/text()&#x27;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        chapter_names_list = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;list&quot;]/dl/dt[1]//following-sibling::*/a/text()&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        chapter_urls_list = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;list&quot;]/dl/dt[1]//following-sibling::*/a/@href&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        chapters = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; idx &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(len(chapter_names_list)):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            chapters.append({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;: filterBadCharacter(chapter_names_list[idx]),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;download_url&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;http://www.81zw.com&#x27;&lt;/span&gt; + chapter_urls_list[idx]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        novel_info = {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;source&#x27;&lt;/span&gt;: self.source,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;: filterBadCharacter(title),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;author&#x27;&lt;/span&gt;: filterBadCharacter(author),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;image_url&#x27;&lt;/span&gt;: image_url,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;introduction&#x27;&lt;/span&gt;: introduction,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;chapters&#x27;&lt;/span&gt;: chapters,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;savedir&#x27;&lt;/span&gt;: self.config[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;savedir&#x27;&lt;/span&gt;],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; novel_info&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;另外一个是阁笔趣：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;从www.gebiqu.com搜索和下载小说&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;GeBiquNovel&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(BaseNovel)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, config=None, logger_handle=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        super(GeBiquNovel, self).__init__(config=config, logger_handle=logger_handle)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        self.source = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;gebiqu&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        self.search_url = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;https://www.gebiqu.com/modules/article/search.php?searchkey={}&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;搜索&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, keyword)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        search_url = self.search_url.format(keyword)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        html = etree.HTML(self.session.get(search_url).content.decode(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;utf-8&#x27;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        novel_infos = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        titles = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;nr&quot;]/td[1]/a/text()&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        authors = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;nr&quot;]/td[3]/text()&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        download_urls = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;nr&quot;]/td[2]/a/@href&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; idx &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(len(authors)):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            title = filterBadCharacter(titles[idx])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            author = filterBadCharacter(authors[idx])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            download_url = re.sub(&lt;span class=&quot;code-snippet__string&quot;&gt;r&#x27;\d*.html$&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;, str(download_urls[idx]))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            novel_infos.append({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;source&#x27;&lt;/span&gt;: self.source,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;: title,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;author&#x27;&lt;/span&gt;: author,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;download_url&#x27;&lt;/span&gt;: download_url,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; len(novel_infos) == self.config[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;search_size_per_source&#x27;&lt;/span&gt;]: &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; novel_infos&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;解析小说信息&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, novel_info)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        response = self.session.get(novel_info[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;download_url&#x27;&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; response.status_code != &lt;span class=&quot;code-snippet__number&quot;&gt;200&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; novel_info&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        html = etree.HTML(response.content.decode(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;utf-8&#x27;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        title = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;info&quot;]/h1/text()&#x27;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        author = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;info&quot;]/p[1]/text()&#x27;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].split(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;：&#x27;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        image_url = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;fmimg&quot;]/img/@src&#x27;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        introduction = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;intro&quot;]/p/text()&#x27;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        chapter_names_list = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;list&quot;]/dl/dt[2]//following-sibling::*/a/text()&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        chapter_urls_list = html.xpath(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;//*[@id=&quot;list&quot;]/dl/dt[2]//following-sibling::*/a/@href&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        chapters = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; idx &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(len(chapter_names_list)):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            chapters.append({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;: filterBadCharacter(chapter_names_list[idx]),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;download_url&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;http://www.gebiqu.com&#x27;&lt;/span&gt; + chapter_urls_list[idx]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        novel_info = {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;source&#x27;&lt;/span&gt;: self.source,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;: filterBadCharacter(title),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;author&#x27;&lt;/span&gt;: filterBadCharacter(author),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;image_url&#x27;&lt;/span&gt;: image_url,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;introduction&#x27;&lt;/span&gt;: introduction,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;chapters&#x27;&lt;/span&gt;: chapters,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;savedir&#x27;&lt;/span&gt;: self.config[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;savedir&#x27;&lt;/span&gt;],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; novel_info&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;都是很简单的xpath解析获取网页内容，就不过多介绍了~&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;大功告成啦，更多细节自己看源代码呗~&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8da1d366d74cf8236463c735b49bfa1e</guid>
<title>一款跨时代的高性能 Java 框架！启动速度快到飞起</title>
<link>https://toutiao.io/k/wbc5icw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你好呀，我是 Guide！这里是 JavaGuide 的&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2OTA0Njk0OA==&amp;amp;action=getalbum&amp;amp;album_id=1345382825083895808&amp;amp;scene=173&amp;amp;from_msgid=2247516459&amp;amp;from_itemidx=1&amp;amp;count=3&amp;amp;nolastread=1#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;「优质开源项目推荐」&lt;/a&gt;第 7 期，每一期我都会精选 5 个高质量的 Java 开源项目推荐给大家。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前 6 期的&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2OTA0Njk0OA==&amp;amp;action=getalbum&amp;amp;album_id=1345382825083895808&amp;amp;scene=173&amp;amp;from_msgid=2247516459&amp;amp;from_itemidx=1&amp;amp;count=3&amp;amp;nolastread=1#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;「优质开源项目推荐」&lt;/a&gt;传送门：&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Quarkus：云原生时代高性能 Java 框架&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6889915319476521&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TxwCqWZicNCCKmbXtg3OGpoOp2yic61C8OXRays3yLoLoHOUXDTMVdmlnHX1EKJw0cGM8ic7tant5DlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1299&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Quarkus（夸克斯） 是 RedHat 在 2018 年开源的一款专为云原生开发设计的 Java 框架，与 Kubernetes 紧密结合，可以提高构建微服务、无服务和基于云的应用程序的开发效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Quarkus 的启动速度非常快（为 GraalVM 量身定制），可以很方便集成 Docker 和 Kubernetes 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前，Quarkus 项目的提交已经接近 3w+，从提交看得出来维护的非常频繁。我个人还是非常看好这个项目的，绝对是云原生时代 Java 开发生态的一个利器。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8547008547008547&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TxwCqWZicNCCKmbXtg3OGpoOZa1icMtKDyVIlOhDia4k37Cl8uXmo7libbzzveTic5z0ghwTKfiaVqLzxZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1053&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或许是因为参考资料太少，或许是国内目前还没有 Quarkus 比较好的生产实践案例，又或是因为很多云原生相关的应用开发用 Go 比较多，Quarkus 这个项目目前在国内关注度一直不是很高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《Quarkus 实战——专为 Kubernetes 而优化的 Java 解决方案》是国内唯一的一本 Quarkus 中文书籍，2021 年 3 月份出版的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6295&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iaIdQfEric9TxwCqWZicNCCKmbXtg3OGpoO7kOZU83jXstVo9U5zGTwXB1IxiaiawAAFRPQkYubwShK56Dw3hgbRITw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2000&quot;/&gt;&lt;figcaption&gt;Quarkus cookbook 实战&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Github 地址：https://github.com/quarkusio/quarkus&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;官网：https://quarkus.io&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;BallCat：快速开发脚手架&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4945054945054945&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TxwCqWZicNCCKmbXtg3OGpoOQKkt5Vo0JvCnia40GBichCj69pib7J5iaXM1hyedcv5jibuFv7c1EK3gQRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BallCat 是一款开箱即用的快速开发脚手架，通过依赖的方式引入所需的模块即可使用，非常适合单体架构的企业级项目开发场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BallCat 的功能非常全面，包括但不限于定时任务，访问日志，操作日志，异常日志，统一异常处理，XSS 过滤，SQL 防注入，国际化。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8983050847457628&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TxwCqWZicNCCKmbXtg3OGpoOVPjrzl3G0NtNreBSGreJ8mpPZD2ZNUF1QjPvicdfyrwRS6vPs9CSTsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1239&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.04149377593361&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TxwCqWZicNCCKmbXtg3OGpoOy2xuEq1Wutx0VS6iaegV3K3mUaWGt18Kick03mVK8TgYyd6DzHvfskmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1205&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BallCat 后端基于 Spring Boot + Spring Security + Spring Security OAuth2 + Mybatis Plus + Hutool，前端有 React 和 Vue 两个版本。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Github 地址：https://github.com/ballcat-projects/ballcat&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Gitee 地址：https://gitee.com/ballcat-projects/ballcat&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;官网：http://www.ballcat.cn/&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Metrics：应用监控&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33195307108350586&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TxwCqWZicNCCKmbXtg3OGpoOibn71yuLegp6kwlXwRPKkWIbGBsiajPum7oRb29ibSg2PanwCuE7p63UA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1449&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Metrics 可以用来捕获 JVM 和应用程序级别的指标，比如你可以借助它对数据库进行健康检查。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Github 地址：https://github.com/dropwizard/metrics&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;官网：https://metrics.dropwizard.io/4.2.0/&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;goodsKill：模拟秒杀微服务项目&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39854486661277283&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TxwCqWZicNCCKmbXtg3OGpoOcicH7YXepBqicg1IW1UoQgS6Ju24ibonfQ2JKsmXSzRmdOedibrLic7AHoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1237&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;goodsKill 是一款基于 Spring Cloud + Seata + Dubbo+ ElasticSearch、ZooKeeper 的模拟秒杀微服务项目，用到了分库分表、消息队列等技术手段来提高系统的性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Github 地址：https://github.com/techa03/goodsKill&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;hertzbeat：易用友好的监控告警系统&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7302215189873418&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TxwCqWZicNCCKmbXtg3OGpoONDZHcNzCZ1J7JMC3Ac7ORCSibcxn2PpeTI7uhFrZlUh7icaiaZMoy2c1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1264&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hertzbeat（赫兹跳动） 是一款开箱即用的监控告警系统，由 Dromara 孵化，目前已是码云 GVP 项目。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hertzbeat 支持网站，API，PING，端口，数据库，操作系统等监控类型，支持邮箱，短信，webhook，钉钉，企业微信，飞书机器人等告警通知，拥有易用友好的可视化操作界面。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5728788977519942&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TxwCqWZicNCCKmbXtg3OGpoOtic6TaMetqnicGeibY9BE3PwYwdf7LS0mSk1HTAK8wuHdgcAsnbl55Oicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2758&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，hertzbeat 的作者本人目前已经离职，这个项目是其全职维护的第一个开源项目，值得点赞和鼓励！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5816203143893591&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TxwCqWZicNCCKmbXtg3OGpoOgibbWvc2SW6abQqsiaKrd0CyldfZaZKb6v5Yx17FPKvp1ATLEvl5dIxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;827&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你也想参与到这个项目开发的话，建议可以去看看这个项目的项目看板有哪些 todo，看板地址：https://github.com/dromara/hertzbeat/projects/1 。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8756019261637239&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TxwCqWZicNCCKmbXtg3OGpoOm0tjTkNLqBBdRStywym7xibmkh6NgPKwaLCVku06NxXn0vMrH1s6fMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1246&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Github 地址：https://github.com/dromara/hertzbeat&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Gitee 地址：https://gitee.com/dromara/hertzbeat&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;官网：https://hertzbeat.com/&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;更多优质 Java 项目&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想要获取更多优质 Java 开源项目，欢迎关注 awesome-java 这个开源项目（已经维护两年多了）。另外，欢迎大家推荐自己认可的 Java 开源项目，让我们共同维护一个优质的 Java 开源项目精选集！&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Github 地址：https://github.com/CodingDocs/awesome-java&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Gitee 地址：https://gitee.com/SnailClimb/awesome-java&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在线阅读（阅读原文即可直达）：https://javaguide.cn/open-source-project/&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8618867924528302&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TxwCqWZicNCCKmbXtg3OGpoOibyIF38yM3ehytEYIuCadauicyicsRKANuQcEUQ15jstPvR32yqWG9obQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1325&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;··········  END  ··············&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;近期文章精选&lt;/strong&gt; ：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果本文对你有帮助的话，欢迎&lt;strong&gt;点赞&lt;/strong&gt;&amp;amp;&lt;strong&gt;在看&lt;/strong&gt;&amp;amp;&lt;strong&gt;分享&lt;/strong&gt;，这对我继续分享&amp;amp;创作优质文章非常重要。感谢🙏🏻&lt;/p&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>