<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>061f1895c8978f9b5ce86c4fb2db3ac9</guid>
<title>用户画像的基础、原理、方法论（模型）和应用</title>
<link>https://toutiao.io/k/nrdp4oq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;用户画像（User Profile）的本质是用户需求描述，一种刻画用户需求的模型。&lt;/p&gt;&lt;p&gt;用户画像在推荐系统、广告系统、商业分析、数据分析、用户增长、用户研究、产品设计、数据化运营、精准营销、量化风控等领域得到广泛应用。&lt;/p&gt;&lt;p&gt;本文系统地构建了用户画像的知识体系。首先，介绍了用户画像的概念、要素、关系、意义等用户画像的基础知识；接着，介绍了用户画像的方法、分层标签、AARRR 用户分层模型、用户业务分层、分群标签、RFM 用户分群模型、用户属性分群、个性化标签、人工打标签、机器打标签、混合打标签、用户画像的原则、用户画像的评估等用户画像原理；然后，介绍百度的用户画像、微博的用户画像、今日头条的用户画像；最后，指出用户画像在推荐系统中的应用，以及用户画像的本质和用户画像面临的挑战。本文目录如下：&lt;/p&gt;&lt;blockquote&gt;1. 用户画像基础&lt;br/&gt;1.1. 用户&lt;br/&gt;1.2. 用户画像的概念&lt;br/&gt;1.3. 用户画像的要素&lt;br/&gt;1.4. 用户画像的关系&lt;br/&gt;1.5. 用户画像的意义&lt;br/&gt;&lt;br/&gt;2. 用户画像原理&lt;br/&gt;2.1. 用户画像的方法&lt;br/&gt;2.2. 分层标签（用户分层）&lt;br/&gt;2.2.1. AARRR 用户分层模型&lt;br/&gt;2.2.2. 用户业务分层&lt;br/&gt;2.3. 分群标签（用户分群）&lt;br/&gt;2.3.1. RFM 用户分群模型&lt;br/&gt;2.3.2. 用户属性分群&lt;br/&gt;2.4. 个性化标签（用户画像）&lt;br/&gt;2.4.1. 人工打标签&lt;br/&gt;2.4.2. 机器打标签&lt;br/&gt;2.4.3. 混合打标签&lt;br/&gt;2.5. 用户画像的原则&lt;br/&gt;2.6. 用户画像的评估&lt;br/&gt;&lt;br/&gt;3. 用户画像应用&lt;br/&gt;3.1. 百度的用户画像&lt;br/&gt;3.2. 微博的用户画像&lt;br/&gt;3.3. 今日头条的用户画像&lt;br/&gt;&lt;br/&gt;4. 用户画像总结&lt;br/&gt;4.1. 推荐系统的用户画像&lt;br/&gt;4.2. 用户画像的本质&lt;br/&gt;4.3. 用户画像的挑战&lt;/blockquote&gt;&lt;p&gt;接下来，让我一起走进用户画像的世界。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-10407ff90e1b0e1892cecaf918bb2166_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-10407ff90e1b0e1892cecaf918bb2166_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-10407ff90e1b0e1892cecaf918bb2166_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-10407ff90e1b0e1892cecaf918bb2166_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像的基础、原理、方法论（模型）和应用&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;1. 用户画像基础&lt;/b&gt;&lt;/h2&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-5e6f9073574721fec6b57fdcab8d3eeb_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-5e6f9073574721fec6b57fdcab8d3eeb_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-5e6f9073574721fec6b57fdcab8d3eeb_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-5e6f9073574721fec6b57fdcab8d3eeb_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像基础的目录&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1.1. 用户&lt;/b&gt;&lt;/p&gt;&lt;p&gt;要想搞清楚用户画像，首先得搞清楚用户。比如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;你的用户的特征是什么？&lt;/li&gt;&lt;li&gt;怎么描述用户需求？&lt;/li&gt;&lt;li&gt;不同阶段的用户特征又是什么？&lt;/li&gt;&lt;/ul&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3975852bd855b52dbbc699c2d15a74b5_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-3975852bd855b52dbbc699c2d15a74b5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-3975852bd855b52dbbc699c2d15a74b5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-3975852bd855b52dbbc699c2d15a74b5_b.jpg&quot;/&gt;&lt;figcaption&gt;用户&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;关于用户还有用户关键路径、用户旅程（customer journey map）、用户决策过程等等。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1.2. 用户画像的概念&lt;/b&gt;&lt;/p&gt;&lt;p&gt;怎样区分User Portrait（用户肖像）、Customer Segment（用户细分）、User Persona（用户角色）、User Profile（用户画像）？&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-441d413ddb906a8e74ace0da28bae30e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-441d413ddb906a8e74ace0da28bae30e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-441d413ddb906a8e74ace0da28bae30e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-441d413ddb906a8e74ace0da28bae30e_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像的概念&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;用户肖像、用户细分、用户角色和用户画像的对比如下表所示：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4782848dcd79e304995e984baadc9e77_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;749&quot; data-rawheight=&quot;269&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-4782848dcd79e304995e984baadc9e77_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;749&quot; data-rawheight=&quot;269&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-4782848dcd79e304995e984baadc9e77_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-4782848dcd79e304995e984baadc9e77_b.jpg&quot;/&gt;&lt;figcaption&gt;用户肖像、用户细分、用户角色和用户画像的对比&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;高层、产品、开发、市场、运营眼中的用户画像是什么？&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-34f7f50b17b72d8c31a0e862dec7ab32_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-34f7f50b17b72d8c31a0e862dec7ab32_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-34f7f50b17b72d8c31a0e862dec7ab32_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-34f7f50b17b72d8c31a0e862dec7ab32_b.jpg&quot;/&gt;&lt;figcaption&gt;高层、产品、开发、市场、运营眼中的用户画像&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;用户画像是刻画用户需求的模型。&lt;/p&gt;&lt;p&gt;用户画像是一种公共语言，串联互联网商业的高层、产品、开发、市场、运营等，提高沟通效率。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-bb451ce118c79ddfd617258257ebd65c_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-bb451ce118c79ddfd617258257ebd65c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-bb451ce118c79ddfd617258257ebd65c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-bb451ce118c79ddfd617258257ebd65c_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像是刻画用户需求的模型&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1.3. 用户画像的要素&lt;/b&gt;&lt;/p&gt;&lt;p&gt;用户画像的三要素：人、物、环境。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3b73cc0e9d84cb167463f330f698c6a5_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-3b73cc0e9d84cb167463f330f698c6a5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-3b73cc0e9d84cb167463f330f698c6a5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-3b73cc0e9d84cb167463f330f698c6a5_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像的要素&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1.4. 用户画像的关系&lt;/b&gt;&lt;/p&gt;&lt;p&gt;用户画像描述的是用户与物品的关系。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b4a38e61c9a78139c7498f247de3a018_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-b4a38e61c9a78139c7498f247de3a018_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-b4a38e61c9a78139c7498f247de3a018_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-b4a38e61c9a78139c7498f247de3a018_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像的关系&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1.5. 用户画像的意义&lt;/b&gt;&lt;/p&gt;&lt;p&gt;用户画像广泛应用在推荐系统、广告系统、商业分析、数据分析、用户增长、数据运营、精准营销、量化风控等领域。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-6ae884f1efdeeb97070b093ece59608c_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-6ae884f1efdeeb97070b093ece59608c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-6ae884f1efdeeb97070b093ece59608c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-6ae884f1efdeeb97070b093ece59608c_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像的意义&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;2. 用户画像原理&lt;/b&gt;&lt;/h2&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0d6989dc2ec5caa06f2a22fff79cbd15_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-0d6989dc2ec5caa06f2a22fff79cbd15_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-0d6989dc2ec5caa06f2a22fff79cbd15_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-0d6989dc2ec5caa06f2a22fff79cbd15_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像原理的目录&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;2.1. 用户画像的方法&lt;/b&gt;&lt;/p&gt;&lt;p&gt;用户画像的主流方法：用户标签化。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-140933f42664ebec57c87067d15d3946_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-140933f42664ebec57c87067d15d3946_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-140933f42664ebec57c87067d15d3946_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-140933f42664ebec57c87067d15d3946_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像的方法&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;标签是用户属性、兴趣、行为等特征的抽象与描述。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b33eaacd8a982decb0427229c109a63a_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-b33eaacd8a982decb0427229c109a63a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-b33eaacd8a982decb0427229c109a63a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-b33eaacd8a982decb0427229c109a63a_b.jpg&quot;/&gt;&lt;figcaption&gt;标签是用户属性、兴趣、行为等特征的抽象与描述&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;从分层标签、分群标签到个性化标签，正是一个由粗到细的过程。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a2f8c5b22626bed8612a1d76f5811446_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-a2f8c5b22626bed8612a1d76f5811446_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-a2f8c5b22626bed8612a1d76f5811446_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-a2f8c5b22626bed8612a1d76f5811446_b.jpg&quot;/&gt;&lt;figcaption&gt;分层标签、分群标签、个性化标签&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;2.2. 分层标签&lt;/b&gt;&lt;/p&gt;&lt;p&gt;将总体中各个用户按某种特征分成若干个互不重叠的几部分，每一部分叫做层。&lt;/p&gt;&lt;p&gt;分层标签是指根据分层规则，对用户进行分层而打的标签。&lt;/p&gt;&lt;p&gt;用户分层是指基于分层标签描述用户。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4fdc94a065f96e73360f19e330e95a0b_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-4fdc94a065f96e73360f19e330e95a0b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-4fdc94a065f96e73360f19e330e95a0b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-4fdc94a065f96e73360f19e330e95a0b_b.jpg&quot;/&gt;&lt;figcaption&gt;分层标签&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;2.2.1. AARRR 用户分层模型&lt;/p&gt;&lt;p&gt;举个用户分层的例子：AARRR 用户分层模型。&lt;/p&gt;&lt;p&gt;AARRR 模型是由Acquisition（获取）、Activation（激活）、Retention（留存）、Referral（推荐）、Revenue（变现）等五个部分组成，形成一个用户流量漏斗。&lt;/p&gt;&lt;p&gt;按“从&lt;b&gt;获取的用户&lt;/b&gt;到最终&lt;b&gt;推荐的用户&lt;/b&gt;的演进路线”进行分层如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-fd3e545f344598a80dcd92b43bf40054_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-fd3e545f344598a80dcd92b43bf40054_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-fd3e545f344598a80dcd92b43bf40054_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-fd3e545f344598a80dcd92b43bf40054_b.jpg&quot;/&gt;&lt;figcaption&gt;AARRR 用户分层模型&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;2.2.2. 用户业务分层&lt;/p&gt;&lt;p&gt;实际应用中，也可以基于具体业务进行用户分层。&lt;/p&gt;&lt;p&gt;比如：今日头条可以按资讯类别把用户分成科技用户、娱乐用户、游戏用户等等。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-dca8836f1f78c4bae72672339cbc96b2_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-dca8836f1f78c4bae72672339cbc96b2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-dca8836f1f78c4bae72672339cbc96b2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-dca8836f1f78c4bae72672339cbc96b2_b.jpg&quot;/&gt;&lt;figcaption&gt;用户业务分层&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;将同一层内的用户继续切分以满足精细化需求。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-00ffbcd135e1c67e9c6163776df5ded1_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-00ffbcd135e1c67e9c6163776df5ded1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-00ffbcd135e1c67e9c6163776df5ded1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-00ffbcd135e1c67e9c6163776df5ded1_b.jpg&quot;/&gt;&lt;figcaption&gt;将同一层内的用户继续切分以满足精细化需求&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;所以还需要继续切分，获取分群标签。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;2.3. 分群标签&lt;/b&gt;&lt;/p&gt;&lt;p&gt;按照指定规则，将总体中若干个用户合并为组，这样的组称为群。&lt;/p&gt;&lt;p&gt;分群标签是指根据分群规则，对用户进行分群而打的标签。&lt;/p&gt;&lt;p&gt;用户分群是指基于分群标签描述用户。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f6bbbaf0eb4eb7c920efab621fb584ee_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-f6bbbaf0eb4eb7c920efab621fb584ee_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-f6bbbaf0eb4eb7c920efab621fb584ee_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-f6bbbaf0eb4eb7c920efab621fb584ee_b.jpg&quot;/&gt;&lt;figcaption&gt;分群标签&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;2.3.1. RFM 用户分群模型&lt;/p&gt;&lt;p&gt;举个用户分层的例子：RFM 用户分群模型（Recency、Frequency、Monetary ）。&lt;/p&gt;&lt;p&gt;RFM是根据用户活跃程度、交易金额的贡献，对用户价值进行分群的一种方法。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-068af61c95b8eed0f2cf1aa57889bfe9_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-068af61c95b8eed0f2cf1aa57889bfe9_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-068af61c95b8eed0f2cf1aa57889bfe9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-068af61c95b8eed0f2cf1aa57889bfe9_b.jpg&quot;/&gt;&lt;figcaption&gt;RFM 用户分群模型&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;RFM 的 8 个象限分别表示 8 类用户如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-73b2c57c6adfec2ac331c6bf383d2b18_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-73b2c57c6adfec2ac331c6bf383d2b18_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-73b2c57c6adfec2ac331c6bf383d2b18_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-73b2c57c6adfec2ac331c6bf383d2b18_b.jpg&quot;/&gt;&lt;figcaption&gt;RFM 的 8 个象限分别表示 8 类用户&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;2.3.2. 用户属性分群&lt;/p&gt;&lt;p&gt;实际应用中，也可以基于用户属性（自然属性、社会属性）进行分群。&lt;/p&gt;&lt;p&gt;比如“北京-男-程序员”的体育用户群体。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-49b961c1563934f716abd5c76686ae2d_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-49b961c1563934f716abd5c76686ae2d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-49b961c1563934f716abd5c76686ae2d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-49b961c1563934f716abd5c76686ae2d_b.jpg&quot;/&gt;&lt;figcaption&gt;用户属性分群&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;将同一群内的用户继续切分以满足个性化需求。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8b2abacf4031a1725bc0daf1b557027d_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-8b2abacf4031a1725bc0daf1b557027d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-8b2abacf4031a1725bc0daf1b557027d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-8b2abacf4031a1725bc0daf1b557027d_b.jpg&quot;/&gt;&lt;figcaption&gt;将同一群内的用户继续切分以满足个性化需求&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;所以还需要继续切分，获取个性化标签。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;2.4. 个性化标签&lt;/b&gt;&lt;/p&gt;&lt;p&gt;全面、完整、细致地标签化用户个性化特征。&lt;/p&gt;&lt;p&gt;通常把用户的个性化标签近似称为用户画像。&lt;/p&gt;&lt;p&gt;个性化标签生成主要三种方式：人工打标签、机器打标签、混合打标签（人工+机器）。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e4427a8ddb8fad2d32577e6b6ccf1a98_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-e4427a8ddb8fad2d32577e6b6ccf1a98_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-e4427a8ddb8fad2d32577e6b6ccf1a98_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-e4427a8ddb8fad2d32577e6b6ccf1a98_b.jpg&quot;/&gt;&lt;figcaption&gt;个性化标签&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;2.4.1. 人工打标签&lt;/p&gt;&lt;p&gt;人工打标签，即手动打标签，可以打上自然属性标签、社会属性标签、关系属性标签等。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-85ff28d9f67e8877a53c3b0437600985_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-85ff28d9f67e8877a53c3b0437600985_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-85ff28d9f67e8877a53c3b0437600985_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-85ff28d9f67e8877a53c3b0437600985_b.jpg&quot;/&gt;&lt;figcaption&gt;人工打标签&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;2.4.2. 机器打标签&lt;/p&gt;&lt;p&gt;机器打标签，也称自动打标签，是指根据用户消费过的文本、图片、视频等数据，机器自动学习出用户兴趣、喜好等标签。&lt;/p&gt;&lt;p&gt;比如，对文本进行机器打标签，其标签类型有：关键词标签、实体标签、类别标签、聚合标签、主题标签、Embedding标签等。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-47a64983c79c1b549d03a93876be5f8e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-47a64983c79c1b549d03a93876be5f8e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-47a64983c79c1b549d03a93876be5f8e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-47a64983c79c1b549d03a93876be5f8e_b.jpg&quot;/&gt;&lt;figcaption&gt;机器打标签&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;具体机器怎么打标签，这里不过多展开。感兴趣的可以参考我之前写的相关文章，比如：&lt;/p&gt;&lt;p&gt;“分类标签“的原理和代码实现，可参考：&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://zhuanlan.zhihu.com/p/270458779&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-a6828bdaec5b0a6817fb892475e33251_180x120.jpg&quot; data-image-width=&quot;1920&quot; data-image-height=&quot;1080&quot; class=&quot;LinkCard old LinkCard--hasImage&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;/&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;刘启林：机器学习：二分类、多分类、多标签分类的概述、原理、算法和工具&lt;/span&gt;&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;span&gt;​&lt;svg class=&quot;Zi Zi--InsertLink&quot; fill=&quot;currentColor&quot; viewbox=&quot;0 0 24 24&quot;&gt;&lt;path d=&quot;M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;zhuanlan.zhihu.com&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-imageCell&quot;&gt;&lt;img class=&quot;LinkCard-image LinkCard-image--horizontal&quot; alt=&quot;图标&quot; src=&quot;https://pic2.zhimg.com/v2-a6828bdaec5b0a6817fb892475e33251_180x120.jpg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;p&gt;“实体标签“的原理和代码实现，可参考：&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://zhuanlan.zhihu.com/p/156914795&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-f70ff012625e57ca8723a96af933b2b1_180x120.jpg&quot; data-image-width=&quot;1920&quot; data-image-height=&quot;1080&quot; class=&quot;LinkCard old LinkCard--hasImage&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;/&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;刘启林：中文命名实体识别NER的原理、方法与工具&lt;/span&gt;&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;span&gt;​&lt;svg class=&quot;Zi Zi--InsertLink&quot; fill=&quot;currentColor&quot; viewbox=&quot;0 0 24 24&quot;&gt;&lt;path d=&quot;M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;zhuanlan.zhihu.com&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-imageCell&quot;&gt;&lt;img class=&quot;LinkCard-image LinkCard-image--horizontal&quot; alt=&quot;图标&quot; src=&quot;https://pic2.zhimg.com/v2-f70ff012625e57ca8723a96af933b2b1_180x120.jpg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;p&gt;2.4.3. 混合打标签&lt;/p&gt;&lt;p&gt;首先，先人工打分层标签、分群标签等粗粒度标签；&lt;/p&gt;&lt;p&gt;然后，再用机器打细粒度标签。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f4b6bd19e1504f3c894de0c7d5afe444_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-f4b6bd19e1504f3c894de0c7d5afe444_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-f4b6bd19e1504f3c894de0c7d5afe444_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-f4b6bd19e1504f3c894de0c7d5afe444_b.jpg&quot;/&gt;&lt;figcaption&gt;混合打标签&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;2.5. 用户画像的原则&lt;/b&gt;&lt;/p&gt;&lt;p&gt;真实性：真实的用户数据，而不是想象的伪需求画像。&lt;/p&gt;&lt;p&gt;统一性：用户标签与物品标签要统一，双向匹配。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d91e059f688b501517436bed49af50ae_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-d91e059f688b501517436bed49af50ae_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-d91e059f688b501517436bed49af50ae_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-d91e059f688b501517436bed49af50ae_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像的原则&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;2.6. 用户画像的评估&lt;/b&gt;&lt;/p&gt;&lt;p&gt;通过业务指标、离线指标、线上指标来评估用户画像的准确率和覆盖率。&lt;/p&gt;&lt;p&gt;线上评估用户画像的指标有画像有点数、画像有点率。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3f9e0e30fba517d7b54be00d1c71958a_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-3f9e0e30fba517d7b54be00d1c71958a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-3f9e0e30fba517d7b54be00d1c71958a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-3f9e0e30fba517d7b54be00d1c71958a_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像的评估&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;其实，线上评估用户画像依赖A/B测试（也称A/B试验）。&lt;/p&gt;&lt;p&gt;A/B测试的原理和代码这里也不不进行展开，感兴趣的可以参考我之前写的相关文章：&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://zhuanlan.zhihu.com/p/346602966&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-ccc76edefbd93d68d5a808828352a9dd_180x120.jpg&quot; data-image-width=&quot;1920&quot; data-image-height=&quot;1080&quot; class=&quot;LinkCard old LinkCard--hasImage&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;/&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;刘启林：A/B测试(A/B试验)的概述、原理、公式推导、Python实现和应用&lt;/span&gt;&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;span&gt;​&lt;svg class=&quot;Zi Zi--InsertLink&quot; fill=&quot;currentColor&quot; viewbox=&quot;0 0 24 24&quot;&gt;&lt;path d=&quot;M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;zhuanlan.zhihu.com&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-imageCell&quot;&gt;&lt;img class=&quot;LinkCard-image LinkCard-image--horizontal&quot; alt=&quot;图标&quot; src=&quot;https://pic2.zhimg.com/v2-ccc76edefbd93d68d5a808828352a9dd_180x120.jpg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h2&gt;3. 用户画像应用&lt;/h2&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c8ae5e113fcf258d491cd497c5366477_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-c8ae5e113fcf258d491cd497c5366477_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-c8ae5e113fcf258d491cd497c5366477_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-c8ae5e113fcf258d491cd497c5366477_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像应用的目录&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;3.1. 百度的用户画像&lt;/b&gt;&lt;/p&gt;&lt;p&gt;百度的用户画像框架如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1984361aefa799fe08dec317ab0df263_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-1984361aefa799fe08dec317ab0df263_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-1984361aefa799fe08dec317ab0df263_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-1984361aefa799fe08dec317ab0df263_b.jpg&quot;/&gt;&lt;figcaption&gt;百度的用户画像框架&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;3.2. 微博的用户画像&lt;/b&gt;&lt;/p&gt;&lt;p&gt;微博的用户画像框架如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7517d574573f7fc6bda0ba524d8ed5f0_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-7517d574573f7fc6bda0ba524d8ed5f0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-7517d574573f7fc6bda0ba524d8ed5f0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-7517d574573f7fc6bda0ba524d8ed5f0_b.jpg&quot;/&gt;&lt;figcaption&gt;微博的用户画像框架&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;3.3. 今日头条的用户画像&lt;/b&gt;&lt;/p&gt;&lt;p&gt;今日头条的用户画像框架如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-77d1534930509b38989b0c57d3d3ed51_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-77d1534930509b38989b0c57d3d3ed51_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-77d1534930509b38989b0c57d3d3ed51_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-77d1534930509b38989b0c57d3d3ed51_b.jpg&quot;/&gt;&lt;figcaption&gt;今日头条的用户画像框架&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;百度、微博、今日头条的用户画像对比如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7e006620a8909312430384f69be6744d_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;627&quot; data-rawheight=&quot;177&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-7e006620a8909312430384f69be6744d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;627&quot; data-rawheight=&quot;177&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-7e006620a8909312430384f69be6744d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-7e006620a8909312430384f69be6744d_b.jpg&quot;/&gt;&lt;figcaption&gt;百度、微博、今日头条的用户画像对比&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;4. 用户画像总结&lt;/b&gt;&lt;/h2&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e6c70f16a0b7307606d5743d1bef2c56_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-e6c70f16a0b7307606d5743d1bef2c56_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-e6c70f16a0b7307606d5743d1bef2c56_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-e6c70f16a0b7307606d5743d1bef2c56_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像总结的目录&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;4.1. 推荐系统的用户画像&lt;/b&gt;&lt;/p&gt;&lt;p&gt;推荐系统中，用户画像是给机器看得，不是给人看的。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-22b7319aabcd8713933288a1314afba2_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-22b7319aabcd8713933288a1314afba2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-22b7319aabcd8713933288a1314afba2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-22b7319aabcd8713933288a1314afba2_b.jpg&quot;/&gt;&lt;figcaption&gt;推荐系统的用户画像&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;用户画像在推荐系统中的应用：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;召回阶段：用户画像用于物品过滤&lt;/li&gt;&lt;li&gt;排序阶段：用户画像用于物品排序&lt;/li&gt;&lt;/ul&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3209e216a0fdaa1e8de410295fb3d1de_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-3209e216a0fdaa1e8de410295fb3d1de_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-3209e216a0fdaa1e8de410295fb3d1de_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-3209e216a0fdaa1e8de410295fb3d1de_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像在推荐系统中的应用&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;4.2. 用户画像的本质&lt;/b&gt;&lt;/p&gt;&lt;p&gt;用户画像是刻画用户需求的模型，所以用户画像的本质是用户需求。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-5e75c0ff3b7bb5061c5a1e0bec9028e3_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-5e75c0ff3b7bb5061c5a1e0bec9028e3_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-5e75c0ff3b7bb5061c5a1e0bec9028e3_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-5e75c0ff3b7bb5061c5a1e0bec9028e3_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像的本质&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;4.3. 用户画像的挑战&lt;/b&gt;&lt;/p&gt;&lt;p&gt;用户画像其实是用过去预测现在，但用户需求变化很快。&lt;/p&gt;&lt;p&gt;用户画像若只刻画自己喜欢的东西，容易陷入&lt;b&gt;信息茧房。&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7b1ae74eaae5e244fb5e9fc48381c0ef_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-7b1ae74eaae5e244fb5e9fc48381c0ef_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-7b1ae74eaae5e244fb5e9fc48381c0ef_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-7b1ae74eaae5e244fb5e9fc48381c0ef_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像的挑战&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;结束语：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;用户画像的本质是用户需求，用户需求是商业的起点。那么，&lt;/p&gt;&lt;p&gt;你能用一句话描述你的用户是谁吗？&lt;/p&gt;&lt;p&gt;你的用户群体特征是什么吗？&lt;/p&gt;&lt;p&gt;你可以详细地描述你的用户的需求吗？&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;参考文献：&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-9bc2d73adad9e53e9057be059cb5b5cf_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-9bc2d73adad9e53e9057be059cb5b5cf_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-9bc2d73adad9e53e9057be059cb5b5cf_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-9bc2d73adad9e53e9057be059cb5b5cf_b.jpg&quot;/&gt;&lt;figcaption&gt;用户画像的参考文献&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;能力和水平有限，我的可能是错的。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-bc10b111a2493551ae863f1824eb8f80_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-bc10b111a2493551ae863f1824eb8f80_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;960&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-bc10b111a2493551ae863f1824eb8f80_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-bc10b111a2493551ae863f1824eb8f80_b.jpg&quot;/&gt;&lt;figcaption&gt;能力和水平有限，我的可能是错的&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;扩展阅读：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;有了真实的用户需求，接着提供对应的产品或者服务，然后会面临一个新的挑战：用户增长。&lt;/p&gt;&lt;p&gt;用户增长的原理和方法论（模型）可参考：&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://zhuanlan.zhihu.com/p/353255352&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic4.zhimg.com/v2-92bafda3864b6d4906c99e17d80f93e7_180x120.jpg&quot; data-image-width=&quot;1920&quot; data-image-height=&quot;1080&quot; class=&quot;LinkCard old LinkCard--hasImage&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;/&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;刘启林：用户增长的基础、原理和方法论（模型）&lt;/span&gt;&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;span&gt;​&lt;svg class=&quot;Zi Zi--InsertLink&quot; fill=&quot;currentColor&quot; viewbox=&quot;0 0 24 24&quot;&gt;&lt;path d=&quot;M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;zhuanlan.zhihu.com&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-imageCell&quot;&gt;&lt;img class=&quot;LinkCard-image LinkCard-image--horizontal&quot; alt=&quot;图标&quot; src=&quot;https://pic4.zhimg.com/v2-92bafda3864b6d4906c99e17d80f93e7_180x120.jpg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;p/&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7fdde3e7da4ef6fa0fea778f8e3bf529</guid>
<title>低代码开发到底有什么应用价值？</title>
<link>https://toutiao.io/k/tvdht9b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;container app-preview post-body&quot;&gt;
  &lt;div class=&quot;preview&quot;&gt;&lt;p&gt;1999年，前甲骨文副总裁Marc Benioff创立Sales force，提出“软件终结”口号，开启了低代码应用开发的全新旅。&lt;/p&gt;

&lt;p&gt;Mendix低代码领域开发平台成立于2001年，2018年8月被西门子以6亿欧元收购。&lt;/p&gt;

&lt;p&gt;OutSystems低代码开发平台成立于2002年，2018年6月被KKR和高盛公司联手以3.6亿美元收购。&lt;/p&gt;

&lt;p&gt;另外，科技巨头们也都纷纷推出自己的低代码开发平台产品，微软在2015年发布了Power Apps、Google在2018年开始测试App Maker。&lt;/p&gt;

&lt;p&gt;在国内，低代码开发平台也如雨后春笋般快速发展起来。APICloud、简道云等如今都加入了低代码赛道，科技巨头华为、阿里纷纷推出自己的低代码开发平台App Cube和宜搭，就连国内的软件巨头用友、金蝶也分别推出了YonBuilder、金蝶云苍穹低代码开发平台。&lt;/p&gt;

&lt;p&gt;对软件行业不太熟悉的人，可能还不太了解，为什么低代码开发会引起阿里、华为、金蝶、用友等行业巨头的重视？它的价值到底在哪里？&lt;/p&gt;

&lt;p&gt;首先，用一张图来展现传统应用开发模式与低代码开发模式的对比：&lt;/p&gt;

&lt;p&gt;低代码开发平台的优势：&lt;/p&gt;

&lt;h3&gt;1.  成本降低、效率显著提高&lt;/h3&gt;

&lt;p&gt;低代码开发至少可以节省80%的代码量，传统开发模式需要一周才能完成的工作，低代码开发平台通常一天就可以做到。Forrester Research的副总裁兼首席分析师John Rymer在2018年的报告中指出，低代码平台，它们使软件开发速度比传统方法快10倍，正在成为加速应用交付关键战略，从而为数字业务转型提供支持。&lt;/p&gt;

&lt;h3&gt;2.  易于维护、灵活扩展&lt;/h3&gt;

&lt;p&gt;在应用开发的整个生命周期中，必须不断地进行调试、更新、修复和更改，传统应用程序的维护和升级都会耗费大量的人力成本，而低代码平台可以使这一过程变得简单快捷。此外，低代码平台还支持跨平台部署、第三方API对接，可以实现组件化扩展。&lt;/p&gt;

&lt;h3&gt;3.  可视化、门槛低&lt;/h3&gt;

&lt;p&gt;通过可视化的拖拉拽，生成页面元素与应用，因此，非专业人士也可以通过这种画布式设计完成心中所想同时可以快速、低门槛地完成非专业人士心中所想，在各大低代码平台网站展示出的案例中，我们都可以看到从未接触过代码的其他行业人员轻松上手、迅速构建。&lt;/p&gt;

&lt;p&gt;所以，低代码/无代码平台对于企业来讲真正的核心价值在于降本增效。经过实践证明，低代码/无代码平台不仅仅可以做边缘性、扩展性应用，对于复杂应用，同样具备优势；其次，低代码/无代码平台更讲究“快”，开发速度要快、交付要快，更重要的是敏捷修改，在某些特定场景，效率能提高几十倍。此外，可视化编程实现了应用程序所需90%的功能，专业开发人员只需关注剩下的10%创新代码逻辑，迅速提高开发效率，最大化创新开发人员的价值，提高研发团队战斗力。&lt;/p&gt;

&lt;p&gt;国内的低代码开发平台方兴未艾，究竟谁能成为中国版的Sales force，让我们拭目以待。&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e89a421b8771e8536c9b0912d3317522</guid>
<title>什么是电商 API？这是它能给电商开发人员带来 12 种好处</title>
<link>https://toutiao.io/k/g05k38l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;随着诸如物联网（IoT），人工智能（AI），增强现实/虚拟现实（AR / VR）以及区块链等技术的兴起，电商行业也因此受益良多。在与电商相关的数十种技术中，有一种可以将所有行业发展优势汇集到电商业务上的技术。那就是通过API服务相互连接各种技术来改善电商应用程序和网站。&lt;/p&gt;

&lt;p&gt;电商API帮助开发人员将信息从一款软件转移到另一款，然后在单个用户界面中使用这些数据或功能。目前来说，API是与各种解决方案集成的可扩展平台，因此电商公司可以利用其电商平台或其他供应商提供的现有功能，而无需从头开始构建一个新的平台或开发一个新功能。&lt;/p&gt;

&lt;p&gt;如果你还不熟悉什么是API，这篇文章可以帮到你API的基础知识。&lt;/p&gt;

&lt;p&gt;电商API&lt;/p&gt;

&lt;p&gt;API集成对电子商务平台的好处
API可以将多个平台的数据和功能相互集成。 例如，您可以将您的电商网站/平台与物流运输服务供应商的账户集成，并导入订单和运输数据。 这样，你就只需在一个平台上进行快递运输操作。&lt;/p&gt;

&lt;p&gt;电商订单仓储管理API可以通过集成API进行诸如订单履行、快递管理、标签管理、发票管理、订单打印、货运信息、物流跟踪和签收通知等等的功能来帮助企业实现订单管理、发货管理和运输管理的自动化，简化其物流仓储运营，从而实现成本降低。&lt;/p&gt;

&lt;p&gt;因此，如果你想要玩转电商运营和实现效率性成本控制，则需要用一个API把仓储软件和物流运输软件的功能集成起来。以下是API能够给电商用户带来的5种好处：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;可扩展性&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;API可以用来连接不同的软件，并通过接收请求和发送响应使它们彼此实现数据交互。它扩展了应用程序或网站的功能，可帮助您更快地完成一些重复性的复制粘贴工作。重要的是，它还简化了信息共享。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;增强安全性&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;API允许你的用户从你的系统请求数据来增强软件系统的安全性。该API通过诸如加密之类的安全措施来保护您的电子商务数据。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;可重用性&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;API是基于自定义和自助服务而构建的，因此API用户可以在多个平台和应用程序之间重复使用和交互数据。可重复使用和交互数据的的特性帮助开发人员减少许多重复性工作和把时间和精力花在真正有价值的项目上，从而提高了开发人员的生产力。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;高可扩展性&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;API可以连接到任何新系统，而无需在原始系统，程序或硬件上进行任何更改。只需几行代码即可与任何新系统连接，并提供可伸缩性以处理更复杂的事务。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;高同步&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于API可以实现多平台功能集成，你可以根据你特定业务需求创建修改你的上线商店，例如从其他应用程序和软件中选择适合你的落地页、文案、推广渠道等等。&lt;/p&gt;

&lt;p&gt;通过集成系统，一家公司可以连接到其他公司的软件和应用程序，以管理最能满足其需求的数据，运输渠道，产品和服务。&lt;/p&gt;

&lt;p&gt;API进步涉及到我们所有人。现在，让我们了解三种常见的API模型类型，它们可以从系统中获取数据，将数据转化为流程或创造一种体验。&lt;/p&gt;

&lt;p&gt;API数据传输&lt;/p&gt;

&lt;p&gt;3种常见的API模型类型
使用API为主导的集成软件时，可以改善用户与新设备和技术更替的交互方式。你可以通过多渠道销售，库存管理，运输或跨渠道创建个性化体验来改善电商订单处理流程。以下是三种常见的构建类型：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;体验式API（Experience APIs）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这种类型的API一般用于数据重配置，以便可以根据用户的需要以多种格式显示相同的数据。体验式API为每个渠道创建一个通用的数据源，而不是为每个渠道设置单独的集成系统。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;流程式API（process APIs）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这种API一般用于构建一个IT生态系统。流程式API有助于创建独立的数据源点，从而避免在单个系统内或跨系统形成数据孤岛。流程式API不依赖其他需要传送数据的系统。这意味着流程式API可帮助需要扩展其当前IT基础架构的企业。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;系统式API（System APIs）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;系统式API隐藏了诸如FTP服务器，ERP，CRM或旧系统之类的核心系统的复杂设计和处理方法。这类型的API通常提供一种方式来访问系统数据和记录业务中存在的集成方法。&lt;/p&gt;

&lt;p&gt;在了解完这些API类型后，我将列举一些适合电商平台或商家使用的API，这些API可以增强平台或自营点的实用功能和改善用户体验。&lt;/p&gt;

&lt;p&gt;API数据管理&lt;/p&gt;

&lt;p&gt;不同类型的电子商务API
API可以帮助开发人员将其电商平台或其他供应商提供的各种功能直接集成到自家电商商店中。这有助于简化订单处理、快递运输和包裹交付流程。&lt;/p&gt;

&lt;p&gt;市场上存在着数百种电商支持类的API服务。 其中一些可用于添加订单处理，物流运输，快递跟踪，获取产品信息，查看商品状态，转买或二次出售，甚至创建一些用户细分群组以及许多其他有利于做精细化运营任务的功能。&lt;/p&gt;

&lt;p&gt;在这里，我将重点介绍一些市面上最受欢迎和最有用的API电商支持功能。如果你想了解电商快递配送中的5个常见问题和解决方案，这篇文章适合你阅读。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;产品信息API
使用产品信息API，你可以从产品数据库中提取产品详细信息，其中包括有关产品描述，产品ID，产品标题，产品规格，产品图片，价格，产品数量等的信息。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;订单信息API
订单信息API包含有关从你的渠道创建的订单的详细信息。此类API可以实现订单同步导入和导出，并显示你账户中所有已创建和可用订单的列表。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;你可以根据包装和发货日期对订单数据进行分类和过滤。此外，还可以取消订单，退货订单，创建批量导入订单以及为已订购产品添加库存。根据需要添加其他参数也可以实现。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;库存信息API
你可以使用此API来排序和过滤库存数据，并检查产品SKU的库存详细信息。使用此API，你还可以更新指定产品的产品库存详细信息。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;物流运送API
通过此API，你可以将整个快递运输自动化。系统可以直接与物流提供商联系，并且可以跟踪从订单出单到交付给客户的包装中的所有详细信息。它还可以使包装发票和标签的创建过程自动化。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;运送API可让您根据运送时间，费用和位置从多个运送者中进行选择。使用这种类型的API，也可以进行发货跟踪。它使您能够将订单跟踪信息集成到移动应用程序或网站中，或者通过电子邮件或短信集成。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;快递信息API
使用此API可以查询特定地区可用的快递公司和选择符合你预设价格或时效参数的公司，然后自动为选择的公司创建发货申请和制作提货订单。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;包装管理API
你可以在这种一体化的API来创建订单、发货、并为同时订单生成标签和发票等等。使用此API，你可以一次性完成多项发货任务。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;渠道信息API
渠道API为你提供所有集成渠道的详细信息（例如天猫，京东，拼多多，微信商城等等）。该API在创建订单时会分配一个唯一的渠道ID，该ID可用于为你的账户选择或指定一个自定义渠道。该API还显示了已集成到商店账户中的所有渠道的列表信息。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目录信息API
使用此API，你可以在几分钟内创建，编辑和管理您的产品目录。它还支持与业务的其他关键系统集成，例如订单执行，库存管理以及数据分析报告。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;身份验证/登录API
身份验证或登录API是你访问物流服务商站点资源所需的访问授权。此类API可帮助物流加盟站点确认你的身份和给你返回你所需要的信息。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支付API
使用付款API，你可以为自己创建一个专属的支付结款页面，该页面可以接通信用卡、借记卡、支付宝、微信、Paypal、Visa等等的付款方式。此外，你还可以根据你现有的付款条款对支付API进行修改。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;地址验证API
地址验证API有助于验证客户在网站上输入的地址和其他客户详细信息的真实性，从而减少包裹无法签收的事故发生。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通过地址验证API，电商商家可以自动识别该客户是新客户还是现有客户或是竞争对手等等，并对可能出现的交付问题进行进一步的预测。该API功能可自动地完成地址的验证和更正，也消除了去跟快递公司反复沟通的麻烦。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;营销管理API
这是一个很有用的API，可根据客户的购买行为，购买历史，位置和其他条件自动执行信息推送营销功能和用户细分管理。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;电商API是如何运作的？
如上所述，API允许你在后台操控你的站点和其他系统进行交互，并将此信息显示给你的终端客户。&lt;/p&gt;

&lt;p&gt;这些API对电商平台和店家都很有用，因为大部分电商卖家都需要同时处理大量的订单、物流、仓储的请求和响应。这些API通常基于REST体系结构，并使用HTTP请求方法向服务器请求信息。REST API使用简单的URL，并且轻量级，几乎可以使用任何工具来实现。开发人员可以使用REST API获得一组搜索和查询工具，以便更深入地访问网站数据。&lt;/p&gt;

&lt;p&gt;出于安全目的，REST API还支持OAuth 2.0身份验证（在Facebook和Google等流行的应用程序中也使用了OAuth 2.0身份验证）。此外，REST API支持跨平台开发和更广泛的编程语言。&lt;/p&gt;

&lt;p&gt;总结
如果你使用电商支持类的API，电商中的包裹运输和订单履行问题处理起来就会容易得多。归根结底，你对你电子商务业务所做的每项决定都应有助于你实现营收增长或成本控制的目标。就从运输和订单履行而言，使用电子商务API可以实现这两个目标。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://api.kuaidi100.com/blog/detail/SMSdsAPIzSTnjSjdl12ZyYhC.html&quot;&gt;https://api.kuaidi100.com/blog/detail/SMSdsAPIzSTnjSjdl12ZyYhC.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://api.kuaidi100.com/document/603f45a0a52d305ab4d2a078.html&quot;&gt;http://api.kuaidi100.com/document/603f45a0a52d305ab4d2a078.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6f19741f25f1453267ec683101245512</guid>
<title>ClickHouse 在 Bilibili 用户行为分析的实践</title>
<link>https://toutiao.io/k/90vs9kg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;视频直播回放链接 : https://www.bilibili.com/video/BV1hU4y1W71L&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7aMIDWEzHMmCVaTjoAynhDOny0kUx6JMhSVC4x6icze5MicDFTTdkDW8jA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7a9ZzGhINYEdgbnmR42apA3Swwm77z9eroSVRUicUqRvgibOryVm61OpAw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7atSwZUyrzFTRvLQDqMedbQicWDLiaKBPMksRUibuL3BkAm26mJlZcQAl4Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7aIRe6QO6otldwYLia9nGicVv2d7PgeCicMpibtqMxqLBZTlB0rrGz3aJ7MQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7azkRhm7dN9yJ2r7cqK8xzty7Uk3pb1yQJ9IQQDK16w8VMa84ox4uic6Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7asys0VbfApZ9ibsm3dBkmuSUpiabTHfgIuYVlU0m62ydlQLjZbRWG9CmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7aRR5GtxgmIibrJOUULDUAVpR08OwNO9Aw4rrQ7QvgUxCYrslq0lOTictA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7aRo79dNquKib1PMfpr7Ipx100eDFia06Jk7D3ibICJVk0ReYnYuUC4XOVQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7awHQe9M2wSnooybRTkcfG9ibZgvqOQibMiamicL6bOXGjhicdOibzsHXlYic8w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7aULnKbGANJicDMibV6EZp9esUUoDeaH9SvziaiaRQ5OFnClG2tAu1durnWA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7aH7rqM7aSMsbGenqTQmAjNSJHBnqbJb7nstNqNoyHDQwgmvXPZIJ9cg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7aVHlC0nDC92giaaicrwkic5QraubDJclefmibRI77jDo0yUm8iaaaWG3zvHQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7aTTbweEsYccibpeC6ic14rCx3BGNaiavyM6PZKBstj9zyBPZgrWxgY5W6g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7aLwicrZVIk6sp0jESrGAIibSH81OKiclDZUxd5As4Uky4jzWD0VegYUHSA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7aAEpUzGdmctPW6bJk1bic2ibluqt8WAAGGGYPFcic7SP7JZXOS4lwSNSfg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7ar3t4yKbT0NqL6MblGJE5VVtQSaNwBoAHOWEV0R7ZJbZZVayhQISJgg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7amraLp6cqdWpPiasPoNm0rbXPuGY2rLqABuq3FQDZWakza0ibfn7IuKlg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7aVbtiaPPic6rHblDJe91jMAfbOVMamxSZwp7qDe0BLrDUTRKJVSdnfeUQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;center data-tool=&quot;mdnice编辑器&quot;&gt;关注 「&lt;span&gt; ClickHouse开发者 &lt;/span&gt;」 , 获取更多技术干货&lt;/center&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7acr3nryiaahOxicrWtKCYuE3mVURQq5zohVXkZVbsfyicibibcTlHo9TQZWA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;br/&gt;开发者小编补充：关注观众号 , 后台回复 &lt;code&gt;下载0206&lt;/code&gt; 获取PDF~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img align=&quot;left&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/qaWuZTGK0vytDpicnK7AONoC8LLSriaG7aOUxFUoyJcwoNakBnQZJJxiaDwmzzJZeHLrCQrODlm7UVtH41BGrI8IA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;    &lt;span&gt;  戳我,观看直播回放~&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6b89f86b7ac6fec11a9303973dc86a77</guid>
<title>动态规划到底有多难？</title>
<link>https://toutiao.io/k/lj0lgn0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI4MzUxNjI3OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/liaT5dytkaTemW9Fpf8y5Cez0KhBtoEU6jfSorN0N12SMnc3AkGkLoFcY9HNl2hRK3gIYyZ7g42wk5nXvSUq0Tg/0?wx_fmt=png&quot; data-nickname=&quot;力扣加加&quot; data-alias=&quot;leetcode-pp&quot; data-signature=&quot;力求用清晰直白的方式还原解题的过程，努力做西湖区最好的算法题解。&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;动态规划是一个从其他行业借鉴过来的词语。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它的大概意思先将一件事情分成&lt;strong&gt;「若干阶段」&lt;/strong&gt;，然后通过阶段之间的&lt;strong&gt;「转移」&lt;/strong&gt;达到目标。由于转移的方向通常是多个，因此这个时候就需要&lt;strong&gt;「决策」&lt;/strong&gt;选择具体哪一个转移方向。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;动态规划所要解决的事情通常是完成一个具体的目标，而这个目标往往是最优解。并且：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;阶段之间可以进行转移，这叫做动态。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;达到一个&lt;strong&gt;「可行解(目标阶段)」&lt;/strong&gt; 需要不断地转移，那如何转移才能达到&lt;strong&gt;「最优解」&lt;/strong&gt;？这叫规划。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个阶段抽象为状态（用圆圈来表示），状态之间可能会发生转化（用箭头表示）。可以画出类似如下的图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5369928400954654&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfic3UdxrSfBAJTfziarRMQ6sN6hz4kSvlVdDCN5K40WNR7tOvsp7CD6icQarmmV004qck8Hdvhlj7HA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1676&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;状态转移图解&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们应该做出如何的&lt;strong&gt;「决策序列」&lt;/strong&gt;才能使得结果最优？换句话说就是每一个状态应该如何选择到下一个具体状态，并最终到达目标状态。这就是动态规划研究的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每次决策实际上&lt;strong&gt;「不会考虑之后的决策，而只会考虑之前的状态。」&lt;/strong&gt; 形象点来说，其实是走一步看一步这种短视思维。为什么这种短视可以来求解最优解呢？那是因为：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;我们将&lt;strong&gt;「所有可能的转移全部模拟了一遍」&lt;/strong&gt;，最后挑了一个最优解。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无后向性（这个我们后面再说，先卖个关子）&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;而如果你没有模拟所有可能，而直接走了一条最优解，那就是贪心算法了。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没错，动态规划刚开始就是来求最优解的。只不过有的时候顺便可以求总的方案数等其他东西，这其实是&lt;strong&gt;「动态规划的副产物」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，我们把动态规划拆成两部分分别进行解释，或许你大概知道了动态规划是一个什么样的东西。但是这对你做题并没有帮助。那算法上的动态规划究竟是个啥呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在算法上，动态规划和&lt;strong&gt;「查表的递归（也称记忆化递归）」&lt;/strong&gt; 有很多相似的地方。我建议大家先从记忆化递归开始学习。本文也先从记忆化递归开始，逐步讲解到动态规划。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;记忆化递归&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么什么是递归？什么是查表（记忆化）？让我们慢慢来看。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;什么是递归？&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;递归是指在函数中&lt;strong&gt;「调用函数自身」&lt;/strong&gt;的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有意义的递归通常会把问题分解成&lt;strong&gt;「规模缩小的同类子问题」&lt;/strong&gt;，当子问题缩写到寻常的时候，我们可以直接知道它的解。然后通过建立递归函数之间的联系（转移）即可解决原问题。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;是不是和分治有点像? 分治指的是将问题一分为多，然后将多个解合并为一。而这里并不是这个意思。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个问题要使用递归来解决必须有递归终止条件（算法的有穷性），也就是说递归会逐步缩小规模到寻常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然以下代码也是递归，但由于其无法结束，因此不是一个有效的算法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;f&lt;/span&gt;&lt;span&gt;(x)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; x + f(x - &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的代码除非外界干预，否则会永远执行下去，不会停止。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此更多的情况应该是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;f&lt;/span&gt;&lt;span&gt;(n)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; n == &lt;span&gt;1&lt;/span&gt;: &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; n + f(n - &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用递归通常可以使代码短小，有时候也更可读。算法中使用递归可以&lt;strong&gt;「很简单地」&lt;/strong&gt;完成一些用循环不太容易实现的功能，比如二叉树的左中右序遍历。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;递归在算法中有非常广泛的使用，包括现在日趋流行的函数式编程。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;递归在函数式编程中地位很高。纯粹的函数式编程中没有循环，只有递归。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，除了在编码上通过函数调用自身实现递归。我们也可以定义递归的数据结构。比如大家所熟知的树，链表等都是递归的数据结构。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Node {&lt;br/&gt; value: any; &lt;span&gt;// 当前节点的值&lt;/span&gt;&lt;br/&gt; children: Array&amp;lt;Node&amp;gt;; &lt;span&gt;// 指向其儿子&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上代码就是一个多叉树的定义形式，可以看出 children 就是 Node 的集合类，这就是一种&lt;strong&gt;「递归的数据结构」&lt;/strong&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;不仅仅是普通的递归函数&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文中所提到的记忆化递归中的递归函数实际上&lt;strong&gt;「指的是特殊的递归函数」&lt;/strong&gt;，即在普通的递归函数上满足以下几个条件：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;递归函数不依赖外部变量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;递归函数不改变外部变量&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;满足这两个条件有什么用呢？这是因为我们需要函数给定参数，其返回值也是确定的。这样我们才能记忆化。关于记忆化，我们后面再讲。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果大家了解函数式编程，实际上这里的递归其实严格来说是&lt;strong&gt;「函数式编程中的函数」&lt;/strong&gt;。如果不了解也没关系，这里的递归函数其实就是&lt;strong&gt;「数学中的函数」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来回顾一下数学中的函数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;在一个变化过程中，假设有两个变量 x、y，如果对于任意一个 x 都有唯一确定的一个 y 和它对应，那么就称 x 是自变量，y 是 x 的函数。x 的取值范围叫做这个函数的定义域，相应 y 的取值范围叫做函数的值域 。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而&lt;strong&gt;「本文所讲的所有递归都是指的这种数学中的函数。」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如上面的递归函数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;f&lt;/span&gt;&lt;span&gt;(x)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; x == &lt;span&gt;1&lt;/span&gt;: &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; x + f(x - &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;x 就是自变量，x 的所有可能的返回值构成的集合就是定义域。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;f(x) 就是函数。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;f(x) 的所有可能的返回值构成的集合就是值域。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自变量也可以有多个，对应递归函数的参数可以有多个，比如 f(x1, x2, x3)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「通过函数来描述问题，并通过函数的调用关系来描述问题间的关系就是记忆化递归的核心内容。」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每一个动态规划问题，实际上都可以抽象为一个数学上的函数。这个函数的自变量集合就是题目的所有取值，值域就是题目要求的答案的所有可能。我们的目标其实就是填充这个函数的内容，使得给定自变量 x，能够唯一映射到一个值 y。（当然自变量可能有多个，对应递归函数参数可能有多个）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决动态规划问题可以看成是填充函数这个黑盒，使得定义域中的数并正确地映射到值域。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5145317545748116&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfic3UdxrSfBAJTfziarRMQ6sTY1b5OuiaKibWQT4Ra76G4cuAp6sJzQc1fRTAvULQjK3LBicqThuO1a4w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;929&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;数学函数vs动态规划&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;递归并不是算法，它是和迭代对应的一种编程方法。只不过，我们通常借助递归去分解问题而已。比如我们定义一个递归函数 f(n)，用 f(n) 来描述问题。就和使用普通动态规划 f[n] 描述问题是一样的，这里的 f 是 dp 数组。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;什么是记忆化？&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了大家能够更好地对本节内容进行理解，我们通过一个例子来切入：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个人爬楼梯，每次只能爬 1 个或 2 个台阶，假设有 n 个台阶，那么这个人有多少种不同的爬楼梯方法？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;思路：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于&lt;strong&gt;「第 n 级台阶一定是从 n - 1 级台阶或者 n - 2 级台阶来的」&lt;/strong&gt;，因此到第 n 级台阶的数目就是 &lt;code&gt;到第 n - 1 级台阶的数目加上到第 n - 1 级台阶的数目&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;递归代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;climbStairs&lt;/span&gt;(&lt;span&gt;n&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (n === &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (n === &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; climbStairs(n - &lt;span&gt;1&lt;/span&gt;) + climbStairs(n - &lt;span&gt;2&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们用一个递归树来直观感受以下（每一个圆圈表示一个子问题）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.48125755743651755&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfic3UdxrSfBAJTfziarRMQ6sDPaJUoJBPmVQPShUZvHbI5k4bx8upkYJEGm5ZIZ2NTxvXSMG4dnoyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;827&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;重叠子问题&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;红色表示重复的计算。即 Fib(N-2) 和 Fib(N-3) 都被计算了两次，实际上计算一次就够了。比如第一次计算出了 Fib(N-2) 的值，那么下次再次需要计算 Fib(N-2)的时候，可以直接将上次计算的结果返回。之所以可以这么做的原因正是前文提到的&lt;strong&gt;「我们的递归函数是数学中的函数，也就是说参数一定，那么返回值也一定不会变」&lt;/strong&gt;，因此下次如果碰到相同的参数，我们就可以&lt;strong&gt;「将上次计算过的值直接返回，而不必重新计算」&lt;/strong&gt;。这样节省的时间就等价于重叠子问题的个数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「以这道题来说，本来需要计算 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;2^n&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -675.5 974.3 675.5&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(500, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 次，而如果使用了记忆化，只需要计算 n 次，就是这么神奇。」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码上，我们可以使用一个 hashtable 去缓存中间计算结果，从而省去不必要的计算。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们使用记忆化来改造上面的代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;memo = {}&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;climbStairs&lt;/span&gt;&lt;span&gt;(n)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; n == &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; n == &lt;span&gt;2&lt;/span&gt;: &lt;span&gt;return&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; n &lt;span&gt;in&lt;/span&gt; memo: &lt;span&gt;return&lt;/span&gt; memo[n]&lt;br/&gt;  ans = func(n - &lt;span&gt;1&lt;/span&gt;) + func(n&lt;span&gt;-2&lt;/span&gt;)&lt;br/&gt;  memo[n] = ans&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; ans&lt;br/&gt;climbStairs(&lt;span&gt;10&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我使用了一个名为 &lt;strong&gt;「memo 的哈希表来存储递归函数的返回值，其中 key 为参数，value 为递归函数的返回值。」&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.9507042253521127&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfic3UdxrSfBAJTfziarRMQ6scY8IoufibMAQTmNAIwGscMywdhOH6jwTasvw9kVoZRNlE3nDfo9OjwQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;284&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;哈希表示意图&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;key 的形式为 (x, y)，表示的是一个元祖。通常动态规划的参数有多个，我们就可以使用元祖的方式来记忆化。或者也可采取多维数组的形式。对于上图来说，就可使用二维数组来表示。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家可以通过删除和添加代码中的 memo 来感受一下&lt;strong&gt;「记忆化」&lt;/strong&gt;的作用。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;小结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。这里我列举了几道算法题目，这几道算法题目都可以用递归轻松写出来：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;递归实现 sum&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;二叉树的遍历&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;走楼梯问题&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;汉诺塔问题&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;杨辉三角&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;递归中&lt;strong&gt;「如果」&lt;/strong&gt;存在重复计算（我们称重叠子问题，下文会讲到），那就是使用记忆化递归（或动态规划）解题的强有力信号之一。可以看出动态规划的核心就是使用记忆化的手段消除重复子问题的计算，如果这种重复子问题的规模是指数或者更高规模，那么记忆化递归（或动态规划）带来的收益会非常大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了消除这种重复计算，我们可使用查表的方式。即一边递归一边使用“记录表”（比如哈希表或者数组）记录我们已经计算过的情况，当下次再次碰到的时候，如果之前已经计算了，那么直接返回即可，这样就避免了重复计算。下文要讲的&lt;strong&gt;「动态规划中 DP 数组其实和这里“记录表”的作用是一样的」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你刚开始接触递归， 建议大家先去练习一下递归再往后看。一个简单练习递归的方式是将你写的迭代全部改成递归形式。比如你写了一个程序，功能是“将一个字符串逆序输出”，那么使用迭代将其写出来会非常容易，那么你是否可以使用递归写出来呢？通过这样的练习，可以让你逐步适应使用递归来写程序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你已经适应了递归的时候，那就让我们继续学习动态规划吧！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;动态规划&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;讲了这么多递归和记忆化，终于到了我们的主角登场了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;动态规划的基本概念&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先来学习动态规划最重要的两个概念：最优子结构和无后效性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;无后效性决定了是否可使用动态规划来解决。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最优子结构决定了具体如何解决。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;最优子结构&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;动态规划常常适用于有重叠子问题和最优子结构性质的问题。前面讲了重叠子问题，那么最优子结构是什么？这是我从维基百科找的定义：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子：如果考试中的分数定义为 f，那么这个问题就可以被分解为语文，数学，英语等子问题。显然子问题最优的时候，总分这个大的问题的解也是最优的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再比如 01 背包问题：定义 f(weights, values, capicity)。如果我们想要求 f([1,2,3], [2,2,4], 10) 的最优解。我们可以将其划分为如下子问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;将第三件物品装进背包&lt;/code&gt;，也就是 f([1,2], [2,2], 10)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;和&lt;code&gt;不将第三件物品装进背包&lt;/code&gt;，也就是 f([1,2,3], [2,2,4], 9)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;显然这两个问题还是复杂，我们需要进一步拆解。不过，这里不是讲如何拆解的。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原问题 f([1,2,3], [2,2,4], 10) 等于以上两个子问题的最大值。只有两个子问题都是&lt;strong&gt;「最优的」&lt;/strong&gt;时候整体才是最优的，这是因为子问题之间不会相互影响。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;无后效性&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续以上面两个例子来说。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;数学考得高不能影响英语（现实其实可能影响，比如时间一定，投入英语多，其他科目就少了）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;背包问题中 f([1,2,3], [2,2,4], 10) 选择是否拿第三件物品，不应该影响是否拿前面的物品。比如题目规定了拿了第三件物品之后，第二件物品的价值就会变低或变高）。这种情况就不满足无后向性。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;动态规划三要素&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;状态定义&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;动态规划的中心点是什么？如果让我说的话，那就是&lt;strong&gt;「定义状态」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;动态规划解题的第一步就是定义状态。定义好了状态，就可以画出递归树，聚焦最优子结构写转移方程就好了，因此我才说状态定义是动态规划的核心，动态规划问题的状态确实不容易看出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是一旦你能把状态定义好了，那就可以顺藤摸瓜画出递归树，画出递归树之后就聚焦最优子结构就行了。但是能够画出递归树的前提是：对问题进行划分，专业点来说就是定义状态。那怎么才能定义出状态呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好在状态的定义都有特点的套路。比如一个字符串的状态，通常是 dp[i] 表示字符串 s 以 i 结尾的 ....。比如两个字符串的状态，通常是 dp[i][j] 表示字符串 s1 以 i 结尾，s2 以 j 结尾的 ....。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说状态的定义通常有不同的套路，大家可以在做题的过程中进行学习和总结。但是这种套路非常多，那怎么搞定呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说实话，只能多练习，在练习的过程中总结套路。具体的套路参考后面的&lt;strong&gt;「动态规划的题型」&lt;/strong&gt; 部分内容。之后大家就可以针对不同的题型，去思考大概的状态定义方向。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「两个例子」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于状态定义，真的非常重要，以至于我将其列为动态规划的核心。因此我觉得有必要举几个例子来进行说明。我直接从力扣的&lt;span&gt;动态规划专题&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;中抽取前两道给大家讲讲。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5240641711229946&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfic3UdxrSfBAJTfziarRMQ6sWMvNPbdQiaKbDUW18AY8QpkGaKo2sqFd1W29CR1NRhbGhnYfEnN1iaCQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1496&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;力扣动态规划专题&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一道题：《5. 最长回文子串》难度中等&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;给你一个字符串 s，找到 s 中最长的回文子串。&lt;br/&gt;&lt;br/&gt; &lt;br/&gt;&lt;br/&gt;示例 1：&lt;br/&gt;&lt;br/&gt;输入：s = &lt;span&gt;&quot;babad&quot;&lt;/span&gt;&lt;br/&gt;输出：&lt;span&gt;&quot;bab&quot;&lt;/span&gt;&lt;br/&gt;解释：&lt;span&gt;&quot;aba&quot;&lt;/span&gt; 同样是符合题意的答案。&lt;br/&gt;示例 2：&lt;br/&gt;&lt;br/&gt;输入：s = &lt;span&gt;&quot;cbbd&quot;&lt;/span&gt;&lt;br/&gt;输出：&lt;span&gt;&quot;bb&quot;&lt;/span&gt;&lt;br/&gt;示例 3：&lt;br/&gt;&lt;br/&gt;输入：s = &lt;span&gt;&quot;a&quot;&lt;/span&gt;&lt;br/&gt;输出：&lt;span&gt;&quot;a&quot;&lt;/span&gt;&lt;br/&gt;示例 4：&lt;br/&gt;&lt;br/&gt;输入：s = &lt;span&gt;&quot;ac&quot;&lt;/span&gt;&lt;br/&gt;输出：&lt;span&gt;&quot;a&quot;&lt;/span&gt;&lt;br/&gt; &lt;br/&gt;&lt;br/&gt;提示：&lt;br/&gt;&lt;br/&gt;1 &amp;lt;= s.length &amp;lt;= 1000&lt;br/&gt;s 仅由数字和英文字母（大写和/或小写）组成&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「这道题入参是一个字符串，那我们要将其转化为规模更小的子问题，那无疑就是字符串变得更短的问题，临界条件也应该是空字符串或者一个字符这样。」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一种定义状态的方式就是 f(s1)，含义是字符串 s1 的最长回文子串，其中 s1 就是题目中的字符串 s 的子串，那么答案就是 f(s)。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;由于规模更小指的是字符串变得更短，而描述字符串我们也可以用两个变量来描述，这样实际上还省去了开辟字符串的开销。两个变量可以是&lt;strong&gt;「起点索引 + 子串长度」&lt;/strong&gt;，也可以是&lt;strong&gt;「终点索引 + 子串长度」&lt;/strong&gt;，也可以是&lt;strong&gt;「起点坐标 + 终点坐标」&lt;/strong&gt;。随你喜欢，这里我就用&lt;strong&gt;「起点坐标 + 终点坐标」&lt;/strong&gt;。那么状态定义就是 f(start, end)，含义是子串 s[start:end+1]的最长回文子串，那么答案就是 f(0, len(s) - 1)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;s[start:end+1] 指的是包含 s[start]，而不包含 s[end+1] 的连续子串。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这无疑是一种定义状态的方式，但是一旦我们这样去定义就会发现：状态转移方程会变得难以确定（实际上很多动态规划都有这个问题，比如最长上升子序列问题）。那究竟如何定义状态呢？我会在稍后的状态转移方程继续完成这道题。我们先来看下一道题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二道题：《10. 正则表达式匹配》难度困难&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 &lt;span&gt;&#x27;.&#x27;&lt;/span&gt; 和 &lt;span&gt;&#x27;*&#x27;&lt;/span&gt; 的正则表达式匹配。&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&#x27;.&#x27;&lt;/span&gt; 匹配任意单个字符&lt;br/&gt;&lt;span&gt;&#x27;*&#x27;&lt;/span&gt; 匹配零个或多个前面的那一个元素&lt;br/&gt;所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。&lt;br/&gt;&lt;br/&gt; &lt;br/&gt;示例 1：&lt;br/&gt;&lt;br/&gt;输入：s = &lt;span&gt;&quot;aa&quot;&lt;/span&gt; p = &lt;span&gt;&quot;a&quot;&lt;/span&gt;&lt;br/&gt;输出：&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;解释：&lt;span&gt;&quot;a&quot;&lt;/span&gt; 无法匹配 &lt;span&gt;&quot;aa&quot;&lt;/span&gt; 整个字符串。&lt;br/&gt;示例 2:&lt;br/&gt;&lt;br/&gt;输入：s = &lt;span&gt;&quot;aa&quot;&lt;/span&gt; p = &lt;span&gt;&quot;a*&quot;&lt;/span&gt;&lt;br/&gt;输出：&lt;span&gt;true&lt;/span&gt;&lt;br/&gt;解释：因为 &lt;span&gt;&#x27;*&#x27;&lt;/span&gt; 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 &lt;span&gt;&#x27;a&#x27;&lt;/span&gt;。因此，字符串 &lt;span&gt;&quot;aa&quot;&lt;/span&gt; 可被视为 &lt;span&gt;&#x27;a&#x27;&lt;/span&gt; 重复了一次。&lt;br/&gt;示例 3：&lt;br/&gt;&lt;br/&gt;输入：s = &lt;span&gt;&quot;ab&quot;&lt;/span&gt; p = &lt;span&gt;&quot;.*&quot;&lt;/span&gt;&lt;br/&gt;输出：&lt;span&gt;true&lt;/span&gt;&lt;br/&gt;解释：&lt;span&gt;&quot;.*&quot;&lt;/span&gt; 表示可匹配零个或多个（&lt;span&gt;&#x27;*&#x27;&lt;/span&gt;）任意字符（&lt;span&gt;&#x27;.&#x27;&lt;/span&gt;）。&lt;br/&gt;示例 4：&lt;br/&gt;&lt;br/&gt;输入：s = &lt;span&gt;&quot;aab&quot;&lt;/span&gt; p = &lt;span&gt;&quot;c*a*b&quot;&lt;/span&gt;&lt;br/&gt;输出：&lt;span&gt;true&lt;/span&gt;&lt;br/&gt;解释：因为 &lt;span&gt;&#x27;*&#x27;&lt;/span&gt; 表示零个或多个，这里 &lt;span&gt;&#x27;c&#x27;&lt;/span&gt; 为 0 个, &lt;span&gt;&#x27;a&#x27;&lt;/span&gt; 被重复一次。因此可以匹配字符串 &lt;span&gt;&quot;aab&quot;&lt;/span&gt;。&lt;br/&gt;示例 5：&lt;br/&gt;&lt;br/&gt;输入：s = &lt;span&gt;&quot;mississippi&quot;&lt;/span&gt; p = &lt;span&gt;&quot;mis*is*p*.&quot;&lt;/span&gt;&lt;br/&gt;输出：&lt;span&gt;false&lt;/span&gt;&lt;br/&gt; &lt;br/&gt;&lt;br/&gt;提示：&lt;br/&gt;&lt;br/&gt;0 &amp;lt;= s.length &amp;lt;= 20&lt;br/&gt;0 &amp;lt;= p.length &amp;lt;= 30&lt;br/&gt;s 可能为空，且只包含从 a-z 的小写字母。&lt;br/&gt;p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。&lt;br/&gt;保证每次出现字符 * 时，前面都匹配到有效的字符&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题入参有两个， 一个是 s，一个是 p。沿用上面的思路，我们有两种定义状态的方式。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一种定义状态的方式就是 f(s1, p1)，含义是 p1 是否可匹配字符串 s1，其中 s1 就是题目中的字符串 s 的子串，p1 就是题目中的字符串 p 的子串,那么答案就是 f(s, p)。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;另一种是 f(s_start, s_end, p_start, p_end)，含义是子串 p1[p_start:p_end+1] 是否可以匹配字符串 s[s_start:s_end+1]，那么答案就是 f(0, len(s) - 1, 0, len(p) - 1)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而这道题实际上我们也可采用更简单的状态定义方式，不过基本思路都是差不多的。我仍旧卖个关子，后面讲转移方程再揭晓。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;搞定了状态定义，你会发现时间空间复杂度都变得很明显了。这也是为啥我反复强调状态定义是动态规划的核心。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;时间空间复杂度怎么个明显法了呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先空间复杂度，我刚才说了动态规划其实就是查表的暴力法，因此动态规划的空间复杂度打底就是表的大小。再直白一点就是上面的哈希表 memo 的大小。而 &lt;strong&gt;「memo」&lt;/strong&gt;的大小基本就是状态的个数。状态个数是多少呢? 这不就取决你状态怎么定义了么？比如上面的 f(s1, p1) 。状态的多少是多少呢？很明显就是每个参数的取值范围大小的笛卡尔积。s1 的所有可能取值有 len(s) 种，p1 的所有可能有 len(p)种，那么总的状态大小就是 len(s) * len(p)。那空间复杂度是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(m * n)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -750 3963.4 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2252.2, 0)&quot;&gt;&lt;path data-c=&quot;2217&quot; d=&quot;M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2974.4, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3574.4, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，其中 m 和 n 分别为 s 和 p 的大小。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;我说空间复杂度打底是状态个数， 这里暂时先不考虑状态压缩的情况。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次是时间复杂度。时间复杂度就比较难说了。但是由于我们&lt;strong&gt;「无论如何都要枚举所有状态」&lt;/strong&gt;，因此&lt;strong&gt;「时间复杂度打底就是状态总数」&lt;/strong&gt;。以上面的状态定义方式，时间复杂度打底就是&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(m * n)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -750 3963.4 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2252.2, 0)&quot;&gt;&lt;path data-c=&quot;2217&quot; d=&quot;M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2974.4, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3574.4, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你枚举每一个状态都需要和 s 的每一个字符计算一下，那时间复杂度就是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(m^2 * n)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -833.9 4367 1083.9&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(878, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2655.8, 0)&quot;&gt;&lt;path data-c=&quot;2217&quot; d=&quot;M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3378, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3978, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上面的爬楼梯的例子来说，我们定义状态 f(n) 表示到达第 n 级台阶的方法数，那么状态总数就是 n，空间复杂度和时间复杂度打底就是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;n&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -442 600 453&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 了。（仍然不考虑滚动数组优化）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再举个例子：62. 不同路径&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。&lt;br/&gt;&lt;br/&gt;机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。&lt;br/&gt;&lt;br/&gt;问总共有多少条不同的路径？&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题是和上面的爬楼梯很像，只不过从一维变成了二维，我把它叫做&lt;strong&gt;「二维爬楼梯」&lt;/strong&gt;，类似的换皮题还很多，大家慢慢体会。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题我定义状态为 f(i, j) 表示机器人到达点 (i,j) 的总的路径数。那么状态总数就是 i 和 j 的取值的笛卡尔积，也就是 m * n 。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0342592592592592&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfic3UdxrSfBAJTfziarRMQ6sxcRYt1cejjboahhsicoyp9wwd9UuPYFrDiaJSWDpWMC8fVSVAMUloT0A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;二维爬楼梯&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总的来说，动态规划的空间和时间复杂度&lt;strong&gt;「打底就是状态的个数」&lt;/strong&gt;，而状态的个数通常是参数的笛卡尔积，这是由动态规划的无后向性决定的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「临界条件是比较最容易的」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你定义好了状态，剩下就三件事了：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;临界条件&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;状态转移方程&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;枚举状态&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上面讲解的爬楼梯问题中，如果我们用 f(n) 表示爬 n 级台阶有多少种方法的话，那么：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;f(1) 与 f(2) 就是【边界】&lt;br/&gt;f(n) = f(n-1) + f(n-2) 就是【状态转移公式】&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我用动态规划的形式表示一下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;dp[0] 与 dp[1] 就是【边界】&lt;br/&gt;dp[n] = dp[n - 1] + dp[n - 2] 就是【状态转移方程】&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看出记忆化递归和动态规划是多么的相似。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上临界条件相对简单，大家只有多刷几道题，里面就有感觉。困难的是找到状态转移方程和枚举状态。这两个核心点的都建立在&lt;strong&gt;「已经抽象好了状态」&lt;/strong&gt;的基础上。比如爬楼梯的问题，如果我们用 f(n) 表示爬 n 级台阶有多少种方法的话，那么 f(1), f(2), ... 就是各个&lt;strong&gt;「独立的状态」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;搞定了状态的定义，那么我们来看下状态转移方程。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;状态转移方程&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;动态规划中当前阶段的状态往往是上一阶段状态和上一阶段决策的结果。这里有两个关键字，分别是 ：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说，如果给定了第 k 阶段的状态 s[k] 以及决策 choice(s[k])，则第 k+1 阶段的状态 s[k+1] 也就完全确定，用公式表示就是：s[k] + choice(s[k]) -&amp;gt; s[k+1]， 这就是状态转移方程。需要注意的是 choice 可能有多个，因此每个阶段的状态 s[k+1]也会有多个。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续以上面的爬楼梯问题来说，爬楼梯问题由于上第 n 级台阶一定是从 n - 1 或者 n - 2 来的，因此 上第 n 级台阶的数目就是 &lt;code&gt;上 n - 1 级台阶的数目加上 n - 1 级台阶的数目&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的这个理解是核心， 它就是我们的状态转移方程，用代码表示就是 &lt;code&gt;f(n) = f(n - 1) + f(n - 2)&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际操作的过程，有可能题目和爬楼梯一样直观，我们不难想到。也可能隐藏很深或者维度过高。如果你实在想不到，可以尝试画图打开思路，这也是我刚学习动态规划时候的方法。当你做题量上去了，你的题感就会来，那个时候就可以不用画图了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我们定义了状态方程，据此我们定义初始状态和目标状态。然后聚焦最优子结构，&lt;strong&gt;「思考每一个状态究竟如何进行扩展使得离目标状态越来越近」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5369928400954654&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfic3UdxrSfBAJTfziarRMQ6sN6hz4kSvlVdDCN5K40WNR7tOvsp7CD6icQarmmV004qck8Hdvhlj7HA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1676&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;状态转移图解&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;理论差不多先这样，接下来来几个实战消化一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ok，接下来是解密环节。上面两道题我们都没有讲转移方程，我们在这里补上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一道题：《5. 最长回文子串》难度中等。上面我们的两种状态定义都不好，而我可以在上面的基础上&lt;strong&gt;「稍微变动一点」&lt;/strong&gt;就可以使得转移方程变得非常好写。这个技巧在很多动态题目都有体现，比如最长上升子序列等，&lt;strong&gt;「需要大家掌握」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上面提到的 f(start, end) 来说，含义是子串 s[start:end+1]的最长回文子串。表示方式我们不变，只是将含义变成子串 s[start:end+1]的最长回文子串，&lt;strong&gt;「且必须包含 start 和 end」&lt;/strong&gt;。经过这样的定义，实际上我们也没有必要定义 f(start, end)的返回值是长度了，而仅仅是布尔值就行了。如果返回 true， 则最长回文子串就是 end - start + 1，否则就是 0。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样转移方程就可以写为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;f(i,j)=f(i+1,j−1) and s[i] == s[j]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二道题：《10. 正则表达式匹配》难度困难。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以我们分析的 f(s_start, s_end, p_start, p_end) 来说，含义是子串 p1[p_start:p_end+1] 是否可以匹配字符串 s[s_start:s_end+1]。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，我们可以定义更简单的方式，那就是 f(s_end, p_end)，含义是子串 p1[:p_end+1] 是否可以匹配字符串 s[:s_end+1]。也就是说固定起点为索引 0，这同样也是一个&lt;strong&gt;「很常见的技巧，请务必掌握。」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样转移方程就可以写为：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;if p[j] 是小写字母，是否匹配取决于 s[i] 是否等于 p[j]:&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;  f(i,j)=\left\{&amp;#10;  \begin{aligned}&amp;#10;  f(i-1, j-1) &amp;amp;  &amp;amp; s[i] == p[j] \\&amp;#10;  false &amp;amp; &amp;amp; s[i] != p[j] \\&amp;#10;  \end{aligned}&amp;#10;  \right.&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/fWJhv9xMFTsj3NhEvtEFv2jFChK6scmiaiciaFAQDNNQX1agibLdapGHxia6O5R8cQLM65QcUHrzjicIW5BaFjWuRL2q5TGCib538xib/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot; start=&quot;2&quot;&gt;&lt;li&gt;&lt;section&gt;if p[j] == &#x27;.&#x27;，一定可匹配:&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;f(i,j)=f(i-1,j−1)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot; start=&quot;3&quot;&gt;&lt;li&gt;&lt;section&gt;if p[j] == &#x27;*&#x27;，表示 p 可以匹配 s 第 j−1 个字符匹配任意次：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;  f(i,j)=\left\{&amp;#10;  \begin{aligned}&amp;#10;  f(i-1, j) &amp;amp;  &amp;amp; match &amp;amp;  &amp;amp; 1+ &amp;amp;  &amp;amp; times \\&amp;#10;  f(i, j - 2) &amp;amp; &amp;amp; match &amp;amp;  &amp;amp; 0 &amp;amp;  &amp;amp; time \\&amp;#10;  \end{aligned}&amp;#10;  \right.&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/fWJhv9xMFTsj3NhEvtEFv2jFChK6scmiaNCxP1G18qwrAQeyyicWYp1qWNkUQNQvmFwbric15hpbnmeNF5Eav5T82HSG9icNTibj6/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相信你能分析到这里，写出代码就不是难事了。具体代码可参考我的&lt;span&gt;力扣题解仓库&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;，咱就不在这里讲了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意到了么？所有的状态转移方程我都使用了上述的数学公式来描述。没错，所有的转移方程都可以这样描述。我建议大家&lt;strong&gt;「做每一道动态规划题目都写出这样的公式」&lt;/strong&gt;，起初你可能觉得很烦麻烦。不过相信我，你坚持下去，会发现自己慢慢变强大。就好像我强烈建议你每一道题都分析好复杂度一样。动态规划不仅要搞懂转移方程，还要自己像我那样完整地用数学公式写出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是觉得状态转移方程写起来麻烦？这里我给大家介绍一个小技巧，那就是使用 latex，latex 语法可以方便地写出这样的公式。另外西法还贴心地写了&lt;strong&gt;「一键生成动态规划转移方程公式」&lt;/strong&gt;的功能，帮助大家以最快速度生成公诉处。插件地址：https://leetcode-pp.github.io/leetcode-cheat/?tab=solution-template&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3406896551724138&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfic3UdxrSfBAJTfziarRMQ6sm6yS6gYtHO9Pc8QIK0lZX2kQbRs9C0jHsMXWvdZdLMia6Or9YSUWFag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1450&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;插件用法&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;状态转移方程实在是没有什么灵丹妙药，不同的题目有不同的解法。状态转移方程同时也是解决动态规划问题中最最困难和关键的点，大家一定要多多练习，提高题感。接下来，我们来看下不那么困难，但是新手疑问比较多的问题 - &lt;strong&gt;「如何枚举状态」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然状态转移方程可能不止一个， 不同的转移方程对应的效率也可能大相径庭，这个就是比较玄学的话题了，需要大家在做题的过程中领悟。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;如何枚举状态&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面说了如何枚举状态，才能不重不漏是枚举状态的关键所在。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, n + &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;  &lt;span&gt;pass&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5084745762711864&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfic3UdxrSfBAJTfziarRMQ6sriaEjRrjhTHsYkzFicO1iaiaiaJRbEr9ibNZqOCONoWzTBHXM04bMicGiadEnQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2124&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;一维状态&lt;/figcaption&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, m + &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, n + &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;    &lt;span&gt;pass&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6637984019668101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfic3UdxrSfBAJTfziarRMQ6sSibSGn6iciaH0TVyeI9qCJ8UxZf1KZRprINDPryBFWWkiccdBUkUn97yibw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1627&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;二维状态&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是实际操作的过程有很多细节比如:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一维状态我是先枚举左边的还是右边的？（从左到右遍历还是从右到左遍历）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;二维状态我是先枚举左上边的还是右上的，还是左下的还是右下的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;里层循环和外层循环的位置关系（可以互换么）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;。。。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这个东西和很多因素有关，很难总结出一个规律，而且我认为也完全没有必要去总结规律。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过这里我还是总结了一个关键点，那就是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「如果你没有使用滚动数组的技巧」&lt;/strong&gt;，那么遍历顺序取决于状态转移方程。比如:&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, n + &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;  dp[i] = dp[i - &lt;span&gt;1&lt;/span&gt;] + &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么我们就需要从左到右遍历，原因很简单，因为 dp[i] 依赖于 dp[i - 1]，因此计算 dp[i] 的时候， dp[i - 1] 需要已经计算好了。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;二维的也是一样的，大家可以试试。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「如果你使用了滚动数组的技巧」&lt;/strong&gt;，则怎么遍历都可以，但是不同的遍历意义通常不不同的。比如我将二维的压缩到了一维：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, n + &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, n + &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;    dp[j] = dp[j - &lt;span&gt;1&lt;/span&gt;] + &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样是可以的。dp[j - 1] 实际上指的是压缩前的 dp[i][j - 1]&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, n + &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;  &lt;span&gt;#  倒着遍历&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; range(n, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;-1&lt;/span&gt;):&lt;br/&gt;    dp[j] = dp[j - &lt;span&gt;1&lt;/span&gt;] + &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样也是可以的。但是 dp[j - 1] 实际上指的是压缩前的 dp[i - 1][j - 1]。因此实际中采用怎么样的遍历手段取决于题目。我特意写了一个 【完全背包问题】套路题（1449. 数位成本和为目标值的最大数字 文章，通过一个具体的例子告诉大家不同的遍历有什么实际不同，强烈建议大家看看，并顺手给个三连。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个比较微妙，大家可以参考这篇文章理解一下 0518.coin-change-2。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;小结&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于如何确定临界条件通常是比较简单的，多做几个题就可以快速掌握。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于如何确定状态转移方程，这个其实比较困难。不过所幸的是，这些套路性比较强， 比如一个字符串的状态，通常是 dp[i] 表示字符串 s 以 i 结尾的 ....。比如两个字符串的状态，通常是 dp[i][j] 表示字符串 s1 以 i 结尾，s2 以 j 结尾的 ....。这样遇到新的题目可以往上套， 实在套不出那就先老实画图，不断观察，提高题感。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于如何枚举状态，如果没有滚动数组， 那么根据转移方程决定如何枚举即可。如果用了滚动数组，那么要注意压缩后和压缩前的 dp 对应关系即可。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;动态规划 VS 记忆化递归&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面我们用记忆化递归的问题巧妙地解决了爬楼梯问题。那么动态规划是怎么解决这个问题呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案也是“查表”，我们平常写的 dp table 就是表，其实这个 dp table 和上面的 memo 没啥差别。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而一般我们写的 dp table，&lt;strong&gt;「数组的索引通常对应记忆化递归的函数参数，值对应递归函数的返回值。」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看起来两者似乎&lt;strong&gt;「没任何思想上的差异，区别的仅仅是写法」&lt;/strong&gt;？？没错。不过这种写法上的差异还会带来一些别的相关差异，这点我们之后再讲。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果上面的爬楼梯问题，使用动态规划，代码是怎么样的呢？我们来看下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;climbStairs&lt;/span&gt;(&lt;span&gt;n&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (n == &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; dp = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;(n);&lt;br/&gt;  dp[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;  dp[&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;2&lt;/span&gt;; i &amp;lt; n; i++) {&lt;br/&gt;    dp[i] = dp[i - &lt;span&gt;1&lt;/span&gt;] + dp[i - &lt;span&gt;2&lt;/span&gt;];&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; dp[dp.length - &lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家现在不会也没关系，我们将&lt;strong&gt;「前文的递归的代码稍微改造一下」&lt;/strong&gt;。其实就是将函数的名字改一下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;dp&lt;/span&gt;(&lt;span&gt;n&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (n === &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (n === &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; dp(n - &lt;span&gt;1&lt;/span&gt;) + dp(n - &lt;span&gt;2&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过这样的变化。我们将 dp[n] 和 dp(n) 对比看，这样是不是有点理解了呢? 其实他们的区别只不过是&lt;strong&gt;「递归用调用栈枚举状态， 而动态规划使用迭代枚举状态。」&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;如果需要多个维度枚举，那么记忆化递归内部也可以使用迭代进行枚举，比如最长上升子序列问题。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;动态规划的查表过程如果画成图，就是这样的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5324519230769231&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfic3UdxrSfBAJTfziarRMQ6sK9wyEianoPkcC9f6JABkrmlzVTbibRMuMTn2cBL6dvhn539H7llVic01A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;832&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;动态规划查表&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;虚线代表的是查表过程&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;滚动数组优化&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;爬楼梯我们并没有必要使用一维数组，而是借助两个变量来实现的，空间复杂度是 O(1)。代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;climbStairs&lt;/span&gt;(&lt;span&gt;n&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (n === &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (n === &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; a = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; b = &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; temp;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;3&lt;/span&gt;; i &amp;lt;= n; i++) {&lt;br/&gt;    temp = a + b;&lt;br/&gt;    a = b;&lt;br/&gt;    b = temp;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; temp;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之所以能这么做，是因为爬楼梯问题的状态转移方程中&lt;strong&gt;「当前状态只和前两个状态有关」&lt;/strong&gt;，因此只需要存储这两个即可。动态规划问题有很多这种讨巧的方式，这个技巧叫做滚动数组。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题目是动态规划中最简单的问题了，因为仅涉及到单个因素的变化，如果涉及到多个因素，就比较复杂了，比如著名的背包问题，挖金矿问题等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于单个因素的，我们最多只需要一个一维数组即可，对于如背包问题我们需要二维数组等更高纬度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回答上面的问题：记忆化递归和动态规划除了一个用递归一个用迭代，其他没差别。那两者有啥区别呢？我觉得最大的区别就是记忆化递归无法使用滚动数组优化（不信你用上面的爬楼梯试一下），记忆化调用栈的开销比较大（复杂度不变，你可以认为空间复杂度常数项更大），不过几乎不至于 TLE 或者 MLE。&lt;strong&gt;「因此我的建议就是没空间优化需求直接就记忆化，否则用迭代 dp」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再次强调一下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果说递归是从问题的结果倒推，直到问题的规模缩小到寻常。那么动态规划就是从寻常入手， 逐步扩大规模到最优子结构。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;记忆化递归和动态规划没有本质不同。都是枚举状态，并根据状态直接的联系逐步推导求解。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;动态规划性能通常更好。一方面是递归的栈开销，一方面是滚动数组的技巧。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;动态规划的基本类型&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;背包 DP（这个我们专门开了一个专题讲）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;区间 DP&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;区间类动态规划是线性动态规划的扩展，它在分阶段地划分问题时，与阶段中元素出现的顺序和由前一阶段的哪些元素合并而来有很大的关系。令状态 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;f(i,j)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -750 2529.7 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;66&quot; d=&quot;M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(550, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(939, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1284, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1728.7, 0)&quot;&gt;&lt;path data-c=&quot;6A&quot; d=&quot;M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2140.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 表示将下标位置 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;i&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -661 345 672&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 到 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;j&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -661 412 865&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6A&quot; d=&quot;M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 的所有元素合并能获得的价值的最大值，那么 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;f(i,j)=\max\{f(i,k)+f(k+1,j)+cost\}&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/fWJhv9xMFTsj3NhEvtEFv2jFChK6scmiat46ficiajicOMgtIAZLRjndTnzNHLaK6ltPmbicxNe3d38nIcqrvbK9ruaF9EiaT7Ha5y/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/span&gt;&lt;/span&gt;，&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;cost&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -626 1748 637&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;63&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(433, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(918, 0)&quot;&gt;&lt;path data-c=&quot;73&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1387, 0)&quot;&gt;&lt;path data-c=&quot;74&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 为将这两组元素合并起来的代价。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;区间 DP 的特点：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「合并」&lt;/strong&gt;：即将两个或多个部分进行整合，当然也可以反过来；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「特征」&lt;/strong&gt;：能将问题分解为能两两合并的形式；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「求解」&lt;/strong&gt;：对整个问题设最优值，枚举合并点，将问题分解为左右两个部分，最后合并两个部分的最优值得到原问题的最优值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐两道题：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于状压 DP 可以参考下我之前写过的一篇文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&amp;amp;mid=2247486874&amp;amp;idx=1&amp;amp;sn=0f27ddd51ad5b92ef0ddcc4fb19a3f5e&amp;amp;chksm=eb88c183dcff4895209c4dc4d005e3bb143cc852805594b407dbf3f4718c60261f09c2849f70&amp;amp;token=1227596150&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt; 状压 DP 是什么？这篇题解带你入门&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数位 DP 通常是这：给定一个闭区间 ，让你求这个区间中满足&lt;strong&gt;「某种条件」&lt;/strong&gt;的数的总数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐一道题 Increasing-Digits&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个我就不多说。因为没啥规律。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之所以列举计数 DP 是因为两个原因：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;让大家知道确实有这个题型。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;计数是动态规划的副产物。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;概率 DP 比较特殊，概率 DP 的状态转移公式一般是说一个状态&lt;strong&gt;有多大的概率从某一个状态转移过来&lt;/strong&gt;，更像是期望的计算，因此也叫期望 DP。&lt;/p&gt;&lt;p&gt;更多题目类型以及推荐题目见刷题插件的学习路线。插件获取方式：公众号力扣加加回复插件。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;什么时候用记忆化递归？&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;从数组两端同时进行遍历的时候使用记忆化递归方便，其实也就是区间 DP（range dp）。比如石子游戏，再比如这道题 https://binarysearch.com/problems/Make-a-Palindrome-by-Inserting-Characters&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果区间 dp 你的遍历方式大概需要这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;solve&lt;/span&gt;&lt;span&gt;(self, s)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        n = len(s)&lt;br/&gt;        dp = [[&lt;span&gt;0&lt;/span&gt;] * n &lt;span&gt;for&lt;/span&gt; _ &lt;span&gt;in&lt;/span&gt; range(n)]&lt;br/&gt;        &lt;span&gt;# 右边界倒序遍历&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(n - &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;-1&lt;/span&gt;, &lt;span&gt;-1&lt;/span&gt;):&lt;br/&gt;            &lt;span&gt;# 左边界正序遍历&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; range(i + &lt;span&gt;1&lt;/span&gt;, n):&lt;br/&gt;                &lt;span&gt;# do something&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt;  dp[&lt;span&gt;0&lt;/span&gt;][m&lt;span&gt;-1&lt;/span&gt;] &lt;span&gt;# 一般都是使用这个区间作为答案&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果使用记忆化递归则不需考虑遍历方式的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;solve&lt;/span&gt;&lt;span&gt;(self, s)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        @lru_cache(None)&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;helper&lt;/span&gt;&lt;span&gt;(l, r)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; l &amp;gt;= r:&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; s[l] == s[r]:&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; helper(l + &lt;span&gt;1&lt;/span&gt;, r - &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; + min(helper(l + &lt;span&gt;1&lt;/span&gt;, r), helper(l, r - &lt;span&gt;1&lt;/span&gt;))&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; helper(&lt;span&gt;0&lt;/span&gt;, len(s) - &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「选择」&lt;/strong&gt; 比较离散的时候，使用记忆化递归更好。比如马走棋盘。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那什么时候不用记忆化递归呢？答案是其他情况都不用。因为普通的 dp table 有一个重要的功能，这个功能记忆化递归是无法代替的，那就是&lt;strong&gt;「滚动数组优化」&lt;/strong&gt;。如果你需要对空间进行优化，那一定要用 dp table。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;热身开始&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;理论知识已经差不多了，我们拿一道题来试试手。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们以一个非常经典的背包问题来练一下手。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;题目：&lt;span&gt;322. 零钱兑换&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。&lt;br/&gt;&lt;br/&gt;你可以认为每种硬币的数量是无限的。&lt;br/&gt;&lt;br/&gt; &lt;br/&gt;&lt;br/&gt;示例 1：&lt;br/&gt;&lt;br/&gt;输入：coins = [1, 2, 5], amount = 11&lt;br/&gt;输出：3&lt;br/&gt;解释：11 = 5 + 5 + 1&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题的参数有两个，一个是 coins，一个是 amount。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以定义状态为 f(i, j) 表示用 coins 的前 i 项找 j 元需要的最少硬币数。那么答案就是 f(len(coins) - 1, amount)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由组合原理，coins 的所有选择状态是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;2^n&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -675.5 974.3 675.5&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(500, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。状态总数就是 i 和 j 的取值的笛卡尔积，也就是 2^len(coins) * (amount + 1)。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;减 1 是因为存在 0 元的情况。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;明确了这些，我们需要考虑的就是状态如何转移，也就是如何从寻常转移到 f(len(coins) - 1, amount)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何确定状态转移方程？我们需要:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;聚焦最优子结构&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;做选择，在选择中取最优解（如果是计数 dp 则进行计数）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于这道题来说，我们的选择有两种：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这无疑是完备的。只不过仅仅是对 coins 中的每一项进行&lt;strong&gt;「选择与不选择」&lt;/strong&gt;，这样的状态数就已经是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;2^n&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -675.5 974.3 675.5&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(500, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 了，其中 n 为 coins 长度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果仅仅是这样枚举肯定会超时，因为状态数已经是指数级别了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而这道题的核心在于 coins[i] 选择与否其实没有那么重要，&lt;strong&gt;「重要的其实是选择的 coins 一共有多少钱」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此我们可以定义 f(i, j) 表示选择了 coins 的前 i 项（怎么选的不关心），且组成 j 元需要的最少硬币数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子来说，比如 coins = [1,2,3] 。那么选择 [1,2] 和 选择 [3] 虽然是不一样的状态，但是我们压根不关心。因为这两者没有区别，我们还是谁对结果贡献大就 pick 谁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以 coins = [1,2,3], amount = 6 来说，我们可以画出如下的递归树。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfic3UdxrSfBAJTfziarRMQ6sNj63dFqCwUY3VYV3QgqM029EluFicqfd6M7KQxYTsMyqBCxaLaM3otQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2000&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（图片来自https://leetcode.com/problems/coin-change/solution/）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此转移方程就是 &lt;code&gt;min(dp[i][j], dp[i-1][j - coins[j]] + 1)&lt;/code&gt;，含义就是：min(不选择 coins[j], 选择 coins[j]) 所需最少的硬币数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用公式表示就是：&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;  dp[i]=\left\{&amp;#10;  \begin{aligned}&amp;#10; min(dp[i][j], dp[i-1][j - coins[j]] + 1) &amp;amp;  &amp;amp; j &amp;gt;= coins[j] \\&amp;#10;  amount + 1 &amp;amp; &amp;amp; j &amp;lt; coins[j] \\&amp;#10;  \end{aligned}&amp;#10;  \right.&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/fWJhv9xMFTsj3NhEvtEFv2jFChK6scmiacZpoA1kicdSWgXXY09RAbtycEUK4EKrdkenluJ8WiaicFaibrfByZb3pLGdEogleeRpU/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;amount 表示无解。因为硬币的面额都是正整数，不可能存在一种需要 amount + 1 枚硬币的方案。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「代码」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;记忆化递归：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;coinChange&lt;/span&gt;&lt;span&gt;(self, coins: List[int], amount: int)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        @lru_cache(None)&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;dfs&lt;/span&gt;&lt;span&gt;(amount)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; amount &amp;lt; &lt;span&gt;0&lt;/span&gt;: &lt;span&gt;return&lt;/span&gt; float(&lt;span&gt;&#x27;inf&#x27;&lt;/span&gt;)&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; amount == &lt;span&gt;0&lt;/span&gt;: &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;            ans = float(&lt;span&gt;&#x27;inf&#x27;&lt;/span&gt;)&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; coin &lt;span&gt;in&lt;/span&gt; coins:&lt;br/&gt;                ans = min(ans, &lt;span&gt;1&lt;/span&gt; + dfs(amount - coin))&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; ans&lt;br/&gt;        ans = dfs(amount)&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;-1&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ans == float(&lt;span&gt;&#x27;inf&#x27;&lt;/span&gt;) &lt;span&gt;else&lt;/span&gt; ans&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;二维 dp:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;coinChange&lt;/span&gt;&lt;span&gt;(self, coins: List[int], amount: int)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; amount &amp;lt; &lt;span&gt;0&lt;/span&gt;:&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; - &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;        dp = [[amount + &lt;span&gt;1&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; _ &lt;span&gt;in&lt;/span&gt; range(len(coins) + &lt;span&gt;1&lt;/span&gt;)]&lt;br/&gt;              &lt;span&gt;for&lt;/span&gt; _ &lt;span&gt;in&lt;/span&gt; range(amount + &lt;span&gt;1&lt;/span&gt;)]&lt;br/&gt;        &lt;span&gt;# 初始化第一行为0，其他为最大值（也就是amount + 1）&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; range(len(coins) + &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;            dp[&lt;span&gt;0&lt;/span&gt;][j] = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, amount + &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, len(coins) + &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; i - coins[j - &lt;span&gt;1&lt;/span&gt;] &amp;gt;= &lt;span&gt;0&lt;/span&gt;:&lt;br/&gt;                    dp[i][j] = min(&lt;br/&gt;                        dp[i][j - &lt;span&gt;1&lt;/span&gt;], dp[i - coins[j - &lt;span&gt;1&lt;/span&gt;]][j] + &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;                &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;                    dp[i][j] = dp[i][j - &lt;span&gt;1&lt;/span&gt;]&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;-1&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; dp[&lt;span&gt;-1&lt;/span&gt;][&lt;span&gt;-1&lt;/span&gt;] == amount + &lt;span&gt;1&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; dp[&lt;span&gt;-1&lt;/span&gt;][&lt;span&gt;-1&lt;/span&gt;]&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;dp[i][j] 依赖于&lt;code&gt;dp[i][j - 1]&lt;/code&gt;和 &lt;code&gt;dp[i - coins[j - 1]][j] + 1)&lt;/code&gt; 这是一个优化的信号，我们可以将其优化到一维。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一维 dp（滚动数组优化）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;coinChange&lt;/span&gt;&lt;span&gt;(self, coins: List[int], amount: int)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;        dp = [amount + &lt;span&gt;1&lt;/span&gt;] * (amount + &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;        dp[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; range(len(coins)):&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, amount + &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; i &amp;gt;= coins[j]:&lt;br/&gt;                    dp[i] = min(dp[i], dp[i - coins[j]] + &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;-1&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; dp[&lt;span&gt;-1&lt;/span&gt;] == amount + &lt;span&gt;1&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; dp[&lt;span&gt;-1&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;推荐练习题目&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后推荐几道题目给大家，建议大家分别使用记忆化递归和动态规划来解决。如果使用动态规划，则尽可能使用滚动数组优化空间。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;0091.decode-ways&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;0139.word-break&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;0198.house-robber&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;0309.best-time-to-buy-and-sell-stock-with-cooldown&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;0322.coin-change&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;0416.partition-equal-subset-sum&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;0518.coin-change-2&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇文章总结了算法中比较常用的两个方法 - 递归和动态规划。递归的话可以拿树的题目练手，动态规划的话则将我上面推荐的刷完，再考虑去刷力扣的动态规划标签即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家前期学习动态规划的时候，可以先尝试使用记忆化递归解决。然后将其改造为动态规划，这样多练习几次就会有感觉。之后大家可以练习一下滚动数组，这个技巧很有用，并且相对来说比较简单。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;动态规划的核心在于定义状态，定义好了状态其他都是水到渠成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;动态规划的难点在于&lt;strong&gt;「枚举所有状态（不重不漏）」&lt;/strong&gt; 和 &lt;strong&gt;「寻找状态转移方程」&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;参考&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;oi-wiki - dp 这个资料推荐大家学习，非常全面。只不过更适合有一定基础的人，大家可以配合本讲义食用哦。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，大家可以去 LeetCode 探索中的 递归 I 中进行互动式学习。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;p&gt;动态规划专题: &lt;em&gt;https://leetcode-cn.com/tag/dynamic-programming/problemset/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2] &lt;/span&gt;&lt;p&gt;力扣题解仓库: &lt;em&gt;https://github.com/azl397985856/leetcode&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3] &lt;/span&gt;&lt;p&gt;322. 零钱兑换: &lt;em&gt;https://leetcode-cn.com/problems/coin-change/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>