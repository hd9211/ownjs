<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f4db535f03a31c3e5cbcd0d9e0bc90c0</guid>
<title>[推荐] 试用了 2000 多个拓展，最后只留下了这 50 个</title>
<link>https://toutiao.io/k/1yhz4eh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6255555555555555&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5VykXMQgTjaJlxg3FU30XsKZSrhDFWbh6ZccVB7rbIxzSicNQ85FZf1tqFm5uMD4YoNyR8dDkFnYPmdDLmZQPAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;阅读指引：&lt;/strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;1、阅读本文预计需要&lt;/span&gt;&lt;span&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;分钟，并提供资源下载。&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;2、本文是&lt;strong&gt;「&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;网上冲浪指南&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;」&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;Internet&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 专题中的&lt;/span&gt;&lt;span&gt;&lt;strong&gt; i03&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 篇&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;更新版本&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，回复关键字 “&lt;span&gt;&lt;strong&gt;i&lt;/strong&gt;&lt;/span&gt;” 查看本专题所有内容。&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;3、第一时间获取更新，欢迎关注「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;奔跑中的奶酪&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;」。&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section class=&quot;&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;导读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;拓展之于浏览器，就像 APP 之于智能手机。&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;拓展的数量成千上万，但能够被用户知道的通常在100个左右，能被用户选择使用的也就50个左右，而大多数人安装的拓展也不会超过10个。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;浏览器拓展的数量庞大，但真正好用的并不多。&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;我们经常能看到很多拓展推荐的文章，好的推荐文章各有不同，但&quot;&lt;strong&gt;没什么卵用&lt;/strong&gt;&quot;的推荐文章大多很相似。&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;一是喜欢标题党。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;动不动就这个神器，那个黑科技，诸如此类的词汇被滥用。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;二是喜欢推荐 Adblock Plus&lt;/strong&gt;。不是说 Adblock Plus 不好，而是实在太入门了，把你当做小白用户来看待。&lt;br/&gt;&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;三是喜欢把拓展（或扩展）说成是插件。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;这是对拓展认识不足的表现，就好像是一个给你推荐电脑的人，他总是把硬盘说成内存。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section class=&quot;&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 class=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;我们需要什么样的拓展？&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;作为一个有着5年开发经验的用户，我很能感受到“&lt;strong&gt;好东西无人问津&lt;/strong&gt;”是一种什么样的体验。&lt;br/&gt;&lt;br/&gt;我试用了&lt;strong&gt;超过2000多款&lt;/strong&gt;浏览器拓展，这让我对浏览器拓展的选择有了新的理解。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;这第一个理解就是：很多拓展没有必要安装。&lt;br/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;真正必备的拓展属于那些&lt;strong&gt;基础辅助的、使用率高的、大多数人都适用&lt;/strong&gt;的拓展，很多拓展其实没有必要安装。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1、一些拓展包含了多个拓展的功能。&lt;br/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一些非常小的功能，比如以图搜图、二维码、网页缓存查询、站内搜索、相似网页查询等，我们没有必要为了这些功能都安装一个相应的拓展，有一款叫 &lt;/span&gt;&lt;span&gt;Selection Context Search&lt;/span&gt;&lt;span&gt; 的拓展就可以搞定以上所有功能。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2、一些拓展可以用脚本代替。&lt;br/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;相对于脚本来说，拓展显得更加重型，如果一个功能可以用脚本代替，那么就不要使用拓展了。&lt;br/&gt;&lt;br/&gt;比如悬浮查看大图的拓展 &lt;/span&gt;&lt;span&gt;Imagus&lt;/span&gt;&lt;span&gt;，我们能感觉得到&lt;span&gt;安装后&lt;/span&gt;，网页加载速度受到的影响，而类似的脚本 &lt;/span&gt;&lt;span&gt;PicViewer&lt;/span&gt;&lt;span&gt; 则几乎没有影响。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3、一些拓展应该选择使用软件版。&lt;br/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于浏览器应用层面的限制，拓展的功能范围，无论再怎么强大也无法穿透浏览器，拓展的功能都是带着“&lt;strong&gt;镣铐&lt;/strong&gt;”的，一些拓展可以选择相关的软件来代替。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如截图拓展 &lt;/span&gt;&lt;span&gt;Nimbus Screen Capture&lt;/span&gt;&lt;span&gt;、文字识别拓展 &lt;/span&gt;&lt;span&gt;Copyfish&lt;/span&gt;&lt;span&gt;、录屏拓展 &lt;/span&gt;&lt;span&gt;Loom&lt;/span&gt;&lt;span&gt;、下载拓展 &lt;/span&gt;&lt;span&gt;Video 
DownloadHelper&lt;/span&gt;&lt;span&gt;，它们都已经是同类拓展中的佼佼者了，但他们还是没有软件版来得更加强大、而且万能。&lt;br/&gt;&lt;br/&gt;比如截图软件用 &lt;/span&gt;&lt;span&gt;FastStone
 Capture&lt;/span&gt;&lt;span&gt;，文字识别软件用 &lt;/span&gt;&lt;span&gt;天若ORC&lt;/span&gt;&lt;span&gt;，录屏软件用 &lt;/span&gt;&lt;span&gt;Camtasia&lt;/span&gt;&lt;span&gt;，下载软件用 &lt;/span&gt;&lt;span&gt;IDM&lt;/span&gt;&lt;span&gt;。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4、忽略行业领域之外的拓展。&lt;br/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一些拓展只有在特定的领域才用得上，比如&lt;strong&gt;开发类拓展、设计类拓展、英语类拓展、娱乐类拓展&lt;/strong&gt;等，如果它们已经超出了我们所在的行业领域，人生苦短，我们就应该直接略过它们。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;5、同类拓展中选择最为简洁的。&lt;br/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;同样的功能，如果有多款拓展可以选择，&lt;strong&gt;那么旗帜鲜明地选择最为简洁的那一款，&lt;/strong&gt;简洁更具普适性，也更加符合高效的理念。&lt;br/&gt;&lt;br/&gt;比如脚本管理工具有 
GreaseMonkey、TamperMonkey、ViolentMonkey 可选，但 &lt;/span&gt;&lt;span&gt;ViolentMonkey&lt;/span&gt;&lt;span&gt; 更为简洁，管理也更加方便，那么选 ViolentMonkey。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section class=&quot;&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 class=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;年度最喜欢浏览器拓展推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;我的第二个理解是：有很多的拓展都是伪需求的。&lt;br/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们总是喜欢尝试试用各种拓展，觉得像是在挖掘宝藏，但它满足的&lt;span&gt;可能&lt;/span&gt;仅仅是我们的猎奇心而已。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;用户其实并不知道自己需要什么，&lt;/strong&gt;用户是想要一匹更快的马吗？不是，用户是想更快地到达目的地。&lt;br/&gt;&lt;br/&gt;我们想要的是各种各样的拓展吗？不是，我们是想要的更快地得到想要的结果。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很多五花八门看似强大的拓展，&lt;strong&gt;对于很多用户来说其实是一种伪需求&lt;/strong&gt;。比如聊天是一种需求，但某款拓展提供可以为任意网页开启聊天室的功能，则是一种伪需求。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在拓展的选择上，我的推荐原则是：&lt;strong&gt;从需要出发，然后倒推浏览器拓展&lt;/strong&gt;。&lt;br/&gt;&lt;br/&gt;下面是我总结的年度最喜欢浏览器拓展列表，支持 Chrome 和 Firefox。&lt;br/&gt;&lt;br/&gt;由于 Chrome 应用商店无法访问，推荐到 &lt;/span&gt;&lt;span&gt;https://crxdl.com&lt;/span&gt;&lt;span&gt; 下载。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;table class=&quot;tablepress tablepress-id-62&quot;&gt;&lt;tbody class=&quot;row-hover&quot;&gt;&lt;tr class=&quot;row-2 even&quot;&gt;&lt;td colspan=&quot;2&quot; class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;常用拓展&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-3 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;span&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;strong&gt;功能介绍&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-4 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;脚本管理&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;ViolentMonkey&lt;/span&gt;，相比 Tampermonkey、GreaseMonkey 更为简洁、方便。&lt;/span&gt;&lt;span&gt;❤&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-5 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;样式管理&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;xStyle&lt;/span&gt;，相比 Stylish、Stylus 更为简洁，管理也更加方便。&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-6 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;拨号页&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;InfinityTab&lt;/span&gt;，可能是目前最好用的新标签页，但自带的图标有购物返利尾巴。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-7 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;翻译工具&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;沙拉查词&lt;/span&gt;，多功能自定义强大的聚合翻译拓展，翻译和学习英语的利器。&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-8 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;代理工具&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Proxy SwitchyOmega&lt;/span&gt; ，操作简单，可以轻松管理和切换多个代理设置。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-9 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;截图工具&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Nimbus Screen Capture&lt;/span&gt;，全能截图拓展，但推荐使用软件 FastStone Capture。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-10 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;稍候阅读&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;In My Pocket&lt;/span&gt;，标记一时没来得急读完的网页，支持多平台同步。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-11 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;视频下载&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Video DownloadHelper&lt;/span&gt;，支持大多数网站，但推荐使用软件 IDM。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-12 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;广告过滤&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;广告净化器&lt;/span&gt;，同时支持网页广告和视频广告过滤，规则更新快，适合国内用户。&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-13 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;密码管理&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;BitWardens&lt;/span&gt;，简单易用，多平台同步，且免费的密码管理工具。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-14 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;鼠标拖拽&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;GlitterDrag&lt;/span&gt;，提供文字、图片和链接的拖拽功能，Chrome 用 crxMouse。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-15 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;浏览器&lt;/span&gt;&lt;span&gt;&lt;br/&gt;请求&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Header Editor&lt;/span&gt;，一款同时拥有重定向，反盗链，用户代理修改等功能的拓展。&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-16 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;右键搜索&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Context Search&lt;/span&gt;，功能最全的右键搜索拓展，支持诸多自定义选项搜索。&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-17 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;RSS&lt;/span&gt;&lt;span&gt;&lt;br/&gt;阅读器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Feeder&lt;/span&gt;，虽然 Feedy，Inoreader 都很好，但 Feeder 的使用体验更加友好。&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-18 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;网页剪藏&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Evernote Web Clipper&lt;/span&gt;，一键标注和保存完整的网页内容到 Evernote 笔记上。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-19 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;恢复&lt;/span&gt;&lt;span&gt;&lt;br/&gt;关闭标签&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Undo Close Tab&lt;/span&gt;，简单且高效的标签恢复拓展。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table class=&quot;tablepress tablepress-id-62&quot;&gt;&lt;tbody class=&quot;row-hover&quot;&gt;&lt;tr class=&quot;row-21 odd&quot;&gt;&lt;td colspan=&quot;2&quot; class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;功能增强&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-22 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;书签检测&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Bookmarks Organizer&lt;/span&gt;，一键查找失效、重复的书签，并支持重定向链接修复。&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-23 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Cookie&lt;br/&gt;编辑&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;EditThisCookie&lt;/span&gt;，Cookie管理器，可以用于编辑Cookie，比如设置最大有效期。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-24 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;Aria2下载&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Aria2 manager&lt;/span&gt;，用于手动导出和自动拦截下载到Aria2下载器。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-25 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;邮件提醒&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Email Notifier&lt;/span&gt;，界面简洁，支持绝大多数邮箱网站。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-26 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;网页监测&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Distill Web Monitor&lt;/span&gt;，用于跟踪监测网页更新。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-27 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;云盘钥匙&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;云盘万能钥匙&lt;/span&gt;，自动填写网盘提取密码和检测链接否有效。&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-28 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;二维码&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;二维码&lt;/span&gt;，将文本、链接、图片等生成二维码，也可识别二维码图片。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-29 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;OCR识别&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Copyfish&lt;/span&gt;，支持图片、截图等方式进行认别，但推荐使用软件“天若OCR”。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-30 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;填表工具&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Informenter&lt;/span&gt;，密码管理拓展一般都会填表功能，如果你不用，这是个不错的选择。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-31 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;链接多选&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Snap Links Plus&lt;/span&gt;，使用鼠标右键可框选多个链接，也可以框选多个复选框。&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-32 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;浏览器&lt;br/&gt;调用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Open With&lt;/span&gt;，用于调用其他浏览器打开当前网页，还可以用于运行多个浏览器配置。&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-33 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;浏览&lt;br/&gt;记录分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;History Master&lt;/span&gt;，更加友好的可视化历史记录分析工具。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-34 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;自动化&lt;br/&gt;工具&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Wildfire&lt;/span&gt;，让工作实现操作自动化，可以用于替代 &lt;/span&gt;&lt;span&gt;iMacros&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-35 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;取消&lt;br/&gt;右键限制&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Enable Right Click and Copy&lt;/span&gt;，解除包括选择，复制，右键菜单等限制，支持白名单。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-36 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;限制访问&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Block Site&lt;/span&gt;，限制自己访问一些指定网站，还有上网时间，适合工作的时候使用。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-37 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;网页&lt;br/&gt;内容替换&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;FoxReplace&lt;/span&gt;，可以替换页面的文字内容，用于编辑时非常好用。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-38 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;输入内容&lt;br/&gt;保存&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Textarea Cache&lt;/span&gt;，自动保存输入框里的内容，做文字编辑时很有用。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-39 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;快捷键&lt;br/&gt;拓展&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Surfingkeys&lt;/span&gt;，让你像 VIM 一样通过键盘来操控浏览器，键盘流必备，按F键显示快捷键。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table class=&quot;tablepress tablepress-id-62&quot;&gt;&lt;tbody class=&quot;row-hover&quot;&gt;&lt;tr class=&quot;row-41 odd&quot;&gt;&lt;td colspan=&quot;2&quot; class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;标签页管理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-42 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;新标签页&lt;br/&gt;覆盖&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;New Tab Override&lt;/span&gt;，使修改新标签页显示的内容成为可能。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-43 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;标签页&lt;br/&gt;切换&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Astrolabe&lt;/span&gt;，使用页面缩略图的方式来切换标签页。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-44 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;标签页&lt;br/&gt;查看&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Tree Style Tab&lt;/span&gt;，以树的形式显示当前打开的标签页，Chrome 用 Aerys。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-45 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;会话管理&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Tab Session Manager&lt;/span&gt;，每隔15分钟自动保存用户的浏览会话。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-46 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;小号管理&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;SessionBox&lt;/span&gt;，方便快捷的小号管理拓展，让你在同一网站同时登录多个账户。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-47 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;节省内存&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;The Great Suspender&lt;/span&gt;，自动或手动冻结不用的标签页来节省内存占用，适合内存较小时。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-48 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;限制&lt;br/&gt;标签数量&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Limit Tabs&lt;/span&gt;，限制浏览器打开标签页的数量，超过时只能先关闭原有的标签页。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-49 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;正文内容&lt;br/&gt;索引&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Falcon&lt;/span&gt;，地址栏输入 f ，可以搜索历史记录里的正文内容。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table class=&quot;tablepress tablepress-id-62&quot;&gt;&lt;tbody class=&quot;row-hover&quot;&gt;&lt;tr class=&quot;row-51 odd&quot;&gt;&lt;td colspan=&quot;2&quot; class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;网页浏览&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-52 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;阅读模式&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;简悦&lt;/span&gt;，更加优雅的阅读模式扩展。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-53 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;雅黑字体&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;替换字体的中文部分为雅黑&lt;/span&gt;，同时避免影响英文部分。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-54 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;手形工具&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;ScrollAnywhere&lt;/span&gt;，按住鼠标左键，像手机屏幕一样地滑动网页。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-55 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;维基阅读&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Wikiwand&lt;/span&gt;，让排版老旧的Wikipedia有一个全新的界面。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-56 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;亮度调整&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Adjust Screen Brightness&lt;/span&gt;，修改屏幕亮度。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-57 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;黑夜模式&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Dark Mode &lt;/span&gt;，将网页变成黑夜阅读模式。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-58 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;网页缩放&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Zoom Page WE&lt;/span&gt;，网页缩放拓展，能记住网站的设置。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-59 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;分屏浏览&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Tile Tabs WE&lt;/span&gt;，标签页分割同屏显示，适合于同时进行多项任务的情况。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-60 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;MD 浏览&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Markdown Viewer&lt;/span&gt;，在浏览器中直接查看 MarkDown 文件。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-61 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;EPUB浏览&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;EPUB Reader&lt;/span&gt;，在浏览器中直接查看 EPUB 文件。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-62 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;MOBI浏览&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;MOBI Reader&lt;/span&gt;，在浏览器中直接查看 MOBI 文件。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table class=&quot;tablepress tablepress-id-62&quot;&gt;&lt;tbody class=&quot;row-hover&quot;&gt;&lt;tr class=&quot;row-64 even&quot;&gt;&lt;td colspan=&quot;2&quot; class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;图片浏览&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-65 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;图片&lt;br/&gt;查看助手&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Hover Zoom+&lt;/span&gt;，鼠标移动到图片上自动显示高清大图，但推荐使用脚本：&lt;/span&gt;&lt;span&gt;PicViewer&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-66 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;图片&lt;br/&gt;一键保存&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;SAVE IN... &lt;/span&gt;，一键将图片保存到指定位置，下载图片的同时又做好图片管理。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-67 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;图片&lt;br/&gt;批量下载&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;ImageAssistant&lt;/span&gt;，可以嗅探、分析网页图片、图片筛选、批量下载等功能。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-68 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;图床工具&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;微博图床&lt;/span&gt;，使用前需要登录微博网页版，而且还支持批量上传。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-69 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Google&lt;br/&gt;GIF&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;GoogleGIFs&lt;/span&gt;，解决谷歌图片搜索结果缩略图不支持播放 GIF 的问题。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table class=&quot;tablepress tablepress-id-62&quot;&gt;&lt;tbody class=&quot;row-hover&quot;&gt;&lt;tr class=&quot;row-71 odd&quot;&gt;&lt;td colspan=&quot;2&quot; class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;音乐收听&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-72 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;音乐收听&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Listen 1&lt;/span&gt;，可以搜索和播放来自网易云音乐，虾米，QQ音乐等网站的歌曲。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-73 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;歌词展示&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Lyrics Here&lt;/span&gt;，在 Youtube，Spotify 等音乐网站上显示当前播放音乐的歌词。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-74 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;广播收听&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Search to Play the Song&lt;/span&gt;，Listen 1的简洁版，不但能听歌，还能听广播。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-75 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;歌曲识别&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;AHA Music&lt;/span&gt;，识别当前浏览器播放中的歌曲，也支持本地音乐。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table class=&quot;tablepress tablepress-id-62&quot;&gt;&lt;tbody class=&quot;row-hover&quot;&gt;&lt;tr class=&quot;row-77 odd&quot;&gt;&lt;td colspan=&quot;2&quot; class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;视频观看&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-78 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;视频放大&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Maximize Video&lt;/span&gt;，将视频放大填充到网页全屏，但推荐类似的脚本 &lt;/span&gt;&lt;span&gt;视频网页全屏&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-79 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;视频弹窗&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Popup Tool&lt;/span&gt;，可将当前视频弹出到小窗播放，Chrome 用 Separate Window。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-80 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;视频&lt;br/&gt;倍数播放&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Video Speed Controller&lt;/span&gt;，Z、X为后退、前进，SD减慢加快，R恢复默认。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-81 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;弹幕&lt;br/&gt;过滤器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;pakku&lt;/span&gt;，哔哩哔哩弹幕过滤器，屏蔽相似弹幕。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-82 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;哔哩哔哩&lt;br/&gt;助手&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;哔哩哔哩助手&lt;/span&gt;，可以下载视频，查询弹幕发送人以及一些十分实用的直播区功能。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-83 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;U2B增强&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Enhancer for YouTube&lt;/span&gt;，为Youtube增加各种实用功能。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-84 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;U2B&lt;br/&gt;地区解锁&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;YouTube Unblocker&lt;/span&gt;，解锁 Youtube 国家地区限制的。&lt;/span&gt;&lt;span&gt;测试视频&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-85 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;U2B&lt;br/&gt;双语字幕&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Dualsub&lt;/span&gt;，让 YouTube 显示双语字幕，英语学习者必备。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-86 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;U2B&lt;br/&gt;频道屏蔽&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;BlockTube&lt;/span&gt;，屏蔽不想看的视频频道，包括首页推荐和搜索页面。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;table class=&quot;tablepress tablepress-id-62&quot;&gt;&lt;tbody class=&quot;row-hover&quot;&gt;&lt;tr class=&quot;row-88 even&quot;&gt;&lt;td colspan=&quot;2&quot; class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Firefox 特有拓展&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-89 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;笔记本&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Sidebar Note&lt;/span&gt;，自动保存，支持快捷键，支持选中文字一键发送至笔记本。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-90 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;侧边栏&lt;br/&gt;浏览&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Side View&lt;/span&gt;，Firefox 官方出品的侧边栏拓展，并支持以手机端查看。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-91 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;添加&lt;br/&gt;搜索引擎&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Add custom search engine&lt;/span&gt;，增加一个类似于Chrome的搜索引擎添加模式。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-92 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;书签图标&lt;br/&gt;刷新&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Checkmarks&lt;/span&gt;，在侧边栏中打开，设置进程后依次打开刷新图标。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-93 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;搜索引擎&lt;br/&gt;编辑&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;mozlz4-edit&lt;/span&gt;，可手动修改火狐的加密配置文件，比如搜索引擎的 search.json.mozlz4。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-94 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;书签&lt;br/&gt;快速添加&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Bookmark Tab Here&lt;/span&gt;，添加一个”添加到此“的选项，用于快速添加书签到指定书签文件夹。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table class=&quot;tablepress tablepress-id-62&quot;&gt;&lt;tbody class=&quot;row-hover&quot;&gt;&lt;tr class=&quot;row-96 even&quot;&gt;&lt;td colspan=&quot;2&quot; class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Chrome 特有拓展&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-97 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;拓展管理&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;SimpleExtManager&lt;/span&gt;，简洁实用，一键管理所有扩展。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-98 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;字体渲染&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;Font Rendering Enhancer&lt;/span&gt;，解决Chrome字体发虚的问题，让字体渲染和Firefox一样。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-99 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;下载管理&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;下载管理&lt;/span&gt;，简洁实用，没有冗余的功能，专注于下载管理。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-100 even&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;strong&gt;&lt;span&gt;书签管理&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;书签侧边栏&lt;/span&gt;，在浏览器视图区左侧添加固定式的, 管理所有书签的侧边栏。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;row-101 odd&quot;&gt;&lt;td class=&quot;column-1&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;拓展下载&lt;br/&gt;助手&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;column-2&quot;&gt;&lt;span&gt;&lt;span&gt;谷歌访问助手&lt;/span&gt;，用于访问 Chrome Web Store 等网站，但使用需要修改主页。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section class=&quot;&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;结尾&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 class=&quot;&quot;&gt;&lt;br/&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h2 class=&quot;&quot;&gt;&lt;span&gt;打造最值得收藏的浏览器拓展列表，&lt;/span&gt;&lt;/h2&gt;&lt;h2 class=&quot;&quot;&gt;&lt;span&gt;以上拓展的下载链接、后续更新，以及其他领域的拓展推荐，&lt;/span&gt;&lt;/h2&gt;&lt;h2 class=&quot;&quot;&gt;&lt;span&gt;都会在奶酪的 Github 上集中更新，&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;欢迎点 ★Star，帮助更多的朋友发现这个项目。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;链接1：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://github.com/runningcheese/RunningCheese-Firefox/tree/master/Extensions&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;链接2：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;&quot;&gt;&lt;span&gt;https://www.runningcheese.com/extensions&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;回复关键字&lt;br/&gt;“&lt;span&gt;&lt;strong&gt;1227&lt;/strong&gt;&lt;/span&gt;”或者“&lt;span&gt;&lt;strong&gt;i03&lt;/strong&gt;&lt;/span&gt;”&lt;br/&gt;获取文中提到的所有资源。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;相关文章：&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMjUyNzYxMw==&amp;amp;mid=2247485116&amp;amp;idx=1&amp;amp;sn=854cf96f6e893471604a85e8ea646949&amp;amp;chksm=9ac85eaeadbfd7b84643db862b431c7796cae3e6ea504192f5de11695ff2cc61cd21407e9083&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;1&quot;&gt;&lt;span&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.175&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5VykXMQgTjYoaqbnicX38mXD85iauibcIBy60F9bIhDMyAt16IiapSBHsUQxv2ePvecibBKtKOcd19RmI9htW9WSgwA/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMjUyNzYxMw==&amp;amp;mid=2247485097&amp;amp;idx=1&amp;amp;sn=fe31a703f6c72341cd263a3e7387985f&amp;amp;chksm=9ac85ebbadbfd7ad44a291046901932a4750d42ba1ea92c4f04292fe41093dc4f25f9d2ecbd6&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;1&quot;&gt;&lt;span&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.175&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5VykXMQgTjYoaqbnicX38mXD85iauibcIByfgCM7Hst8Uibh1tJdFUHP9IddBOp34FAqWjztibNw8alPoJGY3Ix6hIQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMjUyNzYxMw==&amp;amp;mid=2247485131&amp;amp;idx=1&amp;amp;sn=defc76293e52ed52694c70421eefa32b&amp;amp;chksm=9ac85ed9adbfd7cfb9b5666646fdde77071710ea362bc1031a57a03b462a5403ce2efd323324&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;542&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;95&quot; data-ratio=&quot;0.175&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5VykXMQgTjaJlxg3FU30XsKZSrhDFWbhLjLyej5BWSfYlic7GcvOtGicyxzic2l0ZomgB6s6ZvpVHeUmPHCUn6uVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;看完文章：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;喜欢本文，或者这篇文章对你有帮助的话，那么：&lt;br/&gt;&lt;br/&gt;1、&lt;/span&gt;&lt;span&gt;&lt;strong&gt;点再看&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，帮助更多的人看到这篇文章。&lt;br/&gt;2、&lt;/span&gt;&lt;span&gt;&lt;strong&gt;写留言&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，对文章进行评论，我会尽可能回复。&lt;br/&gt;3、&lt;/span&gt;&lt;span&gt;&lt;strong&gt;点关注&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，关注我并星标，第一时间获取更新。&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages &quot; data-ratio=&quot;0.4697986577181208&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;596&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5VykXMQgTjYu09QNUT7TH5050lvafFFjTAk6bRibHt2OHyTZsg2cVuqpHRXOmFekZ7WW6NbibAH7Xib3lX3mK55uA/640?wx_fmt=png&quot;/&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;赞赏／在看二选一&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on WeChat for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e2aa1d614c453ae340e40c4cf836f3f2</guid>
<title>[推荐] 面试：为了进阿里，重新翻阅了 Volatile 与 Synchronized</title>
<link>https://toutiao.io/k/mk7xzsn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h1 cid=&quot;n0&quot; mdtype=&quot;heading&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;欢迎关注公众号【&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;Ccww技术博客&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;】，原创技术文章第一时间推出&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/h1&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在深入理解使用Volatile与Synchronized时，应该先理解明白Java内存模型 （Java Memory Model，JMM）&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h3 cid=&quot;n119&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;Java内存模型（Java Memory Model，JMM）&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n5&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;Java内存（JMM）模型是在硬件内存模型基础上更高层的抽象，它屏蔽了各种硬件和操作系统对内存访问的差异性，从而实现让Java程序在各种平台下都能达到一致的并发效果。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n6&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;JMM的内部工作机制&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n7&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6417445482866043&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EvicK4z5ZDriaSg4EGq5LTtwmQ0ck3M2j2LWvxFwF5rsca7d7GAlLFibV8ADibX56Kk75my0uyWeMYD5K6p82cQGaA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;642&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n8&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n10&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;主内存：存储共享的变量值（实例变量和类变量，不包含局部变量，因为局部变量是线程私有的，因此不存在竞争问题）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n12&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;工作内存：CPU中每个线程中保留共享变量的副本，线程的工作内存，线程在变更修改共享变量后同步回主内存，在变量被读取前从主内存刷新变量值来实现的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n14&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;内存间的交互操作：不同线程之间不能直接访问不属于自己工作内存中的变量，线程间变量的值的传递需要通过主内存中转来完成。（lock，unlock，read，load，use，assign，store，write）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n15&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;JMM内部会有指令重排，并且会有af-if-serial跟happen-before的理念来保证指令的正确性&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n16&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n18&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;为了提高性能，编译器和处理器常常会对既定的代码执行顺序进行指令重排序&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n20&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;af-if-serial：不管怎么重排序，单线程下的执行结果不能被改变&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n22&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;先行发生原则(happen-before)：先行发生原则有很多，其中程序次序原则，在一个线程内，按照程序书写的顺序执行，书写在前面的操作先行发生于书写在后面的操作，准确地讲是控制流顺序而不是代码顺序&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n23&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;Java内存模型为了解决多线程环境下共享变量的一致性问题，包含三大特性，&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n24&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n26&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;原子性：操作一旦开始就会一直运行到底，中间不会被其它线程打断（这操作可以是一个操作，也可以是多个操作），在内存中原子性操作包括read、load、user、assign、store、write，如果需要一个更大范围的原子性可以使用synchronized来实现，synchronized块之间的操作。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n28&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;可见性：一个线程修改了共享变量的值，其它线程能立即感知到这种变化，修改之后立即同步回主内存，每次读取前立即从主内存刷新，可以使用volatile保证可见性，也可以使用关键字synchronized和final。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n30&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;有序性：在本线程中所有的操作都是有序的；在另一个线程中，看来所有的操作都是无序的，就可需要使用具有天然有序性的volatile保持有序性，因为其禁止重排序。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n31&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;在理解了JMM的时，来讲讲Volatile与Synchronized的使用，Volatile与Synchronized到底有什么作用呢？&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h3 cid=&quot;n123&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;Volatile&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n33&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;Volatile 的特性&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n41&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;Volatile可见性&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n42&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;当写一个volatile变量时，JMM会把该线程对应的工作内存中的共享变量值更新后刷新到主内存，&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n43&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;当读取一个volatile变量时，JMM会把该线程对应的工作内存置为无效，线程会从主内存中读取共享变量。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n44&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;写操作:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7098976109215017&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDriaSg4EGq5LTtwmQ0ck3M2j2Sic00jSBLwpY57gqjGjicZSoBSibAlabWLP1aqe3ckKlA0Qxmapshz7Sg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;586&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n46&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;读操作：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n47&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.726962457337884&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDriaSg4EGq5LTtwmQ0ck3M2j2reGSqDuTkLWaTKKs8nKSclQ9ia9dYc7yRXuxB4gluhXibj8KtibVA2wMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;586&quot;/&gt;&lt;/p&gt;&lt;h4 cid=&quot;n48&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;Volatile 禁止指令重排&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n49&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;JMM对volatile的禁止指令重排采用内存屏障插入策略：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n50&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;在每个volatile写操作的前面插入一个StoreStore屏障。在每个volatile写操作的后面插入一个StoreLoad屏障&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0705882352941176&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDriaSg4EGq5LTtwmQ0ck3M2j2WhLqEx8msTSd6Wkib9GIUZkiatjSZOHQ0oMVcESEOs7pVeUASAOcScpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;425&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n53&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;在每个volatile读操作的后面插入一个LoadLoad屏障。在每个volatile读操作的后面插入一个LoadStore屏障&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.1164556962025316&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDriaSg4EGq5LTtwmQ0ck3M2j2q2iaGTBXRsLkE4icYY3xgyz4WOxXCdhzSiagPIQBnavy6zfYUQcal6NhQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;395&quot;/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h3 cid=&quot;n127&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;Synchronized&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n55&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;Synchronized是Java中解决并发问题的一种最常用的方法，也是最简单的一种方法。Synchronized的作用主要有三个：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n56&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n58&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;原子性：确保线程互斥的访问同步代码；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n60&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;可见性：保证共享变量的修改能够及时可见，其实是通过Java内存模型中的 “对一个变量unlock操作之前，必须要同步到主内存中；如果对一个变量进行lock操作，则将会清空工作内存中此变量的值，在执行引擎使用此变量前，需要重新从主内存中load操作或assign操作初始化变量值” 来保证的&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n62&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;有序性：有效解决重排序问题，即 “一个unlock操作先行发生(happen-before)于后面对同一个锁的lock操作”；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n63&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;Synchronized总共有三种用法：&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n64&quot; mdtype=&quot;blockquote&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot; start=&quot;&quot; cid=&quot;n65&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n67&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;当synchronized作用在实例方法时，监视器锁（monitor）便是对象实例（this）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n69&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;当synchronized作用在静态方法时，监视器锁（monitor）便是对象的Class实例，因为Class数据存在于永久代，因此静态方法锁相当于该类的一个全局锁；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n71&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;当synchronized作用在某一个对象实例时，监视器锁（monitor）便是括号括起来的对象实例；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n72&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;更加详细的解析看&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2ODk2NDMwNw==&amp;amp;mid=2247484019&amp;amp;idx=1&amp;amp;sn=09e8f2b7811b1c4946ca6ede30859391&amp;amp;chksm=fc84a7cfcbf32ed93b02d56c58050afbc1fa7bba0b46f7eb430a1de212d0746f6092fc02833f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《Java并发之Synchronized》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;span&gt;《&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Java并发之Synchronized》&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2ODk2NDMwNw==&amp;amp;mid=2247484019&amp;amp;idx=1&amp;amp;sn=09e8f2b7811b1c4946ca6ede30859391&amp;amp;chksm=fc84a7cfcbf32ed93b02d56c58050afbc1fa7bba0b46f7eb430a1de212d0746f6092fc02833f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Synchronized&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n73&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;理解了Volatile与Synchronized后，那我们来看看如何使用Volatile与Synchronized优化单例模式&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h3 cid=&quot;n134&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;单例模式优化-双重检测DCL（Double Check Lock）&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n75&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;先来看看一般模式的单例模式：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Singleton&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; Singleton singleton;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Singleton&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;code-snippet__title&quot;&gt;getInstance&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(singleton == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               singleton = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Singleton();   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; singleton;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n77&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;可能出现问题：当有两个线程A和B，&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n78&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n80&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;线程A判断&lt;code&gt;if(singleton == null)&lt;/code&gt;准备执行创建实例时，线程挂起，&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n82&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;此时线程B也会判断singleton为空，接着执行创建实例对象返回；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n84&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;最后，由于线程A已进入也会创建了实例对象，这就导致多个单例对象的情况&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n85&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;首先想到是那就在使用synchronized作用在静态方法：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Singleton&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; Singleton singleton;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;synchronized&lt;/span&gt; Singleton &lt;span class=&quot;code-snippet__title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(singleton == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      singleton = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Singleton();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; singleton;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n87&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;虽然这样简单粗暴解决，但会导致这个方法比较效率低效，导致程序性能严重下降，那是不是还有其他更优的解决方案呢？&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n88&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;可以进一步优化创建了实例之后，线程再同步锁之前检验singleton非空就会直接返回对象引用，而不用每次都在同步代码块中进行非空验证，&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n89&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;如果只有synchronized前加一个singleton非空，就会出现第一种情况多个线程同时执行到条件判断语句时，会创建多个实例&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n90&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;因此需要在synchronized后加一个singleton非空，就不会出现会创建多个实例，&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; Singleton singleton;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;code-snippet__title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(singleton == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;synchronized&lt;/span&gt;(Singleton.class){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(singleton == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   singleton = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Singleton();   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; singleton;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n92&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;这个优化方案虽然解决了只创建单个实例，由于存在着指令重排，会导致在多线程下也是不安全的（当发生了重排后，后续的线程发现singleton不是null而直接使用的时候，就会出现意料之外的问题。）。导致原因&lt;code&gt;singleton = new Singleton()&lt;/code&gt;新建对象会经历三个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n100&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;由于重排序的缘故，步骤2、3可能会发生重排序，其过程如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n101&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n103&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;1.分配内存空间&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n105&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;2.将内存空间的地址赋值给对应的引用&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n107&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;3.初始化对象&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n108&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;那么问题找到了，那怎么去解决呢？那就禁止不允许初始化阶段步骤2 、3发生重排序，刚好Volatile 禁止指令重排，从而使得双重检测真正发挥作用。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Singleton&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; Singleton singleton;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;code-snippet__title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(singleton == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;synchronized&lt;/span&gt; (Singleton.class){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(singleton == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               singleton = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Singleton();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; singleton;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n110&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;最终我们这个完美的双重检测单例模式出来了&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h3 cid=&quot;n117&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h3&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n145&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n147&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n149&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n151&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n153&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n155&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n157&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;使用volatile而不是synchronized的唯一安全的情况是类中只有一个可变的域&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>316658b430649d4ba3b6467d213f6ca9</guid>
<title>[推荐] 写一个通用的幂等组件，我觉得很有必要</title>
<link>https://toutiao.io/k/jvghjpf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-shimo-docs=&quot;[[20,&amp;quot;本文目录&amp;quot;,&amp;quot;8:1&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;init\&amp;quot;&amp;quot;],[20,&amp;quot;背景&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;9crj\&amp;quot;|list-start:\&amp;quot;1\&amp;quot;|ordered:\&amp;quot;decimal\&amp;quot;&amp;quot;],[20,&amp;quot;简单幂等实现&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;JpMI\&amp;quot;|list-start:\&amp;quot;2\&amp;quot;|ordered:\&amp;quot;decimal\&amp;quot;&amp;quot;],[20,&amp;quot;    2.1 数据库记录判断&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;No07\&amp;quot;&amp;quot;],[20,&amp;quot;    2.2 并发问题解决&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;XEao\&amp;quot;&amp;quot;],[20,&amp;quot;通用幂等实现&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;57em\&amp;quot;|list-start:\&amp;quot;3\&amp;quot;|ordered:\&amp;quot;decimal\&amp;quot;&amp;quot;],[20,&amp;quot;    3.1 设计方案&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;Djsy\&amp;quot;&amp;quot;],[20,&amp;quot;        3.1.1 通用存储&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;XVDa\&amp;quot;&amp;quot;],[20,&amp;quot;        3.1.2 使用简单&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;lAmZ\&amp;quot;&amp;quot;],[20,&amp;quot;        3.1.3 支持注解&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;FuKa\&amp;quot;&amp;quot;],[20,&amp;quot;        3.1.4 多级存储&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;gehy\&amp;quot;&amp;quot;],[20,&amp;quot;        3.1.5 并发读写&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;f9PN\&amp;quot;&amp;quot;],[20,&amp;quot;        3.1.6 执行流程&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;9IHk\&amp;quot;&amp;quot;],[20,&amp;quot;    3.2 幂等接口&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;PGMT\&amp;quot;&amp;quot;],[20,&amp;quot;    3.3 幂等注解&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;LreR\&amp;quot;&amp;quot;],[20,&amp;quot;    3.4 自动区分重复请求&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;6TLO\&amp;quot;&amp;quot;],[20,&amp;quot;    3.5 存储结构&amp;quot;],[20,&amp;quot;\n&amp;quot;,&amp;quot;24:\&amp;quot;ImhL\&amp;quot;&amp;quot;],[20,&amp;quot;    3.6 源码地址&amp;quot;]]&quot;&gt;&lt;p line=&quot;init&quot;&gt;&lt;strong&gt;本文目录&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;背景&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;简单幂等实现&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p line=&quot;No07&quot;&gt;      2.1 数据库记录判断&lt;/p&gt;&lt;p line=&quot;XEao&quot;&gt;      2.2 并发问题解决&lt;/p&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;通用 幂等实现&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p line=&quot;Djsy&quot;&gt;      3.1 设计方案&lt;/p&gt;&lt;p line=&quot;XVDa&quot;&gt;         3.1.1 通用存储&lt;/p&gt;&lt;p line=&quot;lAmZ&quot;&gt;         3.1.2 使用简单&lt;/p&gt;&lt;p line=&quot;FuKa&quot;&gt;         3.1.3 支持注解&lt;/p&gt;&lt;p line=&quot;gehy&quot;&gt;         3.1.4 多级存储&lt;/p&gt;&lt;p line=&quot;f9PN&quot;&gt;         3.1.5 并发读写 &lt;/p&gt;&lt;p line=&quot;9IHk&quot;&gt;         3.1.6 执行流程&lt;/p&gt;&lt;p line=&quot;PGMT&quot;&gt;      3.2 幂等接口&lt;/p&gt;&lt;p line=&quot;LreR&quot;&gt;      3.3 幂等注解&lt;/p&gt;&lt;p line=&quot;6TLO&quot;&gt;      3.4 自动区分重复请求&lt;/p&gt;&lt;p line=&quot;ImhL&quot;&gt;      3.5 存储结构&lt;/p&gt;&lt;p line=&quot;iwq4&quot;&gt;      3.6 源码地址&lt;/p&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回答群友的问题：&lt;strong&gt;幂等有没有什么通用的方案和实践？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于什么是幂等，本文就不再阐述了。相信大家都知道，并且也都遇到过类似的问题以及有自己的一套解决方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基本上所有业务系统中的幂等都是各自进行处理，也不是说不能统一处理，统一处理的话需要考虑的内容会比较多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我个人认为核心的业务还是适合业务方自己去处理，比如订单支付，会有个支付记录表，一个订单只能被支付一次，通过支付记录表就可以达到幂等的效果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一些不是核心的业务，但是也有幂等的需求。比如网络问题，多次重试。用户点击多次等场景。这种场景下还是需要一个通用的幂等框架来处理，会让业务开发更加简单。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;简单幂等实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;幂等的实现其实并不复杂，方案也有很多种，首先介绍下基于数据库记录的方案来实现，后面再介绍通用方案。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;数据库记录判断&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以文章开头讲的支付场景来举例。业务场景是一个订单只能支付一次，所以我们在支付之前会判断这个订单有没有支付过，如果没有支付过则进行支付，如果支付过了，就反正支付成功，幂等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式需要有一个额外的表来存储做过的动作，才能判断之前有没有做过这件事情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就好比你年龄大了，然后还是单身的技术宅。这个时候你家里着急了呀，你老妈天天给你介绍小姐姐。你每个周末都要打扮的非常帅气，去见你老妈给你介绍的小姐姐。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;去之前你得记录下吧，8 月第一周我见的 XXX, 第二周我见的 YYY, 如果第三周又让你去见 XXX, 如果这个时候你不喜欢 XXX, 你会翻出你的小本本看下，这个之前见过了，没必要再见了，不然见了多尴尬啊。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;并发问题解决&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过查询支付记录，判断能否进行支付在业务逻辑上没一点问题。但是在并发场景就会有问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1001 的订单发起了两次支付请求，当前两个请求同时查询支付记录，都没有查询到，然后都开始走支付的逻辑，最后发现同一个订单支付了两次，这就是并发导致的幂等问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并发解决的方案也有很多种，简单点的直接用数据库的唯一索引解决，稍微麻烦点的都会用分布式锁来对同一个资源进行加锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我们对订单 1001 进行加锁，如果同时发起了两次支付请求，那么同一时间只能有一个请求可以获取锁，另一个请求获取不到锁可以直接失败，也可以等待前面的请求执行完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果等待前面的请求执行完成，接着往下处理，就能查到 1001 已经支付过了，直接返回支付成功了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;通用幂等实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了能够让大家更专注于业务功能的开发，简单场景的幂等操作我认为可以进行统一封装来处理，下面介绍一下通用幂等的实现。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8486842105263158&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WRLYshvT39xHLNgtPkianubOzwaVAYgg4hyQBYoGDWVQglV3riaZwibKncbmL99Hbk2xyuibvicwzcbuuwib4fLsevGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;912&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;设计方案&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;通用存储&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般我们在程序内部做幂等的话都是先查询，然后根据查询的结果做对应的操作。同时会对相同的资源进行加锁来避免并发问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加锁是通用的，不通用的部分就是判断这个操作之前有没有操作过，所以我们需要有一个通用的存储来记录所有的操作。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;使用简单&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提供通用的幂等组件，注入对应的类即可实现幂等，屏蔽加锁，记录判断等逻辑。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;支持注解&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了通过代码的方式来进行幂等的控制，同时为了让使用更加简单，还需要提供注解的方式来支持幂等，使用者只需要在对应的业务方法上增加对应的注解，即可实现幂等。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;多级存储&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要支持多级存储，比如一级存储可以用 Redis 来实现，优点是性能高，适用于 90%的场景。因为很多场景都是为了防止短时间内请求重复导致的问题，通过设置一定的失效时间，让 Key 自动失效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;二级存储可以支持 Mysql, Mongo 等数据库，适用于时间长或者永久存储的场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以通过配置指定一级存储用什么，二级存储用什么。&lt;strong&gt;这个场景非常适合用策略模式来实现。&lt;/strong&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;并发读写&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;引入多级存储势必会涉及到并发读写的场景，可以支持两种方式，顺序和并发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顺序就是先写一级存储，再写二级存储，读也是一样。这样的问题在于性能会有点损耗。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并发就是多线程同时写入，同时读取，提高性能。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;幂等执行流程&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.8670886075949367&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WRLYshvT39xHLNgtPkianubOzwaVAYgg4icQBdhhBJl9TibmxWc8WzYaAicSNuS07CoyGOOCMVsxiaoEjvfKrvsU9PQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;948&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;幂等接口&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;幂等接口定义&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public interface DistributedIdempotent {&lt;br/&gt;    /**&lt;br/&gt;     * 幂等执行&lt;br/&gt;     * @param key 幂等Key&lt;br/&gt;     * @param lockExpireTime 锁的过期时间&lt;br/&gt;     * @param firstLevelExpireTime 一级存储过期时间&lt;br/&gt;     * @param secondLevelExpireTime 二级存储过期时间&lt;br/&gt;     * @param timeUnit 存储时间单位&lt;br/&gt;     * @param readWriteType 读写类型&lt;br/&gt;     * @param execute 要执行的逻辑&lt;br/&gt;     * @param fail Key已经存在，幂等拦截后的执行逻辑&lt;br/&gt;     * @return&lt;br/&gt;     */&lt;br/&gt;    &amp;lt;T&amp;gt; T execute(String key, int lockExpireTime, int firstLevelExpireTime, int secondLevelExpireTime, TimeUnit timeUnit, ReadWriteTypeEnum readWriteType, Supplier&amp;lt;T&amp;gt; execute, Supplier&amp;lt;T&amp;gt; fail);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;使用方式&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/**&lt;br/&gt; * 代码方式幂等-有返回值&lt;br/&gt; * @param key&lt;br/&gt; * @return&lt;br/&gt; */&lt;br/&gt;public String idempotentCode(String key) {&lt;br/&gt;    return distributedIdempotent.execute(key, 10, 10, 50, TimeUnit.SECONDS, ReadWriteTypeEnum.ORDER, () -&amp;gt; {&lt;br/&gt;        System.out.println(&quot;进来了。。。。&quot;);&lt;br/&gt;        return &quot;success&quot;;&lt;br/&gt;    }, () -&amp;gt; {&lt;br/&gt;        System.out.println(&quot;重复了。。。。&quot;);&lt;br/&gt;        return &quot;fail&quot;;&lt;br/&gt;    });&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;幂等注解&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用注解，能够让使用更加简单，比如我们的事务处理，缓存等都使用了注解来简化逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;幂等的场景也可以定义通用的注解来简化使用难度，在需要支持幂等的业务方法上增加注解，配置基本信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;idempotentHandler 是触发幂等规则后执行的方法，也就是我们用代码实现幂等时候的 Supplier&lt;t&gt;fail 参数。实现是用的阿里 Sentinel 限流，熔断后的处理那套逻辑。&lt;/t&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在幂等的场景下，如果是重复执行，通常返回跟正常执行一样的结果即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/**&lt;br/&gt; * 注解方式幂等-指定幂等规则触发后执行的方法&lt;br/&gt; * @param key&lt;br/&gt; */&lt;br/&gt;@Idempotent(spelKey = &quot;#key&quot;, idempotentHandler = &quot;idempotentHandler&quot;, readWriteType = ReadWriteTypeEnum.PARALLEL, secondLevelExpireTime = 60)&lt;br/&gt;public void idempotent(String key) {&lt;br/&gt;    System.out.println(&quot;进来了。。。。&quot;);&lt;br/&gt;}&lt;br/&gt;public void idempotentHandler(String key, IdempotentException e) {&lt;br/&gt;    System.out.println(key + &quot;:idempotentHandler已经执行过了。。。。&quot;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;自动区分重复请求&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码方式处理幂等，需要传入幂等的 Key，注解方式处理幂等，支持配置 Key，支持 SPEL 表达式。这两种都是需要在使用的时候就确定好根据什么来作为幂等的唯一性判断。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一种幂等的场景是比较常见的，就是防止重复提交或者网络问题超时重试。同样的操作会请求多次，这种场景下可以在操作之前先申请一个唯一的 ID，每次请求的时候带给后端，这样就能标识整个请求的唯一性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我目前做了一个自动生成唯一标识的功能，简单来说就是根据请求的信息进行 MD5，如果 MD5 值没有变化就认为是同一次请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要进行 MD5 的内容有请求 URL 参数，请求体，请求头信息。请求头的信息在没有指定用户相关 Key 的场景下会进行全部拼接，如果配置了请求头 userId 为用户的标识，那么只会用 userId。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会在请求的入口处进行幂等 Key 的自动生成，如果在使用幂等注解的时候没有指定 spelKey, 就会使用自动生成的 Key。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;存储结构&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis: 使用 String 类型存储，Key 是幂等 Key, Value 默认为 1。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Mysql: 需要创建一张记录表。（过期的数据需要定时清理，也可以永久存储）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CREATE TABLE `idempotent_record` (&lt;br/&gt;  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,&lt;br/&gt;  `key` varchar(50) NULL DEFAULT &#x27;&#x27;,&lt;br/&gt;  `value` varchar(50) NOT NULL DEFAULT &#x27;&#x27;,&lt;br/&gt;  `expireTime` timestamp NOT NULL COMMENT &#x27;过期时间&#x27;,&lt;br/&gt;  `addTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,&lt;br/&gt;  PRIMARY KEY (`id`)&lt;br/&gt;) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#x27;幂等记录&#x27;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Mongo: 字段跟 Mysql 一样，转换成 Json 格式即可。Mongo 会自动创建集合。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;源码地址&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;源码：https://github.com/yinjihuan/kitty&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示列：https://github.com/yinjihuan/kitty-samples&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;码字不易，可以的话来个三连击，感谢！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;关于作者&lt;/strong&gt;：尹吉欢，简单的技术爱好者，《Spring Cloud 微服务-全栈技术与案例解析》, 《Spring Cloud 微服务 入门 实战与进阶》作者, 公众号&lt;strong&gt;猿天地&lt;/strong&gt;发起人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我整理了一份很全的学习资料，感兴趣的可以微信搜索「&lt;strong&gt;猿天地&lt;/strong&gt;」，回复关键字 「&lt;strong&gt;学习资料&lt;/strong&gt;」获取我整理好了的 Spring Cloud，Spring Cloud Alibaba，Sharding-JDBC 分库分表，任务调度框架 XXL-JOB，MongoDB，爬虫等相关资料。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>780b1cd69251fbb3ed2ab66991e697c8</guid>
<title>[推荐] 一个 @Transaction 哪里来这么多坑？</title>
<link>https://toutiao.io/k/cxzkwbd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;点击蓝色“&lt;/span&gt;&lt;span&gt;程序员DMZ &lt;/span&gt;&lt;span&gt;”关注我哟&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;好看记得加个“&lt;/span&gt;&lt;span&gt;星标&lt;/span&gt;&lt;span&gt;”哈！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在之前的文章中已经对Spring中的事务做了详细的分析了，这篇文章我们来聊一聊平常工作时使用事务可能出现的一些问题（本文主要针对使用&lt;code&gt;@Transactional&lt;/code&gt;进行事务管理的方式进行讨论）以及对应的解决方案&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;事务失效&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;事务回滚相关问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;读写分离跟事务结合使用时的问题&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;事务失效&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事务失效我们一般要从两个方面排查问题&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;数据库层面&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据库层面，数据库使用的存储引擎是否支持事务？默认情况下MySQL数据库使用的是Innodb存储引擎（5.5版本之后），它是支持事务的，但是如果你的表特地修改了存储引擎，例如，你通过下面的语句修改了表使用的存储引擎为&lt;code&gt;MyISAM&lt;/code&gt;，而&lt;code&gt;MyISAM&lt;/code&gt;又是不支持事务的&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; table_name &lt;span&gt;engine&lt;/span&gt;=myisam;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就会出现“事务失效”的问题了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「解决方案」&lt;/strong&gt;：修改存储引擎为&lt;code&gt;Innodb&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;业务代码层面&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务层面的代码是否有问题，这就有很多种可能了&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;我们要使用Spring的声明式事务，那么需要执行事务的Bean是否已经交由了Spring管理？在代码中的体现就是类上是否有&lt;code&gt;@Service&lt;/code&gt;、&lt;code&gt;Component&lt;/code&gt;等一系列注解&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「解决方案」&lt;/strong&gt;：将Bean交由Spring进行管理（添加&lt;code&gt;@Service&lt;/code&gt;注解）&lt;/p&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;@Transactional&lt;/code&gt;注解是否被放在了合适的位置。在上篇文章中我们对Spring中事务失效的原理做了详细的分析，其中也分析了Spring内部是如何解析&lt;code&gt;@Transactional&lt;/code&gt;注解的，我们稍微回顾下代码：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2005157962604771&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tpEILlElskL8LiaJIRAxaHXChicfEsHAlYS7C25BP05jMXb5tDRg22MGyWiblFUiaLlIpmtstI20sv06EKCVB7fSMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1551&quot;/&gt;&lt;figcaption&gt;注解解析&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;代码位于：&lt;code&gt;AbstractFallbackTransactionAttributeSource#computeTransactionAttribute&lt;/code&gt;中&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说，默认情况下你无法使用&lt;code&gt;@Transactional&lt;/code&gt;对一个非public的方法进行事务管理&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「解决方案」&lt;/strong&gt;：修改需要事务管理的方法为&lt;code&gt;public&lt;/code&gt;。&lt;/p&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;出现了自调用。什么是自调用呢？我们看个例子&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DmzService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;saveAB&lt;/span&gt;&lt;span&gt;(A a, B b)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  saveA(a);&lt;br/&gt;  saveB(b);&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Transactional&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;saveA&lt;/span&gt;&lt;span&gt;(A a)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  dao.saveA(a);&lt;br/&gt; }&lt;br/&gt; &lt;br/&gt; &lt;span&gt;@Transactional&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;saveB&lt;/span&gt;&lt;span&gt;(B b)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;  dao.saveB(a);&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面三个方法都在同一个类&lt;code&gt;DmzService&lt;/code&gt;中，其中&lt;code&gt;saveAB&lt;/code&gt;方法中调用了本类中的&lt;code&gt;saveA&lt;/code&gt;跟&lt;code&gt;saveB&lt;/code&gt;方法，这就是自调用。在上面的例子中&lt;code&gt;saveA&lt;/code&gt;跟&lt;code&gt;saveB&lt;/code&gt;上的事务会失效&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么自调用为什么会导致事务失效呢？我们知道Spring中事务的实现是依赖于&lt;code&gt;AOP&lt;/code&gt;的，当容器在创建&lt;code&gt;dmzService&lt;/code&gt;这个Bean时，发现这个类中存在了被&lt;code&gt;@Transactional&lt;/code&gt;标注的方法（修饰符为public）那么就需要为这个类创建一个代理对象并放入到容器中，创建的代理对象等价于下面这个类&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DmzServiceProxy&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; DmzService dmzService;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;DmzServiceProxy&lt;/span&gt;&lt;span&gt;(DmzService dmzService)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.dmzService = dmzService;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;saveAB&lt;/span&gt;&lt;span&gt;(A a, B b)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        dmzService.saveAB(a, b);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;saveA&lt;/span&gt;&lt;span&gt;(A a)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;// 开启事务&lt;/span&gt;&lt;br/&gt;            startTransaction();&lt;br/&gt;            dmzService.saveA(a);&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            &lt;span&gt;// 出现异常回滚事务&lt;/span&gt;&lt;br/&gt;            rollbackTransaction();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// 提交事务&lt;/span&gt;&lt;br/&gt;        commitTransaction();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;saveB&lt;/span&gt;&lt;span&gt;(B b)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;// 开启事务&lt;/span&gt;&lt;br/&gt;            startTransaction();&lt;br/&gt;            dmzService.saveB(b);&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            &lt;span&gt;// 出现异常回滚事务&lt;/span&gt;&lt;br/&gt;            rollbackTransaction();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// 提交事务&lt;/span&gt;&lt;br/&gt;        commitTransaction();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面是一段伪代码，通过&lt;code&gt;startTransaction&lt;/code&gt;、&lt;code&gt;rollbackTransaction&lt;/code&gt;、&lt;code&gt;commitTransaction&lt;/code&gt;这三个方法模拟代理类实现的逻辑。因为目标类&lt;code&gt;DmzService&lt;/code&gt;中的&lt;code&gt;saveA&lt;/code&gt;跟&lt;code&gt;saveB&lt;/code&gt;方法上存在&lt;code&gt;@Transactional&lt;/code&gt;注解，所以会对这两个方法进行拦截并嵌入事务管理的逻辑，同时&lt;code&gt;saveAB&lt;/code&gt;方法上没有&lt;code&gt;@Transactional&lt;/code&gt;，相当于代理类直接调用了目标类中的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们会发现当通过代理类调用&lt;code&gt;saveAB&lt;/code&gt;时整个方法的调用链如下：&lt;/p&gt;&lt;img data-ratio=&quot;1.8676470588235294&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tpEILlElskL8LiaJIRAxaHXChicfEsHAlY52FYALVD493lYV68mPwSbzp3WZj4tibJRIQiaYpn1rErIzGKAiaoicia9cw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;680&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上我们在调用&lt;code&gt;saveA&lt;/code&gt;跟&lt;code&gt;saveB&lt;/code&gt;时调用的是目标类中的方法，这种清空下，事务当然会失效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常见的自调用导致的事务失效还有一个例子，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DmzService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;@Transactional&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;save&lt;/span&gt;&lt;span&gt;(A a, B b)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  saveB(b);&lt;br/&gt; }&lt;br/&gt; &lt;br/&gt; &lt;span&gt;@Transactional&lt;/span&gt;(propagation = Propagation.REQUIRES_NEW)&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;saveB&lt;/span&gt;&lt;span&gt;(B b)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;  dao.saveB(a);&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们调用&lt;code&gt;save&lt;/code&gt;方法时，我们预期的执行流程是这样的&lt;/p&gt;&lt;img data-ratio=&quot;0.7207074428887251&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tpEILlElskL8LiaJIRAxaHXChicfEsHAlY4IibkQ9vzSibYwcLEiaOw0IPiaDYZaH06YicRfsnaIRaicddPM5hq2FQNicibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1357&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说两个事务之间互不干扰，每个事务都有自己的开启、回滚、提交操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但根据之前的分析我们知道，实际上在调用saveB方法时，是直接调用的目标类中的saveB方法，在saveB方法前后并不会有事务的开启或者提交、回滚等操作，实际的流程是下面这样的&lt;/p&gt;&lt;img data-ratio=&quot;2.133116883116883&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tpEILlElskL8LiaJIRAxaHXChicfEsHAlYAmgJu7OXT0ERqttheniauRct6FEmCmLveRCfA5yyklNdiaFib2dZQYWEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;616&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于saveB方法实际上是由dmzService也就是目标类自己调用的，所以在saveB方法的前后并不会执行事务的相关操作。这也是自调用带来问题的根本原因：&lt;strong&gt;「自调用时，调用的是目标类中的方法而不是代理类中的方法」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「解决方案」&lt;/strong&gt;：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;自己注入自己，然后显示的调用，例如：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DmzService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;// 自己注入自己&lt;/span&gt;&lt;br/&gt; &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt; DmzService dmzService;&lt;br/&gt; &lt;br/&gt; &lt;span&gt;@Transactional&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;save&lt;/span&gt;&lt;span&gt;(A a, B b)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  dmzService.saveB(b);&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Transactional&lt;/span&gt;(propagation = Propagation.REQUIRES_NEW)&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;saveB&lt;/span&gt;&lt;span&gt;(B b)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;  dao.saveB(a);&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种方案看起来不是很优雅&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;利用&lt;code&gt;AopContext&lt;/code&gt;，如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DmzService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Transactional&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;save&lt;/span&gt;&lt;span&gt;(A a, B b)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  ((DmzService) AopContext.currentProxy()).saveB(b);&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Transactional&lt;/span&gt;(propagation = Propagation.REQUIRES_NEW)&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;saveB&lt;/span&gt;&lt;span&gt;(B b)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;  dao.saveB(a);&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;使用上面这种解决方案需要注意的是，需要在配置类上新增一个配置&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// exposeProxy=true代表将代理类放入到线程上下文中，默认是false&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@EnableAspectJAutoProxy&lt;/span&gt;(exposeProxy = &lt;span&gt;true&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p&gt;个人比较喜欢的是第二种方式&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们做个来做个小总结&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一图胜千言&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2678711704634721&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tpEILlElskL8LiaJIRAxaHXChicfEsHAlYoqugKlpRiaLexAGwfSCaRibFm6URd8fdBJ79WP5fksRiakRG3FKNR6SMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1273&quot;/&gt;&lt;figcaption&gt;事务失效的原因&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;事务回滚相关问题&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回滚相关的问题可以被总结为两句话&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;想回滚的时候事务却提交了&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;想提交的时候被标记成只能回滚了（rollback only）&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先看第一种情况：&lt;strong&gt;「想回滚的时候事务却提交了」&lt;/strong&gt;。这种情况往往是程序员对Spring中事务的&lt;code&gt;rollbackFor&lt;/code&gt;属性不够了解导致的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;Spring默认抛出了未检查&lt;code&gt;unchecked&lt;/code&gt;异常（继承自 &lt;code&gt;RuntimeException&lt;/code&gt; 的异常）或者 &lt;code&gt;Error&lt;/code&gt;才回滚事务；其他异常不会触发回滚事务，已经执行的SQL会提交掉。如果在事务中抛出其他类型的异常，但却期望 Spring 能够回滚事务，就需要指定&lt;code&gt;rollbackFor&lt;/code&gt;属性。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对应代码其实我们上篇文章也分析过了，如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5800933125972006&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tpEILlElskL8LiaJIRAxaHXChicfEsHAlYnWogCwDUjHMYNR0vQ8ZuhBoxA8UiaNMq8AyKQbtZ8S7YDpZk9vrReIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1286&quot;/&gt;&lt;figcaption&gt;回滚代码&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;以上代码位于：&lt;code&gt;TransactionAspectSupport#completeTransactionAfterThrowing&lt;/code&gt;方法中&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认情况下，只有出现&lt;code&gt;RuntimeException&lt;/code&gt;或者&lt;code&gt;Error&lt;/code&gt;才会回滚&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;rollbackOn&lt;/span&gt;&lt;span&gt;(Throwable ex)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; (ex &lt;span&gt;instanceof&lt;/span&gt; RuntimeException || ex &lt;span&gt;instanceof&lt;/span&gt; Error);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，如果你想在出现了非&lt;code&gt;RuntimeException&lt;/code&gt;或者&lt;code&gt;Error&lt;/code&gt;时也回滚，请指定回滚时的异常，例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;(rollbackFor = Exception.class)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二种情况：&lt;strong&gt;「想提交的时候被标记成只能回滚了（rollback only）」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对应的异常信息如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Transaction rolled back because it has been marked as rollback-only&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先来看个例子吧&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DmzService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt; IndexService indexService;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Transactional&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testRollbackOnly&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;   indexService.a();&lt;br/&gt;  } &lt;span&gt;catch&lt;/span&gt; (ClassNotFoundException e) {&lt;br/&gt;   System.out.println(&lt;span&gt;&quot;catch&quot;&lt;/span&gt;);&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;IndexService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;@Transactional&lt;/span&gt;(rollbackFor = Exception.class)&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; ClassNotFoundException&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;// ......&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ClassNotFoundException();&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上面这个例子中，&lt;code&gt;DmzService&lt;/code&gt;的&lt;code&gt;testRollbackOnly&lt;/code&gt;方法跟&lt;code&gt;IndexService&lt;/code&gt;的&lt;code&gt;a&lt;/code&gt;方法都开启了事务，并且事务的传播级别为&lt;code&gt;required&lt;/code&gt;，所以当我们在&lt;code&gt;testRollbackOnly&lt;/code&gt;中调用&lt;code&gt;IndexService&lt;/code&gt;的&lt;code&gt;a&lt;/code&gt;方法时这两个方法应当是共用的一个事务。按照这种思路，虽然&lt;code&gt;IndexService&lt;/code&gt;的&lt;code&gt;a&lt;/code&gt;方法抛出了异常，但是我们在&lt;code&gt;testRollbackOnly&lt;/code&gt;将异常捕获了，那么这个事务应该是可以正常提交的，为什么会抛出异常呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你看过我之前的源码分析的文章应该知道，在处理回滚时有这么一段代码&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.37178642056690836&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tpEILlElskL8LiaJIRAxaHXChicfEsHAlYkqtRJxTia16lUnj0fHGnegYuIkiauEOwKMlhKNTkfr8EYjN7ibbBWnfCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1517&quot;/&gt;&lt;figcaption&gt;rollBackOnly设置&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在提交时又做了下面这个判断（&lt;span&gt;这个方法我删掉了一些不重要的代码&lt;/span&gt;）&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5750636132315522&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tpEILlElskL8LiaJIRAxaHXChicfEsHAlY6FKHcnp5KBvibSrKvl628Mibvd9sMI7NuIEskS14wrphUoB2FSbX2PtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1179&quot;/&gt;&lt;figcaption&gt;commit_rollbackOnly&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到当提交时发现事务已经被标记为rollbackOnly后会进入回滚处理中，并且unexpected传入的为true。在处理回滚时又有下面这段代码&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.15614617940199335&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tpEILlElskL8LiaJIRAxaHXChicfEsHAlYCF87KorWicOMY1vIAqk4ccmfT6V1fmB1MUUjbLxPpC7WKumLAsnhcicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1204&quot;/&gt;&lt;figcaption&gt;抛出异常&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后在这里抛出了这个异常。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;以上代码均位于&lt;code&gt;AbstractPlatformTransactionManager&lt;/code&gt;中&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结起来，&lt;strong&gt;「主要的原因就是因为内部事务回滚时将整个大事务做了一个rollbackOnly的标记」&lt;/strong&gt;，所以即使我们在外部事务中catch了抛出的异常，整个事务仍然无法正常提交，并且如果你希望正常提交，Spring还会抛出一个异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「解决方案」&lt;/strong&gt;:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个解决方案要依赖业务而定，你要明确你想要的结果是什么&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;内部事务发生异常，外部事务catch异常后，内部事务自行回滚，不影响外部事务&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;将内部事务的传播级别设置为nested/requires_new均可。在我们的例子中就是做如下修改：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// @Transactional(rollbackFor = Exception.class,propagation = Propagation.REQUIRES_NEW)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Transactional&lt;/span&gt;(rollbackFor = Exception.class,propagation = Propagation.NESTED)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; ClassNotFoundException&lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;// ......&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ClassNotFoundException();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然这两者都能得到上面的结果，但是它们之间还是有不同的。当传播级别为&lt;code&gt;requires_new&lt;/code&gt;时，两个事务完全没有联系，各自都有自己的事务管理机制（开启事务、关闭事务、回滚事务）。但是传播级别为&lt;code&gt;nested&lt;/code&gt;时，实际上只存在一个事务，只是在调用a方法时设置了一个保存点，当a方法回滚时，实际上是回滚到保存点上，并且当外部事务提交时，内部事务才会提交，外部事务如果回滚，内部事务会跟着回滚。&lt;/p&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;内部事务发生异常时，外部事务catch异常后，内外两个事务都回滚，但是方法不抛出异常&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testRollbackOnly&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;      indexService.a();&lt;br/&gt;   } &lt;span&gt;catch&lt;/span&gt; (ClassNotFoundException e) {&lt;br/&gt;      &lt;span&gt;// 加上这句代码&lt;/span&gt;&lt;br/&gt;      TransactionInterceptor.currentTransactionStatus().setRollbackOnly();&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过显示的设置事务的状态为&lt;code&gt;RollbackOnly&lt;/code&gt;。这样当提交事务时会进入下面这段代码&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.29518072289156627&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tpEILlElskL8LiaJIRAxaHXChicfEsHAlYX1JV85r3xzKBrnwKicibdiceib9J6YrZ4LnHWAg67QXaiaibJqyibBfsglAXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1660&quot;/&gt;&lt;figcaption&gt;显示回滚&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最大的区别在于处理回滚时第二个参数传入的是false,这意味着回滚是回滚是预期之中的，所以在处理完回滚后并不会抛出异常。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;读写分离跟事务结合使用时的问题&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;读写分离一般有两种实现方式&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;配置多数据源&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;依赖中间件，如&lt;code&gt;MyCat&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是配置了多数据源的方式实现了读写分离，那么需要注意的是：&lt;strong&gt;「如果开启了一个读写事务，那么必须使用写节点」&lt;/strong&gt;，&lt;strong&gt;「如果是一个只读事务，那么可以使用读节点」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是依赖于&lt;code&gt;MyCat&lt;/code&gt;等中间件那么需要注意：&lt;strong&gt;「只要开启了事务，事务内的SQL都会使用写节点（依赖于具体中间件的实现，也有可能会允许使用读节点，具体策略需要自行跟DB团队确认）」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于上面的结论，我们在使用事务时应该更加谨慎，在没有必要开启事务时尽量不要开启。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;一般我们会在配置文件配置某些约定的方法名字前缀开启不同的事务（或者不开启），但现在随着注解事务的流行，好多开发人员（或者架构师）搭建框架的时候在service类上加上了@Transactional注解，导致整个类都是开启事务的，这样严重影响数据库执行的效率，更重要的是开发人员不重视、或者不知道在查询类的方法上面自己加上@Transactional（propagation=Propagation.NOT_SUPPORTED）就会导致，所有的查询方法实际并没有走从库，导致主库压力过大。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次，关于如果没有对只读事务做优化的话（优化意味着将只读事务路由到读节点），那么&lt;code&gt;@Transactional&lt;/code&gt;注解中的&lt;code&gt;readOnly&lt;/code&gt;属性就应该要慎用。我们使用&lt;code&gt;readOnly&lt;/code&gt;的原本目的是为了将事务标记为只读，这样当MySQL服务端检测到是一个只读事务后就可以做优化，少分配一些资源（例如：只读事务不需要回滚，所以不需要分配undo log段）。但是当配置了读写分离后，可能会可能会导致只读事务内所有的SQL都被路由到了主库，读写分离也就失去了意义。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文为事务专栏最后一篇啦！这篇文章主要是总结了工作中事务相关的常见问题，想让大家少走点弯路！希望大家可以认真读完哦，有什么问题可以直接在后台私信我或者加我微信！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章也是整个Spring系列的最后一篇文章，之后可能会出一篇源码阅读心得，跟大家聊聊如何学习源码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外今年也给自己定了个小目标，就是完成SSM框架源码的阅读。目前来说Spring是完成，接下来就是SpringMVC跟MyBatis。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在分析MyBatis前，会从JDBC源码出发，然后就是MyBatis对配置的解析、MyBatis执行流程、MyBatis的缓存、MyBatis的事务管理以及MyBatis的插件机制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在学习SpringMVC前，会从TomCat出发，先讲清楚TomCat的原理，我们再来看&lt;code&gt;SpringMVC&lt;/code&gt;。整个来说相比于Spring源码，我觉得应该不算特别难。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;希望在这个过程中可以跟大家一起进步！！！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我叫DMZ，一个陪你一起慢慢进步的小菜鸟~！&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>aba7f0a755f7441066f9b07965d283aa</guid>
<title>[推荐] Redis 6.0 解密（一）：Thread/IO 多线程</title>
<link>https://toutiao.io/k/q5x323b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h2&gt;一、背景&lt;/h2&gt;&lt;p&gt;目前快手有70w+的Redis实例，在线上的Redis集群，我们经常会碰到以下的一些情况：&lt;/p&gt;&lt;p&gt;（1） 由于键值设计不合理或者业务特性导致的热点问题（集群整体QPS不高，但是集群内某个实例的请求特别高），严重影响业务侧请求的返回时间&lt;/p&gt;&lt;p&gt;（2） 集群内某个实例直连集群连接数过多，单线程模型处理缓慢，影响其他的请求&lt;/p&gt;&lt;p&gt;（3） 集群内某个实例网络不稳定后者pipeline个数较多，导致协议解析频繁调用，导致cpu时间占用过长，影响其他的客户端请求&lt;/p&gt;&lt;p&gt;以上这些问题，相信大家也都碰到过，那么这些问题与Redis的单线程模型又有什么关系？&lt;/p&gt;&lt;h3&gt;1. 为什么Redis6之前是单线程设计？&lt;/h3&gt;&lt;p&gt;首先，我们明确一点，Redis6之前的Redis4，Redis5并不是单线程程序。通常我们说的Redis的单线程，是指Redis接受链接，接收数据并解析协议，发送结果等命令的执行，都是在主线程中执行的。&lt;/p&gt;&lt;p&gt;Redis之前之所以将这些都放在主线程中执行，主要有以下几方面的原因：&lt;/p&gt;&lt;h3&gt;2. 什么是IO多线程？&lt;/h3&gt;&lt;p&gt;既然Redis的主要瓶颈不在CPU，为什么又要引入IO多线程？Redis的整体处理流程如下图：&lt;img data-ratio=&quot;0.5789930555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZULLb8I10cyPZuk5S75AWru8Zt8iaYAdiaHbaVvGoy4yOp24jEyPTicye6aT3kibZwIiaJD9jO8hZtbJhLq9rF4cWBA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2304&quot; title=&quot;null&quot;/&gt; 结合上图可知，当 socket 中有数据时，Redis 会通过系统调用将数据从内核态拷贝到用户态，供 Redis 解析用。这个拷贝过程是阻塞的，术语称作 “同步阻塞IO”，数据量越大拷贝的延迟越高，解析协议时间消耗也越大，糟糕的是这些操作都是在主线程中处理的，特别是链接数特别多的情况下，这种情况更加明显。基于以上原因，Redis作者提出了Thread/IO线程，既将接收与发送数据来使用多线程并行处理，从而降低主线程的等待时间。&lt;/p&gt;&lt;h2&gt;二、Thread/IO整体流程及程序实现设计&lt;/h2&gt;&lt;h3&gt;1.Thread/IO整体实现思路&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;(1).&lt;/span&gt;创建一组大小为io线程个数的等待队列，用来存储客户端的网络套接字。&lt;/span&gt;&lt;span&gt;&lt;span&gt;(2).&lt;/span&gt;分均分配客户端网络套接字到等待队列中&lt;/span&gt;&lt;span&gt;&lt;span&gt;(3).&lt;/span&gt;等待线程组接收解协议完毕或者发送数据完毕&lt;/span&gt;&lt;span&gt;&lt;span&gt;(4).&lt;/span&gt;执行后续操作，然后跳转到第2步继续执行&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;2.Thread/IO涉及到的代码文件&lt;/h3&gt;&lt;p&gt;关于IO多线程部分的代码，在src/network.c中。&lt;/p&gt;&lt;h3&gt;3.Thread/IO整体流程图&lt;/h3&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3309128630705394&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZULLb8I10cyPZuk5S75AWru8Zt8iaYAdia0nZtV8RCngK7ticWkDBkuZ02jVhKnoYoGa8rwricfvghOqIdT1IYFHNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;5784&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;h2&gt;三、关键代码流程详解&lt;/h2&gt;&lt;h3&gt;1.io线程的初始化&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Redis多线程相关线程的初始化顺序&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.4171562867215041&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZULLb8I10cyPZuk5S75AWru8Zt8iaYAdiau5BlYmGibuCduPpY3VVW3HLYxAiccQCz2sT1myB8DgHqYocHf7bmdyCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1702&quot; title=&quot;null&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;初始化相关流程图及代码&lt;/span&gt;&lt;span&gt;创建线程流程图&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4400684931506849&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZULLb8I10cyPZuk5S75AWru8Zt8iaYAdiaYDNNdKZgbiaPaDv1Qg4zchVobF8zCGriaW5O6quWUNJaSlG9lrhbJ0ug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3504&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;创建线程代码具体位置&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;src/network.c: initThreadIO(void)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;src/network.c: IOThreadMain(void *)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;2.readQueryFromClient部分&lt;/h3&gt;&lt;p&gt;代码具体位置：src/network.c: readQueryFromClient(connection *)&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;readQueryFromClient&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(connection *conn)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    client *c = connGetPrivateData(conn);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; nread, readlen;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;size_t&lt;/span&gt; qblen;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (postponeClientRead(c)) &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  /&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;int postponeClientRead(client *c) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    if (io_threads_active &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        server.io_threads_do_reads &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        !ProcessingEventsWhileBlocked &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        !(c-&amp;gt;flags &amp;amp; (CLIENT_MASTER|CLIENT_SLAVE|CLIENT_PENDING_READ)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        c-&amp;gt;flags |= CLIENT_PENDING_READ;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        listAddNodeHead(server.clients_pending_read,c);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        return 1;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } else {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        return 0;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;由上面部分的代码，可以得知客户端要使用io多线程必须满足的条件有：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;io多线程已经激活&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;io多线程允许read&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;没有阻塞的处理事件&lt;/span&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;客户端不是主节点、从节点、已分配的延迟接收客户端&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;3.处理读取待分配任务&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;处理读取待分配任务流程图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.4048397645519948&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZULLb8I10cyPZuk5S75AWru8Zt8iaYAdiaF8aXFuZH29ETwxzo0Nhiae9hdvJ3Pzhibp0giaSB0icpicWF36ibXeoUQ3DA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3058&quot; title=&quot;null&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;处理读取待分配任务代码&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;src/networking.c: handleClientsWithPendingReadsUsingThreads(void)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;4.处理写待分配任务&lt;/h3&gt;&lt;p&gt;写分配任务具体流程同读分配流程大同小异，看参照上图阅读具体的代码实现，代码位置：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;src/networking.c: handleClientsWithPendingWritesUsingThreads(void)&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;5.IO线程的动态开与关&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;主线程中整体读与写的逻辑流程图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.14055299539170507&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZULLb8I10cyPZuk5S75AWru8Zt8iaYAdiaic4yh5ed1iajgpudm3eG8gd4Zic8c01AFWs4HSJx0RlZGyPAO8PWEP4iaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2604&quot; title=&quot;null&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;具体代码位置：src/server.c: beforSleep(struct aeEventLoop *)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;IO线程的开关循序流程图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.44274300932090543&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZULLb8I10cyPZuk5S75AWru8Zt8iaYAdiaB5wPFLAQefVZGgzPbYKQEibI4QNBaziac9LBexZ3R3zI0Cmtk6F5nV7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3004&quot; title=&quot;null&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;由上图可知，IO线程的开关，实际取决于延迟发送客户端的数量是否小于IO线程数*2，否则IO线程一般都处于阻塞状态（即使设置了IO多线程）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;具体代码位置&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;src/networking.c: handleClientsWithPendingWritesUsingThreads(void)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;src/networking.c: int stopThreadedIOIfNeeded(void)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;src/networking.c: startThreadedIO(void)&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;四、配置文件对应配置项说明&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;配置项&lt;/td&gt;&lt;td&gt;说明&lt;/td&gt;&lt;td&gt;默认值&lt;/td&gt;&lt;td&gt;备注&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;io-threads&lt;/td&gt;&lt;td&gt;配置redis的io线程个数&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;最大不超过128，且默认不开启&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;io-threads-do-reads&lt;/td&gt;&lt;td&gt;io线程负责read&lt;/td&gt;&lt;td&gt;no&lt;/td&gt;&lt;td&gt;默认io线程只负责发送数据，既wirte数据返回给客户端&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;五、Thread/IO性能测试&lt;/h2&gt;&lt;h3&gt;1.测试方法与测试指标&lt;/h3&gt;&lt;p&gt;本次测试，采用vire-benchmark工具进行压测。redis-server与vire-benchmark对应压测参数如下：&lt;/p&gt;&lt;h3&gt;（1）redis-server&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;配置&lt;/td&gt;&lt;td&gt;说明&lt;/td&gt;&lt;td&gt;值&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;io-threads&lt;/td&gt;&lt;td&gt;io线程的数量&lt;/td&gt;&lt;td&gt;[1,2,3,4,5,6,7,8]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;io-threads-do-reads&lt;/td&gt;&lt;td&gt;io线程是否负责接收数据&lt;/td&gt;&lt;td&gt;yes&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;（2） vire-benchmark&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;压测项&lt;/td&gt;&lt;td&gt;值&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;客户端数量&lt;/td&gt;&lt;td&gt;[1,10,50]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;payload大小&lt;/td&gt;&lt;td&gt;[20,64,256,1024,2048,8192]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;pipeline个数&lt;/td&gt;&lt;td&gt;[10,50,100,500]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;压测命令&lt;/td&gt;&lt;td&gt;get,set,mget_10,mget_100,mset,lpush,rpush,lpop,rpop,lrange_10,lrange_100,sadd,spop,hset,&lt;br/&gt;hincrby,hget,hmset,hmget,hgetall,zadd,zrem,pfadd,pfcount&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;2. 测试结果分析&lt;/h3&gt;&lt;h3&gt;(1) 各个命令的极限QPS&lt;/h3&gt;&lt;p&gt;注：压测结果不考虑客户端数量，payload大小，pipeline个数，只是直观展现Redis6开启io多线程后，针对各个命令所能达到的极限QPS。&lt;img data-ratio=&quot;0.4708368554522401&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZULLb8I10cyPZuk5S75AWru8Zt8iaYAdia0DQicWaIjWw2eKhicZw1PtG1DibOjpuBxy2YtibENX0D5AibJYzyb49s5Xw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2366&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;h3&gt;(2) IO线程数量与极限QPS的关系&lt;/h3&gt;&lt;p&gt;在极限QPS的测试结果中，client个数基本上都为1，不具备实际意义，再结合线上实际业务情况，选取GET，client_count(50)，payload（20），pipeline（50）作为结果分析的参考基准。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Get，client_count（50），payload（20），pipeline（50）&lt;img data-ratio=&quot;0.6040955631399317&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZULLb8I10cyPZuk5S75AWru8Zt8iaYAdiaWNrgrLgNQapFYogTFXicqgIRIIpmUYOjiaicBiaLAPcNfLOjaffAHqNB7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1172&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;由上图可知，针对Get等简单命令，IO线程也并不是越多越好，这也符合代码中的自旋锁的实现逻辑。但是IO多线程，确实能够再一定程度上提升QPS，但是效果并不是很明显。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Get，client_count（50），pipeline（50）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;payload(20)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1234567&lt;/td&gt;&lt;td&gt;1282051&lt;/td&gt;&lt;td&gt;1315789&lt;/td&gt;&lt;td&gt;1562499&lt;/td&gt;&lt;td&gt;1204819&lt;/td&gt;&lt;td&gt;1408450&lt;/td&gt;&lt;td&gt;1265822&lt;/td&gt;&lt;td&gt;1282051&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;payload(64)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1250000&lt;/td&gt;&lt;td&gt;1234567&lt;/td&gt;&lt;td&gt;1315789&lt;/td&gt;&lt;td&gt;1333333&lt;/td&gt;&lt;td&gt;1176470&lt;/td&gt;&lt;td&gt;1388889&lt;/td&gt;&lt;td&gt;1333333&lt;/td&gt;&lt;td&gt;1428571&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;payload(256)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1123595&lt;/td&gt;&lt;td&gt;970873&lt;/td&gt;&lt;td&gt;1190476&lt;/td&gt;&lt;td&gt;1351351&lt;/td&gt;&lt;td&gt;1369863&lt;/td&gt;&lt;td&gt;1298701&lt;/td&gt;&lt;td&gt;1369863&lt;/td&gt;&lt;td&gt;1333333&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;payload(1024)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;694444&lt;/td&gt;&lt;td&gt;806451&lt;/td&gt;&lt;td&gt;757575&lt;/td&gt;&lt;td&gt;793650&lt;/td&gt;&lt;td&gt;847457&lt;/td&gt;&lt;td&gt;833333&lt;/td&gt;&lt;td&gt;900900&lt;/td&gt;&lt;td&gt;862069&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;payload(2048)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;431034&lt;/td&gt;&lt;td&gt;357142&lt;/td&gt;&lt;td&gt;381679&lt;/td&gt;&lt;td&gt;400000&lt;/td&gt;&lt;td&gt;446428&lt;/td&gt;&lt;td&gt;442477&lt;/td&gt;&lt;td&gt;485436&lt;/td&gt;&lt;td&gt;467289&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;payload(4096)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;218818&lt;/td&gt;&lt;td&gt;232558&lt;/td&gt;&lt;td&gt;264550&lt;/td&gt;&lt;td&gt;247524&lt;/td&gt;&lt;td&gt;255754&lt;/td&gt;&lt;td&gt;237529&lt;/td&gt;&lt;td&gt;239808&lt;/td&gt;&lt;td&gt;265252&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3973941368078176&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZULLb8I10cyPZuk5S75AWru8Zt8iaYAdiaAO1o5lTaww2juogeQkteszZcMlGIaQvxv7L6IzaZ4qVQyhKqHU3vLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1228&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;由上图可知，IO多线程对payload较大请求，处理效果提升明显，但是当payload提高到2048左右时，提升效果不明显。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Get，pipeline（50），bytes（20）&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;client(1)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1408450&lt;/td&gt;&lt;td&gt;1388889&lt;/td&gt;&lt;td&gt;1449275&lt;/td&gt;&lt;td&gt;1470588&lt;/td&gt;&lt;td&gt;1515151&lt;/td&gt;&lt;td&gt;1515151&lt;/td&gt;&lt;td&gt;1538461&lt;/td&gt;&lt;td&gt;1492537&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;client(20)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1408450&lt;/td&gt;&lt;td&gt;1408450&lt;/td&gt;&lt;td&gt;1315789&lt;/td&gt;&lt;td&gt;1351351&lt;/td&gt;&lt;td&gt;1515151&lt;/td&gt;&lt;td&gt;1449275&lt;/td&gt;&lt;td&gt;1538461&lt;/td&gt;&lt;td&gt;1449275&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;client(50)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1234567&lt;/td&gt;&lt;td&gt;1282051&lt;/td&gt;&lt;td&gt;1315789&lt;/td&gt;&lt;td&gt;1562499&lt;/td&gt;&lt;td&gt;1204819&lt;/td&gt;&lt;td&gt;1408450&lt;/td&gt;&lt;td&gt;1265822&lt;/td&gt;&lt;td&gt;1282051&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.32722513089005234&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZULLb8I10cyPZuk5S75AWru8Zt8iaYAdiaepewgcBrl14q3LxSQ6oicWK7vYTE8b4kbbPNLQn26Eib3QSmR4Siaoptw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1528&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;对于客户端数量而言，IO多线程针对多个客户端有一定提升，但是效果不是很明显。上图也可观察到，当客户端数量提高到50左右时，IO线程越多，QPS反而成下降趋势。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Get，client_count（50），payload（20）&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;pipeline(10)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;757575&lt;/td&gt;&lt;td&gt;869565&lt;/td&gt;&lt;td&gt;1010101&lt;/td&gt;&lt;td&gt;934579&lt;/td&gt;&lt;td&gt;917431&lt;/td&gt;&lt;td&gt;1123595&lt;/td&gt;&lt;td&gt;1010101&lt;/td&gt;&lt;td&gt;1052631&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;pipeline(50)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1234567&lt;/td&gt;&lt;td&gt;1282051&lt;/td&gt;&lt;td&gt;1315789&lt;/td&gt;&lt;td&gt;1562499&lt;/td&gt;&lt;td&gt;1204819&lt;/td&gt;&lt;td&gt;1408450&lt;/td&gt;&lt;td&gt;1265822&lt;/td&gt;&lt;td&gt;1282051&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;pipeline(100)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;1470588&lt;/td&gt;&lt;td&gt;1298701&lt;/td&gt;&lt;td&gt;1369863&lt;/td&gt;&lt;td&gt;1408450&lt;/td&gt;&lt;td&gt;1250000&lt;/td&gt;&lt;td&gt;1369863&lt;/td&gt;&lt;td&gt;1428571&lt;/td&gt;&lt;td&gt;1298701&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.32722513089005234&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZULLb8I10cyPZuk5S75AWru8Zt8iaYAdia3gtZ4E7hCpB0o88ichBUEggCsoNmhdfHUKsXssD2CmRD8ECzCYPRMLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1528&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;由上图可知，在pipeline个数较少时，qps随着IO线程数量增多缓慢增加，当pipeline个数大于50个以上，随着线程数的增加，QPS成缓慢下降趋势。&lt;/p&gt;&lt;h3&gt;3. 测试结果总结&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;IO线程总体提升效果并不是非常明显，以基准结果为例，当IO线程为4时，较单线程在同条件下，QPS提升25%左右&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;IO线程，对val与pipeline较大的操作，有明显的提升，当IO线程为4时，较单线程在同条件下，QPS最大提升30%左右，但随着val的增大，提升并不明显&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;对于多个客户端，IO多线程的提升并不明显&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;通过测试数据，发现Redis的IO多线程，在设置为4个时可达到最佳效率，到达最高QPS&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;六、使用Thread/IO注意事项&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;io-threads个数设置为1时，实际上还是只使用主线程&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;io-threads默认只负责write，既发送数据给客户端&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;io-threads的个数一旦设置，不能通过config动态设置&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;当设置ssl后，io-threads将不工作&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;通常io线程并不能有太大提升，除非cpu占用特别明显或者客户端链接特别多的情况下，否则不建议使用&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;io线程只能是读，或者写，不存在读写并存的情况&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Io线程的开关，实际取决于延迟发送客户端的数量是否小于IO线程数*2&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;七、线上当前Redis6的情况&lt;/h2&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;注：KCC是快手内部Redis管控平台，目前管理70万Redis、Memcache实例，3000+ElasticSearch节点。由于实例数量庞大，热点问题不可避免，为此上Redis 6也是刚需。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;KCC线上目前已上线30+，集群运行稳定，如需申请，在KCC平台请注明使用Redis6版本即可&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;改造代理内核源码，覆盖Redis5/6新增的全部命令，如：bitfield_ro、stralgo、zpopmin、zpopmax等&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;改造Redis 6升级工具，支持持Redis3、4、5、6任一版本升降。&lt;/span&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;由于键值设计不合理以及业务特性带来的热点问题，Redis单线程版本单个实例达到请求瓶颈，切换到Redis6版本后，单实例QPS可到20~30W+，效果符合预期，降低了业务高负载时的请求延时问题&lt;/span&gt;&lt;/p&gt;&lt;p&gt;招聘广告：长期招聘Redis开发运维工程师、KV存储开发工程师、ElasticSearch工程师&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.7327935222672064&quot; data-type=&quot;png&quot; data-w=&quot;494&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZULLb8I10czddXYvgBP8lfPekOcPmZqBH8oibrrGyYBslmkw1wPqj9bjqv7HbRjFUobjnG85hGdG6xOFlQrwVSw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.8140495867768596&quot; data-type=&quot;png&quot; data-w=&quot;484&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZULLb8I10czddXYvgBP8lfPekOcPmZqBBxdZmrcMoycjIA8w4zLnhW2JFpJGBx5HyEa7IpqsTVShhnOBXBwesA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>