<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e205231e3eb8e6f879e0652a2a863349</guid>
<title>你的站点抗压么？推荐一款超方便的开源压测工具</title>
<link>https://toutiao.io/k/gz48fpu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.669051878354204&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMxoIlAILO3JAl4RBwibibAgm8RcGxQ4l4PDbMw7KWkOtsE6pSDtqLrERF6B2PeQ1gyJ9205c1h0Z7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1118&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;作者：HelloGitHub-&lt;/span&gt;&lt;strong&gt;Anthony&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里是 HelloGitHub 推出的《讲解开源项目》系列，本期介绍一款标星 17.7k 纯 Go 语言实现的 HTTP(S) 压测工具——&lt;strong&gt;vegeta&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;项目地址：https://github.com/tsenart/vegeta&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Vegeta&lt;/strong&gt; 是一款用 Go 语言编写的多功能 HTTP(S) 压测工具：安装方便、功能齐全、使用简单，还可作为命令行工具或者开发库进行使用。它不仅提供了常见的压测功能，还支持格式化结果并输出为图表或动态显示当前结果。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.623725671918443&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xBgIbW1vdNMxoIlAILO3JAl4RBwibibAgmynsy3v29HTxEUAia9oFkN0UVPDZS3Kgv3sZKshwBOVbUrGYrric89Ysw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过本文你将掌握这款强大压测工具的基本用法，让压测只需一条命令！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、 安装&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从仓库下载编译好的二进制文件：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;https://github.com/tsenart/vegeta/releases&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;PC 上下载 amd64 版本即可，&lt;span&gt;在 Mac Os X 上使用 Homebrew 安装：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; brew update &amp;amp;&amp;amp; brew install vegeta&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你会 Go 语言，使用 &lt;code&gt;get&lt;/code&gt; 自动安装：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; go get -u github.com/tsenart/vegeta&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如提示找不到指令，请确保 go 以及 GOBIN 在您的环境变量中&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、快速入门&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;以下指令均可以在 Linux 下运行&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于下载编译好的用户建议先将 vegeta 临时添加到 PATH 路径，方便使用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;cd&lt;/span&gt; vegeta&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;export&lt;/span&gt; PATH=&lt;span&gt;$pwd&lt;/span&gt;:&lt;span&gt;$PATH&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者直接将 vegeta 放到 bin 目录下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;cd&lt;/span&gt; vegeta&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; sudo mv vegeta /usr/&lt;span&gt;local&lt;/span&gt;/bin/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输入 &lt;code&gt;vegeta -version&lt;/code&gt; 后可以显示证明安装成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首次使用可以使用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; vegeta --&lt;span&gt;help&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来查看支持的指令和相关例子。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 使用例子&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在命令行输入：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;GET http://127.0.0.1:233&quot;&lt;/span&gt;| vegeta attack -rate=500 -connections=1 -duration=1s | tee results.bin | vegeta report&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将会得到如图所示的结果：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMxoIlAILO3JAl4RBwibibAgmT5xFYFCws6Xlv4SFiawbFJZicicq2o1licb4BjLf3DHIKwQibmIiczpn70ZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.13209302325581396&quot; data-w=&quot;1075&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这条指令前半部分的 &lt;code&gt;echo &quot;GET http://127.0.0.1:233&quot;&lt;/code&gt; 表示想要测试的地址，这里我使用的是 nginx 搭建的本地服务器，&lt;code&gt;vegeta attack&lt;/code&gt; 代表测试指令，其后 &lt;code&gt;-rate&lt;/code&gt; &lt;code&gt;-connections&lt;/code&gt; &lt;code&gt;-duration&lt;/code&gt; 分别表示每秒钟请求次数、每个地址最大连接数、持续时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;攻击完成后使用 &lt;code&gt;tee results.bin&lt;/code&gt; 保存测试报告并用 &lt;code&gt;veteta report&lt;/code&gt; 显示报告内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;vegeta report&lt;/code&gt; 也支持使用 文本、JSON、直方图、hdrplot 等：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;GET http://127.0.0.1:233&quot;&lt;/span&gt;| vegeta attack -rate=500 -connections=1 -duration=5s &amp;gt; results.bin&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;文本&lt;/strong&gt;（默认情况）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; vegeta report results.bin&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMxoIlAILO3JAl4RBwibibAgmrlRsZ117HUkAciccNlGnp7bh8aI8MvlTposoraXEibYRTYQb3ZIZR4YA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.13333333333333333&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;直方图&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; vegeta report -&lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&#x27;hist[0,1ms,2ms,3ms,4ms]&#x27;&lt;/span&gt; results.bin&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.11380400421496312&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMxoIlAILO3JAl4RBwibibAgmnWTFg5UjNj9nniblKq4ZXf2Pd95LXgDfIobmBhlRzOlBibUWlSCEsiaUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;949&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;JSON&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; vegeta report --&lt;span&gt;type&lt;/span&gt; json results.bin&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.08518518518518518&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMxoIlAILO3JAl4RBwibibAgmmibZMYuvWWfb8mM7ybj3YL2bQkLdia7ddSve5gXBSSptztrEyZKeibHJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;hdrplot&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; vegeta report --&lt;span&gt;type&lt;/span&gt; hdrplot results.bin&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7611336032388664&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMxoIlAILO3JAl4RBwibibAgmFdYPJmmFk8HCZ7via1Yv5qUa6O2K4MKo2fy9tQQic2OiclwTanjGzCicDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;494&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.生成图形&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接&lt;code&gt;上一小节&lt;/code&gt;的内容，我们将文字形式的报告转为图表显示，在命令行中输入：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; vegeta plot --title HelloGitHub results.bin &amp;gt; plot.html&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在浏览器中打开新生成的 &lt;code&gt;plot.html&lt;/code&gt;，即可看到图形化的测试数据：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.48055555555555557&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMxoIlAILO3JAl4RBwibibAgmQNl1yRRKQIAjekZXpGfGCjvgBU5N6ZfQoHPcM9Mw3mEYKEF5ZEQ9Ug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 &lt;code&gt;--title HelloGitHub&lt;/code&gt; 用来设置表头文字。此外还有&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;-cpu&lt;/code&gt; 用来设置默认使用的 cpu 核心数量，这里我默认是 12。可以使用 &lt;code&gt;--threshold&lt;/code&gt; flag 设定下采样阈值。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;vegeta plot 也可以将多个曲线放在一起，使用 vegeta plot result_1.bin result2_.bin ... result_n.bin &amp;gt; plot.html 即可&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，配合 Go 下的 &lt;code&gt;jaggr&lt;/code&gt; 和 &lt;code&gt;jplot&lt;/code&gt; 可以实现动态画面输出，官方给出的指令和效果如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&#x27;GET http://localhost:8080&#x27;&lt;/span&gt; | \&lt;/span&gt;&lt;br/&gt;    vegeta attack -rate 5000 -duration 10m | vegeta encode | \&lt;br/&gt;    jaggr @count=rps \&lt;br/&gt;          hist\[100,200,300,400,500\]:code \&lt;br/&gt;          p25,p50,p95:latency \&lt;br/&gt;          sum:bytes_in \&lt;br/&gt;          sum:bytes_out | \&lt;br/&gt;    jplot rps+code.hist.100+code.hist.200+code.hist.300+code.hist.400+code.hist.500 \&lt;br/&gt;          latency.p95+latency.p50+latency.p25 \&lt;br/&gt;          bytes_in.sum+bytes_out.sum&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xBgIbW1vdNMxoIlAILO3JAl4RBwibibAgmynsy3v29HTxEUAia9oFkN0UVPDZS3Kgv3sZKshwBOVbUrGYrric89Ysw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-ratio=&quot;0.623725671918443&quot; data-w=&quot;1079&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;由于 jplot 需要 iTerm2 但笔者没有苹果系列的电脑所以关于动态输出部分的内容大家需要自己研究。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.使用管道&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果您了解 Shell 的管道那就不难看出，前文代码中就是使用管道将 &lt;code&gt;echo &quot;GET http:// xxx&quot;&lt;/code&gt; 的输出内容传给了 &lt;code&gt;vegeta&lt;/code&gt;。通过管道，除了使用简单的 &lt;code&gt;echo&lt;/code&gt; 工具，也可以使用其他任何程序的输出作为测试目标。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.转换编码&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;vegeta 同样提供了编码转换功能，现在支持三种编码格式：Gob （二进制），CSV，以及 JSON（默认） 使用 &lt;code&gt;veget encode&lt;/code&gt;  可以做到这几种编码的相互转换 ：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;GET http://127.0.0.1:233&quot;&lt;/span&gt;| vegeta attack -rate=500 -connections=1 -duration=1s &amp;gt; results.gob&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; cat results.gob | vegeta encode | jq .&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以显示转换为 JSON 格式的测试信息，或者：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; cat results.gob | vegeta encode --to csv --output results.csv&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;输入格式的检测是自动完成的，不需要手动进行设置。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、结语&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里 vegeta 的基本使用到这里就结束了，它还支持一些精细参数的设置比如证书、密钥等，但限于篇幅和笔者知识水平限制无法扩展太多，大家可以根据需要的使用 &lt;code&gt;vegeta [command] --help&lt;/code&gt; 指令进行查看，也可以阅读官方的使用手册&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;项目地址：https://github.com/tsenart/vegeta&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;温馨提示：压测虽好玩但不要贪杯哦，别压起劲儿来把线上服务给压挂了！&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>48bb44b8fdfacc5dea58a499f0167314</guid>
<title>刷 LeetCode，进字节、阿里等一线大厂，刷题之前一定先打好底层基础</title>
<link>https://toutiao.io/k/cmj9lvn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是Tom哥~&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哲学里有一句很经典的话，”下层基础决定上层建筑“。相信很多人都听过，广泛用于我们生活中。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么我们软件开发行业的&lt;/span&gt;&lt;code&gt;&lt;span&gt;下层基础&lt;/span&gt;&lt;/code&gt;&lt;span&gt;是什么，有人说是&lt;/span&gt;&lt;code&gt;&lt;span&gt;操作系统&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、是&lt;/span&gt;&lt;code&gt;&lt;span&gt;网络&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、是&lt;/span&gt;&lt;code&gt;&lt;span&gt;HTTP协议&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、是&lt;/span&gt;&lt;code&gt;&lt;span&gt;TCP&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，这些虽然也是底层，但其实不够原子化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;软件行业讲究的是抽象，那么他们的共同点是什么。那就是&lt;/span&gt;&lt;code&gt;&lt;span&gt;数据&lt;/span&gt;&lt;/code&gt;&lt;span&gt;和&lt;/span&gt;&lt;code&gt;&lt;span&gt;计算&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7411575562700965&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPib1nLVfSXBS8djvIlELQVocKOxoQscBe8GQqbMSdLyup3tUGLLT2huQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1244&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数据不是幽灵，需要有个载体，今天这节，我们就来讲下数据有哪些存储结构。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2NzYyNjQzNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdmOC0H6kaQlnh3rvWF2hPpzBoAoibbfQkhLdXfEpQgd8frHoDJDH503rv3FaMK6las2rCNQY7icr6w/0?wx_fmt=png&quot; data-nickname=&quot;微观技术&quot; data-alias=&quot;weiguanjishu&quot; data-signature=&quot;前阿里架构师，研究生，CSDN博客专家。负责过电商交易、社区团购、流量营销等业务。分享后端架构技能、一线大厂面试经验、团队管理等话题。欢迎关注&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.5449101796407185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPZrJKPQZdLbRxgiazH0Kv1CoBqiceU6l6icIEoWyibbJtVjrW1lMnzbIK2A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;668&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、数组&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;定义：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;数组是一组连续内存空间存储的具有相同类型的数据，整个排列像一条线一样，是一种线性表数据结构。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2585034013605442&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPz6I2DrZDtvVjhjHLtQ8K9AuNQNr02Yj5vyJhux8PpkLjnWibEUeibkwg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1176&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;像常见的&lt;/span&gt;&lt;code&gt;&lt;span&gt;数组&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;链表&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;栈&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;队列&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，都是线性结构。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;随机访问。为什么呢？因为他的类型固定，决定它的数据长度也就固定，另外就是连续，所以基于初始地址，可以直接计算出数组任意位置的内存地址。查询速度很多。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;为了保持连续性，中间位置插入或删除数据，需要做数据搬移，效率会较低。可以看下&lt;/span&gt;&lt;code&gt;&lt;span&gt;ArrayList&lt;/span&gt;&lt;/code&gt;&lt;span&gt;相关API的源码&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;成也萧何败萧何，数组初始化需要连续的内存空间，如果空间不够怎么办？我们可以选择 &lt;/span&gt;&lt;code&gt;&lt;span&gt;链表&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用数组要注意越界问题&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数组扩容需要申请内存、数据搬移，成本较大，如果开始时能确定大小，那么在初始化时指定其大小。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、链表 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;链表一种非连续、非顺序的存储结构，由一系列节点组成，节点间通过指针完成了串联，每个节点包含数据和下一个节点指针两部分。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.31191222570532917&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPOY1BXXAGxNXFgzD0N6E6m9BajTsL9W1jbkoJOyUm6XRgJ9DbWfOcww/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1276&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根据指针的方向可以分为：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不需要连续内存空间&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通过指针将这些空间串起来，形成一条链&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不需要连续的内存空间，较灵活&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;允许插入、删除链表上任意位置的节点，只需要修改指针的值，不需要像数组一样搬移数据，系统开销成本大大降低&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;链表除了存储数据，还要存储指针，会额外占用一些存储空间&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;由于非顺序存储，所以不支持&lt;/span&gt;&lt;code&gt;&lt;span&gt;随机存取&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数组擅长按&lt;/span&gt;&lt;code&gt;&lt;span&gt;下标&lt;/span&gt;&lt;/code&gt;&lt;span&gt;随机访问，链表擅长&lt;/span&gt;&lt;code&gt;&lt;span&gt;插入&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;删除&lt;/span&gt;&lt;/code&gt;&lt;span&gt;操作。平常大家使用时，根据具体使用场景是&lt;/span&gt;&lt;code&gt;&lt;span&gt;读多&lt;/span&gt;&lt;/code&gt;&lt;span&gt;还是&lt;/span&gt;&lt;code&gt;&lt;span&gt;写多&lt;/span&gt;&lt;/code&gt;&lt;span&gt;灵活选择。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、栈  &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;又名堆栈，它是一种运算受限的线性表。上面成为栈顶，下面称为栈底。向栈插入新元素称为入栈，新元素放到栈顶；从一个栈删除元素又称作出栈，它是把栈顶元素删除掉，使其下面相邻的元素成为新的栈顶元素。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0943952802359882&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPxkJga1LXCmIaaViaPABkY3EI6PjxhucvAmELL2zcIicJR50UpYRvzpUg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;678&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根据底层结构不同，可以分为&lt;/span&gt;&lt;code&gt;&lt;span&gt;数组实现的顺序栈&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;链表实现的链式栈&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;只能操作栈顶元素，规则限制的死死地，不像其他数据结构非常灵活，可控性好，非常适合一些特殊业务场景&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;典型场景：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4、队列  &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;队列是一种特殊的线性表，只允许在表的前端进行删除操作，而在表的后端进行插入操作。和栈一样，队列是一种操作受限制的线性表。插入的数据放在队尾，读取数据的端称为队头。队列中没有元素时，称为空队列。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.28125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPtGMiatCp9smgrFCDdtGRpCLIGdvibKdxgUibfY3CVeM7uviaLRG6VT485Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根据支持的高级特性，可以分为：循环队列、阻塞队列、并发队列。根据底层结构不同，可以分为&lt;/span&gt;&lt;code&gt;&lt;span&gt;顺序队列&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;链式队列&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;两个动作：入队、出队&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;需要两个指针，一个head指针，指向队头；一个tail指针，指向队尾。随着入队和出队，两个指针也会相应的移动。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;先进先出，与栈相反&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;规则固定，头部只能读取，插入只能在队尾进行，规则固定，可控性&amp;amp;安全性好。非常适合一些特殊业务场景&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2NzYyNjQzNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdmOC0H6kaQlnh3rvWF2hPpzBoAoibbfQkhLdXfEpQgd8frHoDJDH503rv3FaMK6las2rCNQY7icr6w/0?wx_fmt=png&quot; data-nickname=&quot;微观技术&quot; data-alias=&quot;weiguanjishu&quot; data-signature=&quot;前阿里架构师，研究生，CSDN博客专家。负责过电商交易、社区团购、流量营销等业务。分享后端架构技能、一线大厂面试经验、团队管理等话题。欢迎关注&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;典型场景：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;java线程池&lt;/span&gt;&lt;code&gt;&lt;span&gt;ThreadPoolExecutor&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，来不及处理的任务会临时放在任务队列中&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;各种MQ消息中间件，如：kafka、RocketMQ 等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5、哈希表  &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;哈希表（Hash table）也叫散列表。根据键（Key）而直接访问在内存储存位置的数据结构。它通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，加快查找速度。这个映射函数称为散列函数，存放记录的数组称做散列表。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8302919708029197&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPWoZGxNSLngxmqricf4xWEITLdmEJvic6Ribnwb0hvIjfLPhcRQOTNrzsg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1096&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Hash函数，建立key与value的映射关系。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;常用的哈希函数有MD5、SHA、CRC等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分为治之，化大为小，降低了复杂度&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通过key计算直接获取目标位置，提高查找速度&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;可能存在哈希冲突，在每个冲突处构建链表，将所有冲突值链入链表。如果是恶意攻击，哈希表可能会退化为链表，所有元素都被存储在同一个节点的链表中，此时哈希表的查找速度=链表遍历查找速度=O(n)&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了描述冲突，引入&lt;/span&gt;&lt;code&gt;&lt;span&gt;装载因子=哈希表中的元素个数 / 哈希表长度&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，装载因子越大，说明链表的长度越长，性能会越低。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当装载因子过大时，需要动态扩容。申请一个更大的哈希表，将原哈希表的数据迁移到新的哈希表。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;典型场景：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Redis 数据库&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Java中的哈希表实现，HashMap&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;6、图   &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;图(Graph)是由顶点的有穷非空集合和顶点之间的集合组成，通常表示为：G（V, E），其中 G 表示一个图，V 是图 G 中顶点的集合，E 是图 G 中边的集合。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.781190019193858&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwculhFbcB0uKh7yTC8dKCHPjSUz51H0icqVGuYBUdYwCVGafXabN9QBic4zGLJB7P8iciajzqCwn5v4sA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1042&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上图是一个有向图G，G=（V，E），其中顶点集合 V = 1、2、3、4，边集合是 E = (1,3)、(2,1)、(2,4)、(3,2)、(3,4)、(4,2)&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根据图是否有方向、权重等可以分为：有向图、无向图、带权图&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;存储的信息完备&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;为任意两个顶点建立关系，称之为边。而树只能表示相邻两个节点的关系&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;任意点都可以建立关系，所以数据量会比较大。为了便于存储，我们将图用多维数组表示，从而将很多图运算转换为矩阵运算。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当然，如果图比较稀疏的话，可以采用邻接表的存储方式，与哈希表类似，可以节省很多空间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;典型场景：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;地图如何计算出最优出行路线&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;深度优先搜索&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;广度优先搜索&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;最小生成树&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;图主要有以下两种存储方式：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;邻接矩阵。比较浪费空间，但是优点是查询效率高&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;邻接表。每个顶点对应一个链表，比较节省存储空间，但是查询效率会低些。当然为了提高查询效率，可以将里面的链表替换成红黑树、跳表、或者平衡二叉树。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;7、树  &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;顾名思义，跟现实的树一样，树上的每一个元素成为节点，节点与节点之间有一定的关系，上下称为父子节点，左右称为兄弟节点。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7869955156950673&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPxssDAN39Vu8730QUoLzdoKpoUnbOYCWzzdOJ3eZrWiau505iaLZdR3Ag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;892&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;按照树的表现结构，可以具体分为以下几种类型：二叉树、平衡二叉树、满二叉树、完全二叉树、递归树、红黑树、B- 树、B+ 树 ，等&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;非线性结构&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;父子节点&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;兄弟节点&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;树型结构&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个节点包含3块信息：数据值、左右子节点指针。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;树形结构，支持数据的快速插入、查找、删除&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;支持多种遍历方式：前序遍历、中序遍历、后序遍历&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;结构特殊，适合用递归来实现&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;树中删除一个节点操作较复杂，需要根据其子节点的个数（0、1、2）分多种情况考虑，迁移部分节点，重新构造树结构。当然，也可以采用逻辑标记删除，物理空间没有释放，但会产生碎片，影响查询效率。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;红黑树出镜率很高，风头甚至盖过了平衡二叉树，因为红黑树只要求近似平衡，维护成本比AVL树要低，但性能损失不大。当HashMap中的链表数据较多时，也会将链表结构升级为红黑树结构。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;B+树主要是采用更加扁平的结构存储海量数据，降低树的深度，主要用在 mysql 数据库索引构建，有兴趣同学可以看下之前的文章&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247485030&amp;amp;idx=1&amp;amp;sn=fae128c2991e69101e6e4732001bcb76&amp;amp;chksm=ceb9facdf9ce73db7f26fe269b2fb7f7f16fe1aed7bfbf4028c81239f75890ebab8d27a3a50d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;面试题：mysql 一棵 B+ 树能存多少条数据？&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;8、堆  &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;一种特殊的二叉树。需要满足两个条件：1、是一棵完全二叉树 2、堆中每个节点的值必须&amp;gt;=或&amp;lt;=其左右子节点的值。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8431818181818181&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPN5GzTsXluH1zSXROIdpXO5zibAibkbDgPzH8oXJibhopKVicMArm9agdhw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;880&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;具体，根据每个节点的值是&amp;gt;= 还是 &amp;lt;= 子树中每个节点的值，分为大顶堆、小顶堆。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;时间复杂度较低&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;获取堆顶元素的时间复杂度为 O(1)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;假设完全二叉树包含n个节点，插入元素、删除元素，时间复杂度为 O(logn)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;典型场景：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;示例：从10亿个数据中找到最大的前10个？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;假设10亿个数据存在数组中&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;取前10个数据，构建一个小顶堆，那么根节点是最小的&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;然后，从数组中依次取出一个数据与堆顶比较，如果大于，替换掉堆顶元素，堆内部调整；如果小于等于堆顶，不做处理&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;同样逻辑，依次循环处理数组中每一个元素。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当10亿个数据处理完后，堆中的数据就是Top 10&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于我：前阿里架构师，出过专利，竞赛拿过奖，CSDN博客专家，负责过电商交易、社区生鲜、营销、金融等业务，多年团队管理经验，爱思考，喜欢结交朋友&lt;/span&gt;&lt;/section&gt;&lt;h1 accuse=&quot;qTitle&quot;&gt;&lt;span&gt;&lt;span&gt;「长按2秒」↓↓&lt;/span&gt;&lt;span&gt;↓ 二维码，拉你进群，BAT大厂大神技术交流&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.069090909090909&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwcdJhGaQRdAk0VWLIAIU548z3Izf6mwqwwUX9X86hvNHZq158VYMEaxegjfRg8ic02O0HeWD4xIsiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;550&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247485309&amp;amp;idx=1&amp;amp;sn=1209b7e3324440f7893847a935b3af5f&amp;amp;chksm=ceb9fbd6f9ce72c0ec04b49ed36d947df9b25fecdd7266dac148bb36582b96c2792e1d15d325&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;代码写的烂，经常被同事怼，教你一招！&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247485237&amp;amp;idx=1&amp;amp;sn=e13bb954fb332221ac999e6a5d7f3127&amp;amp;chksm=ceb9fb9ef9ce72885f7a552630c2ed84badd1683019ff86459e8088fe886e89dd4b3932fb5f9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;同事问我，SQL 语句明明命中了索引，为什么执行很慢？&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484980&amp;amp;idx=1&amp;amp;sn=25a530689f0657750d579263800369a6&amp;amp;chksm=ceb9fa9ff9ce7389974d2f33bea9d861920cb75cca559f1f2810c89f729011bb3c2839ac46da&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;学会这10个设计原则，离架构师又进了一步！！！&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484929&amp;amp;idx=1&amp;amp;sn=d8cb3306dea9f1b92fd30d59da3f536a&amp;amp;chksm=ceb9faaaf9ce73bca59b46021a450fdc84aa0f85d6b49ff0e5578cc3abaa1433447f7dffc5e4&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;人人都是架构师？？？谈何容易！！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d665ed219313689e092406e96affc5d8</guid>
<title>和 “杠精” 聊 Redis 多线程</title>
<link>https://toutiao.io/k/vug2wkq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;174&quot; data-backw=&quot;365&quot; data-ratio=&quot;0.4767123287671233&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/cvQbJDZsKLp6wejHtKTRbqqQyt0wMk9K1wNtuwRqQTJAPOJ1KiaqSeSRbIJRTicVicKpDKRndBodY2DBNN20tvWwA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;365&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;不羡鸳鸯不羡仙，一行代码调半天。原创：小姐姐味道（微信公众号ID：xjjdog），欢迎分享，转载请保留出处。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;周末被一位小同学憋的很窝火。他要和我探讨一下，redis到底是多线程的还是单线程的。这个问题本来比较好解释，但我遇到的却是一个杠精。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是显而易见的：redis6，逃不过真香定理，引入了多线程；而在redis6之前，却是单线程的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说，这不是一个是和否的问题，还涉及到第二维度的&lt;code&gt;版本&lt;/code&gt;参与。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可是，这位同学要打我的脸。不知道小姐姐的脸皮很嫩么？摸不得。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“照你的逻辑，redis5是单线程的了？”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“是的。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“那下面这张截图是怎么回事？”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同学甩给我一张图，并送来一个鄙视的眼神。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2950680272108844&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLqjTazMcqBdto4ocAyxwaqxiacqvMAkD0ZozzpjKmEDVdqywvAghe6oZo2kRmP1GukNJaNrpKib4p9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1176&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“使用&lt;code&gt;top -Hp&lt;/code&gt; 查看。redis5有4个线程。该怎么解释？”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个问题，我也不知道怎么跟他解释。使用top命令去观测，redis5肯定是多线程的，比如&lt;code&gt;bgsave&lt;/code&gt;，&lt;code&gt;aof&lt;/code&gt;等，肯定要开启一个线程去操作，否则早就炸了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按照这个逻辑去说，redis就从来没有单进程过。看着这张图，我陷入了无尽的忧愁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“Redis是否是单进程，主要是针对Redis的读写操作来说的”。但这句话对于杠精并没有什么信服力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“写程序要严谨，你们这些人都太不严谨了。多线程就是多线程，你应该问&#x27;redis的读写操作到底是不是多线程的&#x27;”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我问你个大头鬼。我并不想再和他交流，因为我为自己的博学感到无地自容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但他接下来的一个问题，却让我陷入了真正的沉思。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. redis的多线程有多快？&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;redis的多线程到底有什么性能提升呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官方的说法是：&lt;code&gt;possible to easily speedup two times&lt;/code&gt;。可能会比较容易的提升到两倍速度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我英文不太好，对这种英文的修饰感到很迷惑。既然&lt;code&gt;easily&lt;/code&gt;了，为什么还有&lt;code&gt;possible&lt;/code&gt;。&lt;code&gt;two times&lt;/code&gt;，到底是提升了2倍，还是提升到2倍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官方说，到底能够提升多少，还要看硬件的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官方推荐，只有你的CPU核数，达到4个的时候，才有必要试一试这个多线程的Feature。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不要用土豪的眼睛盯着我，这种4core的配置，已经打死了大多数公司了。所以Redis贴心的把多线程功能是关闭的。（好像有点语病）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我只能求助那些在一线的前同事们。他们有没有在生产环境，用上这划时代的多线程Redis6x呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果很令我满意，没有！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中有一个回复我特别满意。他说：“你竟然在问一个停留在JDK1.6的我，跑着Windows版本Redis的我，是否用到了Redis6。我还在用着Redis3呢。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外一个回复我感到更满意，他说：“滚！”&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 怎么用?&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新技术肯定是要吹捧一下的，否则没人实践踩坑，作为追随者就只能吃翔。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多线程在理论上，肯定是会有性能提升的。一个爸爸赚钱和2个爸爸赚钱，效果自然不一样，只是苦了妈妈了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis6的多线程开启，需要配置一个参数。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;io-threads 4&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当开启之后，只有出流量使用多线程，如果你想要入流量也走多线程，那也可以配置以下参数。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;io-threads-do-reads yes&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就这么两个参数，可以看到现在的redis多线程，还是稍显寒碜了一些。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们把它开启之后，仍然使用top -Hp 查看相关进程，可以看到多了3个&lt;code&gt;io_thd&lt;/code&gt;进程。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4073170731707317&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLqjTazMcqBdto4ocAyxwaqxwiblrG0LCcGNTFtajYbibPMhISMEwHWXN0ibDqEvWAKR8Hjyt8yGBzWBQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1230&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分逻辑，是在&lt;code&gt;networking.c&lt;/code&gt;种实现的。这个文件已经达到了3k多行，也是够庞大的了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. Redis为什么又搞多线程了&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用redis-benchmark测试，单机单核的吞吐量，能够达到10w+。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1秒是1000000000纳秒，单次内存操作大约是100纳秒左右，那内存操作可以达到1000w/s的速度。那Redis的瓶颈在哪里呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用perf进行追踪，可以发现它的耗时，主要是体现在&lt;code&gt;sys_write&lt;/code&gt;系统调用上，也就是向socket写数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然瓶颈找到了，那就把它优化掉。redis选择的方式是使用多线程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我使用benchmark测试了一下，4core的机器，CPU跑满的时候，QPS达到了16w，并没有翻倍（相对于单核的9w/s）。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;benchmark 6379 clients 32&lt;br/&gt;164519.20 requests per second&lt;br/&gt;165411.09 requests per second&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用这么强的硬件，获得这样有限的性能提升，差强人意。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就不难解释为什么现在实践的人那么少。出了因为新，还是不够吸引人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;毕竟，4core的机器，我部署上3台redis cluster的实例，理论上会提升三倍呢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;redis配置文件里，有不少内容在注释这个新特性。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. 怎么实现？&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图，一次redis请求，要建立连接，然后获取操作的命令，然后执行命令，最后将响应的结果写到socket上。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.47022900763358777&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLqjTazMcqBdto4ocAyxwaqxnL91XicUicqyVBtFNxicdibjiamDzZ8qwnCQmVmwmIcl3hy0CFxbEzYE9eQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;655&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在redis的多线程模式下，获取、解析命令，以及输出结果着两个过程，可以配置成多线程执行的，因为它毕竟是我们定位到的主要耗时点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但命令的执行，也就是内存操作，依然是单线程运行的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种设计造成了一个特性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;redis现在依然没有多线程的锁竞争和线程安全问题，因为它的数据读取这一步骤，仍然是单线程的，要排队运行。一些耗时的操作，比如&lt;code&gt;keys *&lt;/code&gt;，&lt;code&gt;hgetall&lt;/code&gt;等，仍然要注意。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;redis并不是传统的reactor模型，说实话很多东西硬套概念的话肯定只能钻进个头去漏出个尾巴。它也并不是master，worker这种干干净净的类似于memcached的模型，因为它把命令执行操作给抽取出来了。其中缘由，看上面这张图就够了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;End&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，下一个吸引杠精的问题难题来了：在这种多线程应用场景下，redis算是I/O密集型，还是计算密集型呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或许，如果redis多线程中，无处不在的轮询，属于“计算”的话，它算是一个计算密集型应用吧。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;作者简介：&lt;strong&gt;小姐姐味道&lt;/strong&gt;  (xjjdog)，一个不允许程序员走弯路的公众号。聚焦基础架构和Linux。十年架构，日百亿流量，与你探讨高并发世界，给你不一样的味道。我的个人微信xjjdog0，欢迎添加好友，进一步交流。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;推荐阅读：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650521298&amp;amp;idx=1&amp;amp;sn=09de3ec5ef6dd42a97ab7dd31e5bb6f1&amp;amp;chksm=8780b916b0f7300051773829ad8e138283be5694fb8e24fc8dafa1144b27a800439069920b9b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一图解千愁，jvm内存从来没有这么简单过！&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650521932&amp;amp;idx=1&amp;amp;sn=2a171aaaeb1e6124c86f39a46075363c&amp;amp;chksm=8780c688b0f74f9e25baf3495883dfe50541068dc4e4c1ae8d45ead7daee208a94563af74312&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;失联的架构师，只留下一段脚本&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650521617&amp;amp;idx=1&amp;amp;sn=86e4bee100fa78ccc94e24bb27f0e71a&amp;amp;chksm=8780c7d5b0f74ec36bd0a06167f5b84777ecb2d48b57f3d96e3ce3c4575e6b777dda0188376f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;架构师写的BUG，非比寻常&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650521837&amp;amp;idx=1&amp;amp;sn=bfa841d4abaaf06561f4f2ea10a8c10a&amp;amp;chksm=8780c729b0f74e3fe53caaab6286294b0fb5e41a29aafab81dce9cfd2e8b6a6b6ab94b14b17e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;nginx工程师，需要上承天命，下召九幽&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650521283&amp;amp;idx=1&amp;amp;sn=d6170008ccd038be660ace30dfb31965&amp;amp;chksm=8780b907b0f73011289498cb9b6666b4d76cac2502fb42f64f286146b13d462f72665259b049&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;实力解剖一枚挖矿脚本，风骚操作亮瞎双眼&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650521203&amp;amp;idx=1&amp;amp;sn=ecb07970219397695e8c058085ecc1a9&amp;amp;chksm=8780b9b7b0f730a1779f54a0e71e6c0a967ef2b15f81e5f4cc6138b325b92e0889d957a66747&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;又一P1故障，锅比脸圆&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650521180&amp;amp;idx=1&amp;amp;sn=b53108319ec33a2ef80ec93a4ade0c94&amp;amp;chksm=8780b998b0f7308ef346ca541943604ed2985ea6b9d94aeabf7dca5574320ac335c59a1399fa&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;传统企业的人才们，先别忙着跳“互联网”！&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650521055&amp;amp;idx=1&amp;amp;sn=00ac5d5afd0876eebd1ea8ba6462d8e0&amp;amp;chksm=8780ba1bb0f7330df5a4ef443c04dca4c0884749caf408676b75566f91d6390044fa2f573b49&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;面试官很牛，逼我尿遁&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650520996&amp;amp;idx=1&amp;amp;sn=76b61602a94385ebaae46dfaebc50692&amp;amp;chksm=8780ba60b0f73376590737fa9e46dd680e1da1f5aef28424de1821cd508da9cbf9169ed8c9a8&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;又一批长事务，P0故障谁来背锅？&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650520928&amp;amp;idx=1&amp;amp;sn=90a2fd0f4644d53785d782517781476a&amp;amp;chksm=8780baa4b0f733b2943ed90e9e61cda88070bd448058fa38e93e73d14d5cadb656c43956a86a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一天有24个小时？别开玩笑了！&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650520865&amp;amp;idx=1&amp;amp;sn=ff7a751a092000a9aec8e47df35ab25a&amp;amp;chksm=8780bae5b0f733f3bd75575ef9c14e548bd833bf2ba1289b6f77fd0bbcc5fbc264c19c8cb04a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《程序人生》杀机！&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650520646&amp;amp;idx=1&amp;amp;sn=1260cc4cbfc1067ef325c82ec685a7fb&amp;amp;chksm=8780bb82b0f732940e682ef0bba18560953c425593f700d2ee8d0f9c319bd241b0aafcfd8978&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;可怕的“浏览器指纹”，让你在互联网上，无处可藏&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650520479&amp;amp;idx=1&amp;amp;sn=a1a0f2d250c9d4e8b77529fcf61968ea&amp;amp;chksm=8780bc5bb0f7354d31258d57c2b7a412928f79fec170967ffc6aea53b28aea28c3b3fc8f5de2&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;2w字长文，让你瞬间拥有「调用链」开发经验&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650520457&amp;amp;idx=1&amp;amp;sn=4c9eb499d5160449a62b387e4267953b&amp;amp;chksm=8780bc4db0f7355b79ca03ff4765d6e99293e43cbee54e76bee6cfae247ba2add86b37ba0487&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;996的乐趣，你是无法想象的&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650520435&amp;amp;idx=1&amp;amp;sn=eb248371c43f313bf40814e760cf17c6&amp;amp;chksm=8780bcb7b0f735a1e5e7540aff46e6274b4310726ab810f2e4295800a745d45db51c143fc7ba&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;作为高级Java，你应该了解的Linux知识（非广告）&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650520027&amp;amp;idx=1&amp;amp;sn=5ff6be6dbcae34256c85ac7a79fefba4&amp;amp;chksm=8780be1fb0f73709aaaf3f891f239d4ed7cb039caa1662094e0653dce327f62139c6b1264200&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;必看！java后端，亮剑诛仙（最全知识点）&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650520208&amp;amp;idx=1&amp;amp;sn=4cd66f87430e60ff7797337d67ef20a7&amp;amp;chksm=8780bd54b0f73442f78335204080c49298a069192e9f74d76ea3b6fb285ef3a647730d3c5954&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;学完这100多技术，能当架构师么？（非广告）&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650519865&amp;amp;idx=1&amp;amp;sn=e6c15ef16b8ee81f71924d9757a8c608&amp;amp;chksm=8780befdb0f737ebf616a2bdbd2ae26215830139ea560e52602d350a6d5c26088365dfd3853f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Linux上，最常用的一批命令解析（10年精选）&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650521051&amp;amp;idx=1&amp;amp;sn=6f26085dd48e7e8f6e64e4333d5f02ac&amp;amp;chksm=8780ba1fb0f733092e000591d25a4f02d4c7ea1ffdfd278834b0b1508576da3f480b8acd3502&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;数百篇「原创」文章，助你完成技术「体系化」&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section data-id=&quot;undefined&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;▼&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/cvQbJDZsKLrjA6PQ8tLibsWZA2EXcokcwhz2r4qrzFsaGicORLI12v2rF52pyS81Eq3v13SemBamibdrH0UPSibQ6g/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;480&quot;/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9fc6cfffa5963c53252effc5783627d7</guid>
<title>[译] Google Web 前端性能优化指南</title>
<link>https://toutiao.io/k/o9uac2u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry-content&quot;&gt;
      &lt;p&gt;曾经看到有篇文章写了关于用户对于网站的性能延迟的感知，其中列出了几个关键性的指标：&lt;/p&gt;
&lt;a id=&quot;more&quot;/&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;延迟时间&lt;/th&gt;
&lt;th&gt;指标介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0 ~ 16ms&lt;/td&gt;
&lt;td&gt;新帧更新时间，每秒渲染 60 个新帧保证动画很流畅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0 ~ 100ms&lt;/td&gt;
&lt;td&gt;响应用户操作时间，在此时间窗口内用户会感觉到响应被立即执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100 ~ 1000ms&lt;/td&gt;
&lt;td&gt;加载页面或更新视图时间，在这个窗口内用户会感觉任务进展是自然的、连续的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;= 1000ms (1s)&lt;/td&gt;
&lt;td&gt;用户会失去对他们正在执行的任务的注意力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;= 10000ms (10s)&lt;/td&gt;
&lt;td&gt;用户感到沮丧并可能放弃任务，并且以后可能会也可能不会回来&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;由此可见，性能对于一个应用非常重要。&lt;/p&gt;
&lt;p&gt;为了能够对 web 应用的性能优化有一个整体的认知，本文对 google 的 web 前端性能优化指南进行了翻译整理。整个性能优化的内容分为三个部分：加载性能、渲染性能和性能评估。&lt;/p&gt;
&lt;h2 id=&quot;一、加载性能&quot;&gt;&lt;a href=&quot;#一、加载性能&quot; class=&quot;headerlink&quot; title=&quot;一、加载性能&quot;/&gt;一、加载性能&lt;/h2&gt;&lt;p&gt;加载性能主要是受用户的网络条件、要加载的资源多少以及资源内容的大小的影响。用户的网络条件我们无法控制，所以页面资源的加载数量以及资源内容的大小是我们优化的方向，另一方面我们也可以在我们依赖的传输协议上作文章，比如使用 http 缓存等。&lt;/p&gt;
&lt;h3 id=&quot;1-1-资源加载性能优化&quot;&gt;&lt;a href=&quot;#1-1-资源加载性能优化&quot; class=&quot;headerlink&quot; title=&quot;1.1 资源加载性能优化&quot;/&gt;1.1 资源加载性能优化&lt;/h3&gt;&lt;p&gt;不同的资源类型使用的优化手段会稍微有些不同：&lt;/p&gt;
&lt;h4 id=&quot;文本资源&quot;&gt;&lt;a href=&quot;#文本资源&quot; class=&quot;headerlink&quot; title=&quot;文本资源&quot;/&gt;文本资源&lt;/h4&gt;&lt;p&gt;文本资源主要包括：HTML、JavaScript、CSS 等，主要优化手段有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减小内容：minify&lt;/li&gt;
&lt;li&gt;压缩内容：比如使用 gzip 压缩&lt;/li&gt;
&lt;li&gt;减少第三方库的使用&lt;/li&gt;
&lt;li&gt;JavaScript 特有的优化
&lt;/li&gt;
&lt;li&gt;CSS 特有的优化&lt;ul&gt;
&lt;li&gt;内嵌较小的 CSS 文件&lt;/li&gt;
&lt;li&gt;请勿内嵌较大数据 URI&lt;/li&gt;
&lt;li&gt;请勿内嵌 CSS 属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;图片资源&quot;&gt;&lt;a href=&quot;#图片资源&quot; class=&quot;headerlink&quot; title=&quot;图片资源&quot;/&gt;图片资源&lt;/h4&gt;&lt;p&gt;主要优化手段有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去掉不必要的图片&lt;/li&gt;
&lt;li&gt;选择合适的图片格式&lt;ul&gt;
&lt;li&gt;PNG: 剪贴画、线条画、需要透明度的&lt;/li&gt;
&lt;li&gt;JPG: 照片&lt;/li&gt;
&lt;li&gt;GIF: 动画&lt;/li&gt;
&lt;li&gt;WebP&lt;/li&gt;
&lt;li&gt;若不确定，同时保存所有格式对比大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;去掉 metadata&lt;/li&gt;
&lt;li&gt;调整图片尺寸&lt;ul&gt;
&lt;li&gt;合理的大小&lt;/li&gt;
&lt;li&gt;裁切重要的部分，其余留白&lt;/li&gt;
&lt;li&gt;减小图片质量: 主要是 JPG&lt;/li&gt;
&lt;li&gt;使用压缩工具: 比如 tinyPNG，支持 .png 和 .jpg&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 video 代替大的 GIF&lt;/li&gt;
&lt;li&gt;Lazy load&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-2-HTTP-协议及缓存优化&quot;&gt;&lt;a href=&quot;#1-2-HTTP-协议及缓存优化&quot; class=&quot;headerlink&quot; title=&quot;1.2 HTTP 协议及缓存优化&quot;/&gt;1.2 HTTP 协议及缓存优化&lt;/h3&gt;&lt;p&gt;缓存对于资源加载优化的优势非常明显，对于同一个资源在内容没有改变的情况下不需要做二次加载，极大的提升了加载效率。&lt;/p&gt;
&lt;h4 id=&quot;使用-CDN&quot;&gt;&lt;a href=&quot;#使用-CDN&quot; class=&quot;headerlink&quot; title=&quot;使用 CDN&quot;/&gt;使用 CDN&lt;/h4&gt;&lt;p&gt;CDN 的优点是就近访问，通过缓存代理将资源内容缓存在 CDN 的边缘节点，当用户请求资源的时候如果命中缓存就直接返回缓存的内容，否则就回源到资源服务器拉取内容再返回，同时对资源进行缓存&lt;/p&gt;
&lt;h4 id=&quot;优化-HTTP-请求体&quot;&gt;&lt;a href=&quot;#优化-HTTP-请求体&quot; class=&quot;headerlink&quot; title=&quot;优化 HTTP 请求体&quot;/&gt;优化 HTTP 请求体&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;合并文本内容&lt;/li&gt;
&lt;li&gt;合并图片&lt;/li&gt;
&lt;li&gt;scripts 文件位置: 放在 &amp;lt;/body&amp;gt; 前&lt;/li&gt;
&lt;li&gt;内嵌 scripts: 少量代码时&lt;/li&gt;
&lt;li&gt;同一资源避免多次加载&lt;/li&gt;
&lt;li&gt;懒加载&lt;/li&gt;
&lt;li&gt;使用 HTTP/2 的特性（二进制分帧层、请求与响应复用、数据流优先级、每个来源一个连接、流控制、服务器推送、标头压缩-、HPACK 的安全性和性能）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;使用-HTTP-缓存头&quot;&gt;&lt;a href=&quot;#使用-HTTP-缓存头&quot; class=&quot;headerlink&quot; title=&quot;使用 HTTP 缓存头&quot;/&gt;使用 HTTP 缓存头&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Last-Modified / If-Modified-Since：数据从上一次请求的 Last-Modified 来；服务端返回 200 和内容，表示内容有更新；服务端返回 304 无内容，表示内容没有更新；只能用在 GET 和 HEAD；遇到 If-None-Match 无效，除非服务端不支持 If-None-Match&lt;/li&gt;
&lt;li&gt;Etag / If -None-Match：数据从上一次请求的 Last-Modified 来；服务端返回 200 和内容，表示内容有更新；服务端返回 304 无内容，表示内容没有更新&lt;/li&gt;
&lt;li&gt;cache-control&lt;ul&gt;
&lt;li&gt;no-cache：可以缓存，但每次强制客户端检查更新情况&lt;/li&gt;
&lt;li&gt;no-store：不能缓存&lt;/li&gt;
&lt;li&gt;public：允许浏览器和中间缓存&lt;/li&gt;
&lt;li&gt;private：允许浏览器缓存，不允许中间缓存&lt;/li&gt;
&lt;li&gt;max-age：缓存的最大时长，单位：秒，最长一年：31536000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;expires：设置一个资源过期的时间；过了那个时间点后，向服务器请求新内容；作为 cache-control 的备选方案；最长时间同样不能超过一年；If-Modified-Since、If-Unmodified-Since、Last-Modified&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-3-PRPL-模式&quot;&gt;&lt;a href=&quot;#1-3-PRPL-模式&quot; class=&quot;headerlink&quot; title=&quot;1.3 PRPL 模式&quot;/&gt;1.3 PRPL 模式&lt;/h3&gt;&lt;p&gt;PRPL 是一个首字母缩写词，它描述了一种用于使网页加载并变得更快的交互模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Push (or preload)：推送或预加载最重要的资源&lt;/li&gt;
&lt;li&gt;Render：尽快渲染初始路径&lt;/li&gt;
&lt;li&gt;Pre-cache：预缓存剩余资源&lt;/li&gt;
&lt;li&gt;Lazy load：延迟加载其他路由和非关键资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;二、渲染性能&quot;&gt;&lt;a href=&quot;#二、渲染性能&quot; class=&quot;headerlink&quot; title=&quot;二、渲染性能&quot;/&gt;二、渲染性能&lt;/h2&gt;&lt;p&gt;渲染性能指的是浏览器对网页内容的渲染性能。该性能主要受用户设备的性能、网络条件以及影响渲染性能的代码逻辑的影响。同样，用户设备的性能和网络条件我们无法控制，所以我们只能从影响渲染性能的代码逻辑入手。&lt;/p&gt;
&lt;h3 id=&quot;2-1-浏览器关键渲染路径&quot;&gt;&lt;a href=&quot;#2-1-浏览器关键渲染路径&quot; class=&quot;headerlink&quot; title=&quot;2.1 浏览器关键渲染路径&quot;/&gt;2.1 浏览器关键渲染路径&lt;/h3&gt;&lt;p&gt;关键渲染路径也就是浏览器将 HTML、CSS 和 JavaScript 转换成实际运作的网站必须采取的一系列步骤。通过优化关键渲染路径，我们可以显著缩短首次渲染页面的时间。&lt;/p&gt;
&lt;p&gt;关于具体的知识这里不作过多介绍，感兴趣的同学可以到文章底部参考资源部分找到相关资料，这里主要介绍优化方面的内容。&lt;/p&gt;
&lt;h3 id=&quot;2-2-渲染性能优化&quot;&gt;&lt;a href=&quot;#2-2-渲染性能优化&quot; class=&quot;headerlink&quot; title=&quot;2.2 渲染性能优化&quot;/&gt;2.2 渲染性能优化&lt;/h3&gt;&lt;h4 id=&quot;优化-JavaScript-执行&quot;&gt;&lt;a href=&quot;#优化-JavaScript-执行&quot; class=&quot;headerlink&quot; title=&quot;优化 JavaScript 执行&quot;/&gt;优化 JavaScript 执行&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;requestAnimationFrame：对于动画效果的实现，避免使用 setTimeout 或 setInterval，请使用 requestAnimationFrame。&lt;/li&gt;
&lt;li&gt;降低复杂性或使用 Web Worker：将长时间运行的 JavaScript 从主线程移到 Web Worker。&lt;/li&gt;
&lt;li&gt;了解 JavaScript 的“帧税”：使用微任务来执行对多个帧的 DOM 更改。&lt;/li&gt;
&lt;li&gt;避免微优化 JavaScript：使用 Chrome DevTools 的 Timeline 和 JavaScript 分析器来评估 JavaScript 的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;缩小样式计算的范围并降低其复杂性&quot;&gt;&lt;a href=&quot;#缩小样式计算的范围并降低其复杂性&quot; class=&quot;headerlink&quot; title=&quot;缩小样式计算的范围并降低其复杂性&quot;/&gt;缩小样式计算的范围并降低其复杂性&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;降低选择器的复杂性&lt;/li&gt;
&lt;li&gt;减少要计算样式的元素数量&lt;/li&gt;
&lt;li&gt;测量样式重新计算的开销&lt;/li&gt;
&lt;li&gt;使用块、元素、修饰符(BEM)编写样式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;避免大型、复杂的布局和布局抖动&quot;&gt;&lt;a href=&quot;#避免大型、复杂的布局和布局抖动&quot; class=&quot;headerlink&quot; title=&quot;避免大型、复杂的布局和布局抖动&quot;/&gt;避免大型、复杂的布局和布局抖动&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;尽可能避免布局操作：对“几何属性”（如宽度、高度、左侧或顶部）的更改&lt;/li&gt;
&lt;li&gt;使用 flexbox 而不是较早的布局模型&lt;/li&gt;
&lt;li&gt;避免强制同步布局：始终先批量读取样式并执行（浏览器可以使用上一帧的布局值），然后执行任何写操作&lt;/li&gt;
&lt;li&gt;避免布局抖动：不要在循环中读取样式值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;简化绘制的复杂度、减小绘制区域&quot;&gt;&lt;a href=&quot;#简化绘制的复杂度、减小绘制区域&quot; class=&quot;headerlink&quot; title=&quot;简化绘制的复杂度、减小绘制区域&quot;/&gt;简化绘制的复杂度、减小绘制区域&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;触发布局与绘制&lt;ul&gt;
&lt;li&gt;触发布局必然触发绘制&lt;/li&gt;
&lt;li&gt;更改非几何属性，例如背景、文本或阴影，会触发绘制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 Chrome DevTools 快速确定绘制瓶颈&lt;/li&gt;
&lt;li&gt;提升移动或淡出的元素&lt;ul&gt;
&lt;li&gt;will-change&lt;/li&gt;
&lt;li&gt;3D 变形: transform: translateZ(0);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;减少绘制区域：编排动画和变换使其不过多重叠&lt;/li&gt;
&lt;li&gt;降低绘制的复杂性：绘制任何涉及模糊（例如阴影）的元素所花的时间将比（例如）绘制一个红框的时间要长&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;坚持仅合成器的属性和管理层计数&quot;&gt;&lt;a href=&quot;#坚持仅合成器的属性和管理层计数&quot; class=&quot;headerlink&quot; title=&quot;坚持仅合成器的属性和管理层计数&quot;/&gt;坚持仅合成器的属性和管理层计数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;坚持使用 transform 和 opacity 属性更改来实现动画&lt;/li&gt;
&lt;li&gt;提升您打算设置动画的元素&lt;/li&gt;
&lt;li&gt;管理层（layer）并避免层数激增&lt;/li&gt;
&lt;li&gt;使用 Chrome DevTools 来了解应用中的层&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;使输入处理程序去除抖动&quot;&gt;&lt;a href=&quot;#使输入处理程序去除抖动&quot; class=&quot;headerlink&quot; title=&quot;使输入处理程序去除抖动&quot;/&gt;使输入处理程序去除抖动&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;避免长时间运行输入处理程序&lt;/li&gt;
&lt;li&gt;避免在输入处理程序中更改样式&lt;/li&gt;
&lt;li&gt;使滚动处理程序去除抖动&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;三、性能评估&quot;&gt;&lt;a href=&quot;#三、性能评估&quot; class=&quot;headerlink&quot; title=&quot;三、性能评估&quot;/&gt;三、性能评估&lt;/h2&gt;&lt;p&gt;评估一个网站的性能之前，首先要确定衡量性能好坏的指标，通过指标数据才能客观评估哪些方面做得好，哪些方面（以及如何）可以改进。&lt;/p&gt;
&lt;h3 id=&quot;3-1-指标类型&quot;&gt;&lt;a href=&quot;#3-1-指标类型&quot; class=&quot;headerlink&quot; title=&quot;3.1 指标类型&quot;/&gt;3.1 指标类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Perceived load speed: 加载并渲染可视区域内容的速度&lt;/li&gt;
&lt;li&gt;Load responsiveness: 加载并执行引用的 JavaScript 代码以响应用户交互的速度&lt;/li&gt;
&lt;li&gt;Runtime responsiveness: 加载完成后，页面响应用户交互的速度&lt;/li&gt;
&lt;li&gt;Visual stability: 页面上的元素是否以用户不期望的方式移动并可能干扰他们的交互？&lt;/li&gt;
&lt;li&gt;Smoothness: 过渡和动画渲染桢率是否稳定，状态变化是否流畅?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-2-重要的衡量指标&quot;&gt;&lt;a href=&quot;#3-2-重要的衡量指标&quot; class=&quot;headerlink&quot; title=&quot;3.2 重要的衡量指标&quot;/&gt;3.2 重要的衡量指标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;First contentful paint (FCP): 测量从页面开始加载到屏幕上呈现页面内容的任何部分的时间&lt;/li&gt;
&lt;li&gt;Largest contentful paint (LCP): 测量从页面开始加载到最大的文本块或图像元素在屏幕上呈现的时间&lt;/li&gt;
&lt;li&gt;First input delay (FID): 衡量从用户首次与您的网站进行交互（即当他们单击链接，点击按钮或使用自定义的 JavaScript 驱动的控件）到浏览器实际能够响应该交互之间的时间&lt;/li&gt;
&lt;li&gt;Time to Interactive (TTI): 测量从页面开始加载到可视化呈现之间的时间，页面的初始脚本（如果有）已经加载，并且能够可靠地快速响应用户输入的时间&lt;/li&gt;
&lt;li&gt;Total blocking time (TBT): 测量主线程被阻塞足够长时间以防止输入响应的 FCP 和 TTI 之间的总时间&lt;/li&gt;
&lt;li&gt;Cumulative layout shift (CLS): 测量页面开始加载到页面生命周期状态变为隐藏之间发生的所有意外布局转换的累积分数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;四、参考资源&quot;&gt;&lt;a href=&quot;#四、参考资源&quot; class=&quot;headerlink&quot; title=&quot;四、参考资源&quot;/&gt;四、参考资源&lt;/h2&gt;

    &lt;/div&gt;
    &lt;div class=&quot;post-info&quot;&gt;
      &lt;p&gt;
        作者
        Richard Chen
        发表于
        &lt;i&gt;2021-07-22 15:41:00&lt;/i&gt;

        
        ，添加在分类
        
        &lt;a href=&quot;/cate/performance/&quot; data-cate=&quot;性能优化&quot;&gt;
          &lt;code class=&quot;notebook&quot;&gt;性能优化&lt;/code&gt;
        &lt;/a&gt;
        
        下
        

        

        ，最后修改于
        &lt;i&gt;2021-07-22 15:41:00&lt;/i&gt;
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c19f415049f9627cdfd60d9b7f95c678</guid>
<title>软件设计的目标和途径</title>
<link>https://toutiao.io/k/d67pcrt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;blogpost-body cnblogs-markdown&quot;&gt;
&lt;p&gt;记录一下笔者关于软件设计的一些相关认知。在开始之前，先引入两个概念&lt;code&gt;目标&lt;/code&gt;和&lt;code&gt;途径&lt;/code&gt;(这里可能会有些咬文嚼字，不过主要是为了区分主观和客观的一些细微差异)。&lt;/p&gt;
&lt;h1 id=&quot;1-目标和途径&quot;&gt;1 目标和途径&lt;/h1&gt;
&lt;p&gt;我们在做某一件事情的时候，总是会带有一定的目的性的：比如说一日三餐，是为了给身体补充所需的能量。那么这三餐具体如何落实呢，则会有多种多样的方式。比如你可以选择吃碳水食物、蔬菜、肉类、牛奶或者蛋类等等；也可以选择通过静脉注射一些所需的葡萄糖或者蛋白质。总之，能够为身体补充能量就可以了。&lt;/p&gt;
&lt;h2 id=&quot;11-目标&quot;&gt;1.1 目标&lt;/h2&gt;
&lt;p&gt;那么在上述的小例子中，我们的&lt;code&gt;目的&lt;/code&gt;就是给身体补充能量，用以维持正常的生命活动所需。当然也可以说是我们的&lt;code&gt;目标&lt;/code&gt;，不过&lt;code&gt;目标&lt;/code&gt;侧重于过程，目的则更强调结果。&lt;/p&gt;
&lt;h2 id=&quot;12-途径&quot;&gt;1.2 途径&lt;/h2&gt;
&lt;p&gt;从上面的例子中可以看出有多种方式可以达成我们的上述&lt;code&gt;目的&lt;/code&gt;。其中每一种方式都是一条达成&lt;code&gt;目的&lt;/code&gt;的&lt;code&gt;途径&lt;/code&gt;，当然我们为了补充均衡的能量，通常会搭配组合几种不同的食物，我把这个称之为手段或者方法。&lt;code&gt;手段&lt;/code&gt;和&lt;code&gt;方法&lt;/code&gt;带有一定的主观性；而&lt;code&gt;途径&lt;/code&gt;则是在描述客观的可供选择的一种方式。&lt;/p&gt;
&lt;h1 id=&quot;2-软件的目的&quot;&gt;2 软件的目的&lt;/h1&gt;
&lt;p&gt;在开始讨论软件设计之前先问自己一个最基本的问题：我们为什么需要软件？&lt;/p&gt;
&lt;p&gt;笔者认为是为了解决现实中某个领域的相关问题而存在的。就好比最初的计算机是用来计算导弹的弹道的。生活中常用的QQ和微信是为了满足人们的社交通信需求的，淘宝京东等是满足了人们的买买买的需求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以，软件存在的目的就是它能解决一些领域的相关问题，这是它存在的唯一理由&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如在黑客帝国这部电影中，不再被使用的程序只有一个下场，那就是被删除掉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;3-软件设计的目标&quot;&gt;3 软件设计的目标&lt;/h1&gt;
&lt;p&gt;假如一开始就有了软件，其实要不要软件设计都不重要了。但是问题在于软件不是凭空产生的，不是从0到1没有中间过程就直接得到了想要的软件的。&lt;strong&gt;在软件从0到1的过程，就是软件设计的作用范围（所以在这里我用软件设计的目标这个概念）&lt;/strong&gt;。因为软件存在的目的在于它能解决一些领域的相关问题，那么首先对软件的最低要求就是它能用，能用来解决问题。比如一个数学上的加减乘除计算器，最低最低的要求是你要能把结果算对吧。所以软件设计的目标是什么？笔者认为就是控制这个从0到1的过程，避免其失控（一旦失控你可能就连最低最低的软件的要求都达不到了）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/5344973/&quot; target=&quot;_blank&quot;&gt;《领域驱动设计：软件核心复杂性应对之道》&lt;/a&gt;一书的副标题也是这个含义。它的侧重点在于如何利用面向对象的方式应对软件本身的复杂性，从而避免其失控。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;那么笔者对软件设计的目标的认知就是：避免软件的失控。为什么是目标而不是目的呢？是因为软件设计在软件的整个生命周期中都是存在着的，这是一个持续的过程，直到软件不再被使用的那一天；而非只在刚开始设计一下，后续就一成不变了&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&quot;4-失控的根本原因&quot;&gt;4 失控的根本原因&lt;/h1&gt;
&lt;p&gt;上面推导出软件设计的目标是&lt;strong&gt;避免软件的失控&lt;/strong&gt;。那么是什么东西导致的&lt;strong&gt;失控&lt;/strong&gt;? 你面临的业务太复杂？项目遗留的代码太烂？团队成员水平参差不齐？工期太紧张导致你无暇做设计规划？也许吧，这些或多或少都确实是已经存在的事实。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;业务太复杂难道是失控的原因吗？回想一下&lt;strong&gt;软件的目的&lt;/strong&gt;是什么？&lt;strong&gt;解决一些领域的相关问题&lt;/strong&gt;，那么我们可以让业务的复杂性会消失或者降低吗？答案是肯定的，&lt;strong&gt;不会&lt;/strong&gt;！这里就有人要说你放屁。。。你敢说我们无法降低业务复杂性，打你噢。你就是打死我复杂性也不会降低的，，，&lt;strong&gt;复杂性是业务本身存在的客观属性，是不会以人的意志来改变的，除非你不做它了&lt;/strong&gt;。就像你现在要在淘宝买一个手机，你人在北京，卖方在广州，无论你用什么快递方式，从广州到北京这段物理距离上的时间消耗是无法消除的。你说你比较着急，那好，卖方给你选择空运，很快你就收到货了。你说空运这不是降低了快递时间，和降低复杂性不是一样的吗？ 其实并不是，因为复杂性指的是&lt;strong&gt;无论你用什么快递方式，从广州到北京这段物理距离上的时间消耗是无法消除的&lt;/strong&gt;，指的是这个过程你无法消除。但是总觉得怪怪的对吗？是的，看起来是怪怪的，明明我收到货的时间缩短了，怎么复杂性没有改变呢？所以这里就引申出另外一个概念：&lt;strong&gt;业务交互方式所带来的影响&lt;/strong&gt;。这个影响非常之大，但是往往被我们所忽略，比如你选择购买发货地是北京的卖方了，是不是时间又进一步大大缩短了？&lt;strong&gt;实际业务上也是这样的，业务本身具备的复杂性，以及我们在把业务转化为软件后的交互方式所带来的影响，业务本身的复杂性我们无法降低和消除，但是后者交互方式则是可以控制的，这也是软件设计的一部分，所以其实上面我们选择空运是改变了这部分&lt;/strong&gt;。就好比你是一个B/S的应用软件，你的用户在浏览器中看到了Web页面。这背后你的Web页面从服务器到用户浏览器的过程和浏览器渲染页面的过程是无论如何也无法消除的，但是浏览器可以缓存它，当你下次再打开这个页面时，它就可以省掉上述的交互过程。&lt;/li&gt;
&lt;li&gt;项目遗留的代码太烂是失控的原因吗？其实也不是，这是失控的一种表现结果。&lt;/li&gt;
&lt;li&gt;团队成员水平参差不齐是失控的原因吗？也不是，这虽然是客观存在的事实，但是你这样把责任推到队友身上不合适吧，说不定队友也是这么看你的呢。&lt;/li&gt;
&lt;li&gt;工期太紧张导致你无暇做设计规划是失控的原因吗? 当然也不是，这个是借口。。。就像你今天起床快要迟到了，你会选择光屁股不穿衣服就出门吗？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了上述的一些事实，当然还有其他的一些因素，&lt;strong&gt;看起来都不像是导致失控的罪魁祸首&lt;/strong&gt;。那么究竟是什么导致的失控？？？仔细回想一下，当我们觉得项目失控的时候通常是什么场景？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有个已知的bug，你改动的时候发现牵扯的东西太多了，牵一发而动全身，你不敢下手。你觉得代码无法控制了。。。&lt;/li&gt;
&lt;li&gt;有个未知的bug，你找了好久找不到，代码太乱了。你觉得一股无力感。。。&lt;/li&gt;
&lt;li&gt;有个新功能来了，你发现你要改这里那里，但是完全不知道改了会不会破坏现有的功能，也不知道新功能是不是真的可以work。你觉得你无法掌控这些代码了。。。&lt;/li&gt;
&lt;li&gt;还有一些其他的情况，总之就是你觉得你无法掌控代码的真实行为了，你不知道你的代码会产生什么样的结果，就像薛定谔的代码一样。。。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么还有一个场景，当你要开展一个新的项目，所有的一切都是新的，没有任何历史债务负担，这时候你是什么感觉？信心满满啊肯定是，这时候你不会觉得你会对接下来的代码失去控制，因为你现在一行代码都还没有。。。&lt;/p&gt;
&lt;p&gt;所以是什么导致的失控？&lt;strong&gt;现存的无力维护(bug、新功能都是维护)的代码导致的失控&lt;/strong&gt;，同时这也是失控的表现结果。那么你为什么会&lt;strong&gt;无力维护&lt;/strong&gt;这些代码，因为它的真实行为和你理解的行为出现了偏差，你觉得它不可控了。这时候就是真的失控了，代码烂不烂其实并不是重点，只要你还能维护，这些都不是问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代码只会按照你编写的行为去执行，而不是按照你认为的行为去执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么如何避免失控？&lt;strong&gt;编写可维护的代码&lt;/strong&gt;。打死你噢，解释这么半天憋出这么一句废话，谁不知道要编写可维护的代码啊。。。&lt;/p&gt;
&lt;p&gt;我只能说别着急，继续慢慢往下看。。。&lt;/p&gt;
&lt;h1 id=&quot;5-目标-可维护性&quot;&gt;5 目标-可维护性&lt;/h1&gt;
&lt;p&gt;既然我们的目标是避免失控，避免失控的途径则是&lt;strong&gt;编写可维护的代码&lt;/strong&gt;。那么我就把&lt;strong&gt;可维护性&lt;/strong&gt;作为软件设计的终极目标，而且没有之一。也称之为&lt;strong&gt;元原则&lt;/strong&gt;，就是说我们目前所接触到的各自编程原则、建议和最佳实践等等都可以通过&lt;strong&gt;可维护性&lt;/strong&gt;推导细化出来，并且不可与之相违背。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;打个比喻，就好比宪法是其他一切法律的基础，任何法律如果违背了宪法，那么就是无效的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么根据&lt;strong&gt;可维护性&lt;/strong&gt;可推导出来3个核心的原则：&lt;strong&gt;可理解性&lt;/strong&gt;、&lt;strong&gt;可测试性&lt;/strong&gt;和&lt;strong&gt;可隔离性&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;51-可理解性&quot;&gt;5.1 可理解性&lt;/h2&gt;
&lt;p&gt;这条原则看起来很有主观性的倾向，但是其实并不是。&lt;/p&gt;
&lt;p&gt;比如说你刚写了一段代码，你觉得容易理解，他看起不容易理解；或者说代码是他写的，他看起来很容易理解，但是到你这里无法一下子理解他的思维，然后你就觉得不好理解。&lt;strong&gt;如果出现了这样的情况，那么则统统都是不可理解的&lt;/strong&gt;。这时候你要说了：你要一棍子打死双方啊。是的，正是如此。再回想一下我们的目标是什么？&lt;strong&gt;可维护性！&lt;/strong&gt; 这里的维护不单单是说你的代码你来维护，而是大家互相交叉着；你新增了一个功能，后续负责其他的事情去了，那么这时候就由你的队友来负责维护了；或者你接手维护别人的代码。&lt;/p&gt;
&lt;p&gt;所以我们需要一个客观上的&lt;strong&gt;可理解性&lt;/strong&gt;。那么到底什么才能叫客观？没法度量啊！其实也不复杂，就是看当你读到一段代码的时候，你是否需要额外的思考，额外的脑中维持一个上下文的环境才能明白这段代码的意图，如果需要，那么就是不可理解的，至少也是不易理解的。&lt;strong&gt;更简单点说就是这段代码应该让你不用思考就看的明白它的意图&lt;/strong&gt;。比如下面的一个小例子，功能是完全等价的，但是差异非常微妙。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// 1
if(userList.isNotEmpty()){

}

// 2
if(userList.isEmpty() == false){

}

// 3
if(!userList.isEmpty()){

}

// 4
if(userList.length() != 0){

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你觉得可理解性怎么排？ 答案是肯定的吧？&lt;code&gt;1 &amp;gt; 2 &amp;gt; 3 &amp;gt; 4&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1是不是你根本就不用思考，直接读下来就知道其含义？&lt;/li&gt;
&lt;li&gt;2则是有一个&lt;code&gt;==fasle&lt;/code&gt;的过程，需要你进行简单的思考。&lt;/li&gt;
&lt;li&gt;3则是接近于2，但是比2更差一点，因为取反符号在前面，但是其决定性的值则在后面，而你的阅读顺序是从左向右，所以你需要一个比2稍微更复杂一点的思考过程。&lt;/li&gt;
&lt;li&gt;前三个还都一眼能看出来是&lt;strong&gt;空&lt;/strong&gt;或者&lt;strong&gt;非空&lt;/strong&gt;的语境，但是4就更差了，4的字面意思是长度不等于0，逻辑上其实和&lt;strong&gt;非空&lt;/strong&gt;是等价的，但是你需要在脑中做这样的一个映射&lt;strong&gt;长度!=0&lt;/strong&gt;等同于&lt;strong&gt;非空&lt;/strong&gt;，这个的抽象层级明显更低了一个层级。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不知道能否体会其中差细微差异。那么你觉得这些理解是客观的还是主观的呢?&lt;/p&gt;
&lt;h2 id=&quot;52-可测试性&quot;&gt;5.2 可测试性&lt;/h2&gt;
&lt;p&gt;可理解性可以确保你可以快速的理解现存代码的意图，但是其真实的行为呢？是不是和你所认为的行为就是一致的？上面我说过：“&lt;strong&gt;代码只会按照你编写的行为去执行，而不是按照你认为的行为去执行&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;那么如何确保你真实的行为和你所认为的行为是一致的？那就是&lt;strong&gt;测试&lt;/strong&gt;。把你认为的行为也写成代码，去验证你的业务代码执行的时候是不是会按照你给定的输入得到你期望的输出结果。借助自动化的CI，就可以在你每次改动代码时把现有的所有测试都运行一遍，然后你至少可以获得3点收益：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码真的时按照你认为的行为去执行的。&lt;/li&gt;
&lt;li&gt;确保你的改动不会破坏现有的代码行为。&lt;/li&gt;
&lt;li&gt;倒逼你的代码进行合理的分解和抽象，不然你很难编写有效的测试。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然你可能把测试写错了，，，这种概率就小多了吧。况且假设你真的写错了测试，时间久了，这个错误也就变成了&lt;strong&gt;feature&lt;/strong&gt;。为什么呢？也许你代码的消费方已经按照它实际的行为去处理了，这时候你贸然把这个bug修复了，结果可能时消费方反而不能正常工作了。这时候这个错误的测试其实也就变成了消费方的一种契约测试。确保你不会把它改对，，，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如C#的类库中有个&lt;code&gt;DateTime&lt;/code&gt;，在处理时区问题时很多诡异的行为，这时候微软已经无法修正它了，只好再单独新增了一个&lt;code&gt;DateTimeOffset&lt;/code&gt;，两者共存，慢慢的迁移过去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;53-可隔离性&quot;&gt;5.3 可隔离性&lt;/h2&gt;
&lt;p&gt;那么现在你可以快速的理解现存的代码了，也可以确保你的新代码不会破坏已有的功能，也确认你的代码行为是你所认为的行为了。是不是就可以愉快的合并代码并且上线发布了？是的，差不多可以了。但是，凡是总有例外，我们不能把全部希望都寄托在我们能严格落实上述两点。总是要有个备选方案对吧？&lt;/p&gt;
&lt;p&gt;可隔离性就是这样的一个备选方案，其意图就是隔离你的代码行为，哪怕它就是腐烂变质成了不可维护的代码，只要不影响其他的模块，那么就还算是可控的。就像万吨巨轮，底层的隔水舱总是一个个的独立的，一个进水了也不影响其他的，从而避免整体的失控。&lt;/p&gt;
&lt;h1 id=&quot;6-途径&quot;&gt;6 途径&lt;/h1&gt;
&lt;p&gt;还记得文章开始介绍的&lt;strong&gt;目标&lt;/strong&gt;和&lt;strong&gt;途径&lt;/strong&gt;的概念吧，上述的3个原则是我们的目标，那么想要达成这样的目标有哪些途径可供使用呢？&lt;/p&gt;
&lt;h2 id=&quot;61-命名&quot;&gt;6.1 命名&lt;/h2&gt;
&lt;p&gt;曾经有这么一句话，计算机领域有两大难题：命名和缓存失效。一个好名字的重要性不必多说了吧？&lt;strong&gt;此外我还有一个心得体会：如果你觉得命名出现了困难，那么请从头审视一下你的设计，或许你走错了方向了。我认为一旦出现了命名困难的问题，那绝对就是你的设计出现了问题。也许时你的方法职责太多了，你无法用简洁的名字描述清楚，也许是你的字段所表达的含义不清，导致你无法准确的用一个简单的词语描述它&lt;/strong&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目标&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;可理解性&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;增加可读性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可测试性&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无影响。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可隔离性&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无影响。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;62-单一职责&quot;&gt;6.2 单一职责&lt;/h2&gt;
&lt;p&gt;几乎每个人都明白单一职责的重要性，但是却很容易就忽略它。比如下面的小例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// 1
public String sum(
    final Collection&amp;lt;BigDecimal&amp;gt; bigDecimalCollection
) {
  final BigDecimal sumResult = bigDecimalCollection
      .stream()
      .reduce(BigDecimal.ZERO, BigDecimal::add);

  final DecimalFormat format = new DecimalFormat(&quot;#,##0.00&quot;);
  return format.format(sumResult);
}

// 2
public BigDecimal sum(
    final Collection&amp;lt;BigDecimal&amp;gt; bigDecimalCollection
) {  
  return bigDecimalCollection
      .stream()
      .reduce(BigDecimal.ZERO, BigDecimal::add);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1的职责是不是有点多？&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目标&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;可理解性&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;一个关注点使得代码可理解性大大的提升。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可测试性&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;也使得测试更容易实施。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可隔离性&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;单一单一，那不就是隔离开了吗？&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;63-数据模型匹配业务&quot;&gt;6.3 数据模型匹配业务&lt;/h2&gt;
&lt;p&gt;数据模型匹配的含义是说让你的代码真实的表达实际的业务意图，而且这个意图必须要落实到数据层面，而非代码层面。&lt;strong&gt;简而言之就是让你的数据体现你的业务，而不是你的代码体现你的业务&lt;/strong&gt;。感觉有点绕噢，什么鬼意思？我举个小例子：个税计算&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// 1
(empployee.salary - 3500) * taxRate;

// 2 employee.exemption = 3500
(empployee.salary - employee.exemption) * taxRate;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你觉得哪种更合适？1就是业务被体现在了代码中，这时候2019年了，个税免征额提高到了5000，你怎么办？改代码呗，3500改成5000不就完事了。对，完事了，那么历史的数据怎么办？有人要对比一下新旧版本的差异，怎么算？没办法，你被逼着写了两个版本，2019年前一个版本的代码，2019年后的一个版本，然后混乱就开始了。&lt;/p&gt;
&lt;p&gt;所以根本问题在哪？就是因为3500这个数字看起来虽然不起眼，但是它本身是业务的一部分，结果却被安置到了代码中。这就是典型的数据模型不匹配业务。这种细节有时候一开始很难察觉到，但是一旦发现可能就已经很难挽回了，代码可以随便改，但是已经存在的历史数据怎么办? 上述的例子还好说点，你可以刷一下历史数据给补上去。但是很多时候数据一开始没有记录，后续就无论如何也无法修补了，导致你的代码被死死的捆绑住，无法再添加新功能了。&lt;/p&gt;
&lt;p&gt;笔者非常认同Linus torvalds的一句话：“烂程序员关心的是代码。好程序员关心的是数据结构和它们之间的关系。”&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;。Git的数据结构非常之稳定，它的底层实际上是一个内容寻址文件系统，在这样的一个底层数据结构之上，十几年来Git新增了n多个功能和命令，但是却一致保持着的兼容性（你用Git早期版本初始化操作一个repo，到了现在的最新版依然是完全匹配的）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目标&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;可理解性&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;匹配的模型可以表达真实的业务意图，没有中间转换的环节，可以让你再理解代码时没有额外的心智负担。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可测试性&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;使得测试更能直观的描述真实的业务行为。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可隔离性&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;合理的模型划分可以有效的减少不必要的依赖，从而保持相对独立。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;64-抽象层级&quot;&gt;6.4 抽象层级&lt;/h2&gt;
&lt;p&gt;把大象放进冰箱需要几步？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把冰箱门打开。&lt;/li&gt;
&lt;li&gt;把大象放进去。&lt;/li&gt;
&lt;li&gt;把冰箱门关上。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;就这么简单，这三件事都是在一个抽象的层级上的。那么再细化一些，打开冰箱门需要几步？还有现在没大象，我要去从动物园先弄过来一个，怎么办?这些细节和上述的三个步骤是不是在一个抽象层级上? 肯定不是吧！&lt;strong&gt;但是我们通常很多时候都是在干着这样的事情，比如业务代码中夹杂着如何拼接SQL语句的代码。当你读到这样的代码的时候会觉得很乱，为什么感觉乱？就是因为其涵盖了不同抽象层级的代码在一起，导致你在前脚还在想着如何把大象放进去这件事的时候，突然发现接下来的是我怎么才能从动物园弄个大象出来这些琐事&lt;/strong&gt;。还记得上面的一个判断非空的一小段代码吧？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// 1
if(userList.isNotEmpty()){

}

// 4
if(userList.length() != 0){

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4干的就样的事情，虽然很细微，但是就是这样一个一个细微的不同抽象层级的代码混在一块，就把你的代码搞乱了，搞的可理解性急剧下降。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目标&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;可理解性&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;阅读代码时避免分心去考虑一些不必要的细节问题。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可测试性&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;比如我用一个大象的毛绒玩具也可以完成第2步吧？这就大大的简化了测试的关注点和编写。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可隔离性&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;屏蔽了一些底层的细节。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;65-奥卡姆剃刀&quot;&gt;6.5 奥卡姆剃刀&lt;/h2&gt;
&lt;p&gt;这又是个什么鬼？怎么剃刀都出来了，还嫌发际线不够高吗？其实不是的，这个一个关于简单行的原则，也称之为“&lt;strong&gt;如无必要，勿增实体&lt;/strong&gt;”。就是说如果有两个途径可以完成同样一件事情，那就选择更简单假设更少的那一个。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目标&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;可理解性&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;选择更简单的有助于理解。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可测试性&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无影响。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可隔离性&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无影响。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;7-一些误区&quot;&gt;7 一些误区&lt;/h1&gt;
&lt;p&gt;看到这里估计有人要忍不住要批判我了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可复用性呢？GoF23种设计模式都强调构建可复用性的软件，可复用性跑哪去了？被你吃了啊。&lt;/li&gt;
&lt;li&gt;可靠性呢？健壮性呢？&lt;/li&gt;
&lt;li&gt;高可用性呢？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;等等吧，就像当年软工课程上罗列的各种指标，或者各种的模式和架构等等。其实不是说这些东西不重要，或者我不认可这些东西，我认可，也理解它们的重要性。&lt;strong&gt;但是有一点要彻底搞清楚，哪些是我们的目标？哪些是我们的途径？&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;71-可复用性只是一种现象&quot;&gt;7.1 可复用性只是一种现象&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;可复用性难道是我们追求的目标吗？我的回答是：否，我们的目标是软件的可维护性&lt;/strong&gt;！那么你说复用就会增加可维护性，其实不尽然，不合适的复用反而会降低可维护性，这是一把双刃剑，借用著哥的一句话：“&lt;strong&gt;越通用越无用&lt;/strong&gt;”。那么你说不是目标也是途径吧！那么我的回答是：也不是途径，你这条途径可能会违宪，你觉得它合适吗？也不是目标，也不是途径，那么它到底是什么？答：只是一种现象，如果你落实了上述的5条途径中的某些途径，你会发现你的代码自然而然就可以复用了。&lt;/p&gt;
&lt;h2 id=&quot;72-设计模式源自缺陷&quot;&gt;7.2 设计模式源自缺陷&lt;/h2&gt;
&lt;p&gt;首先我们看一下设计模式是什么: “是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。” 也就是说它是经过验证的一些最佳实践的经验性代码。&lt;strong&gt;那么问题来了，什么时候才需要最佳实践？&lt;/strong&gt;，当你对你所使用的工具出现迷惑的时候，不太清楚怎么处理才好的时候，你需要借鉴一下其他人总结出来的比较好的处理方案才能完成你的工作的时候。这个处理方案，就是设计模式。那么此时你想一想，GoF23的设计模式是在弥补什么的缺陷？OO的啊，人家的副标题是“&lt;strong&gt;可复用面向对象软件的基础&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;当然设计模式也不是OO的专有的东西，凡是通用的那些已命名的最佳实践，都可以称之为设计模式。&lt;/p&gt;
&lt;h2 id=&quot;73-oop不是目的&quot;&gt;7.3 OOP不是目的&lt;/h2&gt;
&lt;p&gt;很多时候在讨论代码的时候，看着代码觉得不舒服，一言不合就互相给对方扣上了一顶帽子，你的代码一点也不OO！这其实大可不必，OO是来解决一些问题的，但是它并不能解决全部问题，那么多static的类或者方法，它OO吗？OO只是解决我们问题的一种途径，也不是唯一的途径，千万不可把工具当目的。&lt;/p&gt;
&lt;h2 id=&quot;74-ddd带来的问题比解决的问题更多&quot;&gt;7.4 DDD带来的问题比解决的问题更多&lt;/h2&gt;
&lt;p&gt;DDD自从诞生之初就面临很多争议。DDD本身出发点非常好(&lt;strong&gt;软件核心复杂性应对之道&lt;/strong&gt;)。DDD是基于OO，在OO之上扩充了很多概念，希望借此最大程度的发挥出OO的优势。但是其扩充的概念太多了，而且千人千面，每个人心中的理解都不尽相同，而且可以说南辕北辙的都有，这就使得它&lt;strong&gt;非常难以在团队中达成理解上的共识&lt;/strong&gt;。也就导致实施落地上的种种困难，即使一开始落地了一部分，随着时间的推移，则会变得越来越难以为继，好像侧重点都跑到了我这么写到底符合DDD的思想吗？而对业务的关注的变成了二等公民，这简直是个灾难，这时候代码的可理解性就非常脆弱了。所以根据奥卡姆剃刀原则，剃掉它是最优的选择。&lt;/p&gt;
&lt;h1 id=&quot;8-总结&quot;&gt;8 总结&lt;/h1&gt;
&lt;p&gt;以上是笔者关于软件设计的一些思考过程：笔者认为其目标是避免软件的失控以及相关的途径措施，以及对一些常见到的一些概念的看法。如有不妥之处，欢迎来讨论。&lt;/p&gt;
&lt;h1 id=&quot;9-引用&quot;&gt;9 引用&lt;/h1&gt;
&lt;p&gt;本文首发于：&lt;a href=&quot;https://linianhui.github.io/talk/objective-and-approach-of-software-design/&quot; target=&quot;_blank&quot;&gt;https://linianhui.github.io/talk/objective-and-approach-of-software-design/&lt;/a&gt;&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot;/&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;git actually has a simple design, with stable and reasonably well-documented data structures. In fact, I&#x27;m a huge proponent of designing your code around the data, rather than the other way around, and I think it&#x27;s one of the reasons git has been fairly successful […] I will, in fact, claim that the difference between a bad programmer and a good one is whether he considers his code or his data structures more important. Bad programmers worry about the code. Good programmers worry about data structures and their relationships. &lt;a href=&quot;https://lwn.net/Articles/193245/&quot; target=&quot;_blank&quot;&gt;Message to Git mailing list&lt;/a&gt; &lt;a href=&quot;#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;

&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>