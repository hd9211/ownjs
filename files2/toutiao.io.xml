<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>4a8d148e17a3f6fad42a53e21757ecb7</guid>
<title>如何选择最适合你的分布式事务方案</title>
<link>https://toutiao.io/k/0rlsxms</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;之前我有一篇文章，介绍了分布式事务最经典的七种解决方案，这里我们从业务需求的角度，根据不同的业务场景，给出最适合的解决方案。&lt;/p&gt;&lt;p&gt;当我们采用服务/微服务架构，对业务进行分拆解耦后，原先在一个单体内，使用本地数据库保证ACID的数据修改，因为跨了多个服务，就不再适用了，就需要引入分布式事务来保证新的原子性。&lt;/p&gt;&lt;p&gt;由于分布式事务方案，无法做到ACID的保证，没有一种完美的方案，能够解决掉所有业务问题。因此在实际应用中，会根据业务的不同特性，选择最适合的分布式事务方案。&lt;/p&gt;&lt;h2&gt;业务分类&lt;/h2&gt;&lt;p&gt;下面是常见的几种业务分类，以及适合的解决方案介绍&lt;/p&gt;&lt;h3&gt;多个微服务组合成原子操作&lt;/h3&gt;&lt;p&gt;有一类业务场景是需要把多个微服务组合成原子操作：假设您有一个活动业务，用户点击领取按钮后，会领取一张优惠券，和一个月的会员。优惠券和会员分别属于不同的服务，需要都被调用，不希望出现一个服务调用成功，另一个因为网络或者其他故障导致没有成功。&lt;/p&gt;&lt;p&gt;这个场景适合可靠消息方案，可以使用rocketmq、rabbitmq等，发送给消息队列的消息，一定要等收到队列接收确认，再返回应用程序。&lt;/p&gt;&lt;h3&gt;本地事务+多个微服务组合为原子操作&lt;/h3&gt;&lt;p&gt;有一类业务与前一种业务情况类似，但有一些差别：假设您有一个新用户注册成功后，领取一张优惠券和一个月会员。如果注册不成功，不希望调用领取；只有注册成功才领取。&lt;/p&gt;&lt;p&gt;这种情况，适合本地消息方案，或者事务消息方案。这两种方案都能保证本地事务和消息的原子性。&lt;/p&gt;&lt;h3&gt;订单类对一致性要求较高的业务&lt;/h3&gt;&lt;p&gt;订单交易类业务，涉及资金、库存、优惠券等多个服务，完成一个订单，需要相关的各个服务组合成一个整体可回滚的事务。如果订单进行过程中金额先扣减，后续因为库存不够只能退款，把金额补偿加回来。在这个过程中用户看到了金额减少，又金额变回来，体验很差。一般这类业务都会先冻结资金，如果订单能成功，再扣减资金；不能成功，则解冻资金，这样能够让资金信息对用户更友好。&lt;/p&gt;&lt;p&gt;这种场景适合TCC方案，可以在TCC的Try中冻结资金，Confirm中扣减资金，Cancel中解冻资金&lt;/p&gt;&lt;h3&gt;一致性要求不高的可回滚业务&lt;/h3&gt;&lt;p&gt;如果业务对事务中的一致性要求不高，允许用户看到中间状态，例如用户的积分数据等。&lt;/p&gt;&lt;p&gt;这种模式适用SAGA模式，SAGA对比与TCC，只有正向操作和逆向补偿操作，会更加简单&lt;/p&gt;&lt;h3&gt;耗时较久的全局事务&lt;/h3&gt;&lt;p&gt;耗时较旧的全局事务适合可靠消息和SAGA，不适合TCC和XA，因为大多数的XA和TCC实现，为了方便用户灵活的定义事务，通常把事务的进度保存在应用程序，一旦事务进行中应用程序崩溃，无法往前进行下一步，只能回滚。&lt;/p&gt;&lt;p&gt;SAGA和可靠消息，把事务进度保存在数据库或消息系统中，任何一个组件临时的失败，如果重试成功，能够让事务继续。&lt;/p&gt;&lt;p&gt;其中如果整个事务是需要回滚的，那么适合SAGA，不需要回滚的，适合可靠消息&lt;/p&gt;&lt;h3&gt;并发度较低的业务&lt;/h3&gt;&lt;p&gt;如果业务并发度不高，事务又需要支持回滚，那么适合XA方案。XA方案，除了并发不高，也还需要本地数据库能支持XA接口。这个方案的优点是，使用上较简单，比较接近本地事务&lt;/p&gt;&lt;h2&gt;实践&lt;/h2&gt;&lt;p&gt;上面介绍完各种业务类型，以及适合的事务方案，通常情况下，您需要选择合适的开源项目来实施技术方案。在分布式事务领域，应用比较广泛的有DTM、SEATA、RocketMq&lt;/p&gt;&lt;p&gt;其中seata用Java开发，支持Java语言的接入，支持TCC、SAGA、XA、AT(类似XA，性能更高，但有脏回滚)&lt;/p&gt;&lt;p&gt;RocketMq用Java开发，支持各类语言的接入，仅支持可靠消息、事务消息模式&lt;/p&gt;&lt;p&gt;这里重点介绍DTM，它用GO开发，基于HTTP协议，支持多种语言接入，支持TCC、SAGA、XA、可靠消息、事务消息模式。&lt;/p&gt;&lt;h3&gt;可靠消息例子&lt;/h3&gt;&lt;p&gt;我们拿第一个最简单的业务场景“多个微服务组合成原子操作”来看DTM是如何解决问题的&lt;/p&gt;&lt;p&gt;假设领取优惠券和会员的处理函数分别是：ObtainCoupon和ObtainVip，那么处理领取逻辑的处理函数（用Go做示例）只用这么写：&lt;/p&gt;&lt;pre&gt;    msg := dtmcli.NewMsg(DtmServer,gid).&lt;br/&gt;        Add(Busi+&lt;span&gt;&quot;/ObtainCoupon&quot;&lt;/span&gt;, req).&lt;br/&gt;        Add(Busi+&lt;span&gt;&quot;/ObtainVip&quot;&lt;/span&gt;, req)&lt;br/&gt;    err := msg.Submit()&lt;/pre&gt;&lt;p&gt;dtm收到客户端提交的消息后，会保证ObtainCoupon和ObtainVip被调用，如果任何一个出现失败，会不断重试，直到成功。&lt;/p&gt;&lt;p&gt;假如您采用的是rocketmq方案，那么您需要做以下几个步骤：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;发送&quot;领取&quot;的消息给队列&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;消费&quot;领取”的消息，然后调用ObtainCoupon和ObtainVip，然后确认消息已成功消费&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;对比dtm和rocketmq的方案，dtm仅需要简单的几行代码即可（dtm也提供http的接口，可以用任何语言直接发http请求），清晰简单。而rocketmq方案，涉及较多队列的知识，要做的工作较多&lt;/p&gt;&lt;h3&gt;SAGA例子&lt;/h3&gt;&lt;p&gt;假设我们有一个积分兑换课程的业务，一方面积分不属于非常核心的资产，中间状态允许用户看到，另一方面兑换课程可能出现课程已拥有权限，则需要回滚，因此该业务属于“一致性要求不高的可回滚业务“。&lt;/p&gt;&lt;p&gt;我们采用SAGA方案来解决这个问题，来看看DTM的解决方式，代码大致如下：&lt;/p&gt;&lt;pre&gt;    saga := dtmcli.NewSaga(DtmServer, gid).&lt;br/&gt;        Add(Busi+&lt;span&gt;&quot;/AdjustIntegral&quot;&lt;/span&gt;, Busi+&lt;span&gt;&quot;/AdjustIntegralRevert&quot;&lt;/span&gt;, req).&lt;br/&gt;        Add(Busi+&lt;span&gt;&quot;/AuthCourse&quot;&lt;/span&gt;, Busi+&lt;span&gt;&quot;/AuthCourseRevert&quot;&lt;/span&gt;, req)&lt;br/&gt;    saga.WaitResult = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    err := saga.Submit()&lt;/pre&gt;&lt;p&gt;dtm收到客户端提交的saga事务之后，会按顺序调用AdjustIntegral，AuthCourse，如果函数返回错误要求回滚，dtm则会调用AuthCourseRevert，AdjustIntegralRevert进行回滚。&lt;/p&gt;&lt;p&gt;如果您没有采用dtm方案，那么您可以采用SEATA的SAGA，涉及比较多的背景知识，接入较复杂。&lt;/p&gt;&lt;h3&gt;更多的例子&lt;/h3&gt;&lt;p&gt;您可以访问https://github.com/yedf/dtm ，里面有很多的分布式事务例子&lt;/p&gt;&lt;h3&gt;多种模式并存&lt;/h3&gt;&lt;p&gt;如果您的实际项目，涉及分布式事务的场景较多，一种事务模式，可能并不满足需求，可能需要使用SEATA+Rocketmq，接入以及维护成本较高。而DTM提供了一站式的解决方案，对常见的各种业务场景都提供了便捷的支持。&lt;/p&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;dtm作为一个新兴起的分布式事务框架，提供了强大的功能，以及简单易用的接口，极大的简化了微服务架构下，分布式事务的使用。&lt;/p&gt;&lt;p&gt;下面是dtm与seata的主要特性对比：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;center&quot;&gt;特性&lt;/th&gt;&lt;th align=&quot;center&quot;&gt;DTM&lt;/th&gt;&lt;th align=&quot;center&quot;&gt;SEATA&lt;/th&gt;&lt;th align=&quot;center&quot;&gt;备注&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;支持语言&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;Golang、python、php、c# 及其他&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;Java&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;dtm可轻松接入一门新语言&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;异常处理&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;子事务屏障自动处理&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;手动处理&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;dtm解决了幂等、悬挂、空补偿&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;TCC事务&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;✓&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;✓&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;XA事务&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;✓&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;✓&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;AT事务&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;✗&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;✓&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;AT与XA类似，性能更好，但有脏回滚&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;SAGA事务&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;简单模式&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;状态机复杂模式&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;dtm的状态机模式在规划中&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;事务消息&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;✓&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;✗&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;dtm提供类似rocketmq的事务消息&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;通信协议&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;HTTP&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;dubbo等协议，无HTTP&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;dtm后续将支持grpc类协议&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;dtm的项目地址为https://github.com/yedf/dtm ，欢迎大家访问、试用、点亮star&lt;/p&gt;&lt;p&gt;点击左下角的“阅读原文”，可以直接访问项目&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>033b1519424b173823614947388a6050</guid>
<title>谷歌工程师是怎么写工程设计文档的？</title>
<link>https://toutiao.io/k/kd72la1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;blockquote&gt;&lt;p&gt;一份好的设计文档需要提供清晰的问题描述、整体的概要设计、涵盖各个细节的详细设计等。这篇有趣的小短文通过一个简单的小例子介绍了谷歌工程师是怎么写设计文档的。原文：How do I write engineering design docs in Google: an example&lt;span&gt;[1]&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-line=&quot;2&quot;&gt;写文档是我在谷歌学到的最重要的技能之一。在谷歌，文档被用来讨论问题、作为真实的信息源、组织知识。在我工作过的其他公司中，没有一家对如何使用文档进行协作有这样深刻的理解。这篇文章就是关于我在谷歌如何写设计文档的一个例子，这是一个真实的项目，用于在新冠疫情期间控制健身房现场人数。即使在新冠疫情结束后不需要预约健身房了，也可以访问github上的源代码&lt;span&gt;[2]&lt;/span&gt;。为了让这篇文章更有趣，现在每个人都可以在谷歌文档&lt;span&gt;[3]&lt;/span&gt;上进行评论，而且谷歌文档的格式也比Medium支持的要好。&lt;/p&gt;&lt;h1 data-line=&quot;4&quot;&gt;问题描述&lt;/h1&gt;&lt;p data-line=&quot;5&quot;&gt;在新冠疫情期间，要求健身房控制现场会员总数，要求会员在去健身房之前先在网站上预订。预约需要提前两天，从午夜开始。例如，2021年04月01日的预订将在当地时间2021年03月30日00:00 AM开放。&lt;/p&gt;&lt;p data-line=&quot;7&quot;&gt;这个健身房里的游泳池提供的位置非常有限。我尝试了好几次，都没能预定到早上6点的时间，后来工作人员告诉我，由于需求量很大，必须在午夜预订。但是熬夜到半夜会打乱我的生物钟，所以我没法接受。而且我觉得雇人做这件事也很不好，因为在内心深处，我认为早睡是健康高效生活方式的核心习惯，用金钱剥夺别人的好习惯是不道德的。在被告知没有别的办法之后，我决定写一个程序来为我做预订。&lt;/p&gt;&lt;p data-line=&quot;9&quot;&gt;我个人认为用机器人来做工作是对别人的不公平，所以我对这个决定一点儿也没感到自豪。相反，我认为健身房应该提高一些场地的价格。但这显然超出了设计文档的范围，而且是非常主观的想法。&lt;/p&gt;&lt;h1 data-line=&quot;11&quot;&gt;需求&lt;/h1&gt;&lt;h4 data-line=&quot;17&quot;&gt;不在考虑范围内&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;只提前1或2天预订，或当天预订&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;容忍操作系统或网络问题&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在预约服务器停止运行后还要能够工作&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在网站结构（HTML）改变后，还要能够工作&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-line=&quot;23&quot;&gt;概要设计&lt;/h1&gt;&lt;h4 data-line=&quot;24&quot;&gt;浏览器自动化 vs 模拟请求&lt;/h4&gt;&lt;p data-line=&quot;25&quot;&gt;浏览器自动化是指通过程序来控制真实的浏览器，并在GUI上自动化操作。模拟请求是指让程序通过HTTP与服务器交互，这个程序就像是一个Web浏览器（而不是控制一个浏览器）。&lt;/p&gt;&lt;p data-line=&quot;27&quot;&gt;考虑到下面几点，我认为浏览器自动化比模拟请求更好：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;[优点] 浏览器自动化启动了一个真实的浏览器实例，所以我们知道程序运行时发生了什么，它使调试和开发更加容易。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;[优点] 网站需要javascript加载控件，而这较难通过编程实现，可能需要控制一些渲染引擎。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;[缺点] 浏览器自动化依赖于HTML结构，而模拟请求依赖于HTTP API，API相对稳定，不太可能改变。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-line=&quot;32&quot;&gt;显然利大于弊。&lt;/p&gt;&lt;h4 data-line=&quot;34&quot;&gt;系统概述&lt;/h4&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4034285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0UBKVBk1oAf4M5U2ewT4Vxh0VpRvYWjkAFgHazpibLgYaWx76iaGLPoOM5FZia3BqdOQBUo5S56IYpuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/p&gt;&lt;p data-line=&quot;37&quot;&gt;Selenium&lt;span&gt;[4]&lt;/span&gt;是一个提供浏览器自动化解决方案的软件库。我们的程序将用Python编写，并通过Python API控制Selenium，Selenium则通过它的Gecko驱动程序控制Firefox。&lt;/p&gt;&lt;p data-line=&quot;39&quot;&gt;Caffeinate&lt;span&gt;[5]&lt;/span&gt;是一个阻止操作系统进入睡眠状态的程序。如果系统休眠，程序将无法在半夜运行。&lt;/p&gt;&lt;h1 data-line=&quot;41&quot;&gt;详细设计&lt;/h1&gt;&lt;h4 data-line=&quot;42&quot;&gt;用户输入&lt;/h4&gt;&lt;p data-line=&quot;43&quot;&gt;用户名、密码、日期等都是从命令行参数中输入的。&lt;/p&gt;&lt;h4 data-line=&quot;45&quot;&gt;重试&lt;/h4&gt;&lt;p data-line=&quot;46&quot;&gt;程序将捕获所有异常（页面未加载等）并重试100次直到预订成功，成功的预订通过确认DOM元素进行识别。&lt;/p&gt;&lt;h4 data-line=&quot;48&quot;&gt;浏览器选择&lt;/h4&gt;&lt;p data-line=&quot;49&quot;&gt;我们需要使用主流浏览器之一。我考虑并测试了Chrome、Firefox和Safari，Safari和Chrome都需要额外的步骤来使用相应的Selenium驱动程序，所以我选择了Firefox。它也需要一些来自操作系统设置的认证，但只需要在最初几次确认就可以了。&lt;/p&gt;&lt;h4 data-line=&quot;51&quot;&gt;日志&lt;/h4&gt;&lt;p data-line=&quot;52&quot;&gt;程序自动执行浏览器操作，就像是由用户发起的一样。本质上，它将在循环中执行以下操作：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;查找某个元素&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对元素进行操作（输入文本、选择选项或单击）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;等待预期结果，然后返回1&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-line=&quot;57&quot;&gt;因此，每个日志记录将有两项内容：&lt;/p&gt;&lt;p data-line=&quot;61&quot;&gt;这样的日志记录将使调试变得容易。&lt;/p&gt;&lt;h4 data-line=&quot;63&quot;&gt;保持电脑持续运行&lt;/h4&gt;&lt;p data-line=&quot;64&quot;&gt;如果操作系统在程序启动到午夜之间进入休眠状态，则程序在午夜就无法运行了，Caffeinate可以防止这种情况发生。它是一个命令行工具，我们在Python中把它作为子进程启动：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;subprocess&lt;/span&gt;&lt;span&gt;.Popen&lt;/span&gt;(&lt;span&gt;[‘caffeinate’, ‘-d’, ‘-w’, ‘%d’ % os.getpid()]&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-line=&quot;69&quot;&gt;定位控制&lt;/h4&gt;&lt;p data-line=&quot;70&quot;&gt;Selenium提供了一组方法&lt;span&gt;[6]&lt;/span&gt;来访问特定的DOM元素，其中xpath的表达能力最强。因此，我们将使用find_element_by_xpath来定位DOM元素，如按钮、输入框等。&lt;/p&gt;&lt;p data-line=&quot;72&quot;&gt;只要有可能，我们宁愿依赖DOM的内部文本来定位它们。相对于DOM结构和属性（类名等），内部文本的优势并不是说它不太可能更改，而是如果它们发生更改，更容易调试。当然，我们必须对DOM结构做一些假设，比如我们需要点击class=&#x27;control&#x27;分区（div）下的class=&#x27;logon&#x27;的第二个按钮。&lt;/p&gt;&lt;h4 data-line=&quot;74&quot;&gt;等待页面加载&lt;/h4&gt;&lt;p data-line=&quot;75&quot;&gt;在发送每个HTTP请求后，程序需要等待加载页面（通常是2~5秒，是的，这个站点很慢）。这是由WebDriverWait API&lt;span&gt;[7]&lt;/span&gt;完成的。例如，以下代码将等待120秒，直到&amp;lt;button ng-reflect-router-link= &#x27; /Appointments &#x27; &amp;gt;被加载并成为可被点击的按钮。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;book_btn = WebDriverWait(driver, &lt;span&gt;120&lt;/span&gt;).&lt;span&gt;until&lt;/span&gt;(EC.element_to_be_clickable((By.XPATH, “/&lt;span&gt;/button[@ng-reflect-router-link=’/&lt;/span&gt;Appointments’]”)))&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-line=&quot;80&quot;&gt;如果按钮在120秒内加载失败，将引发异常。&lt;/p&gt;&lt;h4 data-line=&quot;82&quot;&gt;更多的实现细节&lt;/h4&gt;&lt;p data-line=&quot;83&quot;&gt;&lt;span&gt;选择正确的日期。&lt;/span&gt;假设我们想预定4月14日，我们无法在预订日历上选择文本为‘14’的单元格，因为3/14的单元格有类似的属性。当前月份的单元格必须包含有class cal-in-month。&lt;/p&gt;&lt;p data-line=&quot;85&quot;&gt;&lt;span&gt;调整月份。&lt;/span&gt;预订日历显示的是当月的当天，而不是我们打算预订的月份。如果两天后就是下个月，这就会有问题。因此，我们必须添加另一个步骤实现在这个边界情况下选择正确的月份&lt;/p&gt;&lt;h1 data-line=&quot;87&quot;&gt;操作流程&lt;/h1&gt;&lt;p data-line=&quot;88&quot;&gt;假设我想预订4月14日的游泳池，需要在4月11日的任意时间运行以下命令：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;python&lt;/span&gt; &lt;span&gt;book&lt;/span&gt;&lt;span&gt;.py&lt;/span&gt; &lt;span&gt;--username&lt;/span&gt; &lt;span&gt;xxxxxx&lt;/span&gt; &lt;span&gt;--password&lt;/span&gt; &lt;span&gt;xxxxxx&lt;/span&gt; &lt;span&gt;--day&lt;/span&gt; 14 &lt;span&gt;--time&lt;/span&gt; ‘5&lt;span&gt;:00&lt;/span&gt; &lt;span&gt;PM&lt;/span&gt;’ &lt;span&gt;--sport&lt;/span&gt; &lt;span&gt;small_pool&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-line=&quot;93&quot;&gt;程序将每休眠1秒钟被唤醒检查一次时间，这个检查不会有任何明显的CPU消耗。Caffeinate将阻止操作系统进入睡眠状态，直到午夜时分。&lt;/p&gt;&lt;p data-line=&quot;95&quot;&gt;在4月12日午夜，它将启动Firefox浏览器，并自动完成预订。之后，Caffeinate进程和主进程都将退出，操作系统将正常进入休眠状态。&lt;/p&gt;&lt;p data-line=&quot;97&quot;&gt;4月12日的早上，我会看一下日志，看看预订是否成功。&lt;/p&gt;&lt;p data-line=&quot;97&quot;&gt;&lt;/p&gt;&lt;h4 data-line=&quot;99&quot;&gt;一个有趣的事实&lt;/h4&gt;&lt;p data-line=&quot;100&quot;&gt;竞争确实非常激烈，通常在第1分钟预约就结束了。每个时段总共只有6个名额，毫无疑问，在早上6点预订是不可能的。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;References:&lt;/span&gt;&lt;br/&gt;[1] https://luanjunyi.medium.com/how-do-i-write-engineering-design-docs-in-google-an-example-f19febe0297c&lt;br/&gt;[2] https://github.com/luanjunyi/smac_booking_robot&lt;br/&gt;[3] https://docs.google.com/document/d/1NRj-NdDW_wD1-GwZAJc-Nfrbq8xMiX1Hggrzguh-fjY/edit?usp=sharing&lt;br/&gt;[4] https://www.selenium.dev/&lt;br/&gt;[5] https://ss64.com/osx/caffeinate.html&lt;br/&gt;[6] https://selenium-python.readthedocs.io/locating-elements.html&lt;br/&gt;[7] https://selenium-python.readthedocs.io/waits.html?highlight=WebDriverWait#explicit-waits&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;你好，我是俞凡，在Motorola做过研发，现在在Mavenir做技术总监，对通信、网络、后端架构、云原生、DevOps、CICD、区块链、AI等技术始终保持着浓厚的兴趣，平时喜欢阅读、思考，相信持续学习、终身成长，欢迎一起交流学习。&lt;br/&gt;微信公众号：DeepNoMind&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ee46e8f07c7b777c89ba6df640ea4b74</guid>
<title>做了一个简单但是很有效的优化，怎样表达出它的价值？</title>
<link>https://toutiao.io/k/m5kpcap</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; role=&quot;option&quot; title=&quot;链接&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot;&gt;
                                            
                                                                                    &lt;span class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUzNjAxODg4MQ==&amp;amp;action=getalbum&amp;amp;album_id=2042396491880677377#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2042396491880677377&quot; data-tag_source=&quot;1&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;#&lt;/span&gt;职场经验&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span class=&quot;article-tag-card__right&quot;&gt;&lt;span class=&quot;weui-hidden_abs&quot;&gt;,&lt;/span&gt;2个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;qqmusic class=&quot;js_editor_qqmusic qqmusic_iframe js_uneditable custom_select_card&quot; musicid=&quot;4830435&quot; mid=&quot;001fsscL43iTxe&quot; albumurl=&quot;https://y.gtimg.cn/music/photo_new/T002R68x68M000002SKgJj2Sr3Ea.jpg&quot; audiourl=&quot;http://isure6.stream.qqmusic.qq.com/C200001BXZyP20c01W.m4a?guid=2000001731&amp;amp;vkey=6F8A6945355F4FDE765C7709EA297D71CE450A0C54382EC70D584B602DAFC1A090DA0FDEB18E29259E95203DAC883D80C492D7D2C55FBA2E&amp;amp;uin=&amp;amp;fromtag=50&quot; music_name=&quot;笑红尘&quot; singer=&quot;陈淑桦 - 爱的进行式&quot; play_length=&quot;252&quot; src=&quot;/mp/readtemplate?t=app_editor/music&amp;amp;singer=%E9%99%88%E6%B7%91%E6%A1%A6%20-%20%E7%88%B1%E7%9A%84%E8%BF%9B%E8%A1%8C%E5%BC%8F&amp;amp;music_name=%E7%AC%91%E7%BA%A2%E5%B0%98&amp;amp;albumurl=https%3A%2F%2Fy.gtimg.cn%2Fmusic%2Fphoto_new%2FT002R68x68M000002SKgJj2Sr3Ea.jpg&amp;amp;musictype=1&quot; musictype=&quot;1&quot; otherid=&quot;001fsscL43iTxe&quot; albumid=&quot;002SKgJj2Sr3Ea&quot; jumpurlkey=&quot;&quot; data-pluginname=&quot;insertaudio&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;公司的某个核心业务由于业务量迅猛增长遇到稳定性问题，临危受命，把一个经常出故障造成资金损失的系统，经过架构优化变更一个有条不紊运行的系统。那自己不用多说什么，业绩都看得见。而一个系统本身业务量和增长量不大，做一个优化，实际的效果是解决系统的隐患。而由于这个优化系统从而就没有出现这些问题，效果不是那么显而易见的。这时候，要怎样表达出它的价值呢？&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;具体场景描述&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;现在有一个系统，平时的业务量一天交易量(TPS)十万左右，属于一个相对普通的项目。一听起来就输了气场，不像现在各种演讲和文章里的动辄千亿级别的项目，不管做了什么优化，都能吸引眼球，因为人家做的数据级别业界也没有几个。本身的业务也很简单，就是一个通道类系统，做个数据透传。&lt;/section&gt;&lt;section&gt;本次优化的目标是通过流程标准化和工具化，提升运维效率。目标明确了那就根据目标来梳理：&lt;/section&gt;&lt;p&gt;1&amp;gt;为了从根本上避免&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485786&amp;amp;idx=1&amp;amp;sn=713472ac7aa83b8b91a3012b2b8a7be8&amp;amp;chksm=fafde3f4cd8a6ae294bd90fcc390786fb7394f3bc003c4df7dfa7c7944736ad0be2497f80aac&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《服务运行过程中磁盘坏道引起的思考》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《服务运行过程中磁盘坏道引起的思考》&lt;/a&gt;里提到的问题，为了避免将应用部署到有问题的服务器上，同时还要解决手动进行检查的繁琐和容易疏漏。服务发布或者重启时，需要加上一些前置检查，比如：cpu、内存等系统属性检查、安全防御进程和监控进程等必要辅助进程是否存活的检查。要做的事情就是在发布平台上加上前置脚本即可。&lt;/p&gt;&lt;p&gt;2&amp;gt;应用还有其他手动运维操作，要说明这个先来看一下简单的架构，如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3315669947009841&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicPLD1gkwtXsFrj1OlniadGYSw7ichS1pOPhia8ESdQ4QyGUQM5ohricGGjYqWlvf05p5sib4Fq4Es7oZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1321&quot;/&gt;&lt;/p&gt;&lt;section&gt;作为一个通道系统，应用功能是上游接收RPC请求，发送到MQ中。MQ收到消息进行处理后，会异步返回处理结果。&lt;/section&gt;&lt;section&gt;从应用角度来看，需要做三种控制：&lt;/section&gt;&lt;section&gt;1) 接收请求控制，一旦应用有问题或者功能灰度上线，需要控制接收请求流量。这个因为我们使用了dubbo，所以可以通过dubbo的服务治理平台来管控，无需开发。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;2) MQ处理结果消息接收，这个MQ客户端提供这个功能接口，&lt;span&gt;可以通过对单台机器调用此接口来进行接收的启动或停止，这就是上面图中标红的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;消息消费开关&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;因为这个服务是主备类应用，主应用要打开开关，备应用不能打开开关。所以现有功能是将这个开关是否打开放到配置文件里控制。如果需要手动调整，直接调用将这个接口封装成的http接口。&lt;/section&gt;&lt;section&gt;现在的逻辑是有运维操作风险的。如果主备切换了，或者主机器有故障，启动时不能打开消费开关，则需要人工处理，如果人工处理不及时或者出错，则会造成运维事故。&lt;/section&gt;&lt;section&gt;3) A的MQ集群有N台机器，如果MQ出现问题或者积压了，需要进行运维处理，可以暂时停用这台机器，等它恢复或者将消息处理完。就是图中标红的&lt;strong&gt;&lt;span&gt;MQ发送开关&lt;/span&gt;&lt;/strong&gt;。目前都是通过人工发现和处理的。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;优化方案&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3315669947009841&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicPLD1gkwtXsFrj1OlniadGYSw7ichS1pOPhia8ESdQ4QyGUQM5ohricGGjYqWlvf05p5sib4Fq4Es7oZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1321&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;重点来看标红的两个开关的优化方案。&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;消息消费开关&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;这个开关控制的是本机的消费状态。优化目标是将调用http接口的紧急操作EOP转变成流程可把控、可审核的标准操作SOP。当我分析需要运维的场景时，我发现自己并不需要消息消费开关，只需要一个集中存储的配置告诉我当前哪个是主服务器。&lt;/section&gt;&lt;section&gt;&lt;span&gt;在机器正常发布时，或者主备切换，或者主机器有故障时，使用主服务器配置开关怎么来进行处理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果机器是完好的，那主机房服务器，就该完整提供服务，消费消息。如果是备用机器服务器，就不承接流量，不消费消息。如果机器是故障的，那就该停掉服务，而不只是消费开关。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6717019133937563&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9ciadM62WmDAMluaebibIibpZ47vGMpwR9MSRX71fX7l1nRETmbtWUp9vv1ySckERSAjMe2kUVgTFRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;993&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;MQ发送开关&lt;br/&gt;&lt;/section&gt;&lt;section&gt;消息消费开关控制的是本机。MQ发送开关判断是连接的MQ是否有能力把消息正确的发送给对方。有这个能力就用，没有这个能力就改用其他MQ。所以实际配置的并不是某台MQ是否发送消息的配置，而是需要一个整体的配置，表明哪些MQ可以发送消息。&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4208955223880597&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9ciadM62WmDAMluaebibIibpZCYN776BSQ2cA1H7jmuibgNIh3LHbicEiaJqgKNbGyJQYGzjhOuBRWA8eg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1340&quot;/&gt;&lt;/p&gt;&lt;section&gt;与上面的是否消费判断不同，上面用的主配置，主备切换通过的是公司或者部门整体的一个控制。但是MQ集群里可用的MQ需要业务自己来判断的。判断的指标是MQ是否可用和MQ是否有消息积压。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;最好理想的情况是每次发送消息前都做一个判断，使用目前状况两行，积压最小的来发送消息。但是每次发送都判断会极大的增加请求耗时。并且这样还违背了架构优化的一个软性原则：&lt;span&gt;&lt;strong&gt;现有架构可以稳定支撑业务时，优化不要改变核心逻辑，只在外围做事情。&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;所以最好是使用旁路的检测任务，定时检测&lt;span&gt;MQ是否可用和MQ是否有消息积压。&lt;/span&gt;MQ的可能状态就有：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;1&amp;gt;正常&lt;/section&gt;&lt;section&gt;2&amp;gt;手动停用&lt;/section&gt;&lt;section&gt;3&amp;gt;检测不可用&lt;/section&gt;&lt;section&gt;4&amp;gt;检测消息积压&lt;br/&gt;&lt;/section&gt;&lt;section&gt;这四种，手动停用的优先级最高。检测不可用优先级高于检测消息积压。据此，可确定有限状态机的状态流转。由于状态流转图用画图表示，很乱。这里用图表表示：&lt;/section&gt;&lt;table resolved=&quot;&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;状态&lt;/th&gt;&lt;th&gt;可转换状态&lt;/th&gt;&lt;th&gt;转换条件&lt;/th&gt;&lt;th&gt;触发方式&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td rowspan=&quot;3&quot;&gt;正常&lt;br/&gt;&lt;br/&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;手动停用&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;界面操作审核通过后生效&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;手动触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot;&gt;探测不可用&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;检测实际这台MQ实际状态为不可用 &amp;amp; 状态正常的MQ数&amp;gt;最小正常数&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;任务触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot;&gt;探测超过积压阈值&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;检测实际这台MQ实际状态为可用 &amp;amp; 其他MQ状态均为正常 但 队列积压超过阈值&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;任务触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;手动停用&lt;/td&gt;&lt;td&gt;正常&lt;/td&gt;&lt;td&gt;&lt;p&gt;界面操作审核通过后生效&lt;/p&gt;&lt;/td&gt;&lt;td&gt;手动触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&quot;2&quot;&gt;探测不可用&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;正常&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;检测实际这台MQ实际状态为可用且队列积压不超过阈值&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;任务触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot;&gt;探测超过积压阈值&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;检测实际这台MQ实际状态为可用但队列积压超过阈值&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;任务触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&quot;2&quot;&gt;探测超过积压阈值&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;正常&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;检测实际这台MQ实际状态为可用且队列积压不超过阈值&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;任务触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot;&gt;探测不可用&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;检测实际这台MQ实际状态为不可用 &amp;amp; 状态正常的MQ数&amp;gt;最小正常数&lt;/td&gt;&lt;td colspan=&quot;1&quot;&gt;任务触发&lt;br/&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;这里有个最小正常数判断，这是一个功能熔断值。&lt;span&gt;&lt;strong&gt;熔断功能是旁路的标配。&lt;/strong&gt;&lt;/span&gt;熔断值就是就算探测这个功能有问题，也因为这个熔断值不会影响正常业务。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;价值表达&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;做了不说等于0。&lt;/section&gt;&lt;section&gt;我和很多人一样，喜欢埋头干活。但是做了一些事情，特别是优化，一定需要跟很多人沟通。最好拉会让所有和优化系统有关的其他系统负责人一起评审。第一，专家可以提供更好的思路，让优化更合理。第二，确保优化不影响到其他系统。第三，让更多的人了解做这件事情的目的意义，将来维护的人也知道做这件事情的初衷，便于维护。第四，自己做的优化，其他系统可能也需要做，只是之前没有想到或者没有时间把细节想好，这个评审可以帮助他们。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>33fb581c69b7c822bf192c3a190c407d</guid>
<title>后端程序员的 Vue 超简单入门笔记</title>
<link>https://toutiao.io/k/75h4wyl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI0MzA2OTc4MQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwth5nBzNr9kZshQ25yhLz08JicGiaeuWY5k8z6JHS4KYxQ2zp2lU9mjSC6PsvBlib658u3CnrSQsuCzAg/0?wx_fmt=png&quot; data-nickname=&quot;码农UP2U&quot; data-alias=&quot;&quot; data-signature=&quot;关于 Java、PHP、其他编程语言……或安全、或码农、或技术、或总结！学习交流，共同进步！码农 up to you，码农UP2U!&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;这样早期文章&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.335423197492163&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwtiaKiaWOk8CSxJnLtLYvv1GXotJSmNlQxUoA3pQn1SddkHeSC68228bbsKHah9SAPXtKkzAL5jtqQ3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;638&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        现在的各种开源项目中使用 Vue 的越来越多了，作为一个后端程序员不会点 Vue 也都玩不转了。所以抽空学习了一下 Vue 的简单用法，整理成笔记，方便有需要的同学一起学习。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        Vue 是一个前端的框架，被称作是 渐进式 JavaScript 框架。在进入 Vue 的官网时即可看到，上面图的就是从 Vue 官网复制的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        什么是 渐进式 框架，这里我们引用官网的原文来看，原文如下：&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;162&quot; data-source-title=&quot;https://cn.vuejs.org/v2/guide/&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%3Cp%3EVue%26nbsp%3B(%E8%AF%BB%E9%9F%B3%26nbsp%3B%2Fvju%CB%90%2F%EF%BC%8C%E7%B1%BB%E4%BC%BC%E4%BA%8E%26nbsp%3Bview)%26nbsp%3B%E6%98%AF%E4%B8%80%E5%A5%97%E7%94%A8%E4%BA%8E%E6%9E%84%E5%BB%BA%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E7%9A%84%E6%B8%90%E8%BF%9B%E5%BC%8F%E6%A1%86%E6%9E%B6%E3%80%82%E4%B8%8E%E5%85%B6%E5%AE%83%E5%A4%A7%E5%9E%8B%E6%A1%86%E6%9E%B6%E4%B8%8D%E5%90%8C%E7%9A%84%E6%98%AF%EF%BC%8CVue%26nbsp%3B%E8%A2%AB%E8%AE%BE%E8%AE%A1%E4%B8%BA%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A%E9%80%90%E5%B1%82%E5%BA%94%E7%94%A8%E3%80%82Vue%26nbsp%3B%E7%9A%84%E6%A0%B8%E5%BF%83%E5%BA%93%E5%8F%AA%E5%85%B3%E6%B3%A8%E8%A7%86%E5%9B%BE%E5%B1%82%EF%BC%8C%E4%B8%8D%E4%BB%85%E6%98%93%E4%BA%8E%E4%B8%8A%E6%89%8B%EF%BC%8C%E8%BF%98%E4%BE%BF%E4%BA%8E%E4%B8%8E%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%88%96%E6%97%A2%E6%9C%89%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88%E3%80%82%E5%8F%A6%E4%B8%80%E6%96%B9%E9%9D%A2%EF%BC%8C%E5%BD%93%E4%B8%8E%E7%8E%B0%E4%BB%A3%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7%E9%93%BE%E4%BB%A5%E5%8F%8A%E5%90%84%E7%A7%8D%E6%94%AF%E6%8C%81%E7%B1%BB%E5%BA%93%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8%E6%97%B6%EF%BC%8CVue%26nbsp%3B%E4%B9%9F%E5%AE%8C%E5%85%A8%E8%83%BD%E5%A4%9F%E4%B8%BA%E5%A4%8D%E6%9D%82%E7%9A%84%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E6%8F%90%E4%BE%9B%E9%A9%B1%E5%8A%A8%E3%80%82%3C%2Fp%3E%22%2C%22digestLen%22%3A162%2C%22text%22%3A%22%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2F%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;https://cn.vuejs.org/v2/guide/&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;        Vue 可以作为整个前端开发的一部分，也可以作为一个整体。也就是说，可以使用 Vue 的部分功能来构建前端，也可以完全使用 Vue 来构建前端。大概就是这样的意思。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、Vue 的开始&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        Vue 的开始还是很方便的，只需要引入一个库文件 —— vue.js 即可开始。我们可以去 Vue 的官网下载，也可以通过 CDN 来直接引入 vue 都可以。这里我下载了 vue.min.js 文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        创建一个 HTML 文件，然后引入 vue.min.js 文件，接着实现一个简单的 Hello Vue 的程序。代码如下：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {{message}}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;vue.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Vue({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;el&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;#app&#x27;&lt;/span&gt;,  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            data: {     &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                message: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Hello Vue!&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        在上面的代码中，通过 &amp;lt;script src=&quot;vue.min.js&quot;&amp;gt; 引入了 vue 的库文件，然后通过 new Vue 来创建一个 Vue 的对象。其中 el 是 DOM 的 id，表示该 Vue 对象是针对该 DOM 中。在 data 中定义了值 “Hello Vue” 为 message 变量，然后在 id 为 app 的 div 标签中通过 插值表达式（使用 {{}} 插入的变量） 来输出 message 变量的值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        Vue 中的 el 和 data 是固定的写法，el 和一个标签进行关联，表示该 Vue 对象只和该标签关联，data 是用来定义变量使用的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        这样就构建了一个简单的 Vue 的 HTML 页面。Vue 内部完成了 DOM 的绑定操作，无需像 jQuery 那样获取 DOM 的操作。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、单向绑定&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        单向绑定的指令是 v-bind，它用在标签属性上面，通过它可以获取 data 中定义的变量的值。代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;v-bind:style&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;msg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;单向绑定&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;:style&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;msg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;单向绑定&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;vue.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Vue({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;el&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;#app&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;data&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__attr&quot;&gt;msg&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;color: blue;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        单向绑定可以时 v-bind 也可以省略 v-bind，但是注意，冒号不能省略。上面的代码中相当于给 style 设置了 color:blue 属性，运行效果如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2938388625592417&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwtgXC95rJPWvib8uswAPgAQGsQq9SLmNVc2O4XFvJ3MHHhSIE2NLeC582xymIQIGW9MEEc5RKumaoEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;422&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、双向绑定&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        双向绑定通过指令 v-model 来完成，下面的代码中，data 中的 keyword 会影响 div 中的两个 input 框，第二个 input 框使用的 v-model 指令，那么当改变第二个 input 框中的值时，同样会改变 data 中 keyword 的值；又由于改变了 data 中 keyword 的值，从而第一个 input 框的值也会随之改变。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {{keyword}}&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;:value&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;keyword&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;v-model&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;keyword&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;vue.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Vue({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;el&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;#app&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;data&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__attr&quot;&gt;keyword&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;test&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        运行如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3222748815165877&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwtgXC95rJPWvib8uswAPgAQGsWklUwh8eho8fmOAjQ5VN8ia56ia0D5SwoFNRFOX9Vbld1rvuAuNAqrBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;422&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        改变第二个 input 的值，如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.28708133971291866&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwtgXC95rJPWvib8uswAPgAQGsG56dOvZlcAg5ESZyib9AvCytj69vInkdZ3UoAjwtsQ478QV3LnXmViaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;418&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        可以看到，通过修改第二个 input 框的值，上面的值也跟着发生了改变。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、事件绑定&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        事件绑定是对事件的监听，可以通过 v-on 或 @ 指令来完成，代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;v-on:click&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;show()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;事件绑定1&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;button&lt;/span&gt; @&lt;span class=&quot;code-snippet__attr&quot;&gt;click&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;show()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;事件绑定2&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;vue.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Vue({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;el&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;#app&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;data&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__attr&quot;&gt;keyword&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;test&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;methods&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                show() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;show....&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        上面的代码中，通过 v-on 和 @ 将 Button 和 show() 方法进行绑定，输出如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5984251968503937&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwtgokPkhBF66gwrjZEgO9MVJw2WGLw7VicAkAAxh8XJEeaQUpm0EoGWAMpmpricJqIAiancPzwhrL8orA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;508&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        上面的代码中，在 Vue 对象中增加了 methods，在 methods 中可以用来定义方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、条件指令&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        条件指令使用 v-if 和 v-else 来完成，看如下代码：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;v-model&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ok&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;v-if&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ok&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;选中了&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;v-else&lt;/span&gt;&amp;gt;&lt;/span&gt;没有选中&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;vue.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Vue({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;el&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;#app&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;data&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__attr&quot;&gt;ok&lt;/span&gt;: &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        上面的代码中，通过 v-model 和 ok 来进行双向绑定，然后当改变 checkbox 的选中状态时，v-if 和 v-else 会自动改变文字描述。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;六、循环指令&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    循环指令使用 v-for，它可以用来遍历数组从而渲染一个列表，看如下代码：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;v-for&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;(user, index) in userList&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            {{index+1}} -- {{user.name}} -- {{user.age}}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;vue.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Vue({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;el&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;#app&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;data&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__attr&quot;&gt;userList&lt;/span&gt;: [&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    {&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;张三&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;age&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt;},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    {&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;李斯&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;age&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;30&lt;/span&gt;},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                ]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        上面的代码中 index 是一个循环的计数从 0 开始，然后循环 userList Json 数组，输出如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.24876847290640394&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwtgokPkhBF66gwrjZEgO9MVJhcJq9KfbkoftBicBicyHU15OGJg2HUKSzUU5c9uqtiaQpWhQo78gDCT0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;406&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;七、Vue 生命周期&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        Vue 的生命周期，就是创建、销毁 Vue 对象时会自动执行的几个函数，Vue 的官网提供了一个生命周期图，该图的地址如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;apache&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;https&lt;/span&gt;://cn.vuejs.org/v2/guide/instance.html#%E7&lt;span class=&quot;code-snippet__number&quot;&gt;%94&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;%9&lt;/span&gt;F%E5&lt;span class=&quot;code-snippet__number&quot;&gt;%91&lt;/span&gt;%BD%E5&lt;span class=&quot;code-snippet__number&quot;&gt;%91&lt;/span&gt;%A8%E6&lt;span class=&quot;code-snippet__number&quot;&gt;%9&lt;/span&gt;C&lt;span class=&quot;code-snippet__number&quot;&gt;%9&lt;/span&gt;F%E5&lt;span class=&quot;code-snippet__number&quot;&gt;%9&lt;/span&gt;B%BE%E7%A4%BA&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        我这里从官网复制过来，如下图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;2.5325&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwtiaOCEAhZS93LrsrviaXhwCyPfPgLE6IAmOwUE7jibT66lEzGm6ufEw7DjbDNGSf73HkjVBONYuicpSDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        在上图中可以看到，不同的生命周期有不同的方法会被执行，比如 created、updated、destroyed 等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        这里写代码进行测试：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {{msg}}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;vue.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Vue({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;el&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;#app&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;data&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__attr&quot;&gt;msg&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;hello&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            created() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;debugger&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;created...&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mounted() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;debugger&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;mounted...&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        在代码的 created 和 mounted 两处放入了 debugger 命令，打开 F12 的调试窗口时，当执行到 debugger 位置处时，会自动触发断点从而断下，首先断在 created 方法中，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8129952456418383&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwtgokPkhBF66gwrjZEgO9MVJmtyYQoialfEoIo0IDJ6OVic4qCjsgXrFfOkbkb7auQzIh7SUPvJw2ytw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;631&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        从上图可以看出，此时的插值表达式并没有进行实际的替换，按 F8 让页面继续渲染，会断在 mounted 方法中，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.829073482428115&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwtgokPkhBF66gwrjZEgO9MVJh2p6P0cWCdZViamo42ktmKzndLwLUK9s8ZmgOZDLLzUCXTYhgLZgkVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;626&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        此时可以看到，插值表达式已经变成了 hello。这样可以清楚的看到不同的生命周期会触发不同的方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;八、axios 和 vue-resource 库&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        axios 是基于 Promise 的 Ajax 的库，在 Vue 中有一个 vue-resource 库用于实现异步加载的库。在 Vue.js 2.0 中推荐使用 axios 来完成 Ajax 的请求。这里给出演示的代码，代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;v-for&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;(user, index) in userList&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;{{index + 1}}&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;{{user.name}}&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;{{user.age}}&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;v-for&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;(it, index) in itList&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;{{index + 1}}&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;{{it.name}}&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;{{it.age}}&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;vue.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;axios.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;https://cdn.staticfile.org/vue-resource/1.5.1/vue-resource.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Vue({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;el&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;#app&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;data&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__attr&quot;&gt;userList&lt;/span&gt; : [],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__attr&quot;&gt;itList&lt;/span&gt;: []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            created() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.getUserList(),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.getLanguageList()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;methods&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                getUserList() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    axios.get(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;user.json&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        .then(&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;response&lt;/span&gt; =&amp;gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__built_in&quot;&gt;console&lt;/span&gt;.log(response)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.userList = response.data.data.items&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        .catch(&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;error&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__built_in&quot;&gt;console&lt;/span&gt;.log(error)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                getLanguageList(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.$http.get(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;language.json&#x27;&lt;/span&gt;).then(&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;response&lt;/span&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__built_in&quot;&gt;console&lt;/span&gt;.log(response.body);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.itList = response.body.data.items&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    },&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;请求失败处理&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        上面的代码中，同时演示了 axios 和 vue-resource 两个库。代码中直接请求了两个 json 文件，并没有去进行实际的接口请求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;九、总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        Vue 的内容不只有这么些，具体可以参考 Vue 的官网（https://cn.vuejs.org/v2/guide/）进行学习和了解。这里只是列出了可能使用较为频繁的部分。不对之初请予指正。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;更多文章&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwth5nBzNr9kZshQ25yhLz08JHWsQdz8yVn3MVh22hia7NFoPyNJz4ZI7XUnMa9xM50TJRqPkWf7BRibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>98d2137a27383257817452b3f58881c5</guid>
<title>代码质量的 4 个阶段：3Rs 软件架构介绍</title>
<link>https://toutiao.io/k/0ea8y3x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; role=&quot;option&quot; title=&quot;链接&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot;&gt;
                                            
                                                                                    &lt;span class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzkwNzIyMTYzNA==&amp;amp;action=getalbum&amp;amp;album_id=1802516621496795137#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1802516621496795137&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;#&lt;/span&gt;代码质量&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span class=&quot;article-tag-card__right&quot;&gt;&lt;span class=&quot;weui-hidden_abs&quot;&gt;,&lt;/span&gt;13个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当提到代码质量，我们可能会想到:代码风格，命名，内聚，耦合，重复代码率，圈复杂度等等。当提到代码优化，我们可能会想到代码风格规范，高内聚，低耦合，单一职责，开放封闭原则，约定优于配置，单元测试等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给你一段代码，你能简要扼要的说出当前代码的质量情况，并提出优化的方向吗?&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果觉得很难，可以参考 &lt;span&gt;3Rs 软件架构&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/mEakJnD74mibYwPYbS6nnlJNibVWB4KKdcpprTTKthXk79TOrXr3n0RzJJiajle0RhYP4AETEcDWQ6jASDMvpkdkw/640?wx_fmt=png&quot; data-cropx1=&quot;25.837545126353803&quot; data-cropx2=&quot;800.9638989169679&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;709.1221441724068&quot; data-ratio=&quot;0.9148387096774193&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mEakJnD74mibYwPYbS6nnlJNibVWB4KKdculRjLmH0D5v8fb5Tt4yiaYZckFWoWU3a6twx6NHDniaNUm6m7VIX4micg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;775&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3Rs 软件架构&lt;/strong&gt;对代码质量做了分层，给优化代码提供了方向：可读性 =&amp;gt; 可重用性 =&amp;gt; 可重构。下面我们来具体了解下每层代码的特点及优化方法。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;第 4 个阶段: 很难维护的代码&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这阶段的代码很难维护，俗称shi代码。这阶段的代码，读起来和改起来都很难。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这阶段的代码读起来难。例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;代码风格不一致。缩进，空格不一致。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;谜一样的命名。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;很长很长的函数。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分支很多，嵌套很深的条件语句。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这阶段的代码改起来也难。例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;大量重复代码，导致一处有问题，要改多处。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高耦合的代码导致，改一个模块，会改对应的很多关联模块。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;关联很紧密的代码，但离的很远。改起来好累。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;第 3 个阶段：可读的代码(Readability)&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这阶段的代码可读性好。可读性好换个说法就是读起来不费脑子。它有以下的特征：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一致的代码风格。空格，缩进，命名风格(驼峰，中划线等)等在整个项目里是一致的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;合理的命名。“看其名而知其意”。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;必要的注释。代码本身无法清晰地阐述作者的意图时，要写注释。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;没有代码行数很多(超过1千行)的功能：文件，组件，函数等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;函数的参数数量不超过4个。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;没有圈复杂度很高的代码。圈复杂度高往往意味着分支多或嵌套深。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;如何达到&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要达到这个阶段相对比较容易。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码检查工具能保证代码风格的统一。代码检查工具也能检查：函数的参数个数，&lt;span&gt;圈复杂度&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;等。工具有: &lt;span&gt;ESLint&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;，&lt;span&gt;CSS Lint&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;等。代码改动后，必须通过工具检查通过后，才允许提交。用代码格式化工具，可以自动修复有代码风格问题的代码。工具有 &lt;span&gt;Prettier&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt; 等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这阶段最难的就是命名了。好的命名是“看其名而知其意”，是直白的，有意义的。推荐使用&lt;span&gt;故宫命名法&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;。了解更多命名的技巧见&lt;span&gt;这里&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;第 2 个阶段: 可重用的代码(Reusability)&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这阶段的代码是可重用的代码。这个阶段代码的特点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;单一职责。每个模块都只有一个职责。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不必要的重复代码很少。重复代码会导致一处有问题，要改多处。但如果过度追求没有重复，也会导致可读性差，不灵活的问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;模块间是低耦合，高内聚的。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;如何达到&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要达到这个阶段需要在做代码设计的时候，设计好模块之间的边界和 API，做到职责清晰，高内聚，低耦合。达到这个阶段的建议：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;多写代码。对之前写的代码做复盘。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多读优秀代码，学习借鉴好的地方。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;学习设计原则，设计模式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;学习一些具体的技术：函数式编程，响应式编程，面向领域编程等等。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;第 1 个阶段: 可重构的代码(Refactorability)&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这阶段的代码是可重构的。这意味着，当你重构某块代码(不修改对外的API)，不改其他代码，其他代码仍能正常工作。这个阶段的代码一定是低耦合的。模块之间的连接就像乐高。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;如何达到&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要达到这个阶段需要：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;隔离副作用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;测试。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;静态类型。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面具体来说。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;隔离副作用&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;副作用指修改模块外的数据。例如：修改全局变量，修改 DOM等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在模块代码中，混入副作用代码会导致如下的问题：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;副作用让代码变得难以测试。当模块依赖的外部数据发生变化后，模块的返回值可能会变化。这让模块的返回变得不稳定。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;副作用会导致模块间的耦合。如果多个模块都依赖某个外部数据，那这几个外部模块之间是耦合的。多个模块改都可以改外部数据，数据流很混乱。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;副作用让我们的系统变得不可预测。如果一个模块改了外部数据，可能会影响整个系统。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何隔离副作用？答案是在统一的地方管理应用的全局数据。比如用 &lt;span&gt;Redux&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt; 或 &lt;span&gt;Vuex&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;测试&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这边的测试指的是白盒测试。测试可以保证代码的改动不会影响测试覆盖部分的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对前端来说，需要写单元测试，端到端测试。每次提交代码，所有测试都需要跑过。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;静态类型&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用静态类型可以规避很多低级的语法和逻辑错误，比如参数少传了。目前前端静态类型主流是用 &lt;span&gt;TypeScript&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;3Rs 软件架构: &lt;em&gt;https://github.com/ryanmcdermott/3rs-of-software-architecture&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;圈复杂度: &lt;em&gt;http://eslint.cn/docs/rules/complexity&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;ESLint: &lt;em&gt;https://eslint.org/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;CSS Lint: &lt;em&gt;http://csslint.net/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;Prettier: &lt;em&gt;https://prettier.io/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;故宫命名法: &lt;em&gt;https://juejin.cn/post/6844903913892610061&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;这里: &lt;em&gt;https://www.yuque.com/fegogogo/fe/wup00n&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;Redux: &lt;em&gt;https://redux.js.org/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;Vuex: &lt;em&gt;https://vuex.vuejs.org/zh/guide/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;p&gt;TypeScript: &lt;em&gt;https://www.typescriptlang.org/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkwNzIyMTYzNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/mEakJnD74m965xnGDuRc9yHa3d69a3nXZZO0qiaXjklno7xJqiaZ1tqotAEKOEBLNnbN3XB7zBpjNK5SzoqHyZibQ/0?wx_fmt=png&quot; data-nickname=&quot;前端GoGoGo&quot; data-alias=&quot;fegogogo&quot; data-signature=&quot;致力于提升前端收入。提供有深度的面试，晋级提升的前端内容。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;关注前端公众号：前端GoGoGo，助你升职加薪~&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>