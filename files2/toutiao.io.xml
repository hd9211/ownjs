<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>2720c7fdeda81bec550dfdf2b5dd6770</guid>
<title>盒子放久了，总会长出猫的！猫盒+抓板，点击链接立即购买！</title>
<link>https://toutiao.io/k/kcky0ar</link>
<content:encoded>&lt;div&gt;&lt;body id=&quot;readabilityBody&quot;&gt;


&lt;/body&gt;
&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>baa85896b025a8e7002f19d97346598c</guid>
<title>[推荐] 一张图看懂微服务架构路线</title>
<link>https://toutiao.io/k/upx1qip</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAwNzM1NjQyNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YwqPrBKOSKgM2wVWedA1PSzc587ALAWeY2PP8EcleqPY0jR44ndsiaHjeGp3qhFrTGjOT3b8ok0dW1htCyLjibog/0?wx_fmt=png&quot; data-nickname=&quot;中生代架构&quot; data-alias=&quot;archthink&quot; data-signature=&quot;囊括架构精华文章、书籍、视频&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;101&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;我为什么选择微服务架构&lt;/strong&gt;&lt;strong&gt;    -&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2/&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9495798319327731&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D727NicjCjMODibvVboMMSVrc1fcytVUOkNycA4jWELpmLGy3eQBeibPb72yEN6cJR3EH9fricibm5dkF3tgqiavNaNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;476&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;众所周知，单体应用程序，由于其种种不足，几乎不支持敏捷方法。如果你想为一个大型或复杂的业务创建一个软件项目，最好从微服务架构开始。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;微服务架构是一种灵活的架构，可以显著性地提高应用程序灵活性、可扩展性等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;微服务架构路线&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;据我了解很多开发者，想知道他们应该如何开始微服务架构旅程，虽然有成千上万的资源可以使用，但是资源到处分散。我决定通过为微服务架构学习定义路线图，使这段旅程更加清晰。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;基本思路&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;基于微服务的架构通常有几个独立的单元，它们协同工作以接收和处理各种请求。这个复杂的某些部分可以是插件，这意味着在需要的情况下，你可以在不干扰应用程序的整体工作情况下， 新增一个新插件或删除一个插件。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;例如，如果你决定实现一个微服务架构，你应该熟悉应用程序生命周期中的各种关注点，如持久化、日志记录、监控、负载均衡、缓存等，此外你还应该知道哪些哪些工具比较好或哪些堆栈更适合你的应用程序。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文，我将从以下几个方面来介绍各种关注点&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;它是什么？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;请注意，我在哪些工具比较好部分提到了两三个哪些工具比较好，当然，我们还有很多其他哪些工具比较好，选择这些哪些工具比较好的标准是业务需求，受欢迎程度、性能、开源以及更新频率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;再次注意，我们还有基于云的服务，这不在本文讨论的范围内。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5792922673656619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D727NicjCjMODibvVboMMSVrc1fcytVUOkia1pK7BbYrxMK89VEBnOeAliaLn0BfQiakYjAiaqxophGpDaqAUibvOea0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文，我用上图作为架构图示例。这个图涉及到大部分微服务架构组件，虽然不是也很全面，但是微服务架构的标准模型。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文将会介绍微服务架构的关注点有：&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Docker&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;容器编排&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Docker容器管理&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;API网关&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;负载均衡&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;服务发现&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;事件总线&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;日志记录&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;监控和警报&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分布式追踪&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数据持久化&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缓存&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;云供应商&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Docker 是一个开源平台，用于容器化你的应用程序，其中包含你的应用程序在各种环境中运行所需的类库和依赖项。在 Docker 的帮助下，开发团队能够将应用程序打包到容器中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实际上，Docker 是容器化应用程序的哪些工具比较好之一，你也可以在不使用 Docker 的情况下创建容器，Docker 的真正好处是使这个过程更容易、更安全、更简单。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;span&gt;Docker&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;容器编排&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在容器化应用程序后，你将需要一些哪些工具比较好来管理容器化应用程序，以执行一些手动和自动操作，例如水平扩展。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些哪些工具比较好为你的应用程序管理提供一些服务，例如自动负载均衡，保证服务的高可用性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这种服务是通过定义多个管理器节点来完成的，如果一个节点管理器出现任何故障，其他管理器可以保持应用程序服务可用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Kubernetes or K8s，Docker Swarm&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;Docker 容器管理&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;管理 Docker 环境、配置、安全等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为用户提供了一个基于 GUI 的Docker 容器管理，可以使他们不必处理不舒服的 CLI。这些工具也为开发人员提供了丰富的 UI 来构建和发布他们的镜像，还可以通过提供简化的用户界面来更轻松地执行一些操作任务，例如服务水平扩展。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Portainer , DockStation, Kitematic,Rancher&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;API网关&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;API 网关可以被视为一种充当你的应用程序服务和不同客户端之间的中间件。API 网关可以管理许多事情，例如：&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;Routing ：网关接收所有 API 请求并将它们转发到目标服务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Logging ：你将能够在一处记录所有请求。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Authorization: 检查你作为用户是否有资格访问该服务，如果没有，可以拒绝该请求&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Performance profiling：你可以估计每个请求的执行时间并检查你的应用程序瓶颈。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Caching：通过在网关级别处理缓存，你将消除服务上的大量流量。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;事实上，它是作为一个反向代理工作的，客户端只需要知道你的网关，应用服务就可以隐藏起来，不直接向其他系统暴露。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果没有 API 网关，你可能需要在每个服务中做一些横切关注点，例如，如果你想记录服务的请求和响应。此外，如果你的应用程序由多个服务组成，你的客户端需要知道每个服务地址，并且在更改服务地址的情况下，应该更新多个地方。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Kong，Ocelot&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们选择微服务架构最重要的原因是可扩展性，这意味着我们将能够通过运行更多服务实例来处理更多请求，但问题是，哪个实例应该接收请求，或客户端如何知道哪个服务实例应该处理请求？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些问题的答案是负载均衡。负载均衡是高可用网络基础架构的关键组件,通常用于将工作负载分布到多个服务器来提高网站、应用、数据库或其他服务的性能和可靠性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了扩展你的独立服务，你需要运行多个服务实例。使用负载均衡器，客户端不需要知道服务的正确实例。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Traefik , NGINX,Seesaw&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;服务发现&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;随着你的应用服务的数量越来越多，服务需要知道彼此的服务实例地址，但是在有很多服务的大型应用中，这是无法处理的。因此我们需要服务发现，它负责提供应用程序中所有组件的地址，它们可以轻松地向服务发现系统发送请求并获取可用的服务实例地址。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当你的应用程序中可以有多个服务时，服务发现对于你的应用程序来说是必不可少的。你的应用服务不需要知道每个服务实例地址，这意味着服务发现为你铺平了道路。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Consul，Zookeeper，Eureka，etcd和Keepalived&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;事件总线&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在微服务架构模式中，你将使用两种不同类型的通信，同步通信以及异步通信。同步通信是指服务之间通过 HTTP 或 GRPC 相互调用。异步通信意味着服务通过消息总线或事件总线相互交互，这意味着服务之间没有直接连接。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你的架构可以同时使用两种通信方式，例如在在线商店示例中，你可以在订单注册时发送消息，并且订阅了特定频道的服务将收到该消息。但有时你可能需要一些实时的查询，例如，你需要知道一个物品的数量，你可能会在服务之间使用 GRPC 或 HTTP 调用来获取响应。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你想要一个包含多个服务的可扩展应用程序，你将遵循的原则之一是创建松散耦合的服务，这些服务通过事件总线相互交互。此外，如果你需要创建一个能够插入新服务以接收一系列特定消息的应用程序，则需要使用事件总线。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;RabbitMQ，Kafka&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;日志记录&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用微服务架构模式时，最好将服务日志集中起来。这些日志将用于调试问题或根据其类型聚合日志以供分析使用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;系统调试时，如果没有提前集中在一个地方收集服务日志，你可能会遇到困难。你还可以将与特定请求相关的日志与唯一的相关 ID 关联。这意味着与请求相关的不同服务中的所有日志都可以通过此关联 ID 访问。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Elastic Logstash&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;监控和警报&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在微服务架构中，如果你想要一个可靠的应用程序或服务，你必须监控应用程序的功能、性能、通信和任何其他方面，以实现一个负责任的应用程序。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你需要监控整体功能和服务健康状况，还需要监控性能瓶颈，并准备解决故障的计划。通过在关键点定义服务的早期警报来减少服务的停机时间，从而优化用户体验。当负载较重时等，可以监控服务的整体资源消耗。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Prometheus , Kibana,Graphana&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;分布式追踪&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;调试始终是开发人员最关心的问题之一，因为你都有跟踪或调试单体引用程序的经验。那是非常直接和容易，但是在微服务架构上，因为一个请求可能会通过不同的服务，这使得调试和跟踪变得困难，因为服务不在一个地方，所以分布式追踪工具将会有所帮助。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果没有分布式跟踪哪些工具比较好，通过不同的服务跟踪你的请求会令人沮丧或不可能。你可以借助用于演示请求流的丰富 UI 轻松跟踪请求和事件。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;OpenTelemetry , Jeager,Zipkin&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;数据持久化&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在大多数系统中，我们需要持久化数据，将应用程序的数据写入具有不同结构的物理文件中，以便数据用于进一步的处理或报告。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在单体应用程序中，我们曾经有一种或两种不同的持久性类型，大多数单体应用程序使用关系数据库，如 SQL Server、Oracle、MySQL。但是在微服务架构中，我们应该遵循“DataBase Per Service”模式，这意味着保持每个微服务的持久数据对该服务是私有的，并且只能通过其 API 访问。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于不同的用途和场景，你将拥有不同的数据库。例如，数据展示服务可能会使用像 ElasticSearch 或 MongoDB 这样的 NoSQL 数据库，因为它们使用文档基础结构，这意味着这些数据库中持久化数据的结构与关系数据库不同，更适用于具有读多写少的服务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另一方面，在某些微服务中，你可能需要 Oracle 或 SQL SERVER 等关系数据库，或者你可能还需要一些支持图结构或键值结构的数据库。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，在微服务架构中，根据服务的使命，你会需要不同类型的数据库。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关系数据库或 RDBMS : PostgreSQL, MySQL, SQL SERVRE, Oracle&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;NoSQL 数据库 : MongoDB, Cassandra,Elasticsearch&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;缓存&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;缓存减少了微服务架构的服务到服务通信的延迟。缓存是高速数据存储层。当从缓存中请求数据时，它的速度比访问硬盘中的数据要快。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在微服务架构中，有许多策略可以通过这些方式实现缓存。考虑以下：&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;1：嵌入式缓存（分布式和非分布式）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2：客户端-服务器缓存（分布式）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3：反向代理缓存（Sidecar）&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了减少延迟，可以在不同的层中实现缓存。此外，你还可以实现分布式缓存，它可以被多个微服务访问。它们还有不同的用途，比如限流，限流的目的是通过对并发访问/请求进行限速或者一个时间窗口内的的请求进行限速来保护系统，一旦达到限制速率则可以拒绝服务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Redis (Remote Dictionary Server), Apache Ignite,Hazelcast IMDG&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;云供应商&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;云服务提供商是一个第三方公司，提供基于云的平台，基础设施，应用程序或存储服务。就像房主为电力或天然气等公用事业付费一样，公司通常只需根据业务需求为他们使用的云服务数量付费。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;云提供商最重要的类别：&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;软件即服务 (SaaS)。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;平台即服务 (PaaS)。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基础设施即服务 (IaaS)。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;我为什么要使用它&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用云计算服务的一个好处是，公司可以避免搭建和维护自己的 IT 基础设施的前期成本和复杂性，而只需在使用时为所用的东西付费。今天，公司可以租用从应用程序到存储的任何东西，而不是拥有自己的计算基础设施或数据中心。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Amazon Web Services (AWS), Microsoft Azure, Google Cloud,Alibaba Cloud&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;在本文中，我试图展示一个与微服务架构模式相关的路线图。如果你想从头开始实现微服务架构或将单体架构迁移到微服务架构，你将需要了解这些概念。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了这些概念之外，我们还有其他概念，如服务网格、缓存、持久性，它们可能是本路线图的一部分，但为了简单起见，我故意没有提及它们。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;pre&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;pre&gt;&lt;pre&gt;&lt;pre&gt;&lt;pre&gt;&lt;section data-role=&quot;outer&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;93376&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;pre&gt;&lt;pre&gt;&lt;pre&gt;&lt;section data-role=&quot;outer&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;93376&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools-id=&quot;23409&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;作者：王延飞&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;来源&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247487551&amp;amp;idx=1&amp;amp;sn=18f64ba49f3f0f9d8be9d1fdef8857d9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;来源：juejin.cn/post/7004756545741258765&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;&lt;span&gt;www.kubernetes.org.cn/9711.html&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;版权申明：内容来源网络，版权归原创者所有。除非无法确认，我们都会标明作者及出处，如有侵权烦请告知，我们会立即删除并表示歉意。谢谢！&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;section&gt;&lt;section&gt;&lt;pre&gt;&lt;pre&gt;&lt;pre&gt;&lt;pre&gt;&lt;section data-role=&quot;outer&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;93376&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-recommend-type=&quot;list-title&quot; data-recommend-tid=&quot;6&quot; data-mpa-template=&quot;t&quot; data-mid=&quot;&quot; data-from=&quot;yb-recommend&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;往期推荐&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835303_1&quot; data-recommend-article-time=&quot;1644798600&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHoQtsu1vmjibyGbmIpYINNytz15DFeGaynRNSmt3czian8yQVCG0hgt4axLibnacV1etKLcvC5L0gTCg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;如何写出让人抓狂的低质量代码？&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835303&amp;amp;idx=1&amp;amp;sn=0c6b8cb6147b8adc8619e65d8f09b79b&amp;amp;chksm=f0dc9ddbc7ab14cd04939e41e19d11fc9d0ce153f618b1cb5141a96bbcd4468812e5e11787ac#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835303&amp;amp;idx=1&amp;amp;sn=0c6b8cb6147b8adc8619e65d8f09b79b&amp;amp;chksm=f0dc9ddbc7ab14cd04939e41e19d11fc9d0ce153f618b1cb5141a96bbcd4468812e5e11787ac&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;如何写出让人抓狂的低质量代码？&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835291_1&quot; data-recommend-article-time=&quot;1644629400&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHo9FOliaLxdN95AP1dvESfYS4nPuhfnQXjbjArI7XwdP5cVZLbZw97YN08tEPyzxIkh8zkVoLlOvpQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;入行二十年的一些认知&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835291&amp;amp;idx=1&amp;amp;sn=93896848a1d83acfd2c21324cdcd8f66&amp;amp;chksm=f0dc9de7c7ab14f1943d4e4a4ba297aaf92376048e63a54771bab16261e6926883555f8ffdb2#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835291&amp;amp;idx=1&amp;amp;sn=93896848a1d83acfd2c21324cdcd8f66&amp;amp;chksm=f0dc9de7c7ab14f1943d4e4a4ba297aaf92376048e63a54771bab16261e6926883555f8ffdb2&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;入行二十年的一些认知&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835285_1&quot; data-recommend-article-time=&quot;1644540938&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHo9FOliaLxdN95AP1dvESfYSNs1pmWrgXjVlLNDEBW0WbPvQRYfBO5qHvicGiaB0f01w27wc3eibg4kicg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;微信支付架构为什么这么牛？&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835285&amp;amp;idx=1&amp;amp;sn=c8fd4f6a6c42eb7fe5dfa3611bb59b88&amp;amp;chksm=f0dc9de9c7ab14ff2b364c0b4aeede12d90158a4434f9b88f9740f9539f94f211d4807e48d8b#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835285&amp;amp;idx=1&amp;amp;sn=c8fd4f6a6c42eb7fe5dfa3611bb59b88&amp;amp;chksm=f0dc9de9c7ab14ff2b364c0b4aeede12d90158a4434f9b88f9740f9539f94f211d4807e48d8b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;微信支付架构为什么这么牛？&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835275_1&quot; data-recommend-article-time=&quot;1644281097&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHrQV7I5XbI8D8biaeUtatcLrHnGVum5ht0OrRbiccfp9GBCw7ybhhVWbib2Hhz6HbMz4XcDDhWzickrdg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;设计抗100亿请求的春晚红包系统&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835275&amp;amp;idx=1&amp;amp;sn=36621b01280ed7a944752461a109d67e&amp;amp;chksm=f0dc9df7c7ab14e1b529ad76c9472a12a86f0c3f634959ef869dfe229b2fc491cba91784b934#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835275&amp;amp;idx=1&amp;amp;sn=36621b01280ed7a944752461a109d67e&amp;amp;chksm=f0dc9df7c7ab14e1b529ad76c9472a12a86f0c3f634959ef869dfe229b2fc491cba91784b934&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;设计抗100亿请求的春晚红包系统&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835225_1&quot; data-recommend-article-time=&quot;1643342799&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHoRQCPVtYNZkr2ficGSpiamQffZWsHRnMheywXCjAy81kVk8QqZf1y7iaTpTrzUVp8DuP1kw4K5W609A/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;DDD权限平台建模与实战(附代码)&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835225&amp;amp;idx=1&amp;amp;sn=e18c2f4f21e70fdc9aaa0b941adeb448&amp;amp;chksm=f0dc9d25c7ab1433b9c6eb802be36998121afaed17253ba599d1d2e972a1db8ba7767044095e#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835225&amp;amp;idx=1&amp;amp;sn=e18c2f4f21e70fdc9aaa0b941adeb448&amp;amp;chksm=f0dc9d25c7ab1433b9c6eb802be36998121afaed17253ba599d1d2e972a1db8ba7767044095e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;DDD权限平台建模与实战(附代码)&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835179_2&quot; data-recommend-article-time=&quot;1641861000&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/sz_mmbiz_jpg/aCASXoK2nU5lJrmrBS1XpNS32JLwuia1rE7KkZztLGebTicEOXFCjAiaNIVxIRvkszMjxRWibpCRkW8IyzFGdV8ZgQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;异地多活实践与设计思考点归纳&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835179&amp;amp;idx=2&amp;amp;sn=2c5609f25636822a9adfb96b9ccc3c7c&amp;amp;chksm=f0dc9d57c7ab1441669e188145dd7d48b7076bda6b7059cf4f0ed104df5721add3dbde14260a#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835179&amp;amp;idx=2&amp;amp;sn=2c5609f25636822a9adfb96b9ccc3c7c&amp;amp;chksm=f0dc9d57c7ab1441669e188145dd7d48b7076bda6b7059cf4f0ed104df5721add3dbde14260a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;异地多活实践与设计思考点归纳&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835169_1&quot; data-recommend-article-time=&quot;1641774600&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/MOwlO0INfQqSK8oGvx1a0AUYniaMRY8bUqtJscDwSdADZZvz0l7R5xOBkot7noLaKVcLPRnbYHbUoEcoaaU2sKw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;技术经理：别当超级英雄！&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835169&amp;amp;idx=1&amp;amp;sn=2cdada0c230f33ddfb208a021d7592d2&amp;amp;chksm=f0dc9d5dc7ab144bc4d1e24113738965866d7a1c7c460d31b85cd42b67417060299291ac18b0#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835169&amp;amp;idx=1&amp;amp;sn=2cdada0c230f33ddfb208a021d7592d2&amp;amp;chksm=f0dc9d5dc7ab144bc4d1e24113738965866d7a1c7c460d31b85cd42b67417060299291ac18b0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;技术经理：别当超级英雄！&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835162_1&quot; data-recommend-article-time=&quot;1641342600&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHopOTFBC2bGGQZW7AjIoznwcDoibnoGdawPjfhT4FNXqTjawZibVPXzwZFWYgFG8DDybepTZC5Azzkg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;天画-codeMaker组件化架构升级实践&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835162&amp;amp;idx=1&amp;amp;sn=656aa6d6262b9aa7ba58655fdc1881e9&amp;amp;chksm=f0dc9d66c7ab14706964a4523a0c32d06fa91cfbe9c2a5e7ada4b3132d6a3fb55945672e8926#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835162&amp;amp;idx=1&amp;amp;sn=656aa6d6262b9aa7ba58655fdc1881e9&amp;amp;chksm=f0dc9d66c7ab14706964a4523a0c32d06fa91cfbe9c2a5e7ada4b3132d6a3fb55945672e8926&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;天画-codeMaker组件化架构升级实践&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835101_2&quot; data-recommend-article-time=&quot;1640824200&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHq4aOFXia5jslCBYDSgibA8VR4RpYbAO2NDuRQ1ia43CPx3Y38ZIDQbwAoBqHo8QOTHqheRC6CAVWIyQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;干掉visio，这个画图神器真的绝了！！！&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835101&amp;amp;idx=2&amp;amp;sn=3473b347604ecf3546c7d3f0cd0a11ea&amp;amp;chksm=f0dc9ca1c7ab15b76af1f2411e54084923fc843d395b5c848490af5c21b2fe9d55193503120d#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835101&amp;amp;idx=2&amp;amp;sn=3473b347604ecf3546c7d3f0cd0a11ea&amp;amp;chksm=f0dc9ca1c7ab15b76af1f2411e54084923fc843d395b5c848490af5c21b2fe9d55193503120d&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;干掉visio，这个画图神器真的绝了！！！&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835088_1&quot; data-recommend-article-time=&quot;1640651400&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHqg8cwTCRAn5XqAevUd0icbnQSNcsmdgvl2rhQsu2dEFW3TEfzC6Bbrt8xichicsWsZ3mNicC0rXibypBg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;RedisJson 是什么？比ES快 500 倍？&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835088&amp;amp;idx=1&amp;amp;sn=87e4561dfa8baf897647f09dbdf8ac39&amp;amp;chksm=f0dc9cacc7ab15ba11d85a2983702e079068896349f3814c71e083dcb3e6c78dd24dd84fc3f8#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835088&amp;amp;idx=1&amp;amp;sn=87e4561dfa8baf897647f09dbdf8ac39&amp;amp;chksm=f0dc9cacc7ab15ba11d85a2983702e079068896349f3814c71e083dcb3e6c78dd24dd84fc3f8&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;RedisJson 是什么？比ES快 500 倍？&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3203125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3xsFRgx4kHroUReIFtPr1aREjjBpxfXC2WV0orcb6qeLZIXWFibDoFGCL9lK5L6Ixem7VbEa9G9LUiaTcibA8rN0w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>569a63a5d524c9efbb5932df0397618e</guid>
<title>[推荐] 石墨文档是如何通过 WebSocket 实现百万长连接的？</title>
<link>https://toutiao.io/k/25nkguu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxNzk1MjQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0Nwvv72YkFO0qPibDKicOCsfltiaE9070DOu4iahXnicYwRIHcxe9VBicAy45MkPqy8nZzLTVibugOtV0ORFcg/0?wx_fmt=png&quot; data-nickname=&quot;程序员成长指北&quot; data-alias=&quot;coder_growth&quot; data-signature=&quot;专注 Node.js 技术栈分享，从 前端 到 Node.js 再到 后端数据库，祝您成为优秀的高级 Node.js 全栈工程师。一个有趣的且乐于分享的人。座右铭：今天未完成的，明天更不会完成。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大厂技术&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;高级前端&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Node进阶&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;点击上方 &lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(0, 128, 255)&quot;&gt;程序员成长指北&lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;，关注公众号&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回复&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，加入高级Node交流群&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Web&lt;/code&gt; 服务端推送技术经过了长轮询、短轮询的发展，最终到 &lt;code&gt;HTML5&lt;/code&gt; 标准带来的 &lt;code&gt;WebSocket&lt;/code&gt; 规范逐步成为了目前业内主流技术方案。它使得消息推送、消息通知等功能的实现变得异常简单，那么百万级别连接下的 &lt;code&gt;Websocket&lt;/code&gt; 网关该如何实践呢？本文整理自石墨文档资深工程师杜旻翔根据石墨 &lt;code&gt;Websocket&lt;/code&gt; 重构的实践经验。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/e5Dzv8p9XdTxYzBoRvsSWb3icArvPGCqdBKQrCVJt5g14mhYkkicjUUR0RhzLxic1GMFSMgpUBSFxlEDicATE52OsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;figcaption&gt;「作者：杜旻翔」infoq.cn/article/GymHAbqVRO214qo44jHD&lt;/figcaption&gt;&lt;figcaption&gt;&lt;span&gt;「编辑：&lt;/span&gt;&lt;span&gt;ConardLi&lt;/span&gt;&lt;span&gt;」&lt;/span&gt;&lt;/figcaption&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1 引言&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在石墨文档的业务中，如文档分享、评论、幻灯片演示和文档表格跟随等场景，涉及多客户端数据同步和服务端批量数据推送的需求，采用短轮询或长轮询的方式无法很好的满足服务端消息推送、消息通知的业务场景，因此选择业内的主流方案：基于 &lt;code&gt;HTML5&lt;/code&gt; 标准定义的 &lt;code&gt;WebSocket&lt;/code&gt; 规范。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着石墨文档的发展，现在日连接峰值达到了百万量级，日益增长的用户连接数和停止更新的架构设计导致了内存和 CPU 使用量急剧增长，因此我们考虑对网关进行重构，以适应发展需求。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2 网关 1.0&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网关 1.0 是使用 &lt;code&gt;Node.js&lt;/code&gt; 基于 &lt;code&gt;Socket.IO&lt;/code&gt; 进行修改开发的版本，很好的满足了当时用户量级下的业务场景需求。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 架构&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网关 1.0 版本架构设计图：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0759878419452888&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUwFXIIzYBZUoMpibqO8GRKfnHZH72DWtTHUf9Py0LKSbn2wWb7rSzF8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;329&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网关 1.0 客户端连接流程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;用户通过 NGINX 连接网关，该操作被业务服务感知；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;业务服务感知到用户连接后，会进行相关用户数据查询，再将消息 Pub 到 Redis；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;网关服务通过 Redis Sub 收到消息；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;查询网关集群中的用户会话数据，向客户端进行消息推送。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2 痛点&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然 1.0 版本的网关在线上运行良好，但是不能很好的支持后续业务的扩展，并且有以下几个问题需要解决：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;资源消耗：Nginx 仅使用证书，大部分请求被透传，产生了一定的资源浪费，同时之前的 Node 网关性能不好，消耗大量的 CPU、内存。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;维护与观测：未接入石墨的监控体系，无法和现有监控告警联通，维护上存在一定的困难；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;业务耦合问题：业务服务与网关功能被集成到了同一个服务中，无法针对业务部分性能损耗进行针对性水平扩容，为了解决性能问题，以及后续的模块扩展能力，都需要进行服务解耦。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3 网关 2.0&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网关 2.0 需要解决很多问题：石墨文档内部有很多组件：文档、表格、幻灯片和表单等等。在 1.0 版本中组件对网关的业务调用可以通过：Redis、Kafka 和 HTTP 接口，来源不可查，管控困难。此外，从性能优化的角度考虑也需要对原有服务进行解耦合，将 1.0 版本网关拆分为网关功能部分和业务处理部分，网关功能部分为 WS-Gateway：集成用户鉴权、TLS 证书验证和 WebSocket 连接管理等；业务处理部分为 WS-API：组件服务直接与该服务进行 gRPC 通信。可针对具体的模块进行针对性扩容；服务重构加上 Nginx 移除，整体硬件消耗显著降低；服务整合到石墨监控体系。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1 整体架构&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网关 2.0 版本架构设计图：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0903954802259888&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUh1GXuXlzBIgkjsEmR5H21iaibMFrTFS57kmiae0GyNpAEFgxKVxibt0Wvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;354&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网关 2.0 客户端连接流程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;客户端与 WS-Gateway 服务通过握手流程建立 WebSocket 连接；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;连接建立成功后，WS-Gateway 服务将会话进行节点存储，将连接信息映射关系缓存到 Redis 中，并通过 Kafka 向 WS-API 推送客户端上线消息；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;WS-API 通过 Kafka 接收客户端上线消息及客户端上行消息；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;WS-API 服务预处理及组装消息，包括从 Redis 获取消息推送的必要数据，并进行完成消息推送的过滤逻辑，然后 Pub 消息到 Kafka；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;WS-Gateway 通过 Sub Kafka 来获取服务端需要返回的消息，逐个推送消息至客户端。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.2 握手流程&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网络状态良好的情况下，完成如下图所示步骤 1 到步骤 6 之后，直接进入 WebSocket 流程；网络环境较差的情况下，WebSocket 的通信模式会退化成 HTTP 方式，客户端通过 POST 方式推送消息到服务端，再通过 GET 长轮询的方式从读取服务端返回数据。客户端初次请求服务端连接建立的握手流程：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.353846153846154&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUlaP7KUgE6F09U01ibZevSgXaI8aYgLGUSHk9ib0RASbBz7zkAXuq6dFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;390&quot;/&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Client 发送 GET 请求尝试建立连接；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Server 返回相关连接数据，sid 为本次连接产生的唯一 Socket ID，后续交互作为凭证；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;{&quot;sid&quot;:&quot;xxx&quot;,&quot;upgrades&quot;:[&quot;websocket&quot;],&quot;pingInterval&quot;:xxx,&quot;pingTimeout&quot;:xxx}&lt;/p&gt;&lt;/blockquote&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Client 携带步骤 2 中的 sid 参数再次请求；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Server 返回 40，表示请求接收成功；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Client 发送 POST 请求确认后期降级通路情况；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Server 返回 ok，此时第一阶段握手流程完成；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;尝试发起 WebSocket 连接，首先进行 2probe 和 3probe 的请求响应，确认通信通道畅通后，即可进行正常的 WebSocket 通信。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.3 TLS 内存消耗优化&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;客户端与服务端连接建立采用的 wss 协议，在 1.0 版本中 TLS 证书挂载在 Nginx 上，HTTPS 握手过程由 Nginx 完成，为了降低 Nginx 的机器成本，在 2.0 版本中我们将证书挂载到服务上，通过分析服务内存，如下图所示，TLS 握手过程中消耗的内存占了总内存消耗的大概 30% 左右。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43790849673202614&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUs5nxhicy1oayiaRIv5fZC3JzcrmaPF5BggUEiaXhBPF1ibyUdOC0RfUICg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个部分的内存消耗无法避免，我们有两个选择：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;采用七层负载均衡，在七层负载上进行 TLS 证书挂载，将 TLS 握手过程移交给性能更好的工具完成；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;优化 Go 对 TLS 握手过程性能，在与业内大佬曹春晖（曹大）的交流中了解到，他最近在 Go 官方库提交的 PR https://github.com/golang/go/issues/43563 ，以及相关的性能测试数据 https://github.com/golang/go/pull/48229 。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.4 Socket ID 设计&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对每次连接必须产生一个唯一码，如果出现重复会导致串号，消息混乱推送的问题。选择 SnowFlake 算法作为唯一码生成算法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;物理机场景中，对副本所在物理机进行固定编号，即可保证每个副本上的服务产生的 Socket ID 是唯一值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;K8S 场景中，这种方案不可行，于是采用注册下发的方式返回编号，WS-Gateway 所有副本启动后向数据库写入服务的启动信息，获取副本编号，以此作为参数作为 SnowFlake 算法的副本编号进行 Socket ID 生产，服务重启会继承之前已有的副本编号，有新版本下发时会根据自增 ID 下发新的副本编号。于此同时，Ws-Gateway 副本会向数据库写入心跳信息，以此作为网关服务本身的健康检查依据。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.5 集群会话管理方案：事件广播&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;客户端完成握手流程后，会话数据在当前网关节点内存存储，部分可序列化数据存储到 Redis，存储结构说明如下：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;键&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;ws:user:clients:${uid}&lt;/td&gt;&lt;td&gt;存储用户和 WebSocket 连接的关系，采用有序集合方式存储&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ws:guid:clients:${guid}&lt;/td&gt;&lt;td&gt;存储文件和 WebSocket 连接的关系，采用有序结合方式存储&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ws:client:${socket.id}&lt;/td&gt;&lt;td&gt;存储当前 WebSocket 连接下的全部用户和文件关系数据，采用 Redis Hash 方式进行存储，对应 key 为 user 和 guid&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由客户端触发或组件服务触发的消息推送，通过 Redis 存储的数据结构，在 WS-API 服务查询到返回消息体的目标客户端的 Socket ID，再有 WS-Gateway 服务进行集群消费，如果 Socket ID 不在当前节点，则需要进行节点与会话关系的查询，找到客端户 Socket ID 实际对应的 WS-Gateway 节点，通常有以下两种方案：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;优点&lt;/th&gt;&lt;th&gt;缺点&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;事件广播&lt;/td&gt;&lt;td&gt;实现简单&lt;/td&gt;&lt;td&gt;消息广播数量会随着节点数量上升&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;注册中心&lt;/td&gt;&lt;td&gt;会话与节点映射关系清晰&lt;/td&gt;&lt;td&gt;注册中心强依赖，额外运维成本&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在确定使用事件广播方式进行网关节点间的消息传递后，进一步选择使用哪种具体的消息中间件，列举了三种待选的方案：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;特性&lt;/th&gt;&lt;th&gt;Redis&lt;/th&gt;&lt;th&gt;Kafka&lt;/th&gt;&lt;th&gt;RocketMQ&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;开发语言&lt;/td&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;Scala&lt;/td&gt;&lt;td&gt;Java&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;单机吞吐量&lt;/td&gt;&lt;td&gt;10w+&lt;/td&gt;&lt;td&gt;10w+&lt;/td&gt;&lt;td&gt;10w+&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;可用性&lt;/td&gt;&lt;td&gt;主从架构&lt;/td&gt;&lt;td&gt;分布式架构&lt;/td&gt;&lt;td&gt;分布式架构&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;特点&lt;/td&gt;&lt;td&gt;功能简单&lt;/td&gt;&lt;td&gt;吞吐量、可用性极高&lt;/td&gt;&lt;td&gt;功能丰富、定制化强，吞吐量、可用性高&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;功能特性&lt;/td&gt;&lt;td&gt;数据 10K 以内性能优异，功能简单，适用于简单业务场景&lt;/td&gt;&lt;td&gt;支持核心的 MQ 功能，不支持消息查询或消息回溯等功能&lt;/td&gt;&lt;td&gt;支持核心的 MQ 功能，扩展性强&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是对 Redis 和其他 MQ 中间件进行 100w 次的入队和出队操作，在测试过程中发现在数据小于 10K 时 Redis 性能表现十分优秀，进一步结合实际情况：广播内容的数据量大小在 1K 左右，业务场景简单固定，并且要兼容历史业务逻辑，最后选择了 Redis 进行消息广播。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后续还可以将 WS-API 与 WS-Gateway 两两互联，使用 gRPC stream 双向流通信节省内网流量。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.6 心跳机制&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会话在节点内存与 Redis 中存储后，客户端需要通过心跳上报持续更新会话时间戳，客户端按照服务端下发的周期进行心跳上报，上报时间戳首先在内存进行更新，然后再通过另外的周期进行 Redis 同步，避免大量客户端同时进行心跳上报对 Redis 产生压力。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;客户端建立 WebSocket 连接成功后，服务端下发心跳上报参数；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端依据以上参数进行心跳包传输，服务端收到心跳后会更新会话时间戳；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端其他上行数据都会触发对应会话时间戳更新；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端定时清理超时会话，执行主动关闭流程；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 Redis 更新的时间戳数据进行 WebSocket 连接、用户和文件之间的关系进行清理。会话数据内存以及 Redis 缓存清理逻辑：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;   select {&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &amp;lt;-t.C:&lt;br/&gt;      var now = time.Now().Unix()&lt;br/&gt;      var clients = make([]*Connection, 0)&lt;br/&gt;      dispatcher.clients.Range(func(_, v interface{}) bool {&lt;br/&gt;         client := v.(*Connection)&lt;br/&gt;         lastTs := atomic.LoadInt64(&amp;amp;client.LastMessageTS)&lt;br/&gt;         &lt;span&gt;if&lt;/span&gt; now-lastTs &amp;gt; int64(expireTime) {&lt;br/&gt;            clients = append(clients, client)&lt;br/&gt;         } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            dispatcher.clearRedisMapping(client.Id, client.Uid, lastTs, clearTimeout)&lt;br/&gt;         }&lt;br/&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;      })&lt;br/&gt;      &lt;span&gt;for&lt;/span&gt; _, cli := range clients {&lt;br/&gt;         cli.WsClose()&lt;br/&gt;      }&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在已有的两级缓存刷新机制上，进一步通过动态心跳上报频率的方式降低心跳上报产生的服务端性能压力，默认场景中客户端对服务端进行间隔 1s 的心跳上报，假设目前单机承载了 50w 的连接数，当前的 QPS 为：&lt;code&gt;QPS1 = 500000/1&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从服务端性能优化的角度考虑，实现心跳正常情况下的动态间隔，每 x 次正常心跳上报，心跳间隔增加 a，增加上限为 y，动态 QPS 最小值为：&lt;code&gt;QPS2=500000/y&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;极限情况下，心跳产生的 QPS 降低 y 倍。在单次心跳超时后服务端立刻将 a 值变为 1s 进行重试。采用以上策略，在保证连接质量的同时，降低心跳对服务端产生的性能损耗。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.7 自定义 Headers&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 Kafka 自定义 Headers 的目的是避免网关层出现对消息体解码而带来的性能损耗，客户端 WebSocket 连接建立成功后，会进行一系列的业务操作，我们选择将 WS-Gateway 和 WS-API 之间的操作指令和必要的参数放到 Kafka 的 Headers 中，例如通过 X-XX-Operator 为广播，再读取 X-XX-Guid 文件编号，对该文件内的所有用户进行消息推送。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;字段&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;X-ID&lt;/td&gt;&lt;td&gt;WebSocket ID&lt;/td&gt;&lt;td&gt;连接 ID&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;X-Uid&lt;/td&gt;&lt;td&gt;用户 ID&lt;/td&gt;&lt;td&gt;用户 ID&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;X-Guid&lt;/td&gt;&lt;td&gt;文件 ID&lt;/td&gt;&lt;td&gt;文件 ID&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;X-Inner&lt;/td&gt;&lt;td&gt;网关内部操作指令&lt;/td&gt;&lt;td&gt;用户加入、用户退出&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;X-Event&lt;/td&gt;&lt;td&gt;网关事件&lt;/td&gt;&lt;td&gt;Connect/Message/Disconnect&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;X-Locale&lt;/td&gt;&lt;td&gt;语言类型设置&lt;/td&gt;&lt;td&gt;语言类型设置&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;X-Operator&lt;/td&gt;&lt;td&gt;api 层操作指令&lt;/td&gt;&lt;td&gt;单播、广播、网关内部操作&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;X-Auth-Type&lt;/td&gt;&lt;td&gt;用户鉴权类型&lt;/td&gt;&lt;td&gt;SDKV2、主站、微信、移动端、桌面&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;X-Client-Version&lt;/td&gt;&lt;td&gt;客户端版本&lt;/td&gt;&lt;td&gt;客户端版本&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;X-Server-Version&lt;/td&gt;&lt;td&gt;网关版本&lt;/td&gt;&lt;td&gt;服务端版本&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;X-Push-Client-ID&lt;/td&gt;&lt;td&gt;客户端 ID&lt;/td&gt;&lt;td&gt;客户端 ID&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;X-Trace-ID&lt;/td&gt;&lt;td&gt;链路 ID&lt;/td&gt;&lt;td&gt;链路 ID&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Kafka Headers 中写入了 trace id 和 时间戳，可以追中某条消息的完整消费链路以及各阶段的时间消耗。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39869281045751637&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUEOT2YFHRKSE3ZeVib2tVfjW1d70V4oEiaLLgo97J0BkdqFTLGlv4wjsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.8 消息接收与发送&lt;/span&gt;&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Packet struct {&lt;br/&gt;  ...&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Connect struct {&lt;br/&gt;  *websocket.Con&lt;br/&gt;  send chan Packet&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;func NewConnect(conn net.Conn) *Connect {&lt;br/&gt;  c := &amp;amp;Connect{&lt;br/&gt;    send: make(chan Packet, N),&lt;br/&gt;  }&lt;br/&gt;  go c.reader()&lt;br/&gt;  go c.writer()&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; c&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;客户端与服务端的消息交互第一版的写法类似以上写法，对 Demo 进行压测，发现每个 WebSocket 连接都会占用 3 个 goroutine，每个 goroutine 都需要内存栈，单机承载连十分有限，主要受制于大量的内存占用，而且大部分时间 c.writer() 是闲置状态，于是考虑，是否只启用 2 个 goroutine 来完成交互。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Packet struct {&lt;br/&gt;  ...&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Connect struct {&lt;br/&gt;  *websocket.Conn&lt;br/&gt;  mux sync.RWMutex&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;func NewConnect(conn net.Conn) *Connect {&lt;br/&gt;  c := &amp;amp;Connect{&lt;br/&gt;    send: make(chan Packet, N),&lt;br/&gt;  }&lt;br/&gt;  go c.reader()&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; c&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;func (c *Connect) Write(data []byte) (err error) {&lt;br/&gt;   c.mux.Lock()&lt;br/&gt;   defer c.mux.Unlock()&lt;br/&gt;   ...&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; nil&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;保留 c.reader() 的 goroutine，如果使用轮询方式从缓冲区读取数据，可能会产生读取延迟或者锁的问题，c.writer() 操作调整为主动调用，不采用启动 goroutine 持续监听，降低内存消耗。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调研了 gev 和 gnet 等基于事件驱动的轻量级高性能网络库，实测发现在大量连接场景下可能产生的消息延迟的问题，所以没有在生产环境下使用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.9 核心对象缓存&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;确定数据接收与发送逻辑后，网关部分的核心对象为 Connection 对象，围绕 Connection 进行了 run、read、write、close 等函数的开发。使用 sync.pool 来缓存该对象，减轻 GC 压力，创建连接时，通过对象资源池获取 Connection 对象，生命周期结束之后，重置 Connection 对象后 Put 回资源池。在实际编码中，建议封装 GetConn()、PutConn() 函数，收敛数据初始化、对象重置等操作。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;var ConnectionPool = sync.Pool{&lt;br/&gt;   New: func() interface{} {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &amp;amp;Connection{}&lt;br/&gt;   },&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;func GetConn() *Connection {&lt;br/&gt;   cli := ConnectionPool.Get().(*Connection)&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; cli&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;func PutConn(cli *Connection) {&lt;br/&gt;   cli.Reset()&lt;br/&gt;   ConnectionPool.Put(cli) // 放回连接池&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.10 数据传输过程优化&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消息流转过程中，需要考虑消息体的传输效率优化，采用 MessagePack 对消息体进行序列化，压缩消息体大小。调整 MTU 值避免出现分包情况，定义 a 为探测包大小，通过如下指令，对目标服务 ip 进行 MTU 极限值探测。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; ping -s {a} {ip}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;a = 1400 时，实际传输包大小为：1428。其中 28 由 8（ICMP 回显请求和回显应答报文格式）和 20（IP 首部）构成。&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUTqENianXjaf1aQkCiaxl4I4DKUckHDS6icGR8eS1TibDXjTzCGvKEBrJKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.1437371663244353&quot; data-w=&quot;487&quot;/&gt;如果 a 设置过大会导致应答超时，在实际环境包大小超过该值时会出现分包的情况。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2964824120603015&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUanibVtjddpOZnDMCb6RYUFKb5MB6haVNh1aXFXNzaceWRlB3ic6bQ2lw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;398&quot;/&gt;在调试合适的 MTU 值的同时通过 MessagePack 对消息体进行序列号，进一步压缩数据包的大小，并减小 CPU 的消耗。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.11 基础设施支持&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 EGO 框架（ https://github.com/gotomicro/ego ）进行服务开发：业务日志打印，异步日志输出，动态日志级别调整等功能，方便线上问题排查提升日志打印效率；微服务监控体系，CPU、P99、内存、goroutine 等监控。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37745098039215685&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryU3mq3bRXQWOBtKqp3I9mMiaAS5ibj0vjPH9zNSMrRFCGlm1YT2I3kZtEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;客户端 Redis 监控：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42483660130718953&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUQreHIl5EXia8WCFaibwKOpbFEPAILPhjSCedIH6OQSoEKVaBYAGyO3fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;客户端 Kafka 监控：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41830065359477125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUTzGnJXMvAhq6w4mEZovNV9NSchQmFooLNVexkMvnrIpcsFy7IRNtLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自定义监控大盘：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5147058823529411&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUV6aozJeoz6DODC2iaHxyDHqAorBoCjpT6Tzljt2KeOj7biaeLHmEYEHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4 性能压测&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.1 压测准备&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;选择一台配置为 4 核 8G 的虚拟机，作为服务机，目标承载 48w 连接;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选择八台配置为 4 核 8G 的虚拟机，作为客户机，每台客户机开放 6w 个端口。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.2 场景一&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户上线，50w 在线用户。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;服务&lt;/th&gt;&lt;th&gt;CPU&lt;/th&gt;&lt;th&gt;Memory&lt;/th&gt;&lt;th&gt;数量&lt;/th&gt;&lt;th&gt;CPU%&lt;/th&gt;&lt;th&gt;Mem%&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;WS-Gateway&lt;/td&gt;&lt;td&gt;16 核&lt;/td&gt;&lt;td&gt;32G&lt;/td&gt;&lt;td&gt;1 台&lt;/td&gt;&lt;td&gt;22.38%&lt;/td&gt;&lt;td&gt;70.59%&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单个 WS-Gateway 每秒建立连接数峰值为：1.6w 个/s，每个用户占用内存：47K。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.3 场景二&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试时间 15 分钟，在线用户 50w，每 5s 推送一条所有用户，用户有回执。推送内容为：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;42[&quot;message&quot;,{&quot;type&quot;:&quot;xx&quot;,&quot;data&quot;:{&quot;type&quot;:&quot;xx&quot;,&quot;clients&quot;:[{&quot;id&quot;:xx,&quot;name&quot;:&quot;xx&quot;,&quot;email&quot;:&quot;xx@xx.xx&quot;,&quot;avatar&quot;:&quot;ZgG5kEjCkT6mZla6.png&quot;,&quot;created_at&quot;:1623811084000,&quot;name_pinyin&quot;:&quot;&quot;,&quot;team_id&quot;:13,&quot;team_role&quot;:&quot;member&quot;,&quot;merged_into&quot;:0,&quot;team_time&quot;:1623811084000,&quot;mobile&quot;:&quot;+xxxx&quot;,&quot;mobile_account&quot;:&quot;&quot;,&quot;status&quot;:1,&quot;has_password&quot;:true,&quot;team&quot;:null,&quot;membership&quot;:null,&quot;is_seat&quot;:true,&quot;team_role_enum&quot;:3,&quot;register_time&quot;:1623811084000,&quot;alias&quot;:&quot;&quot;,&quot;type&quot;:&quot;anoymous&quot;}],&quot;userCount&quot;:1,&quot;from&quot;:&quot;ws&quot;}}]&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试经过 5 分钟后，服务异常重启，重启原因是内存使用量到超过限制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7352941176470589&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUBIAFqSn4RzrqvU6zkRkIMgic7TDLQibEufcRLmK9Niaawfgl9EAVhMMEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;306&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7449664429530202&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUZjJV7FRWMSoMgW5mhu8kEIvAiciaOVNofVgLUgSibCmPmghcjHdXWiaUZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;298&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6387959866220736&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUeg9ictPibOgOXm31nbwjdcBCHE1PKjT6XZV1dlhjpwYrhB0SU7DZaMkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;299&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6405228758169934&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUXgO7iagiaKQuONfQFqh7yr1uarheCYbmA7YYhV3XhGK0vmD9x28yUGUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;306&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分析内存超过限制的原因：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3431372549019608&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUdrgbicOroozelvWgkQ4xPkXMpR0zU7K6dTmqrQBMKOCZcbJiagFmzDPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新增的广播代码用掉了 9.32% 的内存。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34477124183006536&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUia4804ez7GDs8nUSiaAmY8icg1WibiaOGfMXzmJ5y2nkbxVmicjGhWO0Ftmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接收用户回执消息的部分消耗了 10.38% 的内存。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34477124183006536&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUvC5Ezo7LlLxOibibjfLknLzvHJ3ZJBl5OKIf0EgBCoGibKTzMSgsOZeAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进行测试规则调整，测试时间 15 分钟，在线用户 48w，每 5s 推送一条所有用户，用户有回执。推送内容为：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;42[&quot;message&quot;,{&quot;type&quot;:&quot;xx&quot;,&quot;data&quot;:{&quot;type&quot;:&quot;xx&quot;,&quot;clients&quot;:[{&quot;id&quot;:xx,&quot;name&quot;:&quot;xx&quot;,&quot;email&quot;:&quot;xx@xx.xx&quot;,&quot;avatar&quot;:&quot;ZgG5kEjCkT6mZla6.png&quot;,&quot;created_at&quot;:1623811084000,&quot;name_pinyin&quot;:&quot;&quot;,&quot;team_id&quot;:13,&quot;team_role&quot;:&quot;member&quot;,&quot;merged_into&quot;:0,&quot;team_time&quot;:1623811084000,&quot;mobile&quot;:&quot;+xxxx&quot;,&quot;mobile_account&quot;:&quot;&quot;,&quot;status&quot;:1,&quot;has_password&quot;:true,&quot;team&quot;:null,&quot;membership&quot;:null,&quot;is_seat&quot;:true,&quot;team_role_enum&quot;:3,&quot;register_time&quot;:1623811084000,&quot;alias&quot;:&quot;&quot;,&quot;type&quot;:&quot;anoymous&quot;}],&quot;userCount&quot;:1,&quot;from&quot;:&quot;ws&quot;}}]&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;服务&lt;/th&gt;&lt;th&gt;CPU&lt;/th&gt;&lt;th&gt;Memory&lt;/th&gt;&lt;th&gt;数量&lt;/th&gt;&lt;th&gt;CPU%&lt;/th&gt;&lt;th&gt;Mem%&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;WS-Gateway&lt;/td&gt;&lt;td&gt;16 核&lt;/td&gt;&lt;td&gt;32G&lt;/td&gt;&lt;td&gt;1 台&lt;/td&gt;&lt;td&gt;44%&lt;/td&gt;&lt;td&gt;91.75%&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;连接数建立峰值：1w 个/s，接收数据峰值：9.6w 条/s，发送数据峰值 9.6w 条/s。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.4 场景三&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试时间 15 分钟，在线用户 50w，每 5s 推送一条所有用户，用户无需回执。推送内容为：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;42[&quot;message&quot;,{&quot;type&quot;:&quot;xx&quot;,&quot;data&quot;:{&quot;type&quot;:&quot;xx&quot;,&quot;clients&quot;:[{&quot;id&quot;:xx,&quot;name&quot;:&quot;xx&quot;,&quot;email&quot;:&quot;xx@xx.xx&quot;,&quot;avatar&quot;:&quot;ZgG5kEjCkT6mZla6.png&quot;,&quot;created_at&quot;:1623811084000,&quot;name_pinyin&quot;:&quot;&quot;,&quot;team_id&quot;:13,&quot;team_role&quot;:&quot;member&quot;,&quot;merged_into&quot;:0,&quot;team_time&quot;:1623811084000,&quot;mobile&quot;:&quot;+xxxx&quot;,&quot;mobile_account&quot;:&quot;&quot;,&quot;status&quot;:1,&quot;has_password&quot;:true,&quot;team&quot;:null,&quot;membership&quot;:null,&quot;is_seat&quot;:true,&quot;team_role_enum&quot;:3,&quot;register_time&quot;:1623811084000,&quot;alias&quot;:&quot;&quot;,&quot;type&quot;:&quot;anoymous&quot;}],&quot;userCount&quot;:1,&quot;from&quot;:&quot;ws&quot;}}]&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;服务&lt;/th&gt;&lt;th&gt;CPU&lt;/th&gt;&lt;th&gt;Memory&lt;/th&gt;&lt;th&gt;数量&lt;/th&gt;&lt;th&gt;CPU%&lt;/th&gt;&lt;th&gt;Mem%&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;WS-Gateway&lt;/td&gt;&lt;td&gt;16 核&lt;/td&gt;&lt;td&gt;32G&lt;/td&gt;&lt;td&gt;1 台&lt;/td&gt;&lt;td&gt;30%&lt;/td&gt;&lt;td&gt;93%&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;连接数建立峰值：1.1w 个/s，发送数据峰值 10w 条/s，出内存占用过高之外，其他没有异常情况。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7407407407407407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUdBzb2Le4Gbca1lsB7nic7A6xOXngiaicbXHJ8pvqWaibtZAeibqhcYfQTvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;297&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7433333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryU5MgVze1v21JcLThKLwxdwPf9b5RYekZ8UzQUcicY8oick2qibg55Eu2Lg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;300&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6633663366336634&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUIia9AWeniaeqfGrq4DKvo2BR4I4QuPjLSvkk7ibD7aCC8WPjbUETmzfYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;303&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6789297658862876&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryU6v9vtJibPpkTMzEI1BeBSyV3icPZTicoLr9pS14fY0YicRtNMow1dic1lgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;299&quot;/&gt;内存消耗极高，分析火焰图，大部分消耗在定时 5s 进行广播的操作上。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3464052287581699&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUOOwcxOpcLxVciboXtAgP9l0jXFFf1glMgEFNicecJP3KueIyJzJecIog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.5 场景四&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试时间 15 分钟，在线用户 50w，每 5s 推送一条所有用户，用户有回执。每秒 4w 用户上下线。推送内容为：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;42[&quot;message&quot;,{&quot;type&quot;:&quot;xx&quot;,&quot;data&quot;:{&quot;type&quot;:&quot;xx&quot;,&quot;clients&quot;:[{&quot;id&quot;:xx,&quot;name&quot;:&quot;xx&quot;,&quot;email&quot;:&quot;xx@xx.xx&quot;,&quot;avatar&quot;:&quot;ZgG5kEjCkT6mZla6.png&quot;,&quot;created_at&quot;:1623811084000,&quot;name_pinyin&quot;:&quot;&quot;,&quot;team_id&quot;:13,&quot;team_role&quot;:&quot;member&quot;,&quot;merged_into&quot;:0,&quot;team_time&quot;:1623811084000,&quot;mobile&quot;:&quot;+xxxx&quot;,&quot;mobile_account&quot;:&quot;&quot;,&quot;status&quot;:1,&quot;has_password&quot;:true,&quot;team&quot;:null,&quot;membership&quot;:null,&quot;is_seat&quot;:true,&quot;team_role_enum&quot;:3,&quot;register_time&quot;:1623811084000,&quot;alias&quot;:&quot;&quot;,&quot;type&quot;:&quot;anoymous&quot;}],&quot;userCount&quot;:1,&quot;from&quot;:&quot;ws&quot;}}]&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;服务&lt;/th&gt;&lt;th&gt;CPU&lt;/th&gt;&lt;th&gt;Memory&lt;/th&gt;&lt;th&gt;数量&lt;/th&gt;&lt;th&gt;CPU%&lt;/th&gt;&lt;th&gt;Mem%&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;WS-Gateway&lt;/td&gt;&lt;td&gt;16 核&lt;/td&gt;&lt;td&gt;32G&lt;/td&gt;&lt;td&gt;1 台&lt;/td&gt;&lt;td&gt;46.96%&lt;/td&gt;&lt;td&gt;65.6%&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;连接数建立峰值：18570 个/s，接收数据峰值：329949 条/s，发送数据峰值 393542 条/s，未出现异常情况。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7808219178082192&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUES5jdDy4UdROaYT6mIqibE0FDWBVAibmkOC2WZpTrz4qkITMDRGvh9ww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;292&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7829181494661922&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUaXkiceibHUdgiaicfNx2ex1aI4nN3UNjbgSCbRp1zd9Vb8QDX5FR2dBY2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;281&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6947368421052632&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryUkZI0MEOzjYF4aD6QFJdNZkiauV9gc5lhUIb05Lhiczuzoic9T0ibkC6bfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;285&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6949152542372882&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk5490xnS3lPgmdh7uGHsiaryU4M8ic6r3PT0stTibdpWFz2gd8f893zK5jke5datZtYiaM17jwRibrAr2PQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;295&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.6 压测总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 &lt;code&gt;16C 32G&lt;/code&gt; 内存的硬件条件下，单机 &lt;code&gt;50w&lt;/code&gt; 连接数，进行以上包括用户上下线、消息回执等四个场景的压测，内存和 &lt;code&gt;CPU&lt;/code&gt; 消耗都符合预期，并且在较长时间的压测下，服务也很稳定。满足目前量级下的资源节约要求，可在此基础上继续完善功能开发。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5 总结&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面临日益增加的用户量，网关服务的重构是势在必行，本次重构主要是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;对网关服务与业务服务的解耦，移除对 Nginx 的依赖，让整体架构更加清晰。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;从用户建立连接到底层业务推送消息的整体流程分析，对其中这些流程进行了具体的优化。以下各个方面让 2.0 版本的网关有了更少的资源消耗，更低的单位用户内存损耗、更加完善的监控报警体系，让网关服务本身更加可靠：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;可降级的握手流程；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Socket ID 生产；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端心跳处理过程的优化；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自定义 Headers 避免了消息解码，强化了链路追踪与监控；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息的接收与发送代码结构设计上的优化；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对象资源池的使用，使用缓存降低 GC 频率；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息体的序列化压缩；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;接入服务观测基础设施，保证服务稳定性。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;在保证网关服务性能过关的同时，更进一步的是收敛底层组件服务对网关业务调用的方式，从以前的 HTTP、Redis、Kafka 等方式，统一为 gRPC 调用，保证了来源可查可控，为后续业务接入打下了更好的基础。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6 Q&amp;amp;A&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;收录了部分文章相关内容的讨论问题：&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6.1 SocketID 存在的价值&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题：按照我的理解 &lt;code&gt;socketID&lt;/code&gt; 存在的价值是 Kafka 的消费者需要根据 &lt;code&gt;socketID&lt;/code&gt; 找到对应的tcp 链接，既然你们已经有了自定义网关，那么引入 kafka 的意义是什么？消息的持久化？为什么不在网关层做负载均衡，让节点直接跟客户端通信。另外我猜测消费发送者需要根据 &lt;code&gt;socketId&lt;/code&gt; 做 hash 然后发送到对应的 partition，一旦初始 partition 过小，进行扩容时，客户端和服务端都得进行重启或则升级，不知道引入 kafka 的意义在哪里，相反还极大的增加了架构的复杂度和维护成本，扩展性也没那么好，如果是 http 短链接还能理解。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;回答：图中没画出 SLB，是有负载均衡的。我们没有采用 socket id hash 到对应 partition，kafka 的作用是在处理网关内部的不需要关心顺序和推送消息的流转，如果没有kafka，那么组件或者网关滚动更新，用户重连的过程中，就可能丢消息；对于需要顺序的消息，例如 ping pong 模式的是可以通过网关识别到 header 头里的 cmd 信息，找到对应后端，分发消息。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6.2 Redis 进行消息广播的作用&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题：广播内容的数据量大小在 &lt;code&gt;1K&lt;/code&gt; 左右，业务场景简单固定，并且要兼容历史业务逻辑，最后选择了 &lt;code&gt;Redis&lt;/code&gt; 进行消息广播。&lt;code&gt;api&lt;/code&gt; 与网关交互不是通过 &lt;code&gt;kafka&lt;/code&gt; 吗，这里是什么意思呢？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;回答：网关节点对 &lt;code&gt;kafka&lt;/code&gt; 的消费是集群模式。如果 &lt;code&gt;kafka&lt;/code&gt;，在 &lt;code&gt;k8s&lt;/code&gt; 条件下，使用广播模式比较麻烦。所以老的网关是用 &lt;code&gt;redis&lt;/code&gt; 做 &lt;code&gt;pub/sub&lt;/code&gt; 的广播，为了兼容老的逻辑仍然采用 &lt;code&gt;redis&lt;/code&gt; 做广播。同时后续我们打算直接将 &lt;code&gt;api&lt;/code&gt; 和 &lt;code&gt;ws&lt;/code&gt; 做两两互联，通过 &lt;code&gt;grpc stream&lt;/code&gt; 做广播，有更好的扩展性。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7 技术链接&lt;/span&gt;&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;微服务框架：https://github.com/gotomicro/ego&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka、Redis、MySQL 客户端监控 SDK：https://github.com/gotomicro/ego-component&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-darkmode-color-16057140139831=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(0,0,0)&quot; data-style=&quot;padding-right: 10px; padding-left: 10px; color: rgb(0, 0, 0); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; letter-spacing: 0px; text-align: left; white-space: normal; font-size: 16px; line-height: 1.6; word-break: break-word;&quot; data-darkmode-color-16072568501583=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(0, 0, 0)&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section label=&quot;Copyright © 2016 playhudong All Rights Reserved.&quot; donone=&quot;shifuMouseDownPayStyle(&#x27;shifu_t_042&#x27;)&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;Node 社群&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;89226&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我组建了一个氛围特别好的 Node.js 社群，里面有很多 Node.js小伙伴，如果你对Node.js学习感兴趣的话（后续有计划也可以），我们可以一起进行Node.js相关的交流、学习、共建。下方加 考拉 好友回复「Node」即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YBFV3Da0NwsF7OKB4iaaXAzQPbNstk2LybA0Zz5I1hiaiazE9W7WH2Ojt2dibDODWMVUmHqgfXCefVwt7z5ibNMWLvg/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;578.2649006622516&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;700.2119205298013&quot; data-fileid=&quot;100016913&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2093425605536332&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YBFV3Da0NwvFQgO67XibvUG5S2UMXwCghOuJvE8BFRzUXnCAfWXkU1qHld6Ly9xiarib3siaWicJWJ0U3lI8kSgD38w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-style=&quot;padding-top: 8px; padding-bottom: 8px; color: rgb(89, 89, 89); line-height: 26px;&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;&lt;span&gt;如果你觉得这篇内容对你有帮助，我想请你帮我2个小忙：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;1. 点个&lt;/span&gt;&lt;span&gt;「在看」&lt;/span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;，让更多人也能看到这篇文章&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;2. 订阅官方博客 &lt;/span&gt;&lt;span&gt;www.inode.club &lt;/span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;让我们一起成长&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0557a766a9ab81e8eff46889d6f0111c</guid>
<title>[推荐] 我做基础架构学到的42件事</title>
<link>https://toutiao.io/k/k6tjws1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.562962962962963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hBL5R2neMA0j12Nst4bfv3gk0Qato1iaGibd2e4wLCXa8rvRc7cwRgn2lRRE0szMKsXrG2Mw8icSgcIOE7oQF4FQw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h3 data-sourcepos=&quot;3:1-3:13&quot;&gt;译者序&lt;br/&gt;&lt;/h3&gt;&lt;p data-sourcepos=&quot;5:1-5:411&quot;&gt;最近读到了分布式系统研究者 Mahesh Balakrishnan 的一篇博客《42 things I learned from building a production database》。同样做基础架构，看完大佬总结的经验后拍案叫绝，其中有几条简直是真知灼见，故翻译了全文。&lt;/p&gt;&lt;blockquote data-sourcepos=&quot;7:1-7:193&quot;&gt;&lt;p data-sourcepos=&quot;7:3-7:193&quot;&gt;Mahesh Balakrishnan 是 Facebook Delos 项目的负责人。Delos 对标 ZooKeeper，关于 Delos 更多详细细节其团队已经发了两篇 paper，感兴趣的同学可以自行搜索。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-sourcepos=&quot;10:1-10:230&quot;&gt;&lt;strong&gt;译注&lt;/strong&gt;：IC = Individual Contributor，即独立贡献者，Facebook 开发团队的一个术语，&lt;strong&gt;指那些不是经理、不是 team leader、不是任何领导职位的编码人员&lt;/strong&gt;，可以理解为一线开发人员。&lt;/p&gt;&lt;p data-sourcepos=&quot;10:1-10:230&quot;&gt;&lt;span&gt;&lt;strong&gt;以下为正文：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-sourcepos=&quot;13:1-13:24&quot;&gt;对客户（用户）&lt;/h2&gt;&lt;p data-sourcepos=&quot;15:1-15:86&quot;&gt;（1）&lt;strong&gt;让你的客户开心；否则这篇文章的其余部分都无关紧要&lt;/strong&gt;。&lt;/p&gt;&lt;p data-sourcepos=&quot;17:1-17:163&quot;&gt;（2）要注意拥有正确数量的客户（刚开始时，就一个）和合适的客户（他允许你构建关键技术）；并小心地增加这个数字。&lt;/p&gt;&lt;p data-sourcepos=&quot;19:1-19:232&quot;&gt;（3）直接与客户对接。很多团队内部冲突可以通过一句“我刚才和客户谈过，他们说......”来解决。在做基础架构时，我们往往不需要猜测客户的需求，我们可以直接问他们。&lt;/p&gt;&lt;p data-sourcepos=&quot;21:1-21:187&quot;&gt;（4）但要意识到客户可能无法表达他们真正需要的东西；不要只看到需求的表面价值，而要花时间详细地理解他们的用例。阅读他们的代码。&lt;/p&gt;&lt;h2 data-sourcepos=&quot;23:1-23:15&quot;&gt;项目管理&lt;/h2&gt;&lt;p data-sourcepos=&quot;25:1-25:140&quot;&gt;（5）要有一个简单明了的使命宣言来表达你存在的理由。Delos 的宣言是：我们将成为 FB infra 的可靠基础。&lt;/p&gt;&lt;p data-sourcepos=&quot;27:1-27:181&quot;&gt;（6）反复进行任务难度的评估；决策者可能没有时间、倾向、上下文或培训来进行评估，而且可能会把它们弄错（简直是）几个数量级。&lt;/p&gt;&lt;p data-sourcepos=&quot;29:1-29:252&quot;&gt;（7）对 IC 的任务分配很关键; 要求自己处于任何决策的关键路径上，因为你通常比经理更了解问题、代码库和 IC 们的优势。如果你和其他 IC 自己解决任务分配问题，大多数经理都会很高兴。&lt;/p&gt;&lt;p data-sourcepos=&quot;31:1-31:52&quot;&gt;（8）Road-map 是一种手段，而不是目的。&lt;/p&gt;&lt;p data-sourcepos=&quot;33:1-33:215&quot;&gt;（9）如果你有好的和/或一致的经理，要尽可能地理解、支持和包容。如果你没有这样的经理人......好吧，我还没有想明白这个问题，如果你想明白了，请告诉我。&lt;/p&gt;&lt;p data-sourcepos=&quot;35:1-35:325&quot;&gt;（10）使你的项目对组织架构调整有足够的鲁棒性，一个公司的管理层级本质上是脆弱的（毕竟，树是一个单连接的图）；不断地与未来可能接手这个项目的经理进行交流。&lt;strong&gt;不惜一切代价，确保经理人的变动不会给 IC 们带来不公平的职业结果&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-sourcepos=&quot;37:1-37:215&quot;&gt;&lt;p data-sourcepos=&quot;37:3-37:215&quot;&gt;通常来说，公司组织架构调整是非常频繁的，经常一年就会调整一次，确保经理人的变动不会带来不公平的职业结果，这点其实很难（我也很想知道怎么做到）。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-sourcepos=&quot;39:1-39:232&quot;&gt;（11）追踪类似的功能在你所在领域的其他项目中花费了多长时间，并以此作为任务难度评估的依据(例如，“功能 X 在系统 Y 中花了 3 年时间；这不是一个 IC 的一半工作”）。&lt;/p&gt;&lt;h2 data-sourcepos=&quot;41:1-41:9&quot;&gt;设计&lt;/h2&gt;&lt;p data-sourcepos=&quot;43:1-43:107&quot;&gt;（12）对 API 要保守，对实现要宽松(Be conservative on APIs and liberal with implementations)。&lt;/p&gt;&lt;p data-sourcepos=&quot;45:1-45:80&quot;&gt;（13）但要坚持谨慎地推出新的实现（灰度、分阶段推出）。&lt;/p&gt;&lt;p data-sourcepos=&quot;47:1-47:335&quot;&gt;（14）设计 API 时，写代码完成第一个实现(implementation)；积极计划第二个实现；并希望/祈祷事情将在第三个实现中发挥作用。（When designing APIs, write code for one implementation; plan actively for the second implementation; and hope/pray that things will work for a third implementation.）&lt;/p&gt;&lt;p data-sourcepos=&quot;49:1-49:206&quot;&gt;（15）设计 API 时，首要考虑向新实现的迁移；自定义迁移会造成巨大的时间消耗且不可靠。每个主要的 API 都应该有一个单一的 CLI 驱动的调用来切换实现。&lt;/p&gt;&lt;p data-sourcepos=&quot;51:1-51:187&quot;&gt;（16）作为一个团队去设计；作为个人实现(Design as a team; implement as individuals)。这将使设计成为瓶颈，但这是值得的：抵制并行化设计的冲动。&lt;/p&gt;&lt;p data-sourcepos=&quot;53:1-53:276&quot;&gt;（17）对于存储系统，&lt;strong&gt;在开始时就要重点关注一致性和持久性，而不是可用性；一致性和持久性更难衡量，如果出问题也更难修复&lt;/strong&gt;。由于可用性更容易衡量，所以会有外部压力要求优先考虑它；推到后面去。&lt;/p&gt;&lt;p data-sourcepos=&quot;55:1-55:181&quot;&gt;（18）在测试中维护 API 的多个实现；比较它们之间的结果。这样做的代价是值得的（这将有助于正确性，也可以防止实现细节的泄露）。&lt;/p&gt;&lt;p data-sourcepos=&quot;57:1-57:306&quot;&gt;（19）对设计进行后期绑定（Late-bind）：鼓励团队思考整个设计空间，而不是承诺使用某个特定的解决方案。与一群高智商、有主见的 IC 们一起开头脑风暴会议是一门值得掌握的艺术。鼓励在设计的关键路径上进行粗略的原型设计。&lt;/p&gt;&lt;p data-sourcepos=&quot;59:1-59:102&quot;&gt;（20）对实现者进行后期绑定：一旦设计完成，任何 IC 都应该能够编写代码。&lt;/p&gt;&lt;p data-sourcepos=&quot;61:1-61:179&quot;&gt;（21）拥有适当数量的抽象（这很难）。太少了，你会得到一个混乱的单体；太多了，团队会被理解每个抽象的语义的认知开销所淹没。&lt;/p&gt;&lt;p data-sourcepos=&quot;63:1-63:132&quot;&gt;（22）&lt;strong&gt;避免使用实时性来保证正确性或在机器间比较时钟，除非你有（并理解）时钟的错误界限&lt;/strong&gt;。&lt;/p&gt;&lt;p data-sourcepos=&quot;65:1-65:98&quot;&gt;（23）有一个单一的真理来源。在各种类型的状态之间建立简单的不变量。&lt;/p&gt;&lt;p data-sourcepos=&quot;67:1-67:144&quot;&gt;（24）创造一种文化，让 IC 不断地思考完全不同的设计；不要停止关于假设性替代设计的对话。鼓励好奇心。&lt;/p&gt;&lt;p data-sourcepos=&quot;69:1-69:141&quot;&gt;（25）了解你的 SKU。云计算使人们很容易忽视硬件；但对硬件（和硬件趋势）的理解对设计来说至关重要。&lt;/p&gt;&lt;h2 data-sourcepos=&quot;71:1-71:14&quot;&gt;Code Review&lt;/h2&gt;&lt;p data-sourcepos=&quot;73:1-73:118&quot;&gt;（26）在一个具有快速评审周期的透明代码库中，除非你把关，否则 API 会泄露实现细节。&lt;/p&gt;&lt;p data-sourcepos=&quot;75:1-75:204&quot;&gt;（27）鼓励 IC 对 diffs 进行批判性的思考，并创造一个人们可以自由表达的环境。作为 diffs 作者，你对指出 diffs 问题的人的反应应该是感激，而不是沮丧。&lt;/p&gt;&lt;p data-sourcepos=&quot;77:1-77:149&quot;&gt;（28）对于关键组件，考虑非正式的规则，例如要求两个接受（即两个 LGTM）或甚至是某个子集的 IC 的一致接受。&lt;/p&gt;&lt;p data-sourcepos=&quot;79:1-79:356&quot;&gt;（29）对于关键组件，落地时间不是衡量其重要性的标准：抵制衡量这一标准和优化它的冲动。创造一种让 IC 可以接受 diffs 不能快速落地的文化（创造性的工作——书籍、论文等等——由于高质量 review 的成本，通常需要漫长的 review 周期；为什么代码应该有所不同？）&lt;/p&gt;&lt;p data-sourcepos=&quot;81:1-81:368&quot;&gt;（30）有时候，你只有在一个 IC 写出了一个候选的设计方案后才意识到这个设计是正确的。要抵制说“哦，好吧，让我们先落地，然后再修复它”的冲动；你这样做对 IC 和项目都没有帮助。创造一种文化，让 IC 感觉到如果这不是正确的解决方案，就可以丢弃代码（以身作则）。&lt;/p&gt;&lt;h2 data-sourcepos=&quot;83:1-83:9&quot;&gt;策略&lt;/h2&gt;&lt;p data-sourcepos=&quot;85:1-85:253&quot;&gt;（31）以某种节奏问自己：为什么这个团队/项目会存在？如果它不存在，会发生什么（哪个其他团队/系统会填补这个空白）？该团队是如何为公司增加价值的，以及它如何在未来继续这样做？&lt;/p&gt;&lt;p data-sourcepos=&quot;87:1-87:427&quot;&gt;（32）跟踪公司内你所在领域的每个其他主要项目：你应该能够比他们自己的 IC 更好地解释他们的技术设计。抓住任何机会去与其他类似项目的负责人辩论项目范围：你应该能够阐明你的项目如何适合更大的生态系统。团队间的竞争是健康和必要的。与这些项目中的 IC 交朋友：他们比公司里的其他人更了解你的技术挑战。&lt;/p&gt;&lt;p data-sourcepos=&quot;89:1-89:251&quot;&gt;（33）不要在原始性能或效率上与其他团队竞争；这将升级为一场军备竞赛，两个团队都会浪费时间为工作负载优化他们的系统，产生苹果与橘子的比较，等等。在基本设计特性上进行竞争。&lt;/p&gt;&lt;p data-sourcepos=&quot;91:1-91:119&quot;&gt;（34）如果客观上有人在你的使用场景有更好的系统，并想接手它，那就去找别的事做吧。&lt;/p&gt;&lt;h2 data-sourcepos=&quot;93:1-93:15&quot;&gt;可观测性&lt;/h2&gt;&lt;p data-sourcepos=&quot;95:1-95:50&quot;&gt;（35）测量是一种手段，而不是目的。&lt;/p&gt;&lt;p data-sourcepos=&quot;97:1-97:77&quot;&gt;（36）你应该能够在你的客户之前发现你的服务中的问题。&lt;/p&gt;&lt;p data-sourcepos=&quot;99:1-99:261&quot;&gt;（37）在尽可能的情况下，可观察性应该在 API 之上，并在实现(implementations)之外。这可以确保你可以切换实现并比较性能，而不会在测量代码中引入错误。它还可以简化实现；并降低新实现的门槛。&lt;/p&gt;&lt;p data-sourcepos=&quot;101:1-101:125&quot;&gt;（38）任何不容易测量的东西（例如，一致性）往往被遗忘；要特别注意那些难以测量的属性。&lt;/p&gt;&lt;p data-sourcepos=&quot;103:1-103:176&quot;&gt;（39）尽可能将关键的检查（例如一致性）推到部署本身；尽量减少对外部服务的检查（否则你现在有两件事要跟踪，而不是一件）。&lt;/p&gt;&lt;h2 data-sourcepos=&quot;105:1-105:9&quot;&gt;研究&lt;/h2&gt;&lt;p data-sourcepos=&quot;107:1-107:224&quot;&gt;（40）追踪你所在领域的研究成果。很快你就会和你的 IC 有一个速记，可以实现超快的沟通。&quot;如果我们尝试项目 X 中的那个东西呢？并将其与项目 Y 中的技术相结合？&quot;。&lt;/p&gt;&lt;p data-sourcepos=&quot;109:1-109:221&quot;&gt;（41）尝试新事物。在可行的解决方案内，偏向于新的东西。抵制逐字逐句地复制设计的冲动。每一个重要的系统在某些时候都只是某人头脑中的一个半生不熟的想法。&lt;/p&gt;&lt;p data-sourcepos=&quot;111:1-111:380&quot;&gt;（42）写论文。为那些对你正在做的事情没有任何背景的听众写作，将迫使你检查和澄清你的假设。论文可以使你更容易雇用到优秀的人才，也更容易让他们上岗。研究生应该能够向你解释你的设计（并发现错误！）。当被要求做讲座时，尽量答应。它们很有趣，而且你可以认识新的人。&lt;/p&gt;&lt;hr/&gt;&lt;p data-sourcepos=&quot;113:1-113:74&quot;&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;113:1-113:74&quot;&gt;&lt;em&gt;原文：&lt;/em&gt;&lt;em&gt;https://maheshba.bitbucket.io/blog/2021/10/19/42Things.html&lt;/em&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;欢迎关注我的公众号：&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwODA2NjIxOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA0g3RQ9bRYaJib92ovwsSB9pPup1lt5cB24cJVJia1dc3Nr2kFSBHsJq5HL9DcLhoAGribSBvHU7ZzjA/0?wx_fmt=png&quot; data-nickname=&quot;多颗糖&quot; data-alias=&quot;duoketang&quot; data-signature=&quot;一名系统研究者的攀登之路&quot; data-from=&quot;1&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9225824c7f1078a0ef4ba20afeb9fbd9</guid>
<title>[推荐] 如何撰写好技术方案设计-真实案例干货分享</title>
<link>https://toutiao.io/k/t1d9x3b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;一、 前言&lt;br/&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一个技术开发者，特别是高级、资深开发、架构师等，往往会遇到根据需求撰写技术方案。那么如何撰写一篇好的技术方案设计，我们今天就来聊一聊这个话题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;二、 技术方案是否有必要&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是肯定的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我见过太多由于前期规划不到位（甚至是没有技术方案设计，开个技术讨论会口头沟通一下，就直接评工期开干的），这其中不乏很重要，工期很长的项目。而最后呢，到联调阶段各组串不起来，更可笑的是，产品和产品同学之间都没沟通清楚。导致最终很被动，到处挖坑补洞，而且花费了更多的时间和精力，甚至导致项目延期，后续扩张性不强等等问题。 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我认为，技术方案是必不可少的一个环节。往往很多坑在这个阶段就可以避免的。 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;古人云:&quot;磨刀不误砍柴工&quot;，技术方案就是磨刀的过程。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.282339707536558&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67WicOEAfAcyiaosXCicREoJVkCPrLdvThA88KIdpqSibJ3aiatGQqWRxbwfJ6kicGjaxZk3kSUCB5yUnWLOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;889&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;方案设计&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;三、 如何写好技术方案&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;要贴合需求，满足需求是大方向。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;可实施。要考虑当前条件下是否可落地，如：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;团队人员接受能力:技术选型的时候，要考虑团队成员接受能力，盲目引入新技术，可能造成不可预知的问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;时间成本:  一般来说Java 或者 PHP 后端项目(c语言项目可能会做一年甚至更长时间)，3个月时间周期算是比较长的了，假如按照此方案，需要半年甚至更长时间，那可能也不切实际。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;资源成本: 例如，项目可能需要引入Redis，Mysql，ES， MongoDB 等基础资源，那公司是否能提供这些资源(服务器是要钱的)。如果不能，在写技术方案时候，可能就需要考虑是否有替代方案。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;应急处理&amp;amp;可靠性保障
只要人能想到的问题，就一定会发生，不能有侥幸心理。所以要做好出现问题的应对策略，这里就必须做好如：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;四、技术方案模板&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是我总结的技术方案设计模板，希望对大家所有帮助。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、背景&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前的背景现状，简要说明以往业务所遇到的问题，给出本次项目迭代的原因，解决的技术痛点或业务痛点&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、目标&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过次方案要达到什么样的业务指标，例如，支撑多少QPS，性能相比现在提升多少倍，为后期水平扩展做铺垫&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3、整体方案&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1)架构图
2)流程图
3)时序图
4)调用链路图&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4、存储设计&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如Mysql表结构设计，缓存设计，ES存储设计等等，说明Schema、字段类型、默认值、描述信息等。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5、接口定义&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;列举出接口的结构，参数，返回值等&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6、灰度方案&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按什么方式灰度，如何做灰度方案，用表格的形式列出分几个阶段灰度，每个阶段大概时间多长。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7、降级方案&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当出现问题如何降级操作，如何回滚。将风险降到最低程度。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;8、关联系统(功能)影响&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重点需要各组注意的地方，相关人员需要特别关注，一一确认到位&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;9、资源分配情况&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;人力资源: 实现方案需要多少人力投入(开发人力，测试人力，运维人力)等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;硬件资源: 实现上述方案，列举需要哪些物理机器资源，运维人员需提前准备。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;10、预估工期及时间节点&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;列举出工期及关键时间节点，如，什么时候联调，什么时候提测，什么时候开始灰度上线，以及后续的迭代完善计划等。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;五、温馨提示&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我也给大家总结了我之前做系统重构写的技术方案设计文档（线上真实版本，已脱敏)，给大家总结了2套， 有需要的朋友可以公众号后台留言&quot;方案&quot;即可获取，也欢迎有兴趣的朋友一起交流学习。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67WicS8obXBjC9RqxibSJcgOsnicwSlKjFSxuEECwjZjYS8Y9zpmCdyv6z4yeSicSQSDNz2XUzRppBjuGXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>