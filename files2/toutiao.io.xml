<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>7c0d1705613a8c647790eeb3c956fa9a</guid>
<title>一年之计在于春！周末别闲着！</title>
<link>https://toutiao.io/k/32pyr3x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>082b56a83f77a5c414ae3d91f28a0ff1</guid>
<title>【真实案例】程序设计的陷阱-警惕大块数据</title>
<link>https://toutiao.io/k/423ti1x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;无论是架构还是程序的设计，往大的方面说，逃不过&lt;/span&gt;&lt;strong&gt;&lt;span&gt;分治、分类&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的范畴。&lt;/span&gt;&lt;span&gt;微服务是一种分治的思想；&lt;/span&gt;&lt;span&gt;service mesh是一种分治的思想；&lt;/span&gt;&lt;span&gt;G1是一种分治的思想；&lt;/span&gt;&lt;span&gt;大数据是一种分类的思想；&lt;/span&gt;&lt;span&gt;领域划分是一种分类的思想……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据大了会遇到问题，比如经典的redis的大key问题。遇到这类问题，主流解决方案是两个。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一个是限制，比如超过多大就不处理了，只提示错误。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4225865209471767&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9csr5bLvWohaeCrKicQzMduqIgVnHOpIglV2eFJ0nSsHOMicxJiatUyW5CAicuyh7x3BiamO9vzic3zy0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;549&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;另外一个是分治，将数据分片处理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果这两个都没做？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRl9csr5bLvWohaeCrKicQzMduhPoHiaGlJ34oicSSrTOUQKCAPjiat0CJrOhpMq9hKuNl0ialbcF09Gg82Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;案例一：请求超时了&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先回顾&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485729&amp;amp;idx=1&amp;amp;sn=325d273617410e48e3e8c1d8a103421c&amp;amp;chksm=fafde38fcd8a6a99b1c79a1b6bfd7d29cb925be129c2ad2608f28b7e93fb414384c5838568bd&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《近期做的稳定性建设总结》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《近期做的稳定性建设总结》&lt;/a&gt;里的一个案例：收到一个可用内存不足10%的告警，经过了两个小时才自动恢复到87%，所在的机器出现一笔请求超时。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;现象&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、对业务进行了解发现开始出现问题的时间点，有收到外部MQ发过来的大块数据。虽然&lt;span&gt;大块数据&lt;/span&gt;做了分片，但是每个分片还是有几M大并且下发条数多，集中下发。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、分别在问题机器和其他相同应用的不同机器上执行top命令，观察到问题机器和其他机器上jvm内存占用差不多并且稳定。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、执行free -h命令观察到&lt;span&gt;机器可用内存7.6G，&lt;/span&gt;cache/buffer下降到1G以下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4、&lt;span&gt;收到外部MQ发过来的&lt;span&gt;大块数据&lt;/span&gt;&lt;/span&gt;时间段网卡占用情况从平时0.5M以下飙升到20M/S。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5、&lt;span&gt;出现一笔请求超&lt;/span&gt;&lt;span&gt;时正在下发&lt;span&gt;大块数据&lt;/span&gt;的高峰期，请求方发请求到机器接收到请求时间间隔是几毫秒。收到请求后机器会将请求转发给MQ，用了3秒多。而请求方设置了5秒超时。&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;6、所有环节cpu使用率都很低。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;7、20天前在另外一台机器上也发生了内存升高到90%以上的现象。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;总结来说：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;MQ集中接收10M内的大块数据，&lt;/span&gt;JVM内存占用正常，操作系统内存占用升高，网卡流量20M/S。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;此问题的根本原因是外部短时间内下发大量&lt;span&gt;大块数据&lt;/span&gt;(受节假日影响当天的&lt;span&gt;大块数据&lt;/span&gt;略高于其他天)，从根本上治理需要和外部(大佬级别，我们完全没有主动权)一起进行架构方面的调整，不现实也没有必要用此牛刀。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;表现为虚机层面内存资源不足，影响了IO速率。因为高峰IO 20M/S，针对现在的千兆网卡、万兆网卡来说，并不大。问题并不在网络通道上，而在机器本身。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我写网络通信和linux操作系统系列也有一段时间了，大家可以用这个实际问题来小试牛刀。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486658&amp;amp;idx=1&amp;amp;sn=0067e6d161c0acac5cf20fda6231f692&amp;amp;chksm=fafde66ccd8a6f7a62114ebf73963d09253cb94bb8d47acea955f4b9bfacc37dfcb1ff22e4a5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《深入浅出操作系统的零拷贝》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《深入浅出操作系统的零拷贝》&lt;/a&gt;中，我发起了一个投票：&lt;span&gt;使用零拷贝最少要进行几次拷贝？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;36%的人答对了，是2次。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;零拷贝如果只是从磁盘发送到网络，最低可以只用2次DMA拷贝，也就是内核空间拷贝。&lt;/span&gt;&lt;span&gt;但是实际情况是大多数场景，数据都需要回到用户空间进行数据处理，所以都需要3次以上。&lt;/span&gt;&lt;span&gt;加上数据往往进来还要出去。&lt;/span&gt;&lt;span&gt;所以10M的大块数据处理过程占用的内存是数倍于10M的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以最终我们提申请进行了纵向扩容。&lt;/span&gt;&lt;span&gt;纵向扩容说白了就是增加物理内存。&lt;/span&gt;&lt;span&gt;有人就要问了是不是扩机器数量也能解决问题。&lt;/span&gt;&lt;span&gt;这种处理方式大概是能治病但是不一定对症。&lt;/span&gt;&lt;span&gt;意思可以理解为吃广谱抗菌药来治疗感冒，有一定帮助但不是针对性的处理。&lt;/span&gt;&lt;span&gt;因为扩机器是减少了请求数从而减少了内存占用量。&lt;/span&gt;&lt;span&gt;但是万一有个大请求就是把内存飚高了呢？&lt;/span&gt;&lt;span&gt;并且扩内存实施成本更低，不需要程序的发布。&lt;/span&gt;&lt;span&gt;就是低峰期暂停程序，插个内存条。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;经过半年多的验证，超时再没有发生过，说明我们的处理方式是对症的。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;案例二：内存达到95%&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;生产环境有个不太核心的服务，共三台机器，一台机器内存达到95%。这个服务分成定时任务和实时请求处理两部分，其实定时任务流量占比居多，实时请求很少。所以我们将这台机器隔离掉定时任务。也就是说定时任务只走另外两台。目前内存稳定在95%，但是内存达到这么高的原因需要找到。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;服务的定时任务部分是调用RPC接口获取数据，之后RPC或者http请求发送到别处。每次处理的数据大小在几K。实时请求部分有个是处理文件上传的，文件的大小不固定，几M，几十M都是有可能的。这种请求一般情况下1天十笔，但是不固定。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;现象&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;1、使用pmap -x java程序进程号 命令，发现大量anon块，举例如下：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;b7f0a000 8 rwx-- 00000000b7f0a000 000:00000 [ anon ]&lt;/span&gt;&lt;br/&gt;&lt;span&gt;b7f20000 8 rwx-- 00000000b7f20000 000:00000 [ anon ]&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、这个服务除了内存使用达到95%的这台机器，另外一台达到了93%，还有一台89%。备用机房的机器(无定时任务，也不接受实时请求)内存占用基本都是86%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;用pmap -x 查到的anon，中文叫匿名块。是通过malloc或mmap分配的“大”块。Java直接申请的堆内存之外的块就是堆外内存了。我查了代码，这个服务不涉及到数据库操作，没有使用guava等直接内存的。最有可能产生堆外内存的地方是&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486564&amp;amp;idx=2&amp;amp;sn=7ebfa62b34c22dd6c8170e67784d43dd&amp;amp;chksm=fafde6cacd8a6fdc4bded6a9bebe05bbac49cea08e06deb20d4a6d7ea1fe26864088b8857f83&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;nio&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;nio&lt;/a&gt;(使用了netty、jetty)。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;这个问题本来不是我在查，另外两个同事在做。但是一直没有结论，我就进行了介入。同事一直的思路是要找到内存泄露的地方。我分析可能不是内存泄露，因为最近几个月内存没有再增长。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;我任务运行的这半年内，有段时间可能有人批量上传大文件。&lt;span/&gt;&lt;span&gt;文件上传到哪台服务器是随机的，占用内存高的机器很有可能是当时处理的文件大或者多。&lt;/span&gt;&lt;span&gt;因为过去了快半年了，日志都清理了，我没有办法找到直接的证据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;同事还是想排查内存泄露问题。给出两个理由：第一，把定时任务停掉的机器最近内存稳定不再增长了。第二，他查了最近的日志，文件大小都在几M，而内存高的机器要内存使用高出了几百M。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;我的答复：内存不再增长与定时任务停掉未必是因果。也可能是最近再也没有如此大块或大量的文件上传。另外，程序没有做限制，最近只有几M未必几个月前没有更的文件上传。另外，案例一里也说了，如果文件大于十几兆，其使用的内存要多出好几倍。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;同事觉得有道理，决定下周进行测试环境模拟验证，结果究竟如何呢？咱们来猜一猜。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span class=&quot;vote_area&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;如果你的服务要处理大数据，但是又不想使用分治引入程序的复杂性，那么在申请机器的时候，要增加足够的内存冗余！&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有的朋友会觉得这个处理方式并不高大上。牛逼的处理方式是排查到内核层，调整个linux参数啥的。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;不推荐！&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;原因如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;现在也算比较流行的一个词叫做：不可变服务器。&lt;span&gt;“传统”的部署方式中，对系统的改动都会呈现在服务器上，从而增加了风险。&lt;/span&gt;&lt;span&gt;采用不可变部署方式，&lt;/span&gt;服务器都是公司统一标准化的，那么变更只要考虑应用程序的发布，而应用程序一旦发布也不允许改变，就成了不可变服务。不可变性可以增加系统的稳定性。在一个规模比较大的公司，就算可以通过技术解决资源的问题，从整体角度，还是通用方案更加可取。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外补充一个小知识：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;使用pmap -x 命令查看内存地址的时候要注意起始地址：&lt;br/&gt;&lt;/section&gt;&lt;section&gt;64位的linux系统，对于虚拟地址空间的划分，将0x0000,0000,0000,0000 – 0x0000,7fff,ffff,f000这128T地址用于用户空间；而0xffff,8000,0000,0000以上的128T为系统空间地址。&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fee8b6db022c7061a4a4f7b8f04f5487</guid>
<title>快手OneService平台架构设计与实践</title>
<link>https://toutiao.io/k/dan1u1w</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYxkw9GLfNhQnxkEomrViaARtOPtmMiaNp28HBYXtsx1Qkiajcz0efuyk3Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;300&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;关注快手大数据&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt; 获取大数据资讯&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4259259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbY8obcA8X9XkicfNBc0JZaC9qLXrHCic8Ie4GNg5YfQ1Ssia6f3PzjGIekw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;导 读&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;本文主要介绍&lt;strong&gt;快手建设数据服务OneService平台的经验&lt;/strong&gt;。&lt;/span&gt;&lt;span&gt;OneService是一站式自助数据服务化平台，作为低代码平台，它能帮助用户零门槛创建、管理和运维API服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本文源自倪顺老师在『&lt;span&gt;&lt;strong&gt;快手大数据｜数据中台技术交流会&lt;/strong&gt;&lt;/span&gt;』上的演讲，相关视频回放可用&lt;strong&gt;快手APP搜索“快手大数据”&lt;/strong&gt;观看。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;本次分享分为五个部分：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;OneService平台建设背景&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;平台架构设计和关键技术&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;平台的可用性和效能建设之路&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;落地成果&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;未来规划&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、OneService平台建设背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;快手是一家数据驱动的公司，每日新增数据量在PB级别。快手有很多业务如电商直播等会产生巨量数据，这些数据形成数据资产，最终被包装成数据服务，从而再次被业务所使用。数据服务由此构建了数据与业务之间的服务通道。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据服务是数据中台的一部分。数据中台从数据流向角度来讲，包含3个环节：&lt;/p&gt;&lt;p&gt;1）进：数据通过同步方式进入到数据中台；&lt;/p&gt;&lt;p&gt;2）产：数据通过离线和实时进行二次加工生产；&lt;/p&gt;&lt;p&gt;3）出：数据经由数据服务流出中台而服务于各类应用。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3990741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbY1qZ3G3r9ZSYdkPUCQcnAhTESeSGxEVjgibDS8OIBSja03pYITqXE2Iw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;快手于2017年开始建设数据服务平台，整体流程是手工式且流程较长。业务提完数据访问需求后，接着由数仓DE加工符合要求的数据表，然后他还要提JIRA工单描述把该数据表服务化，接着由数据后台研发同学手工开发、部署服务并且交付SDK给业务。总结起来有三个方面的痛点：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3935185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYiaVWbLIo5dth9CAAzNXtg9PGZ0BOsFsnamofG7eeHJZ9wOFruM5X0JQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;针对这些痛点，快手解决方式是引入 Kwai OneService 平台，它是一站式自助数据服务化平台，以低代码的方式来提供多样化的服务能力。通过它，能够帮助用户0门槛创建、管理和运维API服务。它采用了“配置即开发”的设计理念，允许用户通过配置化方式生成API数据服务，用户只需根据自己业务逻辑配置API而无需编写任何代码，其他技术相关复杂实现，包括数据服务代码生成、数据服务部署、缓存管理、服务降级、服务权限管控等均由平台完成。Kwai OneService平台真正实现了“数据复用而非复制”，也大大降低了API服务创建门槛，提升了API服务开发效率。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYhde19xZmFE3JYB5oGQA4hibYhX74L5go82mY5Diapl9TycwtSibxZLCzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;基于 Kwai OneService 平台的新开发模式，就更加简洁了。早期流程中的复杂逻辑，包括提工单、手工开发、部署服务、交付SDK等环节，均涵盖在该平台内部自动化实现。该平台主要有2类用户：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbY5gaveHicPSXJhFycJeTic4H4Xhr88yAxOMODMRsG1ODicjTyTDRIZ24MQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;二、平台架构设计和关键技术&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;01 OneService平台技术架构&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;快手 OneService 平台的技术架构如下图所示。从下到上，分为三层，包括数据开发层、数据服务层、数据应用层。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5814815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYOM6ZrZGaczaAicup9dev1CbQvs6u8drj65HQI873Jiaaukw7OpHGOnVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;数据开发层中，DE同学通过离线和实时开发方式，从ODS表中加工出富有业务价值的数据资产，这些资产通常是按主题域方式呈现，如消费者数据、直播数据、电商数据等等。资产数据通常存储于离线的HIVE表中，读写速度相对较慢。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据服务层，是 OneService 平台核心技术部分，分为左右两部分。左侧是服务生成引擎，他的职责是针对用户提交的每个API创建，来自动化生成客户端代码和自动化部署对应服务端。右侧是生产完的服务的调用链路。调用链路，可细分为四层，从下往上看，数据资产表在经历数据质检后，从读写速度慢的大数据仓库加速到更快的存储介质中，如Redis、Hbase、CH以及快手自研的存储引擎。基于这一层异构存储引擎之上，构建了统一查询层，从而服务于多种不同场景的接口。面向不同业务场景，沉淀的数据服务接口模板较多，包括：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;KV API：点查类API，适合点状精确查询数据场景&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;SQL API：&lt;/span&gt;&lt;span&gt;类SQL API，适合灵活多维查询数据场景&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;模板 API：&lt;/span&gt;&lt;span&gt;模板式查询接口，适合固化的多条件查询场景&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;OneAPI：&lt;/span&gt;&lt;span&gt;统一查询接口，提供统一的DSL来查询前面各类场景数据&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;公共接口：&lt;/span&gt;&lt;span&gt;特定垂直领域沉淀的接口，如One ID 接口，地理位置查询等接口&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;02 关键技术 - API矩阵&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;OneService平台的第一个关键技术是API矩阵。API矩阵是指，平台面向不同的数据服务业务场景，而沉淀下来的API创建模板或者API类型。API类型非常多，我们将API类型从两个维度来划分，一是查询灵活度，二是查询速度，每个象限中都有API分布。用户在平台创建API时，可根据自己的需求，从对应象限中寻找符合自己场景的API。此外，针对单类API，面向不同的业务使用场景时，还可做到定制化，如设置数据压缩、热点数据加速等特性，从而更好满足业务需求。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4268519&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbY8ukCEkj3fZb9a2jv6ECY8nW2l8Y9B3rf8DDgwnpFksMJtauSAKckpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;本文选取三类典型的API类型介绍：&lt;/p&gt;&lt;p&gt;1. KV API：KV API 底层基于KV 引擎，如Redis、Hbaes、Pika 等，因此取数很快，且可支撑百万QPS。KV API消息是基于Protobuf，传输效率也非常高。用户在使用时，拿到的结果对象也是基于PB（结果集是自动ORM），因此在编码时也很方便。典型使用场景包括用户标签查询、IP查询等点查类场景。&lt;/p&gt;&lt;p&gt;2. SQL API：SQL API底层基于OLAP引擎，如Clickhouse、Druid 等，其支持的查询速度相对慢一些，不过能够支持更加灵活自由的查询条件。SQL API提供了Fluent API风格的接口，调用者可在select中自行传入要查询的字段信息，也可在where方法中自由构造多种嵌套的过滤查询条件。SQL API典型使用场景是支持数据BI看板。&lt;/p&gt;&lt;p&gt;3. Template API：Template API 和 SQL API 类似，底层也是基于Clickhouse、Druid等，不过有个较大区别点是用户在使用Template API时，查询模板是预定义在服务端，然后在客户端动态传入参数变量，后台将模板和变量组合成完整语句查询。其典型场景和SQL API类似。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4175926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYBFlAWmIQjsrqL42M3AQ9mD26SOlCmT7zJTUtTviaFDxknWTplUUIIxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;03 关键技术 - 配置即开发&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;OneService平台的第二个关键技术是「配置即开发」的设计理念。早期快手建设数据服务依赖于手工开发，而「配置即开发」意味着，用户只需要配置好一个API，就相当于开发一个API接口。基于这个设计理念，用户通过平台创建API，主要包含三个阶段：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;1. 配置 API：配置创建API的必要信息，包括数据底表来源、接口本身形态（RPC or HTTP）、是否需要批量访问数据、访问QPS范围、测试链路独立数据源等等。&lt;/p&gt;&lt;p&gt;2. 自动生产接口：OneService平台根据前面的 API 配置信息，自动化生成客户端接口以及自动部署服务端。在不需要用户参与的情况下，后台自动化去做好数据加速、数据服务接口生成、接口验证、测试环境配置、接口上线和上架等操作。&lt;/p&gt;&lt;p&gt;3. 使用接口：待 OneService 平台自动化创建 API 接口之后，调用者只需要在平台上申请接口权限，即可在测试环境和正式环境访问数据。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4425926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYQqEojoSicaIpUGQDS7rwngsbVrdZiclVAHdDCGvA0z6lPUibfdYibxSvRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;上述三个阶段中，对用户提效最大的是第二阶段，即自动生产接口。这也是「配置即开发」的核心落脚点。OneService 平台自动化生产包括三个主要步骤：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. 基于Code Generation的客户端自动化生成&lt;/strong&gt;：用户提交的 KV API 创建申请，后端根据其配置详情信息，来生成 Java 代码，并且自动发布 SDK。该 Java 接口针对每个业务是定制化的，使用体验更好。除了 KV API 之外，针对 SQL API创建申请，后端无需再次创建定制化的Java 接口，用户是使用统一的固定的预先开发好的 Java 接口来访问 SQL API数据。未来趋势是，OneService 平台提供一个统一的接口，来应对所有类型的场景。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. 热部署轻量虚拟服务&lt;/strong&gt;：KV API / SQL API 客户端的请求打到后端，会有对应的虚拟服务处理。虚拟服务保留了API粒度的处理逻辑，如数据存储地址、读取方式、解析逻辑等，由于其非常轻量，因此也可以动态迁移到其他物理集群上，来动态平衡流量和服务压力。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 数据加速&lt;/strong&gt;：由于数据资产主要存储于离线存储体系，读取速度较慢，因此需要进行数据加速，将数据以一次性或者周期性的方式加速到高速存储引擎，包括 KV 引擎或者 OLAP 引擎中。虚拟服务可直接从高速引擎中取数。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3805556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYgtfTJaicO89TDO6DB1fV2j7BHzx6963B3WicIzI5ZiabBTjB5DRAIm0yg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;04 关键技术 - 统一查询平台&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;由于平台内存在多种 API ，每类 API 都有可能查询到 Redis、Hbase、Druid、Clickhouse 等引擎，因此存在一定的重复建设，此外还有除了 OneService 平台之外的其他应用也可能查询这些引擎，因此快手沉淀了统一查询平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;统一查询平台对下屏蔽了各类异构引擎的复杂性，对上服务了KV API、SQL API 甚至外部应用等多种场景。统一查询平台内部提供了两类查询语法：1）OneSQL，以SQL子集定义了一套可查询KV、OLAP、OLTP 等引擎的语法；2）OneDSL，以自定义DSL来支持各类引擎原生的查询语法，可最大化发挥查询能力。查询平台执行模式也有多种，可类比Spark，有Local、Standalone、Cluster模式，以支持不同场景的查询诉求。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3722222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYiaRDGe6f37oYiaQlLoUd4fMLoZbgk5AibdmId6rLBNAEtCYHyiadRice5Wg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;查询平台执行流程如下。网关层主要负责安全和流量管控，具体执行计划解析后会发往对应模式（Local、Standalone、Cluster）节点上执行。针对 Standalone 和 Cluster 模式，执行节点可回取从多类引擎读到的数据，并且进行二次加工合并处理。最终将结果发送给客户端也有两种方式，其一是针对小数据量时直接以同步方式返回，其二是针对大量结果数据则以异步方式返回数据。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4157407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYJ2Az3HaMARZejlibbt1rfFKq7EznANhAjiabzKC2fUEkY5ibNgVmDnLiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;三、平台的可用性和效能建设之路&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;OneService 平台从 2019 年开始建设以来，快手除了建设平台功能，还花费较多精力建设平台稳定性和平台效能。第一，OneService 平台连续参加快手2020、2021元旦春节活动，因此平台本身的稳定性需要达到在线业务很高的可用性要求。第二，OneService 平台随着用户越来越多，规模越来越大，对自身性能和效率有更高的要求。本节就高可用建设和高效能建设两方面进行介绍。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;01 高可用性建设&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;OneService 平台在保证高可用时，遇到较多挑战，包括：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;服务繁多：服务数量达到数以千计，平台总QPS接近2千万级，且服务类型较多，所需保障方式也各有差异。这对于平台的保障挑战就非常大，包括QPS管控方式能够应对突发高流量。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;业务重要：平台上有90%都为在线类业务场景，他们直接承载B端或者C端用户的访问流量，因此需要平台有常态的高可用保障能力。此外平台上的部分服务还直接承载核心活动场景，如发红包、留存推送、集卡活动、年度总结活动等。此类活动相关API 对于平台也提出了更高的可用性要求。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;外部依赖：作为数据服务平台，他还依赖了较多外部组件，如各类存储引擎、配置分发服务、鉴权服务等，一旦某些组件出现问题，则用户数据访问都有可能失败，因此 OneService 需要有充足设计应对外部组件失败。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;特殊保障：如前所述，部分 API 如活动相关 API，对于保障手段方面还有些特殊的要求，比如数据加速完成时间监控、数据存储使用率监控等，这要求平台能提供定制化的保障能力。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;基于这些挑战，OneService 平台的可用性建设思路是：&lt;/p&gt;&lt;p&gt;1）首先在事前积极做好可用性建设，功能设计和开发要保证鲁棒性，通过分级部署等思路将线上问题影响面局部化；&lt;/p&gt;&lt;p&gt;2）事中通过全面报警来及时发现问题，从而快速介入解决问题，故障的自主发现率是衡量全链路报警的关键指标之一；&lt;/p&gt;&lt;p&gt;3）事后需要通过多种方式及时止损，包括降级限流，避免事态严重化。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.462963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYlkKmpibhQYXW6Bowj63xgJVQBTxrBzCN5Yl5aCQNa7n9ong1qQIdCFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;下面介绍两项关键的高可用建设经验。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;第一项是分级隔离&lt;/strong&gt;&lt;span&gt;。OneService 平台有千级服务接口数，业务方希望各自的接口互相不影响，且同一个业务线内部的不同优先级的接口也希望互不影响。为了达到这一目标，快手将大一统的部署模式转换为按舱位部署。快手将微服务和存储按业务加优先级的二维粒度进行切分，形成多个舱位，这些舱位物理隔离单独部署，因此互不影响。统一舱位空间，可能对应有多个服务接口，则可按需进一步做硬隔离或者混合部署以提升资源使用率。通过这种方式，OneService 平台从未发生过影响所有 API 服务接口的故障。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4259259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYQyI86Xa4KibcBSZEKiaW8teHMPVLyoUuf8Aibib6mKS4icf2o2bA32gmv1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;第二项是限流降级&lt;/strong&gt;。OneService 的核心链路中组件涵盖客户端、服务端、外部核心依赖、数据存储引擎等。外部有多种情况都可能导致此链路出现稳定性问题，比如曾经有业务在压测时，出现热点key情况，QPS达到近10万，这对于底层Redis风险是比较大的。因此我们针对核心链路的各个环节都有应对预案。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;请求降采样和管控：服务端有异常请求采样逻辑，可在分钟级发现热点key、大value请求、大流量请求，一旦发现此类问题，平台管理员可在客户端侧和服务端侧来管控此类异常请求。具体管控策略多样，包括按比例直接阻断请求、请求按规则直接返回固定值、按并发度限制请求量等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;外部依赖降级：平台依赖了外部鉴权服务、配置分发服务等，平台在进行功能设计时，就需要考虑外部组件异常时的应对策略，如通过配置快照等方式来降级。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;存储引擎降级：存储引擎多数有主备实例 + 双机房的策略，来保障存储高可用。当然如果某类引擎不可用了，OneService 平台还可将数据资产同步至备选异构存储中，从而提供降级在线访问能力。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;核心链路较长，因此平台也需要有自动化的全链路监控方案来及时发现问题。全链路监控系统从三个角度出发监控：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4157407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYEiaUPV0fsjZ1a5w06XwmDhSbw2tO4ycN3fkfRq2T0Gmbsg3rFypvy6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;02 高效能建设&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;OneService 平台从 2019 年开始建设，系统目前已经进入到精细化发展的阶段，在本阶段中，平台更多会关注到提升效率、降低成本等内容，从而更好提升产品核心价值。由此出发，OneService 会不断提升API接口的业务覆盖度，从而赋能更多业务；此外平台还会持续优化已有流程，从成本和性能等方面着手提效。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.387037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYA4J9jhk0UibDRHODw8PsaM7uQXJdT6zAuKMWYJzrpqSIYhBWu8Kml6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;第一项经验是&lt;strong&gt;数据复用而非复制&lt;/strong&gt;的思路。早期数据服务建设，比较容易陷入到新需求直接复制数据，单独建设一整套链路接口，这带来成本浪费和治理困难等问题。通过“数据复用而非复制”，让业务方都通过已有接口来访问数据，可以更快满足业务需求，而且也提升了已有 API 的价值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;API在平台被创建后，进入到“上线状态”，此时 API 可以被同项目组的其他同学看到和使用。此时API 还可以上架到 API 市场，进入“上架状态”的 API ，可以被其他项目组的所有同学看到和使用。可以将 API 市场比喻成天猫、京东等商城系统，用户可以在 API 市场里进行搜索，可以看到 API 的商品详情，包括数据源、数据定义、接口定义、接口使用方式示例等，可直接按需申请权限访问。通过 API 市场，实现了“数据复用而非复制”，目前单 API 的调用方可达到数十个，极大提升了 API 的价值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3305556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYNumhsqUxdocDkXBeQPwoU83uxN8icE9N2drcUW2VuTViboHiaY8vgq54w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;第二项经验是&lt;strong&gt;提升性能&lt;/strong&gt;。OneService 平台生产的 API 接口本质上是基于数据引擎的服务，在某些场景下业务对于数据访问的性能要求非常高。比如用户画像系统，访问数据QPS非常大，且访问延迟要求非常小，通常要在1ms内。针对此类特定场景，OneService 平台推出了直连存储方案，它允许Client SDK跳过 Server 侧来直连 Redis 引擎。直连存储，相比于普通数据访问模式，延迟减少50%，且节省了大量服务端计算资源。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然，除了直连存储方案外，OneService 平台在生产 API 时，还提供了多级缓存配置选项。用户在配置 API 创建工单可根据业务场景来增选L0~L2级缓存。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4231481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYbeZtia3q7n8ZO8xEaKfjYZRMHUiaQ9jhiaWNaC0aRWMheRadXwpMbanKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;四、落地成果&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;从2019年建设 OneService 平台以来，平台已经逐步承载起越来越多的业务需求。在体量上，平台上的 API 接口数量达到一千以上，QPS达到近两千万，存储量级达到百TB，接入业务线数量为百级。在保障上，平台本身 KV API 延迟在毫秒级，核心服务可用性达到4个9，并且零故障的支持了较多重要活动，包括过去两年的元旦春节、电商节、奥运会等。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.437963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYp9WnoWkzxY5qej55Enq4emhpxCTyQ6zDHvcFUD5icdZ37sPNmVibzz4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;除了上述产品运营成果外，平台还有较多技术方面的沉淀。相比于2017年的数据服务开发流程，目前平台的新流程在效率上有极大提升，创建一个API从近9天降低到1天内。在成本方面，平台也通过多项综合措施，包括多样化存储、存储压缩、API治理等，最终节省了15%的成本。在质量方面，平台上的API彻底打通快手质检体系，也确保API都自动化纳入全链路监控中，自动360度监控服务健康。在通用能力方面，平台沉淀了多种能力，包括异常请求管控、统一查询平台、高可用保障等。未来参与活动的API，无需额外措施，平台即可自动高效保障接口的稳定性。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4564815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYu3HRjiaZYpiamfcKIM42l9zHI5FzhWUkICzYOh7BELka7NEGMbwib2iccA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;五、未来规划&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;OneService 平台未来会朝着“统一数据服务化平台” 演进，作为业务使用数据的主要入口，提供丰富多样的数据服务能力。平台一方面会继续深耕数据资产，随时准备支持有更多形态（如图数据）的资产，另一方面，也会不断去紧贴业务需求，不断沉淀业务需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;具体而言，分为四个方面建设未来平台的能力：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;基础能力：进一步扩展服务基础能力，如统一查询平台、统一数据集、统一指标服务等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;高阶能力：通过引入服务编排、函数计算等来构建更加灵活的服务能力，可支持服务定制化需求。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;产品效率：不断优化 OneService 平台，进一步提效，包括接口研发效率和运维效率。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;服务治理：通过引入智能化手段，来自动化提效服务治理和保障能力。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYFfQc0N786b6ZzOIuXMJdDtSsibKoa1WpFiaV2manXV0ibIeA6HNrzZQjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;作者简介：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;倪顺，快手大数据平台研发专家，5年数据开发经验，曾就职于HULU北京，负责快手API服务平台建设，主要关注数据中台领域、微服务领域技术。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9924528&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uBQWkS76AOuIK8nO4fJWQQciciaFgpYdbYHyIFG6ichdm79CHtUboflmFHKx57kYcZiaeH63ChuHicUC4wnZCGPvtwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;530&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;长按识别二维码关注『快手大数据』&lt;/p&gt;&lt;p&gt;查看交流会回放视频&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;分享、收藏、点赞，给个3连击吧！&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a17d0ec4db74f49b614408027f45edce</guid>
<title>深入理解Cache工作原理</title>
<link>https://toutiao.io/k/parigqh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;12&quot; data-source-title=&quot;&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;strong&gt;&lt;span&gt;来自：知乎，作者： 桔里猫&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;strong&gt;&lt;span&gt;链接：https://zhuanlan.zhihu.com/p/386919471&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;大家好，今天给大家分享一篇关于 Cache 的硬核的技术文，基本上关于Cache的所有知识点都可以在这篇文章里看到。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;关于 Cache 这方面内容图比较多，不想自己画了，所以图都来自《Computer Architecture : A Quantitative Approach》。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是一本体系架构方面的神书，推荐大家看一下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文主要内容如下，基本涉及了Cache的概念，工作原理，以及保持一致性的入门内容。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;300628150&quot; data-ratio=&quot;0.9854260089686099&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeISCoibVvMvdgFp8ueaZbvs9DV9GRHu8KvDZvgenoVY6meEY0z4ylw4ibbWSusE0UY6EhfCThbuZB9Rw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;892&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;1、为什么需要 Cache&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;1.1 为什么需要 Cache&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;我们首先从一张图来开始讲为什么需要 Cache.&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;300628147&quot; data-ratio=&quot;0.4843205574912892&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeISCoibVvMvdgFp8ueaZbvs9DZAoQBo0vvkxsq5PZMSNb7Jsz0WSsqvhUG10aXsa0uM8vgnV6DUYxxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;861&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;上图是 CPU 性能和 Memory 存储器访问性能的发展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们可以看到，随着工艺和设计的演进，CPU 计算性能其实发生了翻天覆地的变化，但是DRAM存储性能的发展没有那么快。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以造成了一个问题，存储限制了计算的发展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;容量与速度不可兼得。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如何解决这个问题呢？可以从计算访问数据的规律入手。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们随便贴段代码:&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;j&lt;/span&gt; &amp;lt; &lt;span&gt;100&lt;/span&gt;; &lt;span&gt;j&lt;/span&gt; = j + &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;    for( i = &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;i&lt;/span&gt; &amp;lt; &lt;span&gt;5000&lt;/span&gt;; &lt;span&gt;i&lt;/span&gt; = i + &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;        x[i][j] = &lt;span&gt;2&lt;/span&gt; * x[i][j];&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;可以看到，由于大量循环的存在，我们访问的数据其实在内存中的位置是相近的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;换句专业点的话说，我们访问的数据有局部性。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们只需要将这些数据放入一个小而快的存储中，这样就可以快速访问相关数据了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结起来，Cache是为了给CPU提供高速存储访问，利用数据局部性而设计的小存储单元。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;1.2 实际系统中的 Cache&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;我们展示一下实际系统中的 Cache 。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;300628149&quot; data-ratio=&quot;0.36259541984732824&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeISCoibVvMvdgFp8ueaZbvs9DJXaHIdXibibqqhoIMefdYacg0bkL56zic8ia0xHaRiczISb0C02jCcVuhWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1048&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;如上图所示，整个系统的存储架构包括了 CPU 的寄存器，L1/L2/L3 CACHE，DRAM 和硬盘。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据访问时先找寄存器，寄存器里没有找 L1 Cache, L1 Cache 里没有找 L2 Cache 依次类推，最后找到硬盘中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时，我们可以看到，速度与存储容量的折衷关系。容量越小，访问速度越快！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其中，一个概念需要搞清楚。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;300628146&quot; data-ratio=&quot;0.2884333821376281&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeISCoibVvMvdgFp8ueaZbvs9D2jdzwgnfkhMw3HAvQQ0AdDlepZ1oQorFjadqIwuJNwBtVY4Uz2zRAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;683&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;CPU 和 Cache 是 word 传输的，而 Cache 到主存是以块传输的，一块大约 64Byte 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现有 SOC 中的 Cache 一般组成如下。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;1.3 Cache 的分类&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;Cache按照不同标准分类可以分为若干类。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;按照数据类型划分：I-Cache与D-Cache。其中I-Cache负责放置指令，D-Cache负责方式数据。两者最大的不同是D-Cache里的数据可以写回，I-Cache是只读的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;按照大小划分：分为small Cache和large Cache。没路组（后文组相连介绍）&amp;lt;4KB叫small Cache, 多用于L1 Cache, 大于4KB叫large Cache。多用于L2及其他Cache.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;按照位置划分：Inner Cache和Outer Cache。一般独属于CPU微架构的叫Inner Cache, 例如上图的L1 L2 CACHE。不属于CPU微架构的叫outer Cache.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;按照数据关系划分：Inclusive/exclusive Cache: 下级Cache包含上级的数据叫inclusive Cache。不包含叫exclusive Cache。举个例子，L3 Cache里有L2 Cache的数据，则L2 Cache叫exclusive Cache。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;2、Cache的工作原理&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;要讲清楚 Cache 的工作原理，需要回答 4 个问题：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据如何放置&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据如何查询&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据如何被替换&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果发生了写操作，Cache如何处理&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;&lt;span&gt;2.1 数据如何放置&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;这个问题也好解决。我们举个简单的栗子来说明问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设我们主存中有 32 个块，而我们的 Cache 一共有 8 个 Cache 行( 一个 Cache 行放一行数据）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设我们要把主存中的块 12 放到 Cache 里。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;那么应该放到 Cache 里什么位置呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;三种方法：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;全相连（Fully associative）。可以放在Cache的任何位置。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;直接映射（Direct mapped）。只允许放在Cache的某一行。比如12 mod 8&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;组相连（set associative）。可以放在Cache的某几行。例如2路组相连，一共有4组，所以可以放在0,1位置中的一个。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;可以看到，全相连和直接映射是Cache组相连的两种极端情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不同的放置方式主要影响有两点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、组相连组数越大，比较电路就越大，但Cache利用率更高，Cache miss发生的概率小。2、组相连数目变小，Cache经常发生替换，但是比较电路比较小。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这也好理解，内存中的块在Cache中可放置的位置多，自然找起来就麻烦。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;2.2 如何在Cache中找数据&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;其实找数据就是一个比对过程，如下图所示。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;300628148&quot; data-ratio=&quot;0.15698587127158556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeISCoibVvMvdgFp8ueaZbvs9DsJjFRtgG4wE0Ul7uibZ85tf9uxRVMH1QSTxuSvTvmjB9pfThc3cyvIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;637&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;我们地址都以 Byte 为单位的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但主存于Cache之间的数据交换单位都是块（block，现代Cache一般一个block大约64Byte)。所以地址对最后几位是block offset。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于我们采用了组相连，则还有几个比特代表的是存储到了哪个组。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;组内放着若干数据，我们需要比较Tag, 如果组内有Tag出现，则说明我们访问的数据在缓存中，可以开心的使用了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如举个 2 路组相连的例子，如下图所示。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;484&quot; data-backw=&quot;578&quot; data-fileid=&quot;300628155&quot; data-ratio=&quot;0.8380566801619433&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeISCoibVvMvdgFp8ueaZbvs9DzXmOuURPoTiaFM08aZFpMagv5EFlxrickdliaNTbyia65TnyzwUYOcIrNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;741&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;T表示Tag。直接比较Tag，就能得知是不是命中了。如果命中了，则根据index(组号）将对应的块取出来即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如上图所示。用index选出位于组相连的哪个组。然后并行的比较Tag, 判断最后是不是在Cache中。上图是2路组相连，也就是说两组并行比较。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那如果不在缓存中呢？这就涉及到另一个问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不在缓存中如何替换 Cache ？&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;2.3 如何替换Cache中的数据&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;Cache中的数据如何被替换的？这个就比较简单直接。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;221&quot; data-backw=&quot;492&quot; data-fileid=&quot;300628152&quot; data-ratio=&quot;0.4491869918699187&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeISCoibVvMvdgFp8ueaZbvs9D0vk82sQ7cJpS2YkWNdBczWkicxZef3EL134AI5YbV20ic66xVhBmlTBA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;492&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;随机替换。如果发生Cache miss里随机替换掉一块。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Least recently used. LRU。最近使用的块最后替换。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;First in, first out (FIFO), 先进先出。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;实际上第一个不怎么使用，LRU 和 FIFO 根据实际情况选择即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Cache 在什么时候数据会被替换内？也有几种策略。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不在本 Cache 替换。如果Cache miss了，直接转发访问地址到主存，取到的数据不会写到Cache.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在读MISS时替换。如果读的时候Cache里没有该数据，则从主存读取该数据后写入Cache。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在写MISS时替换。如果写的时候Cache里没有该数据，则将本数据调入Cache再写。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;&lt;span&gt;2.4 如果发生了写操作怎么办&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;Cache毕竟是个临时缓存。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果发生了写操作，会造成Cache和主存中的数据不一致。如何保证写数据操作正确呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也有三种策略。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;307&quot; data-backw=&quot;414&quot; data-fileid=&quot;300628151&quot; data-ratio=&quot;0.7415458937198067&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeISCoibVvMvdgFp8ueaZbvs9DfPeC8oj2a6xTsqah1RQROwO4FXVUjWDHUwr2vGqcIbqRl2aXyD196w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;414&quot;/&gt;&lt;/p&gt;&lt;section/&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;300628153&quot; data-ratio=&quot;0.22712933753943218&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeISCoibVvMvdgFp8ueaZbvs9DYCYJIMWoQgKhL0Ft7ERS6xbuhgW9wnFNO27AUsYNZE2KPQRCGJqeog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;3、Cache一致性&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Cache 一致性是 Cache 中遇到的比较坑的一个问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;什么原因需要 Cache 处理一致性呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主要是多核系统中，假如core 0读了主存储的数据，写了数据。core 1也读了主从的数据。这个时候core 1并不知道数据已经被改动了，也就是说，core 1 Cache中的数据过时了，会产生错误。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Cache一致性的保证就是让多核访问不出错。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;300628154&quot; data-ratio=&quot;0.20462046204620463&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeISCoibVvMvdgFp8ueaZbvs9DCvFNAFnsUnibiaTlaQ6YB6iap4qXHkWlzoIVlV2bydJibCQhoSltvchK0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;606&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Cache一致性主要有两种策略。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;策略一：基于监听的一致性策略&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;这种策略是所有Cache均监听各Cache的写操作，如果一个Cache中的数据被写了，有两种处理办法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;写更新协议：&lt;/strong&gt;某个Cache发生写了，就索性把所有Cache都给更新了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;写失效协议：&lt;/strong&gt;某个Cache发生写了，就把其他Cache中的该数据块置为无效。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;策略 1 由于监听起来成本比较大，所以只应用于极简单的系统中。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;策略二：基于目录的一致性策略&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;这种策略是在主存处维护一张表。记录各数据块都被写到了哪些Cache, 从而更新相应的状态。一般来讲这种策略采用的比较多。又分为下面几个常用的策略。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;SI: 对于一个数据块来讲，有share和invalid两种状态。如果是share状态，直接通知其他Cache, 将对应的块置为无效。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;MSI：对于一个数据块来讲，有share和invalid，modified三种状态。其中modified状态表表示该数据只属于这个Cache, 被修改过了。当这个数据被逐出Cache时更新主存。这么做的好处是避免了大量的主从写入。同时，如果是invalid时写该数据，就要保证其他所有Cache里该数据的标志位不为M，负责要先写回主存储。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;MESI：对于一个数据来讲，有4个状态。modified, invalid, shared, exclusive。其中exclusive状态用于标识该数据与其他Cache不依赖。要写的时候直接将该Cache状态改成M即可。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;我们着重讲讲 MESI。图中黑线：CPU的访问。红线：总线的访问，其他Cache的访问。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;715&quot; data-backw=&quot;578&quot; data-fileid=&quot;300628156&quot; data-ratio=&quot;1.236323851203501&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeISCoibVvMvdgFp8ueaZbvs9De8CFY6Liaic7IWP21mJ1nxP5NOn8vdTxXKv2a9EgllT3kG60Bg0qT2ibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;457&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;当前状态时I状态时，如果发生处理器读操作 prrd。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当前状态为S态。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果发生了处理器读操作，仍然在S态。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果发生了处理器写操作，则跳转到M状态。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果其他Cache发生了写操作，跳到I态。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;当前状态E态&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;发生了处理器读操作还是E。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;发生了处理器写操作变成M。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果其他Cache发生了读操作，变到S状态。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;当前状态M态&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;4、总结&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Cache 在计算机体系架构中有非常重要的地位，本文讲了 Cache中最主要的内容，具体细节可以再根据某个点深入研究。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;--- EOF ---&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;推荐↓↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA5MTgwOTMzMQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/iawSlOAmgP0QN1GotokJSFQk5NtNIRDl4IqVZf4h6MOTYYUlVUtTIEg9CU85ficczjFThpGNhEia7rmrGA387EstA/0?wx_fmt=png&quot; data-nickname=&quot;计算机工作原理&quot; data-alias=&quot;CoderNews&quot; data-signature=&quot;计算机组成原理、计算机系统架构、操作系统原理、编译原理等计算机原理的内容分享。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>455d8a37703a60c3944c157f55bc1952</guid>
<title>开源｜一个在 Go 语言环境中完全自主实现的第三方内存管理库</title>
<link>https://toutiao.io/k/e67h112</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;以下内容选自「码农周刊 VIP 会员」圈子，每日更新，精彩不断。&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;XMM 是一个在 Go 语言环境中完全自主实现的第三方内存管理库，不依赖于 Go 本身的任何内存管理能力，纯自主实现的 Go 内存管理库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;XMM 能够应对各种场景下大小内存的分配/释放/管理等工作，能够帮助适用于任何复杂数据结构的构建（链表/数组/树/hash 等场景），能够良好完美的逃逸掉 Go 内置的 GC 机制，保证程序的超高性能，是构建高性能程序基础设施。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;1090&quot; data-ratio=&quot;2.6693333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/t8lpVibticjQ6JVUE4AL3r0BuibLXiawFl4wqTXulowcfnysq5B4miaefxk22aF46aHFUd7eECOWoDVGtJyYH6vbSrw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>