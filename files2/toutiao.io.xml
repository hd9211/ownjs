<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>c1bf9befbcadf5ec933309b56cc85bdf</guid>
<title>Go 和 Golang 有什么关系？</title>
<link>https://toutiao.io/k/onfjmvl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近天气也冷了，掐指一算是招聘季了，无论是校招、社招、HR、面试官们都蠢蠢欲动。这不，我有一个朋友的 HR 朋友都有起名困难了，一看 Go 语言的工作说明（Job Description），发现各有不同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6884422110552764&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibNl4L6EcicIRaBmAQW6EIoVMrAKZodtMibk833yqe3lAGqATibHclgbFWBA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1592&quot;/&gt;&lt;figcaption&gt;来自某招聘网站&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;仔细一看，有叫 Go 的，也有叫 Golang，还有叫 GO 的。好家伙，Go 语言有这么多个别名，&lt;span&gt;为什么要叫 Golang，&lt;/span&gt;甚至某乎都讨论了起来。到底叫什么是正确的？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为此，今天就由煎鱼带大家理一理，了解这背后的关系。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Go 官方定义&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从网上的资料来看，大家对 Go 的名字还是比较关注的，对于 Go 团队来讲，仿佛经常被问。例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;“Go 和 Golang 的关系是什么？”&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;“Go、Golang、GO 哪个对？”&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;甚至在之前探讨 Go2 草案时，也有人开始起 Go2 的名字了，纠结是要叫 “golang2”，还是 “go2lang”：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5091210613598673&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibNVJzotEeFPbUtZ7cq6J5F454h3ILoQEM3eEV7aCDAicjiaQjzFwkibcyug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1206&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这是错误的。在 Go FAQ 中有明确的回答这个问题：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.19905771495877503&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibNtSQ3oLOqmn6UiakpiaLgRjGL44OCfdHrxR6ohyMNntVrOPYGvyrhBDQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1698&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一门语言称为 “Go”，不叫 “Golang”，也不叫 “GO”。“golang” 只是网站的地址，而不是语言的名称。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时 “GO” 的语言名称叫法也是错误的，虽然官方上的 Logo 是 “GO”：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4028056112224449&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibN6L3nTElAFkYickrtXaicsvk1FwM8tbJKibkmN3LF2vkdSeFDWYMzJo8TQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;998&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但这显然只是设计师层面的美观考量，并不是这一门语言的标准定义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此&lt;strong&gt;这一门语言叫做 “Go” 语言&lt;/strong&gt;，这是正确的，也得到官方认证的，也不曾改变过。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;为什么会有 Golang&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但可能又有小伙伴疑惑了，那为什么 “Golang” 这个别名，如此之火。到底是为什么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里一共有三点原因，分别是：站点地址（Go FAQ 提到）、搜索引擎、社区和论坛、语言重名。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Go 站点地址&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 团队所期望的 https://go.org 早就被注册，从网站的底部标识来看，2008 年起建站：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.582&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibNhMF2Uw406ia8ia7842LfVhXwz5M6icMnMib4X9tISG6aRPz0NcQzek4ibzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2000&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以 Go 语言只能使用 https://golang.org，你也会 https://pkg.go.dev 和 https://golang.org、https://godoc.org，存在多个域名，并不统一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此作为 Go 开发者所常用官方站点，自然而然 golang 这一个语言标识就深深地被记住了，一直沿用至今。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时域名为 “golang” 关键字，自然会大幅度的影响到 Go 资料搜索引擎的收录，是一个非常重要的因素。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;搜索引擎&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在早年 Go 语言还不知名时，用 go 关键字去搜索资料会非常的困难。这是各大搜索引擎早年的一个槽点（reddit 很多吐槽）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为单一的 go 关键字过于广泛了，很多人会直接用 golang 关键字来搜资料，反而会更能看到一些与 Go 真正相关的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4784&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibNKFOkKOSumDUAgdxBU5UN9lKSpJrboIAYGpyFmzvoQy7mbVzsATlkYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2500&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一点在近年来有明确改善，得益于 Go 语言的崛起，现在也能搜到了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;社区和论坛&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在社区、论坛等，也有类似的问题。因为占位、重名、认知等原因。像是 segmentfault、twitter 叫 golang。掘金叫 Go，各有不同。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2838002436053593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibNUTbia1hkpW9qn3n0hjficMOYdiaFrYqOMwbJGk0ZNCb3zWnOFuWGJ1CFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1642&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这点难以改善，毕竟各家都是不同企业的。所以难受的点是用户，搜了 Go，可能搜不到，又跑去搜 Golang 才可以。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再看看国外的论坛，在 Google 群组 golang-nuts 和 golang-dev 也有类似偏差。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基本可以明确 &lt;strong&gt;“Golang” 更多会被用在搜索和标签上&lt;/strong&gt;，能够保证搜索和标签查询的结果。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;语言重名&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上在 Go 语言出现前，已经存在一门 “Go!” 的编程语言了。有网友表示这也是 Go 官方纠结的一点。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4557988645579886&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4ia0ZQoOp5NlCPw4xypGFuibNRk3xYxlTPjSa5pjLJQiarbCUBvDREk55YTJNficzegtC2vPNDZUC6Mhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2466&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过实际上编程语言重名并不少见，但由于真实性有待考量，建议仅是了解即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至少现在已经没有这门语言的命名之争。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以明确，官方诠释的正确名称为 Go。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但由于 go.org 域名的原因，
因此在 Go Programming Language 的通俗称呼下，采取了 golang 来作为 Go 站点、Google 群组的域名/组别等的建立。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 资料肯定都集中在官方站点、论坛，自然而然，大家用 “go” 关键字也就很难搜索到了，都得用 “golang” 关键字。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以明确，&lt;strong&gt;Go 是这一门编程语言的名字，Golang 更多是在搜索和标签上的使用&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这看上去，是搜索引擎的胜利，你觉得呢？：）&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4052deb51011ff0420e2aa137777dc47</guid>
<title>设计模式中的俄罗斯套娃：装饰者模式</title>
<link>https://toutiao.io/k/6huzufj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;blockquote&gt;&lt;p&gt;微信公众号：&lt;strong&gt;Java论道&lt;/strong&gt;&lt;br/&gt;关注定期分享Java技术文章，囊括Spring全家桶、Linux、架构设计、分布式、微服务、消息中间件、面试题等。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;俄罗斯套娃想必大家都不陌生，就是同一种玩具娃娃大的套小的，然后一层一层嵌套下去。&lt;/p&gt;&lt;figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100000139&quot; data-ratio=&quot;0.6111111111111112&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/qdfEUPqfXuxibV7hQ5icVJJ5TvtpWVeXXoVG6FMm0aSVGFqps2xiceP16XZOKNwhfTGHE3X5l5JVARuPRiaGqFIDXQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;俄罗斯套娃&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在设计模式中，有一种常用的套娃模式，叫做装饰者（Decorator）模式，又称为包装（Wrapper）模式。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;HttpServletRequest 套娃&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;在 Spring 框架开发的 Web 应用中，如果使用了 Spring Security 或 Spring Session，用 Debug 模式观察一下某个请求对应的 HttpServletRequest 对象，会发现这就是一个俄罗斯套娃：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100000140&quot; data-ratio=&quot;0.99&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qdfEUPqfXuxibV7hQ5icVJJ5TvtpWVeXXoOe5ZUNibQm22jPPyX6uAAf4YpL6FUQjibg2OjdgKpOzsTUUxmKAYOALA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;HttpServletRequest 对象&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;图中可以看到我们拿到的 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象，内部成员中包含了一个 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象，而这个内部的 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象内部又包含了一个 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象，层层包含，层层套娃。这就是一个典型的装饰者模式。&lt;/p&gt;&lt;p&gt;我们知道，&lt;code&gt;HttpServletRequest&lt;/code&gt; 是 Servlet 规范中提供的一个 interface 接口。Servlet 规范本身没有实现 &lt;code&gt;HttpServletRequest&lt;/code&gt; 接口，&lt;code&gt;HttpServletRequest&lt;/code&gt; 接口一般是由 Servlet 容器来实现，例如 Tomcat、Jetty。如果 Spring Security、Spring Session 等框架想要增强 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象的功能，但是不改变原有对象的接口，最好的办法就是使用装饰者模式。例如：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Spring Security 增强了 &lt;code&gt;HttpServletRequest.getRemoteUser()&lt;/code&gt; 方法，可返回当前通过 Spring Security 框架登录用户的用户名；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Spring Session 增强了 &lt;code&gt;HttpServletRequest.getSession()&lt;/code&gt; 方法，增强后的 Session 取代了 Servlet 容器的默认实现，其读写可以使用一个集中式的存储，例如 Redis，这样可以方便集群中的多个实例共享 Session。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;HttpServletRequestWrapper / ServletRequestWrapper&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;javax.servlet.http&lt;/code&gt; 包下有个 &lt;code&gt;HttpServletRequestWrapper&lt;/code&gt; 类，继承自 &lt;code&gt;ServletRequestWrapper&lt;/code&gt; 类。可以看到这两个类上的注释：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;翻译：这个类实现了装饰者模式/包装模式，方法模式会直接调用内部包装的 request 对象。&lt;/p&gt;&lt;p&gt;&lt;code&gt;ServletRequestWrapper&lt;/code&gt; 本身实现了 &lt;code&gt;ServletRequest&lt;/code&gt; 接口，它的构造方法要求传入另一个 &lt;code&gt;ServletRequest&lt;/code&gt; 对象，并将这个对象赋值给内部 request 对象：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ServletRequestWrapper&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ServletRequest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; ServletRequest request;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ServletRequestWrapper&lt;/span&gt;&lt;span&gt;(ServletRequest request)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (request == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;Request cannot be null&quot;&lt;/span&gt;);   &lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.request = request;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ServletRequestWrapper&lt;/code&gt; 对 &lt;code&gt;ServletRequest&lt;/code&gt; 接口方法的实现，则是直接调用内部 request 对象对应的方法：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; String getContentType() {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.request.getContentType();&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; ServletInputStream getInputStream() throws IOException {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.request.getInputStream();&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; String getParameter(String name) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.request.getParameter(name);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上就是一个最基本的装饰器。我们可以直接拿来套娃：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;HttpServletRequest request = ...; &lt;span&gt;// 已有的 request 对象&lt;/span&gt;&lt;br/&gt;HttpServletRequest requestWrapper = &lt;span&gt;new&lt;/span&gt; HttpServletRequestWrapper(request); &lt;span&gt;// 包装后的对象&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然，上面代码没有任何意义，因为 &lt;code&gt;requestWrapper&lt;/code&gt; 没有做任何扩展，使用 &lt;code&gt;requestWrapper&lt;/code&gt; 对象和直接用 &lt;code&gt;request&lt;/code&gt; 对象没有任何区别。真正的装饰者类会继承 &lt;code&gt;ServletRequestWrapper&lt;/code&gt; 并在此基础上做增强。&lt;/p&gt;&lt;p&gt;下面，我们再看下 Spring Security 和 Spring Session 如何对 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象进行装饰。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Spring Security / Spring Session 中的装饰者实现&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;在 Spring Security 文档 Servlet API integration 中，可以看到 Spring Security 框架对 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象的 &lt;code&gt;getRemoteUser()&lt;/code&gt;、&lt;code&gt;getUserPrincipal()&lt;/code&gt;、&lt;code&gt;isUserInRole(String)&lt;/code&gt; 等方法进行了增强，例如 &lt;code&gt;getRemoteUser()&lt;/code&gt; 方法可以直接返回当前登录用户的用户名。接下来看一下 Spring Security 如何增强这些方法。&lt;/p&gt;&lt;p&gt;首先，Spring Security 提供了一个过滤器 &lt;code&gt;SecurityContextHolderAwareRequestFilter&lt;/code&gt;，对相关请求进行过滤处理。这个 Filter 中创建了一个新的 &lt;code&gt;Servlet3SecurityContextHolderAwareRequestWrapper&lt;/code&gt; 对象，这个类继承自 &lt;code&gt;HttpServletRequestWrapper&lt;/code&gt; 类，并增强了相关方法。其父类 &lt;code&gt;SecurityContextHolderAwareRequestWrapper&lt;/code&gt; 类源码中可以看到对 &lt;code&gt;getRemoteUser()&lt;/code&gt; 方法的增强：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SecurityContextHolderAwareRequestWrapper&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HttpServletRequestWrapper&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getRemoteUser&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Authentication auth = getAuthentication();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; ((auth == &lt;span&gt;null&lt;/span&gt;) || (auth.getPrincipal() == &lt;span&gt;null&lt;/span&gt;)) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (auth.getPrincipal() &lt;span&gt;instanceof&lt;/span&gt; UserDetails) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; ((UserDetails) auth.getPrincipal()).getUsername();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (auth &lt;span&gt;instanceof&lt;/span&gt; AbstractAuthenticationToken) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; auth.getName();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; auth.getPrincipal().toString();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简单来讲，就是 Spring Security 通过一个 Filter 过滤相关请求，拿到原始的 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象，通过一个继承自 &lt;code&gt;HttpServletRequestWrapper&lt;/code&gt; 类的装饰者，增强了 &lt;code&gt;getRemoteUser()&lt;/code&gt; 等相关方法，再将增强后的对象传给后续的业务处理，那么后续我们在 Controller 层拿到的 &lt;code&gt;HttpServletRequest&lt;/code&gt; 对象就可以直接使用 &lt;code&gt;getRemoteUser()&lt;/code&gt; 等方法。&lt;/p&gt;&lt;p&gt;Spring Session 实现和 Spring Security 类似，这里就不再重复介绍，有兴趣可以看 &lt;code&gt;SessionRepositoryFilter&lt;/code&gt; 源码。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;Collections 中的装饰者&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;装饰者模式不但可以增强被装饰者的功能，还可以禁用某些功能。当然，禁用实际上也是一种“增强”。&lt;/p&gt;&lt;p&gt;例如，假设有一个 List，当我们需要将这个 List 传给第三方的某个方法去读，但是由于这个第三方方法不可信，为了防止这个方法对 List 篡改，可以通过装饰器模式禁用 List 的修改方法，装饰成一个只读的 List。&lt;/p&gt;&lt;p&gt;&lt;code&gt;java.util.Collections&lt;/code&gt; 中提供了一个静态方法 &lt;code&gt;unmodifiableList(List)&lt;/code&gt;，用于将一个 List 封装为只读的 List：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;List&lt;/span&gt;&amp;lt;String&amp;gt; &lt;span&gt;list&lt;/span&gt; = ...;&lt;br/&gt;&lt;span&gt;List&lt;/span&gt;&amp;lt;String&amp;gt; unmodifiableList = Collections.unmodifiableList(&lt;span&gt;list&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过这个方法的源码可以看到，&lt;code&gt;Collections.unmodifiableList(List)&lt;/code&gt; 方法实际上返回了一个 &lt;code&gt;UnmodifiableList&lt;/code&gt;。&lt;code&gt;UnmodifiableList&lt;/code&gt; 是一个典型的装饰者，其内部对 List 的读相关方法直接调用被装饰对象的对应方法，而对写相关方法做了限制，抛出 &lt;code&gt;UnsupportedOperationException&lt;/code&gt;。下面是 &lt;code&gt;UnmodifiableList&lt;/code&gt; 的部分源码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UnmodifiableList&lt;/span&gt;&amp;lt;E&amp;gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;UnmodifiableCollection&lt;/span&gt;&amp;lt;E&amp;gt;&lt;br/&gt;                                  &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;List&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;br/&gt;    final List&amp;lt;? extends E&amp;gt; &lt;span&gt;list&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    UnmodifiableList(List&amp;lt;? extends E&amp;gt; &lt;span&gt;list&lt;/span&gt;) {&lt;br/&gt;        super(&lt;span&gt;list&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.&lt;span&gt;list&lt;/span&gt; = &lt;span&gt;list&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; E &lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;list&lt;/span&gt;.get(index);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; E &lt;span&gt;set&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; index, E element)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; index, E element)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; E &lt;span&gt;remove&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;indexOf&lt;/span&gt;&lt;span&gt;(Object o)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;list&lt;/span&gt;.indexOf(o);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;lastIndexOf&lt;/span&gt;&lt;span&gt;(Object o)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;list&lt;/span&gt;.lastIndexOf(o);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; boolean &lt;span&gt;addAll&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; index, Collection&amp;lt;? extends E&amp;gt; c)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;java.util.Collections&lt;/code&gt; 中还提供了其他一系列装饰者：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;unmodifiableSet(Set)&lt;/code&gt;、&lt;code&gt;unmodifiableMap(Map)&lt;/code&gt; 等方法和 &lt;code&gt;unmodifiableList(List)&lt;/code&gt; 类似，用于不同类型的集合的装饰&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;synchronizedList(List)&lt;/code&gt;、&lt;code&gt;synchronizedSet(Set)&lt;/code&gt;、&lt;code&gt;synchronizedMap(Map)&lt;/code&gt; 等方法使用 &lt;code&gt;synchronized&lt;/code&gt; 装饰 List、Set、Map 中的相关方法，返回一个线程安全的集合&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;checkedList(List, Class)&lt;/code&gt;、&lt;code&gt;checkedSet(Set, Class)&lt;/code&gt;、&lt;code&gt;checkedMap(List, Class, Class)&lt;/code&gt; 等方法返回类型安全的集合，如果插入集合的元素类型不符合要求则会抛出异常&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;InputStream 装饰者&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;装饰者不但可以增强被装饰者原有的方法，还可以增加新的方法扩展功能。&lt;/p&gt;&lt;p&gt;在 &lt;code&gt;java.io&lt;/code&gt; 包中，针对 &lt;code&gt;InputStream&lt;/code&gt; 有一个基础的抽象装饰者 &lt;code&gt;FilterInputStream&lt;/code&gt;，其源码如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;FilterInputStream&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;InputStream&lt;/span&gt; {&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; InputStream &lt;span&gt;in&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;FilterInputStream&lt;/span&gt;(&lt;span&gt;InputStream &lt;span&gt;in&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.&lt;span&gt;in&lt;/span&gt; = &lt;span&gt;in&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;read&lt;/span&gt;(&lt;span/&gt;) throws IOException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;.read();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;类似于上面讲到的 &lt;code&gt;HttpServletRequestWrapper&lt;/code&gt; 类，&lt;code&gt;FilterInputStream&lt;/code&gt; 是一个基础的装饰者，它的子类才是具体的装饰者的实现。&lt;code&gt;DataInputStream&lt;/code&gt; 就是其中一个典型的装饰者实现。&lt;/p&gt;&lt;p&gt;&lt;code&gt;DataInputStream&lt;/code&gt; 用于从被装饰的 &lt;code&gt;InputStream&lt;/code&gt; 对象中读取基本数据类型，它继承自 &lt;code&gt;FilterInputStream&lt;/code&gt;，并新增了新的方法，如 &lt;code&gt;readByte()&lt;/code&gt;、&lt;code&gt;readInt()&lt;/code&gt;、&lt;code&gt;readFloat()&lt;/code&gt; 等，这些方法是 &lt;code&gt;InputStream&lt;/code&gt; 接口中没有的。&lt;/p&gt;&lt;p&gt;除了 &lt;code&gt;DataInputStream&lt;/code&gt; 之外，&lt;code&gt;FilterInputStream&lt;/code&gt; 常见的子类装饰者还有：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;BufferedInputStream&lt;/code&gt; 为被装饰的 &lt;code&gt;InputStream&lt;/code&gt; 提供缓冲功能以及支持 &lt;code&gt;mark&lt;/code&gt; 和 &lt;code&gt;reset&lt;/code&gt; 方法&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;CipherInputStream&lt;/code&gt; 使用加密算法（例如 AES）对 &lt;code&gt;InputStream&lt;/code&gt; 中的数据加密或解密&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;DeflaterInputStream&lt;/code&gt;、&lt;code&gt;InflaterInputStream&lt;/code&gt; 使用 deflate 压缩算法对 &lt;code&gt;InputStream&lt;/code&gt; 中的数据压缩或解压&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;装饰者模式结构&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100000141&quot; data-ratio=&quot;0.59453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qdfEUPqfXuxibV7hQ5icVJJ5TvtpWVeXXodtIqKBlmMzvRLtMPrzcBcXYb2waogNc5oic7IVibGfG1HMbBmaxs0UZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;装饰者模式结构&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;图片来源：https://refactoringguru.cn/design-patterns/decorator&lt;/p&gt;&lt;p&gt;下面总结一下在前面的例子中，各个类和上图中的对应关系：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;部件（Component）对应有 &lt;code&gt;HttpServletRequest&lt;/code&gt;、&lt;code&gt;List&lt;/code&gt;、&lt;code&gt;InputStream&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;基础装饰（Base Decorator）对应有 &lt;code&gt;HttpServletRequestWrapper&lt;/code&gt;、&lt;code&gt;FilterInputStream&lt;/code&gt;；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;具体装饰类（Concrete Decorators）对应有 &lt;code&gt;Servlet3SecurityContextHolderAwareRequestWrapper&lt;/code&gt;、&lt;code&gt;UnmodifiableList&lt;/code&gt;、&lt;code&gt;DataInputStream&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0324bcd0a8543415314070b84a4c781f</guid>
<title>Android 转场动画深度解析</title>
<link>https://toutiao.io/k/jtg6jd0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;所谓转场动画，通俗的讲就是一个Activity跳转到另一个Activity是的动画；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Activity的转场动画很早就有了，5.0之前用的是overridePendingTransition（）这个方法。在5.0之后，Google使用Material Design设计风格，进而有了的新的转场转场动画的诞生，效果还是挺炫酷的；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天我们就来讲解下；&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、转场动画兼容性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、API21之前Activity过渡动画使用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; API21之前Activity过渡动画通过两种方式来实现:style主题里面统一设置、使用代码overridePendingTransition函数单独设置；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;style文件主题里面统一定义，全局为所有Activity设置过渡动画效果；&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android:windowAnimationStyle&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@style/Animation.Activity.Customer&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Animation.Activity.Customer&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;parent&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@android:style/Animation.Activity&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android:activityOpenEnterAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/right_in&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android:activityOpenExitAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/left_out&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android:activityCloseEnterAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/left_in&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android:activityCloseExitAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/right_out&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;代码overridePendingTransition(enterAnim, exitAnim)；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于overridePendingTransition函数，有一个需要注意的地方就是：它必需紧挨着startActivity()或者finish()或者onBackPressed()函数调用，否则不一定有效果；&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、API 21 之后Activity过渡动画使用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在API 21之后google又推出了一种比之前效果更加赞的过渡动画；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过ActivityOptions + Transition来实现Activity过渡动画；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以在使用之前需要进行版本判断。当版本API 大于21时使用转场动画，否则不使用；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.LOLLIPOP) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;ActivityOptions + Transition来实现Activity过渡动画之前先来了看下ActivityOptions里面几个函数代表啥意思；&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ActivityOptions &lt;span class=&quot;code-snippet__title&quot;&gt;makeCustomAnimation&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Context context, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; enterResId, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; exitResId&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ActivityOptions &lt;span class=&quot;code-snippet__title&quot;&gt;makeScaleUpAnimation&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;View source, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startX, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startY, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; width, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; height&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ActivityOptions &lt;span class=&quot;code-snippet__title&quot;&gt;makeThumbnailScaleUpAnimation&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;View source, Bitmap thumbnail, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startX, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startY&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ActivityOptions &lt;span class=&quot;code-snippet__title&quot;&gt;makeSceneTransitionAnimation&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Activity activity, View sharedElement, String sharedElementName&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ActivityOptions &lt;span class=&quot;code-snippet__title&quot;&gt;makeSceneTransitionAnimation&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Activity activity, android.util.Pair&amp;lt;View, String&amp;gt;... sharedElements&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;对于Transition Activity过渡动画的使用，我们简单的分为三个步骤：&lt;/span&gt;&lt;span&gt;告诉系统以Transition的方式启动Activity、定义过渡动画、设置过渡动画&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、转场动画的使用场景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Android中的转场动画主要有三种场景：&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下面分别详细的介绍；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、转场动画的使用场景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、两个activity之间切换时界面的过渡效果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;两个activity切换时的，有两个动画，从activity A 切换到activity B时，会有A的退出动画和B的进入动画；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.544360902255639&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhHicPvjRtficvg3Q5zaEb8lPviaJiaGmcrw5qxS7LKgDJcdOSS55c36lUA5EiaAPsFKT7DzyZVh4qJfERQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;665&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Google提供的android.transition.Transition包中从activity A切换到activity B有三种方式：Explode, Slide 和Fade；&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Explode：从屏幕的中间进入或退出；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Slide：从屏幕的一边向另一边进入或退出；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Fade：通过改变透明度来出现或消失；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;上面的三种动画有两种实现方式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.7754891864057673&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/kyDL16ViavhHicPvjRtficvg3Q5zaEb8lPvLnuz3WRPhve1fg2znibP95ynkRbj5YTeRQoEvYNr8eqF0IHQObI2SEA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;971&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①通过xml声明；&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在res目录下新建transition文件夹在transition文件夹下新建activity_fade.xml文件；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;activity_fade.xml&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;fade&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;http://schemas.android.com/apk/res/&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;android:duration&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1000&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;activity_slide.xml&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;slide&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;http://schemas.android.com/apk/res/&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;android:duration&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1000&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;ActivityA的代码如下：因为从ActivityA切换到ActivityB,所以ActivityA是退出动画使用的方法是：getWindow().setExitTransition(slide);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setContentView(R.layout.activity_transition);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setupWindowAnimations();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setupWindowAnimations&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Slide slide = TransitionInflater.from(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;).inflateTransition(R.transition.activity_slide);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        getWindow().setExitTransition(slide);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;ActivityB是进入动画使用方法：getWindow().setEnterTransition(fade);，ActivityB的代码如下&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setContentView(R.layout.activity_transition);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setupWindowAnimations();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setupWindowAnimations&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Fade fade = TransitionInflater.from(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;).inflateTransition(R.transition.activity_fade);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        getWindow().setEnterTransition(fade);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②代码方式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ActivityA代码如下：实现一个Slide对象并且设置时间为1000毫秒&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setContentView(R.layout.activity_transition);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setupWindowAnimations();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setupWindowAnimations&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Slide slide = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Slide();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        slide.setDuration(&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        getWindow().setExitTransition(slide);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;ActivityB中实现一个Fide对象并且设置时间为1000毫秒；&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setContentView(R.layout.activity_transition);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        setupWindowAnimations();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setupWindowAnimations&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Fade fade = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Fade();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fade.setDuration(&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        getWindow().setEnterTransition(fade);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、两个activity或者Fragment之间shared elements 切换效果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Shared elements转换确定两个Activity之间共享的视图如何在这两个Activity之间转换；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果两个Activity在不同的位置和大小中具有相同的图像，则通过Shared elements转换会在这两个Activity之间平滑地转换和缩放图像；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当从Activity A跳转到Activity B时，ActivityA， ActivityB中的两个item有动画变化，但是要注意的时ActivityA ，ActivityB中的item是两个独立的item；&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;shared elements转换包括以下几种：&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;changeBounds 改变目标布局中view的边界&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;changeClipBounds 裁剪目标布局中view的边界&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;changeTransform 实现旋转或者缩放动画&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;changeImageTransform 实现目标布局中ImageView的旋转或者缩放动画&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;实现上面的效果需要三个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.7972103004291845&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/kyDL16ViavhHicPvjRtficvg3Q5zaEb8lPvpwic3BT7UBkdfqmejBHDHsgoicX88jESLSibk07nqbR7HKu9coibHQCib9A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;932&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;① Window Content Transition&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;设置styles.xml文件，允许windowContentTransitions如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;value/style.xml&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;MaterialAnimations&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;parent&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android:windowContentTransitions&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②定义一个相同的transition名称&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;分别在Activity A 和Activity B的布局文件中定义item，这两个item的属性可以不一样，但是android:transitionName必须一样。如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;activity_a.xml&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;ImageView&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:id=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@+id/small_blue_icon&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        style=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@style/MaterialAnimations.Icon.Small&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:src=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@drawable/circle&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:transitionName=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@string/blue_name&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;activity_b.xml&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;ImageView&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:id=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@+id/big_blue_icon&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        style=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@style/MaterialAnimations.Icon.Big&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:src=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@drawable/circle&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:transitionName=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@string/blue_name&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;③在activity中启动shared element&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用ActivityOptions.makeSceneTransitionAnimation()方法&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ActivityA.java&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;blueIconImageView.setOnClickListener(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; View.OnClickListener() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @&lt;span class=&quot;code-snippet__function&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onClick&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;View v&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Intent i = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Intent(MainActivity.&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;, SharedElementActivity.class);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        View sharedView = blueIconImageView;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        String transitionName = getString(R.&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;.blue_name);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ActivityOptions transitionActivityOptions = ActivityOptions.makeSceneTransitionAnimation(MainActivity.&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;, sharedView, transitionName);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        startActivity(i, transitionActivityOptions.toBundle());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Fragment之间Shared elements&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Fragment之间的Shared elements的使用过程和Activity之间的类似，分为三个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①允许windowContentTransitions&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;MaterialAnimations&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;parent&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android:windowContentTransitions&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②定义一个共同的变换名称&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;layout/fragment_a.xml&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;ImageView&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:id=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@+id/small_blue_icon&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        style=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@style/MaterialAnimations.Icon.Small&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:src=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@drawable/circle&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:transitionName=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@string/blue_name&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;layout/fragment_b.xml&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;lt;ImageView&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:id=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@+id/big_blue_icon&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        style=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@style/MaterialAnimations.Icon.Big&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:src=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@drawable/circle&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        android:transitionName=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@string/blue_name&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;③使用FragmentTransaction&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;FragmentB fragmentB = FragmentB.newInstance(sample);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Slide slideTransition = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Slide(Gravity.RIGHT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;slideTransition.setDuration(&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sharedElementFragment2.setEnterTransition(slideTransition);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ChangeBounds changeBoundsTransition = TransitionInflater.&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;).inflateTransition(R.transition.change_bounds);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fragmentB.setSharedElementEnterTransition(changeBoundsTransition);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;getFragmentManager().beginTransaction()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .replace(R.id.content, fragmentB)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .addSharedElement(blueView, getString(R.&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;.blue_name))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .commit();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;学习就要沉下心来认真的去领悟&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0NDE3MjM1Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhFRZkgpibUGGz2NIiaBUpj7NeBSJASje1M1ZhVvpDIGibicMUeCiad3ptsJLaLUjhrVYs5bGZWuenY6UaQ/0?wx_fmt=png&quot; data-nickname=&quot;Android开发编程&quot; data-alias=&quot;&quot; data-signature=&quot;一个有10多年经验开发的android、java、前端等语言的老程序员，在这里一起聊聊技术，一起聊聊生活、一起聊聊中年危机的生存之道，一起进步一起加油，感兴趣的欢迎订阅；不定时的更新。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0NDE3MjM1Ng==&amp;amp;mid=2247485063&amp;amp;idx=1&amp;amp;sn=8de7b34a2f5d2e24594fdd4b6688ad5b&amp;amp;chksm=c329faacf45e73ba5e73b91d50c68bf7ffa45c65ab091c826baee5317c4e0518da37822f3977&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Java进阶之深入理解负载均衡的5种算法实现原理&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ad74e7676957b46695d55c75973fcfc1</guid>
<title>2021 年快结束了！抓紧啦！</title>
<link>https://toutiao.io/k/809c4m6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a7f63a77a0a19eda7314de1cc9fa68b3</guid>
<title>Hangfire 深度实践</title>
<link>https://toutiao.io/k/jjtnvgs</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在ERP中存在大量的耗时操作场景，例如售楼的房源生成，会同时生成上万个房间，用户可能会等待长达一分钟，并且不能离开当前页面。&lt;/p&gt;&lt;p&gt;基于此场景平台需要提供后台作业+实时消息通知机制，房间生成操作调整为后台作业，生成成功后推送站点通知告知用户。&lt;/p&gt;&lt;p&gt;在平台中还有一个调度服务需要周期性执行定时任务，例如发送邮件、短信等。&lt;/p&gt;&lt;p&gt;定时任务调度，是一个老生常谈的问题。网上有许多定时任务调度的解决方案，之前使用定时任务调度框架Quartz.Net，基于此框架开发调度服务。&lt;/p&gt;&lt;p&gt;在此基础上有很多功能都需要自己开发，而Hangfire自带后台任务调度面板，包含日志等一系列功能，也可以在后台手动执行任务。&lt;/p&gt;&lt;p&gt;在该篇文章中主要介绍一下什么是Hangfire，Hangfire的基本特征与优点和ERP中应用实践。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、Hangfire介绍&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Hangfire是一个开源的.NET任务调度框架，提供了内置集成化的控制台，可以直观明了的查看作业调度情况，并且Hangfire不需要依赖于单独的应用程序执行（如：Windows服务，Windows计划），并且支持持久性存储。&lt;/p&gt;&lt;p&gt;下图描述了Hangfire的主要架构：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;从上图看，它是由:客户端、作业存储、服务端组成的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后台作业由 Hangfire Server 处理。它实现一组专用（非线程池的）后台线程，用于从作业存储中取出作业并处理，服务端还负责自动删除旧数据以保持作业存储干净。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hangfire为任何一个作业存储使用可靠的处理算法，因此您可以内置在Web应用程序中处理，而不会担心在应用程序重新启动，进程终止等情况下丢失后台作业。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;使用示例&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本示例使用ASP.NET Core宿主承载Hangfire。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;新建ASP.NET Core空项目，然后通过在程序包管理控制台中输入安装命令安装Hangfire所需NuGet包：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用SQL Server作为存储时需要安装的NuGet包：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也可以通过快速编辑.csproj 文件中的PackageReference来快速引用：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;ItemGroup&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;PackageReference&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;Include&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Microsoft.AspNetCore.App&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;PackageReference&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;Include&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hangfire.Core&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;Version&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1.7.24&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;PackageReference&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;Include&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hangfire.SqlServer&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;Version&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1.7.24&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;PackageReference&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;Include&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hangfire.AspNetCore&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;Version&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1.7.24&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;ItemGroup&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在SQL Server数据库中创建一个HangfireDemo数据库，然后在程序appsettings.json中配置数据库连接：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;json&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;ConnectionStrings&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;HangfireConnection&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Server=.\\SQL2016;Database=HangfireDemo;User ID=sa;Password=;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;Logging&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;LogLevel&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;Default&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Information&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;Microsoft&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Warning&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;Microsoft.Hosting.Lifetime&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Information&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;AllowedHosts&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;接着在项目的Startup.cs  ConfigureServices方法注册Hangfire相关服务：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; ConfigureServices(IServiceCollection services)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    services.AddHangfire(&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;configuration&lt;/span&gt; =&amp;gt;&lt;/span&gt; configuration&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .UseSimpleAssemblyNameTypeSerializer()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .UseRecommendedSerializerSettings()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .UseSqlServerStorage(Configuration.GetConnectionString(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;HangfireConnection&quot;&lt;/span&gt;), &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SqlServerStorageOptions&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            CommandBatchMaxTimeout = TimeSpan.FromMinutes(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            SlidingInvisibilityTimeout = TimeSpan.FromMinutes(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            QueuePollInterval = TimeSpan.Zero,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            UseRecommendedIsolationLevel = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            DisableGlobalLocks = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    services.AddHangfireServer();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    services.AddMvc();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在Configure 方法配置面板及路由：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; Configure(IApplicationBuilder app, IWebHostEnvironment env, IBackgroundJobClient backgroundJobs)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (env.IsDevelopment())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        app.UseDeveloperExceptionPage();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    app.UseRouting();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    app.UseHangfireDashboard();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    backgroundJobs.Enqueue(&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; Console.WriteLine(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hello world from Hangfire!&quot;&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    app.UseEndpoints(&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;endpoints&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        endpoints.MapGet(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;async&lt;/span&gt; context =&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;await&lt;/span&gt; context.Response.WriteAsync(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;运行程序，访问 http://localhost:5000/hangfire ，可以看到仪表盘。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;控制台会输出 Hello world from Hangfire! ，在作业的完成中可以看到一条完成的记录。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后在数据库中Hangfire会自动生成Hangfire.前缀的相关表，来持久化任务等信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Hangfire ERP应用实践&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以房源生成为例&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.先定义一个后台作业计算需要的参数类型。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt; 批量生成房源的参数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BatchGenerateRoomJobArgs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt; 所属楼栋&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Guid BldGUID { &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt; 房间个数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; RoomNumber { &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;作业参数不需要实现接口或继承基类，应该是可序列化的，因为该参数需要被序列化并存储到数据库中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作业管理默认使用的是 JSON 序列化的方式。参数应该做到简洁，不应该包含实体或者其他非序列化的对象。正如示例所展示的，应该仅存储实体的Id并从仓储内得到该实体的作业。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2.然后实现作业执行器。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt; 批量生成房源后台作业执行器&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;span class=&quot;code-snippet__meta&quot;&gt;BackgroundJobName(&lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;slxt-generate-room&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;批量生成房源&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;0011&quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BatchGenerateRoomJob&lt;/span&gt; : &lt;span class=&quot;code-snippet__title&quot;&gt;IBackgroundJob&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Execute&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;BatchGenerateRoomJobArgs args&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 产生房源的实现代码&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;作业执行器需要实现IBackgroundJob接口，实现Execute方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作业类型上需要BackgroundJobNameAttribute标记，在参数中说明作业的标识、名称和所属子系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;作业上下文：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;没有HTTP上下文：无法获取Http上下文对象，也可能无法使用Session之类的服务器对象。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据库操作：作业执行器已经初始化了数据库连接上下文，如果启用了应用分库，也会将数据库切换到作业归属应用的数据库上下文中，因此，可以像普通代码一样使用CPQuery或实体服务来操作数据库。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;注册后台作业&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;在应用初始化过程中，将作业执行器和参数注册到后台作业列表中。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AppInitializer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Init&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        BackgroundJobRegister.Add&amp;lt;BatchGenerateRoomJob, BatchGenerateRoomJobArgs&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;继续以批量生成房源为例，示例代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt; 房源生成应用服务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;RoomAppService&lt;/span&gt; : &lt;span class=&quot;code-snippet__title&quot;&gt;AppService&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;readonly&lt;/span&gt; IBackgroundJobManager _backgroundJobManager = MyServiceLocator.GetService&amp;lt;ibackgroundjobmanager&amp;lt; a=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt; 批量生成房源的异步作业&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;///&lt;/span&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__doctag&quot;&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BatchGenerateRoom&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Guid buildGuid, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; roomNumber&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; batchGenerateRoomJobArgs = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; BatchGenerateRoomJobArgs { BldGUID = buildGuid, RoomNumber = roomNumber };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 执行后台作业&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 将作业参数加入后台作业队列中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        _backgroundJobManager.Enqueue(batchGenerateRoomJobArgs);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;将作业参数加入到执行队列中后，作业就会由Hangfire自动调度执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;执行结果通知&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;： 作业执行完成后，可以自行通知用户（例如邮件、消息等），也可以使用实时消息推送方案来发出用户通知。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;异常处理：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 作业在执行过程中，如果出现异常，会记录系统异常日志，如果是业务异常(BusinessLogicException），会停止执行并将任务标记为失败；其他类型的异常会自动重试，如果重试次数达到上线（10次），作业将标记为失败，不再执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Hangfire ERP深度实践&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在ERP中深度集成了Hangfire，对于Hangfire 的一些默认信息以及特性做了一些改造和适配，下面一一介绍深度特性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先对于Hangfire增加过滤器，替换掉Hangfire的默认重试机制，使重试控制在自己的手中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时支持用户在自己的Job中打标控制任务的重试次数及间隔时间，使任务控制更加灵活和业务更贴合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实现IJobFilterProvider 接口，实现获取Filter的方法&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;HangfireIocJobFilterProvider&lt;/span&gt; : &lt;span class=&quot;code-snippet__title&quot;&gt;IJobFilterProvider&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;IEnumerableGetFilters&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Job job&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (job == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; List();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; jobFilters = JobFilterProviders.Providers.GetFilters(job).ToList();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 使用ExceptionFilterAttribute替换默认的重试&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jobFilters.RemoveAll(x =&amp;gt; x.Instance &lt;span class=&quot;code-snippet__keyword&quot;&gt;is&lt;/span&gt; AutomaticRetryAttribute);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取自定义的BackgroundJobAutomaticRetryAttribute的重试次数、重试间隔时间参数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 此处Job为ExecutorJobAdapter，实际的Job在Adapter的第一个泛型参数中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; types = job.Type.GetGenericArguments();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; retryAttr = BackgroundJobAutomaticRetryAttribute.GetByJobType(types);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (retryAttr == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            jobFilters.Add(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; JobFilter(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ExceptionFilterAttribute(), JobFilterScope.Type, &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            jobFilters.Add(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; JobFilter(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ExceptionFilterAttribute(retryAttr.Attempts, retryAttr.DelaysInSeconds), JobFilterScope.Type, &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; jobFilters;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;然后将这个实现设置到BackgroundJobServer中：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; BackgroundJobServer &lt;span class=&quot;code-snippet__title&quot;&gt;CreateJobServer&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; jobOptions = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; BackgroundJobServerOptions&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        FilterProvider = GetService(),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; server = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; BackgroundJobServer(jobOptions, JobStorage.Current);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; server;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这样就替换掉默认重试机制 AutomaticRetryAttribute为ExceptionFilterAttribute。后续任务在失败时就会依据设置的间隔及间隔评论进行重试，对于未打标的Job还是执行默认的重试次数3次，间隔也是默认。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ERP中还有一个场景，针对每个任务创建的时候都需要参数应用、任务名称、任务描述。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这时就可以使用Hangfire的Filter，Filter的实现跟MVC的Action Filter是一样的，都是责任链模式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;创建的时候实现的是IClientFilter，消费执行时候如果要实现过滤需要实现IServerFilter。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以下实现IClientFilter，添加参数应用、任务名称、任务描述：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;JobAttachParameterFilterAttribute&lt;/span&gt;:&lt;span class=&quot;code-snippet__title&quot;&gt;JobFilterAttribute&lt;/span&gt;,&lt;span class=&quot;code-snippet__title&quot;&gt;IClientFilter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;OnCreating&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;CreatingContext filterContext&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(filterContext==&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ArgumentNullException(&lt;span class=&quot;code-snippet__keyword&quot;&gt;nameof&lt;/span&gt;(filterContext));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;//这里由于调度任务中AsyncJobStartArguments实现了IBackgroundJobConfigurationGetter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;//所以需要根据Args获取到配置信息&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; context=filterContext.Job.Args.OfType&amp;lt;executecontext&amp;lt; a=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;gt;().FirstOrDefault();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; jobType=filterContext.Job.Type.GetGenericArguments().FirstOrDefault();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (context == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;||jobType==&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; config = BackgroundJobContainer.Instance.GetJobConfigByJobTypeOrArg(context.GetArg(),jobType);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        filterContext.SetJobParameter(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Application&quot;&lt;/span&gt;, config.AppCode);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        filterContext.SetJobParameter( &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;JobName&quot;&lt;/span&gt;, config.JobName);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        filterContext.SetJobParameter( &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;JobDescription&quot;&lt;/span&gt;, config.JobDescription);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;OnCreated&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;CreatedContext filterContext&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在注册Job时添加的信息或者实现IBackgroundJobConfigurationGetter 接口的信息就会被写入到Hangfire的Job中，这样避免重复传递参数，通过拦截根据上下文直接获取。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Hangfire实践经验分享&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;产品在做并发测试时，大量插入了Hangfire Job，但是Hangfire Job插入很慢，导致任务大量累积，并不能做到高性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;原因：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ERP 中Hangfire 默认使用SQL Server存储任务，这时默认会使用全局锁，在Hangfire入队的时候会导致入队是串行执行的。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用Hangfire提供的特性，将全局锁改为使用局部锁。也即将DisableGlobalLocks、UsePageLocksOnDequeue、UseRecommendedIsolationLevel设为true。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;部分调整代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;JobStorage.Current = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SqlServerStorage(connectionInfo.MasterDb, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SqlServerStorageOptions&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    UseRecommendedIsolationLevel = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    UsePageLocksOnDequeue = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    DisableGlobalLocks = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;ERP中有个数据分发任务，在分库场景中会自动分发组织和用户等数据，默认5s会分发一次。在主系统中新增一个组织后，发现在子系统无法引入这个组织，但是过一会又可以引入。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实际分发是成功，但是分发任务的时间远远大于5s。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;原因：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;分析任务执行日志，发现时间分发任务间隔为15s，而且一直都是15s执行一次。明明配置的5s执行分发一次，为何会变为15s？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;打开Hangfire代码分析，发现Hangfire默认设置的等待时间为15s,如果调度器队列里面没有任务，默认等待15s，再进入队列取数据，从而导致配置的5s未生效而变为15s。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主要代码位于RecurringJobScheduler类中：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在BackgroundJobServerOptions 设置属性调整为3s，这样可以保证5s周期的任务可以正确执行。对于更短周期，可以将此属性调整为0，即无任务时不做等待。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;部分调整代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;jobOptions = new BackgroundJobServerOptions&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;StopTimeout&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;TimeSpan.FromSeconds(15),&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;ShutdownTimeout&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;TimeSpan.FromSeconds(30),&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;SchedulePollingInterval&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;TimeSpan.FromSeconds(3),&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;WorkerCount&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;40,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;ServerName&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;GetHangfireServiceName()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;其中参数说明：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;ServerName：由于Hangfire是一个Storage,Client,Server结构的程序，该字段配置一个进程里面多个Server实例的服务名称；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;WorkerCount：初始化工作线程数,可以最多同时执行任务个数；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Queues：Hangfire可以设置工作队列，如果想设置工作的优先级或者根据服务拆分任务，可以使用Queues；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;StopTimeout：设置该参数之后，如果遇到了服务器的关机事件，Hangfire继续在设置的时间内执行任务，而不是立刻中断；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ShutdownTimeout：配置心跳检查进程的取消的超时时间；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;SchedulePollingInterval：任务调度轮询间隔，Hangfire使用轮询的机制对队列中的Job进行处理，如果队列里面没有Job，Hangfire会默认等待15秒，然后再去队列取数。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;可以根据实际场景灵活调整。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Hangfire最佳实践&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;方法调用（即作业）在Hangfire创建作业过程中参数会使用JSON序列化转换为 JSON 字符串。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果传递的是复杂实体或大型对象，包括阵列，最好将其放入数据库，然后传递主键等关键信息到Job方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以下示例，最佳实践：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;public void Method(int entityId) { }&lt;/p&gt;&lt;p&gt;&lt;span&gt;不建议做法：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;public void Method(Entity entity) { }&lt;/p&gt;&lt;p&gt;&lt;span&gt;重复执行意味着方法可以在执行过程中间中断，然后再次安全调用。中断可能由许多不同的情况（例如，服务器关闭等）引起，Hangfire 将尝试进行多次重试处理。&lt;br/&gt;如果你的任务不支持重复执行，可能会存在很多问题。例如，使用Job发送电子邮件，多次重试会导致，发送给同一收件人多封电子邮件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如发送邮件示例代码，最佳实践：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Method&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; deliveryId&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (_emailService.IsNotDelivered(deliveryId))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        _emailService.Send(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;person@example.com&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        _emailService.SetDelivered(deliveryId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;不建议做法：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Method&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    _emailService.Send(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;person@example.com&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hangfire 提供多种多样的特性，满足灵活的配置，而且拥有直观的面板，可以方便查看Job信息及异常信息，而且还可以在面板中手动执行任务，Hangfire 是一个优秀的任务调度框架。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ERP 接入Hangfire，提供后台任务的简单调用方式，对于后台执行任务及长耗时作业提供了强大的支持，使ERP支持更加丰富完善，具备更高性能。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>