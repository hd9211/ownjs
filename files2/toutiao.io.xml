<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>8f897e256702c7c806b33583a2e01a27</guid>
<title>两次被裁之后，我终于解决了数据库缓存一致性问题</title>
<link>https://toutiao.io/k/feyaceo</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我是一名毕业两年的程序员。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;算上实习，工作三年了，正是一个程序员的黄金时代，这让我普通而自信。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是从实习期，我就被辞退两次了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天是我的又一场面试，而且是大厂面试。我要一洗前耻，证明自己。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，我要赶紧出发，不然通往美好生活的996路公交车又堵了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经历过西二旗的人潮人涌之后，我按时来到了面试官面前。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和面试官寒暄了几句，他直接问了一个技术问题&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;如果网站流量太高，我们通常会加缓存来减轻数据库压力，读缓存很简单，如下图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaZesVjgjQ8iaXINSXnYhulC00sAibh2DdiaCnnQibH6Grk1bD5vtxUE0njhB7a4nWib48E5Ks1dN69lbQWrztJicx9Mg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.273972602739726&quot; data-w=&quot;511&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于写缓存，你知道怎么设计这个方案，保证缓存与数据库的数据一致性吗？&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一刹那，往事涌上心头，因为我在这个问题上，已经栽了两次了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一次是在实习期。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那年二十，刚刚工作，每日如喽啰。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实习的公司是一家外包公司，没有什么技术规范，按时上线是大家最重要的诺言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的第一个任务就是增加缓存，降低Mysql的压力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个任务最核心的就是写缓存时怎么保证缓存和数据库的一致性，当年还是实习生的我显然没有意识到这个需求的复杂性，直接采用的方案就是&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;先更新数据库，再更新缓存&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上线第二天，网站就出了Bug，我就被甲方爸爸投诉了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后来，在复盘中我才发现，网站挂了的原因是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果同时有请求A和请求B进行更新操作，那么会出现&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaZesVjgjQ8iaXINSXnYhulC00sAibh2DdiaPmp4cI0icqfGrA1hvvdK6Nfz1iaIawGJG9PcBNxdBBESrrdxicuBFaSew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.9779116465863453&quot; data-w=&quot;498&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请求B是最后请求的，那么应该是他最后更新缓存为正确的数据，但是有可能请求A处理的更慢，所以请求A更新了最后的缓存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外这个系统写数据库场景比较多，而读请求比较少，这种方案就导致数据压根还没读到，缓存就被频繁的更新，浪费性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后我当天就被辞退了，理由是在办公室工位吃螺蛳粉。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没想到啊没想到，在这个问题上，我还能梅开二度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;毕业之后进入的第一家公司，兢兢业业两年半，业务量也逐渐上来了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;访问量上升，代表着我的薪水也有机会上升。我立马做了个方案，准备在一向不看好我的经理面前表现一把。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心逻辑就是采用&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;先删缓存，再更新数据库&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经理看完方案，直接画了下面一个图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaZesVjgjQ8iaXINSXnYhulC00sAibh2DdiaDibOXSXEQy8aGnI1iaT7WxCRU3f9xVU48etBo6WtibiaChro0e3FgYS5Gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.1199261992619927&quot; data-w=&quot;542&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;淡淡说道:&quot;这样的话，缓存都是脏数据了。&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我想了下，说：&quot;确实，不过可以双删缓存。&quot;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public void write(String key,Object data){  &lt;br/&gt;     redis.delKey(key); // 删缓存  &lt;br/&gt;     db.updateData(data); //更新数据库  &lt;br/&gt;     Thread.sleep(1000); // 根据业务执行时间确定具体的时间  &lt;br/&gt;     redis.delKey(key); // 我再删缓存  &lt;br/&gt; }  &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经理笑了笑，说：&quot;我们可是采用了MySQL读写分离架构啊，如果有下面这样两个请求&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaZesVjgjQ8iaXINSXnYhulC00sAibh2DdialbmjicY5CPgvatxvL1roB550zYOic2licXZOhWhicdfyH7ObjH0MRaOZrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.3258845437616387&quot; data-w=&quot;537&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是会导致数据不一致啊!&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我有点不悦，这可是我主动加班做的方案，一句赞赏都没有，怎么老是被质疑？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但还是回答道 &quot;那就sleep时间修改为&lt;code&gt;业务执行时间&lt;/code&gt;+&lt;code&gt;主从同步时间&lt;/code&gt;就可以了，就是等主从同步完了再删一次。&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经理又问道：&quot;嗯，可以。不过你这样删除缓存两次，会造成吞吐量降低，怎么办？&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我觉得很不爽了，又不是他开发。算了，我回应到：&quot;那就将第二次删除改为异步的。即重新起一个线程，异步删除。&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经理又问道：&quot;那要是第二次删除缓存失败呢？&quot;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaZesVjgjQ8iaXINSXnYhulC00sAibh2DdiawAbVticy6LxM5pWc43ibbGyIPQ9q6EEgn9pRFw7bg2bYCszpICjcUASg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.4270650263620386&quot; data-w=&quot;569&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我无奈了：&quot;您说呢，毕竟您也是经理，要不您也说两个方案让我学习一下？&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经理笑了笑：&quot;年轻人，路走窄了啊！&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后我当天就被辞退了，理由是我代码缩进用的Tab而非空格。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此刻，我坐在面试官前面，面对这个问题已经有三年了，我也早已胸有成竹。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想到这，我直接站了起来，走到白板面前，说道：&quot;实不相瞒，前两次我的离职都和这个问题有关，所以我也思考了很多，不如直接我就讲讲最优解法。那就是&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;先更新数据库，再删缓存&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，这样也会有并发问题，比如&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaZesVjgjQ8iaXINSXnYhulC00sAibh2DdiapP2szHyZ28U8tWNQ6wMhC43ns8VOROnRLPepjExPnVLq1hKRYgicv0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.3216168717047452&quot; data-w=&quot;569&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是数据库读操作速度远快于写操作，所以存在脏数据的可能性为0。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然如果您问，如果真的存在怎么办？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单，双删就行了，即第一次删除缓存之后，等待一段时间重新再删一次。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然您如果还问，删除缓存失败了怎么办，解决方法如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iaZesVjgjQ8iaXINSXnYhulC00sAibh2DdiaWwljvuWy6QyibOkDA0ibLd68uyD8r4iaicjtX2KNuIsRITsdKXXpOHOaibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.645618556701031&quot; data-w=&quot;776&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即引入消息队列，删除缓存失败的记录下来重复删除，直到成功方可。如此一来，万无一失。&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官点了点头，鼓了鼓掌，叹到：&quot;优秀，不过我好奇你前两次的离职，可以和我讲讲吗？&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官听完我的经历之后，对我深表同情，问道：&quot;假如我给了你offer，你走到之前那些开除你的人面前，你会说什么呢？&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我走到窗户旁边，望向远方，轻声道：&quot;我会走到他们面前，把offer甩给他们看，告诉他们，我等了三年，就是要等一个机会，我要争一口气，不是想证明我了不起，我只是要告诉人家，我失去的东西一定要拿回来！&quot;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;参考资料 https://www.cnblogs.com/rjzheng/p/9041659.html&lt;span/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ac36fd7c8a205ca8b882daa6967b4903</guid>
<title>JVM 进阶之路（九）：性能监控工具（可视化工具篇）</title>
<link>https://toutiao.io/k/7uw9l2r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在前面已经学习了JVM性能监控的命令行工具，接下来学习JVM性能监控的命令行工具，通过可视化工具可以更直观地监控JVM性能、处理JVM相关问题。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、JConsole&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JConsole（ Java Monitoring and Management Console），是一款基于 JMX（ Java Manage-ment Extensions） 的可视化监视管理工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它的功能主要是对系统进行收集和参数调整，不仅可以用在虚拟机本身的管理上，还可以用于运行于虚拟机之上的软件中。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1、JConsole连接Java程序&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JConsole程序位于%JAVA_HOME%bin目录下，直接通过命令启动。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.48251295336787564&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRc3rpVBLuGaguGibeKIOurnLVGCFOcblzusmu1vvqY2r4CQlCU2QGHf3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1544&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;JConsole启动和连接&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在新建连接对话框中，罗列了所有的本地Java应用程序，选择需要连接的程序即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面还有一个用于连接远程进程的文本框，输入正确的远程地址即可连接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一个程序需要使用JConsole与那成连接，则需要在启动Java程序时，加上以下参数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;JAVA_OPTS=&lt;span&gt;&quot;-Dfile.encoding=UTF-8&quot;&lt;/span&gt; &lt;br/&gt;JAVA_OPTS=&lt;span&gt;&quot;$JAVA_OPTS -Dlog.dir=$LOG_PATH&quot;&lt;/span&gt; &lt;br/&gt;JAVA_OPTS=&lt;span&gt;&quot;$JAVA_OPTS -Djava.rmi.server.hostname=xxx.xxx.xxx.xxx(本机IP) -Dcom.sun.management.jmxremote&quot;&lt;/span&gt; &lt;br/&gt;JAVA_OPTS=&lt;span&gt;&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.port=xx&quot;&lt;/span&gt; &lt;br/&gt;JAVA_OPTS=&lt;span&gt;&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.local.only=false&quot;&lt;/span&gt;&lt;br/&gt;JAVA_OPTS=&lt;span&gt;&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.ssl=false&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2、Java程序概况&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用JConsole连接了一个本地程序，在&lt;code&gt;概述&lt;/code&gt;可以看到Java程序运行的概览信息，包括&lt;code&gt;堆内存使用情况&lt;/code&gt;、&lt;code&gt;线程&lt;/code&gt;、&lt;code&gt;类&lt;/code&gt;、&lt;code&gt;CPU使用情况&lt;/code&gt;四项信息的曲线图。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7444444444444445&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRceyvFxpZE1QdHuibbOQ6WnDRRCWnIiaQJQkbgPELibYiaW9cHwokwrTY6dw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1170&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;JConsole概览&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.3、内存监控&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;内存&lt;/code&gt;的作用相当于可视化的jstat命令，用于监视被收集器管理的虚拟机内存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它不仅包含堆内存的整体信息，更细化到eden区、suvivior区、老年代的使用情况。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.740392826643894&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRc2L0YEyibxwZyKcseMlvUOoYJhIiczFLR7AZSjECVYSv9Fic9pFqRFMpTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1171&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;JConsole内存监控&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了更加清晰地查看内存地变化，运行下面一段程序，然后连接：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * VM参数： -Xms100m -Xmx100m -XX:+UseSerialGC&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;JConcoleRAMMonitor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/***&lt;br/&gt;     * 内存占位符对象，一个OOMObject大约占64KB&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;OOMObject&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] placeholder = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;64&lt;/span&gt; * &lt;span&gt;1024&lt;/span&gt;];&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;fillHeap&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; num)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;        List&amp;lt;OOMObject&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;OOMObject&amp;gt;();&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++) {&lt;br/&gt;            &lt;span&gt;// 稍作延时，令监视曲线的变化更加明显&lt;/span&gt;&lt;br/&gt;            Thread.sleep(&lt;span&gt;300&lt;/span&gt;);&lt;br/&gt;            list.add(&lt;span&gt;new&lt;/span&gt; OOMObject());&lt;br/&gt;        }&lt;br/&gt;        System.gc();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        fillHeap(&lt;span&gt;2000&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段代码的作用是以64KB/50ms的速度向Java堆中填充数据，一共填充1000次。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;观察Eden区的运行趋势，发现呈折线。观察堆内存使用，发现以稍有曲折的状态向上增长。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6318719554627696&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcrBjWiap7TV0302zoSQx8MLP9Nq0JBxOoGKWibVFFyiaiaiakqPT0xro5kxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1437&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;Eden区内存变化状况&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行System.gc()之后，老年代的柱状图仍然显示峰值状态，最后程序会以堆内存溢出结束，这是因为空间未能回收——List&amp;lt;OOMObject&amp;gt;list对象一直存活， fillHeap()方法仍然没有退出，如果把 System.gc()移动到fillHeap()方法外调用就可以回收掉全部内存。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.4、线程监控&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JConcole还可以监控线程，相当于可视化的jstack命令。如图，JConcole显示了系统内的线程数量，并在屏幕下方显示了程序中所有的线程。单击线程名称，就可以查看线程的栈信息。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6458036984352774&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcYEHzU4icF5OPxr6zx8UNYycMcgiaSE7SLet6oMQTn1Qkx2mrniciaRWphg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1406&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;JConsole线程监控&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用JConsole还可以快速定位死锁问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一段会产生死锁的代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ThreadLockDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 线程死锁等待演示&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SynAddRunalbe&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Runnable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; a, b;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;SynAddRunalbe&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; a, &lt;span&gt;int&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;this&lt;/span&gt;.a = a;&lt;br/&gt;            &lt;span&gt;this&lt;/span&gt;.b = b;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;synchronized&lt;/span&gt; (Integer.valueOf(a)) {&lt;br/&gt;                &lt;span&gt;synchronized&lt;/span&gt; (Integer.valueOf(b)) {&lt;br/&gt;                    System.out.println(a + b);&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;100&lt;/span&gt;; i++) {&lt;br/&gt;            &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt; SynAddRunalbe(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;)).start();&lt;br/&gt;            &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt; SynAddRunalbe(&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;)).start();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;出现线程死锁以后，点击JConsole线程面板的&lt;code&gt;检测到死锁&lt;/code&gt;按钮，将会看到线程的死锁信息。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6526548672566371&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcyBqXyLzaZNB4umwccb8DicbuYw3RriaUE34sTWam6TicD1BybyXbZuZJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1356&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;线程死锁检测&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到线程Thread-199等待线程Thread-21持有的资源。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.5、类加载情况&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图，类页面显示了已经装载的类数量。在详细信息栏中，还显示了已经卸载的类的数量。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8399545970488081&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcWL14ySraRWn9ic471vuAe0q9JEgeTUUuL081tE9ZpPYibTgxibtEpkK9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;881&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;类加载情况&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.6、虚拟机信息&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;VM摘要&lt;/code&gt;，JConsole显示了当前应用程序的运行环境，包括虚拟机类型、版本、堆信息以及虚拟机参数等。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6808018504240555&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcM99RDQwf08HazlibPtlZ7spym4GqkSfHnibdpPJTeMD1qSZrkeDqRVjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1297&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;VM 摘要&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、VisualVM&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;VisualVM（All-in-One Java Troubleshooting Tool）是功能最强大的运行监视和故障处理程序之一，曾经在很长一段时间内是Oracle官方主力发展的虚拟机故障处理工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比一些第三方工具，VisualVM有一个很大的优点：不需要被监视的程序基于特殊Agent去运行，因此它的通用性很强，对应用程序实际性能的影响也较小，使得它可以直接应用在生产环境中。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1、VisualVM安装插件&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在JDK6 Update7以后，VisualVM便作为JDK的一部分发布，它在%JAVA_HOME%bin 目录下，点击就可以启动。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.24208725406330198&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcwnhlv58Dib2fCtntWPmKDhI7kln2yug4ae8DJfkUR2NayLJTlI7ynXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1169&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;VisualVM位置&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;VisualVM的精华之处在于它的插件。插件安装可以手动安装或者自动安装。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;手动安装，从地址 https://visualvm.github.io/pluginscenters.html  下载载nbm包，点击“工具-&amp;gt;插件-&amp;gt;已下载”菜单，然后在弹出对话框中指定nbm包路径便可完成安装。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般选择自动安装，点击&lt;code&gt;工具&lt;/code&gt;-&amp;gt; &lt;code&gt;插件菜单&lt;/code&gt;，在&lt;code&gt;可用插件&lt;/code&gt;里可以看到可安装的插件，按需安装即可。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5830546265328874&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcmTHc90rKU6kAWJQ8Q4wGTfhsic9BR8lQcIUWDfP6X6FBq299t3aheMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;897&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;VisualVM安装插件&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;VisualVM中&lt;code&gt;概述&lt;/code&gt;,&lt;code&gt;监视&lt;/code&gt;、&lt;code&gt;线程&lt;/code&gt;，&lt;code&gt;MBeans&lt;/code&gt;的功能与前面介绍的JConsole差别不大，这里就不在赘言。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2、生成、浏览堆转储快照&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在VisualVM中生成堆转储快照文件有两种方式，可以执行下列任一操作：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在&lt;code&gt;应用程序&lt;/code&gt;窗口中右键单击应用程序节点，然后选择&lt;code&gt;堆Dump&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在&lt;code&gt;应用程序&lt;/code&gt;窗口中双击应用程序节点以打开应用程序标签，然后在“监视”标签中单击&lt;code&gt;堆Dump&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.28172205438066467&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcX04EMedJdakOdKJSr7fyeUfEr9SgpBdhqV2nulUVGztJl7iakXQqS7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1324&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;堆Dump&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生成堆转储快照文件之后，该堆的应用程序下增加了一个以[heap-dump]开头的子节点。如果需要把堆转储快照保存或发送出去，就需要heapdump节点上右键选择“另存为”菜单，否则当VisualVM关闭时，生成的堆转储快照文件会被当作临时文件自动清理掉。要打开一个由已经存在的堆转储快照文件，通过文件菜单中的“装入”功能，选择磁盘上的文件即可。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.579106737320212&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcm8VX5TnqAAj0879RJe0icA5b9SuGWPibaW5R6rtm9VoQTEZaeKDAMwCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1321&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;VisualVM生成的堆转储快照&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.3、分析程序性能&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要开始性能分析，先选择“CPU”和“内存”按钮中的一个，然后切换到应用程序中对程序进行操作，VisualVM会记录这段时间中应用程序执行过的所有方法。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6576576576576577&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcondPy1WoicO0XCITP8xPu8icmrRb9jYLrk8QibzlzTXwric65RwaP9SY4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1332&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;VisualVM性能分析&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是进行处理器执行时间分析，将会统计每个方法的执行次数、执行耗时；&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6651515151515152&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcXChqgZGOpCWHl4z7oK6jb3WHSkZsDWvPR81jhSDgr7BMNcUUkejbicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1320&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;VisualVM CPU分析&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是内存分析，则会统计每个方法关联的对象数以及这些对象所占的空间。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6611195158850227&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRc4dz30tUMYQ1VkM4HldhoYsWMicoB3saEKnclDwESpJLffAVZ3nhvsxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1322&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;VisualVM内存分析&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;等要分析的操作执行结束后，点击“停止”按钮结束监控过程。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.4、BTrace动态日志跟踪&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BTrace是个很有意思的插件，它可以在不停机的情况下，通过字节码注入动态监控系统的运行情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Btrace自动安装如下，到github的网络可能存在不稳定的问题，可以重试，或者手动安装&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5772695772695773&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRct3uVpic2aJH1cqjese9pZvcy4vpJBnWdhhjt50JWSZicOFhpzp2jE3zA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1443&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;BTrace插件安装&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在VisualVM中安装了BTrace插件后，在应用程序面板中右击要调试的程序，会出现“Trace Application…”菜单：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.1182994454713493&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcRwQV2Mu3szveGD2ciaEUPIk5EKhd2DSzGjAAlnhia0oEga9NjkE31jSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;541&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210407231817248&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点击将进入BTrace面板。这个面板看起来就像一个简单的Java程序开发环境：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6394557823129252&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcsFrFG0v56NX2fBZZOuibibDKZgKUCLgwu0aZGS0kp8h4R5S0hh8RKApQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1323&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210407231851293&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在来尝试使用BTrace追踪正在运行的程序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一段简单的Java代码：产生两个1000以内的随机整数，输出这两个数字相加的结果。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BTraceTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; a, &lt;span&gt;int&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; a + b;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;        BTraceTest test = &lt;span&gt;new&lt;/span&gt; BTraceTest();&lt;br/&gt;        BufferedReader reader = &lt;span&gt;new&lt;/span&gt; BufferedReader(&lt;span&gt;new&lt;/span&gt; InputStreamReader(System.in));&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;10&lt;/span&gt;; i++) {&lt;br/&gt;            reader.readLine();&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; a = (&lt;span&gt;int&lt;/span&gt;) Math.round(Math.random() * &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; b = (&lt;span&gt;int&lt;/span&gt;) Math.round(Math.random() * &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;            System.out.println(test.add(a, b));&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行程序，现在需要在不停止程序的情况下，监控程序中生成的两个随机数。在VisualVM中打开该程序的监视，在BTrace页 签填充TracingScript的内容，输入调试代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/* BTrace Script Template */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.sun.btrace.annotations.*;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; com.sun.btrace.BTraceUtils.*;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@BTrace&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TracingScript&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;@OnMethod&lt;/span&gt;(clazz = &lt;span&gt;&quot;cn.fighter3.test.BTraceTest&quot;&lt;/span&gt;, &lt;br/&gt;      method = &lt;span&gt;&quot;add&quot;&lt;/span&gt;, &lt;br/&gt;      location = &lt;span&gt;@Location&lt;/span&gt;(Kind.RETURN)&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;&lt;span&gt;(@Self cn.fighter3.test.BTraceTest instance, &lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; a, &lt;span&gt;int&lt;/span&gt; b,&lt;br/&gt;        @Return &lt;span&gt;int&lt;/span&gt; result)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        println(&lt;span&gt;&quot;调用堆栈:&quot;&lt;/span&gt;);&lt;br/&gt;        jstack();&lt;br/&gt;        println(strcat(&lt;span&gt;&quot;方法参数A:&quot;&lt;/span&gt;, str(a)));&lt;br/&gt;        println(strcat(&lt;span&gt;&quot;方法参数B:&quot;&lt;/span&gt;, str(b)));&lt;br/&gt;        println(strcat(&lt;span&gt;&quot;方法结果:&quot;&lt;/span&gt;, str(result)));&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点击start按钮，当程序运行时将会在Output面板输出调试信息：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5191176470588236&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcwg7STux1VqzCe5bEibeSElNiaQZ74g1uSpGTicaqoMpECQEm4nxrapQng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1360&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210407233504006&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BTrace的用途很广泛，打印调用堆栈、参数、返回值只是它最基础的使用形式，更多应用可以查看官方仓库 https://github.com/btraceio/btrace/wiki 。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3、Java Mission Control&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JMV最初是JRockit虚拟机提供的一款诊断工具。在Oracle JDK7 Update 40以后，它就绑定在Oracle JDK中发布。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JMC位置是&lt;code&gt;%JAVA_HOME%/bin/jmc.exe&lt;/code&gt;，打开软件界面：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5071428571428571&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRc2YcvWydQhzpm1xDEqfAFbHQialc9lyEBqtTYxLTRBxrr0oOMsKaR7WA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;JMC主要界面&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在左侧的“JVM浏览器”面板中自动显示了通过JDP协议（Java Discovery Protocol）找到的本机正在运行的HotSpot虚拟机进程。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1、MBean服务器&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点击本地进程的&lt;code&gt;MBean服务器&lt;/code&gt;：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5326155794806839&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcHMR4RKTR01MZutAvp8aaaDGQgia9DudauCnGv74xa7ab2YOYggcryJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1579&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;MBean服务器&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，以飞行仪表的视图显示了Java堆使用率，CPU使用率和Live Set+Fragmentation。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.2、飞行记录器（Flight Recorder）&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;飞行记录器是JMC提供的另一大功能，它通过记录程序在一段时间内的运行情况，将记录结果进行分析和展示，可以更进一步对系统的性能进行分析和诊断。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要使用JFR，程序启动需要带以下参数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;-XX:+UnlockCommercialFeatures  -XX:+FlightRecorder&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;连接加了相关参数启动的程序，启动飞行记录，进行一分钟的性能记录：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6340248962655601&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcj6PU7KNicwVaSfYfy3ajiaT1xzqJY2mmibHwjvvFOJ6JvIzPElNfwEKPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1205&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210408000854241&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;记录结束后，JMC会自动打开刚才的记录：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6766370250606305&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWcdXpWX80ISs1KKyz9VcmRcGdQYcpw54hVUUUM5CO06aaftMIqCOZSKLbdgwScJH3S9aQ6gibnl7MA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1237&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210408001133160&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JFR提供的数据质量通常也要比其他工具通过代理形式采样获得或者从MBean中取得的数据高得多。以垃圾搜集为例，HotSpot的MBean中一般有各个分代大小、收集次数、时间、占用率等数据（根据收集器不同有所差别），这些都属于“结果”类的信息，而JFR中还可以看到内存中这段时间分配了哪些对象、哪些在TLAB中（或外部）分配、分配速率 和压力大小如何、分配归属的线程、收集时对象分代晋升的情况等。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4、第三方工具&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上三个都是JDK自带的性能监控工具，除此之外还有一些第三方的性能监控工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java 堆内存分析工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GC 日志分析工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;GC&lt;/code&gt; 日志分析工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;商用的性能分析利器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阿里开源诊断工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java 应用性能分析工具，开源、火焰图、跨平台。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里只是简单罗列，就不再展开详细介绍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;big&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/big&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【1】：周志明编著《深入理解Java虚拟机：JVM高级特性与最佳实践》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【2】：《实战JAVA虚拟机  JVM故障诊断与性能优化》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【3】：[Jvm 系列(七):Jvm 调优-工具篇](http://www.ityouknow.com/jvm/2017/09/22/jvm-tool.html)&lt;br/&gt;&lt;br/&gt;【4】：[给，你们想要的排查问题的可视化工具](https://segmentfault.com/a/1190000038225249)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;系列文章：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&amp;amp;mid=2247485301&amp;amp;idx=1&amp;amp;sn=f1ffc220318c4cc4f4c93f57d726a6e2&amp;amp;chksm=c0ccefd0f7bb66c6c69d33660d9661ad71e65f4f71f41966a4a7c2fb876430eca06570793b56&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【JVM进阶之路】一：Java虚拟机概览&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&amp;amp;mid=2247485354&amp;amp;idx=1&amp;amp;sn=97a8f73bbeda01cbb2959aa02b391f13&amp;amp;chksm=c0ccef0ff7bb66195c15e76019478f73549ce6a9ca31ff403669d5832b21b9430e8252560ec1&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【JVM进阶之路】二：Java内存区域&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&amp;amp;mid=2247485367&amp;amp;idx=1&amp;amp;sn=2d8693335a5d78efe0fbeaa10afa8208&amp;amp;chksm=c0ccef12f7bb66045d459010d67f567ec11ee0499589a5ccd89d772aeaffbdd1872f1cfea238&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【JVM进阶之路】三：探究虚拟机对象&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&amp;amp;mid=2247485412&amp;amp;idx=1&amp;amp;sn=bcb6805623c744a37a42157d8eaa64a1&amp;amp;chksm=c0ccef41f7bb6657f8719b9d55759b2766d8fed1223699d9ec0c8655cd5d388600a5299615b3&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【JVM进阶之路】四：直面内存溢出和内存泄漏&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&amp;amp;mid=2247485433&amp;amp;idx=1&amp;amp;sn=d849e82b09c3831a2069a12765159c09&amp;amp;chksm=c0ccef5cf7bb664ac93bd7ee8fc14866a05f920b4f1f1184630818a318cde91121c580ea4182&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【JVM进阶之路】五：垃圾回收概述和对象回收判定&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&amp;amp;mid=2247485455&amp;amp;idx=1&amp;amp;sn=71d35cf6641243539ee258e7c13949be&amp;amp;chksm=c0cce0aaf7bb69bc3cfe88fd828a9a467dd5af4d236d2404e44871eb2994651f7bb5dd6ae5b1&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【JVM进阶之路】六：垃圾收集理论和算法&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&amp;amp;mid=2247485494&amp;amp;idx=1&amp;amp;sn=8415fd0c33c2567c45b12d6ba6bff2af&amp;amp;chksm=c0cce093f7bb69856c87e1925479befaef124982b8ebbfe21442efe43f12723cf7fc546f4c40&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【JVM进阶之路】七：垃圾收集器盘点&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&amp;amp;mid=2247485542&amp;amp;idx=1&amp;amp;sn=0b5145b83dafbc78b8495df86894736b&amp;amp;chksm=c0cce0c3f7bb69d5664f4fcd089d33563fa9338b8ce4ebe1e644249bf9d11b459ab69cf2ebae&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【JVM进阶之路】八：性能监控工具-命令行篇&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkwODE5ODM0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWeFt08hV3N1706WTzfhoTNoXm5LXRV0XibppmeNR4zSNMa3QOJJ7ib4O21P5yohibwuD26Tp9ETWZAqA/0?wx_fmt=png&quot; data-nickname=&quot;三分恶&quot; data-alias=&quot;Fighter3FullStack&quot; data-signature=&quot;一个全栈开发。分享Java后端、Web前端、计算机基础知识。&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;204&quot; data-backw=&quot;558&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWdBLml8yqRnW8SzBIzu9h5RZaLdMfqqUt3mXMbX3bO0nu0FyfqotEfYm56F1xTqoqsmrQn3icGJ6Dw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b8b55c90d23e50a05117dbc81c49d835</guid>
<title>ZooKeeper 设计原理</title>
<link>https://toutiao.io/k/otdc5oi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;em data-darkmode-color-16136621561195=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-style=&quot;max-width: 100%; color: rgb(52, 73, 94); font-family: &amp;quot;Source Sans Pro&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 16px; letter-spacing: 0.544px; text-align: start; white-space: normal; caret-color: rgb(52, 73, 94); background-color: rgb(255, 255, 255); text-size-adjust: auto; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__1&quot; data-darkmode-color-16165880998151=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;strong data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; font-size: medium; letter-spacing: 0.544px; color: rgb(0, 0, 0); font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__2&quot; data-darkmode-color-16094149065186=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(0, 0, 0)&quot; data-darkmode-color-16107273892940=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-color-16121907968588=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16107273892940=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-color-16121907968588=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(217, 33, 66)&quot; data-darkmode-color-16094149065186=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(217, 33, 66)&quot; data-darkmode-color-16107273892940=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-color-16121907968588=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot;&gt;▲ &lt;/span&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(2, 30, 170)&quot; data-style=&quot;max-width: 100%; color: rgb(2, 30, 170); text-align: center; font-size: 11px; letter-spacing: 1px; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__3&quot; data-darkmode-color-16094149065186=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(2, 30, 170)&quot; data-darkmode-color-16107273892940=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-color-16121907968588=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot;&gt;点击上方&quot;多颗糖&quot;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;em data-darkmode-color-16136621561195=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-style=&quot;max-width: 100%; color: rgb(52, 73, 94); font-family: &amp;quot;Source Sans Pro&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 16px; letter-spacing: 0.544px; text-align: start; white-space: normal; caret-color: rgb(52, 73, 94); background-color: rgb(255, 255, 255); text-size-adjust: auto; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__1&quot; data-darkmode-color-16165880998151=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;strong data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; font-size: medium; letter-spacing: 0.544px; color: rgb(0, 0, 0); font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__2&quot; data-darkmode-color-16094149065186=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(0, 0, 0)&quot; data-darkmode-color-16107273892940=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-color-16121907968588=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16107273892940=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-color-16121907968588=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot;&gt;关注公众号&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;本周学习 ZooKeeper，主要讨论以下两个问题：&lt;/p&gt;&lt;p&gt;由于网上讨论 ZooKeeper 的内容已经非常多了，本文尽量避免重复，但一些关键的内容还是需要反复讨论：ZooKeeper 的架构和&lt;strong&gt;两个保证&lt;/strong&gt;，本文还讨论一些细节的问题，但不展开讨论如何使用 ZooKeeper 进行开发。&lt;/p&gt;&lt;p&gt;注：本文根据 6.824 教学视频和讲义整理，以论文&lt;span&gt; ZooKeeper: Wait-free coordination for Internet-scale systems &lt;/span&gt;的内容为主，不讨论 &lt;span&gt;Apache ZooKeeper &lt;/span&gt;源码。&lt;/p&gt;&lt;h2&gt;ZooKeeper 是什么？&lt;/h2&gt;&lt;p&gt;ZooKeeper 是一个分布式协调服务，什么叫协调服务好像也比较抽象，具体来说，ZooKeeper 提供：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;统一命名服务&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;配置管理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;成员管理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Leader 选举&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;协调分布式事务&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分布式锁&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;就是分布式系统中经常用到的服务，ZooKeeper 并没有直接提供这些服务，而是提供 API 供开发者实现自己需要的服务。&lt;/p&gt;&lt;p&gt;ZooKeeper 是一个独立的、通用的服务，用来帮助开发者轻松构建分布式应用。相比于上一章学习的 Raft，Raft 可以用于一些多副本系统中，但一般来说 Raft 并不是一个可以直接交互的独立服务。ZooKeeper 实际上运行在 Zab 之上，站在一个更高的系统设计维度上看，Raft 和 Zab 是一样的，都是为了让多个服务器达成共识。至于 Zab 和 Raft 的细节异同，此文不表。&lt;/p&gt;&lt;h2&gt;ZooKeeper 技术架构&lt;/h2&gt;&lt;p&gt;和之前学习的 Raft 类似，ZooKeeper 集群分为 Leader 和 Follower；和 Raft 有所不同，Raft 只有 Leader 能处理读写请求，&lt;strong&gt;ZooKeeper 允许所有节点处理读请求，但写操作仍然只发送给 Leader&lt;/strong&gt;，这样做的缺点是读操作可能会返回过时的数据，但提高了读的性能。考虑下 Raft，当我们加入更多服务器时，Leader 几乎可以确定是一个瓶颈，因为 Leader 需要处理每一个读写请求，需要将每个请求的拷贝发送给每个其他服务器，随着服务器数量的增加，Raft 系统的性能可能反而会降低。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.30833333333333335&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA3icGjzNwwiatbiboicTuCtkOQSZp9aL1HMfCWZaro3KaykGHB0sqlE8GeUaqQQB7HGtIVqc1d1SOM7pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;ZooKeeper 专门为大量的读负载而设计的系统&lt;/strong&gt;，所以允许所有节点处理读请求，除了 Leader 以外的任何一个副本的数据都可能不是最新的。&lt;/p&gt;&lt;p&gt;但如果系统都不提供线性一致性，我们为什么还要相信这个系统是可用的？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;ZooKeeper 有两个基本的一致性保证：线性写和先进先出(FIFO)的客户端请求&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;线性写&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;All requests that update the state of ZooKeeper are serializable and respect precedence.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Leader 保证写操作的顺序，并且该顺序在所有 Follower 上保持一致。注意这里用了串行化(&lt;code&gt;serializable&lt;/code&gt;)而不是线性一致性(&lt;code&gt;linearizability&lt;/code&gt;)。&lt;/p&gt;&lt;p&gt;前面提到 ZooKeeper 不保证线性读。例如，client A 更新了键 X 的值，而 client B 在另一台服务器上读取键 X 的值可能会读到更新之前的值——&lt;strong&gt;ZooKeeper 只保证线性写&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;先进先出的客户端请求&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;All requests from a given client are executed in the order that they were sent by the client.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;另一个保证是，每个客户端可以为其操作(读和写)指定一个顺序，ZooKeeper 会按照客户端指定的顺序来执行。&lt;/p&gt;&lt;p&gt;该如何理解这里呢？分两种情况讨论。&lt;/p&gt;&lt;p&gt;对于写请求，所有的写请求会以客户端发送的相对顺序，加入到所有客户端的写请求中，保证满足线性写。所以如果一个客户端要求，先完成写操作 A，接着写操作 B，之后是写操作 C，那么，在最终整体的写请求中将看到是先写 A 再写 B 再写 C 的，&lt;strong&gt;但 A B C 可能不是相邻的&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;对于读请求，由于读请求不需要经过 Leader，可能会复杂一些，多个读请求可能先在先在某个副本，但这个副本宕机了，剩余读请求切换到了另外的副本上。&lt;/p&gt;&lt;p&gt;ZooKeeper 通过 &lt;code&gt;zxid&lt;/code&gt; 来实现，&lt;code&gt;zxid&lt;/code&gt; 是最后一个事务的标记，当客户端发出一个请求到一个相同或者不同的副本时，会在请求带上 &lt;code&gt;zxid&lt;/code&gt; 标记，副本通过检查客户端的 &lt;code&gt;zxid&lt;/code&gt; 和自己的 &lt;code&gt;zxid&lt;/code&gt;，保证读到的是更新的 &lt;code&gt;zxid&lt;/code&gt; 的数据(没有具体说怎么处理，是阻塞等待还是拒绝请求)。&lt;/p&gt;&lt;p&gt;更进一步，如果同一个客户端发送一个写请求&lt;code&gt;&amp;lt;X, 17&amp;gt;&lt;/code&gt;，然后立即去某个副本服务器读 X，这里会暂缓一下读请求，直到这个副本发现写请求的 &lt;code&gt;zxid&lt;/code&gt; 已经执行了，即&lt;strong&gt;客户端将会读到 &lt;code&gt;&amp;lt;X, 17&amp;gt;&lt;/code&gt;，不会读到过期的数据。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这样子看，&lt;strong&gt;ZooKeeper 究竟是不是线性一致的？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;按照教授的说法，认为 ZooKeeper 不是线性一致的，但也不是完全非线性一致的，只能说对于单个客户端请求来说是线性一致的。&lt;/p&gt;&lt;p&gt;那么 &lt;code&gt;zxid&lt;/code&gt; 必须要等到写请求执行完成才返回吗？&lt;/p&gt;&lt;p&gt;实际上不知道具体是如何工作的，可能需要看看 Apache ZooKeeper 源码，但这是个合理的假设。&lt;/p&gt;&lt;h2&gt;同步操作 sync&lt;/h2&gt;&lt;p&gt;为什么 ZooKeeper 如此流行，其中一个原因是，有一个弥补线性一致性的方法。&lt;/p&gt;&lt;p&gt;ZooKeeper 提供一个 &lt;code&gt;sync&lt;/code&gt; 操作，本质上是一个写请求，如果想读到最新写入的数据，可以发送一个 &lt;code&gt;sync&lt;/code&gt; 请求，最终会在所有副本中读到最新的数据。&lt;/p&gt;&lt;p&gt;这其实与前面提到的 FIFO 客户端请求类似，&lt;code&gt;sync&lt;/code&gt; 就是一个写请求，然后后面跟着一个读请求，保证读请求能读到自己写请求的内容。&lt;/p&gt;&lt;p&gt;同时也要认识到，&lt;strong&gt;&lt;code&gt;sync&lt;/code&gt; 是一个代价很高的操作，因为我们将一个读操作转换成了一个写+读操作&lt;/strong&gt;，如果不是必须，还是不要这么做。&lt;/p&gt;&lt;h2&gt;数据模型&lt;/h2&gt;&lt;p&gt;ZooKeeper 用 znode 表示内存数据节点，znode 以层次命名空间的方式组织起来称为数据树(data tree)，与文件系统非常类似。例如，使用 &lt;code&gt;/A/B/C&lt;/code&gt; 给出 znode C 的路径，C 的父节点是 B，B 的父节点是 A。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;我猜，znode 就是借用文件系统 inode 来命名。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6322314049586777&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA3icGjzNwwiatbiboicTuCtkOQSVXlHrXIuiafBmDyH4ruslrSmDO3GW3OZcY8SCqLR1KXn1k3lBBRNnZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;484&quot;/&gt;&lt;/p&gt;&lt;p&gt;客户端可以创建两种类型的 znode：&lt;/p&gt;&lt;p&gt;所有 znodes 都存储数据。除了临时 znode，所有 znode 都可以有子节点。&lt;/p&gt;&lt;p&gt;创建新的 znode 节点时，还可以指定 &lt;code&gt;sequential&lt;/code&gt; 标识创建顺序的 znode，当设置了这个标识后，znode 的名字末尾会添加上一个单调递增计数器，即 &lt;code&gt;name+ seqno&lt;/code&gt;，由父节点维护，如果 n 是新节点，p 是父节点，n 的 &lt;code&gt;seqno&lt;/code&gt; 将大于所有在 n 之前创建的 p 的子节点的 &lt;code&gt;seqno&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;这样组合后其实有四种类型的 znode：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;PERSISTENT&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;EPHEMERAL&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;PERSISTENT_SEQUENTIAL&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;EPHEMERAL_SEQUENTIAL&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;ZooKeeper 实现&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5163398692810458&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA3icGjzNwwiatbiboicTuCtkOQSuiadq7N48HbrmfGTvjAq1QYu4osZicO87qicicibvUT4pMMrLTYnsODbWGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;765&quot;/&gt;&lt;/p&gt;&lt;p&gt;如图，ZooKeeper 主要由以下组件构成：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;请求处理器(Request Processor)&lt;/strong&gt;：将收到的请求转为&lt;strong&gt;幂等的&lt;/strong&gt;事务，根据版本信息，生成包含新数据、版本号和更新的时间戳的 &lt;code&gt;setDataTXN&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;原子广播（Atomic Broadcast）&lt;/strong&gt;：使用 zab 协议达成共识，这里不展开&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;多副本数据库（Replicated Database）&lt;/strong&gt;：将内存状态存储为模糊快照(fuzzy snapshot)，用来恢复状态。做快照时不锁定当前状态。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;模糊快照论文中有简单解释，例如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;⟨SetDataTXN, /foo, f2, 2⟩ &lt;br/&gt;⟨SetDataTXN, /goo, g2, 2⟩ &lt;br/&gt;⟨SetDataTXN, /foo, f3, 3⟩&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在处理这些状态变更之后，&lt;code&gt;/foo = f3&lt;/code&gt; 和 &lt;code&gt;/goo = g2&lt;/code&gt;。但模糊快照可能记录 &lt;code&gt;/foo = f3&lt;/code&gt; 和 &lt;code&gt;/goo = g1&lt;/code&gt;，版本分别为 3 和 1，这不是 ZooKeeper 数据的最终状态。如果服务器宕机从快照恢复，需要 Zab 重新发送状态变更，和快照一起重放内存状态，最终保证与宕机前的服务状态一致。&lt;/p&gt;&lt;h2&gt;客户端 API&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;create(path, data, flags)&lt;/code&gt;：使用 path 创建一个新的 znode 节点存储 data，仅第一次创建会成功。flags 用于创建普通或者临时节点，也可以设置 &lt;code&gt;sequential&lt;/code&gt; 标识。&lt;br/&gt;&lt;code&gt;delete(path, version)&lt;/code&gt;：如果 znode.version = version，则删除 znode。&lt;br/&gt;&lt;code&gt;exists(path, watch)&lt;/code&gt;：如果指定 path 的 znode 存在则返回真，如果不存在则返回假。watch 标识用于在 znode 上设置监视器。&lt;br/&gt;&lt;code&gt;getData(path, watch)&lt;/code&gt;：返回数据和元数据，如版本信息。watch 标识与 &lt;code&gt;exists()&lt;/code&gt; 的 watch 标识一样，但如果 znode 不存在则不会设置监视器。&lt;br/&gt;&lt;code&gt;setData(path, data, version)&lt;/code&gt;：如果 znode.version = version，则更新 znode 上的 data。&lt;br/&gt;&lt;code&gt;getChildren(path, watch)&lt;/code&gt;：返回 znode 所有子节点的名称。&lt;br/&gt;&lt;code&gt;sync(path)&lt;/code&gt;：等待所有更新操作发送到客户端连接的服务器。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;几个重要特性：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;排他地创建 znode，有且仅有一个 &lt;code&gt;create&lt;/code&gt; 返回成功&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;当客户端连接到 ZooKeeper 时，建立一个会话(session)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;所有的方法都有同步和异步的版本&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;更新操作（&lt;code&gt;delete&lt;/code&gt; 和 &lt;code&gt;setData&lt;/code&gt;）会有预期的版本号，如果与 znode 的实际版本号不同，操作将失败&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;用 watch 来避免轮询&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;ZooKeeper 应用&lt;/h2&gt;&lt;p&gt;对应前面学习到的分布式系统，可以应用在：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;VMware-FT 中的 &lt;code&gt;test-and-set&lt;/code&gt; 服务；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;GFS 中的 master 可以使用 ZooKeeper 来扮演，甚至可以提高性能，因为所有副本都能提供读服务；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在 MapReduce 中用来管理成员信息，谁是当前的 master、谁是 worker、worker 列表、什么工作分配给什么 worker 等等；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;论文中还提到一些配置管理、成员管理、锁、读写锁等应用，&lt;code&gt;Apache ZooKeeper&lt;/code&gt; 有更详细的代码示例，网上资源也很多了，在此不表。&lt;/p&gt;&lt;h2&gt;遗憾：未涵盖的主题&lt;/h2&gt;&lt;p&gt;&lt;em&gt;也许看看 Apache ZooKeeper 源代码能有答案。&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;FAQ&lt;/h2&gt;&lt;p&gt;来源：&lt;span&gt;https://pdos.csail.mit.edu/6.824/papers/zookeeper-faq.txt&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;Q: 线性化(linearizability)和串行化(serializability)有什么不同？&lt;/h4&gt;&lt;p&gt;通常来说串行化很像线性化，但不要求遵守实时顺序。详细解释可以查看：&lt;span&gt;http://www.bailis.org/blog/linearizability-versus-serializability/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;ZooKeeper 论文的 2.3 节里写到一致性是 serializable 的。&lt;/p&gt;&lt;p&gt;还可以看看：&lt;span&gt;https://jepsen.io/consistency&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;Q: 什么是流水线(pipelining)&lt;/h4&gt;&lt;p&gt;首先，ZooKeeper 的 Leader 会将多次请求合并成一次发送到磁盘和网络，这里是利用 batching 来解决请求很多的情况。&lt;/p&gt;&lt;p&gt;其次，pipelining 可以让客户端不用等待请求返回，就可以继续处理后面的请求，就像异步的操作。&lt;/p&gt;&lt;p&gt;这里和 Raft 提到的性能优化中的 Batching 和 Pipelining 一模一样。&lt;/p&gt;&lt;h4&gt;Q: 什么是 wait-free？&lt;/h4&gt;&lt;p&gt;精确的定义是：一个 wait-free 的并发数据对象保证任何进程都能在有限的步骤中完成任何操作，无论其他进程的执行速度如何。可以查阅论文：&lt;span&gt;https://cs.brown.edu/~mph/Herlihy91/p124-herlihy.pdf&lt;/span&gt;&lt;/p&gt;&lt;p&gt;ZooKeeper 是 wait-free 的，因为它在处理一个客户端请求的时候，无需等待其他客户端的结果。&lt;/p&gt;&lt;p&gt;不过，根据 watch 机制，ZooKeeper 客户端有时候也会等待别的客户端的结果。&lt;/p&gt;&lt;h4&gt;Q: Leader 如何知道客户端异步更新时的执行顺序？&lt;/h4&gt;&lt;p&gt;论文没说，可能是客户端对异步请求进行编号，追踪每个会话的请求列表。&lt;/p&gt;&lt;h4&gt;Q: 如果客户端没有收到请求的响应，它会做什么？&lt;/h4&gt;&lt;p&gt;论文没说，Leader 可能会跟踪它收到的每个请求，过滤掉一些重复的请求。和 Lab 3 类型。&lt;/p&gt;&lt;h4&gt;Q: 如果客户端发送异步写，然后立即执行读操作，读操作会看到写操作的结果吗？&lt;/h4&gt;&lt;p&gt;论文没有明说，但是按照 FIFO 的客户端请求的含义，应该是可以看到的写操作的结果的。这似乎意味着，读操作可能会阻塞，直到服务器收到前面的写操作。&lt;/p&gt;&lt;h4&gt;Q: 为什么要实现 fuzzy snapshots？&lt;/h4&gt;&lt;p&gt;一个精确的快照将对应日志中的一个特定点，该快照包含这个点之前所有的写，不包含之后所有的写，所以&lt;strong&gt;需要防止在创建和写入快照时发生任何写操作，这将降低很多性能。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;ZooKeeper 的快照是将内存状态导出写入持久存储:&lt;/p&gt;&lt;p&gt;参见：&lt;span&gt;https://zookeeper.apache.org/doc/r3.7.0/zookeeperAdmin.html&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;Q: ZooKeeper 如何选主？&lt;/h4&gt;&lt;p&gt;使用 Zab 原子广播算法。Zab 的 paper：&lt;span&gt;http://dl.acm.org/citation.cfm?id=2056409&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;Q: ZooKeeper 的数据库有多大？看起来服务器要有很多内存。&lt;/h4&gt;&lt;p&gt;这取决于应用，但论文没有提及，鉴于 ZooKeeper 只是一个协调服务，不是一个常规的存储服务，内存数据库是合理的选择。&lt;/p&gt;&lt;h4&gt;Q: 什么是 universal object？&lt;/h4&gt;&lt;p&gt;一种并发理论，通常和前面的 wait-free 放在一起理解，同样参见论文：&lt;span&gt;https://cs.brown.edu/~mph/Herlihy91/p124-herlihy.pdf&lt;/span&gt;&lt;/p&gt;&lt;p&gt;作者称使用这种并发理论，以表明 Zookeeper 的 API 是通用的：API 包括足够的功能来实现任何你想要的协调方案。&lt;/p&gt;&lt;p&gt;更多：&lt;span&gt;https://en.wikipedia.org/wiki/Non-blocking_algorithm&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;Q: 能否在不停止 ZooKeeper 服务的情况下添加更多的服务器?&lt;/h4&gt;&lt;p&gt;虽然论文里 ZooKeeper 集群成员是静态的，但开源的 ZooKeeper 支持动态扩容：&lt;span&gt;https://zookeeper.apache.org/doc/r3.7.0/zookeeperReconfig.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;有论文阐述其机制：&lt;span&gt;https://www.usenix.org/system/files/conference/atc12/atc12-final74.pdf&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;Q：客户端的库如何实现 watch 机制？&lt;/h4&gt;&lt;p&gt;在大多数情况下，客户端库可能会注册一个回调函数，该函数将在监视触发时被调用。例如，ZooKeeper 的 Go 客户端通过 &lt;code&gt;GetW()&lt;/code&gt; 返回一个 channel 来实现。&lt;/p&gt;&lt;p&gt;参见：&lt;span&gt;https://godoc.org/github.com/samuel/go-zookeeper/zk#Conn.GetW&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;Q: 为什么第6页代码中的读锁跳到第3行，而不是像写锁那样跳到第2行？&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;这应该是一个 bug&lt;/strong&gt;，正确的代码块参见：&lt;span&gt;https://zookeeper.apache.org/doc/r3.7.0/recipes.html#Shared+Locks&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;ZooKeeper 是一个为特定用途而设计的好的例子，放宽了一致性，以提高以读为主的工作负载，论文中的结果显示，ZooKeeper 的吞吐量可以线性拓展。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4449877750611247&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA3icGjzNwwiatbiboicTuCtkOQSdciaCnZuic8mxUfa73OsFO63aictAAuvfg0zicdiagxE3cfMkfxAWPBRm1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;409&quot;/&gt;&lt;/p&gt;&lt;p&gt;如今许多分布式系统中应用了 ZooKeeper，可以在这里查看：&lt;span&gt;https://zookeeper.apache.org/doc/r3.7.0/zookeeperUseCases.html。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;Reference&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;ZooKeeper：&lt;span&gt;https://zookeeper.apache.org/&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ZooKeeper wiki：&lt;span&gt;https://cwiki.apache.org/confluence/display/ZOOKEEPER/Index&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Zab：&lt;span&gt;http://dl.acm.org/citation.cfm?id=2056409&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Wait-Free Synchronization：https://cs.brown.edu/~mph/Herlihy91/p124-herlihy.pdf&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ZooKeeper FAQ：&lt;span&gt;https://pdos.csail.mit.edu/6.824/papers/zookeeper-faq.txt&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Linearizability versus Serializability：&lt;span&gt;http://www.bailis.org/blog/linearizability-versus-serializability/&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Consistency Models：&lt;span&gt;https://jepsen.io/consistency&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Non-blocking algorithm：&lt;span&gt;https://en.wikipedia.org/wiki/Non-blocking_algorithm&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Dynamic Reconfiguration of Primary/Backup Clusters：&lt;span&gt;https://www.usenix.org/system/files/conference/atc12/atc12-final74.pdf&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ZooKeeper Go Client：&lt;span&gt;https://github.com/samuel/go-zookeeper&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-darkmode-color-16178855864317=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)&quot; data-style=&quot;margin-top: 35px; margin-bottom: 15px; padding-bottom: 0.5em; font-weight: bold; font-size: 1.75rem; max-width: 100%; line-height: 1.225; cursor: text; border-bottom: 1px solid rgb(221, 221, 221); caret-color: rgb(52, 73, 94); color: rgb(52, 73, 94); font-family: &amp;quot;Source Sans Pro&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; text-align: start; white-space: normal; text-size-adjust: auto; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__176&quot;&gt;相关阅读&lt;/h2&gt;&lt;p&gt;&lt;span data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;em data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;欢迎关注我的公众号：&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA1ynq0HZhJ5kup6vibWOUCRsH7QIzgtnEIDoWXpYqiacbxwrHoWMAL3XYQj08bbxRxNlcQd4NYLZibCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>28af87caf8989e06717b589ce59df4b6</guid>
<title>一文读懂，DDD 落地数据库设计实战</title>
<link>https://toutiao.io/k/6aau0fc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;作者范钢，曾任航天信息首席架构师，《大话重构》一书的作者。本文根据具体实例详细描述了DDD 落实到数据库设计的整个过程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;阅读本文之前建议先阅读上一篇文章《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU5MTIyODk1Mg==&amp;amp;mid=2247484368&amp;amp;idx=1&amp;amp;sn=30a1ec30d05a454f8451332d0b492ae3&amp;amp;chksm=fe337aa7c944f3b148ba696f2014229f817edec9a2d854e88b6c218cad382da5805faf24ddbb&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;万字长文，结合电商支付业务一文搞懂DDD&lt;/a&gt;》&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;过去，系统的软件设计是以数据库设计为核心，当需求确定下来以后，团队首先开始进行数据库设计。因为数据库是各个模块唯一的接口，当整个团队将数据库设计确定下来以后，就可以按照模块各自独立地进行开发了，如下图所示。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.31003811944091486&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I2EApibvt9icxmZjLs8UED4S2icRhZRDja2cQpgGpcpsf4mDb3aPokrFrD9vp1aTzAmsmqwAtDU6sCDhoxv8JUKwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1574&quot;/&gt;&lt;/p&gt;&lt;p&gt;在上面的过程中，为了提高团队开发速度，尽量让各个模块不要交互，从而达到各自独立开发的效果。但是，随着系统规模越来越大，业务逻辑越来越复杂，我们越来越难于保证各个模块独立不交互了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着软件业的不断发展，软件系统变得越来越复杂，各个模块间的交互也越来越频繁，这时，原有的设计过程已经不能满足我们的需要了。因为如果要先进行数据库设计，但数据库设计只能描述数据结构，而不能描述系统对这些数据结构的处理。因此，在第一次对整个系统的梳理过程中，只能梳理系统的所有数据结构，形成数据库设计；接着，又要再次梳理整个系统，分析系统对这些数据结构的处理过程，形成程序设计。为什么不能一次性地把整个系统的设计梳理到位呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5656324582338902&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I2EApibvt9icxmZjLs8UED4S2icRhZRDja28ksGdUXicNxGegP5VKSsj5MOrYBuCZXMeVl29AYO1QhtfXr4jJIeBVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1676&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;现如今，我们已经按照面向对象的软件设计过程来分析设计系统了。当开始需求分析时，首先进行用例模型的设计，分析整个系统要实现哪些功能；接着进行领域模型的设计，分析系统的业务实体。在领域模型分析中，采用类图的形式，每个类可以通过它的属性来表述数据结构，又可以通过添加方法来描述对这个数据结构的处理。因此，在领域模型的设计过程中，既完成了对数据结构的梳理，又确定了系统对这些数据结构的处理，这样就把两项工作一次性地完成了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在这个设计过程中，其核心是领域模型的设计。以领域模型作为核心，可以指导系统的数据库设计与程序设计，此时，数据库设计就弱化为了领域对象持久化设计的一种实现方式。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;领域对象持久化的思想&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;什么叫领域对象的持久化呢？在当今软件架构设计的主流思想中，面向对象设计成了主流思想，在整个系统运行的过程中，所有的数据都是以领域对象的形式存在的。譬如：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;假如我们的服务器是一台超级强大的服务器，那实际上不需要任何数据库，直接操作这些领域对象就可以了，但在现实世界中没有那么强大的服务器。因此，必须将暂时不用的领域对象持久化存储到磁盘中，而数据库只是这种持久化存储的一种实现方式。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;按照这种设计思想，我们将暂时不使用的领域对象从内存中持久化存储到磁盘中。当日后需要再次使用这个领域对象时，根据 key 值到数据库查找到这条记录，然后将其恢复成领域对象，应用程序就可以继续使用它了，这就是领域对象持久化存储的设计思想。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以，今天的数据库设计，实际上就是将领域对象的设计按照某种对应关系，转换成数据库的设计。同时，随着整个产业的大数据转型，今后的数据库设计思想也将发生巨大的转变，有可能数据库就不一定是关系型数据库了，也许是 NoSQL 数据库或者大数据平台。数据库的设计也不一定遵循 3NF（第三范式）了，可能会增加更多的冗余，甚至是宽表。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据库设计在发生剧烈的变化，但唯一不变的是领域对象。这样，当系统在大数据转型时，可以保证业务代码不变，变化的是数据访问层（DAO）。这将使得日后大数据转型的成本更低，让我们更快地跟上技术快速发展的脚步。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;领域模型的设计&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;此外，这里有个有趣的问题值得探讨：领域模型的设计到底是谁的职责，是需求分析人员还是设计开发人员？我认为，它是两个角色相互协作的产物。而未来敏捷开发的组织形成，团队将更加扁平化。过去是需求分析人员做需求分析，然后交给设计人员设计开发，这种方式就使得软件设计质量低下而结构臃肿。未来“大前端”的思想将支持更多设计开发人员直接参与需求分析，实现从需求分析到设计开发的一体化组织形式。这样，领域模型就成为了设计开发人员快速理解需求的利器。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总之，**DDD 的数据库设计实际上已经变成了：以领域模型为核心，如何将领域模型转换成数据库设计的过程。**那么怎样进行转换呢？在领域模型中是一个一个的类，而在数据库设计中是一个一个的表，因此就是将类转换成表的过程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5829207920792079&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I2EApibvt9icxmZjLs8UED4S2icRhZRDja2icyGXibvSnzUbKPGNfhPjspXlJZQX6Q89rTuuyX29Ap7bXUNyVnvFwEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1616&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上图是一个绩效考核系统的领域模型图，该绩效考核系统首先进行自动考核，发现一批过错，然后再给一个机会，让过错责任人对自己的过错进行申辩。这时，过错责任人可以填写一张申辩申请单，在申辩申请单中有多个明细，每个明细对应一个过错行为，每个过错行为都对应了一个过错类型，这样就形成了一个领域模型。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;接着，要将这个领域模型转换成数据库设计，怎么做呢？很显然，领域模型中的一个类可以转换成数据库中的一个表，类中的属性可以转换成表中的字段。但这里的关键是如何处理类与类之间的关系，如何转换成表与表之间的关系。这时候，就有 5 种类型的关系需要转换，即传统的 4 种关系 + 继承关系。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;传统的 4 种关系&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;传统的关系包含一对一、多对一、一对多、多对多这 4 种，它们既存在于类与类之间，又存在于表与表之间，所以可以直接进行转换。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. 一对一关系&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在以上案例中，“申辩申请单明细”与“过错行为”就是一对“一对一”关系。在该关系中，一个“申辩申请单明细”必须要对应一个“过错行为”，没有一个“过错行为”的对应就不能成为一个“申辩申请单明细”。这种约束在数据库设计时，可以通过外键来实现。但是，一对一关系还有另外一个约束，那就是一个“过错行为”最多只能有一个“申辩申请单明细”与之对应。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;也就是说，一个“过错行为”可以没有“申辩申请单明细”与之对应，但如果有，最多只能有一个“申辩申请单明细”与之对应，这个约束暗含的是一种唯一性的约束。因此，将过错行为表中的主键，作为申辩申请单明细表的外键，并将该字段升级为申辩申请单明细表的主键。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6288532675709001&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I2EApibvt9icxmZjLs8UED4S2icRhZRDja2HbkOib8WdmQzBnyFYCyibJ4rlFZE4trXmKibS6clur4bhyhDqibQaZZIaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1622&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. 多对一关系&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;是日常的分析设计中最常见的一种关系。在以上案例中，一个过错行为对应一个税务人员、一个纳税人与一个过错类型；同时，一个税务人员，或纳税人，或过错类型，都可以对应多个过错行为。它们就形成了“多对一”关系。在数据库设计时，通过外键就可以建立这种“多对一”关系。因此，我们进行了如下数据库的设计：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6554524361948956&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I2EApibvt9icxmZjLs8UED4S2icRhZRDja2F2msObeSGZNYENOYy1NQNPPiaQIQxLsdkoCKPiau8hdgbNcD5FwNQpbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1724&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;多对一关系在数据库设计上比较简单，然而落实到程序设计时，需要好好探讨一下。比如，以上案例，在按照这样的方式设计以后，在查询时往往需要在查询过错行为的同时，显示它们对应的税务人员、纳税人与过错类型。这时，以往的设计是增加一个 join 语句。然而，这样的设计在随着数据量不断增大时，查询性能将受到极大的影响。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;也就是说，join 操作往往是关系型数据库在面对大数据时最大的瓶颈之一。因此，一个更好的方案就是先查询过错行为表，分页，然后再补填当前页的其他关联信息。这时，就需要在“过错行为”这个值对象中通过属性变量，增加对税务人员、纳税人与过错类型等信息的引用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 一对多关系&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;该关系往往表达的是一种主-子表的关系。譬如，以上案例中的“申辩申请单”与“申辩申请单明细”就是一对“一对多”关系。除此之外，订单与订单明细、表单与表单明细，都是一对多关系。一对多关系在数据库设计上比较简单，就是在子表中增加一个外键去引用主表中的主键。比如本案例中，申辩申请单明细表通过一个外键去引用申辩申请单表中的主键，如下图所示。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5017878426698451&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I2EApibvt9icxmZjLs8UED4S2icRhZRDja23z3Y8LOXnGYBNs2VgmDibwWDr0ldSgHw1vlZZEibsibdfDANTqEGQjkibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1678&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;除此之外，在程序的值对象设计时，主对象中也应当有一个集合的属性变量去引用子对象。如本例中，在“申辩申请单”值对象中有一个集合属性去引用“申辩申请单明细”。这样，当通过申辩申请单号查找到某个申辩申请单时，同时就可以获得它的所有申辩申请单明细，如下代码所示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Sbsqd&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; Set&amp;lt;SbsqdMx&amp;gt; sbsqdMxes;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setSbsqdMxes&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Set&amp;lt;SbsqdMx&amp;gt; sbsqdMxes&lt;/span&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.sbsqdMxes = sbsqdMxes;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Set&amp;lt;SbsqdMx&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getSbsqdMxes&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.sbsqdMxes;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ……&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4. 多对多关系&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;比较典型的例子就是“用户角色”与“功能权限”。一个“用户角色”可以申请多个“功能权限”；而一个“功能权限”又可以分配给多个“用户角色”使用，这样就形成了一个“多对多”关系。这种多对多关系在对象设计时，可以通过一个“功能-角色关联类”来详细描述。因此，在数据库设计时就可以添加一个“角色功能关联表”，而该表的主键就是关系双方的主键进行的组合，形成的联合主键，如下图所示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6456692913385826&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I2EApibvt9icxmZjLs8UED4S2icRhZRDja2F7s5wJ7abIGyt7TXL2FNMvCmO97WFnlE11hmmibpVqKo9SZMlL3AnoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1524&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上是领域模型和数据库都有的 4 种关系。因此，在数据库设计时，直接将相应的关系转换成数据库设计就可以了。同时，在数据库设计时还要将它们进一步细化。如在领域模型中，不论对象还是属性，在命名时都采用中文，这样有利于沟通与理解。但到了数据库设计时，就要将它们细化为英文命名，或者汉语拼音首字母，同时还要确定它们的字段类型与是否为空等其他属性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;继承关系的 3 种设计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第 5 种关系就不太一样了：继承关系是在领域模型设计中有，但在数据库设计中却没有。如何将领域模型中的继承关系转换成数据库设计呢？有 3 种方案可以选择。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. 继承关系的第一种方案&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;首先，看看以上案例。“执法行为”通过继承分为“正确行为”和“过错行为”。如果这种继承关系的子类不多（一般就 2 ~ 3 个），并且每个子类的个性化字段也不多（3 个以内）的话，则可以使用一个表来记录整个继承关系。在这个表的中间有一个标识字段，标识表中的每条记录到底是哪个子类，这个字段的前面部分罗列的是父类的字段，后面依次罗列各个子类的个性化字段。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6769456681350955&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I2EApibvt9icxmZjLs8UED4S2icRhZRDja2Iu19owxRicyNGJ8drhxhhwMeysibuEAJNB2RhJOicnkP8DPdhTJVLwSkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1362&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;采用这个方案的优点是简单，整个继承关系的数据全部都保存在这个表里。但是，它会造成“表稀疏”。在该案例中，如果是一条“正确行为”的记录，则字段“过错类型”与“扣分”永远为空；如果是一条“过错行为”的记录，则字段“加分”永远为空。假如这个继承关系中各子类的个性化字段很多，就会造成该表中出现大量字段为空，称为“表稀疏”。在关系型数据库中，为空的字段是要占用空间的。因此，这种“表稀疏”既会浪费大量存储空间，又会影响查询速度，是需要极力避免的。所以，当子类比较多，或者子类个性化字段多的情况是不适合该方案（第一种方案）的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. 继承关系的第二种方案&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果执法行为按照考核指标的类型进行继承，分为“考核指标1”“考核指标2”“考核指标3”……如下图所示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8019639934533551&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I2EApibvt9icxmZjLs8UED4S2icRhZRDja2sbNxTftX9r6mKTicuWZMwBZibiaoPUmNyLkHnNibggZhuibQcL8I8BgPqicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1222&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;并且每个子类都有很多的个性化字段，则采用前面那个方案就不合适了。这时，用另外两个方案进行数据库设计。其中一个方案是将每个子类都对应到一个表，有几个子类就有几个表，这些表共用一个主键，即这几个表的主键生成器是一个，某个主键值只能存在于某一个表中，不能存在于多个表中。每个表的前面是父类的字段，后面罗列各个子类的字段，如下图所示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.559322033898305&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I2EApibvt9icxmZjLs8UED4S2icRhZRDja2icnd2zVxic66CmkxHSTgjBwTpBV5eRtfDWab59pgRSLU5GL7H5SQdaHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1534&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果业务需求是在前端查询时，每次只能查询某一个指标，那么采用这种方案就能将每次查询落到某一个表中，方案就最合适。但如果业务需求是要查询某个过错责任人涉及的所有指标，则采用这种方案就必须要在所有的表中进行扫描，那么查询效率就比较低，并不适用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 继承关系的第三种方案&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果业务需求是要查询某个过错责任人涉及的所有指标，则更适合采用以下方案，将父类做成一个表，各个子类分别对应各自的表（如图所示）。这样，当需要查询某个过错责任人涉及的所有指标时，只需要查询父类的表就可以了。如果要查看某条记录的详细信息，再根据主键与类型字段，查询相应子类的个性化字段。这样，这种方案就可以完美实现该业务需求。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6565656565656566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I2EApibvt9icxmZjLs8UED4S2icRhZRDja2ibFeKicI0vRNhiajQDWRBicia35a07OthCCJxQwCZ3LFOyfVgfmia7DpYRXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1584&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;综上所述，将领域模型中的继承关系转换成数据库设计有 3 种方案，并且每个方案都有各自的优缺点。因此，需要根据业务场景的特点与需求去评估，选择哪个方案更适用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;NoSQL 数据库的设计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;前面我们讲的数据库设计，还是基于传统的关系型数据库、基于第三范式的数据库设计。但是，随着互联网高并发与分布式技术的发展，另一种全新的数据库类型孕育而生，那就是NoSQL 数据库。正是由于互联网应用带来的高并发压力，采用关系型数据库进行集中式部署不能满足这种高并发的压力，才使得分布式 NoSQL 数据库得到快速发展。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;也正因为如此，NoSQL 数据库与关系型数据库的设计套路是完全不同的。关系型数据库的设计是遵循第三范式进行的，它使得数据库能够大幅度降低冗余，但又从另一个角度使得数据库查询需要频繁使用 join 操作，在高并发场景下性能低下。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以，NoSQL 数据库的设计思想就是尽量干掉 join 操作，即将需要 join 的查询在写入数据库表前先进行 join 操作，然后直接写到一张单表中进行分布式存储，这张表称为“宽表”。这样，在面对海量数据进行查询时，就不需要再进行 join 操作，直接在这个单表中查询。同时，因为 NoSQL 数据库自身的特点，使得它在存储为空的字段时不占用空间，不担心“表稀疏”，不影响查询性能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;因此，NoSQL 数据库在设计时的套路就是，尽量在单表中存储更多的字段，只要避免数据查询中的 join 操作，即使出现大量为空的字段也无所谓了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5672082717872969&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I2EApibvt9icxmZjLs8UED4S2icRhZRDja2rD71opFQ9Of0ukCLcNj1s7I1X38ox83ca8EjHWIQib8hUibgVhT8ibnicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1354&quot;/&gt;&lt;/p&gt;&lt;p&gt;增值税发票票样图&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;正因为 NoSQL 数据库在设计上有以上特点，因此将领域模型转换成 NoSQL 数据库时，设计就完全不一样了。比如，这样一张增值税发票，如上图所示，在数据库设计时就需要分为发票信息表、发票明细表与纳税人表，而在查询时需要进行 4 次 join 才能完成查询。但在 NoSQL 数据库设计时，将其设计成这样一张表：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{ _id: ObjectId(&lt;span class=&quot;code-snippet__number&quot;&gt;7d&lt;/span&gt;f78ad8902c)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fpdm: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;3700134140&#x27;&lt;/span&gt;, fphm: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;02309723‘, &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  kprq: &#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;-25&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;9&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;22&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  je: 70451.28, se: 11976.72, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  gfnsr: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     nsrsbh: &#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;370112582247803&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     nsrmc:&#x27;&lt;/span&gt;联通华盛通信有限公司济南分公司&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;,…&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  xfnsr: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     nsrsbh: &#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;370112575587500&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     nsrmc:&#x27;&lt;/span&gt;联通华盛通信有限公司济南分公司&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;,…&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  spmx: [&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     { qdbz:&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;, wp_mc:&#x27;&lt;/span&gt;蓝牙耳机 车语者S1 蓝牙耳机&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;, sl:2, dj:68.37,… },&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     { qdbz:&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;, wp_mc:&#x27;&lt;/span&gt;车载充电器 新在线&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;, sl:1, dj:11.11,… },&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     { qdbz:&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;, wp_mc:&#x27;&lt;/span&gt;保护壳 非尼膜属 iPhone6 电镀壳&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;, sl:1, dj:24,…  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在该案例中，对于“一对一”和“多对一”关系，在发票信息表中通过一个类型为“对象”的字段来存储，比如“购方纳税人（gfnsr）”与“销方纳税人（xfnsr）”字段。对于“一对多”和“多对多”关系，通过一个类型为“对象数组”的字段来存储，如“商品明细（spmx）”字段。在这样一个发票信息表中就可以完成对所有发票的查询，无须再进行任何 join 操作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;同样，采用 NoSQL 数据库怎样实现继承关系的设计呢？由于 NoSQL 数据库自身的特点决定了不用担心“表稀疏”，同时要避免 join 操作，所以比较适合采用第一个方案，即将整个继承关系放到同一张表中进行设计。这时，NoSQL 数据库的每一条记录可以有不一定完全相同的字段，可以设计成这样：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{ &lt;span class=&quot;code-snippet__attribute&quot;&gt;_id&lt;/span&gt;: &lt;span class=&quot;code-snippet__built_in&quot;&gt;ObjectId&lt;/span&gt;(79878ad8902c),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  name: ‘Jack’,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  type: ‘parent’,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  partner: ‘Elizabeth’,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  children: [&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    { name: ‘Tom’, gender: ‘male’ },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    { &lt;span class=&quot;code-snippet__attribute&quot;&gt;name&lt;/span&gt;: ‘Mary’, gender: ‘female’}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{ &lt;span class=&quot;code-snippet__attribute&quot;&gt;_id&lt;/span&gt;: &lt;span class=&quot;code-snippet__built_in&quot;&gt;ObjectId&lt;/span&gt;(79878ad8903d),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  name: ‘Bob’,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  type: ‘kid’,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  mother: ‘Anna’,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  father: ‘David’&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上案例是一个用户档案表，有两条记录：Jack 与 Bob。但是，Jack 的类型是“家长”，因此其个性化字段是“伴侣”与“孩子”；而 Bob 的类型是“孩子”，因此他的个性化字段是“父亲”与“母亲”。显然，在 NoSQL 数据库设计时就会变得更加灵活。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;将领域模型落地到系统设计包含 2 部分内容，本文演练了第一部分内容——从 DDD 落实到数据库设计的整个过程：&lt;span&gt;传统的 4 种关系可以直接转换；&lt;/span&gt;&lt;span&gt;继承关系有 3 种设计方案；&lt;/span&gt;&lt;span&gt;转换成 NoSQL 数据库则是完全不同的思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有了 DDD 的指导，可以帮助我们理清数据间的关系，以及对数据的操作。不仅如此，在未来面对大数据转型时更加从容。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;号主简介：冯涛，&lt;/span&gt;&lt;span&gt;曾任职于阿里巴巴，每日优鲜等互联网公司，任技术总监，15年电商互联网经历&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;最后，将自己15年的微服务，高并发，JVM调优，线上故障排查等经历整理成电子书送给大家，共130页。绝对干货！&lt;span&gt;没领过的朋友，抓紧啦！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;获取方式：扫描或识别下方二维码关注公众号二马读书，&lt;span&gt;回复&lt;/span&gt;&lt;span&gt; &lt;strong&gt;“&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;电子书&lt;/strong&gt;&lt;/span&gt;”&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/I2EApibvt9icyUP1DKTuiaQ6pLS5A16fY19TjGbnIlicIYTZcRTzpxIfWErvRjaGbicXAOCN9eIt6Hv4vnN8FtiazmBQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;获取方式：扫描或识别上方二维码关注公众号二马读书，回复&lt;span&gt; &lt;strong&gt;“&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;电子书&lt;/strong&gt;&lt;/span&gt;”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;来来来加俺微信，一起交流，共同成长: ftcool2008&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;原创不易，&lt;/span&gt;如果感觉本文对您有帮助，有劳转发分享或点一下“在看”！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>eef74464ce39ec6c449467e2e406d677</guid>
<title>Docker 常用命令</title>
<link>https://toutiao.io/k/fszlt1x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Bfv9smoHwtjScZlOia3UBjxWjCVoWftsfyDrKq4shnKsQh3MjVGtt3JCgRneRPeqH6M7UHjo41y8licaE0jibf4Uw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        整理了一些 Docker 常用的基础命令。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;搜索镜像&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        使用 search 命令可以搜索存放在 docker hub 上的镜像。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        命令格式如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker search --help&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Usage:  docker search [OPTIONS] TERM&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Search the Docker Hub &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; images&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Options:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -f, --filter filter   Filter output based &lt;span class=&quot;code-snippet__keyword&quot;&gt;on&lt;/span&gt; conditions provided&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      --format &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;   Pretty-print search &lt;span class=&quot;code-snippet__keyword&quot;&gt;using&lt;/span&gt; a Go template&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      --&lt;span class=&quot;code-snippet__function&quot;&gt;limit &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;       Max number of search &lt;span class=&quot;code-snippet__title&quot;&gt;results&lt;/span&gt; (&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;25&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      --no-trunc        Don&#x27;t truncate output&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        例如：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker search mysql&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mysql                             MySQL is a widely used, open-source relation…   10712     [OK]       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mariadb                           MariaDB Server is a high performing open sou…   4029      [OK]       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mysql/mysql-server                Optimized MySQL Server Docker images. &lt;span class=&quot;code-snippet__keyword&quot;&gt;Create&lt;/span&gt;…   &lt;span class=&quot;code-snippet__number&quot;&gt;785&lt;/span&gt;                  [OK]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;percona                           Percona &lt;span class=&quot;code-snippet__keyword&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;is&lt;/span&gt; a fork &lt;span class=&quot;code-snippet__keyword&quot;&gt;of&lt;/span&gt; the MySQL relati…   &lt;span class=&quot;code-snippet__number&quot;&gt;529&lt;/span&gt;       [OK]       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;centos/mysql&lt;span class=&quot;code-snippet__number&quot;&gt;-57&lt;/span&gt;-centos7           MySQL &lt;span class=&quot;code-snippet__number&quot;&gt;5.7&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;server&lt;/span&gt;                   &lt;span class=&quot;code-snippet__number&quot;&gt;87&lt;/span&gt;                   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mysql/mysql-cluster               Experimental MySQL Cluster Docker images. Cr…   &lt;span class=&quot;code-snippet__number&quot;&gt;80&lt;/span&gt;                   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;centurylink/mysql                 Image containing mysql. Optimized &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; be &lt;span class=&quot;code-snippet__keyword&quot;&gt;link&lt;/span&gt;…   &lt;span class=&quot;code-snippet__number&quot;&gt;59&lt;/span&gt;                   [OK]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;bitnami/mysql                     Bitnami MySQL Docker Image                      &lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt;                   [OK]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;下载镜像&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        使用 docker pull 可以从 docker registry（ docker 注册中心）中下载镜像。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        命令格式如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker pull --help&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Usage:  docker pull [OPTIONS] NAME[:TAG|@DIGEST]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Pull an image or a repository &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; a registry&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Options:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -a, --all-tags                Download all tagged images &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; the repository&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      --disable-content-&lt;span class=&quot;code-snippet__function&quot;&gt;trust   Skip image &lt;span class=&quot;code-snippet__title&quot;&gt;verification&lt;/span&gt; (&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      --platform &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;         Set platform &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; server &lt;span class=&quot;code-snippet__keyword&quot;&gt;is&lt;/span&gt; multi-platform capable&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -q, --quiet                   Suppress verbose output&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        例如：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker pull nginx      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Using default tag: latest&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;latest: Pulling from library/nginx&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;a076a628af6f: Already exists &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;0732ab25fa22: Pull complete &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;d7f36f6fe38f: Pull complete &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;f72584a26f32: Pull complete &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;7125e4df9063: Pull complete &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;Digest: sha256:10b8cc432d56da8b61b070f4c7d2543a9ed17c2b23010b43af434fd40e2ca4aa&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;Status: Downloaded newer image for nginx:latest&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;docker.io/library/nginx:latest&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;列出镜像&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        使用 docker images 可以查看已经下载到本地的镜像。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        命令如下：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker images &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Usage:  docker images [OPTIONS] [REPOSITORY[:TAG]]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;List images&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Options:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -a, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -f, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -q, &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        例&lt;/span&gt;&lt;span&gt;如：&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;images -a&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;REPOSITORY&lt;/span&gt;   &lt;span class=&quot;code-snippet__string&quot;&gt;TAG       IMAGE ID       CREATED        SIZE&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;mysql&lt;/span&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;latest    c8562eaf9d81   2 months ago   546MB&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;redis&lt;/span&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;latest    621ceef7494a   2 months ago   104MB&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;nginx&lt;/span&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;latest    f6d0b4767a6c   2 months ago   133MB&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;删除本地的镜像&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        使用 docker rmi 命令即可删除本地镜像。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker rmi --help&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Usage:  docker rmi [OPTIONS] IMAGE [IMAGE...]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Remove one &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; more images&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Options:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -f, --force      Force removal of the image&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      --&lt;span class=&quot;code-snippet__keyword&quot;&gt;no&lt;/span&gt;-prune   Do &lt;span class=&quot;code-snippet__keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;delete&lt;/span&gt; untagged parents&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        例如：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;docker rmi nginx&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Untagged&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;nginx:latest&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Untagged&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;nginx@sha256:10b8cc432d56da8b61b070f4c7d2543a9ed17c2b23010b43af434fd40e2ca4aa&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Deleted&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;sha256:f6d0b4767a6c466c178bf718f99bea0d3742b26679081e52dbf8e0c7c4c42d74&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Deleted&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;sha256:4dfe71c4470c5920135f00af483556b09911b72547113512d36dc29bfc5f7445&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Deleted&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;sha256:3c90a0917c79b758d74b7040f62d17a7680cd14077f734330b1994a2985283b8&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Deleted&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;sha256:a1c538085c6f891424160d8db120ea093d4dda393e94cd4713e3fff3c82299b5&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Deleted&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;sha256:a3ee2510dcf02c980d7aff635909612006fd1662084d6225e52e769b984abeb5&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;docker images --all&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;REPOSITORY&lt;/span&gt;   &lt;span class=&quot;code-snippet__string&quot;&gt;TAG       IMAGE ID       CREATED        SIZE&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;mysql&lt;/span&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;latest    c8562eaf9d81   2 months ago   546MB&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;redis&lt;/span&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;latest    621ceef7494a   2 months ago   104MB&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;创建并运行容器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        使用 docker run 命令可以创建并运行一个容器。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;%&lt;/span&gt; docker run --name nginx-test -p 8088:80 -d nginx&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;e9e3294f533923438a1bae551b2013d90916488f9e0cc0953282a593d06bf03b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;--name：给容器命名&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;-p&lt;span&gt;：&lt;/span&gt;进行端口映射 8088 为映射后的物理机的端口号，80 为 docker 容器的端口&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;-d&lt;span&gt;：&lt;/span&gt;是后台容器&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        用浏览器访问本地的 8088 端口，可以看到 nginx 的默认页。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;查看容器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;         可以通过 docker ps 查看运行中的容器。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        命令如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker ps &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Usage:  docker ps [OPTIONS]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;List containers&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Options:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -a, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -f, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -n, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -l, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -q, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -s, &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        例如：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker ps&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS                  PORTS                  NAMES&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;e9e3294f5339   nginx     &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/docker-entrypoint.…&quot;&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; minutes ago   Up &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; minutes            &lt;span class=&quot;code-snippet__number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;8088&lt;/span&gt;-&amp;gt;&lt;span class=&quot;code-snippet__number&quot;&gt;80&lt;/span&gt;/tcp   nginx-test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;停止容器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        可以使用 docker stop 来停止运行中的容器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        命令如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker &lt;span class=&quot;code-snippet__keyword&quot;&gt;stop&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;Usage&lt;/span&gt;:  docker &lt;span class=&quot;code-snippet__keyword&quot;&gt;stop&lt;/span&gt; [OPTIONS] &lt;span class=&quot;code-snippet__keyword&quot;&gt;CONTAINER&lt;/span&gt; [CONTAINER...]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;Stop&lt;/span&gt; one &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; more running containers&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Options:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -t, &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        命令如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker ps&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS          PORTS                  NAMES&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;e9e3294f5339   nginx     &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/docker-entrypoint.…&quot;&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;8&lt;/span&gt; minutes ago   Up &lt;span class=&quot;code-snippet__number&quot;&gt;35&lt;/span&gt; seconds   &lt;span class=&quot;code-snippet__number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;8088&lt;/span&gt;-&amp;gt;&lt;span class=&quot;code-snippet__number&quot;&gt;80&lt;/span&gt;/tcp   nginx-test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker stop e9e3294f5339&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;e9e3294f5339&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker ps&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;强制停止docker容器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        使用 docker kill 来停止 docker 的容器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        命令如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker &lt;span class=&quot;code-snippet__keyword&quot;&gt;kill&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;Usage&lt;/span&gt;:  docker &lt;span class=&quot;code-snippet__keyword&quot;&gt;kill&lt;/span&gt; [OPTIONS] &lt;span class=&quot;code-snippet__keyword&quot;&gt;CONTAINER&lt;/span&gt; [CONTAINER...]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;Kill&lt;/span&gt; one &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; more running containers&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Options:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -s, &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        例如：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker ps&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS         PORTS                  NAMES&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;e9e3294f5339   nginx     &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/docker-entrypoint.…&quot;&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt; minutes ago   Up &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt; seconds   &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;8088&lt;/span&gt;-&amp;gt;&lt;span class=&quot;code-snippet__number&quot;&gt;80&lt;/span&gt;/tcp   nginx-test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker &lt;span class=&quot;code-snippet__keyword&quot;&gt;kill&lt;/span&gt; e9e3294f5339&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;e9e3294f5339&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker ps&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;启动停止的容器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        可以使用 docker start 来启动被 stop 或 kill 的容器。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker &lt;span class=&quot;code-snippet__keyword&quot;&gt;start&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;Usage&lt;/span&gt;:  docker &lt;span class=&quot;code-snippet__keyword&quot;&gt;start&lt;/span&gt; [OPTIONS] &lt;span class=&quot;code-snippet__keyword&quot;&gt;CONTAINER&lt;/span&gt; [CONTAINER...]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;Start&lt;/span&gt; one &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; more stopped containers&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Options:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -a, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -i, &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        例如：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker &lt;span class=&quot;code-snippet__keyword&quot;&gt;start&lt;/span&gt; e9e3294f5339&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;e9e3294f5339&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker ps&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;CONTAINER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;ID&lt;/span&gt;   IMAGE     COMMAND                  CREATED          &lt;span class=&quot;code-snippet__keyword&quot;&gt;STATUS&lt;/span&gt;         PORTS                  &lt;span class=&quot;code-snippet__keyword&quot;&gt;NAMES&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;e9e3294f5339   nginx     &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/docker-entrypoint.…&quot;&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;minutes&lt;/span&gt; ago   Up &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;seconds&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;8088&lt;/span&gt;-&amp;gt;&lt;span class=&quot;code-snippet__number&quot;&gt;80&lt;/span&gt;/tcp   nginx-&lt;span class=&quot;code-snippet__keyword&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;重启容器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        可以使用 docker restart 来完成 docker stop 和 docker start 两个命令的工作&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        命令如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker restart --help&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Usage:  docker restart [OPTIONS] CONTAINER [CONTAINER...]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Restart one &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; more containers&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Options:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -t, --&lt;span class=&quot;code-snippet__keyword&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;   Seconds to &lt;span class=&quot;code-snippet__keyword&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; stop before killing the container (default &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        例如：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker ps&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS         PORTS                  NAMES&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;e9e3294f5339   nginx     &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/docker-entrypoint.…&quot;&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt; minutes ago   Up &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; minutes   &lt;span class=&quot;code-snippet__number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;8088&lt;/span&gt;-&amp;gt;&lt;span class=&quot;code-snippet__number&quot;&gt;80&lt;/span&gt;/tcp   nginx-test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker restart e9e3294f5339&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;e9e3294f5339&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker ps&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS         PORTS                  NAMES&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;e9e3294f5339   nginx     &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/docker-entrypoint.…&quot;&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;17&lt;/span&gt; minutes ago   Up &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt; seconds   &lt;span class=&quot;code-snippet__number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;8088&lt;/span&gt;-&amp;gt;&lt;span class=&quot;code-snippet__number&quot;&gt;80&lt;/span&gt;/tcp   nginx-test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        是否进行了重启，可以查看status字段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;进入容器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        可以使用 docker exec 进入容器进行管理。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        命令如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; % docker ps&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                  NAMES&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;e9e3294f5339   nginx     &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/docker-entrypoint.…&quot;&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;38&lt;/span&gt; minutes ago   Up &lt;span class=&quot;code-snippet__number&quot;&gt;14&lt;/span&gt; minutes   &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;8088&lt;/span&gt;-&amp;gt;&lt;span class=&quot;code-snippet__number&quot;&gt;80&lt;/span&gt;/tcp   nginx-test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker exec -it e9e3294f5339 /bin/bash&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;root@e9e3294f5339&lt;span class=&quot;code-snippet__symbol&quot;&gt;:/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;4.19&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;121&lt;/span&gt;-linuxkit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;删除容器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        可以使用 docker rm 来删除容器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        命令如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker rm &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Usage:  docker rm [OPTIONS] CONTAINER [CONTAINER...]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Remove one or more containers&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Options:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -f, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -l, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -v, &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;        例如：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker ps&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                  NAMES&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;e9e3294f5339   nginx     &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/docker-entrypoint.…&quot;&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;56&lt;/span&gt; minutes ago   Up &lt;span class=&quot;code-snippet__number&quot;&gt;33&lt;/span&gt; minutes   &lt;span class=&quot;code-snippet__number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;8088&lt;/span&gt;-&amp;gt;&lt;span class=&quot;code-snippet__number&quot;&gt;80&lt;/span&gt;/tcp   nginx-test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker stop e9e3294f5339&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;e9e3294f5339&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker ps&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;% docker ps -all&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CONTAINER ID   IMAGE     COMMAND                  CREATED      STATUS                  PORTS     NAMES&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;5669&lt;/span&gt;d0d7c177   mysql     &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;docker-entrypoint.s…&quot;&lt;/span&gt;   &lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt; days ago   Exited (&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt; days ago             mysql-&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        上面的命令，基本上就把常用的对于镜像和容器的命令进行了整理。希望对你有帮助。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwth5nBzNr9kZshQ25yhLz08JHWsQdz8yVn3MVh22hia7NFoPyNJz4ZI7XUnMa9xM50TJRqPkWf7BRibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>