<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>acc56b19231642e566d079c2e8ef3a11</guid>
<title>kubernetes 安装（国内网络 + 阿里云）</title>
<link>https://toutiao.io/k/chowuck</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;blockquote&gt; 操作系统：CentOS-7.8&lt;br/&gt; kubernets版本：1.20.4&lt;br/&gt; docker版本：20.10.3&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;本篇是一个安装教程，包含了docker安装，kubernetes安装以及kube-flannel网络插件的安装，整个安装过程使用的为国内网络环境，在阿里云的镜像服务的加持下，最后得以安装成功，本篇文章仅作为学习kubernetes过程中的一个服务安装参考，如有纰漏，欢迎指正。&lt;/p&gt;&lt;h2&gt;一、准备工作&lt;/h2&gt;&lt;h3&gt;1.服务器信息&lt;/h3&gt;&lt;p&gt;准备三台虚拟机，修改其信息如下&lt;/p&gt;&lt;ul&gt;&lt;li&gt;主机名: k8s111  ip:192.168.56.111  作为 k8s的master节点&lt;/li&gt;&lt;li&gt;主机名: k8s112  ip:192.168.56.112 作为k8s的worker节点&lt;/li&gt;&lt;li&gt;主机名: k8s113  ip:192.168.56.113 作为k8s的worker节点&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;修改三台服务器的 hosts文件  &lt;code&gt;vim /etc/hosts&lt;/code&gt; 加入以下内容&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;192.168.56.111 k8s111
192.168.56.112 k8s112
192.168.56.113 k8s113&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;2.服务环境准备&lt;/h3&gt;&lt;p&gt;服务准备工作包括以下四项：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;关闭防火墙&lt;/li&gt;&lt;li&gt;禁用SeLinux&lt;/li&gt;&lt;li&gt;关闭Swap&lt;/li&gt;&lt;li&gt;修改k8s.conf&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;针对上述四项操作，本人准备了以下的小脚本，可以帮助你快速配置，当然你也可以一项一项的去操作，只要可以达到最终目的即可（ &lt;b&gt;注意：三台服务器均需执行这些操作&lt;/b&gt; ）。&lt;/p&gt;&lt;p&gt;操作脚本如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;#!/bin/bash

#关闭防火墙，禁用防火墙开机自启动
systemctl stop firewalld
systemctl disable firewalld

# 临时禁用SeLinux，重启失效
setenforce 0
# 修改SeLinux配置，永久禁用
sed -i &#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27; /etc/selinux/config

# 临时关闭Swap
swapoff -a
# 修改 /etc/fstab 删除或者注释掉swap的挂载，可永久关闭swap
sed -i &#x27;/swap/s/^/#/&#x27; /etc/fstab

#修改k8s.conf
cat &amp;lt;&amp;lt;EOF &amp;gt;  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;3.卸载docker（可选）&lt;/h3&gt;&lt;p&gt;若你使用的服务器之前有安装过docker的，建议卸载原有docker后重新安装以避免遇到不确定的错误。当然如果你确定之前安装的docker是正常的服务，也可以忽略此步骤。&lt;/p&gt;&lt;p&gt;若你需要卸载docker，则你需要卸载的服务包括：docker、docker-common、docker-selinux、docker-engine。卸载命令：&lt;code&gt;yum remove docker docker-common docker-selinux docker-engine&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;二、安装服务（docker，kubeadm，kubectl，kubelet）&lt;/h3&gt;&lt;h3&gt;1.yum源准备&lt;/h3&gt;&lt;p&gt;安装kubernetes相关服务需要连接谷歌的相关服务下载软件已经镜像包，由于本次教程使用的国内网络，所以我们选用的阿里云的yum源以及镜像服务，我们需要添加 docker-ce 和 kubernetes 两个yum源，添加操作如下，同样本人也将其写成脚本的形式，便于使用。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;#!/bin/bash

# 安装部分依赖
yum install -y yum-utils device-mapper-persistent-data lvm2
# 添加docker yum源
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
# 添加kubernetes yum源
cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF
# 对新添加的源的软件包信息cache一下
yum makecache&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;2.安装docker与kubernetes相关服务&lt;/h3&gt;&lt;p&gt;由于我们上一步已经添加了yum源，所以安装这些服务，我们只需要使用yum命令即可安装，安装操作如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;#!/bin/bash

#安装docker
yum install -y docker-ce-20.10.3 docker-ce-selinux-20.10.3
#启动docker并设置开机自启动
systemctl enable docker
systemctl start docker

#安装kubernetes相关服务
yum install -y kubelet kubeadm kubectl
# 设置kuberlet为开机自启动
systemctl enable kubelet
systemctl start kubelet

#输出docker和kubernetes的信息
docker version
kubectl version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的一点是在我们安装完以上服务后，docker是会启动的，但是kubelet服务是不会启动的，master节点的kubelet服务在kubeadm init 成功后才会启动，worker节点的kubelet是在将节点加入集群后才会正常启动，所以在你组装好集群前，不要担心kubelet没有启动的问题。&lt;/p&gt;&lt;h3&gt;3.对docker配置阿里云镜像加速&lt;/h3&gt;&lt;p&gt;参考阿里云官方文档 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//cr.console.aliyun.com/cn-hangzhou/instances/mirrors&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cr.console.aliyun.com/c&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;n-hangzhou/instances/mirrors&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;三、服务启动与集群创建&lt;/h2&gt;&lt;h3&gt;1.使用kubeadm init进行初始化&lt;/h3&gt;&lt;p&gt;该步操作仅在master节点执行，且如下的 &lt;code&gt;kubeadm init&lt;/code&gt; 若多次执行，则在执行前需要先执行 &lt;code&gt;kubeadm reset&lt;/code&gt; &lt;/p&gt;&lt;p&gt;在master节点执行如下命令&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# --apiserver-advertise-address指定apiServer的地址
# --image-repository指定镜像下载的仓库，我们这里指定的是阿里云的镜像仓库
# --pod-network-cidr指定pod的CIDR用于限制pod的ip范围，由于我们后面是有flannel网络，所以就直接配置10.244网段，
kubeadm init --apiserver-advertise-address=192.168.56.111   \
--image-repository registry.aliyuncs.com/google_containers  \
--pod-network-cidr=10.244.0.0/16&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在指向完上述命令后，后面会有一段输出内容如下所示&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;To start using your cluster, you need to run the following as a regular user:

#这三条命令在master节点依次执行
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

# 这个地方是说我们需要安装一个网络插件，我们接下来就会安装flannel网络
You should now deploy a pod network to the cluster.
Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

#这个地方是其他worker节点加入该集群所要执行的命令，可以复制出来暂存一下，切记你要复制你自己主机上生成的
kubeadm join 192.168.56.111:6443 --token eud4cb.i6vf9rutybo9ve0u \
    --discovery-token-ca-cert-hash sha256:dc89e4bf471b552e19b0c553910285014d93752398bbac7b6de23e455204c4aa&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们把上述要执行的三条命令放在下面，这个是用于配置kubectl，配置完成后我们就可以使用kubectl进行集群管理了&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;2.安装flannel网络插件&lt;/h3&gt;&lt;h3&gt;2.1 下载kube-flannel.yml&lt;/h3&gt;&lt;p&gt;flannel网络的官方github地址为 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/flannel-io/flannel&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/flannel-io/f&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;lannel&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;在官方文档中有对使用那个flannel的配置有说明，我们使用的是kubernetes 1.20.4，所以我们按照如下指示来安装flannel网络插件&lt;/p&gt;&lt;blockquote&gt; For Kubernetes v1.17+ &lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml&lt;/code&gt;&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;由于flannel插件使用的镜像需要从Google下载，所以我们使用docker上其他用户分享的镜像安装&lt;/p&gt;&lt;p&gt;首先下载 kube-flannel.yml文件到本地，下载地址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;raw.githubusercontent.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/coreos/flannel/master/Documentation/kube-flannel.yml&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;2.2 拉取flannel镜像到本地&lt;/h3&gt;&lt;p&gt;由于我们无法直接下载官方提供的镜像，所以我们去阿里云的镜像服务中使用其他用户转存的flannel镜像，在这里我就使用了阿里云用户公开镜像中的 k8sos/flannel 这个镜像，由于kube-flannel.yml中使用的镜像是 v0.13.1-rc2 版本，所以我们也从阿里云上下载了 k8sos/flannel:v0.13.1-rc2版本&lt;/p&gt;&lt;p&gt;阿里云镜像服务地址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//cr.console.aliyun.com/cn-hangzhou/instances/images&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cr.console.aliyun.com/c&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;n-hangzhou/instances/images&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt; 选择镜像搜索，输入关键字“k8sos/flannel” 进行搜索，即可搜索到。&lt;/p&gt;&lt;p&gt;然后使用docker pull 将镜像拉取下来&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# 在我写这篇文章时该镜像的公网地址如下，如果你在使用时无法通过该公网地址拉取镜像，请去阿里云获取最新镜像地址
docker pull registry.cn-hangzhou.aliyuncs.com/k8sos/flannel:v0.13.1-rc2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;2.3 修改kube-flannel.yml&lt;/h3&gt;&lt;p&gt;镜像拉取本地后，修改kube-flannel.yml将里面使用的官方镜像的名字改为自己拉取的镜像名称&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# 查看镜像拉取到本地后的名称
docker images | grep flannel
# 输出 
# registry.cn-hangzhou.aliyuncs.com/k8sos/flannel      v0.13.1-rc2   dee1cac4dd20   3 weeks ago     64.3MB
# 从上面输出可以看出该镜像在我本地服务器的名称为 registry.cn-hangzhou.aliyuncs.com/k8sos/flannel&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改 kube-flannel.yml 将其中的 &quot;image: &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//quay.io/coreos/flannel%3Av0.13.1-rc2&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;quay.io/coreos/flannel:&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;v0.13.1-rc2&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&quot; 修改为 &quot;image: &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//registry.cn-hangzhou.aliyuncs.com/k8sos/flannel%3Av0.13.1-rc2&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;registry.cn-hangzhou.aliyuncs.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/k8sos/flannel:v0.13.1-rc2&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&quot; &lt;/p&gt;&lt;h3&gt;2.4 应用flannel网络&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;kubectl apply&lt;/code&gt; 命令应用网络&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# -f 后面指定kube-flannel.yml的文件路径
kubectl apply -f /k8s/kube-flannel.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在应用网络之后，我们就可以查看一下，flannel 的pod是否启动成功，在我的服务器上执行如下命令效果如下，代码flannel已经应用成功&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[root@k8s111 k8s]# kubectl get pod -n kube-system | grep flannel
kube-flannel-ds-28mbw            1/1     Running   0          6m55s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;3.添加worker节点到集群&lt;/h3&gt;&lt;p&gt;直接在worker节点上执行我们在 kubeadm init 最后得到的那一段命令，格式如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;kubeadm join &amp;lt;masterIp&amp;gt;:&amp;lt;masterPort&amp;gt; --token &amp;lt;token&amp;gt; \
    --discovery-token-ca-cert-hash sha256:&amp;lt;hash&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将worker节点添加到集群成功后，我们就可以使用 kubectl 来查看节点了&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# 查看所有节点
kubectl get nodes

# 得到如下效果，三个节点均运行成功
# NAME     STATUS   ROLES                  AGE   VERSION
# k8s111   Ready    control-plane,master   14m   v1.20.4
# k8s112   Ready    &amp;lt;none&amp;gt;                 24s   v1.20.4
# k8s113   Ready    &amp;lt;none&amp;gt;                 14s   v1.20.4

# 查看pods 集群搭建好，默认有一个kube-system命名空间，kubernetes自己的服务都部署在这个命名空间下
kubectl get pod -n kube-system&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此在国内网络环境下的一个kubernetes集群就搭建完成。&lt;/p&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;整个过程所需要使用的所有镜像，可以在操作前先拉取下来，加快效率&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;docker pull registry.aliyuncs.com/google_containers/kube-controller-manager:v1.20.4
docker pull registry.aliyuncs.com/google_containers/kube-proxy:v1.20.4
docker pull registry.aliyuncs.com/google_containers/kube-apiserver:v1.20.4
docker pull registry.aliyuncs.com/google_containers/kube-scheduler:v1.20.4
docker pull registry.cn-hangzhou.aliyuncs.com/k8sos/flannel:v0.13.1-rc2
docker pull registry.aliyuncs.com/google_containers/etcd:3.4.13-0
docker pull registry.aliyuncs.com/google_containers/etcd:3.4.13-0
docker pull registry.aliyuncs.com/google_containers/coredns:1.7.0
docker pull registry.aliyuncs.com/google_containers/pause:3.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在最后我们再来描述一下整个过程&lt;/p&gt;&lt;ul&gt;&lt;li&gt;准备三台服务器，配置好主机名和IP，关闭防火墙，禁用SeLinux，关闭swap，配置k8s.conf，若服务器之前安装过docker可以将之前的docker卸载，避免安装过程中发生未知的问题&lt;/li&gt;&lt;li&gt;在三台服务器上配置docker和kubernetes的yum源，并安装docker和kubeadm、kubectl、kubectl&lt;/li&gt;&lt;li&gt;在master节点上进行kubeadm init初始化集群&lt;/li&gt;&lt;li&gt;在master节点上安装flannel网络插件&lt;/li&gt;&lt;li&gt;在worker节点上执行kubeadm join将其加入集群&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;经过以上过程，我们就安装了一个自己的kubernetes集群，虽然我已经尽可能的将教程写的易懂，但是作为读者你在安装的过程中可能会出现各种各样的问题，不过只要你去在搜索引擎上搜索，耐心的操作，总可以找到解决办法，祝你顺利！&lt;/p&gt;&lt;blockquote&gt; 个人公众号【&lt;b&gt;爱做梦的锤子&lt;/b&gt;】，全网同id，个站 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//te-amo.site/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://te-amo.site&lt;/a&gt;，欢迎关注，里面会分享更多有用知识，还有我的私密照片&lt;br/&gt; 觉得不错就点个赞叭QAQ&lt;br/&gt; &lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>87da3751bbaed78ec5e96c0ef5c4d0c0</guid>
<title>App 隐私合规</title>
<link>https://toutiao.io/k/emx402i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p mpa-paragraph-type=&quot;body&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxODkyODE0Mg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr7asExq0Evsib5pHoD24M70jEAcyibfbqhMc6X4ZXy9ezVsmbY7Fictyz3GM6C3V7mu0KrenKlv0wwmw/0?wx_fmt=png&quot; data-nickname=&quot;小道安全&quot; data-alias=&quot;kdsafety&quot; data-signature=&quot;以安全开发、逆向破解、黑客技术、病毒技术、灰黑产攻防为基础，兼论程序研发相关的技术点滴分享。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;title&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/My1Gumia3SKLeW5YKmZRUj1DicOJWicDUhqMc122V9S8icg9o3WlJxW962Q63Qp26ickjDaDMCCvFZgCc5Gvt1DibBLA/640?wx_fmt=png&quot; data-ratio=&quot;1.375&quot; data-w=&quot;16&quot; data-type=&quot;png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/N5gGFPMEm3B6B4eKDcfNt5VFLvBOq8S7oicKicuouHJxltjKNXAiaZs9SYym7mgmx7gkBnKyD2eibkaRJYwoBHwKDw/640?wx_fmt=png&quot; data-ratio=&quot;1.2222222222222223&quot; data-w=&quot;18&quot; data-type=&quot;png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hMjlYNLvPyRpUl2m3A1sdiawdLBktzcYbRjdeeXvJtOWbehuJxMOEUK9zxqK8c0PkoxZAVxv4B7PicGMo6sC3OcQ/640?wx_fmt=png&quot; data-ratio=&quot;1&quot; data-w=&quot;16&quot; data-type=&quot;png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xicQVVic8TfFvDuZ1oRzgNicaicaRIsA1tE7Csu27FgSnBGgnbZNKdMLVbIwayvdMTA1Is6V3kp0SK7EDGjznOibzeQ/640?wx_fmt=png&quot; data-ratio=&quot;1&quot; data-w=&quot;14&quot; data-type=&quot;png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;近期公司的APP收到通信管理局，关于APP侵害用户权益整治专项行动中核查整改问题的通知。整改要求是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;10天内&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;完成对有问题APP的整改，并提交整改情况报告。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;通告中APP在个人信息方面主要存在以下问题：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;1.未&lt;strong&gt;明示&lt;/strong&gt;收集使用个人信息的目的、方式和范围；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;2.未经用户&lt;strong&gt;同意&lt;/strong&gt;收集使用个人信息；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;3.未&lt;strong&gt;公开&lt;/strong&gt;收集使用规则；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;4.违反&lt;strong&gt;必要原则&lt;/strong&gt;，收集与其提供服务无关的个人信息；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;5.未按法律规范提供删除或更正个人信息功能或公布诉讼、举报方式等信息。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;image&quot;&gt;&lt;img data-ratio=&quot;0.9578454332552693&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr4PMIpgcAuHnqC4Pj81zD63Sfiay1F6o4XDhLj9yStfj42XfHWbyCEoYLA9fWdO4UT4aYFzJg2tSLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;854&quot;/&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;title&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/My1Gumia3SKLeW5YKmZRUj1DicOJWicDUhqMc122V9S8icg9o3WlJxW962Q63Qp26ickjDaDMCCvFZgCc5Gvt1DibBLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;16&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;&lt;span&gt;APP违规的认定标准&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.2222222222222223&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/N5gGFPMEm3B6B4eKDcfNt5VFLvBOq8S7oicKicuouHJxltjKNXAiaZs9SYym7mgmx7gkBnKyD2eibkaRJYwoBHwKDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;18&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hMjlYNLvPyRpUl2m3A1sdiawdLBktzcYbRjdeeXvJtOWbehuJxMOEUK9zxqK8c0PkoxZAVxv4B7PicGMo6sC3OcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;16&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xicQVVic8TfFvDuZ1oRzgNicaicaRIsA1tE7Csu27FgSnBGgnbZNKdMLVbIwayvdMTA1Is6V3kp0SK7EDGjznOibzeQ/640?wx_fmt=png&quot; data-ratio=&quot;1&quot; data-w=&quot;14&quot; data-type=&quot;png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;(以下标准来源：中国网信网)&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt;一、未公开收集使用规则&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;1.在App中没有&lt;strong&gt;隐私政策&lt;/strong&gt;，或者隐私政策中没有收集使用个人信息规则；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　2.在App首次运行时未通过弹窗等明显方式&lt;strong&gt;提示用户&lt;/strong&gt;阅读隐私政策等收集使用规则；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　3.隐私政策等收集使用规则&lt;strong&gt;难以访问&lt;/strong&gt;，如进入App主界面后，需多于4次点击等操作才能访问到；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　4.隐私政策等收集使用规则&lt;strong&gt;难以阅读&lt;/strong&gt;，如文字过小过密、颜色过淡、模糊不清，或未提供简体中文版等。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;二、 未明示收集使用个人信息的目的、方式和范围&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;1.未&lt;strong&gt;逐一列出&lt;/strong&gt;App(包括委托的第三方或嵌入的第三方代码、插件)收集使用个人信息的目的、方式、范围等；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　2.收集使用个人信息的目的、方式、范围发生变化时，未以&lt;strong&gt;适当方式通知用户&lt;/strong&gt;，适当方式包括更新隐私政策等收集使用规则并提醒用户阅读等；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　3.在申请打开可收集个人信息的权限，或申请收集用户身份证号、银行账号、行踪轨迹等个人敏感信息时，未&lt;strong&gt;同步告知&lt;/strong&gt;用户其目的，或者目的不明确、难以理解；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　4.有关收集使用规则的内容晦涩难懂、冗长繁琐，&lt;strong&gt;用户难以理解&lt;/strong&gt;，如使用大量专业术语等。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;三、 未经用户同意收集使用个人信息&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;1.征得用户&lt;strong&gt;同意&lt;/strong&gt;前就开始收集个人信息或打开可收集个人信息的权限；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　2.用户明确表示&lt;strong&gt;不同意&lt;/strong&gt;后，仍收集个人信息或打开可收集个人信息的权限，或频繁征求用户同意、干扰用户正常使用；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　3.实际收集的个人信息或打开的可收集个人信息权限&lt;strong&gt;超出&lt;/strong&gt;用户授权范围；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　4.以默认选择同意隐私政策等&lt;strong&gt;非明示&lt;/strong&gt;方式征求用户同意；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　5.未经用户同意&lt;strong&gt;更改&lt;/strong&gt;其设置的可收集个人信息权限状态，如App更新时自动将用户设置的权限恢复到默认状态；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　6.利用用户个人信息和算法定向推送信息，未提供非定向推送信息的选项；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　7.以欺诈、诱骗等不正当方式&lt;strong&gt;误导&lt;/strong&gt;用户同意收集个人信息或打开可收集个人信息的权限，如故意欺瞒、掩饰收集使用个人信息的真实目的；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　8.未向用户提供&lt;strong&gt;撤回&lt;/strong&gt;同意收集个人信息的途径、方式；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　9.违反其所声明的收集使用规则，收集使用个人信息。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;四、 违反必要原则，收集与其提供的服务无关的个人信息&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;1.收集的个人信息类型或打开的可收集个人信息权限与现有业务功能&lt;strong&gt;无关&lt;/strong&gt;；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　2.因用户不同意收集非必要个人信息或打开非必要权限，&lt;strong&gt;拒绝提供&lt;/strong&gt;业务功能；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　3.App新增业务功能申请收集的个人信息超出用户原有同意范围，若用户不同意，则拒绝提供原有业务功能，新增业务功能取代原有业务功能的除外；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　4.收集个人信息的频度等&lt;strong&gt;超出&lt;/strong&gt;业务功能实际需要；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　5.仅以改善服务质量、提升用户体验、定向推送信息、研发新产品等为由，&lt;strong&gt;强制&lt;/strong&gt;要求用户同意收集个人信息；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　6.要求用户一次性同意打开多个可收集个人信息的权限，用户不同意则无法使用。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;五、 未经同意向他人提供个人信息&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　&lt;/span&gt;&lt;span&gt;　1.既未经用户同意，也未做匿名化处理，App客户端直接向&lt;strong&gt;第三方&lt;/strong&gt;提供个人信息，包括通过客户端嵌入的第三方代码、插件等方式向第三方提供个人信息；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　2.既未经用户同意，也未做匿名化处理，数据传输至App后台服务器后，向&lt;strong&gt;第三方&lt;/strong&gt;提供其收集的个人信息；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　3.App接入第三方应用，未经用户同意，向&lt;strong&gt;第三方&lt;/strong&gt;应用提供个人信息。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;六、未按法律规定提供删除或更正个人信息功能或未公布投诉、举报方式等信息&lt;/strong&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　   &lt;/span&gt;&lt;span&gt;1.未提供有效的更正、删除个人信息及注销用户账号功能；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　2.为更正、删除个人信息或注销用户账号设置&lt;strong&gt;不必要&lt;/strong&gt;或&lt;strong&gt;不合理&lt;/strong&gt;条件；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　3.虽提供了更正、删除个人信息及注销用户账号功能，但未及时响应用户相应操作，需人工处理的，未在&lt;strong&gt;承诺时限&lt;/strong&gt;内（承诺时限不得超过&lt;strong&gt;15个工作日&lt;/strong&gt;，无承诺时限的，以15个工作日为限）完成核查和处理；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　4.更正、删除个人信息或注销用户账号等用户操作已执行完毕，但App后台并未完成的；&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;　　5.未建立并公布个人信息安全投诉、举报渠道，或未在承诺时限内（承诺时限不得超过15个工作日，无承诺时限的，以15个工作日为限）受理并处理的。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;title&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/My1Gumia3SKLeW5YKmZRUj1DicOJWicDUhqMc122V9S8icg9o3WlJxW962Q63Qp26ickjDaDMCCvFZgCc5Gvt1DibBLA/640?wx_fmt=png&quot; data-ratio=&quot;1.375&quot; data-w=&quot;16&quot; data-type=&quot;png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;&lt;span&gt;APP合规检测&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/N5gGFPMEm3B6B4eKDcfNt5VFLvBOq8S7oicKicuouHJxltjKNXAiaZs9SYym7mgmx7gkBnKyD2eibkaRJYwoBHwKDw/640?wx_fmt=png&quot; data-ratio=&quot;1.2222222222222223&quot; data-w=&quot;18&quot; data-type=&quot;png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hMjlYNLvPyRpUl2m3A1sdiawdLBktzcYbRjdeeXvJtOWbehuJxMOEUK9zxqK8c0PkoxZAVxv4B7PicGMo6sC3OcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;16&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xicQVVic8TfFvDuZ1oRzgNicaicaRIsA1tE7Csu27FgSnBGgnbZNKdMLVbIwayvdMTA1Is6V3kp0SK7EDGjznOibzeQ/640?wx_fmt=png&quot; data-ratio=&quot;1&quot; data-w=&quot;14&quot; data-type=&quot;png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;对APP安全检测一般通过：静态分析和动态分析相结合的。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;静态分析工具：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;Apktool、dex2jar、jdgui、android killer、GDA、androguard等等。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;静态分析：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;APK文件列表、Manifest文件、dex文件、二进制文件、资源文件、权限、四大组件、敏感API、尤其是LoadLibrary、dexClassLoader、Reflection等。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;动态分析：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span&gt;通过在定制的移动终端下运行APP程序，并进行观察运行过程中的APP状态，分析函数功能、明确代码逻辑、挖掘可能存在的漏洞，主要进行判断APP是否存在注入攻击、重新签名、内存数据篡改、内存数据dump、恶意调试等安全风险。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; APP中权限问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;通过静态分析方式读取apk中的AndroidManifest.xml(全局配置文件)文件中的uses-permission字段信息。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;image&quot;&gt;&lt;img data-ratio=&quot;0.602125147579693&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr4PMIpgcAuHnqC4Pj81zD63yzqn8gPa1Wiclkp9O470gexaae9JhehdNKGqFSicjgIGyXx9ibjygG15g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;847&quot;/&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;合规做法：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;对于申请使用的敏感权限，需在隐私政策中清晰说明申请敏感权限类型和目的，或者停止申请使用敏感权限。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt; &lt;span&gt;&lt;strong&gt;&lt;span&gt;收集个人用户信息敏感权限梳理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;image&quot;&gt;&lt;img data-ratio=&quot;1.2344213649851632&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr4PMIpgcAuHnqC4Pj81zD63xwrzay0D0eOSo8cib7U7ibGKzJgGpYu84l0RnSxgTyaTibLZbk929MzeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;674&quot;/&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;image&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;个人隐私信息问题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;个人隐私信息包括：IMEI、androidID、mac地址、联系人隐私、短信隐私、通讯录信息、通话记录等信息。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;收集个人信息敏感API：getDeviceId()、getSubscriberId()、getMacAddress()、getLine1Number()等。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;App中的第三方sdk中如有收集个人信息，需在隐私政策中明确说明，收集个人信息的类型和目的。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;例如在App中集成占有率比较大的第三方SDK：&lt;/span&gt;&lt;span&gt;友盟SDK、腾讯bugly SDK。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;那么就需要在隐私政策中有明确信息，例如以下友盟方式在隐私政策中明示出第三方SDK收集个人信息。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;image&quot;&gt;&lt;img data-ratio=&quot;0.23760932944606414&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr4PMIpgcAuHnqC4Pj81zD63YrCkRhwuM8jFfR7DRaVKI5krqqy3xBUiaRmPlbJDIdrkyNqhsiawgGQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;686&quot;/&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;未明示收集使用个人信息的目的、方式和范围&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;不合规方式：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;直接通过系统默认方式进行动态申请权限的时候，没有在提示框中明确提示手机个人信息的目的、方式和范围。&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;image&quot;&gt;&lt;img data-ratio=&quot;0.6312684365781711&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr4PMIpgcAuHnqC4Pj81zD63bS6ZE8PnKy8dibYCKpJ0iaicqoiandWpmJ6dJic5q9zrfp9zZOoDMz3u3Lw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;339&quot;/&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;span&gt;&lt;strong&gt;默认动态申请权限&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;image&quot;&gt;&lt;img data-ratio=&quot;0.31470230862697446&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr4PMIpgcAuHnqC4Pj81zD63S9uvkRMfCEoKgzggYyfFKjGibAYeyyTnf7SibRM9eViazGic3Qicyr7uXHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;823&quot;/&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;image&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;image&quot;&gt;&lt;img data-ratio=&quot;0.5479041916167665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr4PMIpgcAuHnqC4Pj81zD63ibwe3PhC7XR2Nq4dRDH45nexO7VOcjwJvRVEFq4E21lib8GVKhQrciaoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;334&quot;/&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;合规方式：明确收集个人信息的目的（还需在APP应用内提供对应关闭功能&lt;strong&gt;）&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;image&quot;&gt;&lt;img data-ratio=&quot;0.5373134328358209&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr4PMIpgcAuHnqC4Pj81zD639GEic8jpqRthdMgfgIibLicd1HGAen94UcJVBdFvRcBMbmKkfxIPxpbjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;402&quot;/&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;strong/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;title&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/My1Gumia3SKLeW5YKmZRUj1DicOJWicDUhqMc122V9S8icg9o3WlJxW962Q63Qp26ickjDaDMCCvFZgCc5Gvt1DibBLA/640?wx_fmt=png&quot; data-ratio=&quot;1.375&quot; data-w=&quot;16&quot; data-type=&quot;png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.2222222222222223&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/N5gGFPMEm3B6B4eKDcfNt5VFLvBOq8S7oicKicuouHJxltjKNXAiaZs9SYym7mgmx7gkBnKyD2eibkaRJYwoBHwKDw/640?wx_fmt=png&quot; data-w=&quot;18&quot; data-type=&quot;png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hMjlYNLvPyRpUl2m3A1sdiawdLBktzcYbRjdeeXvJtOWbehuJxMOEUK9zxqK8c0PkoxZAVxv4B7PicGMo6sC3OcQ/640?wx_fmt=png&quot; data-w=&quot;16&quot; data-type=&quot;png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xicQVVic8TfFvDuZ1oRzgNicaicaRIsA1tE7Csu27FgSnBGgnbZNKdMLVbIwayvdMTA1Is6V3kp0SK7EDGjznOibzeQ/640?wx_fmt=png&quot; data-ratio=&quot;1&quot; data-w=&quot;14&quot; data-type=&quot;png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;strong&gt;&lt;span&gt;在APP中，首次启动的时候不可进行直接向用户申请权限，需要先征求用户选择授权同意隐私政策(必须是明示方式)，并且需要明确APP及包括委托的第三方或嵌入的第三方代码、插件收集个人信息的目的、方式和范围。如果在隐私政策中有明示利用个人用户信息和算法定向推送服务，必须在APP应用内提供关闭定向推送服务的开关。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.21428571428571427&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/84QSpkgaj14GBzMnf1ibXkydLwCmhrWBooDwrdnlqYlsyB5PetG1T1oXxJ63G8TK58dqkDo7uzR7bKic50DxbTQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;336&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;                      &lt;span&gt;▲往期相关文章▼&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;                                &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkyODE0Mg==&amp;amp;mid=2247485420&amp;amp;idx=1&amp;amp;sn=20f1069713342043488db05568afec9e&amp;amp;chksm=f980258dcef7ac9b2e142ef68076b89878da5026834854a5baf517cdecd3be961947137c5c47&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;APP安全合规&lt;/a&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;                              &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkyODE0Mg==&amp;amp;mid=2247485442&amp;amp;idx=1&amp;amp;sn=f231b431428c6c1e04e222297c858da3&amp;amp;chksm=f9802a63cef7a37516f4a4c83d290542cf14de5911ffa27ac628847415ee553adcba1caddfda&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;你需要了解的APP安全&lt;/a&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D1XGIISrRhKQksamIGXRxFbSQuNUWamJYEUwU8KjhNprqa8STuc02vIUak808dBS7Fiao4hg6FS876bicD3uJPgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;40&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hib5mZ2t0cdTmGAgkySPqAr20oBpFicUtQaleTGbgBdnvlIjH1SRficZ0YseibXwjTN5qd6npxn5QvTVN35MV9v86w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;40&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;点个&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/t3ZJ9oCd1YcJavCa7NoYkIDPhAtHQg5pOlFhHYic59ia9ic2gQGkZFHurrA63iaQeCbCHjial8ZW4XEd1HhOLZj3btQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;32&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;在看&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;你最好看&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d915becabf57f2de88a321dbd5a87c82</guid>
<title>工具 | 字节跳动开源的 Golang 微服务 RPC 框架</title>
<link>https://toutiao.io/k/pg6tvcv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>294d4dd5c67df3a8f653404709e05fea</guid>
<title>软件工程师采用新技术的正确方式</title>
<link>https://toutiao.io/k/eo1k9uj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4hHn7CQ4Vs8WDMkIndVc4EqeNuPbSfBv3ic9REKyoO9aDc28pDO0eLDOYWK8n62H0qUuhcl4uEwVibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是飘渺。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前几天跟一个团队技术负责人聊天，他说他们有个小的项目都是直接使用的SpringCloud。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我问他为什么，你这不是为了技术而设计吗？小项目用个单体架构不是很方便吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他说我就是想用一下SpringCloud，熟悉一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我问他，那你在使用SpringCloud过程中有没有遇到一些问题，比如数据库怎么拆分？事务问题如何解决呢？怎么做的CICD？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他又说我们不拆，就一个库。只不过在应用层规定了服务与服务之间只能通过接口调用，至于分布式事务嘛，暂时还没考虑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;。。。。。。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;都说兴趣是最好的老师，热衷新技术本身也是没错的，但是这样很容易造成一个问题就是在做项目的时候为了技术而架构，简单问题复杂化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那软件工程师到底应该如何应对新技术呢？（当然这里提到的SpringCloud并不算什么新技术了）我们看看 &lt;code&gt;Karl Hughes&lt;/code&gt; 是怎么说的！&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原文地址：http://t.hk.uy/8yS&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2015 年，我带领一支工程团队为大学生构建了一个 Web 应用程序。由于录取工作已于 5 月结束，因此我们只有 3 个月的时间为每年 8 月的流量暴涨做好准备。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一年我们只有几千个用户，所以没有人担心扩展问题。我们使用了 Angular 前端和 MySQL 数据库，在 PHP 中构建了这款应用。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5833333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4hHn7CQ4Vs8WDMkIndVc4EqRzdTt6FqpTBswYl63Fdnia8EzFek9ypmJibwhibDPT2wrAM8aE3yia5s6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;第一年结束时，我们的应用程序架构&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们准备在第二年将用户规模增加到三倍时，我们开始怀疑现有的应用程序能否良好地扩展。我开始学习所有最新的工具，聘请了一位经验丰富的 DevOps 工程师，然后制定了一项负载测试计划。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过两个半月的混乱，研究了 Docker、Azure Service Mesh 和其他一些最新工具后，我们意识到无法赶上 8 月的截止日期。我们退后一步，重新考虑了所面对的问题。我开始向一些导师寻求建议，记得那天，其中一位叫我出去，对我说：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“你不需要那么多复杂的工具！”他告诉我。“在系统上再扔一台服务器就行了。”&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;为什么新技术如此吸引人？&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像许多工程师一样，我会抓住机会利用所有最酷的新工具。经过几个月的无谓尝试，我终于意识到解决方案本来很简单，并且我们手头已经有了所需的工具。我们水平扩展了 API，垂直扩展了数据库，这花了大约两周时间。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5398148148148149&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4hHn7CQ4Vs8WDMkIndVc4Eqibp01SE0alAWTBQw1ADxIFicVSHVeevFib6CzjLkaWp1EDMSzt88ic5v6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;第二年开始时，我们的应用程序架构&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事后看来这显然是正确的选择，但是为什么一开始它就不那么明显呢？为什么甚至颇有经验的软件工程师也会像飞蛾扑火一般被闪亮的新技术所吸引？&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;新技术承诺解决老问题&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;管理大量服务器非常困难，一直以来都是一个难题。当我们迁移到云后，这个问题终于变简单了，现在 Kubernetes 承诺可以让这件事情变得更轻松。与所有“烦人的旧东西”相比，新技术有望更快、更高效或更灵活地解决问题。如果你只看那些宣传资料，你可能会认为它们甚至没有任何代价可言。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;我们会因为用上了“最新和最棒的技术”而受到关注&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在 2015 年读到的所有文章都在说 Docker 将会有多伟大。他们坚持认为它将在短短几年内取代 VPS。早期采用的公司因此得到了很多正面的报道。我也想要这种关注。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;求职者涌向新技术&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不幸的是，由 Hacker News 推动的炒作周期使工程师认为他们必须采用最新技术才能跟上时代。对于新手开发人员来说尤其如此。你想不到最近有多少培训班毕业生问我是否在使用新出的 X 或 Y 框架。甚至有人试着劝我将我们的整个关系数据库转移到区块链上。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;我们也想变得很酷&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“深入其中并对所有事物做现代化改进是很有趣的事情——当然，你可以在此过程中学到很多东西（也许会以牺牲业务为代价）。”——David LeBlanc&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我对丰富简历内容没什么兴趣，但我记得那时候我会想：“这将成为一次会议演讲上的精彩故事。”我现在可不敢这么说，因为在 2015 年的早期创业阶段尝试部署 Docker，结果以失败告终的经历，可能是我迄今为止最大的管理败绩。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;过早采用新技术的风险&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;几年前，我发现技术炒作周期是这么一回事：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“炒作周期中，市场先是对某种很棒的新事物有一段时期的夸大宣传，鼓励人们采用——直到技术逐渐真的普及开来，人们才发现新事物并没有广告中所描述的那么神奇。然后这种新事物便会失宠，乃至被完全丢弃或遗忘，直到它的成功所需的知识基础成型为止。”——Dick Dowdell&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.649074074074074&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4hHn7CQ4Vs8WDMkIndVc4Eq3jicElRJFO8CwB12Sma7HhbyenByOrqoYHQ0hEia0lGLDQ1zWtnNgfSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;技术炒作周期&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;许多工程师在新技术诞生伊始的高峰期（也就是关注和讨论最多的时期）错误地采用了它们。问题在于，不成熟的技术会有全新和未知的故障机制，而现有的解决方案并不会如此。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软件工程团队需要浪费大量时间寻找不那么明显的错误、查找文档里没有的边缘案例并重写代码来适应新技术。这就是六年前我们尝试采用 Docker 时发生的事情。我们没有足够的资源来遍历所有没有文档支持的特性和选项，而且 API 会随着版本升级而不断变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就算这些问题并没有令你困扰，但早期采用者仍会承担技术开发公司倒闭的风险。我记得有几个朋友很早就用上了 RethinkDB，但到了开发它的公司于 2016 年关闭时他们大失所望。尽管它后来作为一个社区维护项目又回来了，但让你的应用程序数据库陷入困境从来都不是什么好事情。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;技术采用技巧&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然如此，如果新技术增加了太多不必要的风险，为什么我们都没有停留在 1990 年代的 Java 版本上呢？我们如何才能避免落后太多，以至于连升级途径都找不到呢？当我们开始一个新项目时，我们不应该使用最新的技术工具吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对这些有趣的问题，答案都是“&lt;span data-mpa-emphasize-underline=&quot;t&quot;&gt;&lt;span&gt;取决于具体情况&lt;/span&gt;&lt;span data-mpa-emphasize-underline-bg-line=&quot;t&quot;/&gt;&lt;/span&gt;”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我已经开始为在软件工程团队中采用新技术的策略制定一些经验法则。请随意使用这些内容，也可以根据你的组织情况做出调整或建立自己的规则集。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;给人们时间进行实验&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我坚信可以给员工一些时间来在工作中学习新事物。这为他们提供了一种创造力的源泉，使他们保持领先，并能让你尝试一些业务永远不会优先考虑的事情。如果一位工程师使用他的学习时间来证明我们的应用程序中可以使用某些新技术工具，那么我会认真考虑此事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“在将新技术用于产品之前，需要对新技术进行验证……你必须做出结果。如果不这样做，就是把产品推向了死亡之路。”——Andrew Orsich&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;保持一个默认技术栈&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微服务的罪行之一是，它们鼓励公司使用不同的编程语言来构建应用程序的不同部分。虽然经验丰富的工程师可能会喜欢每周更换语言，但这会增加认知负担，并让新开发人员难以接受。当程序员选择的语言不一样时，团队还会出现一些技术孤岛。选择一个技术栈作为默认选项，仅在真正需要时才做扩展。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;保持核心的可靠性&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你选择尝试新技术时，请先考虑将赌注限制在不太重要的功能上。当你基于 SQL 构建平台时，很难采用某种新的、先进的数据库，但是在临时营销站点上尝试新的 UI 库并不难。一旦在非关键任务中验证了这项新技术后，你就可以决定在整个核心应用程序中采用它。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6657407407407407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4hHn7CQ4Vs8WDMkIndVc4EqBFj6kQNETPkcBfovLXgBFU3ia1hWnGVNhQbO2G5fa5Fs4llm9lkVkPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;在整个应用程序中采用新技术的风险级别&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;记住业务目标&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与我合作过的最优秀的那些工程师始终会牢记“为什么”这一要点。他们在业务价值较低的应用程序部分中节约资源，而会花几周时间来完善核心数据模型。作为经理或团队负责人，你必须随时问自己为什么企业需要这种技术。如果某种新工具进入市场，你就必须判断它会增加多少业务价值以及采用的成本。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;结论&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新技术并不坏。我喜欢尝试使用新的框架和编程语言，但是作为领导者，你必须在好奇心和业务目标之间取得平衡。人们很容易陷入未经验证的新工具的泡沫中，因此，你应该制定标准来帮助你决定应该何时尝试新的工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，我是飘渺Jam，一名写代码的架构师，做架构的程序员，期待你的关注。咱们下期见！&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAwMTk4NjM1MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gcBzLSUNh2cgXUsuLIsvQYJE1lzZd74qpC3iciaM6gcYIfOVV0KjDDkeN4CTLTn4ETPtaHOAuTWSWA/0?wx_fmt=png&quot; data-nickname=&quot;JAVA日知录&quot; data-alias=&quot;javadaily&quot; data-signature=&quot;写代码的架构师，做架构的程序员！  实战、源码、数据库、架构...只要你来，你想了解的这里都有！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9b2745e7c5e3b64881c1b998f46bafc6</guid>
<title>Python 的上下文管理器是怎样设计的？</title>
<link>https://toutiao.io/k/zn772as</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;PEP原文 ：&lt;/strong&gt;&lt;span&gt;https://www.python.org/dev/peps/pep-0343&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;PEP标题：&lt;/strong&gt;&lt;span&gt;PEP 343 -- The &quot;with&quot; Statement&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;PEP作者：&lt;/strong&gt;&lt;span&gt;Guido van Rossum, Nick Coghlan&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;创建日期：&lt;/strong&gt;2005-05-13&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;合入版本：&lt;/strong&gt;2.5&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;译者&lt;/strong&gt;：&lt;span&gt;豌豆花下猫@Python猫公众号&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;PEP翻译计划&lt;/strong&gt;：&lt;span&gt;https://github.com/chinesehuazhou/peps-cn&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;摘要&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本 PEP 提议在 Python 中新增一种&quot;with&quot;语句，可以取代常规的 try/finally 语句。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在本 PEP 中，上下文管理器提供__enter__() 和 __exit__() 方法，在进入和退出 with 语句体时，这俩方法分别会被调用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;作者的批注&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本 PEP 最初由 Guido 以第一人称编写，随后由 Nick Coghlan 根据 python-dev 上的讨论，做出了更新补充。所有第一人称的内容都出自于 Guido 的原文。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Python 的 alpha 版本发布周期暴露了本 PEP 以及相关文档和实现[14]中的术语问题。直到 Python 2.5 的第一个 beta 版本发布时，本 PEP 才稳定下来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是的，本文某些地方的动词时态是混乱的。到现在为止，我们已经创作此 PEP 一年多了，所以，有些原本在未来的事情，现在已经成为过去了:)&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;介绍&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过对 PEP-340 及其替代方案的大量讨论后，我决定撤销 PEP-340，并提出了 PEP-310 的一个小变种。经过更多的讨论后，我又添加了一种机制，可以使用 throw() 方法，在挂起的生成器中抛出异常，或者用一个 close() 方法抛出一个 GeneratorExitexception；这些想法最初是在 python-dev [2] 上提出的，并得到了普遍的认可。我还将关键字改为了“with”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（Python猫注：PEP-340 也是 Guido 写的，他最初用的关键字是“block”，后来改成了其它 PEP 提议的“with”。）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在本 PEP 被接受后，以下 PEP 由于重叠而被拒绝：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;PEP-310，可靠的获取/释放对。这是 with 语句的原始提案。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;PEP-319，Python 同步/异步代码块。通过提供合适的 with 语句控制器，本 PEP 可以涵盖它的使用场景：对于&#x27;synchronize&#x27;，我们可以使用示例 1 中的&quot;locking&quot;模板；对于&#x27;asynchronize&#x27;，我们可以使用类似的&quot;unlock&quot;模板。我认为不必要给代码块加上“匿名的”锁；事实上，应该尽可能地使用明确的互斥锁。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PEP-340 和 PEP-346 也与本 PEP 重叠，但当本 PEP 被提交时，它们就自行撤销了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于本 PEP 早期版本的一些讨论，可以在 Python Wiki[3] 上查看。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;动机与摘要&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PEP-340（即匿名的 block 语句）包含了许多强大的创意：使用生成器作为代码块模板、给生成器添加异常处理和终结，等等。除了赞扬之外，它还被很多人所反对，他们不喜欢它是一个（潜在的）循环结构。这意味着块语句中的 break 和 continue 可以中断或继续块语句，即使它原本被当作非循环的资源管理工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，直到我读了 Raymond Chen 对流量控制宏[1]的抨击时，PEP-340 才走入了末路。Raymond 令人信服地指出，在宏中藏有流程控制会让你的代码变得难以捉摸，我觉得他的论点不仅适用于 C，同样适用于 Python。我意识到，PEP-340 的模板可以隐藏各种控制流；例如，它的示例 4 （auto_retry()）捕获了异常，并将代码块重复三次。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而，在我看来，PEP-310 的 with 语句并没有隐藏控制流：虽然 finally 代码部分会暂时挂起控制流，但到了最后，控制流会恢复，就好像 finally 子句根本不存在一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 PEP-310 中，它大致提出了以下的语法（&quot;VAR =&quot;部分是可选的）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; VAR = EXPR:&lt;br/&gt;    BLOCK&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大致可以理解为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;VAR = EXPR&lt;br/&gt;VAR.__enter__()&lt;br/&gt;&lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;    BLOCK&lt;br/&gt;&lt;span&gt;finally&lt;/span&gt;:&lt;br/&gt;    VAR.__exit__()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在考虑这个例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; f = open(&lt;span&gt;&quot;/etc/passwd&quot;&lt;/span&gt;):&lt;br/&gt;    BLOCK1&lt;br/&gt;BLOCK2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上例中，第一行就像是一个“if True”，我们知道如果 BLOCK1 在执行时没有抛异常，那么 BLOCK2 将会被执行；如果 BLOCK1 抛出异常，或执行了非局部的 goto （即 break、continue 或 return），那么 BLOCK2 就不会被执行。也就是说，with 语句所加入的魔法并不会影响到这种流程逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（你可能会问，如果__exit__() 方法因为 bug 导致抛异常怎么办？那么一切都完了——但这并不比其他情况更糟；异常的本质就是，它们可能发生在&lt;strong&gt;任何地方&lt;/strong&gt;，你只能接受这一点。即便你写的代码没有 bug，KeyboardInterrupt 异常仍然会导致程序在任意两个虚拟机操作码之间退出。）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个论点几乎让我采纳了 PEP-310，但是， PEP-340 还有一个亮点让我不忍放弃：使用生成器作为某些抽象化行为的“模板”，例如获取及释放一个锁，或者打开及关闭一个文件，这是一种很强大的想法，通过该 PEP 的例子就能看得出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;受到 Phillip Eby 对 PEP-340 的反提议（counter-proposal）的启发，我尝试创建一个装饰器，将合适的生成器转换为具有必要的__enter__() 和 __exit__() 方法的对象。我在这里遇到了一个障碍：虽然这对于锁的例子来说并不太难，但是对于打开文件的例子，却不可能做到这一点。我的想法是像这样定义模板：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@contextmanager&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;opening&lt;/span&gt;&lt;span&gt;(filename)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    f = open(filename)&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;yield&lt;/span&gt; f&lt;br/&gt;    &lt;span&gt;finally&lt;/span&gt;:&lt;br/&gt;        f.close()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并这样使用它：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; f = opening(filename):&lt;br/&gt;    ...read data &lt;span&gt;from&lt;/span&gt; f...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题是在 PEP-310 中，EXPR 的调用结果直接分配给 VAR，然后 VAR 的__exit__() 方法会在 BLOCK1 退出时被调用。但是这里，VAR 显然需要接收打开的文件，这意味着__exit__() 必须是文件对象的一个方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然这可以使用代理类来解决，但会很别扭，同时我还意识到，只需做出一个小小的转变，就能轻轻松松地写出所需的装饰器：让 VAR 接收__enter__() 方法的调用结果，接着保存 EXPR 的值，以便最后调用它的__exit__() 方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，装饰器可以返回一个包装器的实例，其__enter__() 方法调用生成器的 next() 方法，并返回 next() 所返回的值；包装器实例的__exit__() 方法再次调用 next()，但期望它抛出 StopIteration。（详细信息见下文的生成器装饰器部分。）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，最后一个障碍便是 PEP-310 语法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; VAR = EXPR:&lt;br/&gt;    BLOCK1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是有欺骗性的，因为 VAR 不接收 EXPR 的值。借用 PEP-340 的语法，很容易改成：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; EXPR &lt;span&gt;as&lt;/span&gt; VAR:&lt;br/&gt;    BLOCK1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在其他的讨论中，人们真的很喜欢能够“看到”生成器中的异常，尽管仅仅是为了记日志；生成器不允许产生（yield）其它的值，因为 with 语句不应该作为循环使用（引发不同的异常是勉强可以接受的）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了做到这点，我建议为生成器提供一个新的 throw() 方法，该方法以通常的方式接受 1 到 3 个参数（类型、值、回溯），表示一个异常，并在生成器挂起的地方抛出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一旦我们有了这个，下一步就是添加另一个生成器方法 close()，它用一个特殊的异常（即 GeneratorExit）调用 throw()，可以令生成器退出。有了这个，在生成器被当作垃圾回收时，可以让程序自动调用 close()。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，我们可以允许在 try-finally 语句中使用 yield 语句，因为我们现在可以保证 finally 子句必定被执行。关于终结（finalization）的常见注意事项——进程可能会在没有终结任何对象的情况下突然被终止，而这些对象可能会因程序的周期或内存泄漏而永远存活（在 Python 的实现中，周期或内存泄漏会由 GC 妥善处理）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请注意，在使用完生成器对象后，我们不保证会立即执行 finally 子句，尽管在 CPython 中是这样实现的。这类似于自动关闭文件：像 CPython 这样的引用计数型解释器，它会在最后一个引用消失时释放一个对象，而使用其他 GC 算法的解释器不保证也是如此。这指的是 Jython、IronPython，可能包括运行在 Parrot 上的 Python。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（关于对生成器所做的更改，可以在 PEP-342 中找到细节，而不是在当前 PEP 中。）（Python猫注：我也曾翻译过 PEP-342，&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247483976&amp;amp;idx=1&amp;amp;sn=3074809f0dfc1e90bc657cdd48e3e4f6&amp;amp;chksm=fa5845cdcd2fccdbde2b306671c900dcd2325a5c66a792c8b1845359de71bb24b074f28333af&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;链接在此&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;链接在此&lt;/a&gt;）&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;用例&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请参阅文档末尾的示例部分。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;规格说明：&#x27;with&#x27;语句&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提出了一种新的语句，语法如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; EXPR &lt;span&gt;as&lt;/span&gt; VAR:&lt;br/&gt;    BLOCK&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里，“with”和“as”是新的关键字；EXPR 是任意一个表达式（但不是表达式列表），VAR 是一个单一的赋值目标。它不能是以逗号分隔的变量序列，但可以是以圆括号包裹的以逗号分隔的变量序列。（这个限制使得将来的语法扩展可以出现多个逗号分隔的资源，每个资源都有自己的可选 as 子句。）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“as VAR”部分是可选的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述语句可以被翻译为:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;mgr = (EXPR)&lt;br/&gt;exit = type(mgr).__exit__  &lt;span&gt;# Not calling it yet&lt;/span&gt;&lt;br/&gt;value = type(mgr).__enter__(mgr)&lt;br/&gt;exc = &lt;span&gt;True&lt;/span&gt;&lt;br/&gt;&lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;        VAR = value  &lt;span&gt;# Only if &quot;as VAR&quot; is present&lt;/span&gt;&lt;br/&gt;        BLOCK&lt;br/&gt;    &lt;span&gt;except&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;# The exceptional case is handled here&lt;/span&gt;&lt;br/&gt;        exc = &lt;span&gt;False&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; exit(mgr, *sys.exc_info()):&lt;br/&gt;            &lt;span&gt;raise&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# The exception is swallowed if exit() returns true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;finally&lt;/span&gt;:&lt;br/&gt;    &lt;span&gt;# The normal and non-local-goto cases are handled here&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; exc:&lt;br/&gt;        exit(mgr, &lt;span&gt;None&lt;/span&gt;, &lt;span&gt;None&lt;/span&gt;, &lt;span&gt;None&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里，小写变量（mgr、exit、value、exc）是内部变量，用户不能访问；它们很可能是由特殊的寄存器或堆栈位置来实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述详细的翻译旨在说明确切的语义。解释器会按照顺序查找相关的方法（__exit__、__enter__），如果没有找到，将引发 AttributeError。类似地，如果任何一个调用引发了异常，其效果与上述代码中的效果完全相同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，如果 BLOCK 包含 break、continue 或 return 语句，__exit__() 方法就会被调用，带三个 None 参数，就跟 BLOCK 正常执行完成一样。（也就是说，__exit__() 不会将这些“伪异常”视为异常。）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果语法中的&quot;as VAR&quot;部分被省略了，则翻译中的&quot;VAR =&quot;部分也要被忽略（但 mgr.__enter__() 仍然会被调用）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;mgr.__exit__() 的调用约定如下。如果 finally 子句是通过 BLOCK 的正常完成或通过非局部 goto（即 BLOCK 中的 break、continue 或 return 语句）到达，则使用三个 None 参数调用mgr.__exit__()。如果 finally 子句是通过 BLOCK 引发的异常到达，则使用异常的类型、值和回溯这三个参数调用 mgr.__exit__()。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重要：如果 mgr.__exit__() 返回“true”，则异常将被“吞灭”。也就是说，如果返回&quot;true&quot;，即便在 with 语句内部发生了异常，也会继续执行 with 语句之后的下一条语句。然而，如果 with 语句通过非局部 goto （break、continue 或 return）跳出，则这个非局部返回将被重置，不管 mgr.__exit__() 的返回值是什么。这个细节的动机是使 mgr.__exit__() 能够吞咽异常，而不使异常产生影响（因为默认的返回值 None为 false，这会导致异常被重新 raise）。吞下异常的主要用途是使编写 @contextmanager 装饰器成为可能，这样被装饰的生成器中的 try/except 代码块的行为就好像生成器的主体在 with-语句里内联展开了一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之所以将异常的细节传给__exit__()，而不用 PEP -310 中不带参数的__exit__()，原因是考虑到下面例子 3 的 transactional()。该示例会根据是否发生异常，从而决定提交或回滚事务。我们没有用一个 bool 标志区分是否发生异常，而是传了完整的异常信息，目的是可以记录异常日志。依赖于 sys.exc_info() 获取异常信息的提议被拒绝了；因为 sys.exc_info() 有着非常复杂的语义，它返回的异常信息完全有可能是很久之前就捕获的。有人还提议添加一个布尔值，用于区分是到达 BLOCK 结尾，还是非局部 goto。这因为过于复杂和不必要而被拒绝；对于数据库事务回滚，非局部 goto 应该被认为是正常的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了促进 Python 代码中上下文的链接作用，__exit__() 方法不应该继续 raise 传递给它的错误。在这种情况下，__exit__() 方法的调用者应该负责处理 raise。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，如果调用者想知道__exit__() 是否调用失败（而不是在传出原始错误之前就完成清理），它就可以自己判断。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果__exit__() 没有返回错误，那么就可以将__exit__() 方法本身解释为成功（不管原始错误是被传播还是抑制）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而，如果__exit__() 向其调用者传播了异常，这就意味着__exit__() 本身已经失败。因此，__exit__() 方法应该避免引发错误，除非它们确实失败了。(允许原始错误继续并不是失败。)&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;过渡计划&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Python 2.5 中，新语法需要通过 future 引入：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;from __future__ import with_statement&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它会引入&#x27;with&#x27;和&#x27;as&#x27;关键字。如果没有导入，使用&#x27;with&#x27;或&#x27;as&#x27;作为标识符时，将导致报错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Python 2.6 中，新语法总是生效的，&#x27;with&#x27;和&#x27;as&#x27;已经是关键字。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;生成器装饰器&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247483976&amp;amp;idx=1&amp;amp;sn=3074809f0dfc1e90bc657cdd48e3e4f6&amp;amp;chksm=fa5845cdcd2fccdbde2b306671c900dcd2325a5c66a792c8b1845359de71bb24b074f28333af&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;PEP-342&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;PEP-342&lt;/a&gt; 被采纳，我们可以编写一个装饰器，令其使用只 yield 一次的生成器来控制 with 语句。这是一个装饰器的粗略示例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;GeneratorContextManager&lt;/span&gt;&lt;span&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, gen)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;       self.gen = gen&lt;br/&gt;   &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__enter__&lt;/span&gt;&lt;span&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;       &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;           &lt;span&gt;return&lt;/span&gt; self.gen.next()&lt;br/&gt;       &lt;span&gt;except&lt;/span&gt; StopIteration:&lt;br/&gt;           &lt;span&gt;raise&lt;/span&gt; RuntimeError(&lt;span&gt;&quot;generator didn&#x27;t yield&quot;&lt;/span&gt;)&lt;br/&gt;   &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__exit__&lt;/span&gt;&lt;span&gt;(self, type, value, traceback)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;       &lt;span&gt;if&lt;/span&gt; type &lt;span&gt;is&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;:&lt;br/&gt;           &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;               self.gen.next()&lt;br/&gt;           &lt;span&gt;except&lt;/span&gt; StopIteration:&lt;br/&gt;               &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;           &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;               &lt;span&gt;raise&lt;/span&gt; RuntimeError(&lt;span&gt;&quot;generator didn&#x27;t stop&quot;&lt;/span&gt;)&lt;br/&gt;       &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;           &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;               self.gen.throw(type, value, traceback)&lt;br/&gt;               &lt;span&gt;raise&lt;/span&gt; RuntimeError(&lt;span&gt;&quot;generator didn&#x27;t stop after throw()&quot;&lt;/span&gt;)&lt;br/&gt;           &lt;span&gt;except&lt;/span&gt; StopIteration:&lt;br/&gt;               &lt;span&gt;return&lt;/span&gt; &lt;span&gt;True&lt;/span&gt;&lt;br/&gt;           &lt;span&gt;except&lt;/span&gt;:&lt;br/&gt;               &lt;span&gt;# only re-raise if it&#x27;s *not* the exception that was&lt;/span&gt;&lt;br/&gt;               &lt;span&gt;# passed to throw(), because __exit__() must not raise&lt;/span&gt;&lt;br/&gt;               &lt;span&gt;# an exception unless __exit__() itself failed.  But&lt;/span&gt;&lt;br/&gt;               &lt;span&gt;# throw() has to raise the exception to signal&lt;/span&gt;&lt;br/&gt;               &lt;span&gt;# propagation, so this fixes the impedance mismatch&lt;/span&gt;&lt;br/&gt;               &lt;span&gt;# between the throw() protocol and the __exit__()&lt;/span&gt;&lt;br/&gt;               &lt;span&gt;# protocol.&lt;/span&gt;&lt;br/&gt;               &lt;span&gt;#&lt;/span&gt;&lt;br/&gt;               &lt;span&gt;if&lt;/span&gt; sys.exc_info()[&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; value:&lt;br/&gt;                   &lt;span&gt;raise&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;contextmanager&lt;/span&gt;&lt;span&gt;(func)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;helper&lt;/span&gt;&lt;span&gt;(*args, **kwds)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;       &lt;span&gt;return&lt;/span&gt; GeneratorContextManager(func(*args, **kwds))&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; helper&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个装饰器可以这样使用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@contextmanager&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;opening&lt;/span&gt;&lt;span&gt;(filename)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;   f = open(filename) &lt;span&gt;# IOError is untouched by GeneratorContext&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;       &lt;span&gt;yield&lt;/span&gt; f&lt;br/&gt;   &lt;span&gt;finally&lt;/span&gt;:&lt;br/&gt;       f.close() &lt;span&gt;# Ditto for errors here (however unlikely)&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个装饰器的健壮版本将会加入到标准库中。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;标准库中的上下文管理器&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以将__enter__() 和__exit__() 方法赋予某些对象，如文件、套接字和锁，这样就不用写:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; locking(myLock):&lt;br/&gt;    BLOCK&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而是简单地写成：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; myLock:&lt;br/&gt;    BLOCK&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我想我们应该谨慎对待它；它可能会导致以下的错误:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;f = open(filename)&lt;br/&gt;&lt;span&gt;with&lt;/span&gt; f:&lt;br/&gt;    BLOCK1&lt;br/&gt;&lt;span&gt;with&lt;/span&gt; f:&lt;br/&gt;    BLOCK2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它可能跟你想的不一样（在进入 block2 之前，f 已经关闭了）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一方面，这样的错误很容易诊断；例如，当第二个 with 语句再调用 f.__enter__() 时，上面的生成器装饰器将引发 RuntimeError。如果在一个已关闭的文件对象上调用__enter__，则可能引发类似的错误。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Python 2.5中，以下类型被标识为上下文管理器：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;- file&lt;br/&gt;- thread.LockType&lt;br/&gt;- threading.Lock&lt;br/&gt;- threading.RLock&lt;br/&gt;- threading.Condition&lt;br/&gt;- threading.Semaphore&lt;br/&gt;- threading.BoundedSemaphore&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还将在 decimal 模块添加一个上下文管理器，以支持在 with 语句中使用本地的十进制算术上下文，并在退出 with 语句时，自动恢复原始上下文。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;标准术语&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本 PEP 提议将由__enter__() 和 __exit__() 方法组成的协议称为“上下文管理器协议”，并将实现该协议的对象称为“上下文管理器”。［4]&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;紧跟着 with 关键字的表达式被称为“上下文表达式”，该表达式提供了上下文管理器在with 代码块中所建立的运行时环境的主要线索。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前为止， with 语句体中的代码和 as 关键字后面的变量名（一个或多个）还没有特殊的术语。可以使用一般的术语“语句体”和“目标列表”，如果这些术语不清晰，可以使用“with”或“with statement”作为前缀。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;考虑到可能存在 decimal 模块的算术上下文这样的对象，因此术语“上下文”是有歧义的。如果想要更加具体的话，可以使用术语“上下文管理器”，表示上下文表达式所创建的具体对象；使用术语“运行时上下文”或者（最好是）&quot;运行时环境&quot;，表示上下文管理器所做出的实际状态的变更。当简单地讨论 with 语句的用法时，歧义性无关紧要，因为上下文表达式完全定义了对运行时环境所做的更改。当讨论 with 语句本身的机制以及如何实际实现上下文管理器时，这些术语的区别才是重要的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;缓存上下文管理器&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;许多上下文管理器（例如文件和基于生成器的上下文）都是一次性的对象。一旦__exit__() 方法被调用，上下文管理器将不再可用（例如：文件已经被关闭，或者底层生成器已经完成执行）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于多线程代码，以及嵌套的 with 语句想要使用同一个上下文管理器，最简单的方法是给每个 with 语句一个新的管理器对象。并非巧合的是，标准库中所有支持重用的上下文管理器都来自 threading 模块——它们都被设计用来处理由线程和嵌套使用所产生的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这意味着，为了保存带有特定初始化参数（为了用在多个 with 语句）的上下文管理器，通常需要将它存储在一个无参数的可调用对象，然后在每个语句的上下文表达式中调用，而不是直接把上下文管理器缓存起来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果此限制不适用，在受影响的上下文管理器的文档中，应该清楚地指出这一点。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;解决的问题&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下的问题经由 BDFL 的裁决而解决（并且在 python-dev 上没有重大的反对意见）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、当底层的生成器-迭代器行为异常时，GeneratorContextManager 应该引发什么异常？下面引用的内容是 Guido 为本 PEP及 PEP-342 （见[8]）中生成器的 close() 方法选择 RuntimeError 的原因：“我不愿意只是为了它而引入一个新的异常类，因为这不是我想让人们捕获的异常：我想让它变成一个回溯（traceback），被程序员看到并且修复。因此，我认为它们都应该引发 RuntimeError。有一些引发 RuntimeError 的先例：Python 核心代码在检测到无限递归时，遇到未初始化的对象时（以及其它各种各样的情况）。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、如果在with语句所涉及的类中没有相关的方法，则最好是抛出AttributeError而不是TypeError。抽象对象C API引发TypeError而不是AttributeError，这只是历史的一个偶然，而不是经过深思熟虑的设计决策[11]。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、带有__enter__ /__exit__方法的对象被称为“上下文管理器”，将生成器函数转化为上下文管理器工厂的是 contextlib.contextmanager 装饰器。在 2.5版本发布期间，有人提议使用其它的叫法[16]，但没有足够令人信服的理由。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;拒绝的选项&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在长达几个月的时间里，对于是否要抑制异常（从而避免隐藏的流程控制），出现了一场令人痛苦的拉锯战，最终，Guido 决定要抑制异常[13]。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本 PEP 的另一个话题也引起了无休止的争论，即是否要提供一个__context__() 方法，类似于可迭代对象的__iter__() 方法[5][7][9]。源源不断的问题[10][13]在解释它是什么、为什么是那样、以及它是如何工作的，最终导致 Guido 完全抛弃了这个东西[15]（这很让人欢欣鼓舞！）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有人提议直接使用 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247483976&amp;amp;idx=1&amp;amp;sn=3074809f0dfc1e90bc657cdd48e3e4f6&amp;amp;chksm=fa5845cdcd2fccdbde2b306671c900dcd2325a5c66a792c8b1845359de71bb24b074f28333af&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;PEP-342&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;PEP-342&lt;/a&gt; 的生成器 API 来定义 with 语句[6]，但这很快就不予考虑了，因为它会导致难以编写不基于生成器的上下文管理器。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;例子&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于生成器的示例依赖于 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247483976&amp;amp;idx=1&amp;amp;sn=3074809f0dfc1e90bc657cdd48e3e4f6&amp;amp;chksm=fa5845cdcd2fccdbde2b306671c900dcd2325a5c66a792c8b1845359de71bb24b074f28333af&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;PEP-342&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;PEP-342&lt;/a&gt;。另外，有些例子是不实用的，因为标准库中有现成的对象可以在 with 语句中直接使用，例如 threading.RLock。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例子中那些函数名所用的时态并不是随意的。过去时态（“-ed”）的函数指的是在__enter__方法中执行，并在__exit__方法中反执行的动作。进行时态（&quot;-ing&quot;）的函数指的是准备在__exit__方法中执行的动作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、一个锁的模板，在开始时获取，在离开时释放：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@contextmanager&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;locked&lt;/span&gt;&lt;span&gt;(lock)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    lock.acquire()&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;yield&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;finally&lt;/span&gt;:&lt;br/&gt;        lock.release()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; locked(myLock):&lt;br/&gt;    &lt;span&gt;# Code here executes with myLock held.  The lock is&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# guaranteed to be released when the block is left (even&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# if via return or by an uncaught exception).&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、一个打开文件的模板，确保当代码被执行后，文件会被关闭：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@contextmanager&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;opened&lt;/span&gt;&lt;span&gt;(filename, mode=&lt;span&gt;&quot;r&quot;&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    f = open(filename, mode)&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;yield&lt;/span&gt; f&lt;br/&gt;    &lt;span&gt;finally&lt;/span&gt;:&lt;br/&gt;        f.close()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用如下:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; opened(&lt;span&gt;&quot;/etc/passwd&quot;&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; f:&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt; f:&lt;br/&gt;        &lt;span&gt;print&lt;/span&gt; line.rstrip()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、一个数据库事务的模板，用于提交或回滚：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@contextmanager&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;transaction&lt;/span&gt;&lt;span&gt;(db)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    db.begin()&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;except&lt;/span&gt;:&lt;br/&gt;        db.rollback()&lt;br/&gt;        &lt;span&gt;raise&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;        db.commit()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、不使用生成器，重写例子 1：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;locked&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, lock)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;       self.lock = lock&lt;br/&gt;   &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__enter__&lt;/span&gt;&lt;span&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;       self.lock.acquire()&lt;br/&gt;   &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__exit__&lt;/span&gt;&lt;span&gt;(self, type, value, tb)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;       self.lock.release()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（这个例子很容易被修改来实现其他相对无状态的例子；这表明，如果不需要保留特殊的状态，就不必要使用生成器。）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5、临时重定向 stdout：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@contextmanager&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;stdout_redirected&lt;/span&gt;&lt;span&gt;(new_stdout)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    save_stdout = sys.stdout&lt;br/&gt;    sys.stdout = new_stdout&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;finally&lt;/span&gt;:&lt;br/&gt;        sys.stdout = save_stdout&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; opened(filename, &lt;span&gt;&quot;w&quot;&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; f:&lt;br/&gt;    &lt;span&gt;with&lt;/span&gt; stdout_redirected(f):&lt;br/&gt;        &lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，这不是线程安全的，但是若不用管理器的话，本身也不是线程安全的。在单线程程序（例如脚本）中，这种做法很受欢迎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6、opened() 的一个变体，也返回一个错误条件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@contextmanager&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;opened_w_error&lt;/span&gt;&lt;span&gt;(filename, mode=&lt;span&gt;&quot;r&quot;&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;        f = open(filename, mode)&lt;br/&gt;    &lt;span&gt;except&lt;/span&gt; IOError, err:&lt;br/&gt;        &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;, err&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;            &lt;span&gt;yield&lt;/span&gt; f, &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;finally&lt;/span&gt;:&lt;br/&gt;            f.close()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用如下:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; opened_w_error(&lt;span&gt;&quot;/etc/passwd&quot;&lt;/span&gt;, &lt;span&gt;&quot;a&quot;&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; (f, err):&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err:&lt;br/&gt;        &lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;IOError:&quot;&lt;/span&gt;, err&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;        f.write(&lt;span&gt;&quot;guido::0:0::/:/bin/sh\n&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;7、另一个有用的操作是阻塞信号。它的用法是这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; signal&lt;br/&gt;&lt;span&gt;with&lt;/span&gt; signal.blocked():&lt;br/&gt;    &lt;span&gt;# code executed without worrying about signals&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它的参数是可选的，表示要阻塞的信号列表；在默认情况下，所有信号都被阻塞。具体实现就留给读者作为练习吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;8、此特性还有一个用途是 Decimal 上下文。下面是 Michael Chermside 发布的一个简单的例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; decimal&lt;br/&gt;&lt;span&gt;@contextmanager&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;extra_precision&lt;/span&gt;&lt;span&gt;(places=&lt;span&gt;2&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    c = decimal.getcontext()&lt;br/&gt;    saved_prec = c.prec&lt;br/&gt;    c.prec += places&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;finally&lt;/span&gt;:&lt;br/&gt;        c.prec = saved_prec&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例用法（摘自 Python 库参考文档）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sin&lt;/span&gt;&lt;span&gt;(x)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;Return the sine of x as measured in radians.&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;with&lt;/span&gt; extra_precision():&lt;br/&gt;        i, lasts, s, fact, num, sign = &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, x, &lt;span&gt;1&lt;/span&gt;, x, &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; s != lasts:&lt;br/&gt;            lasts = s&lt;br/&gt;            i += &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;            fact *= i * (i&lt;span&gt;-1&lt;/span&gt;)&lt;br/&gt;            num *= x * x&lt;br/&gt;            sign *= &lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;            s += num / fact * sign&lt;br/&gt;    &lt;span&gt;# The &quot;+s&quot; rounds back to the original precision,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# so this must be outside the with-statement:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; +s&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;9、下面是 decimal 模块的一个简单的上下文管理器：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@contextmanager&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;localcontext&lt;/span&gt;&lt;span&gt;(ctx=None)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;&quot;&quot;Set a new local decimal context for the block&quot;&quot;&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# Default to using the current context&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; ctx &lt;span&gt;is&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;:&lt;br/&gt;        ctx = getcontext()&lt;br/&gt;    &lt;span&gt;# We set the thread context to a copy of this context&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# to ensure that changes within the block are kept&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# local to the block.&lt;/span&gt;&lt;br/&gt;    newctx = ctx.copy()&lt;br/&gt;    oldctx = decimal.getcontext()&lt;br/&gt;    decimal.setcontext(newctx)&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;yield&lt;/span&gt; newctx&lt;br/&gt;    &lt;span&gt;finally&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;# Always restore the original context&lt;/span&gt;&lt;br/&gt;        decimal.setcontext(oldctx)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例用法:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; decimal &lt;span&gt;import&lt;/span&gt; localcontext, ExtendedContext&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sin&lt;/span&gt;&lt;span&gt;(x)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;with&lt;/span&gt; localcontext() &lt;span&gt;as&lt;/span&gt; ctx:&lt;br/&gt;        ctx.prec += &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# Rest of sin calculation algorithm&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# uses a precision 2 greater than normal&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; +s &lt;span&gt;# Convert result to normal precision&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sin&lt;/span&gt;&lt;span&gt;(x)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;with&lt;/span&gt; localcontext(ExtendedContext):&lt;br/&gt;        &lt;span&gt;# Rest of sin calculation algorithm&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# uses the Extended Context from the&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# General Decimal Arithmetic Specification&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; +s &lt;span&gt;# Convert result to normal context&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;10、一个通用的“对象关闭”上下文管理器：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;closing&lt;/span&gt;&lt;span&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, obj)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        self.obj = obj&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__enter__&lt;/span&gt;&lt;span&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; self.obj&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__exit__&lt;/span&gt;&lt;span&gt;(self, *exc_info)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;            close_it = self.obj.close&lt;br/&gt;        &lt;span&gt;except&lt;/span&gt; AttributeError:&lt;br/&gt;            &lt;span&gt;pass&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;            close_it()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这可以确保关闭任何带有 close 方法的东西，无论是文件、生成器，还是其他东西。它甚至可以在对象并不需要关闭的情况下使用（例如，一个接受了任意可迭代对象的函数）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# emulate opening():&lt;/span&gt;&lt;br/&gt;&lt;span&gt;with&lt;/span&gt; closing(open(&lt;span&gt;&quot;argument.txt&quot;&lt;/span&gt;)) &lt;span&gt;as&lt;/span&gt; contradiction:&lt;br/&gt;   &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt; contradiction:&lt;br/&gt;       &lt;span&gt;print&lt;/span&gt; line&lt;br/&gt;&lt;span&gt;# deterministically finalize an iterator:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;with&lt;/span&gt; closing(iter(data_source)) &lt;span&gt;as&lt;/span&gt; data:&lt;br/&gt;   &lt;span&gt;for&lt;/span&gt; datum &lt;span&gt;in&lt;/span&gt; data:&lt;br/&gt;       process(datum)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（Python 2.5 的 contextlib 模块包含了这个上下文管理器的一个版本）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;11、PEP-319 给出了一个用例，它也有一个 release() 上下文，能临时释放先前获得的锁；这个用例跟前文的例子 4 很相似，只是交换了 acquire() 和 release() 的调用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;released&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, lock)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;      self.lock = lock&lt;br/&gt;  &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__enter__&lt;/span&gt;&lt;span&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;      self.lock.release()&lt;br/&gt;  &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__exit__&lt;/span&gt;&lt;span&gt;(self, type, value, tb)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;      self.lock.acquire()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例用法:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; my_lock:&lt;br/&gt;    &lt;span&gt;# Operations with the lock held&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;with&lt;/span&gt; released(my_lock):&lt;br/&gt;        &lt;span&gt;# Operations without the lock&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# e.g. blocking I/O&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# Lock is held again here&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;12、一个“嵌套型”上下文管理器，自动从左到右嵌套所提供的上下文，可以避免过度缩进：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@contextmanager&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;nested&lt;/span&gt;&lt;span&gt;(*contexts)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    exits = []&lt;br/&gt;    vars = []&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; context &lt;span&gt;in&lt;/span&gt; contexts:&lt;br/&gt;                exit = context.__exit__&lt;br/&gt;                enter = context.__enter__&lt;br/&gt;                vars.append(enter())&lt;br/&gt;                exits.append(exit)&lt;br/&gt;            &lt;span&gt;yield&lt;/span&gt; vars&lt;br/&gt;        &lt;span&gt;except&lt;/span&gt;:&lt;br/&gt;            exc = sys.exc_info()&lt;br/&gt;        &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;            exc = (&lt;span&gt;None&lt;/span&gt;, &lt;span&gt;None&lt;/span&gt;, &lt;span&gt;None&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;finally&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; exits:&lt;br/&gt;            exit = exits.pop()&lt;br/&gt;            &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;                exit(*exc)&lt;br/&gt;            &lt;span&gt;except&lt;/span&gt;:&lt;br/&gt;                exc = sys.exc_info()&lt;br/&gt;            &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;                exc = (&lt;span&gt;None&lt;/span&gt;, &lt;span&gt;None&lt;/span&gt;, &lt;span&gt;None&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; exc != (&lt;span&gt;None&lt;/span&gt;, &lt;span&gt;None&lt;/span&gt;, &lt;span&gt;None&lt;/span&gt;):&lt;br/&gt;            &lt;span&gt;# sys.exc_info() may have been&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;# changed by one of the exit methods&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;# so provide explicit exception info&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;raise&lt;/span&gt; exc[&lt;span&gt;0&lt;/span&gt;], exc[&lt;span&gt;1&lt;/span&gt;], exc[&lt;span&gt;2&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例用法:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; nested(a, b, c) &lt;span&gt;as&lt;/span&gt; (x, y, z):&lt;br/&gt;    &lt;span&gt;# Perform operation&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;等价于:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;with&lt;/span&gt; a &lt;span&gt;as&lt;/span&gt; x:&lt;br/&gt;    &lt;span&gt;with&lt;/span&gt; b &lt;span&gt;as&lt;/span&gt; y:&lt;br/&gt;        &lt;span&gt;with&lt;/span&gt; c &lt;span&gt;as&lt;/span&gt; z:&lt;br/&gt;            &lt;span&gt;# Perform operation&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（Python 2.5 的 contextlib 模块包含了这个上下文管理器的一个版本）&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;参考实现&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 2005 年 6 月 27 日的 EuroPython 会议上，Guido 首次采纳了这个 PEP。之后它添加了__context__方法，并被再次采纳。此 PEP 在 Python 2.5 a1 子版本中实现，__context__() 方法在 Python 2.5b1 中被删除。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;致谢&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;许多人对这个 PEP 中的想法和概念作出了贡献，包括在 PEP-340 和 PEP-346 的致谢中提到的所有人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，还要感谢（排名不分先后）：Paul Moore, Phillip J. Eby, Greg Ewing, Jason Orendorff, Michael Hudson, Raymond Hettinger, Walter Dörwald, Aahz, Georg Brandl, Terry Reedy, A.M. Kuchling, Brett Cannon，以及所有参与了 python-dev 讨论的人。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;参考链接&lt;/h2&gt;&lt;p&gt;&lt;span&gt;[1]Raymond Chen&#x27;s article on hidden flow controlhttps://devblogs.microsoft.com/oldnewthing/20050106-00/?p=36783&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[2]Guido suggests some generator changes that ended up in PEP 342https://mail.python.org/pipermail/python-dev/2005-May/053885.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[3]Wiki discussion of PEP 343http://wiki.python.org/moin/WithStatement&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[4]Early draft of some documentation for the with statementhttps://mail.python.org/pipermail/python-dev/2005-July/054658.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[5]Proposal to add the &lt;strong&gt;with&lt;/strong&gt; methodhttps://mail.python.org/pipermail/python-dev/2005-October/056947.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[6]Proposal to use the PEP 342 enhanced generator API directlyhttps://mail.python.org/pipermail/python-dev/2005-October/056969.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[7]Guido lets me (Nick Coghlan) talk him into a bad idea ;)https://mail.python.org/pipermail/python-dev/2005-October/057018.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[8]Guido raises some exception handling questionshttps://mail.python.org/pipermail/python-dev/2005-June/054064.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[9]Guido answers some questions about the &lt;strong&gt;context&lt;/strong&gt; methodhttps://mail.python.org/pipermail/python-dev/2005-October/057520.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[10]Guido answers more questions about the &lt;strong&gt;context&lt;/strong&gt; methodhttps://mail.python.org/pipermail/python-dev/2005-October/057535.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[11]Guido says AttributeError is fine for missing special methodshttps://mail.python.org/pipermail/python-dev/2005-October/057625.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[12]Original PEP 342 implementation patchhttp://sourceforge.net/tracker/index.php?func=detail&amp;amp;aid=1223381&amp;amp;group_id=5470&amp;amp;atid=305470&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[13](1, 2) Guido restores the ability to suppress exceptionshttps://mail.python.org/pipermail/python-dev/2006-February/061909.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[14]A simple question kickstarts a thorough review of PEP 343https://mail.python.org/pipermail/python-dev/2006-April/063859.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[15]Guido kills the &lt;strong&gt;context&lt;/strong&gt;() methodhttps://mail.python.org/pipermail/python-dev/2006-April/064632.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[16]Proposal to use &#x27;context guard&#x27; instead of &#x27;context manager&#x27;https://mail.python.org/pipermail/python-dev/2006-May/064676.html&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;版权&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文档已进入公共领域。&lt;/p&gt;&lt;section&gt;源文档：&lt;span&gt;https://github.com/python/peps/blob/master/pep-0343.txt&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>