<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>a26dc1bd1cf74da10cf4ab7e33c7fbac</guid>
<title>漫画：一台 Linux 服务器最多能支撑多少个 TCP 连接？</title>
<link>https://toutiao.io/k/7fcauc4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;困惑很多人的并发问题&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在网络开发中，我发现有很多同学对一个基础问题始终是没有彻底搞明白。那就是一台服务器最大究竟能支持多少个网络连接？我想我有必要单独发一篇文章来好好说一下这个问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多同学看到这个问题的第一反应是65535。原因是：“听说端口号最多有65535个，那长连接就最多保持65535个了”。是这样的吗？还有的人说：“应该受TCP连接里四元组的空间大小限制，算起来是200多万亿个！”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你对这个问题也是理解的不够彻底，那么今天讲个故事讲给你听！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一次关于服务器端并发的聊天&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6565040650406504&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BBjAFF4hcwoo5ibkEGbrfCkOXicTNTjPGxzv6h8iaQXTt7zGndbmn4sht6iasE6Y5LdW64ZAgdkxibTtah5qyGoMKqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;492&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&quot;TCP连接四元组是源IP地址、源端口、目的IP地址和目的端口。任意一个元素发生了改变，那么就代表的是一条完全不同的连接了。拿我的Nginx举例，它的端口是固定使用80。另外我的IP也是固定的，这样目的IP地址、目的端口都是固定的。剩下源IP地址、源端口是可变的。所以理论上我的Nginx上最多可以建立2的32次方（ip数）×2的16次方（port数）个连接。这是两百多万亿的一个大数字！！&quot;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;13&quot; data-cropselx2=&quot;505&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;682&quot; data-ratio=&quot;1.315040650406504&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BBjAFF4hcwoo5ibkEGbrfCkOXicTNTjPGxzjVPBaZFsRWxsP4PT92osvJcEicb4giceBWX3pO37OnI6qCDiaeHZ63Pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;492&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&quot;进程每打开一个文件（linux下一切皆文件，包括socket），都会消耗一定的内存资源。如果有不怀好心的人启动一个进程来无限的创建和打开新的文件，会让服务器崩溃。所以linux系统出于安全角度的考虑，在多个位置都限制了可打开的文件描述符的数量，包括系统级、用户级、进程级。这三个限制的含义和修改方式如下：&quot;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;系统级：当前系统可打开的最大数量，通过fs.file-max参数可修改&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用户级：指定用户可打开的最大数量，修改/etc/security/limits.conf&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;进程级：单个进程可打开的最大数量，通过fs.nr_open参数可修改&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.1829268292682926&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BBjAFF4hcwoo5ibkEGbrfCkOXicTNTjPGxbO8LmdRkuWzWnGMGR2uG5luAtmDxb11XRjq17ntiasSHbwf5NEZf7hA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;492&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&quot;我的接收缓存区大小是可以配置的，通过sysctl命令就可以查看。&quot;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ sysctl -a | grep rmem&lt;br/&gt;net.ipv4.tcp_rmem = 4096 87380 8388608&lt;br/&gt;net.core.rmem_default = 212992&lt;br/&gt;net.core.rmem_max = 8388608&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&quot;其中在tcp_rmem&quot;中的第一个值是为你们的TCP连接所需分配的最少字节数。该值默认是4K，最大的话8MB之多。也就是说你们有数据发送的时候我需要至少为对应的socket再分配4K内存，甚至可能更大。&quot;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5152129817444219&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BBjAFF4hcwoo5ibkEGbrfCkOXicTNTjPGxS9JZ4Rf3jw5Cic6k7yqkJuEn87oJahc7TO5wGkUBkh6P8YRTUFTINAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;493&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&quot;TCP分配发送缓存区的大小受参数net.ipv4.tcp_wmem配置影响。&quot;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ sysctl -a | grep wmem&lt;br/&gt;net.ipv4.tcp_wmem = 4096 65536 8388608&lt;br/&gt;net.core.wmem_default = 212992&lt;br/&gt;net.core.wmem_max = 8388608&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&quot;在net.ipv4.tcp_wmem&quot;中的第一个值是发送缓存区的最小值，默认也是4K。当然了如果数据很大的话，该缓存区实际分配的也会比默认值大。&quot;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3604887983706721&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BBjAFF4hcwoo5ibkEGbrfCkOXicTNTjPGxKBBZ0b8hQGzMib9I0Sw4MlFfgVqt5QSMZDgBTwFa9aeVXN1coEpGArQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;491&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;服务端百万连接达成记&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.4920318725099602&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BBjAFF4hcwoo5ibkEGbrfCkOXicTNTjPGxibQjHJpozOYHaYGiaD3txd4MmGXcDThW96z7oMbH9PlVaaC417GblyKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;502&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;“准备啥呢，还记得前&lt;/span&gt;面&lt;span&gt;说过Linux对最大文件对象数量有限制，所以要想完成这个实验，得在用户级、系统级、进程级等位置把这个上限加大。&lt;/span&gt;&lt;span&gt;我们实验目的是100W，这里都设置成110W，这个很重要！&lt;/span&gt;&lt;span&gt;因为得保证做实验的时候其它基础命令例如ps，vi等是可用的。&lt;/span&gt;&lt;span&gt;“&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.306910569105691&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BBjAFF4hcwoo5ibkEGbrfCkOXicTNTjPGxVHMr5VAUIcFpS1P5bcUnAe9lGkkn8kd6hGAYl5w7h3x7EqV2qt4WDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;492&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8309572301425662&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BBjAFF4hcwoo5ibkEGbrfCkOXicTNTjPGxprMrmcJjPQc142jpJNg0piauyFgqn0ic4lwuK5Na8S7lk3NLENhEOxJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;491&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;活动连接数量确实达到了100W：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ ss -n | grep ESTAB | wc -l  &lt;br/&gt;1000024&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当前机器内存总共是3.9GB，其中内核Slab占用了3.2GB之多。MemFree和Buffers加起来也只剩下100多MB了：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ cat /proc/meminfo&lt;br/&gt;MemTotal:        3922956 kB&lt;br/&gt;MemFree:           96652 kB&lt;br/&gt;MemAvailable:       6448 kB&lt;br/&gt;Buffers:           44396 kB&lt;br/&gt;......&lt;br/&gt;Slab:          3241244KB kB&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;通过slabtop命令可以查看到densty、flip、sock_inode_cache、TCP四个内核对象都分别有100W个：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.36015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BBjAFF4hcwoo5ibkEGbrfCkOXicTNTjPGxuw4Y9XO0IHuzkHBwnCFTSkJRvKYwlwibv1kvMibfPcEBaiaVDekMtXWYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.9654471544715446&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BBjAFF4hcwoo5ibkEGbrfCkOXicTNTjPGxPkdoiaTrf5Sdzq4ibuIIB8mN5YqjlSPR1JLTmcIdss3RJqs7XnvNNmSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;492&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结语&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;互联网后端的业务特点之一就是高并发. 但是一台服务器最大究竟能支持多少个TCP连接，这个问题似乎却又在困惑着很多同学。希望今天过后，你能够将这个问题踩在脚下摩擦！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习是一件痛苦的事情，尤其咱们号里很多读者朋友都是工作满一天了再来看我的技术号的文章的。我一直都在琢磨到底怎么样组织技术内容形式，能让大家理解起来更能省一点脑细胞呢。这篇服务器的最大并发数的文章是早就想发的，但是写了两三个版本都不满意。今天终于想出了一种让大家更容易理解的方式，算过了自己这关了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果您喜欢我的文章、并觉得它有用，期望您能不吝把它转发到你的朋友圈，技术群。或者哪怕是点个赞，点个再看都可以。触达更多的技术同学并收获大家的反馈将极大地提升彦飞的创作动力！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;改天再讲客户端，敬请期待！！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__0&quot;&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2934&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2935&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2936&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2937&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2938&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2939&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2940&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2941&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2942&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2943&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;伟&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2944&quot;&gt;伟&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2945&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2946&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;分&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2947&quot;&gt;分&lt;/span&gt;&lt;span data-raw-text=&quot;割&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2948&quot;&gt;割&lt;/span&gt;&lt;span data-raw-text=&quot;线&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2949&quot;&gt;线&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2950&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2951&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2952&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2953&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2954&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2955&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2956&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2957&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2958&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2959&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2960&quot;&gt;-&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__1&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__2&quot;&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2961&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;H&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2962&quot;&gt;H&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2963&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2964&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2965&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2966&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot;(&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2967&quot;&gt;(&lt;/span&gt;&lt;span data-raw-text=&quot;p&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2968&quot;&gt;p&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2969&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;p&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2970&quot;&gt;p&lt;/span&gt;&lt;span data-raw-text=&quot;f&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2971&quot;&gt;f&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2972&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2973&quot;&gt;m&lt;/span&gt;&lt;span data-raw-text=&quot;i&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2974&quot;&gt;i&lt;/span&gt;&lt;span data-raw-text=&quot;l&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2975&quot;&gt;l&lt;/span&gt;&lt;span data-raw-text=&quot;y&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2976&quot;&gt;y&lt;/span&gt;&lt;span data-raw-text=&quot;)&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2977&quot;&gt;)&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;98&quot; data-index=&quot;2978&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;由&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2979&quot;&gt;由&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2980&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;群&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2981&quot;&gt;群&lt;/span&gt;&lt;span data-raw-text=&quot;靠&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2982&quot;&gt;靠&lt;/span&gt;&lt;span data-raw-text=&quot;谱&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2983&quot;&gt;谱&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2984&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;人&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2985&quot;&gt;人&lt;/span&gt;&lt;span data-raw-text=&quot;建&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2986&quot;&gt;建&lt;/span&gt;&lt;span data-raw-text=&quot;立&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2987&quot;&gt;立&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2988&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;愿&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2989&quot;&gt;愿&lt;/span&gt;&lt;span data-raw-text=&quot;为&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2990&quot;&gt;为&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2991&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;H&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2992&quot;&gt;H&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2993&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2994&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;r&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2995&quot;&gt;r&lt;/span&gt;&lt;span data-raw-text=&quot;带&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2996&quot;&gt;带&lt;/span&gt;&lt;span data-raw-text=&quot;来&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2997&quot;&gt;来&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2998&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;些&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2999&quot;&gt;些&lt;/span&gt;&lt;span data-raw-text=&quot;值&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3000&quot;&gt;值&lt;/span&gt;&lt;span data-raw-text=&quot;得&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3001&quot;&gt;得&lt;/span&gt;&lt;span data-raw-text=&quot;细&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3002&quot;&gt;细&lt;/span&gt;&lt;span data-raw-text=&quot;细&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3003&quot;&gt;细&lt;/span&gt;&lt;span data-raw-text=&quot;品&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3004&quot;&gt;品&lt;/span&gt;&lt;span data-raw-text=&quot;味&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3005&quot;&gt;味&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3006&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;精&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3007&quot;&gt;精&lt;/span&gt;&lt;span data-raw-text=&quot;神&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3008&quot;&gt;神&lt;/span&gt;&lt;span data-raw-text=&quot;食&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3009&quot;&gt;食&lt;/span&gt;&lt;span data-raw-text=&quot;粮&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3010&quot;&gt;粮&lt;/span&gt;&lt;span data-raw-text=&quot;！&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3011&quot;&gt;！&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__3&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__4&quot;&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3012&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3013&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3014&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot;只&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3015&quot;&gt;只&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3016&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;原&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3017&quot;&gt;原&lt;/span&gt;&lt;span data-raw-text=&quot;创&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3018&quot;&gt;创&lt;/span&gt;&lt;span data-raw-text=&quot;或&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3019&quot;&gt;或&lt;/span&gt;&lt;span data-raw-text=&quot;授&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3020&quot;&gt;授&lt;/span&gt;&lt;span data-raw-text=&quot;权&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3021&quot;&gt;权&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3022&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;表&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3023&quot;&gt;表&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3024&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3025&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3026&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3027&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;不&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3028&quot;&gt;不&lt;/span&gt;&lt;span data-raw-text=&quot;转&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3029&quot;&gt;转&lt;/span&gt;&lt;span data-raw-text=&quot;载&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3030&quot;&gt;载&lt;/span&gt;&lt;span data-raw-text=&quot;网&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3031&quot;&gt;网&lt;/span&gt;&lt;span data-raw-text=&quot;上&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3032&quot;&gt;上&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3033&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3034&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3035&quot;&gt;章&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__5&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__6&quot;&gt;&lt;span data-raw-text=&quot;所&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3036&quot;&gt;所&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3037&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3038&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3039&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3040&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3041&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;均&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3042&quot;&gt;均&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3043&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;找&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3044&quot;&gt;找&lt;/span&gt;&lt;span data-raw-text=&quot;到&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3045&quot;&gt;到&lt;/span&gt;&lt;span data-raw-text=&quot;原&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3046&quot;&gt;原&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3047&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;者&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3048&quot;&gt;者&lt;/span&gt;&lt;span data-raw-text=&quot;进&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3049&quot;&gt;进&lt;/span&gt;&lt;span data-raw-text=&quot;行&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3050&quot;&gt;行&lt;/span&gt;&lt;span data-raw-text=&quot;沟&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3051&quot;&gt;沟&lt;/span&gt;&lt;span data-raw-text=&quot;通&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3052&quot;&gt;通&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3053&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__7&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__8&quot;&gt;&lt;span&gt;&lt;span data-raw-text=&quot;也&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3054&quot;&gt;也&lt;/span&gt;&lt;span data-raw-text=&quot;希&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3055&quot;&gt;希&lt;/span&gt;&lt;span data-raw-text=&quot;望&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3056&quot;&gt;望&lt;/span&gt;&lt;span data-raw-text=&quot;各&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3057&quot;&gt;各&lt;/span&gt;&lt;span data-raw-text=&quot;位&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3058&quot;&gt;位&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3059&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3060&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;打&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3061&quot;&gt;打&lt;/span&gt;&lt;span data-raw-text=&quot;赏&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3062&quot;&gt;赏&lt;/span&gt;&lt;span data-raw-text=&quot;（&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3063&quot;&gt;（&lt;/span&gt;&lt;span data-raw-text=&quot;算&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3064&quot;&gt;算&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3065&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3066&quot;&gt;稿&lt;/span&gt;&lt;span data-raw-text=&quot;费&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3067&quot;&gt;费&lt;/span&gt;&lt;span data-raw-text=&quot;给&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3068&quot;&gt;给&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3069&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3070&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3071&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;者&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3072&quot;&gt;者&lt;/span&gt;&lt;span data-raw-text=&quot;）&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3073&quot;&gt;）&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3074&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3075&quot;&gt;更&lt;/span&gt;&lt;span data-raw-text=&quot;希&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3076&quot;&gt;希&lt;/span&gt;&lt;span data-raw-text=&quot;望&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3077&quot;&gt;望&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3078&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;家&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3079&quot;&gt;家&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3080&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3081&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;投&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3082&quot;&gt;投&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;102&quot; data-index=&quot;3083&quot;&gt;稿&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__9&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__10&quot;&gt;&lt;span data-raw-text=&quot;投&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3085&quot;&gt;投&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3086&quot;&gt;稿&lt;/span&gt;&lt;span data-raw-text=&quot;请&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3087&quot;&gt;请&lt;/span&gt;&lt;span data-raw-text=&quot;联&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3088&quot;&gt;联&lt;/span&gt;&lt;span data-raw-text=&quot;系&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3089&quot;&gt;系&lt;/span&gt;&lt;span data-raw-text=&quot;：&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3090&quot;&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__11&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__12&quot;&gt;&lt;span data-raw-text=&quot;s&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3091&quot;&gt;s&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3092&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3093&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;n&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3094&quot;&gt;n&lt;/span&gt;&lt;span data-raw-text=&quot;z&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3095&quot;&gt;z&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3096&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3097&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;1&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3098&quot;&gt;1&lt;/span&gt;&lt;span data-raw-text=&quot;6&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3099&quot;&gt;6&lt;/span&gt;&lt;span data-raw-text=&quot;3&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3100&quot;&gt;3&lt;/span&gt;&lt;span data-raw-text=&quot;@&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3101&quot;&gt;@&lt;/span&gt;&lt;span data-raw-text=&quot;g&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3102&quot;&gt;g&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3103&quot;&gt;m&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3104&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;i&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3105&quot;&gt;i&lt;/span&gt;&lt;span data-raw-text=&quot;l&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3106&quot;&gt;l&lt;/span&gt;&lt;span data-raw-text=&quot;.&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3107&quot;&gt;.&lt;/span&gt;&lt;span data-raw-text=&quot;c&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3108&quot;&gt;c&lt;/span&gt;&lt;span data-raw-text=&quot;o&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3109&quot;&gt;o&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3110&quot;&gt;m&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__13&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__14&quot;&gt;&lt;span data-raw-text=&quot;本&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3111&quot;&gt;本&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3112&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;由&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3113&quot;&gt;由&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3114&quot;&gt;  &lt;span&gt;张彦飞allen&lt;/span&gt; &lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3118&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;授&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3119&quot;&gt;授&lt;/span&gt;&lt;span data-raw-text=&quot;权&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3120&quot;&gt;权&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3121&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3122&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3123&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3124&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3125&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3126&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;布&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3127&quot;&gt;布&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3128&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;转&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3129&quot;&gt;转&lt;/span&gt;&lt;span data-raw-text=&quot;载&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3130&quot;&gt;载&lt;/span&gt;&lt;span data-raw-text=&quot;请&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3131&quot;&gt;请&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3132&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;明&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3133&quot;&gt;明&lt;/span&gt;&lt;span data-raw-text=&quot;本&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3134&quot;&gt;本&lt;/span&gt;&lt;span data-raw-text=&quot;来&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3135&quot;&gt;来&lt;/span&gt;&lt;span data-raw-text=&quot;源&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3136&quot;&gt;源&lt;/span&gt;&lt;span data-raw-text=&quot;信&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3137&quot;&gt;信&lt;/span&gt;&lt;span data-raw-text=&quot;息&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3138&quot;&gt;息&lt;/span&gt;&lt;span data-raw-text=&quot;和&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3139&quot;&gt;和&lt;/span&gt;&lt;span data-raw-text=&quot;以&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3140&quot;&gt;以&lt;/span&gt;&lt;span data-raw-text=&quot;下&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3141&quot;&gt;下&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3142&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;二&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3143&quot;&gt;二&lt;/span&gt;&lt;span data-raw-text=&quot;维&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3144&quot;&gt;维&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3145&quot;&gt;码&lt;/span&gt;&lt;span data-raw-text=&quot;（&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3146&quot;&gt;（&lt;/span&gt;&lt;span data-raw-text=&quot;长&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3147&quot;&gt;长&lt;/span&gt;&lt;span data-raw-text=&quot;按&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3148&quot;&gt;按&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3149&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;识&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3150&quot;&gt;识&lt;/span&gt;&lt;span data-raw-text=&quot;别&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3151&quot;&gt;别&lt;/span&gt;&lt;span data-raw-text=&quot;二&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3152&quot;&gt;二&lt;/span&gt;&lt;span data-raw-text=&quot;维&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3153&quot;&gt;维&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3154&quot;&gt;码&lt;/span&gt;&lt;span data-raw-text=&quot;关&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3155&quot;&gt;关&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3156&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;）&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3157&quot;&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__15&quot;&gt;&lt;span&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/LHDiahSVnXhunbEtuowcI7kF5kmUaeTrszibibQ3st6OU8hy2CoIotHHLxicicibyF1qkNI7HibXYHXGN6hRby4ZyjR6A/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fee87ffa1a3d345d54a6501a9548be6c</guid>
<title>ClickHouse 的实践之路</title>
<link>https://toutiao.io/k/zn7gb6j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.084375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2VY3NksPSaHql4LCOdAUeJwmvS72ibDvaMNiaLQkNZjTFquznHkHcccc2hnKS6nNAx0Y7bSUia0iaUZxQ5N5Zfxldw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;导读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;在数据量日益增长的当下，传统数据库的查询性能已满足不了我们的业务需求。而Clickhouse在OLAP领域的快速崛起引起了我们的注意,于是我们引入Clickhouse并不断优化系统性能，提供高可用集群环境。本文主要讲述如何通过Clickhouse结合大数据生态来定制一套完善的数据分析方案、如何打造完备的运维管理平台以降低维护成本，并结合具体案例说明Clickhouse的实践过程。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Clickhouse简介&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.为什么选择Clickhouse&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;目前企业用户行为日志每天百亿量级，虽然经过数仓的分层以及数据汇总层通用维度指标的预计算，但有些个性化的分析场景还是需要直接编写程序或sql查询，这种情况下hive sql和spark sql的查询性能已无法满足用户需求，我们迫切的需要一个OLAP引擎来支持快速的即席查询。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;BI存储库主要采用的是Infobright，在千万量级能很快的响应BI的查询请求，但随着时间推移和业务的发展，Infobright的并发量与查询瓶颈日益凸显，我们尝试将大数据量级的表导入TiDB、Hbase、ES等存储库，虽然对查询有一定的提速，但是也存在着相应的问题（后续章节会详细介绍），这时我们考虑到Clickhouse。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Clickhouse社区活跃度高、版本迭代非常快,几乎几天到十几天更新一个小版本，我们非常看好它以后的发展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.Clickhouse特性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Clickhouse是俄罗斯yandex公司于2016年开源的一个列式数据库管理系统，在OLAP领域像一匹黑马一样，以其超高的性能受到业界的青睐。&lt;br/&gt;&lt;strong&gt;特性：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;不足：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Clickhouse建设&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1.整体架构&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5314136125654451&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KkgRqkogqtnfufq4xjjkgiaqG0FwcckxHhZPD6XGINeBJxw0wx4ibREPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1910&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们依据数据的流向将Clickhouse的应用架构划分为4个层级。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;数据接入层&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;提供了数据导入相关的服务及功能，按照数据的量级和特性我们抽象出三种Clickhouse导入数据的方式。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;方式一：数仓应用层小表导入&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;这类数据量级相对较小，且分布在不同的数据源如hdfs、es、hbase等，这时我们提供基于DataX自研的TaskPlus数据流转+调度平台导入数据，单分区数据无并发写入，多分区数据小并发写入，且能和线上任务形成依赖关系，确保导入程序的可靠性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;方式二：离线多维明细宽表导入&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;这类数据一般是汇总层的明细数据或者是用户基于Hadoop生产的大量级数据，我们基于Spark开发了一个导入工具包，用户可以根据配置直接拉取hdfs或者hive上的数据到clickhouse，同时还能基于配置sql对数据进行ETL处理，工具包会根据配置集群的节点数以及Clickhouse集群负载情况(merges、processes)对local表进行高并发的写入，达到快速导数的目的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;方式三：实时多维明细宽表导入&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;实时数据接入场景比较固定，我们封装了通用的ClickhouseSink，将app、pc、m三端每日百亿级的数据通过Flink接入clickhouse，ClickhouseSink也提供了batchSize(单次导入数据量)及batchTime(单次导入时间间隔)供用户选择。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;数据存储层&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据存储层这里我们采用双副本机制来保证数据的高可靠，同时用nginx代理clickhouse集群，通过域名的方式进行读写操作，实现了数据均衡及高可靠写入，且对于域名的响应时间及流量有对应的实时监控，一旦响应速度出现波动或异常我们能在第一时间收到报警通知。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;nginx_one_replication：代理集群一半节点即一个完整副本，常用于写操作，在每次提交数据时由nginx均衡路由到对应的shard表，当某一个节点出现异常导致写入失败时，nginx会暂时剔除异常节点并报警，然后另选一台节点重新写入。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;nginx_two_replication：代理集群所有节点，一般用作查询和无副本表数据写入，同时也会有对于异常节点的剔除和报警机制。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;数据服务层&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对外：将集群查询统一封装为scf服务(RPC)，供外部调用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对内：提供了客户端工具直接供分析师及开发人员使用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;数据应用层&lt;/span&gt;&lt;/h3&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;埋点系统：对接实时clickhouse集群，提供秒级别的OLAP查询功能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;用户分析平台：通过标签筛选的方式，从用户访问总集合中根据特定的用户行为捕获所需用户集。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;BI：提供数据应用层的可视化展示，对接单分片多副本Clickhouse集群，可横向扩展。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Clickhouse运维管理平台&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在Clickhouse的使用过程中我们对常见的运维操作如：增删节点、用户管理、版本升降级等封装了一系列的指令脚本,再结合业务同学使用过程中的一些诉求开发了Clickhouse管理平台,该平台集管理、运维、监控为一体，旨在让用户更方便、快捷的使用Clickhouse服务，降低运维成本，提高工作效率。&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KkiaJDIxicl79IbwmwvnibcmvWE2yLKh3v7wwcjeI38JzJEWT0WEgmzrPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;配置文件结构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;在自动化运维操作时会经常修改配置文件，而clickhouse大部分参数都是支持热修改的，为了降低修改配置的带来的风险和便于维护管理，我们将默认的配置文件做了如下拆解。&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.6029673590504451&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4K0tNjg8y0D3zgMkuxL4NSlKOY13ib8qrL8yleYQb2bbXjZlwdkKEDYoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1685&quot;/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;users.xml&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;默认的users.xml可分为三个部分&lt;br/&gt;用户设置users：主要配置用户信息如账号、密码、访问ip等及对应的权限映射&lt;br/&gt;配额设置quotas：用于追踪和限制用户一段时间内的资源使用&lt;br/&gt;参数权限profiles：读写权限、内存、线程等大多数参数配置&lt;br/&gt;为了统一管理权限我们在users.xml预定义了对应权限及资源的quotas及profiles，例如default_profile、readwrite_profile、readonly_profile等,新增用户无需单独配置quotas及profiles,直接关联预定义好的配置即可&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;users.d/xxx.xml&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;按不同的用户属性设置user配置，每一个xml对应一组用户,每个用户关联users.xml中的不同权限quotas及profiles&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;users_copy/xxx.xml&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;每次有变更用户操作时备份指定属性的xml，方便回滚&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;metrika.xml&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;默认情况下包含集群的配置、zookeeper的配置、macros的配置,当有集群节点变动时通常需要将修改后的配置文件同步整个集群,而macros是每个服务器独有的配置,如果不拆解很容易造成配置覆盖,引起macros混乱丢失数据,所以我们在metrika.xml中只保留每台服务器通用的配置信息,而将独立的配置拆解出去&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;conf.d/xxx.xml&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;保存每台服务器独立的配置,如macros.xml&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;config_copy/xxx.xml&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;存放每次修改主配置时的备份文件，方便回滚&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;元数据管理&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;维护各个Clickhosue集群的元数据信息，包含表的元数据信息及Clickhouse服务状态信息，给用户更直观的元数据管理体验，主要有如下功能：&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;查询指定集群和库表信息，同时展示该表的状态：只读 or 读写。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;查看表的元数据信息 行数、磁盘占用、原始大小、更新时间、分区信息等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;设定数据生命周期，基于分区数对数据进行清理操作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KjfQY88udOnMQ4e03GdrwqugvmvxgNx1cKV7wdOo7vaN8SVFhOddh0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;自动化运维&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;由于我们基于nginx代理的方式对Clickhouse进行均衡读写，同时Clickhouse的配置也是可以热修改的，所以在用户管理及资源控制方面我们直接通过web平台对Clickhosue配置文件进行修改操作。&lt;br/&gt;通过web平台展示users.xml中对应权限的profiles 和 quotas，运维人员只需根据用户属性选择对应的配置填写对应的用户名及自动生成的密文密码即可，不会影响已配置好的权限及资源，同时每次xml操作都会提前备份文件，在xml修改异常时可随时回滚。&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KCWiaC3wREOpic9wqAibKCPntbeZWianmy1bWyibsrwtdqoTsiczXItPWqhKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;clickhosue管理平台的核心模块，依托于运维作业平台 API封装了一系列的运维脚本，覆盖了集群管理的常用操作。&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;clickhouse服务的启动、停止、重启&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;clickhouse的安装、卸载、故障节点替换&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;升级/降级指定Clickhouse版本&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;动态上下线指定节点&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;元数据维护 (cluster_name、metrik、macros)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KtZVVAOvkeaMJS2ZwjJzUIAgNLWkuheicCagIicrCeX94icXp0Z101H1fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;这里以新增节点为例展示整体的流程操作：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6261343012704175&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KR01oINR9vwRwLvdnZA3INIYaO8jMasgTKtwE1njpGd2818w57a87RQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1653&quot;/&gt;&lt;br/&gt;&lt;span&gt;其中，较为核心的操作在于install作业的分发及对应的配置生成。&lt;br/&gt;&lt;span&gt;分发install作业&lt;/span&gt;：由Clickhouse平台调用运维作业平台服务将预定义的脚本分发到指定节点执行，同时传入用户选填的配置参数。&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KHsZLexBoxjG3xrR66DVGbib2h8QK74dG7hLjbYG9vmIQrz62L0oGMFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;生成配置文件&lt;/span&gt;：通常情况下我们会在一个物理集群分别建立单副本集群和双副本集群，在为新节点生成配置文件时由clickhouse平台从元数据模块获取到新增节点的集群信息，动态生成新增节点的macros与metrika配置，然后将metrika.xml同步到所有集群。&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.5959158415841584&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4Kk3x7AbyOzdx4YhWcq9g01nZCsibOYwPc6sibZyzmicWAPtticCH0u1aOKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1616&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;监控与报警&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;硬件指标监控&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;硬件指标监控主要指clickhouse服务节点的负载、内存、磁盘IO、网卡流量等，这里我们依托于monitor监控平台来配置各种指标，当监控指标达到一定阈值后触发报警。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;集群指标监控&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;我们在Clickhouse管理平台中集成了grafana，采用Prometheus采集clickhosue集群信息在grafana做展现，一般的监控指标有top排名(慢查询、内存占用、查询失败 )、QPS、读写压力、HTTP&amp;amp;TCP连接数、zookeeper状态等，当这些指标出现异常时通过alertmanager插件配置的规则触发报警。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KibHvnp72iaNAog9Q29sUPia0RbBaSFQumaokuG377jl2DhZnMq3WcaAkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;流量指标监控&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;目前所有对于clickhouse的读写请求都是通过域名代理的方式，通过域名的各项指标能精准且实时的反映出用户最原始的读写请求，当域名响应时间波动较大或者响应失败时我们能在第一时间收到报警并查看原始请求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Clickhouse应用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;1. BI查询引擎&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;在未接入Clickhouse之前，BI的存储库有Infobright、Hbase、ES、druid等，其中主要使用的是Infobright，在千万级别以下Infobright性能出色，对于一些时间跨度较长、数据量级较大的表Infobright就有些无能为力，这种数据我们通常会存放在ES与Hbase中，这样虽然加快了查询速度但是也增大了系统适配不同数据源的复杂度，同时分析师会有直接操作表的诉求，数据存入ES与Hbase会增加对应的学习成本，基于此我们的核心诉求就是：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;(1) 大数据量级下高查询性能;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(2) BI适配成本低;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(3)支持sql简单易用。&lt;/span&gt;&lt;/p&gt;&lt;h3/&gt;&lt;p&gt;&lt;span&gt;基于以上诉求我们拿现有的Infobright与TiDB、Doris、Clickhouse做了如下对比。&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;功能点&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Infobright&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;TiDB&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Doris&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Clickhouse&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;BI适配成本&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;-&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;低&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;低&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;中&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;学习使用成本&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;-&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;低&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;低&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;低&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;百万级查询(100w)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;84ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;24ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;25ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;41ms&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;千万级查询(1000w)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;1330ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;332ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;130ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;71ms&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;亿级别查询(1.1亿)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;57000ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;16151ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;3200ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;401ms&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;span&gt;总体来看Clickhouse的查询性能略高于Doris，而TiDB在千万量级以上性能下降明显，且对于大数据量级下Clickhouse相比Infobright性能提升巨大，所以最终我们选择了Clikhouse作为BI的存储查询引擎。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2. 集群构建&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在评估了目前Infobright中的数据量级和Clickhouse的并发限制之后，我们决定使用单分片 多副本的方式来构建Clickhouse集群，理由如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;BI对接数仓应用层数据，总体来说量级较小，同时clickhouse有着高效的数据压缩比，采用单节点能存储当前BI的全量数据，且能满足未来几年的数据存储需求。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Clickhouse默认并发数为100，采用单分片每个节点都拥有全量数据，当qps过高时可横向增加节点来增大并发数。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;clickhouse对Distributed 表的join支持较差，单分片不走网络，能提高join查询速度。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;服务器配置：CPU：16 × 2 cores、内存：192GB、磁盘：21TB,整体的架构图如下所示：&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.4496042216358839&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KsWpZYMnibCjN6LC8w0q3ziamSSzz65XCpU6FK8xZ7tjemcIlPOqRakkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1895&quot;/&gt;&lt;br/&gt;&lt;span&gt;在写数据时由taskplus对其中的一台节点写入，如果该节点异常可切换到其他副本节点写入，由写入副本自动同步其他副本。&lt;br/&gt;查询同样用nginx代理三台节点，由于是单分片集群所以查询视图表和本地表效果是一样的，不过视图表会自动路由健康副本，所以这里还是选择查询视图表。&lt;br/&gt;在通过Taskplus将BI的数据源切换到Clickhouse后对于大量级查询性能提升明显。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;tp99由1184ms变为739ms&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;大于1秒的查询总量日均减少4.5倍&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;大于1秒的查询总耗时日均降低6.5倍&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;img data-ratio=&quot;0.18729955099422707&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KdibyVCC7ictCuiacibCw7FBNREPKO3saJmiaXenka5maZ53IiaLib8FY9Riceg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1559&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3. 问题及优化&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在接入clickhouse之前BI的平均响应时间为187.93ms，接入clickhouse之后BI的平均响应时间为84.58ms，整体响应速度提升了2.2倍，虽然查询速度有所提升但是我们在clickhouse监控日报邮件中仍发现了一些慢查询，究其原因是我们对于应用层的表默认都是以日期字段stat_date分区，而有一部分表数据量级非常小且分区较多如某产品留存表总数据量：5564行，按日期分区 851个分区，平均每天6.5条数据，以下是针对于该表执行的常规group by count查询统计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;功能点&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;ck日期分区(冷查询)&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;ck 日期分区(热查询)&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;ck 无分区(热查询)&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Infobright&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;query&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;12000ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;220ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;16ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;8ms&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由此可见Clickhouse对于多分区的select的查询性能很差，官方文档中也有对应的表述：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;gt; A merge only works for data parts that have the same value for the partitioning expression. This means you shouldn’t make overly granular partitions (more than about a thousand partitions). Otherwise， the SELECT query performs poorly because of an unreasonably large number of files in the file system and open file descriptors&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;针对于这种场景我们想直接创建月或年维度的分区，但是对于增量数据会存在重跑历史等问题，而delete或ReplacingMergeTree都可能造成的数据查询不一致情况，基于此我们在mysql中做了一个中间表，每次增量导入或修改mysql表然后全量更新至clickhouse，不设置分区或不以日期为分区，保证查询的效率和一致性，经过多分区小量级表的优化之后我们的平均响应时间变为到70.66ms，相比未优化前查询性能提升了16%，最终BI的查询响应时间对比如下图所示：&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.5991649269311065&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KV7fydXeSHG935469yEcdfNZZ3vHNYx8kBKYzOOu6cDuicl2wXBJEiaaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;479&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;实时数仓&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1.分层架构&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;由于每日用户行为数据量级已达百亿，传统的离线分析已不能满足业务方的需求，因此我们基于三端数据构建了实时数仓，整体分层架构如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.4881101376720901&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KDZlDDN4Cm1XpgtXLdgaSSh2jBHToVGcYIyTxenxFk8rLEmZ3lfP21w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1598&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;clickhouse在其中扮演的角色是秒级别的实时OLAP查询引擎，当我们DWS层的通用维度实时指标不满足用户需求时，用户可以直接通过Clickhouse编写sql查询实时数据，大大降低了实时数据查询门槛。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2.数据输入与输出&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6143667296786389&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KLo3iaFDoIZiaeicuzia4L9Y7libSAehDoE7OYRyPco2S6hq701vYYVx0icgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1587&quot;/&gt;&lt;br/&gt;&lt;span&gt;在数据输入层面我们将用户的行为数据实时关联维表写入kafka，然后由Flink + JDBC写入Clickhouse，为了保证实时查询的稳定性我们采用了双副本结构，用nginx代理其中一个完整的副本，直接对域名写入.同时在程序中增加失败重试机制，当有节点不可写入时，会尝试向其他分片写入，保证了每条数据都能被写入clickhouse。&lt;br/&gt;在数据的输出层面将同样由nginx代理整个集群，对接到客户端工具及与SCF服务，其中客户端工具对接到开发人员及分析师，scf对外提供查询服务。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3.数据产品&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;埋点系统是我们专为埋点管理开发的系统其主要功能有：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;埋点报备及校验：新上线埋点的收录及校验；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;需求管理：针对于新埋点上线及埋点变更的需求周期监控及状态追踪；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;埋点多维分析：基于用户上报埋点进行多维汇总，方便用户下钻分析定位问题；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;指标及看板：有单个或多个埋点按一定规则组合进行多维汇总，可直接在看板中配置对应的统计结果数据；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;埋点测试：实时收集测试埋点数并进行格式化校验及解析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KGBwfULKqHgSmj9ibAib1Riaeib8T0aKGcZicia1Ficx1xVqxhH7PHMDBvhBsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;在未接入Clickhouse前埋线系统采用MR预计算汇总用户配置的埋点指标，并将结果数据写入Hbase，预计算针对于用户侧来说查询的都是结果数据，响应速度非常快，但是同时也带来一些问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;接入对比&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;时效性&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;时间维度&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;计算方式&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;扩展性&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;未接入clickhouse&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;T+1&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;天级&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;mr预计算&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;低&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;接入clickhouse&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;秒级&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;分钟级&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;实时计算&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;高&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.35260416666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KxTtUQjFfy9GCcT9baJe1XJbxicicHPticZDMLDBYZG66rX9nJ19l10xMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;常见问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;数据写入&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一个batch内不要写多个分区的数据；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;根据服务器配置适当增大background_pool_size，提高merge线程的数量 默认值16；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对于system.merges、system.processes表做好监控，可随时感知写入压力情况作出预警，避免服务崩溃；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;索引不宜建立过多，对于大数据量高并发的写入可以考虑先做数据编排按建表索引排序在写入，减少merge压力；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;禁止对Distributed表写入，可通过代理方式如nginx或chproxy直接对local表写入，而且能基于配置实现均衡写入及动态上下线节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&quot;2&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;JOIN操作&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;无论什么join小表必须放在右边，可以用left、right调整join方式；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;开启谓词下推：enable_optimize_predicate_expression=1(部分版本默认关闭)；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;大量降低数据量的操作如where、group by、distinct操作优先在join之前做(需根据降低比例评估)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;常用参数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;max_execution_time 单次查询的最大时间：600s；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;max_memory_usage 单服务器单次查询使用的最大内存，设置总体内存的50%；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;max_bytes_before_external_group_by 启动外部存储 max_memory_usage/2；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;max_memory_usage_for_all_queries 单服务器所有查询使用的最大内存，设置总体内存的80%-90%，防止因clickhouse服务占用过大资源导致服务器假死。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结与展望&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;目前Clickhouse主要应用于数据产品、画像、BI等方向，日更新百亿数据，每日百万量级查询请求，持续对外提供高效的查询服务，我们未来将在以下两个方面加强Clickhouse的建设：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1.完善Clickhouse管理平台保障Clickhouse服务的稳定性：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;目前在删除节点时会启动一个Rebalance脚本将被删除节点上的数据重新写入其他节点,在此过程中会造成数据查询不一致的问题,我们希望能提供更高效无感的Rebalance操作方案&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;更精细化的权限控制及管理,目前最新版本中已有此实现(Role及Privileges),后续我们将尝试使用该功能并适配到Clickhouse管理平台&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;实时数据写入Clickhouse的一致性保证&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2.优化Clickhouse性能,拓展Clickhouse使用场景：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Clickhouse在千亿级数据场景下复杂查询优化&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;埋点系统基于Clickhouse统计模型拓展如访问路径、间隔、分布等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;参考文献：&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Clickhouse官网&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;作者简介：&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;杨迪，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;58同城分析与决策支持部数据高级开发工程师&lt;br/&gt;&lt;strong&gt;杨琛，&lt;/strong&gt;58同城分析与决策支持部数据高级开发工程师&lt;br/&gt;&lt;strong&gt;曹德嵩，&lt;/strong&gt;58同城分析与决策支持部数据资深开发工程师&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;福利环节&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt; 为了鼓励优质内容传播，【58技术】公众号近期会持续推出不定期活动奖励。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;欢迎在评论区留言，关于#我眼中的大数据#话题，将由作者本人在评论里抽取五名读者，送出58技术独家定制版代码台历~&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;活动时间：截至2020年12月18日。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;上期活动已在当日文章评论区开奖，欢迎各位评论区关注。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.4481481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KB9KksiayQoPejSlnhaL7CkunIkF0bTTkwJPo2ia6S4iaHAZqDiaJiaCwRhQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.35546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2VY3NksPSaHql4LCOdAUeJwmvS72ibDva6YTC5lzpo8tfzSSeQuxRfxPibP3ybyWlpt9d4VxXd8hO5GiaJdMhba5Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c358937121cb6a5a2d0b454628e947fc</guid>
<title>来和大家聊聊我是如何刷题的（第二弹）</title>
<link>https://toutiao.io/k/fs8tmfw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上一篇的地址在这里，没有看过的同学建议先看第一篇 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&amp;amp;mid=2247485940&amp;amp;idx=1&amp;amp;sn=ee088ae75ad43015ff91daf09b7b0a69&amp;amp;chksm=eb88c5eddcff4cfb0a1bc9afc51f2f4ac0c56ae5cb5a22723f2ef5e019fc86c6e6766df94d84&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;来和大家聊聊我是如何刷题的（第一弹）&lt;/a&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这次继续给大家聊聊怎么刷题， 预计分几篇文章来写，今天是第二篇，本系列至少会出三篇。这次分享的内容是&lt;strong&gt;「代码书写技巧」&lt;/strong&gt;以及&lt;strong&gt;「调试技巧」&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;本系列旨在分享一些所有题目都适用的技巧以及一些刷题经验，帮助大家高效刷题。如果想重点突破某一类题目，可以关注我的专题系列。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;话不多说，直接上干货。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;先刷什么？刷多少？&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正式介绍技巧之前先回答一个问题，这也是我被问的比较多的两个问题是：&lt;strong&gt;「我该先刷什么算法？每一种算法我该刷多少？」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在我们就来看下这个问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先贴一个 &lt;strong&gt;「91 天学算法」&lt;/strong&gt; 中某一小节的讲义中的一部分内容：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;递归（10）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;BFS &amp;amp; DFS（20）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;双指针（20）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;滑动窗口（6）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;哈希表（20）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;回溯（5）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;动态规划（20）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;排序（3）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分治（20）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;堆（3）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;贪心（5）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设计题（5）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图（5）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;位运算（5）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;并查集（3）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你不知道从何刷起，可以参考我的这个刷题顺序，其中括号是我推荐的最小刷题量，就是说再少不能少于这个数字。如果你想多刷，可以按照我的这个比例去刷。等到你自己有个概念，知道自己哪里薄弱了，再去针对加强即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体题目太多了不列举了，给大家几个题目集合做参考：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;🔥 热题 HOT 100&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;👨‍💻 精选 TOP 面试题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;企业题库。比如 🐧 腾讯精选练习 50 题，企业题库 - 字节跳动（当你就想去某一家公司的时候可以用）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;剑指 Offer&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;网友内幕（主要是面经）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;力扣的探索和标签&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;知道该刷什么，以及刷多少了，可能你已经迫不及待投入题海了。不要着急，可以先看下西法有没有写过相关专题，如果写过， 强烈建议你先看下，一定能让你事半功倍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我已经开始刷专题了，有没有什么通用的技巧呢？答案是有，而且很多。本文只介绍一部分， 后续我们继续这个话题，给大家带来更多干货技巧。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;代码书写技巧&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码书写技巧，这次给大家带来三个技巧：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;改参数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;zip 函数的妙用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;关于取模&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;改参数&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;力扣的参数是可以改名字的，如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.27638572513287774&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7Zicj2owYDiaOtWpdC1GlKiahIeT4VRbflbs56mf2sKBEemLA7uQHHzPicw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1317&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可以将名字改成一个短的或者你熟悉的。比如上面这道题，我写的时候就可以：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;findMedianSortedArrays&lt;/span&gt;&lt;span&gt;(self, A: List[int], B: List[int])&lt;/span&gt; -&amp;gt; float:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# can use A and B now&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这可以使得代码看起来&lt;strong&gt;「简洁」&lt;/strong&gt;且具有&lt;strong&gt;「一致性」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经常看我题解的小伙伴应该注意到我的代码比较简洁。一方面是因为我经常用 Python，另一方面就是因为这个技巧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我顺便吐槽一下力扣。力扣的形参命名相当不规范。比如二维数组有时候是 mat，有时候是 nums，有时候是 matrix，有时候又是 grid 。。。真心不舒服，不过有了这个技巧，大家就不要依赖官方了，自己统一一下就好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就拿我来说，二维数组我就用 mat 或者 matrix，一维数组用 nums 或者 A 或者 A 和 B（两个一维数组的情况）。比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# A 和  B 是两个一维的数组&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;&lt;span&gt;(A, B)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; a &lt;span&gt;in&lt;/span&gt; A:&lt;br/&gt;        &lt;span&gt;# do something&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; b &lt;span&gt;in&lt;/span&gt; B:&lt;br/&gt;        &lt;span&gt;# do something else&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实不仅仅是形参的命名要统一，我们内部的代码也是一样的。对于我来说：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;堆我习惯叫 h&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图我习惯叫 graph&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;队列我习惯叫 q&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;。。。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家没有必要和我一样，但是一定要保持一致性，这样可以显著增加代码可读性，可读性高了，调试工作也会变得轻松。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;zip 函数的妙用&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;力扣有一些题目会给你两个或者三个一维数组，这两个一维数组的是有关联的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如给你两个一维数组 A 和 B，其中 A[i] 表示第 i 个人的体重，B[i] 表示第 i 个人的身高。也就是说都是表示第 i 个人，但是表示的东西不一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实逻辑上就相当于结构体，而且如下结构体的形式在工作中更常见。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;interface&lt;/span&gt; Person {&lt;br/&gt;  weight: &lt;span&gt;number&lt;/span&gt;;&lt;br/&gt;  height: &lt;span&gt;number&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是力扣以两个数组的形式给你了，其实这样不难啊，不就是用一个索引记录么？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i= &lt;span&gt;0&lt;/span&gt;;i&amp;lt;A.length;i++) {&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; weight = A[i]&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; height = B[i]&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是如果我需要对重量排序呢？如果你仅仅对 A 排序了，B 也需要进行相应调整的，否则对应关系就乱了。那遇到这样的情况该怎么办呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里介绍一个我经常使用的技巧 &lt;strong&gt;「zip」&lt;/strong&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    zipped = zip(A, B)&lt;br/&gt;    &lt;span&gt;# 下面我对其进行排序也不会改变相对顺序&lt;/span&gt;&lt;br/&gt;    zipped.sort()&lt;br/&gt;    &lt;span&gt;# 比如 A 是 [1,2,3] B 是 [4,5,6]&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 那么 zipped 就是 [[1,4], [2,5], [3,6]]&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 那么 zipped[i][0] 就是第 i 个人的体重，zippd[i][1] 就是第 i 个人的身高&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 A 和 B “捆绑”到一起了，因此排序也不会改变其相对顺序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下是我在力扣 1383 题中使用 zip 技巧的例子：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.37389380530973454&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7KCDxZJzKFEPEYXaLicZJcP2xx7wm7VP90decoP1ba7X4q9qhzSQo5KA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1356&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外 zip 还有一些其他用处。比如我想要获取当前数组位置的前一项。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不用 zip 可以这么做：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, len(A)):&lt;br/&gt;    pre = A[i - &lt;span&gt;1&lt;/span&gt;]&lt;br/&gt;    cur = A[i]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果使用 zip 可以这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; pre, cur &lt;span&gt;in&lt;/span&gt; zip(A, A[&lt;span&gt;1&lt;/span&gt;:]):&lt;br/&gt;    &lt;span&gt;# do something&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的原理也很简单。我举个例子你就懂了。比如有一个数组 A ：[1,2,3,4]。那么 A[1:] 就是 [2,3,4]&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我将如上两个数组 zip 起来就是 [[1,2], [2,3], [3,4]]，所以我对 zip 之后的结果进行遍历就可以方便地写代码了。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;这个技巧用处不大，可以不必掌握，大家知道有这么回事就行&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有的人可能想问，我的语言没有 zip 怎么办？我的答案是自行实现 zip。比如 JavaScript 可以这样实现 zip：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; zip = &lt;span&gt;(&lt;span&gt;rows&lt;/span&gt;) =&amp;gt;&lt;/span&gt; rows[&lt;span&gt;0&lt;/span&gt;].map(&lt;span&gt;(&lt;span&gt;_, c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; rows.map(&lt;span&gt;(&lt;span&gt;row&lt;/span&gt;) =&amp;gt;&lt;/span&gt; row[c]));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你把它改造成自己的语言版本即可。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;关于取模&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;力扣中有很多题目需要你对返回值取模，而且一般都是对 109 + 7 取模。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;题目答案让取模那肯定是答案太大了，为啥太大了呢？有啥想法没？&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如 1680. 连接连续二进制数字&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;题目描述：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;给你一个整数 n ，请你将 1 到 n 的二进制表示连接起来，并返回连接结果对应的 十进制 数字对 109 + 7 取余的结果。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我忘记取模或者仅在返回的时候取模都可能会报错，正确的姿势是提前取模。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上面的题目来说，代码这样写是可以过的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;concatenatedBinary&lt;/span&gt;&lt;span&gt;(self, n: int)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;        ans = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;        mod = &lt;span&gt;10&lt;/span&gt; **&lt;span&gt;9&lt;/span&gt; + &lt;span&gt;7&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, n + &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;            ans = (ans * pow(&lt;span&gt;2&lt;/span&gt;, len(bin(i)[&lt;span&gt;2&lt;/span&gt;:])) + i) % mod&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; ans % mod&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而如果我这么写会超时(没有提前取模，只是在最后返回才取模)：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;concatenatedBinary&lt;/span&gt;&lt;span&gt;(self, n: int)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;        ans = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;        mod = &lt;span&gt;10&lt;/span&gt; **&lt;span&gt;9&lt;/span&gt; + &lt;span&gt;7&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, n + &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;            ans = (ans * pow(&lt;span&gt;2&lt;/span&gt;, len(bin(i)[&lt;span&gt;2&lt;/span&gt;:])) + i)&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; ans % mod&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不提前 mod， python 可能超时，其他语言可能溢出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提前取 mod，会把数值限定在 int 能处理的范围，使用机器自身整数运算功能进行快速运算，而如果之后取 mod，由于 python 对大整数支持的特性，会将 ans 转换为大整数再进行运算，计算相对耗时。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说到溢出，我想起来一个小技巧，那就是二分取中间值的时候如果书写不当也可能溢出。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 如下代码，如果 l 和 r 比较大，则可能发生大数溢出&lt;/span&gt;&lt;br/&gt;mid = (l + r) // &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;这里的 // 是地板除&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决的方案也很简单，这样写就行了：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;mid = (r - l) // 2 + l&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外一个和取模有关的小技巧是&lt;strong&gt;「判断奇偶」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;判断一个数是奇数还是偶数可以通过和 2 取模。如果返回值是 0 则是偶数，否则是奇数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是和 2 取模为 1 奇数，但是反之不然。即&lt;strong&gt;「和 2 取模不是 1 也可能是奇数，比如负数」&lt;/strong&gt;，因此还需要多个判断，不如用我上面的方法，即&lt;strong&gt;「和 2 取模判断是否等于 0」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎大家补充其他小技巧~&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;其他技巧&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里有一个要和大家强调的点，很多刚刷题的人都不知道，那就是尽量不要使用全局变量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果使用全局变量且没有及时清除，不仅可能有性能问题，更可能会在&lt;strong&gt;「多个测试用例之间形成干扰，导致出错」&lt;/strong&gt;。而且在力扣设计题目通常是会多次调用某一个 api 的。这个时候更是如此，所以不要使用全局变量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一些朋友向我反馈“为啥本地好好的，放到力扣上提交就不行”，请先检查下有没有使用全局变量。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;调试技巧&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调试技巧，我们这里先讲两个：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;批量测试&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据结构可视化（树的可视化）&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;批量测试&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;力扣的测试用例其实是可以一次写多个的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8387799564270153&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7H2TF9r1WBgvGrP6Z0QV0SW7QBg58BwBq5MLEvnZxp6QX3x9iaNvJtNQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;918&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图，该题目有两个参数。那两行其实就是&lt;strong&gt;「一个完整用例」&lt;/strong&gt;。我这里输入了六行，也就是三个用例。这个时候点击执行，就可以一次执行三个用例。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;妈妈再也不用担心我提交太频繁啦~&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行成功后，我们可以一次查看所有的差异。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.20520028109627547&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7lS8OkA44zsVicvLvcMYvWGWqGGXBbUFvkmpZicchss1oCWoG5XxD9xqA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1423&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你老是考虑不到各种边界，那这个功能简直是福音。另外如果你打比赛，你可以把题目给的测试用例批量复制到这里一次执行看结果，非常有用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了方便大家复制所有题目内置的测试用例，我的&lt;strong&gt;「刷题插件 leetcode-cheatsheet」&lt;/strong&gt;增加了一个功能&lt;strong&gt;「一键复制所有的内置用例」&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5294778214486243&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7PH4T0MELiaerX0VhEF1P9u6uP8zFCbtXcVbunrEbISv4icQH76NJlJRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3562&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正常情况，下点击之后会提示你复制成功，你只需要 ctrl + v 粘贴到&lt;strong&gt;「测试用例」&lt;/strong&gt;的输入框即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是力扣网站有很多不是很统一的地方，这就需要我不断进行兼容。比如如下兼容代码：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9890829694323144&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7F0tcVxGjDicc8JicbwxibJLCUPbqBAR1Jvlfr9utuwKre2Tr8XYRsDGtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;916&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;上面代码指的是力扣测试用例的 html 标签是不定的，并且有时候是”输入：“（注意是中文的：），有时候又是”输入:“（注意是英文的:）。&lt;/span&gt;因此难免有我无法兼容的情况。因此就会发生类似这样的情况：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.43302622253720763&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7fZluVt9xcribuzWaHxRUtibxE9lmx8asYmzQukfCVLt8E3L1jphGzhKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2822&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;遇到这样的情况，你可以点击弹出信息的反馈文字，给我反馈。不过据我的测试，大部分情况是没问题的。&lt;/p&gt;&lt;p&gt;插件目前已经发布到谷歌商店了，通过谷歌商店安装的朋友审核通过后会自动更新。离线安装的朋友需要手动安装，不过我的更新蛮频繁的，强烈建议在线安装。商店地址：https://chrome.google.com/webstore/detail/leetcode-cheatsheet/fniccleejlofifaakbgppmbbcdfjonle?hl=en-US&lt;/p&gt;&lt;p&gt;上线几天已经有 100 多人安装了， 你确定不试试么？&lt;/p&gt;&lt;figure&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7vrfOQIEIVdwY45dHpF1LwDIZpYTGbiabCujcibFicucDVOEfm1g8fj2HA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.7092592592592593&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;树的可视化&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;力扣支持大家对树进行可视化，只要点击这个&lt;strong&gt;「树结构可视化按钮」&lt;/strong&gt;即可（只有树的题目才有这个按钮）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7QdeIDlibXckCXiboFaINms0efKtCLOuYYicz2GCj6A75NbvxpmVexh41g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1445&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你写了多个数组，也并不会生成多个树，貌似是以最后一次输入为准。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;力扣暂时没有提供其他数据结构的可视化，比如数组，链表等。这可能对大部分人来说没什么，但是对于我这样经常写题解，画图的人就不一样了。如果可以快速画图，那么对我效率肯定有大幅度的提升。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;lucifer 建议大家也养成写题解的好习惯。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此我打算在我的刷题插件里面加其他数据结构的可视化功能， 已经在规划啦~ 现在草稿了一些东西。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如这样的树：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6984&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7zLcNnxUQwumwXbfWSZLOiaJqFCzyTKBXfNPXhEO4iaic8p4Z9848nCf1A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1250&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和这样的树：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4069627851140456&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7WibFVfzV1eFPATd6iaQVibvyAn3lRf4uyA54iaYvQcwf9J68EKPa4q8oQw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;833&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在其实还有些问题，而且我想&lt;strong&gt;「多加几种数据结构」&lt;/strong&gt;方便写题解，所以就之后再说好了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;本地调试技巧&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以通过按照编辑器插件在本地编辑器中写代码，然后通过编辑器插件将其提交到力扣即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样你在本地的调试插件都可以用于算法调试了。这里推荐两个可视化调试插件：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5431952662721894&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7f2QS1ialj8R8ktaHAcXyAx89znXKWkibebMWDibt4JVLHJ3oJVb2hxbyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1690&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7339667458432304&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7OntLYvS3gnicXPrtekwTss4Myiaa4Uj8ia0qxOGyMHcl0vMlJUlgctGCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1684&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;推荐一个网站&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OI Wiki 致力于成为一个免费开放且持续更新的 编程竞赛 (competitive programming) 知识整合站点，大家可以在这里获取与竞赛相关的、有趣又实用的知识。我们为大家准备了竞赛中的基础知识、常见题型、解题思路以及常用工具等内容，帮助大家更快速深入地学习编程竞赛中涉及到的知识。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://oi-wiki.org/&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;其他&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;力扣提交成功之后除了可以看到自己的排名情况（击败百分之多少），还可以查看别人的提交代码。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.47720364741641336&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7ia8ad0P8EYgG8GiaLNBn0tRpMnNnCGs2g64Q2ITBkOQqicc8M8DpLq8cQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1974&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6729200652528549&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7MY1DfonBTibLndrO2kHHt5vhBNPOTAYbcDPfwISeUIFruydq0Tzib3jg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2452&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里可以看所有分段的分布情况，也可以直接点击对应的柱子，查看别人的代码怎么写的。比如我这里直接点开了击败 100% 的代码，研究下 ta 是怎么写的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.703030303030303&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/liaT5dytkaTe3BfqdjBianedj6Nca9HFy7o4Ozic5HYsVZKLZo6dldNASBzRTsMf6JmlNCfnF1Oaec0z4lp9vm3gQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2310&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发现确实代码比我的好，于是我就又”学会“了一招（技能++）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是本文的全部内容了。大家对此有何看法，欢迎给我留言，我有时间都会一一查看回答。更多算法套路可以访问我的 LeetCode 题解仓库：https://github.com/azl397985856/leetcode 。目前已经 38K star 啦。大家也可以关注我的公众号《力扣加加》带你啃下算法这块硬骨头。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;预告&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下期给大家讲&lt;strong&gt;「更加干货」&lt;/strong&gt;的技巧，一定不要错过哦。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一看就会，一写就废， 如何克服？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「如何锁定使用哪种算法」&lt;/strong&gt;。比如我看到了这道题，我怎么知道该用什么解法呢？二分？动态规划？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>423f034a6e6d46f02ae007a5ce64ee23</guid>
<title>WebAssembly 基础</title>
<link>https://toutiao.io/k/0kt1jnm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-content kg-canvas u-text-format&quot;&gt;
                    &lt;h2 id=&quot;1-webassembly-&quot;&gt;1.什么是webassembly？&lt;/h2&gt;&lt;p&gt;从历史角度讲，虚拟机过去只能加载JavaScript。这对我们而言足够了，因为JavaScript足够强大从而能够解决人们在当今网络上遇到的绝大部分问题。尽管如此，当试图把JavaScript应用到诸如3D游戏、虚拟现实、增强现实、计算机视觉、图像/视频编辑以及大量的要求原生性能的其他领域的时候，我们将会遇到性能问题（上面抄自mdn）。&lt;/p&gt;&lt;p&gt;webassembly我们从语意上分析是web + assembly，就是在web上应用的汇编语言，它的的出现并不是代替javascript，我认为他们两个是互补的关系，在强计算的部分用webassembly，而与页面的交互可以利用javascript的简单和易用性。&lt;/p&gt;&lt;p&gt;webassembly是继css，html，javascript之外的第四个w3c标准，webassembly的出现并不是&lt;strong&gt;希望开发者直接使用webassembly来编写代码，而是希望开发者能够将其他的高级语言例如C/C++/Rust编译成webassembly。&lt;/strong&gt; 从目前的发展来看，所有的浏览器和node.js（甚至v8）中都已经拥有webassembly的虚拟机了，也就是在这些环境下都支持webassembly运行。&lt;/p&gt;&lt;h2 id=&quot;2-webassembly&quot;&gt;2.为什么用webassembly&lt;/h2&gt;&lt;blockquote&gt;1.使 “原生” 模块不那么复杂&lt;/blockquote&gt;&lt;p&gt;运行时 (例如 Node 或 Python 的 CPython) 通常允许你使用低级语言 (例如 C++) 编写模块。这是因为这些低级语言的运行速度通常要快得多。因此，你可以在 Node 中使用本地模块，或者在 Python 中使用扩展模块。但是这些模块通常很难用，因为它们需要在用户设备上进行编译。借助 WebAssembly 的 “原生” 模块，你可以获得差不多的速度而规避复杂化。&lt;/p&gt;&lt;blockquote&gt;2.更容易的沙箱化运行原生代码&lt;/blockquote&gt;&lt;p&gt;另一方面，类似于 Rust 这样的低级语言不会指望 WebAssembly 来提升运行速度。但他们会为了安全性使用 WebAssembly。正如我们在 WASI 公告中所讨论的那样，WebAssembly 默认为你提供轻量级沙箱。因此，像 Rust 这样的语音可以通过 WebAssembly 来沙箱化原生代码模块。&lt;/p&gt;&lt;blockquote&gt;3.跨平台共享原生代码&lt;/blockquote&gt;&lt;p&gt;如果开发人员可以跨不同平台 (例如，在 Web 和桌面应用程序) 共享同一代码库，则可以节省开发时间并降低维护成本。脚本语言和低级语言都是如此。WebAssembly 为你提供了一种在不降低这些平台性能的前提下实现此目标的方法。&lt;/p&gt;&lt;h2 id=&quot;3-webassembly-vs-javascript&quot;&gt;3.webassembly vs javascript&lt;/h2&gt;&lt;p&gt;js运行速度的发展如下图，在2008年的时候，引入了JIT技术，这使得javascript的速度有将近10倍的提升，这使得我们可以用js来写server端的内容。而在2017年，webassembly出现了，这将又是一个转折点&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://zhanstatic.vivo.com.cn/wukong/img/73d78706-0c03-401d-9299-13ff3d1a87b5.jpg&quot; class=&quot;kg-image&quot; alt=&quot;js-speed&quot;/&gt;&lt;/figure&gt;&lt;h4 id=&quot;3-1-v8-jit-just-in-time-&quot;&gt;3.1 v8中的JIT（just in time）&lt;/h4&gt;&lt;p&gt;要说到webassembly为什么快，要先说下javascript的运行原理和JIT技术，众所周知的是javascript是一门高级语言，如果想要让机器看懂这门语言，你需有一个“翻译器”----Interpreter或者是Compiler来将高级语言翻译成机器语言，简单理解interpreter是一个实时翻译机，像是同声传译，而compiler是将高级语言提前全部翻译好，再交给机器，javascript是一门interpreted language，意味着这个翻译过程是“on the fly”的，一行一行翻译，一行一行执行。而像c++这种语言是利用compiler来提前翻译好，再运行。&lt;/p&gt;&lt;blockquote&gt;Interpreter优点:那么这两种翻译模式肯定是各有好坏，“实时翻译”的好处就是启动快，因为你不需要提前编译它，可以边走边唠（可能这就是大部分开发者觉得js简单的原因之一吧，你在浏览器打个 1 + 1就能快速得出结果）&lt;/blockquote&gt;&lt;blockquote&gt;Interpreter缺点:但是坏处就是比方说你有一个for循环，意味着你要一遍一遍的翻译同一行代码，做同样的事，而无法做一些优化。&lt;/blockquote&gt;&lt;blockquote&gt;Compiler优点: “提前翻译”的好处当然就是因为我们提前翻译好了，在运行之前可以将代码做下优化，这样就加快了运行时候的速度。&lt;/blockquote&gt;&lt;blockquote&gt;Compiler缺点: 坏处当然就是启动太慢了，要先编译。&lt;/blockquote&gt;&lt;h5 id=&quot;compiler-optimization&quot;&gt;Compiler optimization&lt;/h5&gt;&lt;p&gt;那么JIT技术就是在原来JS只有Interpreter技术之上加入了Compiler，作为成年人我不选择，我两个都要！在用interpreter实时翻译的过程当中加入了compiler的一些特性，比方说有那么一行代码在被执行了很多次的时候，js引擎会将其设置为“Warm”，进行一系列超级优化，再被执行的时候就设置为“Hot”，进行究极优化（听说数码宝贝出新一代了？）。&lt;/p&gt;&lt;h5 id=&quot;type-specialization&quot;&gt;Type specialization&lt;/h5&gt;&lt;p&gt;再比如js中因为类型都是动态的，就是一个array中每个元素的类型都是不一定的，可能是object可能是string可能是number，意味着当你iterate这个array的每个元素都要进行一系列的类型检查啥的。当JIT技术引进以后，我们的js引擎可能会在跑到前十个元素都是number的情况下，大胆预测你后面也都是number（当然之后会进行检查）。&lt;/p&gt;&lt;h4 id=&quot;3-2-webassembly-&quot;&gt;3.2 为什么webassembly要更快&lt;/h4&gt;&lt;p&gt;Ok，说完js的JIT之后，我们来总结下执行js和webassembly的过程：&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://zhanstatic.vivo.com.cn/wukong/img/944349e2-e701-478c-a8f0-0b61220dd33d.jpg&quot; class=&quot;kg-image&quot; alt=&quot;js-speed&quot;/&gt;&lt;/figure&gt;&lt;ol&gt;&lt;li&gt;首先看fetching部分，webassembly代码更加compact，因为js要更human-readable，所以代码提及相较于汇编语言体积会更大&lt;/li&gt;&lt;li&gt;parse/decode过程中，js需要先生成ast，然后再通过ast生成IR（intermediate representation），IR再生成机器码(x86或者arm)。而webassembly则不需要这个转化过程，这里盗张图，看下图。可知webassembly能够直接生成机器密码。&lt;br/&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://zhanstatic.vivo.com.cn/wukong/img/7703a12e-9244-4e53-8744-e1455d423399.jpg&quot; class=&quot;kg-image&quot; alt=&quot;IR&quot;/&gt;&lt;/figure&gt;&lt;ol&gt;&lt;li&gt;compile + optimize的过程在JIT部分说过，js引擎要边运行边进行优化，比方说watch数据的类型变化啦之类的，而webassembly更接近底层机器码，数据类型什么的是固定的&lt;/li&gt;&lt;li&gt;此外JS中还有reoptimization的过程，在JIT的type specialization部分说到了js引擎为了提升性能的类型预测部分，肯定有failed的时候，所以js执行中还需要有reoptimization的部分。&lt;/li&gt;&lt;li&gt;至于execution的部分，因为webassembly更底层（webassembly的两种格式看下面一小节，wasm和wat格式）相比于js即使最终都生成机器码，webassembly开发者写的代码所能优化的程度一定是大于js所能做的优化。&lt;/li&gt;&lt;li&gt;GC过程容易理解，能够转换成webassembly的高级语言中gc都需要开发者手动处理，而js中是自动处理。&lt;/li&gt;&lt;/ol&gt;&lt;h4 id=&quot;3-3-webassembly-wasm-wat-&quot;&gt;3.3 webassembly长什么样？（wasm格式和wat格式）&lt;/h4&gt;&lt;p&gt;讲了这么多，webassembly到底长什么样子呢？&lt;br/&gt;先写一个简单的c++方法如下:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;// test.c
    int addAll(int times) {
        int n = 0;
        for (int i = 0; i &amp;lt; times; ++i) {
           n += i;
        };
        return n;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;&lt;li&gt;wasm后缀的文件：直接放到webassembly虚拟机上的可执行文件格式，我们利用&lt;code&gt;Emscripten&lt;/code&gt;工具将上面的c++文件生成一个wasm文件，命令为：&lt;code&gt;emcc -O3 -s &quot;EXPORTED_FUNCTIONS=[&#x27;_addAll&#x27;]&quot; -o test.wasm test.c --no-entry &lt;/code&gt;，就是在wasm文件中导出addAll方法，生成的wasm就是一个二进制（实际上是16进制）文件。打开text.wasm文件内容如下：&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;00 61 73 6D 0D 00 00 00 01 86 80 80 80 00 01 60
01 7F 01 7F 03 82 80 80 80 00 01 00 04 84 80 80
80 00 01 70 00 00 05 83 80 80 80 00 01 00 01 06
81 80 80 80 00 00 07 96 80 80 80 00 02 06 6D 65
6D 6F 72 79 02 00 09 5F 5A 35 61 64 64 34 32 69
00 00 0A 8D 80 80 80 00 01 87 80 80 80 00 00 20
00 41 2A 6A 0B
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;&lt;li&gt;wat后缀的文件：方便人类可读的文件，并且可以在此格式上进行coding，利用&lt;a href=&quot;https://github.com/webassembly/wabt&quot;&gt;wasm2wat&lt;/a&gt;工具将生成的wasm转成wat格式，&lt;code&gt;wasm2wat test.wasm&lt;/code&gt;生成的wat的内容如下：可以看出更human-readable。简单介绍下，webassembly中只支持四种数据类型&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;i32: 32-bit 整型&lt;/li&gt;&lt;li&gt;i64: 64-bit 整型&lt;/li&gt;&lt;li&gt;f32: 32-bit 浮点型&lt;/li&gt;&lt;li&gt;f64: 64-bit 浮点型&lt;br/&gt;像是&lt;code&gt;i32.sub&lt;/code&gt;这样是运算指令，前面两个推入栈中的变量为运算指令的两个参数，看的出这个指令是够精简的。如果对手写wasm感兴趣的同学可以看&lt;a href=&quot;https://zhuanlan.zhihu.com/p/42955781#:~:text=%E7%BC%96%E8%AF%91WebAssembly,%E8%AE%BE%E8%AE%A1%E4%B8%BA%E4%BA%BA%E7%B1%BB%E5%8F%AF%E8%AF%BB%E3%80%82&quot;&gt;这篇内容&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;    (module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32) (result i32)))
  (type (;2;) (func))
  (type (;3;) (func (param i32)))
  (func (;0;) (type 2)
    nop)
  (func (;1;) (type 1) (param i32) (result i32)
    local.get 0
    i32.const 1
    i32.lt_s
    if  ;; label = @1
      i32.const 0
      return
    end
    local.get 0
    i32.const 1
    i32.sub
    i64.extend_i32_u
    local.get 0
    i32.const 2
    i32.sub
    ...
    // 篇幅原因，只展示部分
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然wasm和wat格式之间是可以相互转换的，看你是要读它还是用它。&lt;/p&gt;&lt;h4 id=&quot;3-4-webassembly-js-&quot;&gt;3.4 webassembly和js中的通讯&lt;/h4&gt;&lt;p&gt;上一个小结我们说了在webassembly中只有四个数据类型，并且都是数字类型，我们的c++累加函数中只传递了数字n，代表累加的次数，那么我们如何在webassembly和js之间传递复杂的数据结构比方说string或者object呢？答案就是传递内存的buffer，有点像是在两者这件传递一个指针，这个指针是数字类型，然后把要传递的内容放到这片共享的内存中。这里详情可以看mdn的&lt;code&gt;WebAssembly.Memory&lt;/code&gt; api，这里的内容复制自&lt;a href=&quot;https://developer.aliyun.com/article/740902&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://zhanstatic.vivo.com.cn/wukong/img/3b980379-0a25-4552-8360-e96c0f24e534.jpg&quot; class=&quot;kg-image&quot; alt=&quot;connmunication&quot;/&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;    //创建一个6.4MiB大的内存
    const wasmMemory = new WebAssembly.Memory({initial:10, maximum:100}) 
    WebAssembly.instantiate(wasmBinary, {
      env: {
        // 告诉webassembly这片内存咱俩一起用
        memory: wasmMemory
      }
    })
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在js中，可以通过typedArray来操作二进制数据buffer&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// 把想要传递的数据转成 ArrayBuffer (假设是 Uint8Array)
const dataBuffer = encodeDataByJS({ /* my data */ })
// 向 wasm 申请一段内存，由 wasm 代码负责实现并返回内存内存起始地址
const offset = applyMemoryFormWasm(dataBuffer.length)
// 以 unit8 的格式操作 wasm 的内存 (格式应该与 dataBuffer 的格式相同)
const heapUint8 = new Uint8Array(wasmMemory.buffer, offset, dataBuffer.length)
// 把数据写入 wasm 内存
heapUint8.set(dataBuffer)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;4-webassembly-demo&quot;&gt;4.写一个webassembly的demo&lt;/h2&gt;&lt;h4 id=&quot;4-1-c-&quot;&gt;4.1 c++实现一个累加函数&lt;/h4&gt;&lt;p&gt;我们用上面的demo实现一个1 + 2 + 3 + ... + n的c++函数&lt;/p&gt;&lt;h4 id=&quot;4-2-emscripten-wasm-&quot;&gt;4.2 用emscripten生成.wasm文件&lt;/h4&gt;&lt;p&gt;上部分提到利用&lt;a href=&quot;https://emscripten.org/&quot;&gt;emscripten&lt;/a&gt;生成test.wasm文件&lt;/p&gt;&lt;h4 id=&quot;4-3-js-wasm-&quot;&gt;4.3 如何在js中调用生成的.wasm文件&lt;/h4&gt;&lt;p&gt;我们尝试在node中使用这个wasm文件导出的&lt;code&gt;addAll&lt;/code&gt;方法如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;fs.readFile(&#x27;./test.wasm&#x27;, (err, data) =&amp;gt; {
    if (err) throw err;
    WebAssembly.instantiate(data).then((module) =&amp;gt; {
            console.log(&#x27;In the native WebAssembly function&#x27;)
            console.time(&#x27;performance1&#x27;)
            console.log(module.instance.exports.addAll(50000))
            console.timeEnd(&#x27;performance1&#x27;)
        });
    })
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为现在webassembly已经是web标准，各种js引擎中都有相应的api（WebAssembly）调用webassembly。使用方法很简单，有兴趣的童鞋去mdn搜一下相关的其他信息。&lt;/p&gt;&lt;h4 id=&quot;4-4-&quot;&gt;4.4粗略比较下计算性能&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;     function addAll(n) {
        var result = 0
        console.log(&#x27;In the Javascript&#x27;)
        console.time(&#x27;performance2&#x27;)
        for(let i = 0 ; i &amp;lt; n; i++) {
            result+=i
        }
        console.log(result)
        console.timeEnd(&#x27;performance2&#x27;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;js和webassembly执行&lt;code&gt;0 + 1 + 2 + ... + 50000&lt;/code&gt;的耗时在我的电脑上为webassembly：0.07ms；js：4.886ms；看的出这么一个简单的计算就能看出来其性能差别了。&lt;/p&gt;&lt;h2 id=&quot;5-webassembly-runtime&quot;&gt;5.webassembly的runtime&lt;/h2&gt;&lt;p&gt;除了浏览器和node之外，我们说两个webassembly的runtime，第一个是wasmer，官网说这个runtime可以跑在任意的设备之上，看了下它更像是一个docker容器，能够运行wasm。用它来运行我们的累加wasm：&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://zhanstatic.vivo.com.cn/wukong/img/79e48cd3-dad6-45b0-97b6-ff30b917a582.jpg&quot; class=&quot;kg-image&quot; alt=&quot;wasmer&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;此外wasmr还提供了一个工具叫做wapm，它有点像是npm，在其社区上一些用户会上传自己编译好的wasm工具包，你只需要下载下来就能够直接在wasmer跑起来&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://zhanstatic.vivo.com.cn/wukong/img/2bfce205-3298-4daa-895a-6e697f45eacb.jpg&quot; class=&quot;kg-image&quot; alt=&quot;wapm&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;在wapm的项目之下甚至会有一个&lt;code&gt;wapm_packages&lt;/code&gt;和一个&lt;code&gt;.lock&lt;/code&gt;的文件，内容也和我们的package.lock类似。&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://zhanstatic.vivo.com.cn/wukong/img/5a494175-caaa-4a47-81f8-9a0222b676e4.jpg&quot; class=&quot;kg-image&quot; alt=&quot;wapm-lock&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这个runtime是由intel的中国团队开发，其目的就是运行在iot设备之上，其支持的平台架构有：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;X86-64, X86-32&lt;/li&gt;&lt;li&gt;ARM, THUMB (ARMV7 Cortex-M7 and Cortex-A15 are tested)&lt;/li&gt;&lt;li&gt;AArch64 (Cortex-A57 and Cortex-A53 are tested)&lt;/li&gt;&lt;li&gt;MIPS&lt;/li&gt;&lt;li&gt;XTENSA&lt;br/&gt;按照教程本地编译出了runtime并且能够成功运行我们的累加wasm方法：&lt;br/&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://zhanstatic.vivo.com.cn/wukong/img/6a9d84f7-86dc-4e6c-b66d-5e83b3f2c28a.jpg&quot; class=&quot;kg-image&quot; alt=&quot;iwasm&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;生成的runtime命令行文件&lt;code&gt;iwasm&lt;/code&gt;只有212k&lt;/p&gt;&lt;h2 id=&quot;6-webassembly-&quot;&gt;6.webassembly现在的应用场景：&lt;/h2&gt;&lt;p&gt;在w3c &lt;a href=&quot;https://www.w3.org/2020/08/29-chinese-web-wasm.minutes.html&quot;&gt;2020年8月29日的线上会议中&lt;/a&gt;，几家技术大厂分别介绍了他们用webassembly的场景：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;典型场景一：B站，在up主上传视频的时候利用webassembly进行视频内容的检查，根据视频生成推荐封面，这些操作都是在用户的浏览器（前端）实现的。&lt;br/&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://zhanstatic.vivo.com.cn/wukong/img/2fb206f7-1778-4b3c-81de-5a284a307a47.jpg&quot; class=&quot;kg-image&quot; alt=&quot;wasm-intel&quot;/&gt;&lt;/figure&gt;&lt;ol&gt;&lt;li&gt;intel在嵌入式设备上的应用，用Webassembly实现了一套应用框架：&lt;br/&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://zhanstatic.vivo.com.cn/wukong/img/93bb0dd4-6c90-455b-97db-ff7ce5207cb1.jpg&quot; class=&quot;kg-image&quot; alt=&quot;wasm-intel&quot;/&gt;&lt;/figure&gt;&lt;ol&gt;&lt;li&gt;Unity游戏引擎也有webassembly的实现&lt;/li&gt;&lt;li&gt;Emulator（仿真器）例如game boy emulator&lt;/li&gt;&lt;li&gt;一些媒体处理网站，squoosh、ogv.js、Photon等。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;reference：&lt;/p&gt;&lt;p&gt;本文与&lt;a href=&quot;https://quickapp.vivo.com.cn/&quot;&gt;https://quickapp.vivo.com.cn/&lt;/a&gt; 中的文章为同一作者&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/&quot;&gt;https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/yZmci4krPkxA8uEfaJh5XQ&quot;&gt;https://mp.weixin.qq.com/s/yZmci4krPkxA8uEfaJh5XQ&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://developer.aliyun.com/article/740902&quot;&gt;https://developer.aliyun.com/article/740902&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>20e1f700dc2695ed758427be23632da5</guid>
<title>基于 Prometheus 和 Grafana 的监控平台：环境搭建</title>
<link>https://toutiao.io/k/3ndhghe</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;相关概念&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微服务中的监控分根据作用领域分为三大类，Logging，Tracing，Metrics。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Logging - 用于记录离散的事件。例如，应用程序的调试信息或错误信息。它是我们诊断问题的依据。比如我们说的ELK就是基于Logging。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Metrics - 用于记录可聚合的数据。例如，队列的当前深度可被定义为一个度量值，在元素入队或出队时被更新；HTTP 请求个数可被定义为一个计数器，新请求到来时进行累。prometheus专注于Metrics领域。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Tracing - 用于记录请求范围内的信息。例如，一次远程方法调用的执行过程和耗时。它是我们排查系统性能问题的利器。最常用的有Skywalking，ping-point，zipkin。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天我们主要聊聊Prometheus的监控，接下来我们了解下需要涉及的几个关键组件。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;Prometheus&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Prometheus(中文名:普罗米修斯)是由SoundCloud开发的开源监控报警系统和时序列数据库(TSDB). Prometheus使用Go语言开发, 是Google BorgMon监控系统的开源版本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Prometheus的基本原理是通过HTTP协议周期性抓取被监控组件的状态, 任意组件只要提供对应的HTTP接口就可以接入监控. 不需要任何SDK或者其他的集成过程。输出被监控组件信息的HTTP接口被叫做exporter，目前开发常用的组件大部分都有exporter可以直接使用, 比如Nginx、MySQL、Linux系统信息、Mongo、ES等&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;exporter&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;prometheus可以理解为一个数据库+数据抓取工具, 工具从各处抓来统一的数据, 放入prometheus这一个时间序列数据库中. 那如何保证各处的数据格式是统一的呢?就是通过这个exporter. Exporter是一类数据采集组件的总称. Exporter负责从目标处搜集数据, 并将其转化为Prometheus支持的格式, 它开放了一个http接口(以便Prometheus来抓取数据). 与传统的数据采集组件不同的是, Exporter并不向中央服务器发送数据, 而是等待中央服务器(如Prometheus等)主动前来抓取。https://github.com/prometheus 有很多写好的exporter,可以直接下载使用。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;Grafana&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Grafana是一个图形化工具, 它可以从很多种数据源(例如Prometheus)中读取数据信息, 使用很漂亮的图表来展示数据, 并且有很多开源的dashborad可以使用,可以快速地搭建起一个非常精美的监控平台。它与Prometheus的关系就类似于Kibana与ElasticSearch。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;环境准备&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在开始配置之前请下载以下几个软件(直接从github或者grafana官网下载太慢了，简直是龟速而且容易下载失败，建议使用迅雷下载)。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;prometheus&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;grafana&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;node_exporter&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;安装&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;准备两台服务器，一台用作安装prometheus和grafana，一台用作放置exporter组件。建立应用文件夹，将相关软件上传至服务器。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;192.168.249.131 prometheus，grafana&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;192.168.249.129 exporter&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;prometheus&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用如下shell命令进行安装并启动&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;tar zxvf prometheus-2.13.1.linux-amd64.tar.gz&lt;br/&gt;mv prometheus-2.13.1.linux-amd64 prometheus&lt;br/&gt;cd prometheus&lt;br/&gt;nohup ./prometheus &amp;amp;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动完成后，用浏览器打开 &lt;code&gt;http://192.168.249.131:9090&lt;/code&gt;进行访问，效果如下：&lt;img data-ratio=&quot;0.36375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4iaeynpH2ice7D0VFpeyy80jasib2xbu0Sib97y7Dt3VibeWPOdLumRJJvNxO3PAT77LhIibqKf5JsbuouQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;grafana&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用如下shell命令进行安装并启动&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;tar grafana-6.4.3.linux-amd64.tar.gz&lt;br/&gt;cd grafana-6.4.3&lt;br/&gt;nohup ./grafana-server &amp;amp;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动完成后，用浏览器打开 &lt;code&gt;http://192.168.249.131:3000&lt;/code&gt;进行访问，默认账号密码为admin/admin，初次登陆需要修改密码，修改密码并登陆效果如下：&lt;img data-ratio=&quot;0.47176913425345046&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4iaeynpH2ice7D0VFpeyy80jaI6BebTdjHibRYLg401ZQBhT8N93nv60asIicqDnCUdo6mmquibzYwsRIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;797&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;node_exporter&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用如下shell命令进行安装并启动&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;tar zxvf node_exporter-0.18.1.linux-amd64.tar.gz&lt;br/&gt;mv node_exporter-0.18.1.linux-amd64 node_exporter&lt;br/&gt;nohup ./node_exporter &amp;amp;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;node exporter默认使用9100端口，可以使用&lt;code&gt;--web.listen-address=&quot;:9200&quot;&lt;/code&gt;指定端口号。启动完成后，用浏览器打开 &lt;code&gt;http://192.168.249.129:9100/&lt;/code&gt;进行访问,显示效果如下：&lt;img data-ratio=&quot;0.29712858926342073&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4iaeynpH2ice7D0VFpeyy80ja9MvrNHcknO59q5zgPmN0aLN48cBpmlwRuwibIGbJDXpRFmI84O11gpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;801&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;配置&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;prometheus&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进入prometheus安装目录，修改 &lt;code&gt;prometheus.yml&lt;/code&gt;文件，增加监听job &lt;code&gt;server-192.168.249.129&lt;/code&gt;，完整配置如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# my global config&lt;/span&gt;&lt;br/&gt;global:&lt;br/&gt;  scrape_interval:     15s &lt;span&gt;# Set the scrape interval to every 15 seconds. Default is every 1 minute.&lt;/span&gt;&lt;br/&gt;  evaluation_interval: 15s &lt;span&gt;# Evaluate rules every 15 seconds. The default is every 1 minute.&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# scrape_timeout is set to the global default (10s).&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Alertmanager configuration&lt;/span&gt;&lt;br/&gt;alerting:&lt;br/&gt;  alertmanagers:&lt;br/&gt;  - static_configs:&lt;br/&gt;    - targets:&lt;br/&gt;      &lt;span&gt;# - alertmanager:9093&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;rule_files:&lt;br/&gt;  &lt;span&gt;# - &quot;first_rules.yml&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# - &quot;second_rules.yml&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;scrape_configs:&lt;br/&gt;  &lt;span&gt;# The job name is added as a label `job=&amp;lt;job_name&amp;gt;` to any timeseries scraped from this config.&lt;/span&gt;&lt;br/&gt;  - job_name: &lt;span&gt;&#x27;prometheus&#x27;&lt;/span&gt;&lt;br/&gt;    static_configs:&lt;br/&gt;    - targets: [&lt;span&gt;&#x27;localhost:9090&#x27;&lt;/span&gt;]&lt;br/&gt;&lt;br/&gt;  - job_name: &lt;span&gt;&#x27;192.168.249.129&#x27;&lt;/span&gt;&lt;br/&gt;    static_configs:&lt;br/&gt;    - targets: [&lt;span&gt;&#x27;192.168.249.129:9100&#x27;&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置完成后重启prometheus，查看监听状态。&lt;img data-ratio=&quot;0.35830212234706615&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4iaeynpH2ice7D0VFpeyy80jaCrcsrCUq7C8rlGVaicwRX8Y0wf9iauhRGnTSdJoWDg56qticlSlhe0Dqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;801&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;grafana&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;配置prometheus数据源&lt;img data-ratio=&quot;0.4723618090452261&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4iaeynpH2ice7D0VFpeyy80jaxTibMiaJ8OodBmLk1ziawR6eUJ9I5a5iaibtvAuqLwf5fHuS34YeWeOAyUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;796&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;去官网寻找对应的表盘，我们选择node exporter监控看板&lt;img data-ratio=&quot;0.4225&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4iaeynpH2ice7D0VFpeyy80jarSSWjSALVsG1kM0qfV4ARNTtQhKbBfmULUiaOPUj1dCibpc6W0ibFoe9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在grafana中在导入表盘&lt;img data-ratio=&quot;0.39775561097256856&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4iaeynpH2ice7D0VFpeyy80ja22Dj0Uw6jwJ0waHRpBuFfkwFcRB7yRTJ7hPKaiaSff7a1K3WP8ibQNtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;802&quot;/&gt;&lt;img data-ratio=&quot;0.42625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4iaeynpH2ice7D0VFpeyy80jaJTWu3oe4URXUdpHQaT0YoBtxcp3eYQjD5qGAEvNdib2PbEtSicJp7E5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;查看监控效果&lt;img data-ratio=&quot;0.47875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4iaeynpH2ice7D0VFpeyy80jazFHuaq3kQZWGpAiactdpun1PlpqqX7dQg26AtBtZ2KmzichEicicLRBzsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;img data-ratio=&quot;0.4730238393977415&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4iaeynpH2ice7D0VFpeyy80ja5MJaHibE5ibZuzWGY0iagJuesg1FrKwDgkibYyoT2zuruQUPGTqd9TMPFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;797&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此基于Prometheus的监控环境搭建完成,你也来动手试一下吧。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>