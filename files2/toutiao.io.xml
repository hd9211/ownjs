<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>fae532b3c3603114df73d958063ce428</guid>
<title>2021 年马上就要结束了！抓紧啦！</title>
<link>https://toutiao.io/k/rf8ezjy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ee2b5e35c6abbd6cfe5ac2db80d124d0</guid>
<title>登录态 &amp; SSO</title>
<link>https://toutiao.io/k/vjcw3vh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkxNTIwMzU5OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqkT4YvuDMGzasrJTZJPpibQB9reXcCvNMudWicXTzI7iaoZGNicrr903icjKsFvuUeYI6yw0FbXzzlNicw/0?wx_fmt=png&quot; data-nickname=&quot;ELab团队&quot; data-alias=&quot;&quot; data-signature=&quot;分享技术新见解&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;0&quot; data-index=&quot;0&quot;&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;0&quot; data-index=&quot;0&quot;&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;0&quot; data-index=&quot;0&quot;&gt;大&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;厂&quot; data-textnode-index=&quot;0&quot; data-index=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;厂&quot; data-textnode-index=&quot;1&quot; data-index=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;厂&quot; data-textnode-index=&quot;1&quot; data-index=&quot;1&quot;&gt;厂&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;技&quot; data-textnode-index=&quot;0&quot; data-index=&quot;2&quot;&gt;&lt;span data-raw-text=&quot;技&quot; data-textnode-index=&quot;2&quot; data-index=&quot;2&quot;&gt;&lt;span data-raw-text=&quot;技&quot; data-textnode-index=&quot;2&quot; data-index=&quot;2&quot;&gt;技&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;术&quot; data-textnode-index=&quot;0&quot; data-index=&quot;3&quot;&gt;&lt;span data-raw-text=&quot;术&quot; data-textnode-index=&quot;3&quot; data-index=&quot;3&quot;&gt;&lt;span data-raw-text=&quot;术&quot; data-textnode-index=&quot;3&quot; data-index=&quot;3&quot;&gt;术&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;1&quot; data-index=&quot;4&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;4&quot; data-index=&quot;4&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;4&quot; data-index=&quot;4&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;1&quot; data-index=&quot;5&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;5&quot; data-index=&quot;5&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;5&quot; data-index=&quot;5&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot;坚&quot; data-textnode-index=&quot;2&quot; data-index=&quot;6&quot;&gt;&lt;span data-raw-text=&quot;坚&quot; data-textnode-index=&quot;6&quot; data-index=&quot;6&quot;&gt;&lt;span data-raw-text=&quot;坚&quot; data-textnode-index=&quot;6&quot; data-index=&quot;6&quot;&gt;坚&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;持&quot; data-textnode-index=&quot;2&quot; data-index=&quot;7&quot;&gt;&lt;span data-raw-text=&quot;持&quot; data-textnode-index=&quot;7&quot; data-index=&quot;7&quot;&gt;&lt;span data-raw-text=&quot;持&quot; data-textnode-index=&quot;7&quot; data-index=&quot;7&quot;&gt;持&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;周&quot; data-textnode-index=&quot;2&quot; data-index=&quot;8&quot;&gt;&lt;span data-raw-text=&quot;周&quot; data-textnode-index=&quot;8&quot; data-index=&quot;8&quot;&gt;&lt;span data-raw-text=&quot;周&quot; data-textnode-index=&quot;8&quot; data-index=&quot;8&quot;&gt;周&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index=&quot;2&quot; data-index=&quot;9&quot;&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index=&quot;9&quot; data-index=&quot;9&quot;&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index=&quot;9&quot; data-index=&quot;9&quot;&gt;更&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;3&quot; data-index=&quot;10&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;10&quot; data-index=&quot;10&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;10&quot; data-index=&quot;10&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;3&quot; data-index=&quot;11&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;11&quot; data-index=&quot;11&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;11&quot; data-index=&quot;11&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot;精&quot; data-textnode-index=&quot;4&quot; data-index=&quot;12&quot;&gt;&lt;span data-raw-text=&quot;精&quot; data-textnode-index=&quot;12&quot; data-index=&quot;12&quot;&gt;&lt;span data-raw-text=&quot;精&quot; data-textnode-index=&quot;12&quot; data-index=&quot;12&quot;&gt;精&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;选&quot; data-textnode-index=&quot;4&quot; data-index=&quot;13&quot;&gt;&lt;span data-raw-text=&quot;选&quot; data-textnode-index=&quot;13&quot; data-index=&quot;13&quot;&gt;&lt;span data-raw-text=&quot;选&quot; data-textnode-index=&quot;13&quot; data-index=&quot;13&quot;&gt;选&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;好&quot; data-textnode-index=&quot;4&quot; data-index=&quot;14&quot;&gt;&lt;span data-raw-text=&quot;好&quot; data-textnode-index=&quot;14&quot; data-index=&quot;14&quot;&gt;&lt;span data-raw-text=&quot;好&quot; data-textnode-index=&quot;14&quot; data-index=&quot;14&quot;&gt;好&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;4&quot; data-index=&quot;15&quot;&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;15&quot; data-index=&quot;15&quot;&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;15&quot; data-index=&quot;15&quot;&gt;文&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1 背景&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前一段时间，参与了老项目的迁移工作，配合后端接口迁移时，由于两个项目采取了不一样的登陆方案，所以遇到了跨域登录态无法共享的问题。经过各方协调，最终老项目将迁移页面部署在新项目的指定网关下，并且使用新项目的SSO登录方案。由迁移中遇到的登陆态共享问题，引发了我对SSO的思考与学习。如果发现文章中有什么错误之处，请及时指正～🙈&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2 登录态维护方式&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 JWT（Json Web Token）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1.1 是什么？&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JWT是一个开放的 JSON 格式 token 存储标准。它定义了一种安全、紧凑的方式来保存数据，通过签名的方式来校验 token 的合法性，主要支持的签名算法如 HMAC、RSA、ECDSA。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常使用它来保存登录信息，相比传统的 session 方案，它的优点在于服务端无需维护登录态，不再需要依赖第三方存储（如 redis、memcached），所以说 JWT 是无状态的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但它也存在缺点。由于它只在客户端维护，因此服务端无法方便的清除登录态，相比传统的 session 方案，只需要将 session 清除即可。你可能会说，可以直接将这个 token 删除就算退出登录了。但实际上这只是一种假注销，若该用户再次拿到相同的 token 还是会被认为是登录的。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1.2 数据结构&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上JWT是由&lt;code&gt;header（头部）&lt;/code&gt;、&lt;code&gt;payload（负载）&lt;/code&gt;、&lt;code&gt;signature（签名）&lt;/code&gt;这三个部分组成的，中间用&lt;code&gt;.&lt;/code&gt;来分隔开，写成一行就是这个样子的：&lt;code&gt;Header.Payload.Signature&lt;/code&gt;。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Header: 该部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&quot;alg&quot;&lt;/span&gt;: &lt;span&gt;&quot;HS256&quot;&lt;/span&gt;,  // 表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&quot;typ&quot;&lt;/span&gt;: &lt;span&gt;&quot;JWT&quot;&lt;/span&gt;     // 表示这个令牌（token）的类型（&lt;span&gt;type&lt;/span&gt;），JWT 令牌默认统一写为 JWT&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Playload：该部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。除了官方的字段，还可以自定义一些其他字段。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;iss (issuer)：签发人&lt;br/&gt;&lt;br/&gt;exp (expiration time)：过期时间&lt;br/&gt;&lt;br/&gt;sub (subject)：主题&lt;br/&gt;&lt;br/&gt;aud (audience)：受众&lt;br/&gt;&lt;br/&gt;nbf (Not Before)：生效时间&lt;br/&gt;&lt;br/&gt;iat (Issued At)：签发时间&lt;br/&gt;&lt;br/&gt;jti (JWT ID)：编号&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;⚠️ JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。这个 JSON 对象也要使用 Base64URL 算法转成字符串。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Signature ：该部分是对前两部分的签名，防止数据篡改。首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。服务器收到JWT后通过对比签名来确定Token是否被修改。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;HMACSHA256(&lt;br/&gt;&lt;br/&gt;  base64UrlEncode(header) + &lt;span&gt;&quot;.&quot;&lt;/span&gt; +&lt;br/&gt;&lt;br/&gt;  base64UrlEncode(payload),&lt;br/&gt;&lt;br/&gt;  secret)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Base64Url：这个算法跟 Base64 算法基本类似，但有一些小的不同。JWT 作为一个令牌，有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;/&lt;/code&gt;和&lt;code&gt;=&lt;/code&gt;，在 URL 里面有特殊含义，所以要被替换掉：&lt;code&gt;=&lt;/code&gt;被省略、&lt;code&gt;+&lt;/code&gt;替换成&lt;code&gt;-&lt;/code&gt;，&lt;code&gt;/&lt;/code&gt;替换成&lt;code&gt;_&lt;/code&gt; 。这就是 Base64URL 算法。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1.3 特点&lt;span/&gt;&lt;/h4&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;JWT 默认是不加密，但也是可以加密的。JWT 不加密的情况下，不能将敏感数据写入 JWT。但是，生成原始 Token 以后，可以用密钥再加密一次。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短，并且JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。对于一些比较重要的权限，使用时应该再次对用户进行认证。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2 Session &amp;amp; Cookie&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2.1 是什么？&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（1） Cookie&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cookie是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有两种类型的 Cookie，一种是 Session Cookie(会话期 Cookie)，一种是 Persistent Cookie(持久性 Cookie)，如果 Cookie 不包含到期日期，则将其视为会话 Cookie。会话 Cookie 存储在内存中，永远不会写入磁盘，当浏览器关闭时，此后 Cookie 将永久丢失。如果 Cookie 包含&lt;code&gt;有效期&lt;/code&gt; ，则将其视为持久性 Cookie，到期后，Cookie 将从磁盘中删除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要用途：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（2）Session&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Session 代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常见误区：Session 不是关闭浏览器就消失了。对 Session 来说，除非程序通知服务器删除一个 Session，否则服务器会在Session失效前一直保留。大多数情况下浏览器是不会在关闭网页之前通知服务器的，所以服务器根本不知道浏览器已经关闭。之所以会有这种错觉，是大部分 session 机制都使用会话 cookie 来保存 session id，而关闭浏览器后这个 session id 就消失了，再次连接服务器时也就无法找到原来的 session。如果服务器设置的 cookie 被保存在硬盘上，或者使用某种手段改写浏览器发出的 HTTP 请求头，把原来的 session id 发送给服务器，则再次打开浏览器仍然能够打开原来的 session。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2.2 session和cookie关系&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（1）关系&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIpKWDmLvWy7Cl52nWDF1M78wibjWS8Ps5xW9BDF7FWLaztb0wmAJax2YK0smliaiazaVFL45MicX6IXFA/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1241&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;845.1254480286739&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6805555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ndgH50E7pIpOUhph76icjYLsgdBZajdrLsIklTEWoDibKfyGZvqIVNxC1HJXGSLHDvrvT9obVtW2JqVic1Bhna2dg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务器第一次接收到请求时，开辟了一块 Session 空间（创建了Session对象），同时生成一个 session id ，并通过响应头的&lt;code&gt;Set-Cookie：JSESSIONID=XXXXXXX&lt;/code&gt; 命令，向客户端发送要求设置 Cookie 的响应；客户端收到响应后，在本机客户端设置了一个&lt;code&gt;JSESSIONID=XXXXXXX&lt;/code&gt;的 Cookie 信息，该 Cookie 的过期时间为浏览器会话结束。接下来客户端每次向同一个网站发送请求时，请求头都会带上该 Cookie信息（包含 sessionId ）， 然后服务器通过读取请求头中的 Cookie 信息，获取名称为 JSESSIONID 的值，得到此次请求的 session id。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（2）区别&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;安全性：&lt;/strong&gt; 由于Session 是存储在服务器端的，Cookie 是存储在客户端的，所以Cookie被盗用的可能性相较于Session会更高一些。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;存取值的类型不同&lt;/strong&gt;：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;存储大小不同：&lt;/strong&gt; 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2.3 Session id 的携带方式&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Cookie：保存session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;URL重写：由于cookie可以被人为的禁用，必须有其它的机制以便在cookie被禁用时仍然能够把session id传递回服务器，经常采用的一种技术叫做URL重写，就是把session id附加在URL路径的后面，附加的方式也有两种，一种是作为URL路径的附加信息，另一种是作为 query 字符串附加在URL后面。网络在整个交互过程中始终保持状态，就必须在每个客户端可能请求的路径后面都包含这个session id。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3 单点登录(SSO)&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1 SSO是什么&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SSO（Single sign-on）即单点登录，一种对于许多相互关联，但是又是各自独立的软件系统，提供访问控制的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单点登录 (SSO) 发生在用户登录到一个应用程序，然后自动登录到其他应用程序时，无论用户使用何种平台、技术或域。例如，如果你登录 Gmail 等 Google 服务，会自动通过 YouTube、AdSense、Google Analytics 和其他 Google 应用程序的身份验证。同样，如果退出 Gmail 或其他 Google 应用程序，将自动退出所有应用程序；这称为单点注销(SLO)。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.2 CAS&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.1 是什么？&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAS(Central Authentication Service)， 集中式认证服务， 是 Yale 大学发起的一个企业级的、开源的项目，旨在为 Web 应用系统提供一种可靠的单点登录解决方法(属于 Web SSO)。下图来自维基百科。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIpKWDmLvWy7Cl52nWDF1M7855FFM5WlzwLyOCYsibczialibd588aqqmUOs4KFw1DjA8v1ibpmtPq3TYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;SSO&lt;/strong&gt; &lt;strong&gt;体系中的角色&lt;/strong&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;SSO 认证中心(cas service)：提供 CAS SSO 服务的平台&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.2 易混淆概念&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;TGT：Ticket Grangting Ticket&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TGT 是 CAS 为用户签发的登录票据，拥有了 TGT，用户就可以证明自己在 CAS 成功登录过。TGT 封装了 Cookie 值以及此 Cookie 值对应的用户信息。当 HTTP 请求到来时，CAS 以此 Cookie 值（TGC）为 key 查询缓存中有无 TGT ，如果有的话，则相信用户已登录过。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;TGC：Ticket Granting Cookie&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAS Server 生成TGT放入自己的 Session 中，而 TGC 就是这个 Session 的唯一标识（SessionId），以 Cookie 形式放到浏览器端，是 CAS Server 用来明确用户身份的凭证。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ST 是 CAS 为用户签发的访问某一 service 的票据。用户访问 service 时，service 发现用户没有 ST，则要求用户去 CAS 获取 ST。用户向 CAS 发出获取 ST 的请求，CAS 发现用户有 TGT，则签发一个 ST，返回给用户。用户拿着 ST 去访问 service，service 拿 ST 去 CAS 验证，验证通过后，允许用户访问资源。ST 只能使用一次就会失效，这与 OAuth 中的 access_token 不同。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4742268041237113&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIpOUhph76icjYLsgdBZajdrLoeWI34F1xhsnlu2bUxvI2xEeapyQQUMad6LoLg4C7acajB03e2k2vQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;👇&lt;strong&gt;PGTIOU, PGT,&lt;/strong&gt; &lt;strong&gt;PT&lt;/strong&gt; &lt;strong&gt;是&lt;/strong&gt; &lt;strong&gt;CAS&lt;/strong&gt; &lt;strong&gt;2.0 的 代理模式 中的内容&lt;/strong&gt; &lt;strong&gt;，感兴趣的同学可以自行了解。&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;PGT：Proxy Granting Ticket&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Proxy Service的代理凭据。用户通过CAS生成一个PGT对象，缓存在PGTIOU。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;PGTIOU：Proxy Granting Ticket I Owe You&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是CAS的serviceValidate接口验证ST成功后，CAS会生成验证ST成功的xml消息，返回给Proxy Service，xml消息中含有PGTIOU，proxy service收到Xml消息后，会从中解析出PGTIOU的值，然后以其为key，在map中找出PGT的值，赋值给代表用户信息的Assertion对象的pgtId，同时在map中将其删除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是用户访问Target Service（back-end service）的票据。如果用户访问的是一个Web应用，则Web应用会要求浏览器提供ST，浏览器就会用cookie去CAS获取ST，而是通过访问proxy service的接口，凭借proxy service的PGT去获取一个PT，然后才能访问到此应用。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.3 单点登录(SSO) &amp;amp; 单点登出(SLO)&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.3.1 登陆流程&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下图是CAS官网的登录时序图，可以更好地帮助我们理解，建议细看一下～&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.6422764227642277&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIpKWDmLvWy7Cl52nWDF1M78uciaZAxWtWhvl99NQe99H84sbUb1lzPt1fPthbqqWGO8P74a4libHpDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1230&quot;/&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.3.2 单点登出&lt;span/&gt;&lt;br/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAS除了提供SSO功能，还提供了SLO（单点登出）功能，由于 CAS Service 和 Client Service 各维护了一个登陆态，所以两者之间的登录态是割裂的，那我们应该怎么实现SLO呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于官方没有给出一个详细的流程图，所以我就根据自己的理解画了一个，供大家参考一下～&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5055555555555555&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ndgH50E7pIpKWDmLvWy7Cl52nWDF1M78pTlCfMuzvUs2DC41VTSWb14V7EKWIbWV8JkFaIRnk7Hyt0PpLnkibEQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要流程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在某一个平台请求退出登录后，先在 query 携带 service 字段重定向到 CAS 退出登录的页面；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;携带service query字段和 TGC 发送请求到CAS Server；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CAS Server 通过 TGC 查询到登录信息，然后遍历请求各个接入平台的&lt;code&gt;/logout&lt;/code&gt;接口；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当所有业务的登录态都清除后，就成功单点登出了。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.3 OAUTH&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3.1 是什么？&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在OAuth中“O”是Open的简称，表示“开放”的意思。Auth表示“授权”的意思，所以连起来OAuth表示“开放授权”的意思，它是一个关于授权（authorization）的开放网络标准。OAuth允许用户授权第三方应用访问他存储在另外服务商里的各种信息数据，而这种授权不需要提供用户名和密码提供给第三方应用。比较直接的例子就是第三方App使用微信或QQ来登录，这些授权登录采用的就是OAuth。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3.2 名词定义&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Third-party application&lt;/strong&gt;：第三方应用客户端，就相当于当前需要授权的App&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;HTTP service&lt;/strong&gt;: 服务提供商，指的是微信、QQ&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Resource Owner&lt;/strong&gt;：用户/资源拥有者，本文指的是在微信中注册的用户&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Authorization server&lt;/strong&gt;: 认证服务器，在资源拥有者授权后，向客户端授权(颁发 access token)的服务器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Resource server&lt;/strong&gt;: 资源服务器，服务提供商存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.519753086419753&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIpOUhph76icjYLsgdBZajdrLRU19f3kRNO7Q97c9UOGtFttpLJW3yNamjtIjy9c65KJaMWb2DFaNXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1620&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3.3 四种授权模式&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本部分只展示一下相关的时序图，就不做文档的搬运工了🐶，想了解更多的同学，可以看最后的推荐阅读部分～&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;授权码模式&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9039145907473309&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIpOUhph76icjYLsgdBZajdrL2ZsZYEFECvU2icCCC6GyicKKLb6UQFyw71YSq5Sa1ECOwrtzXHwiczs9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1124&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式是最常用的流程，安全性也最高，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。&lt;/p&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;简化模式&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.685672514619883&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIpOUhph76icjYLsgdBZajdrLEazsENIt368hL0IRjMY0AuLbhCiavxQ8GicJICsItq9jrUCmf3MYVSUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1368&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第四步，直接返回access_token时，有被劫持的风险，所以OAuth采用如下的方式传递 token&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;https://a.com/callback#token=ACCESS_TOKEN&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面这个URL，&lt;code&gt;token&lt;/code&gt;参数就是令牌，客户端在前端拿到令牌。注意，令牌的位置是 URL 锚点（fragment），而不是查询字符串（querystring），这是因为 OAuth 允许跳转网址是 HTTP 协议，因此存在&quot;中间人攻击&quot;的风险，而浏览器跳转时，锚点不会发到服务器，就减少了泄漏令牌的风险。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。&lt;/p&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;密码模式&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6853080568720379&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIpOUhph76icjYLsgdBZajdrLPSqic5LQk7sLm96SiaG3aKwOoKroTiaQ6AfEm9FWEaSAVTw5uDDYyrwLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2110&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;采用这种方式不需要跳转，而是把令牌放在 JSON 数据里面，作为 HTTP 响应，客户端拿到令牌。这种方式需要用户给出自己的用户名/密码，显然风险很大，因此只适用于其他授权方式都无法采用的情况，而且必须是用户高度信任的应用。&lt;/p&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;凭证模式、客户端模式（&lt;strong&gt;client credentials&lt;/strong&gt;）&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6710526315789473&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIpOUhph76icjYLsgdBZajdrLq2qpBNSzU9RHuaSH1Kq5SiaqMgXgOpgIZagPLUViadQLkKib8P8YoXIDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1368&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;适用于没有前端的命令行应用，即在命令行下请求令牌。这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3.4 令牌的种类与更新&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个发到 API 的请求，都必须带有令牌。具体做法是在请求的头信息，加上一个&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Authorization&lt;/code&gt;字段，令牌就放在这个字段里面。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务提供商平台颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据的access_token，另一个用于获取新的令牌refresh_token。access_token的过期时间较短，refresh_token的过期时间较长，当access_token过期了，就会使用refresh_token来请求新的access_token。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;通过refresh_token请求access_token的url示例&lt;/strong&gt;：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;https://server.example.com/oauth/token?&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;grant_type``=refresh_token&amp;amp;&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;client_id``=CLIENT_ID&amp;amp;&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;client_secret``=CLIENT_SECRET&amp;amp;&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;refresh_token``=REFRESH_TOKEN&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;参数解释&lt;/strong&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;grant_type&lt;/strong&gt;: 参数为refresh_token表示要求更新令牌;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;client_id&lt;/strong&gt;：客户端id，第三方应用在服务提供者平台注册的，用于身份认证；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;client_secret&lt;/strong&gt;：授权服务器的秘钥，第三方应用在服务提供者平台注册的，用于身份认证；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;refresh_token&lt;/strong&gt;: 参数就是用于更新令牌的令牌&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.4 CAS 对比 OAUTH&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;设计初衷&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;CAS&lt;/strong&gt; 专门为中心化鉴权（&lt;strong&gt;authentication&lt;/strong&gt;）而生，即 SSO，并且 3.5 版本后也支持通过 OAuth 协议进行登录鉴权&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.03634085213032581&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIpKWDmLvWy7Cl52nWDF1M78sFMHxXxBK3dicPB3OX3luibHvIdfYXC69a1RA98OoUa1ibHyGBCX2OALA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;798&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;OAuth&lt;/strong&gt; 是用来处理授权（&lt;strong&gt;authorization&lt;/strong&gt;）而生，实现 SSO 并不是它的初衷，它只关注如何让第三方通过让用户无需登录的方式获得私有资源&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;只不过它也定义了完整的鉴权流程，如果你把用户信息当做私有资源，你也可以使用它定义的规范来实现 SSO，但相比 CAS，它是没有 &lt;strong&gt;SLO&lt;/strong&gt; &lt;strong&gt;（single logout）&lt;/strong&gt; 功能的。例如 &lt;strong&gt;github&lt;/strong&gt;、&lt;strong&gt;微信&lt;/strong&gt; 的第三方登录都是基于 OAuth 实现&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;安全性&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;CAS&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Service&lt;/strong&gt; &lt;strong&gt;ticket&lt;/strong&gt; &lt;strong&gt;只能使用一次&lt;/strong&gt;，并且有效期越短越好，而 OAuth 的 access_token 是有有效期的，有效期内可以使用多次&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;ticket 生成需要足够随机，如果被攻击者猜出规律，则可以计算出下一个 ticket 值&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;OAuth&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;通过 state 参数(放在query中)可以有效防止 csrf 攻击&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;对于 web 应用，access_token 通过后端方式接口获取和接口使用，secret 不会展示在前端，暴露可能性低&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;对于前端应用，可以通过 PKCE extension 有效防止授权码拦截攻击&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;资源存储&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;CAS：Client端(应用系统)是资源存储端，用户是资源消费者(应用使用者)。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;OAuth2：Client端(第三方服务)是资源消费端，通过用户授权，允许用户不提供自己账号密码的情况下，使Client端有权访问用户资源(如个人信息、通讯录等)。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;简单来说：需要统一的账号密码进行身份认证，用CAS；需要授权第三方服务使用我方资源，使用OAuth。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4 实现一个简单的SSO&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;流程图&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;首次登陆&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6756756756756757&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIpKWDmLvWy7Cl52nWDF1M78D23KQDxqxXibN0NGyPXWGKhN7v5YW4SONibPQ9UL1Ktru1Ip3yicbqg1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1110&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;非首次登陆&lt;span/&gt;&lt;br/&gt;&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6796296296296296&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ndgH50E7pIpKWDmLvWy7Cl52nWDF1M78oX8x0j140ib2onO8n0Fia0zm8PqC1q6mTia20zFtmMl6fs86ToRsThNQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;退出登录&lt;span/&gt;&lt;br/&gt;&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5259259259259259&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ndgH50E7pIpKWDmLvWy7Cl52nWDF1M78S516X74Kkh8pyueU2yopJlaAKOMXUffrFrQkJv65rvCNafW9HAoKjw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;模块&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;模块&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;FE-平台A&lt;/td&gt;&lt;td&gt;客户端A&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BE-平台A&lt;/td&gt;&lt;td&gt;Server端A，为客户端A提供接口服务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;FE-平台B&lt;/td&gt;&lt;td&gt;客户端B&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BE-平台B&lt;/td&gt;&lt;td&gt;Server端B，为客户端B提供接口服务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;FE-统一登录平台&lt;/td&gt;&lt;td&gt;SSO登陆前端页面&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BE-统一登录平台&lt;/td&gt;&lt;td&gt;SSO登陆Server服务&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;接口&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;模块&lt;/th&gt;&lt;th&gt;接口&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;BE-平台ABE-平台B&lt;/td&gt;&lt;td&gt;面向前端&lt;br/&gt;• authentication：查询用户登陆状态&lt;br/&gt;• userLogout：用户退出当前系统登陆&lt;br/&gt;面向SSO&lt;br/&gt;• ssoLogout：用于SSO清除当前系统Token&lt;br/&gt;• sendToken：用于接收SSO-BE发送过来的Token&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BE-统一登录平台&lt;/td&gt;&lt;td&gt;面向前端&lt;br/&gt;• login&lt;br/&gt;• sendToken：验证存在cookie，请求发送token&lt;br/&gt;面向Server&lt;br/&gt;• searchLoginState:：查询当前用户的登陆状态&lt;br/&gt;• logout：用于退出登陆状态&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;用户平台接口&lt;span/&gt;&lt;/h4&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;接口&lt;/th&gt;&lt;th&gt;type&lt;/th&gt;&lt;th&gt;请求参数&lt;/th&gt;&lt;th&gt;返回参数&lt;/th&gt;&lt;th&gt;所属平台&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;/authentication&lt;/td&gt;&lt;td&gt;get&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;成功：状态码 200&lt;br/&gt;失败：状态码：1001&lt;/td&gt;&lt;td&gt;平台A、B&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/userLogout&lt;/td&gt;&lt;td&gt;post&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;平台A、B&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/ssoLogout&lt;/td&gt;&lt;td&gt;post&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;平台A、B&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;SSO平台接口&lt;span/&gt;&lt;/h4&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;接口&lt;/th&gt;&lt;th&gt;type&lt;/th&gt;&lt;th&gt;请求参数&lt;/th&gt;&lt;th&gt;返回参数&lt;/th&gt;&lt;th&gt;所属平台&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;/login&lt;/td&gt;&lt;td&gt;post&lt;/td&gt;&lt;td&gt;account&lt;br/&gt;password&lt;/td&gt;&lt;td&gt;登陆成功：&lt;br/&gt;• 状态码200&lt;br/&gt;• token&lt;br/&gt;登录失败：&lt;br/&gt;• 状态码1002&lt;/td&gt;&lt;td&gt;SSO平台&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/sendToken&lt;/td&gt;&lt;td&gt;post&lt;/td&gt;&lt;td&gt;token&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;SSO平台&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/searchLoginState&lt;/td&gt;&lt;td&gt;get&lt;/td&gt;&lt;td&gt;token?: string&lt;/td&gt;&lt;td&gt;登陆态合法：&lt;br/&gt;• 状态码200&lt;br/&gt;• token&lt;br/&gt;登陆态不合法：&lt;br/&gt;• 状态码1001&lt;/td&gt;&lt;td&gt;SSO平台&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/logout&lt;/td&gt;&lt;td&gt;post&lt;/td&gt;&lt;td&gt;token&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;SSO平台&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;页面&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;模块&lt;/th&gt;&lt;th&gt;页面&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;FE-平台AFE-平台B&lt;/td&gt;&lt;td&gt;主页面&lt;br/&gt;• 显示当前系统用户登录成功了&lt;br/&gt;• 退出登录按钮&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;FE-统一登录平台&lt;/td&gt;&lt;td&gt;登录页面&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;其他实现方案&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;前后端框架&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本demo采用eden monorepo来组织共六个子项目，分别为三个React前端子项目和三个Node后端子项目，后端采用的是公司内部封装的gulu框架。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Token持久化&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于Node后端需要记录当前已登陆系统的用户token，所以本Demo采用JSON文件来暂时存储已登录用户的Token，使用fs来对json文件进行读写操作，模拟存储和删除token的过程。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;本地端口&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本次demo仅在本地运行展示，所有使用的均为本地&lt;span&gt;localhost&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;端口，端口对应如下&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;前后端分离跨域问题&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于只是demo演示项目，所以采用的是config文件中的代理来暂时解决。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;devServer: {&lt;br/&gt;      proxy: {&lt;br/&gt;        &lt;span&gt;&#x27;/api&#x27;&lt;/span&gt;: {&lt;br/&gt;          target: &lt;span&gt;&#x27;http://localhost:400x&#x27;&lt;/span&gt;,&lt;br/&gt;          changeOrigin: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;          pathRewrite: { &lt;span&gt;&#x27;^/api&#x27;&lt;/span&gt;: &lt;span&gt;&#x27;&#x27;&lt;/span&gt; },&lt;br/&gt;        },&lt;br/&gt;      },&lt;br/&gt;    },&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5 问题讨论&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Q ：JWT如何注销登录？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;A ：由于JWT是无状态的，服务端不存储它，目前为止还没有了解到有什么能够不涉及到服务端存储的注销方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Q ：业务方接入SSO系统，但是没有实现维护登录态的服务，会出现什么问题？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;A ：SSO 系统，本质上仍然是 “授权” 服务， 即提供了集中式的授权管理， 但是“鉴权” 应当业务方自己实现。例如：server通过token获取到了用户的授权信息（user_id之类的），如果业务方不把这个“授权信息（登录态）” 维护起来（session/JWT），那么每次访问都需要再走到SSO Server，走一次完整流程。那么就会导致以下两个问题：1、对SSO server而言流量、请求会被放大；2、对用户而言流程变长、响应时间变慢。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6 补充内容&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6.1 加密算法&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有兴趣的可以看一下这篇文章：&lt;span&gt;浅谈常见的七种加密算法及实现&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加密算法分对称加密和非对称加密，其中对称加密算法的加密与解密密钥相同，非对称加密算法的加密密钥与解密密钥不同，此外，还有一类不需要密钥的散列算法。常见的对称加密算法主要有 &lt;code&gt;DES&lt;/code&gt;、&lt;code&gt;3DES&lt;/code&gt;、&lt;code&gt;AES&lt;/code&gt;等，常见的 非对称算法 主要有&lt;code&gt;RSA&lt;/code&gt;、&lt;code&gt;DSA&lt;/code&gt;等，散列算法 主要有&lt;code&gt;SHA-1&lt;/code&gt;、&lt;code&gt;MD5&lt;/code&gt;等。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.494949494949495&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIpKWDmLvWy7Cl52nWDF1M78gz5bLAvWKtktuXtVTI6PlkxqxSkkgJK1RbORPeBQStwupOR4JT4f0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1386&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哈希算法的特点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;正像快速：原始数据可以快速计算出哈希值；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;逆向困难：通过哈希值基本不可能推导出原始数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;输入敏感：原始数据只要有一点变动，得到的哈希值差别很大；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;冲突避免：很难找到不同的原始数据得到相同的哈希值，宇宙中原子数大约在 10 的 60 次方到 80 次方之间，所以 2 的 256 次方有足够的空间容纳所有的可能；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐阅读&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;傻傻分不清之 Cookie、Session、Token、JWT&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前端需要了解的 SSO 与 CAS 知识&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;OAuth.0原理浅析&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;理解OAuth 2.0&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;OAuth 2.0 的四种方式&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;localhost: &lt;em&gt;http://localhost&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;浅谈常见的七种加密算法及实现: &lt;em&gt;https://juejin.cn/post/6844903638117122056&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;傻傻分不清之 Cookie、Session、Token、JWT: &lt;em&gt;https://juejin.cn/post/6844904034181070861#heading-17&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;前端需要了解的 SSO 与 CAS 知识: &lt;em&gt;https://juejin.cn/post/6844903509272297480&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;OAuth.0原理浅析: &lt;em&gt;https://juejin.cn/post/7010636081305485319&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;理解OAuth 2.0: &lt;em&gt;https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;OAuth 2.0 的四种方式: &lt;em&gt;https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>482a6e1bc574d1497ed0089083f7a415</guid>
<title>Go 瑞士军刀：各种结构的转换工具</title>
<link>https://toutiao.io/k/102z7ud</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                                    


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;23&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;阅读本文大概需要 3 分钟。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是 polarisxu。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上次推荐的 「Go网址导航」，其中收录了一项：转换器。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.525&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UzjmETLXwBZCfCV31QqXqzGwVzqCgNwldYAC7vvHY1RWDddge9KN6bpYUzCicKiaRwulH3S1XrP7ywOtSTo2ZgJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网址是：https://transform.tools/。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个开源项目，项目地址：https://github.com/ritz078/transform，目前 Star 数 2.8k+。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个网站将转换工具分成了几类：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;SVG&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;HTML&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JSON&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JSON Schema&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CSS&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JavaScript&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;GraphQL&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JSON-LD&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TypeScript&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Flow&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Others&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中有一些对 Gopher 比较有用，这里简单列举介绍下。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;01 Go 相关&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JSON 几乎每个程序员都会用到。在 Go 语言中，会有哪些场景会用到这里 JSON 相关工具呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1）转为 struct&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个很常见的场景，目前也存在很多在线工具，支持 JSON 转为 struct，而且我没记错的话，GoLand 自带将 JSON 转为 struct。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;transform 里也有这样的工具：https://transform.tools/json-to-go&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.1953125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UzjmETLXwBZCfCV31QqXqzGwVzqCgNwl3Tfyria91Hibl23XPYFLJQf3hF9o9arZyKO0wGiaHBb7J7WSgzicab9Exw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在左边改动 JSON，右边会实时显示出对应的 struct。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，顶部的向上箭头，是导入文件，支持从本地导入和远程 URL 导入。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2）转为 BSON&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你存储使用的是 MongoDB，会使用到 BSON。不过 JSON 到 BSON 转换几乎不太需要借助工具。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;BSON 是一种类 JSON 的一种二进制形式的存储格式，简称 Binary JSON，它和 JSON 一样，支持内嵌的文档对象和数组对象，但是 BSON 有 JSON 没有的一些数据类型，如 Date 和 BinData 类型。BSON 可以做为网络数据交换的一种存储形式，这个有点类似于 Google 的 Protocol Buffer，但是 BSON 是一种 schema-less 的存储形式，它的优点是灵活性高，但它的缺点是空间利用率不是很理想，BSON有 三个特点：轻量性、可遍历性、高效性。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，BSON 看起来和 JSON 是一样的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.1875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UzjmETLXwBZCfCV31QqXqzGwVzqCgNwlXZjXoEum5obYxJPgQl9bqyhFCgSFQpQeoZDyyYojXh2FEoD3mUV0tg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;02 其他配置文件相关&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前常用的配置文件有：yaml、toml、json、xml 等，它们直接是可以直接转换的。这个网站就提供了相关工具，将一种格式转为另一种格式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如讲 yaml 转为 toml（我喜欢的文件类型）：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.34765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UzjmETLXwBZCfCV31QqXqzGwVzqCgNwlMl9Wozrv5TibXnJEWyO8icVBSGwagj5ibdnDHK9EhZIYn1VV5urib7BCLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;03 总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好的工具可以提升开发速度，我们要善于使用工具。当然，有能力，你也可以自己生产工具。有好工具记得分享，让更多人知晓、使用。&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;往期推荐&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UzjmETLXwBYuP3ncUTaemHXQYjOZDS40VoicqII73Hu9RncJv06g0kJhnrVicSmUfJRg5Wf9qcDHj7zf5vTjns5A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我是 polarisxu，北大硕士毕业，曾在 360 等知名互联网公司工作，10多年技术研发与架构经验！2012 年接触 Go 语言并创建了 Go 语言中文网！著有《&lt;/span&gt;&lt;span&gt;Go语言编程之旅&lt;/span&gt;&lt;span&gt;》、开源图书《&lt;/span&gt;&lt;span&gt;Go语言标准库&lt;/span&gt;&lt;span&gt;》等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;坚持输出技术（包括 Go、Rust 等技术）、职场心得和创业感悟！欢迎关注「polarisxu」一起成长！也欢迎加我微信好友交流：&lt;/span&gt;&lt;span&gt;gopherstudio&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b24fa3ec4c5df831d33291ba17657e22</guid>
<title>ApacheCN Golang 译文集</title>
<link>https://toutiao.io/k/c9ljco1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;snippet-clipboard-content position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;docker pull apachecn0/apachecn-golang-zh&amp;#10;docker run -tid -p &amp;lt;port&amp;gt;:80 apachecn0/apachecn-golang-zh&amp;#10;# 访问 http://localhost:{port} 查看文档&quot;&gt;&lt;pre&gt;&lt;code&gt;docker pull apachecn0/apachecn-golang-zh
docker run -tid -p &amp;lt;port&amp;gt;:80 apachecn0/apachecn-golang-zh
# 访问 http://localhost:{port} 查看文档
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;snippet-clipboard-content position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;pip install apachecn-golang-zh&amp;#10;apachecn-golang-zh &amp;lt;port&amp;gt;&amp;#10;# 访问 http://localhost:{port} 查看文档&quot;&gt;&lt;pre&gt;&lt;code&gt;pip install apachecn-golang-zh
apachecn-golang-zh &amp;lt;port&amp;gt;
# 访问 http://localhost:{port} 查看文档
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;snippet-clipboard-content position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;npm install -g apachecn-golang-zh&amp;#10;apachecn-golang-zh &amp;lt;port&amp;gt;&amp;#10;# 访问 http://localhost:{port} 查看文档&quot;&gt;&lt;pre&gt;&lt;code&gt;npm install -g apachecn-golang-zh
apachecn-golang-zh &amp;lt;port&amp;gt;
# 访问 http://localhost:{port} 查看文档
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8be5190abc4242fc73644149f0c323a0</guid>
<title>轻松容器化 Golang 应用程序</title>
<link>https://toutiao.io/k/ogxv49e</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;section&gt;有一些方法容器化 &lt;code&gt;Golang&lt;/code&gt; 工程，尤其是当您使用 &lt;code&gt;Docker&lt;/code&gt; 运行 &lt;code&gt;Go&lt;/code&gt; 项目的可执行文件时。我们可以从我们的项目中创建我们的镜像，简单地在您的本地计算机上运行它，甚至可以通过从 &lt;code&gt;harbour&lt;/code&gt; 中提取您的镜像运行它。&lt;/section&gt;&lt;h2&gt;&lt;span&gt;# &lt;/span&gt;&lt;span&gt;要求&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;# &lt;/span&gt;&lt;span&gt;入门&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;首先，您需要使用&lt;code&gt;systemctl start docker&lt;/code&gt;或启动您的 &lt;code&gt;docker&lt;/code&gt; 守护进程&lt;code&gt;service docker start&lt;/code&gt;，如果需要必要权限请使用&lt;code&gt;sudo&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;然后我们将创建我们简单的 &lt;code&gt;go HTTP&lt;/code&gt; 代码。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ mkdir &lt;span&gt;go&lt;/span&gt;-dockerfile &amp;amp;&amp;amp; cd &lt;span&gt;go&lt;/span&gt;-dockerfile &lt;br/&gt;$ &lt;span&gt;go&lt;/span&gt; mod init myapp &lt;br/&gt;$ touch server.&lt;span&gt;go&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;server.go：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/joho/godotenv&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; godotenv.Load()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; port := os.Getenv(&lt;span&gt;&quot;PORT&quot;&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; port == &lt;span&gt;&quot;&quot;&lt;/span&gt; {&lt;br/&gt;  port = &lt;span&gt;&quot;8080&quot;&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; router := gin.Default()&lt;br/&gt;&lt;br/&gt; router.GET(&lt;span&gt;&quot;/&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  c.String(&lt;span&gt;200&lt;/span&gt;, &lt;span&gt;&quot;Hello World&quot;&lt;/span&gt;)&lt;br/&gt; })&lt;br/&gt;&lt;br/&gt; router.GET(&lt;span&gt;&quot;/env&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  c.String(&lt;span&gt;200&lt;/span&gt;, &lt;span&gt;&quot;Hello %s&quot;&lt;/span&gt;, os.Getenv(&lt;span&gt;&quot;NAME&quot;&lt;/span&gt;))&lt;br/&gt; })&lt;br/&gt;&lt;br/&gt; router.Run(&lt;span&gt;&quot;:&quot;&lt;/span&gt; + port)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们将包含一个简单的&lt;code&gt;gin&lt;/code&gt;路由器和可选的&lt;code&gt;.server.gogodotenv``/path&lt;/code&gt; 将返回&lt;code&gt;“Hello World”，/envpath&lt;/code&gt; 将返回&lt;code&gt;“Hello ${NAME}”&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;# &lt;/span&gt;&lt;span&gt;Dockerfile&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;有多种编写方式&lt;code&gt;Dockerfile&lt;/code&gt;，但我将使用不同的基础图像制作&lt;/p&gt;&lt;p&gt;3 个示例：&lt;code&gt;golang docker、alpine、scratch&lt;/code&gt;。&lt;/p&gt;&lt;h3&gt; &lt;span&gt;官方Dockerfile&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;FROM golang:&lt;span&gt;1.16&lt;/span&gt;-alpine&lt;br/&gt;&lt;br/&gt;WORKDIR /project/&lt;span&gt;go&lt;/span&gt;-docker/&lt;br/&gt;&lt;br/&gt;# COPY &lt;span&gt;go&lt;/span&gt;.mod, &lt;span&gt;go&lt;/span&gt;.sum and download the dependencies&lt;br/&gt;COPY &lt;span&gt;go&lt;/span&gt;.* ./&lt;br/&gt;RUN &lt;span&gt;go&lt;/span&gt; mod download&lt;br/&gt;&lt;br/&gt;# COPY All things inside the project and build&lt;br/&gt;COPY . .&lt;br/&gt;RUN &lt;span&gt;go&lt;/span&gt; build -o /project/&lt;span&gt;go&lt;/span&gt;-docker/build/myapp .&lt;br/&gt;&lt;br/&gt;EXPOSE &lt;span&gt;8080&lt;/span&gt;&lt;br/&gt;ENTRYPOINT [ &lt;span&gt;&quot;/project/go-docker/build/myapp&quot;&lt;/span&gt; ]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在此Dockerfile，我们将其分为几个部分：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;FROM golang:1.16-alpine，我们将golang:1.16-alpine用作此 Docker 构建的基础镜像。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;WORKDIR, 将是我们命令的工作目录/下一个命令的路径。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;COPY go.* ./，我们将从我们的项目复制go.mod&amp;amp;go.sum文件到工作目录。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;RUN go mod download , 从 go modules 下载项目依赖。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;COPY . . ，将我们项目中的所有内容复制到工作目录中。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;RUN go build -o /project/go-docker/build/myapp ., 在工作目录中构建我们的项目并将其project/go-docker/build/myapp作为二进制文件输出。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;EXPOSE 8080，告诉 docker 我们的代码将暴露端口8080。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ENTRYPOINT [&quot;/project/go-docker/build/myapp&quot;] ，当我们运行这个镜像的容器时，它将从我们的构建可执行文件开始执行。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;之后我们需要运行这个命令：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;docker build -f Dockerfile -t &lt;span&gt;test&lt;/span&gt;-go-docker:latest .&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;-f flag 是我们的Dockerfile.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;-t tag 是镜像标签。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;.命令是当前文件夹下的Dockerfile.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;尝试运行此命令&lt;code&gt;docker images&lt;/code&gt;，例如：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.05153203342618384&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hvZjCFh6diaRDs53Rs3qGl0OBx7E2Oj186EHic4ibVvspWic6pnlgNHUvLPnFUKqkeWBXBoLHxyCMXicvmsSOHf45VA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;718&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;450M&lt;h3&gt; &lt;span&gt;alpine&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;FROM golang:&lt;span&gt;1.16&lt;/span&gt;-alpine as builder&lt;br/&gt;&lt;br/&gt;WORKDIR /project/&lt;span&gt;go&lt;/span&gt;-docker/&lt;br/&gt;&lt;br/&gt;# COPY &lt;span&gt;go&lt;/span&gt;.mod, &lt;span&gt;go&lt;/span&gt;.sum and download the dependencies&lt;br/&gt;COPY &lt;span&gt;go&lt;/span&gt;.* ./&lt;br/&gt;RUN &lt;span&gt;go&lt;/span&gt; mod download&lt;br/&gt;&lt;br/&gt;# COPY All things inside the project and build&lt;br/&gt;COPY . .&lt;br/&gt;RUN &lt;span&gt;go&lt;/span&gt; build -o /project/&lt;span&gt;go&lt;/span&gt;-docker/build/myapp .&lt;br/&gt;&lt;br/&gt;FROM alpine:latest&lt;br/&gt;COPY --from=builder /project/&lt;span&gt;go&lt;/span&gt;-docker/build/myapp /project/&lt;span&gt;go&lt;/span&gt;-docker/build/myapp&lt;br/&gt;&lt;br/&gt;EXPOSE &lt;span&gt;8080&lt;/span&gt;&lt;br/&gt;ENTRYPOINT [ &lt;span&gt;&quot;/project/go-docker/build/myapp&quot;&lt;/span&gt; ]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;与golang 官方基础镜像的区别：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;FROM golang:1.16-alpine as builder，我们将使用golang:1.16-alpine并标记它，builder因为稍后将使用它。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;FROM alpine:latest，我们用alpine作为基础镜像.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;COPY --from=builder /project/go-docker/build/myapp /project/go-docker/build/myapp ，将构建的二进制文件复制到新的 alpine 镜像中。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这个&lt;code&gt;Dockerfile&lt;/code&gt;生成的镜像比之前小得多。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.07823613086770982&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hvZjCFh6diaRDs53Rs3qGl0OBx7E2Oj18pvr5W3v5YBMMKtlpUlgruOXtJKSicP5TR8ZpA10raGSNxsacfhSRf3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;703&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;15.1M&lt;h3&gt; &lt;span&gt;Scratch&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;FROM golang:&lt;span&gt;1.16&lt;/span&gt;-alpine as builder&lt;br/&gt;&lt;br/&gt;WORKDIR /project/&lt;span&gt;go&lt;/span&gt;-docker/&lt;br/&gt;&lt;br/&gt;# COPY &lt;span&gt;go&lt;/span&gt;.mod, &lt;span&gt;go&lt;/span&gt;.sum and download the dependencies&lt;br/&gt;COPY &lt;span&gt;go&lt;/span&gt;.* ./&lt;br/&gt;RUN &lt;span&gt;go&lt;/span&gt; mod download&lt;br/&gt;&lt;br/&gt;# COPY All things inside the project and build&lt;br/&gt;COPY . .&lt;br/&gt;RUN &lt;span&gt;go&lt;/span&gt; build -o /project/&lt;span&gt;go&lt;/span&gt;-docker/build/myapp .&lt;br/&gt;&lt;br/&gt;FROM scratch&lt;br/&gt;COPY --from=builder /project/&lt;span&gt;go&lt;/span&gt;-docker/build/myapp /project/&lt;span&gt;go&lt;/span&gt;-docker/build/myapp&lt;br/&gt;&lt;br/&gt;EXPOSE &lt;span&gt;8080&lt;/span&gt;&lt;br/&gt;ENTRYPOINT [ &lt;span&gt;&quot;/project/go-docker/build/myapp&quot;&lt;/span&gt; ]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于最后一个 &lt;code&gt;Dockerfile&lt;/code&gt;，我们只将&lt;code&gt;alpine&lt;/code&gt;基础镜像更改为&lt;code&gt;scratch&lt;/code&gt;. &lt;code&gt;Scratch&lt;/code&gt; 是一个空镜像，所以一旦容器运行，我们就无法执行到容器中，因为它没有 &lt;code&gt;shell&lt;/code&gt; 命令。如下是输出的 &lt;code&gt;docker images&lt;/code&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.10653409090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hvZjCFh6diaRDs53Rs3qGl0OBx7E2Oj18dBFAmc54SsPiaGW0icuqOw2HEGQriaiaQJSP2c8w5gGicPygQYUFgj7IALg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;704&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;9.52M&lt;p&gt;运行镜像&lt;code&gt;docker run -d -p 8080:8080 test-go-docker:latest&lt;/code&gt;，它将端口8080从容器转发到物理节点8080端口并可以访问&lt;code&gt;http://localhost:8080&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;span&gt;# &lt;/span&gt;&lt;span&gt;结论&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;就我个人而言，我会选择第二个&lt;code&gt;Dockerfile&lt;/code&gt;。为什么？因为体积小而且它还有几个命令和一个&lt;code&gt;shell&lt;/code&gt;命令所以我们可以&lt;code&gt;docker exec&lt;/code&gt;进入容器并访问它。如果我们使用&lt;code&gt;scratch&lt;/code&gt;基础镜像，因为我们无法执行它，所以将很难调试正在运行的容器。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-mpa-template=&quot;t&quot;&gt;&lt;p&gt;   &lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.07625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WLXa0NsmXuiap5yprf7DJXhpdhC0XIBAopbpFTUe1eSSuGbT5Kg63CPBicfpxwLAFIm2wPkicB5NWdSicbzziaibPXSA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93451&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;92877&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;喜欢明哥文章的同学&lt;/section&gt;&lt;section&gt;欢迎长按下图订阅！&lt;/section&gt;&lt;p&gt;⬇⬇⬇&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z9cbLZEggxIpo9uxnz9ibo0GBLOuLy5f8g9JYaGfSM85yYauOiafx2cj04PpT3wfB53FpLuBXqFdV4CgzL0Yjmsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;430&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>