<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ad5745381a9c1b7947750066369392e2</guid>
<title>困在内卷里的工程师 | 码农周刊第 322 期</title>
<link>https://toutiao.io/k/mb7u8g0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;issue&quot; id=&quot;readabilityBody&quot;&gt;
        &lt;h1&gt;困在内卷里的工程师 | 码农周刊第 322 期&lt;/h1&gt;
        &lt;h2&gt;码农周刊第322期（2020-10-21）&lt;/h2&gt;
        &lt;p&gt;☞ &lt;a href=&quot;https://weekly.manong.io/bounce?nid=322&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3220&quot; target=&quot;_blank&quot;&gt;薪资翻番如何实现？程序员的涨薪秘诀&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;a href=&quot;https://weekly.manong.io/bounce?nid=322&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3220&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_321.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;small&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=322&amp;amp;aid=19185&amp;amp;url=https%3A%2F%2Fjinshuju.net%2Ff%2FV7DxN9&quot; target=&quot;_blank&quot;&gt;商务合作&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        
        &lt;h3 id=&quot;程序设计&quot;&gt;程序设计&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;业界实战&lt;/p&gt;
        
        &lt;p&gt;实战经验&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;VIP会员专区&quot;&gt;VIP会员专区&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;工作地点：成都 | 薪资：15-30K | 简历投递邮箱：xiexiaofang@huobi.com&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;功能强大、配置简单、完全开源。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;第三代 AI 发展的思路是把第一代的知识驱动和第二代的数据驱动结合起来，通过利用知识、数据、算法和算力等 4 个要素，构造更强大的 AI……&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;斯坦福教授、Tcl 语言发明者 John Ousterhout 的著作《A Philosophy of Software Design》，自出版以来，好评如潮。&lt;/p&gt;
        &lt;h3 id=&quot;工具资料&quot;&gt;工具资料&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;实战经验&lt;/p&gt;
        
        &lt;p&gt;适合新手&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;试试吧&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;简明介绍&lt;/p&gt;
        
        &lt;p&gt;图文并茂&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;简明介绍&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;简明介绍&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程语言&quot;&gt;编程语言&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;实用&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;一步步教你&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        &lt;h3 id=&quot;每周独家号推荐&quot;&gt;每周独家号推荐&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 448635 即可&lt;/p&gt;
        
        &lt;p&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 429587 即可&lt;/p&gt;
        
        &lt;p&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 412364 即可&lt;/p&gt;
        
        &lt;p&gt;编程、成长、正能量！&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 381811 即可&lt;/p&gt;
        
        &lt;p&gt;分享Go语言相关内容&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 133906 即可&lt;/p&gt;
        &lt;h3 id=&quot;每周一书&quot;&gt;每周一书&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=322&amp;amp;aid=20030&amp;amp;url=https%3A%2F%2Fitem.jd.com%2F12972072.html&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/book_322.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程之外&quot;&gt;编程之外&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;欢迎讨论&lt;/p&gt;
        
        &lt;p&gt;部分适用于百度&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;p&gt;
        &lt;/p&gt;
        
        
        
        
        &lt;div class=&quot;qrcode&quot;&gt;
  &lt;img src=&quot;https://img.toutiao.io/ads/vip_qrcode.png&quot; alt=&quot;Qrcode 258&quot;/&gt;&lt;span&gt;加入码农周刊VIP会员&lt;/span&gt;
&lt;/div&gt;
    &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>91d0e53c8f0c2d231c0e39a748c40c19</guid>
<title>1024，节日快乐！</title>
<link>https://toutiao.io/k/teelwdh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b8aa31da72736c4edd511b97a172efda</guid>
<title>一篇教会你写 90% 的 Shell 脚本</title>
<link>https://toutiao.io/k/l216gug</link>
<content:encoded>&lt;div&gt;&lt;div/&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5111b2acabd366b88f522c6f87986621</guid>
<title>Go 设计模式（二十）：备忘录模式</title>
<link>https://toutiao.io/k/517l41s</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-content mx-auto&quot; id=&quot;post&quot;&gt;&lt;article class=&quot;markdown-body&quot;&gt;&lt;h2 id=&quot;序&quot;&gt;序&lt;/h2&gt;&lt;h2 id=&quot;笔记&quot;&gt;笔记&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://lailin.xyz/images/1603122920375-8b042f89-11bd-455c-8036-58839d7e56e9.png&quot; srcset=&quot;/img/loading.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;代码实现&quot;&gt;代码实现&lt;/h2&gt;&lt;h3 id=&quot;Code&quot;&gt;Code&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;




&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; memento


&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; InputText &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {
content &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;
}


&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(in *InputText)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Append&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(content &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {
in.content += content
}


&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(in *InputText)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GetText&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; in.content
}


&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(in *InputText)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Snapshot&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;Snapshot&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;Snapshot{content: in.content}
}


&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(in *InputText)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Restore&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s *Snapshot)&lt;/span&gt;&lt;/span&gt; {
in.content = s.GetText()
}



&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; Snapshot &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {
content &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;
}


&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *Snapshot)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GetText&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.content
}&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;单元测试&quot;&gt;单元测试&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; memento

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (
&lt;span class=&quot;hljs-string&quot;&gt;&quot;testing&quot;&lt;/span&gt;

&lt;span class=&quot;hljs-string&quot;&gt;&quot;github.com/stretchr/testify/assert&quot;&lt;/span&gt;
)

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TestDemo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {
in := &amp;amp;InputText{}
snapshots := []*Snapshot{}

tests := []&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {
input &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;
want  &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;
}{
{
input: &lt;span class=&quot;hljs-string&quot;&gt;&quot;:list&quot;&lt;/span&gt;,
want:  &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,
},
{
input: &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,
want:  &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,
},
{
input: &lt;span class=&quot;hljs-string&quot;&gt;&quot;:list&quot;&lt;/span&gt;,
want:  &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,
},
{
input: &lt;span class=&quot;hljs-string&quot;&gt;&quot;world&quot;&lt;/span&gt;,
want:  &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,
},
{
input: &lt;span class=&quot;hljs-string&quot;&gt;&quot;:list&quot;&lt;/span&gt;,
want:  &lt;span class=&quot;hljs-string&quot;&gt;&quot;helloworld&quot;&lt;/span&gt;,
},
{
input: &lt;span class=&quot;hljs-string&quot;&gt;&quot;:undo&quot;&lt;/span&gt;,
want:  &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,
},
{
input: &lt;span class=&quot;hljs-string&quot;&gt;&quot;:list&quot;&lt;/span&gt;,
want:  &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,
},
}
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _, tt := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; tests {
t.Run(tt.input, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; tt.input {
&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;:list&quot;&lt;/span&gt;:
assert.Equal(t, tt.want, in.GetText())
&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;:undo&quot;&lt;/span&gt;:
in.Restore(snapshots[&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(snapshots)&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;])
snapshots = snapshots[:&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(snapshots)&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;]
&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:
snapshots = &lt;span class=&quot;hljs-built_in&quot;&gt;append&lt;/span&gt;(snapshots, in.Snapshot())
in.Append(tt.input)
}
})
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/article&gt;&lt;hr/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>71d0dc0f51bc960fa4b50ce7ceff61f5</guid>
<title>在 Zeppelin 中如何使用 Hive</title>
<link>https://toutiao.io/k/oy67od8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5641447368421053&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nKovjAe6LrpaogY0zibicMbajuTCqnBibW3mUlTOcR6BsPE2bCAhGNriaiaG7BchuMhbko8ibicg2VfDDthU2bJalZc5w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;608&quot;/&gt;&lt;/p&gt;&lt;h3&gt;1. 准备工作&lt;/h3&gt;&lt;p&gt;我们来看看强大的 Zeppelin 能够给 Hive 带来什么吧。首先需要安装 Hive 和 Zeppelin。具体请参考如下两篇文章：&lt;/p&gt;&lt;p&gt;完成以上步骤我们才能进行下一步。&lt;/p&gt;&lt;h3&gt;2. Hive 服务&lt;/h3&gt;&lt;p&gt;HiveServer2 是一种可选的 Hive 内置服务，可以允许远程客户端使用不同编程语言向 Hive 提交请求并返回结果。在 Zeppelin 中使用 Hive，也需要开启 HiveServer2 服务：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;hive --service hiveserver2 &amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;&lt;p&gt;具体参考：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0OTYwNTQ4Ng==&amp;amp;mid=2247484384&amp;amp;idx=1&amp;amp;sn=3d4a130fffa7ea280061e3767b542e2e&amp;amp;chksm=e98fbfe1def836f7caf20d4cd33ee20d20797d99b722bc0883c03f22380b4229bc2cbd1b8674&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;如何启动HiveServer2&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;如何启动HiveServer2&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;除此之外，Zeppelin 在访问 Hive 中的数据时需要得到 Hive 中的所有元数据信息，因此需要部署一个 HiveMetaStore 服务提供 Hive 的元数据信息。启动 HiveMetaStore 服务的命令如下：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;hive --service metastore -p 9083 &amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上述表示在后台启动 Hive 的 MetaStore 服务，MetaStore 服务监听 9083 端口，也可以不指定端口而使用默认端口。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;具体参考：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0OTYwNTQ4Ng==&amp;amp;mid=2247484398&amp;amp;idx=1&amp;amp;sn=6f431aced9e5db571b2ffcd3ed1feff4&amp;amp;chksm=e98fbfefdef836f96075dd7bfccba3f84422575481ee06b014f04f1a5c25b5b9e4b94636e30f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Hive元数据服务MetaStore&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Hive元数据服务MetaStore&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;3. 配置Hive解释器&lt;/h3&gt;&lt;p&gt;解释器（Interpreter）是 Zeppelin 里最重要的概念，每一种解释器都对应一个引擎。需要注意的是 Hive 解释器被弃用并合并到 JDBC 解释器中。可以通过使用具有相同功能的 JDBC Interpreter 来使用 Hive Interpreter。Zeppelin 是通过 Hive 的 Jdbc 接口来运行 Hive SQL。&lt;/p&gt;&lt;p&gt;接下来我们可以在 Zeppelin 的 Interpreter 页面配置 Jdbc Interpreter 来启用 Hive。Jdbc Interpreter 可以支持所有 Jdbc 协议的数据库，包括 Hive。Jdbc Interpreter 默认连接 Postgresql。使用 Zeppelin 启动 Hive，我们可以有2种选择：&lt;/p&gt;&lt;p&gt;这里我建议选用第2种方法，针对每一种引擎，单独创建一个解释器。这里我会创建一个新的 Hive Interprete。在解释器页面点击创建按钮，创建一个名为 hive 的解释器，解释器组选择为 jdbc：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.58515625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nKovjAe6LrpaogY0zibicMbajuTCqnBibW3AkSvXOiadkibxQyQEnZ79IQ8ctVUDicDoWZIaNSZCt8kU1IpWQg2wArww/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;具体配置如下所示：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;配置项&lt;/th&gt;&lt;th&gt;配置值&lt;/th&gt;&lt;th&gt;配置说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;default.driver&lt;/td&gt;&lt;td&gt;org.apache.hive.jdbc.HiveDriver&lt;/td&gt;&lt;td&gt;JDBC驱动程序的类路径&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;default.url&lt;/td&gt;&lt;td&gt;jdbc:hive2://localhost:10000&lt;/td&gt;&lt;td&gt;连接 URL&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;default.user&lt;/td&gt;&lt;td&gt;可选&lt;/td&gt;&lt;td&gt;连接用户名&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;default.password&lt;/td&gt;&lt;td&gt;可选&lt;/td&gt;&lt;td&gt;连接密码&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;zeppelin.interpreter.dep.mvnRepo&lt;/td&gt;&lt;td&gt;http://insecure.repo1.maven.org/maven2/&lt;/td&gt;&lt;td&gt;Maven 远程仓库地址&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote&gt;&lt;p&gt;其他选择默认配置&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;default.url 的默认配置形式是 &lt;code&gt;jdbc:hive2://host:port/&amp;lt;db_name&amp;gt;&lt;/code&gt;, 这里的 host 是你的 hiveserver2 的机器名，port 是 hiveserver2 的 thrift 端口 (如果你的 hiveserver2 用的是 binary 模式，那么对应的 hive 的 hive.server2.thrift.port 配置默认为 10000，如果是 http 模式，那么对应的配置默认为 10001。db_name 是你要连的 hive 数据库的名字，默认是 default。&lt;/p&gt;&lt;p&gt;default.driver 配置为 org.apache.hive.jdbc.HiveDriver，因为 Zeppelin 没有把 Hive 打包进去，所以默认情况下找不到这个类，需要我们在这个 Interpreter 配置中添加 Dependency：&lt;/p&gt;&lt;p&gt;如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2046875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nKovjAe6LrpaogY0zibicMbajuTCqnBibW39rBiauADturhWXJ3FlyE0n57kTNzveX039UCBKTn3h2JaLrVj9OPDLg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;依赖的版本具体取决于你的 Hive 和 Hadoop 安装版本。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;需要注意的是 &lt;code&gt;zeppelin.interpreter.dep.mvnRepo&lt;/code&gt; 配置项如果使用默认值 &lt;code&gt;http://repo1.maven.org/maven2/&lt;/code&gt;，在下载依赖时可能会抛出如下异常：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;ERROR [&lt;span&gt;2020&lt;/span&gt;-&lt;span&gt;10&lt;/span&gt;-&lt;span&gt;17&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt;,&lt;span&gt;216&lt;/span&gt;] ({Thread-&lt;span&gt;40&lt;/span&gt;} InterpreterSetting.java[run]:&lt;span&gt;840&lt;/span&gt;) - Error &lt;span&gt;while&lt;/span&gt; downloading repos &lt;span&gt;for&lt;/span&gt; interpreter group : jdbc, go to interpreter setting page click on edit and save it again to make &lt;span&gt;this&lt;/span&gt; interpreter work properly. : Cannot fetch dependencies &lt;span&gt;for&lt;/span&gt; org.apache.hive:hive-jdbc:&lt;span&gt;2.3&lt;/span&gt;.7&lt;/span&gt;&lt;br/&gt;&lt;span&gt;org.sonatype.aether.RepositoryException: Cannot fetch dependencies &lt;span&gt;for&lt;/span&gt; org.apache.hive:hive-jdbc:&lt;span&gt;2.3&lt;/span&gt;.7&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep(DependencyResolver.java:&lt;span&gt;179&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at org.apache.zeppelin.dep.DependencyResolver.loadFromMvn(DependencyResolver.java:&lt;span&gt;128&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at org.apache.zeppelin.dep.DependencyResolver.load(DependencyResolver.java:&lt;span&gt;76&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at org.apache.zeppelin.dep.DependencyResolver.load(DependencyResolver.java:&lt;span&gt;93&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at org.apache.zeppelin.dep.DependencyResolver.load(DependencyResolver.java:&lt;span&gt;85&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at org.apache.zeppelin.interpreter.InterpreterSetting$&lt;span&gt;1&lt;/span&gt;.run(InterpreterSetting.java:&lt;span&gt;832&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;...&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;Caused by: org.sonatype.aether.resolution.ArtifactDescriptorException: Failed to read artifact descriptor &lt;span&gt;for&lt;/span&gt; org.apache.hadoop:hadoop-common:jar:&lt;span&gt;2.7&lt;/span&gt;.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at org.apache.maven.repository.internal.DefaultArtifactDescriptorReader.loadPom(DefaultArtifactDescriptorReader.java:&lt;span&gt;282&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at org.apache.maven.repository.internal.DefaultArtifactDescriptorReader.readArtifactDescriptor(DefaultArtifactDescriptorReader.java:&lt;span&gt;172&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at org.sonatype.aether.impl.internal.DefaultDependencyCollector.process(DefaultDependencyCollector.java:&lt;span&gt;412&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at org.sonatype.aether.impl.internal.DefaultDependencyCollector.process(DefaultDependencyCollector.java:&lt;span&gt;544&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at org.sonatype.aether.impl.internal.DefaultDependencyCollector.process(DefaultDependencyCollector.java:&lt;span&gt;544&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at org.sonatype.aether.impl.internal.DefaultDependencyCollector.collectDependencies(DefaultDependencyCollector.java:&lt;span&gt;240&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;... &lt;span&gt;7&lt;/span&gt; more&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;...&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;Caused by: java.io.IOException: Server returned HTTP response code: &lt;span&gt;501&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; URL: http:&lt;span&gt;//repo1.maven.org/maven2/org/apache/hadoop/hadoop-common/2.7.2/hadoop-common-2.7.2.pom&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:&lt;span&gt;1894&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:&lt;span&gt;1492&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:&lt;span&gt;480&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;at org.apache.maven.wagon.providers.http.LightweightHttpWagon.fillInputData(LightweightHttpWagon.java:&lt;span&gt;115&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;... &lt;span&gt;8&lt;/span&gt; more&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;主要原因是从2020年1月15日开始，Maven 中央存储库不再支持通过纯 HTTP 进行的不安全通信，并且要求对存储库的所有请求都要通过 HTTPS 进行加密。&lt;code&gt;http://repo1.maven.org/maven2/&lt;/code&gt; 需要替换为 &lt;code&gt;https://repo1.maven.org/maven2/&lt;/code&gt;，&lt;code&gt;http://repo.maven.apache.org/maven2/&lt;/code&gt; 需要替换为 &lt;code&gt;https://repo.maven.apache.org/maven2/&lt;/code&gt;。如果你的环境由于某种原因无法支持 HTTPS，可以选择使用 Maven 专用的非安全端点：&lt;code&gt;http://insecure.repo1.maven.org/maven2/&lt;/code&gt;。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;具体参考：Central 501 HTTPS Required&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;除了修改存储仓库的配置项，我们还需要创建一个可用的存储仓库来解析这些依赖。默认自动会创建两个（Central、local），下面我们创建使用 Maven 专用的非安全端点的仓库 Centrals，如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.23984375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nKovjAe6LrpaogY0zibicMbajuTCqnBibW3cib01ePSMK9awJTahf2RIoicIpU4plNDEnvluSyGLK00LszhLe1kQ1YQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nKovjAe6LrpaogY0zibicMbajuTCqnBibW3R7Q991fmrBMpQUq6TN3PMGF15ic3cjQhtateIkicriavfojzXHAw4EiatQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;到此为止，我们就创建好了 Hive 解释器。下面我们具体看看如何在 Zeppelin 中使用 Hive。&lt;/p&gt;&lt;h3&gt;4. 如何使用&lt;/h3&gt;&lt;p&gt;创建一个名为 hive 的 Note，记得勾选选用 Hive 解释器：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6292134831460674&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nKovjAe6LrpaogY0zibicMbajuTCqnBibW3R8uiaGFaSGF16oHJ9ibRwSkPLNEX7t5RL5GI8Iwe2hWTgVItddsicnIWQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1246&quot;/&gt;&lt;/p&gt;&lt;p&gt;输入查询语句，注意查询语句前需要有前缀 &lt;code&gt;%hive&lt;/code&gt;：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.96796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nKovjAe6LrpaogY0zibicMbajuTCqnBibW3yRTtEibvdSicT562xkv5rWvZEAS0tlDZvbWib355fc2S10nBqqo3poAnw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;语句末尾不能加分号，不然会有错误。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;欢迎关注我的公众号和博客：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.595&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nKovjAe6Lrpf4V9hSN3KdTo4gazUTW5qpMzgZ2PndY5EibXXhPvNom3vyFicYIenGYaiatmnQZNLBLSUX33sRTN5g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p&gt;参考：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>