<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>48dcfbb91c22e0a952ebe9fd2660ff13</guid>
<title>看过这篇剖析，你还不懂 Go sync.Map 吗？</title>
<link>https://toutiao.io/k/x1rnpcx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;hi, 大家好，我是 haohongfan。&lt;/p&gt;

&lt;p&gt;本篇文章会从使用方式和源码角度剖析 sync.Map。不过不管是日常开发还是开源项目中，好像 sync.Map 并没有得到很好的利用，大家还是习惯使用 Mutex + Map  来使用。&lt;/p&gt;

&lt;p&gt;下面这段代码，看起来很有道理，其实是用错了（背景：并发场景中获取注册信息）。&lt;/p&gt;

&lt;pre lang=&quot;go&quot;&gt;&lt;code&gt;instance, ok := instanceMap[name]
if ok {
    return instance, nil
}

initLock.Lock()
defer initLock.Unlock()

// double check
instance, ok = instanceMap[name]
if ok {
    return instance, nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里使用使用 sync.Map 会更合理些，因为 sync.Map 底层完全包含了这个逻辑。可能写 Java 的同学看着上面这段代码很眼熟，但确实是用错了，关于为什么用错了以及会造成什么影响，请大家关注后续的文章。&lt;/p&gt;

&lt;p&gt;我大概分析了下大家宁愿使用 Mutex + Map，也不愿使用 sync.Map 的原因：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;sync.Map 本身就很难用，使用起来并不像一个 Map。失去了 map 应有的特权语法，如：make,  map[1] 等&lt;/li&gt;
&lt;li&gt;sync.Map 方法较多。让一个简单的 Map 使用起来有了较高的学习成本。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不管什么样的原因吧，当你读过这篇文章后，在某些特定的并发场景下，建议使用 sync.Map 代替 Map + Mutex 的。&lt;/p&gt;

&lt;h2&gt;用法全解&lt;/h2&gt;

&lt;pre lang=&quot;go&quot;&gt;&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;sync&quot;
)

func main() {
    var syncMap sync.Map
    syncMap.Store(&quot;11&quot;, 11)
    syncMap.Store(&quot;22&quot;, 22)

    fmt.Println(syncMap.Load(&quot;11&quot;)) // 11
    fmt.Println(syncMap.Load(&quot;33&quot;)) // 空

    fmt.Println(syncMap.LoadOrStore(&quot;33&quot;, 33)) // 33
    fmt.Println(syncMap.Load(&quot;33&quot;)) // 33
    fmt.Println(syncMap.LoadAndDelete(&quot;33&quot;)) // 33
    fmt.Println(syncMap.Load(&quot;33&quot;)) // 空

    syncMap.Range(func(key, value interface{}) bool {
        fmt.Printf(&quot;key:%v value:%v\n&quot;, key, value)
        return true
    })
    // key:22 value:22
    // key:11 value:11
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实 sync.Map 并不复杂，只是将普通 map 的相关操作转成对应函数而已。&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th/&gt;
&lt;th&gt;普通 map&lt;/th&gt;
&lt;th&gt;sync.Map&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;map 获取某个 key&lt;/td&gt;
&lt;td&gt;map[1]&lt;/td&gt;
&lt;td&gt;sync.Load(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;map 添加元素&lt;/td&gt;
&lt;td&gt;map[1] = 10&lt;/td&gt;
&lt;td&gt;sync.Store(1, 10)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;map 删除一个 key&lt;/td&gt;
&lt;td&gt;delete(map, 1)&lt;/td&gt;
&lt;td&gt;sync.Delete(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;遍历 map&lt;/td&gt;
&lt;td&gt;for...range&lt;/td&gt;
&lt;td&gt;sync.Range()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;sync.Map 两个特有的函数，不过从字面就能理解是什么意思了。
LoadOrStore：sync.Map 存在就返回，不存在就插入
LoadAndDelete：sync.Map 获取某个 key，如果存在的话，同时删除这个 key&lt;/p&gt;

&lt;h2&gt;源码解析&lt;/h2&gt;

&lt;pre lang=&quot;go&quot;&gt;&lt;code&gt;type Map struct {
    mu Mutex
    read atomic.Value // readOnly  read map
    dirty map[interface{}]*entry  // dirty map
    misses int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e43e8e6d4d5c45e4bd583828ebe90c9a%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;sync map 全景图&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0b2ce0bc920486684e9c8be65bd046c%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;Load&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/372873ca13694fa88db13b17f01f05e3%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;Store&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2eb152ca82e3448ba00dde977fab7ca4%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;Delete&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;read map 的值是什么时间更新的 ？&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Load/LoadOrStore/LoadAndDelete 时，当 misses 数量大于等于 dirty map 的元素个数时，会整体复制 dirty map 到 read map&lt;/li&gt;
&lt;li&gt;Store/LoadOrStore 时，当 read map 中存在这个key，则更新&lt;/li&gt;
&lt;li&gt;Delete/LoadAndDelete 时，如果 read map 中存在这个key，则设置这个值为 nil&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;dirty map 的值是什么时间更新的 ？&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;完全是一个新 key， 第一次插入 sync.Map，必先插入 dirty map&lt;/li&gt;
&lt;li&gt;Store/LoadOrStore 时，当 read map 中不存在这个key，在 dirty map 存在这个key，则更新&lt;/li&gt;
&lt;li&gt;Delete/LoadAndDelete 时，如果 read map 中不存在这个key，在 dirty map 存在这个key，则从 dirty map 中删除这个key&lt;/li&gt;
&lt;li&gt;当 misses 数量大于等于 dirty map 的元素个数时，会整体复制 dirty map 到 read map，同时设置 dirty map 为 nil&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;疑问：当 dirty map 复制到 read map 后，将 dirty map 设置为 nil，也就是 dirty map 中就不存在这个 key 了。如果又新插入某个 key，多次访问后达到了 dirty map 往 read map 复制的条件，如果直接用 read map 覆盖 dirty map，那岂不是就丢了之前在 read map 但不在 dirty map 的 key ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;答：其实并不会。当 dirty map 向 read map 复制后，readOnly.amended 等于了 false。当新插入了一个值时，会将 read map 中的值，重新给 dirty map 赋值一遍，也就是 read map 也会向 dirty map 中复制。&lt;/p&gt;

&lt;pre lang=&quot;go&quot;&gt;&lt;code&gt;func (m *Map) dirtyLocked() {
    if m.dirty != nil {
        return
    }

    read, _ := m.read.Load().(readOnly)
    m.dirty = make(map[interface{}]*entry, len(read.m))
    for k, e := range read.m {
        if !e.tryExpungeLocked() {
            m.dirty[k] = e
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;read map 和 dirty map 是什么时间删除的？&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;当 read map 中存在某个 key 的时候，这个时候只会删除 read map， 并不会删除 dirty map（因为 dirty map 不存在这个值）&lt;/li&gt;
&lt;li&gt;当 read map 中不存在时，才会去删除 dirty map 里面的值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;疑问：如果按照这个删除方式，那岂不是 dirty map 中会有残余的 key，导致没删除掉？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;答：其实并不会。当 misses 数量大于等于 dirty map 的元素个数时，会整体复制 dirty map 到 read map。这个过程中还附带了另外一个操作：将 dirty map 置为 nil。&lt;/p&gt;

&lt;pre lang=&quot;go&quot;&gt;&lt;code&gt;func (m *Map) missLocked() {
    m.misses++
    if m.misses &amp;lt; len(m.dirty) {
        return
    }
    m.read.Store(readOnly{m: m.dirty})
    m.dirty = nil
    m.misses = 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;read map 与 dirty map 的关系 ？&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;在 read map 中存在的值，在 dirty map 中可能不存在。&lt;/li&gt;
&lt;li&gt;在 dirty map 中存在的值，在 read map 中也可能存在。&lt;/li&gt;
&lt;li&gt;当访问多次，发现 dirty map 中存在，read map  中不存在，导致 misses 数量大于等于 dirty map 的元素个数时，会整体复制 dirty map 到 read map。&lt;/li&gt;
&lt;li&gt;当出现 dirty map 向 read map 复制后，dirty map 会被置成 nil。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当出现 dirty map 向 read map 复制后，readOnly.amended 等于了 false。当新插入了一个值时，会将 read map 中的值，重新给 dirty map 赋值一遍&lt;/p&gt;

&lt;h3&gt;read/dirty map 中的值一定是有效的吗？&lt;/h3&gt;

&lt;p&gt;并不一定。放入到 read/dirty map 中的值总共有 3 种类型：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;nil：如果获取到的 value 是 nil，那说明这个 key 是已经删除过的。既不在 read map，也不在 dirty map &lt;/li&gt;
&lt;li&gt;expunged：这个 key 在 dirty map 中是不存在的&lt;/li&gt;
&lt;li&gt;valid：其实就正常的情况，要么这个值存在在 read map 中，要么存在在 dirty map 中
## sync.Map 是如何提高性能的？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过源码解析，我们知道 sync.Map 里面有两个普通 map，read map主要是负责读，dirty map 是负责读和写（加锁）。在读多写少的场景下，read map 的值基本不发生变化，可以让 read map 做到无锁操作，就减少了使用 Mutex + Map 必须的加锁/解锁环节，因此也就提高了性能。&lt;/p&gt;

&lt;p&gt;不过也能够看出来，read map 也是会发生变化的，如果某些 key 写操作特别频繁的话，sync.Map 基本也就退化成了 Mutex + Map（有可能性能还不如 Mutex + Map）。&lt;/p&gt;

&lt;p&gt;所以，不是说使用了 sync.Map 就一定能提高程序性能，我们日常使用中尽量注意拆分粒度来使用 sync.Map。&lt;/p&gt;

&lt;p&gt;关于如何分析 sync.Map 是否优化了程序性能，同样可以使用 pprof。具体过程可以参考 《这可能是最容易理解的 Go Mutex 源码剖析》&lt;/p&gt;

&lt;h2&gt;sync.Map 应用场景&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;读多写少&lt;/li&gt;
&lt;li&gt;写操作也多，但是修改的 key 和读取的 key 特别不重合。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关于第二点我觉得挺扯的，毕竟我们很难把控这一点，不过由于是官方的注释还是放在这里。&lt;/p&gt;

&lt;p&gt;实际开发中我们要注意使用场景和擅用 pprof 来分析程序性能。 &lt;/p&gt;

&lt;h2&gt;sync.Map 使用注意点&lt;/h2&gt;

&lt;p&gt;和 Mutex 一样， sync.Map 也同样不能被复制，因为 atomic.Value 是不能被复制的。&lt;/p&gt;

&lt;h2&gt;参考链接&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://golang.design/under-the-hood/zh-cn/part1basic/ch05sync/map/&quot;&gt;https://golang.design/under-the-hood/zh-cn/part1basic/ch05sync/map/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://draveness.me/golang-sync-primitives/&quot;&gt;https://draveness.me/golang-sync-primitives/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/golang/go/blob/master/src/sync/map.go&quot;&gt;https://github.com/golang/go/blob/master/src/sync/map.go&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;sync.Map 完整流程图获取链接：链接:  &lt;a href=&quot;https://pan.baidu.com/s/1RIX6NKj8UhWkdFyFHptWwg&quot;&gt;https://pan.baidu.com/s/1RIX6NKj8UhWkdFyFHptWwg&lt;/a&gt;  密码: rsg9。&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>70580e71755732f09d58988d3fd7fb3c</guid>
<title>聊聊 Raft 协议</title>
<link>https://toutiao.io/k/zb7loam</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry-content e-content&quot; itemprop=&quot;description articleBody&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;版权声明 本站原创文章 由 萌叔 发表
转载请注明 萌叔 | http://vearne.cc
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;1. 参考资料&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;
The original project authors have created new raft implementations now used in etcd and InfluxDB.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;goraft/raftd&lt;/code&gt;的作者参与了&lt;code&gt;etcd&lt;/code&gt;项目的实现，所以&lt;code&gt;goraft/raftd&lt;/code&gt;是有参考价值的 。另外&lt;code&gt;goraft/raftd&lt;/code&gt;的实现不完整，没有实现&lt;code&gt;Log&lt;/code&gt;擦除等功能，因此不能用于生产环境。&lt;/p&gt;
&lt;h3&gt;2. Node的简单介绍&lt;/h3&gt;
&lt;h4&gt;2.1 node的三种状态(state)&lt;/h4&gt;
&lt;p&gt;图1 有限状态自动机&lt;br/&gt;
&lt;img src=&quot;http://ut-bucket01.sh1a.qingstor.com/woshiaotian/20210412/49c9686a-9b41-11eb-bbaa-784f43a6cab8.png&quot; alt=&quot;&quot; data-pagespeed-url-hash=&quot;4137029170&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leader&lt;/li&gt;
&lt;li&gt;Candidate&lt;/li&gt;
&lt;li&gt;Follower&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2.2 各种存储&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://ut-bucket01.sh1a.qingstor.com/woshiaotian/20210412/f786b7ea-9b42-11eb-a3e6-784f43a6cab8.jpeg&quot; alt=&quot;&quot; data-pagespeed-url-hash=&quot;2223510391&quot;/&gt;&lt;br/&gt;
&lt;img src=&quot;http://ut-bucket01.sh1a.qingstor.com/woshiaotian/20210413/b49a8c16-9c0c-11eb-8f31-784f43a6cab8.jpeg&quot; alt=&quot;&quot; data-pagespeed-url-hash=&quot;640913661&quot;/&gt;&lt;/p&gt;
&lt;h5&gt;2.2.1 Write-Ahead Log（WAL）&lt;/h5&gt;
&lt;p&gt;存储:文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;      4f
    raft:join&quot;&amp;gt;{&quot;name&quot;:&quot;2832bfa&quot;,&quot;connectionString&quot;:&quot;http://localhost:4001&quot;}
       e
raft:nop      4f
    raft:join&quot;&amp;gt;{&quot;name&quot;:&quot;3320b68&quot;,&quot;connectionString&quot;:&quot;http://localhost:4002&quot;}
      4f
    raft:join&quot;&amp;gt;{&quot;name&quot;:&quot;7bd5bdc&quot;,&quot;connectionString&quot;:&quot;http://localhost:4003&quot;}
       e
raft:nop      29
write&quot;{&quot;key&quot;:&quot;foo&quot;,&quot;value&quot;:&quot;bar&quot;}
      29
write&quot;{&quot;key&quot;:&quot;aaa&quot;,&quot;value&quot;:&quot;bbb&quot;}
      29
write&quot;{&quot;key&quot;:&quot;bbb&quot;,&quot;value&quot;:&quot;ccc&quot;}
      29
    write&quot;{&quot;key&quot;:&quot;ddd&quot;,&quot;value&quot;:&quot;eee&quot;}
       e

raft:nop       e

       raft:nop      29

    write&quot;{&quot;key&quot;:&quot;foo&quot;,&quot;value&quot;:&quot;bar&quot;}
      29
    write&quot;{&quot;key&quot;:&quot;foo&quot;,&quot;value&quot;:&quot;bar&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h5&gt;2.2.2 状态信息(状态信息)&lt;/h5&gt;
&lt;p&gt;commitIndex、peer等&lt;/p&gt;
&lt;p&gt;存储:内存&amp;amp;文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;type server struct {
    *eventDispatcher

    name        string
    path        string
    // Leader、Follower 或者 Candidate
    state       string
    transporter Transporter
    context     interface{}
    // 代表它所感知的全局的Term情况
    currentTerm uint64

    votedFor   string
    log        *Log
    // 代表它所感知的全局的leader情况
    leader     string
    peers      map[string]*Peer
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;type Log struct {
    ApplyFunc   func(*LogEntry, Command) (interface{}, error)
    file        *os.File
    path        string
    entries     []*LogEntry
    commitIndex uint64
    mutex       sync.RWMutex
    startIndex  uint64 // the index before the first entry in the Log entries
    startTerm   uint64
    initialized bool
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;goraft&lt;/code&gt;的实现是写完Log.entries, 接着就写WAL&lt;/p&gt;
&lt;h5&gt;2.2.3 内存数据库&lt;/h5&gt;
&lt;p&gt;存储:内存&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;// The key-value database.
type DB struct {
    data  map[string]string
    mutex sync.RWMutex
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;2.3 节点之间的通讯&amp;amp;重要的名词解释&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://ut-bucket01.sh1a.qingstor.com/woshiaotian/20210412/e9e592e6-9b47-11eb-9d60-784f43a6cab8.png&quot; alt=&quot;&quot; data-pagespeed-url-hash=&quot;583801909&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Leader –&amp;gt; Follower&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;{
    &quot;Term&quot;: 17,
    &quot;PrevLogIndex&quot;: 26, 
    &quot;PrevLogTerm&quot;: 17,
    &quot;CommitIndex&quot;: 26,
    &quot;LeaderName&quot;: &quot;2832bfa&quot;,
    &quot;Entries&quot;: [{
        &quot;Index&quot;: 27,
        &quot;Term&quot;: 17,
        &quot;CommandName&quot;: &quot;write&quot;,
        &quot;Command&quot;: &quot;eyJrZXkiOiJhYWEiLCJ2YWx1ZSI6ImJiYiJ9Cg==&quot;
    }]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;名词解释&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Term&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CommitIndex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LogEntry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. Leader Election(选举过程)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:不需要集群中节点的数量是奇数&lt;br/&gt;
可以是4、8个，都没关系&lt;/p&gt;
&lt;h4&gt;3.1 什么时候开始选举？&lt;/h4&gt;
&lt;h4&gt;3.2 投票相关–如何处理VoteRequest&lt;/h4&gt;
&lt;p&gt;看参考资料1.4 的演示动画&lt;br/&gt;
&lt;img src=&quot;http://ut-bucket01.sh1a.qingstor.com/woshiaotian/20210412/dcd25458-9b48-11eb-8c3e-784f43a6cab8.png&quot; alt=&quot;&quot; data-pagespeed-url-hash=&quot;1115556425&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;3.2.1 一个Term期间，最多只能投出1票&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;// VoteRequest中的Term，必须大于本地的currentTerm
    if req.Term &amp;lt; s.Term() {
        s.debugln(&quot;server.rv.deny.vote: cause stale term&quot;)
        return newRequestVoteResponse(s.currentTerm, false), false
    }

    // If the term of the request peer is larger than this node, update the term
    // If the term is equal and we&#x27;ve already voted for a different candidate then
    // don&#x27;t vote for this candidate.
// VoteRequest中的Term，如果大于本地的currentTerm，则更新本地的currentTerm
    if req.Term &amp;gt; s.Term() {
        s.updateCurrentTerm(req.Term, &quot;&quot;)
    } else if s.votedFor != &quot;&quot; &amp;amp;&amp;amp; s.votedFor != req.CandidateName {
        s.debugln(&quot;server.deny.vote: cause duplicate vote: &quot;, req.CandidateName,
            &quot; already vote for &quot;, s.votedFor)
        return newRequestVoteResponse(s.currentTerm, false), false
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;3.2.2 获得投票需要满足的条件&lt;/h4&gt;
&lt;p&gt;raft协议中这样的要求&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
candidate’s log is at least as up-to-date as receiver’s log then vote
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;解释起来，就是必须同时满足以下2个条件，才会给candidate投票&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;candidate.LastLogTerm &amp;gt;= receiver.LastLogTerm&lt;/li&gt;
&lt;li&gt;candidate.LastLogIndex &amp;gt;= receiver.LastLogIndex&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: Log中有擦除情况出现，所以条件1是必须的&lt;/p&gt;
&lt;h4&gt;3.3 当选&amp;amp;当选后的一系列动作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获得&lt;code&gt;majority&lt;/code&gt;投票的候选人当选为&lt;code&gt;Leader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过心跳压制其它&lt;code&gt;Candidate&lt;/code&gt;, 迫使其它&lt;code&gt;Candidate&lt;/code&gt;转变为&lt;code&gt;Follower&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;写入&lt;code&gt;NOPCommand&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://vearne.cc/archives/1851&quot;&gt;聊聊RAFT的一个实现(4)–NOPCOMMAND&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;3.4 一种极端场景&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://ut-bucket01.sh1a.qingstor.com/woshiaotian/20210413/b6749fc6-9bfe-11eb-8307-784f43a6cab8.jpeg&quot; alt=&quot;&quot; data-pagespeed-url-hash=&quot;3790889467&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意1&lt;/strong&gt;: &lt;code&gt;Node B&lt;/code&gt;和&lt;code&gt;Node D&lt;/code&gt;每个节点收到2张选票，&lt;br/&gt;
所以这一轮投票没有选出&lt;code&gt;Leader&lt;/code&gt;。 &lt;code&gt;Node B&lt;/code&gt;和 &lt;code&gt;Node D&lt;/code&gt;的状态仍为&lt;code&gt;candidate&lt;/code&gt;。一段时间后(&lt;code&gt;goraft/raftd&lt;/code&gt;的实现为electionTimeout至2倍electionTimeout之间的随机值)，他们会发起下一轮投票。详情见图1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意2&lt;/strong&gt; 每轮投票&lt;code&gt;Term&lt;/code&gt;均需要加1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. Log Replication(数据写入)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://vearne.cc/archives/1510&quot;&gt;聊聊RAFT的一个实现(3)–commit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ut-bucket01.sh1a.qingstor.com/woshiaotian/20210412/f786b7ea-9b42-11eb-a3e6-784f43a6cab8.jpeg&quot; alt=&quot;&quot; data-pagespeed-url-hash=&quot;2223510391&quot;/&gt;&lt;br/&gt;
Step0. &lt;code&gt;Client&lt;/code&gt;发出&lt;code&gt;WriteCommand&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Step1. 先写&lt;code&gt;Leader&lt;/code&gt;的Log&lt;/p&gt;
&lt;p&gt;Step2. 在通过AppendRequest，写&lt;code&gt;Follower&lt;/code&gt;的Log&lt;/p&gt;
&lt;p&gt;Step3. 执行&lt;code&gt;Leader&lt;/code&gt;的Commit(写内存数据库)&lt;/p&gt;
&lt;p&gt;Step4. 执行&lt;code&gt;Follower&lt;/code&gt;的Commit&lt;/p&gt;
&lt;p&gt;Step5. 给&lt;code&gt;Client&lt;/code&gt;返回结果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意1:&lt;/strong&gt; 写入动作，只能由&lt;code&gt;Leader&lt;/code&gt;来发起, 在&lt;code&gt;goraft/raftd&lt;/code&gt;的实现里，&lt;code&gt;Follower&lt;/code&gt;会直接拒绝执行&lt;code&gt;WriteCommand&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意2&lt;/strong&gt;: Step5 不需要等到Step4完全完成(收到Follower的response) 就可以开始执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;&lt;p&gt;
只要client等到leader完成Commit动作。即使后续leader发生变更或部分节点崩溃，raft协议可以保证，client所提交的改动依然有效。
&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;5. 数据读取&amp;amp;watch&lt;/h3&gt;
&lt;h4&gt;5.1 默认consul有3种一致性模型&lt;/h4&gt;

&lt;p&gt;默认情况下，consul server(follower）不提供数据查询，仅转发请求给consul server(leader）&lt;br/&gt;
&lt;a href=&quot;https://www.consul.io/api/features/consistency&quot;&gt;consistency&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中consistent模式是强一致性的，其它两种模式都不能保证强一致性。用stale模式可以提高吞吐能力，当然数据短时间内可能会有不一致问题&lt;/p&gt;
&lt;h4&gt;5.2 &lt;code&gt;default&lt;/code&gt;和&lt;code&gt;consistent&lt;/code&gt;模式的区别&lt;/h4&gt;
&lt;h4&gt;5.3 如何使用stale模型&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;curl -v &#x27;http://dev1:8500/v1/health/service/es?dc=dc1&amp;amp;passing=1&amp;amp;stale
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ut-bucket01.sh1a.qingstor.com/woshiaotian/20210412/e97f1c6a-9b64-11eb-a499-784f43a6cab8.jpeg&quot; alt=&quot;&quot; data-pagespeed-url-hash=&quot;2025687919&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;5.4 watch是怎么回事？&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://vearne.cc/archives/13983&quot;&gt;玩转CONSUL(1)–WATCH机制探究&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h4&gt;打赏我&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/woshiaotian/ohw8kvpn5k7hthgbuol4e4aq/WechatIMG29.jpg&quot; alt=&quot;微信支付码&quot; data-pagespeed-url-hash=&quot;2495828515&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;clear&quot;/&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b8c6f445dee97a93f0c0f3952dfef6f1</guid>
<title>这 11 款 Chrome 神器，用起来爽到爆</title>
<link>https://toutiao.io/k/czntgsa</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/uL371281oDG1aKYT4MgSzhPd7NyIHWcFmbEM5EqlTY8CnLMLiaSBXAYZdJVB9VlDibMibrKsPNvs4MMEWXG6IZ7TA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxODkzNTQ3Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uL371281oDFEpxenPicr7Kh8c9P0I97yVWw9JfljjPy5gVBLDiaIrWkzAGHGib09Kib4TQtyw8jpLicW3yoyibMY8yMA/0?wx_fmt=png&quot; data-nickname=&quot;苏三说技术&quot; data-alias=&quot;susanSayJava&quot; data-signature=&quot;「苏三说技术」 维护者目前就职于某知名互联网公司，从事开发、架构和部分管理工作。实战经验丰富，对jdk、spring、springboot、springcloud、mybatis等开源框架源码有一定研究，欢迎关注，和我一起交流。&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于从事IT行业的我们来说，几乎无时无刻都在用chrome浏览器，因为它给我们的工作和生活带来了极大的便利。今天给大家分享我用过的&lt;code&gt;11&lt;/code&gt;款牛逼的&lt;code&gt;chrome插件&lt;/code&gt;，你看完前&lt;code&gt;3&lt;/code&gt;个可能就会忍不住想&lt;code&gt;点赞&lt;/code&gt;了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 谷歌翻译&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多小伙伴，英语不太好，包括我自己，英语刚过四级。从事软件相关工作时，有时有些吃力，因为很多优秀的技术网站、书籍或者文章都是老外写的，如果因为看不懂就放弃阅读，我们将会少了很多学习和进步的机会。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天分享的第一个神器就是：&lt;code&gt;谷歌翻译&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在没使用谷歌翻译之前，访问https://docs.mongodb.com/drivers/java/，看到的页面是这样的，有可能一脸懵逼。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5417348608837971&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE8cbV3ibotGd6sIHV79ticQBGWPLyzb1iavGLLnRNNXYYyKhJMv8uIUHE1wpsAYYMOlFfgxeNXU1wxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2444&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用&lt;code&gt;谷歌翻译&lt;/code&gt;插件（其实现在已经是chrome浏览器的内置工具）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.14833501513622604&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE8cbV3ibotGd6sIHV79ticQBrZ2sp8nCTNhric5ZibkGia8f3hUBQBSdVPvyWzIKqL9LxnN0WqJetnLnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1982&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后看到的页面，变得毫无违和感：&lt;img data-ratio=&quot;0.5345659163987139&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE8cbV3ibotGd6sIHV79ticQBH8ALdoDRWCXnSyraw3iamYJdsw9cnGia9glgZO13ptJ7MtOZV7bmytuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2488&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;页面内容一下子变成了全中文，幸福来得太突然了，哈哈哈。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. github加速器&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;github&lt;/code&gt;号称是全球第一大同性交友网站，它是程序员的乐园，里面有各种好玩的开源项目。很多编程爱好者，秉承share精神，喜欢把自己优秀代码提交到&lt;code&gt;github&lt;/code&gt;上，能够让更多的人看到，帮助更多的人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，在国内对&lt;code&gt;github&lt;/code&gt;访问非常慢，是很多程序员非常头疼的一件事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.62472647702407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE8cbV3ibotGd6sIHV79ticQBwH6jh8puEuKpl96v1Zj2mj2C2Ne4lS2FwZxpm2BiaCukdiaKP1tE6bRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1828&quot;/&gt;这时可以用&lt;code&gt;github加速器&lt;/code&gt;插件：&lt;img data-ratio=&quot;0.5199004975124378&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE8cbV3ibotGd6sIHV79ticQBPqVCHIn1jIt4Yztpt3Fv6zpUoPc1MR28A4aDwVcZ18J0rj4y0FTiafA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;804&quot;/&gt;开启插件功能后，再访问该页面：&lt;img data-ratio=&quot;0.5622389306599833&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE8cbV3ibotGd6sIHV79ticQBiaNV8b3854ibnDibW2UqxJjIAHlBrKTMk1aXhTrwaic02XVD386O3esk3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2394&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;2秒&lt;/code&gt;后就能非常愉快的访问&lt;code&gt;github&lt;/code&gt;了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. Octotree&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;github&lt;/code&gt;上默认的项目展示页面，对用户不太友好。如果想要查找某个文件，必须一层层点击往下找，默认是平铺展示内容，无法用树形结构展示。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认的页面是长这样子：&lt;img data-ratio=&quot;0.518784972022382&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE8cbV3ibotGd6sIHV79ticQB6z25C54HOibw0HYicW7BrrGuaDbEPQb0K4sAxxl0h6sibf2mzx0Riaa6UQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2502&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果安装了Octotree插件：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5150753768844221&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE8cbV3ibotGd6sIHV79ticQBJibWO5hLJONzY11Grfic7iadWH2mUWcwaZ3TsyMLFZ4ftF5sTrZoy6C1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;796&quot;/&gt;之后，多了一个树状目录：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5524769101595298&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE8cbV3ibotGd6sIHV79ticQBudBbtc1KpM6EvMvMJIJ9wshDtGdVJS1gSL1kbGSRkll2SsYdXhK3dg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2382&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以非常方便的查找某个文件。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4. Infinity&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道你有没有过这种想法：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;觉得自己的浏览器首页太low，想换个背景，不知道怎么换。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;想把自己收藏起来的网站，放在显目的地方，让自己方便访问。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;想把搜索引擎放在首页一下子就能看到。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;恭喜你，这些需求chrome神器：&lt;code&gt;Infinity&lt;/code&gt;都能帮你实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要安装Infinity插件：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5252525252525253&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE3zoqFKQ66iaAbic6ciahxIBbMkgWJbxk8XVe8DuIsyI7pUibwzPWGUDoIjSeRYjiakWE8RCmdagWxtFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;792&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后打开浏览器时，就会自动弹出如下页面：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.53515625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE3zoqFKQ66iaAbic6ciahxIBb1oYxe7fZnsTojEs9IpHLYDujYJ4XOwc9qPdOmCH35bUJf7OuBib3ZMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可以自定义你喜欢的任何网站：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.52734375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE3zoqFKQ66iaAbic6ciahxIBbpw1buVvthP5BbQnUEoPcNs5GB2JvBG5ia5lkndian7uneIDuibmhHdW8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;此外，首页右下角的小风车，点击一下就能自动切换一张漂亮的背景图片。据说每天点一下小风车，每天都会拥有好心情。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5. vue.js devtools&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果有接触过前端的朋友会发现，现在基本上是：&lt;code&gt;react&lt;/code&gt; 和 &lt;code&gt;vue&lt;/code&gt; 的天下。我本身是做后端开发的，相较而言，使用更多的是 &lt;span&gt;vue&lt;/span&gt;，它配合&lt;span&gt;Element UI&lt;/span&gt;一起使用，大大提升了开发页面的效率。&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果代码运行时出问题了，想调试怎么办？使用传统的&lt;span&gt;debugger&lt;/span&gt;模式，不是说不行，不过我在这里推荐一个更牛逼的调试方法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;需要安装&lt;span&gt;vue.js devtools&lt;/span&gt;插件：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.513715710723192&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE3zoqFKQ66iaAbic6ciahxIBbwsTxMWcU3rf1JSHPxcZfFW9pmbVZmjMPIFkTRocUwade8sVxia8LuXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;802&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;之后，访问页面时，就能调试了：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.48427672955974843&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE3zoqFKQ66iaAbic6ciahxIBb8fKGNJKogZnKc8UwDuKzElr1342VuOYYhl6wN3q4LLHFq24RNJLSnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1272&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;你想看到的大部分内容，这里都有。是不是很神奇？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6. ImageAssistant&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在平时的工作或生活当中，我们经常需要上传和下载图片。如果在浏览网页的时，喜欢某些图片，我们需要一张张手动下载，非常不方便。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有时候需要对上传的图片进行编辑，调整文字大小、样式，加一些水印效果等。我们一般需要先使用专业的图片工具，把图片编辑好，再重新上传，很麻烦。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有没有一款软件，可以帮我们解决这些问题呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;答案是肯定的，这时可以使用google的&lt;span&gt;ImageAssistant&lt;/span&gt;插件：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.52&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3wW2hgFThLtkFrV3Z0ANG2iaG82vVZXB8ekah9P8ic1x1BQtRicg5E3GpBxBm9WzGPPaFSOheEY1cw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;之后，访问网页时选择 &lt;span&gt;提取本页图片&lt;/span&gt;：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5247275775356245&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3wW2hgFThLtkFrV3Z0ANGVdvBGYsWfICcInka8NX4a98haqEGIw35oVYRaCB0QOibicPcMBvGsIibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2386&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;就会出现如下网页：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5049261083743842&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3wW2hgFThLtkFrV3Z0ANGGaTicdDD7YnkHQEjXgYI524V3Zgfrv3MdibRqWO5GI4rchmvC7lytT0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2436&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;该网页中展示了之前页面中的所有图片，包括尺寸等信息，可以批量下载。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;此外，还能对上传的图片进行编辑：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4887029288702929&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3wW2hgFThLtkFrV3Z0ANGBULsD6Og0N5YXnshDEiaUwbqicpwVSUHyOQC3ykDib0WibGBhiaCpkToP7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2390&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;看到这里，你爱上它了没？反正我是爱不释手。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7. LastPass&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着互联网的蓬勃发展，出现了越来越多的网站，其中大部分网站为了保持用户的粘性，需要用户自己注册和登录。为了安全起见，用户密码一般要求包含：数字、字母、特殊字符、还要区分大小写等，并且要求密码长度少则8位，多则十几位。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了方便，你可以将所有密码设置成一样，但是如果一旦泄露，所有网站上你相关信息都可能会被泄露，风险太高。&lt;span&gt;所以&lt;/span&gt;&lt;span&gt;，还是把&lt;/span&gt;&lt;span&gt;密码设置成不一样吧，&lt;/span&gt;&lt;span&gt;这样我们睡觉也&lt;/span&gt;&lt;span&gt;安心一点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果你只注册了一两个网站还好，但如果你过注册过几十个，甚至上百个网站，那么多密码你都能记得住？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;答案是否定的，这时就急需一种安全管理密码的工具。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这时又一个chrome神器:&lt;code&gt;LastPass&lt;/code&gt;出现了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5240506329113924&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3wW2hgFThLtkFrV3Z0ANGN41KDhosnmibDiaFXQia3olWWTUdjq7OcVmeMcNh6pXpXXfekujicZf66g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;790&quot;/&gt;&lt;/p&gt;&lt;p&gt;它需要先注册，这一步很容易完成。然后添加想访问的网站地址、用户名和密码，以后想访问该网站，直接点击一下即可，就不用再重复输入用户名和密码，方便快速访问，并且自动登录。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6554149085794655&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3wW2hgFThLtkFrV3Z0ANGQaF5zwcXbogrQ9trgicJibicRsJLpVOWZowxZONKFhpqIBnQExChs39tw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1422&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;LastPass&lt;/span&gt;的功能非常强大，其他类似的插件还有：1Password、Bitwarden等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8. adblock&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们在浏览网页的时候，经常会发现广告像狗皮膏药一样，无处不在，如影随形。有些页面甚至广告就占了整个屏幕的一半，真正的有价值的信息，&lt;span&gt;我们&lt;/span&gt;每次都需要用肉眼一一分辨出来，相当让人抓狂，大大增加了搜索资料的时间。这也是很多人喜欢用&lt;span&gt;google&lt;/span&gt;搜索资料，不喜欢用&lt;span&gt;baidu&lt;/span&gt;的主要原因。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有没有办法，屏蔽掉一些多余的广告，让我们能看到净化后的页面内容呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;答案是有的，可以使用&lt;span&gt;A&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;Block&lt;/span&gt;，它是目前世界排名第一的免费广告拦截程序。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要安装&lt;code&gt;AdBlock&lt;/code&gt;插件：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5275&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE3zoqFKQ66iaAbic6ciahxIBbfwTBV7r0SJdWu3kHMN5jX9eJ9L6plpMtahAZAVnRrzgRZricZMsR4Sg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;之后，就能使用&lt;code&gt;AdBlock&lt;/code&gt;拦截广告了。一种方式是自定义拦截规则，不过有些复杂，需要仔细研究一下。还有另外一种手动的方式，这种方式相对来说更简单，在需要屏蔽的广告上右键，在弹窗的工具窗口中选择AdBlock中的选项即可。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5478489903424056&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE3zoqFKQ66iaAbic6ciahxIBbjoov3bwNTuicP5Lf2icwbjGQTJkaSUevsHlwuEuR6W4tDRbCr2wG3Bqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2278&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;好了，世界终于清净了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;9. markdown nice&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于有些写公众号的朋友来说，在文章排版上花费的时间，有可能比写一篇文章的时间还多。为了解决写文章时的排版问题，一些强大的排版工具应运而生，&lt;span&gt;比如：&lt;/span&gt;&lt;code&gt;md2all&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;markdown nice&lt;/code&gt;&lt;span&gt; ，能够解放他们的双手，让他们可以把更多的时间花在文章内容上&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;需要安装&lt;span&gt;markdown nice&lt;/span&gt;插件：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.513715710723192&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE8cbV3ibotGd6sIHV79ticQB0n6NwWL4t9kkjJOR1Xl7zutTwvK5qTufbBUmZqibzFuC6ib9cocmhrEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;802&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;之后，在公众号后台写文章时，你只用专注于写&lt;code&gt;markdown&lt;/code&gt;语法的文章即可，然后选择一种主题和代码主题，其他的交给插件。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5842894969108562&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE8cbV3ibotGd6sIHV79ticQBaNb6JwalnAgictUVkibesiaiaaps2dnaVmVzx2KGBWNU4JDoX97q78uLIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2266&quot;/&gt;&lt;/p&gt;&lt;p&gt;最终文章会自动生成左半部分的样式，是不是很nice？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10. 掘金&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在国内程序员平时喜欢逛的技术网站，比如：CSDN、博客园、开源中国、思否、51CTO、掘金等。尤其是最近几年，掘金越来越受到广大程序员的喜爱，它是一个帮助程序员成长的网站。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以前需要访问地址：https://juejin.cn/，才能访问技术文章，访问其他技术网站也类似，必须手动输入网站地址。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.46742957746478875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE8cbV3ibotGd6sIHV79ticQBQvtVAibscENfRzk4KXvjtPRZtZp2NMOnTQEVbh4e3bU8pMkdficM8Ddg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2272&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果安装了掘金插件：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5186104218362283&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE8cbV3ibotGd6sIHV79ticQB4fCsPWQPiaNmFe7G6ve8UmbJdjecXdznKTwOupMwTmhSR9pp4m3IzaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;806&quot;/&gt;之后，在打开chrome浏览器的时候，首页默认访问就是掘金，给我们节省了非常多的时间。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5483050847457627&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE8cbV3ibotGd6sIHV79ticQBiaLFicRNkYS8ZTticYeLiawW8LMDQXTibESGic1nIE9f2L9araicOjZzVmusg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2360&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它里面包含两大块：&lt;code&gt;掘金&lt;/code&gt; 和 &lt;code&gt;github&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;掘金可以按类型，比如：后端、前端、IOS、人工智能等，还有热门和最新 过滤文章。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;github可以按 热门 和 新生，以及时间维度：今日、本周、本月，查询排名靠前的开源项目。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些不都是我们一直都想要的吗？简直太给力了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;11. JSONView&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;数据格式简单，结构化，层次分明，是开发人员最常用的数据格式，目前是大部分接口返回值的首先。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时我们在浏览器中访问get请求数据，由于接口返回值太多，一眼根本无法看出数据的层次和结构，顿时有点懵逼。针对这种情况，很多人可能会想到，将数据复制到一些在线的Json工具，或者使用postman发送请求，这样就能非常愉快的浏览格式化的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样不是不行，我想说的是，其实不用这么麻烦，还有更简单的方式。只用安装一款chrome插件，在浏览器中，就能轻松访问&lt;span&gt;浏览&lt;/span&gt;&lt;span&gt;格式化&lt;/span&gt;&lt;span&gt;的数据。&lt;/span&gt;这款插件的名字是：&lt;code&gt;JSONView&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5264483627204031&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3wW2hgFThLtkFrV3Z0ANGiaWazU8IC3uEzUC571axoX2WZR5icF47J6waesagGZRIYlVOQQOpNb5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;794&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;之后，再访问接口时，就能看到更人性化的数据了：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8370786516853933&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3wW2hgFThLtkFrV3Z0ANGicOh9WFk7jbLWicor2pvYJgm9tHAPb8OWZqCkeCDovHIVN3aeHbAukzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1068&quot;/&gt;&lt;/p&gt;&lt;p&gt;不说了，这就是我想要的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;其实在我实际工作和生活中，使用过的插件远不止这11种。由于众所众知的原因，很多好插件不便于分享，如果有感兴趣的朋友，可以关注我的公众号，找我私聊，绝对不虚此行。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后说一句(求关注，别白嫖我)&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果这篇文章对您有所帮助，或者有所启发的话，帮忙扫描下发二维码关注一下，您的支持是我坚持写作最大的动力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;求一键三连：点赞、转发、在看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关注公众号：【苏三说技术】，在公众号中回复：面试、代码神器、开发手册、时间管理有超赞的粉丝福利，另外回复：加群，可以跟很多BAT大厂的前辈交流和学习。&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxODkzNTQ3Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uL371281oDFEpxenPicr7Kh8c9P0I97yVWw9JfljjPy5gVBLDiaIrWkzAGHGib09Kib4TQtyw8jpLicW3yoyibMY8yMA/0?wx_fmt=png&quot; data-nickname=&quot;苏三说技术&quot; data-alias=&quot;susanSayJava&quot; data-signature=&quot;「苏三说技术」 维护者目前就职于某知名互联网公司，从事开发、架构和部分管理工作。实战经验丰富，对jdk、spring、springboot、springcloud、mybatis等开源框架源码有一定研究，欢迎关注，和我一起交流。&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4cdf12d7c48c9457ff46d94507e1f798</guid>
<title>MySQL 提升笔记（二）：存储引擎盘点</title>
<link>https://toutiao.io/k/m3yyxtk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkwODE5ODM0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWeFt08hV3N1706WTzfhoTNoXm5LXRV0XibppmeNR4zSNMa3QOJJ7ib4O21P5yohibwuD26Tp9ETWZAqA/0?wx_fmt=png&quot; data-nickname=&quot;三分恶&quot; data-alias=&quot;Fighter3FullStack&quot; data-signature=&quot;一个全栈开发。分享Java后端、Web前端、计算机基础知识。&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在前面我们了解了server层调用存储引擎层接口来完成sql的执行，使用存储引擎的好处是：每个存储引擎都有各自的特点，能够根据具体的应用建立不同存储引擎表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;需要注意的是，存储引擎是基于表的，而不是数据库&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MySQL 5.7 支持的存储引擎有 InnoDB、MyISAM、Memory、Merge、Archive、Federated、CSV、BLACKHOLE 等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中最常用的3种，InnoDB、MyISAM、Memory，MySQL5.5.8以后，默认存储引擎为InnoDB。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、常用存储引擎&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1、InnoDB存储引擎&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InnoDB是MySQL的默认事务型引擎，也是最重要、使用最广泛的存储引擎。特点是行锁设计，支持外键，5.6之后支持全文索引。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InnoDB的数据存储在一个逻辑表空间（tablespace）中，表空间是由InnoDB管理的一个黑盒，由一系列的数据文件组成。在MySQL 4.1以后的版本中，InnoDB可以将每个表的数据和索引存放在单独的文件中。InnoDB也可以使用裸设备作为表空间的存储介质。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InnoDB采用MVCC来支持高并发，并且实现了四个标准的隔离级别。其默认级别是REPEATABLE READ（可重复读），并且通过间隙锁（next-key locking）策略防止幻读的出现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，InnoDB存储引擎还提供了插入缓冲（insert buffer）、二次写（double write）、自适应哈希索引（adaptive hash index）、预读（read ahead）等高性能和高可用的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InnoDB表是基于聚簇索引建立的，InnoDB的索引结构和MySQL的其他存储引擎有很大的不同，聚簇索引对主键查询有很高的性能。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5051282051282051&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWdJhaVazLGBgWIqDE2z0iakrI5MkE0e0D4FQTJOnJr5HgfTrbCxWjLzHYRPLYmLiauGwHxzibmjK674A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1170&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;主键索引&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InnoDB内部做了很多优化，包括从磁盘读取数据时采用的可预测性预读，能够自动在内存中创建hash索引以加速读操作的自适应哈希索引（adaptive hash index），以及能够加速插入操作的插入缓冲区（insert buffer）等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2、MyISAM存储引擎&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MyISAM存储引擎不支持事务、只支持表锁、支持全文索引。在MySQL5.5之前是MySQl默认的存储引擎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MyISAM对整张表加锁，而不是针对行。读取时会对需要读到的所有表加共享锁，写入时则对表加排他锁。但是在表有读取查询的同时，也可以往表中插入新的记录（这被称为并发插入，CONCURRENT INSERT）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MyISAM存储引擎表是由MYD和MYI组成，MYD用来存放数据文件，MYI用来存放索引文件。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.17937219730941703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWdJhaVazLGBgWIqDE2z0iakrOuugmaEMdTxugr9BRqtbAO4WeYXPQ2v5aNVs6EJwlw36qwAiaVLIuSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;446&quot;/&gt;&lt;figcaption&gt;MyISAM表文件&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MyISAM引擎设计简单，数据以紧密格式存储，所以在某些场景下的性能很好。MyISAM有一些服务器级别的性能扩展限制，比如对索引键缓冲区（key cache）的Mutex锁，MariaDB基于段（segment）的索引键缓冲区机制来避免该问题。但MyISAM最典型的性能问题还是表锁的问题，很容易导致所有的查询都长期处于“Locked”状态。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.3、Memory存储引擎&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Memory可以理解为临时表——当然二者不是一个东西。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Memory存储引擎将表中的数据存放在内存中，不需要进行磁盘I/O，速度非常快。但是如果数据库重启或者崩溃，Memory表的结构会保留，但表里的数据都会丢失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Memroy表在很多场景可以发挥好的作用：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;用于查找（lookup）或者映射（mapping）表，例如将邮编和地名映射的表。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用于缓存周期性聚合数据（periodically aggregated data）的结果。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用于保存数据分析中产生的中间数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Memory表默认使用Hash索引，因此查找操作非常快。虽然Memory表的速度非常快，但还是无法取代传统的基于磁盘的表。Memroy表是表级锁，因此并发写入的性能较低。它不支持BLOB或TEXT类型的列，并且每行的长度是固定的，所以即使指定了VARCHAR列，实际存储时也会转换成CHAR，这可能导致部分内存的浪费（其中一些限制在Percona版本已经解决）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果MySQL在执行查询的过程中需要使用临时表来保存中间结果，内部使用的临时表就是Memory表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果中间结果太大超出了Memory表的限制，或者含有BLOB或TEXT字段，则临时表会转换成MyISAM表。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、存储引擎对比&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不同的存储引擎都有各自的特点，以适应不同的需求，如表所示。为了做出选择，首先要考虑每一个存储引擎提供了哪些不同的功能。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;功能&lt;/th&gt;&lt;th&gt;MylSAM&lt;/th&gt;&lt;th&gt;MEMORY&lt;/th&gt;&lt;th&gt;InnoDB&lt;/th&gt;&lt;th&gt;Archive&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;存储限制&lt;/td&gt;&lt;td&gt;256TB&lt;/td&gt;&lt;td&gt;RAM&lt;/td&gt;&lt;td&gt;64TB&lt;/td&gt;&lt;td&gt;None&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;支持事务&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;支持全文索引&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;支持树索引&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;支持哈希索引&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;支持数据缓存&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;支持外键&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;InnoDB支持的哈希索引是自适应的，InnoDB会根据表的使用情况自动为表生成哈希索引，不能人为干预是否在一张表中生成哈希索引。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;MySQL 5.6开始InnoDB支持全文索引。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以根据以下的原则来选择 MySQL 存储引擎：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 是一个很好的选择。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果只有 INSERT 和 SELECT 操作，可以选择Archive 引擎，Archive 存储引擎支持高并发的插入操作，但是本身并不是事务安全的。Archive 存储引擎非常适合存储归档数据，如记录日志信息可以使用 Archive 引擎。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;提示&lt;/code&gt;：使用哪一种引擎要根据需要灵活选择，因为存储引擎是基于表的，所以一个数据库中多个表可以使用不同的引擎以满足各种性能和实际需求。使用合适的存储引擎将会提高整个数据库的性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般MySQL的深入都是围绕InnoDB展开。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;big&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/big&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【1】：《高性能MySQL》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【2】：极客时间 《MySQL实战45讲》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【3】：《MySQL技术内幕 InnoDB存储引擎》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【4】：MySQL存储引擎精讲（附带各种存储引擎的对比）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【5】：MySQL - 常用存储引擎区别总结（2020最新版）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;系列目录：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&amp;amp;mid=2247485701&amp;amp;idx=1&amp;amp;sn=bb66ed8733dac01eed2585a5b88ac1ca&amp;amp;chksm=c0cce1a0f7bb68b61cdd51fe4f388ce4e3a3cb48d95e22eea75c80c366cffe3c5ef9756c0c8d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;MYSQL提升笔记（1）：MySQL逻辑架构&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkwODE5ODM0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWeFt08hV3N1706WTzfhoTNoXm5LXRV0XibppmeNR4zSNMa3QOJJ7ib4O21P5yohibwuD26Tp9ETWZAqA/0?wx_fmt=png&quot; data-nickname=&quot;三分恶&quot; data-alias=&quot;Fighter3FullStack&quot; data-signature=&quot;一个全栈开发。分享Java后端、Web前端、计算机基础知识。&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;204&quot; data-backw=&quot;558&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWdBLml8yqRnW8SzBIzu9h5RZaLdMfqqUt3mXMbX3bO0nu0FyfqotEfYm56F1xTqoqsmrQn3icGJ6Dw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ae8f81c3b1d6e7802de92cc9493e238c</guid>
<title>好代码实践：基于 Redis 的轻量级分布式均衡消费队列</title>
<link>https://toutiao.io/k/mg4sote</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKCBHZSLXXMiaicElAGWfOX2G4hiasoMhOpicpX3nKQm41pfJXKicZ3wNpFh7coG67qv1Niajh9yTdvlOmg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;一  我对好代码的看法&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  什么是好代码&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你读过《设计模式之美》，你可能会觉得玩转各种设计模式，符合设计模式的6大基本原则的代码就是好代码；如果读过《clean code》，你可能会觉得好代码的一个标准是——整洁；如果你经常研读Spring源码，你可能会觉得精妙的设计、高度的抽象、灵活的配置才是好代码，就像是一本书，一千个读者眼中有一千个哈姆雷特，每个人按照自己的认知都会有自己的判断。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  我认为的好代码&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如前文所述，不同的人对好代码的认知标准是不同的，我认为的好代码，也局限于我的认知水平，也许今天我觉得是好代码，随着认知的提升，改天也会有不同的想法；就目前的认知而言，我认为的好代码的一些特点：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;可用性&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对，你没看错，好代码，一定是可用的，可以work的，如果一段代码只是看着好看，用了各种花里胡哨的编码技巧、手法，但是不能work，那就失去了它存在的意义了。所以，好代码，最最最重要的一个特点就是可用性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;可读性&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我认为好代码的第二个特点就是可读性，我们的写代码的目标用户有两类，第一类是给编译器看的；第二类是给维护它的程序员看的。针对第一类用户，只要你符合它的语法规范，它就认识，它就可以执行；而第二类用户，就是后期不断的维护它、升级它的程序员同学，如果这段代码，维护它的人都读不懂，那他的长期存在的意义也就不大了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;其他优秀的特点&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可维护性、可扩展性、可复用性、强鲁棒性、可测试性等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;好代码的其他优秀特点太多了，不一一列举了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3  让code在计算机上起舞&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;回到根源，我们写代码的目的是干嘛？为的是把我们的所思所想通过计算机认识的指令告诉它，让它来替我们做我们想做的事情。好代码，不仅可以简单地完成我们的所思所想，更能够快速、高效、完备地执行。让我们的code一起在计算机上起舞吧。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;二  我们为什么要做&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2020年五一期间，当大家都在享受五一假期的快乐时光时，我们突然收到hbase报警，整个hbase的IO压力已经接近瓶颈，直接影响数据读写，临时扩容hbase才勉强支撑过去。按照这个发展趋势，一旦遇到业务高峰时，hbase的读写直接会给整个业务链路带来瓶颈问题。为了能够解决海量巴枪数据实时写入hbase+solr时产生的高IO压力，我们设计出一款基于redis实现的轻量级分布式均衡消费队列，实现巴枪数据按照一定规则进行sharding到不同的队列中，实现批量数据攒批去重，然后按批写入hbase+solr，从而降低hbase+solr的IO压力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三  我们怎么做的&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;组件整体设计思路：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.5888268156424581&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKCBHZSLXXMiaicElAGWfOX2GvNKRnh0tYx38ppcFZCoDX54DM7Yr0cQZ35xf1MxWzwVERsxibiask9yQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;895&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;整个组件主要分为三大核心模块，master（主节点）、writer（数据写入节点）、worker（工作节点）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;设计机制：&lt;/span&gt;&lt;span&gt;弱中心机制，任何一个配置好的节点都可能成为master（主节点）、writer（数据写入节点）、worker（工作节点），具备高可用能力，不存在单机单点瓶颈问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;master（主节点）职责：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;writer（数据写入节点）职责：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;worker（工作节点）职责：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;伟大的linux大神曾说过，&quot;Talk is cheap，让我看看代码&quot;。&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;四  我们做了什么&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  整个组件的包结构图&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.5683576956147893&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKCBHZSLXXMiaicElAGWfOX2Gu3ZHqbux1x67ic9WYTqh93ZONk9wE6yFGUyul2v2PwBSIx8nbGs10dg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2326&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  简洁的代码结构&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.68828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKCBHZSLXXMiaicElAGWfOX2G4qrpQgGtYLibL671ibNccBtFicJgCaskgDqM5BXtp7FlOkPN5hjKDkHyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;整个工程一共60个类，核心代码共1623行， 平均每个类的代码行数为27.05行，最大的一个类代码行数不超过200行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3  强大的扩展性&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.52109375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKib8LgguCoe5AXMNDYPvZ2Nd8qR4alWoKllFdjfpDlgvYDLBtCnkX5nEYChATCIVwpAsaJUrhMxxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过钩子回调方式的设计，方便接入的用户能够快速的注入自己的回调实现方法，进行快速扩展业务能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4  线上日志展示截图&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;日志文件&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.1388888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKCBHZSLXXMiaicElAGWfOX2G9VP0oTRn8DnsNiaF2VibMorJcX7jcO7HGOqHlmv6XMaALnTUluniaex2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1224&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.27521008403361347&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKCBHZSLXXMiaicElAGWfOX2Gwf6t96vv1icBAn9CBNniak0lXRZfUYiaibIWhbiaOYhIH04c55ibkAU6f1bQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1904&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;master队列分配日志&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.30859375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKCBHZSLXXMiaicElAGWfOX2GuZQoPR8f7w4f0Ribce4b6cyeicoo4rryJss4kaf8RCZVia32eJrVF8YicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;worker数据消费日志&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2515625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKCBHZSLXXMiaicElAGWfOX2GIE3sDpYccb3eFYhUmCZcSVAPsQaYMNMYUvb20P1RuXVRldQFYicgr9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;writer队列负载检测日志&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.190625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKCBHZSLXXMiaicElAGWfOX2GxWSIKSYPJ43LJaVx0GH2nAa3c0q71hbO1gvibDFBhlubtV6PtFuYnOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;re&lt;/span&gt;&lt;span&gt;dis消费队列监控大盘&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.496875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKCBHZSLXXMiaicElAGWfOX2GzX8RXw3ib6cxQhhSrwUPKVibVMwAF3LL3uicr4EEzZy24zH5WZFQcPH2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;五  我们的收益&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;组件部署上线之时，hbase服务端监控指标变化，实现hbase整体使用水位接近50%的优化。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;hbase IOPS使用监控&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.48046875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKCBHZSLXXMiaicElAGWfOX2GtJcTzN0x5PtZaTfYlYsXJicMqtAMmQTH4T2ib2Aicz8zqoeGMW9eQRic6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;hbase CPU使用监控&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4984375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKCBHZSLXXMiaicElAGWfOX2GibeCSKXethzq28Vwa0vOiaLF2FapoGicNIdXHuvEhojpo5U5OEiaWbqibOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;六  我们的展望&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;七  我的一些理解&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;好代码，给人第一个印象的感觉，就像一篇好文章一样，读起来朗朗上口。不同的文章有不同的风格体裁，不同的代码也有不同的编程风格要求。Python有严格的缩进，像诗歌一样工整对仗；C语言面向过程像散文一样形散神聚，意境深邃；Java语言面向对象又像是写小说一样，能勾勒出一个一个人物形象。但是无论哪一种文章体裁，他的可读性和可理解性都非常重要，只有文章是可读的可理解的，才会吸引更多的读者去读它，让他流传下去，代码也一样，它的可维护性和可读性也非常重要，保证代码可用性，提高代码的简洁程度和可维护程度，才能让我们的代码在计算机上跑的更远，更久。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;技术公开课&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《使用Redis消息队列完成秒杀过期订单处理》&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本课程共15课时，通过一个Redis的实战案例，介绍Redis消息队列，以及如何在Java程序中监听Redis队列消息，最后结合Redis的key失效机制和消息队列完成对过期订单的处理。&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点击“阅读原文”开始学习&lt;/span&gt;&lt;span&gt;吧~&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>