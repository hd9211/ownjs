<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>7c0d1705613a8c647790eeb3c956fa9a</guid>
<title>一年之计在于春！周末别闲着！</title>
<link>https://toutiao.io/k/32pyr3x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8ee3a7802c7aef67694663a7b800112b</guid>
<title>微服务如何划分</title>
<link>https://toutiao.io/k/f4vabj7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h2&gt;摘要&lt;/h2&gt;&lt;p&gt;作为团队架构师/技术负责人你该如何进行微服务的划分呢?在以前的文章中讨论过这个话题，&lt;span&gt;可落地的DDD(4)-如何利用DDD进行微服务的划分(2)&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt;，最近结合在不同的开发团队实践，又有了新的思考，相比较之前的基于DDD会更加全面可落地，也欢迎大家留言讨论。&lt;/p&gt;&lt;h2&gt;为何要划分微服务&lt;/h2&gt;&lt;p&gt;微服务架构被广泛用于互联网公司，其优势在于每个服务足够小，相互之间具备隔离性。配合一些基础设施，能够使得需求快速迭代上线。但是每个服务的粒度应该多大呢，服务之间的关系应该是怎样的呢?&lt;/p&gt;&lt;p&gt;首先我们来探讨一下微服务划分的目标。微服务划分涉及到两个对象，一个是微服务，一个是开发人员。所以目标是&lt;strong&gt;高效有序&lt;/strong&gt;将微服务及开发人员组织起来。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;如何衡量有序呢?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.职责清晰2.相互间的依赖关系清晰 一个无序的微服务调用，会陷入混乱地狱。&lt;img data-ratio=&quot;0.8351893095768375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/to5t8icQhBHp6zHicKATj4u0mpLO5SZNGk7rEGicKpVBdaDDib0IHJN4fnJ1XJkwMhxm2FBzBDdZ5s83RibEWn4Sk8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;449&quot; title=&quot;null&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;因此制定一些&lt;strong&gt;标准&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;横向&lt;/strong&gt;：按照业务流程拆，业务流程反映的是数据流程，数据从上游流下下游。上游需要和下游解耦，上游不可通过服务间调用下游。下游可以。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;纵向&lt;/strong&gt;：按照技术拆分，由上到下分为4层，上层可以调用下层，同级可以相互调用，下层强制不能调用上层。&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;应用系统 面向各个端，比如pc端，面向用户的，面向小二的。app端。属于前端应用。&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;核心领域 整个系统的核心业务，与&lt;strong&gt;业务&lt;/strong&gt;紧密相连。支撑业务发展。&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;基础能力 从核心领域中下沉抽象出来的更通用的服务，不只是服务当前业务。也服务于公司其他业务。&lt;/p&gt;&lt;p&gt;4.&lt;/p&gt;&lt;p&gt;依赖系统 一些通用的公共模块以及与其他兄弟部门的服务依赖。&lt;/p&gt;&lt;p/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如此调用关系比较清晰了。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8625482625482626&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/to5t8icQhBHp6zHicKATj4u0mpLO5SZNGk077RAgTTA913ULRp7ZjZ8SIrFvDeVvXnTzQWtHoia78nKhgLRs3Ah9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1295&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;如何衡量高效呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于服务是性能高且稳定 对于开发人员是效率高且有技术成长空间&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业务量上来一个，后端的很多工作就是围绕着性能和稳定，微服务的划分也深深影响着。因此服务划分还会按照&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.基于迭代频次 &lt;/span&gt;&lt;span&gt;     变更是引发故障的主要原因，因此如果一个服务是稳定的，我们可以把他单独拆分为一个微服务，这样在项目快速迭代时，不会影响已有功能。不需要投入太多回归测试时间。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    2. &lt;span&gt;基于可靠性     核心服务需要重点保障，流量高的应用和流量低的应用稳定性要求也不一样。可以将核心服务，流量高的应用单独拆出来，这样使得核心服务功能逻辑简单，依赖减少，存储独立。稳定性得到极大保障。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    3.基于开发人员     架构活动不仅要关心机器，还要关心人。开发人员的工作效率极大影响了业务的交付速度和质量。一个微服务需要一个唯一owner和2-3个开发人员(owner也参与开发)。owner是第一责任人，负责整个应用的代码质量，服务稳定性。2-3个人负责开发一个系统，不会有单点，在人员流动的情况能够进行相互补位，同时相互之间可以进行技术方案深度讨论，能够应对一定级别的复杂需求。人数不宜超过4个人，人太多，在同一个应用中开发不同的需求，可能每天都要处理不同的分支之间冲突，多套环境进行测试，效率比较低。同时人数太多，讨论效率也比较低。此外需要尽量保证每个中高级别的开发者都是一个微服务的owner，有自己的一块自留地，在需求承接之外，能够在做一些技术相关的开发工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然高效和有序并不总是统一的，有时候我们需要去做架构取舍。&lt;/p&gt;&lt;h2&gt;如何划分&lt;/h2&gt;&lt;p&gt;举个例子，比如你公司是做在线教育的，你入职负责开发公司的客户管理系统(CRM,下面统一用CRM代替)业务。首先你需要从全局分析CRM这块业务。&lt;/p&gt;&lt;h3&gt;流程&lt;/h3&gt;&lt;p&gt;CRM按照流程划分主要是获客-跟进-转化-签约-服务。按照领域进行抽象，可以分为售前，售中，售后。&lt;/p&gt;&lt;h3&gt;服务&lt;/h3&gt;&lt;p&gt;按照服务来划分，主要有投放服务、营销活动服务、呼叫服务、客户管理、日程管理、消息提醒、订单、合同、工单、销售效果分析。&lt;/p&gt;&lt;h3&gt;功能&lt;/h3&gt;&lt;p&gt;每个服务有更细粒度的功能。比如 投放服务：提供多渠道投放方式，百度，头条，微信等，投放分析。营销活动服务：营销落地页，开学季优惠活动，抽奖活动，优惠券活动。客户管理服务：客户档案，销售机会，销售看板。其他不再赘述。&lt;/p&gt;&lt;h3&gt;人员&lt;/h3&gt;&lt;p&gt;目前业务还是在初级阶段，负责这块的开发总共有6人，3个后端，2个前端，一个测试。&lt;/p&gt;&lt;h3&gt;服务划分&lt;/h3&gt;&lt;p&gt;基于以上考虑，服务划分为以下6个服务。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8048595292331056&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/to5t8icQhBHp6zHicKATj4u0mpLO5SZNGkn0PYTlPzo4J0NfbpXyeeibt1jobibPAnuWaDPcjS3cWYibCHLicYgOuxVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1317&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;考虑到只需要一个pc工作台，市场人员、销售人员都用同一个工作台，应用系统这一层不需要。然后核心领域分为售前（市场人员）、售中（客服，销售）、售后（客服，财务）三个服务，每个开发负责一个服务。同时抽象出3个通用基础能力服务，每个开发负责一个。&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 公司内部的账号系统 提供统一的账号管理能力，组织架构能力，权限管理能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;     2. &lt;span&gt;服务系统        通用的一些工具能力，比如隐私号、坐席呼叫、待办、消息提醒等能力。这些并不属于同一个领域，但是考虑到当前阶段，服务不宜拆分的过细。所以都放在同一个服务中。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    3.数据分析        各个模块都需要数据分析，所以抽象出一个单独能力，统一处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;演进&lt;/h2&gt;&lt;p&gt;经过半年的发展，业务蒸蒸日上，需求越来越多。人员也在逐步扩展。后端人员扩大到了10人。原有的微服务架构逐渐不太适应。因此需要进行适当调整。经过分析，当前业务重点是&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;售前 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;两个核心指标一个是有效线索量，一个是单个线索成本&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;       2. &lt;span&gt;售中     &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;         售中决定了线索能否转化为订单。目前对应的运营人员最多，客服100人，销售300人。提高运营人员效率是重点。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      3. 售后            &lt;/span&gt;&lt;span&gt;          工单响应时长&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;售前这块基本系统功能已搭建完毕，通用的营销工具已经有了，市场人员可以进行组件组合，搭建不同营销页，然后根据投放效果进行适当调整。服务比较稳定了，所以这块有2个开发即可。主要负责营销工具开发。&lt;/p&gt;&lt;p&gt;售后相对也比较稳定了，2个开发。售中是重点，需求迭代也比较多，6个开发。之前只有一个微服务，开发效率比较低了。需要进行适当拆分。增加3个服务&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.应用系统增加一个移动工作台 因为销售人员经常在外部，所以需要移动端，而移动端通常是销售管理活动中的操作类功能。pc端则是查看分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;     2.&lt;span&gt;核心领域层增加一个售中服务域&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;售中拆成2个服务，一个是线索域，主要围绕着公海、私海，线索推荐。另外一个是服务域，是面向销售日常活动的。如活动，拜访，小记，客户标签等。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;3 .&lt;/span&gt;基础能力层增加一个流程引擎服务 各个角色人员需要经常发起审批，流程编排，所以新构建一个基础能力，流程引擎。能够服务于整个crm业务，同时如果公司其他业务需要，可以提供给其他业务使用。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8290094339622641&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/to5t8icQhBHp6zHicKATj4u0mpLO5SZNGkRbguklib1vcCH8z1oH4NPwzEnZKN0w61Oj38Iec6rXiaT5DhY3sPxHHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1696&quot; title=&quot;null&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;参考文章&lt;/h2&gt;&lt;p&gt;&lt;span&gt;    http://www.woshipm.com/pd/3983693.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; 可落地的DDD(4)-如何利用DDD进行微服务的划分(2): &lt;em&gt;https://blog.csdn.net/FS1360472174/article/details/90738148?spm=1001.2014.3001.5501&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c9e3bc063cc9fcc43f1005fbb3c12820</guid>
<title>数据分析终极一问：指标波动多大才算是异常？</title>
<link>https://toutiao.io/k/fnok9ww</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIwNTUxNTI1Ng==&amp;amp;action=getalbum&amp;amp;album_id=1978699279149989889#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1978699279149989889&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#数据分析&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;10个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;hr/&gt;&lt;section label=&quot;Copyright Reserved by PLAYHUDONG.&quot; donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;导读：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先举个例子，体温37.4度vs体温36.5度，只有2.5%的波动，可如果有人在测温点被发现体温37.4度，估计马上就被拉走做核酸。为啥？因为人们不是&lt;span&gt;怕&lt;/span&gt;2.5%的波动，而是怕新冠！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以：指标波动不可怕，指标波动代表的业务场景才可怕！脱离业务场景谈指标波动就是耍流氓。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在各种业务指标中，数据往往不是静止不变的，尤其是当一些核心的指标发生了变化、波动时，就需要判断这样的波动是否属于异常的情况。那么波动了多大才能算是异常？本文将结合一些实际业务场景，来说明数据波动的异常判别方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;指标数据波动，是各种业务场景下都会遇见的情况，如每日GMV、每日订单量等，都是在不断变化的。大多数情况下，变化是“正常”的波动，但有一些波动，源于突然发生的外部原因或其他未被预期的因素，导致其表现出不同于正常模式的异常状态。若能准确地识别异常波动，从而做出波动预警，并及时应对，就能一定程度上保证所关心的业务场景系统的整体稳定性。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;1&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;波动类型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据波动绕不开时间特性。业务中最常遇到的就是今天的指标是什么样子？过去几天是什么趋势？未来一段时间会怎么样的变化？数据+时间构成了波动的两个基本属性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根据时间的不同特征，常见的波动类型有：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一次性波动：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;偶发的、突然性的波动。一般是由于短期、突发的事件而影响的指标的波动，比如说某头部主播在某次直播里上了严选的商品、某明星的同款商品在严选有库存等，就会造成订单量临时性的超出预期的上涨。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样的波动影响时间短，往往几天的时间便会恢复正常波动。举个单量的例子，在大促期间都是单量的爆发期，大促即为一次“偶发事件”，此时单量的波动即为一次性波动。其具有如下的特征图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4429037520391517&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOUjcvcWCTc0TtYQGDbCEE8sgQyhpupKG793KibmBs4C9BleBUmGSzFdiaYWquSkmHic7JQIdkKKn2LeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1226&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;周期性波动：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;这种波动和时间节点强相关，且经常以周或者季、年为循环节点。如羽绒服秋冬季节卖的比较好，到了春天销量就下降，夏天几乎没有销量，且每年几乎都是这样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOUjcvcWCTc0TtYQGDbCEE8s98bpAy2oh1PYNf2PnHRkau2cqKDzt7udq42ZaaeEcpuOAyzsWgSuLA/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1080&quot; data-cropy1=&quot;59.79238754325259&quot; data-cropy2=&quot;487.68166089965393&quot; data-ratio=&quot;0.3972222222222222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sYBGQlzfEOXicvOtQiabFdWefRakP6Mkn4kHhgIbkkHUtkYc7MPztstYFf3nPzMKNOxxCkr2Pgvh9MBq7pm5CibfA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;持续性波动：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;从某一时间开始，指标一直呈现上涨/下降趋势。如从今年4月开始，浴室香氛品类的销售量一直呈现上涨趋势，这就属于持续性波动。而持续性波动背后的原因往往是更深刻的，如订单结构的变化、环境因素的影响，从而出现了这种持续性趋势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.40700218818380746&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOUjcvcWCTc0TtYQGDbCEE8sutYARnz1GqKdet1rkBmXyrCqm0J9jrbWupicFGE4LRNmvjrtvia9PNLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;914&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;异常识别&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么什么样的波动可以看作是“异常”呢？异常识别也可以认为是异常检测。这里主要从绝对值预警、相对值预警两个方面来说明。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.1 绝对值预警&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;绝对值预警，即是通过设定一定的阈值，当指标低于/高于阈值的时候，就认为此时指标波动为异常，并进行预警。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;举个例子，严选作为一个品牌，毛利是其核心的一个指标。对毛利可设置绝对值预警：当毛利为负时，就认为此时是异常的情况，需要探究其发生的原因，并解释这种异常的波动。通过对毛利的绝对值预警，严选及时发现了部分用户利用咖啡机进行薅羊毛、从而导致咖啡机毛利为负的行为，并完善了规则减少了严选的损失。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不仅可以设置低于某一个定值，也可以当指标高于某一定值的时候进行预警，比如在供应链中，某个大仓的分仓比高于40%，就会导致仓库负荷过重从而影响生产。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;绝对值预警往往是一次性的波动，这样的异常判定比较简单，只需要设定对应的阈值即可。而阈值的设定可以根据具体的业务的不同和规则而变化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前在有数BI中可以直接设置绝对值预警：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5813397129186603&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOUjcvcWCTc0TtYQGDbCEE8smCqbPRlOtDLzUoHeLB9Sn2HlOeefXoLzH43gd11xUA66fic80AFlMrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;836&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.2 相对值预警&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然而实际业务中，绝对的阈值只能提供一个“底线”。除了一些非常确定性的业务场景外，在其他情况下，过高的“底线”就会导致误报，过低的“底线”可能会漏掉很多需要预警的情况。于是作为绝对值预警的补充，相对值预警可以根据历史数据及波动情况，来判断当前的波动是否为异常。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（1）同比环比&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同比环比是业务场景中比较常用的一种异常检测方式，利用当前时间周期与前一个时间周期（同比）和过去的同一个时间周期（同比）比较，超过一定的阈值即认为该点是异常的。实际中常用周/日环比、年同比来进行比较。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4559386973180077&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOUjcvcWCTc0TtYQGDbCEE8sicTycgemTf05I9icjycg53icw60HuSk1RZfBIwgZgjgERwR4bRet2u0gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;261&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如上图，(1)的数据为所要判断的值。当(1)的数值为百分比时，如来源于主站订单的比例，则同比环比一般为：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    环比：(1)-(2) pt&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    同比：(1)-(3) pt&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而当(1)的数值为非百分比时，如来源于主站的订单数量时：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    环比：((1)-(2))/(2) %&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    同比：((1)-(3))/(3) %&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根据值得正负来判断是上涨还是下降。通过与上周/昨天和去年同期的数据表现进行对比，计算波动值，再将波动值和阈值进行对比，从而得到当前时刻数值是否在正常的波动中（阈值的设定方法在后面介绍）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如在上述的周期性波动的例子中，在11月环比波动都会较大，这时设置同比波动预警会比设置环比波动预警更为合理。于是在波动判别中，需要注意业务实际背景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOUjcvcWCTc0TtYQGDbCEE8sgtvLWZvslDo1j3SLHg5NYJca2K2FBatias6ANpjQCwo57l7WVztIA2w/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1074&quot; data-cropy1=&quot;53.88581314878892&quot; data-cropy2=&quot;503.553633217993&quot; data-ratio=&quot;0.41899441340782123&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sYBGQlzfEOXicvOtQiabFdWefRakP6Mkn46S4j5icQdMRhZ2OjmysFKicNMst12ypjkekQfl1P3Y34C0e3txs48uicQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1074&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（2）周期平滑&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同比/环比仅使用1~2个时间点的数据，容易受到数据本身质量的影响：当历史同期或上个周期的数据本身就是“异常”的时候，用“异常”的数据来判断是否“异常”就不太合适。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;一个很自然的想法就是将所参考的时间点拓展，利用多个时间点的周期数据进行平滑，得到当前时刻指标的对比值。如：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOUjcvcWCTc0TtYQGDbCEE8sLopicPFdBlDNZTvQjibL4gMFotAxiayZGxohG68icpEK8uunicA0QPXwEqg/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;351&quot; data-cropy1=&quot;13&quot; data-cropy2=&quot;120&quot; data-ratio=&quot;0.30484330484330485&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sYBGQlzfEOXicvOtQiabFdWefRakP6Mkn4FL8OcUBJIbEfRx0GLUMI7g82nk2ozTLzN7RNpGHXEDbngialVb20RGA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;351&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;则比较值：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.10178571428571428&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOUjcvcWCTc0TtYQGDbCEE8s2zibxPpibQiag1pPW0rOLPGc2Dam9LoqYWaSIicTg3qgiaOUWpLWNAuWicqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.41304347826086957&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOUjcvcWCTc0TtYQGDbCEE8sRYPIR9s8MqXeq8OQVCPPMzTLickA6OW30wdTKDAgricPOLjMluPoB9KQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;138&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其中&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;30&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;33&quot; data-ratio=&quot;1.1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXicvOtQiabFdWefRakP6Mkn4KopQGS1PFlibuWR20duP7fOwQibYEE4xsib7CdGmXlibVbwiaHn2fme7bsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;30&quot;/&gt;&lt;span&gt;为平滑系数，当&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXicvOtQiabFdWefRakP6Mkn4KopQGS1PFlibuWR20duP7fOwQibYEE4xsib7CdGmXlibVbwiaHn2fme7bsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;30&quot;/&gt;&lt;span&gt;都为相同的值的时候，此时即为平均值。也可越靠近所研究时间点，赋予更高的平滑系数。所选的时间点可以根据业务需求自行定义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;利用比较值b和所研究的值(1)对比，超过一定的阈值即可认为是“异常”，其波动需要关注。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（3）假设检验（3σ原则）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前面提到比较值需要和所研究的值进行对比，通过阈值来判断波动是否异常。阈值的定义方法和预警方法类似，分为绝对值阈值和自适应（相对值）阈值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不妨假设当前时间点的指标数据为b，历史用于对比的指标数据为： &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.13333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOUjcvcWCTc0TtYQGDbCEE8sSVEyEOBoTe86KlrNxrnpunBSwH25MyaZJBlfpcQMXia1X8I5ZaR1Zpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;225&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其中：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4021164021164021&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOUjcvcWCTc0TtYQGDbCEE8sdlYPSVUAyk0aqQxSptdRFHqVwRp2mlSNVsZRFBIKyn10UgRXTIicUZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;378&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;分别表示对比数据的平均水平和波动情况。则根据大数定律和假设检验，当&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4972067039106145&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOUjcvcWCTc0TtYQGDbCEE8svrUWcRyfbzvVSDaTXDw3rQavvmzp27nx0haMFiaonXRetofhoWr1gqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;179&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;即可认为当前时间点的指标数据为异常波动。其中z为置信水平所对应的值，如当z=1.96时，置信水平为95%，即可认为在100次的波动下，有95次是在正常范围内波动的（置信水平及其对应的值可参考标准正态分布表）。当z=2.58，置信水平为99%，即为著名的&lt;strong&gt;“3&lt;span&gt;σ&lt;/span&gt;原则”。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.3 其他方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了以上所介绍的一些常用的、便捷的方法外，也可以通过时间序列、算法模型等来判断异常值。异常值判别是比较常见的研究场景，但由于实操的复杂性，这里仅做一个介绍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（1）时间序列&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业务上的数据往往具有时间属性，如单量随时间的变化、GMV随时间的变化等。那么在时间序列中，通过异常检测的方法，也可以对当前波动是否异常做出判断。常用的方法有：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;平均法：移动平均、加权移动平均、指数加权移动平均、累加移动平均等。和上述的“周期平均”的方法类似，可自定义窗口大小和加权系数。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ARIMA模型：自回归移动平均模型（ARIMA）是时间序列中一个基础模型，利用过去的几个数据点来生成下一个数据点的预测，并在过程中加入一些随机变量。使用该模型需要确定ARIMA所需的参数，即需要对数据点进行拟合。利用拟合后的方程确定下一个时间点的数据的区间，从而判断当前波动是否为异常。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;此外还有ESD、S-ESD、S-H-ESD、STL分解等算法，来检测异常点。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（2）算法模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;3&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在实际应用中，还需要结合业务背景来进行方法的选择。一般来说，判断异常的主要方法有：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.675577156743621&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOUjcvcWCTc0TtYQGDbCEE8sIZxyEOicZbIBSqKWZC9zfa7HygnFIwR6nLNyDAsSeOuA7dUjXqe1gLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;823&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101582&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;作者简介&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p hm_fix=&quot;322:369&quot;&gt;&lt;span&gt;九数，网易严选数据分析师，负责严选供应链仓配域的分析工作。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;105280&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;获取最新动态&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;最新的推文无法在第一时间看到？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;以前的推文还需要复杂漫长的翻阅？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;进入“网易有数”公众号介绍页，点击右上角&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;“设为星标”&lt;/strong&gt;&lt;/span&gt;！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;置顶公众号，从此消息不迷路&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.652&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sYBGQlzfEOXMVDJu304Kjzpsibf96dricaQcaJKrxpViaVWwc8ciaIN33NlOzxoMeaN1icSo093icXVLKylAp5sE5M9A/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;span&gt;设为星标，最新推文不迷路&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwNTUxNTI1Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOV4Bfic2e5zqTMCl0XxmMuVq1XpDOBrbXicVB4KmrEXglsWcnMREoQXfX24sscdvQIR74ic3SiciaLoMFA/0?wx_fmt=png&quot; data-nickname=&quot;网易有数&quot; data-alias=&quot;Youdata_Netease&quot; data-signature=&quot;网易有数是网易数帆旗下大数据技术与服务品牌，以“数据价值”为导向，聚焦于企业 “看数”、“管数”、“用数”等业务场景，提供全链路大数据技术及产品服务，致力于盘活企业数据生产力，加速实现数字化转型。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100003451&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sYBGQlzfEOXECeWKgyIia3c7bom7Ir4rh4qI4XdxuRW4lyHudFyglytmLrOM4yYOWs3XNqqj0XlXTEw8icZ2Eb1Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;317:401&quot;&gt;分享，点赞，在看，安排一下？&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c64ddcc53c144502704c2c8a1df164e2</guid>
<title>硬核解析 Webpack 事件流核心！</title>
<link>https://toutiao.io/k/846v1xn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、Tapable 介绍&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Tapable 是 Webpack 整个生命周期及其插件机制的事件流实现，它提供了多种形式的发布订阅模式的 API，我们可以利用它来注册自定义事件，并在不同的时机去触发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Tapable 对外提供了如下几种钩子（Hooks）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; {&lt;br/&gt; SyncHook,&lt;br/&gt; SyncBailHook,&lt;br/&gt; SyncWaterfallHook,&lt;br/&gt; SyncLoopHook,&lt;br/&gt; AsyncParallelHook,&lt;br/&gt; AsyncParallelBailHook,&lt;br/&gt; AsyncSeriesHook,&lt;br/&gt; AsyncSeriesBailHook,&lt;br/&gt; AsyncSeriesWaterfallHook&lt;br/&gt; } = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;tapable&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个钩子拥有自己专属的事件执行机制和触发时机，Webpack 正是利用它们，在不同的编译阶段来调用各插件回调，从而影响编译结果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文来自全栈修仙源码交流群 &lt;strong&gt;VaJoy&lt;/strong&gt; 大佬，他会逐步介绍每个钩子，并分析其源码实现。&lt;span&gt;本文内容偏硬核，建议读者分时间耐心阅读。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，本文各模块的代码放在 Github 上，推荐大家下载后配合本文一同食用，遇到不理解的地方可以打断点调试，学起来会很快。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;https://github.com/VaJoy/tapable-analysis&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、SyncHook 的基础实现&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 介绍&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SyncHook&lt;/code&gt; 是 Tapable 所提供的最简单的钩子，它是一个同步钩子。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;本小节的内容会比较长，因为会介绍到很多钩子们共用的方法。学习完 &lt;code&gt;SyncHook&lt;/code&gt; 钩子的实现，再去分析其它钩子的源码会轻松很多。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;初始化 &lt;code&gt;SyncHook&lt;/code&gt; 后，可以通过调用实例的 &lt;code&gt;tap&lt;/code&gt; 方法来注册事件，调用 &lt;code&gt;call&lt;/code&gt; 方法按注册顺序来执行回调：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 初始化同步钩子&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; SyncHook([&lt;span&gt;&quot;contry&quot;&lt;/span&gt;, &lt;span&gt;&quot;city&quot;&lt;/span&gt;, &lt;span&gt;&quot;people&quot;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 注册/订阅事件&lt;/span&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-1:&#x27;&lt;/span&gt;, contry, city, people)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-2:&#x27;&lt;/span&gt;, contry, city, people)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 执行订阅事件回调&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 钩子上目前注册了 2 个回调，它们会按顺序被触发&lt;/span&gt;&lt;br/&gt;hook.call(&lt;span&gt;&#x27;China&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;Shenzhen&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-3&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-3:&#x27;&lt;/span&gt;, contry, city, people)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-4&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-4:&#x27;&lt;/span&gt;, contry, city, people)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 执行订阅事件回调&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 钩子上目前注册了 4 个回调，它们会按顺序被触发&lt;/span&gt;&lt;br/&gt;hook.call(&lt;span&gt;&#x27;USA&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;NYC&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;Trump&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 ******/&lt;/span&gt;&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt;: China Shenzhen VJ&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt;: China Shenzhen VJ&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt;: USA NYC Trump&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt;: USA NYC Trump&lt;br/&gt;event&lt;span&gt;-3&lt;/span&gt;: USA NYC Trump&lt;br/&gt;event&lt;span&gt;-4&lt;/span&gt;: USA NYC Trump&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里顺便说一下，&lt;strong&gt;tap&lt;/strong&gt; 在英文中有“窃听”的意思，用它作为订阅事件的方法名，还挺形象和俏皮。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2 代码实现&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.2.1 SyncHook.js&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SyncHook&lt;/code&gt; 模块的源码（简略版）如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/** &lt;span&gt;@file &lt;/span&gt;SyncHook.js **/&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Hook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./Hook&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; HookCodeFactory = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./HookCodeFactory&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SyncHookCodeFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; content({ onError, onDone, rethrowIfPossible }) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.callTapsSeries({&lt;br/&gt;   &lt;span&gt;onError&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, err&lt;/span&gt;) =&amp;gt;&lt;/span&gt; onError(err),&lt;br/&gt;   onDone,&lt;br/&gt;   rethrowIfPossible&lt;br/&gt;  });&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; factory = &lt;span&gt;new&lt;/span&gt; SyncHookCodeFactory();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; COMPILE = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;options&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt; factory.setup(&lt;span&gt;this&lt;/span&gt;, options);&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; factory.create(options);&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;SyncHook&lt;/span&gt;(&lt;span&gt;args = [], name = undefined&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; Hook(args, name);&lt;br/&gt; hook.compile = COMPILE;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; hook;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = SyncHook;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段代码理解起来还是很轻松的，&lt;code&gt;SyncHook&lt;/code&gt; 实例化后其实就是一个 &lt;code&gt;Hook&lt;/code&gt; 类的实例对象，并带上了一个自定义的 &lt;code&gt;compile&lt;/code&gt; 方法。顾名思义，可以猜测 &lt;code&gt;compile&lt;/code&gt; 方法是最终调用 &lt;code&gt;call&lt;/code&gt; 时所执行的接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先不分析 &lt;code&gt;compile&lt;/code&gt; 的实现，就带着对它的猜想，来看看 &lt;code&gt;Hook&lt;/code&gt; 类的实现。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.2.2 Hook 类&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/** &lt;span&gt;@file &lt;/span&gt;Hook.js **/&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; CALL_DELEGATE = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;...args&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;this&lt;/span&gt;.call = &lt;span&gt;this&lt;/span&gt;._createCall(&lt;span&gt;&quot;sync&quot;&lt;/span&gt;);&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.call(...args);&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Hook&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;constructor&lt;/span&gt;(args = [], name = undefined) {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._args = args;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.name = name;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.taps = [];&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.call = CALL_DELEGATE;  &lt;span&gt;// call 方法&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;this&lt;/span&gt;._call = CALL_DELEGATE;&lt;br/&gt; }&lt;br/&gt; _createCall(type) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.compile({&lt;br/&gt;   &lt;span&gt;taps&lt;/span&gt;: &lt;span&gt;this&lt;/span&gt;.taps,&lt;br/&gt;   &lt;span&gt;args&lt;/span&gt;: &lt;span&gt;this&lt;/span&gt;._args,&lt;br/&gt;   &lt;span&gt;type&lt;/span&gt;: type&lt;br/&gt;  });&lt;br/&gt; }&lt;br/&gt; _tap(type, options, fn) {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; options === &lt;span&gt;&quot;string&quot;&lt;/span&gt;) {&lt;br/&gt;   options = {&lt;br/&gt;    &lt;span&gt;name&lt;/span&gt;: options.trim()&lt;br/&gt;   };&lt;br/&gt;  }&lt;br/&gt;  options = &lt;span&gt;Object&lt;/span&gt;.assign({ type, fn }, options);&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._insert(options);&lt;br/&gt; }&lt;br/&gt; tap(options, fn) {   &lt;span&gt;// tap 方法&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._tap(&lt;span&gt;&quot;sync&quot;&lt;/span&gt;, options, fn);&lt;br/&gt; }&lt;br/&gt;        _resetCompilation() {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.call = &lt;span&gt;this&lt;/span&gt;._call;&lt;br/&gt; }&lt;br/&gt; _insert(item) {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._resetCompilation();&lt;br/&gt;                &lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;this&lt;/span&gt;.taps.length;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.taps[i] = item;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了方便阅读，上方我只保留了 &lt;code&gt;SyncHook&lt;/code&gt; 钩子相关的代码。这里需要知道的是，其中带下划线的方法如 &lt;code&gt;_tap&lt;/code&gt;、&lt;code&gt;_resetCompilation&lt;/code&gt;、&lt;code&gt;_insert&lt;/code&gt; 等都属于各钩子公用的内部方法，而像 &lt;code&gt;tap&lt;/code&gt;、&lt;code&gt;call&lt;/code&gt; 方法是 &lt;code&gt;SyncHook&lt;/code&gt; 钩子专有的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们综合梳理一下 &lt;code&gt;SyncHook&lt;/code&gt; 调用 &lt;code&gt;tap&lt;/code&gt; 和 &lt;code&gt;call&lt;/code&gt; 的逻辑。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;⑴ tap 的流程&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续以前方示例代码为例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;hook.tap(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-1:&#x27;&lt;/span&gt;, contry, city, people)&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;hook.tap&lt;/code&gt; 的执行流程大致如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2041942604856512&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jQmwTIFl1V3mLtjLmibWIInYyV0GeYqiaN6XRBRB9RAk4VqAW3ro7c5wuCfxx2GUB1D1gQ9s2lzkW11lKHprny1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;906&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它会先在 &lt;code&gt;_tap&lt;/code&gt; 方法里构建配置项 &lt;code&gt;options&lt;/code&gt; 对象：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// options 格式&lt;/span&gt;&lt;br/&gt;{ &lt;span&gt;type&lt;/span&gt;: &lt;span&gt;&#x27;sync&#x27;&lt;/span&gt;, &lt;span&gt;fn&lt;/span&gt;: callbackFunction, &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再将 &lt;code&gt;options&lt;/code&gt; 传递给 &lt;code&gt;_insert&lt;/code&gt; 方法，该方法做了两件事：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;调用 &lt;code&gt;this._resetCompilation()&lt;/code&gt; 重置 &lt;code&gt;this.call&lt;/code&gt;；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发布订阅模式的常规操作，提供一个数组（&lt;code&gt;this.taps&lt;/code&gt;）用于订阅收集，把 &lt;code&gt;options&lt;/code&gt; 放入该数组。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之所以需要重置 &lt;code&gt;this.call&lt;/code&gt; 方法，是因为 &lt;code&gt;this.call&lt;/code&gt; 执行时会重写自己：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;this&lt;/span&gt;.call = &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;CALL_DELEGATE&lt;/span&gt;(&lt;span&gt;...args&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;this&lt;/span&gt;.call = &lt;span&gt;this&lt;/span&gt;._createCall(&lt;span&gt;&quot;sync&quot;&lt;/span&gt;);  &lt;span&gt;// overwrite this.call&lt;/span&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.call(...args);&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以为了让 &lt;code&gt;hook.tap&lt;/code&gt; 之后可以正常调用 &lt;code&gt;hook.call&lt;/code&gt;，需要重新赋值 &lt;code&gt;this.call&lt;/code&gt;，避免它被调用一次就不能再正常执行了。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;⑵ call 的流程&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17972831765935215&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jQmwTIFl1V3mLtjLmibWIInYyV0GeYqiaNadVnoggibOyLRU7ClQxegnMFzxJU0X0kGr6Dr8zkThFTfY6BVRANoAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;957&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;this.call&lt;/code&gt; 一开始就重写了自己：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;        &lt;span&gt;this&lt;/span&gt;.call = &lt;span&gt;this&lt;/span&gt;._createCall(&lt;span&gt;&quot;sync&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过 &lt;code&gt;this._createCall&lt;/code&gt; 的实现可以知道，&lt;code&gt;this.call&lt;/code&gt; 被重写为 &lt;code&gt;this.compile&lt;/code&gt; 的返回值：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; _createCall(type) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.compile({&lt;br/&gt;   &lt;span&gt;taps&lt;/span&gt;: &lt;span&gt;this&lt;/span&gt;.taps,&lt;br/&gt;   &lt;span&gt;interceptors&lt;/span&gt;: &lt;span&gt;this&lt;/span&gt;.interceptors,&lt;br/&gt;   &lt;span&gt;args&lt;/span&gt;: &lt;span&gt;this&lt;/span&gt;._args,&lt;br/&gt;   &lt;span&gt;type&lt;/span&gt;: type&lt;br/&gt;  });&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也验证了前面对于 &lt;code&gt;compile&lt;/code&gt; 的猜想 —— &lt;code&gt;SyncHook.js&lt;/code&gt; 中定义的 &lt;code&gt;compile&lt;/code&gt; 方法是在 &lt;code&gt;call&lt;/code&gt; 调用时执行的。我们回过头来看它的实现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/** &lt;span&gt;@file &lt;/span&gt;SyncHook.js **/&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; HookCodeFactory = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./HookCodeFactory&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SyncHookCodeFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; content({ onError, onDone, rethrowIfPossible }) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.callTapsSeries({&lt;br/&gt;   &lt;span&gt;onError&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, err&lt;/span&gt;) =&amp;gt;&lt;/span&gt; onError(err),&lt;br/&gt;   onDone,&lt;br/&gt;   rethrowIfPossible&lt;br/&gt;  });&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; factory = &lt;span&gt;new&lt;/span&gt; SyncHookCodeFactory();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// compile 方法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; COMPILE = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;options&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt; factory.setup(&lt;span&gt;this&lt;/span&gt;, options);&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; factory.create(options);&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;compile&lt;/code&gt; 定义的方法中分别调用了 &lt;code&gt;SyncHookCodeFactory&lt;/code&gt; 实例的 &lt;code&gt;setup&lt;/code&gt; 和 &lt;code&gt;create&lt;/code&gt; 方法，它们都是从父类 &lt;code&gt;HookCodeFactory&lt;/code&gt; 继承过来的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.2.3 HookCodeFactory 类&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;HookCodeFactory&lt;/code&gt; 的内容相对较多，不过没关系，我们暂时只看当前 &lt;code&gt;hook.call&lt;/code&gt; 执行流程相关的代码段即可：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;constructor&lt;/span&gt;(config) {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.config = config;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.options = &lt;span&gt;undefined&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._args = &lt;span&gt;undefined&lt;/span&gt;;&lt;br/&gt; }&lt;br/&gt;        setup(instance, options) {&lt;br/&gt;  instance._x = options.taps.map(&lt;span&gt;&lt;span&gt;t&lt;/span&gt; =&amp;gt;&lt;/span&gt; t.fn);  &lt;span&gt;// 注册的事件回调数组&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;        create(options) {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.init(options);&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; fn;&lt;br/&gt;  &lt;span&gt;switch&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.options.type) {&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;sync&quot;&lt;/span&gt;:&lt;br/&gt;    fn = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Function&lt;/span&gt;(&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.args(),&lt;br/&gt;     &lt;span&gt;&#x27;&quot;use strict&quot;;\n&#x27;&lt;/span&gt; +&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.content({  &lt;span&gt;// content 是在 SyncHook.js 中定义的&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;onError&lt;/span&gt;: &lt;span&gt;&lt;span&gt;err&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;`throw &lt;span&gt;${err}&lt;/span&gt;;\n`&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;onResult&lt;/span&gt;: &lt;span&gt;&lt;span&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;`return &lt;span&gt;${result}&lt;/span&gt;;\n`&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;resultReturns&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;onDone&lt;/span&gt;: &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;     })&lt;br/&gt;    );&lt;br/&gt;    &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.deinit();&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; fn;&lt;br/&gt; }&lt;br/&gt;        init(options) {  &lt;span&gt;// 方便在 HookCodeFactory 内部获取 options 和用户入参&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.options = options;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._args = options.args.slice();&lt;br/&gt; }&lt;br/&gt; deinit() {  &lt;span&gt;// 移除 init 的处理&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.options = &lt;span&gt;undefined&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._args = &lt;span&gt;undefined&lt;/span&gt;;&lt;br/&gt; }&lt;br/&gt;        args() {  &lt;span&gt;// 返回参数字符串&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; allArgs = &lt;span&gt;this&lt;/span&gt;._args;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (allArgs.length === &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; allArgs.join(&lt;span&gt;&quot;, &quot;&lt;/span&gt;);&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到 &lt;code&gt;setup&lt;/code&gt; 方法会将当前已注册事件的回调统一放到数组 &lt;code&gt;this._x&lt;/code&gt; 中，后续要触发所有订阅事件回调，只需要按顺序执行 &lt;code&gt;this._x&lt;/code&gt; 即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 &lt;code&gt;create&lt;/code&gt; 则通过 &lt;code&gt;new Function(args, functionString)&lt;/code&gt; 构造了一个函数，该函数最终由被重写的 &lt;code&gt;call&lt;/code&gt; 触发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以这里我们只需要再确认下 &lt;code&gt;this.content&lt;/code&gt; 方法执行后的返回值，就能知道最终 &lt;code&gt;call&lt;/code&gt; 方法所执行的函数是什么。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回看前面的代码，&lt;code&gt;content&lt;/code&gt; 是在 &lt;code&gt;SyncHook.js&lt;/code&gt; 中定义的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;SyncHook.js ****/&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SyncHookCodeFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; content({ onDone }) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.callTapsSeries({  &lt;span&gt;// 实际上是 this.callTapsSeries 的调用&lt;/span&gt;&lt;br/&gt;   onDone&lt;br/&gt;  });&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顺藤摸瓜，我们回 &lt;code&gt;HookCodeFactory.js&lt;/code&gt; 接着看 &lt;code&gt;this.callTapsSeries&lt;/code&gt; 的实现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; callTapsSeries({&lt;br/&gt;  onDone,&lt;br/&gt; }) {&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.options.taps.length === &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; onDone();&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; current = onDone;  &lt;span&gt;// () =&amp;gt; &#x27;&#x27;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;// 倒序遍历&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; j = &lt;span&gt;this&lt;/span&gt;.options.taps.length - &lt;span&gt;1&lt;/span&gt;; j &amp;gt;= &lt;span&gt;0&lt;/span&gt;; j--) {&lt;br/&gt;   &lt;span&gt;const&lt;/span&gt; content = &lt;span&gt;this&lt;/span&gt;.callTap(j, {&lt;br/&gt;    &lt;span&gt;onDone&lt;/span&gt;: current,&lt;br/&gt;   });&lt;br/&gt;   current = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; content;&lt;br/&gt;  }&lt;br/&gt;  code += current();&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt; }&lt;br/&gt;        &lt;br/&gt;        callTap(tapIndex, { onDone }) {&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; hasTapCached = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;`var _fn&lt;span&gt;${tapIndex}&lt;/span&gt; = _x[&lt;span&gt;${tapIndex}&lt;/span&gt;];\n`&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; tap = &lt;span&gt;this&lt;/span&gt;.options.taps[tapIndex];&lt;br/&gt;  &lt;span&gt;switch&lt;/span&gt; (tap.type) {&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;sync&quot;&lt;/span&gt;:&lt;br/&gt;    code += &lt;span&gt;`_fn&lt;span&gt;${tapIndex}&lt;/span&gt;(&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.args()}&lt;/span&gt;);\n`&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (onDone) {&lt;br/&gt;                                        &lt;span&gt;// onDone() 会返回上一次存储的 code&lt;/span&gt;&lt;br/&gt;     code += onDone();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;callTap&lt;/code&gt; 方法每次执行会生成和返回单个订阅事件执行代码字符串，例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; _fn0 = _x[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;_fn0(contry, city, people);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;callTapsSeries&lt;/code&gt; 会遍历订阅数组并逐次调用 &lt;code&gt;callTap&lt;/code&gt;，最后将全部订阅事件的执行代码字符串拼接起来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;理解 &lt;code&gt;callTapsSeries&lt;/code&gt; 方法的关键点，是理解 &lt;code&gt;current&lt;/code&gt; 变量在每次迭代前后的变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设存在 4 个订阅事件，则 &lt;code&gt;current&lt;/code&gt; 的变化如下：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;遍历次序&lt;/th&gt;&lt;th&gt;遍历索引&lt;/th&gt;&lt;th&gt;current 初始值&lt;/th&gt;&lt;th&gt;current 结束值&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;第 1 次&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;&lt;code&gt;onDone&lt;/code&gt;，即 &lt;code&gt;()=&amp;gt;&quot;&quot;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;() =&amp;gt; &quot;_x[3]代码段&quot;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第 2 次&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;&lt;code&gt;() =&amp;gt; &quot;_x[3]代码段&quot;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;() =&amp;gt; &quot;_x[2]代码段 + _x[3]代码段&quot;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第 3 次&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;&lt;code&gt;() =&amp;gt; &quot;_x[2]代码段 + _x[3]代码段&quot;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;() =&amp;gt; &quot;_x[1]代码段 + _x[2]代码段 + _x[3]代码段&quot;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第 4 次&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;&lt;code&gt;() =&amp;gt; &quot;_x[1]代码段 + _x[2]代码段 + _x[3]代码段&quot;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;() =&amp;gt; &quot;_x[0]代码段 + _x[1]代码段 + _x[2]代码段 + _x[3]代码段&quot;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此最后直接拼接 &lt;code&gt;content()&lt;/code&gt; 就能得到完整的代码字符串。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;顺便我们也可以知道，&lt;code&gt;onDone&lt;/code&gt; 参数是为了在遍历开始时，作为 &lt;code&gt;current&lt;/code&gt; 的默认值使用的。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每次用户调用 &lt;code&gt;syncHook.call&lt;/code&gt; 时，&lt;code&gt;callTapsSeries&lt;/code&gt; 生成的函数片段字符串：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 外部调用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; SyncHook([&lt;span&gt;&quot;contry&quot;&lt;/span&gt;, &lt;span&gt;&quot;city&quot;&lt;/span&gt;, &lt;span&gt;&quot;people&quot;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.call(&lt;span&gt;&#x27;China&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;Shenzhen&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// callTapsSeries 生成的函数片段字符串：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _fn0 = _x[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;_fn0(contry, city, people);&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _fn1 = _x[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;_fn1(contry, city, people);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终在 &lt;code&gt;create&lt;/code&gt; 方法中通过 &lt;code&gt;new Function&lt;/code&gt; 创建为常规函数供 &lt;code&gt;call&lt;/code&gt; 调用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;contry, city, people&lt;br/&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&quot;use strict&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _x = &lt;span&gt;this&lt;/span&gt;._x;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _fn0 = _x[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;    _fn0(contry, city, people);&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _fn1 = _x[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;    _fn1(contry, city, people);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行后， &lt;code&gt;this._x&lt;/code&gt; 里的事件回调会按顺序逐个执行。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、SyncBailHook 的基础实现&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1 介绍&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SyncBailHook&lt;/code&gt; 也是一个同步钩子，不同于 &lt;code&gt;SyncHook&lt;/code&gt; 的地方是，如果某个订阅事件的回调函数返回了非 &lt;code&gt;undefined&lt;/code&gt; 的值，那么会中断该钩子后续其它订阅回调的调用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; { SyncBailHook } = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;tapable&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 初始化钩子&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; SyncBailHook([&lt;span&gt;&quot;contry&quot;&lt;/span&gt;, &lt;span&gt;&quot;city&quot;&lt;/span&gt;, &lt;span&gt;&quot;people&quot;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 订阅事件&lt;/span&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-1:&#x27;&lt;/span&gt;, contry, city, people)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-2:&#x27;&lt;/span&gt;, contry, city, people);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;  &lt;span&gt;// 设置了非 undefined 的返回值&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 因为 event-2 设置了返回值，所以后续的 event-3、event-4 都不会执行&lt;/span&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-3&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-3:&#x27;&lt;/span&gt;, contry, city, people)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-4&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-4:&#x27;&lt;/span&gt;, contry, city, people)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 执行订阅回调&lt;/span&gt;&lt;br/&gt;hook.call(&lt;span&gt;&#x27;USA&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;NYC&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;Trump&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 ******/&lt;/span&gt;&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt;: USA NYC Trump&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt;: USA NYC Trump&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上方示例中，因为 &lt;code&gt;event-2&lt;/code&gt; 的回调返回了 &lt;code&gt;null&lt;/code&gt;，故中断了后续其它订阅回调的执行。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.2 代码实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SyncBailHook&lt;/code&gt; 的入口模块为 &lt;code&gt;SyncBailHook.js&lt;/code&gt;，它相对于前一节的 &lt;code&gt;SyncHook.js&lt;/code&gt; 而言，只是多了一个 &lt;code&gt;content/callTapsSeries&lt;/code&gt; 方法的 &lt;code&gt;onResult&lt;/code&gt; 传参：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;SyncBailHook.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Hook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./Hook&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; HookCodeFactory = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./HookCodeFactory&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SyncBailHookCodeFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; content({ onDone, onResult }) {  &lt;span&gt;// 新增 onResult&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.callTapsSeries({&lt;br/&gt;   onDone,  &lt;span&gt;// () =&amp;gt; &#x27;&#x27;&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;// 新增 onResult&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;onResult&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, result, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;`if(&lt;span&gt;${result}&lt;/span&gt; !== undefined) {\n&lt;span&gt;${onResult(&lt;br/&gt;     result&lt;br/&gt;    )}&lt;/span&gt;;\n} else {\n&lt;span&gt;${next()}&lt;/span&gt;}\n`&lt;/span&gt;,&lt;br/&gt;  });&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;SyncBailHook&lt;/span&gt;(&lt;span&gt;args = [], name = undefined&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = SyncBailHook;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;onXXXX&lt;/code&gt; 都是模板参数，它们执行后都会返回模板字符串，用于在 &lt;code&gt;callTap&lt;/code&gt; 方法里拼接函数代码段。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们需要在调用 &lt;code&gt;this.content&lt;/code&gt; 和 &lt;code&gt;this.callTapsSeries&lt;/code&gt; 的地方分别做点修改，让它们利用这个新增的模板参数，来实现 &lt;code&gt;SyncBailHook&lt;/code&gt; 的功能。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;⑴ content 调用处的改动&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt; create(options) {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.init(options);&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; fn;&lt;br/&gt;  &lt;span&gt;switch&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.options.type) {&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;sync&quot;&lt;/span&gt;:&lt;br/&gt;    fn = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Function&lt;/span&gt;(&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.args(),&lt;br/&gt;     &lt;span&gt;&#x27;&quot;use strict&quot;;\n&#x27;&lt;/span&gt; +&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.header() +&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.content({&lt;br/&gt;      &lt;span&gt;onDone&lt;/span&gt;: &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;                                                &lt;span&gt;// 新增属性&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;onResult&lt;/span&gt;: &lt;span&gt;&lt;span&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;`return &lt;span&gt;${result}&lt;/span&gt;;\n`&lt;/span&gt;,&lt;br/&gt;     })&lt;br/&gt;    );&lt;br/&gt;    &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.deinit();&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; fn;&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的实现，其实等同于 &lt;code&gt;SyncBailHookCodeFactory&lt;/code&gt; 调用 &lt;code&gt;content&lt;/code&gt; 时不传 &lt;code&gt;onResult&lt;/code&gt; 的简易处理：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SyncBailHookCodeFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; content({ onDone }) {  &lt;span&gt;// 注意这里不传 onResult 了&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.callTapsSeries({&lt;br/&gt;   onDone,  &lt;span&gt;//  () =&amp;gt; &quot;&quot;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;onResult&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, result, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;`if(&lt;span&gt;${result}&lt;/span&gt; !== undefined) {\n&lt;br/&gt;     return result&lt;br/&gt;    ;\n} else {\n&lt;span&gt;${next()}&lt;/span&gt;}\n`&lt;/span&gt;,&lt;br/&gt;  });&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;⑵ this.callTapsSeries 调用处的改动&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 2.2.3 小节末尾，我们知道 &lt;code&gt;this.callTapsSeries&lt;/code&gt; 中最关键的实现，是利用了 &lt;code&gt;current&lt;/code&gt; 的变化和传递，来实现各订阅事件回调执行代码字符串的拼接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于 &lt;code&gt;SyncBailHook&lt;/code&gt; 的需求，我们可以利用 &lt;code&gt;onResult&lt;/code&gt; 把 &lt;code&gt;current()&lt;/code&gt; 的模板包起来（把 &lt;code&gt;onResult&lt;/code&gt; 的第三个参数设为 &lt;code&gt;current&lt;/code&gt; 即可）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt; callTapsSeries({&lt;br/&gt;  onDone,&lt;br/&gt;  onResult &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt; }) {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.options.taps.length === &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; onDone();&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; current = onDone;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; j = &lt;span&gt;this&lt;/span&gt;.options.taps.length - &lt;span&gt;1&lt;/span&gt;; j &amp;gt;= &lt;span&gt;0&lt;/span&gt;; j--) {&lt;br/&gt;   &lt;span&gt;const&lt;/span&gt; content = &lt;span&gt;this&lt;/span&gt;.callTap(j, {&lt;br/&gt;    &lt;span&gt;onDone&lt;/span&gt;: !onResult &amp;amp;&amp;amp; current,  &lt;span&gt;// 如果存在 onResult 则设为 false&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 新增 onResult 传参，把 current 包起来&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;onResult&lt;/span&gt;:&lt;br/&gt;     onResult &amp;amp;&amp;amp;&lt;br/&gt;     (&lt;span&gt;&lt;span&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;                                                &lt;span&gt;return&lt;/span&gt; onResult(j, result, current);&lt;br/&gt;     }),&lt;br/&gt;   });&lt;br/&gt;   current = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; content;&lt;br/&gt;  }&lt;br/&gt;  code += current();&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt; }&lt;br/&gt;        &lt;br/&gt;        callTap(tapIndex, { onDone, onResult }) {  &lt;span&gt;// 新增 onResult 参数&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;`var _fn&lt;span&gt;${tapIndex}&lt;/span&gt; = _x[&lt;span&gt;${tapIndex}&lt;/span&gt;];\n`&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; tap = &lt;span&gt;this&lt;/span&gt;.options.taps[tapIndex];&lt;br/&gt;  &lt;span&gt;switch&lt;/span&gt; (tap.type) {&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;sync&quot;&lt;/span&gt;:&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (onResult) {  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;     code += &lt;span&gt;`var _result&lt;span&gt;${tapIndex}&lt;/span&gt; = _fn&lt;span&gt;${tapIndex}&lt;/span&gt;(&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.args()}&lt;/span&gt;);\n`&lt;/span&gt;;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;     code += &lt;span&gt;`_fn&lt;span&gt;${tapIndex}&lt;/span&gt;(&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.args()}&lt;/span&gt;);\n`&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (onResult) {  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;     code += onResult(&lt;span&gt;`_result&lt;span&gt;${tapIndex}&lt;/span&gt;`&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;                                &lt;br/&gt;                                &lt;span&gt;// 对 SyncBailHook 来说 onDone=false&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (onDone) {&lt;br/&gt;     code += onDone();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样每次执行 &lt;code&gt;callTap&lt;/code&gt; 时，我们都能获得如下模板：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 假设 I 为遍历索引&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _fnI = _x[I];&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _resultI = _fnI(...args);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(_resultI !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; _resultI;&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    [current() 返回的模板，即前一次迭代生成的代码段]&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每次用户调用 &lt;code&gt;syncBailHook.call&lt;/code&gt; 时，&lt;code&gt;callTapsSeries&lt;/code&gt; 生成的函数片段字符串：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 外部调用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; SyncBailHook([&lt;span&gt;&quot;contry&quot;&lt;/span&gt;, &lt;span&gt;&quot;city&quot;&lt;/span&gt;, &lt;span&gt;&quot;people&quot;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-3&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-4&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.call(&lt;span&gt;&#x27;USA&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;NYC&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;Trump&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// callTapsSeries 生成的函数片段字符串：&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _fn0 = _x[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _result0 = _fn0(contry, city, people);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (_result0 !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; _result0;&lt;br/&gt;        ;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _fn1 = _x[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _result1 = _fn1(contry, city, people);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (_result1 !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; _result1;&lt;br/&gt;            ;&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;var&lt;/span&gt; _fn2 = _x[&lt;span&gt;2&lt;/span&gt;];&lt;br/&gt;            &lt;span&gt;var&lt;/span&gt; _result2 = _fn2(contry, city, people);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_result2 !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; _result2;&lt;br/&gt;                ;&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;var&lt;/span&gt; _fn3 = _x[&lt;span&gt;3&lt;/span&gt;];&lt;br/&gt;                &lt;span&gt;var&lt;/span&gt; _result3 = _fn3(contry, city, people);&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (_result3 !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;                    &lt;span&gt;return&lt;/span&gt; _result3;&lt;br/&gt;                    ;&lt;br/&gt;                } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四、SyncWaterfallHook&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.1 介绍&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SyncWaterfallHook&lt;/code&gt; 依旧为同步钩子，不过它会把前一个订阅回调所返回的内容，作为第一个参数传递给后续的订阅回调：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; SyncWaterfallHook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;./SyncWaterfallHook.js&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; SyncWaterfallHook([&lt;span&gt;&quot;contry&quot;&lt;/span&gt;, &lt;span&gt;&quot;city&quot;&lt;/span&gt;, &lt;span&gt;&quot;people&quot;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-1:&#x27;&lt;/span&gt;, contry, city, people)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-2:&#x27;&lt;/span&gt;, contry, city, people);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&#x27;The United State&#x27;&lt;/span&gt;;  &lt;span&gt;// 设置了返回值&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-3&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-3:&#x27;&lt;/span&gt;, contry, city, people)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-4&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-4:&#x27;&lt;/span&gt;, contry, city, people)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.call(&lt;span&gt;&#x27;USA&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;NYC&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;Trump&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 ******/&lt;/span&gt;&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt;: USA NYC Trump&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt;: USA NYC Trump&lt;br/&gt;event&lt;span&gt;-3&lt;/span&gt;: The United State NYC Trump&lt;br/&gt;event&lt;span&gt;-4&lt;/span&gt;: The United State NYC Trump&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.2 代码实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过前面两节，我们知道了让订阅事件回调按钩子逻辑来执行的原理，不外乎是通过传入 &lt;code&gt;onXXXX&lt;/code&gt; 的模板参数，来生成 &lt;code&gt;hook.call&lt;/code&gt; 最终调用的函数代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SyncWaterfallHook&lt;/code&gt; 的实现也非常简单，只需要调整 &lt;code&gt;onDone&lt;/code&gt; 和 &lt;code&gt;onResult&lt;/code&gt; 两个模板参数即可：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;SyncWaterfallHook.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Hook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./Hook&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; HookCodeFactory = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./HookCodeFactory&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SyncWaterfallHookCodeFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; content({ onResult }) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.callTapsSeries({&lt;br/&gt;   &lt;span&gt;onResult&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, result, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {  &lt;span&gt;// 修改点&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`if(&lt;span&gt;${result}&lt;/span&gt; !== undefined) {\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;._args[&lt;span&gt;0&lt;/span&gt;]}&lt;/span&gt; = &lt;span&gt;${result}&lt;/span&gt;;\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`}\n`&lt;/span&gt;;&lt;br/&gt;    code += next();&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;   },&lt;br/&gt;   &lt;span&gt;onDone&lt;/span&gt;: &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; onResult(&lt;span&gt;this&lt;/span&gt;._args[&lt;span&gt;0&lt;/span&gt;]),  &lt;span&gt;// 修改点&lt;/span&gt;&lt;br/&gt;  });&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;SyncWaterfallHook&lt;/span&gt;(&lt;span&gt;args = [], name = undefined&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = SyncWaterfallHook;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;onDone&lt;/code&gt; 为订阅对象数组遍历时的初始化模板函数，执行后会生成 &lt;code&gt;return ${this._args[0]};\n&lt;/code&gt; 字符串。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;onResult&lt;/code&gt; 为订阅对象数组遍历时的非初始化模板函数，会判断上一个订阅回调返回值是否非 &lt;code&gt;undefined&lt;/code&gt;，是则将 &lt;code&gt;syncWaterfallHook.call&lt;/code&gt; 的第一个参数改为此返回值，再拼接上一次遍历生成的模板内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每次用户调用 &lt;code&gt;syncWaterfallHook.call&lt;/code&gt; 时，&lt;code&gt;callTapsSeries&lt;/code&gt; 生成的函数片段字符串：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 外部调用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; SyncWaterfallHook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;./SyncWaterfallHook.js&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; SyncWaterfallHook([&lt;span&gt;&quot;contry&quot;&lt;/span&gt;, &lt;span&gt;&quot;city&quot;&lt;/span&gt;, &lt;span&gt;&quot;people&quot;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-3&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-4&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.call(&lt;span&gt;&#x27;USA&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;NYC&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;Trump&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// callTapsSeries 生成的函数片段字符串：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _fn0 = _x[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _result0 = _fn0(contry, city, people);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(_result0 !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;    contry = _result0;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _fn1 = _x[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _result1 = _fn1(contry, city, people);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(_result1 !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;    contry = _result1;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _fn2 = _x[&lt;span&gt;2&lt;/span&gt;];&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _result2 = _fn2(contry, city, people);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(_result2 !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;    contry = _result2;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _fn3 = _x[&lt;span&gt;3&lt;/span&gt;];&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _result3 = _fn3(contry, city, people);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(_result3 !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;    contry = _result3;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; contry;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;五、SyncLoopHook&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5.1 介绍&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是最后一个同步钩子了，&lt;code&gt;SyncLoopHook&lt;/code&gt; 表示如果存在某个订阅事件回调返回了非 &lt;code&gt;undefined&lt;/code&gt; 的值，则全部订阅事件回调从头执行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; SyncLoopHook([]);&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; count = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-2, count:&#x27;&lt;/span&gt;, count);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (count++ !== &lt;span&gt;3&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-3&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-3&#x27;&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.call()&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 ******/&lt;/span&gt;&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt;, &lt;span&gt;count&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt;, &lt;span&gt;count&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt;, &lt;span&gt;count&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;br/&gt;event&lt;span&gt;-3&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5.2 代码实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SyncLoopHook&lt;/code&gt; “从头执行全部回调”的逻辑比较特殊，旧的方法已经无法满足该需求，所以 Tapable 为其新开了一个 &lt;code&gt;callTapsLooping&lt;/code&gt; 方法来处理：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;SyncLoopHook.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Hook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./Hook&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; HookCodeFactory = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./HookCodeFactory&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SyncLoopHookCodeFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; content({ onDone }) {&lt;br/&gt;  &lt;span&gt;// this.callTapsLooping 为新增方法&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.callTapsLooping({&lt;br/&gt;   onDone&lt;br/&gt;  });&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;SyncLoopHook&lt;/span&gt;(&lt;span&gt;args = [], name = undefined&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = SyncLoopHook;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看下 &lt;code&gt;callTapsLooping&lt;/code&gt; 方法的实现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// 新增 callTapsLooping 方法&lt;/span&gt;&lt;br/&gt; callTapsLooping({&lt;br/&gt;  onDone,&lt;br/&gt; }) {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.options.taps.length === &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; onDone();&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;&quot;var _loop;\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;&quot;do {\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;&quot;_loop = false;\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;this&lt;/span&gt;.callTapsSeries({&lt;br/&gt;   &lt;span&gt;onResult&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, result, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`if(&lt;span&gt;${result}&lt;/span&gt; !== undefined) {\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;&quot;_loop = true;\n&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`} else {\n`&lt;/span&gt;;&lt;br/&gt;    code += next();&lt;br/&gt;    code += &lt;span&gt;`}\n`&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;   },&lt;br/&gt;   onDone,  &lt;span&gt;// () =&amp;gt; &#x27;&#x27;&lt;/span&gt;&lt;br/&gt;  });&lt;br/&gt;  code += &lt;span&gt;&quot;} while(_loop);\n&quot;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，&lt;code&gt;callTapsLooping&lt;/code&gt; 在模板的外层包了个 &lt;code&gt;do while&lt;/code&gt; 循环：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; _loop;&lt;br/&gt;&lt;span&gt;do&lt;/span&gt; {&lt;br/&gt;    _loop = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    ${ callTapsSeries 生成的模板 }&lt;br/&gt;} &lt;span&gt;while&lt;/span&gt;(_loop)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的后续逻辑很好猜测：&lt;code&gt;callTapsSeries&lt;/code&gt; 生成的模板，只需要判断订阅回调返回值是否为 &lt;code&gt;undefined&lt;/code&gt;，然后修改 &lt;code&gt;_loop&lt;/code&gt; 即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 &lt;code&gt;callTapsLooping&lt;/code&gt; 传入 &lt;code&gt;callTapsSeries&lt;/code&gt; 的 &lt;code&gt;onResult&lt;/code&gt; 参数完善了此块逻辑：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9302721088435374&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jQmwTIFl1V3mLtjLmibWIInYyV0GeYqiaNAodbr0om1oTMoicEuC4M2FMUjSSbgXosx9AmFsY1hNSanTAWp5cQMAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;588&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每次用户调用 &lt;code&gt;syncLoopHook.call&lt;/code&gt; 时，&lt;code&gt;callTapsLooping&lt;/code&gt; 生成的函数片段字符串：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 外部调用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; SyncLoopHook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;./SyncLoopHook.js&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; SyncLoopHook([]);&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; count = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-3&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.call()&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// callTapsLooping 生成的函数片段字符串：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _loop;&lt;br/&gt;&lt;span&gt;do&lt;/span&gt; {&lt;br/&gt;    _loop = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _fn0 = _x[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _result0 = _fn0();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (_result0 !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;        _loop = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _fn1 = _x[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _result1 = _fn1();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (_result1 !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;            _loop = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;var&lt;/span&gt; _fn2 = _x[&lt;span&gt;2&lt;/span&gt;];&lt;br/&gt;            &lt;span&gt;var&lt;/span&gt; _result2 = _fn2();&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_result2 !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;                _loop = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;} &lt;span&gt;while&lt;/span&gt; (_loop);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;六、AsyncSeriesHook&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6.1 介绍&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们已经介绍完了 Tapable 的同步钩子，接下来逐个介绍 Tapable 中异步相关的几个钩子，首先介绍最简单的 &lt;code&gt;AsyncSeriesHook&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AsyncSeriesHook&lt;/code&gt; 表示一个异步串行的钩子，可以通过 &lt;code&gt;hook.tapAsync&lt;/code&gt; 或 &lt;code&gt;hook.tapPromise&lt;/code&gt; 方法，来注册异步的事件回调。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些订阅事件的回调依旧是逐个执行，即必须等到上一个异步回调通知钩子它已经执行完毕了，才能开始下一个异步回调：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 初始化异步串行钩子&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; AsyncSeriesHook([&lt;span&gt;&#x27;passenger&#x27;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 使用 tapAsync 订阅事件&lt;/span&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Beijing&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is on the way to Beijing...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    setTimeout(callback, &lt;span&gt;2000&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 使用 tapPromise 订阅事件&lt;/span&gt;&lt;br/&gt;hook.tapPromise(&lt;span&gt;&#x27;Back to Shenzhen&#x27;&lt;/span&gt;, (passenger) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is now comming back to Shenzhen...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;(&lt;span&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        setTimeout(resolve, &lt;span&gt;3000&lt;/span&gt;);&lt;br/&gt;    });&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 执行订阅回调&lt;/span&gt;&lt;br/&gt;hook.callAsync(&lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;, () =&amp;gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Done!&#x27;&lt;/span&gt;) });&lt;br/&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Starts here...&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 ******/&lt;/span&gt;&lt;br/&gt;VJ is on the way to Beijing...&lt;br/&gt;Starts here...&lt;br/&gt;VJ is now comming back to Shenzhen...&lt;br/&gt;Done!&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于使用 &lt;code&gt;hook.tapAsync&lt;/code&gt; 来订阅事件的异步回调，可以通过执行最后一个参数来通知钩子“我已经执行完毕，可以接着执行后面的回调了”；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于使用 &lt;code&gt;hook.tapPromise&lt;/code&gt; 来订阅事件的异步回调，需要返回一个 &lt;code&gt;Promise&lt;/code&gt;，当其状态为 &lt;code&gt;resolve&lt;/code&gt; 时，钩子才会开始执行后续其它订阅回调。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外需要留意下，&lt;code&gt;AsyncSeriesHook&lt;/code&gt; 钩子使用新的 &lt;code&gt;hook.callAsync&lt;/code&gt; 来执行订阅回调（而不再是 &lt;code&gt;hook.call&lt;/code&gt;），且支持传入回调（最后一个参数），在全部订阅事件执行完毕后触发。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6.2 代码实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先是 &lt;code&gt;AsyncSeriesHook&lt;/code&gt; 模块的代码，结构和 &lt;code&gt;SyncHook&lt;/code&gt; 是基本一样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;AsyncSeriesHook.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Hook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./Hook&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; HookCodeFactory = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./HookCodeFactory&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AsyncSeriesHookCodeFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; content({ onDone, onError }) {  &lt;span&gt;// 新增 onError&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.callTapsSeries({&lt;br/&gt;                        &lt;span&gt;// 新增 onError，处理异步回调中的错误&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;onError&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, err, next, doneBreak&lt;/span&gt;) =&amp;gt;&lt;/span&gt; onError(err) + doneBreak(&lt;span&gt;true&lt;/span&gt;),&lt;br/&gt;   onDone&lt;br/&gt;  });&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;AsyncSeriesHook&lt;/span&gt;(&lt;span&gt;args = [], name = undefined&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = AsyncSeriesHook;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这里我们新增了 &lt;code&gt;onError&lt;/code&gt; 方法来处理异步回调中的错误。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AsyncSeriesHook&lt;/code&gt; 钩子实现的关键点，是对其几个专用方法 &lt;code&gt;hook.tapAsync&lt;/code&gt;、&lt;code&gt;hook.tapPromise&lt;/code&gt; 和 &lt;code&gt;hook.callAsync&lt;/code&gt; 的实现，我们先到 &lt;code&gt;Hook.js&lt;/code&gt; 中查看它们的定义：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;Hook.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; CALL_DELEGATE = &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;...args&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.call = &lt;span&gt;this&lt;/span&gt;._createCall(&lt;span&gt;&quot;sync&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.call(...args);&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; CALL_ASYNC_DELEGATE = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;...args&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;this&lt;/span&gt;.callAsync = &lt;span&gt;this&lt;/span&gt;._createCall(&lt;span&gt;&quot;async&quot;&lt;/span&gt;);&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.callAsync(...args);&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Hook&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;constructor&lt;/span&gt;(args = [], name = undefined) {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;._args = args;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.name = name;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.taps = [];&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.call = CALL_DELEGATE;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;._call = CALL_DELEGATE;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;._callAsync = CALL_ASYNC_DELEGATE;  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt; &lt;span&gt;this&lt;/span&gt;.callAsync = CALL_ASYNC_DELEGATE;  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    tap(options, fn) {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;._tap(&lt;span&gt;&quot;sync&quot;&lt;/span&gt;, options, fn);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 新增 tapAsync&lt;/span&gt;&lt;br/&gt;    tapAsync(options, fn) {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;._tap(&lt;span&gt;&quot;async&quot;&lt;/span&gt;, options, fn);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 新增 tapPromise&lt;/span&gt;&lt;br/&gt;    tapPromise(options, fn) {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;._tap(&lt;span&gt;&quot;promise&quot;&lt;/span&gt;, options, fn);&lt;br/&gt;    }&lt;br/&gt;    _resetCompilation() {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.call = &lt;span&gt;this&lt;/span&gt;._call;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.callAsync = &lt;span&gt;this&lt;/span&gt;._callAsync;  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = Hook;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到这几个新增的方法所调用的接口跟之前的 &lt;code&gt;hoo.tap&lt;/code&gt;、&lt;code&gt;hook.call&lt;/code&gt; 一致，只是把订阅对象信息的 &lt;code&gt;type&lt;/code&gt; 标记为 &lt;code&gt;async/promise&lt;/code&gt; 罢了。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们继续到 &lt;code&gt;HookCodeFactory&lt;/code&gt; 查阅 &lt;code&gt;hook.callAsync&lt;/code&gt; 的处理：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;        create(options) {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.init(options);&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; fn;&lt;br/&gt;  &lt;span&gt;switch&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.options.type) {&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;sync&quot;&lt;/span&gt;:&lt;br/&gt;    fn = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Function&lt;/span&gt;(&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.args(),&lt;br/&gt;     &lt;span&gt;&#x27;&quot;use strict&quot;;\n&#x27;&lt;/span&gt; +&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.header() +&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.content({&lt;br/&gt;      &lt;span&gt;onDone&lt;/span&gt;: &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;onResult&lt;/span&gt;: &lt;span&gt;&lt;span&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;`return &lt;span&gt;${result}&lt;/span&gt;;\n`&lt;/span&gt;,&lt;br/&gt;     })&lt;br/&gt;    );&lt;br/&gt;    &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;   &lt;span&gt;// 新增 async 类型处理(hook.callAsync)&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;async&quot;&lt;/span&gt;:&lt;br/&gt;    fn = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Function&lt;/span&gt;(&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.args({&lt;br/&gt;      &lt;span&gt;after&lt;/span&gt;: &lt;span&gt;&quot;_callback&quot;&lt;/span&gt;&lt;br/&gt;     }),&lt;br/&gt;     &lt;span&gt;&#x27;&quot;use strict&quot;;\n&#x27;&lt;/span&gt; +&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.header() +&lt;br/&gt;     &lt;span&gt;this&lt;/span&gt;.content({&lt;br/&gt;      &lt;span&gt;onError&lt;/span&gt;: &lt;span&gt;&lt;span&gt;err&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;`_callback(&lt;span&gt;${err}&lt;/span&gt;);\n`&lt;/span&gt;,&lt;br/&gt;                                                &lt;span&gt;onResult&lt;/span&gt;: &lt;span&gt;&lt;span&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;`_callback(null, &lt;span&gt;${result}&lt;/span&gt;);\n`&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;onDone&lt;/span&gt;: &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;&quot;_callback();\n&quot;&lt;/span&gt;&lt;br/&gt;     })&lt;br/&gt;    );&lt;br/&gt;    &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.deinit();&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; fn;&lt;br/&gt; }&lt;br/&gt;        callTapsSeries({&lt;br/&gt;  onDone,&lt;br/&gt;                onResult,&lt;br/&gt;  onError, &lt;span&gt;// 新增 onError&lt;/span&gt;&lt;br/&gt; }) {&lt;br/&gt;  &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; j = &lt;span&gt;this&lt;/span&gt;.options.taps.length - &lt;span&gt;1&lt;/span&gt;; j &amp;gt;= &lt;span&gt;0&lt;/span&gt;; j--) {&lt;br/&gt;   &lt;span&gt;const&lt;/span&gt; content = &lt;span&gt;this&lt;/span&gt;.callTap(j, {&lt;br/&gt;    &lt;span&gt;onError&lt;/span&gt;: &lt;span&gt;&lt;span&gt;error&lt;/span&gt; =&amp;gt;&lt;/span&gt; onError(j, error, current, doneBreak),  &lt;span&gt;// 新增 onError&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;   });&lt;br/&gt;   &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt; }&lt;br/&gt;        args({ before, after } = {}) {  &lt;span&gt;// 新增 before, after 参数&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; allArgs = &lt;span&gt;this&lt;/span&gt;._args;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (before) allArgs = [before].concat(allArgs);  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (after) allArgs = allArgs.concat(after);  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (allArgs.length === &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; allArgs.join(&lt;span&gt;&quot;, &quot;&lt;/span&gt;);&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如同 &lt;code&gt;hook.call&lt;/code&gt; 一样，&lt;code&gt;hook.callAsync&lt;/code&gt; 执行时，先调用的是 &lt;code&gt;create&lt;/code&gt; 方法里 &lt;code&gt;case  &quot;async&quot;&lt;/code&gt; 的代码块。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从传入 &lt;code&gt;this.content&lt;/code&gt; 的参数可以猜测到，&lt;code&gt;hook.callAsync&lt;/code&gt; 的函数模板里，会使用 Node &lt;strong&gt;Error First&lt;/strong&gt; 异步回调的格式来书写相应逻辑：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;callback&lt;/span&gt;(&lt;span&gt;err, nextAsyncFunc&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (err) {&lt;br/&gt;        &lt;span&gt;// 错误处理&lt;/span&gt;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        nextAsyncFunc &amp;amp;&amp;amp; nextAsyncFunc(callback)&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外留意 &lt;code&gt;this.args&lt;/code&gt; 方法的改动 —— 在返回用户入参字符串的同时，可以通过传入 &lt;code&gt;before/after&lt;/code&gt;，往返回的字符串前后再多插一个自定义参数。这也是为何 &lt;code&gt;hook.callAsync&lt;/code&gt; 相较同步钩子的 &lt;code&gt;hook.call&lt;/code&gt;，可以多传入一个可执行的回调参数的原因。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们接着看 &lt;code&gt;callTap&lt;/code&gt; 方法里新增的对 &lt;code&gt;tapAsync&lt;/code&gt; 和 &lt;code&gt;tapPromise&lt;/code&gt; 订阅回调的模板处理逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;⑴ 生成 tapAsync 订阅回调模板&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;        callTap(tapIndex, { onError, onResult, onDone }) {&lt;br/&gt;            &lt;span&gt;let&lt;/span&gt; code += &lt;span&gt;`var _fn&lt;span&gt;${tapIndex}&lt;/span&gt; = &lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.getTapFn(tapIndex)}&lt;/span&gt;;\n`&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;const&lt;/span&gt; tap = &lt;span&gt;this&lt;/span&gt;.options.taps[tapIndex];&lt;br/&gt;            &lt;span&gt;switch&lt;/span&gt; (tap.type) {&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;sync&quot;&lt;/span&gt;:&lt;br/&gt;                        &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;// 新增 async 类型处理（通过 hook.tapAsync 订阅的回调模板处理）&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;async&quot;&lt;/span&gt;:&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; cbCode = &lt;span&gt;`(function(_err&lt;span&gt;${tapIndex}&lt;/span&gt;) {\n`&lt;/span&gt;;&lt;br/&gt;    cbCode += &lt;span&gt;`if(_err&lt;span&gt;${tapIndex}&lt;/span&gt;) {\n`&lt;/span&gt;;&lt;br/&gt;    cbCode += onError(&lt;span&gt;`_err&lt;span&gt;${tapIndex}&lt;/span&gt;`&lt;/span&gt;);&lt;br/&gt;    cbCode += &lt;span&gt;&quot;} else {\n&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (onDone) {&lt;br/&gt;     cbCode += onDone();&lt;br/&gt;    }&lt;br/&gt;    cbCode += &lt;span&gt;&quot;}\n&quot;&lt;/span&gt;;&lt;br/&gt;    cbCode += &lt;span&gt;&quot;})&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`_fn&lt;span&gt;${tapIndex}&lt;/span&gt;(&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.args({&lt;br/&gt;     after: cbCode&lt;br/&gt;    }&lt;/span&gt;)});\n`&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该代码段会生成如下模板：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 假设遍历索引 tapIndex 为 I&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _fnI = _x[I];&lt;br/&gt;_fnI(passenger, &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;_errI&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(_errI) {&lt;br/&gt;        _callback(_errI);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        ${ 前一次遍历的模板 }&lt;br/&gt;    }&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即生成了一个 Error First 的异步回调嵌套模板。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;留意模板中的 &lt;code&gt;_callback&lt;/code&gt; 是最终在 &lt;code&gt;create&lt;/code&gt; 方法中，通过 &lt;code&gt;new Function&lt;/code&gt; 时传入的形参，代表用户传入 &lt;code&gt;hook.callAsync&lt;/code&gt; 的回调参数（最后一个参数，在报错或全部订阅事件结束时候触发）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;fn = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Function&lt;/span&gt;(&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.args({&lt;br/&gt;        &lt;span&gt;after&lt;/span&gt;: &lt;span&gt;&quot;_callback&quot;&lt;/span&gt;&lt;br/&gt;    }),&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.header() + &lt;span&gt;this&lt;/span&gt;.content(...)&lt;br/&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户调用 &lt;code&gt;asyncSeriesHook.call&lt;/code&gt; 时，&lt;code&gt;callTapsSeries&lt;/code&gt; 生成的函数片段字符串：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 外部调用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; AsyncSeriesHook([&lt;span&gt;&#x27;passenger&#x27;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Beijing&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is on the way to Beijing...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    setTimeout(callback, &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Shanghai&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is on the way to Shanghai...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    setTimeout(callback, &lt;span&gt;2000&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.callAsync(&lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;, () =&amp;gt; {});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// callTapsSeries 生成的函数片段字符串：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _fn0 = _x[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;_fn0(passenger, (&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err0&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (_err0) {&lt;br/&gt;        _callback(_err0);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _fn1 = _x[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;        _fn1(passenger, (&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err1&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_err1) {&lt;br/&gt;                _callback(_err1);&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                _callback();&lt;br/&gt;            }&lt;br/&gt;        }));&lt;br/&gt;    }&lt;br/&gt;}));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;⑵ 生成 tapPromise 订阅回调模板&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分析完 &lt;code&gt;hook.tapAsync&lt;/code&gt; 方式订阅的回调的模板生成方式，我们来看下 &lt;code&gt;hook.tapPromise&lt;/code&gt; 是如何生成模板的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;        callTap(tapIndex, { onError, onResult, onDone }) {&lt;br/&gt;            &lt;span&gt;let&lt;/span&gt; code += &lt;span&gt;`var _fn&lt;span&gt;${tapIndex}&lt;/span&gt; = &lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.getTapFn(tapIndex)}&lt;/span&gt;;\n`&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;const&lt;/span&gt; tap = &lt;span&gt;this&lt;/span&gt;.options.taps[tapIndex];&lt;br/&gt;            &lt;span&gt;switch&lt;/span&gt; (tap.type) {&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;sync&quot;&lt;/span&gt;:&lt;br/&gt;                        &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;async&quot;&lt;/span&gt;:&lt;br/&gt;   &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;// 新增 async 类型处理（通过 hook.tapPromise 订阅的回调模板处理）&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;promise&quot;&lt;/span&gt;:&lt;br/&gt;    code += &lt;span&gt;`var _hasResult&lt;span&gt;${tapIndex}&lt;/span&gt; = false;\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`var _promise&lt;span&gt;${tapIndex}&lt;/span&gt; = _fn&lt;span&gt;${tapIndex}&lt;/span&gt;(&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.args()}&lt;/span&gt;);\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`if (!_promise&lt;span&gt;${tapIndex}&lt;/span&gt; || !_promise&lt;span&gt;${tapIndex}&lt;/span&gt;.then)\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`  throw new Error(&#x27;Tap function (tapPromise) did not return promise (returned &#x27; + _promise&lt;span&gt;${tapIndex}&lt;/span&gt; + &#x27;)&#x27;);\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`_promise&lt;span&gt;${tapIndex}&lt;/span&gt;.then((function(_result&lt;span&gt;${tapIndex}&lt;/span&gt;) {\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`_hasResult&lt;span&gt;${tapIndex}&lt;/span&gt; = true;\n`&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (onDone) {&lt;br/&gt;     code += onDone();&lt;br/&gt;    }&lt;br/&gt;    code += &lt;span&gt;`}), function(_err&lt;span&gt;${tapIndex}&lt;/span&gt;) {\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`if(_hasResult&lt;span&gt;${tapIndex}&lt;/span&gt;) throw _err&lt;span&gt;${tapIndex}&lt;/span&gt;;\n`&lt;/span&gt;;&lt;br/&gt;    code += onError(&lt;span&gt;`_err&lt;span&gt;${tapIndex}&lt;/span&gt;`&lt;/span&gt;);&lt;br/&gt;    code += &lt;span&gt;&quot;});\n&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该代码段会生成如下模板：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 假设遍历索引 tapIndex 为 I&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _fnI = _x[I];&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _hasResultI = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _promiseI = _fnI(passenger);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (!_promiseI || !_promiseI.then)&lt;br/&gt;    &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;Tap function (tapPromise) did not return promise (returned &#x27;&lt;/span&gt; + _promiseI + &lt;span&gt;&#x27;)&#x27;&lt;/span&gt;);&lt;br/&gt;_promise1.then((&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_resultI&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    _hasResultI = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;    ${ 上一次遍历生成的模板 }&lt;br/&gt;}), &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_errI&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (_hasResultI) &lt;span&gt;throw&lt;/span&gt; _errI;&lt;br/&gt;    _callback(_errI);&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该模板利用了 &lt;code&gt;Promise.then&lt;/code&gt; 的能力来决定下一个订阅回调的执行时机：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9186602870813397&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jQmwTIFl1V3mLtjLmibWIInYyV0GeYqiaNwqpccdiad0TmKotLpsriaNjJFSl30IIKSNCbXq51NENwzCVohbiaBEPMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;627&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户调用 &lt;code&gt;asyncSeriesHook.callAsync&lt;/code&gt; 时，&lt;code&gt;callTapsSeries&lt;/code&gt; 生成的函数片段字符串：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 外部调用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; AsyncSeriesHook([&lt;span&gt;&#x27;passenger&#x27;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook.tapPromise(&lt;span&gt;&#x27;Fly to Tokyo&#x27;&lt;/span&gt;, (passenger) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapPromise(&lt;span&gt;&#x27;Back to Shenzhen&#x27;&lt;/span&gt;, (passenger) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.callAsync(&lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;, () =&amp;gt; {});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// callTapsSeries 生成的函数片段字符串：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _fn0 = _x[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _hasResult0 = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _promise0 = _fn0(passenger);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (!_promise0 || !_promise0.then)&lt;br/&gt;    &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;Tap function (tapPromise) did not return promise (returned &#x27;&lt;/span&gt; + _promise0 + &lt;span&gt;&#x27;)&#x27;&lt;/span&gt;);&lt;br/&gt;_promise0.then((&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_result0&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    _hasResult0 = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _fn1 = _x[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _hasResult1 = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _promise1 = _fn1(passenger);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!_promise1 || !_promise1.then)&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;Tap function (tapPromise) did not return promise (returned &#x27;&lt;/span&gt; + _promise1 + &lt;span&gt;&#x27;)&#x27;&lt;/span&gt;);&lt;br/&gt;    _promise1.then((&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_result1&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        _hasResult1 = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        _callback();&lt;br/&gt;    }), &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err1&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (_hasResult1) &lt;span&gt;throw&lt;/span&gt; _err1;&lt;br/&gt;        _callback(_err1);&lt;br/&gt;    });&lt;br/&gt;}), &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err0&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (_hasResult0) &lt;span&gt;throw&lt;/span&gt; _err0;&lt;br/&gt;    _callback(_err0);&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;七、AsyncSeriesBailHook&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7.1 介绍&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AsyncSeriesBailHook&lt;/code&gt; 和 &lt;code&gt;AsyncSeriesHook&lt;/code&gt; 的表现基本一致，不过会判断订阅事件回调的返回值是否为 &lt;code&gt;undefined&lt;/code&gt;，如果非 &lt;code&gt;undefined&lt;/code&gt; 会中断后续订阅回调的执行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; hook1 = &lt;span&gt;new&lt;/span&gt; AsyncSeriesBailHook([&lt;span&gt;&#x27;passenger&#x27;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook1.tapAsync(&lt;span&gt;&#x27;Fly to Beijing&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is on the way to Beijing...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        callback(&lt;span&gt;true&lt;/span&gt;);  &lt;span&gt;// 设置了返回值&lt;/span&gt;&lt;br/&gt;    }, &lt;span&gt;2000&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook1.tapAsync(&lt;span&gt;&#x27;Fly to Shanghai&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is on the way to Shanghai...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    setTimeout(callback, &lt;span&gt;2000&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook1.callAsync(&lt;span&gt;&#x27;Jay&#x27;&lt;/span&gt;, () =&amp;gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Hook1 has been Done!&#x27;&lt;/span&gt;) });&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook2 = &lt;span&gt;new&lt;/span&gt; AsyncSeriesBailHook([&lt;span&gt;&#x27;passenger&#x27;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook2.tapPromise(&lt;span&gt;&#x27;Fly to Tokyo&#x27;&lt;/span&gt;, (passenger) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is taking off to Tokyo...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;(&lt;span&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            resolve(&lt;span&gt;true&lt;/span&gt;);  &lt;span&gt;// 设置了返回值&lt;/span&gt;&lt;br/&gt;        }, &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;    });&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook2.tapPromise(&lt;span&gt;&#x27;Back to Shenzhen&#x27;&lt;/span&gt;, (passenger) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is now comming back to Shenzhen...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;(&lt;span&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        setTimeout(resolve, &lt;span&gt;2000&lt;/span&gt;);&lt;br/&gt;    });&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook2.callAsync(&lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;, () =&amp;gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Hook2 has been Done!&#x27;&lt;/span&gt;) });&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 ******/&lt;/span&gt;&lt;br/&gt;Jay is on the way to Beijing...&lt;br/&gt;VJ is taking off to Tokyo...&lt;br/&gt;Hook2 has been Done!&lt;br/&gt;Hook1 has been Done!&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7.2 代码实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回顾第三节 &lt;code&gt;SyncBailHook&lt;/code&gt; 的实现我们可以得知，它相较 &lt;code&gt;SyncHook&lt;/code&gt; 而言只是新增了一个 &lt;code&gt;onResult&lt;/code&gt; 来进一步处理模板逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AsyncSeriesBailHook&lt;/code&gt; 的实现也是如此，只需要在 &lt;code&gt;AsyncSeriesHook&lt;/code&gt; 的基础上添加一个 &lt;code&gt;onResult&lt;/code&gt;，对上一个订阅回调返回值进行判断即可：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;AsyncSeriesBailHook.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Hook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./Hook&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; HookCodeFactory = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./HookCodeFactory&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AsyncSeriesBailHookCodeFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; content({ onDone, onError, onResult }) {  &lt;span&gt;// 新增 onResult&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.callTapsSeries({&lt;br/&gt;   &lt;span&gt;onError&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, err, next, doneBreak&lt;/span&gt;) =&amp;gt;&lt;/span&gt; onError(err) + doneBreak(&lt;span&gt;true&lt;/span&gt;),&lt;br/&gt;   &lt;span&gt;// 新增 onResult&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;onResult&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, result, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;`if(&lt;span&gt;${result}&lt;/span&gt; !== undefined) {\n&lt;span&gt;${onResult(&lt;br/&gt;     result&lt;br/&gt;    )}&lt;/span&gt;\n} else {\n&lt;span&gt;${next()}&lt;/span&gt;}\n`&lt;/span&gt;,&lt;br/&gt;   onDone&lt;br/&gt;  });&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;AsyncSeriesBailHook&lt;/span&gt;(&lt;span&gt;args = [], name = undefined&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = AsyncSeriesBailHook;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后是模板拼接处的修改：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; callTap(tapIndex, { onError, onDone, onResult }) {&lt;br/&gt;                &lt;span&gt;// 备注 - 这里 onResult 传进来后的值为：&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;// result =&amp;gt; `if(${result} !== undefined) {\n${onResult(result)}\n} else {\n${next()}}\n`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;`var _fn&lt;span&gt;${tapIndex}&lt;/span&gt; = &lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.getTapFn(tapIndex)}&lt;/span&gt;;\n`&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; tap = &lt;span&gt;this&lt;/span&gt;.options.taps[tapIndex];&lt;br/&gt;  &lt;span&gt;switch&lt;/span&gt; (tap.type) {&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;sync&quot;&lt;/span&gt;:&lt;br/&gt;    &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;async&quot;&lt;/span&gt;:&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; cbCode = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (onResult)  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;     cbCode += &lt;span&gt;`(function(_err&lt;span&gt;${tapIndex}&lt;/span&gt;, _result&lt;span&gt;${tapIndex}&lt;/span&gt;) {\n`&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt; cbCode += &lt;span&gt;`(function(_err&lt;span&gt;${tapIndex}&lt;/span&gt;) {\n`&lt;/span&gt;;&lt;br/&gt;    cbCode += &lt;span&gt;`if(_err&lt;span&gt;${tapIndex}&lt;/span&gt;) {\n`&lt;/span&gt;;&lt;br/&gt;    cbCode += onError(&lt;span&gt;`_err&lt;span&gt;${tapIndex}&lt;/span&gt;`&lt;/span&gt;);&lt;br/&gt;    cbCode += &lt;span&gt;&quot;} else {\n&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (onResult) {  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;     cbCode += onResult(&lt;span&gt;`_result&lt;span&gt;${tapIndex}&lt;/span&gt;`&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (onDone) {&lt;br/&gt;     cbCode += onDone();&lt;br/&gt;    }&lt;br/&gt;    cbCode += &lt;span&gt;&quot;}\n&quot;&lt;/span&gt;;&lt;br/&gt;    cbCode += &lt;span&gt;&quot;})&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`_fn&lt;span&gt;${tapIndex}&lt;/span&gt;(&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.args({&lt;br/&gt;     after: cbCode&lt;br/&gt;    }&lt;/span&gt;)});\n`&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;promise&quot;&lt;/span&gt;:&lt;br/&gt;    code += &lt;span&gt;`var _hasResult&lt;span&gt;${tapIndex}&lt;/span&gt; = false;\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`var _promise&lt;span&gt;${tapIndex}&lt;/span&gt; = _fn&lt;span&gt;${tapIndex}&lt;/span&gt;(&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.args()}&lt;/span&gt;);\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`if (!_promise&lt;span&gt;${tapIndex}&lt;/span&gt; || !_promise&lt;span&gt;${tapIndex}&lt;/span&gt;.then)\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`  throw new Error(&#x27;Tap function (tapPromise) did not return promise (returned &#x27; + _promise&lt;span&gt;${tapIndex}&lt;/span&gt; + &#x27;)&#x27;);\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`_promise&lt;span&gt;${tapIndex}&lt;/span&gt;.then((function(_result&lt;span&gt;${tapIndex}&lt;/span&gt;) {\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`_hasResult&lt;span&gt;${tapIndex}&lt;/span&gt; = true;\n`&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (onResult) {  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;     code += onResult(&lt;span&gt;`_result&lt;span&gt;${tapIndex}&lt;/span&gt;`&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (onDone) {&lt;br/&gt;     code += onDone();&lt;br/&gt;    }&lt;br/&gt;    code += &lt;span&gt;`}), function(_err&lt;span&gt;${tapIndex}&lt;/span&gt;) {\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`if(_hasResult&lt;span&gt;${tapIndex}&lt;/span&gt;) throw _err&lt;span&gt;${tapIndex}&lt;/span&gt;;\n`&lt;/span&gt;;&lt;br/&gt;    code += onError(&lt;span&gt;`_err&lt;span&gt;${tapIndex}&lt;/span&gt;`&lt;/span&gt;);&lt;br/&gt;    code += &lt;span&gt;&quot;});\n&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在下方的示例中，看看模板发生了哪些改动。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户调用 &lt;code&gt;asyncSeriesBailHook.callAsync&lt;/code&gt; 时，&lt;code&gt;callTapsSeries&lt;/code&gt; 生成的函数片段字符串：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;⑴ &lt;code&gt;hook.tapAsync&lt;/code&gt; 订阅回调对应模板：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 外部调用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; AsyncSeriesBailHook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;./AsyncSeriesBailHook.js&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook1 = &lt;span&gt;new&lt;/span&gt; AsyncSeriesBailHook([&lt;span&gt;&#x27;passenger&#x27;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook1.tapAsync(&lt;span&gt;&#x27;Fly to Beijing&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook1.tapAsync(&lt;span&gt;&#x27;Fly to Shanghai&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook1.callAsync(&lt;span&gt;&#x27;Jay&#x27;&lt;/span&gt;, () =&amp;gt; {});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// callTapsSeries 生成的函数片段字符串：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _fn0 = _x[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;_fn0(passenger, &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err0, _result0&lt;/span&gt;) &lt;/span&gt;{  &lt;span&gt;// 新增 _result0&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (_err0) {&lt;br/&gt;        _callback(_err0);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (_result0 !== &lt;span&gt;undefined&lt;/span&gt;) {  &lt;span&gt;// 新增判断&lt;/span&gt;&lt;br/&gt;            _callback(&lt;span&gt;null&lt;/span&gt;, _result0);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;var&lt;/span&gt; _fn1 = _x[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;            _fn1(passenger, &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err1, _result1&lt;/span&gt;) &lt;/span&gt;{  &lt;span&gt;// 新增 _result1&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (_err1) {&lt;br/&gt;                    _callback(_err1);&lt;br/&gt;                } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (_result1 !== &lt;span&gt;undefined&lt;/span&gt;) {  &lt;span&gt;// 新增判断&lt;/span&gt;&lt;br/&gt;                        _callback(&lt;span&gt;null&lt;/span&gt;, _result1);&lt;br/&gt;                    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                        _callback();&lt;br/&gt;                    }&lt;br/&gt;                }&lt;br/&gt;            });&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;⑵ &lt;code&gt;hook.tapPromise&lt;/code&gt; 订阅回调对应模板：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 外部调用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook2 = &lt;span&gt;new&lt;/span&gt; AsyncSeriesBailHook([&lt;span&gt;&#x27;passenger&#x27;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook2.tapPromise(&lt;span&gt;&#x27;Fly to Tokyo&#x27;&lt;/span&gt;, (passenger) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is taking off to Tokyo...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;(&lt;span&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            resolve(&lt;span&gt;true&lt;/span&gt;);  &lt;span&gt;// 设置了返回值&lt;/span&gt;&lt;br/&gt;        }, &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;    });&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook2.tapPromise(&lt;span&gt;&#x27;Back to Shenzhen&#x27;&lt;/span&gt;, (passenger) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is now comming back to Shenzhen...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;(&lt;span&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        setTimeout(resolve, &lt;span&gt;2000&lt;/span&gt;);&lt;br/&gt;    });&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook2.callAsync(&lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;, () =&amp;gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Hook2 has been Done!&#x27;&lt;/span&gt;) });&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// callTapsSeries 生成的函数片段字符串：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _fn0 = _x[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _hasResult0 = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _promise0 = _fn0(passenger);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (!_promise0 || !_promise0.then)&lt;br/&gt;    &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;Tap function (tapPromise) did not return promise (returned &#x27;&lt;/span&gt; + _promise0 + &lt;span&gt;&#x27;)&#x27;&lt;/span&gt;);&lt;br/&gt;_promise0.then((&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_result0&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    _hasResult0 = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (_result0 !== &lt;span&gt;undefined&lt;/span&gt;) {  &lt;span&gt;// 新增判断&lt;/span&gt;&lt;br/&gt;        _callback(&lt;span&gt;null&lt;/span&gt;, _result0);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _fn1 = _x[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _hasResult1 = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _promise1 = _fn1(passenger);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!_promise1 || !_promise1.then)&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;Tap function (tapPromise) did not return promise (returned &#x27;&lt;/span&gt; + _promise1 + &lt;span&gt;&#x27;)&#x27;&lt;/span&gt;);&lt;br/&gt;        _promise1.then((&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_result1&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            _hasResult1 = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_result1 !== &lt;span&gt;undefined&lt;/span&gt;) {  &lt;span&gt;// 新增判断&lt;/span&gt;&lt;br/&gt;                _callback(&lt;span&gt;null&lt;/span&gt;, _result1);&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                _callback();&lt;br/&gt;            }&lt;br/&gt;        }), &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err1&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_hasResult1) &lt;span&gt;throw&lt;/span&gt; _err1;&lt;br/&gt;            _callback(_err1);&lt;br/&gt;        });&lt;br/&gt;    }&lt;br/&gt;}), &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err0&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (_hasResult0) &lt;span&gt;throw&lt;/span&gt; _err0;&lt;br/&gt;    _callback(_err0);&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体变更点见代码中的注释。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Tapable 中的模板拼接乍一看挺复杂，但它的实现，肯定是先思考最终成型的模板应该长怎样，再根据需求在 &lt;code&gt;callTap&lt;/code&gt; 方法中添加对应逻辑。因此，通过最终的模板来反推功能的实现，也是一种理解 Tapable 源码的方式。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;八、AsyncSeriesWaterfallHook&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8.1 介绍&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AsyncSeriesWaterfallHook&lt;/code&gt; 也是异步串行的钩子，不过在执行时，上一个订阅回调的返回值会传递给下一个订阅回调，并覆盖掉新订阅回调的第一个参数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; AsyncSeriesWaterfallHook([&lt;span&gt;&#x27;passenger&#x27;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Beijing&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is on the way to Beijing...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    callback(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;2000&lt;/span&gt;);  &lt;span&gt;// 这里要留意使用 Error First 的写法&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapPromise(&lt;span&gt;&#x27;Fly to Tokyo&#x27;&lt;/span&gt;, (time) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`Take off to Tokyo after &lt;span&gt;${time}&lt;/span&gt; ms.`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;(&lt;span&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            resolve(&lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;        }, time);&lt;br/&gt;    });&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Shanghai&#x27;&lt;/span&gt;, (time, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`Take off to Shanghai after &lt;span&gt;${time}&lt;/span&gt; ms.`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    setTimeout(callback, time);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.callAsync(&lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;, () =&amp;gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Hook has been Done!&#x27;&lt;/span&gt;) });&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8.2 代码实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和 4.2 小节 &lt;code&gt;SyncWaterfallHook&lt;/code&gt; 的实现一样，&lt;code&gt;AsyncSeriesWaterfallHook&lt;/code&gt; 可以通过修改 &lt;code&gt;onResult&lt;/code&gt; 和 &lt;code&gt;onDone&lt;/code&gt; 方式来实现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;AsyncSeriesWaterfallHook.js ****/&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Hook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./Hook&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; HookCodeFactory = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./HookCodeFactory&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AsyncSeriesWaterfallHookCodeFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; content({ onDone, onError, onResult }) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.callTapsSeries({&lt;br/&gt;   &lt;span&gt;onError&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, err, next, doneBreak&lt;/span&gt;) =&amp;gt;&lt;/span&gt; onError(err) + doneBreak(&lt;span&gt;true&lt;/span&gt;),&lt;br/&gt;   &lt;span&gt;// 修改 onResult&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;onResult&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, result, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`if(&lt;span&gt;${result}&lt;/span&gt; !== undefined) {\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;._args[&lt;span&gt;0&lt;/span&gt;]}&lt;/span&gt; = &lt;span&gt;${result}&lt;/span&gt;;\n`&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`}\n`&lt;/span&gt;;&lt;br/&gt;    code += next();&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;   },&lt;br/&gt;   &lt;span&gt;// 修改 onResult&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;onDone&lt;/span&gt;: &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; onResult(&lt;span&gt;this&lt;/span&gt;._args[&lt;span&gt;0&lt;/span&gt;])&lt;br/&gt;  });&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = AsyncSeriesWaterfallHook;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户调用 &lt;code&gt;asyncSeriesWaterfallHook.callAsync&lt;/code&gt; 时，&lt;code&gt;callTapsSeries&lt;/code&gt; 生成的函数片段字符串：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 外部调用&lt;/span&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Beijing&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapPromise(&lt;span&gt;&#x27;Fly to Tokyo&#x27;&lt;/span&gt;, (time) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Shanghai&#x27;&lt;/span&gt;, (time, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.callAsync(&lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;, () =&amp;gt; {});&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// callTapsSeries 生成的函数片段字符串：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _fn0 = _x[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;_fn0(passenger, (&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err0, _result0&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (_err0) {&lt;br/&gt;        _callback(_err0);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (_result0 !== &lt;span&gt;undefined&lt;/span&gt;) {  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;            passenger = _result0;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _fn1 = _x[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _hasResult1 = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _promise1 = _fn1(passenger);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!_promise1 || !_promise1.then)&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;Tap function (tapPromise) did not return promise (returned &#x27;&lt;/span&gt; + _promise1 + &lt;span&gt;&#x27;)&#x27;&lt;/span&gt;);&lt;br/&gt;        _promise1.then((&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_result1&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            _hasResult1 = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_result1 !== &lt;span&gt;undefined&lt;/span&gt;) {  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;                passenger = _result1;&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;var&lt;/span&gt; _fn2 = _x[&lt;span&gt;2&lt;/span&gt;];&lt;br/&gt;            _fn2(passenger, (&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err2, _result2&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (_err2) {&lt;br/&gt;                    _callback(_err2);&lt;br/&gt;                } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (_result2 !== &lt;span&gt;undefined&lt;/span&gt;) {  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;                        passenger = _result2;&lt;br/&gt;                    }&lt;br/&gt;                    _callback(&lt;span&gt;null&lt;/span&gt;, passenger);&lt;br/&gt;                }&lt;br/&gt;            }));&lt;br/&gt;        }), &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err1&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_hasResult1) &lt;span&gt;throw&lt;/span&gt; _err1;&lt;br/&gt;            _callback(_err1);&lt;br/&gt;        });&lt;br/&gt;    }&lt;br/&gt;}));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;九、AsyncParallelHook&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9.1 介绍&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AsyncParallelHook&lt;/code&gt; 是一个异步并行的钩子，全部订阅回调都会同时并行触发：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; AsyncParallelHook([&lt;span&gt;&#x27;passenger&#x27;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Beijing&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is on the way to Beijing...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[Beijing] Arrived&#x27;&lt;/span&gt;);&lt;br/&gt;        callback()&lt;br/&gt;    }, &lt;span&gt;2000&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapPromise(&lt;span&gt;&#x27;Fly to Tokyo&#x27;&lt;/span&gt;, (passenger) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is on the way to Tokyo...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;(&lt;span&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[Tokyo] Arrived&#x27;&lt;/span&gt;);&lt;br/&gt;            resolve();&lt;br/&gt;        }, &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;    });&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Shanghai&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is on the way to Shanghai...`&lt;/span&gt;);&lt;br/&gt;    callback()&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.callAsync(&lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;, () =&amp;gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Hook has been Done!&#x27;&lt;/span&gt;) });&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 ******/&lt;/span&gt;&lt;br/&gt;VJ is on the way to Beijing...&lt;br/&gt;VJ is on the way to Tokyo...&lt;br/&gt;VJ is on the way to Shanghai...&lt;br/&gt;[Tokyo] Arrived&lt;br/&gt;[Beijing] Arrived&lt;br/&gt;Hook has been Done!&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9.2 代码实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如同 &lt;code&gt;SyncsLoopHook&lt;/code&gt; 钩子需要新增 &lt;code&gt;this.callTapsLooping&lt;/code&gt; 方法，在 &lt;code&gt;this.callTapsSeries&lt;/code&gt; 外头多套一层模板来实现具体需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这次的 &lt;code&gt;AsyncParallelHook&lt;/code&gt; 钩子也需要新增一个 &lt;code&gt;this.callTapsParallel&lt;/code&gt; 方法实现并行能力，但会摒弃串行的 &lt;code&gt;this.callTapsSeries&lt;/code&gt; 接口，改而直接调用 &lt;code&gt;callTap&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;AsyncParallelHook.js ****/&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Hook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./Hook&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; HookCodeFactory = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./HookCodeFactory&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AsyncParallelHookCodeFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; content({ onError, onDone }) {&lt;br/&gt;  &lt;span&gt;// 新增 this.callTapsParallel 方法&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.callTapsParallel({&lt;br/&gt;   &lt;span&gt;onError&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, err, done, doneBreak&lt;/span&gt;) =&amp;gt;&lt;/span&gt; onError(err) + doneBreak(&lt;span&gt;true&lt;/span&gt;),&lt;br/&gt;   onDone&lt;br/&gt;  });&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = AsyncParallelHook;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;this.callTapsParallel&lt;/code&gt; 的具体实现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;callTapsParallel({&lt;br/&gt;    onError,&lt;br/&gt;    onResult,&lt;br/&gt;    onDone&lt;br/&gt;}) {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.options.taps.length &amp;lt;= &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.callTapsSeries({&lt;br/&gt;            onError,&lt;br/&gt;            onResult,&lt;br/&gt;            onDone&lt;br/&gt;        });&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;&quot;do {\n&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`var _counter = &lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.options.taps.length}&lt;/span&gt;;\n`&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (onDone) {&lt;br/&gt;        code += &lt;span&gt;&quot;var _done = (function() {\n&quot;&lt;/span&gt;;&lt;br/&gt;        code += onDone();&lt;br/&gt;        code += &lt;span&gt;&quot;});\n&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;this&lt;/span&gt;.options.taps.length; i++) {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; done = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (onDone) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;if(--_counter === 0) _done();\n&quot;&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;else&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;--_counter;&quot;&lt;/span&gt;;&lt;br/&gt;        };&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; doneBreak = &lt;span&gt;&lt;span&gt;skipDone&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (skipDone || !onDone) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;_counter = 0;\n&quot;&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;else&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;_counter = 0;\n_done();\n&quot;&lt;/span&gt;;&lt;br/&gt;        };&lt;br/&gt;        code += &lt;span&gt;&quot;if(_counter &amp;lt;= 0) break;\n&quot;&lt;/span&gt;;&lt;br/&gt;        code += &lt;span&gt;this&lt;/span&gt;.callTap(i, {&lt;br/&gt;            &lt;span&gt;onError&lt;/span&gt;: &lt;span&gt;&lt;span&gt;error&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;                code += &lt;span&gt;&quot;if(_counter &amp;gt; 0) {\n&quot;&lt;/span&gt;;&lt;br/&gt;                code += onError(i, error, done, doneBreak);&lt;br/&gt;                code += &lt;span&gt;&quot;}\n&quot;&lt;/span&gt;;&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;            },&lt;br/&gt;            &lt;span&gt;onResult&lt;/span&gt;:&lt;br/&gt;                onResult &amp;amp;&amp;amp;&lt;br/&gt;                (&lt;span&gt;&lt;span&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;                    &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;                    code += &lt;span&gt;&quot;if(_counter &amp;gt; 0) {\n&quot;&lt;/span&gt;;&lt;br/&gt;                    code += onResult(i, result, done, doneBreak);&lt;br/&gt;                    code += &lt;span&gt;&quot;}\n&quot;&lt;/span&gt;;&lt;br/&gt;                    &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;                }),&lt;br/&gt;            &lt;span&gt;onDone&lt;/span&gt;:&lt;br/&gt;                !onResult &amp;amp;&amp;amp;&lt;br/&gt;                &lt;span&gt;(&lt;span&gt;(&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;                    &lt;span&gt;return&lt;/span&gt; done();&lt;br/&gt;                })&lt;br/&gt;        });&lt;br/&gt;    }&lt;br/&gt;    code += &lt;span&gt;&quot;} while(false);\n&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;callTapsParallel&lt;/code&gt; 新增的模板会遍历订阅对象，然后逐个扔给 &lt;code&gt;callTap&lt;/code&gt; 生成单个订阅回调的模板，再将它们拼接起来同步执行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;do&lt;/span&gt; {  &lt;span&gt;// 形成闭包，避免 const/let 变量提升到外部&lt;/span&gt;&lt;br/&gt;    _fn0(...);&lt;br/&gt;    _fn1(...);&lt;br/&gt;    ...&lt;br/&gt;    _fnN(...);&lt;br/&gt;} &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;false&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外新增了计数器变量 &lt;code&gt;_counter&lt;/code&gt;，初始化值为订阅对象数量，每次执行完单个订阅回调会自减一，订阅回调可以通过它判断自己是否最后一个回调（如果是则执行用户传入 &lt;code&gt;hook.callAsync&lt;/code&gt; 的“事件终止”回调）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户调用 &lt;code&gt;asyncSeriesHook.callAsync&lt;/code&gt; 时，&lt;code&gt;callTapsParallel&lt;/code&gt; 生成的函数片段字符串：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 外部调用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; AsyncParallelHook([&lt;span&gt;&#x27;passenger&#x27;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Beijing&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapPromise(&lt;span&gt;&#x27;Fly to Tokyo&#x27;&lt;/span&gt;, (passenger) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Shanghai&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.callAsync(&lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;, () =&amp;gt; {});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// callTapsParallel 生成的函数片段字符串：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;do&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _counter = &lt;span&gt;3&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _done = (&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;        _callback();&lt;br/&gt;    });&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (_counter &amp;lt;= &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _fn0 = _x[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;    _fn0(passenger, (&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err0&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (_err0) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_counter &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                _callback(_err0);&lt;br/&gt;                _counter = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (--_counter === &lt;span&gt;0&lt;/span&gt;) _done();&lt;br/&gt;        }&lt;br/&gt;    }));&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (_counter &amp;lt;= &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _fn1 = _x[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _hasResult1 = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _promise1 = _fn1(passenger);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!_promise1 || !_promise1.then)&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;Tap function (tapPromise) did not return promise (returned &#x27;&lt;/span&gt; + _promise1 + &lt;span&gt;&#x27;)&#x27;&lt;/span&gt;);&lt;br/&gt;    _promise1.then((&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_result1&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        _hasResult1 = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (--_counter === &lt;span&gt;0&lt;/span&gt;) _done();&lt;br/&gt;    }), &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err1&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (_hasResult1) &lt;span&gt;throw&lt;/span&gt; _err1;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (_counter &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;            _callback(_err1);&lt;br/&gt;            _counter = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;    });&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (_counter &amp;lt;= &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _fn2 = _x[&lt;span&gt;2&lt;/span&gt;];&lt;br/&gt;    _fn2(passenger, (&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err2&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (_err2) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_counter &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                _callback(_err2);&lt;br/&gt;                _counter = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (--_counter === &lt;span&gt;0&lt;/span&gt;) _done();&lt;br/&gt;        }&lt;br/&gt;    }));&lt;br/&gt;} &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十、AsyncParallelBailHook&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10.1 介绍&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AsyncParallelBailHook&lt;/code&gt; 和 &lt;code&gt;AsyncParallelHook&lt;/code&gt; 基本一致，但如果前一个订阅回调返回了非 &lt;code&gt;undefined&lt;/code&gt; 的值，会中断后续其它订阅回调的执行，并触发用户传入 &lt;code&gt;hook.callAsync&lt;/code&gt; 的“事件终止”回调：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Beijing&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is on the way to Beijing...`&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 注意这里不走异步处理，直接调用 callback&lt;/span&gt;&lt;br/&gt;    callback(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapPromise(&lt;span&gt;&#x27;Fly to Tokyo&#x27;&lt;/span&gt;, (passenger) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 执行前发现上个订阅回调返回了 true，故不会执行&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is on the way to Tokyo...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;(&lt;span&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[Tokyo] Arrived&#x27;&lt;/span&gt;);&lt;br/&gt;        resolve(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;    });&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.callAsync(&lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;, () =&amp;gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Hook has been Done!&#x27;&lt;/span&gt;) });&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 ******/&lt;/span&gt;&lt;br/&gt;VJ  is on the way to Beijing...&lt;br/&gt;Hook has been Done!&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一个&lt;strong&gt;异步的&lt;/strong&gt;订阅回调会返回非 &lt;code&gt;undefined&lt;/code&gt; 的值，但在它返回前，其它并行执行的订阅回调会照常执行不受影响。这种情况唯一受影响的，是“事件终止”回调的执行位置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; AsyncParallelBailHook([&lt;span&gt;&#x27;passenger&#x27;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Beijing&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is on the way to Beijing...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[Beijing] Arrived&#x27;&lt;/span&gt;);&lt;br/&gt;        callback(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;)&lt;br/&gt;    }, &lt;span&gt;500&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapPromise(&lt;span&gt;&#x27;Fly to Tokyo&#x27;&lt;/span&gt;, (passenger) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is on the way to Tokyo...`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;(&lt;span&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[Tokyo] Arrived&#x27;&lt;/span&gt;);&lt;br/&gt;            resolve(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        }, &lt;span&gt;2000&lt;/span&gt;);&lt;br/&gt;    });&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Shanghai&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${passenger}&lt;/span&gt; is on the way to Shanghai...`&lt;/span&gt;);&lt;br/&gt;    setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[Shanghai] Arrived&#x27;&lt;/span&gt;);&lt;br/&gt;        callback()&lt;br/&gt;    }, &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.callAsync(&lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;, () =&amp;gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Hook has been Done!&#x27;&lt;/span&gt;) });&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 ******/&lt;/span&gt;&lt;br/&gt;VJ is on the way to Beijing...&lt;br/&gt;VJ is on the way to Tokyo...&lt;br/&gt;VJ is on the way to Shanghai...&lt;br/&gt;[Beijing] Arrived&lt;br/&gt;Hook has been Done!  &lt;span&gt;// “事件终止”回调打印的内容&lt;/span&gt;&lt;br/&gt;[Shanghai] Arrived&lt;br/&gt;[Tokyo] Arrived&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到“事件终止”回调会在 &lt;code&gt;Fly to Beijing&lt;/code&gt; 订阅回调结束后触发，因为该订阅回调返回了 &lt;code&gt;true&lt;/code&gt;。另外因为该回调是异步的，所以其它的订阅回调会照常被并发执行。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10.2 代码实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AsyncParallelBailHook&lt;/code&gt; 的实现比较粗暴直接，是在 &lt;code&gt;AsyncParallelBailHook.js&lt;/code&gt; 里定义 &lt;code&gt;content&lt;/code&gt; 的方法中，在模板前面新增一段内容：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;AsyncParallelBailHook.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Hook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./Hook&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; HookCodeFactory = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./HookCodeFactory&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AsyncParallelBailHookCodeFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; content({ onError, onResult, onDone }) {&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;`var _results = new Array(&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.options.taps.length}&lt;/span&gt;);\n`&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;&quot;var _checkDone = function() {\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;&quot;for(var i = 0; i &amp;lt; _results.length; i++) {\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;&quot;var item = _results[i];\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;&quot;if(item === undefined) return false;\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;&quot;if(item.result !== undefined) {\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += onResult(&lt;span&gt;&quot;item.result&quot;&lt;/span&gt;);&lt;br/&gt;  code += &lt;span&gt;&quot;return true;\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;&quot;}\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;&quot;if(item.error) {\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += onError(&lt;span&gt;&quot;item.error&quot;&lt;/span&gt;);&lt;br/&gt;  code += &lt;span&gt;&quot;return true;\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;&quot;}\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;&quot;}\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;&quot;return false;\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;&quot;}\n&quot;&lt;/span&gt;;&lt;br/&gt;  code += &lt;span&gt;this&lt;/span&gt;.callTapsParallel({&lt;br/&gt;   &lt;span&gt;onError&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, err, done, doneBreak&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`if(&lt;span&gt;${i}&lt;/span&gt; &amp;lt; _results.length &amp;amp;&amp;amp; ((_results.length = &lt;span&gt;${i +&lt;br/&gt;     &lt;span&gt;1&lt;/span&gt;}&lt;/span&gt;), (_results[&lt;span&gt;${i}&lt;/span&gt;] = { error: &lt;span&gt;${err}&lt;/span&gt; }), _checkDone())) {\n`&lt;/span&gt;;&lt;br/&gt;    code += doneBreak(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;    code += &lt;span&gt;&quot;} else {\n&quot;&lt;/span&gt;;&lt;br/&gt;    code += done();&lt;br/&gt;    code += &lt;span&gt;&quot;}\n&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;   },&lt;br/&gt;   &lt;span&gt;onResult&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, result, done, doneBreak&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;`if(&lt;span&gt;${i}&lt;/span&gt; &amp;lt; _results.length &amp;amp;&amp;amp; (&lt;span&gt;${result}&lt;/span&gt; !== undefined &amp;amp;&amp;amp; (_results.length = &lt;span&gt;${i +&lt;br/&gt;     &lt;span&gt;1&lt;/span&gt;}&lt;/span&gt;), (_results[&lt;span&gt;${i}&lt;/span&gt;] = { result: &lt;span&gt;${result}&lt;/span&gt; }), _checkDone())) {\n`&lt;/span&gt;;&lt;br/&gt;    code += doneBreak(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;    code += &lt;span&gt;&quot;} else {\n&quot;&lt;/span&gt;;&lt;br/&gt;    code += done();&lt;br/&gt;    code += &lt;span&gt;&quot;}\n&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;   },&lt;br/&gt;   &lt;span&gt;onTap&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, run, done, doneBreak&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (i &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;     code += &lt;span&gt;`if(&lt;span&gt;${i}&lt;/span&gt; &amp;gt;= _results.length) {\n`&lt;/span&gt;;&lt;br/&gt;     code += done();&lt;br/&gt;     code += &lt;span&gt;&quot;} else {\n&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    code += run();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (i &amp;gt; &lt;span&gt;0&lt;/span&gt;) code += &lt;span&gt;&quot;}\n&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;   },&lt;br/&gt;   onDone&lt;br/&gt;  });&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = AsyncParallelBailHook;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;留意这里的 &lt;code&gt;onTap&lt;/code&gt; 参数，它可传递给 &lt;code&gt;this.callTapsParallel&lt;/code&gt; 来灵活处理 &lt;code&gt;callTap&lt;/code&gt; 方法生成的模板：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt;callTapsParallel({&lt;br/&gt;    onError,&lt;br/&gt;    onResult,&lt;br/&gt;    onDone,&lt;br/&gt;    onTap = &lt;span&gt;(&lt;span&gt;i, run&lt;/span&gt;) =&amp;gt;&lt;/span&gt; run()  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;}) {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;this&lt;/span&gt;.options.taps.length; i++) {&lt;br/&gt;        &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// 新增改动，调用 this.callTap 的地方使用 onTap 包起来&lt;/span&gt;&lt;br/&gt;        code += onTap(&lt;br/&gt;            i,&lt;br/&gt;            () =&amp;gt;&lt;br/&gt;                &lt;span&gt;this&lt;/span&gt;.callTap(i, {&lt;br/&gt;                    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;                }),&lt;br/&gt;            done,&lt;br/&gt;            doneBreak&lt;br/&gt;        );&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;content&lt;/code&gt; 方法为模板新增了一个 &lt;code&gt;_results&lt;/code&gt; 数组用于存储订阅回调的执行信息（返回值和错误）；还新增一个 &lt;code&gt;_checkDone&lt;/code&gt; 方法，通过遍历 &lt;code&gt;_results&lt;/code&gt; 来检查事件是否应该结束 —— 若发现某个订阅回调执行出错，或者返回了非 &lt;code&gt;undefined&lt;/code&gt; 值，&lt;code&gt;_checkDone&lt;/code&gt; 方法会返回 &lt;code&gt;true&lt;/code&gt; 并执行用户传入的“事件终止”回调）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个订阅回调执行后，会把其执行信息写入 &lt;code&gt;_results&lt;/code&gt; 数组并执行 &lt;code&gt;_checkDone()&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户调用 &lt;code&gt;asyncParallelBailHook.callAsync&lt;/code&gt; 时，&lt;code&gt;content&lt;/code&gt; 方法生成的函数片段字符串：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 外部调用&lt;/span&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;Fly to Beijing&#x27;&lt;/span&gt;, (passenger, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapPromise(&lt;span&gt;&#x27;Fly to Tokyo&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.callAsync(&lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;, () =&amp;gt; {});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// content 方法生成的函数片段字符串：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _results = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _checkDone = &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; _results.length; i++) {&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; item = _results[i];&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (item === &lt;span&gt;undefined&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (item.result !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;            _callback(&lt;span&gt;null&lt;/span&gt;, item.result);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (item.error) {&lt;br/&gt;            _callback(item.error);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;do&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _counter = &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _done = (&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;        _callback();&lt;br/&gt;    });&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (_counter &amp;lt;= &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _fn0 = _x[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;    _fn0(passenger, (&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err0, _result0&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (_err0) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_counter &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;0&lt;/span&gt; &amp;lt; _results.length &amp;amp;&amp;amp; ((_results.length = &lt;span&gt;1&lt;/span&gt;), (_results[&lt;span&gt;0&lt;/span&gt;] = { &lt;span&gt;error&lt;/span&gt;: _err0 }), _checkDone())) {&lt;br/&gt;                    _counter = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;                } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (--_counter === &lt;span&gt;0&lt;/span&gt;) _done();&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_counter &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;0&lt;/span&gt; &amp;lt; _results.length &amp;amp;&amp;amp; (_result0 !== &lt;span&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; (_results.length = &lt;span&gt;1&lt;/span&gt;), (_results[&lt;span&gt;0&lt;/span&gt;] = { &lt;span&gt;result&lt;/span&gt;: _result0 }), _checkDone())) {&lt;br/&gt;                    _counter = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;                } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (--_counter === &lt;span&gt;0&lt;/span&gt;) _done();&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }));&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (_counter &amp;lt;= &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;1&lt;/span&gt; &amp;gt;= _results.length) {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (--_counter === &lt;span&gt;0&lt;/span&gt;) _done();&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _fn1 = _x[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _hasResult1 = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _promise1 = _fn1(passenger);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!_promise1 || !_promise1.then)&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;Tap function (tapPromise) did not return promise (returned &#x27;&lt;/span&gt; + _promise1 + &lt;span&gt;&#x27;)&#x27;&lt;/span&gt;);&lt;br/&gt;        _promise1.then((&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_result1&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            _hasResult1 = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_counter &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;1&lt;/span&gt; &amp;lt; _results.length &amp;amp;&amp;amp; (_result1 !== &lt;span&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; (_results.length = &lt;span&gt;2&lt;/span&gt;), (_results[&lt;span&gt;1&lt;/span&gt;] = { &lt;span&gt;result&lt;/span&gt;: _result1 }), _checkDone())) {&lt;br/&gt;                    _counter = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;                } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (--_counter === &lt;span&gt;0&lt;/span&gt;) _done();&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }), &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err1&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_hasResult1) &lt;span&gt;throw&lt;/span&gt; _err1;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_counter &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;1&lt;/span&gt; &amp;lt; _results.length &amp;amp;&amp;amp; ((_results.length = &lt;span&gt;2&lt;/span&gt;), (_results[&lt;span&gt;1&lt;/span&gt;] = { &lt;span&gt;error&lt;/span&gt;: _err1 }), _checkDone())) {&lt;br/&gt;                    _counter = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;                } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (--_counter === &lt;span&gt;0&lt;/span&gt;) _done();&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        });&lt;br/&gt;    }&lt;br/&gt;} &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十一、AsyncSeriesLoopHook&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;11.1 介绍&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AsyncSeriesLoopHook&lt;/code&gt; 是 Tapable 不对外暴露的隐藏钩子，但它并不神秘 —— 它和第 5 节所介绍的 &lt;code&gt;SyncLoopHook&lt;/code&gt; 的表现一致，订阅回调都是按顺序串行执行的（前一个订阅回调执行完了才会开始执行下一个回调），若有回调返回了非 &lt;code&gt;undefined&lt;/code&gt; 的值，会中断进度从头开始整个流程。区别只是在 &lt;code&gt;AsyncSeriesLoopHook&lt;/code&gt; 里被执行的订阅回调是异步的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; AsyncSeriesLoopHook([]);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; count = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;, (callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-1 starts...&#x27;&lt;/span&gt;);&lt;br/&gt;    setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-1 done&#x27;&lt;/span&gt;);&lt;br/&gt;        callback()&lt;br/&gt;    }, &lt;span&gt;500&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapPromise(&lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;(&lt;span&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-2 starts...&#x27;&lt;/span&gt;);&lt;br/&gt;        setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-2 done, count:&#x27;&lt;/span&gt;, count);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (count++ !== &lt;span&gt;3&lt;/span&gt;) {&lt;br/&gt;                resolve(&lt;span&gt;true&lt;/span&gt;)&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                resolve()&lt;br/&gt;            }&lt;br/&gt;        }, &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;    });&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;event-3&#x27;&lt;/span&gt;, (callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-3 starts...&#x27;&lt;/span&gt;);&lt;br/&gt;    setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-3 done&#x27;&lt;/span&gt;);&lt;br/&gt;        callback()&lt;br/&gt;    }, &lt;span&gt;2000&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.callAsync(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Hook has been Done!&#x27;&lt;/span&gt;) });&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 ******/&lt;/span&gt;&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt; starts...&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt; done&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt; starts...&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt; done, &lt;span&gt;count&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt; starts...&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt; done&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt; starts...&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt; done, &lt;span&gt;count&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt; starts...&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt; done&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt; starts...&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt; done, &lt;span&gt;count&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;br/&gt;event&lt;span&gt;-3&lt;/span&gt; starts...&lt;br/&gt;event&lt;span&gt;-3&lt;/span&gt; done&lt;br/&gt;Hook has been Done!&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;11.2 代码实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AsyncSeriesLoopHook&lt;/code&gt; 模块和 &lt;code&gt;SyncLoopHook&lt;/code&gt; 模块基本是一样的，都使用了 &lt;code&gt;this.callTapsLooping&lt;/code&gt; 接口来实现串行执行、循环执行的能力：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;AsyncSeriesLoopHook.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Hook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./Hook&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; HookCodeFactory = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;./HookCodeFactory&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AsyncSeriesLoopHookCodeFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HookCodeFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; content({ onError, onDone }) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.callTapsLooping({&lt;br/&gt;   &lt;span&gt;onError&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, err, next, doneBreak&lt;/span&gt;) =&amp;gt;&lt;/span&gt; onError(err) + doneBreak(&lt;span&gt;true&lt;/span&gt;),&lt;br/&gt;   onDone&lt;br/&gt;  });&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = AsyncSeriesLoopHook;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但目前 &lt;code&gt;this.callTapsLooping&lt;/code&gt; 接口只能处理同步的订阅回调，为了让其可以处理异步的订阅回调，需要加一点改动：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt;callTapsLooping({ onError, onDone }) {  &lt;span&gt;// 新增 onError&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.options.taps.length === &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; onDone();&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; syncOnly = &lt;span&gt;this&lt;/span&gt;.options.taps.every(&lt;span&gt;&lt;span&gt;t&lt;/span&gt; =&amp;gt;&lt;/span&gt; t.type === &lt;span&gt;&quot;sync&quot;&lt;/span&gt;);  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!syncOnly) {  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;        code += &lt;span&gt;&quot;var _looper = (function() {\n&quot;&lt;/span&gt;;&lt;br/&gt;        code += &lt;span&gt;&quot;var _loopAsync = false;\n&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    code += &lt;span&gt;&quot;var _loop;\n&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;&quot;do {\n&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;&quot;_loop = false;\n&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;this&lt;/span&gt;.callTapsSeries({&lt;br/&gt;        onError,&lt;br/&gt;        &lt;span&gt;onResult&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;i, result, next, doneBreak&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;            code += &lt;span&gt;`if(&lt;span&gt;${result}&lt;/span&gt; !== undefined) {\n`&lt;/span&gt;;&lt;br/&gt;            code += &lt;span&gt;&quot;_loop = true;\n&quot;&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (!syncOnly) code += &lt;span&gt;&quot;if(_loopAsync) _looper();\n&quot;&lt;/span&gt;;  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;            code += doneBreak(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;            code += &lt;span&gt;`} else {\n`&lt;/span&gt;;&lt;br/&gt;            code += next();&lt;br/&gt;            code += &lt;span&gt;`}\n`&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;        },&lt;br/&gt;        onDone&lt;br/&gt;    });&lt;br/&gt;    code += &lt;span&gt;&quot;} while(_loop);\n&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!syncOnly) {  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;        code += &lt;span&gt;&quot;_loopAsync = true;\n&quot;&lt;/span&gt;;&lt;br/&gt;        code += &lt;span&gt;&quot;});\n&quot;&lt;/span&gt;;&lt;br/&gt;        code += &lt;span&gt;&quot;_looper();\n&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的改动相当于在最外层包了一个 &lt;code&gt;_looper&lt;/code&gt; 函数方便在异步的订阅回调返回了非 &lt;code&gt;undefined&lt;/code&gt; 的时候，来递归调用自己实现循环。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;SyncLoopHook&lt;/code&gt; 的那套 &lt;code&gt;do-while&lt;/code&gt; 只适合同步的订阅回调，因为如果遇上异步的订阅回调，等它执行完毕时 &lt;code&gt;do-while&lt;/code&gt; 已经执行结束了，无法再循环。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户调用 &lt;code&gt;asyncSeriesLoopHook.callAsync&lt;/code&gt; 时，&lt;code&gt;callTapsLooping&lt;/code&gt; 生成的函数片段字符串：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 外部调用 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; AsyncSeriesLoopHook([]);&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;, (callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapPromise(&lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;event-3&#x27;&lt;/span&gt;, (callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.callAsync(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Hook has been Done!&#x27;&lt;/span&gt;) });&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// callTapsLooping 生成的函数片段字符串：&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _looper = (&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _loopAsync = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _loop;&lt;br/&gt;    &lt;span&gt;do&lt;/span&gt; {&lt;br/&gt;        _loop = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; _fn0 = _x[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;        _fn0((&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err0, _result0&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (_err0) {&lt;br/&gt;                _callback(_err0);&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (_result0 !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;                    _loop = &lt;span&gt;true&lt;/span&gt;;  &lt;span&gt;// 没有意义，因为回调是异步的，while 已经结束了&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (_loopAsync) _looper();  &lt;span&gt;// 需要调用 _looper 来重新执行&lt;/span&gt;&lt;br/&gt;                } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                    &lt;span&gt;var&lt;/span&gt; _fn1 = _x[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;                    &lt;span&gt;var&lt;/span&gt; _hasResult1 = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;                    &lt;span&gt;var&lt;/span&gt; _promise1 = _fn1();&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (!_promise1 || !_promise1.then)&lt;br/&gt;                        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;Tap function (tapPromise) did not return promise (returned &#x27;&lt;/span&gt; + _promise1 + &lt;span&gt;&#x27;)&#x27;&lt;/span&gt;);&lt;br/&gt;                    _promise1.then((&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_result1&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;                        _hasResult1 = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;                        &lt;span&gt;if&lt;/span&gt; (_result1 !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;                            _loop = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;                            &lt;span&gt;if&lt;/span&gt; (_loopAsync) _looper();&lt;br/&gt;                        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                            _callback();&lt;br/&gt;                        }&lt;br/&gt;                    }), &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;_err1&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;                        &lt;span&gt;if&lt;/span&gt; (_hasResult1) &lt;span&gt;throw&lt;/span&gt; _err1;&lt;br/&gt;                        _callback(_err1);&lt;br/&gt;                    });&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }));&lt;br/&gt;    } &lt;span&gt;while&lt;/span&gt; (_loop);&lt;br/&gt;    _loopAsync = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;});&lt;br/&gt;_looper();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十二、拦截器&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;12.1 介绍&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;终于介绍完了 Tappable 的全部钩子的基础实现，我们可以开始考虑提升一下钩子的更多能力，首先让钩子们支持拦截的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Tappable 中的所有钩子都支持设置拦截器，可以在钩子执行的各阶段进行拦截。主要的拦截接口有如下几个：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;register&lt;/strong&gt;：订阅前触发拦截，调用 &lt;code&gt;hook.intercept&lt;/code&gt; 方法时执行拦截回调。当前钩子有多少个订阅事件就会执行多少次 register 拦截回调，可以在该拦截回调里修改订阅者信息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;call&lt;/strong&gt;：用户调用 &lt;code&gt;hook.call/callAsync&lt;/code&gt; 时触发，在订阅事件的回调执行前执行，参数为用户传参。只会触发一次。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;loop&lt;/strong&gt;：loop 类型钩子每次循环起始时触发（排在 call 拦截器后面），参数为用户传参。循环几次就会触发几次。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;tap&lt;/strong&gt;：调用 &lt;code&gt;hook.call/callAsync&lt;/code&gt; 时触发，在订阅事件的回调执行前执行（排在 call 和 loop 拦截器后面），参数为订阅者信息。有多个订阅回调就会执行多次。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;error&lt;/strong&gt;：调用 &lt;code&gt;hook.call/callAsync&lt;/code&gt; 时触发，拦截时机为执行订阅回调出错时，参数为错误对象。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;done&lt;/strong&gt;：调用 &lt;code&gt;hook.call/callAsync&lt;/code&gt; 时触发，拦截时机为全部订阅回调执行完毕的时候（排在用户传入的“事件终止”回调前面），没有参数。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;拦截器示例 - 同步订阅回调：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; { SyncHook } = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;tapable&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 初始化同步钩子&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; SyncHook([&lt;span&gt;&quot;contry&quot;&lt;/span&gt;, &lt;span&gt;&quot;city&quot;&lt;/span&gt;, &lt;span&gt;&quot;people&quot;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 设置拦截器&lt;/span&gt;&lt;br/&gt;hook.intercept({&lt;br/&gt;  &lt;span&gt;// 订阅前触发&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;register&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;options&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`[register-intercept] &lt;span&gt;${options.name}&lt;/span&gt; is going registering...`&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 修改订阅者信息&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (options.name === &lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt;) {&lt;br/&gt;        options.name = &lt;span&gt;&#x27;event-intercepted&#x27;&lt;/span&gt;;&lt;br/&gt;        options.fn = &lt;span&gt;(&lt;span&gt;contry, city, people&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-intercepted:&#x27;&lt;/span&gt;, contry, city, people)&lt;br/&gt;        };&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; options;  &lt;span&gt;// 订阅者的信息会变成修改后的&lt;/span&gt;&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;// call 方法调用时触发&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;call&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;...args&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[call-intercept]&#x27;&lt;/span&gt;, args);&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;// 调用订阅事件回调前触发&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;tap&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;options&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[tap-intercept]&#x27;&lt;/span&gt;, options);&lt;br/&gt;  },&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 注册事件&lt;/span&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-1:&#x27;&lt;/span&gt;, contry, city, people)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tap(&lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-2:&#x27;&lt;/span&gt;, contry, city, people)&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 执行事件&lt;/span&gt;&lt;br/&gt;hook.call(&lt;span&gt;&#x27;China&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;Shenzhen&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 ******/&lt;/span&gt;&lt;br/&gt;[register-intercept] event&lt;span&gt;-1&lt;/span&gt; is going registering...&lt;br/&gt;[register-intercept] event&lt;span&gt;-2&lt;/span&gt; is going registering...&lt;br/&gt;[call-intercept] [ &lt;span&gt;&#x27;China&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;Shenzhen&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt; ]&lt;br/&gt;[tap-intercept] { &lt;span&gt;type&lt;/span&gt;: &lt;span&gt;&#x27;sync&#x27;&lt;/span&gt;, &lt;span&gt;fn&lt;/span&gt;: [&lt;span&gt;Function&lt;/span&gt; (anonymous)], &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt; }&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt;: China Shenzhen VJ&lt;br/&gt;[tap-intercept] { &lt;span&gt;type&lt;/span&gt;: &lt;span&gt;&#x27;sync&#x27;&lt;/span&gt;, &lt;span&gt;fn&lt;/span&gt;: [&lt;span&gt;Function&lt;/span&gt; (anonymous)], &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;event-intercepted&#x27;&lt;/span&gt; }&lt;br/&gt;event-intercepted: China Shenzhen VJ&lt;br/&gt;Hook is done.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;拦截器示例 - 异步订阅回调：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; AsyncSeriesLoopHook([&lt;span&gt;&#x27;name&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;country&#x27;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;hook.intercept({&lt;br/&gt;    &lt;span&gt;// 订阅前触发&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;register&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;options&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`[register-intercept] &lt;span&gt;${options.name}&lt;/span&gt; is going registering...`&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;// 修改订阅者信息&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (options.name === &lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;const&lt;/span&gt; oldFn = options.fn;&lt;br/&gt;            options.fn = &lt;span&gt;(&lt;span&gt;...args&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;                args[&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;&#x27;USA&#x27;&lt;/span&gt;;&lt;br/&gt;                oldFn(...args);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; options;  &lt;span&gt;// 订阅者的信息会变成修改后的&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;// call 方法调用时触发&lt;/span&gt;&lt;br/&gt;    call(...args) {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[call-intercept]&#x27;&lt;/span&gt;, args);&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;// 调用订阅事件回调前触发&lt;/span&gt;&lt;br/&gt;    tap(options) {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[tap-intercept]&#x27;&lt;/span&gt;, options);&lt;br/&gt;    },&lt;br/&gt;    loop(...args) {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[loop-intercept]&#x27;&lt;/span&gt;, args);&lt;br/&gt;    },&lt;br/&gt;    done() {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[done-intercept] Last interceptor.&#x27;&lt;/span&gt;)&lt;br/&gt;    }&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; count = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;, (name, country, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`event-1 starts..., the country of &lt;span&gt;${name}&lt;/span&gt; is &lt;span&gt;${country}&lt;/span&gt;.`&lt;/span&gt;);&lt;br/&gt;    setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-1 done&#x27;&lt;/span&gt;);&lt;br/&gt;        callback()&lt;br/&gt;    }, &lt;span&gt;500&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapPromise(&lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;(&lt;span&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-2 starts...&#x27;&lt;/span&gt;);&lt;br/&gt;        setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-2 done, count:&#x27;&lt;/span&gt;, count);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (count++ !== &lt;span&gt;2&lt;/span&gt;) {&lt;br/&gt;                resolve(&lt;span&gt;true&lt;/span&gt;)&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                resolve()&lt;br/&gt;            }&lt;br/&gt;        }, &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;    });&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;event-3&#x27;&lt;/span&gt;, (name, country, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-3 starts...&#x27;&lt;/span&gt;);&lt;br/&gt;    setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-3 done&#x27;&lt;/span&gt;);&lt;br/&gt;        callback()&lt;br/&gt;    }, &lt;span&gt;2000&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.callAsync(&lt;span&gt;&#x27;Trump&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;China&#x27;&lt;/span&gt;, () =&amp;gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Hook has been done!&#x27;&lt;/span&gt;); });&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 ******/&lt;/span&gt;&lt;br/&gt;[register-intercept] event&lt;span&gt;-1&lt;/span&gt; is going registering...&lt;br/&gt;[register-intercept] event&lt;span&gt;-2&lt;/span&gt; is going registering...&lt;br/&gt;[register-intercept] event&lt;span&gt;-3&lt;/span&gt; is going registering...&lt;br/&gt;[call-intercept] [ &lt;span&gt;&#x27;Trump&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;China&#x27;&lt;/span&gt; ]&lt;br/&gt;[loop-intercept] [ &lt;span&gt;&#x27;Trump&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;China&#x27;&lt;/span&gt; ]&lt;br/&gt;[tap-intercept] { &lt;span&gt;type&lt;/span&gt;: &lt;span&gt;&#x27;async&#x27;&lt;/span&gt;, &lt;span&gt;fn&lt;/span&gt;: [&lt;span&gt;Function&lt;/span&gt; (anonymous)], &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt; }&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt; starts..., the country &lt;span&gt;of&lt;/span&gt; Trump is USA.&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt; done&lt;br/&gt;[tap-intercept] { &lt;span&gt;type&lt;/span&gt;: &lt;span&gt;&#x27;promise&#x27;&lt;/span&gt;, &lt;span&gt;fn&lt;/span&gt;: [&lt;span&gt;Function&lt;/span&gt; (anonymous)], &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt; }&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt; starts...&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt; done, &lt;span&gt;count&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;[loop-intercept] [ &lt;span&gt;&#x27;Trump&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;China&#x27;&lt;/span&gt; ]&lt;br/&gt;[tap-intercept] { &lt;span&gt;type&lt;/span&gt;: &lt;span&gt;&#x27;async&#x27;&lt;/span&gt;, &lt;span&gt;fn&lt;/span&gt;: [&lt;span&gt;Function&lt;/span&gt; (anonymous)], &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt; }&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt; starts..., the country &lt;span&gt;of&lt;/span&gt; Trump is USA.&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt; done&lt;br/&gt;[tap-intercept] { &lt;span&gt;type&lt;/span&gt;: &lt;span&gt;&#x27;promise&#x27;&lt;/span&gt;, &lt;span&gt;fn&lt;/span&gt;: [&lt;span&gt;Function&lt;/span&gt; (anonymous)], &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt; }&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt; starts...&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt; done, &lt;span&gt;count&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;[tap-intercept] { &lt;span&gt;type&lt;/span&gt;: &lt;span&gt;&#x27;async&#x27;&lt;/span&gt;, &lt;span&gt;fn&lt;/span&gt;: [&lt;span&gt;Function&lt;/span&gt; (anonymous)], &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;event-3&#x27;&lt;/span&gt; }&lt;br/&gt;event&lt;span&gt;-3&lt;/span&gt; starts...&lt;br/&gt;event&lt;span&gt;-3&lt;/span&gt; done&lt;br/&gt;[done-intercept] Last interceptor.&lt;br/&gt;Hook has been done!&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拦截器还支持多个配置，会依次执行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;new&lt;/span&gt; AsyncSeriesLoopHook([&lt;span&gt;&#x27;name&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;country&#x27;&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 配置第一个拦截器&lt;/span&gt;&lt;br/&gt;hook.intercept({&lt;br/&gt;    &lt;span&gt;register&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;options&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`[register-intercept-1] &lt;span&gt;${options.name}&lt;/span&gt; is going registering...`&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; options;&lt;br/&gt;    },&lt;br/&gt;    tap() {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[tap-intercept-1]&#x27;&lt;/span&gt;);&lt;br/&gt;    },&lt;br/&gt;    done() {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[done-intercept-1] Last interceptor.&#x27;&lt;/span&gt;)&lt;br/&gt;    }&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 配置第二个拦截器&lt;/span&gt;&lt;br/&gt;hook.intercept({&lt;br/&gt;    &lt;span&gt;register&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;options&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`[register-intercept-2] &lt;span&gt;${options.name}&lt;/span&gt; is going registering...`&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; options;&lt;br/&gt;    },&lt;br/&gt;    tap() {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[tap-intercept-2]&#x27;&lt;/span&gt;);&lt;br/&gt;    },&lt;br/&gt;    done() {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;[done-intercept-2] Last interceptor.&#x27;&lt;/span&gt;)&lt;br/&gt;    }&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;event-1&#x27;&lt;/span&gt;, (name, country, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`event-1 starts..., the country of &lt;span&gt;${name}&lt;/span&gt; is &lt;span&gt;${country}&lt;/span&gt;.`&lt;/span&gt;);&lt;br/&gt;    setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-1 done&#x27;&lt;/span&gt;);&lt;br/&gt;        callback()&lt;br/&gt;    }, &lt;span&gt;500&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.tapAsync(&lt;span&gt;&#x27;event-2&#x27;&lt;/span&gt;, (name, country, callback) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-2 starts...&#x27;&lt;/span&gt;);&lt;br/&gt;    setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;event-2 done&#x27;&lt;/span&gt;);&lt;br/&gt;        callback()&lt;br/&gt;    }, &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook.callAsync(&lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;China&#x27;&lt;/span&gt;, () =&amp;gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;Hook has been done!&#x27;&lt;/span&gt;); });&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 ******/&lt;/span&gt;&lt;br/&gt;[register-intercept&lt;span&gt;-1&lt;/span&gt;] event&lt;span&gt;-1&lt;/span&gt; is going registering...&lt;br/&gt;[register-intercept&lt;span&gt;-2&lt;/span&gt;] event&lt;span&gt;-1&lt;/span&gt; is going registering...&lt;br/&gt;[register-intercept&lt;span&gt;-1&lt;/span&gt;] event&lt;span&gt;-2&lt;/span&gt; is going registering...&lt;br/&gt;[register-intercept&lt;span&gt;-2&lt;/span&gt;] event&lt;span&gt;-2&lt;/span&gt; is going registering...&lt;br/&gt;[tap-intercept&lt;span&gt;-1&lt;/span&gt;]&lt;br/&gt;[tap-intercept&lt;span&gt;-2&lt;/span&gt;]&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt; starts..., the country &lt;span&gt;of&lt;/span&gt; VJ is China.&lt;br/&gt;event&lt;span&gt;-1&lt;/span&gt; done&lt;br/&gt;[tap-intercept&lt;span&gt;-1&lt;/span&gt;]&lt;br/&gt;[tap-intercept&lt;span&gt;-2&lt;/span&gt;]&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt; starts...&lt;br/&gt;event&lt;span&gt;-2&lt;/span&gt; done&lt;br/&gt;[done-intercept&lt;span&gt;-1&lt;/span&gt;] Last interceptor.&lt;br/&gt;[done-intercept&lt;span&gt;-2&lt;/span&gt;] Last interceptor.&lt;br/&gt;Hook has been done!&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拦截器是个很有意思的功能，是各工具“生命周期”的底层钩子，我们来看下 Tapable 中是如何实现拦截器的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;12.2 代码实现&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;12.2.1 intercept 入口和 register 拦截器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先要实现的自然是 &lt;code&gt;hook.intercept&lt;/code&gt; 的接口，我们需要回到 &lt;code&gt;Hook.js&lt;/code&gt; 中添加该方法，并新增一个数组来存放拦截器配置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;Hook.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Hook&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;constructor&lt;/span&gt;(args = [], name = undefined) {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;._args = args;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.name = name;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.taps = [];&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.interceptors = [];  &lt;span&gt;// 新增，用于存放拦截器&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.call = CALL_DELEGATE;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;._call = CALL_DELEGATE;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;._callAsync = CALL_ASYNC_DELEGATE;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.callAsync = CALL_ASYNC_DELEGATE;&lt;br/&gt;    }&lt;br/&gt;    _createCall(type) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.compile({&lt;br/&gt;            &lt;span&gt;taps&lt;/span&gt;: &lt;span&gt;this&lt;/span&gt;.taps,&lt;br/&gt;            &lt;span&gt;args&lt;/span&gt;: &lt;span&gt;this&lt;/span&gt;._args,&lt;br/&gt;            &lt;span&gt;type&lt;/span&gt;: type,&lt;br/&gt;            &lt;span&gt;interceptors&lt;/span&gt;: &lt;span&gt;this&lt;/span&gt;.interceptors  &lt;span&gt;// 新增，传递给 HookCodeFactory&lt;/span&gt;&lt;br/&gt;        });&lt;br/&gt;    }&lt;br/&gt;    intercept(interceptor) {  &lt;span&gt;// 新增 intercept 接口&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;._resetCompilation();&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.interceptors.push(&lt;span&gt;Object&lt;/span&gt;.assign({}, interceptor));&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (interceptor.register) {&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;this&lt;/span&gt;.taps.length; i++) {&lt;br/&gt;                &lt;span&gt;// 执行 register 拦截器，用返回值替换订阅对象信息&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;this&lt;/span&gt;.taps[i] = interceptor.register(&lt;span&gt;this&lt;/span&gt;.taps[i]);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在用户注册拦截器的时候（调用 &lt;code&gt;hook.intercept&lt;/code&gt;），会将拦截器配置对象存入数组 &lt;code&gt;this.interceptors&lt;/code&gt;，然后遍历订阅事件对象，逐个触发 register 拦截器，并用拦截回调的返回值来替换订阅对象信息。这也是为何我们可以在 register 拦截阶段直接修改订阅对象信息。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;12.2.2 call、error、done 拦截器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都知道 Tapable 是通过模板拼接来完成其全部能力的，拦截器的实现方式也不例外。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;试想一下，我们可以通过存储于 &lt;code&gt;this.interceptors&lt;/code&gt; 的数组里获取到拦截器配置，自然也可以在需要拦截的地方，将 &lt;code&gt;this.interceptors[n].interceptorName()&lt;/code&gt; 字符串嵌入模板对应位置，最终执行模板函数时，就会在适当的时间点执行对应的拦截回调。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如在 &lt;code&gt;HookCodeFactory.js&lt;/code&gt; 中，我们可以新增一个 &lt;code&gt;contentWithInterceptors&lt;/code&gt; 方法，在调用 &lt;code&gt;this.content&lt;/code&gt; 前触发  call 拦截器，并修改传入 &lt;code&gt;this.content&lt;/code&gt; 的 &lt;code&gt;onError&lt;/code&gt; 和 &lt;code&gt;onDone&lt;/code&gt; 模板，让它们在执行时分别先触发 error 拦截器和 done 拦截器：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;contentWithInterceptors(options) {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.options.interceptors.length &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; onError = options.onError;&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; onResult = options.onResult;&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; onDone = options.onDone;&lt;br/&gt;        &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;this&lt;/span&gt;.options.interceptors.length; i++) {&lt;br/&gt;            &lt;span&gt;const&lt;/span&gt; interceptor = &lt;span&gt;this&lt;/span&gt;.options.interceptors[i];&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (interceptor.call) {&lt;br/&gt;                code += &lt;span&gt;`&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.getInterceptor(i)}&lt;/span&gt;.call(&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.args()}&lt;/span&gt;);\n`&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        code += &lt;span&gt;this&lt;/span&gt;.content(&lt;br/&gt;            &lt;span&gt;Object&lt;/span&gt;.assign(options, {&lt;br/&gt;                &lt;span&gt;onError&lt;/span&gt;:&lt;br/&gt;                    onError &amp;amp;&amp;amp;&lt;br/&gt;                    (&lt;span&gt;&lt;span&gt;err&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;                        &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;                        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;this&lt;/span&gt;.options.interceptors.length; i++) {&lt;br/&gt;                            &lt;span&gt;const&lt;/span&gt; interceptor = &lt;span&gt;this&lt;/span&gt;.options.interceptors[i];&lt;br/&gt;                            &lt;span&gt;if&lt;/span&gt; (interceptor.error) {&lt;br/&gt;                                code += &lt;span&gt;`&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.getInterceptor(i)}&lt;/span&gt;.error(&lt;span&gt;${err}&lt;/span&gt;);\n`&lt;/span&gt;;&lt;br/&gt;                            }&lt;br/&gt;                        }&lt;br/&gt;                        code += onError(err);&lt;br/&gt;                        &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;                    }),&lt;br/&gt;                onResult,&lt;br/&gt;                &lt;span&gt;onDone&lt;/span&gt;:&lt;br/&gt;                    onDone &amp;amp;&amp;amp;&lt;br/&gt;                    &lt;span&gt;(&lt;span&gt;(&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;                        &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;                        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;this&lt;/span&gt;.options.interceptors.length; i++) {&lt;br/&gt;                            &lt;span&gt;const&lt;/span&gt; interceptor = &lt;span&gt;this&lt;/span&gt;.options.interceptors[i];&lt;br/&gt;                            &lt;span&gt;if&lt;/span&gt; (interceptor.done) {&lt;br/&gt;                                code += &lt;span&gt;`&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.getInterceptor(i)}&lt;/span&gt;.done();\n`&lt;/span&gt;;&lt;br/&gt;                            }&lt;br/&gt;                        }&lt;br/&gt;                        code += onDone();&lt;br/&gt;                        &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;                    })&lt;br/&gt;            })&lt;br/&gt;        );&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.content(options);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;getInterceptor(idx) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;`_interceptors[&lt;span&gt;${idx}&lt;/span&gt;]`&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将 &lt;code&gt;create&lt;/code&gt; 方法中调用 &lt;code&gt;content&lt;/code&gt; 的地方改为 &lt;code&gt;contentWithInterceptors&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt;create(options) {&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.init(options);&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; fn;&lt;br/&gt;    &lt;span&gt;switch&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.options.type) {&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;sync&quot;&lt;/span&gt;:&lt;br/&gt;            fn = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Function&lt;/span&gt;(&lt;br/&gt;                &lt;span&gt;this&lt;/span&gt;.args(),&lt;br/&gt;                &lt;span&gt;&#x27;&quot;use strict&quot;;\n&#x27;&lt;/span&gt; +&lt;br/&gt;                &lt;span&gt;this&lt;/span&gt;.header() +&lt;br/&gt;                &lt;span&gt;this&lt;/span&gt;.contentWithInterceptors({  &lt;span&gt;// 修改&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;onDone&lt;/span&gt;: &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;                    &lt;span&gt;onResult&lt;/span&gt;: &lt;span&gt;&lt;span&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;`return &lt;span&gt;${result}&lt;/span&gt;;\n`&lt;/span&gt;,&lt;br/&gt;                })&lt;br/&gt;            );&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;async&quot;&lt;/span&gt;:&lt;br/&gt;            fn = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Function&lt;/span&gt;(&lt;br/&gt;                &lt;span&gt;this&lt;/span&gt;.args({&lt;br/&gt;                    &lt;span&gt;after&lt;/span&gt;: &lt;span&gt;&quot;_callback&quot;&lt;/span&gt;&lt;br/&gt;                }),&lt;br/&gt;                &lt;span&gt;&#x27;&quot;use strict&quot;;\n&#x27;&lt;/span&gt; +&lt;br/&gt;                &lt;span&gt;this&lt;/span&gt;.header() +&lt;br/&gt;                &lt;span&gt;this&lt;/span&gt;.contentWithInterceptors({  &lt;span&gt;// 修改&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;onError&lt;/span&gt;: &lt;span&gt;&lt;span&gt;err&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;`_callback(&lt;span&gt;${err}&lt;/span&gt;);\n`&lt;/span&gt;,&lt;br/&gt;                    &lt;span&gt;onResult&lt;/span&gt;: &lt;span&gt;&lt;span&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;`_callback(null, &lt;span&gt;${result}&lt;/span&gt;);\n`&lt;/span&gt;,&lt;br/&gt;                    &lt;span&gt;onDone&lt;/span&gt;: &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;&quot;_callback();\n&quot;&lt;/span&gt;&lt;br/&gt;                })&lt;br/&gt;            );&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.deinit();&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; fn;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;header() {&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;&quot;var _x = this._x;\n&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.options.interceptors.length &amp;gt; &lt;span&gt;0&lt;/span&gt;) {  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;        code += &lt;span&gt;&quot;var _taps = this.taps;\n&quot;&lt;/span&gt;;&lt;br/&gt;        code += &lt;span&gt;&quot;var _interceptors = this.interceptors;\n&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;12.2.3 tap 拦截器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;tap 拦截器是在 &lt;code&gt;callTap&lt;/code&gt; 开始执行时触发的，它的实现很简单：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt;callTap(tapIndex, { onError, onDone, onResult }) {&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; code = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; hasTapCached = &lt;span&gt;false&lt;/span&gt;;  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;this&lt;/span&gt;.options.interceptors.length; i++) {  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; interceptor = &lt;span&gt;this&lt;/span&gt;.options.interceptors[i];&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (interceptor.tap) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (!hasTapCached) {&lt;br/&gt;                code += &lt;span&gt;`var _tap&lt;span&gt;${tapIndex}&lt;/span&gt; = &lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.getTap(tapIndex)}&lt;/span&gt;;\n`&lt;/span&gt;;&lt;br/&gt;                hasTapCached = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;            code += &lt;span&gt;`&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.getInterceptor(i)}&lt;/span&gt;.tap(_tap&lt;span&gt;${tapIndex}&lt;/span&gt;);\n`&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    code += &lt;span&gt;`var _fn&lt;span&gt;${tapIndex}&lt;/span&gt; = &lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.getTapFn(tapIndex)}&lt;/span&gt;;\n`&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; tap = &lt;span&gt;this&lt;/span&gt;.options.taps[tapIndex];&lt;br/&gt;    &lt;span&gt;switch&lt;/span&gt; (tap.type) {&lt;br/&gt;        &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它会生成这样的模板内容：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 假设遍历索引为 I，且有两个拦截器配置对象&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; _tapI = tapOptionsI;&lt;br/&gt;_interceptors[&lt;span&gt;0&lt;/span&gt;].tap(_tapI)&lt;br/&gt;_interceptors[&lt;span&gt;1&lt;/span&gt;].tap(_tapI)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;12.2.4 loop 拦截器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;loop 拦截器只需要在 &lt;code&gt;callTapsLooping&lt;/code&gt; 的 &lt;code&gt;do-while&lt;/code&gt; 模板开头插入拦截代码即可：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookCodeFactory.js ****/&lt;/span&gt;&lt;br/&gt;callTapsLooping({ onError, onDone }) {&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;    code += &lt;span&gt;&quot;var _loop;\n&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;&quot;do {\n&quot;&lt;/span&gt;;&lt;br/&gt;    code += &lt;span&gt;&quot;_loop = false;\n&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;this&lt;/span&gt;.options.interceptors.length; i++) {  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; interceptor = &lt;span&gt;this&lt;/span&gt;.options.interceptors[i];&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (interceptor.loop) {&lt;br/&gt;            code += &lt;span&gt;`&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.getInterceptor(i)}&lt;/span&gt;.loop(&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.args()}&lt;/span&gt;);\n`&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    code += &lt;span&gt;this&lt;/span&gt;.callTapsSeries({...});&lt;br/&gt;    &lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此 Tapable 中的几个拦截器就这么被实现了，没想象中的复杂对吧？&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十三、HookMap&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;13.1 介绍&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;HookMap&lt;/code&gt; 是 Tapable 的一个辅助类（helper），利用它可以更好地封装我们的各种钩子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; keyedHook = &lt;span&gt;new&lt;/span&gt; HookMap(&lt;span&gt;&lt;span&gt;key&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; SyncHook([&lt;span&gt;&quot;desc&quot;&lt;/span&gt;]));&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 创建名为“webpack”的钩子，并订阅“Plugin-A”和“Plugin-B”事件&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; webpackHook = keyedHook.for(&lt;span&gt;&quot;webpack&quot;&lt;/span&gt;);&lt;br/&gt;webpackHook.tap(&lt;span&gt;&quot;Plugin-A&quot;&lt;/span&gt;, (desc) =&amp;gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;Plugin-A&quot;&lt;/span&gt;, desc) });&lt;br/&gt;webpackHook.tap(&lt;span&gt;&quot;Plugin-B&quot;&lt;/span&gt;, (desc) =&amp;gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;Plugin-B&quot;&lt;/span&gt;, desc) });&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 创建名为“babel”的钩子，并订阅“Plugin-C”事件&lt;/span&gt;&lt;br/&gt;keyedHook.for(&lt;span&gt;&quot;babel&quot;&lt;/span&gt;).tap(&lt;span&gt;&quot;Plugin-C&quot;&lt;/span&gt;, (desc) =&amp;gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;Plugin-C&quot;&lt;/span&gt;, desc) });&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getHook&lt;/span&gt;(&lt;span&gt;hookName&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 获取指定名称的钩子&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; keyedHook.get(hookName);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;callHook&lt;/span&gt;(&lt;span&gt;hookName, desc&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; hook = getHook(hookName);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(hook !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; call = hook.call || hook.callAsync;&lt;br/&gt;        call.bind(hook)(desc);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;callHook(&lt;span&gt;&#x27;webpack&#x27;&lt;/span&gt;, &lt;span&gt;&quot;It&#x27;s on Webpack plugins processing&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports.getHook = getHook;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports.callHook = callHook;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 &lt;br/&gt;Plugin-A It&#x27;s on Webpack plugins processing&lt;br/&gt;Plugin-B It&#x27;s on Webpack plugins processing&lt;br/&gt;******/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;13.2 代码实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;HookMap&lt;/code&gt; 使用了 &lt;code&gt;this._factory&lt;/code&gt; 来存储用户在初始化时传入的钩子构造函数（钩子工厂），后续用户调用 &lt;code&gt;hookMap.for&lt;/code&gt; 时会通过该构造函数生成指定类型的钩子，并以钩子名称为 key 存入一个 &lt;code&gt;Map&lt;/code&gt; 对象，后续如果需要获取该钩子，从 &lt;code&gt;Map&lt;/code&gt; 对象查找它的名称即可：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookMap.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; util = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;util&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HookMap&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;constructor&lt;/span&gt;(factory, name = undefined) {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._map = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Map&lt;/span&gt;();&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.name = name;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._factory = factory;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;get&lt;/span&gt;(key) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;._map.get(key);&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;for&lt;/span&gt;(key) {&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;this&lt;/span&gt;.get(key);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (hook !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; hook;  &lt;span&gt;// 支持链式调用&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; newHook = &lt;span&gt;this&lt;/span&gt;._factory(key);&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._map.set(key, newHook);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; newHook;  &lt;span&gt;// 支持链式调用&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = HookMap;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;留意 &lt;code&gt;for&lt;/code&gt; 的开头会先判断是否已经构建了该名称的钩子，如果是则直接返回。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们就这样完成了 &lt;code&gt;HookMap&lt;/code&gt; 的基础能力，可见它就是一个语法糖，实现相对简单。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外 &lt;code&gt;HookMap&lt;/code&gt; 支持一个名为 &lt;strong&gt;factory&lt;/strong&gt; 的拦截器，它可以修改 &lt;code&gt;HookMap&lt;/code&gt; 的钩子构造函数（&lt;code&gt;this._factory&lt;/code&gt;），对新建的钩子会生效：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; keyedHook = &lt;span&gt;new&lt;/span&gt; HookMap(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; SyncHook([&lt;span&gt;&quot;desc&quot;&lt;/span&gt;]));&lt;br/&gt;&lt;br/&gt;keyedHook.for(&lt;span&gt;&quot;webpack&quot;&lt;/span&gt;).tap(&lt;span&gt;&quot;Plugin-A&quot;&lt;/span&gt;, (desc) =&amp;gt; { &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;Plugin-A-phase-1&quot;&lt;/span&gt;, desc) });&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 配置拦截器，更换新的钩子类型&lt;/span&gt;&lt;br/&gt;keyedHook.intercept({&lt;br/&gt;    &lt;span&gt;factory&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;key&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`[intercept] New hook: &lt;span&gt;${key}&lt;/span&gt;.`&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; SyncBailHook([&lt;span&gt;&quot;desc&quot;&lt;/span&gt;]);&lt;br/&gt;    }&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 已有名为 webpack 的钩子，拦截器不会影响，它依旧是 SyncHook 钩子&lt;/span&gt;&lt;br/&gt;keyedHook.for(&lt;span&gt;&quot;webpack&quot;&lt;/span&gt;).tap(&lt;span&gt;&quot;Plugin-A&quot;&lt;/span&gt;, (desc) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;Plugin-A-phase-2&quot;&lt;/span&gt;, desc);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;keyedHook.for(&lt;span&gt;&quot;webpack&quot;&lt;/span&gt;).tap(&lt;span&gt;&quot;Plugin-B&quot;&lt;/span&gt;, (desc) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;Plugin-B&quot;&lt;/span&gt;, desc);&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 新的钩子，类型为拦截器替换掉的 SyncBailHook&lt;/span&gt;&lt;br/&gt;keyedHook.for(&lt;span&gt;&quot;babel&quot;&lt;/span&gt;).tap(&lt;span&gt;&quot;Plugin-C&quot;&lt;/span&gt;, (desc) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;Plugin-C-phase-1&quot;&lt;/span&gt;, desc);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;keyedHook.for(&lt;span&gt;&quot;babel&quot;&lt;/span&gt;).tap(&lt;span&gt;&quot;Plugin-C&quot;&lt;/span&gt;, (desc) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;Plugin-C-phase-2&quot;&lt;/span&gt;, desc);&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getHook&lt;/span&gt;(&lt;span&gt;hookName&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; keyedHook.get(hookName);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;callHook&lt;/span&gt;(&lt;span&gt;hookName, desc&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; hook = getHook(hookName);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (hook !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; call = hook.call || hook.callAsync;&lt;br/&gt;        call.bind(hook)(desc);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;callHook(&lt;span&gt;&#x27;webpack&#x27;&lt;/span&gt;, &lt;span&gt;&quot;It&#x27;s on Webpack plugins processing&quot;&lt;/span&gt;);&lt;br/&gt;callHook(&lt;span&gt;&#x27;babel&#x27;&lt;/span&gt;, &lt;span&gt;&quot;It&#x27;s on Webpack plugins processing&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 &lt;br/&gt;[intercept] New hook: babel.&lt;br/&gt;Plugin-A-phase-1 It&#x27;s on Webpack plugins processing&lt;br/&gt;Plugin-A-phase-2 It&#x27;s on Webpack plugins processing&lt;br/&gt;Plugin-B It&#x27;s on Webpack plugins processing&lt;br/&gt;Plugin-C-phase-1 It&#x27;s on Webpack plugins processing&lt;br/&gt;******/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它的实现也很简单，这里不再赘述：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookMap.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; defaultFactory = &lt;span&gt;(&lt;span&gt;key, hook&lt;/span&gt;) =&amp;gt;&lt;/span&gt; hook;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HookMap&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;constructor&lt;/span&gt;(factory, name = undefined) {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._map = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Map&lt;/span&gt;();&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.name = name;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._factory = factory;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._interceptors = [];  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;get&lt;/span&gt;(key) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;._map.get(key);&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;for&lt;/span&gt;(key) {&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; hook = &lt;span&gt;this&lt;/span&gt;.get(key);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (hook !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; hook;  &lt;span&gt;// 如果已有同名钩子，拦截器不会生效&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; newHook = &lt;span&gt;this&lt;/span&gt;._factory(key);&lt;br/&gt;                &lt;br/&gt;                &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; interceptors = &lt;span&gt;this&lt;/span&gt;._interceptors;&lt;br/&gt;                &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; interceptors.length; i++) {&lt;br/&gt;   newHook = interceptors[i].factory(key, newHook);&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._map.set(key, newHook);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; newHook;&lt;br/&gt; }&lt;br/&gt;        &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt; intercept(interceptor) {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._interceptors.push(&lt;br/&gt;   &lt;span&gt;Object&lt;/span&gt;.assign(&lt;br/&gt;    {&lt;br/&gt;     &lt;span&gt;factory&lt;/span&gt;: defaultFactory&lt;br/&gt;    },&lt;br/&gt;    interceptor&lt;br/&gt;   )&lt;br/&gt;  );&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = HookMap;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十四、MultiHook&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是最后一个要介绍的 &lt;code&gt;Tapable&lt;/code&gt; 的模块了，它也是一个语法糖，方便你批量操作多个钩子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; MultiHook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;./lib/MultiHook&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; SyncHook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;./lib/SyncHook&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; SyncBailHook = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;./lib/SyncBailHook.js&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook1 = &lt;span&gt;new&lt;/span&gt; SyncHook([&lt;span&gt;&quot;contry&quot;&lt;/span&gt;, &lt;span&gt;&quot;city&quot;&lt;/span&gt;, &lt;span&gt;&quot;people&quot;&lt;/span&gt;]);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hook2 = &lt;span&gt;new&lt;/span&gt; SyncBailHook([&lt;span&gt;&quot;contry&quot;&lt;/span&gt;, &lt;span&gt;&quot;city&quot;&lt;/span&gt;, &lt;span&gt;&quot;people&quot;&lt;/span&gt;]);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hooks = &lt;span&gt;new&lt;/span&gt; MultiHook([hook1, hook2]);&lt;br/&gt;&lt;br/&gt;hooks.tap(&lt;span&gt;&#x27;multiHook-event&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;multiHook-event-1:&#x27;&lt;/span&gt;, contry, city, people);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hooks.tap(&lt;span&gt;&#x27;multiHook-event&#x27;&lt;/span&gt;, (contry, city, people) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;multiHook-event-2:&#x27;&lt;/span&gt;, contry, city, people);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;hook1.call(&lt;span&gt;&#x27;China&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;Shenzhen&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;VJ&#x27;&lt;/span&gt;);&lt;br/&gt;hook2.call(&lt;span&gt;&#x27;USA&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;NYC&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;Joey&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/****** 下方为输出 &lt;br/&gt;multiHook-event-1: China Shenzhen VJ&lt;br/&gt;multiHook-event-2: China Shenzhen VJ&lt;br/&gt;multiHook-event-1: USA NYC Joey&lt;br/&gt;******/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实现非常简单，只是一个普通的封装模块，将传入的钩子们存在 &lt;code&gt;this.hooks&lt;/code&gt; 中，在调用内部方法的时候通过 &lt;code&gt;for of&lt;/code&gt; 来遍历钩子和执行对应接口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**** &lt;span&gt;@file &lt;/span&gt;HookMap.js ****/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MultiHook&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;constructor&lt;/span&gt;(hooks, name = undefined) {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.hooks = hooks;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.name = name;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; tap(options, fn) {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;const&lt;/span&gt; hook &lt;span&gt;of&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.hooks) {&lt;br/&gt;   hook.tap(options, fn);&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; tapAsync(options, fn) {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;const&lt;/span&gt; hook &lt;span&gt;of&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.hooks) {&lt;br/&gt;   hook.tapAsync(options, fn);&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; tapPromise(options, fn) {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;const&lt;/span&gt; hook &lt;span&gt;of&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.hooks) {&lt;br/&gt;   hook.tapPromise(options, fn);&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; intercept(interceptor) {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;const&lt;/span&gt; hook &lt;span&gt;of&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.hooks) {&lt;br/&gt;   hook.intercept(interceptor);&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = MultiHook;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;十五、小结&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是全部关于 Tapable 的分析了，从中我们了解到了 Tapable 的实现是基于模板的拼接，这是个很有创意的形式，有点像搭积木，把各钩子的订阅回调按相关逻辑一层层搭建成型，这其实不是很轻松的事情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在掌握了 Tapable 各种钩子、拦截器的执行流程和实现之后，也相信你会对 Webpack 的工作流程有了更进一步的了解，毕竟 Webpack 的工作流程不外乎就是将各个插件串联起来，而 Tapable 帮忙实现了这一事件流机制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外这么长的文章应该存在一些错别字或语病，欢迎大家评论指出，我再一一修改。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后感谢大家能耐心读完本文，希望你们能有所收获，共勉~&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI2MjcxNTQ0Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/jQmwTIFl1V0dLQzNJW15CVaCoNjposvTpccciaj05o5nPiaqfLRRfTQiaYFYPN41Etrrqt8jPOWukPmJWt3lYxwuA/0?wx_fmt=png&quot; data-nickname=&quot;全栈修仙之路&quot; data-alias=&quot;FerRoad&quot; data-signature=&quot;专注分享 TS、Vue3、前端架构和源码解析等技术干货。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>13b78fe80c6b68893c63184a77bf8054</guid>
<title>想变好却不能坚持，我告诉你怎么办</title>
<link>https://toutiao.io/k/juf9iad</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原创不易，求分享、求一键三连&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;视频号差几百粉丝做认证，&lt;strong&gt;求关注&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3407821229050279&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/JdfjlwvwuTC6wdAK8eMVHCkgAPL9wjFoiavyd4LicoXLV3Payo0UugL8UicB5icUNUD8A0YDp6A3lqnk9GNUdRfQvw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;716&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前我们分享了《精要主义》：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MzcyODQ5MQ==&amp;amp;mid=2247485493&amp;amp;idx=1&amp;amp;sn=347406464343664b0919671a0eb6b63d&amp;amp;chksm=ce756e31f902e7275864ee261c04d07dd40a3caf3a75ee4f6705ee2c058ff7a44e30cf4f1af7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;精要主义设计人生——对混乱的工作说不&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;精要主义设计人生——对混乱的工作说不&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文中提到了《瞬变》一书，一些同学表示很感兴趣，于是也说下对他的理解，这里首先看看两本书的目录：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;「《精要主义》目录」&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;前言 设计人生，以一种精要的方式&lt;/p&gt;&lt;p&gt;第一部分 精要主义者的核心思维模式，时间与精力只用于有意义的事&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;模式一 选择，一种战无不胜的力量&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;模式二 甄别，几乎一切都是噪声&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;模式三 取舍，我要的究竟是什么&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;第二部分 精要主义者养成的第一步：探索，区分无意义的多数和有意义的少数&lt;/p&gt;&lt;p&gt;......&lt;/p&gt;&lt;p&gt;第三部分 精要主义者养成的第二步：排除，摆脱无意义的多数&lt;/p&gt;&lt;p&gt;......&lt;/p&gt;&lt;p&gt;第四部分 精要主义者养成的第三步：执行，让有意义的少数做起来毫不费力&lt;/p&gt;&lt;p&gt;......&lt;/p&gt;&lt;p&gt;结语 存在，设计你的精要人生&lt;/p&gt;&lt;p&gt;附录 从精要主义者，到精要领导者&lt;/p&gt;&lt;p&gt;&lt;strong&gt;「《瞬变》目录」&lt;/strong&gt;：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一章 认识改变：你所不知道的三个事实指挥骑象人&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二章 找到亮点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三章 制订要着&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第四章 指明终点激励大象&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第五章 找到感觉&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第六章 缩小幅度&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第七章 教化群众营造路径&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第八章 调整环境&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第九章 培养习惯&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第十章 召集同伴&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第十一章 坚持改变：改变很容易&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两本书都属于思维框架类书籍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从受众来说，《瞬变》适合所有人，但对工作5年以下的人帮助更大一些；《精要主义》适合有一定社会阅历的人阅读；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从作用来说，我认为《精要主义》的核心思维对实际的帮助更大，《瞬变》反而可以作为《精要主义》的体系补足而存在，两本书适性很高；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从阅读体验来说，《精要主义》的案例稍显臃肿，篇幅过大反而不太&lt;strong&gt;「精要主义」&lt;/strong&gt;，《瞬变》的行文组织明显比他来的好；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以从受众到书籍组织来说《瞬变》一书的评价可以比《精要主义》高点。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;思维框架类书籍&lt;/span&gt;&lt;/h1&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;类似于《精要主义》、《瞬变》、《系统性思考》、《批判性思维》等都是“提升认知”类书籍，它提供一套&lt;strong&gt;「思维框架」&lt;/strong&gt;，旨在改变人们的思维方式，以帮助大家更容易达到目标。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这类书籍的组织方式一般是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）首先提出一套底层逻辑；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《精要主义》的底层逻辑是更少但是更好，后续所有的内容都是围绕这个观点展开；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《瞬变》的底层逻辑是从容易的小事着手，再以小驱大改变习惯，进而改变人生。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）有底层逻辑后，这类书籍还会提供自己的最佳实践，也就是我们所谓的方法论或实现路径，帮大家更好的掌握这个理论。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以阅读这类书籍也应该掌握两个重点：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一是这个底层逻辑对你是否适用，他是否能融入你的认知体系；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二是这类思维框架仅仅是思维框架罢了，阅读过程中你可能产生很爽的感觉；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但认知是这个真实的世界在你大脑的投影，因为防御机制的存在，这类&lt;strong&gt;「思维框架」&lt;/strong&gt;类书籍极可能变成让你觉得&lt;strong&gt;「很有道理」&lt;/strong&gt;但到实际做事件并没有什么帮助的情况，换句话说就是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;道理我都懂，但并没有什么卵用，这是因为所有的“思维框架”都需要融入你的认知体系，不然并不会产生什么价值，最后变成读了一篇爽文。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;所以因为读了某类思维框架类书籍对你产生莫大的帮助，往往是因为他贴近你的体系或者贴近你的经历，里面的实现路径（方法论）补足了你的系统，为你的行为提供了理论基础，让你的自我体系加强了，这是你本身牛逼，而非书籍本身多么的牛逼。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一点是一定要注意的，读书肯定是有帮助的，但知行合一、知行匹配，有了理论知识还是得有对应的实践，否则容易纸上谈兵，不能说服人，也不能说服自己。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打破认知屏障其实很难，但是&lt;strong&gt;「获取足够资源、抹平路径障碍」&lt;/strong&gt;实践认知这个过程更难！&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;深入《瞬变》拆解&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;瞬变提供了一个比较不错的思维框架，也可以称为方法论，帮我们从三个层面解决不想变化的惰性：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）所有冥顽不明，不接受改变的人，其实是因为缺乏清晰的目标，所以第一步是提供清晰的目标；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）表面上懒散的人，实际上是激情耗尽的表现，不能强迫这种人去完成清晰的目标，而是要把感性的部分引入进来，自驱前进；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）目标明确+思想深层次想改变的同时需要控制外部环境（控制路径），当路径形成后，改变会更容易产生；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;书籍主旨是我们感性与理性的拉扯，给了一个路径让理性可以以一种“讨巧”的方式打败感性的大象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于实际工作来说，我们可以这样做战略：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;改变的目标是什么，是什么拖慢了我们的后腿，比如我们希望员工之间合作能更加默契，消除工种歧视，消除业务壁垒，将团队效率提高并且为团队下一步成长打牢基础，提供好的文化底蕴。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，我们这边有几件事需要做：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、指引方向&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;① 勾勒出关键性的步骤，如何实现这种目标，实现了后是什么样的；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;② 指出最终目的地，什么是好的合作方式，什么是不好的合作方式；&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、激发情绪&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;团队合作能带来哪些好的事情，尽量以好的愿景去激发大家；&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、塑造道路&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;① 群体压力；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;② 培养习惯（行动触发器）；&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;亮点——案例小而美&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我认为《瞬变》阅读体验好的核心是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;里面的很多案例都会令人惊喜，要么是小而美的事物，要么是不可能的创举，多少有点超出认知，而每个案例都能与书籍主旨和实现路径很好的挂钩，比如：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;案例一&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;心理学家经过大量测试，试图搞清楚电影院里不同的人在不同的状况之下，何时会吃掉更多的爆米花。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果令所有受试者大吃一惊，原来拿到的桶越大，吃的就会越多！这个实验告诉我们：令改变很困难的，看似是人的问题，实则是情境问题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;案例二&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一家大型制造企业的高管乔恩.斯特格纳为了说服董事会成员公司存在着严重的浪费，特意收集了424种不同的工作手套，并且逐一标上采购价格。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后把这些手套堆在高管会议的办公桌上。高管们看到公司竟然会购买如此众多类型甚至同一类型不同价格的工作手套，立刻感到了浪费的严重性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是决心开展节约行动，之前提过很多次都没用。这个事实告诉我们：看似懒于改变，实则缺乏动力。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;案例三&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;美国政府号召大家吃健康食品，甚至专门印发了饮食金字塔。但收效甚微。两位研究人员发现，只要让美国人喝脱脂牛奶，饱和脂肪摄入量就立刻能降到建议数值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是他们使用大量沟通方法向人们宣传了脱脂牛奶的好处，并展示了一大根盛满脂肪的管子，相当于半加仑全脂牛奶所含的脂肪量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;社区居民的脱脂牛奶购买率得到大幅持续的提高。这个案例告诉我们：看似心生抗拒，实则方向不明。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;书中很多这种小而美的案例，案例与理论直接完美贴合，让人不得不认可他想要表达的理论，《精要主义》来说的话这方面就弱一些。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;亮点——金句频出&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;书中产出了很多很妙的句子，如：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）理性的分析可能会帮助我们取得更好的未来规划，但是分析同时会带来很多问题，因为我们分析的往往是问题而不是亮点，在一些需要改变的环境中，太多的分析反而会毁掉改革进行的努力，所以尽快的创造成功案例比分析问题更加重要，因为他会指明清晰的目标；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）我们对已有的成功案例不要做太多吹毛求疵的怀疑，下意识的怀疑主义也许会让这件事变味，我们解决一件事情，有时候并非追根溯源挖掘本质原因，因为本质原因很多时候是需要大量精力解决的，这些是“正确但是无用的”，我们如果想快速解决一个问题，就只需要关注问题本身，比如每天一杯牛奶，早上9点起床，按时吃饭，看似小小的操作，其实可能解决大大的问题；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）问题很大，解决方案很小，这种非对称性时长在生活中发生，所以为了取得成功，在我们遇到棘手的情况或者现象或者问题的时候，我们未必需要去追根溯源，我们可能只需要简单的问一句，当下有什么成功的例子吗，而我们要做的就是让这种成功的例子变得多些；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4）坏比好更加强大，因为我们记住的关注的总是些“坏的事情”，比如你的女儿语文100分，数学98，英语60，你的关注点会在哪里呢，但也许扬长避短是很多小伙伴取得成功的法宝；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5）当失败的“选项”比较多的时候，这个时候我们决策的压力会变大，反而会引发决策瘫痪效应，这个时候不一样的是更多的选项反而会更加可能引导我们去选择哪个“弃权”的选项，弃权意味着选择痛苦，甚至选择失败，这虽然不是一个合理的行为却是人类的行为；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6）含混不清是进行改变的大敌，因此我们需要脚踏实地，不再纠结于所谓的抱负而是开始行动，简而言之，想要进行改变，你所需要的是勾勒出那些具备关键性的步骤；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;7）理性的人喜欢数据，观察数据分析数据并且希望从中找到突破点，不仅如此，他还倾向于跟你已得到的结论进行争辩，对于这些人来说，不断的“分析问题”会比真正去“解决”问题带给他更多的满足感，而这对希望寻求改变的你是危险的；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;8）很多成功的解决方案不是观察如何失败，而是观察如何成功，失败的经验令人唏嘘，而成功的路径却更有意义；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;9）问题的核心，总是与改变人们的行为有关，而行为的改变最为成功的案例，都是围绕着与人们的情感进行交流来进行的，变革不止需要影响他人的思维，更要影响他人的情绪。换个方式说，改变之所以真正能出现，是因为发生了心的交流；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;10）有些时候改变与一个人的理解无关，而是与他的情感有关，这是一种认知，即我能够做到，我是负责人，我正在赢回自己失去的东西，这个时候改变（学习）可能会变得更容易；&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;框架衍生&amp;amp;案例解析&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事实上熟悉OKR的同学会发现，瞬变的思维框架与OKR非常相似，我们这里直接以书中案例做OKR实现。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;手机成瘾症&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小蓝有手机成瘾症，每次手机脱手他都会坐立不安，他没办法不检查自己每一条传进来的信息，这已经令他非常头疼了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小蓝经常在工作会议上偷偷读信息，这让小蓝的同事很不爽；在团队聚餐的时候小蓝也在低头回信息，根本不能把注意力用到聚餐的谈话中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不仅如此，有一次因为他开车看信息差点撞上护栏，小蓝知道自己需要戒掉这种成瘾症，因为这已经影响他的正常生活了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个案例非常简单，可以清晰的找出目标：戒除手机成瘾症.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是人是分感性和理性的，长久的实验表明，不管这件事是不是正确、是不是对自己有用，我们都不容易成功，因为抵抗内心的渴望多数时候都是徒劳的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以光是简单的提出戒除手机成瘾症，对于我们内心感性的部分是没用的，我们不会买账，依旧会继续玩手机，这个时候便需要我们给感性的大象提供方向，首先是寻找闪光点，我们的这个目标必须振奋人心，所以这里我们的目标可以是：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;O：摆脱信息焦虑感，还我一个正常的生活&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;各位更聪明，肯定可以想出更好的目标。有了目标后，便可以设置KR，保证KR能实际完成目标即可，首先可能想要设置一个激进的KR：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;KR：不合适的时间使用手机的次数降为0次；&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一旦设定再也不使用手机这种决定，肯定彻底解决了我们手机成瘾的问题，但是这个决定不科学，只要我们感性部分觉得一件事不科学， 比如并不会让我的生活更快乐，不使用手机反而会让我们的生活更不正常，那么这种KR是正确但不可执行的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以对内心感性的狮子说，开车玩手机会让我们失去生命的，或者会议室使用手机会让我们丢了工作的，或者睡觉使用手机会让我们透支精力的，有了这些认识和硬性规定，便能走出第一步，但是第一步是肯定不够的，因为他还是太理性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来要打败内心感性的狮子，让他深刻的意识到手机的不当使用对我们的生活造成了多大的困扰：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;KR：梳理总结手机使用不当的场景100例&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里需要对“不当使用场景做定义”，比如是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;① 回顾过去在不当场合阅读10条信息，对自己真有用的是概率是多少&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;② 与同事交流，搜集大家对在聊天时候对方使用手机的感受10例&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;③ 在网上搜集资料，整理因使用手机发生的悲惨交通事故10例&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了以上的KR后，我们会清晰的认识到，之前使用手机的场景是多么的荒唐、不合情理，再辅以第一条KR制定的规则，便可以清晰的戒除手机成瘾症，至少我们再也不会开车时候使用了，不是吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个非常简单的案例，比我们工作中的场景简单太多，因为我们对自己有很高的控制力，对于没有控制力的场景该怎么办呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;不可能的任务&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1990年，杰瑞·斯特恩正在为国际性的儿童慈善机构“救助儿童”效力，他受命去越南为组织开拓一个新的分支机构，当他到达越南时候，欢迎他的人寥寥无几，他马上意识到并不是政府所有的人都期望他的到来，并且外交部长告诉他，“你只有6个月的时间去改变这种情况”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，不会越南语的你被像孤儿一样丢在了机场，并且有一些事实基础：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;① 我们根本不知道要做什么&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;② 能帮助我们的人很少，我们手里的资源很少&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，就已有的线索并不能帮助大家提出可靠的OKR，目标很简单，路径很难，所以我们这里需要搜寻更多的线索。杰瑞阅读了大量儿童营养不良的资料，可以很容易找的问题根节点所在：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;① 糟糕的卫生系统&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;② 缺乏容易获得的洁净的水&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;③ 农民淡漠的营养知识体系&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;似乎兴高采烈的我们似乎可以很容易的提出OKR：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;blockquote&gt;&lt;p&gt;O：有效的改善越南农民儿童的营养不良问题（对我来说这个可是跟解决非洲饥饿问题次一级的振奋了哦）&lt;/p&gt;&lt;p&gt;KR1：建立卫生系统标准，并且提升该标准（这里需要定义标准）&lt;/p&gt;&lt;p&gt;KR2：帮助农民获得更多的洁净的水&lt;/p&gt;&lt;p&gt;......&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过之前的知识，我们知道，KR一定要可执行，而上述KR本身都可以作为一个Objective，并且对于当时的越南来说很有点&lt;strong&gt;「何不食肉糜」&lt;/strong&gt;的感觉，是绝对不可实施的，这个KR是正确但无用的！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过不断的信息收集，杰瑞发现，一些穷人家的父母会往小孩的米饭中放入低级的食物，甘薯叶以及小虾米以及小螃蟹（类似于我们现在的辅食），而他们的小孩都是比较健康的！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是杰瑞获得了灵感，开始了他的OKR：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;O：有效的改善XX村越南农民儿童的营养不良问题（目标范围小）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;KR1：证明加入甘薯叶到食物中可以改善儿童健康情况&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个是个理论输出证明，属于里程碑式的，可以找50个营养不良的小孩分2组进行2个月的实验&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;KR2：大事宣扬“甘薯草食物法”可以有效改善儿童健康情况到全村&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;KR3：以“甘薯草食物法”为基准整理一套提升卫生意识的方案，并且推广给至少10个村庄&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终，杰瑞的方法被传播开来，一共影响了越南265个村庄的220w人，这是一个创举，是不可能完成的任务！似乎，只要我们对目标以及成功案例信念坚定，辅以正确的方法，那么再困难的目标都有可能会实现！&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结语&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题很大，解决方案很小，这种非对称性时长在生活中发生，所以为了取得成功，在我们遇到棘手的情况或者现象或者问题的时候，我们未必需要去追根溯源，我们可能只需要简单的问一句，当下有什么成功的例子吗，而我们要做的就是让这种成功的例子变得多些。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先做小事，寻找成功的案例，其次再想怎么把成功的方法论传导出去，我们翻译下这个过程：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;形成成功案例-&amp;gt;形成实践方法论-&amp;gt;传播方法论-&amp;gt;得到更多的案例数据-&amp;gt;形成制度（理论）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我们实际工作中，反向操作是什么呢：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;颁布机制（制度雏形）-&amp;gt;机制落地-&amp;gt;形成案例-&amp;gt;迭代机制-&amp;gt;形成制度&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，我们对《瞬变》一书的解读就结束了，希望对各位有用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，今天的分享就到这，希望对各位有用。&lt;strong&gt;「原创不易，多多分享」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想要更多交流可以加群：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2982954545454546&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/JdfjlwvwuTDqhejw2mdt4uibkLpGzAGcFrCBic7ReqC18AoKIXibcmZra9DomRHFevvZ6zzeMXgRtvDxXxDQvYpiaA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1056&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也可以&lt;strong&gt;「免费」&lt;/strong&gt;加入知识星球提问：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2923076923076924&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTDqhejw2mdt4uibkLpGzAGcFP1rUQEZ2ITy8y8dFR2LaG7sAzZY4xb6v0Wia0tlyBz0FTFECHd5KYGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1170&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>