<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f92dff282f47f4dacb87775f027e81ea</guid>
<title>这 6 个开源工具 yyds</title>
<link>https://toutiao.io/k/4hy4ste</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h1 data-key=&quot;fd245a0b20464c4d835251e573a6be6f&quot; data-mpa-powered-by=&quot;yiban.io&quot;/&gt;&lt;p&gt;&lt;span&gt;老逛搜集了 6 个 GitHub 上高赞的工具类开源项目，它们是启动盘制作神器、开源思维导图工具、Chrome 优质插件盘点、macOS 优质工具软件盘点。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;01. 重装系统神器&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Rufus 是一款实用的自启动U盘制作工具。用户可以通过该软件快速制作 Linux 系统或者 Win 的启动U&lt;span&gt;盘，不过在这之前你需要把重要资料备份到电脑中，因为格式化后什么都找不回来了。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果身边没有系统安装盘或者刻录光盘，那么使用 Rufus 就可以帮你安装系统了。&lt;/span&gt;&lt;span&gt;当然，你可以配合这个网站去下载 Windows 各版本的镜像。&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;section&gt;&lt;span&gt;系统镜像：http&lt;span&gt;s:&lt;/span&gt;//msdn.itellyou.&lt;span&gt;cn&lt;/span&gt;/&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.2870813397129186&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxwsYLW1ewJkNmL9mSoJulbicPfwBWoCY6IvvibtgHm5MEIzZX0uSph7UVqJjCA70lBwYthOmYZjeeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;418&quot;/&gt;&lt;/p&gt;&lt;h1 data-key=&quot;fd245a0b20464c4d835251e573a6be6f&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;hr/&gt;&lt;/section&gt;&lt;/h1&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;02. &lt;span&gt;Chrome插件英雄榜&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;这个开源项目是@谷粒为优秀的 Chrome 插件写一本中文说明书,，让 Chrome 插件英雄们造福人类。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个仓库搜集了 100 多款优秀的 Chrome 插件，并提供了下载方式和使用说明。&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;section&gt;&lt;span&gt;地址：http&lt;span&gt;s:&lt;/span&gt;//github.&lt;span&gt;com&lt;/span&gt;/zhaoolee/ChromeAppHeroes&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.544137022397892&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxwsYLW1ewJkNmL9mSoJulbYibfLCDfrhVGE4emnK5pf0tN41bDDbPLpQ3KqQBQEicFQzlOr36pHbdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1518&quot;/&gt;&lt;/section&gt;&lt;h1 data-key=&quot;fd245a0b20464c4d835251e573a6be6f&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;hr/&gt;&lt;/section&gt;&lt;/h1&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;03. Awesome Mac OS&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个仓库精选了 macOS 上实用、精美的工具和软件&lt;span&gt;。包括通讯工具、数据恢复工具、邮箱、游戏、电子书、新闻类软件、文件共享软件、视频软件、开发者等等。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5785398230088495&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxwsYLW1ewJkNmL9mSoJulb90uquR3IkBJFKjqAqUcFh8MtMnywry7bzjWvcrnK5C8kCElN7Qsa2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1808&quot;/&gt;&lt;/section&gt;&lt;h1 data-key=&quot;fd245a0b20464c4d835251e573a6be6f&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;hr/&gt;&lt;/section&gt;&lt;/h1&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;04. 下载软件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一个靠谱的下载软件：WebTorrent 支持 macOS、Windows 及 Linux 系统，迅雷有的功能他都有，迅雷没有的他也有，自带边下边播功能。&lt;span&gt;同时支持 BitTorrent 和 WebTorrent 两种协议，在下载 BT 文件时能够拥有更高的连接成功率。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;section&gt;&lt;span&gt;地址：http&lt;span&gt;s:&lt;/span&gt;//github.&lt;span&gt;com&lt;/span&gt;/webtorrent/webtorrent&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.43472222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxwsYLW1ewJkNmL9mSoJulbQtz7IMX51iaLTd6SmzyMsqFjGTeS0rCNvmITibsiaLSNK1PKxEaovvXew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1440&quot;/&gt;&lt;/section&gt;&lt;h1 data-key=&quot;fd245a0b20464c4d835251e573a6be6f&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;hr/&gt;&lt;/section&gt;&lt;/h1&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;05. 开源的思维导图&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这是一个开源的思维导图工具，桌面版脑图是基于百度脑图的本地化版本，帮助你在没联网环境的情况下，依然可以使用脑图工具。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;包含百度脑图的基本功能&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;本地 km 文件的操作&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;支持拖拽打开 km 文件&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;支持关联打开 km 文件&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;支持自动保存功能&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;提供 &lt;/span&gt;&lt;span&gt;百度脑图 文件的下载方式&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;提供 ProcessOn 思维导图的&lt;/span&gt;&lt;span&gt;下载方式&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;查看历史版本&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;section&gt;&lt;span&gt;地址：http&lt;span&gt;s:&lt;/span&gt;//github.&lt;span&gt;com&lt;/span&gt;/NaoTu/DesktopNaotu&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9099876695437731&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxwsYLW1ewJkNmL9mSoJulblx1X4ZxnhNDgdBYbEKoEd7xehPibhrWO6NWwwI6Gc6tjgbuaZ0RJWibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;811&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1 data-key=&quot;fd245a0b20464c4d835251e573a6be6f&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;hr/&gt;&lt;/section&gt;&lt;/h1&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;06. Audacity&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Audacity 是一&lt;/span&gt;&lt;span&gt;款易于使用的多轨音频编辑器和录音机，有着傻瓜式的操作界面和专业的音频处理效果。适用于 Windows、Mac OS X、GNU/Linux 和其他操作系统。 &lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;section&gt;&lt;span&gt;地址：http&lt;span&gt;s:&lt;/span&gt;//github.&lt;span&gt;com&lt;/span&gt;/audacity/audacity&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;最后，防止找不到本篇文章，可以收藏点赞，方便翻阅查找。&lt;/span&gt;&lt;span&gt;欢迎关注公众号 逛逛GitHub（ggGithub）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;hr/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;1. &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247498662&amp;amp;idx=1&amp;amp;sn=0087c4f3b79ba3420e917e9b42d45eda&amp;amp;chksm=f9a2286fced5a1794eb9a73d0be7c2e16eaceabf3a0420647c40cb4202bd116d9a15dd57c008&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;GitHub 上有什么好玩的项目？&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;2. &lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247501147&amp;amp;idx=1&amp;amp;sn=7d645733a5baaafebffc3491a45791b5&amp;amp;chksm=f9a21692ced59f84166b56683be9fef3d06c42deebecf99271b4b1d3dadacbb008700c02fdef&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;6 月份最火的 10 个 GitHub 项目&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;3. &lt;/span&gt;&lt;/em&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247500031&amp;amp;idx=1&amp;amp;sn=b4349fc85264c255bf9a22e1f25b035a&amp;amp;chksm=f9a21336ced59a20518444a3e2bddb584f6d02266e831546ee5c00935d01d5bd61ed86ab606f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;基于 Spring Boot 的百度云高仿项目&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;4. &lt;/span&gt;&lt;/em&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247498464&amp;amp;idx=1&amp;amp;sn=4f85123d6ca67578ca7bad8f7dc71453&amp;amp;chksm=f9a22929ced5a03ffded2c41fd257d3eb96be02195de3ca66a083177bf5f73e2f418728f7f06&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;盘点百度 4 个牛逼哄哄的开源项目&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;172&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;172&quot; data-ratio=&quot;1.005449591280654&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxW7LMX2Iz5DfjRIbFTS7UROhxibBmicicT0HpjIh1yniaJJibSnLFuicMHRx5NEdiaOh2OOACfr6MvR38ibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;734&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b7edecca5dceffe6c4a1ed67b7a6b0b9</guid>
<title>一张图彻底搞懂 Prometheus 服务发现机制</title>
<link>https://toutiao.io/k/eho8idh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;服务发现机制&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;概述&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Prometheus是基于Pull模式抓取监控数据，首先要能够发现需要监控的目标对象target，特别&lt;code&gt;Prometheus&lt;/code&gt;最开始设计是一个面向云原生应用程序的，云原生、容器场景下按需的资源使用方式对于监控系统而言就意味着没有了一个固定的监控目标，所有的监控对象(基础设施、应用、服务)都在动态的变化。而对于Prometheus而言其解决方案就是引入一个中间的代理人（服务注册中心），这个代理人掌握着当前所有监控目标的访问信息，Prometheus只需要向这个代理人询问有哪些监控目标控即可， 这种模式被称为服务发现(service discovery)。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7131782945736435&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1onPQNJibtx9pJH80TaykSunhOeia6oMfwWvCETx16Etpj46ibiaaYSYsUia64sygaib2ksj2vTLSeNnvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;516&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图，SD模块专门负责去发现需要监控的target信息，Prometheus去从SD模块订阅该信息，有target信息时会推送给Prometheus，然后Prometheus拿到target信息后通过pull http协议去拉取监控指标数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Prometheus支持的服务发现协议是非常丰富的，目前已支持多达二十多种服务发现协议：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;azure_sd_config&amp;gt;&lt;br/&gt;&amp;lt;consul_sd_config&amp;gt;&lt;br/&gt;&amp;lt;digitalocean_sd_config&amp;gt;&lt;br/&gt;&amp;lt;docker_sd_config&amp;gt;&lt;br/&gt;&amp;lt;dockerswarm_sd_config&amp;gt;&lt;br/&gt;&amp;lt;dns_sd_config&amp;gt;&lt;br/&gt;&amp;lt;ec2_sd_config&amp;gt;&lt;br/&gt;&amp;lt;openstack_sd_config&amp;gt;&lt;br/&gt;&amp;lt;file_sd_config&amp;gt;&lt;br/&gt;&amp;lt;gce_sd_config&amp;gt;&lt;br/&gt;&amp;lt;hetzner_sd_config&amp;gt;&lt;br/&gt;&amp;lt;http_sd_config&amp;gt;&lt;br/&gt;&amp;lt;kubernetes_sd_config&amp;gt;&lt;br/&gt;&amp;lt;kuma_sd_config&amp;gt;&lt;br/&gt;&amp;lt;lightsail_sd_config&amp;gt;&lt;br/&gt;&amp;lt;linode_sd_config&amp;gt;&lt;br/&gt;&amp;lt;marathon_sd_config&amp;gt;&lt;br/&gt;&amp;lt;nerve_sd_config&amp;gt;&lt;br/&gt;&amp;lt;serverset_sd_config&amp;gt;&lt;br/&gt;&amp;lt;triton_sd_config&amp;gt;&lt;br/&gt;&amp;lt;eureka_sd_config&amp;gt;&lt;br/&gt;&amp;lt;scaleway_sd_config&amp;gt;&lt;br/&gt;&amp;lt;static_config&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;服务发现原理图&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上图描述Prometheus服务发现协议比较笼统，Prometheus服务发现实现原理大致如下图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.584375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1onPQNJibtx9pJH80TaykSuRtMz5TZIY9gnkFnOaEy2rIHWXmibYZUG9iam852BzJBERFjLDDjIr3ZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图所述，Prometheus服务发现机制大致涉及到三个部分：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、配置处理模块解析的&lt;code&gt;prometheus.yml&lt;/code&gt;配置中&lt;code&gt;scrape_configs&lt;/code&gt;部分，将配置的&lt;code&gt;job&lt;/code&gt;生成一个个&lt;code&gt;Discoverer&lt;/code&gt;服务，不同的服务发现协议都会有各自的&lt;code&gt;Discoverer&lt;/code&gt;实现方式，它们根据实现逻辑去发现&lt;code&gt;target&lt;/code&gt;，并将其放入到&lt;code&gt;targets&lt;/code&gt;容器中；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、&lt;code&gt;discoveryManager&lt;/code&gt;组件内部有个定时周期触发任务，每5秒检查&lt;code&gt;targets&lt;/code&gt;容器，如果有变更则将&lt;code&gt;targets&lt;/code&gt;容器中&lt;code&gt;target&lt;/code&gt;信息放入到&lt;code&gt;syncCh&lt;/code&gt;通道中；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、&lt;code&gt;scrape&lt;/code&gt;组件会监听&lt;code&gt;syncCh&lt;/code&gt;通道，这样需要监控的&lt;code&gt;targets&lt;/code&gt;信息就传递给&lt;code&gt;scrape&lt;/code&gt;组件，然后&lt;code&gt;reload&lt;/code&gt;将&lt;code&gt;target&lt;/code&gt;纳入监控开始抓取监控指标。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置处理部分会根据&lt;code&gt;scrape_configs&lt;/code&gt;部分配置的不同协议类型生成不同&lt;code&gt;Discoverer&lt;/code&gt;，然后根据它们内部不同的实现逻辑去发现&lt;code&gt;target&lt;/code&gt;，&lt;code&gt;discoveryManager&lt;/code&gt;组件则相当于一个搬运工，&lt;code&gt;scrape&lt;/code&gt;组件则是一个使用者，这两个组件都无感知服务发现协议的差异。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面分别来分析下配置处理、&lt;code&gt;discoveryManager&lt;/code&gt;组件和&lt;code&gt;scrape&lt;/code&gt;组件在服务发现方面的具体实现流程。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;配置处理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上节分析&lt;code&gt;Prometheus&lt;/code&gt;启动流程，有个&lt;code&gt;配置加载&lt;/code&gt;组件通过&lt;code&gt;reloadConfig&lt;/code&gt;加载解析&lt;code&gt;prometheus&lt;/code&gt;配置文件后，在&lt;code&gt;reloader&lt;/code&gt;中循环调用各个组件的&lt;code&gt;ApplyConfig(cfg map[string]Configs)&lt;/code&gt;方法处理配置，这其中就包括&lt;code&gt;discovery/manager.go&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3644148430066603&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1onPQNJibtx9pJH80TaykSuVEPIia6jLFBKUCyfQyASmiaXPxSzLTvBzLGJah8ibLyDBZYNynPQmUObQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1051&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;reloader&lt;/code&gt;中定义如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt; name: &lt;span&gt;&quot;scrape_sd&quot;&lt;/span&gt;,&lt;br/&gt; &lt;span&gt;//从配置文件中提取Section:scrape_configs&lt;/span&gt;&lt;br/&gt; reloader: &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(cfg *config.Config)&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  c := &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]discovery.Configs)&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; _, v := &lt;span&gt;range&lt;/span&gt; cfg.ScrapeConfigs {&lt;br/&gt;   c[v.JobName] = v.ServiceDiscoveryConfigs&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; discoveryManagerScrape.ApplyConfig(c)&lt;br/&gt; },&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那下面就从&lt;code&gt;discovery/manager.go&lt;/code&gt;中定义的&lt;code&gt;ApplyConfig()&lt;/code&gt;方法分析。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、根据配置注册provider：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; name, scfg := &lt;span&gt;range&lt;/span&gt; cfg {&lt;br/&gt;    &lt;span&gt;//根据配置注册provider&lt;/span&gt;&lt;br/&gt; failedCount += m.registerProviders(scfg, name)&lt;br/&gt; discoveredTargets.WithLabelValues(m.name, name).Set(&lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中关键的是&lt;code&gt;m.registerProviders(scfg, name)&lt;/code&gt;，继续跟踪：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;d, err := cfg.NewDiscoverer(DiscovererOptions{&lt;br/&gt; Logger: log.With(m.logger, &lt;span&gt;&quot;discovery&quot;&lt;/span&gt;, typ),&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、然后将所有注册到&lt;code&gt;m.providers&lt;/code&gt;数组中的&lt;code&gt;provider&lt;/code&gt;进行启动：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; _, prov := &lt;span&gt;range&lt;/span&gt; m.providers {&lt;br/&gt; &lt;span&gt;// 启动服务发现实例&lt;/span&gt;&lt;br/&gt; m.startProvider(m.ctx, prov)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跟踪到&lt;code&gt;m.startProvider(m.ctx, prov)&lt;/code&gt;方法中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;updates := &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;chan&lt;/span&gt; []*targetgroup.Group)&lt;br/&gt;&lt;span&gt;// 执行run  每个服务发现都有自己的run方法。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;go&lt;/span&gt; p.d.Run(ctx, updates)&lt;br/&gt;&lt;span&gt;// 更新发现的服务&lt;/span&gt;&lt;br/&gt;&lt;span&gt;go&lt;/span&gt; m.updater(ctx, p, updates)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发现这里主要是启动两个协程，它们之间使用updates通道类型变量进行通信。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结来说(见下图)：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、每个&lt;code&gt;Config&lt;/code&gt;都会对应创建一个&lt;code&gt;Discoverer&lt;/code&gt;实例，并被封装到&lt;code&gt;provider&lt;/code&gt;存储在&lt;code&gt;m.providers&lt;/code&gt;数组中；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、然后遍历&lt;code&gt;providers&lt;/code&gt;数组进行启动操作，启动操作启动了两个协程：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;a、&lt;code&gt;Discoverer.Run&lt;/code&gt;协程逻辑中主要根据发现协议发现&lt;code&gt;targets&lt;/code&gt;；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;b、然后通过通道传递给&lt;code&gt;discovery/Manager.updater&lt;/code&gt;协程中，将其存放到&lt;code&gt;m.targets&lt;/code&gt;集合map中；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1onPQNJibtx9pJH80TaykSuS6Y65fCkWAJzpSibicicE6RoccTsPeBQduLYad9VFKegyHgSoq5VYpia5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置处理这里还有个比较关键的：&lt;code&gt;Discoverer&lt;/code&gt;会根据不同协议实现发现&lt;code&gt;target&lt;/code&gt;，它是如何实现的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我们来看下&lt;code&gt;Discoverer&lt;/code&gt;实例创建：&lt;code&gt;d, err := cfg.NewDiscoverer()&lt;/code&gt;，它是一个接口定义：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Config &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; Name() &lt;span&gt;string&lt;/span&gt;&lt;br/&gt; NewDiscoverer(DiscovererOptions) (Discoverer, error)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每种服务发现协议都在自己的&lt;code&gt;SDConfig&lt;/code&gt;中实现了各自的&lt;code&gt;NewDiscoverver()&lt;/code&gt;方法，这样就可以将服务发现逻辑封装到&lt;code&gt;Discovererver&lt;/code&gt;实现中：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.60234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1onPQNJibtx9pJH80TaykSuZekSZuBkLds4FrghFeeibAWKcvutcSWG0ehqJiaau1GNFeFDKWXwiaYOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;discoveryManager组件&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上节《Prometheus启动流程》一节分析过会启动&lt;code&gt;discoveryManagerScrape&lt;/code&gt;组件通过通道将&lt;code&gt;targets&lt;/code&gt;数据信息传递给&lt;code&gt;scrapeManager&lt;/code&gt;组件(见下图)：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.26171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1onPQNJibtx9pJH80TaykSuu9y5SaKxKoNxVHQ3FAXPqvlxsDDgUn0A54lic0X9YAtgCLHibEkfas4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、&lt;code&gt;discoveryManagerScrape&lt;/code&gt;组件启动入口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;g.Add(&lt;br/&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  err := discoveryManagerScrape.Run()&lt;br/&gt;  level.Info(logger).Log(&lt;span&gt;&quot;msg&quot;&lt;/span&gt;, &lt;span&gt;&quot;Scrape discovery manager stopped&quot;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; err&lt;br/&gt; },&lt;br/&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  level.Info(logger).Log(&lt;span&gt;&quot;msg&quot;&lt;/span&gt;, &lt;span&gt;&quot;Stopping scrape discovery manager...&quot;&lt;/span&gt;)&lt;br/&gt;  cancelScrape()&lt;br/&gt; },&lt;br/&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、一直跟踪会进入到&lt;code&gt;sender()&lt;/code&gt;方法中，配置处理模块说过，有个协程会将&lt;code&gt;Discoverer&lt;/code&gt;组件发现的&lt;code&gt;targets&lt;/code&gt;信息存储到&lt;code&gt;m.targets&lt;/code&gt;集合&lt;code&gt;map&lt;/code&gt;中，然后给&lt;code&gt;m.triggerSend&lt;/code&gt;发送信号，&lt;code&gt;sender&lt;/code&gt;方法中就是启动定时周期触发器监听&lt;code&gt;m.triggerSend&lt;/code&gt;信号：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(m *Manager)&lt;/span&gt; &lt;span&gt;sender&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// 周期性定时器定时触发任务，这里是5s触发一次&lt;/span&gt;&lt;br/&gt; ticker := time.NewTicker(m.updatert)&lt;br/&gt; &lt;span&gt;defer&lt;/span&gt; ticker.Stop()&lt;br/&gt;&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;case&lt;/span&gt; &amp;lt;-m.ctx.Done():&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;case&lt;/span&gt; &amp;lt;-ticker.C: &lt;span&gt;// Some discoverers send updates too often so we throttle these with the ticker.&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &amp;lt;-m.triggerSend:&lt;br/&gt;    sentUpdates.WithLabelValues(m.name).Inc()&lt;br/&gt;    &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;case&lt;/span&gt; m.syncCh &amp;lt;- m.allGroups():&lt;br/&gt;    &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;     delayedUpdates.WithLabelValues(m.name).Inc()&lt;br/&gt;     level.Debug(m.logger).Log(&lt;span&gt;&quot;msg&quot;&lt;/span&gt;, &lt;span&gt;&quot;Discovery receiver&#x27;s channel was full so will retry the next cycle&quot;&lt;/span&gt;)&lt;br/&gt;     &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;     &lt;span&gt;case&lt;/span&gt; m.triggerSend &amp;lt;- &lt;span&gt;struct&lt;/span&gt;{}{}:&lt;br/&gt;     &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;     }&lt;br/&gt;    }&lt;br/&gt;   &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;监听到&lt;code&gt;m.triggerSend&lt;/code&gt;信号，则执行&lt;code&gt;m.syncCh &amp;lt;- m.allGroups()&lt;/code&gt;，我们来看下&lt;code&gt;m.allGroups()&lt;/code&gt;干了什么？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(m *Manager)&lt;/span&gt; &lt;span&gt;allGroups&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;][]*&lt;span&gt;targetgroup&lt;/span&gt;.&lt;span&gt;Group&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; m.mtx.RLock()&lt;br/&gt; &lt;span&gt;defer&lt;/span&gt; m.mtx.RUnlock()&lt;br/&gt;&lt;br/&gt; tSets := &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;][]*targetgroup.Group{}&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; pkey, tsets := &lt;span&gt;range&lt;/span&gt; m.targets {&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; n &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; _, tg := &lt;span&gt;range&lt;/span&gt; tsets {&lt;br/&gt;   &lt;span&gt;// Even if the target group &#x27;tg&#x27; is empty we still need to send it to the &#x27;Scrape manager&#x27;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;// to signal that it needs to stop all scrape loops for this target set.&lt;/span&gt;&lt;br/&gt;   tSets[pkey.setName] = &lt;span&gt;append&lt;/span&gt;(tSets[pkey.setName], tg)&lt;br/&gt;   n += &lt;span&gt;len&lt;/span&gt;(tg.Targets)&lt;br/&gt;  }&lt;br/&gt;  discoveredTargets.WithLabelValues(m.name, pkey.setName).Set(&lt;span&gt;float64&lt;/span&gt;(n))&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; tSets&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实就是将&lt;code&gt;m.targets&lt;/code&gt;数据发送到&lt;code&gt;m.syncCh&lt;/code&gt;通道上，所以，&lt;code&gt;discoveryManager&lt;/code&gt;组件比较简单，就是一个搬运工。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;scrape组件&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;scrapeManager&lt;/code&gt;组件启动：&lt;code&gt;scrapeManager.Run(discoveryManagerScrape.SyncCh())&lt;/code&gt;，通道syncCh是被scrapeManager组件持有的，跟踪进入Run方法中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(m *Manager)&lt;/span&gt; &lt;span&gt;Run&lt;/span&gt;&lt;span&gt;(tsets &amp;lt;-&lt;span&gt;chan&lt;/span&gt; &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;][]*targetgroup.Group)&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;go&lt;/span&gt; m.reloader()&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;//通过管道获取被监控的服务(targets)&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;case&lt;/span&gt; ts := &amp;lt;-tsets:&lt;br/&gt;   m.updateTsets(ts)&lt;br/&gt;&lt;br/&gt;   &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;// 关闭 Scrape Manager 处理信号&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;//若从服务发现 (serviceDiscover)有服务(targets)变动，则给管道triggerReload传值，并触发reloader()方法更新服务&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; m.triggerReload &amp;lt;- &lt;span&gt;struct&lt;/span&gt;{}{}:&lt;br/&gt;   &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;   }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;case&lt;/span&gt; &amp;lt;-m.graceShut:&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过&lt;code&gt;case ts := &amp;lt;-tsets&lt;/code&gt;获取到syncCh通道上传递过来的targets数据，然后调用&lt;code&gt;m.updateTsets(ts)&lt;/code&gt;将&lt;code&gt;targets&lt;/code&gt;数据存储到&lt;code&gt;scrapeManager.targetSets&lt;/code&gt;中，然后给&lt;code&gt;m.triggerReload&lt;/code&gt;发送信号。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个方法中&lt;code&gt;go m.reloader()&lt;/code&gt;启动了一个协程，进入&lt;code&gt;reloader()&lt;/code&gt;方法中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(m *Manager)&lt;/span&gt; &lt;span&gt;reloader&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;//定时器5s&lt;/span&gt;&lt;br/&gt; ticker := time.NewTicker(&lt;span&gt;5&lt;/span&gt; * time.Second)&lt;br/&gt; &lt;span&gt;defer&lt;/span&gt; ticker.Stop()&lt;br/&gt;&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;case&lt;/span&gt; &amp;lt;-m.graceShut:&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;// 若服务发现(serviceDiscovery)有服务(targets)变动，就会向管道triggerReload写入值，定时器每5s判断一次triggerReload管道是否有值，若有值，则触发reload方法&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;case&lt;/span&gt; &amp;lt;-ticker.C:&lt;br/&gt;   &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &amp;lt;-m.triggerReload:&lt;br/&gt;    m.reload()&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &amp;lt;-m.graceShut:&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也是通过定时周期触发任务监听&lt;code&gt;m.triggerReload&lt;/code&gt;信号，执行&lt;code&gt;m.reload()&lt;/code&gt;将&lt;code&gt;targets&lt;/code&gt;加载进来。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面分析了服务发现运行机制，可以看下面图梳理下前面流程逻辑：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.48125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/O2TDJPu7cb1onPQNJibtx9pJH80TaykSugkolIWYpLhHO5zSFhJzibsz7UlW3pANPjia84tVEXs0ict1jnYUJaBrwA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a7644449300278bb8d46a7be01f96db9</guid>
<title>Go 1.17 泛型尝鲜</title>
<link>https://toutiao.io/k/w5e14zp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section class=&quot;article-content&quot;&gt;
&lt;p&gt;今天，Go的1.17版本终于正式发布，除了带来各种优化和新功能外，1.17正式在程序中提供了尝鲜的泛型支持，这一功能也是为1.18版本泛型正式实装做铺垫。意味着在6个月后，我们就可以正式使用泛型开发了。那在Go 1.18正式实装之前，我们在1.17版本中先尝鲜一下泛型的支持吧。&lt;/p&gt;
&lt;h2 id=&quot;泛型有什么作用&quot;&gt;泛型有什么作用？&lt;/h2&gt;
&lt;p&gt;在使用Go没有泛型之前我们怎么实现针对多类型的逻辑实现的呢？有很多方法，比如说使用&lt;code&gt;interface{}&lt;/code&gt;作为变量类型参数，在内部通过类型判断进入对应的处理逻辑；将类型转化为特定表现的鸭子类型，通过接口定义的方法实现逻辑整合；还有人专门编写了Go的&lt;a class=&quot;link&quot; href=&quot;https://twitter.com/yogthos/status/883058510275149826&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;函数代码生成工具&lt;/a&gt;，通过批量生成不同类型的相同实现函数代替手工实现等等。这些方法多多少少存在一些问题：使用了&lt;code&gt;interface{}&lt;/code&gt;作为参数意味着放弃了编译时检查，作为强类型语言的一个优势就被抹掉了。同样，无论使用代码生成还是手工书写，一旦出现问题，意味着这些方法都需要重复生成或者进行批量修改，工作量反而变得更多了。&lt;/p&gt;
&lt;p&gt;在Go中引入泛型会给程序开发带来很多好处：通过泛型，可以针对多种类型编写一次代码，大大节省了编码时间。你可以充分应用编译器的编译检查，保证程序变量类型的可靠性。借助泛型，你可以减少代码的重复度，也不会出现一处出现问题需要修改多处地方的尴尬问题。这也让很多测试工作变得更简单，借助类型安全，你甚至可以少考虑很多的边缘情况。&lt;/p&gt;
&lt;p&gt;Go语言官方有详细的泛型提案文档可以在&lt;a class=&quot;link&quot; href=&quot;https://go.googlesource.com/proposal/+/refs/heads/master/design/15292-generics.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;和&lt;a class=&quot;link&quot; href=&quot;https://go.googlesource.com/proposal/+/refs/heads/master/design/15292/2013-12-type-params.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;查看详情。&lt;/p&gt;
&lt;h2 id=&quot;如何使用泛型&quot;&gt;如何使用泛型&lt;/h2&gt;
&lt;p&gt;前面理论我们仅仅只做介绍，这次尝鲜还是以实践为主。让我们先从一个小例子开始。&lt;/p&gt;
&lt;h3 id=&quot;从简单的例子开始&quot;&gt;从简单的例子开始&lt;/h3&gt;
&lt;p&gt;让我们先从一个最简单的例子开始：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt; (
    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;
)

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Addable&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; {
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;, &lt;span&gt;int8&lt;/span&gt;, &lt;span&gt;int16&lt;/span&gt;, &lt;span&gt;int32&lt;/span&gt;, &lt;span&gt;int64&lt;/span&gt;,
&lt;span&gt;uint&lt;/span&gt;, &lt;span&gt;uint8&lt;/span&gt;, &lt;span&gt;uint16&lt;/span&gt;, &lt;span&gt;uint32&lt;/span&gt;, &lt;span&gt;uint64&lt;/span&gt;, &lt;span&gt;uintptr&lt;/span&gt;,
&lt;span&gt;float32&lt;/span&gt;, &lt;span&gt;float64&lt;/span&gt;, &lt;span&gt;complex64&lt;/span&gt;, &lt;span&gt;complex128&lt;/span&gt;,
&lt;span&gt;string&lt;/span&gt;
}

&lt;span&gt;func&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;Addable&lt;/span&gt;](&lt;span&gt;a&lt;/span&gt;, &lt;span&gt;b&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;b&lt;/span&gt;
}

&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
    &lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;add&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;))
    &lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;add&lt;/span&gt;(&lt;span&gt;&quot;1&quot;&lt;/span&gt;, &lt;span&gt;&quot;2&quot;&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个函数可以实现任何需要使用&lt;code&gt;+&lt;/code&gt;符号进行运算的类型，我们通过定义&lt;code&gt;Addable&lt;/code&gt;类型，枚举了所有可能可以使用&lt;code&gt;add&lt;/code&gt;方法的所有的类型。比如我们在&lt;code&gt;main&lt;/code&gt;函数中就使用了&lt;code&gt;int&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;两种不同类型。&lt;/p&gt;
&lt;p&gt;但是如果这时我们使用简单的&lt;code&gt;go run&lt;/code&gt;命令运行，会发现提示语法错误：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ go version
go version go1.17 darwin/arm64
$ go run ~/main.go
# command-line-arguments
../main.go:8:2: syntax error: unexpected type, expecting method or interface name
../main.go:15:6: missing function body
../main.go:15:9: syntax error: unexpected [, expecting (
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为在Go 1.17中，泛型并未默认开启，你需要定义&lt;code&gt;gcflags&lt;/code&gt;方式启用泛型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ go run -gcflags=-G=3 ~/main.go
3
12
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你觉得这种方式太过于复杂，每次都需要添加，也可以通过定义环境变量形式让每次都带此参数（不推荐，尤其是多版本环境时低版本Go中会报错）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ export GOFLAGS=&quot;-gcflags=-G=3&quot;
$ go run ~/main.go
3
12
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在Go中，泛型可以做什么更多更复杂的事情吗？当然可以。除了最基础的算法实现以外，我们可以通过后面的几个场景看一下泛型可用的场景。&lt;/p&gt;
&lt;h3 id=&quot;实现类型安全的map&quot;&gt;实现类型安全的Map&lt;/h3&gt;
&lt;p&gt;在现实开发过程中，我们往往需要对slice中数据的每个值进行单独的处理，比如说需要对其中数值转换为平方值，在泛型中，我们可以抽取部分重复逻辑作为map函数：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt; (
    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;
)

&lt;span&gt;func&lt;/span&gt; &lt;span&gt;mapFunc&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;, &lt;span&gt;M&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;](&lt;span&gt;a&lt;/span&gt; []&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;f&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;T&lt;/span&gt;) &lt;span&gt;M&lt;/span&gt;) []&lt;span&gt;M&lt;/span&gt; {
    &lt;span&gt;n&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; make([]&lt;span&gt;M&lt;/span&gt;, len(&lt;span&gt;a&lt;/span&gt;), cap(&lt;span&gt;a&lt;/span&gt;))
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;i&lt;/span&gt;, &lt;span&gt;e&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; {
        &lt;span&gt;n&lt;/span&gt;[&lt;span&gt;i&lt;/span&gt;] = &lt;span&gt;f&lt;/span&gt;(&lt;span&gt;e&lt;/span&gt;)
    }
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;n&lt;/span&gt;
}

&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
    &lt;span&gt;vi&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; []&lt;span&gt;int&lt;/span&gt;{&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;}
    &lt;span&gt;vs&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;mapFunc&lt;/span&gt;(&lt;span&gt;vi&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;v&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;) &lt;span&gt;int&lt;/span&gt; {
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;v&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;
    })
    &lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;vs&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;$ go run -gcflags=-G=3 main.go
[1 4 9 16 25 36]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这个例子中，我们定义了一个M类型，因此除了进行同样类型的转换外，也可以做不同类型的转换：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;-     vs := mapFunc(vi, func(v int) int {
&lt;/span&gt;&lt;span&gt;-        return v*v
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;+     vs := mapFunc(vi, func(v int) string {
&lt;/span&gt;&lt;span&gt;+        return &quot;&amp;lt;&quot;+fmt.Sprint(v)+&quot;&amp;gt;&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;$ go run -gcflags=-G=3 main.go
[&amp;lt;1&amp;gt; &amp;lt;2&amp;gt; &amp;lt;3&amp;gt; &amp;lt;4&amp;gt; &amp;lt;5&amp;gt; &amp;lt;6&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;实现类型安全的mapfilter&quot;&gt;实现类型安全的Map/Filter&lt;/h3&gt;
&lt;p&gt;除了操作数据以外，我们通常还需要对数据进行筛选。在前面的例子上，我们可以通过实现&lt;code&gt;filterFunc&lt;/code&gt;实现更好的通用逻辑：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt; (
&lt;span&gt;&quot;crypto/rand&quot;&lt;/span&gt;
&lt;span&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span&gt;&quot;math/big&quot;&lt;/span&gt;
&lt;span&gt;&quot;strings&quot;&lt;/span&gt;
)

&lt;span&gt;func&lt;/span&gt; &lt;span&gt;mapFunc&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;, &lt;span&gt;M&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;](&lt;span&gt;a&lt;/span&gt; []&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;f&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;T&lt;/span&gt;) &lt;span&gt;M&lt;/span&gt;) []&lt;span&gt;M&lt;/span&gt; {
    &lt;span&gt;n&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; make([]&lt;span&gt;M&lt;/span&gt;, len(&lt;span&gt;a&lt;/span&gt;), cap(&lt;span&gt;a&lt;/span&gt;))
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;i&lt;/span&gt;, &lt;span&gt;e&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; {
        &lt;span&gt;n&lt;/span&gt;[&lt;span&gt;i&lt;/span&gt;] = &lt;span&gt;f&lt;/span&gt;(&lt;span&gt;e&lt;/span&gt;)
    }
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;n&lt;/span&gt;
}


&lt;span&gt;func&lt;/span&gt; &lt;span&gt;filterFunc&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;](&lt;span&gt;a&lt;/span&gt; []&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;f&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;T&lt;/span&gt;) &lt;span&gt;bool&lt;/span&gt;) []&lt;span&gt;T&lt;/span&gt; {
    &lt;span&gt;var&lt;/span&gt; &lt;span&gt;n&lt;/span&gt; []&lt;span&gt;T&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;_&lt;/span&gt;, &lt;span&gt;e&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; {
        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;f&lt;/span&gt;(&lt;span&gt;e&lt;/span&gt;) {
            &lt;span&gt;n&lt;/span&gt; = append(&lt;span&gt;n&lt;/span&gt;, &lt;span&gt;e&lt;/span&gt;)
        }
    }
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;n&lt;/span&gt;
}


&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
    &lt;span&gt;vi&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;filterFunc&lt;/span&gt;(
&lt;span&gt;mapFunc&lt;/span&gt;([]&lt;span&gt;int&lt;/span&gt;{&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;},
&lt;span&gt;func&lt;/span&gt;(&lt;span&gt;v&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;) &lt;span&gt;int&lt;/span&gt; {
&lt;span&gt;return&lt;/span&gt; &lt;span&gt;v&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;
},
), 
&lt;span&gt;func&lt;/span&gt;(&lt;span&gt;v&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;) &lt;span&gt;bool&lt;/span&gt; {
&lt;span&gt;return&lt;/span&gt; &lt;span&gt;v&lt;/span&gt; &amp;lt; &lt;span&gt;40&lt;/span&gt;
})
    &lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;vi&lt;/span&gt;)

&lt;span&gt;vs&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;filterFunc&lt;/span&gt;(
&lt;span&gt;mapFunc&lt;/span&gt;([]&lt;span&gt;string&lt;/span&gt;{&lt;span&gt;&quot;a&quot;&lt;/span&gt;, &lt;span&gt;&quot;b&quot;&lt;/span&gt;, &lt;span&gt;&quot;c&quot;&lt;/span&gt;, &lt;span&gt;&quot;d&quot;&lt;/span&gt;, &lt;span&gt;&quot;e&quot;&lt;/span&gt;},
&lt;span&gt;func&lt;/span&gt;(&lt;span&gt;v&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;) &lt;span&gt;string&lt;/span&gt; {
&lt;span&gt;// 需要使用crypto/rand增加随机性
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;n&lt;/span&gt;, &lt;span&gt;_&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt;&lt;span&gt;rand&lt;/span&gt;.&lt;span&gt;Int&lt;/span&gt;(&lt;span&gt;rand&lt;/span&gt;.&lt;span&gt;Reader&lt;/span&gt;, &lt;span&gt;big&lt;/span&gt;.&lt;span&gt;NewInt&lt;/span&gt;(&lt;span&gt;5&lt;/span&gt;))

&lt;span&gt;i&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; int(&lt;span&gt;n&lt;/span&gt;.&lt;span&gt;Int64&lt;/span&gt;())&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;return&lt;/span&gt; &lt;span&gt;strings&lt;/span&gt;.&lt;span&gt;Repeat&lt;/span&gt;(&lt;span&gt;v&lt;/span&gt;, &lt;span&gt;i&lt;/span&gt;)
},
), 
&lt;span&gt;func&lt;/span&gt;(&lt;span&gt;v&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;) &lt;span&gt;bool&lt;/span&gt; {
&lt;span&gt;return&lt;/span&gt; len(&lt;span&gt;v&lt;/span&gt;)&amp;gt;&lt;span&gt;3&lt;/span&gt;
})
    &lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;vs&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;$ go run -gcflags=-G=3 main.go
[1 4 9 16 25 36]
[aaaa dddd eeeee]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;实现类型可靠的worker-pool&quot;&gt;实现类型可靠的Worker Pool&lt;/h3&gt;
&lt;p&gt;除了上面这个例子，我们还可以通过泛型实现一个类型可靠的通用批量类型转换函数：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt; (
&lt;span&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span&gt;&quot;strconv&quot;&lt;/span&gt;
&lt;span&gt;&quot;sync&quot;&lt;/span&gt;
)

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;{}
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;T2&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;{}

&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ParallelMap&lt;/span&gt;(&lt;span&gt;parallelism&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;, &lt;span&gt;in&lt;/span&gt; []&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;f&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;T1&lt;/span&gt;) (&lt;span&gt;T2&lt;/span&gt;, &lt;span&gt;error&lt;/span&gt;)) ([]&lt;span&gt;T2&lt;/span&gt;, &lt;span&gt;error&lt;/span&gt;) {
&lt;span&gt;var&lt;/span&gt; &lt;span&gt;wg&lt;/span&gt; &lt;span&gt;sync&lt;/span&gt;.&lt;span&gt;WaitGroup&lt;/span&gt;
&lt;span&gt;defer&lt;/span&gt; &lt;span&gt;wg&lt;/span&gt;.&lt;span&gt;Wait&lt;/span&gt;()

&lt;span&gt;inc&lt;/span&gt;, &lt;span&gt;outc&lt;/span&gt;, &lt;span&gt;errc&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; make(&lt;span&gt;chan&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;), make(&lt;span&gt;chan&lt;/span&gt; &lt;span&gt;T2&lt;/span&gt;), make(&lt;span&gt;chan&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;)

&lt;span&gt;donec&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; make(&lt;span&gt;chan&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;{})
&lt;span&gt;defer&lt;/span&gt; close(&lt;span&gt;donec&lt;/span&gt;)

&lt;span&gt;wg&lt;/span&gt;.&lt;span&gt;Add&lt;/span&gt;(&lt;span&gt;parallelism&lt;/span&gt;)
&lt;span&gt;for&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;i&lt;/span&gt; &amp;lt; &lt;span&gt;parallelism&lt;/span&gt;; &lt;span&gt;i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt; {
&lt;span&gt;go&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;() {
&lt;span&gt;defer&lt;/span&gt; &lt;span&gt;wg&lt;/span&gt;.&lt;span&gt;Done&lt;/span&gt;()
&lt;span&gt;for&lt;/span&gt; &lt;span&gt;x&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; &lt;span&gt;inc&lt;/span&gt; {
&lt;span&gt;y&lt;/span&gt;, &lt;span&gt;err&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;f&lt;/span&gt;(&lt;span&gt;x&lt;/span&gt;)
&lt;span&gt;if&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; {
&lt;span&gt;select&lt;/span&gt; {
&lt;span&gt;case&lt;/span&gt; &lt;span&gt;errc&lt;/span&gt; &lt;span&gt;&amp;lt;-&lt;/span&gt; &lt;span&gt;err&lt;/span&gt;:
&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&amp;lt;-&lt;/span&gt;&lt;span&gt;donec&lt;/span&gt;:
}
&lt;span&gt;return&lt;/span&gt;
}
&lt;span&gt;select&lt;/span&gt; {
&lt;span&gt;case&lt;/span&gt; &lt;span&gt;outc&lt;/span&gt; &lt;span&gt;&amp;lt;-&lt;/span&gt; &lt;span&gt;y&lt;/span&gt;:
&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&amp;lt;-&lt;/span&gt;&lt;span&gt;donec&lt;/span&gt;:
&lt;span&gt;return&lt;/span&gt;
}
}
&lt;span&gt;select&lt;/span&gt; {
&lt;span&gt;case&lt;/span&gt; &lt;span&gt;errc&lt;/span&gt; &lt;span&gt;&amp;lt;-&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;:
&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&amp;lt;-&lt;/span&gt;&lt;span&gt;donec&lt;/span&gt;:
}
}()
}

&lt;span&gt;go&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;() {
&lt;span&gt;for&lt;/span&gt; &lt;span&gt;_&lt;/span&gt;, &lt;span&gt;x&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; {
&lt;span&gt;inc&lt;/span&gt; &lt;span&gt;&amp;lt;-&lt;/span&gt; &lt;span&gt;x&lt;/span&gt;
}
close(&lt;span&gt;inc&lt;/span&gt;)
}()

&lt;span&gt;out&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; make([]&lt;span&gt;T2&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, len(&lt;span&gt;in&lt;/span&gt;))
&lt;span&gt;for&lt;/span&gt; &lt;span&gt;rem&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;parallelism&lt;/span&gt;; &lt;span&gt;rem&lt;/span&gt; &amp;gt; &lt;span&gt;0&lt;/span&gt;; {
&lt;span&gt;select&lt;/span&gt; {
&lt;span&gt;case&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;&amp;lt;-&lt;/span&gt;&lt;span&gt;errc&lt;/span&gt;:
&lt;span&gt;if&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; {
&lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, &lt;span&gt;err&lt;/span&gt;
}
&lt;span&gt;rem&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;
&lt;span&gt;case&lt;/span&gt; &lt;span&gt;y&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;&amp;lt;-&lt;/span&gt;&lt;span&gt;outc&lt;/span&gt;:
&lt;span&gt;out&lt;/span&gt; = append(&lt;span&gt;out&lt;/span&gt;, &lt;span&gt;y&lt;/span&gt;)
}
}
&lt;span&gt;return&lt;/span&gt; &lt;span&gt;out&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;
}

&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
&lt;span&gt;in&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; []&lt;span&gt;T1&lt;/span&gt;{&lt;span&gt;&quot;1&quot;&lt;/span&gt;, &lt;span&gt;&quot;2&quot;&lt;/span&gt;, &lt;span&gt;&quot;3&quot;&lt;/span&gt;, &lt;span&gt;&quot;4&quot;&lt;/span&gt;, &lt;span&gt;&quot;5&quot;&lt;/span&gt;}
&lt;span&gt;out&lt;/span&gt;, &lt;span&gt;err&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;ParallelMap&lt;/span&gt;(&lt;span&gt;4&lt;/span&gt;, &lt;span&gt;in&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;x&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;) (&lt;span&gt;T2&lt;/span&gt;, &lt;span&gt;error&lt;/span&gt;) {
&lt;span&gt;return&lt;/span&gt; &lt;span&gt;strconv&lt;/span&gt;.&lt;span&gt;Atoi&lt;/span&gt;(&lt;span&gt;x&lt;/span&gt;.(&lt;span&gt;string&lt;/span&gt;))
})
&lt;span&gt;if&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; {
&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;&quot;error: &quot;&lt;/span&gt;, &lt;span&gt;err&lt;/span&gt;)
&lt;span&gt;return&lt;/span&gt;
}
&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;out&lt;/span&gt;)

&lt;span&gt;in2&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; []&lt;span&gt;T1&lt;/span&gt;{&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;}
&lt;span&gt;out2&lt;/span&gt;, &lt;span&gt;err&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;ParallelMap&lt;/span&gt;(&lt;span&gt;4&lt;/span&gt;, &lt;span&gt;in2&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;x&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;) (&lt;span&gt;T2&lt;/span&gt;, &lt;span&gt;error&lt;/span&gt;) {
&lt;span&gt;return&lt;/span&gt; &lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Sprintf&lt;/span&gt;(&lt;span&gt;&quot;&amp;lt;%d&amp;gt;&quot;&lt;/span&gt;, &lt;span&gt;x&lt;/span&gt;), &lt;span&gt;nil&lt;/span&gt;
})
&lt;span&gt;if&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; {
&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;&quot;error: &quot;&lt;/span&gt;, &lt;span&gt;err&lt;/span&gt;)
&lt;span&gt;return&lt;/span&gt;
}
&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;out2&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;$ go run -gcflags=-G=3 main.go
[3 5 2 4 1]
[&amp;lt;1&amp;gt; &amp;lt;4&amp;gt; &amp;lt;5&amp;gt; &amp;lt;3&amp;gt; &amp;lt;2&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;其他应用&quot;&gt;其他应用&lt;/h3&gt;
&lt;p&gt;我们可以预见在Go 1.18版本中，多个标准库会被新增或者扩展，包括：类型定义库&lt;a class=&quot;link&quot; href=&quot;https://github.com/golang/go/discussions/47319&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;constraints&lt;/code&gt;&lt;/a&gt;，通用slice操作库&lt;a class=&quot;link&quot; href=&quot;https://github.com/golang/go/discussions/47203&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;slices&lt;/code&gt;&lt;/a&gt;，通用类型安全map&lt;a class=&quot;link&quot; href=&quot;https://github.com/golang/go/discussions/47330&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;maps&lt;/code&gt;&lt;/a&gt;等等。因为这些会进入标准库，大家可以先自行实现试用，真正线上使用建议等待标准库添加内容即可。&lt;/p&gt;
&lt;h2 id=&quot;go泛型的实现原理&quot;&gt;Go泛型的实现原理&lt;/h2&gt;
&lt;p&gt;我们回归到最原始的例子快速看一下Go中是如何实现泛型的。为了方便分析，我们在所有&lt;code&gt;func&lt;/code&gt;上添加&lt;code&gt;go:noinline&lt;/code&gt;防止内联，然后编译程序进行分析。这里可能Go 1.17实现问题未能支持如&lt;code&gt;go tool&lt;/code&gt;或&lt;code&gt;go build -gcflags=all=-S&lt;/code&gt;之类的命令传递&lt;code&gt;-G=3&lt;/code&gt;参数，因此这里我们选择第三方的反汇编工具看一下具体的实现：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
&lt;a href=&quot;../../../2021/08/golang-117-generics/asm.png&quot; data-size=&quot;598x258&quot;&gt;&lt;img src=&quot;../../../2021/08/golang-117-generics/asm.png&quot; srcset=&quot;../../../2021/08/golang-117-generics/asm_hufeba331bc8c7a90eb05253426857297a_63728_480x0_resize_box_3.png 480w, ../../../2021/08/golang-117-generics/asm_hufeba331bc8c7a90eb05253426857297a_63728_1024x0_resize_box_3.png 1024w&quot; loading=&quot;lazy&quot; alt=&quot;ASM&quot;/&gt;
&lt;/a&gt;
&lt;figcaption&gt;ASM&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到目前Go会根据类型将泛型展开成对应类型函数，这样也会小小的增加编译时间和编译后文件大小。因为我测试使用Apple Silicon平台，考虑大家可能不熟悉相关汇编，具体执行逻辑不再具体展示。&lt;/p&gt;
&lt;h2 id=&quot;其他注意事项&quot;&gt;其他注意事项&lt;/h2&gt;
&lt;p&gt;目前Go的泛型仍在开发过程中，即便在1.17beta到正式版过程中，很多泛型的corner case也正在完善过程中，比如在之前测试中我发现某些代码在beta版本无法正确编译，但是在RC中已可以正确编译。目前的泛型实现未必代表1.18版本中是相同的实现细节，甚至可能在1.18中提供更多的功能。同时，&lt;strong&gt;目前1.17泛型类型是无法在package中导出的&lt;/strong&gt;，这导致在1.17版本中它的应用场景大大的受限。如果你仍有计划在某些场景中使用，我仍旧建议单元测试覆盖你使用的场景情况，防止出现版本迭代可能导致的问题。&lt;/p&gt;
&lt;/section&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c6b187b92af0471a51b05e0196fea1d0</guid>
<title>这些 Goland 技巧，学会开发效率翻倍</title>
<link>https://toutiao.io/k/y3x4yaj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hi, 大家好，我是 hhf。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMDY4ODg5MA==&amp;amp;mid=2247485006&amp;amp;idx=1&amp;amp;sn=4cda76543baaf3da932e59a0ac9107dd&amp;amp;chksm=9ae451dbad93d8cdfbbcee2d72300df5fb5f88da4e925589264d2005a16134ba5c87144f900b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《Goland 这些实操技巧，你可能还不会！》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《Goland 这些实操技巧，你可能还不会！》&lt;/a&gt;介绍了日常开发中一些比较好用的技巧。本篇文章继续介绍一些其他比较好用的技巧。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;自定义结构 tag&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Goland 一个很好用的功能：tag 自动补全。在 struct 结构里，可以在字段类型后敲入 json 或 xml 向结构添加标记。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4353448275862069&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/picLDrXZzloZXqXaGCiauibkYEicZtq2ZpUtRCTianKoEUJE4k5MHpQ43P8FYUgiamSQH2DmiaDR0ds0vMMYBLZN3BEtQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;928&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Goland 默认的 json 都是下滑线格式的。但是有的时候会有特殊的需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子：公司对接口返回值的字段是有统一的要求，大部分情况下 json 格式的返回值以下滑线居多，但是也有驼峰格式的。如果遇到这种情况下，该如何调整 tag 自动补全呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有种情况，有些公司会自定义 tag 字段，这些字段 goland 肯定是没有内置的。如果遇到这种情况，也想让 tag 自动补全，该如何做呢？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6145985401459854&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/picLDrXZzloZXqXaGCiauibkYEicZtq2ZpUtGWuiaPGyicFibk4up20Du78a3lSZlUkbOx8pYStJMlj8mIAj3o8YNnzAg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;2740&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;代码自动同步远程服务器&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Goland 看代码是个比较舒服的事情，毕竟 Goland 提供了很多的功能，如：Find Usages, 查看接口实现，Debug 等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为种种原因吧，很多情况我们需要将代码推送远程的服务器进行代码的编译工作。通过打包或者 git 同步方式，总归是有点麻烦，有没有一种方式本地修改完代码，自动把代码同步到远程呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Goland 恰好提供了这个功能。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6205128205128205&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/picLDrXZzloZXqXaGCiauibkYEicZtq2ZpUt9Yt9mfzY5JlvqgCTIyib6hLoFCa6NSzTX58icLjib2zq34ibge1BNEm3LQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;2730&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;go list -m 失败问题&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个一般情况下是下载 go.mod 依赖失败造成的。设置 Goland 的 Goproxy 即可。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6028368794326241&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/picLDrXZzloZXqXaGCiauibkYEicZtq2ZpUtXD6gS53ouULJqYqWfdM7tibOgo3oYobVkuhqlLJrcqUprXD4Ecah8tA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;2538&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;代码折叠&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的强迫症属于比较严重的那种。我特别不能接受代码被折叠。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Goland 折叠代码的地方有三处：import 折叠，error 折叠，string format 折叠，如何关闭他们呢？&lt;img data-ratio=&quot;0.631619937694704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/picLDrXZzloZXqXaGCiauibkYEicZtq2ZpUtqKoc9vCrlgpcyZ09lL9CjvYPmASvP6OdEGZ6zItAEBw3ia7Y6AK1c4w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;2568&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Project 目录自动选择打开的文件&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看源码，我们是需要知道当前打开的文件所处的目录的，这样对整个代码流程理解是有帮助的。Goland 默认是不在 Project 目录选择打开的文件的。该如何设置呢？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6273858921161826&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/picLDrXZzloZXqXaGCiauibkYEicZtq2ZpUtgcJ7pl69uo1mQticHpeUkGBXiaWxysHv7iauGx3ZW313FHkhc3MUAeDrw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;2410&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;go 工具推荐&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;golangci-lint&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; 一款集成了 Go 的所有工具链的工具，极好用，可以集成到 goland 中&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;gofumpt&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; 自动将格式化代码替换的工具，用过的都说好，可以集成到 goland 中&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;json to go&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt; 一款 chrome 插件，自动将 json 或者 mysql 语句转成对应的 struct，省时省力的神器&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎关注公众号。更多学习学习资料分享，关注公众号回复指令：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;回复 0，获取 《Go 面经》&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;回复 1，获取 《Go 源码流程图》&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.30918595967139656&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/picLDrXZzloZXqXaGCiauibkYEicZtq2ZpUtaX4c8wT5JGiblXGeLgiaQ2P4Kr6S4PSGY2ia64OE2TqqhX4bHfNWiau80Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2678&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;golangci-lint: &lt;span&gt;https://github.com/golangci/golangci-lint&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;gofumpt: &lt;span&gt;https://github.com/mvdan/gofumpt&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;json to go: &lt;span&gt;https://chrome.google.com/webstore/detail/json-to-go/adibamafcjbolhaaccnhdebpncglaohb&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAwMDY4ODg5MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/picLDrXZzlob0NQenCHM7wrDdQicgdcYyDWDr78gNib4SBlxN6QnF644ytlDHx8EMq4DzbLWYqsajAXWQGDRZQ00g/0?wx_fmt=png&quot; data-nickname=&quot;HHFCodeRv&quot; data-alias=&quot;hhfcodearts&quot; data-signature=&quot;资深 Go 开发, Dubbogo commiter, 分享一些开发日常&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b5a51bea10319cba05790101b01696db</guid>
<title>当年为了面腾讯，我坐绿皮火车横跨两个省</title>
<link>https://toutiao.io/k/76sbu7k</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI3OTUzMzcwNw==&quot; data-headimg=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibsGrjJaF5hvicrswVeQicFujw8LhrKnbvzEUPibAQINJDc60oDZ9S1XrQsrxQf6M8iakCatO0YA4jXbvA/0?wx_fmt=png&quot; data-nickname=&quot;程序猿石头&quot; data-alias=&quot;tangleithu&quot; data-signature=&quot;清华毕业的打工仔，分享计算机领域的技术、职场和大学生学习方法，涉及后端技术、互联网、计算机基础、编程技术、程序员职场、程序员面试等话题。欢迎关注。&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;点击👆小卡片，回复&lt;/span&gt;&lt;span&gt; “1024” &lt;/span&gt;&lt;span&gt;获取大厂面试指南&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;大家好，我是石头哥。&lt;/p&gt;&lt;figure&gt;之前不知道是看了哪个号主写了回忆当年面试大厂的经历，我也来写写自己当年的面试大厂的经历。&lt;/figure&gt;&lt;p&gt;现在回想，居然是10+年前的故事了，还好自己有写blog、写笔记的习惯，因此才能整理成文。&lt;/p&gt;&lt;p&gt;&lt;span&gt;下图是实习的时候在深圳腾讯总部拍的照片，有人知道图中所示的部门吗？（早拆分重组多少遍了）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6281287246722288&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibvsYgdR2ftuBq3lVyQEY2QnwIbZ2rHmHHs6TvicFyx9TnvZYE6RHlxup7ZGLzwWicO9Vh12OoGL73PQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;839&quot;/&gt;&lt;span&gt;&lt;span&gt;实习时候的照片，当初身材还不错！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;是否要跨省去参加笔试？&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;当初抱着试一试的想法，先是在腾讯官网投递了简历，后台开发岗位，待通过简历筛选后，收到短信要去现场参与笔试、面试。&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;66&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;当初也不认识个内部员工能帮忙内推，现在渠道多了，最近阿里校招正在进行，对阿里感兴趣的同学，请在公众号后台回复 “阿里校招” 进行内推。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;10+年前的笔试面试，还不像现在各种在线答题，视频面试这么方便，是需要到实地参与现场笔试、面试的。&lt;/p&gt;&lt;p&gt;而公司又不可能在全国各地、各个城市都举行招聘会，进行现场面试，这个时候，你所在哪个城市就很重要了。（这也是为什么之前有读者咨询我高考填志愿的时候，我提醒城市也是一个很重要的选择因素。）&lt;/p&gt;&lt;p&gt;熟悉我的朋友都知道，我本科就读于左家垅男子职业技术学校，地处长沙。&lt;/p&gt;&lt;p&gt;而长沙是没有设置笔试考点的，离长沙最近的一个笔试点就是隔壁湖北省的武汉，当初通知我的笔试考点设置在武汉大学。&lt;/p&gt;&lt;p&gt;究竟要不要过去试一试，其实最开始当初特别纠结。&lt;/p&gt;&lt;p&gt;毕竟&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247491926&amp;amp;idx=1&amp;amp;sn=e48b368a2b03dad489ee1a25aa79e454&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;像我这样的穷学生&lt;/a&gt;，为了一场没有把握的笔试、面试，跨越一个省，还是需要纠结纠结的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;路费&lt;/strong&gt;得花钱吧？&lt;/p&gt;&lt;p&gt;过去&lt;strong&gt;住宿&lt;/strong&gt;也得花钱吧？？&lt;/p&gt;&lt;p&gt;万一过去，连笔试都没过，连面试机会都没有呢？？&lt;/p&gt;&lt;p&gt;这一纠结都纠结到笔试的前一天晚上。&lt;/p&gt;&lt;p&gt;最终还是决定一次尝试，“梦想还是要有的”。（其实，正好是有同学作伴，一个人我估计都懒得折腾了，甚至有同学都没收到笔试通知，准备去“罢笔”，更加坚定了我要去参加笔试的决心。）&lt;/p&gt;&lt;p&gt;于是购买了当天晚上的火车票，绿皮火车那种，现在搜索当年的那趟已经停运了（因为时刻表没对上）。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5079559363525091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibvsYgdR2ftuBq3lVyQEY2Qn8jURZTzLgNWCLgFAPScSxC4oukZiaXCiaJbx9UCPJPmMBphRyro9YN5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;817&quot;/&gt;&lt;figcaption&gt;绿皮火车，不知道你们坐过没？&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;凌晨2点到达了武昌站，然后在火车站周围找了&lt;/span&gt;家&lt;span&gt;小旅店，住下（就是到达火车站，有很多叫卖“宾馆、住宿”的那种）。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;前往笔试&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;睡了几个小时，7点半起来，开始找武大工学部笔试。&lt;/p&gt;&lt;p&gt;刚好公交车有402直接到武大工学部，就坐了。一坐就是一个小时，谁叫他是旅游专线呢。武汉长江大桥先过去，绕一下，然后再从长江大桥二桥绕回来。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.45517841601392517&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibvsYgdR2ftuBq3lVyQEY2Qn1MGdsCIcibv80icdFEPLg5BUDkV2aHD3aZmFibonWUdoT7h17gCUmjRew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1149&quot;/&gt;&lt;figcaption&gt;武汉大学&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;上图是刚到武汉大学时拍的照片，哈哈，原谅当时手机的渣像素（照片我都习惯用网盘分门别类保存了）。&lt;/p&gt;&lt;p&gt;到达武大工学部，下车发现同一辆车的也有其他人去参与腾讯笔试的。期间有位女生说了句，坐了这么久的公交车才到。&lt;/p&gt;&lt;p&gt;我的内心OS：“这位小姐姐，不要不服好啊，哥们可是从长沙远道而来滴。”&lt;/p&gt;&lt;p&gt;然后找了打印店打印了一份简历，刚好同校的 HJ 同学和 LM 同学也一起过来了。不知为啥，他俩并没有收到笔试通知？然后就是霸笔，还有另外同学院的研究生也霸笔。&lt;/p&gt;&lt;p&gt;我 RP 比较好，就先进教室参与答题了。还好后来组织笔试的腾讯工作人员给机会让他们霸笔了。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;笔试题目&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;拿到笔试题目，一共8页纸，再加上答题卡2页，看起来是有点长。&lt;/p&gt;&lt;p&gt;首先就是看了下试卷结构，基础部分+附加题部分。附加题分 C/C++方向、Java 方向、PHP 方向、Flash方向。&lt;/p&gt;&lt;p&gt;当年还有 Flash 方向，现在呢？&lt;/p&gt;&lt;p&gt;先看了下附加题。&lt;/p&gt;&lt;p&gt;当初拿到 Java 方向的题目，感觉“太偏”了。一个是画类图，要求写出公有方法和继承关系，&lt;code&gt;ConcuttentHashMap&lt;/code&gt; 或者 &lt;code&gt;ArrayBlockingQueue&lt;/code&gt; 来着，总之就是这两个类我当时就没怎么用过。（其实，就让我现在来画，我感觉也画不出来，至少画不全）&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;还好当初没现在卷得这么厉害？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;第二个题目是描述一个 Tomcat 相关的问题，描述了相关现象，给出了某些条件，最终叫如何解决。&lt;/p&gt;&lt;p&gt;前面的基础题，几乎全是软考的题目。还好我基础算不错，可是过了软考高级，得了湖南省第二名呢！，详见&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247492794&amp;amp;idx=1&amp;amp;sn=09f1d1bdd7225eafc9a9a587d77b0109&amp;amp;chksm=eb44e55edc336c4888115fcc512317ce4280ee87fe18552e782c20844da18ade234577c025cf&amp;amp;token=643157578&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;我的大学之路&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;题目大概分操作系统，网络，数据结构，算法，数据库等。&lt;/p&gt;&lt;p&gt;其中有一道题目印象比较深，就是之前考系统架构设计师的题：一个&lt;code&gt;150*100&lt;/code&gt;的二维数组，然后行存储 ……，最后问产生多少次中断？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;所以，当初考软考，还是很有帮助的。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;也有的各种八股文考点，比如MD5消息摘要是输出多少字节啊之类。&lt;/p&gt;&lt;p&gt;一共20个选择题，3分一个，就60分了。&lt;/p&gt;&lt;p&gt;然后有程序填空题目，都是C语言的。2道，一道20分，5个空。&lt;/p&gt;&lt;p&gt;第一道是链表倒置的，是比较简单的题目了。（10+年过去了，这些面试题还一直在流行……）&lt;/p&gt;&lt;p&gt;第二道题目是一个模拟计算器，后来发现是N年前的高级程序员的题目。&lt;/p&gt;&lt;p&gt;……&lt;/p&gt;&lt;p&gt;再后面的附加题就悲催了。&lt;/p&gt;&lt;p&gt;第一个类图，我就画了 extends AbstractMap，然后写了几个Map的方法。然后实在是不清楚，就在旁边多写了下自己对 &lt;code&gt;ConcuttentHashMap&lt;/code&gt; 的理解等，希望面试官能酌情给分。&lt;/p&gt;&lt;p&gt;第二个附加题大意说的是：&lt;/p&gt;&lt;p&gt;一个 OA 系统交付后，几个小时候就宕机，但 CPU 也不繁忙，也没 OOM，但就是收不到请求。&lt;/p&gt;&lt;p&gt;但前面几个小时一切正常，还有就是重启 Tomcat 后又能正常几个小时，问如果你是项目中成员，你该怎么解决这个问题。&lt;/p&gt;&lt;p&gt;回过头来看，这其实就是一种典型的开放式题目，考察候选人实际问题的解决能力，可以从多角度去分析，答题“天花乱坠”也没关系，只要有合适的理由即可。&lt;/p&gt;&lt;p&gt;以上就是整个笔试过程了。基础题目根本不区分具体啥编程语言，都是公共的软考设计的一些知识，后面附加题才细分方向。&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247484698&amp;amp;idx=1&amp;amp;sn=03cc4636e7ee7364a85788a98809cc03&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;程序员的基础&lt;/a&gt;一直是我多次强调的重点。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;后记&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;当初就趁那个机会在武汉转悠了下，吃到了传说中的热干面，公交车路过传说中的“光谷”，当然还约了同学，去参观了下华科。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6317073170731707&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibvsYgdR2ftuBq3lVyQEY2QnTxP1pOn7h9D8xEPGEhpuzXxXxZX416ATYWOoBUjoOUOkBxjlsuhxHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;820&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5859188544152745&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibvsYgdR2ftuBq3lVyQEY2QnplVwzZZfI8zs9eicUSx8oY2cNxAOBoonSOn3UmtqO92zLvrtqDrGbGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;838&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&amp;lt;&amp;lt;&amp;lt; 左右滑动见更多 &amp;gt;&amp;gt;&amp;gt;&lt;/p&gt;&lt;p&gt;现在想想，当初假设为了省钱，舍不得跑去武汉面试，当然，肯定不会有去腾讯实习的经历，也许后面保送清华也不会那么顺利，说不定可能就去了上交、浙大等等读研。&lt;/p&gt;&lt;p&gt;当然，也说不定可能本科毕业就工作了呢？也说不定，本科毕业就直接在大厂工作比我现在还混得好呢？&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibvsYgdR2ftuBq3lVyQEY2QnSlLuz5TUUTtXcUVJaZBTX2ywMOWhyzqxXDULWXCbibl43OsibCic7lc8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/p&gt;&lt;p&gt;哈哈，不过，能做到每做的一个决定不要后悔就行。&lt;/p&gt;&lt;p&gt;这次就先聊这么多吧，下次接着分享，大家周末愉快！&lt;/p&gt;&lt;p&gt;有收获请记得下方点赞、在看、分享&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibtuE5vKbCQic8cmtgEyVlOuYWpRiaZicjkQhsHpN1eIqqeiaKcgMaicVWicGChxvnhMgibreJKSpFg5yichZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;，这对我很重要。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>