<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f90f04662d00c3beca95820c2d69527b</guid>
<title>一次 MySQL 线上死锁分析实战</title>
<link>https://toutiao.io/k/pys6jzz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;关键词：MySQL Index Merge&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MySQL 的锁机制相信大家在学习 MySQL 的时候都有简单的了解过，那既然有锁就必定绕不开死锁这个问题。其实 MySQL 在大部分场景下是不会存在死锁问题的（比如并发量不高，SQL 写得不至于太拉胯的情况），但是在高并发的业务场景下，一不注意就会产生死锁，而这个死锁分析起来也比较麻烦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前段时间在公司实习的时候就遇到了一个比较&lt;strong&gt;奇怪的死锁&lt;/strong&gt;，之前一直没来得及好好整理，最近有空复现了一下，算是积累一点经验。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;业务场景&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单说一下业务背景，公司做的是电商直播，我负责的是主播端相关的业务。而这个死锁就出现在主播后台对商品信息进行更新的时候。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的一个商品会有两个关联的 ID，通过其中任何一个 ID 都无法确定唯一一件商品（也就是说这个 ID 和商品是&lt;strong&gt;一对多&lt;/strong&gt;的关系），只能同时查询两个 ID，才能确定一件商品。所以在更新商品信息的时候，需要在 where 条件中同时指定两个 ID，下面是死锁 SQL 的结构（已脱敏）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;UPDATE&lt;/span&gt; test_table &lt;span&gt;SET&lt;/span&gt; &lt;span&gt;`name`&lt;/span&gt;=&lt;span&gt;&quot;zhangsan&quot;&lt;/span&gt; &lt;span&gt;WHERE&lt;/span&gt; class_id = &lt;span&gt;10&lt;/span&gt; &lt;span&gt;AND&lt;/span&gt; teacher_id = &lt;span&gt;8&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;这个 SQL 非常简单，根据两个等值条件，对一个字段进行更新。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道你看到这个 SQL 会不会懵逼，按常理来说，应该是一个事务里有多条 SQL 才会有可能出现死锁，这一条 SQL 怎么可能出现死锁呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是的，我当时也有这样的疑惑，甚至怀疑是不是报警系统瞎报（最后证明不是…），当时是真的摸不着头脑。并且因为数据库权限的原因，想看死锁日志都看不到，又是临近下班的时候，找 DBA 能麻烦死，所以就直接搜索引擎走起了……（关键词：update 死锁 单条 sql），最后查出来是由于 MySQL 的索引合并优化导致的，即 Index Merge，下面会进行详细讲解并复现一下死锁场景。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;索引合并&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Index Merge 是 MySQL 在 5.0 的时候引入的一项优化功能，主要是用于优化一条 SQL 使用多个索引的情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看刚刚的 SQL，假设 &lt;code&gt;class_id&lt;/code&gt; 和 &lt;code&gt;teacher_id&lt;/code&gt; 分别是两个普通索引：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;UPDATE&lt;/span&gt; test_table &lt;span&gt;SET&lt;/span&gt; &lt;span&gt;`name`&lt;/span&gt;=&lt;span&gt;&quot;zhangsan&quot;&lt;/span&gt; &lt;span&gt;WHERE&lt;/span&gt; class_id = &lt;span&gt;10&lt;/span&gt; &lt;span&gt;AND&lt;/span&gt; teacher_id = &lt;span&gt;8&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如果没有 Index Merge 优化的时候&lt;/strong&gt;，MySQL 查询数据的步骤如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;根据 class_id 或 teacher_id （具体使用哪个索引由优化器根据实际数据情况自行判断，这里假设使用 &lt;code&gt;class_id&lt;/code&gt;的索引）在二级索引上查询到对应数据的主键 ID&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;根据查询到的主键 ID 进行回标查询（即查询聚簇索引），得到相应的数据行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从数据行中获取 &lt;code&gt;teacher_id&lt;/code&gt; ，判断其是否等于 8，满足条件则返回&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从这个过程中，不难看出，&lt;strong&gt;MySQL 只使用到了一个索引&lt;/strong&gt;，至于为什么不使用多个索引，简单来说就是因为多个索引在多棵树上，强行使用反而降低性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;再来看看引入了 Index Merge 优化后&lt;/strong&gt;，MySQL 查询数据的步骤如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;根据 &lt;code&gt;class_id&lt;/code&gt; 查询到相应的主键，再根据主键回表查询到对应的数据行（记为结果集 A）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;根据 &lt;code&gt;teacher_id&lt;/code&gt; 查询到相应的主键，再根据主键回表查询到对应的数据行（记为结果集 B）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将结果集 A 和结果集 B &lt;strong&gt;执行交集&lt;/strong&gt;操作，获得最终满足条件的结果集&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里可以看出，有了 Index Merge 之后，MySQL 将一条 SQL 语句拆分成了两个查询步骤，&lt;strong&gt;分别使用两个索引，再用交集操作优化性能&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;死锁分析&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分析完了 Index Merge 的步骤，我们再回过头想一下为什么会出现死锁呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还记得上面说的 Index Merge 将一条 SQL 查询拆分成了两个步骤吗，问题就出现在这里。我们知道 &lt;code&gt;UPDATE&lt;/code&gt; 语句是会加上一个&lt;strong&gt;行级排他锁&lt;/strong&gt;的，在分析加锁步骤之前，我们假设有如下一个数据表：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.24344827586206896&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/siabvNcianaNEkHNI5dkgHL7KhqhicwT4azvbSmt9v2VlKk0xXQWv8eGt3BDoBFEicAVQ7MSEhQdPshIOfDQyYX5SQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1450&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上表数据满足我们文章开头说的特点，根据 &lt;code&gt;class_id&lt;/code&gt; 和 &lt;code&gt;teacher_id&lt;/code&gt;  单个字段均无法唯一确定一条数据，只能联合两个字段，才能确定一条数据，并且设定 &lt;code&gt;class_id&lt;/code&gt; 和 &lt;code&gt;teacher_id&lt;/code&gt;  分别为两个普通索引。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设有如下两条 SQL 语句并发执行，它们的参数完全不同，直觉告诉我们应该不会出现死锁，但直觉往往是错误的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// 线程 A 执行&lt;br/&gt;&lt;span&gt;UPDATE&lt;/span&gt; test_table &lt;span&gt;SET&lt;/span&gt; &lt;span&gt;`name`&lt;/span&gt;=&lt;span&gt;&quot;zhangsan&quot;&lt;/span&gt; &lt;span&gt;WHERE&lt;/span&gt; class_id = &lt;span&gt;2&lt;/span&gt; &lt;span&gt;AND&lt;/span&gt; teacher_id = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;// 线程 B 执行&lt;br/&gt;&lt;span&gt;UPDATE&lt;/span&gt; test_table &lt;span&gt;SET&lt;/span&gt; &lt;span&gt;`name`&lt;/span&gt;=&lt;span&gt;&quot;zhangsan&quot;&lt;/span&gt; &lt;span&gt;WHERE&lt;/span&gt; class_id = &lt;span&gt;1&lt;/span&gt; &lt;span&gt;AND&lt;/span&gt; teacher_id = &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么&lt;strong&gt;在 Index Merge 的优化下&lt;/strong&gt;，并发执行如上 SQL 的时候，MySQL 的加锁步骤如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3561549100968188&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/siabvNcianaNEkHNI5dkgHL7KhqhicwT4azo6jHZ7lZTwaljBvmKpW0XOP81NP9pn6ooibNJZ6f50nEbNqvjU0lic0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1446&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;最终，两个事务互相等待，形成死锁&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;解决方案&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为这个死锁本质上还是由于 Index Merge 这个优化导致的，所以要解决这个场景的死锁问题，本质上只要让 MySQL 不走 Index Merge 优化即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;方案一&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;手动将一条 SQL 拆分成多条 SQL，在逻辑层做交集操作，阻止 MySQL 的&lt;span&gt;憨憨&lt;/span&gt;优化行为，比如这里我们可以先根据 &lt;code&gt;class_id&lt;/code&gt; 查询到相应主键，再根据 &lt;code&gt;teacher_id&lt;/code&gt; 查询相应主键，最后根据交集后的主键查询数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;方案二&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建立联合索引，比如这里可以将 &lt;code&gt;class_id&lt;/code&gt; 和 &lt;code&gt;teacher_id&lt;/code&gt; 建立一个联合索引，MySQL 就不会走 Index Merge 了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;方案三&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;强制走单个索引，在表名后添加 &lt;code&gt;for index(class_id)&lt;/code&gt; 可以指定该语句仅走 class_id 索引&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;方案四&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关闭 Index Merge 优化：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;永久关闭：&lt;code&gt;SET [GLOBAL|SESSION] optimizer_switch=&#x27;index_merge=off&#x27;;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;临时关闭：&lt;code&gt;UPDATE /*+ NO_INDEX_MERGE(test_table) */ test_table SET&lt;/code&gt;name&lt;code&gt;=&quot;zhangsan&quot; WHERE class_id = 10 AND teacher_id = 8;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;场景复现&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数据准备&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了方便测试，这里提供一个 SQL 脚本，将其用 Navicat 导入后即可得到需要的测试数据：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下载地址：https://cdn.juzibiji.top/file/index_merge_student.sql&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;导入之后，我们会得到如下格式的 10000 条测试数据：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0259365994236311&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/siabvNcianaNEkHNI5dkgHL7KhqhicwT4aztsicUZnYdyjeHc72vHPQbSZBnsCjibnm2ulJw8yN0leccIdjF6pzxG2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;347&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;测试代码&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于篇幅限制，这里仅给出代码 Gist 链接：https://gist.github.com/juzi214032/17c0f7a51bd8d1c0ab39fa203f930c60&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.54296875&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/siabvNcianaNEkHNI5dkgHL7KhqhicwT4azzNvYbj49FDHic0ZEMVqHichWr3D3SkdwhCgzwV9C37hvRZUqicrNXJGNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述代码主要是开启 100 个线程执行我们的数据修改 SQL 语句，来模拟线上并发情况，在运行几秒钟后，我们会得到下面这样一个报错：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: Deadlock found when trying to get lock; try restarting transaction&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这代表已经产生了死锁异常&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;死锁分析&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面我们用代码已经构造出了一个死锁，接下来我们进入 MySQL 看看死锁日志，在 MySQL 中执行如下命令即可查看死锁日志：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;SHOW&lt;/span&gt; &lt;span&gt;ENGINE&lt;/span&gt; &lt;span&gt;INNODB&lt;/span&gt; &lt;span&gt;STATUS&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.54296875&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/siabvNcianaNEkHNI5dkgHL7KhqhicwT4azHaDGWW1k51h9x8Vx6qDqENVWcLy71bWkUjos4nmHg8kiaRZ2WSnQP8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在日志中，我们找到 &lt;code&gt;LATEST DETECTED DEADLOCK&lt;/code&gt; 这一行，这里开始便是我们上次产生的死锁，接下来我们开始分析。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过第 29 行可以看到，事务 1 执行的 SQL 的条件是 &lt;code&gt;class_id = 6&lt;/code&gt; 和 &lt;code&gt;teacher_id = 16&lt;/code&gt;，它目前持有了一个行锁，第 34~39 行是该行数据，34 行是主键的十六进制表示，我们转换为 10 进制即为 &lt;strong&gt;1616&lt;/strong&gt;。同样的，看 45 行，其等待拿锁的是主键 id 1517 的数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.54296875&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/siabvNcianaNEkHNI5dkgHL7KhqhicwT4azeibia3hKRDzCceTA3JjBwJpicjHkml3sXBKAB1FNt04gQ27ePNY2icjZYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来用同样的方法分析事务 2，可知事务 2 持有了 3 把锁，分别是主键 id 为&lt;strong&gt;1317、1417、1517&lt;/strong&gt; 的数据行，等待的是 &lt;strong&gt;1616&lt;/strong&gt; 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到这里我们就已经发现了，事务 1 持有 1616 等待 1517，事务 2 持有1517 等待 1616，所以形成了一个死锁。此时 MySQL 的处理方法是回滚持有锁最少的事务，并且 JDBC 会抛出我们前面的 MySQLTransactionRollbackException 回滚异常。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个死锁在排查的时候其实非常不好排查，如果你不知道 MySQL 的 Index Merge，那么在排查的时候其实是毫无头绪的，因为呈现在你面前的就只有一条非常简单的 SQL，就算看死锁日志，也是一样的不明所以。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以处理这类问题，更多的还是考验你的知识储备量和经验，只要遇到过一次，后面在写 SQL 的时候多加注意就好了！&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0c72951a78fc830030861cca20f7a76b</guid>
<title>HTTP header 中的黑科技</title>
<link>https://toutiao.io/k/ep472ts</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-header&quot;&gt;&lt;h1 class=&quot;title&quot;&gt;HTTP Header 中的黑科技&lt;/h1&gt;&lt;p class=&quot;meta&quot;&gt;冯宇 Posted at — Feb 24, 2021
&lt;span class=&quot;meta&quot; id=&quot;busuanzi_container_page_pv&quot;&gt;阅读 &lt;span id=&quot;busuanzi_value_page_pv&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;markdown&quot;&gt;&lt;h2 id=&quot;简单认识-http-协议&quot;&gt;简单认识 HTTP 协议&lt;/h2&gt;&lt;p&gt;HTTP 协议是一种基于 TCP 的纯文本协议，一个基本的 HTTP 协议交互过程如下:&lt;/p&gt;&lt;p&gt;使用 nc 命令演示以及 mock 最基本的 http server 交互响应过程:&lt;/p&gt;&lt;p&gt;终端 1:&lt;/p&gt;&lt;p&gt;终端 2:&lt;/p&gt;&lt;p&gt;终端 1 结果类似如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;GET / HTTP/1.1
Host: localhost:8080
User-Agent: curl/7.75.0
Accept: */*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，我们在终端 1 手工输入一个模拟 http server 的响应:&lt;/p&gt;&lt;p&gt;此时，在终端 2 应该看到类似于下面的响应:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&amp;lt; HTTP/1.1 200 OK
&amp;lt;
Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;HTTP 的协议的请求内容格式如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;GET / HTTP/1.1          # &amp;lt;======== 第一行为 method location protocol
Host: localhost:8080    ######################
User-Agent: curl/7.75.0 ## 一些可选的 headers
Accept: */*             ######################
                        # 一个空行
{body}                  # 可选的 request body
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;HTTP 协议的响应内容格式如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;HTTP/1.0 200 OK                          # 第一行固定 protocol code description
Server: SimpleHTTP/0.6 Python/3.9.1      ################
Date: Sun, 14 Feb 2021 09:24:59 GMT      ## 一些可选的 headers
Content-type: text/html; charset=utf-8   ##
Content-Length: 496                      ################
                                         # 一个空行
{body}                                   # 响应正文内容
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通常描述 REST 接口的文档中，直接省略请求过程以及非关键的 Header 部分，贴出关键部分的请求命令和 header,以及 body 部分，以一个登录 API 为例，可能看到的接口文档描述如下:&lt;/p&gt;&lt;p&gt;客户端请求:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;POST /login
Content-Type: application/json

{&quot;usernamae&quot;:&quot;u1&quot;,&quot;password&quot;:&quot;p1&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;服务端响应:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;200 OK
Content-Type: application/json

{&quot;token&quot;:&quot;a1b2c3...&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;常见 HTTP Code 总结&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;1xx&lt;/code&gt;: 信息响应&lt;ul&gt;&lt;li&gt;&lt;code&gt;100 Continue&lt;/code&gt;，这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。&lt;/li&gt;&lt;li&gt;&lt;code&gt;101 Switching Protocol&lt;/code&gt;，该代码是响应客户端的 Upgrade 标头发送的，并且指示服务器也正在切换的协议。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;2xx&lt;/code&gt;：成功响应&lt;ul&gt;&lt;li&gt;&lt;code&gt;200 OK&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;201 Created&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;204 No Content&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;206 Partial Content&lt;/code&gt;，部分成功，断点续传必备&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;3xx&lt;/code&gt;：重定向&lt;ul&gt;&lt;li&gt;&lt;code&gt;301 Moved Permanently&lt;/code&gt;，注意所有的请求都将被定向为 GET&lt;/li&gt;&lt;li&gt;&lt;code&gt;302 Found&lt;/code&gt;，与 301 最直观的区别是 302 请求不会被搜索引擎收录&lt;/li&gt;&lt;li&gt;&lt;code&gt;304 Not Modified&lt;/code&gt;，见下文缓存部分&lt;/li&gt;&lt;li&gt;&lt;code&gt;307 Temporary Redirect&lt;/code&gt;，与 302 唯一的区别在于 method 保持原样&lt;/li&gt;&lt;li&gt;&lt;code&gt;308 Permanent Redirect&lt;/code&gt;，与 301 唯一的区别在于 method 保持原样&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;4xx&lt;/code&gt;: 客户端错误&lt;ul&gt;&lt;li&gt;&lt;code&gt;400 Bad Request&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;401 Unauthorized&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;403 Forbidden&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;404 Not Found&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;405 Method Not Allowed&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;5xx&lt;/code&gt;: 服务端失败&lt;ul&gt;&lt;li&gt;&lt;code&gt;500 Internal Server Error&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;501 Not Implemented&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;502 Bad Gateway&lt;/code&gt;，常见于反向代理&lt;/li&gt;&lt;li&gt;&lt;code&gt;503 Service Unavailable&lt;/code&gt;，常见于云加速服务&lt;/li&gt;&lt;li&gt;&lt;code&gt;504 Gateway Timeout&lt;/code&gt;，常见于反向代理&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;参考资料： &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;http-协议的版本的主要演进&quot;&gt;HTTP 协议的版本的主要演进&lt;/h2&gt;&lt;p&gt;HTTP/1.0 增加以下内容:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;增加协议版本号，如 GET HTTP/1.0, POST HTTP/1.1&lt;/li&gt;&lt;li&gt;引入 header 内容，无论请求成功与否都可以添加 header,增加灵活性&lt;/li&gt;&lt;li&gt;增加 Content Type 支持，以便 http 协议传输更多更丰富的内容&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;HTTP/1.1 增加以下内容:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;连接可以复用，增加 &lt;code&gt;keepalive&lt;/code&gt; 支持&lt;/li&gt;&lt;li&gt;支持 pipeline，允许在第一个应答被完全发送之前就发送第二个请求，以降低通信延迟。&lt;/li&gt;&lt;li&gt;支持分块编码技术(chunked)&lt;/li&gt;&lt;li&gt;引入额外缓存机制(基于相对时间缓存的 &lt;code&gt;cache-control&lt;/code&gt; 头)&lt;/li&gt;&lt;li&gt;引入内容协商头(&lt;code&gt;Accept-*&lt;/code&gt;头)&lt;/li&gt;&lt;li&gt;引入 &lt;code&gt;Host&lt;/code&gt; 头，以便支持虚拟主机&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;HTTP/2 主要改进:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;不再基于纯文本，而是使用二进制(但第一次协商为了向下兼容 HTTP/1.1 依旧使用纯文本)&lt;/li&gt;&lt;li&gt;是一个复用协议。并行请求和响应在同一个链接完成&lt;/li&gt;&lt;li&gt;压缩 headers,节省传输成本&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;HTTP/3(QUIC)主要改进(目前仍是草案状态):&lt;/p&gt;&lt;p&gt;参考资料:&lt;/p&gt;&lt;h2 id=&quot;http-header-中的黑科技实例&quot;&gt;HTTP header 中的黑科技实例&lt;/h2&gt;&lt;h3 id=&quot;基于域名的虚拟主机host-头&quot;&gt;基于域名的虚拟主机(&lt;code&gt;Host&lt;/code&gt; 头)&lt;/h3&gt;&lt;p&gt;通过 client 添加 Host 头(通常不需要用户干预，命令部分和 Host 头部分通常客户端会自动处理)以及服务端响应 Host 头，可以实现同一个服务器上提供多个网站的的场景。例:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;GET / HTTP/1.1
Host: localhost:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;内容协商&quot;&gt;内容协商&lt;/h3&gt;&lt;p&gt;内容协商的方式为客户端请求带上 Accept 类的头（尽管 &lt;code&gt;User-Agent&lt;/code&gt; 不是标准的内容协商内容，但是实际开发中很多人还是会使用 &lt;code&gt;User-Agent&lt;/code&gt; 作为协商依据），服务端会根据这个头响应客户端期望的内容以及对应的 header（header 也可能没有，而是直接返回对应期望的内容或者重定向到目标页面）。&lt;/p&gt;&lt;p&gt;常见的 Accept 对与示例：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;客户端 Request&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;服务端 Response(可能没有)&lt;/strong&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;accept: application/json, text/html&lt;/td&gt;&lt;td&gt;content-type: application/json&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;accept-language: zh-CN,zh;q=0.9,en;q=0.8,en-US;q=0.7&lt;/td&gt;&lt;td&gt;Content-Language: zh-CN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;accept-encoding: br, gzip, deflete&lt;/td&gt;&lt;td&gt;content-encoding: gzip&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;&lt;td&gt;Vary: Accept-Encoding&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;code&gt;Vary&lt;/code&gt; 会影响下级服务端或用户浏览器的缓存策略。&lt;code&gt;vary&lt;/code&gt; 头表示服务端基于哪个请求头做了内容协商（可能没有），再简单一点就是因为什么头的内容不同而响应内容不同。&lt;code&gt;Vary&lt;/code&gt; 头可以防止缓存错乱，但是滥用会导致缓存命中率下降，因此通常不推荐 &lt;code&gt;Vary: *&lt;/code&gt;。实际使用常见的 Vary: &lt;code&gt;Accept-Encoding&lt;/code&gt;，&lt;code&gt;User-Agent&lt;/code&gt;，&lt;code&gt;Origin&lt;/code&gt;&lt;/p&gt;&lt;h3 id=&quot;跨源资源共享-cors仅浏览器&quot;&gt;跨源资源共享 CORS（仅浏览器）&lt;/h3&gt;&lt;p&gt;原理和过程部分强烈建议阅读 MDN 文档: &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS&lt;/a&gt;&lt;/p&gt;&lt;p&gt;客户端请求头:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;OPTIONS /resource/foo     # fetch 请求通常使用 OPTIONS 命令
Access-Control-Request-Method: DELETE
Access-Control-Request-Headers: origin, x-requested-with
Origin: https://foo.bar.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;服务端期望的响应头:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;HTTP/1.1 200 OK
Content-Length: 0
Connection: keep-alive
Access-Control-Allow-Origin: https://foo.bar.org
Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETE
Access-Control-Max-Age: 86400
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;下载文件仅浏览器&quot;&gt;下载文件(仅浏览器)&lt;/h3&gt;&lt;p&gt;打开链接下载文件需要满足以下二选一:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;content-type&lt;/code&gt; 非浏览器能直接支持的，或者为默认的 &lt;code&gt;application/octet-stream&lt;/code&gt;&lt;/li&gt;&lt;li&gt;响应头中包含 &lt;code&gt;Content-Disposition: attachment&lt;/code&gt;，无论 &lt;code&gt;content-type&lt;/code&gt; 是什么，都将变为文件下载，如果 &lt;code&gt;Content-Disposition&lt;/code&gt; 的值包含 &lt;code&gt;filename=for.bar&lt;/code&gt;，则默认下载文件名为指定 &lt;code&gt;filename&lt;/code&gt; 的值。例:&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;Content-Disposition: attachment;filename=download.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;文件下载带进度提醒&quot;&gt;文件下载带进度提醒&lt;/h3&gt;&lt;p&gt;响应头中包含 &lt;code&gt;Content-Length&lt;/code&gt;，则客户端可以根据这个文件长度提醒下载进度&lt;/p&gt;&lt;h3 id=&quot;多线程下载断点续传&quot;&gt;多线程下载/断点续传&lt;/h3&gt;&lt;p&gt;服务端必须支持 &lt;code&gt;Accept-Ranges&lt;/code&gt; 响应，大部分情况下这个值是 &lt;code&gt;bytes&lt;/code&gt;：&lt;/p&gt;&lt;p&gt;客户端请求带上 &lt;code&gt;Range:(unit=first byte pos)-[last byte pos]&lt;/code&gt;,如:&lt;/p&gt;&lt;p&gt;服务端应该返回:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;206 Partial Content
Content-Range: bytes 0-1023/146515
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;大数据量传输流式传输chunked&quot;&gt;大数据量传输/流式传输(chunked)&lt;/h3&gt;&lt;p&gt;对于大容量数据、动态数据、流式数据这种不可提前预知容量(&lt;code&gt;content-length&lt;/code&gt;)的内容，应当采用 chunked 方式。它可以方便处理动态内容，以及动态维持客户端链接。客户端通常会对 chunked 进行流式处理。一个典型的 chunked 响应如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;HTTP/1.1 200 OK
Content-Type: text/plain
Transfer-Encoding: chunked

7\r\n
Mozilla\r\n
9\r\n
Developer\r\n
7\r\n
Network\r\n
0\r\n
\r\n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体的 chunked 部分格式如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;[chunk size][\r\n][chunk data][\r\n][chunk size][\r\n][chunk data][\r\n][chunk size = 0][\r\n][\r\n]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;缓存通过-header-控制&quot;&gt;缓存（通过 header 控制）&lt;/h3&gt;&lt;p&gt;HTTP 的缓存可以针对浏览器，也可以针对中间的代理层(如 CDN 等)。&lt;code&gt;Vary&lt;/code&gt; 头会影响缓存效果(下不赘述)。&lt;/p&gt;&lt;p&gt;HTTP 协议的缓存结构可以参考下图(来自: &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ&lt;/a&gt; ):&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://mdn.mozillademos.org/files/13777/HTTPCachtType.png&quot; alt=&quot;What a cache provide, advantages/disadvantages of shared/private caches.&quot;/&gt;&lt;/p&gt;&lt;p&gt;更灵活的本地缓存策略可以考虑上 service worker: &lt;a href=&quot;https://developers.google.cn/web/ilt/pwa/caching-files-with-service-worker&quot;&gt;https://developers.google.cn/web/ilt/pwa/caching-files-with-service-worker&lt;/a&gt;&lt;/p&gt;&lt;p&gt;哪些响应可以被缓存：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;通常只有 &lt;code&gt;GET&lt;/code&gt; 可以被浏览器缓存，而 &lt;code&gt;OPTIONS&lt;/code&gt; 和 &lt;code&gt;HEAD&lt;/code&gt; 可以被 CDN 缓存(可能需要配置)&lt;/li&gt;&lt;li&gt;响应码为 200, 206, 301, 404&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;常见缓存头:&lt;/p&gt;&lt;p&gt;&lt;code&gt;Expires&lt;/code&gt;(Since HTTP/1.0)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Expires: &amp;lt;http-date&amp;gt;&lt;/code&gt;: &lt;code&gt;Expires: Thu, 01 Dec 1994 16:00:00 GMT&lt;/code&gt;&lt;/li&gt;&lt;li&gt;本地时间到达指定时间后缓存会过期，会重新发起 HTTP 请求&lt;/li&gt;&lt;li&gt;本地时间如果不同步会影响缓存效果&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;Last-Modified&lt;/code&gt; / &lt;code&gt;If-Modified-Since&lt;/code&gt;(Since HTTP/1.0)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Last-Modified: Wed, 21 Oct 2015 07:28:00 GMT&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT&lt;/code&gt;&lt;/li&gt;&lt;li&gt;使用服务端时间，因此本地时间不同步时不影响缓存效果&lt;/li&gt;&lt;li&gt;资源未过期服务端应该返回 &lt;code&gt;304 Not Modified&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;Etag&lt;/code&gt; / &lt;code&gt;If-Non-Match&lt;/code&gt;(Since HTTP/1.1)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ETag: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;If-Non-Match: &quot;bfc13a64729c4290ef5b2c2730249c88ca92d82d&quot;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;和本地时间无关，本地时间不影响缓存效果&lt;/li&gt;&lt;li&gt;资源未过期服务端应该返回 &lt;code&gt;304 Not Modified&lt;/code&gt;&lt;/li&gt;&lt;li&gt;使用 CDN 及分布式存储的场景通常不建议使用 Etag 头&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;Cache-Control&lt;/code&gt;(Since HTTP/1.1)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;cache-control: max-age=3600,public&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;max-age&lt;/code&gt; 字段表示自获取资源之后，在本地缓存多久（单位：秒）&lt;/li&gt;&lt;li&gt;&lt;code&gt;public&lt;/code&gt;/&lt;code&gt;private&lt;/code&gt; 代表这个是公共还是私有缓存，公共缓存是可以被所有中间层缓存的，私有缓存只能在本地浏览器中缓存。包含 &lt;code&gt;max-age&lt;/code&gt; 参数或包含 Expires 头的时候，默认为 &lt;code&gt;public&lt;/code&gt;，否则默认 &lt;code&gt;private&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;cache-control&lt;/code&gt; 头可以同时包含在请求头与响应头中&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果以上头在响应中都包含，并且客户端均支持，那么优先级如下: &lt;code&gt;Cache-Control&lt;/code&gt; &amp;gt; &lt;code&gt;Expires&lt;/code&gt; &amp;gt; &lt;code&gt;Etag&lt;/code&gt; &amp;gt; &lt;code&gt;Last-Modified&lt;/code&gt;&lt;/p&gt;&lt;p&gt;缓存控制&lt;/p&gt;&lt;p&gt;&lt;code&gt;Cache-Control&lt;/code&gt;(Since HTTP/1.1)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;no-store&lt;/code&gt;：不使用任何缓存，每次重新发起请求，下载最新资源&lt;/li&gt;&lt;li&gt;&lt;code&gt;no-cache&lt;/code&gt;：每次重新验证，如果服务端未更新返回 304 Not Modified&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;(Since HTTP/1.0)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;和 &lt;code&gt;cache-control: no-cache&lt;/code&gt; 效果相同&lt;/li&gt;&lt;li&gt;不能代替 &lt;code&gt;cache-control&lt;/code&gt;，只是向后兼容 HTTP/1.0 的缓存层和客户端&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;缓存 FAQ&lt;/p&gt;&lt;p&gt;参考资料: &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;强制-https&quot;&gt;强制 HTTPS&lt;/h3&gt;&lt;p&gt;强制 HTTPS 通常有两种方案：重定向和 &lt;code&gt;HSTS&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;code&gt;HSTS&lt;/code&gt;(&lt;code&gt;HTTP Strict Transport Security&lt;/code&gt;)是一个特殊的 http header: &lt;code&gt;Strict-Transport-Security: max-age=&amp;lt;expire-time&amp;gt;&lt;/code&gt;，如:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;Strict-Transport-Security: max-age=31536000;includeSubDomains
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用于告诉浏览器必须使用 HTTPS 访问指定资源。二者比对如下：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;&lt;th&gt;&lt;strong&gt;重定向（浏览器通常有上限次数限定）&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;HSTS&lt;/strong&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;适用性&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;所有客户端(必须开启 follow redirect)&lt;/td&gt;&lt;td&gt;仅现代化的浏览器&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;强制性&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;强制。不跳转到 &lt;code&gt;Location&lt;/code&gt; 无法获取资源&lt;/td&gt;&lt;td&gt;非强制。旧的 URL 依旧可用&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;额外请求&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;多一次服务端请求&lt;/td&gt;&lt;td&gt;内部重定向，无额外请求&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;非标准端口&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;支持&lt;/td&gt;&lt;td&gt;不支持&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;参考资料: &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/HTTP_Strict_Transport_Security&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/HTTP_Strict_Transport_Security&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;基于-http11-之上的协议&quot;&gt;基于 HTTP/1.1 之上的协议&lt;/h3&gt;&lt;p&gt;HTTP/1.1 协议可以通过升级方式使用基于 HTTP/1.1 的高级协议，如 &lt;code&gt;Websocket&lt;/code&gt; 和 &lt;code&gt;WebDAV&lt;/code&gt; 等等。升级方式为添加以下两个头:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection: Upgrade&lt;/li&gt;&lt;li&gt;Upgrade: &lt;em&gt;protocols&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;升级成功服务端应该返回 &lt;code&gt;101 Switching Protocols&lt;/code&gt;，并且之后的交互则使用高级协议规范进行交互。如果服务端不支持该升级协议，则应该返回 &lt;code&gt;200 OK&lt;/code&gt;，之后由客户端继续按照 HTTP 协议降级处理。&lt;/p&gt;&lt;h3 id=&quot;简易图片防盗链仅浏览器&quot;&gt;简易图片防盗链(仅浏览器)&lt;/h3&gt;&lt;p&gt;图片防盗链一种比较简单的防护策略是通过 &lt;code&gt;Referer&lt;/code&gt; 头进行防护。假想你的网页代码中引入图片的部分如下:&lt;/p&gt;&lt;p&gt;那么浏览器请求这个图片资源的时候，通常还会附带上当前的地址栏到 &lt;code&gt;Referer&lt;/code&gt; 头，请求示例如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;GET /pic.jpg HTTP/1.1
Host: localhost:8080
referer: http://localhost:8080/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;服务端可以通过设置 &lt;code&gt;Referer&lt;/code&gt; 头白名单的方式一定程度上实现防盗链。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7738c5eb1d5bd648d39dafa629133c02</guid>
<title>构建 Zabbix 高可用监控平台</title>
<link>https://toutiao.io/k/cqvi7wv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;下载heartbeat 依赖环境包&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cd /usr/src&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;wget http://hg.linux-ha.org/heartbeat-STABLE_3_0/archive/958e11be8686.tar.bz2 wget http://hg.linux-ha.org/glue/archive/0a7add1d9996.tar.bz2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;wget https://github.com/ ClusterLabs/resource-agents/archive/v3.9.6.tar.gz安装相关依赖库&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;yum -y install gcc gcc-c++ autoconf automake libtool glib2-devel libxml2-devel bzip2 bzip2-devel e2fsprogs-devel libxslt-devel libtool-ltdl-devel asciidoc psmisc创建运行heartbeat 组及用户&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;groupadd haclient&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;useradd -g haclient hacluster -s /sbin/nologin&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;部署heartbeat 编译安装依赖环境安装cluster-glue&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cd /usr/src&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;tar -jxvf 0a7add1d9996.tar.bz2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cd Reusable-Cluster-Components-glue--0a7add1d9996/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./autogen.sh&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./configure --prefix=/usr/local/heartbeat --with-daemon-user=hacluster --with-daemon-group=haclient --enable-fatal-warnings=no LIBS=&#x27;/lib64/libuuid.so.1&#x27; make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;安装resource-agents&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;tar -zxvf v3.9.6.tar.gz&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cd resource-agents-3.9.6&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./autogen.sh&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./configure --prefix=/usr/local/heartbeat --with-daemon-user=hacluster --with-daemon-group=haclient --enable-fatal-warnings=no LIBS=&#x27;/lib64/libuuid.so.1&#x27; make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;安装heartbeat&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;tar -jxvf 958e11be8686.tar.bz2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cd Heartbeat-3-0-958e11be8686/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./bootstrap&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;声明编译环境变量&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;export CFLAGS=&quot;$CFLAGS -I/usr/local/heartbeat/include -L/usr/local/heartbeat/lib&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./configure --prefix=/usr/local/heartbeat --with-daemon-user=hacluster --with-daemon-group=haclient --enable-fatal-warnings=no LIBS=&#x27;/lib64/libuuid.so.1&#x27; make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;复制heartbeat 核心配置文件&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cp doc/{ha.cf,haresources,authkeys} /usr/local/heartbeat/etc/ha.d/授权认证文件600权限&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;chmod 600 /usr/local/heartbeat/etc/ha.d/authkeys创建目录，配置网卡支持插件文件&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mkdir -p /usr/local/heartbeat/usr/lib/ocf/lib/heartbeat/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cp /usr/lib/ocf/lib/heartbeat/ocf-* /usr/local/heartbeat/usr/lib/ocf/lib/heartbeat/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;注：一般启动时会报错因为ping 和ucast 这些配置都需要插件支持，需要将lib64下面的插件软连接到lib目录才不会抛出异常 ln -svf /usr/local/heartbeat/lib64/heartbeat/plugins/RAExec/* /usr/local/heartbeat/lib/heartbeat/ plugins/RAExec/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ln -svf /usr/local/heartbeat/lib64/heartbeat/plugins/* /usr/local/heartbeat/lib/heartbeat/plugins/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Heartbeat配置&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sed -i &#x27;s/#auth 1/auth 1/g&#x27; /usr/local/heartbeat/etc/ha.d/authkeys&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sed -i &#x27;s/#1 crc/1 crc/g&#x27; /usr/local/heartbeat/etc/ha.d/authkeys&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2个节点分别复制drbd服务drbddisk脚本到heartbeat目录(编译安装heartbeat，默认没有该脚本)，实现DRBD主从节点资源组的挂载和卸载 cp -p /etc/ha.d/resource.d/drbddisk /usr/local/heartbeat/etc/ha.d/resource.d/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;配置haresources资源文件，用于指定双机系统的主节点、 VIP、子网掩码、广播地址及启动的服务等集群资源设置Zabbix-HA1为主从节点角色中为主节点，同时2节点分别执行&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;echo &#x27;Zabbix-HA1 IPaddr::192.168.8.4/24/eth0 drbddisk::drbd0 Filesystem::/dev/drbd0::/opt::xfs&#x27; &amp;gt;&amp;gt; /usr/local/heartbeat/etc/ha.d/haresources&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;注：drbd0为drbd创建资源名称，一定要与其一致，否则无法用drbddisk脚本实现DRBD主从节点资源组的挂载和卸载&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;节点配置Heartbeat&lt;/span&gt;&lt;/h2&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;http&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;分别在2节点配置heartbeat的主配置文件ha.cf&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mv /usr/local/heartbeat/etc/ha.d/ha.cf /usr/local/heartbeat/etc/ha.d/ha.cfbak Zabbix-HA1节点执行&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cat &amp;gt; /usr/local/heartbeat/etc/ha.d/ha.cf &amp;lt;&amp;lt;EOF&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;debugfile /var/log/ha-debug.log logfile /var/log/heartbeat.log ucast eth1 172.16.38.2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;keepalive 2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;warntime 6&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;deadtime 10&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;initdead 120&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;udpport 694 auto_failback off node Zabbix-HA1 node Zabbix-HA2 ping 192.168.8.1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;respawn hacluster /usr/local/heartbeat/libexec/heartbeat/ipfail apiauth ipfail gid=haclient uid=hacluster&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Zabbix-HA2节点执行&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cat &amp;gt; /usr/local/heartbeat/etc/ha.d/ha.cf &amp;lt;&amp;lt;EOF&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;debugfile /var/log/ha-debug.log logfile /var/log/heartbeat.log ucast eth1 172.16.38.1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;keepalive 2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;warntime 6&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;deadtime 10&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;initdead 120&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;udpport 694 auto_failback off node Zabbix-HA1 node Zabbix-HA2 ping 192.168.8.1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;respawn hacluster /usr/local/heartbeat/libexec/heartbeat/ipfail apiauth ipfail gid=haclient uid=hacluster&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;注：ucast eth1参数中配置IP地址为对方节点的心跳IP，否则heartbeat无法进行心跳检测和服务故障切换&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;两机器启动heartbeat服务systemctl enable heartbeat&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;systemctl start heartbeat  #重点：heartbeat开机启动顺序，先主节点启动，后从节点启动 systemctl stop heartbeat   #实现主从节点之间切换及VIP漂移&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;查看端口号&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;netstat -anup|grep 694&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;05 配置MySQL高可用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;从节点停止zabbix-server服务和禁止开机自启动&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;systemctl stop zabbix-server  &amp;amp;&amp;amp;  systemctl disable zabbix-server&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;从节点移除zabbix程序和web&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mkdir -p /data/backup  &amp;amp;&amp;amp;  mv /opt/zabbix/ &lt;span class=&quot;code-snippet__regexp&quot;&gt;/data/backup&lt;/span&gt;  &amp;amp;&amp;amp;  mv /opt/www_zabbix /data/backup/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;主节点禁用zabbix-server服务开机自启动，服务由heartbeat托管systemctl disable zabbix-server&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;主节点都执行以下操作&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;heartbeat接管zabbix-server服务启动停止&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cat &amp;gt; &lt;span class=&quot;code-snippet__regexp&quot;&gt;/usr/local&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/heartbeat/etc&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/ha.d/resource&lt;/span&gt;.d/zabbix-server &amp;lt;&amp;lt;EOF &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;PATH=&lt;span class=&quot;code-snippet__regexp&quot;&gt;/bin:/sbin&lt;/span&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;:/usr/bin&lt;/span&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;:/usr/sbin&lt;/span&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;:/usr/local/bin&lt;/span&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;:/usr/local/sbin&lt;/span&gt; export PATH&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;$1&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; start)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;systemctl start zabbix-server&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;stop)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;systemctl stop zabbix-server&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;esac exit &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; EOF&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;赋予执行权限&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;chmod +x /usr/local/heartbeat/etc/ha.d/resource.d/zabbix-server&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;脚本拷贝到从节点&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;scp -P36091 -p /usr/local/heartbeat/etc/ha.d/resource.d/zabbix-server &lt;span class=&quot;code-snippet__number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;8.187&lt;/span&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;:/usr/local/heartbeat/etc/ha&lt;/span&gt;.d/resource.d&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;把zabbix-server脚本名称放入haresources文件中vim /usr/local/heartbeat/etc/ha.d/haresources&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Zabbix-HA1 IPaddr::&lt;span class=&quot;code-snippet__number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;8.4&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;24&lt;/span&gt;/eth&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; drbddisk::drbd&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; Filesystem::/dev/drbd0::/opt::xfs zabbix-server&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Zabbix-HA1主节点拷贝到Zabbix-HA2从节点&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;scp -P36091 /usr/local/heartbeat/etc/ha.d/haresources &lt;span class=&quot;code-snippet__number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;8.187&lt;/span&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;:/usr/local/heartbeat/&lt;/span&gt; etc/ha.d/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;防止mysql开机启动优先于禁用大页服务，导致tokudb 引擎加载失败(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;个节点都要设置) systemctl disable mysql&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;echo &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;systemctl start mysql&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__meta&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;/etc/rc.local&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;echo &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;systemctl start keepalived&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__meta&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;/etc/rc.local&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;06 配置数据库双主同步&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Zabbix-HA2节点备份zabbix相关配置表(有VIP地址节点导出)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;注：拷贝sql文件到Zabbix-HA1节点，导入sql&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Zabbix-HA1节点配置my.cnf 忽略要同步的历史大表&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;gtid_mode = on enforce_gtid_consistency =true log_slave_updates=true&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;master-info-repository=TABLE relay-log-info-repository=TABLE slave-parallel-workers=4&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;relay-log = /data/mysql/relay-log auto-increment-increment = 2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;auto-increment-offset = 1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;replicate-wild-ignore-table=zabbix.history replicate-wild-ignore-table=zabbix.history_uint replicate-wild-ignore-table=zabbix.history_str replicate-wild-ignore-table=zabbix.history_log replicate-wild-ignore-table=zabbix.history_text&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Zabbix-HA2节点配置my.cnf&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;gtid_mode = on enforce_gtid_consistency =true log_slave_updates=true&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;master-info-repository=TABLE relay-log-info-repository=TABLE slave-parallel-workers=4&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;relay-log = /data/mysql/relay-log auto-increment-increment = 2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;auto-increment-offset = 2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;replicate-wild-ignore-table=zabbix.history replicate-wild-ignore-table=zabbix.history_uint replicate-wild-ignore-table=zabbix.history_str replicate-wild-ignore-table=zabbix.history_log replicate-wild-ignore-table=zabbix.history_text&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;注：主从复制各个实例server-id必须唯一，分别重启mysql服务生效&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;分别在2个主节点上设置主从复制&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;在Zabbix-HA1节点和Zabbix-HA2节点上分别创建具有复制权限的用户&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;replication&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;slave&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;on&lt;/span&gt; *.* &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; repl@&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;192.168.8.%&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;identified&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;yanghui&#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;flush&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;privileges&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Zabbix-HA1节点授权允许Zabbix-HA2同步相关的表，才能开启&lt;span class=&quot;code-snippet__keyword&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;slave&lt;/span&gt;;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; master_host=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;192.168.8.187&#x27;&lt;/span&gt;,master_user=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;repl&#x27;&lt;/span&gt;,master_password=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;yanghui&#x27;&lt;/span&gt;,master_auto_position=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;flush&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;privileges&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Zabbix-HA2节点授权(允许从Zabbix-HA1同步相关的表，才能开启&lt;span class=&quot;code-snippet__keyword&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;slave&lt;/span&gt;;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; master_host=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;192.168.8.186&#x27;&lt;/span&gt;,master_user=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;repl&#x27;&lt;/span&gt;,master_password=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;yanghui&#x27;&lt;/span&gt;,master_auto_position=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;flush&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;privileges&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;双节点分别授权允许通过VIP地址远程登陆MySQL Zabbix-HA1节点节点执行(8.186)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;on&lt;/span&gt; *.* &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; root@&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;192.168.8.187&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;identified&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Zabbix@2021&#x27;&lt;/span&gt;; &lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;user&lt;/span&gt;,host,&lt;span class=&quot;code-snippet__keyword&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; mysql.user;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Zabbix-HA2节点执行(8.187)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;on&lt;/span&gt; *.* &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; root@&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;192.168.8.186&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;identified&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Zabbix@2021&#x27;&lt;/span&gt;; &lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;user&lt;/span&gt;,host,&lt;span class=&quot;code-snippet__keyword&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; mysql.user;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;分别登陆MySQL主从节点启动主从复制&lt;span class=&quot;code-snippet__keyword&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;slave&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;slave&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;status&lt;/span&gt;\G;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;drbd挂载的节点更改zabbix-web的IP地址为VIP地址&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;/opt/www_zabbix/conf/zabbix.conf.php&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sed -i &#x27;s/192.168.8.186/192.168.8.5/g&#x27; /opt/www_zabbix/conf/zabbix.conf.php sed -i &#x27;s/192.168.8.186/192.168.8.5/g &#x27; /opt/zabbix/etc/zabbix/zabbix_server.conf注：表示绿色为宿主机节点IP，红色为数据库的VIP，需重启zabbix-server服务&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;07 测试验证&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        测试Zabbix-Server + DRBD +heartbeat HA&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        systemctl restart heartbeat&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        #观察从节点是否接管Zabbix-Server VIP地址，并且服务是否正常运行&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;       注：Zabbix-HA1节点第1次切换到Zabbix-HA2节点后，zabbix-server没有正常启动，需systemctl restart zabbix-server，后续切换就能自动启动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        systemctl stop mysql&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        #观察从节点是否接管MySQL VIP地址，并且服务是否正常运行&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        注：故障节点服务切换后，修复该节点服务后，需手动启动keepalived服务来继续监听对方节点，形成HA机制&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;08 完善方案&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;keepalived+mysql HA方案完善补充缘由：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;使用脚本和定时任务监测keepalived 服务运行状态，实现mysql 故障切换后，keepalived 通过后台定时任务实现自动恢复服务。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;keepalived脚本分别放到2个节点的/etc/keepalived目录&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;echo &#x27;*/2 * * * * root /etc/keepalived/monitor-keepalived.sh&#x27; &amp;gt;&amp;gt; /etc/crontab systemctl restart crond&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;注：修改定时任务调用脚本后，一定要重启crond任务才会生效&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;heartbeat+zabbix HA方案完善补充缘由：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;heartbeat本身不对应用服务状态做判断，需要编写脚本来判断服务异常，弥补该架构的不足。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;部署supervisor&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;yum install -y supervisor&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mkdir -p /etc/supervisor/config.d&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;echo_supervisord_conf &amp;gt; /etc/supervisor/supervisord.conf&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;配置supervisord主配置文件&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cat &amp;gt;&amp;gt; /etc/supervisor/supervisord.conf &amp;lt;&amp;lt;EOF [include]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;files = /etc/supervisor/config.d/*.ini EOF&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;配置监视zabbix-server进程&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cat &amp;gt; /etc/supervisor/config.d/zabbix-server.ini &amp;lt;&amp;lt;EOF [program:zabbix-heartbeat]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;user=root&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;directory= /etc/supervisor&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;command= /bin/sh /etc/supervisor/heartbeat.sh numprocs=1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;autostart=true autorestart=true startretries=3 EOF&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;启动supervisord服务&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;systemctl enable supervisord &amp;amp;&amp;amp; systemctl start supervisord &amp;amp;&amp;amp; systemctl status supervisord&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;补充：heartbeat编译参数注解：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;vim /usr/local/heartbeat/etc/ha.d/ha.cf&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;debugfile /var/log/ha-debug  ##用于记录heartbeat的调试信息&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;logfile/var/log/ha-log  ##用于记录heartbeat的日志信息&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;logfacilitylocal0  ##设置heartbeat的日志,这里用的是系统日志&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;keepalive 2  ##设定心跳(监测)时间时间为2秒&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;deadtime 30  ##指定若备用节点在30秒内未收到主节点心跳信号,则接管主服务器资源&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;warntime 10  ##指定心跳延迟的时间为10秒,10秒内备节点不能接收主节点心跳信号，即往日志写入警告日志，但不会切换服务&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;initdead 60  ##系统启动或重启后预留的忽略时间段，取值至少为deadtime的两倍&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;udpport 694  ##广播/单播通讯使用的Udp端口&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#bcast ens32  ##使用网卡eno32发送心跳检测&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#mcast eth0 225.0.0.1 694 1 0  ##采用网卡eth0的Udp多播来组织心跳，一般在备用节点&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ucast ens32 192.168.1.64&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;##采用网卡eth32的udp单播来组织心跳，后面跟的IP地址为双机对方IP地址&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;auto_failback on  ##定义当主节点恢复后，是否将服务自动切回，争抢VIP地址&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;node xuegod63.cn node xuegod64.cn ping 192.168.1.1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;##主节点名称##备用节点名称&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;##通过ping网关检测心跳是否正常，仅用来测试网络&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;apiauth ipfail gid=haclient uid=hacluster  ##设置启动IPfail的用户和组&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;respawn hacluster /usr/local/heartbeat/libexec/heartbeat/ipfail  ##指定和heartbeat一起启动、关闭的进程注：Bcast、ucast和mcast分别代表广播、单播和多播，是组织心跳的的方式，任选其一&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;08 总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;优点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;缺点：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;危险操作&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;09 FAQ&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        drbdadm secondary r0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        drbdadm --discard-my-data connect r0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        A. 主机名与资源池(*.res) 中配置定义主机名不一致导致&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        B. 资源池(*.res) 中配置定义资源池名字与资源池(*.res) 不一致导致 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        解决方法：统一名称或者主机名即可&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今日荐文&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;点击下方图片即可阅读&lt;/p&gt;&lt;/section&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwODcyODA2MA==&amp;amp;mid=2647539438&amp;amp;idx=1&amp;amp;sn=0bea9dc3d2b834283c5fed5f13a77062&amp;amp;chksm=8350e27db4276b6b75543a6402956e9161ae599c0f2775e5436796ff999e934bbd324952841f&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.4222222222222222&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jmj2LkhPUr5q85Ow3h2HuaOJQDI7MjwgAtRPnTnl6xogpv2UicQa4UOQUGtE8EHHoCXYzJQtYc8Lcpr01BRSAGA/640?wx_fmt=png&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwODcyODA2MA==&amp;amp;mid=2647539438&amp;amp;idx=1&amp;amp;sn=0bea9dc3d2b834283c5fed5f13a77062&amp;amp;chksm=8350e27db4276b6b75543a6402956e9161ae599c0f2775e5436796ff999e934bbd324952841f&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;敏捷管理系列-Scrum就是这么简单&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e25ebd0262ff1abd257ee956d2559830</guid>
<title>Java 12 新特性介绍</title>
<link>https://toutiao.io/k/4tl64jr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java 12 早在 2019 年 3 月 19 日发布，它不是一个长久支持（LTS）版本。在这之前我们已经介绍过其他版本的新特性，如果需要可以点击下面的链接进行阅读。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Switch 表达式 (JEP 325)&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Java 12 中，对 &lt;strong&gt;Switch&lt;/strong&gt; 表达式的写法进行了改进，虽然是一个语法糖的改进，也让 &lt;strong&gt;Switch&lt;/strong&gt; 的代码编写变得更加优雅。先看一下在 Java 12 之前的 &lt;strong&gt;Switch&lt;/strong&gt; 的写法。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 通过传入月份，输出月份所属的季节&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;switchJava12Before(String day)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;switch&lt;/span&gt; (day) {&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;march&quot;&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;april&quot;&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;may&quot;&lt;/span&gt;:&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;春天&quot;&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;june&quot;&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;july&quot;&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;august&quot;&lt;/span&gt;:&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;夏天&quot;&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;september&quot;&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;october&quot;&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;november&quot;&lt;/span&gt;:&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;秋天&quot;&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;december&quot;&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;january&quot;&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;february&quot;&lt;/span&gt;:&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;冬天&quot;&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的例子中，通过传入一个月份，输出这个月份对应的季节。简单的功能却写了大量代码，而且每个操作都需要一个 &lt;code&gt;break&lt;/code&gt;来防止 &lt;strong&gt;Case 穿透&lt;/strong&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;使用预览功能&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 Switch 表达式在 Java 12 中并不是一个正式发布的功能，还处于预览测试阶段，所以想要使用 Java 12 去编译运行就需要打开功能预览参数，当然，如果你使用的是 Java 14 以及更高版本，就可以直接跳过这个部分了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 编译时&lt;/span&gt;&lt;br/&gt;./bin/javac --enable-preview -source 12 ./Xxx.java&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 运行时&lt;/span&gt;&lt;br/&gt;./bin/java --enable-preview Xxx&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果某个新特性是预览功能，这意味着这个功能&lt;strong&gt;有可能在未来的版本中删除&lt;/strong&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;Java 12 Switch&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 Switch 存在的上述问题，所以在 Java 12 中对 Switch 进行了改进，让其可以使用 &lt;code&gt;case L -&amp;gt;&lt;/code&gt; 的方式进行操作，那么在 Java 12 中可以怎么编写这段代码呢？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;switchJava12(String day)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;switch&lt;/span&gt; (day) {&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;march&quot;&lt;/span&gt;, &lt;span&gt;&quot;april&quot;&lt;/span&gt;, &lt;span&gt;&quot;may&quot;&lt;/span&gt;            -&amp;gt; System.out.println(&lt;span&gt;&quot;春天&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;june&quot;&lt;/span&gt;, &lt;span&gt;&quot;july&quot;&lt;/span&gt;, &lt;span&gt;&quot;august&quot;&lt;/span&gt;           -&amp;gt; System.out.println(&lt;span&gt;&quot;夏天&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;september&quot;&lt;/span&gt;, &lt;span&gt;&quot;october&quot;&lt;/span&gt;, &lt;span&gt;&quot;november&quot;&lt;/span&gt; -&amp;gt; System.out.println(&lt;span&gt;&quot;秋天&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;december&quot;&lt;/span&gt;, &lt;span&gt;&quot;january&quot;&lt;/span&gt;, &lt;span&gt;&quot;february&quot;&lt;/span&gt;  -&amp;gt; System.out.println(&lt;span&gt;&quot;冬天&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过测试可以得到预期的输出结果。这还不够，在 Switch 的改进中，还支持了使用 Switch 的返回值进行赋值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像下面这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;String season = &lt;span&gt;switch&lt;/span&gt; (day) {&lt;br/&gt;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;march&quot;&lt;/span&gt;, &lt;span&gt;&quot;april&quot;&lt;/span&gt;, &lt;span&gt;&quot;may&quot;&lt;/span&gt;            -&amp;gt; &lt;span&gt;&quot;春天&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;june&quot;&lt;/span&gt;, &lt;span&gt;&quot;july&quot;&lt;/span&gt;, &lt;span&gt;&quot;august&quot;&lt;/span&gt;           -&amp;gt; &lt;span&gt;&quot;春天&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;september&quot;&lt;/span&gt;, &lt;span&gt;&quot;october&quot;&lt;/span&gt;, &lt;span&gt;&quot;november&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;春天&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;december&quot;&lt;/span&gt;, &lt;span&gt;&quot;january&quot;&lt;/span&gt;, &lt;span&gt;&quot;february&quot;&lt;/span&gt;  -&amp;gt; &lt;span&gt;&quot;春天&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;default&lt;/span&gt; -&amp;gt; {&lt;br/&gt;      &lt;span&gt;//throw new RuntimeException(&quot;day error&quot;)&lt;/span&gt;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;day error&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;break&lt;/span&gt; &lt;span&gt;&quot;day error&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;System.out.println(&lt;span&gt;&quot;当前季节是:&quot;&lt;/span&gt; + season);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然编写更加简单了，其实这些只不过是语法糖式的更新，编译后和之前并没有太大区别。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;文件对比 Files.mismatch&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Java 中对于文件的操作已经在 Java 7 中进行了一次增强，这次 Java 12 又带来了文件对比功能。对比两个文件，如果内容一致，会返回 -1 ，如果内容不同，会返回不同的字节开始位置。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 创建两个文件&lt;/span&gt;&lt;br/&gt;Path pathA = Files.createFile(Paths.get(&lt;span&gt;&quot;a.txt&quot;&lt;/span&gt;));&lt;br/&gt;Path pathB = Files.createFile(Paths.get(&lt;span&gt;&quot;b.txt&quot;&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 写入相同内容&lt;/span&gt;&lt;br/&gt;Files.write(pathA,&lt;span&gt;&quot;abc&quot;&lt;/span&gt;.getBytes(), StandardOpenOption.WRITE);&lt;br/&gt;Files.write(pathB,&lt;span&gt;&quot;abc&quot;&lt;/span&gt;.getBytes(), StandardOpenOption.WRITE);&lt;br/&gt;&lt;span&gt;long&lt;/span&gt; mismatch = Files.mismatch(pathA, pathB);&lt;br/&gt;System.out.println(mismatch);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 追加不同内容&lt;/span&gt;&lt;br/&gt;Files.write(pathA,&lt;span&gt;&quot;123&quot;&lt;/span&gt;.getBytes(), StandardOpenOption.APPEND);&lt;br/&gt;Files.write(pathB,&lt;span&gt;&quot;321&quot;&lt;/span&gt;.getBytes(), StandardOpenOption.APPEND);&lt;br/&gt;mismatch = Files.mismatch(pathA, pathB);&lt;br/&gt;System.out.println(mismatch);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 删除创建的文件&lt;/span&gt;&lt;br/&gt;pathA.toFile().deleteOnExit();&lt;br/&gt;pathB.toFile().deleteOnExit();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// RESULT&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// -1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 3&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对比功能的实现可以直接阅读源码，还是很简单的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Compact Number&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简化的数字格式可以直接转换数字显示格式，比如 1000 -&amp;gt; 1K，1000000 -&amp;gt; 1M 。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;System.out.println(&lt;span&gt;&quot;Compact Formatting is:&quot;&lt;/span&gt;);&lt;br/&gt;NumberFormat upvotes = NumberFormat.getCompactNumberInstance(&lt;span&gt;new&lt;/span&gt; Locale(&lt;span&gt;&quot;en&quot;&lt;/span&gt;, &lt;span&gt;&quot;US&quot;&lt;/span&gt;), Style.SHORT);&lt;br/&gt;&lt;br/&gt;System.out.println(upvotes.format(&lt;span&gt;100&lt;/span&gt;));&lt;br/&gt;System.out.println(upvotes.format(&lt;span&gt;1000&lt;/span&gt;));&lt;br/&gt;System.out.println(upvotes.format(&lt;span&gt;10000&lt;/span&gt;));&lt;br/&gt;System.out.println(upvotes.format(&lt;span&gt;100000&lt;/span&gt;));&lt;br/&gt;System.out.println(upvotes.format(&lt;span&gt;1000000&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 设置小数位数&lt;/span&gt;&lt;br/&gt;upvotes.setMaximumFractionDigits(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;System.out.println(upvotes.format(&lt;span&gt;1234&lt;/span&gt;));&lt;br/&gt;System.out.println(upvotes.format(&lt;span&gt;123456&lt;/span&gt;));&lt;br/&gt;System.out.println(upvotes.format(&lt;span&gt;12345678&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以得到输出如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;100&lt;br/&gt;1K&lt;br/&gt;10K&lt;br/&gt;100K&lt;br/&gt;1M&lt;br/&gt;1.2K&lt;br/&gt;123.5K&lt;br/&gt;12.3M&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;JVM 相关更新&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Shenandoah 垃圾收集器&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java 12 增加了 Shenandoah 一个低停顿的垃圾收集器，它可以和 Java 应用程序中的执行线程同时进行，用来收集垃圾进行内容回收，这样就可以让停顿时间更少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更多关于 Shenandoah 垃圾收集器的介绍可以查看文档：Shenandoah GC 介绍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;ZGC 并发类卸载&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Z 垃圾收集器现在支持类卸载，通过卸载不使用的类来释放这些类相关的数据结构，从而减少应用程序的总体占用空间。因为是并发执行，所以不会停止 Java 应用程序线程的执行，也因此对 GC 的暂停时间影响微乎其微。默认情况下启用此功能，但可以使用命令行选项禁用&lt;code&gt;-XX:-ClassUnloading&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;JVM 常量 API&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在包 &lt;code&gt;java.lang.invoke.constant&lt;/code&gt; 中定义了一系列的基于值的符号引用，可以用来描述各种可加载常量。可以更容易的对关键类文件和运行时构建的名义描述进行建模，特别是对那些从常量池中加载的常量，也让开发者可以更简单标准的处理可加载常量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;默认使用类数据共享（CDS）&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这已经不是 JDK 第一次改进 CDS（Class Data Sharing） 功能了，CDS 可以让 JVM 在同一台机器或虚拟机上启动多个应用的速度速度大大增加。原理是在启动应用时共享一些类加载信息，这样启动新进程时就可以使用共享的数据。在  Java 12 之前此功能需要手动开启，Java 12 调整为默认开启。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;微基准套件&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java 12  中添加一套新的基于 JMH 的基本的微基准测试套件。之前也介绍过 JMH 的使用，可以参考之前文章 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;amp;mid=2247484198&amp;amp;idx=1&amp;amp;sn=258709d13c237517f3455288be3b1e8e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;JMH - Java 代码性能测试的终极利器&lt;/a&gt; 。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;其他更新&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1. 支持 Unicode 11&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Java 11 支持了 Unicode 10 之后， Java 12 支持了 Unicode 11，支持操作更多的表情、符号。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;文中示例已经上传到 github/niumoo/jdk-feature&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[1] http://openjdk.java.net/projects/jdk/12/&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[2] https://wiki.openjdk.java.net/display/shenandoah/Main&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[3] http://unicode.org/versions/Unicode11.0.0/&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c05d2e8a7349d2c7e33bf7e7ea73b94e</guid>
<title>Spring Cloud Alibaba 微服务实战（二十七）：禁止直接访问后端服务</title>
<link>https://toutiao.io/k/wh6oj4c</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用SpringCloud架构后我们希望所有的请求都需要经过网关才能访问，在不作任何处理的情况下我们是可以绕过网关直接访问后端服务的。如下，我们绕过网关直接访问后端服务也是可以获取到数据的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.48625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4jGQ5myetqIWr2y26CdbWYd1nLhBviaUcE42Xp84HJiaD86s0rFrdyAbZ9gZumupRw1yDUUf68jeibMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们今天的议题就是 &lt;strong&gt;如何防止请求绕过网关直接访问后端服务？&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;解决方案&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我觉得防止绕过网关直接请求后端服务的解决方案主要有三种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;使用Kubernetes部署&lt;/p&gt;&lt;p&gt;在使用Kubernetes部署SpringCloud架构时我们给网关的Service配置NodePort，其他后端服务的Service使用ClusterIp，这样在集群外就只能访问到网关了。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;网络隔离&lt;/p&gt;&lt;p&gt;后端普通服务都部署在内网，通过防火墙策略限制只允许网关应用访问后端服务。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;应用层拦截&lt;/p&gt;&lt;p&gt;请求后端服务时通过拦截器校验请求是否来自网关，如果不来自网关则提示不允许访问。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们着重关注在应用层拦截这种解决方案。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现思路&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现思路其实也很简单，在请求经过网关的时候给请求头中增加一个额外的Header，在后端服务中写一个拦截器，判断请求头是否与在网关设置的请求Header一致，如果不一致则不允许访问并给出提示。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然为了防止在每个后端服务都需要编写这个拦截器，我们可以将其写在一个公共的starter中，让后端服务引用即可。而且为了灵活，可以通过配置决定是否只允许后端服务访问。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们看看核心代码。（代码中涉及 SpringBoot 编写公共Starter的套路，相信看过我博客的同学肯定是会的，因为之前文章有详细说过。）&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现过程&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在网关&lt;code&gt;cloud-gateway&lt;/code&gt;模块编写网关过滤器&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Order&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;GatewayRequestFilter&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;GlobalFilter&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Mono&amp;lt;Void&amp;gt; &lt;span&gt;filter&lt;/span&gt;&lt;span&gt;(ServerWebExchange exchange, GatewayFilterChain chain)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;byte&lt;/span&gt;[] token = Base64Utils.encode((CloudConstant.GATEWAY_TOKEN_VALUE).getBytes());&lt;br/&gt;        String[] headerValues = {&lt;span&gt;new&lt;/span&gt; String(token)};&lt;br/&gt;        ServerHttpRequest build = exchange.getRequest()&lt;br/&gt;                .mutate()&lt;br/&gt;                .header(CloudConstant.GATEWAY_TOKEN_HEADER, headerValues)&lt;br/&gt;                .build();&lt;br/&gt;&lt;br/&gt;        ServerWebExchange newExchange = exchange.mutate().request(build).build();&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; chain.filter(newExchange);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在请求经过网关时添加额外的Header，为了方便这里直接设置成固定值。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;建立公共Starter模块&lt;code&gt;cloud-component-security-starter&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.3125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4jGQ5myetqIWr2y26CdbWYdeIia6navFwFUjn6xk6PXythOmRUicFrlTmOSAfcX96J5hLibOWuQicTia8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;512&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span&gt;&quot;javadaily.cloud&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CloudSecurityProperties&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 是否只能通过网关获取资源&lt;br/&gt;     * 默认为True&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Boolean onlyFetchByGateway = Boolean.TRUE;&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ServerProtectInterceptor&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;HandlerInterceptor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; CloudSecurityProperties properties;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;preHandle&lt;/span&gt;&lt;span&gt;(@NonNull HttpServletRequest request, @NonNull HttpServletResponse response, @NonNull Object handler)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!properties.getOnlyFetchByGateway()) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        String token = request.getHeader(CloudConstant.GATEWAY_TOKEN_HEADER);&lt;br/&gt;&lt;br/&gt;        String gatewayToken = &lt;span&gt;new&lt;/span&gt; String(Base64Utils.encode(CloudConstant.GATEWAY_TOKEN_VALUE.getBytes()));&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (StringUtils.equals(gatewayToken, token)) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            ResultData&amp;lt;String&amp;gt; resultData = &lt;span&gt;new&lt;/span&gt; ResultData&amp;lt;&amp;gt;();&lt;br/&gt;            resultData.setSuccess(&lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;            resultData.setStatus(HttpServletResponse.SC_FORBIDDEN);&lt;br/&gt;            resultData.setMessage(&lt;span&gt;&quot;请通过网关访问资源&quot;&lt;/span&gt;);&lt;br/&gt;            WebUtils.writeJson(response,resultData);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setProperties&lt;/span&gt;&lt;span&gt;(CloudSecurityProperties properties)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.properties = properties;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CloudSecurityInterceptorConfigure&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;WebMvcConfigurer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; CloudSecurityProperties properties;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setProperties&lt;/span&gt;&lt;span&gt;(CloudSecurityProperties properties)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.properties = properties;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; HandlerInterceptor &lt;span&gt;serverProtectInterceptor&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        ServerProtectInterceptor interceptor = &lt;span&gt;new&lt;/span&gt; ServerProtectInterceptor();&lt;br/&gt;        interceptor.setProperties(properties);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; interceptor;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;addInterceptors&lt;/span&gt;&lt;span&gt;(InterceptorRegistry registry)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        registry.addInterceptor(serverProtectInterceptor());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(CloudSecurityProperties&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;CloudSecurityAutoConfigure&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; CloudSecurityInterceptorConfigure &lt;span&gt;cloudSecurityInterceptorConfigure&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; CloudSecurityInterceptorConfigure();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;建立资源文件spring.factories，配置Bean的自动加载&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;org.springframework.boot.autoconfigure.EnableAutoConfiguration=\&lt;br/&gt;   com.javadaily.component.security.configure.CloudSecurityAutoConfigure&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在后端服务配置文件中添加属性配置，默认只能通过网关访问&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;javadaily:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;cloud:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;onlyFetchByGateway:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过以上几步，一个公共的Starter模块就构建完成了。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;后端服务引用此公共Starter模块即可，以&lt;code&gt;account-service&lt;/code&gt;为例&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.jianzh5.cloud&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;cloud-component-security-starter&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现效果&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接访问后端服务接口   &lt;br/&gt;&lt;code&gt;http://localhost:8010/account/getByCode/jianzh5&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.28125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4jGQ5myetqIWr2y26CdbWYdOaLiaYnCSnyZ6ufibiaXlSic75TxJ9tlAicGpvt5y54H9FPSxYLlibwQaCmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;返回结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;message&quot;&lt;/span&gt;: &lt;span&gt;&quot;请通过网关访问资源&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;status&quot;&lt;/span&gt;: &lt;span&gt;403&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;success&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;timestamp&quot;&lt;/span&gt;: &lt;span&gt;1611660015830&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>