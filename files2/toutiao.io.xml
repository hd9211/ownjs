<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>5d569afef5a39f6c3c6cea776bf87b84</guid>
<title>工具 | 一款 Golang 实现的分布式事务管理器</title>
<link>https://toutiao.io/k/curakqj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9896286810b21576a4c6a6119395eb0b</guid>
<title>[推荐] Kubernetes CKA 证书备考笔记</title>
<link>https://toutiao.io/k/0iresk6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;figure&gt;&lt;span&gt;Kubernetes 使用有好几年了，但在今年 5 月才完成 CKA 的考试。虽说用了几年，还是提前刷了部分题熟悉下。&lt;/span&gt;&lt;br/&gt;&lt;/figure&gt;&lt;p&gt;绝大部分题都是有在 minikube 的环境上操作过，只有部分比如升级集群受限于环境问题没有实地操作。&lt;/p&gt;&lt;h2&gt;写在最前&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;保存常用文档进书签，如果有 Alfred 启用浏览器书签 workflow。效果见下图&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;kubectl 自动补全 &lt;code&gt;echo &quot;source &amp;lt;(kubectl completion bash)&quot; &amp;gt;&amp;gt; ~/.bashrc; source ~/.bashrc&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;每道题开始前要切换 context 和 namespace，直接复制题目里的命令即可&lt;/span&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;必要的 alias&lt;/span&gt;&lt;span&gt;&lt;span&gt;5.&lt;/span&gt;善用 &lt;code&gt;--dry-run=client -o yaml&lt;/code&gt; 避免手动敲太多&lt;/span&gt;&lt;span&gt;&lt;span&gt;6.&lt;/span&gt;善用 &lt;code&gt;kubectl explain [resource[.field]]&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;7.&lt;/span&gt;看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/span&gt;&lt;span&gt;&lt;span&gt;8.&lt;/span&gt;看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/span&gt;&lt;span&gt;&lt;span&gt;9.&lt;/span&gt;看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;书签地址：&lt;span&gt;K8s-CKA-CAKD-Bookmarks.html&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.4895666131621188&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tMghG0NOfxePhCYHSQbXMWDL5RIdib1Xnm6plbEd3dyxLFNricXQxa4gjvicyxJuyicFKia7PrCibl6QQgYjcpgD4vuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;623&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;alfred-bookmarks-workflow&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;安全：RBAC&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;在默认命名空间中创建一个名为 dev-sa 的服务帐户，dev-sa 可以在 dev 命名空间中创建以下组件： &lt;code&gt;Deployment&lt;/code&gt;、&lt;code&gt;StatefulSet&lt;/code&gt;、&lt;code&gt;DaemonSet&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;role&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;sa&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;rolebinding&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;auth can-i&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档： https://kubernetes.io/docs/reference/access-authn-authz/rbac/#command-line-utilities&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl create sa dev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;sa&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl create role dev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;role &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;verb&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;create &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;deployment&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;statefulset&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;daemonset&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#检查&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl describe role dev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;         dev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Annotations&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;PolicyRule&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Resources&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;Non&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;Resource&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;URLs&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Resource&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Names&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Verbs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;---------&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;-----------------&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;--------------&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-----&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  daemonsets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;apps    &lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt;                 &lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt;              &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  deployments&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;apps   &lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt;                 &lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt;              &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  statefulsets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;apps  &lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt;                 &lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt;              &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl create rolebinding dev &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;serviceaccount &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;dev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;sa &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;role dev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#检查&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl auth can&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i create deployment &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; system&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;serviceaccount&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;dev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;sa&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl auth can&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i create statefulset &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; system&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;serviceaccount&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;dev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;sa&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl auth can&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i create daemonset &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; system&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;serviceaccount&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;dev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;sa&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl auth can&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i create pod &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; system&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;serviceaccount&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;dev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;sa&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;no&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;多容器 Pod&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;创建一个pod名称日志，容器名称 &lt;code&gt;log-pro&lt;/code&gt; 使用image &lt;code&gt;busybox&lt;/code&gt;，在 &lt;code&gt;/log/data/output.log&lt;/code&gt; 输出重要信息。然后另一个容器名称 &lt;code&gt;log-cus&lt;/code&gt; 使用 image &lt;code&gt;busybox&lt;/code&gt;，在 &lt;code&gt;/log/data/output.log&lt;/code&gt; 加载 &lt;code&gt;output.log&lt;/code&gt; 并打印它。 请注意，此日志文件只能在 pod 内共享。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;pod&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;volume: emptyDir&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档： https://kubernetes.io/docs/concepts/storage/volumes/#emptydir&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kubectl run log &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image busybox &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;dry&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;client &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o yaml &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; log&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;修改 log.yaml&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  creationTimestamp&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    run&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; log&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; log&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  containers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; command&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; sh&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; echo important information &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/log/&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;output&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; sleep &lt;/span&gt;&lt;span&gt;1d&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; busybox&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; log&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pro&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    resources&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    imagePullPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;IfNotPresent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    volumeMounts&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; mountPath&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/log/&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; log&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; command&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; sh&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; tail &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;f &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;output&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; busybox&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; log&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;cus&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    imagePullPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;IfNotPresent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    volumeMounts&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; mountPath&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/log/&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; log&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  dnsPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ClusterFirst&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  restartPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Always&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  volumes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; log&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    emptyDir&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;执行创建 &lt;code&gt;kubectl apply -f log.yaml&lt;/code&gt;&lt;/p&gt;&lt;p&gt;检查&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl logs log &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;c log&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;cus&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;important information&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;安全：网络策略 NetworkPolicy&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;只有命名空间 &lt;code&gt;mysql&lt;/code&gt; 的 pod 只能被另一个命名空间 &lt;code&gt;internal&lt;/code&gt; 的 pod 通过 8080 端口进行访问&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;NetworkPolicy&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Ingress&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档： https://kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; networking&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;k8s&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;io&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;NetworkPolicy&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; cka&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;network&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; target &lt;/span&gt;&lt;span&gt;#目的命名空间&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  podSelector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  policyTypes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Ingress&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;#策略影响入栈流量&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  ingress&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;#允许流量的来源&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; namespaceSelector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        matchLabels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          ns&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; source &lt;/span&gt;&lt;span&gt;#源命名空间的 label&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    ports&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; protocol&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; TCP&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      port&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;#允许访问的端口&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;节点状态及污点&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;统计这个集群中没有污染的就绪节点，并输出到文件 &lt;code&gt;/root/cka/readyNode.txt&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Node&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Taint（污点）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档：https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# Ready 状态的数量&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; node &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;w &lt;/span&gt;&lt;span&gt;Ready&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; wc &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 查看含有 Taint 的数量，需要排除掉这些&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl describe node &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;Taints&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;NoSchedule&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; wc &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;资源&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;将占用CPU资源最多的pod名称输出到文件 &lt;code&gt;/root/cka/name.txt&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;kubectl top 命令&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;metrics&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;如果是 minikube 环境，报错 &lt;code&gt;error: Metrics API not available&lt;/code&gt;，可以执行 &lt;code&gt;minikube addons enable metrics-server&lt;/code&gt; 命令开启 metrics server。&lt;/p&gt;&lt;p&gt;通过 &lt;code&gt;kubectl top&lt;/code&gt; 命令找到 cpu 最高的 pod，将其名字写入 &lt;code&gt;/root/cka/name.txt&lt;/code&gt;。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl top pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 或者&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl top pod &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; sort &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;k &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;网络：DNS&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;有 pod 名称 &lt;code&gt;pod-nginx&lt;/code&gt;，创建服务名称 &lt;code&gt;service-nginx&lt;/code&gt;，使用 &lt;code&gt;nodePort&lt;/code&gt; 暴露pod。 然后创建一个 pod 使用 image &lt;code&gt;busybox&lt;/code&gt; 来 &lt;code&gt;nslookup&lt;/code&gt; pod &lt;code&gt;pod-nginx&lt;/code&gt; 和 service &lt;code&gt;service-nginx&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;service with nodePort&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;kubectl expose&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;kubectl run&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档：https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;kubectl expose&lt;/code&gt; 创建 service。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 创建 service&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kubectl expose pod pod&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;nginx &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;name service&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;nginx &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;type &lt;/span&gt;&lt;span&gt;NodePort&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;port &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 创建 pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kubectl run busybox &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image busybox&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;latest &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;command sleep &lt;/span&gt;&lt;span&gt;1h&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;获取 pod 的 ip 地址，pod 的 dns lookup 需要用用到 ip。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; po &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o wide&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;NAME        READY   STATUS    RESTARTS   AGE     IP           NODE   NOMINATED NODE   READINESS GATES&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;busybox     &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;2m17s&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;   cka    &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;pod&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;nginx   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;59m&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0.4&lt;/span&gt;&lt;span&gt;   cka    &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;执行 nslookup&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;exec&lt;/span&gt;&lt;span&gt; busybox &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;it &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; nslookup &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0.4&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;4.0&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;17.172&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;addr&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;arpa    name &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;172&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;4.service&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;svc&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;cluster&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;local&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;exec&lt;/span&gt;&lt;span&gt; busybox &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;it &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; nslookup service&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Server&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;10.96&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0.10&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Address&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;10.96&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0.10&lt;/span&gt;&lt;span&gt;#53&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;    service&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;svc&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;cluster&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;local&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Address&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10.110&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;253.70&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;工作负载：扩容&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;将命名空间 &lt;code&gt;dev&lt;/code&gt; 中的 Deployment &lt;code&gt;scale-deploy&lt;/code&gt; 缩放到三个 pod 并记录下来。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;参考文档：https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment&lt;/p&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;deployment scale up&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;kubectl scale&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;&lt;code&gt;kubectl scale&lt;/code&gt; 的使用，需要参数 &lt;code&gt;--record&lt;/code&gt; 进行记录（将操作命令记录到 deployment 的 &lt;code&gt;kubernetes.io/change-cause&lt;/code&gt; annotation 中）。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl scale deployment scale&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;deploy &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;replicas &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;record&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;集群备份及恢复&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;备份 etcd 并将其保存在主节点上的 &lt;code&gt;/root/cka/etcd-backup.db&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;最后恢复备份。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;etcd 的备份及恢复&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档：https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;Kubernetes 的所有数据都记录在 etcd 中，对 etcd 进行备份就是对集群进行备份。&lt;/p&gt;&lt;p&gt;连接 etcd 需要证书，证书可以从 apiserver 获取，因为 apiserver 需要连接 etcd。新版本的 apiserver 都是以 static pod 的方式运行，证书是通过 volume 挂载到 pod 中的。&lt;/p&gt;&lt;p&gt;比如 minikube 环境，证书是从 node 节点的 &lt;code&gt;/var/lib/minikube/certs&lt;/code&gt; 挂载进去的。&lt;/p&gt;&lt;p&gt;要先 ssh 到 master 节点上。命令的执行非常快，如果长时间没结束，那就说名有问题了。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#备份&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ ETCDCTL_API&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; etcdctl snapshot save &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;cka&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;backup&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;db \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;endpoints&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;https&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;//127.0.0.1:2379 \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;cacert&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;certs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;ca&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;crt \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;cert&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;certs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;apiserver&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;crt \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;certs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;apiserver&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;由于只说了 restore，所以就执行 restore 的命令，默认会恢复到当前目录的 &lt;code&gt;default.etcd&lt;/code&gt; 下。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#恢复&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ ETCDCTL_API&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; etcdctl snapshot restore &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;cka&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;backup&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;db \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;endpoints&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;https&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;//127.0.0.1:2379 \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;cacert&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;certs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;ca&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;crt \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;cert&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;certs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;apiserver&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;crt \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;certs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;apiserver&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;集群节点升级&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;将master节点版本从 1.20.0 升级到 1.21.0，确保 master 节点上的 pod 重新调度到其他节点，升级完成后，使 master 节点可用。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;drain&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;cordon&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档：https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/#upgrading-control-plane-nodes&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;受限于环境，没有实地操作。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 将节点设置为不可调度&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl cordon master&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 驱逐 master 节点上的 pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl drain master &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;ignore&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;daemonsets&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 进行升级&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ apt&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;mark unhold kubelet kubectl &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apt&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; update &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; apt&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; install &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;y kubelet&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1.21&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;00&lt;/span&gt;&lt;span&gt; kubectl&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1.21&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;00&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apt&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;mark hold kubelet kubectl&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 重新启动kubelet&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ systemctl daemon&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;reload&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ systemctl restart kubelet&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 将节点设置为可调度&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl uncordon master&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;集群：节点故障排查&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;现在 node01 还没有准备好，请找出根本原因并使其准备好，然后创建一个确保它在 node01 上运行的 pod。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;节点故障排查&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;这种问题大概率问题出在 kubelet 上&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;ssh node01&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;systemctl status kubelet&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;systemctl restart kubelet&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 再检查node状态&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;插播一个故障，本地安装 2 个节点的 minikube 集群时，第二个节点持续 &lt;code&gt;NotReady&lt;/code&gt;。使用 &lt;code&gt;systemctl status kubelet&lt;/code&gt; 看到 &lt;code&gt;unable to update cni config: no networks found in /etc/cni/net.mk&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;检查该目录确实没有文件，从 master 节点复制到该节点后重启 kubelet 解决。&lt;/p&gt;&lt;h2&gt;存储：持久化卷&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;集群中有一个持久卷名称 &lt;code&gt;dev-pv&lt;/code&gt;，创建一个持久卷声明名称 &lt;code&gt;dev-pvc&lt;/code&gt;，确保这个持久卷声明会绑定持久卷，然后创建一个 pod 名称 &lt;code&gt;test-pvc&lt;/code&gt;，将这个 pvc 挂载到 path &lt;code&gt;/tmp/data&lt;/code&gt;，使用 nginx 镜像。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;PersistentVolume&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;PersistentVolumeClaim&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Mount Volume&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档：https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;创建 pvc 前先获取 pv的信息&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pv dev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pv &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;创建 pv&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ cat &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; pvc&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;PersistentVolumeClaim&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; dev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pvc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  accessModes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ReadWriteOnce&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  resources&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    requests&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      storage&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1Gi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl apply &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;f pvc&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;创建 pod 的 manifest，记得使用 &lt;code&gt;kubectl run --dry-run=client -o yaml&lt;/code&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kubectl run test&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pvc &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image nginx &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;dry&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;client &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o yaml &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; test&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pvc&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;修改之后得到最终的 pod yaml&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  creationTimestamp&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    run&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; test&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pvc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; test&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pvc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  volumes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      persistentVolumeClaim&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        claimName&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; dev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pvc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  containers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; nginx&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; test&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pvc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    resources&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    volumeMounts&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        mountPath&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/tmp/&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  dnsPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ClusterFirst&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  restartPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Always&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;理论上只要 pod 能运行，就说明成功。也可以进一步确认挂载是否成功，在 pod 的 &lt;code&gt;/tmp/data&lt;/code&gt; 中 touch 个文件，然后到节点的目录中查看是有该文件。&lt;/p&gt;&lt;h2&gt;工作负载：多容器的 Deployment&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;创建一个名为 &lt;code&gt;deploy-important&lt;/code&gt; 的 Deployment，标签为 &lt;code&gt;id=very-important&lt;/code&gt;（pod 也应该有这个标签）和命名空间 dev 中的 3 个副本。 它应该包含两个容器，第一个名为 &lt;code&gt;container1&lt;/code&gt; 并带有镜像，第二个名为 container2 的图像为 &lt;code&gt;kubernetes/pause&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;在一个工作节点上应该只运行该部署的一个 Pod。 我们有两个工作节点：&lt;code&gt;cluster1-worker1&lt;/code&gt; 和 &lt;code&gt;cluster1-worker2&lt;/code&gt;。 因为 Deployment 有三个副本，所以结果应该是在两个节点上都有一个 Pod 正在运行。 不会调度第三个 Pod，除非添加新的工作节点。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;deployment&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;pod label&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;replicas&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;multi container pod&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;pod anti affinity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;官方文档参考：https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#never-co-located-in-the-same-node&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;先创建模板&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl create deployment deploy&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;important &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image nginx &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;replicas &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;dry&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;client &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o yaml &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; deploy&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;important&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;修改后的 yaml&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; apps&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Deployment&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  creationTimestamp&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deploy&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;important&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; very&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;important&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deploy&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;important&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  replicas&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  selector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    matchLabels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deploy&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;important&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; very&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;important&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  strategy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      creationTimestamp&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deploy&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;important&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; very&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;important&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      affinity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        podAntiAffinity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          requiredDuringSchedulingIgnoredDuringExecution&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; labelSelector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;              matchExpressions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;              &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; key&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;operator&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;In&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                values&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; very&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;important&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            topologyKey&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; kubernetes&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;io&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      containers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; nginx&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; container1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        resources&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; container2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;minikube 上测试只能调度一个 pod，符合预期&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kgpo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;NAME                                READY   STATUS    RESTARTS   AGE&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;deploy&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;important&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;659d54fc47&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;6cp8r&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Pending&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;3h10m&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;deploy&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;important&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;659d54fc47&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;92z4d&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;3h10m&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;deploy&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;important&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;659d54fc47&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;c6llc   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Pending&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;3h10m&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;存储：Secret的使用&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;在 &lt;code&gt;secret&lt;/code&gt; 命名空间下，使用镜像 &lt;code&gt;busybox:1.31.1&lt;/code&gt; 创建一个名为 &lt;code&gt;secret-pod&lt;/code&gt; 的 pod，并保证 pod 运行一段时间&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;有个名为 &lt;code&gt;sercret1.yaml&lt;/code&gt; 的 Secret 文件，在 &lt;code&gt;secret&lt;/code&gt; 命名空间下创建 Secret，并以只读的方式挂在到 Pod 的 &lt;code&gt;/tmp/secret1&lt;/code&gt; 目录 创建一个新的 Secret &lt;code&gt;secret2&lt;/code&gt; 包含 &lt;code&gt;user=user1&lt;/code&gt; 和 &lt;code&gt;pass=1234&lt;/code&gt;，分别以缓解变量 &lt;code&gt;APP_USER&lt;/code&gt; 和 &lt;code&gt;APP_PASS&lt;/code&gt; 输入到 Pod 中&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;secret&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;toleration&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;taints&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档： https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;创建 namespace&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl create ns secret&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;创建 pod 模板&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;$&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl run secret&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image busybox&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1.31&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;dry&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;client &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o yaml &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;command &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; sleep &lt;/span&gt;&lt;span&gt;1d&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; secret&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;修改 secret1.yaml，使用 secret namespace&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  halt&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;IyEvYmluL2Jhc2g&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Secret&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  creationTimestamp&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;2021-05-15T07:48:02Z&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; secret1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; secret&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Opaque&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;创建 secret2&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl create secret generic secret2 &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;literal user&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;user1 &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;literal &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1234&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;修改模板&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  creationTimestamp&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    run&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; secret&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; secret&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  containers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; command&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; sleep&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1d&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; busybox&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1.31&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; secret&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    env&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; APP_USER&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      valueFrom&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        secretKeyRef&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; secret2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          key&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; user&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; APP_PASS&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      valueFrom&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        secretKeyRef&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; secret2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          key&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    resources&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    volumeMounts&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; mountPath&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/tmp/&lt;/span&gt;&lt;span&gt;secret1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; sec&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  dnsPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ClusterFirst&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  restartPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Always&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  volumes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; sec&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    secret&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      secretName&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; secret1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;检查结果：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;exec&lt;/span&gt;&lt;span&gt; secret&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; cat &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;tmp&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;secret1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;halt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;exec&lt;/span&gt;&lt;span&gt; secret&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; env &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;&#x27;APP_&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;APP_USER&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;user1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;APP_PASS&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1234&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;工作负载：静态 Pod&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;在 &lt;code&gt;cluster3-master1&lt;/code&gt; 上的 &lt;code&gt;default&lt;/code&gt; 命名空间中创建一个名为 &lt;code&gt;my-static-pod&lt;/code&gt; 的静态 Pod。 使用镜像 &lt;code&gt;nginx:1.16-alpine&lt;/code&gt; 并分配 10m CPU 和 20Mi 内存的资源。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Then create a NodePort Service named static-pod-service which exposes that static Pod on port 80 and check if it has Endpoints and if its reachable through the cluster3-master1 internal IP address. You can connect to the internal node IPs from your main terminal. 然后创建一个名为&lt;code&gt;static-pod-service&lt;/code&gt; 的 NodePort Service，该服务在端口 80 上公开该静态 Pod，并检查它是否具有端点以及是否可以通过 &lt;code&gt;cluster3-master1&lt;/code&gt; 内部 IP 地址访问它。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;static pod&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;resource&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;nodeport service&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;endpoints&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;https://kubernetes.io/docs/tasks/configure-pod-container/static-pod/&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;创建pod模板&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl run &lt;/span&gt;&lt;span&gt;my&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image nginx&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1.16&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;alpine &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;dry&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;client &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o yaml &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;修改模板，增加资源配置&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  creationTimestamp&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    run&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;my&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;my&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  containers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; nginx&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1.16&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;alpine&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;my&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    resources&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      requests&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        cpu&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;10m&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        memory&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;20Mi&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  dnsPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ClusterFirst&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  restartPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Always&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;ssh 到主机，找到 kubelet 配置文件的位置 &lt;code&gt;ps -ef | grep kubelet&lt;/code&gt;&lt;/p&gt;&lt;p&gt;查看配置文件（minikube：/var/lib/kubelet/config.yaml）中 &lt;code&gt;staticPodPath&lt;/code&gt; 配置的就是静态 pod 的 manifest 的位置（minikube：/etc/kubernetes/manifests）&lt;/p&gt;&lt;p&gt;将 &lt;code&gt;static-pod.yaml&lt;/code&gt; 放到正确的文件夹中，然后重启 kubelet&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ systemctl restart kubelet&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;检查pod是否正确运行&lt;/p&gt;&lt;p&gt;创建 node port&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl expose pod &lt;/span&gt;&lt;span&gt;my&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;name &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;service &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;type &lt;/span&gt;&lt;span&gt;NodePort&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;port &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;检查是否创建成功&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; svc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;NAME                 TYPE        CLUSTER&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;IP     EXTERNAL&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;IP   PORT&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;        AGE&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;service   &lt;/span&gt;&lt;span&gt;NodePort&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;10.97&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;248.99&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;31938&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;TCP   &lt;/span&gt;&lt;span&gt;68s&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;获取 node 的 ip&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; node &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o wide&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;NAME   STATUS   ROLES    AGE   VERSION   INTERNAL&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;IP    EXTERNAL&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;IP   OS&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;IMAGE               KERNEL&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;VERSION   CONTAINER&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;RUNTIME&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;cka    &lt;/span&gt;&lt;span&gt;Ready&lt;/span&gt;&lt;span&gt;    master   &lt;/span&gt;&lt;span&gt;10h&lt;/span&gt;&lt;span&gt;   v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;18.8&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;64.3&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;Buildroot&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2020.02&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;4.19&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;&lt;span&gt;         docker&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;//20.10.4&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;在 minikube 的环境下可直接通过 &lt;code&gt;minikube ip&lt;/code&gt; 获取&lt;/p&gt;&lt;p&gt;测试&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ http &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;64.3&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;31938&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;headers&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;HTTP&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1.1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt; OK&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Accept&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;Ranges&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; keep&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;alive&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Content&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;Length&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;612&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Content&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;Type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; text&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Date&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Sat&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;May&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2021&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;08&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt; GMT&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;ETag&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;5d52db33-264&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Last&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;Modified&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Tue&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Aug&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2019&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;&lt;span&gt; GMT&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Server&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; nginx&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1.16&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;调度：污点和容忍度&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;在命名空间 &lt;code&gt;default&lt;/code&gt; 中创建图像 &lt;code&gt;httpd:2.4.41-alpine&lt;/code&gt; 的单个 Pod。Pod 应命名为 &lt;code&gt;pod1&lt;/code&gt;，容器名为 &lt;code&gt;pod1-container&lt;/code&gt;。在不给任何节点添加新标签的前提下，将该 pod 调度到主节点上。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Taint&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Label&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Tolerance&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档：https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#找出master节点（一般考试只有一个节点）&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; node&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#找到 master 节点的 taints，需要在 pod 的 .spec.tolerations 排除掉&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl describe node xxxx &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;w &lt;/span&gt;&lt;span&gt;Taints&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#找到 master 节点的 labels&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl describe node xxxx &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;w &lt;/span&gt;&lt;span&gt;Labels&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;A10&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;创建pod模板&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl run pod1 &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image httpd&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2.4&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;alpine &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;dry&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;client &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o yaml &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; pod1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;修改模板： 这里假设主节点的 Taint 为 &lt;code&gt;node-role.kubernetes.io/master=:NoSchedule&lt;/code&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# minikube 集群名为 cka，主节点同名&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl describe node cka &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i taint&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Taints&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;             node&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;io&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;master&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;NoSchedule&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;最终的 pod 如下&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  creationTimestamp&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    run&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; pod1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; pod1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  containers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; httpd&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2.4&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;alpine&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; pod1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    resources&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  dnsPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ClusterFirst&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  tolerations&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; key&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; node&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;io&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;master&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    effect&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;NoSchedule&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  nodeSelector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    node&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;role&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;io&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;master&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  restartPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Always&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;最后检查下是否调度到主节点上：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o wide&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;NAME   READY   STATUS    RESTARTS   AGE    IP           NODE   NOMINATED NODE   READINESS GATES&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;pod1   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;102s&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;10.244&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0.3&lt;/span&gt;&lt;span&gt;   cka    &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;kubectl 命令和排序&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;所有命名空间中都有各种 Pod。 将命令写入 /opt/course/5/find_pods.sh，其中列出所有按 AGE 排序的 Pod（metadata.creationTimestamp）。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;将第二个命令写入 /opt/course/5/find_pods_uid.sh，其中列出按字段 metadata.uid 排序的所有 Pod。对这两个命令都使用 kubectl 排序。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;kubectl 命令的使用，主要是 &lt;code&gt;--all-namespaces&lt;/code&gt; （缩写 &lt;code&gt;-A&lt;/code&gt;） 和 &lt;code&gt;--sort-by&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ cat &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/opt/&lt;/span&gt;&lt;span&gt;course&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;find_pods&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sh &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;A &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;sort&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;by&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&#x27;.metadata.creationTimestamp&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ cat &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/opt/&lt;/span&gt;&lt;span&gt;course&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;find_pods_uid&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sh &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;A &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;sort&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;by&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&#x27;.metadata.uid&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;EOF &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;存储：持久化卷和挂载&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;创建一个名为 &lt;code&gt;safari-pv&lt;/code&gt; 的新 &lt;code&gt;PersistentVolume&lt;/code&gt;。它应该具有 2Gi 的容量、&lt;code&gt;accessMode&lt;/code&gt; &lt;code&gt;ReadWriteOnce&lt;/code&gt;、&lt;code&gt;hostPath&lt;/code&gt; &lt;code&gt;/Volumes/Data&lt;/code&gt; 并且没有定义 &lt;code&gt;storageClassName&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;接下来在命名空间 &lt;code&gt;project-tiger&lt;/code&gt; 中创建一个名为 &lt;code&gt;safari-pvc&lt;/code&gt; 的新 &lt;code&gt;PersistentVolumeClaim&lt;/code&gt;。 它应该请求 2Gi 存储，&lt;code&gt;accessMode&lt;/code&gt; &lt;code&gt;ReadWriteOnce&lt;/code&gt; 并且不应定义 &lt;code&gt;storageClassName&lt;/code&gt;。 PVC 应该正确绑定到 PV。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;最后在命名空间 &lt;code&gt;project-tiger&lt;/code&gt; 中创建一个新的 Deployment &lt;code&gt;safari&lt;/code&gt;，它将该卷挂载到 &lt;code&gt;/tmp/safari-data&lt;/code&gt;。该 Deployment 的 Pod 应该是镜像 httpd:2.4.41-alpine。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;pv&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;pvc&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;pod 使用 pvc&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;deployment&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;mount PVC volume&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolumeclaim&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;https://kubernetes.io/docs/concepts/storage/persistent-volumes/#claims-as-volumes&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;创建 pv&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;PersistentVolume&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; safari&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pv&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;local&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  capacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    storage&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2Gi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  accessModes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ReadWriteOnce&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  hostPath&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    path&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;/Volumes/Data&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;创建 pvc&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;PersistentVolumeClaim&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; safari&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pvc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  accessModes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ReadWriteOnce&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  resources&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    requests&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      storage&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2Gi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;检查是否绑定成功&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pvc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;NAME         STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;safari&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pvc   &lt;/span&gt;&lt;span&gt;Bound&lt;/span&gt;&lt;span&gt;    pvc&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;d4c15825&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2de3&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;470f&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;8ed0&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;9519cacaad21&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;2Gi&lt;/span&gt;&lt;span&gt;        RWO            standard       &lt;/span&gt;&lt;span&gt;24s&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;创建 deployment 模板&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl create deployment safari &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image httpd&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2.4&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;alpine &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;dry&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;client &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;最终的yaml&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; apps&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Deployment&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  creationTimestamp&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; safari&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; safari&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  replicas&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  selector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    matchLabels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; safari&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  strategy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      creationTimestamp&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; safari&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      containers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; httpd&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2.4&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;alpine&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; httpd&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        resources&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        volumeMounts&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; mountPath&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/tmp/&lt;/span&gt;&lt;span&gt;safari&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      volumes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        persistentVolumeClaim&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          claimName&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; safari&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;pvc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;kubectl 命令和 context&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;可以通过 kubectl 上下文从主终端访问多个集群。将所有这些上下文名称写入 /opt/course/1/contexts。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;接下来在 /opt/course/1/context_default_kubectl.sh 中写一个显示当前上下文的命令，该命令应该使用kubectl。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;最后在 /opt/course/1/context_default_no_kubectl.sh 中写入第二个执行相同操作的命令，但不使用 kubectl。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;kubectl config 相关命令的使用&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kubectl config &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;contexts &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o name &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/opt/&lt;/span&gt;&lt;span&gt;course&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;contexts&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;cat &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/opt/&lt;/span&gt;&lt;span&gt;course&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;context_default_kubectl&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sh &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kubectl config current&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;chmod &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;x &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;opt&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;course&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;context_default_kubectl&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sh&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;cat &lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;/.kube/&lt;/span&gt;&lt;span&gt;config &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep current&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;context &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; awk &lt;/span&gt;&lt;span&gt;&#x27;{print $2}&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;工作负载：缩容&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;命名空间 &lt;code&gt;project-c13&lt;/code&gt; 中有两个名为 &lt;code&gt;o3db-*&lt;/code&gt; 的 Pod。 C13 管理层要求将 Pod 缩减为一个副本以节省资源。 记录动作。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;scale&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;deploy&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;statefulset&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档： https://kubernetes.io/zh/docs/tasks/run-application/scale-stateful-set/ https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kubectl scale &lt;/span&gt;&lt;span&gt;&amp;lt;resource&amp;gt;&lt;/span&gt;&lt;span&gt; xxx &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;replicas&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;scale 命令需要确认资源类型：deployment/statefulset&lt;/p&gt;&lt;h2&gt;应用就绪和探活&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;在命名空间 &lt;code&gt;default&lt;/code&gt; 中执行以下操作。为 &lt;code&gt;nginx:1.16.1-alpine&lt;/code&gt; 创建一个名为 &lt;code&gt;ready-if-service-ready&lt;/code&gt; 的 Pod。配置一个 &lt;code&gt;LivenessProbe&lt;/code&gt;，它只是运行 &lt;code&gt;true&lt;/code&gt;。还要配置一个 &lt;code&gt;ReadinessProbe&lt;/code&gt; 来检查 &lt;code&gt;url&lt;/code&gt; &lt;code&gt;http://service-am-i-ready:80&lt;/code&gt; 是否可达，可以使用 &lt;code&gt;wget -T2 -O- http://service-am-i-ready:80&lt;/code&gt;。 启动 Pod 并确认它因为 &lt;code&gt;ReadinessProbe&lt;/code&gt; 而没有准备好。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;创建第二个名为 &lt;code&gt;am-i-ready&lt;/code&gt; 的 Pod 镜像 &lt;code&gt;nginx:1.16.1-alpine&lt;/code&gt;，标签 &lt;code&gt;id:cross-server-ready&lt;/code&gt;。已经存在的服务 &lt;code&gt;service-am-i-ready&lt;/code&gt; 现在应该有第二个 Pod 作为端点。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;probe&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;pod&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档： https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kubectl run ready&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ready &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image nginx&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1.16&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;alpine &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;dry&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;client &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o yaml &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; ready&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ready&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kubectl run am&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ready &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image nginx&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1.16&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;alpine &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;labels id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;cross&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ready &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;dry&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;client &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o yaml &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; am&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ready&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;添加 probes&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  creationTimestamp&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    run&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ready&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ready&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ready&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ready&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  containers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; nginx&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1.16&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;alpine&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ready&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ready&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    resources&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    livenessProbe&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;exec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        command&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; echo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; hi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    readinessProbe&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;exec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        command&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; wget&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;T2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;O&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; http&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;//service-am-i-ready:80&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  dnsPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ClusterFirst&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  restartPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Always&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;集群：控制平面&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;使用 &lt;code&gt;ssh cluster1-master1&lt;/code&gt; ssh 进入主节点。检查 master 组件 kubelet、kube-apiserver、kube-scheduler、kube-controller-manager 和 etcd 如何在 master 节点上启动/安装。还要找出 DNS 应用的名称以及它是如何在主节点上启动/安装的。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;将结果写入文件 /opt/course/8/master-components.txt。该文件的结构应如下所示：&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;p&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# /opt/course/8/master-components.txt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;TYPE&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;apiserver&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;TYPE&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;scheduler&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;TYPE&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;controller&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;manager&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;TYPE&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;TYPE&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;dns&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;TYPE&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Choices of [TYPE] are: not-installed, process, static-pod, pod&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;Kubernetes components 的安装方式&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;当前比较的组件都是以static pod的形式运行的，而 static pod 都是由 Kubelet 管理的，所以从 kubelet 处入手。&lt;/p&gt;&lt;p&gt;以 minikube 为例：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ ps &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ef &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;w kubelet&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;root      &lt;/span&gt;&lt;span&gt;140597&lt;/span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;May15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;00&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;00&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;binaries&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;18.8&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;bootstrap&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;kubeconfig&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;bootstrap&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;conf &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;runtime&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;docker &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;override&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;cka &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;kubeconfig&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;conf &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;node&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;64.3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ systemctl &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;active kubelet&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;active&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#kubelet: process&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;根据前面进程中的信息，查看 &lt;code&gt;/var/lib/kubelet/config.yaml&lt;/code&gt;中的内容。可以得到：&lt;/p&gt;&lt;p&gt;etcd: static-pod kube-apiserver: static-pod kube-controller-manager: static-pod&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ cat &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i staticpod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;staticPodPath&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;manifests&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;ls &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;manifests&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml  kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;apiserver&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml    kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;controller&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;manager&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml  kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;scheduler&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;最后上下dns，查看下pod，得知 dns: pod&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;A &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep dns&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;system   coredns&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;66bff467f8&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;6k2br&lt;/span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;32h&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;最后将上面的结果写入到 &lt;code&gt;/opt/course/8/master-components.txt&lt;/code&gt;，不能前功尽弃。&lt;/p&gt;&lt;h2&gt;集群：Pod 调度&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;使用 &lt;code&gt;ssh cluster2-master1&lt;/code&gt; ssh 进入主节点。暂时停止 &lt;code&gt;kube-scheduler&lt;/code&gt;，这意味着可以在之后再次启动它。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;为镜像 &lt;code&gt;httpd:2.4-alpine&lt;/code&gt; 创建一个名为 &lt;code&gt;manual-schedule&lt;/code&gt; 的 Pod，确认它已启动但未在任何节点上调度。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;现在您是调度程序并拥有所有权力，在节点 &lt;code&gt;cluster2-master1&lt;/code&gt; 上手动调度该 Pod。 确保它正在运行。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;再次启动 &lt;code&gt;kube-scheduler&lt;/code&gt; 并通过在镜像 &lt;code&gt;httpd:2.4-alpine&lt;/code&gt; 创建第二个名为 &lt;code&gt;manual-schedule2&lt;/code&gt; 的 Pod 并检查它是否在 &lt;code&gt;cluster2-worker1&lt;/code&gt; 上运行来确认其运行正常。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;kubernetes 组件的运行方式&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;创建 pod&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;pod 调度&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;kube-scheduler 是以 static pod 的方式运行，因此我们需要 ssh 到节点上，将 scheduler 的 yaml 移出（记住不要删掉，还要还原回去），重启 kubelet&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ ps &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ef &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;w kubelet&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;root      &lt;/span&gt;&lt;span&gt;140597&lt;/span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;May15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;00&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;00&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;binaries&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;18.8&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;bootstrap&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;kubeconfig&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;bootstrap&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;conf &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;runtime&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;docker &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;override&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;cka &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;kubeconfig&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;conf &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;node&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;64.3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ cat &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i staticpod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;staticPodPath&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;manifests&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ ls &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;manifests&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml  kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;apiserver&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml    kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;controller&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;manager&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml  kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;scheduler&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ mv &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;manifests&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;scheduler&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ systemctl restart kubelet&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;检查下 schedule pod 没有运行，然后尝试创建 pod，并查看 pod 处于 pending 状态，即没有 kube-scheduler 为其调度。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl run manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image httpd&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2.4&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;alpine&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule          &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Pending&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;16s&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;手动调度，即为 pod 指定一个 &lt;code&gt;nodeName&lt;/code&gt;，我的 minikube 只有一个 node 名为 cka，修改pod：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o yaml &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;添加 nodeName 之后&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  creationTimestamp&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;2021-05-16T07:27:16Z&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    run&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; dev&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  resourceVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;84805&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  selfLink&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/api/&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;namespaces&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;dev&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;pods&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  uid&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; c4b592f6&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1e07&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;4911&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;a7fe&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;867d813c7a55&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  containers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; httpd&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2.4&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;alpine&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    imagePullPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;IfNotPresent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    resources&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    terminationMessagePath&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/dev/&lt;/span&gt;&lt;span&gt;termination&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    terminationMessagePolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;File&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    volumeMounts&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; mountPath&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;secrets&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;io&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;serviceaccount&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;v7f28&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      readOnly&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  dnsPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ClusterFirst&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  nodeName&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; cka &lt;/span&gt;&lt;span&gt;#node name here&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  enableServiceLinks&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  priority&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  restartPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Always&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  schedulerName&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;scheduler&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  securityContext&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  serviceAccount&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  serviceAccountName&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  terminationGracePeriodSeconds&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  tolerations&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; effect&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;NoExecute&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    key&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; node&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;io&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;not&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ready&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;operator&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Exists&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    tolerationSeconds&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;300&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; effect&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;NoExecute&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    key&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; node&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;io&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;unreachable&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;operator&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Exists&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    tolerationSeconds&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;300&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  volumes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;v7f28&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    secret&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      defaultMode&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;420&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      secretName&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;v7f28&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  phase&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Pending&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  qosClass&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;BestEffort&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;强制更新 pod（运行时只能修改部分内容）：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl replace &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;f manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;force&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;pod &lt;/span&gt;&lt;span&gt;&quot;manual-schedule&quot;&lt;/span&gt;&lt;span&gt; deleted&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;pod&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule replaced&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;再次检查&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule          &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;15s&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;恢复 kube-scheduler 的运行：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ mv &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;scheduler&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;manifests&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ systemctl restart kubelet&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;检查是否运行&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;A &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;scheduler&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;system   kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;scheduler&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;cka            &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;66s&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;创建第二个pod，并检查是否在运行（running）状态&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl run manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule2 &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image httpd&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2.4&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;alpine&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;pod&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule2 created&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;NAME               READY   STATUS    RESTARTS   AGE&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;manual&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;schedule2   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;6s&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;集群：备份及恢复&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;对在 &lt;code&gt;cluster3-master1&lt;/code&gt; 上运行的 etcd 进行备份，并将其保存在主节点上的 &lt;code&gt;/tmp/etcd-backup.db&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;然后在集群中创建一个你喜欢的 Pod。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;最后恢复备份，确认集群仍在工作并且创建的 Pod 不再与我们在一起。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;etc 的作用：存储集群的状态信息，包括 pod 信息&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;etc 的备份和恢复&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档： https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;etcd的命令执行，记得设置API的版本 &lt;code&gt;ETCDCTL_API=3&lt;/code&gt;&lt;/p&gt;&lt;p&gt;操作 etcd 需要 &lt;code&gt;endpoints&lt;/code&gt;、&lt;code&gt;cacert&lt;/code&gt;、&lt;code&gt;cert&lt;/code&gt;、&lt;code&gt;key&lt;/code&gt;。Kubernetes 的所有组件与 etcd 的数据交互都是通过 api-server 完成的，我只需要找到 api-server 的运行命令就行，两种方式：到 master 主机查看 api-server 的进程；或者去 api-server 的 pod 查看 &lt;code&gt;.spec.containers[].command&lt;/code&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#ssh to master&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ ps &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ef &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;apiserver&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;n kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;system kube&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;apiserver&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;cka &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o jsonpath&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&#x27;{.spec.containers[].command}&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;etcd 备份，命令直接从 Kubernetes 官方文档复制再修改&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#ssh to master&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ETCDCTL_API&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; etcdctl &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;endpoints&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;https&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;//127.0.0.1:2379 \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;cacert&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;certs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;ca&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;crt &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;cert&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;certs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;apiserver&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;crt &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;certs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;apiserver&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;key \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  snapshot save &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;tmp&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;backup&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;db&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Snapshot&lt;/span&gt;&lt;span&gt; saved at &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;tmp&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;backup&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;db&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;创建 pod&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl run sleep1d &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image busybox &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;command &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; sleep &lt;/span&gt;&lt;span&gt;1d&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#检查 pod 运行情况&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;NAME      READY   STATUS    RESTARTS   AGE&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;sleep1d   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;10s&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;恢复 etcd 的备份，复制前面的命令并修改，恢复备份到 &lt;code&gt;/var/lib/etcd-backup&lt;/code&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ ETCDCTL_API&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; etcdctl &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;endpoints&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;https&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;//127.0.0.1:2379 --cacert=/var/lib/minikube/certs/etcd/ca.crt --cert=/var/lib/minikube/certs/apiserver-etcd-client.crt --key=/var/lib/minikube/certs/apiserver-etcd-client.key snapshot restore /tmp/etcd-backup.db --data-dir /var/lib/etcd-backup&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;08&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;17.797061&lt;/span&gt;&lt;span&gt; I &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; mvcc&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; restore compact to &lt;/span&gt;&lt;span&gt;85347&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;2021&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;08&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;09&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;17.803208&lt;/span&gt;&lt;span&gt; I &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; etcdserver&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;membership&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; added member &lt;/span&gt;&lt;span&gt;8e9e05c52164694d&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;//localhost:2380] to cluster cdf818194e3a8c32&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;修改 etcd 的配置， &lt;code&gt;/etc/kubernetes/manifests/etcd.yaml&lt;/code&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  volumes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; hostPath&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      path&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;certs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DirectoryOrCreate&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; etcd&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;certs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; hostPath&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      path&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;backup  &lt;/span&gt;&lt;span&gt;#原来是/var/lib/minikube/etcd&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DirectoryOrCreate&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; etcd&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;保存后重启kubelet&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ systemctl restart kubelet&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;检查pod是否存在：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod sleep1d&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; server &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;NotFound&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;&lt;span&gt; pods &lt;/span&gt;&lt;span&gt;&quot;sleep1d&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;not&lt;/span&gt;&lt;span&gt; found&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;安全：网络策略&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;发生了一起安全事件，入侵者能够从一个被黑的后端 Pod 访问整个集群。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;为了防止这种情况，在命名空间 &lt;code&gt;project-snake&lt;/code&gt; 中创建一个名为 &lt;code&gt;np-backend&lt;/code&gt; 的 &lt;code&gt;NetworkPolicy&lt;/code&gt;。它应该只允许 &lt;code&gt;backend-*&lt;/code&gt; Pods：&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;连接到端口 &lt;code&gt;1111&lt;/code&gt; 上的 &lt;code&gt;db1-*&lt;/code&gt; Pod 连接到端口 &lt;code&gt;2222&lt;/code&gt; 上的 &lt;code&gt;db2-*&lt;/code&gt; Pod 在策略中使用 Pod 的应用程序标签。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;实施后，例如，端口 3333 上从 &lt;code&gt;backend-*&lt;/code&gt; Pod 到 &lt;code&gt;vault-*&lt;/code&gt; Pod 的连接应该不再有效。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;NetworkPolicy&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档： https://kubernetes.io/docs/concepts/services-networking/network-policies&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;为 backend-* pod 设置 egress 的 NetworkPolicy，只允许其访问 db1-* 的 1111 端口和 db2-* 的 2222 端口，策略中使用 app label 来进行匹配。&lt;/p&gt;&lt;p&gt;从 Kubernetes 官网文档中复制一段yaml配置进行修改。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; networking&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;k8s&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;io&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;NetworkPolicy&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; np&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;backend&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; project&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;snake&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  podSelector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    matchLabels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; backend&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  policyTypes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Egress&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  egress&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; to&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; podSelector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        matchLabels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; db1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    ports&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; protocol&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; TCP&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      port&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1111&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; to&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; podSelector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        matchLabels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; db2          &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    ports&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; protocol&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; TCP&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      port&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2222&lt;/span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;假设 backend pod 的 app label 为 backend，db1 的 为 db1，db2 的为 db2。&lt;/p&gt;&lt;p&gt;创建环境：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl run backend &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image nginx &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;labels app&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;backend&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl run db1 &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image nginx &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;labels app&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;db1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl run db2 &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image nginx &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;labels app&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;db2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl run vault &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image nginx &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;labels app&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;vault&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;L app&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;NAME      READY   STATUS              RESTARTS   AGE   APP&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;backend   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;13s&lt;/span&gt;&lt;span&gt;   backend&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;db1       &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;             &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;66s&lt;/span&gt;&lt;span&gt;   db1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;db2       &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;             &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;71s&lt;/span&gt;&lt;span&gt;   db2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;vault     &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;             &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;79s&lt;/span&gt;&lt;span&gt;   vault&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;由于我们用的 nginx 镜像，将前面的 NetworkPolicy 端口修改一下：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; networking&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;k8s&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;io&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;NetworkPolicy&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; np&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;backend&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  podSelector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    matchLabels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; backend&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  policyTypes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Egress&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  egress&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; to&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; podSelector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        matchLabels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; db1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    ports&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; protocol&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; TCP&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      port&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; to&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; podSelector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        matchLabels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; db2          &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    ports&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; protocol&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; TCP&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      port&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;检查一下：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; networkpolicy&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;NAME         POD&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;SELECTOR   AGE&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;np&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;backend   app&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;backend    &lt;/span&gt;&lt;span&gt;31s&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;测试下网络：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#获取pod ip&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o wide&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;NAME      READY   STATUS    RESTARTS   AGE     IP           NODE   NOMINATED NODE   READINESS GATES&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;backend   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;3m15s&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0.7&lt;/span&gt;&lt;span&gt;   cka    &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;db1       &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;4m8s&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0.6&lt;/span&gt;&lt;span&gt;   cka    &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;db2       &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;4m13s&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0.3&lt;/span&gt;&lt;span&gt;   cka    &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;vault     &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;4m21s&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0.4&lt;/span&gt;&lt;span&gt;   cka    &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;&amp;lt;none&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;集群：kubelet 启动方式&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;节点 &lt;code&gt;cluster2-worker1&lt;/code&gt; 已使用 kubeadm 和 TLS 引导添加到集群中。 找到 &lt;code&gt;cluster2-worker1&lt;/code&gt; 的 “Issuer” 和 “Extended Key Usage” 值： kubelet 客户端证书，用于向外连接到 kube-apiserver 的证书。 kubelet 服务器证书，用于来自 kube-apiserver 的传入连接。 将信息写入文件 &lt;code&gt;/opt/course/23/certificate-info.txt&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;知识点&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;kubelet 的功能：连接 api-server；接受来自 api-server 的响应。两种情况都需要 TLS&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;kubelet 连接 apiserver 的方式在配置文件中，先找出配置文件的保存位置。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# ssh 到节点上，查看 kubelet 的启动命令&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ ps &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ef &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep kubelet&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;root        &lt;/span&gt;&lt;span&gt;3935&lt;/span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;00&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;00&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;binaries&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;20.0&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;bootstrap&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;kubeconfig&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;bootstrap&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;conf &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;cni&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;conf&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;dir&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;cni&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;net&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;mk &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;runtime&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;docker &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;override&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;cka&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;m02 &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;kubeconfig&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;conf &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;network&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;cni &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;node&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;64.9&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;docker     &lt;/span&gt;&lt;span&gt;13653&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;13616&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; pts&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;00&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;00&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;00&lt;/span&gt;&lt;span&gt; grep kubelet&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#kubelet 连接 api server 的信息， client cert 的配置所在 /var/lib/kubelet/pki/kubelet-client-current.pem&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;cat &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yaml &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#kubelet 的启动信息， servert cert 的配置所在 /var/lib/minikube/certs/ca.crt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;cat &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;conf &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ openssl x509 &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;noout &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;text &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;pki&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;current&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pem &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i issuer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;Issuer&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; CN &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; minikubeCA&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ openssl x509 &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;noout &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;text &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;pki&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;current&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pem &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;A1 extended&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            X509v3 &lt;/span&gt;&lt;span&gt;Extended&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Key&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Usage&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                TLS &lt;/span&gt;&lt;span&gt;Web&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Client&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Authentication&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ openssl x509 &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;noout &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;text &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;certs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;ca&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;crt &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i issuer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;Issuer&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; CN &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; minikubeCA&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ openssl x509 &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;noout &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;text &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;certs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;ca&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;crt &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;A1 extended&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            X509v3 &lt;/span&gt;&lt;span&gt;Extended&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Key&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Usage&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                TLS &lt;/span&gt;&lt;span&gt;Web&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Client&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Authentication&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; TLS &lt;/span&gt;&lt;span&gt;Web&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Server&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Authentication&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;最后记得将信息写入到 &lt;code&gt;/opt/course/23/certificate-info.txt&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;集群：证书&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;检查 kube-apiserver 服务器证书在 &lt;code&gt;cluster2-master1&lt;/code&gt; 上的有效期。使用 openssl 或 cfssl 执行此操作。将到期日期写入 &lt;code&gt;/opt/course/22/expiration&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;同时运行正确的 kubeadm 命令以列出到期日期并确认两种方法显示相同的日期。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;将更新 apiserver 服务器证书的正确 kubeadm 命令写入 &lt;code&gt;/opt/course/22/kubeadm-renew-certs.sh&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;api-server&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;openssl&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;kubeadm&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档：https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/#check-certificate-expiration&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;通过 kube-apiserver pod 的启动命令，或者 ssh 到 master 来查看命令参数，&lt;code&gt;tls-cert-file=/var/lib/minikube/certs/apiserver.crt&lt;/code&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ openssl x509 &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;noout &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;text &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;lib&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;minikube&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;certs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;apiserver&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;crt &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i valid &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;A2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;Validity&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;Not&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Before&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;May&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2021&lt;/span&gt;&lt;span&gt; GMT&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;Not&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;After&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;May&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2022&lt;/span&gt;&lt;span&gt; GMT&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;将 &lt;code&gt;May 14 22:33:43 2022 GMT&lt;/code&gt; 写入 &lt;code&gt;/opt/course/22/expiration&lt;/code&gt;&lt;/p&gt;&lt;p&gt;通过 kubeadm 来检查&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubeadm certs check&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;expiration &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i apiserver&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#macos 无法安装 kubeadm&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#minikube 无法使用 kubeadm 检查&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;将 &lt;code&gt;kubeadm certs renew apiserver&lt;/code&gt; 写入 /opt/course/22/kubeadm-renew-certs.sh&lt;/p&gt;&lt;h2&gt;集群：升级节点&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;你的同事说节点 &lt;code&gt;cluster3-worker2&lt;/code&gt; 运行的是较旧的 Kubernetes 版本，甚至不属于集群的一部分。将 kubectl 和 kubeadm 更新为在 &lt;code&gt;cluster3-master1&lt;/code&gt; 上运行的确切版本。然后将此节点添加到集群中，您可以为此使用kubeadm。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;kubeadm 升级集群&lt;/span&gt;&lt;/p&gt;&lt;p&gt;参考文档：&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;检查node&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; nodes&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;检查当前组件版本&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ ssh cluster3&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;worker2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubeadm version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl version &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Client&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; vx&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;xx&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Server&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; vx&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;xx&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubelet &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#使用命令并升级各个组件，并重启 kubelet&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#如果启动失败，一般是需要token连接到api-server，需要ssh到master上运行 kubeadm create token --print-join-command&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#再ssh到 node上，执行打印的命令，重启kubelet并检查装填&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#最后检查node是否成功加入集群&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;Docker 命令&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;在命名空间 &lt;code&gt;project-tiger&lt;/code&gt; 中创建一个名为 &lt;code&gt;Tigers-reunite&lt;/code&gt; 的 Pod 镜像 &lt;code&gt;httpd:2.4.41-alpine&lt;/code&gt;，标签为 &lt;code&gt;pod=container&lt;/code&gt; 和 &lt;code&gt;container=pod&lt;/code&gt;。找出 Pod 被安排在哪个节点上。ssh 进入该节点并找到属于该 Pod 的 docker 容器。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;将容器的 docker ID 和这些正在运行的进程/命令写入 &lt;code&gt;/opt/course/17/pod-container.txt&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;最后，使用 docker 命令将主 Docker 容器（来自 yaml 中指定的那个）的日志写入 &lt;code&gt;/opt/course/17/pod-container.log&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;知识点&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;docker 命令：ps、logs、inspect&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;解题思路&lt;/h3&gt;&lt;p&gt;创建 pod&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl run tigers&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;reunite &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;image httpd&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2.4&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;alpine &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;labels pod&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;检查 pod 的信息&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pods &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;labels&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;NAME             READY   STATUS    RESTARTS   AGE   LABELS&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;tigers&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;reunite   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;34s&lt;/span&gt;&lt;span&gt;   container&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;获取pod所在的节点&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ kubectl &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; pod tigers&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;reunite &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o jsonpath&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&#x27;{.spec.nodeName}&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;cka&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;ssh到节点上&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;docker ps &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep tigers&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;reunite&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;e6ff69b437bc   &lt;/span&gt;&lt;span&gt;54b0995a6305&lt;/span&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;&quot;httpd-foreground&quot;&lt;/span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;About&lt;/span&gt;&lt;span&gt; a minute ago   &lt;/span&gt;&lt;span&gt;Up&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;About&lt;/span&gt;&lt;span&gt; a minute             k8s_tigers&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;reunite_tigers&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;reunite_dev_53391212&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;911d&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;4275&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;a19d&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;e8f8b0f85a98_0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;06d3ca65eb08&lt;/span&gt;&lt;span&gt;   k8s&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;gcr&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;io&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;3.2&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;&quot;/pause&quot;&lt;/span&gt;&lt;span&gt;                 &lt;/span&gt;&lt;span&gt;About&lt;/span&gt;&lt;span&gt; a minute ago   &lt;/span&gt;&lt;span&gt;Up&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;About&lt;/span&gt;&lt;span&gt; a minute             k8s_POD_tigers&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;reunite_dev_53391212&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;911d&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;4275&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;a19d&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;e8f8b0f85a98_0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;#使用docker inspect 或者 进入容器直接查看进程&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ docker inspect e6ff69b437bc &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;&#x27;cmd\|entrypoint&#x27;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;A1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&quot;Cmd&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&quot;httpd-foreground&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;--&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&quot;Entrypoint&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&quot;OnBuild&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;$ docker inspect &lt;/span&gt;&lt;span&gt;06d3ca65eb08&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;&#x27;cmd\|entrypoint&#x27;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;A1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&quot;Cmd&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&quot;Image&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;k8s.gcr.io/pause:3.2&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;--&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&quot;Entrypoint&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&quot;/pause&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;结果写入文件&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;log&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;e6ff69b437bc httpd&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;foreground&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;06d3ca65eb08&lt;/span&gt;&lt;span&gt; pause&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;写日志到文件&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;docker logs e6ff69b437bc &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/opt/&lt;/span&gt;&lt;span&gt;course&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h4&gt;引用链接&lt;/h4&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; K8s-CKA-CAKD-Bookmarks.html: &lt;em&gt;https://gist.github.com/addozhang/3ca950ce9b38930abfe7c5fb067e74de&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9f5d07c2c9a985bbed431371aa9c72b5</guid>
<title>[推荐] TiDB，面向未来的数据库到底是什么？</title>
<link>https://toutiao.io/k/8t9ns8j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h1 data-mpa-powered-by=&quot;yiban.io&quot;&gt;背景&lt;/h1&gt;&lt;p&gt;tidb这个技术名词很多同学或多或少都曾经耳闻过，但是很多同学觉得他是分布式数据库，自己的业务是使用mysql，基本使用不上这个技术，可能不会去了解他。最近业务上有个需求使用到了tidb，于是学习了一下基本原理，会发现这些原理其实不仅仅局限于分布式数据库这一块，很多技术都是通用的，所以在这里写一下分享一下学习tidb的一些心得。&lt;/p&gt;&lt;p&gt;先说说为什么选择tidb吧，一般来说在咱们的业务中都是使用的mysql,但是单机数据库容量和并发性能都有限，对于一些大容量或者高并发的场景我们会选择sharding-jdbc去做，使用sharding-jdbc的确解决了问题但是增加了开发难度，我需要对我的每一个表都设置分表key，并且每个查询都得带入这个key的值，这样就增加了查询限制，如果不带key的值就得所有库表都得查询一次才行，效率极低，所以我们又异构了一份数据到es来满足其他条件。怎么解决这个问题呢？正好公司最近内部在推tidb，我看了下tidb基本兼容mysql，存储无限扩展，开发成本比较低，性能整体也不错，所以决定使用了tidb。 &lt;img data-ratio=&quot;1.8029925187032418&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z49NQbPFF8GricNQSNMiaCd4OmicAE8Cjbw7rrLCD42bZib4rT9X2hib8fq4ibiaickubFiavy1TlyBia29JeJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;401&quot;/&gt;&lt;/p&gt;&lt;h2&gt;数据库发展历史&lt;/h2&gt;&lt;h3&gt;关系型单机数据库&lt;/h3&gt;&lt;p&gt;关系型数据库的开始是以1970年Edgar F.Codd 提出了关系模型。在数据库发展早期阶段，出现了很多优秀的商业数据库产品，如Oracle/DB2。在1990年之后，出现了开源数据库MySQL和PostgreSQL。这些数据库不断地提升单机实例性能，再加上遵循摩尔定律的硬件提升速度，往往能够很好地支撑业务发展。&lt;/p&gt;&lt;h3&gt;分布式数据库&lt;/h3&gt;&lt;p&gt;随着摩尔定律的失效，单体数据库的发展很难应对更高级别的挑战，所以就出现了分布式数据库，分布式数据库拥有应对海量并发，海量存储的能力所以能应对更难的挑战。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;nosql:HBase是其中的典型代表。HBase是Hadoop生态中的重要产品，Google BigTable的开源实现，当然还有我们熟悉的redis，nosql有一些自己的特殊使用场景，所以有一些自己的弊端，BigTable不支持跨行事务，用java开发性能也跟不上，redis的话用内存存储，无法保证事务。并且nosql已经是不靠关系模型了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;sharding: 我们依然可以通过单机数据库完成我们分布式数据库的功能，我们通过某个组件实现对sql进行分发到不同分片的功能，比如比较出名开源的有sharing-jdbc，mycat，阿里云上商业的有drds。sharing的话对于运维来说比较困难，如果需要扩容需要不断的进行手动迁移数据，还需要自己指定某一个分片key。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;newsql:在newsql中可以保证acid的事务，也维持了关系模型，并且还支持sql。比较出名的有goole的F1和Spanner，阿里的OceanBase,pingCap的tidb。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;学前提问&lt;/h3&gt;&lt;p&gt;在我们学习某个知识的时候，一般都是会带着一些问题去学习，有目的的学习会让你更快的上手，对于tidb或者分布式数据库，我在使用的时候会有这些疑问：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;如何保证无限扩展？因为平时使用的大多都是sharding-jdbc那种有个sharding-key的技术，这种其实无限扩展是比较麻烦的，所以我最开始就对tidb如何保证无限扩展发出了疑问？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如何保证id唯一，分布式数据库往往会进行分片，在单机数据库中的自增id就不成立，tidb是如何保证的呢？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如何保证事务？前面我们说过newsql是需要支持acid的事务的，那么我们的tidb是如何保证的呢？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过索引是如何查询数据的呢？单机数据库使用了索引加速查询，tidb又是如何做到用索引加速查询的呢？&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;tidb&lt;/h1&gt;&lt;h2&gt;架构&lt;/h2&gt;&lt;p&gt;再回答我们上面的那些问题之前，先看一看tidb的整体架构是什么？ &lt;img data-ratio=&quot;0.5227097767513472&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z49NQbPFF8GricNQSNMiaCd4O3WZqJ4H3KOHn7WtRcQ8CibzaL37yI63jPhFzgIvfqkqc7iae3TzpW90Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1299&quot;/&gt;&lt;/p&gt;&lt;p&gt;tidb其实是典型的计算分离的架构，对计算分离架构不熟悉的可以看看我之前的文章:&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA5Mjg2MDQ5NQ==&amp;amp;mid=2452509559&amp;amp;idx=1&amp;amp;sn=59d9c7d3d8e990fe144cab8cbb65ced0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;聊聊计算与分离&lt;/a&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;TiDB Server：计算层，对外暴露协议的连接端口，负责管理客户端的连接，主要做的就是执行SQL解析以及优化，生成分布式执行计划，由于这里是计算层是没有状态的，所以是可以无限扩展。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;PD Server:PD是整个集群的大脑，负责存储每个 TiKV 节点实时的数据分布情况和集群的整体拓扑结构，提供 TiDB Dashboard 管控界面，需要保持高可用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;TiKV: k-v存储引擎，在tikv内部，存储数据的基本单位是Region。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Tiflash：这个是用于列式的存储引擎&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;TSpark: 这是tidb对spark进行支持，所以tidb他是一个HTAP的数据库。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;如何无限扩展？&lt;/h2&gt;&lt;p&gt;我们首先来到我们的第一个问题，Tidb如何做到无限扩展？&lt;/p&gt;&lt;p&gt;首先我们来看看计算层: tidb-server，我们刚才说过在计算层中，是无状态的，所以就可以进行无限扩展，如果你的场景并发度很高或者数据库连接很多，可以考虑多扩展tidb-server。&lt;/p&gt;&lt;p&gt;然后我们来看看存储层，有一类数据云数据库通常也会被误认为是分布式数据库，也就是aws的auroradb和阿里云的polardb，这两个数据库也是采用的计算与存储分离的架构，在计算层也可以无限扩展，但是在存储层他们使用的是一份数据，这个也就是shared-storage架构，这两个数据库依靠这大容量磁盘，来支撑更高容量的数据。&lt;/p&gt;&lt;p&gt;在tidb中是shared-nothing架构，存储层也是分离的： &lt;img data-ratio=&quot;0.6649076517150396&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z49NQbPFF8GricNQSNMiaCd4OUDWW0WofXIkHa9JyWeyGPI5UPlGy158iaPNRuTtyATICBZtE7o0DfhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2274&quot;/&gt;&lt;/p&gt;&lt;p&gt;在每个tikv上会划分出多个Region,这个也就是我们的基本存储单位,大家见这个图是不是发现这个架构似曾相识呢？&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.502&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z49NQbPFF8GricNQSNMiaCd4O0cf85kaBxHz5siakH2ZDvMtzoMXmkHibvLJFjsVBvLrGVjjIukT9DibIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;从上面看，region就对应这kafka下的partition，partition在kafka中的作用也是用来将topic的压力打散到不同broker上，同样的在tidb的region上也是一样的,我们通过region为最小单位进行存储。&lt;/p&gt;&lt;p&gt;再详细介绍region之前先说一下存储引擎为什么叫tikv呢？原因就是这个存储引擎就是保存的就是一个key-value，你可以理解成java里面的hashmap，在tikv中没有选择自己研发如何将这个map数据去落地，而是通过一个非常优秀的kv存储引擎——rocksdb去进行磁盘落地。RocksDB是Facebook开源的一个KV高性能单机数据库，很多公司基于rocksdb做了很多优秀的存储产品，后面也会详细的写一篇介绍rocksdb的文章。&lt;/p&gt;&lt;p&gt;rocksdb是一个单机的存储引擎那么我们是需要保证数据在分布式环境下是不丢失的，在kafka中有其他partition的副本会不断的拉取leader副本，并且通过一个ISR的机制去维护。在tikv中，直接使用的raft协议去做数据复制，每个数据变更都会落地为一条 Raft 日志，通过 Raft 的日志复制功能，将数据安全可靠地同步到复制组的每一个节点中。不过在实际写入中，根据 Raft 的协议，只需要同步复制到多数节点，即可安全地认为数据写入成功。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7329545454545454&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z49NQbPFF8GricNQSNMiaCd4OGycLE6UUZZFOI0898enGmhSa9BMrJoK0M2hRlkibW4EvkujLFx5fV9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;352&quot;/&gt;&lt;/p&gt;&lt;p&gt;可以发现其实这里是写的raft,通过raft接口再写的rocksdb。&lt;/p&gt;&lt;p&gt;我们这里回到region，region还有一个partition不一样的点在于，partition一般不会自动去扩容，在业务开发中他往往是一个恒定得值，而region不一样，region的大小默认是96MB，再实际得业务中，我们的region的个数会随着我们数据量而变多，当然如果我们的数据量变小，他也会自动合并。&lt;/p&gt;&lt;p&gt;如何确定某个数据是在哪个region上呢？一般来说有hash(key)和range(key)的方案，在tikv中选择的是rangekey，因为对于region分裂是比较方便的，每一个region其实就是一个[StartKey，EndKey) 的表示：&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.905511811023622&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z49NQbPFF8GricNQSNMiaCd4O8RXtZY3PR0eiaCqlCbAfS7TjrqMPs7CeTUetJficXoIEQFVoePrMjlYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;254&quot;/&gt;&lt;/p&gt;&lt;p&gt;出现region的分裂的时候，只需要新增一个region，将老region的数据拿出一部分到新region， 譬如 [a, b) -&amp;gt; [a, ab) + [ab, b)，如果是hash来做的话，他会将所有region的数据都会重新hash，所以在tikv中选的是range(key)的方式，合并也是一样。&lt;/p&gt;&lt;p&gt;所以对于tidb来说无论是存储层还是计算层，我们都可以无限扩展。&lt;/p&gt;&lt;h2&gt;如何保证id唯一&lt;/h2&gt;&lt;p&gt;在mysql中我们可以对于主键直接设置 &lt;code&gt;&lt;span&gt;AUTO_INCREMENT&lt;/span&gt;&lt;/code&gt;来达到自增列的效果，mysql是怎么做到自增的呢？&lt;/p&gt;&lt;p&gt;在单机中这些都好做，但是在分布式数据库中，我们就没法保证id的唯一了，我之前有写过相关的文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA5Mjg2MDQ5NQ==&amp;amp;mid=2452509243&amp;amp;idx=1&amp;amp;sn=5064dd7935c1b6e617b24244414aee44&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;如果再有人问你分布式ID，这篇文章丢给他&lt;/a&gt;。我们在使用sharding-jdbc的时候就是使用的文章介绍的leaf这个ID生成中间件，来完成ID生成。&lt;/p&gt;&lt;p&gt;在Tidb中同样支持 &lt;code&gt;&lt;span&gt;AUTO_INCREMENT&lt;/span&gt;&lt;/code&gt;,实现的原理和leaf中的号段模式一样，不能保证严格递增，只能保证趋势递增，具体原理是：，对于每一个自增列，都使用一个全局可见的键值对用于记录当前已分配的最大 ID。由于分布式环境下的节点通信存在一定开销，为了避免写请求放大的问题，每个 TiDB 节点在分配 ID 时，都申请一段 ID 作为缓存，用完之后再去取下一段，而不是每次分配都向存储节点申请。&lt;/p&gt;&lt;p&gt;tidb还支持 &lt;code&gt;&lt;span&gt;AUTO_RANDOM&lt;/span&gt;&lt;/code&gt;,可以用于解决大批量写数据入 TiDB 时因含有整型自增主键列的表而产生的热点问题。因为region是有序的如果一段时间大量有序的数据产生有可能会在同一个region上，所以我们可以使用AUTO_RANDOM来将我们的主键数据打散。&lt;/p&gt;&lt;h2&gt;如何保证事务&lt;/h2&gt;&lt;p&gt;这里我们先回顾一下事务的四大特性ACID，我们来想想在mysql的innodb中这个是怎么做的呢？&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;A:原子性，指一个事务中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节，原子性在mysql中我们是依赖redolog和undolog共同完成&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;C:一致性，指在事务开始之前和结束以后，数据库的完整性没有被破坏。一致性是依靠其他几个特性来保证的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;I:隔离性，指数据库允许多个并发事务同时对其数据进行读写和修改的能力。隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，主要用于处理并发场景。mysql隔离性依靠的是锁和mvcc，在mysql里面锁的种类很丰富，mysql支持多种隔离性。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;D:持久性，事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失，持久性是依靠redolog和mysql的刷盘机制。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在tidb中ACID是什么做到的呢？&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;A:通过 Primary Key 所在 Region 的原子性来保证分布式事务的原子。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;C:TiDB 在写入数据之前，会校验数据的一致性，校验通过才会写入内存并返回成功。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;I:也是通过锁和mvcc来完成隔离性，但是在tidb只支持RR(可重复读)级别，RC隔离级别在4.0之后乐观模式下也能支持。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;D:事务一旦提交成功，数据全部持久化存储到 TiKV，并且还有多副本机制，如果发生宕机数据也不会丢失。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在mysql中的事务模型都是悲观事务模型，而在tidb中事务模型提供了乐观和悲观两种，怎么去理解悲观和乐观两种模型呢：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;悲观模型：其实和名字一样，只要在事务执行的时候认为每一条被你修改的数据都很大概率被其他事务修改(悲观的看法)。在mysql里面，如果你在事务中你对某一行修改是会给你加上行锁的，如果此时有其他事务想对这个数据进行修改，那么其他事务会被阻塞等待住。可以简单理解成边执行边检测冲突。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;乐观模型：我们认为我们修改的数据很大概率不会和其他事务产生冲突，所以不需要边执行边进行冲突检测，而是最后提交的时候进行冲突检测。如果冲突比较少这样就可以获得较高的性能。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在tidb中是如何实现这两种模式的呢？因为我们是分布式数据库，两阶段提交一般是分布式事务的通用解决方案，之前我写过很多分布式事务相关的文章大家可以自行查阅一下。&lt;/p&gt;&lt;h3&gt;乐观模式&lt;/h3&gt;&lt;p&gt;tidb同样使用两阶段提交来保证分布式事务的原子性，分为 Prewrite 和 Commit 两个阶段：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Prewrite：对事务修改的每个 Key 检测冲突并写入 lock 防止其他事务修改。对于每个事务，TiDB 会从涉及到改动的所有 Key 中选中一个作为当前事务的 Primary Key，事务提交或回滚都需要先修改 Primary Key，以它的提交与否作为整个事务执行结果的标识。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Commit：Prewrite 全部成功后，先同步提交 Primary Key，成功后事务提交成功，其他 Secondary Keys 会异步提交。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5413127413127413&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z49NQbPFF8GricNQSNMiaCd4OzGaybicv0iaMhaAvL1BJGsDGJkibbaBRYklBSOxz4fuqfqjaiactQeWopg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1295&quot;/&gt;&lt;/p&gt;&lt;p&gt;整个事务步骤如下：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Step 1: 客户端开启事务，类似我们在mysql里面的 &lt;code&gt;&lt;span&gt;begin&lt;/span&gt;&lt;span&gt;trasaction&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Step 2: TiDB 向 PD 获取全局时间，可以知道这个事务的全局顺序，用于后续mvcc的处理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Step 3: 发起DML，比如update xxx; 这个时候不会有冲突检测，只会在tidb内存中进行保存;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Step 4: 提交事务，类似我们在mysql里面的commit，这个时候tidb会在commit阶段完成两阶段提交，先进行prewrite 各种加锁检测之后如果没有问题再进行commit。这里举个例子:&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;begin&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;//step1&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;into&lt;/span&gt;&lt;span&gt; xx&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;// step3&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;update xx&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;// step3&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;update xx&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;// step3&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;commit&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;// step4&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;在上面的例子中如果是悲观模式step3的时候就会进行加锁检测了，乐观模式下所有的工作都放在了commit中，所以会出现commit出现异常的状态，所以我们使用乐观模式需要更好的处理commit阶段的异常行为，这和我们一般的编程不一样。但是如果数据的竞争不是太激烈的话是可以使用乐观模式来提升性能的。&lt;/p&gt;&lt;h3&gt;悲观模式&lt;/h3&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.49433573635427397&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z49NQbPFF8GricNQSNMiaCd4OgHeoO4TicQVDwVCrCCvLnXBIBgCEtOIyX060D2kmk6MA4OdicvibdmPHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;971&quot;/&gt;悲观模式把lock进行了提前，每个 DML 都会加悲观锁，锁写到 TiKV 里，同样会通过 raft 同步，在加悲观锁时检查各种约束，如 Write Conflict、key 唯一性约束等。&lt;/p&gt;&lt;p&gt;悲观事务下能保证我们的commit成功，这种模式比较符合我们的编程模式，所以tidb默认的模式也是悲观模式。&lt;/p&gt;&lt;h2&gt;如何做的索引查询&lt;/h2&gt;&lt;p&gt;为什么我会想到这个索引查询这个问题呢？当时是在看到了rocksdb是tidb的底层存储介质之后，我想到了在innodb中我们的索引是B+树，如果tidb的索引是b+树的话，那么rocksdb应该怎么去构造呢？&lt;/p&gt;&lt;p&gt;事实上在tidb中的索引也是使用的k-v形式去做的，我们先看看对于每一行的数据是怎么存储的：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;为了保证同一个表的数据放在一起，方便查找，TiDB 会为每个表分配一个表 ID，用 TableID 表示。表 ID 是一个整数，在整个集群内唯一。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;TiDB 会为表中每行数据分配一个行 ID，用 RowID 表示。行 ID 也是一个整数，在表内唯一。对于行 ID，TiDB 做了一个小优化，如果某个表有整数型的主键，TiDB 会使用主键的值当做这一行数据的行 ID。每行数据按照如下规则编码成 (Key, Value) 键值对：&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;Key&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;   tablePrefix&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;TableID&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;_recordPrefixSep&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;RowID&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;Value&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;col1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; col2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; col3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; col4&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;假定我们的tablePrefix是常量字符t,recordPrefixSep是常量字符r，我们的tableId是1,rowID在这里是我们的主键假定是100,如果有一个用户表的数据，如下：&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;Key&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;   t1_r100&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;Value&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;zhangsan&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;如果我们的主键为整数的情况下，那么上面也可以看作是我们的主键索引，如果我们的主键不为整型或者说在唯一索引的情况下，规则编码如下：&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;Key&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;   tablePrefix&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;tableID&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;_indexPrefixSep&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;indexID&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;_indexedColumnsValue&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;Value&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;RowID&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;indexId是tidb为每个索引分配的ID，所以上面那个情况下一个indexedColumnsValue只能对应一条数据满足唯一性，如果是非唯一索引，我们可以有：&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;Key&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;   tablePrefix&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;tableID&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;_indexPrefixSep&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;indexID&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;_indexedColumnsValue_rowId&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;Value&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;这样一个indexedColumnsValue就可以有多行数据，所以其实我们region中的数据的索引并不会和region的数据再一起，而是有自己的region分片，同样的我们查询数据的时候需要依靠我们的tidb-server分析出来我们应该用什么样的索引，先根据索引数据查询出来rowId再根据rowId查询出来我们对应的数据。&lt;/p&gt;&lt;h1&gt;总结&lt;/h1&gt;&lt;p&gt;不管是tidb还是分布式数据库，要学习的知识还有非常的多，上面只是对tidb做了一些粗解的分析，如果大家要学习可以看看下面的一些资料：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;pingcap文档: https://docs.pingcap.com, ping cap的文档是我见过做得算是比较顶级的文档了，他可以说不叫做文档，其实是一个文章知识库，我的文章很多图和内容都是借鉴而来。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;极客时间《分布式数据库》：极客时间有一个课叫分布式数据库，不会局限于讲tidb，主要讲解的是分布式数据库的各种知识，并且会列举市场上的分布式数据库做对比。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;《数据库系统内幕》：豆瓣评分8.5，这本书讲解了很多数据库理论基本知识，不论上分布式数据库还是单机数据库都会使用到，稍微有一点难懂，但是还是会有不少收获。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;如果大家觉得这篇文章对你有帮助，你的关注和转发是对我最大的支持，O(∩_∩)O:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/WLIGprPy3z49NQbPFF8GricNQSNMiaCd4ORITgwSuRh3TMQsiak8C1YibrmeMLRPlsjq1KTG7CW1D4qToT36PuSqMA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1d53266ebdb78106d5fe65390ee613a7</guid>
<title>[推荐] Java 线程池原理及最佳实践（1.5W 字，面试必问）</title>
<link>https://toutiao.io/k/39edoom</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1. 概述&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.1 线程池是什么&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;线程池（Thread Pool）是一种基于池化思想管理线程的工具，经常出现在多线程服务器中，如MySQL。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;创建线程本身开销大，反复创建并销毁，过多的占用内存。所以有大量线程创建考虑使用线程池&lt;/strong&gt;。线程池不用反复创建线程达到&lt;strong&gt;线程的复用&lt;/strong&gt;，更具配置合理利用cpu和内存减少了开销，性能会得到提高，还能统一管理任务&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如服务器收到大量请求，每个请求都分配线程去处理，对服务器性能考验就比较大，如果创建5个以上线程考虑使用线程池。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;线程过多会带来额外的开销，其中包括创建销毁线程的开销、调度线程的开销等等，同时也降低了计算机的整体性能。线程池维护多个线程，等待监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程开销的代价，另一方面避免了线程数量膨胀导致的过分调度问题，保证了对内核的充分利用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而本文描述线程池是JDK中提供的ThreadPoolExecutor类。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，使用线程池可以带来一系列好处：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;降低资源消耗&lt;/strong&gt;：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;提高响应速度&lt;/strong&gt;：任务到达时，无需等待线程创建即可立即执行。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;提高线程的可管理性&lt;/strong&gt;：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;提供更多更强大的功能&lt;/strong&gt;：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.2 线程池解决的问题是什么&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;线程池解决的核心问题就是资源管理问题。在并发环境下，系统不能够确定在任意时刻中，有多少任务需要执行，有多少资源需要投入。这种不确定性将带来以下若干问题：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;频繁申请/销毁资源和调度资源，将带来额外的消耗，可能会非常巨大。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对资源无限申请缺少抑制手段，易引发系统资源耗尽的风险。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;系统无法合理管理内部的资源分布，会降低系统的稳定性。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为解决资源分配这个问题，线程池采用了“池化”（Pooling）思想。池化，顾名思义，是为了最大化收益并最小化风险，而将资源统一在一起管理的一种思想。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pooling is the grouping together of resources (assets, equipment, personnel, effort, etc.) for the purposes of maximizing advantage or minimizing risk to the users. The term is used in finance, computing and equipment management.——wikipedia&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“池化”思想不仅仅能应用在计算机领域，在金融、设备、人员管理、工作管理等领域也有相关的应用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在计算机领域中的表现为：统一管理IT资源，包括服务器、存储、和网络资源等等。通过共享资源，使用户在低投入中获益。除去线程池，还有其他比较典型的几种使用策略包括：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;内存池(Memory Pooling)：预先申请内存，提升申请内存速度，减少内存碎片。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;连接池(Connection Pooling)：预先申请数据库连接，提升申请连接的速度，降低系统的开销。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实例池(Object Pooling)：循环使用对象，减少资源在初始化和释放时的昂贵损耗。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在了解完“是什么”和“为什么”之后，下面我们来一起深入一下线程池的内部实现原理。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2. 基本使用介绍及其相关参数和注重点&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来先看下面两张类图&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;&lt;strong&gt;ThreadPoolExecutor&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8817733990147784&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7B8iaauAfclNS8iaicfWRyHOeImut4ZIg01R5nltibITjmEeD6ABfPlpVOWJggxHkicgTHcOZHEQDCRHicvJWx3MQDbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;406&quot;/&gt;&lt;figcaption&gt;image-20210627142834199&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;&lt;strong&gt;ScheduledThreadPoolExecutor&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7111853088480802&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7B8iaauAfclNS8iaicfWRyHOeImut4ZIg01xBlSWT1U3NFFp6poh1eDE0bFdys0GADJCfl5AHay1a8ZYRvCOBga7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;599&quot;/&gt;&lt;figcaption&gt;image-20210627142859123&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;和&lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;算是我们最常用的线程池类了，从上面我们可以看到这俩个最终都实现了&lt;code&gt;Executor&lt;/code&gt;和&lt;code&gt;ExecutorService&lt;/code&gt;这两个接口，实际上主要的接口定义都是在&lt;code&gt;ExecutorService&lt;/code&gt;中&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.549469964664311&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7B8iaauAfclNS8iaicfWRyHOeImut4ZIg01D9IiaVUMwicg9YOeKHTkrOtvIqLLJibKTLalo4PJ4NCyqcmqK7MsZh15w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;566&quot;/&gt;&lt;figcaption&gt;image-20210627143249342&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3573487031700288&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7B8iaauAfclNS8iaicfWRyHOeImut4ZIg01voyoZJ2DsfOibCnsbWAVPoibQTJSoQ9jUZo47CALVic3N8BQBD1RFgPMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;694&quot;/&gt;&lt;figcaption&gt;image-20210627143331102&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们来着重讲解一下&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;的使用及其相关介绍&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我们来看下它的构造方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span&gt;(&lt;br/&gt;   &lt;span&gt;int&lt;/span&gt; corePoolSize,&lt;br/&gt;   &lt;span&gt;int&lt;/span&gt; maximumPoolSize,&lt;br/&gt;   &lt;span&gt;long&lt;/span&gt; keepAliveTime,&lt;br/&gt;   TimeUnit unit,&lt;br/&gt;   BlockingQueue&amp;lt;Runnable&amp;gt; workQueue,&lt;br/&gt;   ThreadFactory threadFactory,&lt;br/&gt;   RejectedExecutionHandler handler)&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参数说明：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;线程池在完成初始化之后，默认情况下，线程池中不会有任何线程，线程池会等有任务来的时候再去创建线程。核心线程创建出来后即使超出了线程保持的存活时间配置也不会销毁，核心线程只要创建就永驻了，就等着新任务进来进行处理。&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maximumPoolSize&lt;/code&gt;:线程池最大线程数量&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;核心线程忙不过来且任务存储队列满了的情况下，还有新任务进来的话就会继续开辟线程，但是也不是任意的开辟线程数量，线程数（包含核心线程）达到&lt;code&gt;maximumPoolSize&lt;/code&gt;后就不会产生新线程了，就会执行拒绝策略。&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;keepAliverTime&lt;/code&gt;：当活跃线程数大于核心线程数时，空闲的多余线程最大存活时间&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果线程池当前的线程数多于&lt;code&gt;corePoolSize&lt;/code&gt;，那么如果多余的线程空闲时间超过&lt;code&gt;keepAliveTime&lt;/code&gt;，那么这些多余的线程（超出核心线程数的那些线程）就会被回收。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;比如：&lt;code&gt;TimeUnit.MILLISECONDS&lt;/code&gt;、&lt;code&gt;TimeUnit.SECONDS&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;核心线程数满了后还有任务继续提交到线程池的话，就先进入&lt;code&gt;workQueue&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;code&gt;workQueue&lt;/code&gt;通常情况下有如下选择：&lt;/p&gt;&lt;p&gt;&lt;code&gt;LinkedBlockingQueue&lt;/code&gt;：无界队列，意味着无限制，其实是有限制，大小是int的最大值。也可以自定义大小。&lt;/p&gt;&lt;p&gt;&lt;code&gt;ArrayBlockingQueue&lt;/code&gt;：有界队列，可以自定义大小，到了阈值就开启新线程（不会超过&lt;code&gt;maximumPoolSize&lt;/code&gt;）。&lt;/p&gt;&lt;p&gt;&lt;code&gt;SynchronousQueue&lt;/code&gt;：&lt;code&gt;Executors.newCachedThreadPool();&lt;/code&gt;默认使用的队列。也不算是个队列，他不没有存储元素的能力。&lt;/p&gt;&lt;p&gt;一般都采取&lt;code&gt;LinkedBlockingQueue&lt;/code&gt;，因为他也可以设置大小，可以取代&lt;code&gt;ArrayBlockingQueue&lt;/code&gt;有界队列。&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;threadFactory&lt;/code&gt;：当线程池需要新的线程时，会用&lt;code&gt;threadFactory&lt;/code&gt;来生成新的线程&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;默认采用的是&lt;code&gt;DefaultThreadFactory&lt;/code&gt;，主要负责创建线程。&lt;code&gt;newThread()&lt;/code&gt;方法。创建出来的线程都在同一个线程组且优先级也是一样的。&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;handler&lt;/code&gt;：拒绝策略，任务量超出线程池的配置限制或执行shutdown还在继续提交任务的话，会执行&lt;code&gt;handler&lt;/code&gt;的逻辑。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;默认采用的是&lt;code&gt;AbortPolicy&lt;/code&gt;，遇到上面的情况，线程池将直接采取直接拒绝策略，也就是直接抛出异常。&lt;code&gt;RejectedExecutionException&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;实际上JDK为了我们方便使用线程池，提供了一个&lt;code&gt;Executors&lt;/code&gt;工具来为我们快速方便的创建出线程池&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Executors创建返回ThreadPoolExecutor对象的方法共有三种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Executors#newCachedThreadPool =&amp;gt; 创建可缓存的线程池&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Executors#newSingleThreadExecutor =&amp;gt; 创建单线程的线程池&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Executors#newFixedThreadPool =&amp;gt; 创建固定长度的线程池&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Executors#newCachedThreadPool方法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ExecutorService &lt;span&gt;newCachedThreadPool&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor(&lt;span&gt;0&lt;/span&gt;, Integer.MAX_VALUE,&lt;br/&gt;                                  &lt;span&gt;60L&lt;/span&gt;, TimeUnit.SECONDS,&lt;br/&gt;                                  &lt;span&gt;new&lt;/span&gt; SynchronousQueue&amp;lt;Runnable&amp;gt;());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CachedThreadPool是一个根据需要创建新线程的线程池&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;corePoolSize =&amp;gt; 0，核心线程池的数量为0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;maximumPoolSize =&amp;gt; Integer.MAX_VALUE，可以认为最大线程数是无限的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;keepAliveTime =&amp;gt; 60L&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;unit =&amp;gt; 秒&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;workQueue =&amp;gt; SynchronousQueue&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一个任务提交时，corePoolSize为0不创建核心线程，SynchronousQueue是一个不存储元素的队列，可以理解为队里永远是满的，因此最终会创建非核心线程来执行任务。对于非核心线程空闲60s时将被回收。&lt;strong&gt;因为Integer.MAX_VALUE非常大，可以认为是可以无限创建线程的，在资源有限的情况下容易引起OOM异常&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Executors#newSingleThreadExecutor方法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ExecutorService &lt;span&gt;newFixedThreadPool&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; nThreads)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor(nThreads, nThreads,&lt;br/&gt;                                  &lt;span&gt;0L&lt;/span&gt;, TimeUnit.MILLISECONDS,&lt;br/&gt;                                  &lt;span&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;Runnable&amp;gt;());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SingleThreadExecutor是单线程线程池，只有一个核心线程&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;corePoolSize =&amp;gt; 1，核心线程池的数量为1&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;maximumPoolSize =&amp;gt; 1，只可以创建一个非核心线程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;keepAliveTime =&amp;gt; 0L&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;unit =&amp;gt; 毫秒&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;workQueue =&amp;gt; LinkedBlockingQueue&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一个任务提交时，首先会创建一个核心线程来执行任务，如果超过核心线程的数量，将会放入队列中，&lt;strong&gt;因为LinkedBlockingQueue是长度为Integer.MAX_VALUE的队列，可以认为是无界队列，因此往队列中可以插入无限多的任务，在资源有限的时候容易引起OOM异常&lt;/strong&gt;，同时因为无界队列，maximumPoolSize和keepAliveTime参数将无效，压根就不会创建非核心线程&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Executors#newFixedThreadPool方法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ExecutorService &lt;span&gt;newFixedThreadPool&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; nThreads)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor(nThreads, nThreads,&lt;br/&gt;                                  &lt;span&gt;0L&lt;/span&gt;, TimeUnit.MILLISECONDS,&lt;br/&gt;                                  &lt;span&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;Runnable&amp;gt;());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;FixedThreadPool是固定核心线程的线程池，固定核心线程数由用户传入&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;corePoolSize =&amp;gt; 1，核心线程池的数量为1&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;maximumPoolSize =&amp;gt; 1，只可以创建一个非核心线程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;keepAliveTime =&amp;gt; 0L&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;unit =&amp;gt; 毫秒&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;workQueue =&amp;gt; LinkedBlockingQueue&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;它和SingleThreadExecutor类似，唯一的区别就是核心线程数不同，并且由于使用的是LinkedBlockingQueue，在资源有限的时候容易引起OOM异常&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;因此由上面的结论，可以看出使用&lt;code&gt;Executors&lt;/code&gt;创建出的线程池是有可能引起内存溢出的，所以我们并不推荐甚至不允许使用&lt;code&gt;Executors&lt;/code&gt;来创建线程池&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;线程池的流程运转原理&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提交一个任务到线程池中，线程池的处理流程如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、判断&lt;strong&gt;线程池里的核心线程&lt;/strong&gt;是否都在执行任务，如果不是（核心线程空闲或者还有核心线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，则进入下个流程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、判断&lt;strong&gt;线程池里的线程&lt;/strong&gt;是否都处于工作状态&lt;span&gt;[线程数量是否达到最大值]&lt;/span&gt;，如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5933014354066986&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7B8iaauAfclNS8iaicfWRyHOeImut4ZIg01aggh3qZRBibhKWkEcvv9nY7W7dgntibB8oyXqnTeOEkTwDGb04ibSmMxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;627&quot;/&gt;&lt;figcaption&gt;image-20210627171512964&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其他的参数都比较容易理解，所以我们来着重看下拒绝策略&lt;code&gt;handler&lt;/code&gt;这个参数，其类型为&lt;code&gt;RejectedExecutionHandler&lt;/code&gt;，当线程池达到最大值并且线程数也达到最大值时才会工作，当队列和线程池都满了，说明线程池处于饱和状态，那么必须对新提交的任务采用一种特殊的策略来进行处理。这个策略默认配置是&lt;code&gt;AbortPolicy&lt;/code&gt;，表示无法处理新的任务而抛出异常。JAVA提供了4种策略：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;AbortPolicy&lt;/code&gt;：直接抛出异常&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;CallerRunsPolicy&lt;/code&gt;：只用调用所在的线程运行任务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;DiscardOldestPolicy&lt;/code&gt;：丢弃队列里最近的一个任务，并执行当前任务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;DiscardPolicy&lt;/code&gt;：不处理，丢弃掉。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.33038999264164826&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7B8iaauAfclNS8iaicfWRyHOeImut4ZIg01xibXIhFWPFtzs4ViaWuQfMx1esRdicUlZ5ePFFInsnibRVxagbZqj76Adw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1359&quot;/&gt;&lt;figcaption&gt;image-20210627174730111&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;当然我们上面也说了&lt;code&gt;handler&lt;/code&gt;是一个&lt;code&gt;RejectedExecutionHandler&lt;/code&gt;的类型，所以我们也可以实现这个接口来创建一个我们自己的拒绝策略&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;自定义拒绝策略&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拒绝策略是一个接口，其设计如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;RejectedExecutionHandler&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;rejectedExecution&lt;/span&gt;&lt;span&gt;(Runnable r, ThreadPoolExecutor executor)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户可以通过实现这个接口去定制拒绝策略，在手动配置线程池时的构造函数传入或者通过方法&lt;code&gt;setRejectedExecutionHandler&lt;/code&gt; 在线程池运行期间改变拒绝任务的策略。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; corePoolSize,&lt;br/&gt;                              &lt;span&gt;int&lt;/span&gt; maximumPoolSize,&lt;br/&gt;                              &lt;span&gt;long&lt;/span&gt; keepAliveTime,&lt;br/&gt;                              TimeUnit unit,&lt;br/&gt;                              BlockingQueue&amp;lt;Runnable&amp;gt; workQueue,&lt;br/&gt;                              ThreadFactory threadFactory,&lt;br/&gt;                              RejectedExecutionHandler handler)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;//省略其他代码&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.handler = handler;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setRejectedExecutionHandler&lt;/span&gt;&lt;span&gt;(RejectedExecutionHandler handler)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (handler == &lt;span&gt;null&lt;/span&gt;)&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NullPointerException();&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.handler = handler;&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AbortPolicyWithReport&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;ThreadPoolExecutor&lt;/span&gt;.&lt;span&gt;AbortPolicy&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger logger = LoggerFactory.getLogger(AbortPolicyWithReport&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String threadName;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; URL url;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; lastPrintTime = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Semaphore guard = &lt;span&gt;new&lt;/span&gt; Semaphore(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;AbortPolicyWithReport&lt;/span&gt;&lt;span&gt;(String threadName, URL url)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.threadName = threadName;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.url = url;&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;rejectedExecution&lt;/span&gt;&lt;span&gt;(Runnable r, ThreadPoolExecutor e)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String msg = String.format(&lt;span&gt;&quot;Thread pool is EXHAUSTED!&quot;&lt;/span&gt; +&lt;br/&gt;                     &lt;span&gt;&quot; Thread Name: %s, Pool Size: %d (active: %d, core: %d, max: %d, largest: %d), Task: %d (completed: %d),&quot;&lt;/span&gt; +&lt;br/&gt;                     &lt;span&gt;&quot; Executor status:(isShutdown:%s, isTerminated:%s, isTerminating:%s), in %s://%s:%d!&quot;&lt;/span&gt;,&lt;br/&gt;                     threadName, e.getPoolSize(), e.getActiveCount(), e.getCorePoolSize(), e.getMaximumPoolSize(), e.getLargestPoolSize(),&lt;br/&gt;                     e.getTaskCount(), e.getCompletedTaskCount(), e.isShutdown(), e.isTerminated(), e.isTerminating(),&lt;br/&gt;                     url.getProtocol(), url.getIp(), url.getPort());&lt;br/&gt;        logger.warn(msg);&lt;br/&gt;        dumpJStack();&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RejectedExecutionException(msg);&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;dumpJStack&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;       &lt;span&gt;//......&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;拒绝策略的执行&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从调用&lt;code&gt;execute()&lt;/code&gt;方法，经过一系列判断，当该任务被判断需要被被拒绝后，会接着执行&lt;code&gt;reject(command)&lt;/code&gt; ，最终就会执行具体实现&lt;code&gt;RejectedExecutionHandler&lt;/code&gt;接口的&lt;code&gt;rejectedExecution(r,executor)&lt;/code&gt; 方法了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;reject&lt;/span&gt;&lt;span&gt;(Runnable command)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        handler.rejectedExecution(command, &lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3. 线程池结合SpringBoot实战(结合项目)&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;SpringBoot使用线程池我们常见的有两种方式：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;使用默认的线程池&lt;code&gt;@Async&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用自定义的线程池&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;方式一：通过@Async注解调用&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步：在Application启动类上面加上&lt;code&gt;@EnableAsync&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@EnableAsync&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ThreadpoolApplication&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        SpringApplication.run(ThreadpoolApplication&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;args&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步：在需要异步执行的方法上加上@Async注解&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AsyncTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger logger = LoggerFactory.getLogger(&lt;span&gt;this&lt;/span&gt;.getClass());&lt;br/&gt;    &lt;span&gt;@Async&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(String name)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;//这里使用logger 方便查看执行的线程是什么&lt;/span&gt;&lt;br/&gt;        logger.info(&lt;span&gt;&quot;异步线程启动 started.&quot;&lt;/span&gt;+name);  &lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三步：测试类进行测试验证&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    AsyncTest asyncTest;&lt;br/&gt;    &lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;contextLoads&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;        asyncTest.hello(&lt;span&gt;&quot;afsasfasf&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;//一定要休眠 不然主线程关闭了，子线程还没有启动&lt;/span&gt;&lt;br/&gt;        Thread.sleep(&lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看打印的日志：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;INFO 2276 --- [           main] c.h.s.t.t.ThreadpoolApplicationTests     : Started ThreadpoolApplicationTests in 3.003 seconds (JVM running for 5.342)&lt;/p&gt;&lt;p&gt;INFO 2276 --- [         task-1] c.h.s.threadpool.threadpool.AsyncTest    : 异步线程启动 started.afsasfasf&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以清楚的看到新开了一个&lt;code&gt;task-1&lt;/code&gt;的线程执行任务。验证成功！！！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;***注意：***&lt;code&gt;@Async&lt;/code&gt;注解失效常景&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;方式二：使用自定义的线程池&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在默认配置信息里面是没有线程池的拒绝策略设置的方法的，如果需要更换拒绝策略就需要自定义线程池，并且如果项目当中需要多个自定义的线程池，又要如何进行管理呢？&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;自定义Configuration&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步：创建一个ThreadPoolConfig 先只配置一个线程池，并设置拒绝策略为CallerRunsPolicy&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;@Configuration&lt;br/&gt;public &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ThreadPoolConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    @Bean(&lt;span&gt;&quot;taskExecutor&quot;&lt;/span&gt;)&lt;br/&gt;    public Executor taskExecutor() {&lt;br/&gt;        ThreadPoolTaskExecutor taskExecutor = &lt;span&gt;new&lt;/span&gt; ThreadPoolTaskExecutor();&lt;br/&gt;        &lt;span&gt;//设置线程池参数信息&lt;/span&gt;&lt;br/&gt;        taskExecutor.setCorePoolSize(&lt;span&gt;10&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setMaxPoolSize(&lt;span&gt;50&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setQueueCapacity(&lt;span&gt;200&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setKeepAliveSeconds(&lt;span&gt;60&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setThreadNamePrefix(&lt;span&gt;&quot;myExecutor--&quot;&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setWaitForTasksToCompleteOnShutdown(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setAwaitTerminationSeconds(&lt;span&gt;60&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;//修改拒绝策略为使用当前线程执行&lt;/span&gt;&lt;br/&gt;        taskExecutor.setRejectedExecutionHandler(&lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor.CallerRunsPolicy());&lt;br/&gt;        &lt;span&gt;//初始化线程池&lt;/span&gt;&lt;br/&gt;        taskExecutor.initialize();&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; taskExecutor;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后执行之前写的测试代码发现，使用的线程池已经变成自定义的线程池了。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;INFO 12740 --- [  myExecutor--2] c.h.s.t.t.ThreadpoolApplicationTests     : threadPoolTaskExecutor 创建线程&lt;/p&gt;&lt;p&gt;INFO 12740 --- [  myExecutor--1] c.h.s.threadpool.threadpool.AsyncTest    : 异步线程启动 started.async注解创建&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步：如果配置有多个线程池,该如何指定线程池呢？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;@Configuration&lt;br/&gt;public &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ThreadPoolConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;       @Bean(&lt;span&gt;&quot;taskExecutor&quot;&lt;/span&gt;)&lt;br/&gt;    public Executor taskExecutor() {&lt;br/&gt;        ThreadPoolTaskExecutor taskExecutor = &lt;span&gt;new&lt;/span&gt; ThreadPoolTaskExecutor();&lt;br/&gt;        &lt;span&gt;//设置线程池参数信息&lt;/span&gt;&lt;br/&gt;        taskExecutor.setCorePoolSize(&lt;span&gt;10&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setMaxPoolSize(&lt;span&gt;50&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setQueueCapacity(&lt;span&gt;200&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setKeepAliveSeconds(&lt;span&gt;60&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setThreadNamePrefix(&lt;span&gt;&quot;myExecutor--&quot;&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setWaitForTasksToCompleteOnShutdown(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setAwaitTerminationSeconds(&lt;span&gt;60&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;//修改拒绝策略为使用当前线程执行&lt;/span&gt;&lt;br/&gt;        taskExecutor.setRejectedExecutionHandler(&lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor.CallerRunsPolicy());&lt;br/&gt;        &lt;span&gt;//初始化线程池&lt;/span&gt;&lt;br/&gt;        taskExecutor.initialize();&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; taskExecutor;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    @Bean(&lt;span&gt;&quot;poolExecutor&quot;&lt;/span&gt;)&lt;br/&gt;    public Executor poolExecutor() {&lt;br/&gt;        ThreadPoolTaskExecutor taskExecutor = &lt;span&gt;new&lt;/span&gt; ThreadPoolTaskExecutor();&lt;br/&gt;        &lt;span&gt;//设置线程池参数信息&lt;/span&gt;&lt;br/&gt;        taskExecutor.setCorePoolSize(&lt;span&gt;10&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setMaxPoolSize(&lt;span&gt;50&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setQueueCapacity(&lt;span&gt;200&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setKeepAliveSeconds(&lt;span&gt;60&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setThreadNamePrefix(&lt;span&gt;&quot;myExecutor2--&quot;&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setWaitForTasksToCompleteOnShutdown(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setAwaitTerminationSeconds(&lt;span&gt;60&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;//修改拒绝策略为使用当前线程执行&lt;/span&gt;&lt;br/&gt;        taskExecutor.setRejectedExecutionHandler(&lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor.CallerRunsPolicy());&lt;br/&gt;        &lt;span&gt;//初始化线程池&lt;/span&gt;&lt;br/&gt;        taskExecutor.initialize();&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; taskExecutor;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    @Bean(&lt;span&gt;&quot;taskPoolExecutor&quot;&lt;/span&gt;)&lt;br/&gt;    public Executor taskPoolExecutor() {&lt;br/&gt;        ThreadPoolTaskExecutor taskExecutor = &lt;span&gt;new&lt;/span&gt; ThreadPoolTaskExecutor();&lt;br/&gt;        &lt;span&gt;//设置线程池参数信息&lt;/span&gt;&lt;br/&gt;        taskExecutor.setCorePoolSize(&lt;span&gt;10&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setMaxPoolSize(&lt;span&gt;50&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setQueueCapacity(&lt;span&gt;200&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setKeepAliveSeconds(&lt;span&gt;60&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setThreadNamePrefix(&lt;span&gt;&quot;myExecutor3--&quot;&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setWaitForTasksToCompleteOnShutdown(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        taskExecutor.setAwaitTerminationSeconds(&lt;span&gt;60&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;//修改拒绝策略为使用当前线程执行&lt;/span&gt;&lt;br/&gt;        taskExecutor.setRejectedExecutionHandler(&lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor.CallerRunsPolicy());&lt;br/&gt;        &lt;span&gt;//初始化线程池&lt;/span&gt;&lt;br/&gt;        taskExecutor.initialize();&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; taskExecutor;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行测试类，直接报错说找到多个类，不知道加载哪个类：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;No qualifying bean of type &#x27;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&#x27; available: expected single matching bean but found 3: taskExecutor,taskPoolExecutor&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于测试类当中是这样自动注入的:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;ThreadPoolTaskExecutor threadPoolTaskExecutor; &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;考虑到@Autowired 以及@Resource两个注入时的存在多个类如何匹配问题，然后发现只要我们在注入时指定具体的bean就会调用对应的线程池！！！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即修改测试类如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    AsyncTest asyncTest;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    ThreadPoolTaskExecutor poolExecutor; &lt;span&gt;//会去匹配 @Bean(&quot;poolExecutor&quot;) 这个线程池&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;contextLoads&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;        asyncTest.hello(&lt;span&gt;&quot;async注解创建&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;//一定要休眠 不然主线程关闭了，子线程还没有启动&lt;/span&gt;&lt;br/&gt;        poolExecutor.submit(&lt;span&gt;new&lt;/span&gt; Thread(()-&amp;gt;{&lt;br/&gt;            logger.info(&lt;span&gt;&quot;threadPoolTaskExecutor 创建线程&quot;&lt;/span&gt;);&lt;br/&gt;        }));&lt;br/&gt;        Thread.sleep(&lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后得到如下信息：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;INFO 13636 --- [ myExecutor2--1] c.h.s.t.t.ThreadpoolApplicationTests     : threadPoolTaskExecutor 创建线程 INFO 13636 --- [  myExecutor--1] c.h.s.threadpool.threadpool.AsyncTest    : 异步线程启动 started.async注解创建&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果是使用的@Async注解，只需要在注解里面指定bean的名称就可以切换到对应的线程池去了。如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; &lt;span&gt;@Async&lt;/span&gt;(&lt;span&gt;&quot;taskPoolExecutor&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(String name)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        logger.info(&lt;span&gt;&quot;异步线程启动 started.&quot;&lt;/span&gt;+name);&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果有多个线程池，但是在@Async注解里面没有指定的话，会默认加载第一个配置的线程池&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;submit和executor区别&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;execute和submit都属于线程池的方法，execute只能提交Runnable类型的任务，而submit既能提交Runnable类型任务也能提交Callable类型任务。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;execute会直接抛出任务执行时的异常，submit会吃掉异常，可通过Future的get方法&lt;span&gt;[会阻塞]&lt;/span&gt;将任务执行时的异常重新抛出。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;execute所属顶层接口是Executor,submit所属顶层接口是ExecutorService，实现类ThreadPoolExecutor重写了execute方法,抽象类AbstractExecutorService重写了submit方法。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;submit和execute由于参数不同有四种实现形式，如下所示，本文主要研究这四种形式在各自使用场景下的区别和联系&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;这种提交的方式会返回一个Future对象，这个Future对象代表这线程的执行结果&lt;br/&gt;当主线程调用Future的get方法的时候会获取到从线程中返回的结果数据。&lt;br/&gt;如果在线程的执行过程中发生了异常，get会获取到异常的信息。&lt;br/&gt;&amp;lt;T&amp;gt; &lt;span&gt;Future&amp;lt;T&amp;gt; &lt;span&gt;submit&lt;/span&gt;&lt;span&gt;(Callable&amp;lt;T&amp;gt; task)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;当线程正常结束的时候调用Future的get方法会返回result对象，当线程抛出异常的时候会获取到对应的异常的信息。&lt;br/&gt;&amp;lt;T&amp;gt; &lt;span&gt;Future&amp;lt;T&amp;gt; &lt;span&gt;submit&lt;/span&gt;&lt;span&gt;(Runnable task, T result)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;提交一个Runable接口的对象，这样当调用get方法的时候，如果线程执行成功会直接返回&lt;span&gt;null&lt;/span&gt;，如果线程执行异常会返回异常的信息&lt;br/&gt;Future&amp;lt;?&amp;gt; submit(Runnable task);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;execute&lt;/span&gt;&lt;span&gt;(Runnable command)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;execute提交的方式只能提交一个Runnable的对象，且该方法的返回值是void，也即是提交后如果线程运行后，和主线程就脱离了关系了，当然可以设置一些变量来获取到线程的运行结果。并且当线程的执行过程中抛出了异常通常来说主线程也无法获取到异常的信息的，只有通过ThreadFactory主动设置线程的异常处理类才能感知到提交的线程中的异常信息。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4. 线程池原理&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.1 主要介绍线程池中线程复用原理&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;对于线程池的复用原理，可以简单的用一句话概括：创建指定数量的线程并开启，判断当前是否有任务执行，如果有则执行任务。再通俗易懂一些：创建指定数量的线程并运行，重写run方法，循环从任务队列中取Runnable对象，执行Runnable对象的run方法。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6384105960264901&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7B8iaauAfclNS8iaicfWRyHOeImut4ZIg01aibaicpjsUrsCB1PMs6nXplRKHE864ZzUuvpygBF2x9REFdhMU2eBgzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;755&quot;/&gt;&lt;figcaption&gt;image-20210702000757740&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;接下来开始手写线程池吧，注意是简易线程池，跟JDK自带的线程池无法相提并论，在这里我省略了判断当前线程数有没有大于核心线程数的步骤，简化成直接从队列中取任务，对于理解原理来说已然足矣，代码如下：&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyExecutorService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 一直保持运行的线程&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; List&amp;lt;WorkThread&amp;gt; workThreads;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/*&lt;br/&gt;     * 任务队列容器&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; BlockingDeque&amp;lt;Runnable&amp;gt; taskRunables;&lt;br/&gt;     &lt;span&gt;/*&lt;br/&gt;     * 线程池当前是否停止&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; isWorking = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;MyExecutorService&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; workThreads, &lt;span&gt;int&lt;/span&gt; taskRunables)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.workThreads = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.taskRunables = &lt;span&gt;new&lt;/span&gt; LinkedBlockingDeque&amp;lt;&amp;gt;(taskRunables);&lt;br/&gt;        &lt;span&gt;//直接运行核心线程&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; workThreads; i++) {&lt;br/&gt;            WorkThread workThread = &lt;span&gt;new&lt;/span&gt; WorkThread();&lt;br/&gt;            workThread.start();&lt;br/&gt;            &lt;span&gt;this&lt;/span&gt;.workThreads.add(workThread);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * WorkThread累，线程池的任务类，类比JDK的worker&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WorkThread&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;while&lt;/span&gt; (isWorking || taskRunables.size() != &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;//获取任务&lt;/span&gt;&lt;br/&gt;                Runnable task = taskRunables.poll();&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (task != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                    task.run();&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;//执行execute，jdk中会存在各种判断，这里省略了&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;execute&lt;/span&gt;&lt;span&gt;(Runnable runnable)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//把任务加入队列&lt;/span&gt;&lt;br/&gt;        taskRunables.offer(runnable);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;//停止线程池&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;shutdown&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.isWorking = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//测试自定义的线程池&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    MyExecutorService myExecutorService = &lt;span&gt;new&lt;/span&gt; MyExecutorService(&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;//运行8次&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;8&lt;/span&gt;; i++) {&lt;br/&gt;        myExecutorService.execute(() -&amp;gt; {&lt;br/&gt;            System.out.println(Thread.currentThread().getName() + &lt;span&gt;&quot;task begin&quot;&lt;/span&gt;);&lt;br/&gt;        });&lt;br/&gt;    }&lt;br/&gt;    myExecutorService.shutdown();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;通过以上分析并手写线程池，我们应该已经基本理解了线程池的复用机制原理，实际上JDK的实现机制远比我们手写的要复杂的多，主要有以下两点，可以让我们进一步加深理解：&lt;/p&gt;&lt;/blockquote&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;当有新任务来的时候，首先判断当前的线程数有没有超过核心线程数，如果没超过则直接新建一个线程来执行新的任务，如果超过了则判断缓存队列有没有满，没满则将新任务放进缓存队列中，如果队列已满并且线程池中的线程数已经达到了指定的最大线程数，那就根据相应的策略拒绝任务，默认为抛异常。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;当缓存队列中的任务都执行完毕后，线程池中的线程数如果大于核心线程数并且已经超过了指定的存活时间（存活时间通过队列的poll方法传入，如果指定时间内没有获取到任务，则break退出，线程运行结束），就销毁多出来的线程，直到线程池中的线程数等于核心线程数。此时剩余的线程会一直处于阻塞状态，等待新的任务到来。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;有兴趣可以看这块的源码，大致的思想就是：&lt;/p&gt;&lt;p&gt;&lt;code&gt;首先，线程池会有一个管理任务的队列，这个任务队列里存放的就是各种任务，线程池会一直不停循环的去查看消息队里有没有接到任务，如果没有，则继续循环，如果有了则开始创建线程，如果给这个线程池设定的容量是10个线程，那么当有任务的时候就会调用创建线程的函数方法去根据当前任务总数量依次创建线程（这里创建线程的函数方法都是你提前些好了的），线程中会写好循环获取任务队列里任务的逻辑、判断是否销毁该线程的逻辑、进入等待的逻辑，这样线程一旦创建出来就会循环的去查询任务队列里的任务，拿到任务后就执行，执行任务完毕后判断是否销毁该线程，如果不销毁就进入等待（sleep），等待时间过后继续查询消息是否有任务，如此循环，直到逻辑判断需要销毁该线程为止（一般都是根据设定时间去判断是否销毁，例如在线程创建的时候设置一个计时器去控制，如果180秒都没有接到新的任务，则销毁该线程） 。&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>92c2f26977f6988b1e5bc296c7db0661</guid>
<title>[推荐] Spring 中定义 bean 的 12 种方法，真的绝了</title>
<link>https://toutiao.io/k/88jw8t4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxODkzNTQ3Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uL371281oDHlDcdbjNJic1yCwAu2dmJ9AunIQh9DXdm5JE7v9libnPgJQicoaGs9Eiaee2kPeFGWJxsPkZ9zCQbrIw/0?wx_fmt=png&quot; data-nickname=&quot;苏三说技术&quot; data-alias=&quot;susanSayJava&quot; data-signature=&quot;作者就职于知名互联网公司，掘金月度优秀作者，从事开发、架构和部分管理工作。实战经验丰富，对jdk、spring、springboot、springcloud、mybatis等开源框架源码有一定研究，欢迎关注，和我一起交流。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在庞大的java体系中，spring有着举足轻重的地位，它给每位开发者带来了极大的便利和惊喜。我们都知道spring是创建和管理bean的工厂，它提供了多种定义bean的方式，能够满足我们日常工作中的多种业务场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么问题来了，你知道spring中有哪些方式可以定义bean？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我估计很多人会说出以下三种：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2583547557840617&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhv86vee0KJibhgC7lR05RKSuX7t9VLFNIGvLuqBWHdABjmDMrsxkCezQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1556&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没错，但我想说的是以上三种方式只是开胃小菜，实际上spring的功能远比你想象中更强大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;各位看官如果不信，请继续往下看。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. xml文件配置bean&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先从&lt;code&gt;xml配置bean&lt;/code&gt;开始，它是spring最早支持的方式。后来，随着&lt;code&gt;springboot&lt;/code&gt;越来越受欢迎，该方法目前已经用得很少了，但我建议我们还是有必要了解一下。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.1 构造器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你之前有在bean.xml文件中配置过bean的经历，那么对如下的配置肯定不会陌生：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;bean id=&lt;span&gt;&quot;personService&quot;&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span&gt;&quot;com.sue.cache.service.test7.PersonService&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&amp;lt;/bean&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式是以前使用最多的方式，它默认使用了无参构造器创建bean。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然我们还可以使用有参的构造器，通过&lt;code&gt;&amp;lt;constructor-arg&amp;gt;&lt;/code&gt;标签来完成配置。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;bean id=&lt;span&gt;&quot;personService&quot;&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span&gt;&quot;com.sue.cache.service.test7.PersonService&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;   &amp;lt;constructor-arg index=&lt;span&gt;&quot;0&quot;&lt;/span&gt; value=&lt;span&gt;&quot;susan&quot;&lt;/span&gt;&amp;gt;&amp;lt;/constructor-arg&amp;gt;&lt;br/&gt;   &amp;lt;constructor-arg index=&lt;span&gt;&quot;1&quot;&lt;/span&gt; ref=&lt;span&gt;&quot;baseInfo&quot;&lt;/span&gt;&amp;gt;&amp;lt;/constructor-arg&amp;gt;&lt;br/&gt;&amp;lt;/bean&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;index&lt;/code&gt;表示下标，从0开始。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;value&lt;/code&gt;表示常量值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ref&lt;/code&gt;表示引用另一个bean&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.2 setter方法&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，spring还提供了另外一种思路：通过setter方法设置bean所需参数，这种方式耦合性相对较低，比有参构造器使用更为广泛。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先定义Person实体：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String name;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; age;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它里面包含：成员变量name和age，getter/setter方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在bean.xml文件中配置bean时，加上&lt;code&gt;&amp;lt;property&amp;gt;&lt;/code&gt;标签设置bean所需参数。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;bean id=&lt;span&gt;&quot;person&quot;&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span&gt;&quot;com.sue.cache.service.test7.Person&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;   &amp;lt;property name=&lt;span&gt;&quot;name&quot;&lt;/span&gt; value=&lt;span&gt;&quot;susan&quot;&lt;/span&gt;&amp;gt;&amp;lt;/constructor-arg&amp;gt;&lt;br/&gt;   &amp;lt;property name=&lt;span&gt;&quot;age&quot;&lt;/span&gt; value=&lt;span&gt;&quot;18&quot;&lt;/span&gt;&amp;gt;&amp;lt;/constructor-arg&amp;gt;&lt;br/&gt;&amp;lt;/bean&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.3 静态工厂&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式的关键是需要定义一个工厂类，它里面包含一个创建bean的静态方法。例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SusanBeanFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Person &lt;span&gt;createPerson&lt;/span&gt;&lt;span&gt;(String name, &lt;span&gt;int&lt;/span&gt; age)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Person(name, age);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来定义Person类如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@AllArgsConstructor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@NoArgsConstructor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String name;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; age;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它里面包含：成员变量name和age，getter/setter方法，无参构造器和全参构造器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在bean.xml文件中配置bean时，通过&lt;code&gt;factory-method&lt;/code&gt;参数指定静态工厂方法，同时通过&lt;code&gt;&amp;lt;constructor-arg&amp;gt;&lt;/code&gt;设置相关参数。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;bean &lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span&gt;&quot;com.sue.cache.service.test7.SusanBeanFactory&quot;&lt;/span&gt; factory-method=&lt;span&gt;&quot;createPerson&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;   &amp;lt;constructor-arg index=&lt;span&gt;&quot;0&quot;&lt;/span&gt; value=&lt;span&gt;&quot;susan&quot;&lt;/span&gt;&amp;gt;&amp;lt;/constructor-arg&amp;gt;&lt;br/&gt;   &amp;lt;constructor-arg index=&lt;span&gt;&quot;1&quot;&lt;/span&gt; value=&lt;span&gt;&quot;18&quot;&lt;/span&gt;&amp;gt;&amp;lt;/constructor-arg&amp;gt;&lt;br/&gt;&amp;lt;/bean&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.4 实例工厂方法&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式也需要定义一个工厂类，但里面包含非静态的创建bean的方法。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SusanBeanFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Person &lt;span&gt;createPerson&lt;/span&gt;&lt;span&gt;(String name, &lt;span&gt;int&lt;/span&gt; age)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Person(name, age);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Person类跟上面一样，就不多说了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后bean.xml文件中配置bean时，需要先配置工厂bean。然后在配置实例bean时，通过&lt;code&gt;factory-bean&lt;/code&gt;参数指定该工厂bean的引用。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;bean id=&lt;span&gt;&quot;susanBeanFactory&quot;&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span&gt;&quot;com.sue.cache.service.test7.SusanBeanFactory&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&amp;lt;/bean&amp;gt;&lt;br/&gt;&amp;lt;bean factory-bean=&lt;span&gt;&quot;susanBeanFactory&quot;&lt;/span&gt; factory-method=&lt;span&gt;&quot;createPerson&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;   &amp;lt;constructor-arg index=&lt;span&gt;&quot;0&quot;&lt;/span&gt; value=&lt;span&gt;&quot;susan&quot;&lt;/span&gt;&amp;gt;&amp;lt;/constructor-arg&amp;gt;&lt;br/&gt;   &amp;lt;constructor-arg index=&lt;span&gt;&quot;1&quot;&lt;/span&gt; value=&lt;span&gt;&quot;18&quot;&lt;/span&gt;&amp;gt;&amp;lt;/constructor-arg&amp;gt;&lt;br/&gt;&amp;lt;/bean&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.5 FactoryBean&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道大家有没有发现，上面的实例工厂方法每次都需要创建一个工厂类，不方面统一管理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时我们可以使用&lt;code&gt;FactoryBean&lt;/code&gt;接口。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserFactoryBean&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;FactoryBean&lt;/span&gt;&amp;lt;&lt;span&gt;User&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; User &lt;span&gt;getObject&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; User();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; Class&amp;lt;?&amp;gt; getObjectType() {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; User&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在它的&lt;code&gt;getObject&lt;/code&gt;方法中可以实现我们自己的逻辑创建对象，并且在&lt;code&gt;getObjectType&lt;/code&gt;方法中我们可以定义对象的类型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在bean.xml文件中配置bean时，只需像普通的bean一样配置即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;bean id=&lt;span&gt;&quot;userFactoryBean&quot;&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span&gt;&quot;com.sue.async.service.UserFactoryBean&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&amp;lt;/bean&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;轻松搞定，so easy。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注意：getBean(&quot;userFactoryBean&quot;);获取的是getObject方法中返回的对象。而getBean(&quot;&amp;amp;userFactoryBean&quot;);获取的才是真正的UserFactoryBean对象。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们通过上面五种方式，在bean.xml文件中把bean配置好之后，spring就会自动扫描和解析相应的标签，并且帮我们创建和实例化bean，然后放入spring容器中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽说基于xml文件的方式配置bean，简单而且非常灵活，比较适合一些小项目。但如果遇到比较复杂的项目，则需要配置大量的bean，而且bean之间的关系错综复杂，这样久而久之会导致xml文件迅速膨胀，非常不利于bean的管理。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. Component注解&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决bean太多时，xml文件过大，从而导致膨胀不好维护的问题。在spring2.5中开始支持：&lt;code&gt;@Component&lt;/code&gt;、&lt;code&gt;@Repository&lt;/code&gt;、&lt;code&gt;@Service&lt;/code&gt;、&lt;code&gt;@Controller&lt;/code&gt;等注解定义bean。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你有看过这些注解的源码的话，就会惊奇得发现：其实后三种注解也是&lt;code&gt;@Component&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.485&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhTHXro0Ea7SvvYM85mPiaUOasZaHV6Fm0Zgv0iaHXp0sPEVvpsUDukeicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;img data-ratio=&quot;0.47017543859649125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhmAhpibMAtVAbj5N880cFQL691Cto4kDk6Gxkh9lqCv88rRmXBkwuibIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1140&quot;/&gt;&lt;img data-ratio=&quot;0.49222797927461137&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhh8GcvFgMWKzTELdclr5xbn6Ym5GuRWkPeMqzJxuiaia6eicmD7novwpYyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1158&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;系列注解的出现，给我们带来了极大的便利。我们不需要像以前那样在bean.xml文件中配置bean了，现在只用在类上加Component、Repository、Service、Controller，这四种注解中的任意一种，就能轻松完成bean的定义。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PersonService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;get&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;data&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，这四种注解在功能上没有特别的区别，不过在业界有个不成文的约定：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Controller 一般用在控制层&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Service 一般用在业务层&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Repository 一般用在数据层&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Component 一般用在公共组件上&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;太棒了，简直一下子解放了我们的双手。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，需要特别注意的是，通过这种&lt;code&gt;@Component&lt;/code&gt;扫描注解的方式定义bean的前提是：&lt;strong&gt;需要先配置扫描路径&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前常用的配置扫描路径的方式如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在applicationContext.xml文件中使用&lt;code&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt;标签。例如：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;context:component-scan base-&lt;span&gt;package&lt;/span&gt;=&lt;span&gt;&quot;com.sue.cache&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在springboot的启动类上加上&lt;code&gt;@ComponentScan&lt;/code&gt;注解，例如：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@ComponentScan&lt;/span&gt;(basePackages = &lt;span&gt;&quot;com.sue.cache&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Application&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; SpringApplicationBuilder(Application&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;).&lt;span&gt;web&lt;/span&gt;(&lt;span&gt;WebApplicationType&lt;/span&gt;.&lt;span&gt;SERVLET&lt;/span&gt;).&lt;span&gt;run&lt;/span&gt;(&lt;span&gt;args&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;直接在&lt;code&gt;SpringBootApplication&lt;/code&gt;注解上加，它支持ComponentScan功能：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;(scanBasePackages = &lt;span&gt;&quot;com.sue.cache&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Application&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; SpringApplicationBuilder(Application&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;).&lt;span&gt;web&lt;/span&gt;(&lt;span&gt;WebApplicationType&lt;/span&gt;.&lt;span&gt;SERVLET&lt;/span&gt;).&lt;span&gt;run&lt;/span&gt;(&lt;span&gt;args&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，如果你需要扫描的类跟springboot的入口类，在同一级或者子级的包下面，无需指定&lt;code&gt;scanBasePackages&lt;/code&gt;参数，spring默认会从入口类的同一级或者子级的包去找。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Application&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; SpringApplicationBuilder(Application&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;).&lt;span&gt;web&lt;/span&gt;(&lt;span&gt;WebApplicationType&lt;/span&gt;.&lt;span&gt;SERVLET&lt;/span&gt;).&lt;span&gt;run&lt;/span&gt;(&lt;span&gt;args&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，除了上述四种&lt;code&gt;@Component&lt;/code&gt;注解之外，springboot还增加了&lt;code&gt;@RestController&lt;/code&gt;注解，它是一种特殊的&lt;code&gt;@Controller&lt;/code&gt;注解，所以也是&lt;code&gt;@Component&lt;/code&gt;注解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@RestController&lt;/code&gt;还支持&lt;code&gt;@ResponseBody&lt;/code&gt;注解的功能，即将接口响应数据的格式自动转换成json。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5528169014084507&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhSPLSEcKkUoPbVicx7LHib7XmbKEib2hibSjHOsdKhWT9KDm8VmrffZ3DoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1136&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;系列注解已经让我们爱不释手了，它目前是我们日常工作中最多的定义bean的方式。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. JavaConfig&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;系列注解虽说使用起来非常方便，但是bean的创建过程完全交给spring容器来完成，我们没办法自己控制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring从3.0以后，开始支持JavaConfig的方式定义bean。它可以看做spring的配置文件，但并非真正的配置文件，我们需要通过编码java代码的方式创建bean。例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Person &lt;span&gt;person&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Person();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在JavaConfig类上加&lt;code&gt;@Configuration&lt;/code&gt;注解，相当于配置了&lt;code&gt;&amp;lt;beans&amp;gt;&lt;/code&gt;标签。而在方法上加&lt;code&gt;@Bean&lt;/code&gt;注解，相当于配置了&lt;code&gt;&amp;lt;bean&amp;gt;&lt;/code&gt;标签。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，springboot还引入了一些列的&lt;code&gt;@Conditional&lt;/code&gt;注解，用来控制bean的创建。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@ConditionalOnClass&lt;/span&gt;(Country&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;    @&lt;span&gt;Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt; &lt;span&gt;person&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Person();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@ConditionalOnClass&lt;/code&gt;注解的功能是当项目中存在Country类时，才实例化Person类。换句话说就是，如果项目中不存在Country类，就不实例化Person类。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个功能非常有用，相当于一个开关控制着Person类，只有满足一定条件才能实例化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring中使用比较多的Conditional还有：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;ConditionalOnBean&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ConditionalOnProperty&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ConditionalOnMissingClass&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ConditionalOnMissingBean&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ConditionalOnWebApplication&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你对这些功能比较感兴趣，可以看看《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247485964&amp;amp;idx=1&amp;amp;sn=6b228b315461498aa3e2ac241341f72a&amp;amp;chksm=f9800cd6cef785c07022577cec282c3f990e35d80ee5cb07219681ed4db71cddabb9fcbeabd2&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;spring中那些让你爱不释手的代码技巧（续集）&lt;/a&gt;》，这是我之前写的一篇文章，里面做了更详细的介绍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面用一张图整体认识一下@Conditional家族:&lt;img data-ratio=&quot;1.169811320754717&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhTILKC5GT32WNFUic7uiccXeSlWcy34bcw1ibfeeRW0ZXuTJVKwsRGCvSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;954&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;nice，有了这些功能，我们终于可以告别麻烦的xml时代了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. Import注解&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过前面介绍的@Configuration和@Bean相结合的方式，我们可以通过代码定义bean。但这种方式有一定的局限性，它只能创建该类中定义的bean实例，不能创建其他类的bean实例，如果我们想创建其他类的bean实例该怎么办呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时可以使用&lt;code&gt;@Import&lt;/code&gt;注解导入。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.1 普通类&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring4.2之后&lt;code&gt;@Import&lt;/code&gt;注解可以实例化普通类的bean实例。例如：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先定义了Role类：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Role&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Long id;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String name;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来使用@Import注解导入Role类：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Import&lt;/span&gt;(Role&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;@&lt;span&gt;Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在调用的地方通过&lt;code&gt;@Autowired&lt;/code&gt;注解注入所需的bean。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestController&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Role role;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/test&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;test&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(role);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;test&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;聪明的你可能会发现，我没有在任何地方定义过Role的bean，但spring却能自动创建该类的bean实例，这是为什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也许正是&lt;code&gt;@Import&lt;/code&gt;注解的强大之处。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，有些朋友可能会问：&lt;code&gt;@Import&lt;/code&gt;注解能定义单个类的bean，但如果有多个类需要定义bean该怎么办呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;恭喜你，这是个好问题，因为&lt;code&gt;@Import&lt;/code&gt;注解也支持。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Import&lt;/span&gt;({Role&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;User&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;})&lt;br/&gt;@&lt;span&gt;Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;甚至，如果你想偷懒，不想写这种&lt;code&gt;MyConfig&lt;/code&gt;类，springboot也欢迎。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;@Import({Role.class, User.class})&lt;br/&gt;@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class,&lt;br/&gt;        DataSourceTransactionManagerAutoConfiguration.class})&lt;br/&gt;public class Application {&lt;br/&gt;&lt;br/&gt;    public static void main(String[] args) {&lt;br/&gt;        new SpringApplicationBuilder(Application.class).web(WebApplicationType.SERVLET).run(args);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以将@Import加到springboot的启动类上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样也能生效？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;springboot的启动类一般都会加@SpringBootApplication注解，该注解上加了@SpringBootConfiguration注解。&lt;img data-ratio=&quot;0.7370753323485968&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhwgJsdHziagaIlcXylY5WJ1h5FQU9IYialJsyH3SRia6KcXr7BjxruR1xA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1354&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而@SpringBootConfiguration注解，上面又加了@Configuration注解&lt;img data-ratio=&quot;0.4376899696048632&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhh2MiafibYzbFbIGcFoMCqiboLUBuemvaMiakEstakf5XgGHKBqkscE8tPNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;658&quot;/&gt;所以，springboot启动类本身带有@Configuration注解的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;意不意外？惊不惊喜？&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.2 Configuration类&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面介绍了@Import注解导入普通类的方法，它同时也支持导入Configuration类。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先定义一个Configuration类：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyConfig2&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; User &lt;span&gt;user&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt;  &lt;span&gt;new&lt;/span&gt; User();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Role &lt;span&gt;role&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Role();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在另外一个Configuration类中引入前面的Configuration类：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Import&lt;/span&gt;({MyConfig2&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;})&lt;br/&gt;@&lt;span&gt;Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式，如果MyConfig2类已经在spring指定的扫描目录或者子目录下，则MyConfig类会显得有点多余。因为MyConfig2类本身就是一个配置类，它里面就能定义bean。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果MyConfig2类不在指定的spring扫描目录或者子目录下，则通过MyConfig类的导入功能，也能把MyConfig2类识别成配置类。这就有点厉害了喔。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;其实下面还有更高端的玩法&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;swagger作为一个优秀的文档生成框架，在spring项目中越来越受欢迎。接下来，我们以swagger2为例，介绍一下它是如何导入相关类的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;众所周知，我们引入swagger相关jar包之后，只需要在springboot的启动类上加上&lt;code&gt;@EnableSwagger2&lt;/code&gt;注解，就能开启swagger的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中@EnableSwagger2注解中导入了Swagger2DocumentationConfiguration类。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2557651991614256&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhAz5vXXTffj5N2LBN31fLK1uNHxWMia1sGWdNcPdXdwRZzrZ8XAGqtMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;954&quot;/&gt;该类是一个Configuration类，它又导入了另外两个类：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;SpringfoxWebMvcConfiguration&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SwaggerCommonConfiguration&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5802098950524738&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhnu9on6HGzoto4C6cLG0YJvgWs3vYkpkVObdEOocM1sibt5sOF7IBNpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1334&quot;/&gt;SpringfoxWebMvcConfiguration类又会导入新的Configuration类，并且通过@ComponentScan注解扫描了一些其他的路径。&lt;img data-ratio=&quot;0.8225806451612904&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhPwxbiaR9pVhr64A1j6a6Hj7do1ibcOtvtAexH25TzHd2NciapWggszrNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SwaggerCommonConfiguration同样也通过@ComponentScan注解扫描了一些额外的路径。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.46647230320699706&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhLKLJeE0AZsf7w26iaST1zpPotp3WphfYy9LWRR9QRx2Brbohzjc49eA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;686&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如此一来，我们通过一个简单的&lt;code&gt;@EnableSwagger2&lt;/code&gt;注解，就能轻松的导入swagger所需的一系列bean，并且拥有swagger的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有什么好说的，狂起点赞，简直完美。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.3 ImportSelector&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面提到的Configuration类，它的功能非常强大。但怎么说呢，它不太适合加复杂的判断条件，根据某些条件定义这些bean，根据另外的条件定义那些bean。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，这种需求该怎么实现呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时就可以使用&lt;code&gt;ImportSelector&lt;/code&gt;接口了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先定义一个类实现&lt;code&gt;ImportSelector&lt;/code&gt;接口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DataImportSelector&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ImportSelector&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; String[] selectImports(AnnotationMetadata importingClassMetadata) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; String[]{&lt;span&gt;&quot;com.sue.async.service.User&quot;&lt;/span&gt;, &lt;span&gt;&quot;com.sue.async.service.Role&quot;&lt;/span&gt;};&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重写&lt;code&gt;selectImports&lt;/code&gt;方法，在该方法中指定需要定义bean的类名，注意要包含完整路径，而非相对路径。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在MyConfig类上@Import导入这个类即可：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Import&lt;/span&gt;({DataImportSelector&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;})&lt;br/&gt;@&lt;span&gt;Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;朋友们是不是又发现了一个新大陆？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，这个注解还有更牛逼的用途。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;@EnableAutoConfiguration注解中导入了AutoConfigurationImportSelector类，并且里面包含系统参数名称：&lt;code&gt;spring.boot.enableautoconfiguration&lt;/code&gt;。&lt;img data-ratio=&quot;0.7138508371385084&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhvqCpMJaEmG5FuXK0HoWy6jKzUllyoEvNaSXWEC7BWicoP3teavQWOJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1314&quot;/&gt;AutoConfigurationImportSelector类实现了&lt;code&gt;ImportSelector&lt;/code&gt;接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.21478260869565216&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhA2nxyKfJTC3MB0ItHKO8Y18KX7RuMjoViafoF2klvLGMgtFSI6D0rmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2300&quot;/&gt;并且重写了&lt;code&gt;selectImports&lt;/code&gt;方法，该方法会根据某些注解去找所有需要创建bean的类名，然后返回这些类名。其中在查找这些类名之前，先调用isEnabled方法，判断是否需要继续查找。&lt;img data-ratio=&quot;0.5162287480680062&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhfiaLHkkSePWVmUlVL1pF4obLDPUqQBQqUDyWpBvSwgJgy0UDWtfbZhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1294&quot;/&gt;该方法会根据ENABLED_OVERRIDE_PROPERTY的值来作为判断条件。&lt;img data-ratio=&quot;0.27257799671592775&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhib8XibXCzAgqaTkJyVQkt5icdmqqBLI6Vic12aLDZOGjbM9muOuNZVgG9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1218&quot;/&gt;而这个值就是&lt;code&gt;spring.boot.enableautoconfiguration&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;换句话说，这里能根据系统参数控制bean是否需要被实例化，优秀。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我个人认为实现ImportSelector接口的好处主要有以下两点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;把某个功能的相关类，可以放到一起，方面管理和维护。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重写selectImports方法时，能够根据条件判断某些类是否需要被实例化，或者某个条件实例化这些bean，其他的条件实例化那些bean等。我们能够非常灵活的定制化bean的实例化。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.4 ImportBeanDefinitionRegistrar&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们通过上面的这种方式，确实能够非常灵活的自定义bean。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但它的自定义能力，还是有限的，它没法自定义bean的名称和作用域等属性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有需求，就有解决方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们一起看看&lt;code&gt;ImportBeanDefinitionRegistrar&lt;/code&gt;接口的神奇之处。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先定义CustomImportSelector类实现ImportBeanDefinitionRegistrar接口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomImportSelector&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ImportBeanDefinitionRegistrar&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;registerBeanDefinitions&lt;/span&gt;&lt;span&gt;(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        RootBeanDefinition roleBeanDefinition = &lt;span&gt;new&lt;/span&gt; RootBeanDefinition(Role&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        registry.registerBeanDefinition(&lt;span&gt;&quot;role&quot;&lt;/span&gt;, roleBeanDefinition);&lt;br/&gt;&lt;br/&gt;        RootBeanDefinition userBeanDefinition = &lt;span&gt;new&lt;/span&gt; RootBeanDefinition(User&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        userBeanDefinition.setScope(ConfigurableBeanFactory.SCOPE_PROTOTYPE);&lt;br/&gt;        registry.registerBeanDefinition(&lt;span&gt;&quot;user&quot;&lt;/span&gt;, userBeanDefinition);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重写&lt;code&gt;registerBeanDefinitions&lt;/code&gt;方法，在该方法中我们可以获取&lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;对象，通过它去注册bean。不过在注册bean之前，我们先要创建BeanDefinition对象，它里面可以自定义bean的名称、作用域等很多参数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在MyConfig类上导入上面的类：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Import&lt;/span&gt;({CustomImportSelector&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;})&lt;br/&gt;@&lt;span&gt;Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们所熟悉的fegin功能，就是使用ImportBeanDefinitionRegistrar接口实现的：&lt;img data-ratio=&quot;0.5291828793774319&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhh4xGb6icoZcZicobzBKl4wibJB1D62XMMU7p3eY7JsxsRV9zdxAC4reu1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1542&quot;/&gt;具体细节就不多说了，有兴趣的朋友可以加我微信找我私聊。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. PostProcessor&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，spring还提供了专门注册bean的接口：&lt;code&gt;BeanDefinitionRegistryPostProcessor&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该接口的方法postProcessBeanDefinitionRegistry上有这样一段描述：&lt;img data-ratio=&quot;0.3464788732394366&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhcsRfRiaqYZGTsaqdsV4l0fGakUlnIcG4JyP8rV3aibForMI2pEN2PqEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1420&quot;/&gt;修改应用程序上下文的内部bean定义注册表标准初始化。所有常规bean定义都将被加载，但是还没有bean被实例化。这允许进一步添加在下一个后处理阶段开始之前定义bean。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果用这个接口来定义bean，我们要做的事情就变得非常简单了。只需定义一个类实现&lt;code&gt;BeanDefinitionRegistryPostProcessor&lt;/code&gt;接口。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyRegistryPostProcessor&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanDefinitionRegistryPostProcessor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;postProcessBeanDefinitionRegistry&lt;/span&gt;&lt;span&gt;(BeanDefinitionRegistry registry)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{&lt;br/&gt;        RootBeanDefinition roleBeanDefinition = &lt;span&gt;new&lt;/span&gt; RootBeanDefinition(Role&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        registry.registerBeanDefinition(&lt;span&gt;&quot;role&quot;&lt;/span&gt;, roleBeanDefinition);&lt;br/&gt;&lt;br/&gt;        RootBeanDefinition userBeanDefinition = &lt;span&gt;new&lt;/span&gt; RootBeanDefinition(User&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        userBeanDefinition.setScope(ConfigurableBeanFactory.SCOPE_PROTOTYPE);&lt;br/&gt;        registry.registerBeanDefinition(&lt;span&gt;&quot;user&quot;&lt;/span&gt;, userBeanDefinition);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;postProcessBeanFactory&lt;/span&gt;&lt;span&gt;(ConfigurableListableBeanFactory beanFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重写&lt;code&gt;postProcessBeanDefinitionRegistry&lt;/code&gt;方法，在该方法中能够获取&lt;code&gt;BeanDefinitionRegistry&lt;/code&gt;对象，它负责bean的注册工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过细心的朋友可能会发现，里面还多了一个&lt;code&gt;postProcessBeanFactory&lt;/code&gt;方法，没有做任何实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个方法其实是它的父接口：&lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt;里的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.36856745479833103&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhJE1RAAK7g0wc7TZ6fucUiaaeIoEKohtpPoeGzwLrVE9dXPXb4mNYVOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1438&quot;/&gt;在应用程序上下文的标准bean工厂之后修改其内部bean工厂初始化。所有bean定义都已加载，但没有bean将被实例化。这允许重写或添加属性甚至可以初始化bean。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyPostProcessor&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanFactoryPostProcessor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;postProcessBeanFactory&lt;/span&gt;&lt;span&gt;(ConfigurableListableBeanFactory beanFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{&lt;br/&gt;        DefaultListableBeanFactory registry = (DefaultListableBeanFactory)beanFactory;&lt;br/&gt;        RootBeanDefinition roleBeanDefinition = &lt;span&gt;new&lt;/span&gt; RootBeanDefinition(Role&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        registry.registerBeanDefinition(&lt;span&gt;&quot;role&quot;&lt;/span&gt;, roleBeanDefinition);&lt;br/&gt;&lt;br/&gt;        RootBeanDefinition userBeanDefinition = &lt;span&gt;new&lt;/span&gt; RootBeanDefinition(User&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        userBeanDefinition.setScope(ConfigurableBeanFactory.SCOPE_PROTOTYPE);&lt;br/&gt;        registry.registerBeanDefinition(&lt;span&gt;&quot;user&quot;&lt;/span&gt;, userBeanDefinition);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然这两个接口都能注册bean，那么他们有什么区别？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;BeanDefinitionRegistryPostProcessor 更侧重于bean的注册&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;BeanFactoryPostProcessor 更侧重于对已经注册的bean的属性进行修改，虽然也可以注册bean。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，有些朋友可能会问：既然拿到BeanDefinitionRegistry对象就能注册bean，那通过BeanFactoryAware的方式是不是也能注册bean呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从下面这张图能够看出DefaultListableBeanFactory就实现了BeanDefinitionRegistry接口。&lt;img data-ratio=&quot;0.4461883408071749&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhD2SFCiakicKE72xbqIb5Z0ibWcgc5tNkWdZQTFdnsRYURKic6Eia1AAuvSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1784&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样一来，我们如果能够获取DefaultListableBeanFactory对象的实例，然后调用它的注册方法，不就可以注册bean了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说时迟那时快，定义一个类实现&lt;code&gt;BeanFactoryAware&lt;/code&gt;接口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BeanFactoryRegistry&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanFactoryAware&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setBeanFactory&lt;/span&gt;&lt;span&gt;(BeanFactory beanFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{&lt;br/&gt;        DefaultListableBeanFactory registry = (DefaultListableBeanFactory) beanFactory;&lt;br/&gt;        RootBeanDefinition rootBeanDefinition = &lt;span&gt;new&lt;/span&gt; RootBeanDefinition(User&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        registry.registerBeanDefinition(&lt;span&gt;&quot;user&quot;&lt;/span&gt;, rootBeanDefinition);&lt;br/&gt;&lt;br/&gt;        RootBeanDefinition userBeanDefinition = &lt;span&gt;new&lt;/span&gt; RootBeanDefinition(User&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        userBeanDefinition.setScope(ConfigurableBeanFactory.SCOPE_PROTOTYPE);&lt;br/&gt;        registry.registerBeanDefinition(&lt;span&gt;&quot;user&quot;&lt;/span&gt;, userBeanDefinition);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重写&lt;code&gt;setBeanFactory&lt;/code&gt;方法，在该方法中能够获取BeanFactory对象，它能够强制转换成DefaultListableBeanFactory对象，然后通过该对象的实例注册bean。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你满怀喜悦的运行项目时，发现竟然报错了：&lt;img data-ratio=&quot;0.24338624338624337&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhhduLuSZLdBUVUkrpWFSU5mcCEvF6DaIB6ic1kypNQ2eYKxyPPJnAkguA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1890&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么会报错？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring中bean的创建过程顺序大致如下：&lt;img data-ratio=&quot;2.353932584269663&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF3eclmVcRAt9Ribqd3SaGhh5vCcbXezk84CzoVKpNevjLFaT5mR6ZAwwcc5ViaBGPzhHxr7O3PibOuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;356&quot;/&gt;&lt;code&gt;BeanFactoryAware&lt;/code&gt;接口是在bean创建成功，并且完成依赖注入之后，在真正初始化之前才被调用的。在这个时候去注册bean意义不大，因为这个接口是给我们获取bean的，并不建议去注册bean，会引发很多问题。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;此外，ApplicationContextRegistry和ApplicationListener接口也有类似的问题，我们可以用他们获取bean，但不建议用它们注册bean。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>