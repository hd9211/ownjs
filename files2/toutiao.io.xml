<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>300d4735d3a0c4edeefa6fabbb91dfa3</guid>
<title>双非渣本后端三个月逆袭字节</title>
<link>https://toutiao.io/k/faz5prg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-topic-des nc-post-content&quot;&gt;
&lt;h2 id=&quot;个人背景介绍&quot;&gt;个人背景介绍&lt;/h2&gt; 
&lt;p&gt;2017年毕业于一所不知名双非本科大学，毕业时就有着一颗想进大厂的心，但又想留在成都，不愿意去北上广，现在其实相当后悔。当年在成都的大厂少之又少，再加上校招时非常努力地玩耍，导致投的几个大厂面试都全部挂掉。也错失了进大厂最好的机会，所以我奉劝大三的同学如果对自己的职业有追求，有进大厂的梦想，在大三的时候一定要好好准备，在校招的时候拿offer。&lt;br/&gt;&lt;span&gt;最后我在成都一家本地科技公司做了Java开发，中间也跳过一次槽，也是做的Java。但这几年时间里总感觉公司能给的成长太慢，虽然自己也在学习，还是免不了焦虑，特别是像自己这种学历和公司背景都一般的程序员，要保证自己以后不被淘汰，必须得做点什么。所以在听到一个前同事被公司裁掉，最后进入大厂这个事情之后，彻底点燃了我心中想进大厂的那把火，我也准备内推试试&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8&quot; target=&quot;_blank&quot;&gt;字节跳动&lt;/a&gt;。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;因为疫情原因，很多企业生存困难。我也保持了理智，没有辞职进行面试。而是给自己制定了学习计划，不得不说，在职的情况下复习确实很难，因为可能加班打乱计划。于是我把所有能利用的个人时间全部利用了起来，比如早上十点上班，我六点钟就会起床，刷两个小时LeetCode，八点钟洗漱之后去上班。晚上如果有时间就会把早上刷过的题拿出来继续复习，花了两个月的时间，一边复习（预习）数据结构，一边做题，LeetCode上面的高频题基本都过了一遍。花了那么多时间&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%88%B7%E9%A2%98&quot; target=&quot;_blank&quot;&gt;刷题&lt;/a&gt;，都是因为自己&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;太菜，以前没有进行专门的练习。题做得差不多之后，就开始复习专业知识了，具体内容我都会总结出来。前前后后准备了三个月，我才敢进行内推，经历了八次面试之后，面试时间又持续三个月，皇天不负有心人，终于在这个月等到了oc。&lt;/span&gt;&lt;br/&gt;下面是面试内容，时间太久了，可能记得不太全，但基本上包含了所有问题，白天上班，我都是选择晚上进行面试，哈哈&lt;/p&gt; 
&lt;h2 id=&quot;一面a部门&quot;&gt;一面A部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;讲&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，串起来讲，可能遇到的问题，怎么解决，怎么实现，讲了发送客服消息&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;Spring里面的bean怎么回事&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;HashMap和ConcurrentHashMap，HashMap中的&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%BA%A2%E9%BB%91%E6%A0%91&quot; target=&quot;_blank&quot;&gt;红黑树&lt;/a&gt;，两者rehash的区别&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;Mysql的一致性是什么，数据库redolog，undo log，MySQL的索引结构，为什么二级索引叶子节点不能直接存储行数据的指针，这样可以不回表，怎么考虑的？&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=redis&quot; target=&quot;_blank&quot;&gt;redis&lt;/a&gt;里面的zset，跳表怎么实现，怎么增删，&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=redis&quot; target=&quot;_blank&quot;&gt;redis&lt;/a&gt;是怎么rehash的&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;，&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E4%BA%8C%E5%8F%89%E6%A0%91&quot; target=&quot;_blank&quot;&gt;二叉树&lt;/a&gt;转双向&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%93%BE%E8%A1%A8&quot; target=&quot;_blank&quot;&gt;链表&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;二面a部门&quot;&gt;二面A部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;自我介绍&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;再一次聊&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，功能，架构，角色，量级&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;Spring里面有哪些设计模式&lt;/li&gt; 
 &lt;li&gt;SpringMVC和SpringBoot有什么区别&lt;/li&gt; 
 &lt;li&gt;SpringBoot的自动配置是怎么实现的&lt;/li&gt; 
 &lt;li&gt;刚刚你说了线程池，你线程池是用的什么，参数有哪些，为什么这么设置 &lt;/li&gt; 
 &lt;li&gt;线程池核心线程满了怎么办，里面的阻塞队列是干什么的&lt;/li&gt; 
 &lt;li&gt;说说ThreadLocal是什么&lt;/li&gt; 
 &lt;li&gt;CAP理论知道吗，为什么不能同时满足&lt;/li&gt; 
 &lt;li&gt;Redis里面的数据结构有什么场景&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;Redis怎么实现锁（&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=redis&quot; target=&quot;_blank&quot;&gt;redis&lt;/a&gt;锁的所有坑都说了一遍）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;分布式事务知道吗，有哪些方案（说了2PC，3PC，TCC，MQ）&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;，&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84&quot; target=&quot;_blank&quot;&gt;树的直径&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;有什么要问我的&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;三面a部门&quot;&gt;三面A部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;场景题，设计一个朋友圈，读QPS 1000w，写QPS 10w&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;LFU&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;你有什么问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;这个面试官是个leader，比较强势，很多细节回答的不是很好，所以脸色一直不好，给人压力较大，面完就觉得凉了。果然面完之后和前两次不一样，HR那里就没有任何通知了，到这里还是很失落，准备了那么久，因为最后一面没表现好导致挂掉。之后等了一个月，这一个月没有任何消息，一个月过后又接到字节HR的电话，说我之前两面面评都不错，让我试试他们部门，我就同意了。&lt;/p&gt; 
&lt;h2 id=&quot;一面b部门&quot;&gt;一面B部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，细节&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;怎么做服务拆分，边界怎么划分的&lt;/li&gt; 
 &lt;li&gt;分布式之后会遇到什么问题，CAP的各个情况介绍一下&lt;/li&gt; 
 &lt;li&gt;dubbo调用过程是怎样的，PB知道吗&lt;/li&gt; 
 &lt;li&gt;thrift了解过吗&lt;/li&gt; 
 &lt;li&gt;zk介绍一下，有哪些节点类型，特点&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;怎么知道&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;中接口的重要性，怎么做监控，你说的自动化测试是怎么做到的（这个问题回答完，他笑了。。。）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;你所理解的SLA是什么，要达到什么等级&lt;/li&gt; 
 &lt;li&gt;说说你理解的k8s&lt;/li&gt; 
 &lt;li&gt;nginx的upstream是干什么的&lt;/li&gt; 
 &lt;li&gt;nginx有哪些负载均衡策略&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;：&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F&quot; target=&quot;_blank&quot;&gt;岛屿数量&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;你有什么问题要问我&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;二面b部门&quot;&gt;二面B部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，细节&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;锁有哪些实现方式&lt;/li&gt; 
 &lt;li&gt;分布式锁的实现方式&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;JVM的内存模型，垃圾回收&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;MySQL的事务介绍，ACID的实现原理是什么（想问MySQL的日志）&lt;/li&gt; 
 &lt;li&gt;HashMap的原理，其他线程安全的Map&lt;/li&gt; 
 &lt;li&gt;Redis的高可用，有哪些持久化方式&lt;/li&gt; 
 &lt;li&gt;Redis的数据结构，线程模型&lt;/li&gt; 
 &lt;li&gt;用过什么消息队列，有什么特点&lt;/li&gt; 
 &lt;li&gt;怎么保证消息幂等消费&lt;/li&gt; 
 &lt;li&gt;docker的网络模式&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;：&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7&quot; target=&quot;_blank&quot;&gt;比较版本号&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;提问&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;三面b部门（交叉面）&quot;&gt;三面B部门（交叉面）&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，细节&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;Linux的内存管理&lt;/li&gt; 
 &lt;li&gt;浏览器打开一个网站的过程中会经历哪些网络处理，DNS的具体过程是啥&lt;/li&gt; 
 &lt;li&gt;zk是什么分布式模型（想问的CAP定理），主从怎么做选举&lt;/li&gt; 
 &lt;li&gt;zk只有一个主节点，写性能不高，zk怎么解决的&lt;/li&gt; 
 &lt;li&gt;etcd或consul知道吗&lt;/li&gt; 
 &lt;li&gt;多个服务中如何快速排查问题&lt;/li&gt; 
 &lt;li&gt;Redis中的淘汰方式有哪些，Redis性能高的原因是啥&lt;/li&gt; 
 &lt;li&gt;docker的实现原理&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;：相交&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%93%BE%E8%A1%A8&quot; target=&quot;_blank&quot;&gt;链表&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;四面b部门-（leader面）&quot;&gt;四面B部门 （leader面）&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，细节&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;量级多大，QPS最高的接口是怎么做的&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;rpc怎么实现服务发现&lt;/li&gt; 
 &lt;li&gt;zk中的watch机制是怎么实现的&lt;/li&gt; 
 &lt;li&gt;分布式锁有哪些实现，MySQL，zk，Redis都说了一遍，并且分析了各自的优缺点，这个问题问的频率太高了&lt;/li&gt; 
 &lt;li&gt;怎么提高数据库读写性能&lt;/li&gt; 
 &lt;li&gt;k8s了解吗&lt;/li&gt; 
 &lt;li&gt;servicemesh有做过吗&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;五面b部门（hr面）&quot;&gt;五面B部门（HR面）&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;离职原因&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92&quot; target=&quot;_blank&quot;&gt;职业规划&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;期望薪资&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;基础知识&quot;&gt;基础知识&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;常用集合、数据结构（数据增删改查操作的原理具体实现、各参数的含义，以及如何组合使用）&lt;/li&gt; 
 &lt;li&gt;Java的语法，OO的思想要熟悉，常用设计模式要知道场景&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;JVM内存模型，垃圾回收&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;，垃圾收集器的区别，GC调优&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;线程模型&lt;/li&gt; 
 &lt;li&gt;IO模型（包括操作系统底层IO模型和常见BIO、NIO、AIO、IO多路复用的原理）&lt;/li&gt; 
 &lt;li&gt;Redis（数据结构的内部实现、淘汰原理策略、持久化、集群、扩容、数据同步、以及一些常见缓存问题的解决方案）&lt;/li&gt; 
 &lt;li&gt;MySQL（索引原理，查询优化，三大日志）&lt;/li&gt; 
 &lt;li&gt;消息队列（内部原理，常见消息问题解决方案）&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;分布式原理、&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;、rpc原理（paxos、raft、zoo&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=keep&quot; target=&quot;_blank&quot;&gt;keep&lt;/a&gt;er的原理）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;分布式场景题（高可用，高性能相关）&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;其他知识&quot;&gt;其他知识&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;位运算&lt;/li&gt; 
 &lt;li&gt;大数据量操作（在有限时间内完成、在有限空间内完成）&lt;/li&gt; 
 &lt;li&gt;设计题（看一些常见的分布式ID、分布式计数服务等等）&lt;/li&gt; 
&lt;/ol&gt; 
 
&lt;ol&gt; 
 &lt;li&gt;数组&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%93%BE%E8%A1%A8&quot; target=&quot;_blank&quot;&gt;链表&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;位运算&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E4%BA%8C%E5%8F%89%E6%A0%91&quot; target=&quot;_blank&quot;&gt;二叉树&lt;/a&gt;（dfs，bfs，相当重要，只要会了&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E4%BA%8C%E5%8F%89%E6%A0%91&quot; target=&quot;_blank&quot;&gt;二叉树&lt;/a&gt;，回溯那些&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;也会了）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;设计题&lt;/li&gt; 
 &lt;li&gt;LRU/LFU&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;查找&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://uploadfiles.nowcoder.com/files/20210311/1219786_1615453294383/008eGmZEgy1goeugqrbrrj31360u0451.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt; 
&lt;p&gt;我给大家的建议就是慢慢来，不管是社招还是校招，制定自己的计划，一定要有自己的知识体系，针对自己薄弱的地方进行强化复习，不放过任何一个细节。&lt;br/&gt;简历上写的东西一定要会，一般都是针对简历来提问的。如果在预习的过程中感到困难或者吃力，那就对了，等你熬过去了，就是胜利。祝福大家都能拿到满意的offer。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>14e280b8ce413a717c9c605c56ae89a4</guid>
<title>第三方 API 对接如何设计接口认证？</title>
<link>https://toutiao.io/k/wu7tc8w</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span data-raw-text=&quot;个&quot; data-textnode-index=&quot;401&quot; data-index=&quot;4299&quot;&gt;点击上方“&lt;/span&gt;&lt;span data-raw-text=&quot;个&quot; data-textnode-index=&quot;401&quot; data-index=&quot;4299&quot;&gt;&lt;span&gt;陶陶技术笔记&lt;/span&gt;&lt;span&gt;”关注我&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span data-raw-text=&quot;个&quot; data-textnode-index=&quot;401&quot; data-index=&quot;4299&quot;&gt;回复“&lt;/span&gt;&lt;span data-raw-text=&quot;个&quot; data-textnode-index=&quot;401&quot; data-index=&quot;4299&quot;&gt;资料&lt;/span&gt;&lt;span data-raw-text=&quot;个&quot; data-textnode-index=&quot;401&quot; data-index=&quot;4299&quot;&gt;”获取作者整理的大量学习资料！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5622222222222222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Hic4icvNgYCicZt8qGEJbyjXYCzVwYUKpSXRX5BHdsmwcx9EiaCMVaianXcicTK7ovp8VEZeecwEweJLDkCialibLjQdxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、前言&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在与第三方系统做接口对接时，往往需要考虑接口的安全性问题，本文主要分享几个常见的系统之间做接口对接时的认证方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt; &lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、认证方案&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如订单下单后通过 &lt;strong&gt;「延时任务」&lt;/strong&gt; 对接 &lt;strong&gt;「物流系统」&lt;/strong&gt; 这种 &lt;strong&gt;「异步」&lt;/strong&gt; 的场景，都是属于系统与系统之间的相互交互，不存在用户操作；所以认证时需要的不是用户凭证而是系统凭证，通常包括 &lt;strong&gt;「app_id」&lt;/strong&gt; 与 &lt;strong&gt;「app_secrect」&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;app_id与app_secrect由接口提供方提供&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1. Baic认证&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一种较为简单的认证方式，客户端通过明文（Base64编码格式）传输用户名和密码到服务端进行认证。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过在 &lt;code&gt;Header&lt;/code&gt; 中添加key为 Authorization，值为 Basic 用户名:密码的base64编码，例如app_id为和app_secrect都为 &lt;code&gt;zlt&lt;/code&gt;，然后对 &lt;code&gt;zlt:zlt&lt;/code&gt; 字符进行base64编码，最终传值为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Authorization: Basic emx0OnpsdA==&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt; &lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1.1. 优点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单，被广泛支持。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1.2. 缺点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安全性较低，需要配合HTTPS来保证信息传输的安全&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;虽然用户名和密码使用了Base64编码，但是很容易就可以解码。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无法防止 &lt;strong&gt;「重放攻击」&lt;/strong&gt; 与 &lt;strong&gt;「中间人攻击」&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt; &lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2. Token认证&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 &lt;code&gt;Oauth2.0&lt;/code&gt; 中的 &lt;code&gt;客户端模式&lt;/code&gt; 进行Token认证，流程如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7575107296137339&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Hic4icvNgYCicZt8qGEJbyjXYCzVwYUKpSX1gCP9kxpVr4rhRxK21k93bMibNUou9BUGDjib2motymx22at1NfYAF1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;932&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;使用Basic认证的方式获取access_token之后，再通过token来请求业务接口&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt; &lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2.1. 优点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;安全性相对 &lt;/span&gt;&lt;code&gt;Baic认证&lt;/code&gt;&lt;span&gt; 有所提升，每次接口调用时都使用临时颁发的 &lt;/span&gt;&lt;code&gt;access_token&lt;/code&gt;&lt;span&gt; 来代替 &lt;/span&gt;&lt;code&gt;用户名和密码&lt;/code&gt;&lt;span&gt; 减少凭证泄漏的机率。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2.2. 缺点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;依然存在 &lt;code&gt;Baic认证&lt;/code&gt; 的安全问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt; &lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.3. 动态签名&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在每次接口调用时都需要传输以下参数：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「app_id」&lt;/strong&gt; 应用id&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「time」&lt;/strong&gt; 当前时间戳&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「nonce」&lt;/strong&gt; 随机数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「sign」&lt;/strong&gt; 签名&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt; &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中sign签名的生成方式为：使用参数中的
app_id + time + nonce 在最后追加 &lt;code&gt;app_secrect&lt;/code&gt; 的字符串进行md5加密，并全部转换成大写。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果需要实现参数的防篡改，只需把接口所有的请求参数都作为签名的生成参数即可&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.3.1. 优点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安全性最高&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;服务端使用相同的方式生成签名进行对比认证，无需在网络上传输 &lt;code&gt;app_secrect&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以防止 &lt;strong&gt;「中间人攻击」&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 &lt;code&gt;time&lt;/code&gt; 参数判断请求的时间差是否在合理范围内，可防止 &lt;strong&gt;「重放攻击」&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 &lt;code&gt;nonce&lt;/code&gt; 参数进行幂等性判断。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.3.2. 缺点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不适用于前端应用使用，js源码会暴露签名的方式与app_secrect&lt;/p&gt;&lt;/section&gt;&lt;section data-from=&quot;xmt-recommend&quot; data-tools=&quot;新媒体排版&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;文章推荐&lt;/span&gt;&lt;/span&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTI2NDMwMg==&amp;amp;mid=2247484106&amp;amp;idx=1&amp;amp;sn=a8a30f989f5e088f5902f98353044e7f&amp;amp;chksm=a73f6b8b9048e29d26494219343543089c93ba4df4cff6bd547a23451a92a84d16cbe59d8bdb&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Dubbo想要个网关怎么办？试试整合Spring Cloud Gateway&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTI2NDMwMg==&amp;amp;mid=2247483808&amp;amp;idx=1&amp;amp;sn=05add25ed69e7ae34a29214750568121&amp;amp;chksm=a73f68e19048e1f74b7aea6c452b0786af6b5ddfc582d787984663f3480d54dedd7009fa0689&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Spring Security基于Oauth2的SSO单点登录怎样做？一个注解搞定&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTI2NDMwMg==&amp;amp;mid=2247483779&amp;amp;idx=1&amp;amp;sn=119de13aa7bee6718c2d1d9c5c40ffa8&amp;amp;chksm=a73f68c29048e1d4a12bca3f31cb03a05563058663ef4acd93b48ef51c0923c6042db526c242&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;微服务业务监控和行为分析怎么做？试试日志埋点&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTI2NDMwMg==&amp;amp;mid=2247483758&amp;amp;idx=1&amp;amp;sn=f3c50ef81bdfbf14b53310c3a310cc98&amp;amp;chksm=a73f682f9048e13951fd34887ad2703ce0b3a0bf25597ef2494c2deefb66a7dd78922b845b05&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;Spring Cloud异步场景分布式事务怎样做？试试RocketMQ&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTI2NDMwMg==&amp;amp;mid=2247483735&amp;amp;idx=1&amp;amp;sn=ac2f5d3bf82254bc5f1d3200119b4c32&amp;amp;chksm=a73f68169048e100bd09abd488cc5b7d42658449fd7903e48a13efd536870fbe30eafb842193&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Spring Cloud同步场景分布式事务怎样做？试试Seata&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MjM5OTI2NDMwMg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Hic4icvNgYCicYWh0bcYuMAUxkq0l9VMjYJO350ZJxPGFJcaGH0AzrnnzXicRyDq7Wl4Is2gAtop1piamIPjuKwBnKg/0?wx_fmt=png&quot; data-nickname=&quot;陶陶技术笔记&quot; data-alias=&quot;zltrobin&quot; data-signature=&quot;陶陶的技术学习与分享，专注Java、SpringBoot、SpringCloud、分布式系统/微服务、中间件等领域。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;谢谢大家的鼓励&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>20da0068603d79c06cf243f4a3e4ba54</guid>
<title>两分钟弄懂对称二叉树</title>
<link>https://toutiao.io/k/pg3kr42</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好呀，我是吴师兄，今天照例来更新一道 LeetCode 算法题，根据以往数据来看，这类文章的打开率普遍不高，一般在三四千左右，远远低于水文或者热点文一两万的阅读量，&lt;strong&gt;一个合格的自媒体人正确的做法应该是抛弃前者不再更新这类技术文&lt;/strong&gt;，我也曾经纠结彷徨过，&lt;strong&gt;到底是追逐阅读量还是放平心态写好技术文服务好读者&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种心态导致我有时候看到技术文阅读量、点赞量不佳会愤愤不平：MD，再也不写技术文了，可隔了一会看到一道算法题又忍不住想写出来分享。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反正挺难受的，直到前几天我看到了下面这段话。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5329512893982808&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYgOlptIWapVSMreMLmGSS86Y22edxJwqCw56ZGFcxvTFlAO0hohNv3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;698&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;思来想去，我觉得挺多读者关注我的公众号是想学一些技术的，所以还是保持&lt;strong&gt;每周更新一两道算法题解的频率&lt;/strong&gt;，希望能日拱一卒，帮助读者在算法面试的时候能有印象：这道题目我在五分钟学算法见过！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以喜欢看题解的读者记得星标一下公众号，&lt;strong&gt;五分钟学算法，让算法面试没那么难！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扯远了，来看今天的这道算法题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题目的描述是这样子的：实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4790356394129979&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYCJDHENxgg1Wtg50OgnHYUV2mialGyUXvXeOToxicaic206ROibViadwkcsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1908&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;题目很好理解，首先需要弄清楚&lt;strong&gt;对称&lt;/strong&gt;的含义，它隐含了三层意思，即对于树中任意两个对称节点 L 和 R ，一定有：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、L.val = R.val：即此两对称节点值相等。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6502057613168725&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYBzrtBI6fE5v9QlQtEbZ6ibrNfTZvz9ic04x0YuNLFKGeV5u0c0JfL7hg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;729&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、L.left.val = R.right.val：即 L 的左子节点和 R 的右子节点对称。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7168021680216802&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYfOvw8jTFk2dN11AGeic7z7KHkKVZEDlRy96mSrZI998Q57sqWRdeUnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;738&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、 L.right.val = R.left.val：即 L 的右子节点和 R 的左子节点对称。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7163029525032092&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYTMRAuVT84gTZ6oKnbkk6micIyJmiaoWuCiaG0TEsMjw93iayf8SNn3p80A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;779&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;思路也就很简单了，我们可以从底至顶进行递归操作，判断&lt;strong&gt;每对节点是否对称&lt;/strong&gt;，从而判断树是否为对称二叉树。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接通过图片来看是怎么操作的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOY7OFVcIMDfpGKMkpbTb3aYYoD5QWxmFN87PyDLBE8hWBnv0icRwtIUtQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.002&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYnJ1hdODOWUUjurTQxVKMmj9bxE6BrwHvicAeSlMGTLR1nOml8SOkOXA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.003&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYOKTaZ50UaOmN6DzbqLaaic7hibm9JlvoAVMltOdyfvia34c7VVkOH9btg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.004&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYJPXAHoZT6tjTEhXvZLDhZEolDahSgSaamXsYSCmb3S7dOc0cMEtTOg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.005&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYgRB06mFsC0GxtF0R04sXhwGqZX2u23CzNiabs8dbAelHeibDuZyibULsw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.006&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYsOplKIQ5d81yl2THg8icLHJroK5mfPoevOCzMTcHCEuUUd8kB13C7KA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.007&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYbib1d2AibXtvdsbHicWbAuAicU76kJp5ftHtu1qyAnD0dgAUA3Obk1jNaA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.008&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/D67peceibeIR11CHQ0Tqdxqt9VJiaicpkOYVXDYhMIJiaic1pxYytnu2ic3IIW5739shTlkRBzVBaBkpDc5pVFo9hic0w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;figcaption&gt;剑指 Offer 28. 对称的二叉树.009&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码如下，两分钟应该能写出来：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;// 公众号：五分钟学算法&lt;br/&gt;// 作者：程序员吴师兄&lt;br/&gt;&lt;br/&gt;class Solution {&lt;br/&gt;    public boolean isSymmetric(TreeNode root) {&lt;br/&gt;        // 边界情况&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt;(root == null) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        // 递归判断左子树和右子树是否对称&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; isSymmetriacalCor(root.left,root.right);&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;    private boolean isSymmetriacalCor(TreeNode L,TreeNode R){&lt;br/&gt;        // 如果某根子树的左右两子树同时为空，肯定是对称的，直接返回 &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt;(L == null &amp;amp;&amp;amp; R == null){&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        // 说明根子树的左右两子树有某子树为空，某子树有值，不对称，返回 &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt;(L == null || R == null){&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        // 左子树的值与右子树的值不相等，不对称，返回 &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt;(L.val != R.val){&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        // 递归的对比当前节点的左子树的左子树与右子树的右子树、左子树的右子树与右子树的左子树是否对称&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; isSymmetriacalCor(L.left,R.right) &amp;amp;&amp;amp; isSymmetriacalCor(L.right,R.left);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后小小的总结一下，二叉树具备天然的递归性，往往在处理二叉树的题目时，我们都需要去思考&lt;strong&gt;怎么样利用递归&lt;/strong&gt;，想清楚能解决 50% 的二叉树问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，今天的文章就到这里，我们下篇文章见，有收获记得点个赞，&lt;strong&gt;五分钟学算法，让算法面试没那么难！&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUyNjQxNjYyMg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/D67peceibeIRJ2kKhKBAg3zqYwpnLz1jkrRn8FHicZkoibuibqxGxTDKaE7d49RJEicic7XcJ17xuhibOnpW7rrmsR40w/0?wx_fmt=png&quot; data-nickname=&quot;五分钟学算法&quot; data-alias=&quot;CXYxiaowu&quot; data-signature=&quot;让算法面试不再可怕！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a6bfca0da9fba72c9dfc994db52650c9</guid>
<title>分布式环境下如何保证 ID 的唯一性</title>
<link>https://toutiao.io/k/5b7ajtg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;h3&gt;前言&lt;/h3&gt;&lt;p&gt;首先说下我们为什么需要分布式 ID，以及分布式 ID 是用来解决什么问题的。当我们的项目还处于单体架构的时候，我们使用数据库的自增 ID 就可以解决很多数据标识问题。但是随着我们的业务发展我们的架构就会逐渐演变成分布式架构，那么这个时候再使用数据的自增 ID 就不行了，因为一个业务的数据可能会放在好几个数据库里面，此时我们就需要一个分布式 ID 用来标识一条数据，因此我们需要一个分布式 ID 的生成服务。那么分布式 ID 的服务有什么要求和挑战呢？&lt;/p&gt;&lt;h3&gt;要求&lt;/h3&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;全局唯一：既然是用来标识数据唯一的，那么一个分布式 ID 肯定要是全局唯一的，在同一业务下的每个服务下面都是一致的，不会变的，这是一个基本的要求；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;全局递增：递增这个也很好理解，我们要保证生成的 ID 是依次递增的，因为很多时候 ID 是给人看的，如果说不具备递增性，就缺乏了很多的可读性；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;信息安全：分布式 ID 的安全性也很重要，因为我们提到生成的 ID 是递增的，这就有可能会给竞争对手知道我们的 ID 的生成频率，这种在电商等场景会有很大的问题，但是这个往往跟全局递增有点冲突；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高可用性：分布式 ID 的生成服务必须是高可用，毕竟一旦不能生成 ID，后续的所有服务都无法继续使用；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;常见的分布式 ID 实现&lt;/h3&gt;&lt;p&gt;在当下的互联网当中，根据业务场景以及需求的不同，对于分布式 ID 的实现有如下几种实现方式：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;UUID；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Redis；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;变形的数据库自增 ID；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;推特雪花算法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;美团的 Leaf——雪花算法的变形；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;UUID&lt;/h4&gt;&lt;p&gt;写 Java 的朋友对 UUID 肯定不陌生，&lt;code&gt;7dbb9f04-d15e-4c88-b74b-72a35e0d7580&lt;/code&gt; 这是一个标准的 UUID，虽然都说 UUID 是全球唯一，具备我们前面提到的要求中的第一点，但是很显然不具备全局递增，这种分布式 ID 可读性很差，如果说只是用来记录日志或者不需要人去理解的场景是可以用，但是不适合我们这里说的业务数据的唯一标识。而且这种无序的 UUID 如果作为主键会很严重影响性能。&lt;/p&gt;&lt;h4&gt;Redis&lt;/h4&gt;&lt;p&gt;Redis 有个 incr 的命令，这个命令是能保证原子递增的，在某种程度上也是可以生成全局 ID，不过使用 Redis 有两个问题：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;不美观，虽然说我们需要的是一个全局 ID，但是 incr 命令是从 1 开始的整型，所以会导致全局 ID 的长度不一致，虽然说也可以用来标识唯一业务数据，但是某些场景也缺少可读性，因为不携带日期信息；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;依赖 Redis 的高可用，因为 Redis 是基于内存的，为了保证 ID 的不丢失所以需要对 Redis 进行持久化，但是关于 Redis 的两种持久化的方式各有优缺点，详细的可以参考公众号之前的文章 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&amp;amp;mid=2247492071&amp;amp;idx=1&amp;amp;sn=7ac7858547e73ef117cac48ce1821551&amp;amp;chksm=c2868e26f5f10730392e01d273703f5f904e0d751d7273f450765be85b44f883bd56151ea956&amp;amp;token=889940930&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;面试官：请说下 Redis 是如何保证在宕机后数据不丢失的&lt;/a&gt;；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;数据库自增 ID&lt;/h4&gt;&lt;p&gt;前面我们提到单个数据库在分布式环境下已经没办法使用自增 ID 了，因为每个 MySQL 的实例自增 ID 都是从 1 开始，并且步长都按照 1依次递增，这种情况下我们很容易想到是不是可以考虑给每个数据库设置不同的步长。如果我们设置了不同的步长，这样就可以保证每个数据库实例都可以生成 ID，并且不会重复。虽然简单的系统可以这样用，但是也有几个问题：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;依赖数据库 DB，在分布式环境下，如果过多的依赖数据库是有风险的，无法支持高并发的情况，特别是对于一些电商交易的场景，每秒几十万的 QPS，数据库是扛不住的；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不同数据库实例的数据不能直接关联上，需要额外的存储，才能把数据串起来，增加业务复杂度；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;推特的雪花算法—— snowflake&lt;/h4&gt;&lt;p&gt;&lt;code&gt;snowflake&lt;/code&gt; 算法是推特开源的分布式 ID 生成算法，这个算法提供了一个标准的思路，很多公司都参考这个算法做了自己的实现，比较有名的是美团的 &lt;code&gt;Leaf&lt;/code&gt;。这里我们就着重看下雪花算法是怎么实现的。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;感兴趣的可以去参考文章 https://tech.meituan.com/2017/04/21/mt-leaf.html 看下美团的 leaf 的实现原理。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;雪花算法的思想是化整为零，将分布式 ID 的生成分散到每个机房和机器上，采用一个 64 位 long 类型的的结构来表示一个 ID，64 的结构如下所示，第一位符号位 0，然后是 41 位的时间戳，接下来的 10 位是机房加机器，最后的 12 位是序列号。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.25359712230215825&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdAwicmtibRyiaVZFy5cwjjxM5S5SPXJLGgeyXX8qoHuBpV80M2o13VB6I4wK89Z2dibSn8EPgtXBFApvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1112&quot;/&gt;&lt;/p&gt;&lt;p&gt;上面这个结构是雪花算法的基本结构，不同公司根据自身的业务会进行相应的调整，有的可以采用 32 位或者其他位数，而且时间戳的位数也可以根据实际情况进行调整，10 位的 workerID 有机房的公司可以用机房加机器组成，没有机房的公司可以直接用机器来组成，序列位也可以根据情况适当调整。&lt;/p&gt;&lt;p&gt;我们可以简单算一下，41 位的时间位是2 ^ 41 / (365 * 24 * 3600 * 1000) = 69 年，每个机器每毫秒可以生成 2 ^ 12 = 4096 个 ID。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.30985915492957744&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tWOhQMr1wdAwicmtibRyiaVZFy5cwjjxM5SlHV3YMaNLLISLFM9mZznMIPRYFKTGW7PusfuJ02xt4GR0ICAYGK3EQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;710&quot;/&gt;&lt;/p&gt;&lt;p&gt;那是不是说我们这个代码只能运行 69 年呢？其实不是的，这里服务在启动的时候会设置一个初始值，这里的时间戳是用机器的时间减去初始值的差值。那 SnowFlake 算法有什么优缺点呢？&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;因为有时间戳，所以满足自增的要求，同时也具备一定的可读性；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;化整为零每个服务在各自的机器上可以直接生成唯一 ID，只需要配置好机房和机器编号即可；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;长度可以根据业务自行调整；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缺点是依赖机器的时钟，如果说机器的时钟有问题，会导致生成的 ID 可能会重复，这个需要控制；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;结合上面的原理，我们可以通过 Java 代码来具体实现，代码如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SnowFlakeUtil&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; START_TIMESTAMP = &lt;span class=&quot;code-snippet__number&quot;&gt;1624796691000L&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; DATA_CENTER_BIT = &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; MACHINE_BIT = &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; SEQUENCE_BIT = &lt;span class=&quot;code-snippet__number&quot;&gt;12&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; MAX_SEQUENCE = ~(-&lt;span class=&quot;code-snippet__number&quot;&gt;1L&lt;/span&gt; &amp;lt;&amp;lt; SEQUENCE_BIT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; MAX_MACHINE_NUM = ~(-&lt;span class=&quot;code-snippet__number&quot;&gt;1L&lt;/span&gt; &amp;lt;&amp;lt; MACHINE_BIT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; MAX_DATA_CENTER_NUM = ~(-&lt;span class=&quot;code-snippet__number&quot;&gt;1L&lt;/span&gt; &amp;lt;&amp;lt; DATA_CENTER_BIT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; MACHINE_LEFT = SEQUENCE_BIT;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; DATA_CENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; TIMESTAMP_LEFT = DATA_CENTER_LEFT + DATA_CENTER_BIT;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; idc;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; serverId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; sequence = &lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; lastTimeStamp = -&lt;span class=&quot;code-snippet__number&quot;&gt;1L&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getNextMill&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; mill = System.currentTimeMillis();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (mill &amp;lt;= lastTimeStamp) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mill = System.currentTimeMillis();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; mill;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; serverId 机器标志ID&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SnowFlakeUtil&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; idc, &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; serverId)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (idc &amp;gt; MAX_DATA_CENTER_NUM || idc &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;IDC 数据中心编号非法！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (serverId &amp;gt; MAX_MACHINE_NUM || serverId &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;serverId 机器编号非法！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.idc = idc;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.serverId = serverId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * 生成下一个 ID&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;genNextId&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; currTimeStamp = System.currentTimeMillis();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (currTimeStamp &amp;lt; lastTimeStamp) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Clock moved backwards.  Refusing to generate id&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (currTimeStamp == lastTimeStamp) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;//相同毫秒内，序列号自增&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            sequence = (sequence + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &amp;amp; MAX_SEQUENCE;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;//同一毫秒的序列数已经达到最大&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (sequence == &lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                currTimeStamp = getNextMill();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;//不同毫秒内，序列号置为0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            sequence = &lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        lastTimeStamp = currTimeStamp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (currTimeStamp - START_TIMESTAMP) &amp;lt;&amp;lt; TIMESTAMP_LEFT | idc &amp;lt;&amp;lt; DATA_CENTER_LEFT | serverId &amp;lt;&amp;lt; MACHINE_LEFT | sequence;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SnowFlakeUtil snowFlake = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SnowFlakeUtil(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.out.println(snowFlake.genNextId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h3&gt;参考&lt;/h3&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;知乎·一口气说出9种分布式ID生成方式，面试官有点懵了&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Leaf——美团点评分布式ID生成系统&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>de043a34c8a7827519933ab8e151152f</guid>
<title>作为一只爬虫，如何科学有效地处理短信验证码？</title>
<link>https://toutiao.io/k/p0graci</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/atOH362Boyun2lEooXtwo7Ufb5raL3JbozSvBHM1Jbq5Q5jX2GWp1H7pQ8T0Sg1qhxnRBvrbwSpbyMXdtvRwPA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;之前我们了解了一些验证码的处理流程，比如图形验证码、滑块验证码、点选验证码等等，但是这些验证码都有一种共同的特点，那就是这些验证码的处理流程通常只需要在 PC 上完成即可，比如图形验证码如果在 PC 上出现，那么在 PC 上直接验证通过就好了，所有的识别、验证输入的流程都是在 PC 上完成的。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但还有一种验证码和此种情况不同，那就是手机验证码，比如 PC 上需要输入手机号，然后短信验证码需要发到手机上，然后再在 PC 上把收到的验证码输入即可通过验证。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那遇到这种情况，我们如何才能将这个流程给自动化呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;验证码收发&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常来说，我们的自动化脚本会运行在 PC 上，比如打开一个网页，然后模拟输入手机号，然后点击获取验证码，接下来就需要输入验证码了。打开页面，输入手机号、点击获取验证码等流程我们可以非常容易地实现自动化，但是验证码被发送到手机上了，我们怎么能把它转到 PC 上呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了自动化整个验证码收发的流程，这时候我们想要完成的就是——当手机收到一条短信的时候，它能够自动将短信转发到某处，比如一台远程服务器上或者直接发到 PC 上，在 PC 上我们可以通过一些方法再把短信获取下来并提取验证码的内容，然后自动化填充验证码即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那这里关键的部分其实就是怎样完成这两个步骤：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如何监听手机收到了短信&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何将手机短信转发到想要的位置&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个步骤缺一不可，而且都需要在手机上完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决思路自然很简单了，我们以 Android 手机为例，如果有 Android 开发经验的话，其实这两个功能实现起来还是蛮简单的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;注意：这里我们仅仅简单介绍基本的思路，不会完全详细展开介绍具体的代码实现，感兴趣的话可以自行尝试。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先如何监听手机收到了短信呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Android 开发中，整体就分为三个必要环节：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;注册读取短信的权限：在一个 Android App 中，读取短信是需要特定的权限的，所以我们需要在 Andriod App 的 AndroidManifest.xml 中将读取短信的权限配置好，比如接收短信的权限配置如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;uses-permission&lt;/span&gt; &lt;span&gt;android:name&lt;/span&gt;=&lt;span&gt;&quot;android.permission.RECEIVE_SMS&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;uses-permission&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;注册广播事件：Android 有一个基本组件叫做 BroadcastReceiver，也就是广播接收者的意思，我们可以用它来监听来自系统的各种事件广播，比如系统电量不足的广播、系统来电的广播，当然系统收到短信的广播也就不在话下了。所以这就类似我们注册一个监听器，用来监听系统收到短信的事件。&lt;/p&gt;&lt;p&gt;比如这里我们可以同样在  AndroidManifest.xml 里面注册一个 BroadcastReceiver，叫做 SmsReciver：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;receiver&lt;/span&gt; &lt;span&gt;android:name&lt;/span&gt;=&lt;span&gt;&quot;.receive.SmsReciver&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;intent-filter&lt;/span&gt; &lt;span&gt;android:priority&lt;/span&gt;=&lt;span&gt;&quot;999&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;action&lt;/span&gt; &lt;span&gt;android:name&lt;/span&gt;=&lt;span&gt;&quot;android.provider.Telephony.SMS_RECEIVED&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;receiver&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;实现短信广播接收：这里就需要我们真正实现短信接收的逻辑了，这里只需要实现一个 SmsReceiver 类来继承一个 BroadcastReceiver 然后实现其 onReceive 方法即可，其中 intent 参数里面便包含了我们想要的短信息内容，实现如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SmsReciver&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BroadcastReceiver&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onReceive&lt;/span&gt;&lt;span&gt;(Context context, Intent intent)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Bundle bundle = intent.getExtras();&lt;br/&gt;        SmsMessage msg = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; != bundle) {&lt;br/&gt;            Object[] smsObj = (Object[]) bundle.get(&lt;span&gt;&quot;pdus&quot;&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (Object object : smsObj) {&lt;br/&gt;                msg = SmsMessage.createFromPdu((&lt;span&gt;byte&lt;/span&gt;[]) object);&lt;br/&gt;                Log.e(&lt;span&gt;&quot;短信号码&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt; + msg.getOriginatingAddress());&lt;br/&gt;                Log.e(&lt;span&gt;&quot;短信内容&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt; + msg.getDisplayMessageBody());&lt;br/&gt;                Log.e(&lt;span&gt;&quot;短信时间&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt; + msg.getTimestampMillis());&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如此一来，我们便实现了短信的接收。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;短信收到之后，发送自然也就很简单了，比如服务器提供一个 API，我们通过请求该 API 即可实现数据的发送，这个通过 Android 的一些 HTTP 请求库就可以实现，比如 OkHttp 等构造一个 HTTP 请求即可，这里就不再赘述了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过总的来说，整个流程下来其实还需要花费一些开发成本的，对于如此常用的功能，有没有现成的解决方案呢？自然是有的。我们可以借助于于一些开源实现，我们就没必要重复造轮子了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们就介绍一个开源软件，叫做 SmsForwarder，中文翻译过来叫做短信转发器，其 GitHub 仓库地址为：https://github.com/pppscn/SmsForwarder。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它的基本流程架构图如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6808266360505166&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DAE6TYB3GW8REenGkoUMfz12WA4nmhuziacmQ55jRTFz0WvUR4DAhkjoLNia8iaY7IbYJItibruiamJIE8rdzPkVwxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1742&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;架构图非常清晰，SmsForwarder 可以监听监听收到短信的事件，获取到短信的来源号码、接受卡槽、短信内容、接收时间等内容，然后将其通过一定的规则转发出去，支持转发到邮箱、微信群机器人、企业微信、Telegram 机器人、Webhook 等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我们可以配置类似这样的规则，如图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.7777777777777777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DAE6TYB3GW8REenGkoUMfz12WA4nmhuz4OF9egu10Zmmad8RJddoz1VPhNHkUqDvrU3MPKUuEc1MGCIgkOeQfQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;转发规则&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如当手机号符合一定的规则就转发到 QQ 邮箱，比如内容包含“报警”就转发到阿里企业邮箱，比如内容开头是“测试”就发动给叫做 TSMS 的 Webhook。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中QQ邮箱、阿里企业邮箱都是我们已经配置好的发送方，都属于邮箱类型，TSMS 也是一种发送方，属于 Webhook 类型，如图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.7777777777777777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DAE6TYB3GW8REenGkoUMfz12WA4nmhuzbkOgg6LSV1r4Sxa9Dl4JaovEktALlJ3ibxDA5x65qMKYW5qn64ZH4EQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;发送方&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们也可以点击添加发送方按钮来添加对应的发送方，比如添加邮箱的发送方，我们可以设置 SMTP 配置下发件邮箱、SMTP 服务器、SMTP 端口、授权密码等内容：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.7777777777777777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DAE6TYB3GW8REenGkoUMfz12WA4nmhuzwb0n6ianOs25XXW07hicwxHicicdgtlTMwDvlaUJokY69UChY0dl1lAajA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;添加/编辑发送方邮箱&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设置 Webhook 我们可以选择是 GET 还是 POST 请求，然后填入对应的 URL、密钥等内容：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.7777777777777777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DAE6TYB3GW8REenGkoUMfz12WA4nmhuzReFlcSA9Ca0VIjwf6vNF7TxVCWzorD55KOTr1x5pZZqD6MlFKuuVYQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;添加/编辑发送方网页通知&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设置转发规则页面如图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.7777777777777777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DAE6TYB3GW8REenGkoUMfz12WA4nmhuzIKprBwYafWHH2QjoHjb4BFQC3g4ym1EVEKmKx5iaPHGBLUKEwibKOLog/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;支持正则匹配规则 &amp;amp; 支持卡槽匹配规则&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如这里我们可以选择匹配卡槽、匹配的字段、匹配的模式，还可以配置正则来设置匹配的值，这里就配置了尾号是 4566 的手机号来执行一定的发送操作，收到的短信会发送到钉钉这个发送方。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实战演示&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如这里我们来尝试下，这里我们用 Flask 写一个 API，实现如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt; Flask, request, jsonify&lt;br/&gt;&lt;span&gt;from&lt;/span&gt; loguru &lt;span&gt;import&lt;/span&gt; logger&lt;br/&gt;&lt;br/&gt;app = Flask(__name__)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@app.route(&#x27;/sms&#x27;, methods=[&#x27;POST&#x27;])&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;receive&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    sms_content = request.form.get(&lt;span&gt;&#x27;content&#x27;&lt;/span&gt;)&lt;br/&gt;    logger.debug(&lt;span&gt;f&#x27;received &lt;span&gt;{sms_content}&lt;/span&gt;&#x27;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;# parse content and save to db or mq&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; jsonify(status=&lt;span&gt;&#x27;success&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;&#x27;__main__&#x27;&lt;/span&gt;:&lt;br/&gt;    app.run(debug=&lt;span&gt;True&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码很简单，这里设置了一个路由，接收 POST 请求，然后读取了 Request 表单的内容，其中 content 就是短信的详情内容，然后将其打印出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们将代码保存为 server.py，然后将其运行起来：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;python3 server.py&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果输出如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; * Debug mode: on&lt;br/&gt; * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)&lt;br/&gt; * Restarting with &lt;span&gt;stat&lt;/span&gt;&lt;br/&gt; * Debugger is active!&lt;br/&gt; * Debugger PIN: 269-657-055&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了方便测试，我们可以用 Ngrok 将该服务暴露到公网：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ngrok http 5000&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;注意：Ngrok 可以方便地将任何非公网的服务暴露到公网访问，并配置特定的临时二级域名，但一个域名有时长限制，所以通常仅供测试使用。试用前请先安装 Ngrok，具体可以参考 https://ngrok.com/。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行之后，可以看到输入结果如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Session Status                online                                                                                                   &lt;br/&gt;Session Expires               1 hour, 59 minutes                                                                                       &lt;br/&gt;Update                        update available (version 2.3.40, Ctrl-U to update)                                                      &lt;br/&gt;Version                       2.3.35                                                                                                   &lt;br/&gt;Region                        United States (us)                                                                                       &lt;br/&gt;Web Interface                 http://127.0.0.1:4040                                                                                    &lt;br/&gt;Forwarding                    http://1259539cb974.ngrok.io -&amp;gt; http://localhost:5000                                                    &lt;br/&gt;Forwarding                    https://1259539cb974.ngrok.io -&amp;gt; http://localhost:5000                                                   &lt;br/&gt;                                                                                                                                       &lt;br/&gt;Connections                   ttl     opn     rt1     rt5     p50     p90                                                              &lt;br/&gt;                              9       0       0.00    0.00    0.00    0.00&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们可以看到 Ngrok 为我们配置了一个公网地址，比如访问 https://1259539cb974.ngrok.io 即相当于访问了我们本地的 http://localhost:5000 服务，这样手机上只需要配置这个地址即可将数据发送到 PC 了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们手机上打开 SmsForder，添加一个 Webhook 类型的发送方，配置如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;2.2222222222222223&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DAE6TYB3GW8REenGkoUMfz12WA4nmhuz8wlLQxWvB9zjmoMSrbNuQKop8O0RcPYicPTBn1d8Y81v3udMkCvUFag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里 Server 的地址我们就直接设置了刚才 Ngrok 提供的公网地址了，记得 URL 路径后面加上 sms。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着我们添加一个转发规则：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;2.2222222222222223&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DAE6TYB3GW8REenGkoUMfz12WA4nmhuznaJjO2T68N9UqKl8LhnnmrIu3KkthaIicY7zZmoggKHG3YCs0dLia6bQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们设置了内容匹配规则，比如匹配到内容开头为测试的时候，那就将短信内容转发到 Webhook 这个发送方，即发送到我们刚刚搭建的 Flask 服务器上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OK，配置完成之后，然后我们给该手机尝试发送一个验证码，内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;测试验证码593722，一分钟有效。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候就可以发现刚才的 Flask 服务器接收结果是这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;received +8617xxxxxxxx&lt;br/&gt;测试验证码593722，一分钟有效。&lt;br/&gt;SIM2_China Unicom_&lt;br/&gt;2021-03-27 18:47:54&lt;br/&gt;SM-G9860&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到刚才验证码的内容就成功由手机发送到 PC 了，接着我们便可以对此消息进行解析和处理，然后存入数据库或者消息队列即可。爬虫一端监听消息队列或者数据库改动即可将其填写并进行一些模拟登录操作了，该步骤就不再赘述了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;批量收发&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然以上只针对于一部手机的情况，如果我们有大量的手机和手机卡，我们可以实现手机的群控处理，比如统一安装短信接收软件，统一配置相同的转发规则，从而实现大量手机号验证码的接收和处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如一个群控系统就是这样的：&lt;/p&gt;&lt;p&gt;&lt;img data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/DAE6TYB3GW8REenGkoUMfz12WA4nmhuzSibLBS16y6Isfgy1EwUbiaCAq7vw4icrA0HicWlViaiaLhscykvOnku4ndgg/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;985&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;553.1954225352113&quot; data-ratio=&quot;0.5614213197969543&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DAE6TYB3GW8REenGkoUMfz12WA4nmhuzAQOqQJwenFNRKjdw6iart9bzmLicPu5E0O5uOpba6dtvBrnnibtY4FOWQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;985&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;卡池&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然还有更专业的解决方案，比如有专业的手机卡池，配合以专业的软件设备实现短信的监听。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如如下的设备支持插 128 张 SIM 卡，就可以实现同时监听 128 个手机号的验证码，如图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6539473684210526&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DAE6TYB3GW8REenGkoUMfz12WA4nmhuzeZQxBF2oTK67ia75nqENpiaKweu8t7oESwun6AeibTyfsP2rGqINoZBng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;760&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体的技术这里不再阐述，详细可以自行查询相关的设备供应商。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;接码平台&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然如上的方案成本还是比较高的，而且这些方案其实已经不限于简单接收短信验证码了，比如手机群控系统一般都会做手机群控爬虫，而卡池也可以用来做 4G/5G 蜂窝代理，如果仅仅做短信收发是可以的，但未免有些浪费了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们不想耗费过多成本想实现短信验证码的自动化，还有一种方案就是接码平台，其基本思路是这样的：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;平台会维护大量的手机号，并可能开放一些 API 或者提供网页供我们调用来获取手机号和查看短信的内容。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我们调用 API 或者爬取网页获取手机号，然后在对应的站点输入该手机号来获取验证码。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过调用 API 或者爬取网页获取对应手机号短信的内容，并交由爬虫处理。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体的操作步骤这里就不再详细阐述了，这里简单列几个接码平台：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;番薯云：https://guanfangdiping.com/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;云际云短信：https://yunjisms.xyz/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;接码号：https://jiemahao.com/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;KaKa 接码：http://www.kakasms.com/&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于接码平台管控比较严格，所以可能随时不可用，请自行搜集对应的平台进行使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU1OTI0NjI1NQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/atOH362BoyuUe1icelWmbMyTCRwoFPScmosYQheSZ9wsmr61Bfr2rvNav9j9QpDnUulNpCotEiaAoLzSAm4jZTjA/0?wx_fmt=png&quot; data-nickname=&quot;AirPython&quot; data-alias=&quot;AirPython&quot; data-signature=&quot;专注于Python爬虫/自动化/Web原创技术干货！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93451&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;92877&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;好文和朋友一起看~&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>