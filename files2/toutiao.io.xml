<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3e685de8cdcaef211fc9bc153a85a669</guid>
<title>Java 对象属性复制组件：Mapstruct 的项目改造指南</title>
<link>https://toutiao.io/k/ilsr2zz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-source-line=&quot;1&quot;&gt;本文介绍下Java对象属性复制组件（MapStruct），以及项目中引入遇到的坑。&lt;/p&gt;&lt;h2 data-source-line=&quot;3&quot;&gt;1. 问题背景&lt;/h2&gt;&lt;p data-source-line=&quot;5&quot;&gt;日常编程中，经常会碰到对象属性复制的场景，就比如下面这样一个常见的三层MVC架构。&lt;/p&gt;&lt;p data-source-line=&quot;7&quot;&gt;&lt;img data-ratio=&quot;1.4133333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OqTAl3WTC7FiaMvicf6yicWRFbUluDfickJybRUZkic6YmjK3fWCQhupdXpFicsMUHjaHIgpRicp6icGTr8uAiaoMN9jY5g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;300&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;9&quot;&gt;前端请求通过VO对象接收，并通过DTO对象进行流转，最后转换成DO对象与数据库DAO层进行交互，反之亦然。&lt;/p&gt;&lt;p data-source-line=&quot;11&quot;&gt;当业务简单的时候，可以通过手动编码getter/setter函数来复制对象属性。但是当业务变的复杂，对象属性变得很多，那么手写复制属性代码不仅十分繁琐，非常耗时间，并且还可能容易出错。&lt;/p&gt;&lt;p data-source-line=&quot;13&quot;&gt;为了解决这个痛点，在项目初期，小辉项目的解决方法是随手写的转换工具函数：根据变量名进行反射，对基础类型和枚举的变量进行赋值。&lt;/p&gt;&lt;p data-source-line=&quot;15&quot;&gt;总结下目前该工具函数的优缺点：&lt;/p&gt;&lt;p data-source-line=&quot;17&quot;&gt;优点：&lt;/p&gt;&lt;ol data-source-line=&quot;19&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;开发效率高，随时想要转换的时候，传入源对象以及指定class，调用下函数即可。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;21&quot;&gt;缺点：&lt;/p&gt;&lt;ol data-source-line=&quot;22&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;项目中大量的反射会严重影响代码执行效率&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;由于使用了反射，所以成员变量的使用被追踪就很麻烦&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;转换失败只有在运行中报错才会发现&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对于嵌套对象字段的情况无能为力&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;只能对基础类型进行复制&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对字段名不一致的属性无法赋值&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-source-line=&quot;29&quot;&gt;2. 开源组件选择&lt;/h2&gt;&lt;p data-source-line=&quot;31&quot;&gt;那如果想要更强大的功能，有哪些开源组件可以选择呢？&lt;/p&gt;&lt;p data-source-line=&quot;33&quot;&gt;下面小辉收集并盘点下相关开源组件的特点。&lt;/p&gt;&lt;h3 data-source-line=&quot;35&quot;&gt;1. Apache BeanUtils&lt;/h3&gt;&lt;ol data-source-line=&quot;37&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;底层原理运用反射。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;嵌套对象字段，将会与源对象使用同一对象，即使用浅拷贝。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;字段名不一致的属性无法被复制。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;类型不一致的字段，将会进行默认类型转化。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-source-line=&quot;42&quot;&gt;2. Spring BeanUtils：&lt;/h3&gt;&lt;ol data-source-line=&quot;43&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;底层原理同样运用反射，但相比Apache BeanUtils减少了反射校验，同时增加了缓存，所以提升了转换速度。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;嵌套对象字段，将会与源对象使用同一对象，即使用浅拷贝。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;字段名不一致，属性无法复制。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;类型不一致的字段，将会进行默认类型转化。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-source-line=&quot;48&quot;&gt;3. Cglib BeanCopier&lt;/h3&gt;&lt;ol data-source-line=&quot;49&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;字节码技术动态生成一个代理类，代理类实现get和set方法。生成代理类过程存在一定开销，但是一旦生成，我们可以缓存起来重复使用。相比前两个更好用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;嵌套对象字段，将会与源对象使用同一对象，即使用浅拷贝。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;字段名不一致，属性无法复制。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;类型不一致的字段，将会进行默认类型转化。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-source-line=&quot;54&quot;&gt;4. Dozer&lt;/h3&gt;&lt;ol data-source-line=&quot;55&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;运用反射。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;嵌套对象字段，不会与源对象使用同一对象，即深拷贝。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;默认支持类型不一致(基本类型/包装类型)转换。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过配置字段名的映射关系，不一样字段的属性也被复制。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-source-line=&quot;60&quot;&gt;5. orika&lt;/h3&gt;&lt;ol data-source-line=&quot;61&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;底层其使用了javassist生成字段属性的映射的字节码，然后直接动态加载执行字节码文件，相比于使用反射的工具类，速度上会快很多。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持深拷贝。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;默认支持类型不一致(基本类型/包装类型)转换。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过配置字段名的映射关系，不一样字段的属性也被复制。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;66&quot;&gt;上面介绍的这些工具类，不管使用反射，还是使用字节码技术，这些都需要在代码运行期间动态执行，所以相对于手写硬编码这种方式，上面这些工具类执行速度都会慢很多。&lt;/p&gt;&lt;p data-source-line=&quot;68&quot;&gt;而MapStruct与上面五个组件原理都不同。&lt;/p&gt;&lt;blockquote data-source-line=&quot;70&quot;&gt;&lt;p&gt;以上提到的属性无法复制，都是在不使用手动写Convert函数的情况下进行讨论的&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-source-line=&quot;72&quot;&gt;3. MapStruct&lt;/h2&gt;&lt;h3 data-source-line=&quot;74&quot;&gt;1. 为什么选择MapStruct&lt;/h3&gt;&lt;p data-source-line=&quot;76&quot;&gt;接下来就要介绍MapStruct 这个工具类，这个工具类之所以运行速度与硬编码差不多，这是因为MapStruct在编译期间就生成属性复制的代码，运行期间就无需使用反射或者字节码技术，从而确保了高性能。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.43478260869565216&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7FiaMvicf6yicWRFbUluDfickJyLzjNibhfgBr3ZicN9OllB0CUx2PVCAYw7lHgjOvNK5IX2hOdkgpyiamfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;460&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;78&quot;&gt;另外，由于编译期间就生成了代码，所以如果有任何问题，编译期间就可以提前暴露，这对于开发人员来讲就可以提前解决问题，而不用等到代码应用上线了，运行之后才发现错误。&lt;/p&gt;&lt;p data-source-line=&quot;80&quot;&gt;所以，为了克服项目中当前函数的被提到的五个缺点，笔者引入了MapStruct。&lt;/p&gt;&lt;h3 data-source-line=&quot;82&quot;&gt;2. 如何引入MapStruct&lt;/h3&gt;&lt;p data-source-line=&quot;84&quot;&gt;只需要引入MapStruct的依赖，同时由于MapStruct需要在编译器期间生成代码，所以我们需要maven-compiler-plugin插件中配置。&lt;/p&gt;&lt;p data-source-line=&quot;86&quot;&gt;如果项目中没有用到lombok，下面的lombok相关配置可以删除；如果用到lombok，由于MapStruct和Lombok都会在编译期间生成代码，为解决冲突使用如下配置即可。&lt;/p&gt;&lt;pre data-source-line=&quot;88&quot;&gt;&lt;code&gt;&lt;span&gt;// pom.xml&lt;/span&gt;&lt;br/&gt;        &amp;lt;dependency&amp;gt;&lt;br/&gt;            &amp;lt;groupId&amp;gt;org.MapStruct&amp;lt;/groupId&amp;gt;&lt;br/&gt;            &amp;lt;artifactId&amp;gt;MapStruct&amp;lt;/artifactId&amp;gt;&lt;br/&gt;            &amp;lt;version&amp;gt;&lt;span&gt;1.4&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;.Final&amp;lt;/version&amp;gt;&lt;br/&gt;        &amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-source-line=&quot;96&quot;&gt;&lt;code&gt;// pom.xml&lt;br/&gt;// &lt;span&gt;为了防止&lt;/span&gt;lombok&lt;span&gt;和&lt;/span&gt;MapStruct&lt;span&gt;的冲突，在&lt;/span&gt;pom.xml&lt;span&gt;加入如下配置&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;build&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;$&lt;span&gt;{plugin.compiler.version}&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;source&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;             &lt;br/&gt;                &lt;span&gt;&amp;lt;target&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;annotationProcessorPaths&amp;gt;&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&amp;lt;path&amp;gt;&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.MapStruct&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;MapStruct-processor&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;$&lt;span&gt;{MapStruct.version}&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&amp;lt;path&amp;gt;&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;$&lt;span&gt;{lombok.version}&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&amp;lt;!-- other annotation processors --&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;/annotationProcessorPaths&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-source-line=&quot;127&quot;&gt;3. MapStruct的常见使用方法&lt;/h3&gt;&lt;p data-source-line=&quot;129&quot;&gt;使用MapStruct很简单，只需要创建一个mapper文件，然后在需要使用转换的地方，注入调用即可。&lt;/p&gt;&lt;p data-source-line=&quot;131&quot;&gt;下面列举了两个文件，涵盖项目中绝大多数的mapper文件写法。&lt;/p&gt;&lt;p data-source-line=&quot;133&quot;&gt;DO转成DTO的mapper：&lt;/p&gt;&lt;pre data-source-line=&quot;134&quot;&gt;&lt;code&gt;/**&lt;br/&gt; * componentModel = &lt;span&gt;&quot;spring&quot;&lt;/span&gt;&lt;span&gt;：表明该类是一个&lt;/span&gt; spring &lt;span&gt;组件&lt;/span&gt;,&lt;span&gt;之后调用处只需要使用&lt;/span&gt;@Autowired&lt;span&gt;，即可引入该类实例&lt;/span&gt;&lt;br/&gt; * NullValuePropertyMappingStrategy.IGNORE&lt;span&gt;：如果遇到旧对象属性为&lt;/span&gt;null&lt;span&gt;，则跳过该属性赋值给新对象&lt;/span&gt;&lt;br/&gt; */&lt;br/&gt;@Mapper(componentModel = &lt;span&gt;&quot;spring&quot;&lt;/span&gt;, nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)&lt;br/&gt;public interface UserTransMapper {&lt;br/&gt;    /**&lt;br/&gt;     * &lt;span&gt;这个对象可用于非&lt;/span&gt;Spring&lt;span&gt;环境下获取当前对象实例。如果在&lt;/span&gt;Spring&lt;span&gt;环境下，该行代码可删除&lt;/span&gt;&lt;br/&gt;     */&lt;br/&gt;    UserTransMapper INSTANCE = Mappers.getMapper(UserTransMapper.class);&lt;br/&gt;    &lt;br/&gt;    /**&lt;br/&gt;     * &lt;span&gt;将&lt;/span&gt;Userinfo&lt;span&gt;对象中非&lt;/span&gt;null&lt;span&gt;的属性转化为&lt;/span&gt;UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;的对象&lt;/span&gt;&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;Info &lt;span&gt;从数据库读取的用户信息&lt;/span&gt;&lt;br/&gt;     * @return&lt;br/&gt;     */&lt;br/&gt;    UserD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;Info2userD&lt;span&gt;to&lt;/span&gt;(UserInfo &lt;span&gt;user&lt;/span&gt;Info);&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * &lt;span&gt;将&lt;/span&gt;Userinfo&lt;span&gt;对象中非&lt;/span&gt;null&lt;span&gt;的属性更新到&lt;/span&gt;UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;的对象&lt;/span&gt;&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;Info &lt;span&gt;从数据库读取的用户信息&lt;/span&gt;&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt; &lt;span&gt;用户信息的&lt;/span&gt;dto&lt;br/&gt;     * &lt;span&gt;如果改&lt;/span&gt;void&lt;span&gt;为&lt;/span&gt;UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;，则函数会返回更新后的&lt;/span&gt;UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;对象&lt;/span&gt;&lt;br/&gt;     */&lt;br/&gt;    void updateUserInfo2userD&lt;span&gt;to&lt;/span&gt;(UserInfo &lt;span&gt;user&lt;/span&gt;Info, @MappingTarget UserD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * &lt;span&gt;将&lt;/span&gt;UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;对象中非&lt;/span&gt;null&lt;span&gt;的属性转化为&lt;/span&gt;LoginEventD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;的对象&lt;/span&gt;&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt; &lt;span&gt;用户信息的&lt;/span&gt;dto&lt;br/&gt;     * @return LoginEventD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;继承&lt;/span&gt;UserD&lt;span&gt;to&lt;/span&gt;&lt;br/&gt;     */&lt;br/&gt;    LoginEventD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;Dto2loginEventD&lt;span&gt;to&lt;/span&gt;(UserD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-source-line=&quot;169&quot;&gt;DTO转成VO的mapper：&lt;/p&gt;&lt;pre data-source-line=&quot;170&quot;&gt;&lt;code&gt;@Mapper(componentModel = &lt;span&gt;&quot;spring&quot;&lt;/span&gt;, nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)&lt;br/&gt;public interface UserTransMapper {&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;对象中非&lt;/span&gt;null&lt;span&gt;的属性转化为&lt;/span&gt;UserInfoVo&lt;span&gt;的对象&lt;/span&gt;&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt; &lt;span&gt;用户信息的&lt;/span&gt;dto&lt;br/&gt;     * @return UserInfoVo&lt;span&gt;继承与&lt;/span&gt;UserBaseInfoVo&lt;span&gt;，都是用了&lt;/span&gt;@Data&lt;span&gt;，没有异常报错。&lt;/span&gt;&lt;br/&gt;     */&lt;br/&gt;    UserInfoVo &lt;span&gt;user&lt;/span&gt;Dto2userVo(UserD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * &lt;span&gt;直接写嵌套&lt;/span&gt;List&lt;span&gt;等集合类，同样可以生效&lt;/span&gt;&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt;List&lt;br/&gt;     * @return&lt;br/&gt;     */&lt;br/&gt;    List&lt;span&gt;&amp;lt;UserInfoVo&amp;gt;&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;Dto2userVo(List&lt;span&gt;&amp;lt;UserDto&amp;gt;&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt;List);&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * &lt;span&gt;如果&lt;/span&gt;UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;存在成员变量是类&lt;/span&gt;UserSubD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;，而&lt;/span&gt;UserInfoVo&lt;span&gt;存在成员变量是类&lt;/span&gt;UserSubVo&lt;span&gt;，想在上面转化的同时，让这两个成员变量进行赋值，只需要定义下面的函数即可。&lt;/span&gt;&lt;br/&gt;     *&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;SubD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;用户信息的&lt;/span&gt;dto&lt;span&gt;中的成员变量，类型为&lt;/span&gt;UserSubD&lt;span&gt;to&lt;/span&gt;&lt;br/&gt;     * @return&lt;br/&gt;     */&lt;br/&gt;    UserSubVo &lt;span&gt;user&lt;/span&gt;SubDto2userSubVo(UserSubD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;SubD&lt;span&gt;to&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * UserD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;对象和&lt;/span&gt;FollowInfoD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;对象中非&lt;/span&gt;null&lt;span&gt;的属性转化为&lt;/span&gt;UserInfoVo&lt;span&gt;的对象&lt;/span&gt;&lt;br/&gt;     * @param &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt; &lt;span&gt;用户信息的&lt;/span&gt;dto&lt;br/&gt;     * @param followInfoD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;关注粉丝的&lt;/span&gt;dto&lt;br/&gt;     * @param hn &lt;span&gt;房子数量&lt;/span&gt;&lt;br/&gt;     * @return&lt;br/&gt;     */&lt;br/&gt;    @Mappings({&lt;br/&gt;            @Mapping(source = &lt;span&gt;&quot;userDto.regionId&quot;&lt;/span&gt;,target = &lt;span&gt;&quot;regionId&quot;&lt;/span&gt;),&lt;br/&gt;            @Mapping(source = &lt;span&gt;&quot;followInfoDto.price&quot;&lt;/span&gt;, target = &lt;span&gt;&quot;price&quot;&lt;/span&gt;, numberFormat = &lt;span&gt;&quot;0.00&quot;&lt;/span&gt;),&lt;br/&gt;            @Mapping(source = &lt;span&gt;&quot;hn&quot;&lt;/span&gt;,target = &lt;span&gt;&quot;houseNumber&quot;&lt;/span&gt;)&lt;br/&gt;    })&lt;br/&gt;    /**&lt;br/&gt;     * @Mapping&lt;span&gt;也就是手动映射字段的操作，使用简单，读者可自行研究&lt;/span&gt;&lt;br/&gt;     */&lt;br/&gt;    UserInfoVo &lt;span&gt;user&lt;/span&gt;Dto2userVo(UserD&lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;D&lt;span&gt;to&lt;/span&gt;, FollowInfoD&lt;span&gt;to&lt;/span&gt; followInfoD&lt;span&gt;to&lt;/span&gt;, Integer hn);&lt;br/&gt;    /**&lt;br/&gt;     * &lt;span&gt;假设从映射&lt;/span&gt;Person&lt;span&gt;到&lt;/span&gt;PersonD&lt;span&gt;to&lt;/span&gt;&lt;span&gt;需要一些&lt;/span&gt;MapStruct&lt;span&gt;无法生成的特殊逻辑，可以定义一个&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;函数&lt;/span&gt;&lt;br/&gt;     */&lt;br/&gt;    &lt;span&gt;default&lt;/span&gt; PersonD&lt;span&gt;to&lt;/span&gt; personToPersonD&lt;span&gt;to&lt;/span&gt;(Person person) {&lt;br/&gt;        // &lt;span&gt;手动写映射逻辑&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-source-line=&quot;222&quot;&gt;4. 项目改造与踩坑提示&lt;/h2&gt;&lt;p data-source-line=&quot;224&quot;&gt;这次改造中相关依赖的版本：&lt;/p&gt;&lt;ol data-source-line=&quot;226&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;lombok版本1.16.22，改造时升级为1.18.12&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;项目原有依赖fastjson版本1.2.62&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;引入MapStruct版本为1.4.1.Final&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;230&quot;&gt;说明：&lt;/p&gt;&lt;ol data-source-line=&quot;232&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;之所以要升级lombok版本，是因为上面UserDto对象转化为LoginEventDto对象时，原有项目只在UserDto上添加@Builder，但是继承类LoginEventDto无法继承@Builder，导致MapStruct实例化的时候实例一个UserDto对象。&lt;br/&gt;解决方法：在继承层次结构的所有类(即LoginEventDto和UserDto)都需要使用@SuperBuilder可以，（类UserDto的@Builder要去掉）但这个@SuperBuilder只在更高的lombok版本才有，所以才升级了lombok版本。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;项目中使用了fastjson，因此业务代码中出现很多处需要反射调用无参构造函数。但在上面一步升级lombok的过程中，lombok对于@Builder的实现出现了一些修改：在1.16.22的生成代码中，是存在private级别的无参构造函数；而在1.18.12的生成代码中，并没有私有无参构造函数，从而导致了业务代码大量出现缺少默认构造函数的报错。&lt;br/&gt;解决方法：@Builder注解跟构造函数之间的冲突很常见。最佳实践是：在所有使用@Builder或者@SupserBuilder的类，增加@NoArgsConstructor和@AllArgsConstructor。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;237&quot;&gt;虽然本文极力推荐MapStruct，但如果是老项目的话，尤其是大项目的话，还是考虑下改造后的测试成本。本人在第一次引入的时候，过于自信，在父pom引入MapStruct并提升了lombok版本，直接导致开发环境的微服务集体报错。后来改为在单个微服务实验，并且放在开发环境长期观察（主要这个改动影响测试覆盖面太大，也不想让QA为了技术优化来加班），之后才敢放到生产。&lt;/p&gt;&lt;p data-source-line=&quot;239&quot;&gt;当然如果是新项目，非常推荐尝试下MapStruct。&lt;/p&gt;&lt;h2 data-source-line=&quot;241&quot;&gt;5. Q&amp;amp;A&lt;/h2&gt;&lt;ol data-source-line=&quot;243&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;在项目引入MapStruct时，有人会提出现在反射的性能消耗已经很低了，Spring、Mybatis等各种框架中大量使用反射，为什么还要使用MapStruct这种编译期生成代码的组件？&lt;br/&gt;主要有如下考虑：&lt;br/&gt;1.反射本身的性能损耗还是很大的，但由于开源库对反射进行了缓存等优化处理，才减少反射对性能损耗的影响。然而，相比调用MapStruct生成的方法，优化后的性能还是差很多。&lt;br/&gt;2.开源库使用反射是为了通用性考虑，但在具体的业务场景，对象之间的转换是很确定的。&lt;br/&gt;3.MapStruct组件本身使用很简单（看完这篇博客之后，可以解决大部分应用场景）。同时， MapStruct组件还能处理一些反射无法处理或者更加灵活解决一些应用问题。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;250&quot;&gt;参考&lt;/p&gt;&lt;ol data-source-line=&quot;252&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;https://github.com/MapStruct/MapStruct-examples&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;http://www.kailing.pub/MapStruct1.3/index.html&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://mapstruct.org/documentation/stable/reference/html/&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>36f4141fe272a58d6232f875cf7ffddf</guid>
<title>终于明白了，一文彻底理解 I/O 多路复用</title>
<link>https://toutiao.io/k/8c12y1i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;本篇是高性能、高并发系列的第三篇，承接上文&lt;/span&gt;《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484788&amp;amp;idx=1&amp;amp;sn=e2a084694bedf9b148bbcd5570747add&amp;amp;chksm=fcb9822acbce0b3cba63913ff6de1e37c133b878f02035bc816f7f2ec8423d908bd8560d3605&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;读取文件时程序经历了什么&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;读取文件时程序经历了什么&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;》，&lt;span&gt;在讲解了进程、线程以及I/O后，我们来到了高并发中又一关键技术，即I/O多路复用。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在讲解该技术之前，我们需要预习一下文件以及文件描述符。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;什么是文件&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;程序员使用I/O最终都逃不过文件这个概念。&lt;/p&gt;&lt;p&gt;在Linux世界中文件是一个很简单的概念，作为程序员我们只需要将其理解为一个N byte的&lt;strong&gt;序列&lt;/strong&gt;就可以了：&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;b1, b2, b3, b4, ....... bN&lt;/strong&gt;&lt;/em&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;实际上所有的I/O设备都被抽象为了文件这个概念，一切皆文件，Everything is File，磁盘、网络数据、终端，甚至进程间通信工具管道pipe等都被当做文件对待。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.47844228094575797&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0tDTd5HtJx85rducEzeqRG9DFSQQsGiczkqZH322XyKtdBeRebJlvmew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;719&quot;/&gt;&lt;/section&gt;&lt;p&gt;所有的I/O操作也都可以通过文件读写来实现，&lt;strong&gt;这一非常优雅的抽象可以让程序员使用一套接口就能对所有外设I/O操作&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;常用的I/O操作接口一般有以下几类：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;打开文件，open&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;改变读写位置，seek&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;文件读写，read、write&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;关闭文件，close&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;程序员通过这几个接口几乎可以实现所有I/O操作，这就是文件这个概念的强大之处。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;文件描述符&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在上一篇《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484788&amp;amp;idx=1&amp;amp;sn=e2a084694bedf9b148bbcd5570747add&amp;amp;chksm=fcb9822acbce0b3cba63913ff6de1e37c133b878f02035bc816f7f2ec8423d908bd8560d3605&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;读取文件时，程序经历了什么&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;读取文件时，程序经历了什么&lt;/a&gt;》中我们讲到，要想进行I/O读操作，像磁盘数据，我们需要指定一个buff用来装入数据，一般都是这样写的：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;read&lt;/span&gt;(buff);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;但是这里我们忽略了一个关键问题，那就是虽然我们指定了往哪里写数据，但是我们该从哪里读数据呢？&lt;/section&gt;&lt;section&gt;从上一节中我们知道，通过文件这个概念我们能实现几乎所有I/O操作，&lt;strong&gt;因此这里少的一个主角就是文件&lt;/strong&gt;。&lt;/section&gt;&lt;p&gt;那么我们一般都怎样使用文件呢？&lt;/p&gt;&lt;p&gt;如果周末你去比较火的餐厅吃饭应该会有体会，一般周末人气高的餐厅都会排队，然后服务员会给你一个排队序号，通过这个序号服务员就能找到你，这里的好处就是服务员无需记住你是谁、你的名字是什么、来自哪里、喜好是什么、是不是保护环境爱护小动物等等，这里的关键点就是&lt;strong&gt;服务员对你一无所知，但依然可以通过一个号码就能找到你&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;同样的，在Linux世界要想使用文件，我们也需要借助一个号码，根据“&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484768&amp;amp;idx=1&amp;amp;sn=049db350af9e5eea5cf3523ceb83f447&amp;amp;chksm=fcb9823ecbce0b28ca28d021e68c78138cde4a1b86ea7209c0c667d3d544d223d8b2aecbccec&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;弄不懂原则&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;弄不懂原则&lt;/a&gt;”，这个号码就被称为了文件描述符，&lt;strong&gt;file descriptors&lt;/strong&gt;，在Linux世界中鼎鼎大名，其道理和上面那个排队号码一样。&lt;/p&gt;&lt;p&gt;因此，文件描述仅仅就是一个数字而已，但是通过这个数字我们可以操作一个打开的文件，这一点要记住。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.1635434412265757&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0VoQpIAibEsDfwQibJ6AjvtueDkDSYLBAQAWjm8Pbcx2DzWwhvjSRt9Xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;587&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;有了文件描述符，进程可以对文件一无所知&lt;/strong&gt;，比如文件在磁盘的什么位置、加载到内存中又是怎样管理的等等，这些信息统统交由操作系统打理，进程无需关心，操作系统只需要给进程一个文件描述符就足够了。&lt;/p&gt;&lt;p&gt;因此我们来完善上述程序：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; fd = &lt;span class=&quot;code-snippet__keyword&quot;&gt;open&lt;/span&gt;(file_name); &lt;span class=&quot;code-snippet__regexp&quot;&gt;//&lt;/span&gt; 获取文件描述符&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;read&lt;/span&gt;(fd, buff);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;怎么样，是不是非常简单。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;文件描述符太多了怎么办&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;经过了这么多的铺垫，终于要到高性能、高并发这一主题了。&lt;/p&gt;&lt;p&gt;从前几节我们知道，所有I/O操作都可以通过文件样的概念来进行，这当然包括网络通信。&lt;/p&gt;&lt;p&gt;如果你有一个web服务器，当三次握手成功以后，我们会调用accept来获取一个链接，调用该函数我们同样会得到一个文件描述符，通过这个文件描述符就可以处理客户端发送的请求并且把处理结果发送回去。也就是说通过这个描述符我们就可以和客户端进行通信了。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// 通过&lt;span class=&quot;code-snippet__keyword&quot;&gt;accept&lt;/span&gt;获取客户端的文件描述符&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; conn_fd = &lt;span class=&quot;code-snippet__keyword&quot;&gt;accept&lt;/span&gt;(...);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;server的处理逻辑通常是读取客户端请求数据，然后执行某些特定逻辑：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;read&lt;/span&gt;(conn_fd, request_buff) &amp;gt; 0) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    do_something(request_buff);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;是不是非常简单，然而世界终归是复杂的，当然也不是这么简单的。&lt;/p&gt;&lt;p&gt;接下来就是比较复杂的了。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.708&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0Y6IbPK84RcJPC4nicAL1cibqOjK8FtEEprYKJichQAd3AZykrlQjdYrEQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;500&quot;/&gt;&lt;/section&gt;&lt;p&gt;既然我们的主题是高并发，那么&lt;strong&gt;server就不可能只和一个客户端通信&lt;/strong&gt;，而是可能会同时和成千上万个客户端进行通信。&lt;strong&gt;这时你需要处理不再是一个描述符这么简单，而是有可能要处理成千上万个描述符&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;为了不让问题一上来就过于复杂，我们先简单化，假设只同时处理两个客户端的请求。&lt;/p&gt;&lt;p&gt;有的同学可能会说，这还不简单，这样写不就行了：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(read(socket_fd1, buff) &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    do_something();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(read(socket_fd2, buff) &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    do_something();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;在上一篇《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484788&amp;amp;idx=1&amp;amp;sn=e2a084694bedf9b148bbcd5570747add&amp;amp;chksm=fcb9822acbce0b3cba63913ff6de1e37c133b878f02035bc816f7f2ec8423d908bd8560d3605&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;读取文件时，程序都经历了什么&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;读取文件时，程序都经历了什么&lt;/a&gt;》中我们讨论过这是非常典型的阻塞式I/O，如果此时没有数据可读那么进程会被阻塞而暂停运行，这时我们就无法处理第二个请求了，即使第二个请求的数据已经就位，这也就意味着处理某一个客户端时由于进程被阻塞导致剩下的所有其它客户端必须&lt;strong&gt;等待&lt;/strong&gt;，在同时处理几万客户端的server上，这显然是不能容忍的。&lt;/p&gt;&lt;p&gt;聪明的你一定会想到使用多线程，为每个客户端请求开启一个线程，这样一个客户端被阻塞就不会影响到处理其它客户端的线程了，注意，既然是高并发，那么我们要为成千上万个请求开启成千上万个线程吗，大量创建销毁线程会严重影响系统性能。&lt;/p&gt;&lt;p&gt;那么这个问题该怎么解决呢？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这里的关键点在于，我们事先并不知道一个文件描述对应的I/O设备是否是可读的、是否是可写的&lt;/strong&gt;，在外设的不可读或不可写的状态下进行I/O只会导致进程阻塞被暂停运行。&lt;/p&gt;&lt;p&gt;因此要优雅的解决这个问题，就要从其它角度来思考这个问题了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0BJ2icaAx4qQjBVVrIw7VamFqBmxLBRRnJCvxQ3SVVOtkl08xNDRADWw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;不要打电话给我，有需要我会打给你&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;大家生活中肯定会接到过推销电话，而且不止一个，一天下来接上十个八个推销电话你的身体会被掏空的。&lt;/p&gt;&lt;p&gt;这个场景的关键点在于打电话的人并不知道你是不是要买东西，只能来一遍遍问你，因此一种更好的策略是不要让他们打电话给你，记下他们的电话，有需要的话打给他们，这样推销员就不会一遍一遍的来烦你了(虽然现实生活中这并不可能)。&lt;/p&gt;&lt;p&gt;在这个例子中，你，就好比内核，推销者就好比应用程序，电话号码就好比文件描述符，和你用电话沟通就好比I/O。&lt;/p&gt;&lt;p&gt;现在你应该明白了吧，处理多个文件描述符的更好方法其实就存在于推销电话中。&lt;/p&gt;&lt;p&gt;因此相比上一节中我们通过I/O接口&lt;strong&gt;主动&lt;/strong&gt;问内核这些文件描述符对应的外设是不是已经就绪了，一种更好的方法是，我们把这些感兴趣的文件描述符一股脑扔给内核，并霸气的告诉内核：“&lt;strong&gt;我这里有1万个文件描述符，你替我监视着它们，有可以读写的文件描述符时你就告诉我，我好处理&lt;/strong&gt;”。而不是弱弱的问内核：“第一个文件描述可以读写了吗？第二个文件描述符可以读写吗？第三个文件描述符可以读写了吗？。。。”&lt;/p&gt;&lt;p&gt;这样应用程序就&lt;strong&gt;从“繁忙”的主动变为了清闲的被动&lt;/strong&gt;，&lt;strong&gt;反正文件描述可读可写了内核会通知我&lt;/strong&gt;，能偷懒我才不要那么勤奋。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv05kOtE9Se6jRyibLf346NDumLwjBx1chdzV3iayw5k4sTj1yZRibptJCgw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/section&gt;&lt;p&gt;这是一种更加高效的I/O处理机制，&lt;strong&gt;现在我们可以一次处理多路I/O了&lt;/strong&gt;，为这种机制起一个名字吧，再次祭出“&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484768&amp;amp;idx=1&amp;amp;sn=049db350af9e5eea5cf3523ceb83f447&amp;amp;chksm=fcb9823ecbce0b28ca28d021e68c78138cde4a1b86ea7209c0c667d3d544d223d8b2aecbccec&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;弄不懂原则&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;弄不懂原则&lt;/a&gt;”，就叫I/O多路复用吧，这就是 I/O multiplexing。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;I/O多路复用，I/O multiplexing&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;multiplexing一词其实多用于通信领域，为了充分利用通信线路，希望在一个信道中传输多路信号，要想在一个信道中传输多路信号就需要把这多路信号结合为一路，将多路信号组合成一个信号的设备被称为multiplexer，显然接收方接收到这一路组合后的信号后要恢复原先的多路信号，这个设备被称为demultiplexer，如图所示：&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3772032902467685&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8g3rwJPmya3k5TFfEicLibY7eJxAWPJZS6mXnPmJeB3IbwnRcJMBKXg8mn3SaUYL9K2nIAJV61dLYJRav9icp7xMQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;851&quot;/&gt;&lt;/section&gt;&lt;p&gt;回到我们的主题。&lt;/p&gt;&lt;p&gt;所谓I/O多路复用指的是这样一个过程：&lt;/p&gt;&lt;p&gt;1. 我们拿到了一堆文件描述符(不管是网络相关的、还是磁盘文件相关等等，任何文件描述符都可以)&lt;/p&gt;&lt;p&gt;2. 通过调用&lt;strong&gt;某个函数&lt;/strong&gt;告诉内核：“&lt;strong&gt;这个函数你先不要返回，你替我监视着这些描述符，当这堆文件描述符中有可以进行I/O读写操作的时候你再返回&lt;/strong&gt;”&lt;/p&gt;&lt;p&gt;3. 当调用的这个函数返回后我们就能知道哪些文件描述符可以进行I/O操作了。&lt;/p&gt;&lt;p&gt;也就是说&lt;strong&gt;通过I/O多路复用我们可以同时处理多路I/O&lt;/strong&gt;。那么有哪些函数可以用来进行I/O多路复用呢？&lt;/p&gt;&lt;p&gt;在Linux世界中有这样三种机制可以用来进行I/O多路复用：&lt;/p&gt;&lt;p&gt;接下来我们就来介绍一下牛掰的I/O多路复用三剑客。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.429042904290429&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0GepzW6Zr4GgCdQrVwMQvOpUCw6PrJO8ql1MHrqZqpVkNHJypFcVkiaw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;303&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;I/O多路复用三剑客&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;本质上select、poll、epoll都是阻塞式I/O，也就是我们常说的同步I/O，原因在于调用这些I/O多路复用函数时如果任何一个需要监视的文件描述符都不可读或者可写那么进程会被阻塞暂停执行，直到有文件描述符可读或者可写才继续运行。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1，select：初出茅庐&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在select这种I/O多路复用机制下，我们需要把想监控的文件描述集合通过函数参数的形式告诉select，然后select会将这些文件描述符集合&lt;strong&gt;拷贝&lt;/strong&gt;到内核中，我们知道数据拷贝是有性能损耗的，因此为了减少这种数据拷贝带来的性能损耗，Linux内核对集合的大小做了限制，并规定用户监控的文件描述集合不能超过1024个，同时当select返回后&lt;strong&gt;我们仅仅能知道有些文件描述符可以读写了，但是我们不知道是哪一个&lt;/strong&gt;，因此程序员必须再遍历一边找到具体是哪个文件描述符可以读写了。&lt;/p&gt;&lt;p&gt;因此，总结下来select有这样几个特点：&lt;/p&gt;&lt;p&gt;因此我们可以看到，select机制的这些特性在高并发网络服务器动辄几万几十万并发链接的场景下无疑是低效的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5936507936507937&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0jofjqXUFYU9vTFWIbtv5Xlsp3I68iaxWicECgousqLpgLBMia4pauKSVQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;315&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2，poll：小有所成&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;poll和select是非常相似的，poll相对于select的优化仅仅在于解决了文件描述符不能超过1024个的限制，select和poll都会随着监控的文件描述数量增加而性能下降，因此不适合高并发场景。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3，epoll：独步天下&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在select面临的三个问题中，文件描述数量限制已经在poll中解决了，剩下的两个问题呢？&lt;/p&gt;&lt;p&gt;针对拷贝问题，epoll使用的策略是&lt;strong&gt;各个击破&lt;/strong&gt;与&lt;strong&gt;共享内存&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;实际上文件描述符集合的变化频率比较低，select和poll频繁的拷贝整个集合，内核都快被烦死了，epoll通过引入epoll_ctl很体贴的做到了只操作那些有变化的文件描述符，同时epoll和内核还成为了好朋友，共享了同一块内存，这块内存中保存的就是那些已经可读或者可写的的文件描述符集合，这样就减少了内核和程序的拷贝开销。&lt;/p&gt;&lt;p&gt;针对需要遍历文件描述符才能知道哪个可读可写这一问题，epoll使用的策略是“当小弟”。&lt;/p&gt;&lt;p&gt;在select和poll机制下，&lt;strong&gt;进程要亲自下场去各个文件描述符上等待&lt;/strong&gt;，任何一个文件描述可读或者可写就唤醒进程，但是进程被唤醒后也是一脸懵逼并不知道到底是哪个文件描述符可读或可写，还要再从头到尾检查一遍。&lt;/p&gt;&lt;p&gt;但epoll就懂事多了，主动找到进程要当小弟替大哥出头。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.494&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8g3rwJPmya3gOphIJWtUSc9iaQS6cGTv0ShdV4HDxVwG3K0hMfbqlib853kYuGRTuxDASibiaMFj81et8eqTNtm8qg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;500&quot;/&gt;&lt;/section&gt;&lt;p&gt;在这种机制下，进程不需要亲自下场了，进程只要等待在epoll上，epoll代替进程去各个文件描述符上等待，当哪个文件描述符可读或者可写的时候就告诉epoll，epoll用小本本认真记录下来然后唤醒大哥：“进程大哥，快醒醒，你要处理的文件描述符我都记下来了”，这样进程被唤醒后就无需自己从头到尾检查一遍，因为epoll小弟都已经记下来了。&lt;/p&gt;&lt;p&gt;因此我们可以看到，在epoll这种机制下，实际上利用的就是“不要打电话给我，有需要我会打给你”这种策略，进程不需要一遍一遍麻烦的问各个文件描述符，而是翻身做主人了，“你们这些文件描述符有哪个可读或者可写了主动报上来”，这种机制实际上就是大名鼎鼎的事件驱动，Event-driven，这也是我们下一篇的主题。&lt;/p&gt;&lt;p&gt;实际上在Linux平台，&lt;strong&gt;epoll基本上就是高并发的代名词&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;基于一切皆文件的设计哲学，I/O也可以通过文件的形式实现，高并发场景下要与多个文件交互，这就离不开高效的I/O多路复用技术，本文我们详细讲解了什么是I/O多路复用以及使用方法，这其中以epoll为代表的I/O多路复用(基于事件驱动)技术使用非常广泛，实际上你会发现但凡涉及到高并发、高性能的场景基本上都能见到事件驱动的编程方法，当然这也是下一篇我们要重点讲解的主题，敬请期待。&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__0&quot;&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2934&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2935&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2936&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2937&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2938&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2939&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2940&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2941&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2942&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2943&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;伟&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2944&quot;&gt;伟&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2945&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2946&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;分&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2947&quot;&gt;分&lt;/span&gt;&lt;span data-raw-text=&quot;割&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2948&quot;&gt;割&lt;/span&gt;&lt;span data-raw-text=&quot;线&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2949&quot;&gt;线&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2950&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2951&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2952&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2953&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2954&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2955&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2956&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2957&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2958&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2959&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2960&quot;&gt;-&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__1&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__2&quot;&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2961&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;H&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2962&quot;&gt;H&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2963&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2964&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2965&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2966&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot;(&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2967&quot;&gt;(&lt;/span&gt;&lt;span data-raw-text=&quot;p&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2968&quot;&gt;p&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2969&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;p&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2970&quot;&gt;p&lt;/span&gt;&lt;span data-raw-text=&quot;f&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2971&quot;&gt;f&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2972&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2973&quot;&gt;m&lt;/span&gt;&lt;span data-raw-text=&quot;i&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2974&quot;&gt;i&lt;/span&gt;&lt;span data-raw-text=&quot;l&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2975&quot;&gt;l&lt;/span&gt;&lt;span data-raw-text=&quot;y&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2976&quot;&gt;y&lt;/span&gt;&lt;span data-raw-text=&quot;)&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2977&quot;&gt;)&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;98&quot; data-index=&quot;2978&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;由&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2979&quot;&gt;由&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2980&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;群&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2981&quot;&gt;群&lt;/span&gt;&lt;span data-raw-text=&quot;靠&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2982&quot;&gt;靠&lt;/span&gt;&lt;span data-raw-text=&quot;谱&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2983&quot;&gt;谱&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2984&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;人&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2985&quot;&gt;人&lt;/span&gt;&lt;span data-raw-text=&quot;建&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2986&quot;&gt;建&lt;/span&gt;&lt;span data-raw-text=&quot;立&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2987&quot;&gt;立&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2988&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;愿&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2989&quot;&gt;愿&lt;/span&gt;&lt;span data-raw-text=&quot;为&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2990&quot;&gt;为&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2991&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;H&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2992&quot;&gt;H&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2993&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2994&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;r&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2995&quot;&gt;r&lt;/span&gt;&lt;span data-raw-text=&quot;带&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2996&quot;&gt;带&lt;/span&gt;&lt;span data-raw-text=&quot;来&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2997&quot;&gt;来&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2998&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;些&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2999&quot;&gt;些&lt;/span&gt;&lt;span data-raw-text=&quot;值&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3000&quot;&gt;值&lt;/span&gt;&lt;span data-raw-text=&quot;得&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3001&quot;&gt;得&lt;/span&gt;&lt;span data-raw-text=&quot;细&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3002&quot;&gt;细&lt;/span&gt;&lt;span data-raw-text=&quot;细&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3003&quot;&gt;细&lt;/span&gt;&lt;span data-raw-text=&quot;品&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3004&quot;&gt;品&lt;/span&gt;&lt;span data-raw-text=&quot;味&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3005&quot;&gt;味&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3006&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;精&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3007&quot;&gt;精&lt;/span&gt;&lt;span data-raw-text=&quot;神&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3008&quot;&gt;神&lt;/span&gt;&lt;span data-raw-text=&quot;食&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3009&quot;&gt;食&lt;/span&gt;&lt;span data-raw-text=&quot;粮&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3010&quot;&gt;粮&lt;/span&gt;&lt;span data-raw-text=&quot;！&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3011&quot;&gt;！&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__3&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__4&quot;&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3012&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3013&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3014&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot;只&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3015&quot;&gt;只&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3016&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;原&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3017&quot;&gt;原&lt;/span&gt;&lt;span data-raw-text=&quot;创&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3018&quot;&gt;创&lt;/span&gt;&lt;span data-raw-text=&quot;或&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3019&quot;&gt;或&lt;/span&gt;&lt;span data-raw-text=&quot;授&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3020&quot;&gt;授&lt;/span&gt;&lt;span data-raw-text=&quot;权&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3021&quot;&gt;权&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3022&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;表&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3023&quot;&gt;表&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3024&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3025&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3026&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3027&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;不&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3028&quot;&gt;不&lt;/span&gt;&lt;span data-raw-text=&quot;转&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3029&quot;&gt;转&lt;/span&gt;&lt;span data-raw-text=&quot;载&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3030&quot;&gt;载&lt;/span&gt;&lt;span data-raw-text=&quot;网&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3031&quot;&gt;网&lt;/span&gt;&lt;span data-raw-text=&quot;上&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3032&quot;&gt;上&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3033&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3034&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3035&quot;&gt;章&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__5&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__6&quot;&gt;&lt;span data-raw-text=&quot;所&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3036&quot;&gt;所&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3037&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3038&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3039&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3040&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3041&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;均&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3042&quot;&gt;均&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3043&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;找&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3044&quot;&gt;找&lt;/span&gt;&lt;span data-raw-text=&quot;到&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3045&quot;&gt;到&lt;/span&gt;&lt;span data-raw-text=&quot;原&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3046&quot;&gt;原&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3047&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;者&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3048&quot;&gt;者&lt;/span&gt;&lt;span data-raw-text=&quot;进&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3049&quot;&gt;进&lt;/span&gt;&lt;span data-raw-text=&quot;行&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3050&quot;&gt;行&lt;/span&gt;&lt;span data-raw-text=&quot;沟&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3051&quot;&gt;沟&lt;/span&gt;&lt;span data-raw-text=&quot;通&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3052&quot;&gt;通&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3053&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__7&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__8&quot;&gt;&lt;span&gt;&lt;span data-raw-text=&quot;也&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3054&quot;&gt;也&lt;/span&gt;&lt;span data-raw-text=&quot;希&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3055&quot;&gt;希&lt;/span&gt;&lt;span data-raw-text=&quot;望&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3056&quot;&gt;望&lt;/span&gt;&lt;span data-raw-text=&quot;各&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3057&quot;&gt;各&lt;/span&gt;&lt;span data-raw-text=&quot;位&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3058&quot;&gt;位&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3059&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3060&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;打&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3061&quot;&gt;打&lt;/span&gt;&lt;span data-raw-text=&quot;赏&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3062&quot;&gt;赏&lt;/span&gt;&lt;span data-raw-text=&quot;（&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3063&quot;&gt;（&lt;/span&gt;&lt;span data-raw-text=&quot;算&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3064&quot;&gt;算&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3065&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3066&quot;&gt;稿&lt;/span&gt;&lt;span data-raw-text=&quot;费&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3067&quot;&gt;费&lt;/span&gt;&lt;span data-raw-text=&quot;给&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3068&quot;&gt;给&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3069&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3070&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3071&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;者&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3072&quot;&gt;者&lt;/span&gt;&lt;span data-raw-text=&quot;）&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3073&quot;&gt;）&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3074&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3075&quot;&gt;更&lt;/span&gt;&lt;span data-raw-text=&quot;希&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3076&quot;&gt;希&lt;/span&gt;&lt;span data-raw-text=&quot;望&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3077&quot;&gt;望&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3078&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;家&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3079&quot;&gt;家&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3080&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3081&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;投&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3082&quot;&gt;投&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;102&quot; data-index=&quot;3083&quot;&gt;稿&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__9&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__10&quot;&gt;&lt;span data-raw-text=&quot;投&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3085&quot;&gt;投&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3086&quot;&gt;稿&lt;/span&gt;&lt;span data-raw-text=&quot;请&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3087&quot;&gt;请&lt;/span&gt;&lt;span data-raw-text=&quot;联&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3088&quot;&gt;联&lt;/span&gt;&lt;span data-raw-text=&quot;系&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3089&quot;&gt;系&lt;/span&gt;&lt;span data-raw-text=&quot;：&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3090&quot;&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__11&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__12&quot;&gt;&lt;span data-raw-text=&quot;s&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3091&quot;&gt;s&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3092&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3093&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;n&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3094&quot;&gt;n&lt;/span&gt;&lt;span data-raw-text=&quot;z&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3095&quot;&gt;z&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3096&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3097&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;1&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3098&quot;&gt;1&lt;/span&gt;&lt;span data-raw-text=&quot;6&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3099&quot;&gt;6&lt;/span&gt;&lt;span data-raw-text=&quot;3&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3100&quot;&gt;3&lt;/span&gt;&lt;span data-raw-text=&quot;@&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3101&quot;&gt;@&lt;/span&gt;&lt;span data-raw-text=&quot;g&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3102&quot;&gt;g&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3103&quot;&gt;m&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3104&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;i&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3105&quot;&gt;i&lt;/span&gt;&lt;span data-raw-text=&quot;l&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3106&quot;&gt;l&lt;/span&gt;&lt;span data-raw-text=&quot;.&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3107&quot;&gt;.&lt;/span&gt;&lt;span data-raw-text=&quot;c&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3108&quot;&gt;c&lt;/span&gt;&lt;span data-raw-text=&quot;o&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3109&quot;&gt;o&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3110&quot;&gt;m&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__13&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__14&quot;&gt;&lt;span data-raw-text=&quot;本&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3111&quot;&gt;本&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3112&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;由&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3113&quot;&gt;由&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3114&quot;&gt;  &lt;span&gt;码农的荒岛求生&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3118&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;授&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3119&quot;&gt;授&lt;/span&gt;&lt;span data-raw-text=&quot;权&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3120&quot;&gt;权&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3121&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3122&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3123&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3124&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3125&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3126&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;布&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3127&quot;&gt;布&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3128&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;转&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3129&quot;&gt;转&lt;/span&gt;&lt;span data-raw-text=&quot;载&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3130&quot;&gt;载&lt;/span&gt;&lt;span data-raw-text=&quot;请&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3131&quot;&gt;请&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3132&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;明&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3133&quot;&gt;明&lt;/span&gt;&lt;span data-raw-text=&quot;本&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3134&quot;&gt;本&lt;/span&gt;&lt;span data-raw-text=&quot;来&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3135&quot;&gt;来&lt;/span&gt;&lt;span data-raw-text=&quot;源&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3136&quot;&gt;源&lt;/span&gt;&lt;span data-raw-text=&quot;信&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3137&quot;&gt;信&lt;/span&gt;&lt;span data-raw-text=&quot;息&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3138&quot;&gt;息&lt;/span&gt;&lt;span data-raw-text=&quot;和&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3139&quot;&gt;和&lt;/span&gt;&lt;span data-raw-text=&quot;以&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3140&quot;&gt;以&lt;/span&gt;&lt;span data-raw-text=&quot;下&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3141&quot;&gt;下&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3142&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;二&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3143&quot;&gt;二&lt;/span&gt;&lt;span data-raw-text=&quot;维&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3144&quot;&gt;维&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3145&quot;&gt;码&lt;/span&gt;&lt;span data-raw-text=&quot;（&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3146&quot;&gt;（&lt;/span&gt;&lt;span data-raw-text=&quot;长&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3147&quot;&gt;长&lt;/span&gt;&lt;span data-raw-text=&quot;按&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3148&quot;&gt;按&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3149&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;识&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3150&quot;&gt;识&lt;/span&gt;&lt;span data-raw-text=&quot;别&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3151&quot;&gt;别&lt;/span&gt;&lt;span data-raw-text=&quot;二&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3152&quot;&gt;二&lt;/span&gt;&lt;span data-raw-text=&quot;维&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3153&quot;&gt;维&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3154&quot;&gt;码&lt;/span&gt;&lt;span data-raw-text=&quot;关&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3155&quot;&gt;关&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3156&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;）&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3157&quot;&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__15&quot;&gt;&lt;span&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;other&quot; data-w=&quot;258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/LHDiahSVnXhunbEtuowcI7kF5kmUaeTrszibibQ3st6OU8hy2CoIotHHLxicicibyF1qkNI7HibXYHXGN6hRby4ZyjR6A/640?wx_fmt=other&quot;/&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ec46444fd145e74df6de3c00848d746c</guid>
<title>手撸卷积神经网络之手写数字识别 (Java)</title>
<link>https://toutiao.io/k/o6s132j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;h1&gt;&lt;a id=&quot;user-content-digit-recognition-cnn-and-ann-using-mnist-with-gui&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#digit-recognition-cnn-and-ann-using-mnist-with-gui&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI&lt;/h1&gt;
&lt;p&gt;Training and testing using MNIST dataset (60000train set,1000test set) with 0.5% error (some drawings are out of 28*28, some drawings only half of them are scanned, or wrong labeling and so on)&lt;br/&gt;
There are some MNIST datasets in internet, you could download yourself or download from these links:&lt;br/&gt;
CSV: &lt;a href=&quot;https://pjreddie.com/projects/mnist-in-csv/&quot; rel=&quot;nofollow&quot;&gt;https://pjreddie.com/projects/mnist-in-csv/&lt;/a&gt;&lt;br/&gt;
TXT:&lt;a href=&quot;https://drive.google.com/drive/folders/10MfF2F5M40NxEFLSpaHWCMo4y8yEMivI&quot; rel=&quot;nofollow&quot;&gt;https://drive.google.com/drive/folders/10MfF2F5M40NxEFLSpaHWCMo4y8yEMivI&lt;/a&gt;&lt;br/&gt;
After download, move them to &quot;/dataset&quot;, change the invoking method in Datainfo.java constructor according to your dataset format, in my case, I use the txt one.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;trainSets = ReadFile.readFromSingleCsv(&quot;mnist_train.csv&quot;);
trainSets = ReadFile.readFromSingleTxt(&quot;mnist_digits_train.txt&quot;);
trainSets = ReadFile.readFromSingle???(&quot;mnist_digits_train.???&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This program is based on Single layer Neural Network with 10 neurons using Softmax as output in both ANN and CNN mode.&lt;/p&gt;
&lt;h1&gt;&lt;a id=&quot;user-content-drawing-with-cnn-model&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#drawing-with-cnn-model&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Drawing with CNN Model&lt;/h1&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/blob/master/imagesUpdated/MnistCNNDrawing.gif&quot;&gt;&lt;img src=&quot;https://github.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/raw/master/imagesUpdated/MnistCNNDrawing.gif&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id=&quot;user-content-ann-accuray&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#ann-accuray&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;ANN accuray&lt;/h1&gt;
&lt;p&gt;Random try--training only 10+ seconds(3-5 epoches), test set 92.61%, train set 93.06% (without using back propagation and keep best weights)
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/ANN3and5epochAccuracy.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/ANN3and5epochAccuracy.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id=&quot;user-content-cnn-accuray---train-7-mins-to-100&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#cnn-accuray---train-7-mins-to-100&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;CNN accuray-- train 7 mins to 100%&lt;/h1&gt;
&lt;p&gt;Training with 16 random designed filters without using back propagation and keep best weights, around 35 epoches is enough to reach 99% acc for train set, but it need more time to reach 100%, I randomly try like below gif, it takes 285 epoches to reach 100% acc, and too
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/blob/master/imagesUpdated/MnistCNN100Acc.gif&quot;&gt;&lt;img src=&quot;https://github.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/raw/master/imagesUpdated/MnistCNN100Acc.gif&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id=&quot;user-content-the-changing-of-weights&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#the-changing-of-weights&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;The changing of weights&lt;/h1&gt;
&lt;p&gt;Following picture describe how weights change when it has only 2,5,10,20,30.....50 data sets respectively to be trained&lt;br/&gt;
Blue=positive, White=0, Red=negative, you could realize how weights work especially obviously in the 4th row and 2nd column example when the dataset only includes number &quot;1&quot; and &quot;4&quot;, you could also see the difference between ANN and CNNs&#x27; weights in the last row&#x27;s example
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/LessThan50DatasetsWeightsChanges.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/LessThan50DatasetsWeightsChanges.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;
Here is how weights change between 1st and 5th epoches for ANN
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/LR0.05Epoch1and5Difference.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/LR0.05Epoch1and5Difference.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id=&quot;user-content-false-prediction-overfitting&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#false-prediction-overfitting&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;False prediction (Overfitting)&lt;/h1&gt;
&lt;p&gt;I made a function to show random false predictions of a selected number, try to use it after you try the model, and you will find out why the accuracy of a good model base on MNIST dataset should not be more than 99.5% as I mentioned in beginning, unless you accept wrong labeling the numbers(some are even not looking like numbers),
as you notice neuron for number &quot;8&quot; has a large loss all the time, so I will show you some of the false prediction about &quot;8&quot;, also check how it influence &quot;9&quot;&#x27;s prediction by overfitting
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/false8.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/false8.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;
Lets show a bit random numbers&#x27; false examples of train set(60000 data sets)
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/randomFalse.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/timmmGZ/Digit-Recognition-CNN-and-ANN-using-Mnist-with-GUI/master/images/randomFalse.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;
      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1ec9fd277ff36c74945431455339462c</guid>
<title>寒门难出贵子，我当程序员让爸妈在老家长脸了</title>
<link>https://toutiao.io/k/cdq2vu4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;全文7千字，预计耗时17分钟，手机充好电&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写公众号两个半月了，一直忙着积累技术、输出技术文章，经读者朋友们的提醒才发现似乎还没有好好介绍过自己，那就趁着2020年的尾声好好复盘一次，也算是给自己每个成长阶段一个交代吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一名程序员，没有过多且复杂的过往，兜兜转转的经历都是围绕着&lt;strong&gt;编程&lt;/strong&gt;这条主线，我想从事这一行业的朋友看完后会有很多相同的感受。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;过去不过去，未来不会来，看清自己才能走的更远！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;走进编程，初识 C 语言&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的老家是在一个十八线县城下的农村，还是贫困县，都说贫困县贫困县，贫困人看不到未来的天。出生、成长在这样的地方，初中高中阶段不是说喜不喜欢编程，而是根本没有接触编程的条件。很多亲戚夸我读书读的好，考上了大学，可没有人知道，那个时候读书是我眼睛里看得到的唯一一条路，我能怎么办呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本科也不是特别好的大学，渣渣本罢了。来到大学后学的第一门语言是 C，使用的教材是谭浩强教授编写的，这本书在我读书时有多火呢，如果非要有个比喻，那就如同现在奶茶界的茶颜悦色。至于使用时的效果如何，那，还是不细细说了，懂的人自然懂（害），有兴趣的可以在留言区讨论，期待看到你们饱含文采的年少趣事。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/RXvHpViaz3EoYOJAfcty2EMiad21mCPc0DXico66g2icYPR8KpvohOm8yHl5KibuHn0kRS9e9ba5wxVfo7onCv1bRLQ/640?wx_fmt=jpeg&quot; data-cropx1=&quot;46&quot; data-cropx2=&quot;256&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;300&quot; data-ratio=&quot;1.4285714285714286&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/RXvHpViaz3EoYOJAfcty2EMiad21mCPc0Dib5b5SXII8YS066E17MPU4fxLwAyiatAlUtJmIG0LhCMy3IblqaJWOiaQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;210&quot;/&gt;&lt;figcaption&gt;经典教材&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;铛铛铛，手持宝书，我的码农生涯也就徐徐拉开帷幕。大部分人学习这本书应该是为了考过计算机二级，毫不脱俗的我当然也不会是那个例外（我怎么就不能成为码农里面清新还脱俗的那个呢，流下不争气的眼泪）。那我到底有没有编程天赋呢？想什么呢，我总不能自己夸自己骨骼惊奇、天赋异禀吧。不过，嘿嘿，我的C语言老师倒说我有那么一点点资质呢（昂起骄傲的小下巴）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;空余时间大家都在打游戏的时候，我拿着我的联想破电脑，按照教材一个字母一个字母对着敲（你们是不是也干过）。当黑色的框框上出现编译错误时，你知道那种心情吧，天啦噜我是对着书敲的啊，为什么会报错，是老天对我不公？是因为我长的丑？还是天降大任先劳其筋骨？原来是少写了一个分号，想太多。凭借我对编程的执着，期末考试 C 语言考了98分（满分100），为什么记这么清楚，因为老师当着全班同学面夸我了，其他同学都担心挂科而我考了第一名。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;从计算机二级到四级，一路升级打怪&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;计算机二级是理工科同学必考的科目，学校还拿这个当做毕业的条件之一。作为被 C 语言老师认证过的编程小王子，我当时暗暗立下了一个目标：这个考试必须要拿下，并且是一次性拿下，多考几次很丢脸。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;计算机二级是有笔试和上机编程，我从书店买了一本五年高考三年模拟，好像买错了，换了一本历年真题（笑）。从高考过来的，刷题我行啊，就这样轻轻松松过了笔试。上级编程怎么练习的，我把 leetcode都刷完了，嘿哈开玩笑的，当时没有 leetcode，记得当时买书附带有个光盘照着上面练就完事了，不出意外果然一次性通过了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当大多数人止步计算机二级的时候，我在想：考过这个就很牛逼了？通过网上一顿查，原来还有计算机三级、计算机四级，四级最高。不行，我要当最靓的仔，直接考四级吧，一步到达巅峰。大家应该能猜到结果了，被老师认证过的编程小王子，一次性考过四级自然不在话下。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoYOJAfcty2EMiad21mCPc0DG1c7yQTqVUWqOic5vlB0SdrPK9jic5QktrRCSmiaNx1wzibBIfSuuJt1EQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;300&quot;/&gt;&lt;figcaption&gt;计算机四级证书&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就这样，我的大一编程之路是在考试。实事证明我当时还是太年轻了，计算机二级和四级并没有什么卵用，这不还躺着吃灰呢。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;原来 Java 这么好玩&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习完C 语言大部分的人接着就会去学习 C++，在当时我以为 C++ 就是比 C 多了两个+号，应该就是增强版而已，C 语言我都已经快考满分了，还学这个干嘛，这不是浪费编程小王子的时间么（没经过社会的毒打）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正在徘徊之际，学院有个创新团队正在招新，这个团队做的事情我当时不是太懂，只知道里面有很多编程大牛，优秀的人都想加入。但是要想进入这个团队，必须得通过一项认证考试，英文缩写叫：OCJP(Oracle Certified Java Programmer)，这个认证是 Oracle 官方全球通用的，考试题目全英文，考试费用好像是两三百刀，折合人民币一千多块钱。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我心里暗暗窃喜：又是考试，问题不大。回想起那段学习的日子，真的很幸福，白天上专业课，晚上找个小教室，创新团队的学长学姐会给我们培训讲课。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;几个月的时间，我把 Java 的大部分特性都学完了：面向对象基本特征，封装、继承、多态，访问控制符，基本数据类型、引用类型，异常，泛型，序列化，IO等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当时学那些东西就是为了通过 OCJP 考试，结果大家又猜到了，一举拿下认证，顺利进入创新团队学习。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6466666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoYOJAfcty2EMiad21mCPc0DYhkpdFicbFdsRr2mSUHicOoj1HYNu8fibkiaUx6Libd9GhfpYWVSqAAWJNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;300&quot;/&gt;&lt;figcaption&gt;OCJP 证书&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在回想起来，我现在的 Java 基础就是当时为了准备考试学习的，这个基础就是大家经常说的 JavaSE，很庆幸我、没有走歪路。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;跟着马士兵老师做项目&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要知道进入创新团队之前我的编程之路都是在不断考试，这种喜悦很短暂，拿到证扔在一旁索然无味，简单来说就是没有成就感。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来到这里一段时间，我发现大家做的项目都是 xxx 管理系统，还带界面的，要知道一直在黑窗口运行程序的人看到能展现界面的程序是多么兴奋，我顿时来劲了，我我我要快速加入项目组。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是我只有 JavaSE 的基础，问了学姐之后，学姐给我甩了一堆马士兵老师的视频和资料，是的，就是网上流传的马士兵老师手摸（把）手教程。网上博客标题经常会看到：手把手教你学习……，这个鼻祖就是马士兵老师了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/RXvHpViaz3EoYOJAfcty2EMiad21mCPc0D518rtJzxfe6D2ReKJqRFqdSUkTr8WanAjnlOlkTrI2bC3SQicCwia9Qw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;figcaption&gt;马老师手把手教程&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;马士兵讲课真他娘的幽默，看学习视频比玩游戏还刺激，经常晚上看到眼皮睁不开了才去睡。你要问我学啥技术这么痴迷，是 JSP，你没有听错就是那个 JSP，当时用这个技术实现了系统的登录注册模块，相信很多人都是从这个开始的。技术发展非常快，随着前后端分离、架构服务化，这种老掉牙的技术只能进历史博物馆了，如果网上还有博客推荐你学习 JSP，你大可关掉页面，这是在害你。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习了 JSP，后面继续学习了 MVC，这是我学习的第一个设计模式，虽然技术日新月异，但是 MVC 经典的设计模式思想还是被大多数框架采用了，比如大名鼎鼎的 Spring 全家桶。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java的设计人员应该很牛逼对吧，但是他们也走过弯路，特别是在 JavaEE（Java 企业级开发）中，设计出了一套非常难用的框架或者标准，你想写个 Java Web 的 Hello Word 可能光配置文件要搞几天，于是一大波有追求的开发人员看不下去了，纷纷揭竿而起开发了一堆著名的框架，比如赫赫有名的 Struts 框架，用过这个框架的人应该都知道，用来写 JavaWeb 实在是太舒适了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当时JavaWeb有个组合叫 SSH，即：struts+spring+hibernate三剑客，struts 主要负责 MVC 的 V 和 C。这个组合有多火呢，就跟当年 SHE 三姐妹 一样火，当时流传着：学好 SSH 框架，找工作不会怕。由于 struts 框架天天曝严重漏洞，或者是因为 spring 太强了，一代枭雄逐渐落幕，如果网上还有人推荐你学这个，答应我骂他两句。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;放到今天来看，Java 企业级开发经历了多轮技术迭代，但是本质没有变，抓着根了再新的框架也能触类旁通。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，回到我在创新团队的那段时间，学完马士兵的视频后我做了几个 xxx 管理系统，在当时也都成功上线了。我经常指着某个系统跟学妹吹牛说：你看这个系统多牛逼，这里面的 xxx 模块是我开发的，学妹一脸崇拜的样子：学长你真牛！&lt;span&gt;然&lt;/span&gt;&lt;span&gt;后就没有然后，你们想多了&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;也想考个研究生&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在创新团队做项目的时间过的飞快，这也是我技术进步最快的一段时间，好像都是古老的技术，嘿哈~ 但是我掌握了学习一门新技术的方法，这个是受益终生的，技术日新月异，但是学习的方法论是不会变的。接受新东西，学习新技能是程序员们必备的素质，大家在平时要对新技术保持敏感，多学一点总不会错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大三下的时候，我突然发现身边的人都在准备考研究生或者考公务员，我又彷徨了，人生的路何去何从？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在咨询了几个学长学姐后我毅然决定了：那就考研吧。并且我做了一个勇敢的选择：要来就来一票大的，我要考华科的研究生。我现在也不知道当时哪来的信心，对了忘了交代我本科是双非的，对于一个双非的学生考研直接选择985高校，勇气可佳啊。我猜想可能是编程给我的勇气和自信吧。至于为什么是华科，理由很简单：因为我是湖北的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.435&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoYOJAfcty2EMiad21mCPc0DoHpibfoOuQqDVHWiaLVHG5wLmCyLqgeVt3LjTHYgr1zbgUTEIU9sHL5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;figcaption&gt;录取通知书&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;考研的过程非常艰辛，几度都想放弃，每次想放弃的时候都会找几篇鸡汤帖子鼓励自己，一定要坚持。凭借自己的努力和坚持，最终还是如愿了。虽然现在说这个结果语气是轻飘飘的，实际上过程很困难，这个以后再找个时间详细展开。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;去深圳流浪吧&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;过完年之后，很多同学都在准备春招，而我在顺利搞完研究生复试完后，突然觉得生活很枯燥，一个人经历过捶打突然又没有目标了，那种空虚感你们应该能感受到吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;”我们去深圳看看吧“，一位同学提议。说走就走，我们花了三天时间简单准备。因为没有钱我们三个人买了绿皮火车票，硬座，我记得是九十多块钱，给家里打了一个电话后就踏上了南下的路。摇摇晃晃十几个小时终于到了，下了火车我记得非常清楚那是罗湖火车站，并且一个巨大的广告牌写着：来了就是深圳人。后面事实证明深圳还是不欢迎我的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/RXvHpViaz3EoYOJAfcty2EMiad21mCPc0DZhuv0qF590lWk6UrG43nXC5dcfyehh8wickP0AFiaBREEupYuJLK4yKg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;figcaption&gt;深圳罗湖火车站&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一个同学的亲戚在宝安区，就这样我们倒腾了几趟公交车终于到了宝安区，简单吃个饭之后打算先安顿下来。找了中介带我们看房子，看了几间房子之后我们发现，深圳的房子居然都没有家具，里面空空如也，在深圳租过房的人都知道。我们每个人也就带着千把块钱，还要购置家具，太难了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;中介问我们几个人住，我们谎称两个人，另外一个同学不住这里。合同签好了，中介要求押一付三，也就是一次要付四个月的房租，这又一次难住了我们，跟他好说歹说，终于靠一副无辜的学生脸让他答应先押一付一了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后我们三个大男人挤在了一间屋子里，没有家具怎么办？当然没有钱买，简单买了几床被子、几个洗脸盆和拖把，把被子铺在地上将就睡了。好在初春的深圳已经不是很冷了，对于几个血气方刚的年轻人问题不大。现在回忆起那场面确实有点心酸，异乡打工人真难。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安顿下来后，每天吃饭加房租花销很大，所以我们需要赶紧找工作。在网上一顿搜索，我们决定去罗湖人才市场碰碰运气。我有Java 开发经验所以准备找一份编程的工作，另外两个同学没啥技能只能找一些学生辅导的工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比较搞笑的是我两个同学跟用人单位接触后，用人单位说带他们去看看环境，然后把他们拉上面包车了。他们走了一会我收到了一条短信：我坐的车牌号是粤B xxxxx，如果晚上之前还没回来帮我们报警。看到这条短信我是既紧张又觉得好笑，怎么跟电视剧演的一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同学走后，我一个人走向 IT职业相关的招聘单位，用人单位没有与我过多交谈，让我留下简历就可以了。投了十几份简历后有点饿了就坐公交车回租住的地方了，回了后给同学打了电话，他们确认安全，我紧张的心也就放下了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同学去的地方是一个比较好的培训学校，但是由于经验不足都面试失败了。而我呢，投了十几份简历等了几天依旧没有消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经历了几天的痛打，同学们都打退堂鼓了，他们家里打电话说哪个舅舅哪个亲戚可以安排到 xxx 局工作，自然他们撑不住买了车票准备回去。而我呢？我家里是一个十八线的农村，家境一般也无背景，我能怎么办。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两个同学坐火车回家了，我没有去送他们，因为我看不起他们，才几天时间，就遇到了一点挫折就纷纷退缩了，太懦弱了。但说实话我也很脆弱，也希望有依靠，心里不是滋味，为什么同学们的爸妈都可以帮他们搞到 xxx 局，却没人帮我，当天晚上我给我爸打了电话说：为什么你不管我，我同学都回家进 xxx 局了。老爸沉默了，没有反驳我，只说了一句：你要是撑不住就回来。这一晚上，我一个大男人在深圳哭了，哭的撕心裂肺的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来几天我给以前的学长打了几个电话，从他们那里我才知道可以在网上投简历，请原谅我这么土，因为我之前根本没想着要去找工作，我一直以为找工作需要去人才市场，不然我也不会匆匆跑到深圳来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我去楼下找了一间网吧，打开智联招聘网站，刷刷刷海投了几十份简历。网上的效率真高，当天下午我就接到面试电话，预约第二天去现场面试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试很顺利，过了一天就给我发 offer 了，工资真是低的可怜，我还是接了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoYOJAfcty2EMiad21mCPc0DCHAKQuGg9zxt74u30YaNK6NaFAX7Yq4b80lZTIzMicUIOQItzDjfiaaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;figcaption&gt;第一份 offer&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;突然厌倦编程，考个公务员吧&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;租住的地方在宝安区，工作的地方在南山区，每天光上下班通勤就花费了几个小时。到了下班时间我发现同事们居然都不回家，还喊我去吃饭，这时我明白了默认晚上要加班，请原谅我当年不懂 IT 行业的规矩，以为跟电视里一样到点就下班。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这期间我作为一个试用期员工，对业务也不熟悉，技术又菜，每天晚上只好坐在工位学习。加上导师开始催毕业论文了，我一般就晚上在公司写，周末就去网吧写。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样的日子也就持续了两周，我开始怀疑人生了，我适合编程吗？后面读完研也是这样的生活吗？太苦了，每天晚上加班到很晚，晚上回到租的房子没有一个人，还得睡地上，第二天早上还要去挤公交。一周下来除了跟同事说几句话我总共还没说过超10句话，这个城市太陌生了，太冷漠了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一天晚上我在想，同学们都去 xxx 局了，我也可以考公务员，真羡慕那种朝九晚五的生活，在县城里待着买房压力也不大，跟家里挨着还近，还能约朋友周末吃个饭喝个酒。想到这里我又暗暗下了决定：离职，回家准备公务员考试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;去公司跟领导提了想法，由于是试用期也没什么要交接的，一天就办好了流程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在离开深圳前我还去看了大海，去了大小梅沙，走在海滨栈道上，我的心情很愉悦，感觉生活又燃起了希望。处理好租住的房子，扔掉被子和盆，我买了张绿皮火车票回到学校了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我爸知道我的想法后，几度劝我长点志气，眼光放长远点，一辈子窝在一个小县城有什么出息。华科是985名校多少人努力都没考上，你要是这样放弃掉以后会后悔的。在我耳边唠叨多了，我也在想是不是我真的没出息？其实我是厌倦那种生活，想安安稳稳过着朝九晚五正常人的生活而已，空余时间可以干自己喜欢做的事情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是已经报名了，填的岗位是老家县城的一个职位，那就去裸考吧。说是裸考，之前我也是了解过，考试主要是行测和申论，行测就是选择题，申论就是阅读理解写作文。考完之后我本来已经放弃了，但是笔试居然通过了，岗位招一个人，按照1：3的人进入面试，我刚好排在第三名。可能这就是命吧，哎~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我考上没有？显然没有，不然也不会在这码字（嘿哈）。考试前的一天我回到老家准备面试，到晚上整理东西的时候才发现身份证放学校没有带回来，去学校拿？很晚了，没有车来不及。办个临时的？来不及，第二天早上就开始面试。索性放弃算了，反正面试我也没准备，再说我是第三名翻盘的可能性不大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就这样我的公务员梦碎了，历史的车轮又把我往编程路上拽。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;学生生涯最快乐的一段时光&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;9月份顺利入学，研究生也算是学生，所以我把我的身份锁定在学生而不是社会打工人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为在以前的学生生涯我受够了管束，所以这次选导师我挑了一个没什么项目的导师，这也给我后面出去实习铺好了路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;研究生的课程很少，没有导师的管束，我又开始放飞自己了，没课的时候睡到自然醒，把以前没看的美剧、电影、动漫全部看完了，下午去打羽毛球，晚上去光谷步行街玩耍，周末骑山地车到处逛。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在回想起来研一真的是我学生生涯中最快乐的一段时光。读小学那时候太小也不知道什么是快乐，读初中要努力学习考高中，读高中要努力考好大学，读大学我基本都是在学编程，也拿过国奖。只有研一我才真正放飞了自我。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了在学校玩，我还去了很多地方游玩：北京故宫、长城，上海外滩，杭州西湖，苏州园林，舟山东极岛，香港等，国外也去浪了一次：泰国七天游。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.3333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/RXvHpViaz3EoYOJAfcty2EMiad21mCPc0Dv9WdvceMvN07vFgbPTlTcKNuD5h9Ny3tfndon8YqeC9CjnL4Q1d4Sw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;300&quot;/&gt;&lt;figcaption&gt;第一次出国旅游&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正所谓乐极生悲，研一太浪了导致我后面找实习和工作不断被毒打。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;我觉得我又行了&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;研二我就开始找实习了，刚开始不断被毒打，后面慢慢找到套路，拿到了很多 offer：网易、百度、华为、美团、斗鱼、某些国企。我居然成为了 offer 收割机，这部分留在后面单独开一讲。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于工作这部分我也打算放在后面一篇写，主要会涉及我在这些大厂实习和工作的趣事，以及后面我为什么会换工作，希望这些经历能给你的职业生涯带来帮助和启发。后面预计非常精彩，期待不~v~&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;程序员高薪职业让爸妈在老家长脸了&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你要问我工作后给家里带来的最大变化是什么？我可能要回答你是：&lt;strong&gt;面子&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面已经讲过我家是十八线县城下面的一个农村，家那边能出一个大学生可能都是大喜事，过去村的人问我爸：你儿子在哪里上班啊？我爸洋溢着微笑：华为（百度），虽然我已经从这些公司离职了。但是提起这些我爸还是很骄傲，我想这就是我给他们带来的精神上的财富吧。这就是”面子“的力量，让他们在同龄人的对比中长了脸。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于说到高薪，程序员确实赚的比较多，这是时代给的红利，不要以为是因为自己的努力，985高校的自动化机械专业的应届生薪资比程序员差远了。如果要算时薪，你去问问土木的同学加不加班。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我爸在外面跟别人说我的薪资时，村里的人都一脸惊讶：吹牛吧。反正我认为这就是酸了吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写到深夜了，写累了……&lt;/p&gt;&lt;p&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;最后回答几个问题&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从大学到研究生到现在的工作，虽然中间有过波折，几度想放弃编程这条路，但是还是坚持下来了，我想把我的经验固化下来帮助到更多的人。至于说写公众号赚钱，至少我现在不会靠这个，未来怎么样不好说，毕竟赚钱不是一件丢人的事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这其实是对我自己的鞭策，因为我不爱笑，也不是真正意义上的架构师，所以我取名叫”爱笑的架构师“，希望未来能笑对生活，努力成为被业界认可的架构师。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这不是我真正的名字，算是个笔名吧，我的名字中有一个”雷“，然后”架“是指架构师的意思，有点自恋，哈哈。后面也许会换个名字。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后面安排，等我先去烫个头发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为看文章的人都不分享点赞，说的就是你，三连安排一下（转发、点赞、在看）。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c70d98262225ce5b5538991e4e8edf26</guid>
<title>深入 Spring Boot（十四）：jar/war 打包解决方案</title>
<link>https://toutiao.io/k/f0lsq51</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;最近有位网友通过公众号找到我咨询一个SpringBoot项目打包的问题。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.2935185185185185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gDHRjEowjKRhFfHXAr8FVAyPoXQyKFtPs0VESkXQIXDqK0UE55Aiawc7wZnSLxiaJjgRXn605dyiachjGicTEXxEOw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;这位朋友说网络上有很多重复、不可用的技术文章，这个倒是事实，更糟糕的一些自媒体为了流量抄来抄去，增加我们查找解决方案的时间成本，我也尝试去搜索了一下“SpringBoot打包”，结果不尽人意，所以，总结了这篇打包解决方案。&lt;/p&gt;&lt;p&gt;基于SpringBoot开发的项目代码可以打包成可执行jar，也可以打包成war，这个视不同需求而定，下面以SpringBoot2.4.0版本为例，分别列举了不同使用方式下的jar和war打包操作。&lt;/p&gt;&lt;h2&gt;构建可执行jar包&lt;/h2&gt;&lt;p&gt;SpringBoot推荐将应用系统构建成可执行jar包，使用内置应用服务器运行项目代码。&lt;/p&gt;&lt;h3&gt;继承spring-boot-starter-parent&lt;/h3&gt;&lt;p&gt;如果项目配置了pom继承spring-boot-starter-parent，就像下面这样：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.springframework.boot&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;spring-boot-starter-parent&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.4.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;此时要把项目代码打包成jar，需要在pom中配置packaging=jar，就是下面这样：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;&lt;span&gt;jar&lt;/span&gt;&lt;span&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;接着，使用finalName标签配置最终jar包的名字，然后配置spring-boot-maven-plugin插件，例如如下配置：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;&lt;span&gt;demo&lt;/span&gt;&lt;span&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.springframework.boot&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;spring-boot-maven-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;以上就是pom中的配置了，接下来执行jar打包操作，如果使用IDEA图形化工具打包，双击执行Maven窗口下Lifecycle中的package，即执行打jar包。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7543478260869565&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gDHRjEowjKRhFfHXAr8FVAyPoXQyKFtPhicxiaRsibIpL2etZNq42K0dZjDNHQNiaL5we4SNzscOFvXcnK28MksRtw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;460&quot;/&gt;&lt;/p&gt;&lt;p&gt;如果想通过执行mvn指令打jar，需要cd到源码根目录，即pom.xml所在的目录，然后执行mvn clean package，即执行打jar包。&lt;/p&gt;&lt;h3&gt;不继承spring-boot-starter-parent&lt;/h3&gt;&lt;p&gt;如果项目pom文件没有继承spring-boot-starter-parent，要想将项目代码构建成可执行jar包，同样需要在pom中配置packaging=jar，就是下面这样：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;&lt;span&gt;jar&lt;/span&gt;&lt;span&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;接着，使用finalName标签配置最终jar包的名字，然后配置spring-boot-maven-plugin插件，这里不一样的是需要配置goal=repackage，例如如下配置：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;&lt;span&gt;demo&lt;/span&gt;&lt;span&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.springframework.boot&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;spring-boot-maven-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.4.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                    &lt;/span&gt;&lt;span&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                            &lt;/span&gt;&lt;span&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;&lt;span&gt;repackage&lt;/span&gt;&lt;span&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                    &lt;/span&gt;&lt;span&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;以上就是pom中的配置了，接下来执行jar打包操作，如果使用IDEA图形化工具打包，双击执行Maven窗口下Lifecycle中的package，即执行打jar包；如果想通过执行mvn指令打jar，需要cd到源码根目录，即pom.xml所在的目录，然后执行mvn clean package，即执行打jar包。&lt;/p&gt;&lt;h2&gt;构建可部署war包&lt;/h2&gt;&lt;p&gt;如果需要将项目代码构建成war包，可参考如下两个不同的方式。不过需要注意，对于web应用，SpringBoot2.4使用Servlet3，所以war包需要部署在支持Servlet3的应用服务器上，例如tomcat8.0及以上版本。&lt;/p&gt;&lt;h3&gt;继承spring-boot-starter-parent&lt;/h3&gt;&lt;p&gt;如果配置了项目pom继承spring-boot-starter-parent，就像下面这样：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.springframework.boot&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;spring-boot-starter-parent&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.4.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;此时要把项目代码打包成jar，需要在pom中配置packaging=war，就是下面这样：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;&lt;span&gt;war&lt;/span&gt;&lt;span&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;接着，使用finalName标签配置最终war包的名字，然后配置spring-boot-maven-plugin插件，例如如下配置：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;&lt;span&gt;demo&lt;/span&gt;&lt;span&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.springframework.boot&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;spring-boot-maven-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;以上就是pom中的配置了，接下来执行war打包操作，如果使用IDEA图形化工具打包，双击执行Maven窗口下Lifecycle中的package，即执行打war包；如果想通过执行mvn指令打war，需要cd到源码根目录，即pom.xml所在的目录，然后执行mvn clean package，即执行打war包。&lt;/p&gt;&lt;h3&gt;不继承spring-boot-starter-parent&lt;/h3&gt;&lt;p&gt;如果项目pom文件没有继承spring-boot-starter-parent，要想将项目代码构建成war包，同样需要在pom中配置packaging=war，就是下面这样：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;&lt;span&gt;war&lt;/span&gt;&lt;span&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;接着，使用finalName标签配置最终war包的名字，然后配置构建war包需要使用到的插件，spring-boot-maven-plugin中同样需要配置goal=repackage，例如如下配置：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;&lt;span&gt;demo&lt;/span&gt;&lt;span&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-antrun-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;1.8&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-assembly-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.3.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-clean-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.1.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-compiler-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.8.1&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-dependency-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.1.2&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-deploy-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.8.2&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-enforcer-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.0.0-M3&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-failsafe-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.22.2&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-help-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.2.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-install-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.5.2&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-invoker-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.2.1&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-jar-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.2.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-javadoc-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.2.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-resources-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.2.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-shade-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.2.4&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-source-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.2.1&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-surefire-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.22.2&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.apache.maven.plugins&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;maven-war-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;3.3.1&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span&gt;org.springframework.boot&lt;/span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;spring-boot-maven-plugin&lt;/span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;span&gt;2.4.0&lt;/span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                    &lt;/span&gt;&lt;span&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;&lt;span&gt;repackage&lt;/span&gt;&lt;span&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                    &lt;/span&gt;&lt;span&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;以上配置中的插件版本号参考自SpringBoot2.4.0中的spring-boot-dependencies-2.4.0.pom，它是spring-boot-starter-parent的父文件。&lt;/p&gt;&lt;p&gt;以上就是pom中的配置了，接下来执行war打包操作，如果使用IDEA图形化工具打包，双击执行Maven窗口下Lifecycle中的package，即执行打war包；如果想通过执行mvn指令打war，需要cd到源码根目录，即pom.xml所在的目录，然后执行mvn clean package，即执行打war包。&lt;/p&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;从上述操作可以看到，是否继承spring-boot-starter-parent，打包配置还是有些不同的。因为spring-boot-starter-parent pom.xml中已经帮我们管理好了打包需要用到的spring-boot-maven-plugin插件和它需要依赖的其它插件，所以通过继承可以直接使用spring-boot-maven-plugin。有时，我们的项目有自己的parent pom.xml，此时没有继承spring-boot-starter-parent，那么如果还要想使用spring-boot-maven-plugin插件，就需要自定义管理它所依赖的maven插件。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;往期推荐&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484878&amp;amp;idx=1&amp;amp;sn=daee4e4702b0d3a44daf8599501d72e8&amp;amp;chksm=e9bf5750dec8de4656a9aaf85ada2ca8042921c8e52b57c494cc9af52e615e19fb101a485103&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;Java开发人员必知的常用类库，这些你都知道吗？&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484871&amp;amp;idx=1&amp;amp;sn=74ede98f0281459c8ded84bd5178caa0&amp;amp;chksm=e9bf5759dec8de4fa24d29ada560d50e73dd35264a02fdd85aab44c4a931af8f1f6e47d1b683&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;聊一聊Redis官方置顶推荐的Java客户端Redisson&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484828&amp;amp;idx=1&amp;amp;sn=bbdfbbed2c5e97dd58386df08fc011db&amp;amp;chksm=e9bf5702dec8de14016f5468ee387d8b326cdec0eca0013e8b5b95d945897f64a6cb817793d3&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;我画了25张图展示线程池工作原理和实现原理，原创干货，建议先收藏再阅读&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484763&amp;amp;idx=1&amp;amp;sn=a67f151b04967d149c2b60ed648e5dbf&amp;amp;chksm=e9bf57c5dec8ded33ccfc6cd269c4736eec528b8e6ab4cc6c2beb11deb744e7f78d7b61ec72b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;Spring框架你敢写精通，面试官就敢问@Autowired注解的实现原理&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484742&amp;amp;idx=1&amp;amp;sn=54e9e3e9de14d3681a8d426d90f5d687&amp;amp;chksm=e9bf57d8dec8decec68531bd74f92a6dba3fb4e74564c27fa9933ece75290d27ffa317a4a8ae&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;面试被问为什么使用Spring Boot？答案好像没那么简单&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484730&amp;amp;idx=1&amp;amp;sn=dd043e8eb2fbf4ca7df266aabed45443&amp;amp;chksm=e9bf57a4dec8deb2e7162250c559dd4d2189681f6e08b37da371d04867698a26b9be062fc24b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;Spring声明式事务处理的实现原理，来自面试官的穷追拷问&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484712&amp;amp;idx=1&amp;amp;sn=982a0801e878700b42b48f7fae3e5f30&amp;amp;chksm=e9bf57b6dec8dea04544c551c8206897f66efb81f49532b65df4ff878ad284c261b48ad9e3dd&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;没使用加号拼接字符串，面试官竟然问我为什么&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484707&amp;amp;idx=1&amp;amp;sn=3eea7537f43fcf0cd646d9bc64fd657f&amp;amp;chksm=e9bf57bddec8deab4ffea25c68197d82c1b46ba58ad0963c9fc0ee6d79f9c47c29660875187f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;面试官一步一步的套路你，为什么SimpleDateFormat不是线程安全的&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484701&amp;amp;idx=1&amp;amp;sn=67ba3d2cedbd7a475371acfc474210e1&amp;amp;chksm=e9bf5783dec8de95e76115bc1fbd14401f8b41030d7aa5ebd42894eba56f138fd03f153718a4&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;都说ThreadLocal被面试官问烂了，可为什么面试官还是喜欢继续问&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484696&amp;amp;idx=1&amp;amp;sn=54c8b5ad9373d88564032c8bc4bc0926&amp;amp;chksm=e9bf5786dec8de90506632f193789cc088165985e35320a5e2a64f6a1230f5d74c9118a811af&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;Java注解是如何玩转的，面试官和我聊了半个小时&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;学之多，而后知之少&lt;/strong&gt;&lt;span&gt;！朋友们点【在看】是我持续更新的最大动力!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-type=&quot;png&quot; data-ratio=&quot;0.5555555555555556&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gDHRjEowjKSxTAD3licFmGltOsliao1ZVHCicnRtbiarMjXCkm2y0FjRlsJ596O4ibOAoOib1XWGhXlYX8x0wYXIPfxg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>