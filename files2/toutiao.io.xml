<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>a3cfb535d05bf280fe3188d8efdb88f8</guid>
<title>吊炸天的 Docker 图形化工具 Portainer，必须推荐给你</title>
<link>https://toutiao.io/k/ca8fe6d</link>
<content:encoded>&lt;div&gt;&lt;div/&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>caa1fafebed72ee6867dd0bdad0134ca</guid>
<title>RabbitMQ、Kafka、RocketMQ 是如何实现高可用的？</title>
<link>https://toutiao.io/k/2tnj5np</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文从高可用的角度观察一下 RabbitMQ、Kafka、RocketMQ，看看它们各自的实现思路。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. RabbitMQ&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RabbitMQ 有 3 种部署模式：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单机模式与高可用完全没关系，咱就不说了，直接看看这2种集群模式。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.1 普通集群模式&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.563165905631659&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl92H7kM88p2BaAor1iat4wiafZfAgJb8sqxjdwZPx2rL4jjKV5IiclSjvcMPfH5MfxxXs96ibDLFCFVVJA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1314&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;某一个 Queue 是在集群中的某一个 Broker 上，各个 Broker 会同步元数据，但不会同步 Queue 的消息数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果某一个 Broker 故障了，其中的 Queue 便无法使用。如果消息没有配置消息持久化，则消息丢失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，这种方式并没有实现高可用，只是扩展性比较好，扩充 Broker 可以容纳更多的 Queue，提高吞吐量。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2 镜像集群模式&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6868686868686869&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl92H7kM88p2BaAor1iat4wiafZria5mfGBgbibbtV3Kibd8WAESohP9npQf4HW0NEbk0ZKyCTqiaGZKuvwwg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1386&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个 Broker 中 Queue 的元数据和消息数据都会同步到其他 Broker 上，就是做了全量备份，所以称为 “镜像模式”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现了高可用，如果一个 Broker 故障了，没关系，可以使用其他 Broker 继续工作，消息数据不会丢失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可用性上去了，但扩展性没有了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个 Queue 的数据是全量存在 Broker 中的，所以 Queue 的消息容量、消息处理能力，都受限于 Broker。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;普通集群模式&lt;/strong&gt; 没有达到高可用，扩展性较好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;镜像集群模式&lt;/strong&gt; 实现了高可用，但扩展性差。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. Kafka&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4608567208271787&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl92H7kM88p2BaAor1iat4wiafZQ2Dtvm7GyoO5xOXib1v9ics2vMgV506DNXSias9xJPMbPxKia0ySsCB7Zg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1354&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 把 Topic（主题/队列）分为了多个 Partition（分区），Topic 只是逻辑概念，Partition 才是实际的消息存储单元。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个 Topic 的多个 Partition 分散在多个 Broker 中，每个 Partition 存放 Topic 的一部分数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了 Partition 之后，Topic 就具有了极强的扩展性，可以指定 N 个 Partition。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.524812030075188&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl92H7kM88p2BaAor1iat4wiafZ7EWExdX3Z8KptOQSmJOq0sPic3M6crBvSLqOXNiadsvic0HWrmWUn4tyg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1330&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以为 Partition 指定多个“副本”，分散在不同的 Broker，从而实现其高可用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当某个 Broker 故障的时候，其中存放的 Partition 不可用，但没有关系，可以使用其他 Broker 上的副本。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5245901639344263&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl92H7kM88p2BaAor1iat4wiafZLxXLiagCrpcthGic6iaT1EePSbgjDIyKs53ccjUUicRhzKSxkicibicbmuPibw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1342&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Partition 的多个副本分为两种角色，Leader 和 Follower。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Leader 是由 Kafka 选举出来的，负责处理消息的读写。Leader 收到新消息后，会同步给 Follower。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Follower 的作用是候选人，当 Leader 出事儿之后，Kafka 会从 Follower 中选举出新的 Leader。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以配置消息写入完成的标准：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;写入 Leader 既可 -- 速度快，但可能会有消息丢失，例如在同步到 Follower 之前 Broker 故障了，则消息丢失。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Follower 同步完成之后才算写入成功 -- 消息可靠性极高，但影响写入速度。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. RocketMQ&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4451282051282051&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl92H7kM88p2BaAor1iat4wiafZhveTFlAb9vsOTfQpunmYsh3icmjlXQialWxVsYjpME7LMngn0RQFydPQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;975&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是 RocketMQ 的官方结构图，左右是 Producer 和 Consumer，中间是 RocketMQ，分为两个部分：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;NameServer 集群 -- 存放元数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Broker 集群 -- 存放队列数据&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两部分都需要保证高可用。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.48493975903614456&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl92H7kM88p2BaAor1iat4wiafZZialm8RGGm44JVCt3plCdCLW7XK5sTWibGaZRqXuibpY3qSxElw9bfCHA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1328&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;NameServer 是独立运行的，保存着集群完整的集群元数据，例如路由信息、Broker信息、数据信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了保证其高可用，可以运行多个 NameServer，之间完整的同步数据即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样只要有一个 NameServer 是可用的，就不会影响集群的正常工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Broker 集群的部署方式可以分为 3 种。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5645933014354066&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl92H7kM88p2BaAor1iat4wiafZlch6UrMFU5nhyuRBX8zcGCSGsibkdvosSDibKC5ac3YAiaQLMwjtj314A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1254&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;部署多个 Broker，角色都是 Master，Topic 的数据会分散存储在这些 Broker 中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单个 Master 故障会导致其中数据无法使用，需要等待修复。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想保障数据的可靠性，可以使用【RAID10 + 同步刷盘】机制。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.719551282051282&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl92H7kM88p2BaAor1iat4wiafZ7ZibGVFCy0iaQ0MoC4bc9YvTAGGQqcm0Qt0Dqobv3HDdyohf6Z7KbWXg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1248&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为 Master 配置了 Slave，Master 会把数据同步到 Slave。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当 Master 故障之后，可以用 Slave 顶上去，数据和服务都不影响，但会有短暂的停顿，需要修改配置并重启才能完成切换动作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据同步的方式分为：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）异步 -- Master 写入完成即可，异步同步给 Slave。写入速度快，但同步会有延迟，可能会丢数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）同步 -- Master 与 Slave 都写入之后才算成功。不会丢消息，但写入速度降低。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl92H7kM88p2BaAor1iat4wiafZyVJgctpO0bDGG7nrRABVEwFGvfu3Sp61ica7CmgsxIhicibEaVkcIfmxQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1272&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dledger 模式要求为 Master 配置 2 个 Slave，3 者组成一个 Dledger Group。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dledger 也是 Master-Slave 同步的方式，好处在于可以实现自动选举 Master，自动切换。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当 Master 故障的时候，RocketMQ 可以从组内选出一个新的 Master，完成自动切换，这样更进一步提高了集群的可用性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后小结一下。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3285024154589372&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl92H7kM88p2BaAor1iat4wiafZ1M0s9jjBxj6TiaLzaP6Ad2A9oTdZ7R8NkWNHFic9wd3m9rtFgYvfBjXw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.36106750392464676&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl92H7kM88p2BaAor1iat4wiafZbAdeicQMDkPP1XqScxic3d33QUicrRxbnI3LU5QLTck8gNuYNLA8FXbgg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1274&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4407894736842105&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl92H7kM88p2BaAor1iat4wiafZsPqEFsfcumwHw0pHMhOU3103ngnqOyOiaNQiahibkeL50CiabicYFxWayEw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1520&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4Nzc4MjI4MQ==&amp;amp;mid=2652403576&amp;amp;idx=1&amp;amp;sn=00b6cc6110cbfc191d4efdcefd6432da&amp;amp;chksm=8bd8f19ebcaf7888b30a7491523de976154e0bcdd41df2167f10fd22c8526a392e9f7870cc75&amp;amp;token=456207156&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;OAuth2 图解&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4Nzc4MjI4MQ==&amp;amp;mid=2652403396&amp;amp;idx=1&amp;amp;sn=53ac0376b271abab985de793a9a66bb0&amp;amp;chksm=8bd8f022bcaf7934051078105e66fa8f2986e4daaa067a0c6ea3668eb04b728762ba241547cc&amp;amp;token=456207156&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;轻松理解 Kubernetes 的核心概念&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4Nzc4MjI4MQ==&amp;amp;mid=2652403407&amp;amp;idx=1&amp;amp;sn=69489b882cfafb77607a80e150d47b19&amp;amp;chksm=8bd8f029bcaf793fc8435b45f4bd2058200406e7a5f38665ef79acdb382feabacc8c5e5ac904&amp;amp;token=456207156&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;开发者必须要了解的架构技术趋势：Service Mesh&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d9f812c379f10f4e8fb1f6f93eb3e6c9</guid>
<title>哈啰在分布式消息治理和微服务治理中的实践</title>
<link>https://toutiao.io/k/k1o0w99</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h1 data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;背景介绍&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哈啰已进化为包括两轮出行（哈啰单车、哈啰助力车、哈啰电动车、小哈换电）、四轮出行（哈啰顺风车、全网叫车、哈啰打车）等的综合化移动出行平台，并向酒店、到店团购等众多本地生活化生态探索。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;随着公司业务的不断发展，流量也在不断增长。我们发现生产中的一些重大事故，往往是被突发的流量冲跨的，对流量的治理和防护，保障系统高可用就尤为重要。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;服务之间的交互通常可以分为直接调用和通过消息队列解耦的异步调用。他们都可以归为流量调用范畴，本文为就哈啰在消息流量和微服务调用的治理中踩过的坑、积累的经验一个分享。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;聊聊治理这件事&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;开始之前先聊聊治理这件事情，下面是老梁个人理解：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;治理在干一件什么事？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;需要知道哪些地方还不够好？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;还需要知道是不是一直都是好的？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;不好的时候如何再让其变好？&lt;/strong&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;目录&lt;/span&gt;&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;打造分布式消息治理平台&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;RocketMQ实战踩坑和解决&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;打造微服务高可用治理平台&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;裸奔的RabbitMQ&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;公司之前使用RabbitMQ，下面在使用RabbitMQ时的痛点，其中很多事故由于RabbitMQ集群限流引起的。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;积压过多是清理还是不清理？这是个问题，我再想想&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;积压过多触发集群流控？那是真的影响业务了&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;想消费前两天的数据？请您重发一遍吧&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;要统计哪些服务接入了？您要多等等了，我得去捞IP看看&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;有没有使用风险比如大消息？这个我猜猜&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;裸奔的服务&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;曾经有这么一个故障，多个业务共用一个数据库。在一次晚高峰流量陡增，把数据库打挂了。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;数据库单机升级到最高配依然无法解决&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;重启后缓一缓，不一会就又被打挂了&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;如此循环着、煎熬着、默默等待着高峰过去&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;思考：无论消息还是服务都需要完善的治理措施&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;01 打造分布式消息治理平台&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;设计指南&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哪些是我们的关键指标，哪些是我们的次要指标，这是消息治理的首要问题&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;设计目标&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;旨在屏蔽底层各个中间件（RocketMQ/Kafka）的复杂性，通过唯一标识动态路由消息。同时打造集资源管控、检索、监控、告警、巡检、容灾、可视化运维等一体化的消息治理平台，保障消息中间件平稳健康运行。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;消息治理平台设计需要考虑的点&lt;/span&gt;&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;提供简单易用API&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;有哪些关键点能衡量客户端的使用没有安全隐患&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;有哪些关键指标能衡量集群健康不健康&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;有哪些常用的用户/运维操作将其可视化&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;有哪些措施应对这些不健康&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;尽可能简单易用&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;设计指南&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;把复杂的问题搞简单，那是能耐&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;极简统一API&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;提供统一的SDK封装了（Kafka/RocketMQ）两种消息中间件。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.358148893360161&quot; data-type=&quot;png&quot; data-w=&quot;1491&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/aCASXoK2nU4TEvT5Ajk9O0tsDL5BfKQEjcG4yXn5MS9ictFXH6IPXCUmSiawSDjLdKCEG4fAwKhSS96OfUt2wHAw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;一次申请&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;主题消费组自动创建不适合生产环境，自动创建会导致失控，不利于整个生命周期管理和集群稳定。需要对申请流程进行控制，但是应尽可能简单。例如：一次申请各个环境均生效、生成关联告警规则等。&lt;/span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.25150501672240805&quot; data-type=&quot;png&quot; data-w=&quot;1495&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/aCASXoK2nU4TEvT5Ajk9O0tsDL5BfKQE6lnicticHqzWIwB7LFGIiaoRwgqQyZbqL4ibwRgJN7lnzGBClNPzYiawwvA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;客户端治理&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;设计指南&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;监控客户端使用是否规范，找到合适的措施治理&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;场景回放&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;场景一 瞬时流量与集群的流控&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;假设现在集群Tps有1万，瞬时翻到2万甚至更多，这种过度陡增的流量极有可能引发集群流控。针对这类场景需监控客户端的发送速度，在满足速度和陡增幅度阈值后将发送变的平缓一些。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;场景二 大消息与集群抖动&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当客户端发送大消息时，例如：发送几百KB甚至几兆的消息，可能造成IO时间过长与集群抖动。针对这类场景治理需监控发送消息的大小，我们采取通过事后巡检的方式识别出大消息的服务，推动使用同学压缩或重构，消息控制在10KB以内。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;场景三 过低客户端版本&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;随着功能的迭代SDK的版本也会升级，变更除了功能外还有可能引入风险。当使用过低的版本时一个是功能不能得到支持，另外一个是也可能存在安全隐患。为了解SDK使用情况，可以采取将SDK版本上报，通过巡检的方式推动使用同学升级。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;场景四 消费流量摘除和恢复&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;消费流量摘除和恢复通常有以下使用场景，第一个是发布应用时需要先摘流量，另外一个是问题定位时希望先把流量摘除掉再去排查。为了支持这种场景，需要在客户端监听摘除/恢复事件，将消费暂停和恢复。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;场景五 发送/消费耗时检测&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;发送/消费一条消息用了多久，通过监控耗时情况，巡检摸排出性能过低的应用，针对性推动改造达到提升性能的目的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;场景六 提升排查定位效率&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在排查问题时，往往需要检索发了什么消息、存在哪里、什么时候消费的等消息生命周期相关的内容。这部分可以通过msgId在消息内部将生命周期串联起来。另外是通过在消息头部埋入rpcId/traceId类似链路标识，在一次请求中将消息串起来。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;治理措施提炼&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;需要的监控信息&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;发送/消费速度&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;发送/消费耗时&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息大小&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;节点信息&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;链路标识&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;版本信息&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;常用治理措施&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;定期巡检：有了埋点信息可以通过巡检将有风险的应用找出来。例如发送/消费耗时大于800ms、消息大小大于10KB、版本小于特定版本等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;发送平滑：例如检测到瞬时流量满足1万而且陡增了2倍以上，可以通过预热的方式将瞬时流量变的平滑一些&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消费限流：当第三方接口需要限流时，可以对消费的流量进行限流，这部分可以结合高可用框架实现&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消费摘除：通过监听摘除事件将消费客户端关闭和恢复&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;主题/消费组治理&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;设计指南&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;监控主题消费组资源使用情况&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;场景回放&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;场景一  消费积压对业务的影响&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有些业务场景对消费堆积很敏感，有些业务对积压不敏感，只要后面追上来消费掉即可。例如单车开锁是秒级的事情，而信息汇总相关的批处理场景对积压不敏感。通过采集消费积压指标，对满足阈值的应用采取实时告警的方式通知到应用负责的同学，让他们实时掌握消费情况。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;场景二 消费/发送速度的影响&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;发送/消费速度跌零告警？有些场景速度不能跌零，如果跌零意味着业务出现异常。通过采集速度指标，对满足阈值的应用实时告警。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;场景三 消费节点掉线&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;消费节点掉线需要通知给应用负责的同学，这类需要采集注册节点信息，当掉线时能实时触发告警通知。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;场景四 发送/消费不均衡&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;发送/消费的不均衡往往影响其性能。记得有一次咨询时有同学将发送消息的key设置成常量，默认按照key进行hash选择分区，所有的消息进入了一个分区里，这个性能是无论如何也上不来的。另外还要检测各个分区的消费积压情况，出现过度不均衡时触发实时告警通知。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;治理措施提炼&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;需要的监控信息&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;发送/消费速度&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;发送分区详情&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消费各分区积压&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消费组积压&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;注册节点信息&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;常用治理措施&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;实时告警：对消费积压、发送/消费速度、节点掉线、分区不均衡进行实时告警通知&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;提升性能：对于有消费积压不能满足需求，可以通过增加拉取线程、消费线程、增加分区数量等措施加以提升&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;自助排查：提供多维度检索工具，例如通过时间范围、msgId检索、链路系统等多维度检索消息生命周期&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;集群健康治理&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;设计指南&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;度量集群健康的核心指标有哪些？&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;场景回放&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;场景一  集群健康检测&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;集群健康检测回答一个问题：这个集群是不是好的。通过检测集群节点数量、集群中每个节点心跳、集群写入Tps水位、集群消费Tps水位都是在解决这个问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;场景二 集群的稳定性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;集群流控往往体现出集群性能的不足，集群抖动也会引发客户端发送超时。通过采集集群中每个节点心跳耗时情况、集群写入Tps水位的变化率来掌握集群是否稳定。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;场景三 集群的高可用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;高可用主要针对极端场景中导致某个可用区不可用、或者集群上某些主题和消费组异常需要有一些针对性的措施。例如：MQ可以通过同城跨可用区主从交叉部署、动态将主题和消费组迁移到灾备集群、多活等方式进行解决。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;治理措施提炼&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;需要的监控信息&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;集群节点数量采集&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;集群节点心跳耗时&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;集群写入Tps的水位&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;集群消费Tps的水位&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;集群写入Tps的变化率&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;常用治理措施&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;定期巡检：对集群Tps水位、硬件水位定期巡检&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;容灾措施：同城跨可用区主从交叉部署、容灾动态迁移到灾备集群、异地多活&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;集群调优：系统版本/参数、集群参数调优&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;集群分类：按业务线分类、按核心/非核心服务分类&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最核心指标聚焦&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果说这些关键指标中哪一个最重要？我会选择集群中每个节点的心跳检测，即：响应时间（RT），下面看看影响RT可能哪些原因。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.5935960591133005&quot; data-type=&quot;png&quot; data-w=&quot;812&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/aCASXoK2nU4TEvT5Ajk9O0tsDL5BfKQEvkSTDPeTNiaAyVo7MvcliaUtWLyTwKIVkwvSMKRrI8VSmpVBgic81vmjg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关于告警&lt;/span&gt;&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;监控指标大多是秒级探测&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;触发阈值的告警推送到公司统一告警系统、实时通知&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;巡检的风险通知推送到公司巡检系统、每周汇总通知&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;消息平台图示&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;架构图&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7744493392070485&quot; data-type=&quot;png&quot; data-w=&quot;2270&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/aCASXoK2nU4TEvT5Ajk9O0tsDL5BfKQEB8MxIydnlbdO2yb6smRrtYRvemSAQSPnhjIUstgF7BmV8aUOH6fcag/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;看板图示&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.573134328358209&quot; data-type=&quot;png&quot; data-w=&quot;2680&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/aCASXoK2nU4TEvT5Ajk9O0tsDL5BfKQEjUgD7pRuDXZgFA2vrmPzUHxLMNTGusrS8l3sOibTdNRzUoz41cu74jg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5419901199717714&quot; data-type=&quot;png&quot; data-w=&quot;2834&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/aCASXoK2nU4TEvT5Ajk9O0tsDL5BfKQED3tvYhlT0qrotuAfxt2BKuJ6MK1OayiaHBUO8Uj2dUAnOQA34RC0Z7g/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;02 RocketMQ实战中踩过的坑和解决方案&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;行动指南&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们总会遇到坑，遇到就把它填了&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;RocketMQ集群CPU毛刺&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;问题描述&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;问题描述：RocketMQ从节点、主节点频繁CPU飙高，很明显的毛刺，很多次从节点直接挂掉了。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3641732283464567&quot; data-type=&quot;png&quot; data-w=&quot;1524&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/aCASXoK2nU4TEvT5Ajk9O0tsDL5BfKQEVe0tPOJOQBKo3sXicWoa0eshDOZLVEsmlBoCGsJscLBnCEXGAPqts8w/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;只有系统日志有错误提示&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;2020-03-16T17:56:07.505715+08:00 VECS0xxxx kernel: &amp;lt;IRQ&amp;gt;  [&amp;lt;ffffffff81143c31&amp;gt;] ? __alloc_pages_nodemask+0x7e1/0x960&lt;br/&gt;2020-03-16T17:56:07.505717+08:00 VECS0xxxx kernel: java: page allocation failure. order:0, mode:0x20&lt;br/&gt;2020-03-16T17:56:07.505719+08:00 VECS0xxxx kernel: Pid: 12845, comm: java Not tainted 2.6.32-754.17.1.el6.x86_64 &lt;span&gt;#1&lt;/span&gt;&lt;br/&gt;2020-03-16T17:56:07.505721+08:00 VECS0xxxx kernel: Call Trace:&lt;br/&gt;2020-03-16T17:56:07.505724+08:00 VECS0xxxx kernel: &amp;lt;IRQ&amp;gt;  [&amp;lt;ffffffff81143c31&amp;gt;] ? __alloc_pages_nodemask+0x7e1/0x960&lt;br/&gt;2020-03-16T17:56:07.505726+08:00 VECS0xxxx kernel: [&amp;lt;ffffffff8148e700&amp;gt;] ? dev_queue_xmit+0xd0/0x360&lt;br/&gt;2020-03-16T17:56:07.505729+08:00 VECS0xxxx kernel: [&amp;lt;ffffffff814cb3e2&amp;gt;] ? ip_finish_output+0x192/0x380&lt;br/&gt;2020-03-16T17:56:07.505732+08:00 VECS0xxxx kernel: [&amp;lt;ffffffff811862e2&amp;gt;] ? &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;各种调试系统参数只能减缓但是不能根除，依然毛刺超过50%&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.40827586206896554&quot; data-type=&quot;png&quot; data-w=&quot;1450&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/aCASXoK2nU4TEvT5Ajk9O0tsDL5BfKQEghHicjLbSKAHLKqIG4FcPANNGrKPm2Y6vgfCbYtF7mTWZKH7ZAjbq8Q/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;将集群所有系统升级从centos6升级到centos7，内核版本也从从2.6升级到3.10，CPU毛刺消失。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;详见RocketMQ社区帖子&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;RocketMQ集群线上延迟消息失效&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;问题描述&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;RocketMQ社区版默认本支持18个延迟级别，每个级别在设定的时间都被会消费者准确消费到。为此也专门测试过消费的间隔是不是准确，测试结果显示很准确。然而，如此准确的特性居然出问题了，接到业务同学报告线上某个集群延迟消息消费不到，诡异！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;将&quot;delayOffset.json&quot;和&quot;consumequeue/SCHEDULE_TOPIC_XXXX&quot;移到其他目录，相当于删除；逐台重启broker节点。重启结束后，经过验证，延迟消息功能正常发送和消费。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;详见RocketMQ社区帖子 &lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxMzY2MDYzMA==&amp;amp;mid=2247484186&amp;amp;idx=1&amp;amp;sn=e7688d0eb9f0f8bcea5b3d2f38164ff0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;详细复盘过程&lt;/a&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;深入研究 RocketMQ 源码为治理保驾护航&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;阅读源码有啥用？老梁的理解&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;遇到问题不慌&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;解决问题有思路&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;能够链接到一些专业同学一起探讨&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;为技术方案的设计提供素材&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;知行合一（源码+实战）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;span&gt;‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍&lt;/span&gt;03 打造微服务高可用治理平台&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;设计指南&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哪些是我们的核心服务，哪些是我们的非核心服务，这是服务治理的首要问题&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;设计目标&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;服务能应对突如其来的陡增流量，尤其保障核心服务的平稳运行。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;应用分级和分组部署&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;应用分级&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根据用户和业务影响两个纬度来进行评估设定的，将应用分成了四个等级。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务影响：应用故障时影响的业务范围&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;用户影响：应用故障时影响的用户数量&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;S1：核心产品，产生故障会引起外部用户无法使用或造成较大资损，比如主营业务核心链路，如单车、助力车开关锁、顺风车的发单和接单核心链路，以及其核心链路强依赖的应用。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;S2:  不直接影响交易，但关系到前台业务重要配置的管理与维护或业务后台处理的功能。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;S3:  服务故障对用户或核心产品逻辑影响非常小，且对主要业务没影响，或量较小的新业务；面向内部用户使用的重要工具，不直接影响业务，但相关管理功能对前台业务影响也较小。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;S4:  面向内部用户使用，不直接影响业务，或后续需要推动下线的系统。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;分组部署&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;S1服务是公司的核心服务，是重点保障的对象，需保障其不被非核心服务流量意外冲击。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;S1服务分组部署，分为Stable和Standalone两套环境&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;非核心服务调用S1服务流量路由到Standalone环境&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;S1服务调用非核心服务需配置熔断策略&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6469500924214417&quot; data-type=&quot;png&quot; data-w=&quot;1623&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/aCASXoK2nU4TEvT5Ajk9O0tsDL5BfKQEdyNxXMicg99Dn9ag2P4vhDk7PqrLxRsttd2jxtzU0p6jtRoqyqN0s4g/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;多种限流熔断能力建设&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;我们建设的高可用平台能力&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8623087621696801&quot; data-type=&quot;png&quot; data-w=&quot;1438&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/aCASXoK2nU4TEvT5Ajk9O0tsDL5BfKQEbnibUv7eHBibbMYsMx3kYFjg3mYKnXMjodyumLdP1hp0c5u96tzwfhfw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;部分限流效果图&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2064343163538874&quot; data-type=&quot;jpeg&quot; data-w=&quot;746&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/aCASXoK2nU4TEvT5Ajk9O0tsDL5BfKQEfKf6eby2OIVK2bKVRf8WyG00Rlae5I2GhvUoQYmk8s9T21ScHa4YFg/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2064343163538874&quot; data-type=&quot;jpeg&quot; data-w=&quot;746&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/aCASXoK2nU4TEvT5Ajk9O0tsDL5BfKQE3kgSdwwI2JVialX37MjjichzhicCrwdoiaxaia4BibrUICQzaabeB9FWNwEQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.19302949061662197&quot; data-type=&quot;jpeg&quot; data-w=&quot;746&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/aCASXoK2nU4TEvT5Ajk9O0tsDL5BfKQE81Qm01rAh4NOUzpONaeVuCQbLXiat0Hmx6T3OzMe0Mc9DAg5rCL95OQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;高可用平台图示&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;中间件全部接入&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;动态配置实时生效&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个资源和IP节点详细流量&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4589114194236926&quot; data-type=&quot;jpeg&quot; data-w=&quot;1874&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/aCASXoK2nU4TEvT5Ajk9O0tsDL5BfKQEXJVqDtqw7JH2pVTbb9pVR4EeiaIEGzqbVIYE3pZV0nag8oycRia16lxg/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;哪些是我们的&lt;strong&gt;关键指标&lt;/strong&gt;，哪些是我们的次要指标，这是消息治理的首要问题&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;哪些是我们的&lt;strong&gt;核心服务&lt;/strong&gt;，哪些是我们的非核心服务，这是服务治理的首要问题&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;源码&amp;amp;实战&lt;/strong&gt; 是一种比较好的工作学习方法&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p data-darkmode-color-16057140139831=&quot;rgb(162, 162, 162)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(68, 68, 68)&quot; data-style=&quot;padding-top: 7px; padding-bottom: 7px; color: rgb(68, 68, 68); font-size: 14px; line-height: 1.8; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Lucida Grande&amp;quot;, Arial, &amp;quot;Hiragino Sans GB&amp;quot;, 微软雅黑, &amp;quot;WenQuanYi Micro Hei&amp;quot;, STHeiti, SimSun, sans-serif; text-align: center;&quot;&gt;&lt;span&gt;The End&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-darkmode-color-16057140139831=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(0,0,0)&quot; data-style=&quot;padding-right: 10px; padding-left: 10px; font-size: 16px; color: black; line-height: 1.6; letter-spacing: 0px; word-break: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif;&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-style=&quot;padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: rgb(89, 89, 89);&quot;&gt;&lt;span&gt;如果你觉得这篇内容对你挺有启发，请你轻轻点下小手指，帮我两个小忙呗：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-style=&quot;padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: rgb(89, 89, 89);&quot;&gt;&lt;span&gt;1、点亮&lt;strong data-darkmode-color-16057140139831=&quot;rgb(71, 193, 168)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(71, 193, 168)&quot;&gt;「在看」&lt;/strong&gt;，让更多的人看到这篇满满干货的内容；&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-style=&quot;padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: rgb(89, 89, 89);&quot;&gt;&lt;span&gt;2、关注公众号「哈啰技术团队」，可第一时间收到最新技术推文。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-style=&quot;padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: rgb(89, 89, 89);&quot;&gt;&lt;span&gt;如果喜欢就点个👍喔，有您的喜欢⛽️，我们会更有动力输出有价值的技术分享滴；&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>635d394d7fe657ff67a1d4ca831f4680</guid>
<title>Go 工程师必学：Go 大杀器之跟踪剖析 trace</title>
<link>https://toutiao.io/k/uku37tq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;前段时间分享了《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247488702&amp;amp;idx=1&amp;amp;sn=b941ddb5473e8f6b85cd970e81225347&amp;amp;chksm=f90401e3ce7388f50f390eb4dfd887481a7866cb50011802d1916ec644c3ba5485ea0e423036&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Go 程序崩了？煎鱼教你用 PProf 工具来救火！&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Go 程序崩了？煎鱼教你用 PProf 工具来救火！&lt;/a&gt;》，但有时候单单使用 pprof 还不一定足够完整观查并解决问题，因为在真实的程序中还包含许多的隐藏动作，例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Goroutine 在执行时会做哪些操作？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Goroutine 执行/阻塞了多长时间？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Syscall 在什么时候被阻止？在哪里被阻止的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;谁又锁/解锁了 Goroutine ？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;GC 是怎么影响到 Goroutine 的执行的？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些东西用 pprof 是很难分析出来的，但如果你又想知道上述的答案的话，你可以用本章节的主角 &lt;code&gt;go tool trace&lt;/code&gt; 来打开新世界的大门。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一起愉快地开始吸鱼之路。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;初步了解&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;runtime/trace&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; trace.Start(os.Stderr)&lt;br/&gt; &lt;span&gt;defer&lt;/span&gt; trace.Stop()&lt;br/&gt;&lt;br/&gt; ch := &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;chan&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  ch &amp;lt;- &lt;span&gt;&quot;Go语言编程之旅&quot;&lt;/span&gt;&lt;br/&gt; }()&lt;br/&gt;&lt;br/&gt; &amp;lt;-ch&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生成跟踪文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; go run main.go 2&amp;gt; trace.out&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动可视化界面：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; go tool trace trace.out&lt;/span&gt;&lt;br/&gt;2019/06/22 16:14:52 Parsing trace...&lt;br/&gt;2019/06/22 16:14:52 Splitting trace...&lt;br/&gt;2019/06/22 16:14:52 Opening browser. Trace viewer is listening on http://127.0.0.1:57321&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看可视化界面：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6115107913669064&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4g53ZxH6zyGgeVNMPiaVoFic8sURt8uJBjYQm6ms6V7Uvqic177gAAeDG9cGJNfJgHqgZqJ0nIGXqicGw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;556&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;View trace：查看跟踪&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Goroutine analysis：Goroutine 分析&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Network blocking profile：网络阻塞概况&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Synchronization blocking profile：同步阻塞概况&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Syscall blocking profile：系统调用阻塞概况&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Scheduler latency profile：调度延迟概况&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;User defined tasks：用户自定义任务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;User defined regions：用户自定义区域&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Minimum mutator utilization：最低 Mutator 利用率&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;调度延迟概况&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在刚开始查看问题时，除非是很明显的现象，否则不应该一开始就陷入细节。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此我们一般先查看 “Scheduler latency profile”，我们能通过 Graph 看到整体的调用开销情况，如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4142502071251036&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4g53ZxH6zyGgeVNMPiaVoFic8HtPpGmUuMxFMRym9funFm7fcEAVia55GLxLub9M7k4o35zr3UobaqUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1207&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;演示程序比较简单，因此这里就两块，一个是 &lt;code&gt;trace&lt;/code&gt; 本身，另外一个是 &lt;code&gt;channel&lt;/code&gt; 的收发。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Goroutine 分析&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步看 “Goroutine analysis”，我们能通过这个功能看到整个运行过程中，每个函数块有多少个有 Goroutine 在跑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;观察每个的 Goroutine 的运行开销都花费在哪个阶段。如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6115107913669064&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4g53ZxH6zyGgeVNMPiaVoFic82SbHQK1AQg9byTxsbTmoul0VvE5bWb153GdKgOqLKU9mOQ4b4coh7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;556&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上图我们可以看到共有 3 个 goroutine，分别是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;runtime.main&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;runtime/trace.Start.func1&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;main.main.func1&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它们都做了些什么事呢，我们可以通过点击具体细项去观察。如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.23740392826643894&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4g53ZxH6zyGgeVNMPiaVoFic8m4x7KX6GVo8IyEuib9GcRRdfC0vaXXfyHaKjkEkI2u98tGgtolxUb6Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2342&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时也可以看到当前 Goroutine 在整个调用耗时中的占比，以及 GC 清扫和 GC 暂停等待的一些开销。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你觉得还不够，可以把图表下载下来分析，相当于把整个 Goroutine 运行时掰开来看了，这块能够很好的帮助我们&lt;strong&gt;对 Goroutine 运行阶段做一个的剖析，可以得知到底慢哪，然后再决定下一步的排查方向&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;名称&lt;/th&gt;&lt;th&gt;含义&lt;/th&gt;&lt;th&gt;耗时&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Execution Time&lt;/td&gt;&lt;td&gt;执行时间&lt;/td&gt;&lt;td&gt;3140ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Network Wait Time&lt;/td&gt;&lt;td&gt;网络等待时间&lt;/td&gt;&lt;td&gt;0ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Sync Block Time&lt;/td&gt;&lt;td&gt;同步阻塞时间&lt;/td&gt;&lt;td&gt;0ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Blocking Syscall Time&lt;/td&gt;&lt;td&gt;调用阻塞时间&lt;/td&gt;&lt;td&gt;0ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Scheduler Wait Time&lt;/td&gt;&lt;td&gt;调度等待时间&lt;/td&gt;&lt;td&gt;14ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GC Sweeping&lt;/td&gt;&lt;td&gt;GC 清扫&lt;/td&gt;&lt;td&gt;0ns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GC Pause&lt;/td&gt;&lt;td&gt;GC 暂停&lt;/td&gt;&lt;td&gt;0ns&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;查看跟踪&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在对当前程序的 Goroutine 运行分布有了初步了解后，我们再通过 “查看跟踪” 看看之间的关联性，如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.43798955613577023&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4g53ZxH6zyGgeVNMPiaVoFic8pkZj9cEQ0S9AQljIM0FLZMHF8ibJm66yksPibF9G1cbyMSgh9oibt0ThQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1532&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个跟踪图粗略一看，相信有的小伙伴会比较懵逼，我们可以依据注解一块块查看，如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;时间线：显示执行的时间单元，根据时间维度的不同可以调整区间，具体可执行 &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;?&lt;/code&gt; 查看帮助手册。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;堆：显示执行期间的内存分配和释放情况。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;协程：显示在执行期间的每个 Goroutine 运行阶段有多少个协程在运行，其包含 GC 等待（GCWaiting）、可运行（Runnable）、运行中（Running）这三种状态。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;OS 线程：显示在执行期间有多少个线程在运行，其包含正在调用 Syscall（InSyscall）、运行中（Running）这两种状态。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;虚拟处理器：每个虚拟处理器显示一行，虚拟处理器的数量一般默认为系统内核数。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;协程和事件：显示在每个虚拟处理器上有什么 Goroutine 正在运行，而连线行为代表事件关联。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4870967741935484&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4g53ZxH6zyGgeVNMPiaVoFic8mIX6Zu1HwjneTd46ustBzVTwBXDChdBLBuibNrlNHX619rddWXFGJcw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2480&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点击具体的 Goroutine 行为后可以看到其相关联的详细信息，这块很简单，大家实际操作一下就懂了。文字解释如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Start：开始时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Wall Duration：持续时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Self Time：执行时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Start Stack Trace：开始时的堆栈信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;End Stack Trace：结束时的堆栈信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Incoming flow：输入流&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Outgoing flow：输出流&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Preceding events：之前的事件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Following events：之后的事件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;All connected：所有连接的事件&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;查看事件&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以通过点击 View Options-Flow events、Following events 等方式，查看我们应用运行中的事件流情况。如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6050257731958762&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4g53ZxH6zyGgeVNMPiaVoFic8cX1Zria33z9jqiauicCJiaaKPG0bV8HaibknY0HaHMicGcj9Zjf2gucvRSfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3104&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过分析图上的事件流，我们可得知：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;这程序从 &lt;code&gt;G1 runtime.main&lt;/code&gt; 开始运行。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在运行时创建了 2 个 Goroutine：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;先是创建 &lt;code&gt;G18 runtime/trace.Start.func1&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;再是创建 &lt;code&gt;G19 main.main.func1&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时我们可以通过其 Goroutine Name 去了解它的调用类型。如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6516079632465543&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4g53ZxH6zyGgeVNMPiaVoFic8dB7s57VAOkXQibf0pBg12cbc18VPuKzpI11Hian4JX83ZQ0yZoib1d0HQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1306&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;runtime/trace.Start.func1&lt;/code&gt; 就是程序中在 &lt;code&gt;main.main&lt;/code&gt; 调用了 &lt;code&gt;runtime/trace.Start&lt;/code&gt; 方法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;紧接着该方法又利用协程创建了一个闭包 &lt;code&gt;func1&lt;/code&gt; 去进行调用。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里我们结合开头的代码去看的话，很明显就是 &lt;code&gt;ch&lt;/code&gt; 的输入输出的过程了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;实战演练&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;凌晨三点，突然生产环境突然出现了问题，机智的你早已埋好 &lt;code&gt;_ &quot;net/http/pprof&quot;&lt;/code&gt; 这个神奇的工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;被告警电话叫醒的你，迷迷糊糊地通过特定的方式执行了如下命令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; curl http://127.0.0.1:6060/debug/pprof/trace\?seconds\=20 &amp;gt; trace.out&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; go tool trace trace.out&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;查看跟踪&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你很快的看到了熟悉的 List 界面，然后不信邪点开了 View trace 界面，如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3107344632768362&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4g53ZxH6zyGgeVNMPiaVoFic8aKVW9ibuQiaiaNEicCLaHM8wnEvwcScQqo815HOqutia08ricBQccObEqpvw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2832&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完全看懵的你，稳住，对着合适的区域执行快捷键 &lt;code&gt;W&lt;/code&gt; 不断地放大时间线，如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.509180790960452&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4g53ZxH6zyGgeVNMPiaVoFic8r0254fzRIZC7niaovchrnataQIyHvkkxIOd7TSYU4agPV0J6VGvKyww/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2832&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过初步排查，你发现上述绝大部分的 G 竟然都和 &lt;code&gt;google.golang.org/grpc.(*Server).Serve.func&lt;/code&gt; 有关，关联的一大串也是 &lt;code&gt;Serve&lt;/code&gt; 所触发的相关动作。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3356790992258973&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4g53ZxH6zyGgeVNMPiaVoFic8ScgL5cHTPUCTNfvrOYoxRFvGCTymDwxa1eaGlpzPIjrmQHfs1f2r5w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2842&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候有经验的你心里已经有了初步结论，你可以继续追踪 View trace 深入进去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过建议先鸟瞰全貌，因此我们再往下看 “Network blocking profile” 和 “Syscall blocking profile” 所提供的信息。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;网络阻塞概况&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8361970217640321&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4g53ZxH6zyGgeVNMPiaVoFic85tQfYsjIGsMKR2XRBRLegqibNHia71xyV9MEohZWBiaCWElxld1icC5M9w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1746&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;系统调用阻塞概况&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6766304347826086&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4g53ZxH6zyGgeVNMPiaVoFic89mtvd0Kgh14zbTZls1XA2JrQ4Hpicts7xHh8aY9JYVQibsAhFonO7Rlg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1472&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过对以上三项的跟踪分析，加上这个泄露，这个阻塞的耗时，这个涉及的内部方法名，很明显就是哪位又忘记关闭客户端连接了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候我们就可以接下进行下一步的排查和修改了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过本文我们习得了 &lt;code&gt;go tool trace&lt;/code&gt; 的武林秘籍，它能够跟踪捕获各种执行中的事件，例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Goroutine 的创建/阻塞/解除阻塞。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Syscall 的进入/退出/阻止，GC 事件。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Heap 的大小改变。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Processor 启动/停止等等。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;希望你能够用好 Go 的两大杀器 pprof + trace 组合，此乃排查好搭档，谁用谁清楚，即使他并不是绝对的万能。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bdcf191ec6cf9a92b3b6ebd28fa50311</guid>
<title>如何低侵入的记录调用日志</title>
<link>https://toutiao.io/k/fqomx6r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.7368421052631579&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rrKZLnY0GwgS5XyvbhBKV6TZT7EsxtavguR1CMeL8vdcgeKxicaic6bLZAJuuotYmuU4SsnwYyswoZKNvKW1LcDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;38&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;点击上方&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;3&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icw1RQeGY4B4pntnmoM190ibfLnjBdPRUib80M3Cs4c2JMEHMt0ibKIg3Sc9OUbt1qCicFkGcSsBtBrU3UXPiaV73nDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;14&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;蓝字&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;关注我们&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span data-mid=&quot;&quot;&gt;01&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前阵子朋友他老大叫他实现这么一个功能，就是低侵入的记录接口每次的请求响应日志，然后并统计每次请求调用的成功、失败次数以及响应耗时，当时朋友的实现思路是在每个业务的controller的方法上加一个自定义注解，然后写一个aop，以这个自定义注解为pointcut来记录日志。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种AOP+注解来实现日志记录，应该是很常见的实现方式。然而朋友在落地的时候，发现项目要加自定义注解的地方太多。后面我就跟他说，那就不写注解，直接以形如下&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;execution&lt;/span&gt;(* &lt;span&gt;com&lt;/span&gt;&lt;span&gt;.github&lt;/span&gt;&lt;span&gt;.lybgeek&lt;/span&gt;&lt;span&gt;.logaop&lt;/span&gt;&lt;span&gt;.service&lt;/span&gt;..*.*(..))&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这样不行吗？他说他这个功能他老大是希望给各个项目组使用，像我上面的方法，估计行不通，我就问他说为啥行不通，他说各个项目的包名都不一样，如果我那种思路，他就说这样在代码里poincut不得要这么写&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;execution(&lt;span&gt;* com.github.lybgeek.a.service..*&lt;/span&gt;.*(..) &lt;br mpa-from-tpl=&quot;t&quot;/&gt;|| &lt;span&gt;* com.github.lybgeek.b.service..*&lt;/span&gt;.&lt;span&gt;*(..) || *&lt;/span&gt; com.github.lybgeek.c.service..&lt;span&gt;*.*&lt;/span&gt;(..) )&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样每次新加要日志记录，都得改切面代码，还不如用自定注解来的好。听完他的解释，我一脸黑人问号脸。于是就趁着5.1假期期间，写个demo实现上面的需求&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span data-mid=&quot;&quot;&gt;02&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;业务场景&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;低侵入的记录接口每次的请求响应日志，然后并统计每次请求调用的成功、失败次数以及响应耗时&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.42276422764227645&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xMkop2LgjnWJ2ibeqRr6ibJ0DACo8NUp2r61alcad7YrhtFnpOBUaD70nTfefkrffcx14CUeicLquAibJZ4rbwLmfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;246&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;这个业务需求应该算是很简单，实现的难点就在于&lt;/span&gt;&lt;strong&gt;低侵入&lt;/strong&gt;&lt;span&gt;，提到低侵入，我首先想到是使用者无需写代码，或者只需写少量代码或者仅需简单配置一下，最好能做到业务无感知。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span data-mid=&quot;&quot;&gt;03&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;实现手段&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我这边提供2种思路&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;javaagent + byte-buddy&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;springboot自动装配 + AOP&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9090909090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6SUs3WHn8P9QVFXd4lu03am0PtsHHPDtib3xhEFpJJw1TAbtMv0hrjSVKKgWm72fdhsPL6RbEbHZGTsiaFTiaxTYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;44&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9090909090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cXxu8rO9aeEoLicH7cEMZmicpEDhJicEicARW2EAzCkz4ClBBjTq0PvkSrINBsGDtfoSUsUxWKy1lXj5C6gvSfJLBA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;44&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;javaagent&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;1&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;什么是javaagent&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;javaagent是一个简单优雅的java agent,利用java自带的instrument特性+javassist/byte-buddy字节码可以实现对类的拦截或者增强。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;javaAgent 是运行在 main方法之前的拦截器，它内定的方法名叫 premain ，也就是说先执行 premain 方法然后再执行 main 方法&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;2&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;如何实现一个javaagent&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;示例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AgentDemo&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;premain&lt;/span&gt;&lt;span&gt;(String agentArgs, Instrumentation inst)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        System.out.println(&lt;span&gt;&quot;agentArgs : &quot;&lt;/span&gt; + agentArgs);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        inst.addTransformer(&lt;span&gt;new&lt;/span&gt; DefineTransformer(),&lt;span&gt;true&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DefineTransformer&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ClassFileTransformer&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] transform(ClassLoader loader, String className, Class&amp;lt;?&amp;gt; classBeingRedefined, ProtectionDomain protectionDomain, &lt;span&gt;byte&lt;/span&gt;[] classfileBuffer) &lt;span&gt;throws&lt;/span&gt; IllegalClassFormatException {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            System.out.println(&lt;span&gt;&quot;premain load Class:&quot;&lt;/span&gt; + className);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;return&lt;/span&gt; classfileBuffer;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;Manifest-Version&lt;/span&gt;: 1&lt;span&gt;.0&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;Implementation-Version&lt;/span&gt;: 0&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.1-SNAPSHOT&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;Premain-Class&lt;/span&gt;: &lt;span&gt;com&lt;/span&gt;&lt;span&gt;.github&lt;/span&gt;&lt;span&gt;.lybgeek&lt;/span&gt;&lt;span&gt;.agent&lt;/span&gt;&lt;span&gt;.ServiceLogAgent&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;Can-Redefine-Classes&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其中Premain-Class是必选项。MANIFEST.MF可以利用maven插件进行生成，插件如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;maven-jar-plugin&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.2.0&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;archive&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;&lt;span&gt;manifest&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;&amp;lt;&lt;span&gt;addClasspath&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;span&gt;addClasspath&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;/&lt;span&gt;manifest&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;&lt;span&gt;manifestEntries&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;&amp;lt;&lt;span&gt;Premain-Class&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.lybgeek.agent.ServiceLogAgent&lt;span&gt;&amp;lt;/&lt;span&gt;Premain-Class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;&amp;lt;&lt;span&gt;Agent-Class&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.lybgeek.agent.ServiceLogAgent&lt;span&gt;&amp;lt;/&lt;span&gt;Agent-Class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;&amp;lt;&lt;span&gt;Can-Redefine-Classes&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;span&gt;Can-Redefine-Classes&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;&amp;lt;&lt;span&gt;Can-Retransform-Classes&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;span&gt;Can-Retransform-Classes&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;/&lt;span&gt;manifestEntries&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;/&lt;span&gt;archive&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;/&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;3&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;业务代码如何使用javagent&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;java&lt;/span&gt; &lt;span&gt;-javaagent&lt;/span&gt;&lt;span&gt;:agentjar&lt;/span&gt;文件的位置 &lt;span&gt;[= 传入 premain的参数 ]&lt;/span&gt; &lt;span&gt;-jar&lt;/span&gt; 要运行的&lt;span&gt;jar&lt;/span&gt;文件&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;注&lt;/strong&gt;&lt;span&gt;：-javaagent一定要在-jar之前，不然不会生效&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9090909090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6SUs3WHn8P9QVFXd4lu03am0PtsHHPDtib3xhEFpJJw1TAbtMv0hrjSVKKgWm72fdhsPL6RbEbHZGTsiaFTiaxTYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;44&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9090909090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cXxu8rO9aeEoLicH7cEMZmicpEDhJicEicARW2EAzCkz4ClBBjTq0PvkSrINBsGDtfoSUsUxWKy1lXj5C6gvSfJLBA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;44&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;byte-buddy&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;1&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;什么是byte-buddy&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Byte Buddy是一个JVM的运行时代码生成器，你可以利用它创建任何类，且不像JDK动态代理那样强制实现一个接口。Byte Buddy还提供了简单的API，便于手工、通过Java Agent，或者在构建期间修改字节码&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;1&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;byte-buddy教程&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;注：&lt;/strong&gt; 如果再介绍byte-buddy使用，则篇幅会比较长，因此提供以下2个byte-buddy学习链接，感兴趣的朋友可以点击查看&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;https://blog.gmem.cc/byte-buddy-study-note&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;https://notes.diguage.com/byte-buddy-tutorial/&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;2.4444444444444446&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FsnuXk0t6LH3R7BicuMFRt0dIZZSAvaWdqCcKn7hCMGrdXOlhdHXZsnZD9jF4DVYF7BEhGymY9NWXoWtYHprg0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;18&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;如何利用javaagent + byte-buddy实现低侵入记录日志&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;2.3076923076923075&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CIpsyufmHGlKWFQ0s9VnoeClVtvoEyg8R37v9eicib9lE9INqRzwjR06DH5xeHVX81icLSWr94zdAaFPko9LBoU3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;26&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;01&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;编写agent入口类&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ServiceLogAgent&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String base_package_key = &lt;span&gt;&quot;agent.basePackage&quot;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;premain&lt;/span&gt;&lt;span&gt;(String agentArgs, Instrumentation inst)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        System.out.println(&lt;span&gt;&quot;loaded agentArgs ：&quot;&lt;/span&gt; + agentArgs);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        Properties properties = PropertiesUtils.getProperties(agentArgs);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        ServiceLogHelperFactory serviceLogHelperFactory = &lt;span&gt;new&lt;/span&gt; ServiceLogHelperFactory(properties);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        serviceLogHelperFactory.getServiceLogHelper().initTable();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        AgentBuilder.Transformer transformer = (builder, typeDescription, classLoader, javaModule) -&amp;gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;return&lt;/span&gt; builder&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    .method(ElementMatchers.&amp;lt;MethodDescription&amp;gt;any()) &lt;span&gt;// 拦截任意方法&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    .intercept(MethodDelegation.to(&lt;span&gt;new&lt;/span&gt; ServiceLogInterceptor(serviceLogHelperFactory))); &lt;span&gt;// 委托&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        };&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        AgentBuilder.Listener listener = &lt;span&gt;new&lt;/span&gt; AgentBuilder.Listener() {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;private&lt;/span&gt; Log log = LogFactory.getLog(AgentBuilder.Listener.class);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onDiscovery&lt;/span&gt;&lt;span&gt;(String s, ClassLoader classLoader, JavaModule javaModule, &lt;span&gt;boolean&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onTransformation&lt;/span&gt;&lt;span&gt;(TypeDescription typeDescription, ClassLoader classLoader, JavaModule javaModule, &lt;span&gt;boolean&lt;/span&gt; b, DynamicType dynamicType)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onIgnored&lt;/span&gt;&lt;span&gt;(TypeDescription typeDescription, ClassLoader classLoader, JavaModule javaModule, &lt;span&gt;boolean&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onError&lt;/span&gt;&lt;span&gt;(String s, ClassLoader classLoader, JavaModule javaModule, &lt;span&gt;boolean&lt;/span&gt; b, Throwable throwable)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                log.error(throwable.getMessage(),throwable);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onComplete&lt;/span&gt;&lt;span&gt;(String s, ClassLoader classLoader, JavaModule javaModule, &lt;span&gt;boolean&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        };&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;new&lt;/span&gt; AgentBuilder&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                .Default()&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;// 指定需要拦截的类&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                .type(ElementMatchers.nameStartsWith(properties.getProperty(base_package_key)))&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                .and(ElementMatchers.isAnnotatedWith(Service.class))&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                .transform(transformer)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                .with(listener)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                .installOn(inst);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;02&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;编写拦截器&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ServiceLogInterceptor {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; Log log = LogFactory.getLog(ServiceLogInterceptor.class);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; ServiceLogHelperFactory serviceLogHelperFactory;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; ServiceLogInterceptor(ServiceLogHelperFactory serviceLogHelperFactory) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;this&lt;/span&gt;.serviceLogHelperFactory = serviceLogHelperFactory;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@RuntimeType&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt; intercept(&lt;span&gt;@AllArguments&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;[] args, &lt;span&gt;@Origin&lt;/span&gt; Method method, &lt;span&gt;@SuperCall&lt;/span&gt; Callable&amp;lt;?&amp;gt; callable) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        long start = System.currentTimeMillis();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        long costTime = &lt;span&gt;0&lt;/span&gt;L;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;String&lt;/span&gt; status = ServiceLog.SUCEESS;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;Object&lt;/span&gt; result = &lt;span&gt;null&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;String&lt;/span&gt; respResult = &lt;span&gt;null&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;// 原有函数执行&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            result = callable.call();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            respResult = JsonUtils.object2json(result);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            log.error(e.getMessage(),e);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            status = ServiceLog.FAIL;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            respResult = e.getMessage();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        } &lt;span&gt;finally&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            costTime = System.currentTimeMillis() - start;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            saveLog(args, method, costTime, status, respResult);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; result;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; saveLog(&lt;span&gt;Object&lt;/span&gt;[] args, Method method, long costTime, &lt;span&gt;String&lt;/span&gt; status, &lt;span&gt;String&lt;/span&gt; respResult) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt;(!isSkipLog(method)){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            ServiceLog serviceLog = serviceLogHelperFactory.createServiceLog(args,method);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            serviceLog.setCostTime(costTime);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            serviceLog.setRespResult(respResult);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            serviceLog.setStatus(status);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            ServiceLogHelper serviceLogHelper = serviceLogHelperFactory.getServiceLogHelper();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            serviceLogHelper.saveLog(serviceLog);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; isSkipLog(Method method){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        ServiceLogProperties serviceLogProperties = serviceLogHelperFactory.getServiceLogProperties();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        List&amp;lt;&lt;span&gt;String&lt;/span&gt;&amp;gt; skipLogServiceNameList = serviceLogProperties.getSkipLogServiceNameList();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt;(!CollectionUtils.isEmpty(skipLogServiceNameList)){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;String&lt;/span&gt; currentServiceName = method.getDeclaringClass().getName() + ServiceLogProperties.CLASS_METHOD_SPITE + method.getName();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;return&lt;/span&gt; skipLogServiceNameList.contains(currentServiceName);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;03&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;通过maven将agent打包成jar&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;04&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;效果演示&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先idea在启动类的vm参数，加入形如下内容&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;-javaagen&lt;span&gt;t:F&lt;/span&gt;:\springboot-learning\springboot-agent\springboot-javaagent-&lt;span&gt;log&lt;/span&gt;\target\agent-&lt;span&gt;log&lt;/span&gt;.jar=F:\springboot-learning\springboot-agent\springboot-javaagent-&lt;span&gt;log&lt;/span&gt;\target\classes\agent.properties&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;效果图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.4405191059841384&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxLPcSWiaH6a1Bp8UIhul1yljib8pMZMJqnHlpBibfWibbCq1XicKJYTODTfAhOzHkgQdc8apgoVyMEEhkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1387&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.05780780780780781&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxLPcSWiaH6a1Bp8UIhul1yljAow71FuUWxYUSGCIfHUibdoFkFOnvOTOwF00A9XVN9FiaOhJtdb7aqXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1332&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.18686868686868688&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxLPcSWiaH6a1Bp8UIhul1yljJEx9JFa3oqk2UP2QhnWuYG8u7JqeYxaTxibrLtYJx0CeibEPCd9EbnCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;396&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;2.4444444444444446&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FsnuXk0t6LH3R7BicuMFRt0dIZZSAvaWdqCcKn7hCMGrdXOlhdHXZsnZD9jF4DVYF7BEhGymY9NWXoWtYHprg0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;18&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;如何利用自动装配+AOP实现低侵入记录日志&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;2.3076923076923075&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CIpsyufmHGlKWFQ0s9VnoeClVtvoEyg8R37v9eicib9lE9INqRzwjR06DH5xeHVX81icLSWr94zdAaFPko9LBoU3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;26&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;span&gt; 其实朋友那种方式也差不多可以了，只需把poincut的外移到配置文件文件即可&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;01&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;编写切面&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ServiceLogAdvice &lt;span&gt;implements&lt;/span&gt; MethodInterceptor {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; LogService logService;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; ServiceLogAdvice(LogService logService) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;this&lt;/span&gt;.logService = logService;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt; invoke(MethodInvocation invocation) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        long start = System.currentTimeMillis();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        long costTime = &lt;span&gt;0&lt;/span&gt;L;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;String&lt;/span&gt; status = ServiceLog.SUCEESS;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;Object&lt;/span&gt; result = &lt;span&gt;null&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;String&lt;/span&gt; respResult = &lt;span&gt;null&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;// 原有函数执行&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            result = invocation.proceed();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            respResult = &lt;span&gt;JSON&lt;/span&gt;.toJSONString(result);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Throwable e){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            log.error(e.getMessage(),e);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            status = ServiceLog.FAIL;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            respResult = e.getMessage();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        } &lt;span&gt;finally&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            costTime = System.currentTimeMillis() - start;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            saveLog(invocation.getArguments(), invocation.getMethod(), costTime, status, respResult);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; result;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; saveLog(&lt;span&gt;Object&lt;/span&gt;[] args, Method method, long costTime, &lt;span&gt;String&lt;/span&gt; status, &lt;span&gt;String&lt;/span&gt; respResult) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            ServiceLog serviceLog = ServiceLog.builder()&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                                    .serviceName(method.getDeclaringClass().getName())&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                                    .costTime(costTime)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                                    .methodName(method.getName())&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                                    .status(status)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                                    .reqArgs(&lt;span&gt;JSON&lt;/span&gt;.toJSONString(args))&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                                    .respResult(respResult).build();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;           logService.saveLog(serviceLog);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;02&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;注入切面bean&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Bean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; AspectJExpressionPointcutAdvisor &lt;span&gt;serviceLogAspectJExpressionPointcutAdvisor&lt;/span&gt;&lt;span&gt;(AopLogProperties aopLogProperties)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        AspectJExpressionPointcutAdvisor advisor = &lt;span&gt;new&lt;/span&gt; AspectJExpressionPointcutAdvisor();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        advisor.setExpression(aopLogProperties.getPointcut());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        advisor.setAdvice(serviceLogAdvice());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; advisor;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;03&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;编写自动装配类&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(AopLogProperties.class)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@ConditionalOnProperty&lt;/span&gt;(prefix = &lt;span&gt;&quot;servicelog&quot;&lt;/span&gt;,name = &lt;span&gt;&quot;enabled&quot;&lt;/span&gt;,havingValue = &lt;span&gt;&quot;true&quot;&lt;/span&gt;,matchIfMissing = &lt;span&gt;true&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AopLogAutoConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; JdbcTemplate jdbcTemplate;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; LogService &lt;span&gt;logService&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; LogServiceImpl(jdbcTemplate);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; ServiceLogAdvice &lt;span&gt;serviceLogAdvice&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ServiceLogAdvice(logService());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; AspectJExpressionPointcutAdvisor &lt;span&gt;serviceLogAspectJExpressionPointcutAdvisor&lt;/span&gt;&lt;span&gt;(AopLogProperties aopLogProperties)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        AspectJExpressionPointcutAdvisor advisor = &lt;span&gt;new&lt;/span&gt; AspectJExpressionPointcutAdvisor();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        advisor.setExpression(aopLogProperties.getPointcut());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        advisor.setAdvice(serviceLogAdvice());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; advisor;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;04&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;编写spring.factories&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;org.springframework.boot.autoconfigure.EnableAutoConfiguration=\&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;com&lt;/span&gt;.github.lybgeek.logaop.config.AopLogAutoConfiguration&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;05&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;效果演示&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在业务代码做如下配置&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.lybgeek&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;aoplog-springboot-starter&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;servicelog&lt;/span&gt;:&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;pointcut&lt;/span&gt;: &lt;span&gt;execution&lt;/span&gt;(* &lt;span&gt;com&lt;/span&gt;&lt;span&gt;.github&lt;/span&gt;&lt;span&gt;.lybgeek&lt;/span&gt;&lt;span&gt;.mock&lt;/span&gt;&lt;span&gt;.service&lt;/span&gt;&lt;span&gt;.client&lt;/span&gt;..*.*(..))&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;enabled&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.03139356814701378&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxLPcSWiaH6a1Bp8UIhul1yljFbKhklMzhDslHVLFF9JI06re7e9e46xY9nTydWFZaKXFtwdu59qAXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1306&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.1414141414141414&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxLPcSWiaH6a1Bp8UIhul1yljyOFSGcSeLVMZBz04S0zxibiaS7bRrqoIFYvSgP0YzeDnzy27vH9c9icUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;396&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span data-mid=&quot;&quot;&gt;05&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上主要列举了通过javaagent和aop加自动装配2两种方式来实现低侵入记录日志。其实这两种实现在一些开源的方案用得挺多的，比如byte-buddy在skywalking和arthas就有使用到，比如MethodInterceptor 在spring事务中就有用到。所以多看些源码，在设计方案时，有时候会产生意想不到的火花&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span data-mid=&quot;&quot;&gt;06&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;demo链接&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.3125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1YmOavZxdtMO4H2jQmHQPjj5spkbfSVBDXp5qK3AFk28IFicOuyG8bl4JvulVPhB1R6f12L9prx42JccKBibCbNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;32&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;https://github.com/lyb-geek/springboot-learning/tree/master/springboot-agent&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>