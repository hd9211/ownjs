<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ad74e7676957b46695d55c75973fcfc1</guid>
<title>2021 年快结束了！抓紧啦！</title>
<link>https://toutiao.io/k/809c4m6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>efb2268f95ba6208a7ec48d18fd62ddc</guid>
<title>快速找出redis大key删除</title>
<link>https://toutiao.io/k/yncwv3k</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div data-md-url=&quot;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&amp;amp;action=edit&amp;amp;isNew=1&amp;amp;type=10&amp;amp;token=181702514&amp;amp;lang=zh_CN&quot;&gt;&lt;p&gt;最近要做一些活动，需要考虑redis容量规划，发现redis集群内存使用率已经75%了，所以想着是不是能快速压缩。&lt;/p&gt;&lt;p&gt;所以第一目标就是找出那些key占用内存比较大，然后进行清理，比较幸运，真的找到了。&lt;/p&gt;&lt;p&gt;先说说redis的规划，因为redis计费完全基于内存，所以托管在云上，需要注意成本。&lt;/p&gt;&lt;p&gt;redis使用最怕的两个问题，第一就是不管业务性质，从不设置过期时间；第二就是单个key的内容过大。前者属于没有标准，后者属于使用不当。&lt;/p&gt;&lt;p&gt;当然最核心的问题还是redis使用规划，比如queue，storage，cache的使用必须区分，可以基于实例或分区进行隔离，方便后续迁移。&lt;/p&gt;&lt;p&gt;那么如何找出大的key，且业务上无用的key呢？使用python的rdbtools工具（https://github.com/sripathikrishnan/redis-rdb-tools），安装很简单：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pip3 install rdbtools&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后从阿里云导出rdb文件进行分析，它的用法很多，比如：&lt;/p&gt;&lt;p&gt;将rdb文件转成json格式：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rdb --command json dump.rdb&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;找出某些前缀的key及其存储信息：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rdb -c json --db 2 --type hash --key &quot;a.*&quot; dump.rdb&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也能分析内存信息，比如找出大于128字节，或top大的key：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rdb -c memory dump.rdb --bytes 128 -f memory.csv
rdb -c memory dump.rdb --largest 10 -f memory.csv&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那返回什么信息呢：database,type,key,size_in_bytes,encoding,num_elements,len_largest_element，过期时间；有这么多信息就能做很多事，可以用shell来处理。&lt;/p&gt;&lt;p&gt;另外rdb还有很多 —command，比如 json, diff, justkeys, justkeyvals and protocol。&lt;/p&gt;&lt;p&gt;rdb还有redis-memory-for-key工具，能查找单个key信息，比如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;redis-memory-for-key -s localhost -p 6379 -a mypassword person:1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;找到key就是删除，我是这么做的：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rdb --command justkeys --key &quot;test*&quot; redis.rdb &amp;gt;del.txt
cat del.txt  | while read LINE ; do redis-cli del $LINE; done;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;另外redis-cli的—bigkeys也能找出比较大的key，只不过对于不同redis类型，其计算的规则不一样，比如string类型按照实际存储大小计算，而list类型按照长度计算，所以功能比rdb小了不少。&lt;/p&gt;&lt;p title=&quot;MDH:PHA+5pyA6L+R6KaB5YGa5LiA5Lqb5rS75Yqo77yM6ZyA6KaB6ICD6JmRcmVkaXPlrrnph4/op4Tl&amp;#10;iJLvvIzlj5HnjrByZWRpc+mbhue+pOWGheWtmOS9v+eUqOeOh+W3sue7jzc1JeS6hu+8jOaJgOS7&amp;#10;peaDs+edgOaYr+S4jeaYr+iDveW/q+mAn+WOi+e8qeOAgjxtcGNoZWNrdGV4dCBjb250ZW50ZWRp&amp;#10;dGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0NzczNTYwNV8wLjg2MDQwMjc5NDg5NTA3MzkiPjwvbXBj&amp;#10;aGVja3RleHQ+PC9wPjxwPjxicj48L3A+PHA+5omA5Lul56ys5LiA55uu5qCH5bCx5piv5om+5Ye6&amp;#10;6YKj5Lqba2V55Y2g55So5YaF5a2Y5q+U6L6D5aSn77yM54S25ZCO6L+b6KGM5riF55CG77yM5q+U&amp;#10;6L6D5bm46L+Q77yM55yf55qE5om+5Yiw5LqG44CCPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJs&amp;#10;ZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjA2XzAuMTAzMjQ4OTMxODkzMzQxNjEiPjwvbXBjaGVj&amp;#10;a3RleHQ+PC9wPjxwPjxicj48L3A+PHA+5YWI6K+06K+0cmVkaXPnmoTop4TliJLvvIzlm6DkuLpy&amp;#10;ZWRpc+iuoei0ueWujOWFqOWfuuS6juWGheWtmO+8jOaJgOS7peaJmOeuoeWcqOS6keS4iu+8jOmc&amp;#10;gOimgeazqOaEj+aIkOacrOOAgjxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBp&amp;#10;ZD0iMTYzOTc0NzczNTYwN18wLjA2NzQwMTUwOTQ2MzczOTQ2Ij48L21wY2hlY2t0ZXh0PjwvcD48&amp;#10;cD48YnI+PC9wPjxwPnJlZGlz5L2/55So5pyA5oCV55qE5Lik5Liq6Zeu6aKY77yM56ys5LiA5bCx&amp;#10;5piv5LiN566h5Lia5Yqh5oCn6LSo77yM5LuO5LiN6K6+572u6L+H5pyf5pe26Ze077ybPG1wY2hl&amp;#10;Y2t0ZXh0IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjEwXzAuNDAzMjEw&amp;#10;MjMwNDQyNjQ2OCI+PC9tcGNoZWNrdGV4dD7nrKzkuozlsLHmmK/ljZXkuKprZXnnmoTlhoXlrrno&amp;#10;v4flpKfjgII8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3&amp;#10;MzU2MDhfMC4wOTk3NDE1ODY3ODc5MjYzMyI+PC9tcGNoZWNrdGV4dD7liY3ogIXlsZ7kuo7msqHm&amp;#10;nInmoIflh4bvvIzlkI7ogIXlsZ7kuo7kvb/nlKjkuI3lvZPjgII8bXBjaGVja3RleHQgY29udGVu&amp;#10;dGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MDlfMC45MzAyNTExMDk4NDU3NTY3Ij48&amp;#10;L21wY2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPuW9k+eEtuacgOaguOW/g+eahOmXrumimOi/&amp;#10;mOaYr3JlZGlz5L2/55So6KeE5YiS77yM5q+U5aaCcXVldWXvvIxzdG9yYWdl77yMY2FjaGXnmoTk&amp;#10;vb/nlKjlv4XpobvljLrliIbvvIzlj6/ku6Xln7rkuo7lrp7kvovmiJbliIbljLrov5vooYzpmpTn&amp;#10;prvvvIzmlrnkvr/lkI7nu63ov4Hnp7vjgII8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJm&amp;#10;YWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MTFfMC43NzkwMTMzMTI2MjczNDgiPjwvbXBjaGVja3RleHQ+&amp;#10;PC9wPjxwPjxicj48L3A+PHA+6YKj5LmI5aaC5L2V5om+5Ye65aSn55qEa2V577yM5LiU5Lia5Yqh&amp;#10;5LiK5peg55So55qEa2V55ZGi77yfPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2Ui&amp;#10;IGlkPSIxNjM5NzQ3NzM1NjEyXzAuODk4OTcyMDY3MjY3MDYxMSI+PC9tcGNoZWNrdGV4dD7kvb/n&amp;#10;lKhweXRob27nmoRyZGJ0b29sc+W3peWFt++8iGh0dHBzOi8vZ2l0aHViLmNvbS9zcmlwYXRoaWty&amp;#10;aXNobmFuL3JlZGlzLXJkYi10b29sc++8ie+8jOWuieijheW+iOeugOWNle+8mjxtcGNoZWNrdGV4&amp;#10;dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0NzczNTYxM18wLjg3NDYxMTEzODY3&amp;#10;MzQ2ODUiPjwvbXBjaGVja3RleHQ+PC9wPjxwPjxicj48L3A+PHA+YGBgPG1wY2hlY2t0ZXh0IGNv&amp;#10;bnRlbnRlZGl0YWJsZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjE0XzAuNDExODQ4MzQ0MjIwNjUx&amp;#10;MSI+PC9tcGNoZWNrdGV4dD48L3A+PHA+cGlwMyBpbnN0YWxsIHJkYnRvb2xzPG1wY2hlY2t0ZXh0&amp;#10;IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjE1XzAuNTU4MzUxNjYyMjI4&amp;#10;NDQ5NSI+PC9tcGNoZWNrdGV4dD48L3A+PHA+YGBgPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJs&amp;#10;ZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjE2XzAuMzAyOTMzODkxMzM5NTgwNSI+PC9tcGNoZWNr&amp;#10;dGV4dD48L3A+PHA+PGJyPjwvcD48cD7nhLblkI7ku47pmL/ph4zkupHlr7zlh7pyZGLmlofku7bo&amp;#10;v5vooYzliIbmnpDvvIzlroPnmoTnlKjms5XlvojlpJrvvIzmr5TlpoLvvJo8bXBjaGVja3RleHQg&amp;#10;Y29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MTdfMC42MTI2Mzg5OTQ4OTI2&amp;#10;MjE2Ij48L21wY2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPuWwhnJkYuaWh+S7tui9rOaIkGpz&amp;#10;b27moLzlvI/vvJo8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3&amp;#10;NDc3MzU2MThfMC43NjcxMzgwMTQxOTA1MTY2Ij48L21wY2hlY2t0ZXh0PjwvcD48cD48YnI+PC9w&amp;#10;PjxwPmBgYDxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0Nzcz&amp;#10;NTYxOV8wLjk0ODE4MDUxNjI3NDI2MDciPjwvbXBjaGVja3RleHQ+PC9wPjxwPnJkYiAtLWNvbW1h&amp;#10;bmQganNvbiBkdW1wLnJkYjxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0i&amp;#10;MTYzOTc0NzczNTYyMF8wLjgxMzY0OTI4NDkyMTgzNjIiPjwvbXBjaGVja3RleHQ+PC9wPjxwPmBg&amp;#10;YDxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0NzczNTYyMV8w&amp;#10;LjM2ODUwOTU4OTA2NTE5MTkzIj48L21wY2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPuaJvuWH&amp;#10;uuafkOS6m+WJjee8gOeahGtleeWPiuWFtuWtmOWCqOS/oeaBr++8mjxtcGNoZWNrdGV4dCBjb250&amp;#10;ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0NzczNTYyMl8wLjA3ODkxMzQwMjgyNzQ4OTM4&amp;#10;Ij48L21wY2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPmBgYDxtcGNoZWNrdGV4dCBjb250ZW50&amp;#10;ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0NzczNTYyM18wLjEwNTM1ODgxMDA4MTU4NjMyIj48&amp;#10;L21wY2hlY2t0ZXh0PjwvcD48cD5yZGIgLWMganNvbiAtLWRiIDIgLS10eXBlIGhhc2ggLS1rZXkg&amp;#10;ImEuKiIgZHVtcC5yZGI8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2&amp;#10;Mzk3NDc3MzU2MjRfMC43NTIxNjgwNDIxMjc5MDA3Ij48L21wY2hlY2t0ZXh0PjwvcD48cD5gYGA8&amp;#10;bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MjVfMC4z&amp;#10;NTk2MTU1MDc3NTY1MzEzIj48L21wY2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPuS5n+iDveWI&amp;#10;huaekOWGheWtmOS/oeaBr++8jOavlOWmguaJvuWHuuWkp+S6jjEyOOWtl+iKgu+8jOaIlnRvcOWk&amp;#10;p+eahGtlee+8mjxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0&amp;#10;NzczNTYyNl8wLjc1NTE2NDc4NjE2MTcwMjEiPjwvbXBjaGVja3RleHQ+PC9wPjxwPjxicj48L3A+&amp;#10;PHA+YGBgPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1&amp;#10;NjI3XzAuNjgzNjY4MTYwMDQxNzk5NSI+PC9tcGNoZWNrdGV4dD48L3A+PHA+cmRiIC1jIG1lbW9y&amp;#10;eSBkdW1wLnJkYiAtLWJ5dGVzIDEyOCAtZiBtZW1vcnkuY3N2PG1wY2hlY2t0ZXh0IGNvbnRlbnRl&amp;#10;ZGl0YWJsZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjI4XzAuOTc4Mzc3NTMwNDEwMTYzNCI+PC9t&amp;#10;cGNoZWNrdGV4dD48L3A+PHA+cmRiIC1jIG1lbW9yeSBkdW1wLnJkYiAtLWxhcmdlc3QgMTAgLWYg&amp;#10;bWVtb3J5LmNzdjxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0&amp;#10;NzczNTYyOV8wLjE5MzE3NDE3MDMzMzYxMjk1Ij48L21wY2hlY2t0ZXh0PjwvcD48cD5gYGA8bXBj&amp;#10;aGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MzBfMC4xMTY1&amp;#10;NzA1NzI3NTIzNDk4MyI+PC9tcGNoZWNrdGV4dD48L3A+PHA+PGJyPjwvcD48cD7pgqPov5Tlm57k&amp;#10;u4DkuYjkv6Hmga/lkaLvvJo8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9&amp;#10;IjE2Mzk3NDc3MzU2MzJfMC43MTc2Nzc2NTA3ODU1MzU4Ij48L21wY2hlY2t0ZXh0PmRhdGFiYXNl&amp;#10;LHR5cGUsa2V5LHNpemVfaW5fYnl0ZXMsZW5jb2RpbmcsbnVtX2VsZW1lbnRzLGxlbl9sYXJnZXN0&amp;#10;X2VsZW1lbnTvvIzov4fmnJ/ml7bpl7TvvJs8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJm&amp;#10;YWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MzNfMC4yMDI1OTc3NzcxNTk3OTk3NiI+PC9tcGNoZWNrdGV4&amp;#10;dD7mnInov5nkuYjlpJrkv6Hmga/lsLHog73lgZrlvojlpJrkuovvvIzlj6/ku6XnlKhzaGVsbOad&amp;#10;peWkhOeQhuOAgjxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0&amp;#10;NzczNTYzMV8wLjgyMDE2OTIwOTE4NzUwMyI+PC9tcGNoZWNrdGV4dD48L3A+PHA+PGJyPjwvcD48&amp;#10;cD7lj6blpJZyZGLov5jmnInlvojlpJogLS1jb21tYW5k77yM5q+U5aaCIGpzb24sIGRpZmYsIGp1&amp;#10;c3RrZXlzLCBqdXN0a2V5dmFscyBhbmQgcHJvdG9jb2zjgII8bXBjaGVja3RleHQgY29udGVudGVk&amp;#10;aXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MzRfMC44NzIzNjgzNzgxOTkxMDQzIj48L21w&amp;#10;Y2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPnJkYui/mOaciXJlZGlzLW1lbW9yeS1mb3Ita2V5&amp;#10;5bel5YW377yM6IO95p+l5om+5Y2V5Liqa2V55L+h5oGv77yM5q+U5aaC77yaPG1wY2hlY2t0ZXh0&amp;#10;IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjM1XzAuODM2MDc1MDk0Nzc1&amp;#10;MDI2OCI+PC9tcGNoZWNrdGV4dD48L3A+PHA+PGJyPjwvcD48cD5gYGA8bXBjaGVja3RleHQgY29u&amp;#10;dGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MzZfMC40NDIyOTA3MTk3Nzk1MTE2&amp;#10;Ij48L21wY2hlY2t0ZXh0PjwvcD48cD5yZWRpcy1tZW1vcnktZm9yLWtleSAtcyBsb2NhbGhvc3Qg&amp;#10;LXAgNjM3OSAtYSBteXBhc3N3b3JkIHBlcnNvbjoxPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJs&amp;#10;ZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjM3XzAuMTcxNjAyNzkxNTgwMDI4OSI+PC9tcGNoZWNr&amp;#10;dGV4dD48L3A+PHA+YGBgPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2UiIGlkPSIx&amp;#10;NjM5NzQ3NzM1NjM4XzAuODUwODQ3NDI0NDg2MDE2MiI+PC9tcGNoZWNrdGV4dD48L3A+PHA+PGJy&amp;#10;PjwvcD48cD7mib7liLBrZXnlsLHmmK/liKDpmaTvvIzmiJHmmK/ov5nkuYjlgZrnmoTvvJo8bXBj&amp;#10;aGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MzlfMC4zNjYy&amp;#10;NDU0NzA5MzU5NTM3Ij48L21wY2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPmBgYDxtcGNoZWNr&amp;#10;dGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0NzczNTY0MF8wLjUxMjk0NDgy&amp;#10;MDkyNTM4NTciPjwvbXBjaGVja3RleHQ+PC9wPjxwPnJkYiAtLWNvbW1hbmQganVzdGtleXMgLS1r&amp;#10;ZXkgInRlc3QqIiByZWRpcy5yZGIgJmd0O2RlbC50eHQ8bXBjaGVja3RleHQgY29udGVudGVkaXRh&amp;#10;YmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2NDFfMC4zNzYxNTE3Njk4MTY4MDk1MyI+PC9tcGNo&amp;#10;ZWNrdGV4dD48L3A+PHA+Y2F0IGRlbC50eHQmbmJzcDsgfCB3aGlsZSByZWFkIExJTkUgOyBkbyBy&amp;#10;ZWRpcy1jbGkgZGVsICRMSU5FOyBkb25lOzxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZh&amp;#10;bHNlIiBpZD0iMTYzOTc0NzczNTY0Ml8wLjQzNzg1NDAwMDg1NTQyMjE0Ij48L21wY2hlY2t0ZXh0&amp;#10;PjwvcD48cD5gYGA8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3&amp;#10;NDc3MzU2NDNfMC4zOTc1NDIxNzM3ODY5OTE1Ij48L21wY2hlY2t0ZXh0PjwvcD48cD7igIs8YnI+&amp;#10;PC9wPjxwPuWPpuWklnJlZGlzLWNsaeeahC0tYmlna2V5c+S5n+iDveaJvuWHuuavlOi+g+Wkp+ea&amp;#10;hGtlee+8jOWPquS4jei/h+WvueS6juS4jeWQjHJlZGlz57G75Z6L77yM5YW26K6h566X55qE6KeE&amp;#10;5YiZ5LiN5LiA5qC377yM5q+U5aaCc3RyaW5n57G75Z6L5oyJ54Wn5a6e6ZmF5a2Y5YKo5aSn5bCP&amp;#10;6K6h566X77yM6ICMbGlzdOexu+Wei+aMieeFp+mVv+W6puiuoeeul++8jOaJgOS7peWKn+iDveav&amp;#10;lHJkYuWwj+S6huS4jeWwkeOAgjxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBp&amp;#10;ZD0iMTYzOTc0NzczNTY0NF8wLjY2MDI1OTIxNTU0ODMzODIiPjwvbXBjaGVja3RleHQ+PC9wPjxw&amp;#10;Pjxicj48L3A+&quot;/&gt;&lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8b864aa3691bd6a86f9ae72b42d2a8ed</guid>
<title>go-zero 分布式事务最佳实践</title>
<link>https://toutiao.io/k/apniu10</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;背景&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着业务的快速发展、业务复杂度越来越高，微服务作为最佳解决方案之一，它解耦服务，降低复杂度，增加可维护性的同时，也带来一部分新问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们需要跨服务保证数据一致性时，原先的数据库事务力不从心，无法将跨库、跨服务的多个操作放在一个事务中。这样的应用场景非常多，我们可以列举出很多：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;跨行转账场景，数据不在一个数据库，但需要保证余额扣减和余额增加要么同时成功，要么同时失败&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发布文章后，更新文章总数等统计信息。其中发布文章和更新统计信息通常在不同的微服务中&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微服务化之后的订单系统&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;出行旅游需要在第三方系统同时定几张票&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面对这些本地事务无法解决的场景，我们需要分布式事务的解决方案，保证跨服务、跨数据库更新数据的一致性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;go-zero 与 dtm 强强联合，推出了在 go-zero 中无缝接入 dtm 的极简方案，让分布式事务的使用从未如此简单。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;运行一个例子&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看一个可运行的例子，然后再看如何自己开发完成一个完整的分布式事务&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面以 etcd 作为注册服务中心，可以按照如下步骤运行一个 go-zero 的示例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;MicroService:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Driver:&lt;/span&gt; &lt;span&gt;&#x27;dtm-driver-gozero&#x27;&lt;/span&gt; &lt;span&gt;# 配置dtm使用go-zero的微服务协议&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Target:&lt;/span&gt; &lt;span&gt;&#x27;etcd://localhost:2379/dtmservice&#x27;&lt;/span&gt; &lt;span&gt;# 把dtm注册到etcd的这个地址&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;EndPoint:&lt;/span&gt; &lt;span&gt;&#x27;localhost:36790&#x27;&lt;/span&gt; &lt;span&gt;# dtm的本地地址&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 前提：已安装etcd&lt;/span&gt;&lt;br/&gt;etcd&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 前提：已配置好dtm的数据库链接&lt;/span&gt;&lt;br/&gt;go run app/main.go dev&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;git &lt;span&gt;clone&lt;/span&gt; github.com/yedf/dtmdriver-clients &amp;amp;&amp;amp; &lt;span&gt;cd&lt;/span&gt; dtmdriver-clients&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; gozero/trans &amp;amp;&amp;amp; go run trans.go&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 在dtmdriver-clients的目录下&lt;/span&gt;&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; gozero/app &amp;amp;&amp;amp; go run main.go&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你在 trans 的日志中看到&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;2021/12/03 15:44:05 transfer out 30 cents from 1&lt;br/&gt;2021/12/03 15:44:05 transfer &lt;span&gt;in&lt;/span&gt; 30 cents to 2&lt;br/&gt;2021/12/03 15:44:05 transfer out 30 cents from 1&lt;br/&gt;2021/12/03 15:44:05 transfer out 30 cents from 1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那就是事务正常完成了&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;开发接入&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考 yedf/dtmdriver-clients 的代码&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 下面这行导入gozero的dtm驱动&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; _ &lt;span&gt;&quot;github.com/yedf/dtmdriver-gozero&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 使用dtm的客户端dtmgrpc之前，需要执行下面这行调用，告知dtmgrpc使用gozero的驱动来如何处理gozero的url&lt;/span&gt;&lt;br/&gt;err := dtmdriver.Use(&lt;span&gt;&quot;dtm-driver-gozero&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;// check err&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// dtm已经通过前面的配置，注册到下面这个地址，因此在dtmgrpc中使用该地址&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; dtmServer = &lt;span&gt;&quot;etcd://localhost:2379/dtmservice&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 下面从配置文件中Load配置，然后通过BuildTarget获得业务服务的地址&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; c zrpc.RpcClientConf&lt;br/&gt;conf.MustLoad(*configFile, &amp;amp;c)&lt;br/&gt;busiServer, err := c.BuildTarget()&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// 使用dtmgrpc生成一个消息型分布式事务并提交&lt;/span&gt;&lt;br/&gt; gid := dtmgrpc.MustGenGid(dtmServer)&lt;br/&gt; msg := dtmgrpc.NewMsgGrpc(dtmServer, gid).&lt;br/&gt;    &lt;span&gt;// 事务的第一步为调用trans.TransSvcClient.TransOut&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 可以从trans.pb.go中找到上述方法对应的Method名称为&quot;/trans.TransSvc/TransOut&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// dtm需要从dtm服务器调用该方法，所以不走强类型，而是走动态的url: busiServer+&quot;/trans.TransSvc/TransOut&quot;&lt;/span&gt;&lt;br/&gt;  Add(busiServer+&lt;span&gt;&quot;/trans.TransSvc/TransOut&quot;&lt;/span&gt;, &amp;amp;busi.BusiReq{Amount: &lt;span&gt;30&lt;/span&gt;, UserId: &lt;span&gt;1&lt;/span&gt;}).&lt;br/&gt;  Add(busiServer+&lt;span&gt;&quot;/trans.TransSvc/TransIn&quot;&lt;/span&gt;, &amp;amp;busi.BusiReq{Amount: &lt;span&gt;30&lt;/span&gt;, UserId: &lt;span&gt;2&lt;/span&gt;})&lt;br/&gt; err := msg.Submit()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个开发接入的过程很少，前面的注释已经很清晰，就不再赘述了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;注意事项&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在开发接入的过程中，去找 &lt;code&gt;*.pb.go&lt;/code&gt; 的文件中的 &lt;code&gt;grpc&lt;/code&gt; 访问的方法路径时候，一定要找 &lt;code&gt;invoke&lt;/code&gt; 的路径&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3535528596187175&quot; data-type=&quot;png&quot; data-w=&quot;1154&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg1hYSiaLzdJupGxNcwX8U59pXebEj5w3N2UV7KpXf3ZM3EW6IfNA3Jb8a7RThxcDHPoqUKdNiaI5vVg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7199017199017199&quot; data-type=&quot;png&quot; data-w=&quot;814&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg1hYSiaLzdJupGxNcwX8U59plJKzQOGOwBAic4aqQicsZkqj1lcEzSBibyCg3yBkicC2YiaJdrLsp9WQNibw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;深入理解动态调用&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 go-zero 使用 dtm 的分布式事务时，许多的调用是从 dtm 服务器发起的，例如 TCC 的 &lt;code&gt;Confirm/Cancel&lt;/code&gt;，&lt;code&gt;SAGA/MSG&lt;/code&gt; 的所有调用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;dtm无需知道组成分布式事务的相关业务api的强类型，它是动态的调用这些api。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;grpc的调用，可以类比于HTTP的POST，其中：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;c.BuildTarget()&lt;/code&gt; 产生的 target 类似于 URL 中的 Host&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;/trans.TransSvc/TransOut&lt;/code&gt; 相当于 URL 中的 Path&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&amp;amp;busi.BusiReq{Amount: 30, UserId: 1}&lt;/code&gt; 相当于 Post 中 Body&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;pb.Response&lt;/code&gt; 相当于 HTTP 请求的响应&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过下面这部分代码，dtm 就拿到了完整信息，就能够发起完整的调用了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Add(busiServer+&quot;/trans.TransSvc/TransOut&quot;, &amp;amp;busi.BusiReq{Amount: 30, UserId: 1})&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;更加完整的例子&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;热心的社区同学 &lt;code&gt;Mikael&lt;/code&gt; 帮忙写了一个内容更加丰富的例子，结合实际应用和子事务屏障，完整的演示了一个线上实际运行的分布式事务，有兴趣的同学可以参考：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://github.com/Mikaelemmmm/gozerodtm&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;其他方式接入&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;go-zero 的微服务还有非 &lt;code&gt;etcd&lt;/code&gt; 的其他方式，我们依次说明他们的接入方式&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;直连&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于直连这种方式，您只需要在上面 &lt;code&gt;dtm&lt;/code&gt; 的 &lt;code&gt;etcd&lt;/code&gt; 配置基础上，将 &lt;code&gt;Target&lt;/code&gt; 设置为空字符串即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直连的情况，不需要将 &lt;code&gt;dtm&lt;/code&gt; 注册到注册中心。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;K8S&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于 &lt;code&gt;K8S&lt;/code&gt; 这种方式，您只需要在上面 &lt;code&gt;dtm&lt;/code&gt; 的 &lt;code&gt;etcd&lt;/code&gt; 配置基础上，将 &lt;code&gt;Target&lt;/code&gt; 设置为空字符串即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 &lt;code&gt;K8S&lt;/code&gt; 中，将服务注册到 &lt;code&gt;K8S&lt;/code&gt; 中，是由 &lt;code&gt;deployment.yaml&lt;/code&gt; 完成的，应用内部，不需要进行注册。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;直播分享预告&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;go-zero 作者和我（dtm 作者）将在12月22日晚21点，在 &lt;code&gt;Go 夜读&lt;/code&gt;，联合做一场《go-zero 的分布式事务实践》的直播分享，将会带来更多更深入的讨论。欢迎大家届时参加。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直播地址为：https://live.bilibili.com/11171965&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;小结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一次 &lt;code&gt;go-zero&lt;/code&gt; 与 &lt;code&gt;dtm&lt;/code&gt; 的合作，在 &lt;code&gt;go&lt;/code&gt; 生态中，打造了首个原生支持分布式事务的微服务解决方案，意义重大。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;go-zero项目地址：https://github.com/zeromicro/go-zero&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;dtm项目地址：https://github.com/yedf/dtm&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎大家使用 &lt;code&gt;go-zero&lt;/code&gt; 和 &lt;code&gt;dtm&lt;/code&gt;，使用我们原生的 &lt;strong&gt;分布式事务的微服务解决方案&lt;/strong&gt;，并 &lt;strong&gt;star&lt;/strong&gt; 支持我们！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;微信交流群&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关注『&lt;strong&gt;微服务实践&lt;/strong&gt;』公众号并点击 &lt;strong&gt;交流群&lt;/strong&gt; 获取社区群二维码。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4766c139b6133716e388811a244cce1d</guid>
<title>想写好前端，先练好内功</title>
<link>https://toutiao.io/k/emgyxgq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section class=&quot;mp_profile_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxNzk1MjQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0Nwvv72YkFO0qPibDKicOCsfltiaE9070DOu4iahXnicYwRIHcxe9VBicAy45MkPqy8nZzLTVibugOtV0ORFcg/0?wx_fmt=png&quot; data-nickname=&quot;程序员成长指北&quot; data-alias=&quot;coder_growth&quot; data-signature=&quot;专注 Node.js 技术栈分享，从 前端 到 Node.js 再到 后端数据库，祝您成为优秀的高级 Node.js 全栈工程师。一个有趣的且乐于分享的人。座右铭：今天未完成的，明天更不会完成。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大厂技术&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;高级前端&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Node进阶&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;点击上方 &lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(0, 128, 255)&quot;&gt;程序员成长指北&lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;，关注公众号&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回复&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，加入高级Node交流群&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5606936416184971&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQTyc7BgSbngSZ43tsYtJK1kmU556IzJtxLskCOffOm1BHoVric3bOgazGroBW4ALY8KaPXGU8zicWMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;692&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;封不平听在耳里，暗叫：“到这地步，我再能隐藏甚么？”仰天一声清啸，斜行而前，长剑横削直击，迅捷无比，未到五六招，剑势中已发出隐隐风声。他出剑越来越快，风声也是渐响，剑锋上所发出的一股劲气渐渐扩展，旁观众人只觉寒气逼人，脸上、手上被疾风刮得隐隐生疼，不由自主的后退，围在相斗两人身周的圈子渐渐扩大，竟有四五丈方圆。泰山派的一个道士在旁说道：“气宗的徒儿剑法高，剑宗的师叔内力强，这到底怎么搞的？华山派的气宗、剑宗，这可不是颠倒来玩了么？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;《笑傲江湖》中的“剑宗余孽”封不平本想仗着有嵩山派撑腰，一举夺了华山掌门宝座。可打了半天剑法上占不了便宜，最后只能使出“狂风快剑”，企图以内力取胜。可见，任何高明武功若无内功心法相辅，也是徒劳无功。&lt;/p&gt;&lt;p&gt;说回前端，如今的前端技术栈就如同武侠小说中的江湖一样，各门各派自成一体，可谓“百花齐放”、“百家争鸣”。&lt;/p&gt;&lt;p&gt;这边 React 、Vue 、AngularJS 、JQuery 谁还都谈不上能一统江湖。“武林新贵” Flux 、Redux 、Mobx 们已经忙着争夺谁是数据流框架老大。Native 端 RN 刚偃旗息鼓，Weex 就大有“ I&#x27;m the everywhere ”之势。连备受争议的 GraphQL 内部都还有 Apollo、Relay 掐来掐去。&lt;/p&gt;&lt;p&gt;常听到身边的前端工程师抱怨，上周刚发布的 XXX 新版本文档还没看，今天 YYY 公司又发布了新框架，到底先学哪个？其实，无论是哪种框架哪项技术都是解决实际业务需求的手段、方法，和武林中各门各派的武功招式是一样的，各有所长，各有各的独到之处。&lt;/p&gt;&lt;p&gt;我们学习技术，除了了解具体使用方法，还需要掌握技术背后的设计理念和工程思想，这些背后的东西是我们&lt;strong&gt;技术选型的依据，是架构设计的基础，是软件系统的灵魂&lt;/strong&gt;。这就好比是的武功中“内功心法”催动拳脚刀枪，一招一式，虎虎生风，纵有大敌当前，亦是淡然自若。&lt;/p&gt;&lt;p&gt;接下来分别谈一下三种工程思想，分别是：“开闭原则”、“函数式编程”和“消息机制”，这三种工程思想在后端开发中均有广泛的使用，容易被大家忽略的是目前很多前端技术框架也应用了这三种思想，以下结合具体案例分析，希望能够帮助大家加深对技术本身的理解。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;开闭原则&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;说到面向对象设计，大部分人脑海中闪过的恐怕都是“23种设计模式”。设计模式代表的是业务场景中总结出的最佳实现方式，属于实践的范畴，在其之上是更为重要的“SOLID”五大原则：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Single Responsibility Principle 单一责任原则&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;The Open Closed Principle 开放封闭原则&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;The Liskov Substitution Principle 里氏替换原则&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;The Dependency Inversion Principle 依赖倒置原则&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;The Interface Segregation Principle 接口分离原则&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;SOLID 五大原则的出发点也是软件工程的终极目标：“高内聚、低耦合”。在后端开发中运用最多的是“依赖倒置原则”，与其相关的设计模式大约有5-6个。如下图所示：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44942196531791906&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQTyc7BgSbngSZ43tsYtJK1kkkSwxl2qWQMSqJsgBxAGZZPUbeBdheOxX15zSXQEqVxpbyQ4ibcKv0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;692&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上图也可以理解为从抽象概念到具体实践的逐步演进。&lt;/p&gt;&lt;p&gt;在前端技术框架中，运用最多的是“开放封闭原则”，我们先来看一下这条原则是怎么定义的：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A software artifact should be open for extension but closed for modification.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;翻译过来就是：&lt;strong&gt;软件系统应当对扩展开放，对修改封闭（感觉像没说）。这里举一个简单的例子来说明开闭原则&lt;/strong&gt;，先帮助大家理解概念：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public abstract &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Shape&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    public abstract double Area();    &lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;public &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Rectangle&lt;/span&gt;: &lt;span&gt;Shape&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    public double Width { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;;}&lt;br/&gt;    public double Height { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;;}&lt;br/&gt;    public override double Area()&lt;br/&gt;    {&lt;br/&gt;         &lt;span&gt;return&lt;/span&gt; Width*Height&lt;span&gt;&#x27;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;public class Circle: Shape&lt;br/&gt;{&lt;br/&gt;    public double Radius { get; set}&lt;br/&gt;    public override double Area()&lt;br/&gt;    {&lt;br/&gt;        return Radius*Radius*PI;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;public double Area(Shape [] shapes)&lt;br/&gt;{&lt;br/&gt;    doubel area = 0;&lt;br/&gt;    foreach (var shape in shapes)&lt;br/&gt;    {&lt;br/&gt;        area += shape.Area();&lt;br/&gt;    }&lt;br/&gt;    return area;&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上例中无论场景如何扩展，Area 函数都无需修改，每个 Shape 类通过继承接口和多态特性，各自实现面积计算。&lt;/p&gt;&lt;p&gt;总结一下开闭原则就是：&lt;strong&gt;软件系统的核心逻辑都不应该轻易改变，否则会破坏系统的稳定性和增加测试成本。我们应当建立合适的抽象并统一接口，当业务需要扩展时，我们可以通过增加实体类来完成。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;接下来我们看一个“开闭原则”在前端框架中的应用：Ant Design 组件库中的 Form 表单组件。&lt;/p&gt;&lt;p&gt;和其它组件不同，Form 组件并没有具体的形态，它更像是一个容器，提供了接入的标准，并提供了校验、表单提交等功能。绘制表单中的一项如下所示：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;FormItem&amp;gt;&lt;br/&gt;  {getFieldDecorator(&lt;span&gt;&#x27;userName&#x27;&lt;/span&gt;, {&lt;br/&gt;     &lt;span&gt;rules&lt;/span&gt;: [{ &lt;span&gt;required&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;message&lt;/span&gt;: &lt;span&gt;&#x27;Please input your username!&#x27;&lt;/span&gt; }],&lt;br/&gt;     })(&lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;Input&lt;/span&gt; &lt;span&gt;prefix&lt;/span&gt;=&lt;span&gt;{&lt;/span&gt;&amp;lt;&lt;span&gt;Icon&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;user&quot;&lt;/span&gt; &lt;span&gt;style&lt;/span&gt;=&lt;span&gt;{{&lt;/span&gt; &lt;span&gt;color:&lt;/span&gt; &#x27;&lt;span&gt;rgba&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;.25&lt;/span&gt;)&#x27; }} /&amp;gt;&lt;/span&gt;}&lt;br/&gt;        placeholder=&quot;Username&quot; /&amp;gt;&lt;/span&gt;&lt;br/&gt;   )}&lt;br/&gt;&amp;lt;&lt;span&gt;/FormItem&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ant Design 组件库中已经提供个几乎所有的常见表单组件，如：Select 、Checkbox 、Radio 、Cascader 等，但在实际业务中，我们还是会需要设计业务相关的表单项，Form 表单通过统一组件接口的方式满足了这个技术需求，具体规约如下：&lt;/p&gt;&lt;p&gt;自定义或第三方的表单控件，也可以与 Form 组件一起使用。只要该组件遵循以下的约定：&lt;/p&gt;&lt;blockquote&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;提供受控属性 value 或其它与 valuePropName 的值同名的属性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提供 onChange 事件或 trigger 的值同名的事件。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不能是函数式组件。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p&gt;具体例子&lt;/p&gt;&lt;p&gt;这正是“开闭原则”的一个典型实践案例，即表单核心逻辑（校验、提交等）保持不变并封装在 Form 组件中，自定义表单项只需要满足上述三条规约，就能平滑接入到 Form 组件中，和 Ant Design 原生组件契合在一起。&lt;/p&gt;&lt;p&gt;Ant Design 中的 Form 组件通过这样一个简洁的设计，完美提供了表单类型页面的统一解决方案。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;函数式编程&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;随着人工智能、区块链、AR、VR、新零售等业务场景的出现，产品界面交互正在变得越来越复杂，这就对现代的前端开发者提出了更高的要求。如何快速、正确、高效地开发出高复杂度页面是目前前端技术最需要解决的问题。&lt;/p&gt;&lt;p&gt;函数式编程（以下简称 FP ）凭借其高复用性、易测试性和与之带来的健壮性和简洁开始逐渐占据前端技术圈，我们发现越来越多的前端框架以 FP 为设计核心准则。&lt;/p&gt;&lt;p&gt;我们先简单介绍一下 FP，函数式编程的特征主要包括以下几个方面：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;函数为“一等公民”&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;模块化、组合&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;引用透明&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;避免状态改变&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;避免共享状态&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;JS 语言中的函数不同于 Java ，C/C++ 等语言, 可以被当做参数和返回值进行传递，因此天生具备“一等公民”特性。“模块化、组合”、“引用透明”、“避免状态改变”、“避免共享状态”这四个特征都需要通过特定代码模式实现。先举两个小例子：&lt;/p&gt;&lt;h3&gt;&lt;span&gt;找出字符串中率先出现的四个非数字字符？&lt;/span&gt;&lt;/h3&gt;&lt;h5&gt;非 FP 风格&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; words = [], count = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; text = str.split(&lt;span&gt;&#x27;&#x27;&lt;/span&gt;); &lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; couont &amp;lt; &lt;span&gt;4&lt;/span&gt;, i &amp;lt; text.length; i++) {   &lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(!text[i].match(&lt;span&gt;/[0-9]/&lt;/span&gt;)) {&lt;br/&gt;    words = words.concat(text[i]);&lt;br/&gt;    count++;   &lt;br/&gt;  }&lt;br/&gt;} &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;FP 风格&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; words = str.split(&lt;span&gt;&#x27;&#x27;&lt;/span&gt;).filter(&lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;x&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (!x.match(&lt;span&gt;/[1-9]+/&lt;/span&gt;))}).slice(&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二段代码中使用的 js 数组方法 filter 和 slice，去掉了 for 循环，代码更简洁流畅。在写具体业务代码的时候，“模块化、组合”是 FP 最常用的技术，也是最重要的实现功能的手段。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;分别实现数组所有元素相加、相乘、相与？&lt;/span&gt;&lt;/h3&gt;&lt;h5&gt;非 FP 风格&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;plus&lt;/span&gt;(&lt;span&gt;array&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; res = array[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; array.length; i++) {&lt;br/&gt;    res += array[i];   &lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;mul&lt;/span&gt;(&lt;span&gt;array&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; res = array[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; array.length; i++) {&lt;br/&gt;    res *= array[i];&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; (&lt;span&gt;array&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; res = array[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; array.length; i++) {&lt;br/&gt;    res = res &amp;amp; array[i];&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;plus(array);&lt;br/&gt;mul(array);&lt;br/&gt;and(array);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;FP 风格&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; ops = { &lt;br/&gt;  &lt;span&gt;&quot;plus&quot;&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;x,y&lt;/span&gt;)=&amp;gt;&lt;/span&gt;x+y,&lt;br/&gt;  &lt;span&gt;&quot;mul&quot;&lt;/span&gt; : &lt;span&gt;(&lt;span&gt;x,y&lt;/span&gt;)=&amp;gt;&lt;/span&gt;x*y,&lt;br/&gt;  &lt;span&gt;&quot;and&quot;&lt;/span&gt; : &lt;span&gt;(&lt;span&gt;x,y&lt;/span&gt;)=&amp;gt;&lt;/span&gt;x&amp;amp;y&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;operation&lt;/span&gt;(&lt;span&gt;op, array&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; array.slice(&lt;span&gt;1&lt;/span&gt;).reduce(ops[op], array[&lt;span&gt;0&lt;/span&gt;]);&lt;br/&gt;} &lt;br/&gt;&lt;br/&gt;operation(&lt;span&gt;&quot;plus&quot;&lt;/span&gt;, array);&lt;br/&gt;operation(&lt;span&gt;&quot;mul&quot;&lt;/span&gt;,  array);&lt;br/&gt;operation(&lt;span&gt;&quot;and&quot;&lt;/span&gt;,  array); &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;后一段代码中，使用了 reduce 函数代替了 for 循环，并将数值计算部分作为模块提取出来，当有新的计算类型时，只需要在 ops 对象中定义计算过程。这里就体现了 FP 中“模块化、组合”的特性。在 FP 风格下，我们习惯将复杂逻辑切割成一个个小模块，通过组合这些模块实现新的业务功能，当有新的需求到来时，我们尽可能地复用已有模块达到目标。FP 代码在复用性方面相比 OOD 有明显的优势。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;React 中的 FP 思想&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;React 框架中，当用户操作 UI 或者 API 的返回带来了数据的改变，React 随即进行 virtual dom diff 计算得到 dom 的修改指令，对 dom 元素应用修改指令便得到最新的 html 界面，如下图所示：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4726775956284153&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQTyc7BgSbngSZ43tsYtJK1kVOwuQ7FXJL8YvXibBSmicSQWEBZAp6iaicTCtDo1uSA3fCW4ibiaiaFox01Yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/figure&gt;&lt;p&gt;不难发现，React 其实是应用数据对UI的一种映射，不同的数据会映射出不同样式的 UI 界面，我们可以得出如下的表达式：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;mjx-container jax=&quot;SVG&quot; role=&quot;presentation&quot; data-formula=&quot;UI = React(data)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 7869.6 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;55&quot; d=&quot;M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(767, 0)&quot;&gt;&lt;path data-c=&quot;49&quot; d=&quot;M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1548.8, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2604.6, 0)&quot;&gt;&lt;path data-c=&quot;52&quot; d=&quot;M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3363.6, 0)&quot;&gt;&lt;path data-c=&quot;65&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3829.6, 0)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4358.6, 0)&quot;&gt;&lt;path data-c=&quot;63&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4791.6, 0)&quot;&gt;&lt;path data-c=&quot;74&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5152.6, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5541.6, 0)&quot;&gt;&lt;path data-c=&quot;64&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6061.6, 0)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6590.6, 0)&quot;&gt;&lt;path data-c=&quot;74&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6951.6, 0)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(7480.6, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml role=&quot;presentation&quot; unselectable=&quot;on&quot; display=&quot;inline&quot;&gt;&lt;mi&gt;U&lt;/mi&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;没错，&lt;strong&gt;React 的本质其实是一种函数&lt;/strong&gt;，并且还是符合 FP 要求的“引用透明”函数。所谓“引用透明”就是指函数的输出仅依赖函数参数，不受任何外部环境影响。这样的函数可测试性强，也非常容易进行组合。&lt;/p&gt;&lt;p&gt;在 React 的体系下，任何组件都可由一个个更小的组件构成，每个组件都只关心自己的输入，他们不断地接受新的数据并输出对应的新的UI界面。React 框架中常用的“高阶组件”可以看作引用透明”函数的组合模式。&lt;/p&gt;&lt;p&gt;在具体业务中我们通常还需要权衡 React 组件的复用性和开发体验，如果组件被拆分的过于细，固然复用性会提升，但文件数量会增加，对应的文档和沟通成本也会增加，这也是 FP 在实践过程中经常遭人诟病的点，即复用性提升后带来的额外开发成本。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;消息机制&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;消息机制是软件工程中一个普遍运用的工程思想。“设计模式”中的观察者模式、Windows 操作系统底层、Spring 框架中的 ApplicationListener 模块、Objective-C 语言中的函数调用、都是通过消息机制驱动的。&lt;/p&gt;&lt;p&gt;使用消息机制最大的好处在于可以做到业务模块间安全解耦，模块间通过发送消息的方式进行协作，我们先举一个后端开发中的例子，下图是一个简单的预定系统的建模图，并没有使用消息机制：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.596820809248555&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQTyc7BgSbngSZ43tsYtJK1kTIrVjSfy3Iks8tWRjD2nsrgktPj6P8abHl6PzibtN0kSdWrRMXJ7rVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;692&quot;/&gt;&lt;/figure&gt;&lt;p&gt;在没有消息机制的情况下，用户模块需要知道订单模块的存在，并向起进行接口调用，同理订单模块需要向支付模块进行接口调用。这种设计下模块间是耦合的。&lt;/p&gt;&lt;p&gt;我们再来看一下使用消息机制的情况：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6979768786127167&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQTyc7BgSbngSZ43tsYtJK1kBuwXKFwDArGcqFASkW4LGY3m3SaZThZIFHBTgUBygs3d1LgNtcQyHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;692&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上图中，无论是客户下订单、支付还是预定都是通过消息的方式传递的，每个模块都是向一个消息处理器起发消息，同时也监听消息处理器发送回来的消息。在这种模式下，模块完全不知道其它模块的存在，彻底做到了解耦。&lt;/p&gt;&lt;p&gt;在前端业务开发中，我们经常也会用到 EventEmitter 库来进行消息传递。比如页面上有两块区域，一块用 React 框架渲染，一块用 D3 渲染的，当两块区域需要数据同步时，就可以使用消息机制进行通讯，保证页面数据整体一致。&lt;/p&gt;&lt;p&gt;如果你的业务中有不同生命周期的组件，建议采用消息机制进行管理，&lt;strong&gt;不仅消除了耦合，逻辑关系部分的代码也集中到了一个文件中，内聚性得到了提升&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;使用消息机制的一个附属产物就是中间件，我们可以为消息定制各种中间件，在中间中完成一些通用逻辑，让业务代码更精炼。&lt;/p&gt;&lt;p&gt;说到前端框架中消息机制的运用，当然首推 Redux 框架，在 Redux 框架中，任何数据交互都需要先转化为一个 action，由 action 去触发 reducer 和相关的 middleware 处理 action，改变数据，最终同步到页面 UI 上，如下图所示：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.634393063583815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQTyc7BgSbngSZ43tsYtJK1kibdIYLLM1VNvCicpuHIurSYIXsryKibkHgkfB8X7Oly8GtT76IrC8l5Vg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;692&quot;/&gt;&lt;/figure&gt;&lt;p&gt;关于使用 Redux 的种种利弊，在各大社区中都有很深入的讨论，本文不再赘述。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;“开闭原则”、“函数式编程”、“消息机制”这个三个软件工程中重要的思想方法好比三套内功口诀，掌握了他们，才能更深刻地理解技术框架本身，发挥出技术框架的最大威力。&lt;/p&gt;&lt;p&gt;写到这里突然又想起《天龙八部》中一段：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;乔峰眼见旁人退开，蓦地心念一动，呼的一拳打出，一招“冲阵斩将”，也正是“太祖长拳”中的招数。这一招姿式既潇洒大方已极，劲力更是刚中有柔，柔中有刚，武林高手毕生所盼望达到的拳术完美之境，竟在这一招中表露无遗。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;一套平平无奇的“太祖长拳”在乔峰手中尽能有如此气象！&lt;/p&gt;&lt;p&gt;多少年以后，每当人们聊起金庸，聊起那个武侠世界，想必都会津津有味地回味、谈论起聚贤庄中这石破天惊的一拳。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;参考&lt;/span&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Functional Programming in JavaScript — Dan Mantyla&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Functional JavaScript: Introducing Functional Programming with Underscore.js — Michael Fogus&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Clean Architecture — Robert C·Martin&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://reactjs.org&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://ant-design.gitee.io/d...&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://redux.js.org/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://redux-saga.js.org/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《笑傲江湖》— 金庸&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《天龙八部》— 金庸&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;原文链接：https://www.yuque.com/es2049/blog&lt;/span&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxNzk1MjQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0Nwvv72YkFO0qPibDKicOCsfltiaE9070DOu4iahXnicYwRIHcxe9VBicAy45MkPqy8nZzLTVibugOtV0ORFcg/0?wx_fmt=png&quot; data-nickname=&quot;程序员成长指北&quot; data-alias=&quot;coder_growth&quot; data-signature=&quot;专注 Node.js 技术栈分享，从 前端 到 Node.js 再到 后端数据库，祝您成为优秀的高级 Node.js 全栈工程师。一个有趣的且乐于分享的人。座右铭：今天未完成的，明天更不会完成。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section label=&quot;Copyright © 2016 playhudong All Rights Reserved.&quot; donone=&quot;shifuMouseDownPayStyle(&#x27;shifu_t_042&#x27;)&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;Node 社群&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;89226&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我组建了一个氛围特别好的 Node.js 社群，里面有很多 Node.js小伙伴，如果你对Node.js学习感兴趣的话（后续有计划也可以），我们可以一起进行Node.js相关的交流、学习、共建。下方加 考拉 好友回复「Node」即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YBFV3Da0NwsF7OKB4iaaXAzQPbNstk2LybA0Zz5I1hiaiazE9W7WH2Ojt2dibDODWMVUmHqgfXCefVwt7z5ibNMWLvg/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;578.2649006622516&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;700.2119205298013&quot; data-fileid=&quot;100016913&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2093425605536332&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YBFV3Da0NwvFQgO67XibvUG5S2UMXwCghOuJvE8BFRzUXnCAfWXkU1qHld6Ly9xiarib3siaWicJWJ0U3lI8kSgD38w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt; “分享、点赞&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;在看” 支持一波👍&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>58870effcf72ab1d3add6876aa93bdc9</guid>
<title>locust python实现</title>
<link>https://toutiao.io/k/6ibht53</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content custom&quot;&gt;&lt;h1 id=&quot;使用locust-in-python-介绍、关联变量和基本断言&quot;&gt;&lt;a href=&quot;#使用locust-in-python-介绍、关联变量和基本断言&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 使用locust in python:介绍、关联变量和基本断言&lt;/h1&gt; &lt;p&gt;Locust 是一个很好的开源负载测试工具，可以为有 Python 经验的开发人员提供测试，因为测试可以作为代码创建。我们在之前的一些文章中已经讨论过这个问题。但是如果你从来没有用过它呢？在这篇文章中，我们将向你展示如何使用这个性能测试工具开始你的第一步，通过展示一个用 Python 开发的基本工作流程的例子，一个高级的工作流程，以及如何关联贵重物品和断言你的脚。&lt;/p&gt; &lt;h2 id=&quot;开始-安装-python&quot;&gt;&lt;a href=&quot;#开始-安装-python&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 开始: 安装 Python&lt;/h2&gt; &lt;p&gt;为了运行 Locust，你需要安装 Python。如果这不是你的情况，我们将留给你一个链接下载它在这里。然后，你所要做的就是运行以下命令:&lt;/p&gt; &lt;p&gt;pip3 install locust&lt;/p&gt; &lt;h2 id=&quot;从-locust-gui-脚本和执行负载测试&quot;&gt;&lt;a href=&quot;#从-locust-gui-脚本和执行负载测试&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 从 Locust GUI 脚本和执行负载测试&lt;/h2&gt; &lt;p&gt;下一步是为名为 locustfile.py 的脚本创建一个文件。在这个文件中，我们将定义在负载测试中执行的 HTTP 请求。使用该脚本的文件名使 Locust 能够自动找到该文件。(如果要为文件使用另一个名称，在执行时需要添加参数 -f 和文件名。我将在下面向你展示。&lt;/p&gt; &lt;p&gt;在这个例子中，我们将加载测试站点的 https://www.demoblaze.com/。&lt;/p&gt; &lt;h3 id=&quot;创建一个基本脚本&quot;&gt;&lt;a href=&quot;#创建一个基本脚本&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 创建一个基本脚本&lt;/h3&gt; &lt;p&gt;首先，我们将编写一个脚本，调用 demoblaze 主页，如下所示:&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;from locust import HttpUser, task
            
class User(HttpUser):
    @task
    def mainPage(self):
        self.client.get(&quot;/&quot;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，脚本中没有指定被测试站点的 url。相反，它是在运行测试时从 UI 指定的。
Locust 将只在 decorator@任务中运行函数，因此我们必须记住添加它。对于定义了多个任务的情况，默认情况下它们将随机执行。&lt;/p&gt; &lt;h3 id=&quot;running-the-script-2-运行脚本&quot;&gt;&lt;a href=&quot;#running-the-script-2-运行脚本&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; Running the Script 2. 运行脚本&lt;/h3&gt; &lt;p&gt;为了运行这个测试，我们需要从命令行执行脚本目录中的 locust 命令，这将启动端口8089上的 web 用户界面。只需在浏览器上导航到 http://localhost:8089地图就可以访问它。&lt;/p&gt; &lt;p&gt;注意: 如果您在另一个程序使用端口时得到一个错误，您可以使用 locust 命令 -- web-port [ port ]更改它。正如我上面提到的，如果您想运行一个不同名称的脚本，可以执行 locust-f [ file name ]。&lt;/p&gt; &lt;p&gt;用户的数量，每秒启动的用户数量和主机(测试中的 URL)可以从 Locust 的 web 用户界面中选择。Locust 将使用脚本中的路径和这里指定的主机为每个请求创建完整的 url。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/3C_q1XK49SNSd2iJ5UhxoYJXWgFC8KL74gI3MA4bUqx9_pxPesM7zX_K3QgVzivG8GTkF6NdRewdO-soLcM8nuKCT_JPXTXaaoqe5-zszX-L4XI-ZExQKUqvsoGv2OAgct20acyX&quot; alt=&quot;&quot;/&gt;
现在你可以通过点击 Start swarming 按钮来运行测试，浏览器会显示一个如下图所示的仪表盘:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/517zhtWrs-ygVZYpRPD-RLrSqYulCWmDnQL6EcQwXETo2-k7ClyLUBxl1JiGzZ2BPI0dq3gpzZA1__jhdJ6wdzlqRNAMpGx1bLcmFawlUB8U9SIZxGRni9qjyBBZDCwjmHUhGiAc&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; &lt;p&gt;在这个仪表板中，我们将看到一个报告，其中包括执行的请求数量、失败请求数量、90% 以及其他实时统计信息。默认情况下，虚拟用户将继续运行，直到测试停止。&lt;/p&gt; &lt;p&gt;如果你不想使用 web UI 来运行脚本，你可以运行以下命令:&lt;/p&gt; &lt;p&gt;locust --headless -u 1 -r 1 -H https://www.demoblaze.com&lt;/p&gt; &lt;p&gt;其中 -u 指定用户数,-r 表示产生率,-h 表示主机。&lt;/p&gt; &lt;h3 id=&quot;创建更高级的脚本&quot;&gt;&lt;a href=&quot;#创建更高级的脚本&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 创建更高级的脚本&lt;/h3&gt; &lt;p&gt;现在我们了解了如何创建和运行基本测试，接下来让我们用更复杂的工作流来做一个测试。&lt;/p&gt; &lt;p&gt;这个工作流程包括4个步骤:&lt;/p&gt; &lt;p&gt;进入网站
登录
向购物车中添加产品
提交购物车&lt;/p&gt; &lt;p&gt;一旦我们获得了工作流中每个步骤的 HTTP 请求，我们就可以为每个用户操作创建一个方法。&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;from locust import HttpUser, SequentialTaskSet, task, between
            
class User(HttpUser):    
    @task
    class SequenceOfTasks(SequentialTaskSet):
        wait_time = between(1, 5)
        @task
        def mainPage(self):
            self.client.get(&quot;/&quot;)
            self.client.get(&quot;https://api.demoblaze.com/entries&quot;)
        @task
        def login(self):
            self.client.options(&quot;https://api.demoblaze.com/login&quot;)
            self.client.post(&quot;https://api.demoblaze.com/login&quot;,json={&quot;username&quot;:&quot;aaaa&quot;,&quot;password&quot;:&quot;YWFhYQ==&quot;})
            self.client.options(&quot;https://api.demoblaze.com/check&quot;)
            self.client.get(&quot;https://api.demoblaze.com/entries&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:&quot;YWFhYTE2MzA5NDU=&quot;})            
        @task
        def clickProduct(self):
            self.client.get(&quot;/prod.html?idp_=1&quot;)
            self.client.options(&quot;https://api.demoblaze.com/check&quot;)
            self.client.options(&quot;https://api.demoblaze.com/view&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:&quot;YWFhYTE2MzA5NDU=&quot;})
            self.client.post(&quot;https://api.demoblaze.com/view&quot;,json={&quot;id&quot;:&quot;1&quot;})
        @task
        def addToCart(self):
            self.client.options(&quot;https://api.demoblaze.com/addtocart&quot;)
            self.client.post(&quot;https://api.demoblaze.com/addtocart&quot;,json={&quot;id&quot;:&quot;fb3d5d23-f88c-80d9-a8de-32f1b6034bfd&quot;,&quot;cookie&quot;:&quot;YWFhYTE2MzA5NDU=&quot;,&quot;prod_id&quot;:1,&quot;flag&quot;:&#x27;true&#x27;})
        @task 
        def viewCart(self):
            self.client.get(&quot;/cart.html&quot;)
            self.client.options(&quot;https://api.demoblaze.com/check&quot;)
            self.client.options(&quot;https://api.demoblaze.com/viewcart&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:&quot;YWFhYTE2MzA5NDU=&quot;})
            self.client.post(&quot;https://api.demoblaze.com/viewcart&quot;,json={&quot;cookie&quot;:&quot;YWFhYTE2MzA5NDU=&quot;,&quot;flag&quot;:&#x27;true&#x27;})
            self.client.options(&quot;https://api.demoblaze.com/view&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:&quot;YWFhYTE2MzA5NDU=&quot;})
            self.client.post(&quot;https://api.demoblaze.com/view&quot;,json={&quot;id&quot;:&quot;1&quot;})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正如您所看到的，所有方法都使用 SequentialTaskSet 包含在类中，因此它们可以按照声明的相同顺序执行。&lt;/p&gt; &lt;p&gt;另外，通过使用 wait _ time，我们可以在任务之间添加一个暂停。在这种情况下，是1到5秒之间的随机停顿。&lt;/p&gt; &lt;p&gt;您还会注意到，对 API 的请求是使用完整的 URL 编写的，因为 Locust web 用户界面只允许在 host 字段中使用一个 URL。&lt;/p&gt; &lt;h3 id=&quot;相关变量&quot;&gt;&lt;a href=&quot;#相关变量&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 相关变量&lt;/h3&gt; &lt;p&gt;下一步是将硬编码令牌关联起来。关联动态的参数非常重要，我们知道这个标记在用户每次登录时都会发生变化。令牌可能过期，如果没有将其参数化，脚本就会停止工作。&lt;/p&gt; &lt;p&gt;通过分析 HTTP 请求工作流，我们可以看到可以从/login 响应中提取/check post 中发送的令牌。然后，我们可以将它保存到一个变量中，并在以下所有需要它的请求中使用它。&lt;/p&gt; &lt;p&gt;响应的标记格式如下:&lt;/p&gt; &lt;p&gt;&quot;Auth_token: YWFhYTE2MzA1ODg=&quot;
因此可以使用下面的正则表达式来提取它:&lt;/p&gt; &lt;p&gt;&quot;Auth_token: (.+?)&quot;
接下来，需要导入模块 re，并使用 match 方法将提取的值保存到变量中。&lt;/p&gt; &lt;p&gt;因此，为了从响应中提取标记，我们首先保存对变量的响应，如下所示:&lt;/p&gt; &lt;p&gt;response = self.client.post(&quot;https://api.demoblaze.com/login&quot;,json={&quot;username&quot;:&quot;aaaa&quot;,&quot;password&quot;:&quot;YWFhYQ==&quot;})&lt;br/&gt;
现在我们可以定义一个全局变量并使用正则表达式提取标记。&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;global token 
  token = re.match(&quot;\&quot;Auth_token: (.+?)\&quot;&quot;,response.text)[1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以在以下请求中使用该变量&lt;/p&gt; &lt;p&gt;self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:token}
这就是登录和点击产品交易的样子:&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;@task
        def login(self):
            self.client.options(&quot;https://api.demoblaze.com/login&quot;)
            response = self.client.post(&quot;https://api.demoblaze.com/login&quot;,json={&quot;username&quot;:&quot;aaaa&quot;,&quot;password&quot;:&quot;YWFhYQ==&quot;})
            global token 
            token = re.match(&quot;\&quot;Auth_token: (.+?)\&quot;&quot;,response.text)[1]
            self.client.options(&quot;https://api.demoblaze.com/check&quot;)
            self.client.get(&quot;https://api.demoblaze.com/entries&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:token})            
        @task
        def clickProduct(self):
            self.client.get(&quot;/prod.html?idp_=1&quot;)
            self.client.options(&quot;https://api.demoblaze.com/check&quot;)
            self.client.options(&quot;https://api.demoblaze.com/view&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:token})
            self.client.post(&quot;https://api.demoblaze.com/view&quot;,json={&quot;id&quot;:&quot;1&quot;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意: 在这个例子中，我们只使用了一个用户。如果你想学习如何在多个用户中运行脚本，你可以查看这篇文章。&lt;/p&gt; &lt;p&gt;https://www.blazemeter.com/blog/how-to-run-locust-with-different-users&lt;/p&gt; &lt;h3 id=&quot;使用断言&quot;&gt;&lt;a href=&quot;#使用断言&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 使用断言&lt;/h3&gt; &lt;p&gt;现在，我将向您展示如何添加一个简单的断言来验证添加到购物车中的产品是否被正确添加。&lt;/p&gt; &lt;p&gt;Locust 没有很多内置功能，但是使用 Python 可以轻松地添加自定义功能。&lt;/p&gt; &lt;p&gt;Failure (“ Error message”)可用于将请求标记为 failed。为了让断言正常工作，这个函数应该在 if 子句中使用，并且应该添加 catch _ response 参数来验证响应，如下所示。&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;@task 
        def viewCart(self):
            self.client.get(&quot;/cart.html&quot;)
            self.client.options(&quot;https://api.demoblaze.com/check&quot;)
            self.client.options(&quot;https://api.demoblaze.com/viewcart&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:token})
            with self.client.post(&quot;https://api.demoblaze.com/viewcart&quot;,catch_response=True,json={&quot;cookie&quot;:token,&quot;flag&quot;:&#x27;true&#x27;}) as response:
                if &#x27;&quot;prod_id&quot;:1&#x27; not in response.text:
                    response.failure(&quot;Assert failure, response does not contain expected prod_id&quot;)
            self.client.options(&quot;https://api.demoblaze.com/view&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:token})
            self.client.post(&quot;https://api.demoblaze.com/view&quot;,json={&quot;id&quot;:&quot;1&quot;})
            
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们运行测试，我们可以看到它没有错误。但是，我们如何知道这种主张是否有效呢？让我们将产品 id 更改为响应中不存在的 id。&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;with self.client.post(&quot;https://api.demoblaze.com/viewcart&quot;,catch_response=True,json={&quot;cookie&quot;:token,&quot;flag&quot;:&#x27;true&#x27;}) as response:
                if &#x27;&quot;prod_id&quot;:1234&#x27; not in response.text:
                    response.failure(&quot;Assert failure, response does not contain expected prod_id&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当再次执行测试时,/viewcart POST 将失败，并且定义的错误消息可以在 Failures 选项卡中看到。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/AtBXDZPI6KkPtLREktViG22DC1xfj3reLvGUrO_KpEbJi4QOXVRTLwNWC4BNOO4_VDGFAGFrvhPQxNZ_fpLXhR3RlIuBb0ZkOy4iHSuGknf_zG3_fmB-GigSX6KHeKXqsSxANvQN&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/VKM3V3gWA0pNh5qPbCm-6QXnuW37geWbPAxlJR2BgHH_P5_wkeaTeh0cnN_frc1kTb0h2HXz_C0Mvm_FKgNkiufHKlNxZx_7IN3oWX4iK0y_E_CfqfgKK4UemJloJFgr1ZTumAmb&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; &lt;p&gt;如果你要使用多个断言，最好创建一个函数，避免重写类似的代码，比如这个:&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;def assertContains(response,text):
    with response as r:
        if text not in r.text:
            r.failure(&quot;Expected &quot;+ response.text + &quot; to contain &quot;+ text)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以像下面这样调用它，每次你想用文本做一个断言:&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;            assertContains(self.client.post(&quot;https://api.demoblaze.com/viewcart&quot;,catch_response=True,json={&quot;cookie&quot;:token,&quot;flag&quot;:&#x27;true&#x27;}),&#x27;&quot;prod_id&quot;:1&#x27;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一旦你完成locust脚本，你可以运行它在 BlazeMeter 的规模，集成在 CI/CD 和看到先进的报告。现在就开始。&lt;/p&gt; &lt;h3 id=&quot;author&quot;&gt;&lt;a href=&quot;#author&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; author&lt;/h3&gt; &lt;p&gt;石头 磊哥 seven 随便叫&lt;/p&gt; &lt;h3 id=&quot;company&quot;&gt;&lt;a href=&quot;#company&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; company&lt;/h3&gt; &lt;p&gt;HSBC
大家好，我已经加入了HSBC&lt;/p&gt; &lt;h3 id=&quot;roles&quot;&gt;&lt;a href=&quot;#roles&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; roles&lt;/h3&gt; &lt;p&gt;QA（营生） dev（front-end dev 兴趣爱好）&lt;/p&gt; &lt;h3 id=&quot;联系方式&quot;&gt;&lt;a href=&quot;#联系方式&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 联系方式&lt;/h3&gt; &lt;p&gt;如果想转载或者高薪挖我 请直接联系我 哈哈&lt;/p&gt; &lt;h4 id=&quot;wechat&quot;&gt;&lt;a href=&quot;#wechat&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; wechat:&lt;/h4&gt; &lt;p&gt;qileiwangnan&lt;/p&gt; &lt;h4 id=&quot;email&quot;&gt;&lt;a href=&quot;#email&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; email:&lt;/h4&gt; &lt;p&gt;qileilove@gmail.com&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>