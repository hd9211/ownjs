<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>21aada21336a573d3eab7b62c06dcfdb</guid>
<title>肝了 3 天，整理了 50 个 Pandas 高频使用技巧，强烈建议收藏</title>
<link>https://toutiao.io/k/8k28pnf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section&gt;&lt;span&gt;这是「进击的Coder」的第 &lt;/span&gt;&lt;span&gt;516&lt;/span&gt;&lt;span&gt; 篇技术分享&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;作者：俊欣&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;来源：关于数据分析与可视化&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;“&lt;/span&gt; &lt;span&gt;&lt;p&gt;阅读本文大概需要 10 分钟。&lt;/p&gt;&lt;/span&gt; &lt;span&gt;&lt;p&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;今天小编来分享在&lt;code&gt;pandas&lt;/code&gt;当中经常会被用到的方法，篇幅可能有点长但是提供的都是干货，读者朋友们看完之后也可以点赞收藏，相信会对大家有所帮助，大致本文会讲述这些内容&lt;br/&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;DataFrame 初印象&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;读取表格型数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;筛选出特定的行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用&lt;code&gt;pandas&lt;/code&gt;来绘图&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在 DataFrame 中新增行与列&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;DataFrame 中的统计分析与计算&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;DataFrame 中排序问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;合并多个表格&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;时序问题的处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;字符串类型数据的处理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;DataFrame 初印象&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先来通过&lt;code&gt;Python&lt;/code&gt;当中的字典类型来创建一个 DataFrame，&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import pandas as pd&lt;br/&gt;&lt;br/&gt;data = {&lt;span&gt;&quot;Country&quot;&lt;/span&gt;: [&lt;span&gt;&quot;Canada&quot;&lt;/span&gt;, &lt;span&gt;&quot;USA&quot;&lt;/span&gt;, &lt;span&gt;&quot;UK&quot;&lt;/span&gt;],&lt;br/&gt;        &lt;span&gt;&quot;Population&quot;&lt;/span&gt;: [10.52*10**6, 350.1*10**6, 65.2*10**6]&lt;br/&gt;       }&lt;br/&gt;df = pd.DataFrame(data)&lt;br/&gt;&lt;br/&gt;df&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;当你通过&lt;code&gt;Python&lt;/code&gt;当中的字典来创建 DataFrame,字典当中的&lt;code&gt;keys&lt;/code&gt;会被当做是列名，而&lt;code&gt;values&lt;/code&gt;则是表格当中的值&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;  Country   Population&lt;br/&gt;0  Canada   10520000.0&lt;br/&gt;1     USA  350100000.0&lt;br/&gt;2      UK   65200000.0&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要是我们要获取当中的某一列，我们可以这么来做&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[&lt;span&gt;&quot;Country&quot;&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;0    Portugal&lt;br/&gt;1         USA&lt;br/&gt;2      France&lt;br/&gt;Name: Country, dtype: object&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而当我们想要获取表格当中每一列的数据格式的时候，可以这么做&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.dtypes&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Country        object&lt;br/&gt;Population    float64&lt;br/&gt;dtype: object&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;读取数据&lt;span/&gt;&lt;/h4&gt;&lt;section&gt;&lt;code&gt;Pandas&lt;/code&gt;当中有特定的模块可以来读取数据，要是读取的文件是&lt;code&gt;csv&lt;/code&gt;格式，我们可以这么来做&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import pandas as pd&lt;br/&gt;df = pd.read_csv(&lt;span&gt;&quot;titanic.csv&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们要是想要查看表格的前面几行，可以这么做&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.head(7)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked&lt;br/&gt;0            1         0       3  ...   7.2500   NaN         S&lt;br/&gt;1            2         1       1  ...  71.2833   C85         C&lt;br/&gt;2            3         1       3  ...   7.9250   NaN         S&lt;br/&gt;3            4         1       1  ...  53.1000  C123         S&lt;br/&gt;4            5         0       3  ...   8.0500   NaN         S&lt;br/&gt;5            6         0       3  ...   8.4583   NaN         Q&lt;br/&gt;6            7         0       1  ...  51.8625   E46         S&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;这里我们只是展示了前面7行的数据，当然我们也可以使用&lt;code&gt;tail()&lt;/code&gt;方法来展示末尾的若干行的数据&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.tail(7)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;     PassengerId  Survived  Pclass  ...    Fare Cabin  Embarked&lt;br/&gt;884          885         0       3  ...   7.050   NaN         S&lt;br/&gt;885          886         0       3  ...  29.125   NaN         Q&lt;br/&gt;886          887         0       2  ...  13.000   NaN         S&lt;br/&gt;887          888         1       1  ...  30.000   B42         S&lt;br/&gt;888          889         0       3  ...  23.450   NaN         S&lt;br/&gt;889          890         1       1  ...  30.000  C148         C&lt;br/&gt;890          891         0       3  ...   7.750   NaN         Q&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要是遇到文件的格式是&lt;code&gt;excel&lt;/code&gt;格式，&lt;code&gt;pandas&lt;/code&gt;当中也有相对应的方法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df = pd.read_excel(&lt;span&gt;&quot;titanic.xlsx&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以通过&lt;code&gt;pandas&lt;/code&gt;当中的&lt;code&gt;info()&lt;/code&gt;方法来获取对表格数据的一个初步的印象&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.info()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;class &lt;span&gt;&#x27;pandas.core.frame.DataFrame&#x27;&lt;/span&gt;&amp;gt;&lt;br/&gt;RangeIndex: 891 entries, 0 to 890&lt;br/&gt;Data columns (total 12 columns):&lt;br/&gt; &lt;span&gt;#   Column       Non-Null Count  Dtype  &lt;/span&gt;&lt;br/&gt;---  ------       --------------  -----  &lt;br/&gt; 0   PassengerId  891 non-null    int64  &lt;br/&gt; 1   Survived     891 non-null    int64  &lt;br/&gt; 2   Pclass       891 non-null    int64  &lt;br/&gt; 3   Name         891 non-null    object &lt;br/&gt; 4   Sex          891 non-null    object &lt;br/&gt; 5   Age          714 non-null    float64&lt;br/&gt; 6   SibSp        891 non-null    int64  &lt;br/&gt; 7   Parch        891 non-null    int64  &lt;br/&gt; 8   Ticket       891 non-null    object &lt;br/&gt; 9   Fare         891 non-null    float64&lt;br/&gt; 10  Cabin        204 non-null    object &lt;br/&gt; 11  Embarked     889 non-null    object &lt;br/&gt;dtypes: float64(2), int64(5), object(5)&lt;br/&gt;memory usage: 83.7+ KB&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;我们可以从上面的信息中看到例如哪些列可能存在一些空值，每一列的数据类型，占用内存的情况等等。&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;筛选出特定条件的行&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要是我们想要筛选出年龄在 30 岁以上的乘客，我们可以这么来操作&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[df[&lt;span&gt;&quot;Age&quot;&lt;/span&gt;] &amp;gt; 30]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;     PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked&lt;br/&gt;1              2         1       1  ...  71.2833   C85         C&lt;br/&gt;3              4         1       1  ...  53.1000  C123         S&lt;br/&gt;4              5         0       3  ...   8.0500   NaN         S&lt;br/&gt;6              7         0       1  ...  51.8625   E46         S&lt;br/&gt;11            12         1       1  ...  26.5500  C103         S&lt;br/&gt;..           ...       ...     ...  ...      ...   ...       ...&lt;br/&gt;873          874         0       3  ...   9.0000   NaN         S&lt;br/&gt;879          880         1       1  ...  83.1583   C50         C&lt;br/&gt;881          882         0       3  ...   7.8958   NaN         S&lt;br/&gt;885          886         0       3  ...  29.1250   NaN         Q&lt;br/&gt;890          891         0       3  ...   7.7500   NaN         Q&lt;br/&gt;&lt;br/&gt;[305 rows x 12 columns]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然我们也可以将若干个条件合起来，一同做筛选，例如&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;survived_under_45 = df[(df[&lt;span&gt;&quot;Survived&quot;&lt;/span&gt;]==1) &amp;amp; (df[&lt;span&gt;&quot;Age&quot;&lt;/span&gt;]&amp;lt;45)]&lt;br/&gt;survived_under_45&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;     PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked&lt;br/&gt;1              2         1       1  ...  71.2833   C85         C&lt;br/&gt;2              3         1       3  ...   7.9250   NaN         S&lt;br/&gt;3              4         1       1  ...  53.1000  C123         S&lt;br/&gt;8              9         1       3  ...  11.1333   NaN         S&lt;br/&gt;9             10         1       2  ...  30.0708   NaN         C&lt;br/&gt;..           ...       ...     ...  ...      ...   ...       ...&lt;br/&gt;874          875         1       2  ...  24.0000   NaN         C&lt;br/&gt;875          876         1       3  ...   7.2250   NaN         C&lt;br/&gt;880          881         1       2  ...  26.0000   NaN         S&lt;br/&gt;887          888         1       1  ...  30.0000   B42         S&lt;br/&gt;889          890         1       1  ...  30.0000  C148         C&lt;br/&gt;&lt;br/&gt;[247 rows x 12 columns]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;这里我们通过&lt;code&gt;&amp;amp;&lt;/code&gt;也就是&lt;code&gt;and&lt;/code&gt;的表达方式来将两个条件组合到一起，表示要将上述两个条件都满足的数据给筛选出来。当然我们在上文也提到，数据集中有部分的列存在空值，我们可以以此来筛选行与列&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[df[&lt;span&gt;&quot;Age&quot;&lt;/span&gt;].notna()]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;     PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked&lt;br/&gt;0              1         0       3  ...   7.2500   NaN         S&lt;br/&gt;1              2         1       1  ...  71.2833   C85         C&lt;br/&gt;2              3         1       3  ...   7.9250   NaN         S&lt;br/&gt;3              4         1       1  ...  53.1000  C123         S&lt;br/&gt;4              5         0       3  ...   8.0500   NaN         S&lt;br/&gt;..           ...       ...     ...  ...      ...   ...       ...&lt;br/&gt;885          886         0       3  ...  29.1250   NaN         Q&lt;br/&gt;886          887         0       2  ...  13.0000   NaN         S&lt;br/&gt;887          888         1       1  ...  30.0000   B42         S&lt;br/&gt;889          890         1       1  ...  30.0000  C148         C&lt;br/&gt;890          891         0       3  ...   7.7500   NaN         Q&lt;br/&gt;&lt;br/&gt;[714 rows x 12 columns]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;上面的操作简单来说就是筛选出“Age”不是空值的行，除此之外，我们还可以通过&lt;code&gt;isin&lt;/code&gt;方法来进行筛选，&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[df[&lt;span&gt;&quot;Pclass&quot;&lt;/span&gt;].isin([1, 2])]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;     PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked&lt;br/&gt;1              2         1       1  ...  71.2833   C85         C&lt;br/&gt;3              4         1       1  ...  53.1000  C123         S&lt;br/&gt;6              7         0       1  ...  51.8625   E46         S&lt;br/&gt;9             10         1       2  ...  30.0708   NaN         C&lt;br/&gt;11            12         1       1  ...  26.5500  C103         S&lt;br/&gt;..           ...       ...     ...  ...      ...   ...       ...&lt;br/&gt;880          881         1       2  ...  26.0000   NaN         S&lt;br/&gt;883          884         0       2  ...  10.5000   NaN         S&lt;br/&gt;886          887         0       2  ...  13.0000   NaN         S&lt;br/&gt;887          888         1       1  ...  30.0000   B42         S&lt;br/&gt;889          890         1       1  ...  30.0000  C148         C&lt;br/&gt;&lt;br/&gt;[400 rows x 12 columns]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;上述的代码简单说来就是满足“Pclass”当中是“1”和“2”值的那些部分给挑选出来，上述的代码等同于是&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[(df[&lt;span&gt;&quot;Pclass&quot;&lt;/span&gt;] == 1) | (df[&lt;span&gt;&quot;Pclass&quot;&lt;/span&gt;] == 2)]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;筛选出特定条件的行与列&lt;span/&gt;&lt;/h4&gt;&lt;section&gt;要是我们想要筛选出年龄大于 40 岁的乘客，同时想要得知他们的姓名，可以这么来操作&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.loc[df[&lt;span&gt;&quot;Age&quot;&lt;/span&gt;] &amp;gt; 40,&lt;span&gt;&quot;Name&quot;&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;6                                McCarthy, Mr. Timothy J&lt;br/&gt;11                              Bonnell, Miss. Elizabeth&lt;br/&gt;15                      Hewlett, Mrs. (Mary D Kingcome) &lt;br/&gt;33                                 Wheadon, Mr. Edward H&lt;br/&gt;35                        Holverson, Mr. Alexander Oskar&lt;br/&gt;                             ...                        &lt;br/&gt;862    Swift, Mrs. Frederick Joel (Margaret Welles Ba...&lt;br/&gt;865                             Bystrom, Mrs. (Karolina)&lt;br/&gt;871     Beckwith, Mrs. Richard Leonard (Sallie Monypeny)&lt;br/&gt;873                          Vander Cruyssen, Mr. Victor&lt;br/&gt;879        Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)&lt;br/&gt;Name: Name, Length: 150, dtype: object&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;当我们使用&lt;code&gt;loc\iloc&lt;/code&gt;来筛选出部分数据的时候，[]中的第一部分代表的是“行”，例如&lt;code&gt;df[&quot;Age&quot;] &amp;gt; 40&lt;/code&gt;，而[]中的第二部分代表的是“列”,例如&lt;code&gt;Name&lt;/code&gt;，你可以选择只要一列，也可以选择需要多列，用括号括起来即可&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.loc[df[&lt;span&gt;&quot;Age&quot;&lt;/span&gt;] &amp;gt; 40,[&lt;span&gt;&quot;Name&quot;&lt;/span&gt;, &lt;span&gt;&quot;Sex&quot;&lt;/span&gt;]]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们将逗号后面的部分直接用&lt;code&gt;:&lt;/code&gt;来代替，则意味着要所有的列&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.loc[df[&lt;span&gt;&quot;Age&quot;&lt;/span&gt;] &amp;gt; 40,:]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;     PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked&lt;br/&gt;6              7         0       1  ...  51.8625   E46         S&lt;br/&gt;11            12         1       1  ...  26.5500  C103         S&lt;br/&gt;15            16         1       2  ...  16.0000   NaN         S&lt;br/&gt;33            34         0       2  ...  10.5000   NaN         S&lt;br/&gt;35            36         0       1  ...  52.0000   NaN         S&lt;br/&gt;..           ...       ...     ...  ...      ...   ...       ...&lt;br/&gt;862          863         1       1  ...  25.9292   D17         S&lt;br/&gt;865          866         1       2  ...  13.0000   NaN         S&lt;br/&gt;871          872         1       1  ...  52.5542   D35         S&lt;br/&gt;873          874         0       3  ...   9.0000   NaN         S&lt;br/&gt;879          880         1       1  ...  83.1583   C50         C&lt;br/&gt;&lt;br/&gt;[150 rows x 12 columns]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;我们也可以使用&lt;code&gt;iloc&lt;/code&gt;来进行筛选，只是与上面&lt;code&gt;loc&lt;/code&gt;不同的在于，这里我们要填的是索引，例如我们想要前面的 0-3 列以及 0-9 行的内容,&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.iloc[0:10, 0:3]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;   PassengerId  Survived  Pclass&lt;br/&gt;0            1         0       3&lt;br/&gt;1            2         1       1&lt;br/&gt;2            3         1       3&lt;br/&gt;3            4         1       1&lt;br/&gt;4            5         0       3&lt;br/&gt;5            6         0       3&lt;br/&gt;6            7         0       1&lt;br/&gt;7            8         0       3&lt;br/&gt;8            9         1       3&lt;br/&gt;9           10         1       2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;用 Pandas 来画图&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们还可以用 Pandas 来画图，而且实际用到的代码量还比较的少&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.plot()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;36002&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100007332&quot; data-ratio=&quot;0.4693396226415094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jibw7n291dTzicHIr4ggiaTPy7otz55b0G80F7piaaD8r5fm1Ny40rP482jJCbjgEwKBWao6MTAbk8IeFpWup1w8EQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot; data-width=&quot;100%&quot; title=&quot;&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要是你想要单独某一列的趋势图，我们也可以这么做&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[&lt;span&gt;&quot;Age&quot;&lt;/span&gt;].plot()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;36002&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100007333&quot; data-ratio=&quot;0.4528301886792453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jibw7n291dTzicHIr4ggiaTPy7otz55b0G8H1V2icNg3yIYjmToZsotuUwR1HTPXc5d2krlsgMbicsZ2okZ4w9hEjuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot; data-width=&quot;100%&quot; title=&quot;&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要是我们想要不同年龄对于船票费“Fare”的影响，画图可以这么来画&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.plot.scatter(x = &lt;span&gt;&quot;Age&quot;&lt;/span&gt;, y = &lt;span&gt;&quot;Fare&quot;&lt;/span&gt;, alpha = 0.6)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;36002&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100007334&quot; data-ratio=&quot;0.455188679245283&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jibw7n291dTzicHIr4ggiaTPy7otz55b0G8Wo8tMALlJYTtdRV7YQpGLibZA61kPFR8n27UIPRZNjPlns4ar4fgF7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot; data-width=&quot;100%&quot; title=&quot;&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;除了散点图以及折线图之外，还有其他很多类型的图，具体我们可以这么来知晓&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; method_name &lt;span&gt;in&lt;/span&gt; dir(df.plot):&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; not method_name.startswith(&lt;span&gt;&quot;_&quot;&lt;/span&gt;):&lt;br/&gt;        &lt;span&gt;print&lt;/span&gt;(method_name)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;area&lt;br/&gt;bar&lt;br/&gt;barh&lt;br/&gt;box&lt;br/&gt;density&lt;br/&gt;hexbin&lt;br/&gt;hist&lt;br/&gt;kde&lt;br/&gt;line&lt;br/&gt;pie&lt;br/&gt;scatter&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;我们看到还有直方图、饼图、水平方向的直方图等等，我们随便挑选一个类型的&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.plot.box()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;36002&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100007335&quot; data-ratio=&quot;0.44339622641509435&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jibw7n291dTzicHIr4ggiaTPy7otz55b0G88Qnic5xibHGiam7n30Jv4yd1mibibu1fHkHZ4Wa6icEJJddE0flCLibQrdh3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot; data-width=&quot;100%&quot; title=&quot;&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要是我们希望可以分开来绘制图形，就可以这么来操作&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.plot.area(figsize=(12, 4), subplots=True)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;36002&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100007336&quot; data-ratio=&quot;0.33726415094339623&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jibw7n291dTzicHIr4ggiaTPy7otz55b0G8jdsj21C60Iql6HLxEMdTMc8lLq9qYHR9Kqr40gsYdnAWHCXpgxEX9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot; data-width=&quot;100%&quot; title=&quot;&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要是我们想要将绘制好的图片保存下来，可以直接使用&lt;code&gt;savefig&lt;/code&gt;方法，&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import matplotlib.pyplot as plt&lt;br/&gt;fig, axs = plt.subplots(figsize=(12, 4))&lt;br/&gt;df.plot.area(ax=axs)&lt;br/&gt;fig.savefig(&lt;span&gt;&quot;test.png&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;36002&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100007337&quot; data-ratio=&quot;0.3136792452830189&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jibw7n291dTzicHIr4ggiaTPy7otz55b0G845Jsz9pFjh5yQl6npjiaGHu4hADrpP8CIXU2sjh9d17EWibXLs1eBM8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot; data-width=&quot;100%&quot; title=&quot;&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;由于篇幅有限，关于如何使用 Pandas 内部方法来绘制图形，就先介绍到这里，大家要是有兴趣，小编可以之后单独写一篇详细说说&lt;br/&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;如何新增一列&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 DataFrame 当中新增一列其实不难，我们可以这么来操作&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[&lt;span&gt;&quot;Date&quot;&lt;/span&gt;] = pd.date_range(&lt;span&gt;&quot;1912-04-02&quot;&lt;/span&gt;, periods=len(df))&lt;br/&gt;df.head()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;   PassengerId  Survived  Pclass  ... Cabin Embarked       Date&lt;br/&gt;0            1         0       3  ...   NaN        S 1912-04-02&lt;br/&gt;1            2         1       1  ...   C85        C 1912-04-03&lt;br/&gt;2            3         1       3  ...   NaN        S 1912-04-04&lt;br/&gt;3            4         1       1  ...  C123        S 1912-04-05&lt;br/&gt;4            5         0       3  ...   NaN        S 1912-04-06&lt;br/&gt;&lt;br/&gt;[5 rows x 13 columns]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;添加了新的一列叫做“Date”，长度为表格的总行数，那要是我们想要在原有表格的基础之上再添加一列呢？我们先来定义一个函数&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;def define_age(age):&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; age &amp;lt; 18:&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;少年&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;elif&lt;/span&gt; age &amp;gt;= 18 and age &amp;lt; 35:&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;青年&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;elif&lt;/span&gt; age &amp;gt;= 35 and age &amp;lt; 55:&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;中年&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;老年&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后再用&lt;code&gt;apply&lt;/code&gt;来实现&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[&lt;span&gt;&quot;Generation&quot;&lt;/span&gt;] = df[&lt;span&gt;&quot;Age&quot;&lt;/span&gt;].apply(define_age)&lt;br/&gt;df.head()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;   PassengerId  Survived  Pclass  ... Cabin Embarked  Generation&lt;br/&gt;0            1         0       3  ...   NaN        S          青年&lt;br/&gt;1            2         1       1  ...   C85        C          中年&lt;br/&gt;2            3         1       3  ...   NaN        S          青年&lt;br/&gt;3            4         1       1  ...  C123        S          中年&lt;br/&gt;4            5         0       3  ...   NaN        S          中年&lt;br/&gt;&lt;br/&gt;[5 rows x 13 columns]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们想给表格中的列名重新命名的话，可以使用&lt;code&gt;rename&lt;/code&gt;方法，&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df_renamed = df.rename(columns={&lt;span&gt;&quot;Name&quot;&lt;/span&gt;:&lt;span&gt;&quot;Full Name&quot;&lt;/span&gt;, &lt;span&gt;&quot;Sex&quot;&lt;/span&gt;: &lt;span&gt;&quot;Gender&quot;&lt;/span&gt;, &lt;span&gt;&quot;Ticket&quot;&lt;/span&gt;: &lt;span&gt;&quot;FareTicket&quot;&lt;/span&gt;})&lt;br/&gt;df_renamed.head()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;36002&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100007338&quot; data-ratio=&quot;0.2240566037735849&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jibw7n291dTzicHIr4ggiaTPy7otz55b0G8NLc0IMlgj8wL5QXmCbsur657wQEA5PzTFKX0mG7uUw1VuJxyQw3cvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot; data-width=&quot;100%&quot; title=&quot;&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;DataFrame中的统计分析&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;Pandas&lt;/code&gt;中也提供了很多相关的方法来进行数据的统计分析&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;print&lt;/span&gt;(df[&lt;span&gt;&quot;Age&quot;&lt;/span&gt;].mean())&lt;br/&gt;&lt;span&gt;print&lt;/span&gt;(df[&lt;span&gt;&quot;Age&quot;&lt;/span&gt;].max())&lt;br/&gt;&lt;span&gt;print&lt;/span&gt;(df[&lt;span&gt;&quot;Age&quot;&lt;/span&gt;].min())&lt;br/&gt;&lt;span&gt;print&lt;/span&gt;(df[&lt;span&gt;&quot;Age&quot;&lt;/span&gt;].median())&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;上面分别计算了“Age”这一列的平均值、最大/最小值以及中位数，出来的结果为&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;29.69911764705882&lt;br/&gt;80.0&lt;br/&gt;0.42&lt;br/&gt;28.0&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时我们也可以使用&lt;code&gt;describe()&lt;/code&gt;方法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.describe()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare&lt;br/&gt;count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000&lt;br/&gt;mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208&lt;br/&gt;std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429&lt;br/&gt;min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000&lt;br/&gt;25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400&lt;br/&gt;50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200&lt;br/&gt;75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000&lt;br/&gt;max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200&lt;br/&gt;&lt;br/&gt;[8 rows x 7 columns]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然我们也可以对于特定几列的数据进行统计分析&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.agg(&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;&quot;Age&quot;&lt;/span&gt;: [&lt;span&gt;&quot;min&quot;&lt;/span&gt;, &lt;span&gt;&quot;max&quot;&lt;/span&gt;, &lt;span&gt;&quot;mean&quot;&lt;/span&gt;],&lt;br/&gt;        &lt;span&gt;&quot;Fare&quot;&lt;/span&gt;: [&lt;span&gt;&quot;min&quot;&lt;/span&gt;, &lt;span&gt;&quot;max&quot;&lt;/span&gt;, &lt;span&gt;&quot;mean&quot;&lt;/span&gt;]&lt;br/&gt;    }&lt;br/&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;            Age        Fare&lt;br/&gt;min    0.420000    0.000000&lt;br/&gt;max   80.000000  512.329200&lt;br/&gt;mean  29.699118   32.204208&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;除此之外，我们也可以通过&lt;code&gt;groupby&lt;/code&gt;方法来进行数据的统计，例如我们想要知道不同的性别之下的平均年龄分别是多少，可以这么来操作&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[[&lt;span&gt;&quot;Sex&quot;&lt;/span&gt;, &lt;span&gt;&quot;Age&quot;&lt;/span&gt;]].groupby(&lt;span&gt;&quot;Sex&quot;&lt;/span&gt;).mean()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;              Age&lt;br/&gt;Sex              &lt;br/&gt;female  27.915709&lt;br/&gt;male    30.726645&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，&lt;code&gt;value_counts()&lt;/code&gt;方法也可以针对单独某一列数据，看一下数据的具体分布，&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[&lt;span&gt;&quot;Pclass&quot;&lt;/span&gt;].value_counts()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;3    491&lt;br/&gt;1    216&lt;br/&gt;2    184&lt;br/&gt;Name: Pclass, dtype: int64&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;DataFrame中的排序问题&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们假设有这么一组数据，&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data = {&lt;br/&gt;    &lt;span&gt;&quot;Name&quot;&lt;/span&gt;: [&lt;span&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span&gt;&quot;Peter&quot;&lt;/span&gt;, &lt;span&gt;&quot;Clara&quot;&lt;/span&gt;, &lt;span&gt;&quot;Tony&quot;&lt;/span&gt;, &lt;span&gt;&quot;John&quot;&lt;/span&gt;],&lt;br/&gt;    &lt;span&gt;&quot;Age&quot;&lt;/span&gt;: [30, 26, 20, 22, 25]&lt;br/&gt;}&lt;br/&gt;df = pd.DataFrame(data)&lt;br/&gt;df&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    Name  Age&lt;br/&gt;0   Mike   30&lt;br/&gt;1  Peter   26&lt;br/&gt;2  Clara   20&lt;br/&gt;3   Tony   22&lt;br/&gt;4   John   25&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以将数据按照“Age”年龄这一列来进行排序&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.sort_values(by=&lt;span&gt;&quot;Age&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    Name  Age&lt;br/&gt;2  Clara   20&lt;br/&gt;3   Tony   22&lt;br/&gt;4   John   25&lt;br/&gt;1  Peter   26&lt;br/&gt;0   Mike   30&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然我们也可以按照降序来进行排列&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.sort_values(&lt;span&gt;&quot;Age&quot;&lt;/span&gt;, ascending=False)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    Name  Age&lt;br/&gt;0   Mike   30&lt;br/&gt;1  Peter   26&lt;br/&gt;4   John   25&lt;br/&gt;3   Tony   22&lt;br/&gt;2  Clara   20&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;合并多个表格&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如我们有这么两个表格，&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df1 = pd.DataFrame(&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;&quot;Name&quot;&lt;/span&gt;: [&lt;span&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span&gt;&quot;John&quot;&lt;/span&gt;, &lt;span&gt;&quot;Clara&quot;&lt;/span&gt;, &lt;span&gt;&quot;Linda&quot;&lt;/span&gt;],&lt;br/&gt;         &lt;span&gt;&quot;Age&quot;&lt;/span&gt;: [30, 26, 20, 22]&lt;br/&gt;    }&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;df2 = pd.DataFrame(&lt;br/&gt;     {&lt;br/&gt;         &lt;span&gt;&quot;Name&quot;&lt;/span&gt;: [&lt;span&gt;&quot;Brian&quot;&lt;/span&gt;, &lt;span&gt;&quot;Mary&quot;&lt;/span&gt;],&lt;br/&gt;         &lt;span&gt;&quot;Age&quot;&lt;/span&gt;: [45, 38]&lt;br/&gt;     }&lt;br/&gt;)&lt;br/&gt;df_names_ages = pd.concat([df1, df2], axis=0)&lt;br/&gt;df_names_ages&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    Name  Age&lt;br/&gt;0   Mike   30&lt;br/&gt;1   John   26&lt;br/&gt;2  Clara   20&lt;br/&gt;3  Linda   22&lt;br/&gt;0  Brian   45&lt;br/&gt;1   Mary   38&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;因为上面两个表格有着两者的列名“Name”、“Age”，因此我们可以用&lt;code&gt;concat&lt;/code&gt;方法来进行合并，当然我们也可以用&lt;code&gt;join&lt;/code&gt;方法&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df1 = pd.DataFrame(&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;&quot;Name&quot;&lt;/span&gt;: [&lt;span&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span&gt;&quot;John&quot;&lt;/span&gt;, &lt;span&gt;&quot;Clara&quot;&lt;/span&gt;, &lt;span&gt;&quot;Sara&quot;&lt;/span&gt;],&lt;br/&gt;         &lt;span&gt;&quot;Age&quot;&lt;/span&gt;: [30, 26, 20, 22],&lt;br/&gt;        &lt;span&gt;&quot;City&quot;&lt;/span&gt;: [&lt;span&gt;&quot;New York&quot;&lt;/span&gt;, &lt;span&gt;&quot;Shanghai&quot;&lt;/span&gt;, &lt;span&gt;&quot;London&quot;&lt;/span&gt;, &lt;span&gt;&quot;Paris&quot;&lt;/span&gt;],&lt;br/&gt;    }&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;df2 = pd.DataFrame(&lt;br/&gt;     {&lt;br/&gt;         &lt;span&gt;&quot;City&quot;&lt;/span&gt;: [&lt;span&gt;&quot;New York&quot;&lt;/span&gt;, &lt;span&gt;&quot;Shanghai&quot;&lt;/span&gt;, &lt;span&gt;&quot;London&quot;&lt;/span&gt;, &lt;span&gt;&quot;Paris&quot;&lt;/span&gt;],&lt;br/&gt;         &lt;span&gt;&quot;Occupation&quot;&lt;/span&gt;: [&lt;span&gt;&quot;Machine Learning Enginner&quot;&lt;/span&gt;, &lt;span&gt;&quot;Data Scientist&quot;&lt;/span&gt;, &lt;span&gt;&quot;Doctor&quot;&lt;/span&gt;,&lt;span&gt;&quot;Teacher&quot;&lt;/span&gt;]&lt;br/&gt;     }&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;df_merged = pd.merge(df1,df2,how=&lt;span&gt;&quot;left&quot;&lt;/span&gt;, on=&lt;span&gt;&quot;City&quot;&lt;/span&gt;)&lt;br/&gt;df_merged&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    Name  Age      City                 Occupation&lt;br/&gt;0   Mike   30  New York  Machine Learning Enginner&lt;br/&gt;1   John   26  Shanghai             Data Scientist&lt;br/&gt;2  Clara   20    London                     Doctor&lt;br/&gt;3   Sara   22     Paris                    Teacher&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;两个表格都共有一列“City”，通过&lt;code&gt;join&lt;/code&gt;方法依次来进行合并。由于篇幅有限，小编在这里也就简单地提及一下，后面再专门写篇文章来详细说明。&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;时序问题的处理&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在时序问题的处理上，小编之前专门写过一篇文章，具体可以看&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0NzI3ODMyMA==&amp;amp;mid=2247489105&amp;amp;idx=1&amp;amp;sn=674ea85b9cc7bcfa516e66478c92ae55&amp;amp;chksm=c3780ecef40f87d83c430e380062652ae3fa376164133e8f664cd424a934cb8796956a9d166e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;干货分享 | Pandas处理时间序列的数据&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如我们有这么一个数据集&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df = pd.read_csv(&lt;span&gt;&quot;air_quality.csv&quot;&lt;/span&gt;)&lt;br/&gt;df = df.rename(columns={&lt;span&gt;&quot;date.utc&quot;&lt;/span&gt;: &lt;span&gt;&quot;datetime&quot;&lt;/span&gt;})&lt;br/&gt;df.head()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    city country                   datetime location parameter  value&lt;br/&gt;0  Paris      FR  2019-06-21 00:00:00+00:00  FR04014       no2   20.0&lt;br/&gt;1  Paris      FR  2019-06-20 23:00:00+00:00  FR04014       no2   21.8&lt;br/&gt;2  Paris      FR  2019-06-20 22:00:00+00:00  FR04014       no2   26.5&lt;br/&gt;3  Paris      FR  2019-06-20 21:00:00+00:00  FR04014       no2   24.9&lt;br/&gt;4  Paris      FR  2019-06-20 20:00:00+00:00  FR04014       no2   21.4&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看一下目前“datetime”这一列的数据类型&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df.dtypes&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;city          object&lt;br/&gt;country       object&lt;br/&gt;datetime      object&lt;br/&gt;location      object&lt;br/&gt;parameter     object&lt;br/&gt;value        float64&lt;br/&gt;dtype: object&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;我们可以用&lt;code&gt;pandas&lt;/code&gt;当中的&lt;code&gt;to_datetime&lt;/code&gt;方法将“datetime”这一列转换成“datetime”的格式&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[&lt;span&gt;&quot;datetime&quot;&lt;/span&gt;] = pd.to_datetime(df[&lt;span&gt;&quot;datetime&quot;&lt;/span&gt;])&lt;br/&gt;df[&lt;span&gt;&quot;datetime&quot;&lt;/span&gt;].head()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;0   2019-06-21 00:00:00+00:00&lt;br/&gt;1   2019-06-20 23:00:00+00:00&lt;br/&gt;2   2019-06-20 22:00:00+00:00&lt;br/&gt;3   2019-06-20 21:00:00+00:00&lt;br/&gt;4   2019-06-20 20:00:00+00:00&lt;br/&gt;Name: datetime, dtype: datetime64[ns, UTC]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们便可以查看起始的日期&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[&lt;span&gt;&quot;datetime&quot;&lt;/span&gt;].min(), df[&lt;span&gt;&quot;datetime&quot;&lt;/span&gt;].max()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;(Timestamp(&lt;span&gt;&#x27;2019-05-07 01:00:00+0000&#x27;&lt;/span&gt;, tz=&lt;span&gt;&#x27;UTC&#x27;&lt;/span&gt;),&lt;br/&gt; Timestamp(&lt;span&gt;&#x27;2019-06-21 00:00:00+0000&#x27;&lt;/span&gt;, tz=&lt;span&gt;&#x27;UTC&#x27;&lt;/span&gt;))&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;中间相隔的时间&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[&lt;span&gt;&quot;datetime&quot;&lt;/span&gt;].max() - df[&lt;span&gt;&quot;datetime&quot;&lt;/span&gt;].min()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Timedelta(&lt;span&gt;&#x27;44 days 23:00:00&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;文本数据的处理问题&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们的数据集中存在文本数据时，&lt;code&gt;pandas&lt;/code&gt;内部也有相对应的处理方法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data = {&lt;span&gt;&quot;Full Name&quot;&lt;/span&gt;: [&lt;span&gt;&quot;Peter Parker&quot;&lt;/span&gt;, &lt;span&gt;&quot;Linda Elisabeth&quot;&lt;/span&gt;, &lt;span&gt;&quot;Bob Dylan&quot;&lt;/span&gt;],&lt;br/&gt;        &lt;span&gt;&quot;Age&quot;&lt;/span&gt;: [40, 50, 60]}&lt;br/&gt;&lt;br/&gt;df = pd.DataFrame(data)&lt;br/&gt;df&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;         Full Name  Age&lt;br/&gt;0     Peter Parker   40&lt;br/&gt;1  Linda Elisabeth   50&lt;br/&gt;2        Bob Dylan   60&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以用&lt;code&gt;str&lt;/code&gt;方法将这些文本数据摘取出来，然后再进一步操作&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[&lt;span&gt;&quot;Full Name&quot;&lt;/span&gt;].str.lower()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;0       peter parker&lt;br/&gt;1    linda elisabeth&lt;br/&gt;2          bob dylan&lt;br/&gt;Name: Full Name, dtype: object&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者也可以这样来操作&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[&lt;span&gt;&quot;Last Name&quot;&lt;/span&gt;] = df[&lt;span&gt;&quot;Full Name&quot;&lt;/span&gt;].str.split(&lt;span&gt;&quot; &quot;&lt;/span&gt;).str.get(-1)&lt;br/&gt;df&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;         Full Name  Age  Last Name&lt;br/&gt;0     Peter Parker   40     Parker&lt;br/&gt;1  Linda Elisabeth   50  Elisabeth&lt;br/&gt;2        Bob Dylan   60      Dylan&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样我们可以将其“姓”的部分给提取出来，同样的我们也可以提取“名”的部分&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[&lt;span&gt;&quot;First Name&quot;&lt;/span&gt;] = df[&lt;span&gt;&quot;Full Name&quot;&lt;/span&gt;].str.split(&lt;span&gt;&quot; &quot;&lt;/span&gt;).str.get(0)&lt;br/&gt;df&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;         Full Name  Age  Last Name First Name&lt;br/&gt;0     Peter Parker   40     Parker      Peter&lt;br/&gt;1  Linda Elisabeth   50  Elisabeth      Linda&lt;br/&gt;2        Bob Dylan   60      Dylan        Bob&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们也可以通过&lt;code&gt;contains&lt;/code&gt;方法来查看字段中是不是包含了某一个字符串&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;df[&lt;span&gt;&quot;Full Name&quot;&lt;/span&gt;].str.contains(&lt;span&gt;&quot;Bob&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;output&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;0    False&lt;br/&gt;1    False&lt;br/&gt;2     True&lt;br/&gt;Name: Full Name, dtype: bool&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样也是通过&lt;code&gt;str&lt;/code&gt;方法将文本数据也提取出来再进行进一步的操作&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>585b16aa1b5bfd62a786620a6b7623f5</guid>
<title>Java 中的监控与管理原理概述</title>
<link>https://toutiao.io/k/n09iy6h</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;theme-vdoing-content content__default&quot;&gt; &lt;p&gt;这篇文章是 &lt;strong&gt;Java 性能分析监控与优化&lt;/strong&gt;系列的第一篇文章，原本是计划系统的介绍 Java 性能分析方式和流行的监控工具，但是提笔之后意识到，只介绍分析方式和监控工具过于浅尝辄止了。如果只会使用某个工具而不知道背后的实现原理，总觉得有种陌生感，我想你们也是一样，所以多了这篇文章。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/niumoo/cdn-assets/2021/20211127214201.png&quot; alt=&quot;文章目录&quot;/&gt;&lt;/p&gt; &lt;h2 id=&quot;java-se-监控管理功能&quot;&gt;&lt;a href=&quot;#java-se-监控管理功能&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; Java SE 监控管理功能&lt;/h2&gt; &lt;p&gt;这篇文章介绍 Java Standard Edition（Java SE）平台提供的监控和管理技术 - &lt;strong&gt;JMX&lt;/strong&gt;（Java Management Extensions） 技术。&lt;/p&gt; &lt;p&gt;Java SE 平台本身就提供了用于监控和管理服务的实用性功能模块，按功能来说主要分为下面四类：&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Java 监控和管理 API&lt;/li&gt; &lt;li&gt;Java 虚拟机检测&lt;/li&gt; &lt;li&gt;Java 管理扩展技术（JMX）&lt;/li&gt; &lt;li&gt;Java 监控和管理的工具&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;这篇文章会介绍这四个部分的相关知识，旨在了解 Java SE 监控与管理的相关功能，对其中的相关概念有个理解。&lt;/p&gt; &lt;h2 id=&quot;java-监控和管理-api&quot;&gt;&lt;a href=&quot;#java-监控和管理-api&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; Java 监控和管理 API&lt;/h2&gt; &lt;p&gt;Java SE 中包含了用于监控和管理的（&lt;code&gt;java.lang.management&lt;/code&gt;）API，通过这些 API 可以实现应用程序的自我监控，此 API 主要提供了以下信息的访问：&lt;/p&gt; &lt;ul&gt;&lt;li&gt;类加载相关。&lt;/li&gt; &lt;li&gt;JVM 相关，如运行时间、系统环境变量、用户输入参数。&lt;/li&gt; &lt;li&gt;线程相关，如线程状态，线程的统计信息、线程的堆栈等。&lt;/li&gt; &lt;li&gt;内存使用情况。&lt;/li&gt; &lt;li&gt;GC 情况。&lt;/li&gt; &lt;li&gt;死锁检测。&lt;/li&gt; &lt;li&gt;操作系统信息。&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;下图是 Java 17 中的 &lt;code&gt;java.management&lt;/code&gt; 模块。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/niumoo/cdn-assets/draw/20211126142407.png&quot; alt=&quot;java.lang.management&quot;/&gt;&lt;/p&gt; &lt;p&gt;JConsole 就是通过访问这些管理 API 提供的数据，绘制了监控的界面版。&lt;/p&gt; &lt;h2 id=&quot;java-虚拟机监测&quot;&gt;&lt;a href=&quot;#java-虚拟机监测&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; Java 虚拟机监测&lt;/h2&gt; &lt;p&gt;上面说到 Java SE 中已经内置了开箱即用的监控和管理功能，通过这些功能可以实现程序的自我监测，Java 默认已经实现了对 Java 虚拟机相关信息的监测，在 Java 监控和管理 API 部分也列举了 API 可以监测的部分内容，那么怎么使用呢？&lt;/p&gt; &lt;p&gt;下面通过一个简单的示例，演示如何通过监控管理 API 获取系统信息、编译器信息、内存信息以及垃圾收集器信息。&lt;/p&gt; &lt;div class=&quot;language-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wdbyte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;management&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CompilationMXBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;management&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;GarbageCollectorMXBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;management&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ManagementFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;management&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MemoryMXBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;management&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MemoryManagerMXBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;management&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MemoryUsage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;management&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OperatingSystemMXBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;JavaManagement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;OperatingSystemMXBean&lt;/span&gt; operatingSystemMXBean &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ManagementFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOperatingSystemMXBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; osName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; operatingSystemMXBean&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; osVersion &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; operatingSystemMXBean&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; processors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; operatingSystemMXBean&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAvailableProcessors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;操作系统：%s，版本：%s，处理器：%d 个&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; osName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; osVersion&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; processors&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token class-name&quot;&gt;CompilationMXBean&lt;/span&gt; compilationMXBean &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ManagementFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCompilationMXBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; compilationMXBeanName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; compilationMXBean&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;编译系统：&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; compilationMXBeanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token class-name&quot;&gt;MemoryMXBean&lt;/span&gt; memoryMXBean &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ManagementFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMemoryMXBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;MemoryUsage&lt;/span&gt; heapMemoryUsage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; memoryMXBean&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getHeapMemoryUsage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; max &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; heapMemoryUsage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; used &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; heapMemoryUsage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUsed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;使用内存：%dMB/%dMB&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; used &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; max &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;GarbageCollectorMXBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; gcMXBeans &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ManagementFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getGarbageCollectorMXBeans&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; gcNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; gcMXBeans&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MemoryManagerMXBean&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;joining&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;垃圾收集器：&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; gcNames&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;38&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;运行时指定了内存为 100MB（&lt;code&gt;-Xms100M -Xmx100M&lt;/code&gt;），得到如下结果。&lt;/p&gt; &lt;div class=&quot;language-she line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;操作系统：Mac OS X，版本：11.6，处理器：12 个
编译系统：HotSpot 64-Bit Tiered Compilers
使用内存：2MB/100MB
垃圾收集：G1 Young Generation,G1 Old Generation
&lt;/code&gt;&lt;/pre&gt; &lt;p class=&quot;line-numbers-wrapper&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;custom-block tip&quot;&gt;&lt;p class=&quot;custom-block-title&quot;&gt;注意&lt;/p&gt; &lt;p&gt;细看代码可以发现其中很多类都是以 &lt;strong&gt;MXBean&lt;/strong&gt; 结尾，这是什么意思呢？&lt;/p&gt;&lt;/div&gt; &lt;h2 id=&quot;java-管理扩展技术-jmx&quot;&gt;&lt;a href=&quot;#java-管理扩展技术-jmx&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; Java 管理扩展技术（JMX）&lt;/h2&gt; &lt;p&gt;在 Java 虚拟机监测中的代码示例中，可以看到很多命名以 &lt;strong&gt;MXBean&lt;/strong&gt; 结尾的类，这里已经涉及到了 &lt;strong&gt;JMX&lt;/strong&gt;（Java Management Extensions） 技术。&lt;/p&gt; &lt;p&gt;&lt;strong&gt;JMX&lt;/strong&gt; 技术提供了一种简单、标准的方式来管理资源，如操作系统、虚拟机信息、内存状态、线程信息等，这些统称为被管理的资源。而且 &lt;strong&gt;JMX&lt;/strong&gt; 是可以动态的，所以可以使用 &lt;strong&gt;JMX&lt;/strong&gt; 技术来监测和管理各种资源。可以使用 JMX 技术来监测 Java 虚拟机状态，也可以使用 &lt;strong&gt;JMX&lt;/strong&gt; 技术构建自己的需要管理的资源。&lt;/p&gt; &lt;p&gt;JMX 技术只有资源定义那么简单吗？不是的。JMX 规范了 Java 中资源定义的方式、资源管理的方式、监控和管理的体系结构、具体实现的设计模式、监控和管理的相关 API 以及&lt;strong&gt;用于网络的远程监控服务&lt;/strong&gt;（RMI），这一系列功能统称为 JMX 技术。是 Java SE 平台的标准部分。&lt;/p&gt; &lt;p&gt;上面多次提到了&lt;strong&gt;管理资源&lt;/strong&gt;，那么如何定义一个资源呢？JMX 技术给出了资源定义的体系结构和设计模式，在 &lt;strong&gt;JMX&lt;/strong&gt; 中，通过定义一个被称为 &lt;strong&gt;MBean&lt;/strong&gt; 或 &lt;strong&gt;MXBean&lt;/strong&gt; 的 Java 对象来表示要管理指定的资源，资源定义的 Java 类名必须以 &lt;strong&gt;MBean&lt;/strong&gt; 或 &lt;strong&gt;MXBean&lt;/strong&gt; 结尾。&lt;/p&gt; &lt;p&gt;下图是 Java 17 中的以 MXBean 结尾的资源定义类，通过命名可以看出每个类代表了什么资源。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/niumoo/cdn-assets/draw/20211126212731.png&quot; alt=&quot;Java 中的 MXbean&quot;/&gt;&lt;/p&gt; &lt;p&gt;这篇文章主要是介绍 Java SE 中的监控与管理功能，让大家对 Java 中的监控与管理背后的原理和概念有一个具体的认识，所以 MBean 和 MXBean 的具体设计实现方式不是这篇文章的重点，这里不过多介绍，会放到下一篇独立的 JMX 技术文章中介绍。&lt;/p&gt; &lt;h2 id=&quot;java-监控和管理的工具&quot;&gt;&lt;a href=&quot;#java-监控和管理的工具&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; Java 监控和管理的工具&lt;/h2&gt; &lt;p&gt;JMX 技术中提到 JMX 不仅提供了监控和管理的 API ，还提供了用于网络远程管理的服务，可以使用 JMX 相关监控管理工具，通过网络远程连接到正在运行 Java 虚拟机，监控其运行状态，Java 中集成的 &lt;code&gt;jconsole&lt;/code&gt; 就是这样一款工具。&lt;/p&gt; &lt;p&gt;本地随意启动一个可以持续运行的 Java 程序用作被监测对象，如果你已经配置好 Java 环境变量，可以直接通过 &lt;code&gt;jconsole&lt;/code&gt; 启动工具。&lt;/p&gt; &lt;p&gt;启动后的 &lt;code&gt;jconsole&lt;/code&gt; 已经列出了本地正在运行的 Java 程序，选择自己想要监测的进行进行监测。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/niumoo/cdn-assets/draw/20211127154455.png&quot; alt=&quot;Jconsole 界面&quot;/&gt;&lt;/p&gt; &lt;p&gt;连接成功后可以看到当前 Java 进程的资源占用情况。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/niumoo/cdn-assets/draw/20211127154215.png&quot; alt=&quot;JConsole 监控&quot;/&gt;&lt;/p&gt; &lt;p&gt;在 MBean 页面中，可以看到各种已经被定义的资源的具体情况。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/niumoo/cdn-assets/draw/20211127154332.png&quot; alt=&quot;Jconsole MBean 情况&quot;/&gt;&lt;/p&gt; &lt;p&gt;Jconsole 是一款强大的图形界面 JMX 管理工具，不仅可以连接本地 Java 程序，还可以通过网络监控远程的 Java 程序运行状态，不过不是此篇文章重点，不在详细描述。&lt;/p&gt; &lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>08d8cb2f1281204e6fe695d739931bf6</guid>
<title>CMake 简明实用教程</title>
<link>https://toutiao.io/k/ey5m92g</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div itemprop=&quot;articleBody&quot; class=&quot;post-content&quot;&gt;&lt;blockquote&gt;&lt;p&gt;CMake是一个跨平台、开源的构建工具，在C/C++项目中有广泛应用。本文首先介绍CMake及常用指令，并结合工作时需要用到的Qt 5，给出一个完整的CMake项目配置。&lt;/p&gt;&lt;/blockquote&gt; &lt;span id=&quot;bnp_i_1&quot;/&gt;&lt;h2&gt;CMake简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;CMake&lt;/strong&gt;如其名”Cross-platform Make”，是一个 &lt;strong&gt;跨平台、开源 &lt;/strong&gt;的构建工具。与make不同，CMake并不直接构建软件，而是生成用于构建的Makefile、.sln等工程文件，相当于高阶构建工具。&lt;/p&gt;&lt;p&gt;与另一构建工具Automake相比，CMake使用上更方便，支持更多的编译套件(Ninja、VS等)。许多编辑器和IDE，如VS Code(宇宙第一编辑器/IDE)、Clion、Visual Studio等都内置了对CMake的支持。特别的，&lt;strong&gt;CMake已经是QT 6的默认构建工具&lt;/strong&gt;，官方给出从qmake迁移的理由是CMake成熟稳定、用户基数大生态完善。因此，对于需要跨平台编译运行的C/C++项目，很推荐学习和使用CMake作为构建工具，能方便的转换成各种IDE项目，团队成员无需切换编辑器/IDE即可工作。&lt;/p&gt;&lt;p&gt;值得一提的是，&lt;strong&gt;CMake由Kitware公司开发和维护&lt;/strong&gt;，VTK和ParaView等知名开源产品均出自该公司。从这方面看，CMake也算出身名门，因此能很快流行开来。&lt;/p&gt; &lt;span id=&quot;bnp_i_2&quot;/&gt;&lt;h2&gt;CMake命令&lt;/h2&gt;&lt;p&gt;CMake基于CMakeLists.txt文件来生成对应目标(generator)的构建文件，一个标准的CMake项目构建操作为(命令行方式)：&lt;/p&gt;&lt;pre&gt;cd PROJECT_DIR
cmake
make TARGET&lt;/pre&gt;&lt;p&gt;或者使用用CMake GUI：&lt;/p&gt;&lt;figure id=&quot;attachment_10002&quot; aria-describedby=&quot;caption-attachment-10002&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://tlanyan.pp.ua/cmake-qt-tutorial/cmake-gui%e6%93%8d%e4%bd%9c%e7%a4%ba%e6%84%8f%e5%9b%be/&quot; rel=&quot;attachment wp-att-10002&quot;&gt;&lt;noscript&gt;&lt;img class=&quot;size-full wp-image-10002&quot; src=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/11/CMake-GUI操作示意图.jpeg&quot; alt=&quot;CMake-GUI操作示意图&quot; srcset=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/11/CMake-GUI操作示意图.jpeg?v=1638067062 619w, https://tlanyan.pp.ua/wp-content/uploads/2021/11/CMake-GUI操作示意图-291x300.jpeg?v=1638067062 291w&quot; sizes=&quot;(max-width: 619px) 100vw, 619px&quot;/&gt;&lt;/noscript&gt;&lt;img class=&quot;lazyload size-full wp-image-10002&quot; src=&quot;&quot; data-src=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/11/CMake-GUI操作示意图.jpeg&quot; alt=&quot;CMake-GUI操作示意图&quot; data-srcset=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/11/CMake-GUI操作示意图.jpeg?v=1638067062 619w, https://tlanyan.pp.ua/wp-content/uploads/2021/11/CMake-GUI操作示意图-291x300.jpeg?v=1638067062 291w&quot; data-sizes=&quot;(max-width: 619px) 100vw, 619px&quot;/&gt;&lt;/a&gt;&lt;figcaption id=&quot;caption-attachment-10002&quot; class=&quot;wp-caption-text&quot;&gt;CMake-GUI操作示意图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;然后使用VS打开生成的.sln项目，即可编译、运行和调试项目。&lt;/p&gt;&lt;p&gt;Linux/Unix/MacOS平台上，CMake默认生成标准的makefile；Windows平台上则会检测Visual Studio版本，生成对应的VS .sln项目工程文件(在MSYS/Cygwin/WSL环境下执行除外)。可以使用 &lt;code&gt;-G&lt;/code&gt; 选项切换生成目标，例如生成Ninja构建文件：&lt;/p&gt;&lt;pre&gt;cmake . -G Ninja
ninja TARGET&lt;/pre&gt;&lt;p&gt;CMake一个非常棒的特性是“外部构建”(out-of-source build)，即支持在源码目录外构建。由于这个特性，以及CMake生成的makefile没有clean命令，一般来说都推荐在单独的build目录中构建：&lt;/p&gt;&lt;pre&gt;mkdir -p build
cd $_
cmake ..
make TARGET -j4&lt;/pre&gt;&lt;p&gt;如果使用CMake GUI，Browse Build时请选择单独的构建目录。&lt;/p&gt;&lt;p&gt;命令行方式下编译Debug/Release版本、传递C++编译参数，请使用 &lt;code&gt;-D&lt;/code&gt; 选项，例如：&lt;/p&gt;&lt;pre&gt;cmake .. -DCMAKE_BUILD_TYPE=Release
make TARGET -j4&lt;/pre&gt;&lt;p&gt;一些内置的宏定义参数可参考下文的环境变量。&lt;/p&gt;&lt;p&gt;如果是生成VS项目，则只需在VS中选择构建版本、设置编译和链接参数即可。&lt;/p&gt; &lt;span id=&quot;bnp_i_3&quot;/&gt;&lt;h2&gt;CMake常见指令&lt;/h2&gt;&lt;p&gt;CMake基于CMakeLists.txt文件生成项目构建文件，因此编写CMakeLists.txt文件是CMake项目的核心。本小节介绍一些用在CMakeLists.txt文件中的常用指令。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;CMakeLists.txt 使用  # 作为注释，# 所在行后续字符均作为注释被忽略&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;一般这条指令出现在文件的最前面，用来指定项目支持的最低版本。对于Qt 5项目，建议为：&lt;code&gt;cmake_minimum_required(VERSION 3.7)&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;指定项目名称及属性。C/C++项目的建议值为：&lt;code&gt;project(项目名称 C CXX)&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;定义一些变量、宏的值。该指令一般会出现多次，例如设置C++语法标准：&lt;code&gt;set(CMAKE_CXX_STANDARD 11)&lt;/code&gt;。相反的指令是unset。&lt;/p&gt;&lt;p&gt;条件控制语句，注意指令后的括号不可省略：&lt;/p&gt;&lt;pre&gt;if (WIN32)
xxxx
else() # 括号不可省略
xxxx
endif()

&lt;/pre&gt;&lt;p&gt;查找指定模块，例如OpenMP。Qt 5项目一般需要：&lt;code&gt;find_package(Qt5 COMPONENTS Widgets REQUIRED)&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;添加头文件include路径，一个更推荐使用的指令是 &lt;code&gt;target_include_directories&lt;/code&gt;，其不污染后续目标的include路径，且能精细控制是否暴露依赖的包含路径。但是 &lt;code&gt;target_include_directories&lt;/code&gt; 需要CMake 3.13 版本才支持，在Visual Studio 2017中使用会有问题。&lt;/p&gt;&lt;p&gt;设置链接库的路径，更推荐的指令是 &lt;code&gt;target_link_directories&lt;/code&gt;，理由见 &lt;code&gt;include_directories&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;将指定目录下的源文件添加到变量中，例如：&lt;code&gt;aux_source_directory(./src SRC)&lt;/code&gt;。注意该命令不会递归包含子目录源文件。&lt;/p&gt;&lt;p&gt;file命令是一个功能丰富的目录和文件操作指令，例如递归找出目录下的所有源文件保存到SRC变量中：&lt;code&gt;file(GLOB_RECURSE SRC &quot;src/*.cpp&quot; &quot;src/*/*.cpp&quot;)&lt;/code&gt;。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;相对于把每个需要编译的文件添加到CMakeLists.txt中，aux_source_directory 和 file 等指令可方便的引入多个文件，但其弊端之一是CMake不能感知文件变化。当新增文件、文件被删除、重命名时需刷新CMake缓存才能被应用到项目中。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;查找指定库的路径并保存到变量中。&lt;/p&gt;&lt;p&gt;添加自定义命令，可用于构建前进行moc，构建后拷贝文件等用途。&lt;/p&gt;&lt;p&gt;添加一个需要构建的子目录，子目录下有CMakeLists.txt文件设定好构建规则。&lt;/p&gt;&lt;p&gt;构建可执行程序，一般项目的主CMakeLists.txt中会有这条指令。&lt;/p&gt;&lt;p&gt;构建动态或静态库，一般存在于子目录或者库的CMakeLists.txt文件中。&lt;/p&gt;&lt;p&gt;可在cmake构建时输出信息。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CMakeLists.txt文件中指令不区分大小写&lt;/strong&gt;，但一般来说同一个文件中指令应保持大小写风格一致。&lt;/p&gt;&lt;p&gt;更多指令可参考 &lt;a href=&quot;https://cmake.org/cmake/help/latest/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CMake官方文档&lt;/a&gt;。&lt;/p&gt; &lt;span id=&quot;bnp_i_4&quot;/&gt;&lt;h2&gt;常用环境变量&lt;/h2&gt;&lt;p&gt;本小节介绍几个常用的环境变量(编译宏)。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;CMAKE_BUILD_TYPE:  指定构建类型，常用值为 Debug、Release、RelWithDebInfo 和 MinSizeRel；&lt;/li&gt;&lt;li&gt;CMAKE_C(XX)_FLAGS：传递给C/C++编译器的编译选项，例如输出所有警告： &lt;code&gt;-DCMAKE_CXX_FLAGS=&quot;-Wall&quot;&lt;/code&gt;；&lt;/li&gt;&lt;li&gt;– CMAKE_EXE/MODULE/_LINKER_FLAGS：传递给C/C++链接器的编译选项，例如指定链接数学库：-&lt;code&gt;DCMAKE_LINKER_FLAGS=&quot;-lmath&quot;&lt;/code&gt;。&lt;/li&gt;&lt;/ul&gt; &lt;span id=&quot;bnp_i_5&quot;/&gt;&lt;h2&gt;Qt应用示例&lt;/h2&gt;&lt;p&gt;本节结合工作时需要用到的Qt 5，介绍Qt 5工程中CMake的使用方式。&lt;/p&gt;&lt;p&gt;新建Qt项目时，可以选择CMake作为构建工具：&lt;/p&gt;&lt;figure id=&quot;attachment_10004&quot; aria-describedby=&quot;caption-attachment-10004&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://tlanyan.pp.ua/cmake-qt-tutorial/qt%e6%96%b0%e5%bb%ba%e9%a1%b9%e7%9b%ae%e4%bd%bf%e7%94%a8cmake/&quot; rel=&quot;attachment wp-att-10004&quot;&gt;&lt;noscript&gt;&lt;img class=&quot;size-full wp-image-10004&quot; src=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/11/Qt新建项目使用CMake.png&quot; alt=&quot;Qt新建项目使用CMake&quot; srcset=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/11/Qt新建项目使用CMake.png?v=1638070103 816w, https://tlanyan.pp.ua/wp-content/uploads/2021/11/Qt新建项目使用CMake-300x187.png?v=1638070103 300w, https://tlanyan.pp.ua/wp-content/uploads/2021/11/Qt新建项目使用CMake-768x478.png?v=1638070103 768w&quot; sizes=&quot;(max-width: 816px) 100vw, 816px&quot;/&gt;&lt;/noscript&gt;&lt;img class=&quot;lazyload size-full wp-image-10004&quot; src=&quot;&quot; data-src=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/11/Qt新建项目使用CMake.png&quot; alt=&quot;Qt新建项目使用CMake&quot; data-srcset=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/11/Qt新建项目使用CMake.png?v=1638070103 816w, https://tlanyan.pp.ua/wp-content/uploads/2021/11/Qt新建项目使用CMake-300x187.png?v=1638070103 300w, https://tlanyan.pp.ua/wp-content/uploads/2021/11/Qt新建项目使用CMake-768x478.png?v=1638070103 768w&quot; data-sizes=&quot;(max-width: 816px) 100vw, 816px&quot;/&gt;&lt;/a&gt;&lt;figcaption id=&quot;caption-attachment-10004&quot; class=&quot;wp-caption-text&quot;&gt;Qt新建项目使用CMake&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;生成项目后，项目文件夹将出现CMakeLists.txt和CMakeLists.txt.user两个文件，熟悉的.pro文件没有了(CMakeLists.txt.user充当了Qt Creator工程文件的角色，其他IDE用不到，可删除)。&lt;/p&gt;&lt;p&gt;但需要注意的是，此时Qt Creator中编译项目是没问题的，但是在CLion/VS Code中打开，或者生成Visual Studio用的.sln文件会有问题，因为CMake无法检测到Qt是否安装及其安装路径。&lt;/p&gt;&lt;p&gt;解决办法便是在&lt;code&gt; project&lt;/code&gt; 指令后增加如下指令告知Qt的安装位置：&lt;/p&gt;&lt;pre&gt;# 具体路径请根据自身情况替换
set(QT_MSVC_PATH &quot;C:\\Qt\\Qt5.12.8\\5.12.8\\msvc2017_64&quot;)
set(CMAKE_PREFIX_PATH &quot;${QT_MSVC_PATH}/lib/cmake&quot;)

&lt;/pre&gt;&lt;p&gt;然后再次运行 cmake 指令或者使用CMake GUI重新运行，构建文件夹下便能正常生成.sln项目文件。&lt;/p&gt;&lt;p&gt;VS中编译好后，运行时会提示无法找到Qt相关的dll导致程序不能正常运行。解决办法包括：&lt;/p&gt;&lt;p&gt;1. 设置VS选项，将Qt的dll路径包含进去；&lt;br/&gt; 2. 将Qt相关dll拷贝到编译输出文件夹；&lt;br/&gt; 3. 设置CMake，使其能自动复制所需要的dll。&lt;/p&gt;&lt;p&gt;这里介绍第三种方式，原理是借助Qt自带的windeployqt.exe程序自动部署程序所需dll到目标文件夹。具体操作为，在项目根目录的CMakeLists.txt最后添加部署dll的指令：&lt;/p&gt;&lt;pre&gt;set(QT_BIN_PATH &quot;${QT_MSVC_PATH}/bin&quot;)
function(windeployqt target)

# POST_BUILD step
# - after build, we have a bin/lib for analyzing qt dependencies
# - we run windeployqt on target and deploy Qt libs

add_custom_command(TARGET ${target} POST_BUILD
COMMAND &quot;${QT_BIN_PATH}/windeployqt.exe&quot;
--verbose 1
#--release # uncomment this line if built with Release
#--no-svg
#--no-angle
#--no-opengl
#--no-opengl-sw
#--no-compiler-runtime
#--no-system-d3d-compiler
\&quot;$&amp;lt;TARGET_FILE:${target}&amp;gt;\&quot;
COMMENT &quot;Deploying Qt libraries using windeployqt for compilation target &#x27;${target}&#x27; ...&quot;
)

endfunction()

if (WIN32)
  windeployqt(${PROJECT_NAME})
endif()&lt;/pre&gt;&lt;p&gt;最后，转换成VS项目时，默认是Console项目，运行时会有cmd窗口。一个解决办法是在生成可执行文件时设置目标为 WIN32：&lt;/p&gt;&lt;p&gt;add_executable(${PROJECT_NAME} WIN32 xxxx)&lt;/p&gt; &lt;span id=&quot;bnp_i_6&quot;/&gt;&lt;h2&gt;一个完整的Qt 5项目CMakeLists.txt&lt;/h2&gt;&lt;p&gt;以下是一个适用于Windows平台的Qt 5项目完整CMakeLists.txt，实际使用时请替换名字和Qt 5安装路径等：&lt;/p&gt;&lt;pre&gt;cmake_minimum_required(VERSION 3.7)

# 请将myproject改成实际的应用名字
project(myproject LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

# 请更改为实际的Qt安装目录
set(QT_MSVC_PATH &quot;C:\\Qt\\Qt5.12.8\\5.12.8\\msvc2017_64&quot;)
set(CMAKE_PREFIX_PATH &quot;${QT_MSVC_PATH}/lib/cmake&quot;)
set(QT_BIN_PATH &quot;${QT_MSVC_PATH}/bin&quot;)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(Qt5 COMPONENTS Widgets REQUIRED)

# 默认Release构建
if (NOT CMAKE_BUILD_TYPE)
    set( CMAKE_BUILD_TYPE &quot;Release&quot; )
endif()
message(&quot;build type: ${CMAKE_BUILD_TYPE}&quot;)

# 按照自己的项目结构添加文件
# 也可使用file/aux_source_directory批量引入，注意不要引入自动生成的文件！
add_executable(${PROJECT_NAME} WIN32
  main.cpp
  mainwindow.cpp
  mainwindow.h
)

target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Widgets)

function(windeployqt target)
# POST_BUILD step
add_custom_command(TARGET ${target} POST_BUILD
COMMAND &quot;${QT_BIN_PATH}/windeployqt.exe&quot;
--verbose 1
#--release 
#--no-svg
#--no-angle
#--no-opengl
#--no-opengl-sw
#--no-compiler-runtime
#--no-system-d3d-compiler
\&quot;$&amp;lt;TARGET_FILE:${target}&amp;gt;\&quot;
COMMENT &quot;Deploying Qt libraries using windeployqt for compilation target &#x27;${target}&#x27; ...&quot;
)

endfunction()

if (WIN32)
  windeployqt(${PROJECT_NAME})
endif()
````&lt;/pre&gt;&lt;p&gt;通过上面的配置，我们的Qt项目既可在Qt Creator中正常编译运行，也可在CLion/Visual Studio中正常编译运行而 &lt;code&gt;无需安装Qt插件&lt;/code&gt;。&lt;/p&gt; &lt;span id=&quot;bnp_i_7&quot;/&gt;&lt;h2&gt;参考&lt;/h2&gt;&lt;p&gt;1. &lt;a href=&quot;https://cmake.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CMake官网&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2. &lt;a href=&quot;https://cmake.org/cmake/help/latest/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CMake教程&lt;/a&gt;&lt;/p&gt;&lt;p&gt;3. &lt;a href=&quot;https://gitlab.kitware.com/cmake/community/-/wikis/FAQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CMake FAQ&lt;/a&gt;&lt;/p&gt;&lt;p&gt;4. &lt;a href=&quot;https://tlanyan.pp.ua/cmake-specify-compiler/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CMake指定编译器&lt;/a&gt;&lt;/p&gt;&lt;p class=&quot;clear&quot;/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c68d44934f9357387b61897ea826e7f8</guid>
<title>图片处理看这篇就完了（GitHub 热点速览）</title>
<link>https://toutiao.io/k/4kkl2g0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNPiapAGJgJn9m2cq9GCg8qh6Lbed7miawLotZ4eDNfiaa0urPjMheCl9XicZzdr2h98AdLJryWP1WPRBQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者：HelloGitHub-小鱼干&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图像处理一直是个实用且热门的研究领域，而本周的 GitHub 项目则多个图像项目上榜。先是勉强和图像处理搭边的渲染引擎 Filament，它能渲染出效果极佳的 3D 实物图。再是去年很火的声称漫画风图片的 AnimeGAN，这次是它的升级版本 v2。最后是用途更广的图片压缩工具，qoi 的复杂度仅为 O(n) 它能快速对图片进行无损压缩。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了图片之外，本周还有 2 个非常实用的项目，教你做数据可视化以及分布式系统知识。最后一定要提一下推特很火的云系统 CasaOS，家庭设备数字化也许就差个 CasaOS。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下内容摘录自微博@HelloGitHub 的 GitHub Trending 及 Hacker News 热帖（简称 HN 热帖），选项标准：&lt;code&gt;新发布&lt;/code&gt; | &lt;code&gt;实用&lt;/code&gt; | &lt;code&gt;有趣&lt;/code&gt;，根据项目 release 时间分类，发布时间不超过 14 day 的项目会标注 &lt;code&gt;New&lt;/code&gt;，无该标志则说明项目 release 超过半月。由于本文篇幅有限，还有部分项目未能在本文展示，望周知 🌝&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7228915662650602&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNPiapAGJgJn9m2cq9GCg8qh6ASjd3hToibPTjeMMbsw5yRFiaHskbn5HB69HVqHAibjxcRiaGOFicy49wicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;996&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;1. 本周特推&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.1 分布式系统模式：patterns-of-distributed-systems&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：1,150+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《分布式系统模式》（Patterns of Distributed Systems）是 Unmesh Joshi 编写的一系列关于分布式系统实现的文章。这个系列的文章采用模式的格式，介绍了像 Kafka、Zookeeper 这种分布式系统在实现过程采用的通用模式，是学习分布式系统实现的基础。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/dreamhead/patterns-of-distributed-systems&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNPiapAGJgJn9m2cq9GCg8qh6KQ45tO0v9fl923OYeEolLLZT40Vn0uKX3WG3ltcTibniaKgFkAkAIllA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5357142857142857&quot; data-w=&quot;560&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2 物理渲染引擎：Filament&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：750+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Filament 是一个实时的基于物理的渲染引擎（PBR），适用于 Android、iOS、Windows、Linux、macOS 和 WebGL2。作为一个相对“历史悠久”的渲染工具，Filament 的文档非常详细，你可以从官方的 GitHub 仓库中阅读文档或者是访问文档站 google.github.io/filament/。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/google/filament&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNPiapAGJgJn9m2cq9GCg8qh6VgjV2Ru5eg19ZlGgRjty3icH122R1SCKT2FlgF0a2nO1atOdiaeK4mnQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.637962962962963&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;2. GitHub Trending 周榜&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1 照片动漫化：AnimeGANv2&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：700+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;New&lt;/code&gt; AnimeGANv2 是去年极火的图片工具 AnimeGAN 的升级版本，相较之前版本，v2 版本主要从以下 4 个地方优化了 AnimeGAN：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;解决生成图片高频伪影问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;易于训练，达到实物纸张效果&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;减少生成器网络参数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;尽可能用高质量图片样式数据&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/TachibanaYoshino/AnimeGANv2&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4966442953020134&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNPiapAGJgJn9m2cq9GCg8qh69VIW3heVxVS8fas82UibaNCbnJ7cNibESQ5KIC45qzImIJF5dc1bu09Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;745&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2 可视化数据：scientific-visualization-book&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：750+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;New&lt;/code&gt; scientific-visualization-boo 是 Python + Matplotlib 实现数据可视化的开源书籍，通过本书你可以学到各式各样的可视化数据呈现效果。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/rougier/scientific-visualization-book&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNPiapAGJgJn9m2cq9GCg8qh6QVrMiaWDGFNaXkHj9fKZzd46DuaJ14zPKEdf7wCJ4IaMGovfhUMljAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.1134538152610443&quot; data-w=&quot;996&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.3 手绘风画图工具：tldraw&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：1,200+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;New&lt;/code&gt; tldraw 是一个能让你画出手绘风的绘图工具，它还能识别笔重，根据你的鼠标压力呈现不一样的笔触（参考下下图），当然你也可以基于它绘制流程图。tldraw 除了常规的桌面 App 之外，只支持网页端绘图，以及它有对应的 VS Code 扩展可在 VS Code 中绘图。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/tldraw/tldraw&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNPiapAGJgJn9m2cq9GCg8qh6oNwNd4EEPicTiayXWgBdovaeyTRTKJpsSrXUOlHV8gichaJnHL7r3V3xQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.6953703703703704&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNPiapAGJgJn9m2cq9GCg8qh651DBsv8RuqLbFyMov6SlgguiaFKn6rcNy4tKDXc7XZNga32LPQZffbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.401468788249694&quot; data-w=&quot;817&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.4 云系统：CasaOS&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：700+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;New&lt;/code&gt; CasaOS 是一个基于 Docker 生态系统的开源家庭云系统，专为家庭场景设计，致力于打造世界上最简单、易用、优雅的家庭云系统。它兼容树莓派和 x86 设备。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/IceWhaleTech/CasaOS&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNPiapAGJgJn9m2cq9GCg8qh6lpZnOyFCn7Mr8ZNCGic868g5GCU48NibI1MzZHy0zj1RkPmO8Fs7HUOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.7185185185185186&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.5 无损压缩：qoi&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：1,900+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;New&lt;/code&gt; qoi 是个 O(n) 图片压缩工具，它可以将 RGB 和 RGBA 图像无损地压缩为与 PNG 格式大小。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/phoboslab/qoi&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNPiapAGJgJn9m2cq9GCg8qh6gZkVT9cMucjbLGy4aU1iblqJ2zHxFtibHFYONf9XsUexG151oE7FAo7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.92125&quot; data-w=&quot;800&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;3. 往期回顾&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;你的点单&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哲良提到普通 Linux 的路由，不是本身 Linux 便提供了 route 功能吗？参见文档 https://github.com/torvalds/linux/blob/master/net/ipv4/route.c，你也可以试试这个路由引擎 https://github.com/valhalla/valhalla。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于李先生的 Go 的人工智能应用项目，抱歉暂时没有找到，🤔 下次碰到了补上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上为 2021 年第 48 个工作周的 GitHub Trending 🎉如果你 Pick 其他好玩、实用的 GitHub 项目，记得来 HelloGitHub issue 区和我们分享下哟 🌝&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，记得你在本文留言区留下你想看的主题 Repo（限公众号），例如：AI 换头。👀 和之前的送书活动类似，留言点赞 Top5 的小伙伴(&lt;span&gt;棒&lt;/span&gt;），小鱼干会努力去找 Repo 的^^&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;HelloGitHub 交流群现已全面开放，添加微信号：HelloGitHub001 为好友入群，可同前端、Java、Go 等各界大佬谈笑风生、切磋技术~&lt;/p&gt;&lt;/blockquote&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA5MzYyNzQ0MQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOqkqThUJBICyFBlvLvTyOCgBpibwWotSxGExfnOYFfPiaL9yn3GMUOCEVYN2RNslGCdQwgZy6ticdyA/0?wx_fmt=png&quot; data-nickname=&quot;HelloGitHub&quot; data-alias=&quot;GitHub520&quot; data-signature=&quot;分享 GitHub 上有趣、入门级的开源项目。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;👆 关注「HelloGitHub」第一时间收到更新&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;👆&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1a24e7f7a65dfde36f48d7b8212ce8fa</guid>
<title>泛型是双刃剑？Go 1.18 编译会慢近 20%</title>
<link>https://toutiao.io/k/xtc4n76</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前 Go 的泛型已经在稳定推进的过程，在 Go1.18 将会释出正式的第一版。不过前两天我看到 @danscales 提出的《cmd/compile: Go 1.18 compile time may be about 18% slower than Go.17 (largely from changes due to generics)》。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者表示在 Go1.18 有了泛型后，编译速度可能会变慢，虽然不意外，说明&lt;strong&gt;泛型的副作用还是有的&lt;/strong&gt;，大家后续升级需谨慎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下为修整后概括的原文信息。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;性能分析&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个测试主要是测试 Go 泛型对 Go 编译器带来的影响，并没有输入大量的测试用例，是最简单的比较，仅代表大部分的差异。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比较的内容是 Go 泛型的 -G=0 和 -G=3 模式下的编译时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分别代表以下含义：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;-G=0 模式：默认不打开泛型的模式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;-G=3 模式：打开泛型的模式。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 1.18 中的 -G=0 模式和 Go 1.17 模式的比较显示，由于非泛型的变化，编译器的速度可能降低了~1%（因为 -G=0 模式不支持泛型）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 1.18 的编译时间可能比 Go 1.17 慢 15-18%，这主要是由于实现泛型所带来的变化，也就是 Go1.18 开启泛型下，编译时间会变慢。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;差异在哪&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大部分的差异是由于新的编译器前端处理，因为 SSA 后端对于泛型完全没有变化。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在 -G=0 模式下（用于 Go 1.18 之前的所有编译器）：有一个语法分析器，创建 ir.Node 节点树的 noder 阶段，以及标准类型检查器。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在 -G=3 模式下：有相同的语法分析器，但程序首先由 types2（支持泛型）进行类型检查。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在通过 -G=3 模式打开泛型后，会有一个 noder2 阶段，使用语法信息和 types2 类型检查器的类型信息创建 ir.Node 节点树。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在一次运行中，noder+ types1-typechecking 的开销总和约为 4%，而 types2-typechecker+noder2 的总和为 14%。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过分析，可以得到大部分的速度下降是由于改变了编译前端处理（并不意外）。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以明确的是，在打开泛型后，&lt;strong&gt;Go1.18 编译时间可能会慢 15-18%&lt;/strong&gt;，Go 官方将计划在 Go 1.19 中减少这种额外的开销。所以已经不是 “可能”，是必然了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;泛型的双刃剑初见&lt;/strong&gt;，后续不管是编译时间、执行时间（预计不会减缓）、泛型的滥用、最佳实践等，都值得我们去讨论和关注。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;看来&lt;/span&gt;&lt;span&gt;引入泛型后&lt;/span&gt;要经历一轮修整了，毕竟 Go 语言是以编译速度快著称...&lt;strong&gt;&lt;span&gt;欢迎大家在评论区讨论和交流&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;关注煎鱼，吸取他的知识 👇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100009148&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4huRY4YpWHDFZxDkQTibpYPz4tR7J9psianEP0bglu39w2VOrhNxx76v2Q0THrB3stmS9HB39ABvhwQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;344&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.07106598984771574&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/486RHs1WbcgGib6o96dHbvGUGGwPicd8wusUGH1cXR29tM4bO0lNzialzkQhvU6m5ZUdaKibmcF2OQayjMe9Bia6iaXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;394&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是煎鱼，&lt;span&gt;出版过 Go 畅销书《Go 语言编程之旅》，再到获得 GOP（Go 领域最有观点专家）荣誉，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247483854&amp;amp;idx=1&amp;amp;sn=ec422fbf4d846975f2930ddeb5e81373&amp;amp;chksm=f9041493ce739d85a4b987eece14da627206cdad798f645cc770868312e4a22b6df24804f186&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;点击蓝字查看我的出书之路&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;点击蓝字查看我的出书之路&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;日常分享高质量文章，输出 Go 面试、工作经验、架构设计，&lt;span&gt;加微信拉读者交流群，和大家交流！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;&gt;来一个反馈！&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>