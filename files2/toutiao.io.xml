<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>c1caa8133cc76c61b38b72d9a5a0053e</guid>
<title>[推荐] 实战篇：一个核心系统 3 万多行代码的重构之旅</title>
<link>https://toutiao.io/k/qvfq564</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;（给&lt;/span&gt;&lt;span&gt;ImportNew&lt;/span&gt;&lt;span&gt;加星标，提高Java技能）&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;转自：&lt;/span&gt;骆俊武&lt;span/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;经典著作《重构》这本书中有这么一段话：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;section&gt;&lt;span&gt;一开始，我所做的重构都停留在细枝末节上。随着代码趋向简洁，我发现自己可以看到一些设计层面的东西了，这些是我以前理解不到的，如果没有重构，我达不到这种高度。&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;重构，着实是一件让程序员兴奋的事情。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;今年年初，我们团队完成了一个复杂项目的重构工作，它属于广告系统最核心的引擎部分，大概有 300 多个文件，3 万多行代码。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从技术方案设计到最终全量上线仅仅花了 1 个月左右的时间，而且没有产生事故。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这应该是我 8 年程序生涯中，经历过的最大型的同时最成功的一次重构项目：速度足够快、计划比较周全、质量过关。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;01 先聊聊这个系统的历史包袱&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们的广告引擎在这次重构前大概经历了1年半时间的迭代，初期针对的是搜索场景，业务单一，流程清晰。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;2019年开始，公司的广告业务开始快速扩张，收入几乎是指数级的增长。在这个过程中，我们的广告引擎面临了两个挑战：&lt;/span&gt;&lt;/section&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;194&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、业务场景开始变得复杂，除了搜索广告，还需要支持信息流推荐以及相似推荐场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、广告流量开始快速增加，除了满足功能性需求，还需要兼顾好性能。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87758&quot; data-width=&quot;95%&quot;&gt;&lt;p&gt;&lt;span&gt;经过梳理，整个引擎有大部分逻辑是可以公用的，因此我们定义了一个主体框架，同时将可扩展部分进行了抽象。这样，各个场景能够根据自身业务的特殊性实现某些公共接口即可。另外，从性能角度考虑，我们牺牲了一些代码可读性，把某些逻辑并行化了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着业务的发展，搜索场景开始进入快速迭代期，新增策略越来越多，我们的主体框架也是在这个时候逐渐变得不灵活。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果动主体框架，搜索以外的场景都需要跟着重构。&lt;/span&gt;&lt;span&gt;在业务的快速发展期，工期根本不允许，因此我们只能在现有框架上进行补丁式的开发。&lt;/span&gt;&lt;span&gt;这样，带来了两个很明显的问题：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;194&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、为了兼容搜索的特殊逻辑，我们需要在其他场景中增加各种 if 判断来绕过这些逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、广告策略越来越多，累计了几十个，当框架失去清晰的结构后，有些策略的实现开始变得定制化，缺少层次化的划分和可插拔式的抽象设计。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;在这样的背景下，随着改动的积累，代码开始偏离了设计的初衷，技术债务越来越重。但是，我们又始终找不到合适的时机进行重构。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img data-backh=&quot;324&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5609375&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AaabKZjib2kYa4yEHBEhs7rfvRKkrdsQq6icnzUUCdSxHLuX2g0yfXSNibQPtl8qickwTjhX510yia2lPzFmAFmzMFQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;转机出现在 2019 年年底，由于广告业务的特殊性，流量开始自然走低，另外产品运营团队将重心放在了第 2 年的工作规划上，因此给了我们非常好的窗口期开始此次重构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们将工期定成了 1 个月，最终&lt;/span&gt;&lt;span&gt;仅比预期晚上线了一天，虽然出现了两个线上问题，但是在灰度期都及时发现和修复了，并没有造成线上事故。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;总体来说，这是一次难度颇大并且比较成功的重构项目，下面详细说一下我从这个项目中吸取到的宝贵经验。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;02 重构前，我们做了哪些准备工作？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这次重构的代码量很大，3 万多行，而且是广告系统最核心的引擎部分。启动前，我们能预期到下面这些困难：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;1、&lt;/span&gt;&lt;span&gt;业务侧的阻力&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：广告是极其以业务为导向的，本次重构虽然能带来长期研发效率的提升，但是没法直接提升业务收益，而且开发周期不会太短，如何才能得到业务同学的支持？&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2、技术侧的顾虑&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：重构一旦引起线上事故，公司是有处罚制度的，如何让大家轻装上阵？同时，重构过程中如果还有非常重的业务迭代穿插，交付时间没人敢保证，&lt;span&gt;质量也很难得到控制。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6715686321258545&quot; data-type=&quot;jpeg&quot; data-w=&quot;408&quot; data-backw=&quot;578&quot; data-backh=&quot;385&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AaabKZjib2kYa4yEHBEhs7rfvRKkrdsQq5BPMAvaVYk8ib1iaicQsIpa6jrezmre1fqAMKK4hgBTG284fiaKlRHrdDw/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;针对这两方的顾虑，我认为下面这几项工作起到了很关键的作用。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;▍让所有人看到痛点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前面提到：随着业务迭代，我们广告引擎的主体框架已经变得模糊不清，另外几十个广告策略散落在不同的业务场景中，配置凌乱。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对这两个痛点，我们提前1个月启动了现有业务的梳理，走读旧代码、同时翻阅以前的需求文档，最终我们将不同场景的核心流程以及广告策略归类成了一张清晰的表格。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正是这一张表格，让技术和产品第一次很清晰地看到了我们引擎部分的全貌，体会到了业务的复杂度以及当前技术上的瓶颈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;▍明确重构的目标和价值&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;让所有人感受到痛点后，我们规划了本次重构的两个核心目标：&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;194&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、主体框架的重构：将主流程模块化，重新定义上下层协议，确保接口清晰；各层级内部也需要做好抽象，具备良好的扩展性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、策略灵活可配置：将广告策略按照业务意图进行归类抽象，策略的执行条件动态可配置，同时策略可任意插拔。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;此外，我们将这两个核心目标完成后可带来的预期收益进行了细化：&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;194&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、技术收益：代码结构更清晰，更容易理解和维护；可扩展性增强，引擎的开发效率将进一步提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、业务收益：策略能做到更细粒度的配置和扩展，对业务支持更友好；研发提效后能进一步加快业务的迭代速度。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;将重构的价值同步给大家后，进一步提升了所有人的兴奋度，让大家有了更强的动力参与进来。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;▍整体节奏的把控&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整体节奏的把控也是非常重要的一环，能让所有人对这件事情有一个时间上的预期。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，我们将工期定成了 1 个月，一方面考虑了业务侧可以接受的最大周期，技术上也希望速战速决；另一方面，春节即将来临，我们必须赶在公司封网前上线，同时预留出1-2周的 buffer 以防意外情况发生。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;此外，我们和业务侧达成了一致：重构期间，引擎部分的非紧急需求一律不接，这样可最大限度地减少并行开发和代码冲突，让团队精力更集中。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;03 执行过程中有哪些可分享的经验？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这次重构能够实施得如此顺利，有 4 点我认为很有价值的经验跟大家分享下。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1. 高质量的技术设计方案&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一点得益于日常的要求，针对开发周期超过3天的项目我们都会进行技术方案设计，本次重构当然也不例外。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;框架部分的整体架构、模块之间的协议设计、以及策略的可扩展性设计是本次技术方案的重点，团队前后讨论了不下3次。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在大方案定稿后，团队进一步对数据库、接口字段、缓存结构、日志埋点等公共部分进行了细化，因为涉及到多人协作开发，团队约定以文档作为沟通界面，文档始终保持和代码同步。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在这样的高要求下，团队产出了 5000 多字的技术方案文档，合计 36 页，这些为整体质量的保障打下了很好的基础。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;2. &lt;span&gt;预重构出框架性代码&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一个 PR 非常关键，是我们从技术方案落地到代码最重要的一步。我们把重构后的包结构、模块划分、各层之间的API定义、不同广告策略的抽象进行了梳理，先忽略实现的细节。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样主体代码基本成型，能很清楚地描绘出我们理想中的框架。然后，我们组织了多次集中代码审查，最终形成了统一意见。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一步能很好地避免过早陷入实现细节，导致主体框架关注不够、代码不稳固，后期再返工反而会拖累效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 频繁沟通和成对代码 Review 机制&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进入到细节实现阶段后，很重要的一点是：对现有逻辑的理解。引擎代码经过一年半的迭代，历史上被很多人开发过，但是本次只有 3 个同学参与重构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整个过程中，我们遇到任何代码逻辑不明确的地方，都是反复沟通和求证，不主观猜想，这一份谨慎其实很关键。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外在代码审查上，我们按模块分配了对这块业务比较熟悉的同学来负责，成对搭配，机制灵活。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. 有效的测试方案&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;重构未动，测试先行。这个原则是《重构》一书中重点强调的，也是我们本次技术方案讨论的重点，我这里单独拎出来详细展开下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，我们前期便约定好：不动任何老代码，完全建新的 package 进行重构。这样方便比对重构前后的结果，同时进行线上灰度实验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;测试方案上，以下 4 点值得借鉴：&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;194&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;1、端到端测试：本次重构不涉及功能性的调整，因此外层API的行为是不会有任何变化的，这样端到端的测试方法最为有效，这个是研发和QA测试最主要的手段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、冒烟测试：&lt;/span&gt;&lt;span&gt;QA同学提供冒烟 Case，由研发同学进行冒烟，研发提测前必须保证所有冒烟 Case 执行通过。&lt;/span&gt;&lt;span&gt;这一点在大部分互联网公司都不常见，但是对于大型项目绝对有效。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、沙箱环境双流程验证：前面提到我们重构前后的代码都保留了，因此可以通过脚本抓取线上环境的入参作为case，然后用自动化的方式对 API 的返回字段进行逐一比对。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、线上环境灰度实验：灰度对于重构非常重要，我们利用已有的ABTest平台，逐步放开灰度流量，从5%、到10%、到30%、最后到100%，制定了很谨慎的放量节奏，然后通过日志以及业务指标监控进行验证。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;写在最后&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;回顾整个重构的过程，总结成下面 7 个关键点：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、把握好重构时机&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、前期梳理很重要，先找到痛点&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、明确出目标和价值，让大家兴奋起来&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4、不宜长线作战，不宜和业务并行&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5、需要高质量的技术方案&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;6、重构未动，测试先行&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;7、小心求证，为每行代码负责&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，最关键的因素还是人，大型项目重构极其考验团队的协作能力，如果每个人都很靠谱，重构就已经成功了一半。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&amp;lt;END&amp;gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于重构，如果你也有自己的心得体会，欢迎评论区留言讨论。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651484997&amp;amp;idx=1&amp;amp;sn=e9afcb1c47a4791221af7f9e99f9ca45&amp;amp;chksm=bd251f3a8a52962c1d36d5936d3bcaae99e9f4fdd4452ef3f5a04db0faafd56c2cd9f122302a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;使用类型重构&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651479768&amp;amp;idx=1&amp;amp;sn=1ee16f4efa7f4de08a00add29cf97a71&amp;amp;chksm=bd2532a78a52bbb1e491ed358df9fd0ab9cb5ef56f336f553a1cc92d089123a7c2a22af55490&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Java8 Map 示例：一个略复杂的数据映射聚合例子及代码重构&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651479651&amp;amp;idx=2&amp;amp;sn=193ae864abc6a3ae36b38ef7f90a638e&amp;amp;chksm=bd25321c8a52bb0a2448b21fb8e13716244c2974e59d4381a7588e72d7fb52251d61317987a0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;重构大型业务型写接口 ：并行处理注意点&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好文章，我&lt;/span&gt;&lt;span&gt;在看&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>eaf2531520103a60dc5e75243b1a73a5</guid>
<title>[推荐] 中台的本质及中台建设的 4 点思考</title>
<link>https://toutiao.io/k/9octogz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f6bc120485cfae23d36fc86b81aa6724</guid>
<title>[推荐] 求你别再用 Swagger 了，给你推荐几个在线文档生成神器</title>
<link>https://toutiao.io/k/ftaw3bc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近公司打算做一个openapi开放平台，让我找一款好用的在线文档生成工具，具体要求如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;必须是开源的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;能够实时生成在线文档&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持全文搜索&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持在线调试功能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;界面优美&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说实话，这个需求看起来简单，但是实际上一点的都不简单。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我花了几天时间到处百度，谷歌，技术博客 和 论坛查资料，先后调研了如下文档生成工具：&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;gitbook&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;github地址：https://github.com/GitbookIO/gitbook&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源协议：Apache-2.0 License&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Star: 22.9k&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发语言：javascript&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户：50万+&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐指数：★★★&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例地址：https://www.servicemesher.com/envoy/intro/arch_overview/dynamic_configuration.html&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5666666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxFoDghynYUibHJVV7Xcvf1Fhd801faxA5fxqJZIPQnWUommZez3Pd80fw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;gitBook是一款文档编辑工具。它的功能类似金山WPS中的word或者微软office中的word的文档编辑工具。它可以用来写文档、建表格、插图片、生成pdf。当然，以上的功能WPS、office可能做得更好，但是，gitBook还有更最强大的功能：它可以用文档建立一个网站，让更多人了解你写的书，另外，最最核心的是，他支持Git，也就意味着，它是一个分布式的文档编辑工具。你可以随时随地来编写你的文档，也可以多人共同编写文档，哪怕多人编写同一页文档，它也能记录每个人的内容，然后告诉你他们之间的区别，也能记录你的每一次改动，你可以查看每一次的书写记录和变化，哪怕你将文档都删除了，它也能找回来！这就是它继承git后的厉害之处！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：使用起来非常简单，支持全文搜索，可以跟git完美集成，对代码无任何嵌入性，支持markdown格式的文档编写。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：需要单独维护一个文档项目，如果接口修改了，需要手动去修改这个文档项目，不然可能会出现接口和文档不一致的情况。并且，不支持在线调试功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：如果对外的接口比较少，或者编写之后不会经常变动可以用这个。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;smartdoc&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;gitee地址：https://gitee.com/smart-doc-team/smart-doc&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源协议：Apache-2.0 License&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Star: 758&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发语言：html、javascript&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户：小米、科大讯飞、1加&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐指数：★★★★&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例地址：https://gitee.com/smart-doc-team/smart-doc/wikis/文档效果图?sort_id=1652819&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5444444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxFxtbdsXn4JcE2YRNfjkrWOSBVkI3QU8jFia3F9fxNNGTIKibK1GKseKpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;smart-doc是一个java restful api文档生成工具，smart-doc颠覆了传统类似swagger这种大量采用注解侵入来生成文档的实现方法。smart-doc完全基于接口源码分析来生成接口文档，完全做到零注解侵入，只需要按照java标准注释的写就能得到一个标准的markdown接口文档。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：基于接口源码分析生成接口文档，零注解侵入，支持html、pdf、markdown格式的文件导出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：需要引入额外的jar包，不支持在线调试&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：如果实时生成文档，但是又不想打一些额外的注解，比如：使用swagger时需要打上@Api、@ApiModel等注解，就可以使用这个。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;redoc&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;github地址：https://github.com/Redocly/redoc&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源协议：MIT License&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Star: 10.7K&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发语言：typescript、javascript&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户：docker、redocly&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐指数：★★★☆&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例地址：https://docs.docker.com/engine/api/v1.40/&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.43425925925925923&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxF6eNeuExicFIWANoT9VxAwictdsic3btiaZHx6eolnP6kkEfKTOxpqleEOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;redoc自己号称是一个最好的在线文档工具。它支持swagger接口数据，提供了多种生成文档的方式，非常容易部署。使用redoc-cli能够将您的文档捆绑到零依赖的 HTML文件中，响应式三面板设计，具有菜单/滚动同步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：非常方便生成文档，三面板设计&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：不支持中文搜索，分为：普通版本 和 付费版本，普通版本不支持在线调试。另外UI交互个人感觉不适合国内大多数程序员的操作习惯。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：如果想快速搭建一个基于swagger的文档，并且不要求在线调试功能，可以使用这个。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;knife4j&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;gitee地址：https://gitee.com/xiaoym/knife4j&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源协议：Apache-2.0 License&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Star: 3k&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发语言：java、javascript&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户：未知&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐指数：★★★★&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例地址：http://swagger-bootstrap-ui.xiaominfo.com/doc.html&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5527777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxF4URrQv4xcPd5l3ATmHAdBJsC9Q5GpKKFDbouycBr4bqO2UFVGDyibvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;knife4j是为Java MVC框架集成Swagger生成Api文档的增强解决方案,前身是swagger-bootstrap-ui,取名kni4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：基于swagger生成实时在线文档，支持在线调试，全局参数、国际化、访问权限控制等，功能非常强大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：界面有一点点丑，需要依赖额外的jar包&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：如果公司对ui要求不太高，可以使用这个文档生成工具，比较功能还是比较强大的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;yapi&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;github地址：https://github.com/YMFE/yapi&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源协议：Apache-2.0 License&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Star: 17.8k&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发语言：javascript&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户：腾讯、阿里、百度、京东等大厂&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐指数：★★★★★&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例地址：http://swagger-bootstrap-ui.xiaominfo.com/doc.html&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxFpRhftEzicYPWxIANx0k88n2iaNJLPGbic00R6gMCODQvYmmrbnxtmCu1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;yapi是去哪儿前端团队自主研发并开源的，主要支持以下功能：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;可视化接口管理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据mock&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自动化接口测试&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据导入（包括swagger、har、postman、json、命令行）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;权限管理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持本地化部署&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持插件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持二次开发&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：功能非常强大，支持权限管理、在线调试、接口自动化测试、插件开发等，BAT等大厂等在使用，说明功能很好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：在线调试功能需要安装插件，用户体检稍微有点不好，主要是为了解决跨域问题，可能有安全性问题。不过要解决这个问题，可以自己实现一个插件，应该不难。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：如果不考虑插件安全的安全性问题，这个在线文档工具还是非常好用的，可以说是一个神器，笔者在这里强烈推荐一下。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;apidoc&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;github地址：https://github.com/apidoc/apidoc&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源协议：MIT License&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Star: 8.7k&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发语言：javascript&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户：未知&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐指数：★★★★☆&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例地址：https://apidocjs.com/example/#api-User&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9585253456221198&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxFat1GOnJHuFdicILiaV3liaaeMk4uYnT60ib5EUM0MTDZTz2A3haUlh5ltQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1085&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;apidoc 是一个简单的 RESTful API 文档生成工具，它从代码注释中提取特定格式的内容生成文档。支持诸如 Go、Java、C++、Rust 等大部分开发语言，具体可使用 apidoc lang 命令行查看所有的支持列表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;apidoc 拥有以下特点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;跨平台，linux、windows、macOS 等都支持；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持语言广泛，即使是不支持，也很方便扩展；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持多个不同语言的多个项目生成一份文档；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;输出模板可自定义；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;根据文档生成 mock 数据；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：基于代码注释生成在线文档，对代码的嵌入性比较小，支持多种语言，跨平台，也可自定义模板。支持搜索和在线调试功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：需要在注释中增加指定注解，如果代码参数或类型有修改，需要同步修改注解相关内容，有一定的维护工作量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：这种在线文档生成工具提供了另外一种思路，swagger是在代码中加注解，而apidoc是在注解中加数据，代码嵌入性更小，推荐使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;showdoc&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;github地址：https://github.com/star7th/showdoc&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源协议：Apache Licence&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Star: 8.1k&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发语言：javascript、php&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户：超过10000+互联网团队正在使用&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐指数：★★★★☆&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例地址：https://www.showdoc.com.cn/demo?page_id=9&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5317919075144508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxFiaGq8eIRFRJ2xgcGOsV3Y3CEK3uvCb2mpkyOvLXbbyvEKC8iamvXc3Bg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2422&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ShowDoc就是一个非常适合IT团队的在线文档分享工具，它可以加快团队之间沟通的效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它都有些什么功能：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;响应式网页设计，可将项目文档分享到电脑或移动设备查看。同时也可以将项目导出成word文件，以便离线浏览。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;权限管理，ShowDoc上的项目有公开项目和私密项目两种。公开项目可供任何登录与非登录的用户访问，而私密项目则需要输入密码验证访问。密码由项目创建者设置。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ShowDoc采用markdown编辑器，点击编辑器上方的按钮可方便地插入API接口模板和数据字典模板。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ShowDoc为页面提供历史版本功能，你可以方便地把页面恢复到之前的版本。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持文件导入，文件可以是postman的json文件、swagger的json文件、showdoc的markdown压缩包，系统会自动识别文件类型。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：支持项目权限管理，多种格式文件导入，全文搜索等功能，使用起来还是非常方便的。并且既支持部署自己的服务器，也支持在线托管两种方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：不支持在线调试功能&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：如果不要求在线调试功能，这个在线文档工具值得使用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;最后说一句(求关注)&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果这篇文章对您有所帮助，或者有所启发的话，帮忙扫描下发二维码关注一下，您的支持是我坚持写作最大的动力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;求一键三连：点赞、转发、在看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在公众号中回复：面试、代码神器、开发手册、时间管理有超赞的粉丝福利，另外回复：加群，可以跟很多大厂的前辈交流和学习。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGicVAVvGiaicgicDo3GfvlpCxFT8TOzlT8pD8icRrmCp8u3CzT5MqHVxUXpic6IYj8kwT80Juu0Obzarjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p&gt;推荐阅读：&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247485262&amp;amp;idx=1&amp;amp;sn=abe19452e4c13876270f329cc6929be7&amp;amp;chksm=f9800194cef78882e5ad4d8eb00b7e3f745a4159aee6afb1858cc16cae599f8889afa330e17b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;让人头痛的大事务问题到底要如何解决？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247485244&amp;amp;idx=1&amp;amp;sn=ea47bdaf3f3681c5e5fa8e6044a95a40&amp;amp;chksm=f98001e6cef788f02320b1607bfcc3b7fe059b59cdee3ee1163503a131e72a5874020476ddb5&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;mybatis日志功能是如何设计的？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247485157&amp;amp;idx=1&amp;amp;sn=aa513ce2687162c0083b8b1c9dbf0152&amp;amp;chksm=f980003fcef78929b2c3b8322976a4c908f68727ace867553e46db5ba952959d8d946e682ac9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;zuul如果两个filter的order一样，是如何排序的？&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;zuul如果两个filter的order一样，是如何排序的？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247484811&amp;amp;idx=1&amp;amp;sn=0d97b7ed61f7010704f24bd78e6cc9ee&amp;amp;chksm=f9800351cef78a47f43f5478d8f5b359b4e9f0158af9a2c1e13f1b7622c343d343998517450d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;mysql的这几个坑你踩过没？真是防不胜防&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247484746&amp;amp;idx=1&amp;amp;sn=77146a6e05e8164d26f39e34fd15dc15&amp;amp;chksm=f9800390cef78a862543c15e1feeb4f722f393bed0f5aed151a60fa4d55c4b295f0d3cf365d9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;线程池最佳线程数量到底要如何配置？&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247484698&amp;amp;idx=1&amp;amp;sn=12999ca31f93a8a3fd582d282a522714&amp;amp;chksm=f98003c0cef78ad6473a38cf0f42f44a8fbbe0bb58f20297cca92d5db47351f543631a69087d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;这8种保证线程安全的技术你都知道吗？&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247484664&amp;amp;idx=1&amp;amp;sn=46922fa7acd8e485a2b1a9a341b226ac&amp;amp;chksm=f9800222cef78b34d26883f86563d36444303d480b5b81d279685828c941dad86baf577a9e75&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;springboot面试杀手锏-自动配置原理&lt;/a&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b54c13f4945e9688b954b7ffb9b8f0a6</guid>
<title>[推荐] 如何优雅的实现分布式锁</title>
<link>https://toutiao.io/k/veeydsj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;概述&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提到分布式锁大家都会想到如下两种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;基于 &lt;code&gt;Redisson&lt;/code&gt;组件，使用redlock算法实现&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;基于 &lt;code&gt;Apache Curator&lt;/code&gt;，利用Zookeeper的临时顺序节点模型实现&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天我们来说说第三种，使用 &lt;code&gt;Spring Integration&lt;/code&gt; 实现，也是我个人比较推荐的一种。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Spring Integration&lt;/code&gt;在基于Spring的应用程序中实现轻量级消息传递，并支持通过声明适配器与外部系统集成。Spring Integration的主要目标是提供一个简单的模型来构建企业集成解决方案，同时保持关注点的分离，这对于生成可维护，可测试的代码至关重要。我们熟知的
Spring Cloud Stream的底层就是Spring Integration。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官方地址：https://github.com/spring-projects/spring-integration&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring Integration提供的全局锁目前为如下存储提供了实现：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Gemfire&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JDBC&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Redis&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Zookeeper&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它们使用相同的API抽象，这意味着，不论使用哪种存储，你的编码体验是一样的。试想一下你目前是基于zookeeper实现的分布式锁，哪天你想换成redis的实现，我们只需要修改相关依赖和配置就可以了，无需修改代码。下面是你使用 &lt;code&gt;Spring Integration&lt;/code&gt; 实现分布式锁时需要关注的方法：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;方法名&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;lock()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Acquires the lock.&lt;/code&gt;   加锁，如果已经被其他线程锁住或者当前线程不能获取锁则阻塞&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;lockInterruptibly()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Acquires the lock unless the current thread is interrupted.&lt;/code&gt; 加锁，除非当前线程被打断。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;tryLock()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Acquires the lock only if it is free at the time of invocation.&lt;/code&gt; 尝试加锁，如果已经有其他锁锁住，获取当前线程不能加锁，则返回false，加锁失败；加锁成功则返回true&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;tryLock(long time, TimeUnit unit)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Acquires the lock if it is free within the given waiting time and the current thread has not been interrupted.&lt;/code&gt; 尝试在指定时间内加锁，如果已经有其他锁锁住，获取当前线程不能加锁，则返回false，加锁失败；加锁成功则返回true&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;unlock()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Releases the lock.&lt;/code&gt; 解锁&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实战&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;话不多说，我们看看使用 &lt;code&gt;Spring Integration&lt;/code&gt;  如何基于redis和zookeeper快速实现分布式锁，至于Gemfire 和 Jdbc的实现大家自行实践。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;基于Redis实现&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-integration&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.integration&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-integration-redis&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-redis&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在application.yml中添加redis的配置&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt; &lt;span&gt;redis:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;host:&lt;/span&gt; &lt;span&gt;172.31&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.149&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;port:&lt;/span&gt; &lt;span&gt;7111&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;建立配置类，注入 &lt;code&gt;RedisLockRegistry&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RedisLockConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; RedisLockRegistry &lt;span&gt;redisLockRegistry&lt;/span&gt;&lt;span&gt;(RedisConnectionFactory redisConnectionFactory)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RedisLockRegistry(redisConnectionFactory, &lt;span&gt;&quot;redis-lock&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;lock&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@Log&lt;/span&gt;4j2&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DistributedLockController&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RedisLockRegistry redisLockRegistry;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/redis&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Lock lock = redisLockRegistry.obtain(&lt;span&gt;&quot;redis&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;//尝试在指定时间内加锁，如果已经有其他锁锁住，获取当前线程不能加锁，则返回false，加锁失败；加锁成功则返回true&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt;(lock.tryLock(&lt;span&gt;3&lt;/span&gt;, TimeUnit.SECONDS)){&lt;br/&gt;                log.info(&lt;span&gt;&quot;lock is ready&quot;&lt;/span&gt;);&lt;br/&gt;                TimeUnit.SECONDS.sleep(&lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;            log.error(&lt;span&gt;&quot;obtain lock error&quot;&lt;/span&gt;,e);&lt;br/&gt;        } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;            lock.unlock();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;测试&lt;br/&gt;启动多个实例，分别访问 &lt;code&gt;/lock/redis&lt;/code&gt; 端点，一个正常秩序业务逻辑，另外一个实例访问出现如下错误&lt;img data-ratio=&quot;0.22916666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4h9kamAaicVpoFTfGUrfT9nrLfnZy7QibI42VeMClsGhOoTg2CEFreHSxeHyf8nYZs36H4c9ZBKVMicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1488&quot;/&gt;说明第二个实例没有拿到锁，证明了分布式锁的存在。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;p&gt;注意，如果使用新版Springboot进行集成时需要使用Redis4版本，否则会出现下面的异常告警，主要是 unlock() 释放锁时使用了UNLINK命令，这个需要Redis4版本才能支持。&lt;/p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;2020-05-14 11:30:24,781 WARN  RedisLockRegistry:339 - The UNLINK &lt;span&gt;command&lt;/span&gt; has failed (not supported on the Redis server?); falling back to the regular DELETE &lt;span&gt;command&lt;/span&gt;&lt;br/&gt;org.springframework.data.redis.RedisSystemException: Error &lt;span&gt;in&lt;/span&gt; execution; nested exception is io.lettuce.core.RedisCommandExecutionException: ERR unknown &lt;span&gt;command&lt;/span&gt; &lt;span&gt;&#x27;UNLINK&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;基于Zookeeper实现&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-integration&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.integration&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-integration-zookeeper&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在application.yml中添加zookeeper的配置&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;zookeeper:&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;    host:&lt;/span&gt; &lt;span&gt;172.31&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.43&lt;/span&gt;&lt;span&gt;:2181&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;建立配置类，注入 &lt;code&gt;ZookeeperLockRegistry&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ZookeeperLockConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${zookeeper.host}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String zkUrl;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; CuratorFrameworkFactoryBean &lt;span&gt;curatorFrameworkFactoryBean&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; CuratorFrameworkFactoryBean(zkUrl);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; ZookeeperLockRegistry &lt;span&gt;zookeeperLockRegistry&lt;/span&gt;&lt;span&gt;(CuratorFramework curatorFramework)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ZookeeperLockRegistry(curatorFramework,&lt;span&gt;&quot;/zookeeper-lock&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;lock&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@Log&lt;/span&gt;4j2&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DistributedLockController&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; ZookeeperLockRegistry zookeeperLockRegistry;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/zookeeper&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Lock lock = zookeeperLockRegistry.obtain(&lt;span&gt;&quot;zookeeper&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;//尝试在指定时间内加锁，如果已经有其他锁锁住，获取当前线程不能加锁，则返回false，加锁失败；加锁成功则返回true&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt;(lock.tryLock(&lt;span&gt;3&lt;/span&gt;, TimeUnit.SECONDS)){&lt;br/&gt;                log.info(&lt;span&gt;&quot;lock is ready&quot;&lt;/span&gt;);&lt;br/&gt;                TimeUnit.SECONDS.sleep(&lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;            log.error(&lt;span&gt;&quot;obtain lock error&quot;&lt;/span&gt;,e);&lt;br/&gt;        } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;            lock.unlock();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;测试&lt;br/&gt;启动多个实例，分别访问 &lt;code&gt;/lock/zookeeper&lt;/code&gt; 端点，一个正常执行业务逻辑，另外一个实例访问出现如下错误：&lt;img data-ratio=&quot;0.254272043745728&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4h9kamAaicVpoFTfGUrfT9nrP70svZwaWl9dbMlaJ1VgDo059n3Q0fvfTJ0An3rRxYkL7CPNnKZReg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1463&quot;/&gt;说明第二个实例没有拿到锁，证明了分布式锁的存在。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c3654d723c69cb25403ed1407cf2d638</guid>
<title>[推荐] 缓存击穿、穿透、雪崩简单总结</title>
<link>https://toutiao.io/k/yehwkm6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;Redis 在互联网应用中被广泛使用，一般用来做缓存。&lt;/span&gt;&lt;span&gt;使用缓存能够提升系统性能，优化用户体验。&lt;/span&gt;&lt;span&gt;但缓存也存在雪崩、穿透、击穿等异常情况，本文做下简单总结。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;article tabindex=&quot;0&quot;&gt;&lt;h3 data-lake-id=&quot;22736d73f45591c92a34e59083173fcc&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;缓存应用场景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;22736d73f45591c92a34e59083173fcc&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;f8259415dceb42c7d5a01b61d7198e60&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;缓存是分布式系统中非常重要的组成部分，比如分布式 session、热点数据，在高并发、大流量情况下能够提升数据访问性能。缓存的基本思想就是我们非常熟悉的空间换时间。当我们查询一条数据时，先去查询缓存，如果有缓存就直接返回，如果没有就去查询数据库，更新缓存，然后返回。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9d9a66cf03355de48c040cd16443f46c&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;6b1b798bb5feb8629c9b4ee07153fc66&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;缓存击穿&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;6b1b798bb5feb8629c9b4ee07153fc66&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;3cb85162d1b8606d681398a25ce85394&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;缓存击穿一般指大量请求查询同一个数据，数据的缓存缺失，请求都打到数据库。缓存击穿一般是单个热点数据失效，在高并发下持续查询数据库，导致数据库压力增大。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b3cf7f3ba466aa8bbe706a98891eef24&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;df61751524193aaaccabcd6608c1e10d&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;要预防缓存击穿，可以多方面布防：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ac974f7cebe8697ce70402457bee083e&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;2f8713d45169680c68d853c0b9ea5d5f&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;缓存穿透&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;2f8713d45169680c68d853c0b9ea5d5f&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;2bd0730d947e014d6860559668823269&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;缓存穿透一般是指异常情况下请求不存在的数据，无法从缓存中读取数据，用户请求每次都会到达数据库，导致数据库压力增大。可能是非法请求，比如攻击者故意查询不存在的数据，若攻击者利用穿透进行攻击可能会拖垮数据库。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d6b623de4500170fe948adabf0525116&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1a0b425e2871d58edd9a2ccce48410b7&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;要预防缓存穿透，可以多方面布防：&lt;/span&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;ff56d99e5c928cedbb601485611de4cf&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;参数校验：对提交的参数进行必要的校验，拦截下非法请求，防止走到后面流程；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;缓存空值：可以针对攻击者可能提交的非法请求，在缓存中预先加载空值，防止打到数据库；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用布隆过滤器：可以使用布隆过滤器先行判断数据是否存在，如果不存在不去查询数据库；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-lake-id=&quot;0cca6b4488839c30b127ce186a8a2258&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;c4afda2340374b31d601ef360856aed7&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;缓存雪崩&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;c4afda2340374b31d601ef360856aed7&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;d7f3175adb1bb8d135be48647b7cbd73&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;缓存雪崩发生在缓存大量失效或缓存服务宕机的时候。比如系统 QPS 1000000，有缓存可以抗住 1000000，如果所有缓存都在同一时间失效，或者缓存服务宕机，所有的请求都直接打到 db，db 必然扛不住，有可能当时就挂了，然后整个服务陷入瘫痪。如果 DBA 此时紧急重启数据库，可能数据库刚刚重启完成，又马上被巨量请求打挂，服务仍然瘫痪。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e32876698e6f474ec217ffc2d5e70cbe&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5b3fbd3ad2c4bc45d420d3eaef320ec9&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;要解决缓存雪崩，可以在多个方面进行布防：&lt;/span&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;d33e925cd563109ee461ff9dbc680f81&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;集群部署：redis 采用集群部署，可以使用主从 + 哨兵 ，防止宕机影响。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;超时时间：Redis 存储数据时，要充分考虑各种缓存数据的失效时间，尽量避免同时失效，热点数据有效期要足够长；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;系统限流：发生缓存雪崩后，要对系统进行限流，为缓存重新加载和数据库重启赢得时间。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;本地缓存：系统最好加上本地缓存，对于不常变化的数据，优先使用本地缓存，降低雪崩时的影响；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-lake-id=&quot;fef1225563c91395d5839688aad6ff52&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;01ed34b90d4a3d038666c3642fce0bde&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-width=&quot;100%&quot; data-opacity=&quot;1&quot; data-rotate=&quot;0&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;01ed34b90d4a3d038666c3642fce0bde&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;b4a0e2bfab7e17560041dd002a0c4a9d&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;缓存虽好，也要注意预防问题，一旦出现异常可能就是致命问题。击穿一般指单个热点数据失效而把流量打到数据库，穿透一般指访问不存在的数据而把流量打到数据库，雪崩一般指大量数据失效或缓存服务宕机而把流量打到数据库。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;71e6f89bf03b323c0e32a612be6a6d37&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;缓存的击穿、穿透、雪崩也是面试经常问到的问题，知识点比较重要，需要在工作中注意理解和总结实践经验。在设计技术方案时，也要充分考虑异常场景。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;71e6f89bf03b323c0e32a612be6a6d37&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐阅读：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwNDE2NTgzNQ==&amp;amp;mid=2247486286&amp;amp;idx=1&amp;amp;sn=d4406c72350fb85d0617a3fc9b0cea50&amp;amp;chksm=9b3152eaac46dbfcd8a4ac5da22e621ee6ea859934fba457c0fb0aa043dd0a41bcf301e303f6&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;没有共情能力的程序员不是好产品经理&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwNDE2NTgzNQ==&amp;amp;mid=2247486281&amp;amp;idx=1&amp;amp;sn=c1d9a4b6dcedab7800fd631cb7bbbba6&amp;amp;chksm=9b3152edac46dbfb03c483d33cd94d52e845bd2ea7f8a2555a000c4a008eeee40b9b6c8e7f1c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;怀才不遇？程序员必须掌握的软技能&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwNDE2NTgzNQ==&amp;amp;mid=2247486275&amp;amp;idx=1&amp;amp;sn=08cbf7c539432291ab102ca895eb668e&amp;amp;chksm=9b3152e7ac46dbf1209c2e0b9eee43785c125079a96860b19d671d43c012cefb0c13b85edc90&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;为什么要鼓励重复造轮子&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwNDE2NTgzNQ==&amp;amp;mid=2247486269&amp;amp;idx=1&amp;amp;sn=bad17c689561bc3cf575e20d77707ebe&amp;amp;chksm=9b315299ac46db8f0d86136041aae25f808d6f419cf0aa271841a156aaf283195cdb9e012d0d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;mysql 重要日志文件总结&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/article&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>