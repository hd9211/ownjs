<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>5562370abedb19ef10cba80377e171ac</guid>
<title>Java 知识点整理：Spring、MySQL</title>
<link>https://toutiao.io/k/j4kd9qh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-topic-des nc-post-content&quot;&gt;
&lt;h2 id=&quot;spring-10&quot;&gt;Spring 10&lt;/h2&gt; 
&lt;h3&gt;P1：Spring 框架&lt;/h3&gt; 
&lt;p&gt;Spring 是分层的企业级应用轻量级开源框架，以 IoC 和 AOP为内核。Spring 可以降低企业级应用开发的复杂性，对此主要采取了四个关键策略：基于 POJO 的轻量级和最小侵入性编程、通过依赖注入和面向接口实现松耦合、基于切面和惯性进行声明式编程、通过切面和模板减少样板式代码。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;好处&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;降低代码耦合度、简化开发。通过 Spring 提供的 IoC 容器可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些底层的需求编写代码，可以更专注于上层的应用。&lt;/p&gt; 
&lt;p&gt;AOP 编程以及声明式事务的支持。通过 Spring 的 AOP 功能可以方便进行面向切面的编程，通过声明式事务可以灵活进行事务管理，提高开发效率和质量。&lt;/p&gt; 
&lt;p&gt;方便程序的测试和集成各种框架。可以用非容器依赖的编程方式进行几乎所有的测试工作，可以降低各种框架的使用难度，提供了对 Mybatis 和 Hibernate 等框架的直接支持。&lt;/p&gt; 
&lt;p&gt;降低了 JavaEE API 的使用难度。Spring 对 JDBC、JavaMail、远程调用等 API 进行了封装，使这些 API 的使用难度大幅降低。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;核心容器&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;核心容器由 spring-beans、spring-core、spring-context 和 spring-expression 四个模块组成。&lt;/p&gt; 
&lt;p&gt;spring-beans 和 spring-core 模块是 Spring 的核心模块，包括了控制反转和依赖注入。BeanFactory 使用控制反转对应用程序的配置和依赖性规范与实际的应用代码进行分离，BeanFactory 实例化后并不会自动实例化 Bean，只有当 Bean 被使用时才会对其进行实例化与依赖关系的装配。&lt;/p&gt; 
&lt;p&gt;spring-context 模块构架于核心模块之上，扩展了 BeanFactory，为它添加了 Bean 的生命周期控制、框架事件体系及资源透明化加载等功能。ApplicationConext 是该模块的核心接口，它是 BeanFactory 的子接口，它实例化后会自动对所有单例 Bean 进行实例化与依赖关系的装配，使之处于待用状态。&lt;/p&gt; 
&lt;p&gt;spring-expression 是 EL 语言的扩展模块，可以查询、管理运行中的对象，同时也可以方便地调用对象方法，以及操作数组、集合等。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P2：IoC 控制反转&lt;/h3&gt; 
&lt;p&gt;IoC 即控制反转，是一种给予应用程序中目标组件更多控制的设计范式，简单来说就是把原来代码里需要实现的对象创建、依赖反转给容器来帮忙实现，需要创建一个容器并且需要一种描述来让容器知道要创建的对象之间的关系，在 Spring 框架中管理对象及其依赖关系是通过 Spring 的 IoC 容器实现的，IoC 的作用是降低代码耦合度。&lt;/p&gt; 
&lt;p&gt;IoC 的实现方式有依赖注入和依赖查找，由于依赖查找使用的很少，因此 IoC 也叫做依赖注入。依赖注入指对象被动地接受依赖类而不用自己主动去找，对象不是从容器中查找它依赖的类，而是在容器实例化对象时主动将它依赖的类注入给它。假设一个 Car 类需要一个 Engine 的对象，那么一般需要需要手动 new 一个 Engine，利用 IoC 就只需要定义一个私有的 Engine 类型的成员变量，容器会在运行时自动创建一个 Engine 的实例对象并将引用自动注入给成员变量。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;基于 XML 的容器初始化&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;当创建一个 ClassPathXmlApplicationContext 时，构造器做了两件事：首先调用父容器的构造器为容器设置好 Bean 资源加载器，然后调用父类的 setConfigLocations 方法设置 Bean 配置信息的定位路径。&lt;/p&gt; 
&lt;p&gt;ClassPathXmlApplicationContext 通过调用父类 AbstractApplicationContext 的 refresh 方法启动整个 IoC 容器对 Bean 定义的载入过程，refresh 是一个模板方法，规定了 IoC 容器的启动流程。refresh 方法的主要作用是：在创建 IoC 容器之前如果已有容器存在，需要把已有的容器销毁和关闭，以保证在 refresh 方法之后使用的是新创建的 IoC 容器。&lt;/p&gt; 
&lt;p&gt;容器创建后通过 loadBeanDefinitions 方法加载 Bean 配置资源，该方***做两件事：首先调用资源加载器的方法获取要加载的资源，其次真正执行加载功能，由子类 XmlBeanDefinitionReader 实现。在加载资源时，首先会解析配置文件路径，读取配置文件的内容，然后通过 XML 解析器将 Bean 配置信息转换成文档对象，之后再按照 Spring Bean 的定义规则对文档对象进行解析。&lt;/p&gt; 
&lt;p&gt;Spring IoC 容器中注册解析的 Bean 信息存放在一个 HashMap 集合中，key 是 String 字符串，值是 BeanDefinition，在注册过程中需要使用 synchronized 同步块保证线程安全。当 Bean 配置信息中配置的 Bean 被解析后且被注册到 IoC 容器中，初始化就算真正完成了，Bean 定义信息已经可以使用，并且可以被检索。Spring IoC 容器的作用就是对这些注册的 Bean 定义信息进行处理和维护，注册的 Bean 定义信息是控制反转和依赖注入的基础。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;基于注解的容器初始化&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Spring 对注解的处理分为两种方式：① 直接将注解 Bean 注册到容器中，可以在初始化容器时注册，也可以在容器创建之后手动注册，然后刷新容器使其对注册的注解 Bean 进行处理。② 通过扫描指定的包及其子包的所有类处理，在初始化注解容器时指定要自动扫描的路径。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P3：DI 依赖注入&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;可注入的数据类型&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;基本数据类型和 String、集合类型、Bean 类型。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;实现方式&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;构造器注入：IoC Service Provider 会检查被注入对象的构造器，取得它所需要的依赖对象列表，进而为其注入相应的对象。这种方法的优点是在对象构造完成后就处于就绪状态，可以马上使用。缺点是当依赖对象较多时，构造器的参数列表会比较长，构造器无法被继承，无法设置默认值。对于非必需的依赖处理可能需要引入多个构造器，参数数量的变动可能会造成维护的困难。&lt;/p&gt; 
&lt;p&gt;setter 方法注入：当前对象只需要为其依赖对象对应的属性添加 setter 方法，就可以通过 setter 方法将依赖对象注入到被依赖对象中。setter 方法注入在描述性上要比构造器注入强，并且可以被继承，允许设置默认值。缺点是无法在对象构造完成后马上进入就绪状态。&lt;/p&gt; 
&lt;p&gt;接口注入：必须实现某个接口，这个接口提供一个方法来为其注入依赖对象。使用较少，因为它强制要求被注入对象实现不必要的接口，侵入性强。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相关注解&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Autowired&lt;/code&gt;：自动按类型注入，如果有多个匹配则按照指定 Bean 的 id 查找，查找不到会报错。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Qualifier&lt;/code&gt;：在自动按照类型注入的基础上再按照 Bean 的 id 注入，给变量注入时必须搭配 &lt;code&gt;@Autowired&lt;/code&gt;，给方法注入时可单独使用。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Resource&lt;/code&gt; ：直接按照 Bean 的 id 注入，只能注入 Bean 类型。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Value&lt;/code&gt; ：用于注入基本数据类型和 String 类型。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;依赖注入的过程&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;getBean 方法是获取 Bean 实例的方法，该方***调用 doGetBean 方法，doGetBean 真正实现向 IoC 容器获取 Bean 的功能，也是触发依赖注入的地方。如果 Bean 定义为单例模式，容器在创建之前先从缓存中查找以确保整个容器中只存在一个实例对象。如果 Bean 定义为原型模式，则容器每次都会创建一个新的实例。&lt;/p&gt; 
&lt;p&gt;具体创建 Bean 实例对象的过程由 ObjectFactory 的 createBean 方法完成，该方法主要通过 createBeanInstance 方法生成 Bean 包含的 Java 对象实例和 populateBean 方法对 Bean 属性的依赖注入进行处理。&lt;/p&gt; 
&lt;p&gt;在 createBeanInstance 方法中根据指定的初始化策略，通过简单工厂、工厂方法或容器的自动装配特性生成 Java 实例对象，对工厂方法和自动装配特性的 Bean，调用相应的工厂方法或参数匹配的构造器即可完成实例化对象的工作，但最常用的默认无参构造器需要使用 JDK 的反射或 CGLib 来进行初始化。&lt;/p&gt; 
&lt;p&gt;在 populateBean 方法中，注入过程主要分为两种情况：① 属性值类型不需要强制转换时，不需要解析属性值，直接进行依赖注入。② 属性值类型需要强制转换时，首先需要解析属性值，然后对解析后的属性值进行依赖注入。依赖注入的过程就是将 Bean 对象实例设置到它所依赖的 Bean 对象属性上，真正的依赖注入是通过 setPropertyValues 方法实现的，该方法使用了委派模式。&lt;/p&gt; 
&lt;p&gt;BeanWrapperImpl 类负责对容器完成初始化的 Bean 实例对象进行属性的依赖注入，对于非集合类型的属性，大量使用 JDK 的反射机制，通过属性的 getter 方法获取指定属性注入前的值，同时调用属性的 setter 方法为属性设置注入后的值。对于集合类型的属性，将属性值解析为目标类型的集合后直接赋值给属性。&lt;/p&gt; 
&lt;p&gt;当 Spring IoC 容器对 Bean 定义资源的定位、载入、解析和依赖注入全部完成后，就不再需要我们手动创建所需的对象，Spring IoC 容器会自动为我们创建对象并且注入好相关依赖。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P4：Bean 对象&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;生命周期&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 IoC 容器的初始化过程中会对 Bean 定义完成资源定位，加载读取配置并解析，最后将解析的 Bean 信息放在一个 HashMap 集合中。当 IoC 容器初始化完成后，会进行对 Bean 实例的创建和依赖注入过程，注入对象依赖的各种属性值，在初始化时可以指定自定义的初始化方法。经过这一系列初始化操作后 Bean 达到可用状态，接下来就可以使用 Bean 了，当使用完成后会调用 destroy 方法进行销毁，此时也可以指定自定义的销毁方法，最终 Bean 被销毁且从容器中移除。&lt;/p&gt; 
&lt;p&gt;指定 Bean 初始化和销毁的方法：&lt;/p&gt; 
&lt;p&gt;XML 方式通过配置 bean 标签中的 init-Method 和 destory-Method 指定自定义初始化和销毁方法。 &lt;/p&gt; 
&lt;p&gt;注解方式通过 &lt;code&gt;@PreConstruct&lt;/code&gt; 和 &lt;code&gt;@PostConstruct&lt;/code&gt; 注解指定自定义初始化和销毁方法。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;作用范围&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;通过 scope 属性指定 bean 的作用范围，包括：① singleton：单例模式，是默认作用域，不管收到多少 Bean 请求每个容器中只有一个唯一的 Bean 实例。② prototype：原型模式，和 singleton 相反，每次 Bean 请求都会创建一个新的实例。③ request：每次 HTTP 请求都会创建一个新的 Bean 并把它放到 request 域中，在请求完成后 Bean 会失效并被垃圾收集器回收。④ session：和 request 类似，确保每个 session 中有一个 Bean 实例，session 过期后 bean 会随之失效。⑤ global session：当应用部署在 Portlet 容器中时，如果想让所有 Portlet 共用全局存储变量，那么这个变量需要存储在 global session 中。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;创建方式&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;XML&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;通过默认无参构造器，只需要指明 bean 标签中的 id 和 class 属性，如果没有无参构造器会报错。&lt;/p&gt; 
&lt;p&gt;使用静态工厂方法，通过 bean 标签中的 class 属性指明静态工厂，factory-method 属性指明静态工厂方法。&lt;/p&gt; 
&lt;p&gt;使用实例工厂方法，通过 bean 标签中的 factory-bean 属性指明实例工厂，factory-method 属性指明实例工厂方法。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;注解&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Component&lt;/code&gt; 把当前类对象存入 Spring 容器中，相当于在 xml 中配置一个 bean 标签。value 属性指定 bean 的 id，默认使用当前类的首字母小写的类名。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Controller&lt;/code&gt;，&lt;code&gt;@Service&lt;/code&gt;，&lt;code&gt;@Repository&lt;/code&gt; 三个注解都是 &lt;code&gt;@Component&lt;/code&gt; 的衍生注解，作用及属性都是一模一样的。只是提供了更加明确语义，&lt;code&gt;@Controller&lt;/code&gt; 用于表现层，&lt;code&gt;@Service&lt;/code&gt;用于业务层，&lt;code&gt;@Repository&lt;/code&gt;用于持久层。如果注解中有且只有一个 value 属性要赋值时可以省略 value。&lt;/p&gt; 
&lt;p&gt;如果想将第三方的类变成组件又没有源代码，也就没办法使用 &lt;code&gt;@Component&lt;/code&gt; 进行自动配置，这种时候就要使用 &lt;code&gt;@Bean&lt;/code&gt; 注解。被 &lt;code&gt;@Bean&lt;/code&gt; 注解的方法返回值是一个对象，将会实例化，配置和初始化一个新对象并返回，这个对象由 Spring 的 IoC 容器管理。name 属性用于给当前 &lt;code&gt;@Bean&lt;/code&gt; 注解方法创建的对象指定一个名称，即 bean 的 id。当使用注解配置方法时，如果方法有参数，Spring 会去容器查找是否有可用 bean对象，查找方式和 &lt;code&gt;@Autowired&lt;/code&gt; 一样。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Configuration&lt;/code&gt; 用于指定当前类是一个 spring 配置类，当创建容器时会从该类上加载注解，value 属性用于指定配置类的字节码。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@ComponentScan&lt;/code&gt; 用于指定 Spring 在初始化容器时要扫描的包。basePackages 属性用于指定要扫描的包。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@PropertySource&lt;/code&gt; 用于加载 &lt;code&gt;.properties&lt;/code&gt; 文件中的配置。value 属性用于指定文件位置，如果是在类路径下需要加上 classpath。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Import&lt;/code&gt; 用于导入其他配置类，在引入其他配置类时可以不用再写 &lt;code&gt;@Configuration&lt;/code&gt; 注解。有 &lt;code&gt;@Import&lt;/code&gt; 的是父配置类，引入的是子配置类。value 属性用于指定其他配置类的字节码。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;BeanFactory、FactoryBean 和 ApplicationContext 的区别&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;BeanFactory 是一个 Bean 工厂，实现了工厂模式，是 Spring IoC 容器最顶级的接口，可以理解为含有 Bean 集合的工厂类，它的作用是管理 Bean，包括实例化、定位、配置应用程序中的对象及建立这些对象之间的依赖。BeanFactory 实例化后并不会自动实例化 Bean，只有当 Bean 被使用时才会对其进行实例化与依赖关系的装配，属于延迟加载，适合多例模式。&lt;/p&gt; 
&lt;p&gt;FactoryBean 是一个工厂 Bean，作用是生产其他 Bean 实例，可以通过实现该接口，提供一个工厂方法来自定义实例化 Bean 的逻辑。&lt;/p&gt; 
&lt;p&gt;ApplicationConext 是 BeanFactory 的子接口，扩展了 BeanFactory 的功能，提供了支持国际化的文本消息，统一的资源文件读取方式，事件传播以及应用层的特别配置等。容器会在初始化时对配置的 Bean 进行预实例化，Bean 的依赖注入在容器初始化时就已经完成，属于立即加载，适合单例模式，一般推荐使用 ApplicationContext。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P5：AOP 面向切面编程&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;概念和原理&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;AOP 即面向切面编程，简单地说就是将代码中重复的部分抽取出来，在需要执行的时候使用动态代理的技术，在不修改&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%BA%90%E7%A0%81&quot; target=&quot;_blank&quot;&gt;源码&lt;/a&gt;的基础上对方法进行增强。优点是可以减少代码的冗余，提高开发效率，维护方便。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;Spring 会根据类是否实现了接口来判断动态代理的方式，如果实现了接口会使用 JDK 的动态代理，核心是 InvocationHandler 接口和 Proxy 类，如果没有实现接口会使用 CGLib 动态代理，CGLib 是在运行时动态生成某个类的子类，如果某一个类被标记为 final，是不能使用 CGLib 动态代理的。&lt;/p&gt; 
&lt;p&gt;JDK 动态代理主要通过重组字节码实现，首先获得被代理对象的引用和所有接口，生成新的类必须实现被代理类的所有接口，动态生成Java 代码后编译新生成的 &lt;code&gt;.class&lt;/code&gt; 文件并重新加载到 JVM 运行。JDK 代理直接写 Class 字节码，CGLib是采用ASM框架写字节码，生成代理类的效率低。但是CGLib调用方法的效率高，因为 JDK 使用反射调用方法，CGLib 使用 FastClass 机制为代理类和被代理类各生成一个类，这个类会为代理类或被代理类的方法生成一个 index，这个 index 可以作为参数直接定位要调用的方法。&lt;/p&gt; 
&lt;p&gt;常用场景包括权限认证、自动缓存、错误处理、日志、调试和事务等。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相关注解&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Aspect&lt;/code&gt;：声明被注解的类是一个切面 Bean。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Before&lt;/code&gt;：前置通知，指在某个连接点之前执行的通知。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@After&lt;/code&gt;：后置通知，指某个连接点退出时执行的通知（不论正常返回还是异常退出）。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@AfterReturning&lt;/code&gt;：返回后通知，指某连接点正常完成之后执行的通知，返回值使用returning属性接收。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@AfterThrowing&lt;/code&gt;：异常通知，指方法抛出异常导致退出时执行的通知，和&lt;code&gt;@AfterReturning&lt;/code&gt;只会有一个执行，异常使用throwing属性接收。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相关术语&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Aspect&lt;/code&gt;：切面，一个关注点的模块化，这个关注点可能会横切多个对象。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Joinpoint&lt;/code&gt;：连接点，程序执行过程中的某一行为，即业务层中的所有方法。。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Advice&lt;/code&gt;：通知，指切面对于某个连接点所产生的动作，包括前置通知、后置通知、返回后通知、异常通知和环绕通知。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Pointcut&lt;/code&gt;：切入点，指被拦截的连接点，切入点一定是连接点，但连接点不一定是切入点。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Proxy&lt;/code&gt;：代理，Spring AOP 中有 JDK 动态代理和 CGLib 代理，目标对象实现了接口时采用 JDK 动态代理，反之采用 CGLib 代理。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Target&lt;/code&gt;：代理的目标对象，指一个或多个切面所通知的对象。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Weaving&lt;/code&gt; ：织入，指把增强应用到目标对象来创建代理对象的过程。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;AOP 的过程&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Spring AOP 是由 BeanPostProcessor 后置处理器开始的，这个后置处理器是一个***，可以监听容器触发的 Bean 生命周期事件，向容器注册后置处理器以后，容器中管理的 Bean 就具备了接收 IoC 容器回调事件的能力。BeanPostProcessor 的调用发生在 Spring IoC 容器完成 Bean 实例对象的创建和属性的依赖注入之后，为 Bean 对象添加后置处理器的入口是 initializeBean 方法。&lt;/p&gt; 
&lt;p&gt;Spring 中 JDK 动态代理生通过 JdkDynamicAopProxy 调用 Proxy 的 newInstance 方法来生成代理类，JdkDynamicAopProxy 也实现了 InvocationHandler 接口，invoke 方法的具体逻辑是先获取应用到此方法上的拦截器链，如果有拦截器则创建 MethodInvocation 并调用其 proceed 方法，否则直接反射调用目标方法。因此 Spring AOP 对目标对象的增强是通过拦截器实现的。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P6：Spring MVC 核心组件&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt;&lt;span&gt;：SpringMVC 中的&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%89%8D%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;前端&lt;/a&gt;控制器，是整个流程控制的核心，负责接收请求并转发给对应的处理组件。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Handler&lt;/code&gt;：处理器，完成具体业务逻辑，相当于 Servlet 或 Action。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;HandlerMapping&lt;/code&gt;：完成URL 到 Controller映射的组件，DispatcherServlet 接收到请求之后，通过 HandlerMapping 将不同的请求映射到不同的 Handler。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;HandlerInterceptor&lt;/code&gt;：处理器拦截器，是一个接口，如果需要完成一些拦截处理，可以实现该接口。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;HandlerExecutionChain&lt;/code&gt;：处理器执行链，包括两部分内容：Handler 和 HandlerInterceptor。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;HandlerAdapter&lt;/code&gt;：处理器适配器，Handler执行业务方法前需要进行一系列操作，包括表单数据验证、数据类型转换、将表单数据封装到JavaBean等，这些操作都由 HandlerAdapter 完成。DispatcherServlet 通过 HandlerAdapter 来执行不同的 Handler。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;ModelAndView&lt;/code&gt;：装载了模型数据和视图信息，作为 Handler 的处理结果返回给 DispatcherServlet。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;ViewResolver&lt;/code&gt;&lt;span&gt;：视图解析器，DispatcherServlet 通过它将逻辑视图解析为物理视图，最终将渲染的结果响应给&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P7：Spring MVC 处理流程&lt;/h3&gt; 
&lt;p&gt;Web 容器启动时会通知 Spring 初始化容器，加载 Bean 的定义信息并初始化所有单例 Bean，然后遍历容器中的 Bean，获取每一个 Controller 中的所有方法访问的 URL，将 URL 和对应的 Controller 保存到一个 Map 集合中。&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;所有的请求会转发给 DispatcherServlet &lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%89%8D%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;前端&lt;/a&gt;处理器处理，DispatcherServlet 会请求 HandlerMapping 找出容器中被 &lt;/span&gt;&lt;code&gt;@Controler&lt;/code&gt; 注解修饰的 Bean 以及被 &lt;code&gt;@RequestMapping&lt;/code&gt; 修饰的方法和类，生成 Handler 和 HandlerInterceptor 并以一个 HandlerExcutionChain 处理器执行链的形式返回。&lt;/p&gt; 
&lt;p&gt;之后 DispatcherServlet 使用 Handler 找到对应的 HandlerApapter，通过 HandlerApapter 调用 Handler 的方法，将请求参数绑定到方法的形参上，执行方法处理请求并得到 ModelAndView。&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;最后 DispatcherServlet 根据使用 ViewResolver 试图解析器对得到的 ModelAndView 逻辑视图进行解析得到 View 物理视图，然后对视图渲染，将数据填充到视图中并返回给&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;注解&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Controller&lt;/code&gt;：在类定义处添加，将类交给IoC容器管理。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@RequtestMapping&lt;/code&gt;：将URL请求和业务方法映射起来，在类和方法定义上都可以添加该注解。&lt;code&gt;value&lt;/code&gt; 属性指定URL请求的实际地址，是默认值。&lt;code&gt;method&lt;/code&gt; 属性限制请求的方法类型，包括GET、POST、PUT、DELETE等。如果没有使用指定的请求方法请求URL，会报405 Method Not Allowed 错误。&lt;code&gt;params&lt;/code&gt; 属性限制必须提供的参数，如果没有会报错。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@RequestParam&lt;/code&gt;：如果 Controller 方法的形参和 URL 参数名一致可以不添加注解，如果不一致可以使用该注解绑定。&lt;code&gt;value&lt;/code&gt; 属性表示HTTP请求中的参数名。&lt;code&gt;required&lt;/code&gt; 属性设置参数是否必要，默认false。&lt;code&gt;defaultValue&lt;/code&gt; 属性指定没有给参数赋值时的默认值。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@PathVariable&lt;/code&gt;：Spring MVC 也支持 RESTful 风格的 URL，通过 &lt;code&gt;@PathVariable&lt;/code&gt; 完成请求参数与形参的绑定。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P8：Spring Data JPA 框架&lt;/h3&gt; 
&lt;p&gt;Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套 JPA 应用框架，可使开发者用极简的代码实现对数据库的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展，可以极大提高开发效率。&lt;/p&gt; 
&lt;p&gt;ORM 即 Object-Relational Mapping ，表示对象关系映射，映射的不只是对象的值还有对象之间的关系，通过 ORM 就可以把对象映射到关系型数据库中。操作实体类就相当于操作数据库表，可以不再重点关注 SQL 语句。&lt;/p&gt; 
&lt;p&gt;使用时只需要持久层接口继承 JpaRepository 即可，泛型参数列表中第一个参数是实体类类型，第二个参数是主键类型。运行时通过 &lt;code&gt;JdkDynamicAopProxy&lt;/code&gt; 的 &lt;code&gt;invoke&lt;/code&gt; 方法创建了一个动态代理对象 &lt;code&gt;SimpleJpaRepository&lt;/code&gt;，&lt;code&gt;SimpleJpaRepository&lt;/code&gt; 中封装了 JPA 的操作，通过 &lt;code&gt;hibernate&lt;/code&gt;（封装了JDBC）完成数据库操作。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;注解&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Entity&lt;/code&gt;：表明当前类是一个实体类。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Table&lt;/code&gt; ：关联实体类和数据库表。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Column&lt;/code&gt; ：关联实体类属性和数据库表中字段。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@Id&lt;/code&gt; ：声明当前属性为数据库表主键对应的属性。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@GeneratedValue&lt;/code&gt;： 配置主键生成策略。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@OneToMany&lt;/code&gt; ：配置一对多关系，mappedBy 属性值为主表实体类在从表实体类中对应的属性名。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@ManyToOne&lt;/code&gt; ：配置多对一关系，targetEntity 属性值为主表对应实体类的字节码。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;@JoinColumn&lt;/code&gt;：配置外键关系，name 属性值为外键名称，referencedColumnName 属性值为主表主键名称。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;对象导航查询&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;通过 get 方法查询一个对象的同时，通过此对象可以查询它的关联对象。&lt;/p&gt; 
&lt;p&gt;对象导航查询一到多默认使用延迟加载的形式， 关联对象是集合，因此使用立即加载可能浪费资源。&lt;/p&gt; 
&lt;p&gt;对象导航查询多到一默认使用立即加载的形式， 关联对象是一个对象，因此使用立即加载。&lt;/p&gt; 
&lt;p&gt;如果要改变加载方式，在实体类注解配置加上 fetch 属性即可，LAZY 表示延迟加载，EAGER 表示立即加载。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P9：Mybatis 框架&lt;/h3&gt; 
&lt;p&gt;Mybatis 是一个实现了数据持久化的 ORM 框架，简单理解就是对 JDBC 进行了封装。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;相比 JDBC 减少了大量代码量，减少冗余代码。&lt;/p&gt; 
&lt;p&gt;使用灵活，SQL 语句写在 XML 里，从程序代码中彻底分离，降低了耦合度，便于管理。&lt;/p&gt; 
&lt;p&gt;提供 XML 标签，支持编写动态 SQL 语句。&lt;/p&gt; 
&lt;p&gt;提供映射标签，支持对象与数据库的 ORM 字段映射关系。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;SQL 语句编写工作量较大，尤其是字段和关联表多时。&lt;/p&gt; 
&lt;p&gt;SQL 语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;映射文件标签&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;select&lt;/code&gt;、&lt;code&gt;insert&lt;/code&gt;、&lt;code&gt;update&lt;/code&gt;、&lt;code&gt;delete&lt;/code&gt; 标签分别对应查询、添加、更新、删除操作。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;parameterType&lt;/code&gt; 属性表示参数的数据类型，包括基本数据类型和对应的包装类型、String 和 Java Bean 类型，当有多个参数时可以使用 &lt;code&gt;#{argn}&lt;/code&gt; 的形式表示第 n 个参数。除了基本数据类型都要以全限定类名的形式指定参数类型。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;resultType&lt;/code&gt; 表示返回的结果类型，包括基本数据类型和对应的包装类型、String 和 Java Bean 类型。还可以使用把返回结果封装为复杂类型的 &lt;code&gt;resultMap&lt;/code&gt; 。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;缓存&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;使用缓存可以减少程序和数据库交互的次数，从而提高程序的运行效率。第一次查询后会自动将结果保存到缓存中，下一次查询时直接从缓存中返回结果无需再次查询数据库。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;p&gt;&lt;strong&gt;一级缓存&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;SqlSession 级别，默认开启且不能关闭。&lt;/p&gt; &lt;p&gt;操作数据库时需要创建 SqlSession 对象，在对象中有一个 HashMap 用于存储缓存数据，不同 SqlSession 之间缓存数据区域互不影响。&lt;/p&gt; &lt;p&gt;一级缓存的作用域是 SqlSession 范围的，在同一个 SqlSession 中执行两次相同的 SQL 语句时，第一次执行完毕会将结果保存在缓存中，第二次查询直接从缓存中获取。&lt;/p&gt; &lt;p&gt;如果 SqlSession 执行了 DML 操作（insert、update、delete），Mybatis 必须将缓存清空以保证数据的有效性。 &lt;/p&gt; &lt;/li&gt;
 &lt;li&gt;&lt;p&gt;&lt;strong&gt;二级缓存&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Mapper 级别，默认关闭。&lt;/p&gt; &lt;p&gt;使用二级缓存时多个 SqlSession 使用同一个 Mapper 的 SQL 语句操作数据库，得到的数据会存在二级缓存区，同样使用 HashMap 进行数据存储，相比于一级缓存，二级缓存范围更大，多个 SqlSession 可以共用二级缓存，作用域是 Mapper 的同一个 namespace，不同 SqlSession 两次执行相同的 namespace 下的 SQL 语句，参数也相等，则第一次执行成功后会将数据保存在二级缓存中，第二次可直接从二级缓存中取出数据。&lt;/p&gt; &lt;p&gt;要使用二级缓存，先在在全局配置文件中配置：&lt;/p&gt; &lt;pre class=&quot;prettyprint lang-xml&quot; from-niu=&quot;default&quot;&gt;&amp;lt;!-- 开启二级缓存 --&amp;gt;
&amp;lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&amp;gt;&lt;/pre&gt; &lt;p&gt;再在对应的映射文件中配置一个 cache 标签即可。&lt;/p&gt; &lt;pre class=&quot;prettyprint lang-xml&quot; from-niu=&quot;default&quot;&gt;&amp;lt;cache/&amp;gt;&lt;/pre&gt; &lt;/li&gt;
&lt;/ul&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P10：Spring Cloud 框架&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;单体应用存在的问题&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;随着业务发展，开发越来越复杂。&lt;/p&gt; 
&lt;p&gt;修改、新增某个功能，需要对整个系统进行测试、重新部署。&lt;/p&gt; 
&lt;p&gt;一个模块出现问题，可能导致整个系统崩溃。&lt;/p&gt; 
&lt;p&gt;多个开发团队同时对数据进行管理，容易产生安全漏洞。&lt;/p&gt; 
&lt;p&gt;各个模块使用同一种技术开发，各个模块很难根据实际情况选择更合适的技术框架，局限性很大。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;分布式和集群的区别&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;集群：一台服务器无法负荷高并发的数据访问量，就设置多台服务器一起分担压力，是在物理层面解决问题。&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;分布式：将一个复杂的问题拆分成若干简单的小问题，将一个大型的&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;架构拆分成若干个微服务来协同完成，在软件设计层面解决问题。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;微服务的优点&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;各个服务的开发、测试、部署都相互独立，用户服务可以拆分为独立服务，如果用户量很大，可以很容易对其实现负载。&lt;/p&gt; 
&lt;p&gt;当新需求出现时，使用微服务不再需要考虑各方面的问题，例如兼容性、影响度等。&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;使用微服务拆分&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;后，各个服务之间消除了很多限制，只需要保证对外提供的接口正常可用，而不限制语言和框架等选择。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;服务治理 Eureka&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;服务治理的核心由三部分组成：&lt;strong&gt;服务提供者&lt;/strong&gt;、&lt;strong&gt;服务消费者&lt;/strong&gt;、&lt;strong&gt;注册中心&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;服务注册：在分布式系统架构中，每个微服务在启动时，将自己的信息存储在注册中心。&lt;/p&gt; 
&lt;p&gt;服务发现：服务消费者从注册中心获取服务提供者的网络信息，通过该信息调用服务。&lt;/p&gt; 
&lt;p&gt;Spring Cloud 的服务治理使用 Eureka 实现，Eureka 是 Netflix 开源的基于 REST 的服务治理解决方案，Spring Cloud 集成了 Eureka，提供服务注册和服务发现的功能，可以和基于 Spring Boot 搭建的微服务应用轻松完成整合，将 Eureka 二次封装为 Spring Cloud Eureka。&lt;strong&gt;Eureka Server&lt;/strong&gt; 是注册中心，所有要进行注册的微服务通过 Eureka Client 连接到 Eureka Server 完成注册。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;服务网关 Zuul&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;Spring Cloud 集成了 Zuul 组件，实现服务网关。Zuul 是 Netflix 提供的一个开源的 API 网关服务器，是&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;和网站后端所有请求的中间层，对外开放一个 API，将所有请求导入统一的入口，屏蔽了服务端的具体实现逻辑，可以实现方向代理功能，在网关内部实现动态路由、身份认证、IP过滤、数据监控等。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;负载均衡 Ribbon&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;Spring Cloud Ribbon 是一个负载均衡的解决方案，Ribbon 是 Netflix 发布的均衡负载器，Spring Cloud Ribbon是基于 Netflix Ribbon 实现的，是一个用于对 HTTP 请求进行控制的负载均衡&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;在注册中心对 Ribbon 进行注册之后，Ribbon 就可以基于某种负载均衡算***循、随机、加权轮询、加权随机等）自动帮助服务消费者调用接口，开发者也可以根据具体需求自定义 Ribbon 负载均衡&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;。实际开发中 Spring Clooud Ribbon 需要结合 Spring Cloud Eureka 使用，Eureka 提供所有可以调用的服务提供者列表，Ribbon 基于特定的负载均衡&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;从这些服务提供者中选择要调用的具体实例。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;声明式接口调用 Feign&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;Feign 与 Ribbon 一样也是 Netflix 提供的，Feign 是一个声明式、模板化的 Web Service &lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;，简化了开发者编写 Web 服务&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;的操作，开发者可以通过简单的接口和注解来调用 HTTP API，Spring Cloud Feign 整合了 Ribbon 和 Hystrix，具有可插拔、基于注解、负载均衡、服务熔断等一系列功能。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;相比于 Ribbon + RestTemplate 的方式，Feign 可以大大简化代码开发，支持多种注解，包括 Feign 注解、JAX-RS 注解、Spring MVC 注解等。RestTemplate 是 Spring 框架提供的基于 REST 的服务组件，底层是对 HTTP 请求及响应进行了封装，提供了很多访问 REST 服务的方法，可以简化代码开发。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;服务熔断 Hystrix&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;熔断器的作用是在不改变各个微服务调用关系的前提下，针对错误情况进行预先处理。&lt;/p&gt; 
&lt;p&gt;设计原则：服务隔离机制、服务降级机制、熔断机制、提供实时监控和报警功能和提供实时配置修改功能&lt;/p&gt; 
&lt;p&gt;Hystrix 数据监控需要结合 &lt;code&gt;Spring Boot Actuator&lt;/code&gt; 使用，Actuator 提供了对服务的数据监控、数据统计，可以通过 &lt;code&gt;hystirx-stream&lt;/code&gt; 节点获取监控的请求数据，同时提供了可视化监控界面。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;服务配置 Config&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;Spring Cloud Config 通过服务端可以为多个&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;提供配置服务，既可以将配置文件存储在本地，也可以将配置文件存储在远程的 Git 仓库，创建 Config Server，通过它管理所有的配置文件。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;服务跟踪 Zipkin&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Spring Cloud Zipkin 是一个可以采集并跟踪分布式系统中请求数据的组件，让开发者更直观地监控到请求在各个微服务耗费的时间，Zipkin 包括两部分 Zipkin Server 和 Zipkin Client。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h2 id=&quot;mysql-15&quot;&gt;MySQL 15&lt;/h2&gt; 
&lt;h3&gt;P1：逻辑架构&lt;/h3&gt; 
&lt;p&gt;第一层是服务器层，主要提供连接处理、授权认证、安全等功能，该层的服务不是 MySQL 独有的，大多数基于网络的 C/S 服务都有类似架构。&lt;/p&gt; 
&lt;p&gt;第二层实现了 MySQL 核心服务功能，包括查询解析、分析、优化、缓存以及日期、时间等所有内置函数，所有跨存储引擎的功能都在这一层实现，例如存储过程、触发器、视图等。&lt;/p&gt; 
&lt;p&gt;第三层是存储引擎层，存储引擎负责 MySQL 中数据的存储和提取。服务器通过API 与存储引擎通信，这些接口屏蔽了不同存储引擎的差异，使得差异对上层查询过程透明。除了会解析外键定义的 InnoDB 外，存储引擎不会解析SQL，不同存储引擎之间也不会相互通信，只是简单响应上层服务器请求。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P2：锁&lt;/h3&gt; 
&lt;p&gt;当有多个查询需要在同一时刻修改数据时就会产生并发控制的问题，MySQL 在两个层面进行并发控制：服务器层与存储引擎层。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;读写锁&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在处理并发读或写时，可以通过实现一个由两种类型组成的锁系统来解决问题。这两种类型的锁通常被称为共享锁和排它锁，也叫读锁和写锁。读锁是共享的，或者说相互不阻塞的，多个客户在同一时刻可以同时读取同一个资源而不相互干扰。写锁则是排他的，也就是说一个写锁会阻塞其他的写锁和读锁，只有如此才能确保在给定时间内只有一个用户能执行写入并防止其他用户读取正在写入的同一资源。在实际的数据库系统中，每时每刻都在发生锁定，当某个用户在修改某一部分数据时，MySQL 会通过锁定防止其他用户读取同一数据。写锁比读锁有更高的优先级，一个写锁请求可能会被插入到读锁队列的前面，但是读锁不能插入到写锁前面。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;锁策略&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;一种提高共享资源并发性的方法就是让锁定对象更有选择性，尽量只锁定需要修改的部分数据而不是所有资源，更理想的方式是只对会修改的数据进行精确锁定。任何时刻在给定的资源上，锁定的数据量越少，系统的并发程度就越高，只要不发生冲突即可。&lt;/p&gt; 
&lt;p&gt;锁策略就是在锁的开销和数据安全性之间寻求平衡，这种平衡也会影响性能。大多数商业数据库系统没有提供更多选择，一般都是在表上加行锁，而 MySQL 提供了多种选择，每种MySQL存储引擎都可以实现自己的锁策略和锁粒度。MySQL最重要的两种锁策略是：&lt;/p&gt; 
 
&lt;p&gt;&lt;strong&gt;死锁&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;死锁是指两个或者多个事务在同一资源上相互占用并请求锁定对方占用的资源，从而导致恶性循环的现象。当多个事务试图以不同顺序锁定资源时就可能会产生死锁，多个事务同时锁定同一个资源时也会产生死锁。&lt;/p&gt; 
&lt;p&gt;为了解决死锁问题，数据库系统实现了各种死锁检测和死锁超时机制。越复杂的系统，例如InnoDB 存储引擎，越能检测到死锁的循环依赖，并立即返回一个错误。这种解决方式很有效，否则死锁会导致出现非常慢的查询。还有一种解决方法，就是当查询的时间达到锁等待超时的设定后放弃锁请求，这种方式通常来说不太好。InnoDB 目前处理死锁的方法是将持有最少行级排它锁的事务进行回滚。&lt;/p&gt; 
&lt;p&gt;锁的行为与顺序是和存储引擎相关的，以同样的顺序执行语句，有些存储引擎会产生死锁有些则不会。死锁的产生有双重原因：有些是真正的数据冲突，这种情况很难避免，有些则完全是由于存储引擎的实现方式导致的。&lt;/p&gt; 
&lt;p&gt;死锁发生之后，只有部分或者完全回滚其中一个事务，才能打破死锁。对于事务型系统这是无法避免的，所以应用程序在设计时必须考虑如何处理死锁。大多数情况下只需要重新执行因死锁回滚的事务即可。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;&lt;font&gt;P3：事务&lt;/font&gt;&lt;/h3&gt; 
&lt;p&gt;事务就是一组原子性的 SQL 查询，或者说一个独立的工作单元。如果数据库引擎能够成功地对数据库应用该组查询的全部语句，那么就执行该组查询。如果其中有任何一条语句因为崩溃或其他原因无法执行，那么所有的语句都不会执行。也就是说事务内的语句要么全部执行成功，要么全部执行失败。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ACID 特性&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;一个运行良好的事务处理系统必须具备 ACID 特性，实现了 ACID 的数据库需要更强的CPU处理能力、更大的内存和磁盘空间。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;p&gt;&lt;strong&gt;原子性 atomicity&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;一个事务在逻辑上是必须不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说不可能只执行其中的一部分。&lt;/p&gt; &lt;/li&gt;
 &lt;li&gt;&lt;p&gt;&lt;strong&gt;一致性 consistency&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;数据库总是从一个一致性的状态转换到另一个一致性的状态。&lt;/p&gt; &lt;/li&gt;
 &lt;li&gt;&lt;p&gt;&lt;strong&gt;隔离性 isolation&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;针对并发事务而言，隔离性就是要隔离并发运行的多个事务之间的相互影响，一般来说一个事务所做的修改在最终提交以前，对其他事务是不可见的。&lt;/p&gt; &lt;/li&gt;
 &lt;li&gt;&lt;p&gt;&lt;strong&gt;持久性 durability&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;一旦事务提交成功，其修改就会永久保存到数据库中，此时即使系统崩溃，修改的数据也不会丢失。&lt;/p&gt; &lt;/li&gt;
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;隔离级别&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 SQL 标准中定义了四种隔离级别，每一种隔离级别都规定了一个事务中所做的修改，哪些在事务内和事务间是可见的，哪些是不可见的。较低级别的隔离通常可以执行更高的并发，系统的开销也更低。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;p&gt;&lt;strong&gt;未提交读 READ UNCOMMITTED&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;在该级别事务中的修改即使没有被提交，对其他事务也是可见的。事务可以读取其他事务修改完但未提交的数据，这种问题称为脏读。这个级别还会导致不可重复读和幻读，从性能上说也没有比其他级别好很多，因此很少使用。&lt;/p&gt; &lt;/li&gt;
 &lt;li&gt;&lt;p&gt;&lt;strong&gt;提交读 READ COMMITTED&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;大多数数据库系统默认的隔离级别就是提交读，但 MySQL 不是。提交读满足了隔离性的简单定义：一个事务开始时只能&quot;看见&quot;已经提交的事务所做的修改。换句话说，一个事务从开始直到提交之前的任何修改对其他事务都是不可见的。这个级别有时也叫不可重复读，因为两次执行同样的查询可能会得到不同结果。提交读存在不可重复读和幻读的问题。&lt;/p&gt; &lt;/li&gt;
 &lt;li&gt;&lt;p&gt;&lt;strong&gt;可重复读 REPEATABLE READ&lt;/strong&gt;（MySQL默认的隔离级别）&lt;/p&gt; &lt;p&gt;可重复读解决了不可重复读的问题，该级别保证了在同一个事务中多次读取同样的记录结果是一致的。但可重复读隔离级别还是无法解决幻读的问题，所谓幻读，指的是当某个事务在读取某个范围内的记录时，会产生幻行。InnoDB 存储引擎通过多版本并发控制MVCC 解决幻读的问题。&lt;/p&gt; &lt;/li&gt;
 &lt;li&gt;&lt;p&gt;&lt;strong&gt;可串行化 SERIALIZABLE&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;该级别是最高的隔离级别，通过强制事务串行执行，避免了幻读的问题。可串行化会在读取的每一行数据上都加锁，可能导致大量的超时和锁争用的问题。实际应用中很少用到这个隔离级别，只有非常需要确保数据一致性且可以接受没有并发的情况下才考虑该级别。&lt;/p&gt; &lt;/li&gt;
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;MySQL 中的事务&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;MySQL 提供了两种事务型的存储引擎：InnoDB 和 NDB Cluster。&lt;/p&gt; 
&lt;p&gt;MySQL 事务默认采用自动提交模式，如果不是显式地开始一个事务，则每个查询都将被当作一个事务执行提交操作。在当前连接中，可以通过设置 AUTOCOMMIT 变量来启用或禁用自动提交模式。&lt;/p&gt; 
&lt;p&gt;1 或 ON 表示启用，0 或 OFF表示禁用，当禁用自动提交时，所有的查询都是在一个事务中，直到显式地执行 COMMIT 或 ROLLBACK 后该事务才会结束，同时又开始了一个新事务。修改 AUTOCOMMIT 对非事务型表，例如 MyISAM 或内存表不会有任何影响，对这类表来说没有 COMMIT 或 ROLLBACK 的概念，也可以理解为一直处于启用自动提交的模式&lt;/p&gt; 
&lt;p&gt;有一些命令在执行之前会强制执行提交当前的活动事务，例如&lt;code&gt;ALTER TABLE&lt;/code&gt;和&lt;code&gt;LOCK TABLES&lt;/code&gt;等。&lt;/p&gt; 
&lt;p&gt;MySQL能够识别所有的 4个 ANSI 隔离级别，InnoDB 引擎也支持所有隔离级别。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P4：MVCC 多版本并发控制&lt;/h3&gt; 
&lt;p&gt;可以认为 MVCC 是行级锁的一个变种，但它在很多情况下避免了加锁操作，因此开销更低。虽然实现机制有所不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。&lt;/p&gt; 
&lt;p&gt;MVCC 的实现，是通过保存数据在某个时间点的快照来实现的。也就是说不管需要执行多长时间，每个事务看到的数据都是一致的。根据事务开始的时间不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的。&lt;/p&gt; 
&lt;p&gt;不同的存储引擎的 MVCC 实现是不同的，典型的有乐观并发控制和悲观并发控制。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;InnoDB 的 MVCC 实现&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;InnoDB 的MVCC 通过在每行记录后面保存两个隐藏的列来实现，这两个列一个保存了行的创建时间，一个保存行的过期时间间。不过存储的不是实际的时间值而是系统版本号，每开始一个新的事务系统版本号都会自动递增，事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;REPEATABLE READ 级别下 MVCC 的具体实现&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;SELECT：InnoDB 会根据以下两个条件检查每行记录：&lt;/p&gt; 
 
&lt;p&gt;INSERT ：为新插入的每一行保存当前系统版本号作为行版本号。&lt;/p&gt; 
&lt;p&gt;DELETE：为删除的每一行保存当前系统版本号作为行删除标识。&lt;/p&gt; 
&lt;p&gt;UPDATE：为插入的每一行新记录保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为行删除标识。&lt;/p&gt; 
&lt;p&gt;保存这两个额外系统版本号使大多数读操作都可以不用加锁。这样设计使读数据操作简单且高效，并且能保证只会读取到符合标准的行。不足之处是每行记录都需要额外存储空间，需要做更多行检查工作以及一些额外维护工作。&lt;/p&gt; 
&lt;p&gt;MVCC 只能在 &lt;code&gt;READ COMMITTED&lt;/code&gt; 和 &lt;code&gt;REPEATABLE READ&lt;/code&gt; 两个隔离级别下工作，因为 &lt;code&gt;READ UNCOMMITTED&lt;/code&gt; 总是读取最新的数据行，而不是符合当前事务版本的数据行，而 &lt;code&gt;SERIALIZABLE&lt;/code&gt; 则会对所有读取的行都加锁。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P5：InnoDB 存储引擎&lt;/h3&gt; 
&lt;p&gt;InnoDB 是 MySQL 的默认事务型引擎，它被设计用来处理大量的短期事务。InnoDB 的性能和自动崩溃恢复特性，使得它在非事务型存储需求中也很流行，除非有特别原因否则应该优先考虑 InnoDB 引擎。&lt;/p&gt; 
&lt;p&gt;InnoDB 的数据存储在表空间中，表空间由一系列数据文件组成。MySQL4.1 后 InnoDB 可以将每个表的数据和索引放在单独的文件中。&lt;/p&gt; 
&lt;p&gt;InnoDB 采用 MVCC 来支持高并发，并且实现了四个标准的隔离级别。其默认级别是 &lt;code&gt;REPEATABLE READ&lt;/code&gt;，并且通过间隙锁策略防止幻读，间隙锁使 InnoDB 不仅仅锁定查询涉及的行，还会对索引中的间隙进行锁定防止幻行的插入。&lt;/p&gt; 
&lt;p&gt;InnoDB 表是基于聚簇索引建立的，InnoDB 的索引结构和其他存储引擎有很大不同，聚簇索引对主键查询有很高的性能，不过它的二级索引中必须包含主键列，所以如果主键很大的话其他所有索引都会很大，因此如果表上索引较多的话主键应当尽可能小。&lt;/p&gt; 
&lt;p&gt;InnoDB 的存储格式是平***立的，可以将数据和索引文件从一个平台复制到另一个平台。&lt;/p&gt; 
&lt;p&gt;InnoDB 内部做了很多优化，包括从磁盘读取数据时采用的可预测性预读，能够自动在内存中创建加速读操作的自适应哈希索引，以及能够加速插入操作的插入缓冲区等。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;选择合适的存储引擎&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;MySQL5.5 将 InnoDB 作为默认存储引擎，除非需要用到某些 InnoDB 不具备的特性，并且没有其他方法可以代替，否则都应该优先选用InnoDB。&lt;/p&gt; 
&lt;p&gt;如果应用需要事务支持，那么 InnoDB 是目前最稳定并且经过验证的选择。如果不需要事务并且主要是 SELECT 和 INSERT 操作，那么MyISAM 是不错的选择。相对而言，MyISAM 崩溃后发生损坏的概率要比 InnoDB 大很多而且恢复速度也要慢，因此即使不需要事务支持，也可以选择InnoDB。&lt;/p&gt; 
&lt;p&gt;如果可以定期地关闭服务器来执行备份，那么备份的因素可以忽略。反之如果需要在线热备份，那么 InnoDB 就是基本的要求。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P6：MyISAM 存储引擎&lt;/h3&gt; 
&lt;p&gt;在 MySQL5.1及之前，MyISAM 是默认的存储引擎，MyISAM 提供了大量的特性，包括全文索引、压缩、空间函数等，但不支持事务和行锁，最大的缺陷就是崩溃后无法安全恢复。对于只读的数据或者表比较小、可以忍受修复操作的情况仍然可以使用 MyISAM。&lt;/p&gt; 
&lt;p&gt;MyISAM 将表存储在数据文件和索引文件中，分别以 &lt;code&gt;.MYD&lt;/code&gt; 和 &lt;code&gt;.MYI&lt;/code&gt; 作为扩展名。MyISAM 表可以包含动态或者静态行，MySQL 会根据表的定义决定行格式。MyISAM 表可以存储的行记录数一般受限于可用磁盘空间或者操作系统中单个文件的最大尺寸。&lt;/p&gt; 
&lt;p&gt;MyISAM 对整张表进行加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但是在表有读取查询的同时，也支持并发往表中插入新的记录。&lt;/p&gt; 
&lt;p&gt;对于MyISAM 表，MySQL 可以手动或自动执行检查和修复操作，这里的修复和事务恢复以及崩溃恢复的概念不同。执行表的修复可能导致一些数据丢失，而且修复操作很慢。&lt;/p&gt; 
&lt;p&gt;对于 MyISAM 表，即使是 BLOB 和 TEXT 等长字段，也可以基于其前 500 个字符创建索引。MyISAM 也支持全文索引，这是一种基于分词创建的索引，可以支持复杂的查询。&lt;/p&gt; 
&lt;p&gt;创建 MyISAM 表时如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时不会立刻将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理缓冲区或关闭表的时候才会将对应的索引库写入磁盘。这种方式可以极大提升写性能，但在数据库或主机崩溃时会造成索引损坏，需要执行修复。延迟更新索引键的特性可以在全局设置也可以单个表设置。&lt;/p&gt; 
&lt;p&gt;MyISAM 设计简单，数据以紧密格式存储，所以在某些场景下性能很好。MyISAM 最典型的性能问题还是表锁问题，如果所有的查询长期处于 Locked 状态，那么原因毫无疑问就是表锁。&lt;/p&gt; 
&lt;h3&gt;P7：Memory 存储引擎&lt;/h3&gt; 
&lt;p&gt;如果需要快速访问数据，并且这些数据不会被修改，重启以后丢失也没有关系，那么使用 Memory 表是非常有用的。Memory 表至少要比 MyISAM 表快一个数量级，因为所有的数据都保存在内存中，不需要进行磁盘 IO，Memory 表的结构在重启以后还会保留，但数据会丢失。&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;Memory 表适合的场景：查找或者映射表、缓存周期性聚合数据的结果、保存&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90&quot; target=&quot;_blank&quot;&gt;数据分析&lt;/a&gt;中产生的中间数据。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;Memory 表支持哈希索引，因此查找速度极快。虽然速度很快但还是无法取代传统的基于磁盘的表，Memory 表使用表级锁，因此并发写入的性能较低。它不支持 BLOB 和 TEXT 类型的列，并且每行的长度是固定的，所以即使指定了 VARCHAR 列，实际存储时也会转换成CHAR，这可能导致部分内存的浪费。&lt;/p&gt; 
&lt;p&gt;如果 MySQL 在执行查询的过程中需要使用临时表来保持中间结果，内部使用的临时表就是 Memory 表。如果中间结果太大超出了Memory 表的限制，或者含有 BLOB 或 TEXT 字段，临时表会转换成 MyISAM 表。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P8：数据类型&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;整数类型&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;如果存储整数可以使用这几种整数类型：TINYINT、SMALLINT、MEDIUMINT、INT，BIGINT，它们分别使用8、16、24、32、64 位存储空间。&lt;/p&gt; 
&lt;p&gt;整数类型有可选的 UNSIGNED 属性，表示不允许负值，可以使整数的上限提高一倍。有符号和无符号类型使用相同的存储空间并具有相同的性能，可以根据实际情况选择合适的类型。&lt;/p&gt; 
&lt;p&gt;MySQL 可以为整数类型指定宽度，例如 INT(11)，这对大多数应用没有意义，不会限制值的范围，只是规定了 MySQL 的交互工具显示字符的个数，对于存储和计算来说 INT(1) 和 INT(11) 是相同的。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;实数类型&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;实数是带有小数部分的数字，但它们不只是为了存储小数，也可以使用 DECIMAL 存储比 BIGINT 还大的整数。MySQL既支持精确类型，也支持不精确类型。&lt;/p&gt; 
&lt;p&gt;FLOAT 和 DOUBLE 支持使用标准的浮点运算进行近似运算，DECIMAL 用于存储精确的小数。&lt;/p&gt; 
&lt;p&gt;浮点类型在存储同样范围的值时，通常比 DECIMAL 使用更少的空间。FLOAT 使用 4 字节存储，DOUBLE 占用8字节，MySQL 内部使用DOUBLE 作为内部浮点计算的类型。&lt;/p&gt; 
&lt;p&gt;因为需要额外空间和计算开销，所以应当尽量只在对小数进行精确计算时才使用 DECIMAL。在数据量较大时可以考虑 BIGINT 代替DECIMAL，将需要存储的货币单位根据小数的位数乘以相应的倍数即可。假设要存储的数据精确到万分之一分，则可以把所有金额乘以一百万将结果存储在 BIGINT 中，这样可以同时避免浮点存储计算不精确和 DECIMAL 精确计算代价高的问题。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;VARCHAR&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;VARCHAR 用于存储可变字符串，是最常见的字符串数据类型。它比定长字符串更节省空间，因为它仅使用必要的空间。VARCHAR 需要 1或 2 个额外字节记录字符串长度，如果列的最大长度不大于 255 字节则只需要1 字节。VARCHAR 不会删除末尾空格。&lt;/p&gt; 
&lt;p&gt;VARCHAR 节省了存储空间，但由于行是变长的，在 UPDATE 时可能使行变得比原来更长，这就导致需要做额外的工作。如果一个行占用的空间增长并且页内没有更多的空间可以存储，这种情况下不同存储引擎处理不同，InnoDB 会分裂页而 MyISAM 会将行拆分成不同片。&lt;/p&gt; 
&lt;p&gt;适用场景：字符串列的最大长度比平均长度大很多、列的更新很少、使用了 UTF8 这种复杂字符集，每个字符都使用不同的字节数存储。&lt;/p&gt; 
&lt;p&gt;InnoDB 可以把过长的 VARCHAR 存储为 BLOB。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;CHAR&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;CHAR 是定长的，根据定义的字符串长度分配足够的空间。CHAR 会删除末尾空格。&lt;/p&gt; 
&lt;p&gt;CHAR 适合存储很短的字符串，或所有值都接近同一个长度，例如存储密码的 MD5 值。对于经常变更的数据，CHAR 也比 VARCHAR更好，因为定长的 CHAR 不容易产生碎片。对于非常短的列，CHAR 在存储空间上也更有效率，例如用 CHAR 来存储只有 Y 和 N 的值只需要一个字节，但是 VARCHAR 需要两个字节，因为还有一个记录长度的额外字节。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;BLOB 和 TEXT 类型&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;BLOB 和TEXT 都是为了存储大数据而设计的字符串数据类型，分别采用二进制和字符串方式存储。MySQL会把每个 BLOB 和 TEXT 值当作一个独立的对象处理，存储引擎在存储时通常会做特殊处理。当值太大时，InnoDB 会使用专门的外部存储区来进行存储。BLOB 和TEXT 仅有的不同是 BLOB 存储的是二进制数据，没有&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;规则或字符集，而 TEXT 有字符集和&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;规则。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;MySQL 对 BLOB 和TEXT 列进行&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;与其他类型不同：它只对每个列最前 &lt;/span&gt;&lt;code&gt;max_sort_length&lt;/code&gt;&lt;span&gt; 字节而不是整个字符串做&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;，如果只需要&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;前面一小部分字符，则可以减小 &lt;/span&gt;&lt;code&gt;max_sort_length&lt;/code&gt;&lt;span&gt; 的配置。MySQL 不能将 BLOB 和 TEXT 列全部长度的字符串进行索引，也不能使用这些索引消除&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;DATETIME&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;这个类型能保存大范围的值，从 1001 年到 9999 年，精度为秒。它把日期和时间封装到了一个整数中，与时区无关，使用 8 字节的存储空间。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TIMESTAMP&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;它和 UNIX 时间戳相同。TIMESTAMP 只使用 4 字节的存储空间，因此它的范围比DATETIME 小得多，只能表示1970年到2038年，并且依赖于时区。通常应该选择 TIMESTAMP，因为它比 DATETIME 空间效率更高。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P9：索引的分类&lt;/h3&gt; 
&lt;p&gt;索引在也叫做键，是存储引擎用于快速找到记录的一种数据结构。索引对于良好的性能很关键，尤其是当表中数据量越来越大时，索引对性能的影响愈发重要。在数据量较小且负载较低时，不恰当的索引对性能的影响可能还不明显，但数据量逐渐增大时，性能会急剧下降。&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;索引大大减少了服务器需要扫描的数据量、可以帮助服务器避免&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;和临时表、可以将随机 IO 变成顺序 IO。但索引并不总是最好的工具，对于非常小的表，大部分情况下会采用全表扫描。对于中到大型的表，索引就非常有效。但对于特大型的表，建立和使用索引的代价也随之增长，这种情况下应该使用分区技术。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;在MySQL中，首先在索引中找到对应的值，然后根据匹配的索引记录找到对应的数据行。索引可以包括一个或多个列的值，如果索引包含多个列，那么列的顺序也十分重要，因为 MySQL 只能高效地使用索引的最左前缀列。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;B-Tree 索引&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;大多数 MySQL 引擎都支持这种索引，使用术语 B-Tree 是因为 MySQL 在 CREATE TABLE 和其他语句中也使用该关键字。不过底层的存储引擎可能使用不同的存储结构，例如 NDB 集群实际使用 T-Tree，而 InnoDB 则使用 B+Tree。&lt;/p&gt; 
&lt;p&gt;存储引擎以不同方式使用 B-Tree 索引，性能也不同。例如 MyISAM 使用前缀压缩技术使得索引更小，但 InnoDB 则按照原数据格式进行存储。再例如 MyISAM 索引通过数据的物理位置引用被索引的行，而 InnoDB 则根据主键引用被索引的行。&lt;/p&gt; 
&lt;p&gt;B-Tree 通常意味着所有的值都是按顺序存储的，并且每个叶子页到根的距离相同。B-Tree 索引能够加快访问数据的速度，因为存储引擎不再需要进行全表扫描来获取需要的数据，取而代之的是从索引的根节点开始进行搜索。根节点的槽中存放了指向子节点的指针，存储引擎根据这些指针向下层查找。通过比较节点页的值和要查找的值可以找到合适的指针进入下层子节点，这些指针实际上定义了子节点页中值的上限和下限。最终存储引擎要么找到对应的值，要么该记录不存在。叶子节点的指针指向的是被索引的数据，而不是其他的节点页。&lt;/p&gt; 
&lt;p&gt;B-Tree索引适用于全键值、键值范围或键前缀查找，其中键前缀查找只适用于最左前缀查找。索引对如下类型的查询有效：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;全值匹配：全值匹配指的是和索引中的所有列进行匹配。 &lt;/li&gt;
 &lt;li&gt;匹配最左前缀：只使用索引的第一列。 &lt;/li&gt;
 &lt;li&gt;匹配列前缀：只匹配某一列的值的开头部分。 &lt;/li&gt;
 &lt;li&gt;匹配范围值：查找某两个值之间的范围。 &lt;/li&gt;
 &lt;li&gt;精确匹配某一列并范围匹配另一列：有一列全匹配而另一列范围匹配。 &lt;/li&gt;
 &lt;li&gt;只访问索引的查询：B-Tree 通常可以支持只访问索引的查询，即查询只需要访问索引而无需访问数据行。 &lt;/li&gt;
&lt;/ul&gt; 
&lt;p&gt;&lt;span&gt;因为索引树中的节点有序，所以除了按值查找之外索引还可以用于查询中的 ORDER BY 操作。一般如果 B-Tree 可以按照某种方式查找到值，那么也可以按照这种方式&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;B-Tree索引的限制：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;如果不是按照索引的最左列开始查找，则无法使用索引。 &lt;/li&gt;
 &lt;li&gt;不能跳过索引中的列，例如索引为 (id,name,sex)，不能只使用 id 和 sex 而跳过 name。 &lt;/li&gt;
 &lt;li&gt;如果查询中有某个列的范围查询，则其右边的所有列都无法使用索引。 &lt;/li&gt;
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;哈希索引&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;哈希索引基于&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%93%88%E5%B8%8C%E8%A1%A8&quot; target=&quot;_blank&quot;&gt;哈希表&lt;/a&gt;实现，只有精确匹配索引所有列的查询才有效。对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码，哈希码是一个较小的值，并且不同键值的行计算出的哈希码也不一样。哈希索引将所有的哈希码存储在索引中，同时在&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%93%88%E5%B8%8C%E8%A1%A8&quot; target=&quot;_blank&quot;&gt;哈希表&lt;/a&gt;中保存指向每个数据行的指针。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;只有 Memory 引擎显式支持哈希索引，这也是 Memory 引擎的默认索引类型。&lt;/p&gt; 
&lt;p&gt;因为索引自身只需存储对应的哈希值，所以索引的结构十分紧凑，这让哈希索引的速度非常快，但它也有一些限制：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;哈希索引只包含哈希值和行指针而不存储字段值，所以不能使用索引中的值来避免读取行。 &lt;/li&gt;
 &lt;li&gt;&lt;span&gt;哈希索引数据并不是按照索引值顺序存储的，因此无法用于&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;。 &lt;/span&gt;&lt;/li&gt;
 &lt;li&gt;哈希索引不支持部分索引列匹配查找，因为哈希索引始终是使用索引列的全部内容来计算哈希值的。例如在数据列(a,b)上建立哈希索引，如果查询的列只有a就无法使用该索引。 &lt;/li&gt;
 &lt;li&gt;哈希索引只支持等值比较查询，不支持任何范围查询。 &lt;/li&gt;
 &lt;li&gt;&lt;span&gt;访问哈希索引的数据非常快，除非有很多哈希冲突。当出现哈希冲突时，存储引擎必须遍历&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%93%BE%E8%A1%A8&quot; target=&quot;_blank&quot;&gt;链表&lt;/a&gt;中所有的行指针，逐行进行比较直到找到所有符合条件的行。 &lt;/span&gt;&lt;/li&gt;
 &lt;li&gt;如果哈希冲突很高的话，索引维护的代价也会很高。 &lt;/li&gt;
&lt;/ul&gt; 
&lt;p&gt;自适应哈希索引是 InnoDB 引擎的一个特殊功能，当它注意到某些索引值被使用的非常频繁时，会在内存中基于 B-Tree 索引之上再创键一个哈希索引，这样就让 B-Tree 索引也具有哈希索引的一些优点，比如快速哈希查找。这是一个完全自动的内部行为，用户无法控制或配置，但如果有必要可以关闭该功能。&lt;/p&gt; 
&lt;p&gt;如果存储引擎不支持哈希索引，可以创建自定义哈希索引，在 B-Tree基础 上创建一个伪哈希索引，它使用哈希值而不是键本身进行索引查找，需要在查询的 WHERE 子句中手动指定哈希函数。当数据表非常大时，CRC32 会出现大量的哈希冲突，可以考虑自己实现 64 位哈希函数，或者使用 MD5 函数返回值的一部分作为自定义哈希函数。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;空间索引&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;MyISAM 表支持空间索引，可以用作地理数据存储。和 B-Tree 索引不同，这类索引无需前缀查询。空间索引会从所有维度来索引数据，查询时可以有效地使用任意维度来组合查询。必须使用 MySQL 的 GIS 即地理信息系统的相关函数来维护数据，但 MySQL 对 GIS 的支持并不完善，因此大部分人都不会使用这个特性。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;全文索引&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;通过数值比较、范围过滤等就可以完成绝大多数需要的查询，但如果希望通过关键字的匹配进行查询过滤，那么就需要基于相似度的查询，而不是精确的数值比较，全文索引就是为这种场景设计的。全文索引有自己独特的语法，没有索引也可以工作，如果有索引效率会更高。&lt;/p&gt; 
&lt;p&gt;全文索引可以支持各种字符内容的搜索，包括 CHAR、VARCHAR 和 TEXT 类型，也支持自然语言搜索和布尔搜索。在 MySQL 中全文索引有很多限制，例如表锁对性能的影响、数据文件的崩溃恢复等，这使得 MyISAM 的全文索引对很多应用场景并不合适。MyISAM 的全文索引作用对象是一个&quot;全文集合&quot;，可能是某个数据表的一列，也可能是多个列。具体的对某一条记录，MySQL 会将需要索引的列全部拼接成一个字符串然后进行索引。&lt;/p&gt; 
&lt;p&gt;MyISAM 的全文索引是一种特殊的 B-Tree 索引，一共有两层。第一层是所有关键字，然后对于每一个关键字的第二层，包含的是一组相关的&quot;文档指针&quot;。全文索引不会索引文档对象中的所有词语，它会根据规则过滤掉一些词语，例如停用词列表中的词都不会被索引。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;聚簇索引&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;聚簇索引并不是一种单独的索引类型，而是一种数据存储方式。InnoDB 的聚簇索引实际上在同一个结构中保存了 B-Tree 索引和数据行。当表有聚餐索引时，它的行数据实际上存放在索引的叶子页中，因为无法同时把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。&lt;/p&gt; 
&lt;p&gt;优点：① 可以把相关数据保存在一起，例如实现电子邮箱时可以根据用户 ID 聚集数据，这样只需要从磁盘读取少数数据页就能获取某个用户的全部邮件，如果没有使用聚簇索引，每封邮件可能都导致一次磁盘 IO。② 数据访问更快，聚簇索引将索引和数据保存在同一个 B-Tree 中，因此获取数据比非聚簇索引要更快。③ 使用覆盖索引扫描的查询可以直接使用页节点中的主键值。&lt;/p&gt; 
&lt;p&gt;缺点：① 聚簇索引最大限度提高了 IO 密集型应用的性能，如果数据全部在内存中将会失去优势。② 插入速度验证依赖于插入顺序，按照主键的顺序插入是加载数据到 InnoDB 引擎最快的方式。③ 更新聚簇索引列的代价很高，因为会强制每个被更新的行移动到新位置。④ 基于聚簇索引的表插入新行或主键被更新导致行移动时，可能导致页分裂，表会占用更多磁盘空间。④ 当行稀疏或由于页分裂导致数据存储不连续时，全表扫描可能很慢。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;覆盖索引&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;覆盖索引指一个索引包含或覆盖了所有需要查询的字段的值，不再需要根据索引回表查询数据。覆盖索引必须要存储索引列的值，因此 MySQL 只能使用 B-Tree 索引做覆盖索引。&lt;/p&gt; 
&lt;p&gt;优点：① 索引条目通常远小于数据行大小，可以极大减少数据访问量。② 因为索引按照列值顺序存储，所以对于 IO 密集型防伪查询回避随机从磁盘读取每一行数据的 IO 少得多。③ 由于 InnoDB 使用聚簇索引，覆盖索引对 InnoDB 很有帮助。InnoDB 的二级索引在叶子节点保存了行的主键值，如果二级主键能覆盖查询那么可以避免对主键索引的二次查询。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;&lt;font&gt;P10：索引使用原则&lt;/font&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;建立索引&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;对查询频次较高，且数据量比较大的表建立索引。索引字段的选择，最佳候选列应当从 WHERE 子句的条件中提取，如果 WHERE 子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;使用前缀索引&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;索引列开始的部分字符，索引创建后也是使用硬盘来存储的，因此短索引可以提升索引访问的 IO 效率。对于 BLOB、TEXT 或很长的 VARCHAR 列必须使用前缀索引，MySQL 不允许索引这些列的完整长度。前缀索引是一种能使索引更小更快的有效方法，但缺点是 MySQL 无法使用前缀索引做 ORDER BY 和 GROUP BY，也无法使用前缀索引做覆盖扫描。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;选择合适的索引顺序&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;当不需要考虑&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;和分组时，将选择性最高的列放在前面。索引的选择性是指不重复的索引值和数据表的记录总数之比，索引的选择性越高则查询效率越高，唯一索引的选择性是 1，因此也可以使用唯一索引提升查询效率。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;删除无用索引&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;MySQL 允许在相同列上创建多个索引，重复的索引需要单独维护，并且优化器在优化查询时也需要逐个考虑，这会影响性能。重复索引是指在相同的列上按照相同的顺序创建的相同类型的索引，应该避免创建重复索引。如果创建了索引 (A,B) 再创建索引 (A) 就是冗余索引，因为这只是前一个索引的前缀索引，对于 B-Tree 索引来说是冗余的。解决重复索引和冗余索引的方法就是删除这些索引。除了重复索引和冗余索引，可能还会有一些服务器永远不用的索引，也应该考虑删除。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;减少碎片&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;B-Tree 索引可能会碎片化，碎片化的索引可能会以很差或无序的方式存储在磁盘上，这会降低查询的效率。表的数据存储也可能碎片化，包括行碎片、行间碎片、剩余空间碎片，对于 MyISAM 这三类碎片化都有可能发生，对于 InnoDB 不会出现短小的行碎片，它会移动短小的行重写到一个片段中。可以通过执行 OPTIMIZE TABLE 或者导出再导入的方式重新整理数据，对于 MyISAM 可以通过&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;重建索引消除碎片。InnoDB 可以通过先删除再重新创建索引的方式消除索引碎片。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;索引失效情况&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;如果索引列出现了隐式类型转换，则 MySQL 不会使用索引。常见的情况是在 SQL 的 WHERE 条件中字段类型为字符串，其值为数值，如果没有加引号那么 MySQL 不会使用索引。&lt;/p&gt; 
&lt;p&gt;如果 WHERE 条件中含有 OR，除非 OR 前使用了索引列而 OR 之后是非索引列，索引会失效。&lt;/p&gt; 
&lt;p&gt;MySQL 不能在索引中执行 LIKE 操作，这是底层存储引擎 API 的限制，最左匹配的 LIKE 比较会被转换为简单的比较操作，但如果是以通配符开头的 LIKE 查询，存储引擎就无法做笔记。这种情况下 MySQL 服务器只能提取数据行的值而不是索引值来做比较。&lt;/p&gt; 
&lt;p&gt;如果查询中的列不是独立的，则 MySQL 不会使用索引。独立的列是指索引列不能是表达式的一部分，也不能是函数的参数。&lt;/p&gt; 
&lt;p&gt;对于多个范围条件查询，MySQL 无法使用第一个范围列后面的其他索引列，对于多个等值查询则没有这种限制。&lt;/p&gt; 
&lt;p&gt;如果 MySQL 判断全表扫描比使用索引查询更快，则不会使用索引。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P11：优化数据类型&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;更小的通常更好&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;一般情况下尽量使用可以正确存储数据的最小数据类型，更小的数据类型通常也更快，因为它们占用更少的磁盘、内存和 CPU 缓存。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;尽可能简单&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;简单数据类型的操作通常需要更少的 CPU 周期，例如整数比字符操作代价更低，因为字符集和校对规则使字符相比整形更复杂。应该使用 MySQL 的内建类型 date、time 和 datetime 而不是字符串来存储日期和时间，另一点是应该使用整形存储 IP 地址。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;尽量避免 NULL&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;通常情况下最好指定列为 NOT NULL，除非需要存储 NULL值。因为如果查询中包含可为 NULL 的列对 MySQL 来说更难优化，可为 NULL 的列使索引、索引统计和值比较都更复杂，并且会使用更多存储空间。当可为 NULL 的列被索引时，每个索引记录需要一个额外字节，在MyISAM 中还可能导致固定大小的索引变成可变大小的索引。&lt;/p&gt; 
&lt;p&gt;通常把可为 NULL 的列设置为 NOT NULL 带来的性能提升较小，因此调优时没必要首先查找并修改这种情况。但如果计划在列上建索引，就应该尽量避免设计成可为 NULL 的列。&lt;/p&gt; 
&lt;p&gt;在为列选择数据类型时，第一步需要确定合适的大类型：数字、字符串、时间等。下一步是选择具体类型，很多 MySQL 数据类型可以存储相同类型的数据，只是存储的长度和范围不一样，允许的精度不同或需要的物理空间不同。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P12：优化查询概述&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;优化数据访问&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;如果把查询看作一个任务，那么它由一系列子任务组成，每个子任务都会消耗一定时间。如果要优化查询，要么消除一些子任务，要么减少子任务的执行次数。查询性能低下最基本的原因是访问的数据太多，大部分性能低下的查询都可以通过减少访问的数据量进行优化。可以通过以下两个步骤分析。&lt;/p&gt; 
&lt;p&gt;是否向数据库请求了不需要的数据：有些查询会请求超过实际需要的数据，然后这些多余的数据会被应用程序丢弃，这会给 MySQL 服务器造成额外负担并增加网络开销，另外也会消耗应用服务器的 CPU 和内存资源。例如多表关联时返回全部列，取出全部列会让优化器无法完成索引覆盖扫描这类优化，还会为服务器带来额外的 IO、内存和 CPU 的消耗，因此使用 SELECT * 时需要仔细考虑是否真的需要返回全部列。再例如总是重复查询相同的数据，比较好的解决方案是初次查询时将数据缓存起来，需要的时候从缓存中取出。&lt;/p&gt; 
&lt;p&gt;MySQL 是否在扫描额外的记录：在确定查询只返回需要的数据后，应该看看查询为了返回结果是否扫描了过多的数据，最简单的三个衡量指标时响应时间、扫描的行数和返回的行数。如果发现查询需要扫描大量数据但只返回少数的行，可以使用以下手动优化：① 使用覆盖索引扫描，把所有需要用的列都放到索引中，这样存储引擎无需回表查询对应行就可以返回结果。② 改变库表结构。 ③ 重写这个复杂的查询，让 MySQL 优化器能够以更优化的方式执行这个查询。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;重构查询方式&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在优化有问题的查询时，目标应该是找到一个更优的方法获取实际需要的结果，而不一定总是需要从 MySQL 获取一模一样的结果集。&lt;/p&gt; 
&lt;p&gt;切分查询：有时候对于一个大查询可以将其切分成小查询，每个查询功能完全一样，只完成一小部分，每次只返回一小部分查询结果。例如删除旧数据，定期清除大量数据时，如果用一个大的语句一次性完成的话可能需要一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。将一个大的 DELETE 语句切分成多个较小的查询可以尽可能小地影响 MySQL 的性能，同时还可以减少MySQL 复制的延迟。&lt;/p&gt; 
&lt;p&gt;分解关联查询：很多高性能应用都会对关联查询进行分解，可以对每一个表进行单表查询，然后将结果在应用程序中进行关联。分解关联查询可以让缓存的效率更高、减少锁的竞争、提升查询效率、还可以减少冗余记录的查询。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P13：查询执行流程&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;简单来说分为五步：① &lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;发送一条查询给服务器。② 服务器先检查查询缓存，如果命中了缓存则立刻返回存储在缓存中的结果，否则进入下一阶段。③ 服务器端进行 SQL 解析、预处理，再由优化器生成对应的执行计划。④ MySQL 根据优化器生成的执行计划，调用存储引擎的 API 来执行查询。⑤ 将结果返回给&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;。 &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;查询缓存&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;在解析一个查询语句之前，如果查询缓存是打开的，那么 MySQL 会优先检查这个查询是否命中查询缓存中的数据。这个检查是通过一个对大小写敏感的哈希查找实现的。查询和缓存中的查询即使只有一个字节不同，也不会匹配缓存结果，这种情况下会进行下一个阶段的处理。如果当前的查询恰好命中了查询缓存，那么在返回查询结果之前 MySQL 会检查一次用户权限。如果权限没有问题，MySQL 会跳过其他阶段，直接从缓冲中拿到结果并返回给&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;，这种情况下查询不会被解析，不用生成执行计划，不会被执行。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;查询优化处理&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;该阶段包括多个子阶段：解析 SQL、预处理、优化 SQL 执行计划。首先 MySQL 通过关键字将 SQL 语句进行解析，并生成一颗对应的解析树，MySQL 解析器将使用 MySQL 语法规则验证和解析查询。例如它将验证是否使用了错误的关键字，或者使用关键字的顺序是否正确等。预处理器则根据一些 MySQL 规则进一步检查解析树是否合法，例如检查数据表和数据列是否存在，还会解析名字和别名看它们是否有歧义。下一步预处理器会验证权限，这一步通常很快，除非服务器上有非常多的权限配置。&lt;/p&gt; 
&lt;p&gt;语法树被认为合法后，查询优化器将其转成执行计划。一条查询可以有多种查询方式，最后都返回相同的结果，优化器的作用就是找到这其中最好的执行计划。MySQL 使用基于成本的优化器，它将尝试预测一个查询使用某种执行计划时的成本，并选择其中成本最小的一个。优化策略可以简单分为两种，一种是静态优化，可以直接对解析树分析并完成优化，不依赖于特别的数值，可以认为是一种编译时优化。另一种是动态优化，和查询的上下文有关，每次查询时都需要重新评估。&lt;/p&gt; 
&lt;p&gt;MySQL 可以处理的优化类型包括：重新定义表的关联顺序、将外连接转化成内连接、使用等价变换规则、优化 COUNT() 和 MIN() 以及 MAX() 函数、预估并转为常数表达式、覆盖索引扫描、子查询优化等。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;查询执行引擎&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在解析和优化阶段，MySQL 将生成查询对应的执行计划，MySQL 的查询执行引擎则根据这个计划来完成整个查询。执行计划是一个数据结构，而不是其他关系型数据库那样会生成对应的字节码。查询执行阶段并不复杂，MySQL 只是简单的根据执行计划给出的指令逐步执行，再根据执行计划执行的过程中，有大量操作需要通过调用存储引擎实现的接口来完成。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;返回结果给&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;查询执行的最后一个阶段是将结果返回给&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;，即使查询不需要返回结果集，MySQL 仍然会返回这个查询的一些信息，如该查询影响到的行数。如果查询可以被缓存，那么 MySQL 会在这个阶段将结果存放到查询缓冲中。MySQL 将结果集返回&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;是一个增量、逐步返回的过程，这样做的好处是服务器无需存储太多的结果，减少内存消耗，也可以让&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;第一时间获得响应结果。结果集中的每一行给都会以一个满足 MySQL &lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;/服务器通信协议的包发送，再通过 TCP 协议进行传输，在 TCP 传输过程中可能对包进行缓存然后批量传输。&lt;/span&gt;&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;&lt;font&gt;P14：优化 SQL&lt;/font&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;优化 COUNT 查询&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;COUNT 是一个特殊的函数，它可以统计某个列值的数量，在统计列值时要求列值是非空的，不会统计 NULL 值。如果在 COUNT 中指定了列或列的表达式，则统计的就是这个表达式有值的结果数，而不是 NULL。&lt;/p&gt; 
&lt;p&gt;COUNT 的另一个作用是统计结果集的行数，当 MySQL 确定括号内的表达式不可能为 NULL 时，实际上就是在统计行数。当使用 COUNT(&lt;em&gt;) 时，\&lt;/em&gt; 不会扩展成所有列，它会忽略所有的列而直接统计所有的行数。&lt;/p&gt; 
&lt;p&gt;某些业务场景并不要求完全精确的 COUNT 值，此时可以使用近似值来代替，EXPLAIN 出来的优化器估算的行数就是一个不错的近似值，因为执行 EXPLAIN 并不需要真正地执行查询。&lt;/p&gt; 
&lt;p&gt;通常来说 COUNT 都需要扫描大量的行才能获取精确的结果，因此很难优化。在 MySQL 层还能做的就只有覆盖扫描了，如果还不够就需要修改应用的架构，可以增加汇总表或者外部缓存系统。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;优化关联查询&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;确保 ON 或 USING 子句中的列上有索引，在创建索引时就要考虑到关联的顺序。&lt;/p&gt; 
&lt;p&gt;确保任何 GROUP BY 和 ORDER BY 的表达式只涉及到一个表中的列，这样 MySQL 才有可能使用索引来优化这个过程。&lt;/p&gt; 
&lt;p&gt;在 MySQL 5.5 及以下版本尽量避免子查询，可以用关联查询代替，因为执行器会先执行外部的 SQL 再执行内部的 SQL。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;优化 GROUP BY&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;如果没有通过 ORDER BY 子句显式指定要&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;的列，当查询使用 GROUP BY 子句的时候，结果***自动按照分组的字段进行&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;，如果不关心结果集的顺序，可以使用 ORDER BY NULL 禁止&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;优化 LIMIT 分页&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在偏移量非常大的时候，需要查询很多条数据再舍弃，这样的代价非常高。要优化这种查询，要么是在页面中限制分页的数量，要么是优化大偏移量的性能。最简单的办法是尽可能地使用覆盖索引扫描，而不是查询所有的列，然后根据需要做一次关联操作再返回所需的列。&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;还有一种方法是从上一次取数据的位置开始扫描，这样就可以避免使用 OFFSET。其他优化方法还包括使用预先计算的汇总表，或者关联到一个冗余表，冗余表只包含主键列和需要做&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;的数据列。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;优化 UNION 查询&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;MySQL 通过创建并填充临时表的方式来执行 UNION 查询，除非确实需要服务器消除重复的行，否则一定要使用 UNION ALL，如果没有 ALL 关键字，MySQL 会给临时表加上 DISTINCT 选项，这会导致对整个临时表的数据做唯一性检查，这样做的代价非常高。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;使用用户自定义变量&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在查询中混合使用过程化和关系化逻辑的时候，自定义变量可能会非常有用。用户自定义变量是一个用来存储内容的临时容器，在连接 MySQL 的整个过程中都存在，可以在任何可以使用表达式的地方使用自定义变量。例如可以使用变量来避免重复查询刚刚更新过的数据、统计更新和插入的数量等。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;优化 INSERT&lt;/strong&gt; &lt;/p&gt; 
&lt;p&gt;&lt;span&gt;需要对一张表插入很多行数据时，应该尽量使用一次性插入多个值的 INSERT 语句，这种方式将缩减&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;与数据库之间的连接、关闭等消耗，效率比多条插入单个值的 INSERT 语句高。也可以关闭事务的自动提交，在插入完数据后提交。当插入的数据是按主键的顺序插入时，效率更高。&lt;/span&gt;&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;P15：复制&lt;/h3&gt; 
&lt;p&gt;复制解决的基本问题是让一台服务器的数据与其他服务器保持同步，一台主库的数据可以同步到多台备库上，备库本身也可以被配置成另外一台服务器的主库。主库和备库之间可以有多种不同的组合方式。&lt;/p&gt; 
&lt;p&gt;MySQL 支持两种复制方式：基于行的复制和基于语句的复制，基于语句的复制也称为逻辑复制，从 MySQL 3.23 版本就已存在，基于行的复制方式在 5.1 版本才被加进来。这两种方式都是通过在主库上记录二进制日志、在备库重放日志的方式来实现异步的数据复制。因此同一时刻备库的数据可能与主库存在不一致，并且无法包装主备之间的延迟。&lt;/p&gt; 
&lt;p&gt;MySQL 复制大部分是向后兼容的，新版本的服务器可以作为老版本服务器的备库，但是老版本不能作为新版本服务器的备库，因为它可能无法解析新版本所用的新特性或语法，另外所使用的二进制文件格式也可能不同。&lt;/p&gt; 
&lt;p&gt;复制解决的问题：数据分布、负载均衡、备份、高可用性和故障切换、MySQL 升级测试。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;复制步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;概述：① 在主库上把数据更改记录到二进制日志中。② 备库将主库的日志复制到自己的中继日志中。 ③ 备库读取中继日志中的事件，将其重放到备库数据之上。&lt;/p&gt; 
&lt;p&gt;第一步是在主库上记录二进制日志，每次准备提交事务完成数据更新前，主库将数据更新的事件记录到二进制日志中。MySQL 会按事务提交的顺序而非每条语句的执行顺序来记录二进制日志，在记录二进制日志后，主库会告诉存储引擎可以提交事务了。&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;下一步，备库将主库的二进制日志复制到其本地的中继日志中。备库首先会启动一个工作的 IO 线程，IO 线程跟主库建立一个普通的&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AE%A2%E6%88%B7%E7%AB%AF&quot; target=&quot;_blank&quot;&gt;客户端&lt;/a&gt;连接，然后在主库上启动一个特殊的二进制转储线程，这个线程会读取主库上二进制日志中的事件。它不会对事件进行轮询。如果该线程追赶上了主库将进入睡眠状态，直到主库发送信号量通知其有新的事件产生时才会被唤醒，备库 IO 线程会将接收到的事件记录到中继日志中。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;备库的 SQL 线程执行最后一步，该线程从中继日志中读取事件并在备库执行，从而实现备库数据的更新。当 SQL 线程追赶上 IO 线程时，中继日志通常已经在系统缓存中，所以中继日志的开销很低。SQL 线程执行的时间也可以通过配置选项来决定是否写入其自己的二进制日志中。&lt;/p&gt; 
&lt;p&gt;这种复制架构实现了获取事件和重放事件的解耦，允许这两个过程异步进行，也就是说 IO 线程能够独立于 SQL 线程工作。但这种架构也限制了复制的过程，在主库上并发允许的查询在备库只能串行化执行，因为只有一个 SQL 线程来重放中继日志中的事件。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6df1e76b38cf059a44da926a6b11adf2</guid>
<title>[译] 七个改变我生活的 Git 小技巧</title>
<link>https://toutiao.io/k/kly6lxt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;Git 是当前最流行最普遍的版本控制系统之一，它被应用于私有系统和公开网站上各种各样的开发工作。不论我变得对 Git 有多熟悉，似乎总有些功能等待着被发掘。下面分享下和 Git 相关的改变我工作方式的一些小技巧。&lt;/p&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/B2EfAOZfS1iaS9dgibME2dgeAKXscn7JcaJJbPMBUMmEc4WZHpTcL9yqYTus3C9jRvy6GibnETwghlrBazkGrTj0jYsRM9AHBWI/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;300&quot;/&gt;&lt;p&gt;1、Git 中的自动纠错&lt;/p&gt;&lt;p&gt;我们每个人都不时在输入时犯拼写错误，但是如果你使能了 Git 的自动纠错功能，你就能让 Git 自动纠正一些输入错误的子命令。&lt;/p&gt;&lt;p&gt;假如你想用命令 &lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxb09d89502b7e2152&quot; data-miniprogram-path=&quot;pages/command?command=git&quot; data-miniprogram-nickname=&quot;Linux&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;git status&lt;/a&gt; 来检查状态，但是你恰巧错误地输入了 &lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxb09d89502b7e2152&quot; data-miniprogram-path=&quot;pages/command?command=git&quot; data-miniprogram-nickname=&quot;Linux&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;git stats&lt;/a&gt;。通常情况下，Git 会告诉你 ‘stats’ 不是个有效的命令：&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;$ &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; stats&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;‘&lt;/span&gt;&lt;span&gt;stats&lt;/span&gt;&lt;span&gt;’&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;not&lt;/span&gt;&lt;span&gt; a &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; command&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;See&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;‘&lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;help&lt;/span&gt;&lt;span&gt;’.&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;The&lt;/span&gt;&lt;span&gt; most similar command &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;status&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;为了避免类似情形，只需要在你的 Git 配置中使能自动纠错功能。&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;$ &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; config &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;&lt;span&gt; help&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;autocorrect &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;如果你只想对当前的仓库生效，就省略掉选项 &lt;code&gt;--global&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;这个命令会使能自动纠错功能。在相应的 &lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fgit-scm.com%2Fbook%2Fen%2Fv2%2FCustomizing-Git-Git-Configuration%23_code_help_autocorrect_code&amp;amp;title=Git%20%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;Git 官方文档&lt;/a&gt; 中可以看到这个命令的详细说明，但是试着敲一下上面的错误命令会使你对这个设置干了什么有个直观的了解：&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;$ &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; stats&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;‘&lt;/span&gt;&lt;span&gt;stats&lt;/span&gt;&lt;span&gt;’&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;not&lt;/span&gt;&lt;span&gt; a &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; command&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;See&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;‘&lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;help&lt;/span&gt;&lt;span&gt;’.&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;On&lt;/span&gt;&lt;span&gt; branch master&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;Your&lt;/span&gt;&lt;span&gt; branch &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; up to &lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;with&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;‘&lt;/span&gt;&lt;span&gt;origin&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;master&lt;/span&gt;&lt;span&gt;’.&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;nothing to commit&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; working tree clean&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;在上面的例子中，Git 直接运行了它建议命令的第一个，也就是 &lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxb09d89502b7e2152&quot; data-miniprogram-path=&quot;pages/command?command=git&quot; data-miniprogram-nickname=&quot;Linux&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;git status&lt;/a&gt;，而不是给你展示它所建议的子命令。&lt;/p&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/B2EfAOZfS1iaS9dgibME2dgeAKXscn7JcaJJbPMBUMmEc4WZHpTcL9yqYTus3C9jRvy6GibnETwghlrBazkGrTj0jYsRM9AHBWI/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;300&quot;/&gt;&lt;p&gt;2、对提交进行计数&lt;/p&gt;&lt;p&gt;需要对提交进行计数的原因有很多。例如，一些开发人员利用提交计数来判断什么时候递增工程构建序号，也有一些开发人员用提交计数来对项目进展取得一个整体上的感观。&lt;/p&gt;&lt;p&gt;对提交进行计数相当简单而且直接，下面就是相应的 Git 命令：&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;$ &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; rev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;count branch&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;在上述命令中，参数 &lt;code&gt;branch-name&lt;/code&gt; 必须是一个你当前仓库里的有效分支名。&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;$ &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; rev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;–&lt;/span&gt;&lt;span&gt;count master&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;32&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;$ &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; rev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;–&lt;/span&gt;&lt;span&gt;count dev&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;34&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/B2EfAOZfS1iaS9dgibME2dgeAKXscn7JcaJJbPMBUMmEc4WZHpTcL9yqYTus3C9jRvy6GibnETwghlrBazkGrTj0jYsRM9AHBWI/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;300&quot;/&gt;&lt;p&gt;3、仓库优化&lt;/p&gt;&lt;p&gt;你的代码仓库不仅对你来说很宝贵，对你所在的组织也一样。通过少数几个惯例你就能使自己的仓库整洁并且保持最新。&lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fopensource.com%2Farticle%2F20%2F8%2Fdont-ignore-gitignore&amp;amp;title=%E4%BD%BF%E7%94%A8%20.gitignore%20%E6%96%87%E4%BB%B6&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;使用 .gitignore 文件&lt;/a&gt; 就是这些最好的惯例之一。通过使用这个文件你可以告诉 Git 不要保存一些不需要记录的文件，如二进制文件、临时文件等等。&lt;/p&gt;&lt;p&gt;当然，你还可以使用 Git 的垃圾回收来进一步优化你的仓库。&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;$ &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; gc &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;prune&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;now &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;aggressive&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;这个命令在你和你的团队经常使用 &lt;code&gt;pull&lt;/code&gt; 或者 &lt;code&gt;push&lt;/code&gt; 操作的时候很有帮助。&lt;/p&gt;&lt;p&gt;它是一个内部工具，能清理掉你的仓库里没法访问或者说“空悬”的 Git 对象。&lt;/p&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/B2EfAOZfS1iaS9dgibME2dgeAKXscn7JcaJJbPMBUMmEc4WZHpTcL9yqYTus3C9jRvy6GibnETwghlrBazkGrTj0jYsRM9AHBWI/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;300&quot;/&gt;&lt;p&gt;4、给未追踪的文件来个备份&lt;/p&gt;&lt;p&gt;大多数时候，删除所有未追踪的文件是安全的。但很多时候也有这么一种场景，你想删掉这些未追踪的文件同时也想做个备份防止以后需要用到。&lt;/p&gt;&lt;p&gt;Git 组合一些 Bash 命令和管道操作，可以让你可以很容易地给那些未追踪的文件创建 zip 压缩包。&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;$ &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ls&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;files &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;others &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;exclude&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;standard &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;z &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;\&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;xargs&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;tar&lt;/span&gt;&lt;span&gt; rvf &lt;/span&gt;&lt;span&gt;~/&lt;/span&gt;&lt;span&gt;backup&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;untracked&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;zip&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;上面的命令就生成了一个名字为 &lt;code&gt;backup-untracked.zip&lt;/code&gt; 的压缩包文件（当然，在 &lt;code&gt;.gitignore&lt;/code&gt; 里面忽略了的文件不会包含在内）。&lt;/p&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/B2EfAOZfS1iaS9dgibME2dgeAKXscn7JcaJJbPMBUMmEc4WZHpTcL9yqYTus3C9jRvy6GibnETwghlrBazkGrTj0jYsRM9AHBWI/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;300&quot;/&gt;&lt;p&gt;5、了解你的 .git 文件夹&lt;/p&gt;&lt;p&gt;每个仓库都有一个 &lt;code&gt;.git&lt;/code&gt; 文件夹，它是一个特殊的隐藏文件夹。&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;$ &lt;/span&gt;&lt;span&gt;ls&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;…&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;Git 主要通过两个东西来工作：&lt;/p&gt;&lt;section&gt;&lt;section&gt;1. 当前工作树（你当前检出的文件状态）&lt;/section&gt;&lt;section&gt;2. 你的 Git 仓库的文件夹（准确地说，包含版本信息的 &lt;code&gt;.git&lt;/code&gt; 文件夹的位置）&lt;/section&gt;&lt;/section&gt;&lt;p&gt;这个文件夹存储了所有参考信息和一些其他的如配置、仓库数据、HEAD 状态、日志等更多诸如此类的重要细节。&lt;/p&gt;&lt;p&gt;一旦你删除了这个文件夹，尽管你的源码没被删，但是类似你的工程历史记录等远程信息就没有了。删除这个文件夹意味着你的工程（至少本地的复制）不再在版本控制的范畴之内了。这也就意味着你没法追踪你的修改；你没法从远程仓拉取或推送到远程仓了。&lt;/p&gt;&lt;p&gt;通常而言，你需要或者应当对你的 &lt;code&gt;.git&lt;/code&gt; 文件夹的操作并不多。它是被 Git 管理的，而且大多数时候是一个禁区。然而，在这个文件夹内还是有一些有趣的工件，比如说当前的 HEAD 状态在内的就在其中。&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;$ &lt;/span&gt;&lt;span&gt;cat&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;HEAD&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; refs&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;heads&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;master&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;它也隐含着对你仓库地描述：&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;$ &lt;/span&gt;&lt;span&gt;cat&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;这是一个未命名的仓库；通过编辑文件 ‘description’ 可以给这个仓库命名。&lt;/p&gt;&lt;p&gt;Git 钩子文件夹连同一些钩子文件例子也在这里。参考这些例子你就能知道 Git 钩子能干什么了。当然，你也可以 &lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fopensource.com%2Flife%2F16%2F8%2Fhow-construct-your-own-git-server-part-6&amp;amp;title=%E5%8F%82%E8%80%83%E8%BF%99%E4%B8%AA%20Seth%20Kenlon%20%E5%86%99%E7%9A%84%20Git%20%E9%92%A9%E5%AD%90%E4%BB%8B%E7%BB%8D&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;参考这个 Seth Kenlon 写的 Git 钩子介绍&lt;/a&gt;。&lt;/p&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/B2EfAOZfS1iaS9dgibME2dgeAKXscn7JcaJJbPMBUMmEc4WZHpTcL9yqYTus3C9jRvy6GibnETwghlrBazkGrTj0jYsRM9AHBWI/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;300&quot;/&gt;&lt;p&gt;6、浏览另一个分支的文件&lt;/p&gt;&lt;p&gt;有时，你会想要浏览另一个分支下某个文件的内容。这其实用一个简单的 Git 命令就可以实现，甚至都不用切换分支。&lt;/p&gt;&lt;p&gt;设想你有一个命名为 &lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=http%3A%2F%2FREADME.md&amp;amp;title=README.md&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;README.md&lt;/a&gt; 的文件，并且它在 &lt;code&gt;main&lt;/code&gt; 分支上。当前你正工作在一个名为 &lt;code&gt;dev&lt;/code&gt; 的分支。&lt;/p&gt;&lt;p&gt;用下面的 Git 命令，在终端上就行。&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;$ &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; show main&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;README&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;md&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;一旦你执行这个命令，你就能在你的终端上看到 &lt;code&gt;main&lt;/code&gt; 分支上该文件的内容。&lt;/p&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/B2EfAOZfS1iaS9dgibME2dgeAKXscn7JcaJJbPMBUMmEc4WZHpTcL9yqYTus3C9jRvy6GibnETwghlrBazkGrTj0jYsRM9AHBWI/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;300&quot;/&gt;&lt;p&gt;7、Git 中的搜索&lt;/p&gt;&lt;p&gt;用一个简单的命令你就能在 Git 中像专业人士一样搜索了。更有甚者，尽管你不确定你的修改在哪次提交或者哪个分支上，你依然能搜索。&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;$ &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; rev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;all &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;xargs&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;grep&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;F &lt;/span&gt;&lt;span&gt;&#x27;&#x27;&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;例如，假设你想在你的仓库中搜索字符串 &lt;code&gt;“font-size: 52 px;&quot;&lt;/code&gt; ：&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;$ &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; rev&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;–&lt;/span&gt;&lt;span&gt;all &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;xargs&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;git&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;grep&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;F &lt;/span&gt;&lt;span&gt;‘&lt;/span&gt;&lt;span&gt;font&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;52&lt;/span&gt;&lt;span&gt; px&lt;/span&gt;&lt;span&gt;;’&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;F3022&lt;/span&gt;&lt;span&gt;…&lt;/span&gt;&lt;span&gt;9e12&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;HtmlTemplate&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;css&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; font&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;52&lt;/span&gt;&lt;span&gt; px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;E9211&lt;/span&gt;&lt;span&gt;…&lt;/span&gt;&lt;span&gt;8244&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;RR&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Web&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;Content&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;css&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; font&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;52&lt;/span&gt;&lt;span&gt; px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/B2EfAOZfS1iaS9dgibME2dgeAKXscn7JcaJJbPMBUMmEc4WZHpTcL9yqYTus3C9jRvy6GibnETwghlrBazkGrTj0jYsRM9AHBWI/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;300&quot;/&gt;&lt;p&gt;试试这些小技巧&lt;/p&gt;&lt;p&gt;我希望这些小技巧对你是有用的，或者增加你的生产力或者节省你的大量时间。&lt;/p&gt;&lt;p&gt;你也有一些喜欢的 &lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Facompiler.com%2Fgit-tips%2F&amp;amp;title=Git%20%E6%8A%80%E5%B7%A7&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;Git 技巧&lt;/a&gt; 吗？在评论区分享吧。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;via: &lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fopensource.com%2Farticle%2F20%2F10%2Fadvanced-git-tips&amp;amp;title=https%3A%2F%2Fopensource.com%2Farticle%2F20%2F10%2Fadvanced-git-tips&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;https://opensource.com/article/20/10/advanced-git-tips&lt;/a&gt;&lt;/p&gt;&lt;p&gt;作者：&lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fopensource.com%2Fusers%2Facompiler&amp;amp;title=Rajeev%20Bera&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;Rajeev Bera&lt;/a&gt; 选题：&lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fgithub.com%2Flujun9972&amp;amp;title=lujun9972&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;lujun9972&lt;/a&gt; 译者：&lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fgithub.com%2FBoosterY&amp;amp;title=BoosterY&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;BoosterY&lt;/a&gt; 校对：&lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fgithub.com%2Fwxy&amp;amp;title=wxy&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;wxy&lt;/a&gt;&lt;/p&gt;&lt;p&gt;本文由 &lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fgithub.com%2FLCTT%2FTranslateProject&amp;amp;title=LCTT&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;LCTT&lt;/a&gt; 原创编译，&lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Flinux.cn%2F&amp;amp;title=Linux%E4%B8%AD%E5%9B%BD&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;Linux中国&lt;/a&gt; 荣誉推出&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MjM5NjQ4MjYwMQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/W9DqKgFsc6ibPlQXlgCmnlaz6glKp60FFhghXwSx3k5JVavk34FiaMu4ztUTl2Fib0DCUqSkRCvoWPDNczKzFefIg/0?wx_fmt=png&quot; data-nickname=&quot;Linux中国&quot; data-alias=&quot;linux-cn&quot; data-signature=&quot;[Linux中国](https://linux.cn/)开源社区官方公众号。专注于开源技术研究、开源思想传播。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/B2EfAOZfS1iaS9dgibME2dgeAKXscn7JcaSlibdzBCLU0WhPzcyiaM881yKtHiaAfwsbKAVJWfCT9ycWraQiazdMxjianJEVSm5vb1m/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;512&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;欢迎遵照 CC-BY-NC-SA 协议规定转载，&lt;/section&gt;&lt;section&gt;如需转载，请在文章下留言 “&lt;span&gt;转载：公众号名称&lt;/span&gt;”，&lt;/section&gt;&lt;section&gt;我们将为您添加白名单，授权“&lt;span&gt;转载文章时可以修改&lt;/span&gt;”。&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>560a8c7b8dd32a460106284d3ab0f6cc</guid>
<title>神秘的 “无服务器” 架构，怎么秃然火了？</title>
<link>https://toutiao.io/k/eb1fjk4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;如果问云计算有哪些很火技术趋势，那么“&lt;span&gt;&lt;strong&gt;无服务器&lt;/strong&gt;&lt;/span&gt;”&lt;span&gt;&lt;strong&gt;架构&lt;/strong&gt;&lt;/span&gt;必属其一。但这个词儿很多人乍听都会一脸“懵逼”…&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7076659038901602&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/pEeuqRbicF57FKz7hY2fwjxBFqPb1Qo2jxl5mUOuQpQSMBO9v9zy9ctkEicaReyyHtAzRSFOZxicT4W1LgpTsAibxw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1748&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;今天，我们把这项神秘的技术，聊深、聊透~~&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.0423076923076924&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF55DSl2VToDyTW1q6kr44pX5BOe78OdDMZTN97KLXfPibhxcXibQssicmdSu07yHD2PYuYClXGp8ib22kA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;780&quot;/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;到底什么是“无服务器”架构？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;“无服务器”架构&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，又称为“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”，但它并非&lt;/span&gt;&lt;span&gt;&lt;strong&gt;没有&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;服务器，确切地说，根本&lt;/span&gt;&lt;strong&gt;&lt;span&gt;离不开&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;服务器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;只是，这种架构可以让使用者，不必再关注“服务器”：&lt;span&gt;&lt;em&gt;❶ 用了多少服务器 ❷ 用了什么样的服务器 ❸ 如何配置和管理这些服务器…&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用者只需要关注&lt;span&gt;&lt;strong&gt;业务逻辑&lt;/strong&gt;&lt;/span&gt;、关注&lt;strong&gt;&lt;span&gt;代码本身&lt;/span&gt;&lt;/strong&gt;，其它的事情，统统由“云老母亲”搞定！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8148148148148148&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57FKz7hY2fwjxBFqPb1Qo2j0psBOzXsHH8v2MfnYUM8EgEpoGxYz31utAalnCsc4f9RzTLBAIDNNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;这，是“无服务器”架构的初衷，也代表了云计算“进化”的最新方向。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从集中式、本地化部署的传统数据中心，到以服务器虚拟化为标志的IaaS服务，再到容器和K8S引领的云原生架构，云厂商们用“&lt;/span&gt;&lt;strong&gt;&lt;span&gt;保姆式&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;”的托管服务，把用户从IT基础设施的部署和运维中逐步“&lt;/span&gt;&lt;strong&gt;&lt;span&gt;解放&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;”出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0145719489981786&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57FKz7hY2fwjxBFqPb1Qo2jRQWRGzhQLib3Rzjkc4gibcLib1yxJKnZVBfHpwmSdZwm4WecAibFYy6PeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1098&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;而“无服务器”架构，更是几乎做到了“&lt;span&gt;&lt;strong&gt;彻底解放&lt;/strong&gt;&lt;/span&gt;”，用户只需要关注代码和业务流程，其它的统统不用管！（&lt;strong&gt;&lt;span&gt;哦，不对，还要管付费&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57ywbne77dibCtnDf86aiagEUQGJibTALguHfjbiaFic46P9Y0kFFsuXv4Fl1ZkE52eH7rCw2snZf6eTSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;~&lt;/span&gt;&lt;/strong&gt;）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;但典型Serverless服务的收费方式，跟我们以前可大不一样！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从前，租个虚机或者搭个K8S容器集群，不管你用不用，不管你系统开销是100%还是1%，只要租了，就要掏钱（关了机也得收钱&lt;/span&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2Q5M8fwbZb2icWEMibJKe6ecibicwWa0iasCSJCs45e3OxfzmQFFpstHYAng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6208112874779541&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2SzTWjtiaxn3icibXmxJTNQBHia3jLthw73mUVkJHYKS30s0YRJgwXFYYwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而“无服务器”架构，则采用“事件触发”的方式，来调用服务。你有活儿的时候，让工头（比如API网关）喊它过来搬砖，一堆砖搬完用了几次，那就按次数给工钱。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.138095238095238&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2nB5mcDLiaWSUwibxI7L158I15bZBQJUeLcQrgicmbqXcun8IzjQPy1I5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;840&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Serverless服务在搬砖的时候，会不会摸鱼怠工呢？&lt;span&gt;完全不用担心！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Serverless一个更重要的特征，就是“快”&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;——&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5595667870036101&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2MBZdssneE5Pvg0cqVjTzI1wicWK511GzQMVSf8mVDUtyQGQnNdxdplw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1108&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;跟前辈们相比，Serverless玩的就是极致弹性，前所未有滴“快”：&lt;strong&gt;&lt;span&gt;服务加载，毫秒级！运行周期，秒级！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;你还没看清怎么回事，人家已经“嗖嗖嗖”把砖都搬完了。&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2fduxHYDHj4ZfzJPq5fhjOp9mnU8Ep1MoLo09pSpmib6PyA8dQR62sfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7125220458553791&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2UbVibYL2WSU6Ix5fwmSPhNEDl20ooGKK35ia8W7nhcRy0IqzcEpDiaU2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但有人会担心，砖堆太大，一次搬不完，要是搬个成千上万次，岂不亏大了？还不如雇个云主机“长工”划算，毕竟能保底啊。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;好像有点儿道理，但这种思维惯性明显不符合「&lt;strong&gt;&lt;span&gt;现代云计算&lt;/span&gt;&lt;/strong&gt;」的趋势，越是云资源用量大的客户、越是深度实践云计算的客户，越强调对云资源的极致调度，&lt;strong&gt;&lt;span&gt;绝不多用，绝不滥用&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;而成熟的云服务公司，在这方面跟客户的追求是一致的，比如像亚马逊等云大厂，他们的销售和云架构师，都千方百计地想着帮用户省钱，而不是忽悠客户多买点云资源。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7865961199294532&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2wuEGLhicXpjkaXg98Z9YV1htdy6RwhaywaMkvJbSjMmnzcnxbSdvwvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;落实到产品设计上，也是如此，Serverless服务比容器更加“呼之则来挥之则去”，在计费上也更加科学，一分钱都不让你多花。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;比如&lt;strong&gt;&lt;span&gt;Amazon Lambda&lt;/span&gt;&lt;/strong&gt;函数计算服务的定价策略，&lt;strong&gt;&lt;span&gt;每月前100万次调用，免费！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;同时，根据内存占用的不同，会将这种函数计算服务的搬砖能力，分为三六九等，用户评估一下自己的“砖垛”，雇不同档次的人来搬就行了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.818342151675485&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2lP7hDsJJNl7JKoChiclqTh7vhTqyficDicHaoAO0Mq5Ly3uBWj6icTYvUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;干完活，算工钱的时候，总共搬了多少次，是一笔钱，用了多大的内存+累计多少秒，再算一笔钱。两笔钱相加，就是最后的账单。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;前面我们说过，Amazon Lambda每月前100万次调用免费，同时，每月40万GB*秒的时长，也免费。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;这就意味着，对于很多低频业务来说，你可以完全“白嫖”了！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7654320987654321&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2VFS2Cj2ScsbQwYu9YTYicqia9LSYrRj4agXr4OSWHvL93WvaxftPwsUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然，你有巨量搬砖需求也不用怕，举个例子，你“雇佣”了一个128M内存的Lambda函数，每月运行3000万次，每次运行200毫秒，一个月下来要花多少钱呢？11块6毛3（美金）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;而且，这些钱是为你真正使用的资源在买单，&lt;span&gt;&lt;strong&gt;一分冤枉钱都没花&lt;/strong&gt;&lt;/span&gt;！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.0371794871794873&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF55DSl2VToDyTW1q6kr44pX5icAcWx2R01DEROXcRiaPzSarIEBoEqjnAZ2ytzRqCnoVYWX07Mz13ibMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;780&quot;/&gt;  &lt;span&gt;&lt;strong&gt;无服务器架构，都包含什么产品形态？&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;由于Serverless的概念还比较新，所以具体涵盖的范畴，还有很多争议。&lt;/span&gt;&lt;span&gt;很多人认为，Serverless等同于FaaS——Function as a Service，也就是函数计算。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Amazon Lambd&lt;/span&gt;&lt;span&gt;a、Azure Functions、Google Functions &lt;/span&gt;&lt;span&gt;都是&lt;/span&gt;&lt;span&gt;典型的函数计算服务，有点像我们以前学编程时用的&lt;/span&gt;&lt;span&gt;&lt;strong&gt;函数&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，我们把代码写到里面，平常放在那里备着，调用的时候，传递个参数进去，就给你返回计算结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0246913580246915&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2hbGcibpaxoO53e2HmHk72kEnwDzK9DVXl3JgpFFIIO2iaJupWVUuepibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;本质上讲，函数计算（FaaS）其实只是计算资源的“无服务器化”交付，并不能代表Serverless架构的全部。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果你看公有云市场老大“亚马逊”的产品架构，就会发现，它家的Serverless产品非常丰富，除函数计算Lambda外，还包括消息服务、身份认证、数据库…，甚至还包括了著名的对象存储S3。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.088183421516755&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2EribadjfdeZ1QQgSvX5ibIrlwGDPhmDPk8qzRIQhfiafDleymq9d7mUbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以，我们可以这样理解Serverless的范畴：&lt;span&gt;&lt;strong&gt;它应该包含FaaS+BaaS，其中负责计算的FaaS是核心。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;围绕FaaS函数计算，还需要一系列配套的后端服务（消息推送、数据存储与分析、身份管理、监控与同步…等等），&lt;strong&gt;&lt;span&gt;也就是BaaS——Backend as a Service&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8130511463844797&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2tTqZ1OqJ7xelNfdIicSPySldybkabC9TiaM5pJNmxWoK2eiaELTPFL1NQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;再引申总结下，云上所有&lt;strong&gt;&lt;span&gt;全托管的、无缝扩展的&lt;/span&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;span&gt;基于事件触发和API调用&lt;/span&gt;&lt;/strong&gt;的服务，都可以算作是“无服务器”架构 。按照这个定义，你会发现，Amazon S3对象存储完美符合&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57ywbne77dibCtnDf86aiagEUzvClPWKOZvKWzFrViaZAM39icLMXAgr4ubgcJJ811u50VcXPwLprlCLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;再比如云数据库，我们通常都把云数据库，归入到PaaS的范畴，但&lt;span&gt;&lt;strong&gt;Amazon DynamoDB&lt;/strong&gt;&lt;/span&gt;是个另类——&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8342151675485009&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2VribQqNeaJCq1d7474sCsciamhVnGMWySlRhI9Javvz0ib99HcibBJXpcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Amazon DynamoDB&lt;/strong&gt; 完全托管、无缝扩展。容量有多大？根本摸不到底&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd20nnpzIQ5DuIZVOiaoYKQHWFhlBJTTmJDJibNewUgcylFQ40BZXAMoLAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;，吞吐量支持使用者任意设定，数据的查询和写入全部通过API来完成。所以，它划入了Serverless的行列&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2fduxHYDHj4ZfzJPq5fhjOp9mnU8Ep1MoLo09pSpmib6PyA8dQR62sfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;看到这里，有些同学可能冒出个想法来：这Serverless怎么看着有点像PaaS呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7170138888888888&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2TXHUtp4ouNBVzzdxnVOwcPd3sibfqPZzSlY6Lj0hTvptOFVm97DM7vQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;576&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;关于这个问题，我想引用亚马逊云架构战略副总裁Adrian Cockcroft的一句话：“&lt;span&gt;&lt;em&gt;&lt;strong&gt;如果你的PaaS能够有效地在&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;20毫秒&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;内启动实例并只运行&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;半秒&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;，那么就可以称之为Serverless&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;说白了，Serverless还是&lt;span&gt;&lt;strong&gt;强调极致的“弹性”&lt;/strong&gt;&lt;/span&gt;，细如发丝的颗粒度和摸不到天花板的扩展上限！&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd28everBbKH6yN4nHN7NlgQicnT9TjwN9WdBOibVCHLraCHb8AobJBNE8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;因此，在“无服务器”&lt;span&gt;架构&lt;/span&gt;的大趋势下，我们再搞web建站，就不应该是“租台云主机、搭个LAMP架构”的常规思路了，而是要与时俱进，尝试一下“现代应用开发”新套路。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6031746031746031&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57ywbne77dibCtnDf86aiagEUNtnhPyYCkWsLnkc0dZ0XOGuGZZEA4EbGyV2cfwPABoysXS6ibO1Tmmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;尝完你会发现，搭建了一个庞大的网站，后台竟然不再需要一台&lt;span&gt;&lt;strong&gt;web服务器&lt;/strong&gt;&lt;/span&gt;…，惊不惊喜，意不意外？&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2Q5M8fwbZb2icWEMibJKe6ecibicwWa0iasCSJCs45e3OxfzmQFFpstHYAng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;下面呢，我们就用Amazon Web Services来举例，看看各种Serverless组件是如何配合，来支撑一个“现代应用”。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6243386243386243&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2SpeJl8uLE6ddSQhJia1bGjnCWEhFHTvQLkQgsz6IsDZm8sibUaibPCXEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;图片来源：www.guru99.com&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;①首先，把程序代码上传到Lambda里，Lambda几乎支持所有的主流开发语言，Java、Python、Go、C#什么的。代码囤在里面，但此时不需要付费。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;②下面这些五花八门的服务（应用网关、存储/分析、消息服务等），会响应你的各种需求，并“唤醒Lambda干活”，比如API Gateway会响应APP客户端的访问要求，进而去触发Lambda。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;③Lambda收好代码，整装待发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;④收到“唤醒”（trigger）需求后，Lambda开始“搬砖”，此时它也会通过API跟下面其他服务互动，比如从S3读写数据，从DynamoDB查询数据……&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;⑤“搬完砖”才找你收钱，不搬不要钱。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;咋样？这种“&lt;span&gt;&lt;strong&gt;静如处子动如脱兔&lt;/strong&gt;&lt;/span&gt;”的体验，是不是很棒&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2HgBGLiadVBYicAEQXxzGMGgfQQZ7z3UhNOic78wiaoVt0frhQiaN3dSxs5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.0384615384615385&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF55DSl2VToDyTW1q6kr44pX5wRzHOfKZWGJcmBFicaTn0A7oesOcfYVibj1wL62YrQ2XibaVRKIDezOicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;780&quot;/&gt; &lt;span&gt;&lt;strong&gt;“无服务器”架构无所不能吗？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;就像我们前面“安利”的那样，Serverless架构“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;成本低、弹性高、0运维&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”，是云原生时代的“大杀器”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但Serverless架构也&lt;span&gt;&lt;strong&gt;并非无所不能&lt;/strong&gt;&lt;/span&gt;，我们不妨先来看看它最适合干什么？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;负载波动大&lt;/strong&gt;&lt;/span&gt;、&lt;strong&gt;&lt;span&gt;平均利用率低&lt;/span&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;span&gt;业务逻辑和工作流程复杂&lt;/span&gt;&lt;/strong&gt;的场景，都非常适合用Serverless架构。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6948853615520282&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57ywbne77dibCtnDf86aiagEUwTlWKhiaN0X6uKYjUSmiabSUttVWyJUiaXHQHBTObJeOBiapWMCZCZ9efQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6931216931216931&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57ywbne77dibCtnDf86aiagEUTrtiaLibxFXzicVouZ0LRyB9H5B1neEzWtw6ia1PXp5NGMPtaUXhXJ9Vbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6878306878306878&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57ywbne77dibCtnDf86aiagEUZKvj4HbYggrkClV1gSYiblJnBNXQVxbgLCzzwHvaRiaDJcaunrpdKw5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;比如说，&lt;span&gt;&lt;strong&gt;IoT业务&lt;/strong&gt;&lt;/span&gt;，大部分时刻，都是“低频请求”，如果全天候“支棱”着一台服务器，守在那里，实在是暴殄天物。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8800705467372134&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57ywbne77dibCtnDf86aiagEUqfLwyvqZsw0eE8TbSFW9R7rw6b86ria612l36nJRLiaGh2vibxmaP88fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;此时如果使用“无服务器”架构，平常不占任何算力资源，有业务请求的时候，立刻触发一个“函数计算”任务，干完活，瞬间释放掉。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当“低频”突然变“高频”，也完全没问题，毫秒级拉起一堆兄弟来干活，即便海量的IoT终端一起来“挤兑”，那都不是事儿，比虚机、容器的AutoScaling更快。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;同理，对于一些&lt;strong&gt;&lt;span&gt;流量突发型的互联网业务&lt;/span&gt;&lt;/strong&gt;，比如电商秒杀，用Serverless架构来实现，是最科学的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7954144620811288&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57ywbne77dibCtnDf86aiagEUBiafoYnPLZSxrPbAx1bXMfrE65p5kKrSmgwsCOufHseR8YWVy48C7Wg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是，有一类场景，就不太适合使用函数计算：那就是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;在线直播类&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;的业务，需要保持一个长连接，持续时间可能长达几个小时。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;以Amazon Lambda函数计算为例，每个“计算”任务的最长生存期是15分钟，（15分钟都还没干完，您可以考虑用容器或VM了），所以，就不适合承载这样的业务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9982363315696648&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57ywbne77dibCtnDf86aiagEUau6xz6icnCPVAQwFegNOp7lpIkDmMYrFKkE76asRY1mPTwFfiazdWNVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然，&lt;strong&gt;&lt;span&gt;函数计算不合适，并不代表其它Serverless都不合适&lt;/span&gt;&lt;/strong&gt;，这种场景，可以使用AWS Batch或者Fargate创建Serverless容器来运行，时间就没有限制了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总结一句话，&lt;span&gt;&lt;strong&gt;Serverless虽好，但也不要中毒太深、非Serverless不用&lt;/strong&gt;&lt;/span&gt;。在实际生产环境，可以多种架构混搭，各取所长。弹性、突发的任务，交给“&lt;span&gt;&lt;strong&gt;无服务器&lt;/strong&gt;&lt;/span&gt;”架构，恒定的重体力劳动，交给“&lt;strong&gt;&lt;span&gt;有服务器&lt;/span&gt;&lt;/strong&gt;“架构。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.0423076923076924&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF55DSl2VToDyTW1q6kr44pX5J5qfBQmyE2tY3pqSf45gTwXafntwjhEcUZJ97XNLZTALXBWLeVx9TQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;780&quot;/&gt;&lt;span&gt; &lt;strong&gt;“无服务器架构”哪家强？&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Serverless哪家强？那当然是亚马逊“灯塔云”呀&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF54ZQjXQrjzov7XbA7zTYfd2jXBgcHwAGuvibg1e47Jia7PtMAMfO1lLv1VGcm60FUrWmX9NKHDFGEsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;首先，&lt;span&gt;Serverless不止是一种计算服务，更是一种架构，除Lambda函数计算外，“灯塔云”提供了全栈式的Serverless服务，帮助上云企业快速构建动态水平更高的应用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;计算：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;Lambda、Fargate…&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;数据库：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;DynamoDB、Aurora Serverless…&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;存储与数据处理：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;S3、&lt;span&gt;Athena、Kinesis、Glue…&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;消息：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;SQS、SNS…&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;应用集成：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;API Gateway、AppSync…&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;管理与工具：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;IAM、SSO、CloudTrail…&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;亚马逊自身就是“无服务器架构”的深度实践者，早在2014年就随着Amazon Lambda的推出，提出了“无服务器”的概念，目前他们正在朝着“&lt;/span&gt;&lt;strong&gt;&lt;span&gt;全面普及无服务器模式&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;”努力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如今，无服务器架构的招牌式产品“Lambda”，已经走过了&lt;/span&gt;&lt;strong&gt;&lt;span&gt;7个年头&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，来看一个统计数据，就知道它有多火。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6137566137566137&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57ywbne77dibCtnDf86aiagEUdViapHqoLhjadKkiajkVPuFmhQ5A9ISOVAar30FIMQIhnUfx6ZBUAp3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;增长的背后，是大量企业开始将核心业务“无服务器化”改造，很多客户日均各函数运行总时长达到900个小时。（&lt;em&gt;而且，没有1分钟、没有1丁点儿资源是在摸鱼哦&lt;/em&gt;）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;至于深度使用亚马逊“无服务器”架构的客户，就更多了，无法一一列举，索性我就晒个Logo墙吧&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57ywbne77dibCtnDf86aiagEUJxMvvnTmojib2sWrkDmqSibMald5mWP1PFCcu4MvmAjmDgFmbXcIUauQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8659611992945326&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57ywbne77dibCtnDf86aiagEUPjKHsicYYPT84BCq4oZVTwI6tB6cLrsBE17FOKJFkMmaakHjzudELXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;“灯塔云”在无服务器架构上的统治力，不止体现在&lt;span&gt;&lt;strong&gt;服务全、实践深、客户多&lt;/strong&gt;&lt;/span&gt;等层面，在打消开发者顾虑、帮助用户填坑方面，也操碎了心。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;比如，有开发者担心学习成本高，而Lambda就索性一股脑支持了&lt;strong&gt;&lt;span&gt;几乎所有的流行语言&lt;/span&gt;&lt;/strong&gt;；有客户担心Serverless不好移植，会被锁定，亚马逊就打通了一大票可移植的&lt;strong&gt;&lt;span&gt;开源工具&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8077601410934744&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pEeuqRbicF57ywbne77dibCtnDf86aiagEUfLtLibiaUGdmBknicIQhnLYibJyptwAgaZD9IYxcdLm7VXpjkLXgAM0yhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.12332439678284182&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PiaeMVgzBvjWrMFqrWpiabGVCRamV3ptQAGk08zYJMURkwn0NicnKP4RJfuvFYu0l3tUibCnmrwjzydmL07YZc46qA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;746&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend-list&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247489690_1&quot; data-recommend-article-time=&quot;1624578000&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/7VkkuTzAZPp08uy3ZghjeKeEiae1ooyibiczicVjVAYVRSXKgwPL7a2dM7jV1P7kQOy0gbRRXMLfVmBia2dFgdpJItg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;阿里二面：怎么解决MySQL死锁问题的？&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNTc3OTAxOA==&amp;amp;mid=2247489690&amp;amp;idx=1&amp;amp;sn=c50c119192b466aea4f55286773f9a54&amp;amp;chksm=972ae1bfa05d68a9d18b5edb171af0e45f81fb10c23c2fe6a4523f39a5f9453f71506a8229cb#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNTc3OTAxOA==&amp;amp;mid=2247489690&amp;amp;idx=1&amp;amp;sn=c50c119192b466aea4f55286773f9a54&amp;amp;chksm=972ae1bfa05d68a9d18b5edb171af0e45f81fb10c23c2fe6a4523f39a5f9453f71506a8229cb&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.4252163164400494&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7VkkuTzAZPp08uy3ZghjeKeEiae1ooyibiczicVjVAYVRSXKgwPL7a2dM7jV1P7kQOy0gbRRXMLfVmBia2dFgdpJItg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;809&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;阿里二面：怎么解决MySQL死锁问题的？&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247489671_2&quot; data-recommend-article-time=&quot;1624491000&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/3TjM42ia414m6VY5Wpg1ibzU0WXsrxfhwPyz5ibYZkic3GOaS9rxMlt3WtXeM2hUDAx7Qg08LhR1kUGTibqqgZPLv2A/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;微服务之间的最佳调用方式&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNTc3OTAxOA==&amp;amp;mid=2247489671&amp;amp;idx=2&amp;amp;sn=cdf1b3f7f91b5430bd0bdc1b8ea253d5&amp;amp;chksm=972ae1a2a05d68b40402e889de0fcf5ae822ec4e992ce1f7dd9526f6d3085bbc25806656afee#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNTc3OTAxOA==&amp;amp;mid=2247489671&amp;amp;idx=2&amp;amp;sn=cdf1b3f7f91b5430bd0bdc1b8ea253d5&amp;amp;chksm=972ae1a2a05d68b40402e889de0fcf5ae822ec4e992ce1f7dd9526f6d3085bbc25806656afee&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.9973958333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3TjM42ia414m6VY5Wpg1ibzU0WXsrxfhwPyz5ibYZkic3GOaS9rxMlt3WtXeM2hUDAx7Qg08LhR1kUGTibqqgZPLv2A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;384&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;微服务之间的最佳调用方式&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d687f767b7cb01c47167ce465f990767</guid>
<title>鸿蒙系统研究（三）：迈出平台移植第一步</title>
<link>https://toutiao.io/k/lnpuz88</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OpenHarmony OS 2.0 发布时，标准系统只支持 Hi3516DV300 一种硬件平台，而 Android、IOS 均提供了模拟器供开发人员使用。这也可以理解，毕竟华为长期以来都是设备供应商，专长是硬件，在软件开发方面缺少底蕴。鸿蒙应用开发提供了模拟器，但那是真机模拟器，需要接入到华为的开发平台才能使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然 OpenHarmony OS 2.0 标准系统不支持模拟器，那我们就自己动手，丰衣足食吧！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在本文你将了解到：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如何为 OpenHarmony OS 2.0 标准系统增加新的产品定义；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何将新的平台移植加入构建系统；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为模拟器编译出 Linux 内核；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常用的模拟器软件有 QEMU，能够模拟多种硬件型号，还支持 ARM、ARM64、RISC-V、X86 等多种指令。现有的嵌入式 Linux 资料和书籍很多是以 Vexpress A9 为例，所以本次移植也以 Vexpress A9 作为目标移植。关于 QEMU 模拟的 VExpress A9 平台介绍如下：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;QEMU/VExpress A9 是 QEMU 模拟器针对 ARM VExpress-A9 FPGA 开发板进行软件模拟的指令级虚拟机。QEMU/VExpress 因为是软件仿真模式，可以配置成多种模式，例如单核 Cortex-A9、多核Cortex-A9、以及多核 Cortex-A15 等，同时也能够模拟出 VExpress FPGA 开发板上大多数的外设。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;为 OpenHarmony 增加产品定义&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OpenHarmony 系统的 build.sh 编译脚本需要带一个产品名参数 product-name，这里将其命名为 vexpress-a9。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;产品定义位于 productdefine/common 目录，在其子目录 products 下有一个 Hi3516DV300.json 文件，这个对应着 Hi3516DV300 型号。复制一份，命名为 vexpress-a9.json，编辑 vexpress-a9.json 文件，将其中的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;  &lt;span&gt;&quot;product_name&quot;&lt;/span&gt;: &lt;span&gt;&quot;Hi3516DV300&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;product_device&quot;&lt;/span&gt;: &lt;span&gt;&quot;hi3516dv300&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;hisilicon_products:hisilicon_products&quot;&lt;/span&gt;:{},&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这三行修改为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;  &lt;span&gt;&quot;product_name&quot;&lt;/span&gt;: &lt;span&gt;&quot;vexpress-a9&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;product_device&quot;&lt;/span&gt;: &lt;span&gt;&quot;vexpress-a9&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;qemu_products:qemu_products&quot;&lt;/span&gt;:{},&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中的 product_device 是设备名，在 productdefine/common/device/ 同样需要一个 JSON 文件 vexpress-a9.json，其内容可以从 hi3516dv300.json 复制过来：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;    &lt;span&gt;&quot;target_os&quot;&lt;/span&gt;: &lt;span&gt;&quot;ohos&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;target_cpu&quot;&lt;/span&gt;: &lt;span&gt;&quot;arm&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;为 OpenHarmony 增加子系统定义&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;鸿蒙系统支持各种形态的设备，从 IoT 设备到手机，其硬件资源千差万别，功能需求也各不一样，所以系统要求可定制、可裁剪，系统被划分为各种模块和子系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;子系统的定义为 build/subsystem_config.json 文件，可以看到，这里子系统名基本上和 productdefine/common/products/Hi3516DV300.json 一一对应。可以这样理解，这里定义一个比较全的子系统集合，各产品根据自己的需求，定义自己的子系统子集。在这里，我们为 QEMU 增加一个子系统项：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;&quot;qemu_products&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;project&quot;&lt;/span&gt;: &lt;span&gt;&quot;hmf/qemu_products&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;path&quot;&lt;/span&gt;: &lt;span&gt;&quot;device/qemu/build&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;qemu_products&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;dir&quot;&lt;/span&gt;: &lt;span&gt;&quot;device/qemu&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;子系统包括名称、路径、子系统构建脚本路径。这里 qemu_products 的编译脚本路径为 device/qemu/build ，首先增加一个 ohos.build，这个文件一定要建立，否则构建脚本就不会执行这个子系统的构建，内容可参考 device/hisilicon/build/ohos.build 文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;    &lt;span&gt;&quot;subsystem&quot;&lt;/span&gt;: &lt;span&gt;&quot;qemu_products&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;parts&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;qemu_products&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;module_list&quot;&lt;/span&gt;: [&lt;br/&gt;                &lt;span&gt;&quot;//device/qemu/build:products_group&quot;&lt;/span&gt;&lt;br/&gt;            ]&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 module_list 指定依赖目标，所以还需要在该目录下增加一个 BUILD.gn 文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import(&lt;span&gt;&quot;//build/ohos.gni&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;group(&lt;span&gt;&quot;products_group&quot;&lt;/span&gt;) {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (device_type == &lt;span&gt;&quot;vexpress-a9&quot;&lt;/span&gt;) {&lt;br/&gt;    deps = [&lt;br/&gt;      &lt;span&gt;&quot;//device/qemu/vexpress-a9:vexpress-a9_group&quot;&lt;/span&gt;,&lt;br/&gt;    ]&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该构建文件又依赖于 device/qemu/vexpress-a9/ 下的构建目标 vexpress-a9_group。到这里，就进入了新平台移植的步骤。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新平台的移植包括很多内容，如内核编译、驱动开发、根文件系统、生成镜像等等，庞杂而且工作量都很大，所以这里先说一说内核编译。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;为 Vexpress A9 编译内核&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于嵌入式 Linux 内核编译，网上的资料很多，这里探讨的是如何在鸿蒙系统的构建系统中加入内核编译步骤。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考 device/hisilicon/hi3516dv300 下的构建脚本，内核编译主要分三个步骤：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;为 Linux 4.19 内核打上针对 Hi3516DV300 产品的补丁。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;编译内核，生成内核镜像 uImage。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;打包 Hi3516DV300 的驱动。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对 Vexpress A9，我们就不搞那么复杂，就在原始的 Linux 4.19 源码上编译内核镜像。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;内核镜像分两种：zImage 和 uImage，其中 zImage 可以直接用 QEMU 加载，而 uImage 需要通过 u-boot 加载，我们先编译出 zImage。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在 device/qemu/vexpress-a9/ 添加 BUILD.gn 文件：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import(&lt;span&gt;&quot;//build/ohos.gni&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;vexpress-a9_group in&quot;&lt;/span&gt;)&lt;br/&gt;group(&lt;span&gt;&quot;vexpress-a9_group&quot;&lt;/span&gt;) {&lt;br/&gt;  deps = [&lt;br/&gt;    &lt;span&gt;&quot;kernel:kernel&quot;&lt;/span&gt;,&lt;br/&gt;  ]&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;新建 device/qemu/vexpress-a9/kernel 目录，在该目录下增加 BUILD.gn、kernel.mk 和 build_kernel.sh 文件。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 BUILD.gn 为鸿蒙构建系统的规则定义文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import(&lt;span&gt;&quot;//build/ohos.gni&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;kernel_build_script_dir = &lt;span&gt;&quot;//device/qemu/vexpress-a9/kernel&quot;&lt;/span&gt;&lt;br/&gt;kernel_source_dir = &lt;span&gt;&quot;//kernel/linux-4.19&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;action(&lt;span&gt;&quot;kernel&quot;&lt;/span&gt;) {&lt;br/&gt;  script = &lt;span&gt;&quot;build_kernel.sh&quot;&lt;/span&gt;&lt;br/&gt;  sources = [ kernel_source_dir ]&lt;br/&gt;&lt;br/&gt;  outputs = [ &lt;span&gt;&quot;&lt;span&gt;$root_build_dir&lt;/span&gt;/packages/phone/images/zImage&quot;&lt;/span&gt; ]&lt;br/&gt;  args = [&lt;br/&gt;    rebase_path(kernel_build_script_dir, root_build_dir),&lt;br/&gt;    rebase_path(&lt;span&gt;&quot;&lt;span&gt;$root_out_dir&lt;/span&gt;/../KERNEL_OBJ&quot;&lt;/span&gt;),&lt;br/&gt;    rebase_path(&lt;span&gt;&quot;&lt;span&gt;$root_build_dir&lt;/span&gt;/packages/phone/images&quot;&lt;/span&gt;),&lt;br/&gt;    device_type,&lt;br/&gt;  ]&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中定义的构建目标 &quot;kernel&quot;，执行 build_kernel.sh 脚本：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;call build_kernel.sh&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;pushd&lt;/span&gt; &lt;span&gt;${1}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; OHOS_ROOT_PATH=$(&lt;span&gt;pwd&lt;/span&gt;)/../../../..&lt;br/&gt;&lt;span&gt;#note out_dir style:out/xx/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; OUT_DIR=&lt;span&gt;$2&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;LINUX_KERNEL_OUT=&lt;span&gt;${OUT_DIR}&lt;/span&gt;/kernel/src_tmp/linux-4.19&lt;br/&gt;LINUX_KERNEL_ZIMAGE_FILE=&lt;span&gt;$LINUX_KERNEL_OUT&lt;/span&gt;/arch/arm/boot/zImage&lt;br/&gt;&lt;br/&gt;make -f kernel.mk&lt;br/&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; [ -f &lt;span&gt;${LINUX_KERNEL_ZIMAGE_FILE}&lt;/span&gt; ];&lt;span&gt;then&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;zImage: &lt;span&gt;${LINUX_KERNEL_UIMAGE_FILE}&lt;/span&gt; build success&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;else&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;zImage build failed!!!&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;exit&lt;/span&gt; 1&lt;br/&gt;&lt;span&gt;fi&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;mkdir -p &lt;span&gt;${3}&lt;/span&gt;&lt;br/&gt;cp &lt;span&gt;${2}&lt;/span&gt;/kernel/src_tmp/linux-4.19/arch/arm/boot/zImage &lt;span&gt;${3}&lt;/span&gt;/zImage&lt;br/&gt;&lt;span&gt;popd&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在脚本中又使用到了 kernel.mk 文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;PRODUCT_NAME=$(TARGET_PRODUCT)&lt;br/&gt;&lt;br/&gt;OHOS_BUILD_HOME := $(OHOS_ROOT_PATH)&lt;br/&gt;&lt;br/&gt;KERNEL_SRC_PATH := $(OHOS_BUILD_HOME)/kernel/linux-4.19&lt;br/&gt;&lt;br/&gt;KERNEL_SRC_TMP_PATH := $(OUT_DIR)/kernel/src_tmp/linux-4.19&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;PREBUILTS_GCC_DIR := $(OHOS_BUILD_HOME)/prebuilts/gcc&lt;br/&gt;&lt;br/&gt;PREBUILTS_CLANG_DIR := $(OHOS_BUILD_HOME)/prebuilts/clang&lt;br/&gt;CLANG_HOST_TOOLCHAIN := $(PREBUILTS_CLANG_DIR)/host/linux-x86/clang-r353983c/bin&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;CLANG_CC := $(CLANG_HOST_TOOLCHAIN)/clang&lt;br/&gt;&lt;br/&gt;KERNEL_HOSTCC := $(CLANG_HOST_TOOLCHAIN)/clang&lt;br/&gt;&lt;br/&gt;KERNEL_PREBUILT_MAKE := make&lt;br/&gt;&lt;br/&gt;KERNEL_ARCH := arm&lt;br/&gt;KERNEL_TARGET_TOOLCHAIN := $(PREBUILTS_GCC_DIR)/linux-x86/arm/gcc-linaro-7.5.0-arm-linux-gnueabi/bin&lt;br/&gt;KERNEL_TARGET_TOOLCHAIN_PREFIX := $(KERNEL_TARGET_TOOLCHAIN)/arm-linux-gnueabi-&lt;br/&gt;&lt;br/&gt;KERNEL_PERL := /usr/bin/perl&lt;br/&gt;&lt;br/&gt;KERNEL_CROSS_COMPILE :=&lt;br/&gt;KERNEL_CROSS_COMPILE += CC=&lt;span&gt;&quot;&lt;span&gt;$(CLANG_CC)&lt;/span&gt;&quot;&lt;/span&gt;&lt;br/&gt;KERNEL_CROSS_COMPILE += HOSTCC=&lt;span&gt;&quot;&lt;span&gt;$(KERNEL_HOSTCC)&lt;/span&gt;&quot;&lt;/span&gt;&lt;br/&gt;KERNEL_CROSS_COMPILE += PERL=$(KERNEL_PERL)&lt;br/&gt;KERNEL_CROSS_COMPILE += CROSS_COMPILE=&lt;span&gt;&quot;&lt;span&gt;$(KERNEL_TARGET_TOOLCHAIN_PREFIX)&lt;/span&gt;&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;KERNEL_MAKE := \&lt;br/&gt;    PATH=&lt;span&gt;&quot;&lt;span&gt;$(BOOT_IMAGE_PATH)&lt;/span&gt;:$&lt;span&gt;$PATH&lt;/span&gt;&quot;&lt;/span&gt; \&lt;br/&gt;    $(KERNEL_PREBUILT_MAKE)&lt;br/&gt;&lt;br/&gt;KERNEL_IMAGE_FILE := $(KERNEL_SRC_TMP_PATH)/arch/arm/boot/zImage&lt;br/&gt;&lt;br/&gt;$(KERNEL_IMAGE_FILE):&lt;br/&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;build kernel...&quot;&lt;/span&gt;&lt;br/&gt; rm -rf $(KERNEL_SRC_TMP_PATH);mkdir -p $(KERNEL_SRC_TMP_PATH);cp -arfL $(KERNEL_SRC_PATH)/. $(KERNEL_SRC_TMP_PATH)/&lt;br/&gt; $(KERNEL_MAKE) -C $(KERNEL_SRC_TMP_PATH) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) distclean&lt;br/&gt; $(KERNEL_MAKE) -C $(KERNEL_SRC_TMP_PATH) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) vexpress_defconfig&lt;br/&gt; $(KERNEL_MAKE) -C $(KERNEL_SRC_TMP_PATH) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) zImage&lt;br/&gt; $(KERNEL_MAKE) -C $(KERNEL_SRC_TMP_PATH) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) dtbs&lt;br/&gt; $(KERNEL_MAKE) -C $(KERNEL_SRC_TMP_PATH) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) modules&lt;br/&gt;&lt;br/&gt;.PHONY: build-kernel&lt;br/&gt;build-kernel: $(KERNEL_IMAGE_FILE)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在该 Makefile 中，指定交叉编译工具链，并进行内核编译，最后生成 zImage 镜像。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让我们来使用构建脚本编译系统：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;./build.sh --product-name vexpress-a9 --ccache&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后使用 QEMU 模拟器来启动内核：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ qemu-system-arm -M vexpress-a9 -m 512M -dtb ./out/KERNEL_OBJ/kernel/src_tmp/linux-4.19/arch/arm/boot/dts/vexpress-v2p-ca9.dtb -kernel ./out/KERNEL_OBJ/kernel/src_tmp/linux-4.19/arch/arm/boot/zImage -nographic&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5416666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibQ4mtgHYXv6AONcoehjiapjVofrS1ZFp993Q1mafpOowGK9O3s1TaquN5JnzRIW5VofEVrMvVPr9vI8rHFe9JVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，内核加载并启动，但缺少根文件系统。关于根文件系统的制作与加载，在后面再继续聊。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小结&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;鸿蒙系统的构建系统还是比较复杂的，交织着 bash 脚本、python 脚本、GN 构建系统、make 构建系统、JSON 文件等等，有些文件还是编译过程生成出来的，理解起来相当困难。通过本篇文章，我们可以了解到，移植鸿蒙标准系统的步骤有：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;编写产品定义 JSON 文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;编写子系统定义 JSON 文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为设备增加构建脚本，通常位于 device/ &amp;lt;manufactory&amp;gt;&lt;manufactory&gt;/&amp;lt;device_type&amp;gt; 下，包括生成内核镜像、驱动、系统镜像、用户镜像等等&lt;/manufactory&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对 OpenHarmony 2.0 系统源码的修改，我在 gitee 上也 fork 几个 OpenHarmony 2.0 源码库，上述修改均可以在我 fork 的源码库中找到，有兴趣的朋友可以访问：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;https://gitee.com/mogoweb&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后续将继续分析鸿蒙系统的移植，敬请关注！&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5c7f58b46db059cee679d18c8de14238</guid>
<title>为什么 switch 的 case 没有 break 不行</title>
<link>https://toutiao.io/k/jcf834i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1475&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KM1NunBnCjvk0hE5bBL0eics0S3NdQ5BLdh0445Q6UMWicYNDKXaIria9vFA6mTAwh6iadaAXYJia6lrJyMb3dMAMZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个小姐姐拿着一个switch的选择题来问我。&lt;img data-ratio=&quot;0.45398138572905894&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KM1NunBnCjttIvgN39OzcIMwr8iaZ8a5no5JOLQoWKIj0zYPibIvk0jFUH3BT3x8DtnVrVEZj1fvjq49YUfB9HKg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1934&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之所以这么笃定地回答这个问题，并不是我知道其中原理，而是之前在一个群里，有人问了同类型的问题，我瞥了一眼记住了答案，所以才依葫芦画瓢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小姐姐接着问我为什么，我说少个break，但凡再问一句：为什么少个break结果就不一样，我就回答不出来了。所以，为了将尴尬扼杀于摇篮，还是研究一下break在switch的作用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;从字节码出发&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按照惯例，先写demo表述问题。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;switch&lt;/span&gt; (i) {&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;:&lt;br/&gt;            System.out.println(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;:&lt;br/&gt;            System.out.println(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;:&lt;br/&gt;            System.out.println(&lt;span&gt;2&lt;/span&gt;);&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行代码，结果如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2154696132596685&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KM1NunBnCjttIvgN39OzcIMwr8iaZ8a5nr8RRjQl8g61ItWgLNXxu4b9icvBDxL2PcrKqQHM2PyB7HdiaxRTpHKDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1086&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;*&lt;span&gt;明明只匹配了case 0，为什么1和2也执行了？&lt;/span&gt; 很费解！按照惯用套路，看看字节码能不能给个答案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;javac&lt;/span&gt;编译和&lt;span&gt;javap&lt;/span&gt;查看：&lt;img data-ratio=&quot;0.4090909090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KM1NunBnCjttIvgN39OzcIMwr8iaZ8a5nvMgKXFg5MAdfoY47OwdSMCSyxLelZVkYPm1PaPiasia7or24XBxstYjw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2288&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「tableswitch」&lt;/strong&gt;和&lt;strong&gt;「lookupswitch」&lt;/strong&gt;都用于switch条件跳转，前者用于case值连续，例如上面代码中的0、1、2；后者用于case值不连续。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从字节码可以看出：&lt;span&gt;switch中的case条件和对应代码块是分开的&lt;/span&gt;。如上图，case为0时，跳转到标号28代码处；为1时跳转到标号35代码处；为2时跳转到标号43代码处；default则跳转到标号49代码处。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这不，答案就出来了，当case 0匹配了之后，直接跳转到标号28代码处开始执行，输出0，然后策马奔腾，一路小下坡，顺序执行完后面所有代码，直到标号49 return，方法完执行完成，程序结束。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果按照正常的思维，是不是case 0匹配之后，跳到28，执行完28、31、32输出0之后，就应该直接跳走，直接执行49。那么，这个&quot;跳走”用字节码应该怎么表示？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用return？那不行，因为return会结束方法，这样switch后代码也无法执行。那怎么办嘞....&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6325&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/KM1NunBnCjttIvgN39OzcIMwr8iaZ8a5nQgml69gxmDVWWDaUZ39vD0rQBSLPibJb40IrFtgl4g2RztoaTvU3mMg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;关于goto&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;goto：无条件跳转，goto 1表示跳转到标号1的代码处。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再写代码样例，这次在代码中给每个case都加上break。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;switch&lt;/span&gt; (i) {&lt;br/&gt;          &lt;span&gt;case&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;:&lt;br/&gt;              System.out.println(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;              &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;          &lt;span&gt;case&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;:&lt;br/&gt;              System.out.println(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;              &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;          &lt;span&gt;case&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;:&lt;br/&gt;              System.out.println(&lt;span&gt;2&lt;/span&gt;);&lt;br/&gt;              &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;      }&lt;br/&gt;      System.out.println(&lt;span&gt;&quot;Hello World&quot;&lt;/span&gt;);&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重新编译，再来看看字节码。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.463768115942029&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KM1NunBnCjttIvgN39OzcIMwr8iaZ8a5nYaGhxjK8Y5ee2atiaGDzZiblgApzlT9trjvGmEsGqdU2icEarjGy3UEwQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2484&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图，与第一次的字节码相比，在标号35、45都有了goto指令。如果case 0匹配成功，则跳到标号28执行，执行完代码块对应的31、32指令之后，执行35的goto指令跳转到标号55，这样就跳出了switch作用范围，case 1和2也不会被执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;等等，怎么少了一个goto，在标号55的上方应该还有一个goto才对！其实这就涉及到了&lt;span&gt;编译器优化技术&lt;/span&gt;，最后一个goto也是跳转到标号55的指令，但没有goto下一步也一样顺序执行此行指令，所以这个goto被编译器视为无用代码进行了消除。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;switch和if区别&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先用if实现上面switch逻辑。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (i == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;          System.out.println(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;      } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (i == &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;          System.out.println(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;      } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (i == &lt;span&gt;2&lt;/span&gt;) {&lt;br/&gt;          System.out.println(&lt;span&gt;2&lt;/span&gt;);&lt;br/&gt;      }&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编译成字节码：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4480737018425461&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KM1NunBnCjttIvgN39OzcIMwr8iaZ8a5npySL55wVjTDZRzpI4CIYicV6bkBqEEdXqzTZ3do0XZJz0qOH0ISoqTw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2388&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「if_icmpne」&lt;/strong&gt;用于比较两个int数。从字节码也可以看出if和switch的区别：&lt;span&gt;if条件和代码块的字节码是顺序的，switch条件和代码块是分开的；if自动生成goto指令，switch只有加了break才生成goto指令&lt;/span&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结语&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;case中的break告诉前端编译器：&lt;strong&gt;「给每个case对应代码块的最后加上goto」&lt;/strong&gt;。这样，执行完匹配上的代码之后，就可以略过后面的case代码块了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;果然，求(xiao)知(jie)欲(jie)才是学习新知识的动力。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.43179916317991635&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KM1NunBnCjttIvgN39OzcIMwr8iaZ8a5nhDoN7SFbUibXzAwmN8XNDLltv7WNCVXlXllYKfGI5TNmYexecHXy0iaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1195&quot;/&gt;&lt;figcaption&gt;感谢每一份关注&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>