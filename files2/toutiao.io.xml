<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>01da146ee47b16aa55989a9cbddc7b88</guid>
<title>req: 即将支持 HTTP3 !</title>
<link>https://toutiao.io/k/ojt7tnh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;重磅新闻&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一款设计优秀，简单易用的 golang http 请求库，req 即将引入 HTTP3 的支持。为了支持 HTTP3，req 的内部代码进行了一些重构，所以目前代码在单独的 http3 分支上提交。等到足够稳定后，会合并到主分支，然后发布版本 v3.14.0。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;距正式发布还需要一段时间，不过现在大家已经可以提前尝鲜试用，本文将介绍如何在 req 中使用 HTTP3。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;安装&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果要启用 HTTP3 支持，请确保您的 go 版本在 go1.16 和 go1.18 之间，然后您可以使用以下 Go 命令安装支持 HTTP3 的 req：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;go get -u github.com/imroc/req/v3@http3&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;用法&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用 client 的 &lt;code&gt;EnableHTTP3()&lt;/code&gt; 来启用 HTTP3 的支持:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;&quot;github.com/imroc/req/v3&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  req.EnableDebugLog().EnableHTTP3()&lt;br/&gt;  &lt;span&gt;// req.EnableDumpAll() // uncomment this to see all dump content.&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;4&lt;/span&gt;; i++ {&lt;br/&gt;    req.MustGet(&lt;span&gt;&quot;https://www.cloudflare.com&quot;&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看看 debug 日志的输出:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;2022/07/02 10:37:52.876009 DEBUG [req] HTTP/2 GET https://www.cloudflare.com&lt;br/&gt;2022/07/02 10:37:53.029690 DEBUG [req] HTTP/2 GET https://www.cloudflare.com&lt;br/&gt;2022/07/02 10:37:53.122675 DEBUG [req] detected that the server www.cloudflare.com:443 supports http3, will try to use http3 protocol in subsequent requests&lt;br/&gt;2022/07/02 10:37:53.171431 DEBUG [req] HTTP/3 GET https://www.cloudflare.com&lt;br/&gt;2022/07/02 10:37:53.440928 DEBUG [req] HTTP/3 GET https://www.cloudflare.com&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我来解释一下：启用 HTTP3 的支持后，req 会先正常发起 HTTP2 或 HTTP/1.1 请求（走 TCP）。在请求过程中，如果检测到服务器端支持 HTTP3，那么后续的所有请求都会使用 HTTP3 协议（走 UDP），就跟浏览器的行为是一样的。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>68158e3194d5bdffcd6c5787ead006a8</guid>
<title>Spring的事务管理</title>
<link>https://toutiao.io/k/136nlv3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;&lt;span&gt;（给&lt;/span&gt;&lt;span&gt;ImportNew&lt;/span&gt;&lt;span&gt;加星标，提高Java技能）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-id=&quot;heading-1&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Spring中管理事务的 2 种方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Spring 支持 2 种方式的事务管理&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;编程式事务管理&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;声明式事务管理&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-id=&quot;heading-3&quot;&gt;&lt;strong&gt;&lt;span&gt;编程式事务管理&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;TransactionTemplate&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 或者 &lt;/span&gt;&lt;code&gt;&lt;span&gt;TransactionManager&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 手动管理事务，实际应用中很少使用，但是对于理解 Spring 事务管理原理有帮助。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; TransactionTemplate transactionTemplate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;testTransaction&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        transactionTemplate.execute(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; TransactionCallbackWithoutResult() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;doInTransactionWithoutResult&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(TransactionStatus transactionStatus)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Exception e){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    transactionStatus.setRollbackOnly();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre/&gt;&lt;pre&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; PlatformTransactionManager transactionManager;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;testTransaction&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  TransactionStatus status = transactionManager.getTransaction(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; DefaultTransactionDefinition());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              transactionManager.commit(status);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              transactionManager.rollback(status);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h3 data-id=&quot;heading-4&quot;&gt;&lt;strong&gt;&lt;span&gt;声明式事务管理&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 注解进行事务管理，该方式是基于 AOP 实现的，代码侵入性较小，推荐使用该方式进行事务管理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 注解进行事务管理的示例代码如下。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Transactional&lt;/span&gt;(propagation=propagation.PROPAGATION_REQUIRED)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; aMethod {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    B b = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; B();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    C c = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; C();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    b.bMethod();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    c.cMethod();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h2 data-id=&quot;heading-5&quot;&gt;&lt;span&gt;&lt;strong&gt;Spring事务管理相关接口&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Spring 框架中，事务管理相关最重要的 3 个接口如下&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;PlatformTransactionManager&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：（平台）事务管理器，Spring 事务策略的核心。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;TransactionDefinition&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;TransactionStatus&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：事务运行状态。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-id=&quot;heading-6&quot;&gt;&lt;strong&gt;&lt;span&gt;事务管理接口（PlatformTransactionManager）&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Spring 并不直接管理事务，而是提供了多种事务管理器 。Spring 事务管理器的接口是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;PlatformTransactionManager&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过这个接口，Spring 为各个平台如 &lt;/span&gt;&lt;code&gt;&lt;span&gt;JDBC&lt;/span&gt;&lt;/code&gt;&lt;span&gt; (&lt;/span&gt;&lt;code&gt;&lt;span&gt;DataSourceTransactionManager&lt;/span&gt;&lt;/code&gt;&lt;span&gt;)、&lt;/span&gt;&lt;code&gt;&lt;span&gt;Hibernate&lt;/span&gt;&lt;/code&gt;&lt;span&gt;( &lt;/span&gt;&lt;code&gt;&lt;span&gt;HibernateTransactionManager&lt;/span&gt;&lt;/code&gt;&lt;span&gt;)、&lt;/span&gt;&lt;code&gt;&lt;span&gt;JPA&lt;/span&gt;&lt;/code&gt;&lt;span&gt; (&lt;/span&gt;&lt;code&gt;&lt;span&gt;JpaTransactionManager&lt;/span&gt;&lt;/code&gt;&lt;span&gt;) 等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;PlatformTransactionManager&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 接口的具体实现如下。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; org.springframework.transaction;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.lang.Nullable;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;TransactionStatus &lt;span class=&quot;code-snippet__title&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(@Nullable TransactionDefinition var1)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; TransactionException&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(TransactionStatus var1)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; TransactionException&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(TransactionStatus var1)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; TransactionException&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h3 data-id=&quot;heading-7&quot;&gt;&lt;strong&gt;&lt;span&gt;事务属性（TransactionDefinition）&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;TransactionDefinition&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 接口定义了事务的一些基本属性。事务属性包括 5 个方面&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;隔离级别&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;传播行为&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;回滚规则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;是否只读&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;事务超时&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span&gt;package org.springframework.transaction;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; org.springframework.transaction;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.lang.Nullable;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;TransactionDefinition&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; PROPAGATION_REQUIRED = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; PROPAGATION_SUPPORTS = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; PROPAGATION_MANDATORY = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; PROPAGATION_REQUIRES_NEW = &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; PROPAGATION_NOT_SUPPORTED = &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; PROPAGATION_NEVER = &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; PROPAGATION_NESTED = &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; ISOLATION_DEFAULT = -&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; ISOLATION_READ_UNCOMMITTED = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; ISOLATION_READ_COMMITTED = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; ISOLATION_REPEATABLE_READ = &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; ISOLATION_SERIALIZABLE = &lt;span class=&quot;code-snippet__number&quot;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; TIMEOUT_DEFAULT = -&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getPropagationBehavior&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getIsolationLevel&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getTimeout&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;isReadOnly&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;String &lt;span class=&quot;code-snippet__title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h3 data-id=&quot;heading-8&quot;&gt;&lt;strong&gt;&lt;span&gt;事务状态（TransactionStatus）&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;TransactionStatus&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 接口用来记录事务的状态。该接口定义了一组方法，用来获取或判断事务的相应状态信息。事务管理接口 &lt;/span&gt;&lt;code&gt;&lt;span&gt;PlatformTransactionManager&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;getTransaction()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法会返回一个 &lt;/span&gt;&lt;code&gt;&lt;span&gt;TransactionStatus&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 对象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;TransactionStatus&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 接口接口内容如下。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;TransactionStatus&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;isNewTransaction&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;hasSavepoint&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setRollbackOnly&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;isRollbackOnly&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; isCompleted; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h2 data-id=&quot;heading-9&quot;&gt;&lt;span&gt;&lt;strong&gt;@Transactional注解&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-id=&quot;heading-10&quot;&gt;&lt;strong&gt;&lt;span&gt;@Transactional的作用范围&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;1. 方法：推荐将注解使用于方法上，不过需要注意的是，该注解只能应用到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法上，否则不生效。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 类：如果这个注解使用在类上的话，表明该注解对该类中所有的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法都生效。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 接口：不推荐在接口上使用。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-id=&quot;heading-11&quot;&gt;&lt;strong&gt;&lt;span&gt;@Transactional的常用配置参数&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的常用配置参数总结（只列出 5 个比较常用的）&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;属性名&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;说明&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;propagation&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;事务的传播行为，默认值为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;REQUIRED&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;isolation&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;事务的隔离级别，默认值采用 DEFAULT&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;事务的超时时间，默认值为 -1（不会超时）。如果超过该时间限制但事务还没有完成，则自动回滚事务。&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;readOnly&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;指定事务是否为只读事务，默认值为 false&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;rollbackFor&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;用于指定能够触发事务回滚的异常类型，并且可以指定多个异常类型，默认只捕获 &lt;/span&gt;&lt;code&gt;&lt;span&gt;RuntimeException&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 data-id=&quot;heading-12&quot;&gt;&lt;strong&gt;&lt;span&gt;传播机制（propagation）&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;此处对 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@Transactional(propagation = xxx)&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 注解的传播机制 &lt;/span&gt;&lt;code&gt;&lt;span&gt;propagation&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 属性值进行介绍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;propagation&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 参数用于指定事务的传播特性，默认值为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;REQUIRED&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，Spring目前支持 7 种传播机制。&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;传播机制&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;说明&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;REQUIRED&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;如果当前上下文中存在事务则加入该事务；如果不存在事务则创建一个事务&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;SUPPORTS&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;如果当前上下文存在事务则支持事务加入事务；如果不存在事务则使用非事务的方式执行&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;MANDATORY&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;方法只能在当前上下文中已经存在的事务中允许，若不存在已有的事务则抛出异常&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;REQUIRES_NEW&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;每次都会新建一个事务，并且同时将上下文中的事务挂起，执行当前新建的事务。完成以后，上下文事务恢复再执行&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;NOT_SUPPORTED&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;如果当前上下文中存在事务则挂起当前事务，然后新的方法在没有事务的环境中执行&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;NEVER&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;如果当前上下文中存在事务则抛出异常，否则在无事务环境上执行代码&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;NESTED&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;如果当前上下文中存在事务则嵌套事务执行，如果不存在事务则新建事务&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;如上表所示，目前只有 &lt;/span&gt;&lt;code&gt;&lt;span&gt;REQUIRED&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;REQUIRES_NEW&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;NESTED&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 这三种传播机制会新建事务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;设置传播机制 &lt;/span&gt;&lt;code&gt;&lt;span&gt;propagation&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 参数错误，会导致事务失效。比如，若设置 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@Transactional(propagation = Propagation.NEVER)&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，方法执行时，如果当前上下文中存在事务会抛出异常。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-id=&quot;heading-13&quot;&gt;&lt;span&gt;&lt;strong&gt;@Transactional 注解原理&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;@Transactional 的工作机制是基于 AOP 实现的，AOP 又是使用动态代理实现的。如果目标对象实现了接口，默认情况下会采用 JDK 的动态代理，如果目标对象没有实现接口，会使用 CGLIB 动态代理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Spring 的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;DefaultAopProxyFactory&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;createAopProxy()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法决定了是使用 JDK 还是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;CGLIB&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 来做动态代理，源码如下。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DefaultAopProxyFactory&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AopProxyFactory&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;Serializable&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; AopProxy &lt;span class=&quot;code-snippet__title&quot;&gt;createAopProxy&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(AdvisedSupport config)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; AopConfigException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Class&amp;lt;?&amp;gt; targetClass = config.getTargetClass();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (targetClass == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; AopConfigException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;TargetSource cannot determine target class: &quot;&lt;/span&gt; +&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Either an interface or a target is required for proxy creation.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; JdkDynamicAopProxy(config);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ObjenesisCglibAopProxy(config);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; JdkDynamicAopProxy(config);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h2 data-id=&quot;heading-14&quot;&gt;&lt;span&gt;&lt;strong&gt;Spring AOP 自调用问题&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;若同一类中的其他没有 &lt;code&gt;@Transactional&lt;/code&gt; 注解的方法内部调用有 &lt;code&gt;@Transactional&lt;/code&gt; 注解的方法，有 &lt;code&gt;@Transactional&lt;/code&gt; 注解的方法的事务会失效。这是由于 Spring AOP 代理的原因造成的，因为只有当 &lt;code&gt;@Transactional&lt;/code&gt; 注解的方法在类以外被调用的时候，Spring 事务管理才生效。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下述代码中，&lt;/span&gt;&lt;code&gt;&lt;span&gt;MyService&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 类中的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;method1()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 调用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;method2()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 就会导致 &lt;/span&gt;&lt;code&gt;&lt;span&gt;method2()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的事务失效。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MyService&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        method2();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Transactional&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;解决「Spring AOP 自调用问题导致事务失效」的方法如下。&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;新创建一个类，在新创建的类中调用该类，避免在类中自调用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Servcie&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ServiceA&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; ServiceB serviceB;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        queryData1();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        queryData2();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        serviceB.doSave(user);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Servcie&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ServiceB&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Transactional&lt;/span&gt;(rollbackFor=Exception.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;doSave&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        addData1();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        updateData2();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;若不想新创建一个类，也可以在该类中注入自己。(Spring 通过三级缓存解决了循环依赖问题)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Servcie&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ServiceA&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; ServiceA serviceA;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        queryData1();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        queryData2();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        serviceA.doSave(user);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Transactional&lt;/span&gt;(rollbackFor=Exception.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;doSave&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        addData1();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        updateData2();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;AopContent.currentProxy()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 获取代理对象。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Servcie&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ServiceA&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        queryData1();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        queryData2();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ((ServiceA)AopContext.currentProxy()).doSave(user);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Transactional&lt;/span&gt;(rollbackFor=Exception.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;doSave&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        addData1();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        updateData2();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h2 data-id=&quot;heading-15&quot;&gt;&lt;span&gt;&lt;strong&gt;@Transactional 使用注意&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 注解只有作用到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法上事务才生效（因为底层是通过 AOP 实现的，AOP 又是通过动态代理实现的），不推荐在接口上使用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;避免同一个类中调用 &lt;code&gt;@Transactional&lt;/code&gt; 注解的方法，这样会导致事务失效。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;正确的设置 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;rollbackFor&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;propagation&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 属性，否则事务可能会回滚失败。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用 &lt;code&gt;@Transactional&lt;/code&gt; 处理事务时，方法中需要显示抛出异常，这样 AOP 代理才能捕获到方法的异常，才能进行回滚。默认情况下 AOP 只捕获 &lt;code&gt;RuntimeException&lt;/code&gt; 的异常，但可以通过配置来捕获特定的异常并回滚。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-id=&quot;heading-16&quot;&gt;&lt;span&gt;&lt;strong&gt;事务失效的场景&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;在开发中，若遇到事务失效的场景，其产生原因可能包括&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;方法访问权限问题：使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 注解管理事务，底层是通过 AOP 实现的，AOP 又是通过动态代理实现的，这就要求该注解必须作用到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法上，若注解到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;default&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法上，会导致事务不生效。同理，若方法被 &lt;/span&gt;&lt;code&gt;&lt;span&gt;final&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 修饰（动态代理中无法重写 &lt;/span&gt;&lt;code&gt;&lt;span&gt;final&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法），也会导致事务不生效。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;方法内部调用，即上文中的「Spring AOP 自调用问题」。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Bean 未被 Spring IoC 容器管理：使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 注解管理事务的前提是该 Bean 需要被 IoC 容器管理。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据库的存储引擎不支持事务，如采用 MyISAM 存储引擎时不支持事务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;事务不回滚&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;事务的传播特性设置错误，如 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@Transactional(propagation = Propagation.NEVER)&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;自己吞掉了异常：使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 处理事务时，方法中需要显示抛出异常。这样 AOP 代理才能捕获到方法的异常，才能进行回滚。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;抛出了别的异常：默认情况下 AOP 只捕获 &lt;/span&gt;&lt;code&gt;&lt;span&gt;RuntimeException&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的异常，但可以通过配置来捕获特定的异常并回滚，如 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@Transactional(rollbackFor = RuntimeException.class)&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-id=&quot;heading-17&quot;&gt;&lt;span&gt;&lt;strong&gt;@Transactional实战&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mysql&amp;gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; user;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+----+-----------+---------------+&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;| id | user_name | user_password |&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+----+-----------+---------------+&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;| &lt;span class=&quot;code-snippet__number&quot;&gt;12&lt;/span&gt; | lbs0912   | &lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt;           |&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;| &lt;span class=&quot;code-snippet__number&quot;&gt;13&lt;/span&gt; | lbs0912   | &lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt;           |&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;| &lt;span class=&quot;code-snippet__number&quot;&gt;14&lt;/span&gt; | lbs0912   | &lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt;           |&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;| &lt;span class=&quot;code-snippet__number&quot;&gt;15&lt;/span&gt; | lbs0912   | &lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt;           |&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+----+-----------+---------------+&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;rows &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0.00&lt;/span&gt; sec&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;作者：变速风声&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;链接：https:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;来源：稀土掘金&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;code lang=&quot;sql&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;对于上述 &lt;/span&gt;&lt;code&gt;&lt;span&gt;user&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 数据表，删除 &lt;/span&gt;&lt;code&gt;&lt;span&gt;id = 12，13，14&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 三条数据。其中，在执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;id = 14&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的删除时，抛出一个异常，验证事务的回滚。代码如下。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Transactional&lt;/span&gt;(rollbackFor = RuntimeException.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;deleteUserById&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;code-snippet__title&quot;&gt;deleteUserById&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; sum = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; rows= jdbcTemplate.update(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;DELETE FROM  USER  WHERE ID = ?&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;12&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; rows2= jdbcTemplate.update(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;DELETE FROM  USER  WHERE ID = ?&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;13&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; idValue = &lt;span class=&quot;code-snippet__number&quot;&gt;14&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;14&lt;/span&gt; == id){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;test&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            sum += rows + rows2;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; exceptionTest = &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (RuntimeException  e){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;RuntimeException:&quot;&lt;/span&gt; + e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;test&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;执行成功，影响&quot;&lt;/span&gt;+sum+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;行&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;执行上述代码后，再查看数据库，发现对应的三条数据都还在，数据库没有任何变化。这说明事务回滚生效了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面进行对比测试，注释掉 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@Transactional(rollbackFor = RuntimeException.class)&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，再次运行代码，查看数据库的数据。可以看到，由于没有采用事务注解，前面两条 SQL 执行成功，并影响数据库中的数据。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mysql&amp;gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; user;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+----+-----------+---------------+&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;| id | user_name | user_password |&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+----+-----------+---------------+&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;| &lt;span class=&quot;code-snippet__number&quot;&gt;14&lt;/span&gt; | lbs0912   | &lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt;           |&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;| &lt;span class=&quot;code-snippet__number&quot;&gt;15&lt;/span&gt; | lbs0912   | &lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt;           |&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+----+-----------+---------------+&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;rows &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0.00&lt;/span&gt; sec&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;code lang=&quot;sql&quot;&gt;&lt;span/&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h2 data-id=&quot;heading-18&quot;&gt;&lt;span&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-id=&quot;heading-19&quot;&gt;&lt;strong&gt;&lt;span&gt;异常不抛出事务就不会回滚&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 注解只能应用到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法才有效。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;默认 Spring 事务只在发生未被捕获的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;RuntimeexEetpion&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 时才回滚。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;方法中需要显示抛出异常，这样 AOP 代理才能捕获到方法的异常，才能进行回滚。默认情况下 AOP 只捕获 &lt;code&gt;RuntimeException&lt;/code&gt; 的异常，但可以通过配置来捕获特定的异常并回滚，如下代码所示。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;pre&gt;&lt;p&gt;&lt;code lang=&quot;java&quot;&gt;&lt;span&gt;@Transactional(rollbackFor = RuntimeException.class)public void testFunc(){    // ...}复制代码&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;对于显示抛出异常，有如下 2 种方案&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;若 &lt;/span&gt;&lt;code&gt;&lt;span&gt;service&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 层处理事务，那么 &lt;/span&gt;&lt;code&gt;&lt;span&gt;service&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 中的方法中不做异常捕获，或者在 &lt;/span&gt;&lt;code&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 语句中最后增加 &lt;/span&gt;&lt;code&gt;&lt;span&gt;throw new RuntimeException()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 语句，以便让 AOP 捕获异常再去回滚，并且在 &lt;/span&gt;&lt;code&gt;&lt;span&gt;service&lt;/span&gt;&lt;/code&gt;&lt;span&gt;上层要继续捕获这个异常并处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在 &lt;/span&gt;&lt;code&gt;&lt;span&gt;service&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 层方法的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 语句中增加 &lt;/span&gt;&lt;code&gt;&lt;span&gt;TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 语句，手动回滚，这样上层就无需去处理异常。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;转自：变速风声&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;链接&lt;span&gt;：https://juejin.cn/post/7100174096788357156&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651513578&amp;amp;idx=1&amp;amp;sn=35c9d2d9d38de65c136eec0e6e535ce0&amp;amp;chksm=bd258e958a520783e7a406225404801b8acf246d778f3cb3ef7c7f985ddcdc038b8a660036d8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;让人头痛的大事务问题到底要如何解决？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;让人头痛的大事务问题到底要如何解决？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651513314&amp;amp;idx=1&amp;amp;sn=a2d117eaa37f70b60eab5d58eff14c81&amp;amp;chksm=bd258d9d8a52048bf2d67e6ad05070be68120307c554904122fa5d046edc39ad88abe12b4a05&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;SpringBoot 分布式事务的解决方案（JTA+Atomic+多数据源）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;SpringBoot 分布式事务的解决方案（JTA+Atomic+多数据源）&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651507351&amp;amp;idx=1&amp;amp;sn=d8747236483e5087eeafe986ade86b09&amp;amp;chksm=bd25a6e88a522ffebb85a3802870a54e3ae51f9d1b552e5cafd94af565dbbdce2511bd842ec3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;腾讯二面：Redis 事务支持 ACID 么？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;腾讯二面：Redis 事务支持 ACID 么？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点赞和在看就是最大的支持❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>347df8abdae8cacca9e0de26ea0ede4f</guid>
<title>Kratos微服务框架下实现CQRS架构模式</title>
<link>https://toutiao.io/k/ntrn4p9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在特定的场景下，它可以提供更好的性能。但是，在强一致性方面，它并不能够保证。而且，还会带来认知负担。所以，实际运用上，需要谨慎。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;什么是 CQRS&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个概念出自于 &lt;strong&gt;命令与查询分离（CQS, Command Query Separation）&lt;/strong&gt;，出自于 1987 年 Bertrand Meyer 的&lt;object-oriented software=&quot;&quot; construction=&quot;&quot;&gt;《面向对象软件构造》一书，其原始概念是我们可以把对象操作分为：命令（Command）和 查询（Query）两种形式。&lt;/object-oriented&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;命令（Command）：在执行之后，会改变对象的状态。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;查询（Query）：仅仅是查看对象的数据，而不会对对象产生改变。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 &lt;strong&gt;命令查询的责任分离 Command Query Responsibility Segregation&lt;/strong&gt; (简称 CQRS)模式是一种架构体系模式，能够使改变模型的状态的命令和模型状态的查询实现分离。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在单体应用时代，它是读写分离:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.433252427184466&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DicvG64GianWhPeELXyYpEPJfpokPER3fz7gJ7A2nKxLVqSWWNoc0dxZOR68taEVM21xbiaoXcED8JkP01MqPsgiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;824&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而在微服务的时代，就变成了命令查询的责任分离:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5648584905660378&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DicvG64GianWhPeELXyYpEPJfpokPER3fzqfqdfAFoeOrdYzdb2Io9aSVyiaHhSQ0d3haOxia0xAN9t5KL6YtBTpfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;848&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;读写分离解决了什么？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据库的读写分离就是：将数据库分为了主从库，一个主库用于写数据，多个从库完成读数据的操作，主从库之间通过某种机制进行数据的同步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大多数互联网业务，往往读多写少。这时候，数据库的读会首先成为数据库的瓶颈。这时，如果我们希望能够线性的提升数据库的读性能，消除读写锁冲突从而提升数据库的写性能，那么就可以使用读写分离的架构：主从，主主等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MySQL 用的最多的就是主从，主数据库通过 BinLog 同步到从数据库。这就产生了一个问题，数据不一致问题。如果写数据的压力很大，binlog 就会拥塞，从库数据更新不及时，就会读到老旧的脏数据。所以这个方案局限了它的应用范围：只有对一致性要求不高的场景才好使。比如，日志查询，报表等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实现 CQRS&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里讨论是物联网的时序数据的存取场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们分为两个微服务：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;日志查询服务(kratos.logger.service)&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要是开放了 API 用于查询数据库，获取日志数据。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;日志写入服务(kratos.logger.job)&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;订阅 Kafka 的日志数据写入 Topic，写入到时序数据库中去。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Docker 部署开发服务器&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;TimeScaleDB&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;docker pull timescale/timescaledb:latest-pg14&lt;br/&gt;docker pull timescale/timescaledb-postgis:latest-pg13&lt;br/&gt;docker pull timescale/pg_prometheus:latest-pg11&lt;br/&gt;&lt;br/&gt;docker run -itd \&lt;br/&gt;    --name timescale-test \&lt;br/&gt;    -p 5432:5432 \&lt;br/&gt;    -e POSTGRES_PASSWORD=123456 \&lt;br/&gt;    timescale/timescaledb-postgis:latest-pg13&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Kafka&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;docker pull bitnami/kafka:latest&lt;br/&gt;docker pull bitnami/zookeeper:latest&lt;br/&gt;docker pull hlebalbau/kafka-manager:latest&lt;br/&gt;&lt;br/&gt;docker run -itd \&lt;br/&gt;    --name zookeeper-test \&lt;br/&gt;    -p 2181:2181 \&lt;br/&gt;    -e ALLOW_ANONYMOUS_LOGIN=yes \&lt;br/&gt;    bitnami/zookeeper:latest&lt;br/&gt;&lt;br/&gt;docker run -itd \&lt;br/&gt;    --name kafka-standalone \&lt;br/&gt;    --link zookeeper-test \&lt;br/&gt;    -p 9092:9092 \&lt;br/&gt;    -v /home/data/kafka:/bitnami/kafka \&lt;br/&gt;    -e KAFKA_BROKER_ID=1 \&lt;br/&gt;    -e KAFKA_LISTENERS=PLAINTEXT://:9092 \&lt;br/&gt;    -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092 \&lt;br/&gt;    -e KAFKA_ZOOKEEPER_CONNECT=zookeeper-test:2181 \&lt;br/&gt;    -e ALLOW_PLAINTEXT_LISTENER=yes \&lt;br/&gt;    --user root \&lt;br/&gt;    bitnami/kafka:latest&lt;br/&gt;&lt;br/&gt;docker run -itd \&lt;br/&gt;     -p 9000:9000  \&lt;br/&gt;     -e ZK_HOSTS=&quot;localhost:2181&quot; \&lt;br/&gt;     hlebalbau/kafka-manager:latest&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Consul&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;docker pull bitnami/consul:latest&lt;br/&gt;&lt;br/&gt;docker run -itd \&lt;br/&gt;    --name consul-server-standalone \&lt;br/&gt;    -p 8300:8300 \&lt;br/&gt;    -p 8500:8500 \&lt;br/&gt;    -p 8600:8600/udp \&lt;br/&gt;    -e CONSUL_BIND_INTERFACE=&#x27;eth0&#x27; \&lt;br/&gt;    -e CONSUL_AGENT_MODE=server \&lt;br/&gt;    -e CONSUL_ENABLE_UI=true \&lt;br/&gt;    -e CONSUL_BOOTSTRAP_EXPECT=1 \&lt;br/&gt;    -e CONSUL_CLIENT_LAN_ADDRESS=0.0.0.0 \&lt;br/&gt;    bitnami/consul:latest&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Jaeger&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;docker pull jaegertracing/all-in-one:latest&lt;br/&gt;&lt;br/&gt;docker run -d \&lt;br/&gt;    --name jaeger \&lt;br/&gt;    -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \&lt;br/&gt;    -p 5775:5775/udp \&lt;br/&gt;    -p 6831:6831/udp \&lt;br/&gt;    -p 6832:6832/udp \&lt;br/&gt;    -p 5778:5778 \&lt;br/&gt;    -p 16686:16686 \&lt;br/&gt;    -p 14268:14268 \&lt;br/&gt;    -p 14250:14250 \&lt;br/&gt;    -p 9411:9411 \&lt;br/&gt;    jaegertracing/all-in-one:latest&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;测试&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;下载工具&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Postman&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Offset Explorer&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;进行测试&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;测试写&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 Offset Explorer 模拟设备，向 Topic &lt;code&gt;logger.sensor.ts&lt;/code&gt; 发送 JSON 数据:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[{&lt;span&gt;&quot;ts&quot;&lt;/span&gt;: &lt;span&gt;1646409307&lt;/span&gt;, &lt;span&gt;&quot;sensor_id&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;temperature&quot;&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;, &lt;span&gt;&quot;cpu&quot;&lt;/span&gt;:&lt;span&gt;20&lt;/span&gt;}]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;测试读&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 Postman 向日志服务发起 gRPC 请求进行查询。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;技术栈&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Kratos&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;TimeScaleDB&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Kafka&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Consul&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Jaeger&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Entgo&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实例代码&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Postman: &lt;em&gt;https://www.postman.com/downloads/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;Offset Explorer: &lt;em&gt;https://www.kafkatool.com/download.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;Kratos: &lt;em&gt;https://go-kratos.dev/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;TimeScaleDB: &lt;em&gt;https://www.timescale.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;Kafka: &lt;em&gt;https://kafka.apache.org/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;Consul: &lt;em&gt;https://www.consul.io/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;Jaeger: &lt;em&gt;https://www.jaegertracing.io/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;Entgo: &lt;em&gt;https://entgo.io/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;Kratos Examples: &lt;em&gt;https://github.com/go-kratos/examples/tree/main/cqrs&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;p&gt;淺談 CQRS 的實現方法: &lt;em&gt;https://medium.brobridge.com/%E6%B7%BA%E8%AB%87-cqrs-%E5%AF%A6%E7%8F%BE%E6%96%B9%E6%B3%95-3b4fcb8d5c86&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11]&lt;/span&gt;&lt;p&gt;淺談微服務拆分原理: &lt;em&gt;https://medium.brobridge.com/%E6%B7%BA%E8%AB%87%E5%BE%AE%E6%9C%8D%E5%8B%99%E6%8B%86%E5%88%86%E5%8E%9F%E7%90%86-d43fbb33e722&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12]&lt;/span&gt;&lt;p&gt;详解 CQRS 架构模式: &lt;em&gt;https://www.infoq.cn/article/wdlpjosudoga34jutys9&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>54f8d2ac317f00f72d8547d986f7533d</guid>
<title>一分钟快速上手 Curve</title>
<link>https://toutiao.io/k/b2lu4e7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;246&quot; data-ratio=&quot;0.425&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2AnE0HPasg8y2ITqt5X8GXZJLnbTCiaMVUH2s1sJEdIXGbianYXmQTicEJcQyYnd8jxibej8Rwiag6tencfxKrKlKqQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Curve 是云原生计算基金会 (CNCF)  Sandbox 项目，是网易自研和开源的高性能、易运维、云原生的分布式存储系统，由块存储 CurveBS 和文件系统 CurveFS 两部分组成。本文主要介绍如何利用 &lt;/span&gt;&lt;span&gt;&lt;strong&gt;CurveAdm&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;①&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 快速部署一个单机集群，供大家体验 CurveBS/CurveFS。&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86005&quot;&gt;&lt;section&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;CurveAdm 是 Curve 社区为提高系统易用性而设计的工具，其主要用于快速部署和运维 CurveBS/CurveFS 集群，其操作简单，并且拥有丰富的功能以及一些高级特性。相对于 ceph 的部署来说，CurveAdm 对新手更友好，部署速度更快。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;软硬件准备&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1、操作系统&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;table align=&quot;center&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;发行版&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;版本需求&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;Debian&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;9 及以上版本&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;CentOS&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;8 及以上版本&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;📢 &lt;/span&gt;CurveBS 客户端依赖内核 &lt;/span&gt;&lt;span&gt;&lt;strong&gt;nbd&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;②&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 模块，请确保内核版本大于或等于 4.18 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2、网络要求&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前通过 CurveAdm 部署集群有以下网络需求：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、硬件要求&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;部署体验，无硬性要求，你可以通过 2 核 2GB、&lt;/span&gt;&lt;span&gt;20G 可用磁盘空间&lt;/span&gt;&lt;span&gt;虚拟&lt;/span&gt;&lt;span&gt;机来体验部署。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;准备好这些，我们就可以开启部署之旅了。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2AnE0HPasg8y2ITqt5X8GXZJLnbTCiaMVFBPl9ytFiaLJZeN61I2oFUfuqsOgNPzyqS3bKrP14JvttoS7XwEDISA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;部署步骤&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第 1 步：环境准备&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;CurveBS/CurveFS 客户端分别依赖内核 nbd/fuse 模块，请确保内核已加载对应模块，你可以根据要体验的系统，选择以下相应的命令进行检测：&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sudo lsmod | &lt;span class=&quot;code-snippet__keyword&quot;&gt;grep&lt;/span&gt; nbd&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sudo lsmod | &lt;span class=&quot;code-snippet__keyword&quot;&gt;grep&lt;/span&gt; fuse&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;📢  &lt;/span&gt;特别需要注意的是，本文章是为了快速体验 Curve 系统，所以只需给定最低要求环境即可，如果你想测试性能或在线上使用我们的 Curve 系统，可参考文章最后的 FAQ。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第 2 步：安装依赖&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;CurveBS/CurveFS 所有服务都运行在 Docker 容器内，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;你可以运行以下命令来检测，确保 Docker Daemon 已经运行：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;sudo&lt;/span&gt; docker run --rm hello-world&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这个命令会下载一个测试映像，并在容器中运行它。当容器运行时，它打印一条消息并退出。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第 3 步：安装 CurveAdm&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;CurveAdm 支持一键安装，默认安装路径为当前用户主目录下的 .curveadm 目录，即 ~/.curveadm&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;bash -c &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&lt;span class=&quot;code-snippet__variable&quot;&gt;$(curl -fsSL https://curveadm.nos-eastchina1.126.net/script/install.sh)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre&gt;&lt;br/&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第 4 步：启动 playground 集群&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;📢  请注意&lt;/span&gt;&lt;span&gt;确保执行 playground 的用户有  sudo 权限，因为我们需要去操作容器并且有挂卸载的操作，这些都需要 root 权限，否则可以导致此命令一直在等待权限认证，你可以通过运行以下命令来验证当前用户是否有 sudo 权限：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;sudo&lt;/span&gt; ls&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre/&gt;&lt;p&gt;&lt;span&gt;执行以下命令可一键启动一个 CurveBS 的 playground，该命令可能需要几十秒的耗时：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;curveadm&lt;/span&gt; playground run --kind curvebs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre/&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;执行以下命令可一键启动一个 CurveFS 的 playground，该命令可能需要几十秒的耗时：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;curveadm&lt;/span&gt; playground run --kind curvefs --mountpoint /path/to/mount&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果部署成功，将会输出类似 &lt;span&gt;&lt;span&gt;Playground &#x27;playground-curvebs-x&#x27; successfully deployed ^_^.&#x27;&lt;/span&gt;&lt;/span&gt; 的字样。&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第 5 步：使用我们的 playground&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre/&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;如果你启动的是 CurveBS 集群，那么你在本地就能看到对应的 &lt;/span&gt;&lt;span&gt;nbd&lt;/span&gt;&lt;span&gt; 设备：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;lsblk&lt;/span&gt; | grep nbd&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;你可以像使用本地磁盘一样去使用它，在这里我们将它格式化成 ext4 文件系统，并挂载到指定目录：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;sudo&lt;/span&gt; mkfs.ext4 /dev/nbd0  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sudo mount /dev/nbd0 /path/to/mount&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;section&gt;&lt;span&gt;&lt;pre/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果你启动的是 CurveFS 集群，那么在指定的挂载点，你就可以像使用本地文件系统一样使用我们的 CurveFS 了。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;📢 支持 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;CurveBS &lt;/span&gt;&lt;span&gt;和 &lt;/span&gt;&lt;span&gt;CurveFS &lt;/span&gt;&lt;span&gt;一&lt;/span&gt;&lt;span&gt;起部署，同时运行；&lt;/span&gt;&lt;span&gt;你可以本地同时运行多个 CurveBS、CurveFS 的 playground &lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2AnE0HPasg8y2ITqt5X8GXZJLnbTCiaMVTWlYUXeOepmcIzljtiaEXZ6odmPra9oMxiahicic52TaAXpSbCBsJS9SYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;。&lt;/span&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;FAQ&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q1: 在体验完后，想进一步部署一个集群用于测试？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你可以根据我们 &lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CurveAdm WiKi&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;③&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 部署一个单机或多机集群，WiKi 中详细记载了部署的每一个步骤。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q2: 如何管理运维部署的集群？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;CurveAdm WiKi 中记载了常规的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;运维操作&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;④&lt;/span&gt;、以及&lt;/span&gt;&lt;span&gt;&lt;strong&gt;升级服务&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;⑤&lt;/span&gt;、&lt;/span&gt;&lt;span&gt;&lt;strong&gt;扩容集群&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;⑥&lt;/span&gt;等高级特性，你可以翻阅我们的 WiKi 找到你所需要的信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Q3: &lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;在部署集群过程中，遇到了无法解决问题，我该怎么办&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;？&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;Curve 社区目前正在推动完善部署运维工具 CurveAdm，我们的目标是用户部署运维零问题，为了实现这一目标，后续 CurveAdm 将推出一系列优化改进措施，如错误状态码、完善的环境检测等。&lt;span&gt;当然了&lt;/span&gt;&lt;span&gt;，在当前状态下，你如果在部署运维过程中遇到了无法解决的问题&lt;/span&gt;&lt;span&gt;，欢迎进入&lt;/span&gt;&lt;span&gt; Curve 社区群交流。&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;参考&lt;span&gt;①&lt;/span&gt;：&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;https://github.com/opencurve/curveadm&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;参考&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;②&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span/&gt;：&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;https://en.wikipedia.org/wiki/Network_block_device&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;参&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;考&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;③&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;：&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;https://github.com/opencurve/curveadm/wiki&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;参&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;考&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;④&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;：&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;https://github.com/opencurve/curveadm/wiki/maintain-curve&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;参&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;考&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;⑤&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;：&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;https://github.com/opencurve/curveadm/wiki/upgrade-curve&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;参&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;考&lt;span&gt;⑥&lt;/span&gt;：&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;https://github.com/opencurve/curveadm/wiki/scale-curve&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2AnE0HPasgicWbwTlMPoOSibuN4f2axS00ibibI8ZiaDde0CiclwlEHaJKCUTSRRialVhasQr7x9jdAXCZrTsVvDziaC8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;40&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;关于 Curve &lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;Curve 是一款高性能、易运维、云原生的开源分布式存储系统。可应用于主流的云原生基础设施平台：对接 OpenStack 平台为云主机提供高性能块存储服务；&lt;span&gt;对接&lt;/span&gt; Kubernetes 为其提供 RWO、RWX 等类型的持久化存储卷；&lt;span&gt;对接&lt;/span&gt; PolarFS 作为云原生数据库的高性能存储底座，完美支持云原生数据库的存算分离架构。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Curve 亦可作为云存储中间件使用 S3 兼容的对象存储作为数据存储引擎，为公有云用户提供高性价比的共享文件存储。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16099898624197=&quot;rgba(85, 188, 138, 0.1)&quot; data-darkmode-original-bgcolor-16099898624197=&quot;#fff|rgba(85, 188, 138, 0.1)&quot; data-darkmode-color-16099898624197=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16099898624197=&quot;#fff|rgb(89, 89, 89)&quot; data-darkmode-bgcolor-16103621871051=&quot;rgba(85, 188, 138, 0.1)&quot; data-darkmode-original-bgcolor-16103621871051=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgba(85, 188, 138, 0.1)&quot; data-darkmode-color-16103621871051=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16103621871051=&quot;#fff|rgb(43, 43, 43)|rgb(89, 89, 89)|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16119193857331=&quot;rgba(85, 188, 138, 0.1)&quot; data-darkmode-original-bgcolor-16119193857331=&quot;#fff|rgba(85, 188, 138, 0.1)&quot; data-darkmode-color-16119193857331=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16119193857331=&quot;#fff|rgb(89, 89, 89)|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16151263377419=&quot;rgba(112, 0, 0, 0.039999999999999994)&quot; data-darkmode-original-bgcolor-16151263377419=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)&quot; data-darkmode-color-16151263377419=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16151263377419=&quot;#fff|rgb(43, 43, 43)|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16354216325359=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16354216325359=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16354216325359=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16354216325359=&quot;#fff|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16452592280728=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16452592280728=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16452592280728=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16452592280728=&quot;#fff|rgb(141, 141, 141)&quot;&gt;GitHub&lt;/strong&gt;&lt;span&gt;：https://github.com/opencurve/curve&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16099898624197=&quot;rgba(85, 188, 138, 0.1)&quot; data-darkmode-original-bgcolor-16099898624197=&quot;#fff|rgba(85, 188, 138, 0.1)&quot; data-darkmode-color-16099898624197=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16099898624197=&quot;#fff|rgb(89, 89, 89)&quot; data-darkmode-bgcolor-16103621871051=&quot;rgba(85, 188, 138, 0.1)&quot; data-darkmode-original-bgcolor-16103621871051=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgba(85, 188, 138, 0.1)&quot; data-darkmode-color-16103621871051=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16103621871051=&quot;#fff|rgb(43, 43, 43)|rgb(89, 89, 89)|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16119193857331=&quot;rgba(85, 188, 138, 0.1)&quot; data-darkmode-original-bgcolor-16119193857331=&quot;#fff|rgba(85, 188, 138, 0.1)&quot; data-darkmode-color-16119193857331=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16119193857331=&quot;#fff|rgb(89, 89, 89)|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16151263377419=&quot;rgba(112, 0, 0, 0.039999999999999994)&quot; data-darkmode-original-bgcolor-16151263377419=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)&quot; data-darkmode-color-16151263377419=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16151263377419=&quot;#fff|rgb(43, 43, 43)|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16354216325359=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16354216325359=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16354216325359=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16354216325359=&quot;#fff|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16452592280728=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16452592280728=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16452592280728=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16452592280728=&quot;#fff|rgb(141, 141, 141)&quot;&gt;微信群：&lt;/strong&gt;&lt;span&gt;请搜索添加或搜索群助手微信号 &lt;/span&gt;&lt;span&gt;OpenCurve_bot&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong data-darkmode-bgcolor-16099898624197=&quot;rgba(85, 188, 138, 0.1)&quot; data-darkmode-original-bgcolor-16099898624197=&quot;#fff|rgba(85, 188, 138, 0.1)&quot; data-darkmode-color-16099898624197=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16099898624197=&quot;#fff|rgb(89, 89, 89)&quot; data-darkmode-bgcolor-16103621871051=&quot;rgba(85, 188, 138, 0.1)&quot; data-darkmode-original-bgcolor-16103621871051=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgba(85, 188, 138, 0.1)&quot; data-darkmode-color-16103621871051=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16103621871051=&quot;#fff|rgb(43, 43, 43)|rgb(89, 89, 89)|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16119193857331=&quot;rgba(85, 188, 138, 0.1)&quot; data-darkmode-original-bgcolor-16119193857331=&quot;#fff|rgba(85, 188, 138, 0.1)&quot; data-darkmode-color-16119193857331=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16119193857331=&quot;#fff|rgb(89, 89, 89)|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16151263377419=&quot;rgba(112, 0, 0, 0.039999999999999994)&quot; data-darkmode-original-bgcolor-16151263377419=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)&quot; data-darkmode-color-16151263377419=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16151263377419=&quot;#fff|rgb(43, 43, 43)|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16354216325359=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16354216325359=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16354216325359=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16354216325359=&quot;#fff|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16452592280728=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16452592280728=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16452592280728=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16452592280728=&quot;#fff|rgb(141, 141, 141)&quot;/&gt;&lt;strong data-darkmode-bgcolor-16099898624197=&quot;rgba(85, 188, 138, 0.1)&quot; data-darkmode-original-bgcolor-16099898624197=&quot;#fff|rgba(85, 188, 138, 0.1)&quot; data-darkmode-color-16099898624197=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16099898624197=&quot;#fff|rgb(89, 89, 89)&quot; data-darkmode-bgcolor-16103621871051=&quot;rgba(85, 188, 138, 0.1)&quot; data-darkmode-original-bgcolor-16103621871051=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgba(85, 188, 138, 0.1)&quot; data-darkmode-color-16103621871051=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16103621871051=&quot;#fff|rgb(43, 43, 43)|rgb(89, 89, 89)|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16119193857331=&quot;rgba(85, 188, 138, 0.1)&quot; data-darkmode-original-bgcolor-16119193857331=&quot;#fff|rgba(85, 188, 138, 0.1)&quot; data-darkmode-color-16119193857331=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16119193857331=&quot;#fff|rgb(89, 89, 89)|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16151263377419=&quot;rgba(112, 0, 0, 0.039999999999999994)&quot; data-darkmode-original-bgcolor-16151263377419=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)&quot; data-darkmode-color-16151263377419=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16151263377419=&quot;#fff|rgb(43, 43, 43)|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16354216325359=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16354216325359=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16354216325359=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16354216325359=&quot;#fff|rgb(141, 141, 141)&quot; data-darkmode-bgcolor-16452592280728=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16452592280728=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16452592280728=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16452592280728=&quot;#fff|rgb(141, 141, 141)&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;493&quot; data-backw=&quot;515&quot; data-ratio=&quot;0.9557894736842105&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2AnE0HPasgibsiaaoRoMeUK0pNvNUshxufXoUQhUZVr24yXFo86Ag7wNo2SJibkJokwiaqk0yqq9Zys8A3EW0R7zhQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;950&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;文章转载自&lt;/span&gt;&lt;span&gt;OpenCurve&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg4MjgxNDYwMA==&amp;amp;mid=2247485738&amp;amp;idx=1&amp;amp;sn=144daa8b6d7b710604a8d975de80e251&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;点击这里阅读原文了解更多&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;点击这里阅读原文了解更多&lt;/span&gt;&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;161&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;161&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GpkQxibjhkJzPpkLhicNhzmSwjqLibBVVAfP3iac2Tz0xia7MDHx8kzSiaW4I2bW6ZiacRWC7SU8Oml2aoQqC6WtlGVXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CNCF概况（幻灯片）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-copyright=&quot;0&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;161&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;161&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GpkQxibjhkJxyapkOjiazruKNQ7DZ6t8TSh0QSYM4DlI86xnXiayciayIgBUaG8q8lFZ3FsibPJiaeCqAahrKicB220aA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;301&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;扫描二维码联系我们！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;CNCF (Cloud Native Computing Foundation)成立于2015年12月，隶属于Linux  Foundation，是非营利性组织。 &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;&lt;strong&gt;&lt;em&gt;CNCF&lt;/em&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;（&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;strong&gt;&lt;em&gt;云原生计算基金会&lt;/em&gt;&lt;/strong&gt;）致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。我们通过将最前沿的模式民主化，让这些创新为大众所用。请长按以下二维码进行关注。&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-before-oversubscription-url=&quot;https://mmbiz.qpic.cn/mmbiz_png/GpkQxibjhkJyq2qDvc7MWGZxI4RSwuQcDYF9lD2fuOvw9rvdXWTxODu56IibWa0R8mibibhqExqurr6168Wjf2VstQ/640?wx_fmt=png&quot; data-copyright=&quot;0&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;165&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;165&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/GpkQxibjhkJxKPX3Ywf6bvZic6ibE8EzomstVhFq0ua8p8KI8PdVve5Q6YwRzHYQ4j63hKakYPcbqAdDoRHrgcFLg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>74cc2c0b35ba746be7b705342bf2955c</guid>
<title>你真的提升了用户体验？</title>
<link>https://toutiao.io/k/bkjgcwn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;h2 data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;作为开发人员，大家对“提升用户体验”一词并不陌生，甚至有时候自己都会说：“这个操蛋的系统用户体验贼差，就不能好好提升一下用户体验吗？”，但是怎么才算真的提升了用户体验呢？&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;新设计一套炫酷的页面？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重构一下代码？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;让页面白屏时间变短？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现超级丝滑的交互效果？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;不可否认，这些是，但比较片面。因为这些都是站在系统工作人员角度通过技术手段让系统看起来不那么糟糕。除非用户不得不用你的系统，不然实际交付用户使用时仍然会有反馈体验不好的现象出现。&lt;/p&gt;&lt;p&gt;用户量比较大的产品进行版本大升级的时候，都会有很多人跳出来反馈新版本不好用，因为每个人对新事物接受程度是不一样的，如果只站在部分人员的角度分析是否提升了用户体验缺乏理论依据，同时也缺乏数据佐证。庆幸的是，我们有一个很好的指标可以对体验是否提升进行衡量，那就是：&lt;strong&gt;转化率&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;拿普通网站来说，网站上访问者数量 = 通过扩展业务获取新客户数量 + 迎合现有客户继续建立关系数量。这两者都可称为转化渠道，转化渠道决定你的网站是否获得良好的访问量并转化更多的访问者。转化率则是网站推动转化的速度。转化指标对于每个网站是相对唯一的，对于电商，这可能是产品的销售，而对于 B2B，则可能是合格潜在客户的产生。&lt;/p&gt;&lt;p&gt;至此，我们可以看出渠道越优化，转化率就越高，对应变动才能算是提升了用户体验，在数字营销中优化网站渠道的最重要方法之一是 A/B Testing，但绝不只有 A/B Testing。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;渠道优化方案&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;此部分只对方案做部分说明，有兴趣同学可自行翻阅相应资料。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;&lt;span&gt;A/B 测试（A/B Testing）&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;A/B Testing（也称拆分测试）是一种将同一网页的两个变体同时显示给网站访问者的不同细分受众群，并比较哪个变体带来了更多转化的过程。另外 A/B Testing 并不是说它只能用于比较两个方案的好坏，事实上，你完全可以设计多个方案进行测试，比如ＡＢＣ测试，A/B Testing 只是一个习惯的叫法。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;核心思想：&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;多个方案并行测试&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;每个方案只有一个变量不同&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;以某种规则优胜劣汰&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;示例：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.875&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHpmVnClRGATodtVsiaibhZZkAbExe7GYLWxzUJp1Hib6f4L0GgMoODAnGXiaOwibSnwXVvMzMKXV77ZtFw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;832&quot;/&gt;图中对网站某条数据“立即体验”按钮改为“立即参加”按钮。我们如何通过 A/B Testing 方案进行转化分析呢？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1、定清楚转化指标&lt;/strong&gt; 如前面讲的电商平台对应销量、B2B 对应合格潜在用户等。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、根据变体进行用户分流&lt;/strong&gt; 将现存用户采样后随机分流（根据实际情况可进行前端分流或后端分流），向一部分用户推送方案 A 页面，另一部分用户推送方案 B 页面（发现没，有点类似灰度版本切流）。样本计算公式为：&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.33201581027667987&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHpmVnClRGATodtVsiaibhZZkAmYxc2iadiahxJ6ick8ZWentK0VjfKPt7PszEn39oHbWmibaPlLiapnPIgrg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;506&quot;/&gt;其中&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;n 为每组所需样本量，因为 A/B Testing 一般至少 2 组，所以实验所需样本量为 2n。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;α 和 β 分别称为第一类概率和第二类概率，一般分别取 0.05 和 0.2。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Z 为正态分布的分位数函数。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Δ 为两组数值的差异，如转化率从 1% 到 1.5%，那么 Δ 就是 0.5%。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;σ 为标准差，是数值波动性的衡量，σ 越大表示数值波动越厉害。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;从这个公式可以知道，在其他条件不变的情况下，如果实验两组数值差异越大或者数值的波动性越小，所需要的样本量就越小。&lt;/p&gt;&lt;p&gt;当然，我们也可以采用在线工具，如：&lt;span&gt;Evan&#x27;s Awesome A/B Tools&lt;/span&gt;&lt;span&gt;[1]&lt;/span&gt;，计算所需样本。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3、设定测试时间，执行测试&lt;/strong&gt; 规定一段测试时间，比如两周，这两周里分流的用户只能访问被推送的一种方案。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4、根据测试结果，分析转化率&lt;/strong&gt; 通过实际转化指标值分析方案 A 和 B 哪个更优，劣者淘汰。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;多元测试：MVT（Multivariate Testing）&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这是一种对网页的多个部分进行更改，并为变动所有可能的组合创建变体的方法，如图：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.968558282208589&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHpmVnClRGATodtVsiaibhZZkADiarQCpic74kox6YhYBILgGFfWnkuiaeeIKib4C4XHTRVqOMiadCibksNrXw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1304&quot;/&gt;&lt;/p&gt;&lt;p&gt;图中变动为英雄图片和 CTA 颜色两个，两两组合出现 4 种变体。Multivariate Testing 便是对这 4 种变体进行采样分流测试。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;拆分 URL 测试（Split URL Testing）&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;Split URL Testing 指通过流量切分测试托管在不同 URL 上网页的多个版本。Split URL Testing 和 A/B Testing 之间的主要区别在于，在 Split URL Testing 的情况下，变体托管在不同的 URL 上，如图：&lt;img data-ratio=&quot;0.39264990328820115&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHpmVnClRGATodtVsiaibhZZkAmHyZaG6YuxfrV0xYYB8hgjvkuPT37l8xUxDD1dDd3IgbUj8aOjg5pw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1034&quot;/&gt;&lt;/p&gt;&lt;p&gt;实际应用场景中，在仅需前端进行基础更改时，A/B Testing 为首选，但当需要进行重大设计更改且不想触及现有网站设计时，则首选 Split URL Testing。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;多页测试（Multipage Testing）&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;Multipage Testing 类似于 A/B Testing，不同之处在于，您所做的更改不是在单个页面上进行更改，而是在多个页面上一致地实现。像 A/B Testing 一样，多页测试的网站访问者可以分为一个版本或另一个版本。通过跟踪这些访问者与所显示的不同页面交互的方式，可以确定哪种设计风格最有效。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7093558282208589&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHpmVnClRGATodtVsiaibhZZkA07txIpNdKRKdiaH157TnkHK5ER00ukFycslibmXC2pwdmDRwGfKQxOlg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1304&quot;/&gt;&lt;/p&gt;&lt;p&gt;执行多页测试的方法分两种。首先，你可以把你所有的页面作为一个基础整体漏斗，然后对其创建多个不同变体，然后你可以对照基础漏斗对新变体进行测试。这称为“&lt;strong&gt;漏斗多页测试&lt;/strong&gt;”。其次，你可以测试重复元素的添加或删除（例如安全徽章，个人鉴定等）如何影响整个漏斗的转化。这称为“&lt;strong&gt;经典或常规多页测试&lt;/strong&gt;”。&lt;/p&gt;&lt;p&gt;有了上面的优化方案后，再配合频率论（Frequentist）或贝叶斯（Bayesian）等统计学方法便可对本次变体用户感受做较为精准分析，同时也可以预估新用户对系统接受度等指标。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;提升用户体验首先应该关注的对象是“用户”，再者需要有来自“用户”侧的强力数据说明本次变体对用户有正向影响。&lt;/p&gt;&lt;p&gt;最后再抛一个问题：中后台应用中如何衡量用户体验得到了提升？&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于本文&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;来自：ES2049 / merlion&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://juejin.cn/post/6943893770911875079&lt;/span&gt;&lt;/p&gt;&lt;h2 data-id=&quot;heading-13&quot;&gt;最后&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;欢迎关注「&lt;/span&gt;&lt;span&gt;三分钟学前端&lt;/span&gt;&lt;span&gt;」&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2NjUxOTM2Mg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/bwG40XYiaOKmTRcFWKB5pLtwz9auwyvjn6nhiaSydyGVuAfOfGmdpTBaqLJyLHVwDgXKNicS1VHhJSBADHCk2dib4Q/0?wx_fmt=png&quot; data-nickname=&quot;三分钟学前端&quot; data-alias=&quot;&quot; data-signature=&quot;每日三分钟，学习一个前端小 Tip！&quot; data-from=&quot;2&quot; has-insert-preloading=&quot;1&quot; wah-hotarea=&quot;click&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;号内回复：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;「&lt;span&gt;网络&lt;/span&gt;」，自动获取三分钟学前端网络篇小书（90+页）&lt;/section&gt;&lt;section&gt;「&lt;span&gt;JS&lt;/span&gt;」，自动获取三分钟学前端 JS 篇小书（120+页）&lt;/section&gt;&lt;section&gt;「&lt;span&gt;算法&lt;/span&gt;」，自动获取 github 2.9k+ 的前端算法小书&lt;/section&gt;&lt;section&gt;「&lt;span&gt;面试&lt;/span&gt;」，自动获取 github 23.2k+ 的前端面试小书&lt;/section&gt;&lt;section&gt;「&lt;span&gt;简历&lt;/span&gt;」，自动获取程序员系列的 &lt;code&gt;120&lt;/code&gt; 套模版&lt;/section&gt;&lt;section&gt;&lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wx27c980b913cbfb08&quot; data-miniprogram-path=&quot;pages/index/index&quot; data-miniprogram-nickname=&quot;高级前端面试&quot; data-miniprogram-type=&quot;text&quot; data-miniprogram-servicetype=&quot;0&quot; wah-hotarea=&quot;click&quot; href=&quot;&quot;&gt;》》面试官也在看的前端面试资料《《&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;“在看和转发”&lt;/span&gt;&lt;span&gt;就是最大的&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>