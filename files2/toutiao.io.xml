<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>cbb9ac1dc92411698f9c08d5b64336b4</guid>
<title>周末别闲着，快来吧！</title>
<link>https://toutiao.io/k/sat069j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3341cf6f94c0487190d7433a93080b67</guid>
<title>了不起的 Chrome 浏览器（四）：Chrome 92 新增 at 和 randomUUID 方法，Canvas 支持 Display P3 色域</title>
<link>https://toutiao.io/k/a333hks</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;7月20日正式发布的Chrome 92，带来了哪些有意思的新特性呢？&lt;/p&gt;&lt;h1 data-lake-id=&quot;34ddb71c8f8a82125eaf87ae6d4ea601&quot;/&gt;&lt;h1 data-lake-id=&quot;34ddb71c8f8a82125eaf87ae6d4ea601&quot;&gt;背景&lt;/h1&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;十多年来，Web技术突飞猛进，其中Chrome功不可没，了解Chrome可以帮助我们理解整个行业的发展趋势。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;因此，我将以《了不起的Chrome浏览器》为题，对Chrome的每一个版本的重要特性进行详细解读，同时分享一些自己的一些思考：&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;通过专注于Chrome的写作，既可以可以提高我的专业能力，也可以提高个人影响力。&lt;span&gt;我的目标是在2025年出版一本关于Chrome的书&lt;/span&gt;，毕竟出版自己的书每一个写作者最高的追求。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;我是寒雁，一个热爱写代码和写文章的程序员，欢迎关注我的微信公众号寒雁Talk。&lt;/p&gt;&lt;h1 data-lake-id=&quot;029f19ae2d05a034702f31a96a8d5500&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1 data-lake-id=&quot;029f19ae2d05a034702f31a96a8d5500&quot;&gt;TL;TR&lt;/h1&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;f47e54ae4cb1ddca0278a84be2ace458&quot; start=&quot;1&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Chrome 92最大的亮点是什么？说实话，&lt;span&gt;Chrome92并没有什么特别大的亮点&lt;/span&gt;，不过Array.prototype.at()还是挺实用的&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Chrome 92是哪天发布的？2021-07-20&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Chrome 92更新了多少个特性？14个，具体有哪些特性可以查看Chrome Platform Status&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Chrome 92将使用哪个版本的V8引擎？9.2&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我感兴趣的新特性依次有哪些？&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-lake-id=&quot;a307463c5681d2c5807a63eedde86843&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1 data-lake-id=&quot;a307463c5681d2c5807a63eedde86843&quot;&gt;详细解读&lt;/h1&gt;&lt;h3 data-lake-id=&quot;da2607b47c7f128fa56b5519712d9475&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-lake-id=&quot;da2607b47c7f128fa56b5519712d9475&quot;&gt;Array.prototype.at()&lt;/h3&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;想必大家都写过这样的代码，使用数组长度减1来获取过数组的最后一个元素：&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; A = [&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;]; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;console&lt;/span&gt;.log(A[A.length - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;作为一个有代码洁癖的人，这样的写法冗长而奇怪。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;现在好了，Chrome 92支持Array.prototype.at()了：&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; A = [&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;]; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;console&lt;/span&gt;.log(A.at(&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;代码少了5个字符，可读性也提高了很多，一举两得!&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;另外，除了Array，String与TypedArray也支持了at方法。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;at方法对应的ECMAScript提案&lt;span&gt;proposal-relative-indexing-method已经处于stage 3&lt;/span&gt;，目测最快明年将会纳入ECMAScript规范。&lt;/p&gt;&lt;h3 data-lake-id=&quot;3d00855a8c2a513153da594cee6bb54b&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-lake-id=&quot;3d00855a8c2a513153da594cee6bb54b&quot;&gt;crypto.randomUUID()&lt;/h3&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;日常开发中，我们经常会需要生成唯一ID，例如给每个用户生成唯一ID。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;npm包uuid的周下载量高达4000万+，我在自己的代码里也搜到了uuid模块：&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F928098%2F1626511048566-ef600748-9b21-4dfe-a9bc-62ce08d5656d.jpeg%22%2C%22originWidth%22%3A616%2C%22originHeight%22%3A302%2C%22name%22%3A%22uuid.jpeg%22%2C%22size%22%3A32197%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A23.600388%2C%22y%22%3A26.034937%2C%22width%22%3A89.497292%2C%22height%22%3A19.291891%2C%22text%22%3A%22SEARCH%22%7D%2C%7B%22x%22%3A573.852%2C%22y%22%3A93.99997%2C%22width%22%3A17.957750000000033%2C%22height%22%3A17.957750000000033%2C%22text%22%3A%22*%22%7D%2C%7B%22x%22%3A477.27963%2C%22y%22%3A96.268555%2C%22width%22%3A29.191899999999976%2C%22height%22%3A20.685035%2C%22text%22%3A%22Aa%22%7D%2C%7B%22x%22%3A519.5305%2C%22y%22%3A96.96076%2C%22width%22%3A31.716600000000085%2C%22height%22%3A24.78455000000001%2C%22text%22%3A%22Abl%22%7D%2C%7B%22x%22%3A35.097496%2C%22y%22%3A101.07541%2C%22width%22%3A50.082863999999994%2C%22height%22%3A18.37362999999999%2C%22text%22%3A%22uuid%22%7D%2C%7B%22x%22%3A28.598978%2C%22y%22%3A167.71324%2C%22width%22%3A435.798882%2C%22height%22%3A24.737089999999995%2C%22text%22%3A%2215resultsin15files-Openineditor%22%7D%2C%7B%22x%22%3A85.401146%2C%22y%22%3A223.99823%2C%22width%22%3A163.973474%2C%22height%22%3A30.528879999999987%2C%22text%22%3A%22package.json%22%7D%2C%7B%22x%22%3A44.734283%2C%22y%22%3A229.47353%2C%22width%22%3A29.592957000000006%2C%22height%22%3A11.546019999999999%2C%22text%22%3A%22npm%22%7D%2C%7B%22x%22%3A71.00187%2C%22y%22%3A269.1899%2C%22width%22%3A174.92923%2C%22height%22%3A23.32556999999997%2C%22text%22%3A%22uuid%5C%22%3A%5C%227.0.3%5C%22%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22SEARCH%20*%20Aa%20Abl%20uuid%2015resultsin15files-Openineditor%20package.json%20npm%20uuid%5C%22%3A%5C%227.0.3%5C%22%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A308%2C%22height%22%3A151%2C%22id%22%3A%22yiIrd%22%7D&quot;&gt;&lt;img data-height=&quot;151px&quot; data-ratio=&quot;0.4902597402597403&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UnKibSlmUib8h6VL1oK56FSAYR5QY0f3dDVkuZIib2I3Juichaeajo39ia5Qa5WbPrHAsglUbUGwjgHe4UfqtjZvyEg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;616&quot; title=&quot;uuid.jpeg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;Chrome 92新增了crypto.randomUUID()方法，用于生成符合RFC 4122 version 4规范的唯一ID。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;可惜的是，由于Firefox、Safari等其他浏览器没有支持，因此前端项目中将依然需要使用uuid模块。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;不过，Node.js 14.17.0已经支持了crypto.randomUUID()方法，而生成唯一ID通常是在后端进行，因此目测uuid模块的使用量将会有所降低。使用官方提供的API更加安全，且性能更好。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;要保证随机生成的UUID的唯一性和安全性，是一个看起来简单，但实际非常复杂的问题。图灵奖得主Donald Knuth在他的鸿篇巨制《The Art of Computer Programming》中花了一个章节来讨论随机数：&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;It is not easy to invent a foolproof source of random numbers.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;我们所熟悉的Math.random()其实名不副实，并不随机，它是一个伪随机数生成器（Pseudo Random Number Generator，简称PRNG），当我们指定同一个random_seed启动时，它生成的随机数序列是一样的！&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;node --random_seed=&lt;span class=&quot;code-snippet__number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Welcome to Node.js v14&lt;span class=&quot;code-snippet__number&quot;&gt;.17&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.3&lt;/span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Type &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;.help&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; more information.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Math&lt;/span&gt;.random()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0.5254990606499601&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Math&lt;/span&gt;.random()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0.963056226312738&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;node --random_seed=&lt;span class=&quot;code-snippet__number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Welcome to Node.js v14&lt;span class=&quot;code-snippet__number&quot;&gt;.17&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.3&lt;/span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Type &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;.help&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; more information.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Math&lt;/span&gt;.random()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0.5254990606499601&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Math&lt;/span&gt;.random()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0.963056226312738&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;也就是说，只要黑客获取了random_seed，就能预测Math.random()所返回的&quot;随机序列&quot;，是不是有点可怕？&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;当然，获取random_seed并不是一件简单的事情，不过并非没有可能，因为random_seed不是随机的，而是依赖于一些内部状态，比如浏览器的启动时间、某个变量的虚拟内存地址，这些内部状态是有规律可循的。2014年，Andriod版的Firefox就曾被人破解过Math.random()。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;span&gt;因此，在对安全性要求比较高的场景中，不要使用Math.random()。&lt;/span&gt;CVE中有多个安全漏洞是与Math.random()相关。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;为了满足大家对于更加安全的加密API的需求，社区提供了很多解决方案，其中最出名的为CryptoJS。但是，对于加密这种CPU密集型应用，纯JavaScript的方案存在比较严重的性能问题，且不够安全。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;因此，2017年，W3C发布了Web Cryptography API，提供更加安全、性能更好的加密API。其中，crypto.getRandomValues()可以用于生成更加安全的随机数，它是密码学安全伪随机数生成器（Cryptographically Secure Pseudo Random Number Generator，简称CSPRNG）。其实，CSPRNG也不能生成真正的随机数，只是它可以通过一些严格的密码学测试，可以认为是安全的。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;51f50693f66baf1ce01a6330f88e7839&quot;&gt;crypto.randomUUID()是基于CSPRNG的，因此也可以认为是安全的。&lt;/p&gt;&lt;p data-lake-id=&quot;346b270359ecdd244fdaa1f36858afd3&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a4156fd03a3b349d8aa16ede9ded4d06&quot;&gt;crypto.randomUUID()虽然放在cypto对象中，但是它还并未被纳入Web Cryptography API，因此还不是W3C标准。&lt;/p&gt;&lt;h3 data-lake-id=&quot;c52720c8c1e0172fb7ca680a89b969c5&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-lake-id=&quot;c52720c8c1e0172fb7ca680a89b969c5&quot;&gt;Canvas color management&lt;/h3&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;目前，2D canvas仅支持陈旧的sRGB色域，但是现在的屏幕和相机早就支持更大的色域了。&lt;/p&gt;&lt;p data-lake-id=&quot;21da956303b1d9a8d156c67dc2bf6ea5&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4a0c96cf3239c96adb1866c928625585&quot;&gt;色域是什么呢？它的英文名是Color Gamut或者Color Space，是设备（显示器、投影仪、打印机）可以表达的颜色范围。人眼可见的颜色范围是有限的，而设备能表达的颜色范围是人眼可见的颜色范围的子集，而不同色域标准比如sRGB和Display P3能表达的颜色范围也不一样。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;Chrome 92支持在创建2D canvas时，使用Display P3色域，这将增强2D canvas的颜色还原能力。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;canvas.getContext(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;2d&#x27;&lt;/span&gt;, { &lt;span class=&quot;code-snippet__attr&quot;&gt;colorSpace&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;display-p3&quot;&lt;/span&gt;} );&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;Display P3的色域比sRGB的色域大25%，当我们对比两者时，会发现Display P3要比sRGB明亮很多，区别非常明显：&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F928098%2F1626597197633-2387609e-2caf-4c26-84c2-f66df9bba5dc.jpeg%22%2C%22originWidth%22%3A1920%2C%22originHeight%22%3A1080%2C%22name%22%3A%22sRGB_vs_Display%20P3jpg.jpg%22%2C%22size%22%3A317566%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1269.397%2C%22y%22%3A960.95935%2C%22width%22%3A340.9797000000001%2C%22height%22%3A70.90105000000005%2C%22text%22%3A%22DisplayP3%22%7D%2C%7B%22x%22%3A389.8314%2C%22y%22%3A971.4579%2C%22width%22%3A174.87640000000005%2C%22height%22%3A53.52499999999998%2C%22text%22%3A%22SRGB%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22DisplayP3%20SRGB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A480%2C%22height%22%3A270%2C%22id%22%3A%22rmkeH%22%7D&quot;&gt;&lt;img data-height=&quot;270px&quot; data-ratio=&quot;0.5626666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UnKibSlmUib8h6VL1oK56FSAYR5QY0f3dDhCOGwuyTXAxbwxich3BJFnlhWLc7mVIVncavFu4IicqySzLzFssCHibbA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1500&quot; title=&quot;sRGB_vs_Display P3jpg.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;图片来源：Get Started with Display P3&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;span&gt;对于图像、视频、设计、游戏、地图、外卖、电商等应用，准确还原颜色的重要性不言而喻&lt;/span&gt;。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;大多数情况下，买家秀和卖家秀的明显差异是由于卖家过度PS导致的，但是也有可能是颜色没有得到准确还原导致的。&lt;/p&gt;&lt;h3 data-lake-id=&quot;1eab0fba397f46ead93f4c3e8c9751c0&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-lake-id=&quot;1eab0fba397f46ead93f4c3e8c9751c0&quot;&gt;Web Bluetooth manufacturer data filter&lt;/h3&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;早在6年前，Chrome就开始开发Web Bluetooth了，不过直到今天，Web Bluetooth也没有成为W3C标准，Safari和Firefox也没有支持Web Bluetooth，这就有点尴尬了。&lt;/p&gt;&lt;p data-lake-id=&quot;e0b33ae1135656caa4d7bbc7ec4897a5&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;510d8be2365cf3b900b008f291b30360&quot;&gt;&lt;span&gt;Chrome以一己之力推动了众多Web技术标准的进步，但是从Web Bluetooth也可以看出，其过程还是比较艰辛的，需要时间和耐心。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;不过，为了让Web可以获得原生应用一样的能力，Chrome也不会放弃Web Bluetooth。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;使用Web Bluetooth，Web应用也可以连接并控制各种蓝牙设备，比如彩灯、玩具车、LED、无人机，还是很有意思的：&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p/&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;视频来源：WebBluetooth demos for Bluetooth.rocks&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;Chrome 92为Web Bluetooth新增了按照蓝牙设备的制造商来过滤蓝牙设备的能力。这样，对于一些针对特定产商的Web应用，就可以只给用户展示对应产商的蓝牙设备。&lt;/p&gt;&lt;h1 data-lake-id=&quot;e0ff11f66e8207127bf9c4be254c79c2&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1 data-lake-id=&quot;e0ff11f66e8207127bf9c4be254c79c2&quot;&gt;总结&lt;/h1&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;本篇是《了不起的Chrome浏览器》的第4篇，坚持更新这个系列的博客还是挺难的，一方面工作太忙了，另一方面Chrome 92可以写的内容确实不多，我也不是很熟悉，需要很多时间挖掘。但是，不管怎样，我还是会坚持写下去，因为每次都能学到一些新的东西。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;写博客的过程中，我会阅读大量的参考资料，并且记录阅读笔记，所以我阅读的时间是远远大于写作的时间的。如果不是为了写作，我并不会对某一个知识点进行深究，&lt;span&gt;这也是写作最大的好处，通过输入倒逼输出，倒逼自己进行深度学习&lt;/span&gt;。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;对于比较权威，内容很有启发的参考资料，我都会列到文章后面。这样既是对作者版权的尊重，也是方便自己和读者去阅读相关资料。某个知识点真正优质的内容是非常稀缺的，要找到这些资料是需要一些Google技巧的：准确变换不同的搜索关键词，不断递归地挖掘最原始、最权威的第一手资料。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;另外，我写博客都不是几个小时或者几天时间写完的，长篇的博客写作时间长达一个月，所以改动会很频繁，整个写作过程语雀都会有修改记录。这样写看起来很累，但是其实是把一个大的任务拆分成了一个个小任务，反而轻松很多。另外，每一次写都会有一些新的发现、新的灵感，这对于写作也是非常有帮助的。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;欢迎关注寒雁Talk公众号，关注《了不起的Chrome浏览器》系列博客，与我一起见证大前端的星辰大海！&lt;/p&gt;&lt;h1 data-lake-id=&quot;66e83f284b44207f4edb9c154b825666&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1 data-lake-id=&quot;66e83f284b44207f4edb9c154b825666&quot;&gt;参考资料&lt;/h1&gt;&lt;p data-lake-id=&quot;4b8cf913d96df71dd5bbba164fdbd7ff&quot;&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;a49861708177b3fa3e4972a9e227ecbf&quot; start=&quot;1&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI2OTI0Nw==&amp;amp;mid=2247483736&amp;amp;idx=1&amp;amp;sn=48b87e3902fe8f6752aae18b9fe2a18d&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;了不起的Chrome浏览器（1）：Chrome 89开启Web应用的物联网时代&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI2OTI0Nw==&amp;amp;mid=2247483765&amp;amp;idx=1&amp;amp;sn=cebe653e89518574a785c32b6aad88aa&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;了不起的Chrome浏览器（2）：Chrome 90将默认使用HTTPS，Web更安全了&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI2OTI0Nw==&amp;amp;mid=2247483785&amp;amp;idx=1&amp;amp;sn=e66890ec12bc3f9ffa88e8712283abbc&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;了不起的Chrome浏览器（3）：Chrome 91支持WebAssembly SIMD，加&lt;/a&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI2OTI0Nw==&amp;amp;mid=2247483785&amp;amp;idx=1&amp;amp;sn=e66890ec12bc3f9ffa88e8712283abbc&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;Web在AI等领域的应用&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Chrome 92: Web Apps as File Handlers, New JavaScript Features, and More&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;V8 release v9.2&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;at method for relative indexing&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;crypto.randomUUID is three times faster uuid.v4&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Overtaking Firefox Profiles: Vulnerabilities in Firefox for Android&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;TIFU by using Math.random()&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A Brief History of Random Numbers&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;[V8 Deep Dives] Random Thoughts on Math.random()&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;《Art of Computer Programming, Volume 2: Seminumerical Algorithms, 3rd Edition》Chapter 3: Random Numbers&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Securing JavaScript applications with the Web Cryptography API&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Update on Web Cryptography&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Get Started with Display P3&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Improving Color on the Web&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Pixar in a Box: Color science&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;An Introduction To WebBluetooth&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;WebBluetooth demos for Bluetooth.rocks&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-lake-id=&quot;876710649adfccbc2696bad88f733ccb&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1 data-lake-id=&quot;876710649adfccbc2696bad88f733ccb&quot;&gt;招聘&lt;/h1&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;阿里巴巴业务平台事业部长期招聘P6及以上前端大佬，参与建设最前沿的阿里前端生态系统，推动行业技术发展，内推地址：hanyan.lk@alibaba-inc.com&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;欢迎大家关注我的微信公众号寒雁Talk。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fwebp%2F928098%2F1619341927214-9586185e-dfc0-4bf1-a2b8-222f7059c1bd.webp%22%2C%22originWidth%22%3A1080%2C%22originHeight%22%3A394%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A540%2C%22height%22%3A197%2C%22id%22%3A%22pfcLA%22%7D&quot;&gt;&lt;img data-height=&quot;197px&quot; data-ratio=&quot;0.3648148148148148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/UnKibSlmUib8h6VL1oK56FSAYR5QY0f3dDzLPm5ibCBjlHgrQYNjjL7OQ02gicezTDy8SUt9MibmxLhWQ2VI2TZKz3A/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1080&quot; title=&quot;image&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>415d8d9c97561b0c489ee80f620229a3</guid>
<title>基于开源工具的人生管理</title>
<link>https://toutiao.io/k/e2ie57j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry-content&quot; itemprop=&quot;articleBody&quot;&gt;&amp;#13;
&lt;p&gt;我在《&lt;a href=&quot;https://www.bmpi.dev/self/gtd-tools-i-used/&quot;&gt;我的时间管理工具&lt;/a&gt;》与《&lt;a href=&quot;https://www.bmpi.dev/self/note-system/&quot;&gt;我的笔记系统&lt;/a&gt;》中分享过我不断演进的时间管理工具与笔记系统。在使用这些系统多年后，始终有个困惑萦绕在我耳边，那就是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单纯的记录时间、笔记和资金是一种碎片化的行为，容易导致过于追求细节而忘掉全局，让自己成为一个忙碌的战略懒人。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;时间管理、记账、记笔记、学习、写作、阅读、交流这些行为都不是最终目的，它们只是一种实现个人长期目标的辅助方法，如果做这些事对长期目标毫无帮助，那没必要浪费时间去做。&lt;/p&gt;
&lt;p&gt;虽然我做了大量的时间与资金开销记录，但我也很难评估这些开销对实现长期目标有何影响。这种困扰可以看作个人时间管理的哥德巴赫猜想：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我知道我的时间有一半都被浪费掉，但就是不知道哪一半。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;想解决这个问题，就得简化问题的复杂度，这个问题其实等价于以下两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;今天我做了啥？&lt;/li&gt;
&lt;li&gt;做这些事对我的长期目标有什么帮助？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经过一段时间的思考，我有了以下的简单模型去解决这个问题。让我们先对问题进行建模。&lt;/p&gt;
&lt;h3&gt;问题建模&lt;/h3&gt;
&lt;p&gt;如果把人看作一个 Machine，这个 Machine 有输入有输出。最初这个 Machine 只拥有时间维度，逐渐它拥有了技能维度，同时积累了金钱维度。如果把时间、技能与金钱看作它的输入端，那它输出端就是金钱、技能与影响力维度。其中金钱和技能在输入与输出间自循环，一般是正向的。我们的金钱和技能都会随着输入与输出的循环而提升，而影响力其实就是知识的变体，我们通过知识去影响别人，通过知识去建立权威与信誉度，最终发展出个人品牌。这个流程看起来非常像是一场 &lt;a href=&quot;https://www.bmpi.dev/self/road_to_life_games/&quot;&gt;打怪升级的游戏&lt;/a&gt;。这些抽象的维度落地后就变为&lt;a href=&quot;https://www.bmpi.dev/self/gtd-tools-i-used/&quot;&gt;时间管理系统（目标、任务与时间）&lt;/a&gt;、&lt;a href=&quot;https://www.bmpi.dev/self/note-system/&quot;&gt;财务管理系统（记账、投资与保险）&lt;/a&gt; 与&lt;a href=&quot;https://www.bmpi.dev/self/build-personal-knowledge-system/&quot;&gt;知识体系（写作、笔记与个人品牌）&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;想象这个场景：通过设定个人 OKR，把一个个 Key Result 拆解为一个个 TODO Task，用时间管理工具去追踪这些 Task 的时间开销，用财务管理去追踪这些 Task 的金钱开销，用知识管理去追踪这些 Task 的笔记，那我们是可以知道每个 Objective 的时间与资金开销，同时也能知道这个 Objective 的输出笔记产物有哪些，最终输出的影响力程度。通过不断优化输入与输出端，我们可以形成高效的学习能力，更好的适应外界的变化。如何优化？就需要记录输入与输出端各个维度的数据。通过记录底层维度数据来把控高层目标的实现。从时间与财务性价比的角度看一个个最终执行的任务，如果某个任务能更好的推动 OKR 目标的实现，那这个任务的投入就有价值。&lt;/p&gt;
&lt;p&gt;理想的情况是，每个人拥有自己的输入与输出各维度的 Dashboard，这样就能从宏观视角看到自己每天做的事情的价值。我们可以量化每件事情的投入产出比，去优化自己的处理流程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/07/1-life-management-based-on-open-source.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;系统设计&lt;/h3&gt;
&lt;p&gt;在对问题建模后，我现在的业务需求是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局的 Tag 系统。该 Tag 系统可以从个人愿景中设定年度 OKR 目标，之后可以对 OKR 的 Key Result 进行细粒度的 Task 拆分。&lt;/li&gt;
&lt;li&gt;任务时间开销追踪。可以对 OKR 目标的某个 Key Result 统计相关的 Task 的总耗费时间。&lt;/li&gt;
&lt;li&gt;任务资金开销追踪。可以对 OKR 目标的某个 Key Result 统计相关的 Task 的总资金成本。&lt;/li&gt;
&lt;li&gt;任务相关笔记关联。可以对 OKR 目标的某个 Key Result 关联相关的 Task 的笔记。&lt;/li&gt;
&lt;li&gt;Dashboard 原始数据生成。可以自动或手动生成个人 OKR 完成度表现报告与财务健康度报告。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下图是一个从个人愿景到 OKR ，之后从 OKR 生成每日待办任务，追踪任务相关时间、资金与笔记的流程图。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/07/2-life-management-based-on-open-source.jpg&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/07/2-life-management-based-on-open-source-768x368.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;系统实现&lt;/h3&gt;
&lt;p&gt;我的系统实现原则是尽可能用开源的工具组合实现我的需求。所以基本原则有以下几条：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工具需必须要开源。不考虑商业版的原因是未知不可控的商业风险，这些工具都是要长期使用的，选择开源方案是性价比最高的。&lt;/li&gt;
&lt;li&gt;工具需要具备可扩展的能力。只有可扩展的系统才具备组合的能力，这样方便后期定制化的使用。&lt;/li&gt;
&lt;li&gt;工具要有一个好的社区。一个好的社区非常重要，可以让我们解决问题的成本下降很多。也可以使用别人提供的现成解决方案。&lt;/li&gt;
&lt;li&gt;数据必须能自托管。数据必须要存放到自己控制的存储（本地和网络都可以）中，隐私第一原则。&lt;/li&gt;
&lt;li&gt;数据尽可能是纯文本。纯文本更简单，就算工具不可用，也可以直接对文本进行读取或修改。长期来看，这点很重要。&lt;/li&gt;
&lt;li&gt;门槛低。最好一天上手，三天精通，我不想花费数周时间去学习一个复杂的工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;现有解决方案&lt;/h4&gt;
&lt;h5&gt;Emacs&lt;/h5&gt;
&lt;p&gt;如果直接选现成的方案，一定有人会提到这篇 《&lt;a href=&quot;http://doc.norang.ca/org-mode.html&quot;&gt;Organize Your Life In Plain Text!&lt;/a&gt;》。这篇超过 10 年历史的文章看起来如 Emacs 一样强大而久远。用 Emacs 做的确符合以上所有基本原则，问题在于我不是一个 Emacs 专家，我不想学数年 Emacs 后再开始解决这个问题。我的思路是花最多不过一周时间去用开源工具组合出一套解决我需求的方案出来。一周时间，我可能连 Emacs 快捷键都记不住。&lt;/p&gt;
&lt;h5&gt;自己动手做&lt;/h5&gt;
&lt;p&gt;当我看到这篇《&lt;a href=&quot;https://beepb00p.xyz/blog-graph.html&quot;&gt;Blog graph&lt;/a&gt;》 和 《&lt;a href=&quot;https://beepb00p.xyz/myinfra.html&quot;&gt;Map of my personal data infrastructure&lt;/a&gt; 》时整个人都震惊了。作者全部自己动手做了一套类似的系统去管理他的人生。如果我有时间的话我一定会这么尝试去做，但是我没时间。&lt;/p&gt;
&lt;h5&gt;工具选择&lt;/h5&gt;
&lt;p&gt;这套系统实现的关键在于需要有 Tag、TODO、笔记管理、记账等功能，记账可以用 Beancount 去做，只需要结合它的 Tag 功能就可以追逐相关 Tag 的开销。那么只需要选择一个具备 Tag 和 TODO 功能的开源笔记工具就行了。这么看来我们可选择的很有限了。&lt;br/&gt;
以最近大热的 Roam Research 为例，它开启了不少笔记工具的新特性：反向链接、右边栏、每日笔记及图数据库。最重要的其实是它的图数据库特性，因为当一个工具具备了数据库的查询能力时，结合插件特性我们可以做出非常多的应用场景。可惜的是它是一个商业软件且不开源（ Notion 也因为这个原因被排除），所以我找到了一个具备它很多特性的开源软件 Logseq，Logseq 本身受很多笔记工具的启发，如 Roam Research、Tiddlywiki、Workflowy 与 Org Mode 。&lt;br/&gt;
在把玩了几天 Logseq 后我发现最强的就是它底层的 DataScript 内存图数据库，可以通过高级查询做很多自定义界面。这样就可以满足我们的很多需求了，比如生成每日待办任务，根据 OKR 生成的 Tag 来过滤和 OKR 相关的任务，统计相关任务的花费时间等。&lt;br/&gt;
目前 Logseq 还在开发插件系统，等插件系统上线后，很多难以实现的功能都可以通过插件来完成。当然我的需求还不需要插件系统的支持，光高级查询就可以满足。&lt;/p&gt;
&lt;h5&gt;我的方案&lt;/h5&gt;
&lt;p&gt;当确定了笔记工具和记账工具后，我最终的方案如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/07/3-life-management-based-on-open-source.jpg&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/07/3-life-management-based-on-open-source-768x617.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各工具的职责如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logseq。负责制定 OKR 、设定相关 Tag 、拆分 OKR 相关任务并追踪任务耗费时间（时间管理）及管理这些任务相关的笔记（笔记系统）。&lt;/li&gt;
&lt;li&gt;Beancount。负责记录相关 Tag 的资金开销，当然也是我的记账工具，最终帮助我生成家庭财务健康度的评估报告。&lt;/li&gt;
&lt;li&gt;Tiddlywiki。负责公开笔记的输出。和 Logseq 的区别在于，我会将 Logseq 的一些笔记整理成可供分享的知识后发布到 Tiddlywiki 上。虽然 Logseq 支持公开某个页面，但是为了更好的区分私人笔记和公开笔记，我还是做了这个区分。&lt;/li&gt;
&lt;li&gt;Amazon AWS。我的个人云平台。目前主要是用 S3 + CloudFront 做博客的图床。&lt;a href=&quot;https://www.bmpi.dev/dev/pulumi-aws-serverless-hugo-site-vists/&quot;&gt;博客的页面访问数据&lt;/a&gt; 也是用 &lt;a href=&quot;https://www.bmpi.dev/dev/guide-to-serverless/&quot;&gt;AWS Serverless&lt;/a&gt; 开发实现的。&lt;/li&gt;
&lt;li&gt;Wayback Machine。类似 OneNote 和 Evernote 的 Web 剪藏工具。它可以永久保存网页的所有变更版本，所以一般无需自己把网页内容下载到笔记工具里，这样会导致笔记工具同步缓慢。我当时用 OneNote 剪藏了很多网页导致其存储达几 GB ，每次换设备同步都很头疼。实际上只需要保存网页链接即可，最多加几句总结的话助记。有 Wayback Machine 再也无需担心网页突然不见了。&lt;/li&gt;
&lt;li&gt;GitHub。项目托管与云存储平台。博客、记账与时间管理的所有数据包括文件（某些文件会放到 Google Drive 里）都存放到 GitHub 公开或私有仓库中。&lt;/li&gt;
&lt;li&gt;Vercel。博客与Wiki托管平台。可直接关联 GitHub 后一键发布网站并自带 CDN 且 &lt;a href=&quot;https://www.bmpi.dev/dev/guide-to-setup-blog-site-with-zero-cost-5/&quot;&gt;国内访问速度不错&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;VSCode。文本编辑工具。一般我会用它完成博客写作、笔记写作（也可用浏览器）、绘图（也可用浏览器）、记账及代码开发。&lt;/li&gt;
&lt;li&gt;Google/Twitter/YouTube。主要的信息获取平台。主动搜索用 Google，被动获取用 Twitter 及 YouTube。中文高质量的信息获取平台越来越少了，很多时候需要用英文才能搜索到我想要的信息。所以搜索技能和英文能力已经算基本能力了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最右侧有颜色的三个框就是我的愿景最关注的三个领域了，我的所有输出都会和这三个领域相关。&lt;/p&gt;
&lt;h3&gt;实现效果&lt;/h3&gt;
&lt;p&gt;使用 Logseq 完成的最终效果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/07/4-life-management-based-on-open-source.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;每天我都可以在 Logseq 系统首页看到以时间四象限划分法而划分的待办任务。具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;📅 在做计划事项。标记为重要的或者和任何 OKR 相关的在做任务。&lt;/li&gt;
&lt;li&gt;🌞 待做计划事项。标记为重要的或者和任何 OKR 相关的待做任务。&lt;/li&gt;
&lt;li&gt;⏰ 在做其他事项。任何不重要的或者和 OKR 不相关的在做任务。&lt;/li&gt;
&lt;li&gt;🚮 待做其他事项。任何不重要的或者和 OKR 不相关的待做任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;底部的区块是和 OKR 相关的信息，让我可以快速了解到目前最重要的 Objective 有哪些。&lt;br/&gt;
当然这个系统远不止如此，更多的信息我会新开一篇文章来介绍如何用 Logseq 实现这些功能。也会写一篇文章介绍如何基于文本使用 Beancount 做复式记账。&lt;/p&gt;
&amp;#13;
&lt;/div&gt;&amp;#13;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2094e5ee3263953a0041587a23becd33</guid>
<title>FPGA 双向口的使用及 Verilog 实现</title>
<link>https://toutiao.io/k/khm01t3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot; usegifprops=&quot;[object Object]&quot;&gt;&lt;p&gt;FPGA的双向口在FPGA的设计应用中使用及其广泛，如I2C接口中的SDA，3线制的SPI接口中的数据线，传统控制总线中的数据总线，以及内存的访问DDR3/DDR4的数据总线等都是双向访问的。双向访问涉及到的概念比较多，如三态的概念，高阻的概念，输入、输出引脚合并，输入输出分时复用等概念，因此初学者往往比较迷惑，觉得无所适从，本文从底层基本原理入手，揭示双向口的机理，并用Verilog程序开发为例一步步引导大家如何使用双向口（inout）的使用与开发。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;双向口涉及的基本模型&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;为了描述方便，这里给两个命名tri0和tri1（tri是三态门（tri-state的缩略写法，其实在Verilog语法中有两个模型与之对应，分别为bufif0，bufif1。图1，2中的oe在传统的三总线结构中，通常对应OE（读）或WE（写）。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;bufif0是三态门模型，其例化格式如下：&lt;/p&gt;&lt;p&gt;bufif0 tri0 (out, in, oe); //tri0是bufif0的例化名。&lt;/p&gt;&lt;p&gt;其电路形态形态如图1：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-ed854df95a54b98b51756ee13978b51b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;549&quot; data-rawheight=&quot;219&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-ed854df95a54b98b51756ee13978b51b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;549&quot; data-rawheight=&quot;219&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-ed854df95a54b98b51756ee13978b51b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-ed854df95a54b98b51756ee13978b51b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;图1 bufif0&lt;/p&gt;&lt;p&gt;在这两个模型中，oe端决定输出的形态，在tri0的模型中，如果oe为’0’， out就得到out0（out0是FPGA内部逻辑产生的值）的值，最终输出到端口PAD上。如果 oe为’1’，此时三态门的输出为高阻状态，在Verilog 描述中用’Z’表示，即三态门与外界是断开状态，如图2所示。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-cd5c553362ebfbf37a06baa3c31d6797_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;517&quot; data-rawheight=&quot;207&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-cd5c553362ebfbf37a06baa3c31d6797_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;517&quot; data-rawheight=&quot;207&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-cd5c553362ebfbf37a06baa3c31d6797_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-cd5c553362ebfbf37a06baa3c31d6797_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;图2&lt;/p&gt;&lt;p&gt;图1，2中的oe在传统的三总线结构中，通常对应OE（读）或WE（写）。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;bufif1是另一种三态门模型，其例化格式如下：&lt;/p&gt;&lt;p&gt;bufif1 tri1 (out, in, oe); //tri1是bufif1的例化名。&lt;/p&gt;&lt;p&gt;其电路形态形态如图3：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-cfcff93c94c2733a93bb8fc0bc4cc56b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;300&quot; data-rawheight=&quot;152&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;300&quot; data-rawheight=&quot;152&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-cfcff93c94c2733a93bb8fc0bc4cc56b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;图3 buffif1&lt;/p&gt;&lt;p&gt;在这两个模型中，oe端决定输出的形态，在tri1的模型中，如果oe为’1’， out就得到out0（out0是FPGA内部逻辑产生的值）的值，最终输出到端口PAD上。如果 oe为’0’，此时三态门的输出为高阻状态，在Verilog 描述中用’Z’表示，即三态门与外界是断开状态，如图4所示。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3180aa0884f2a72b90e1616867b94d25_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;305&quot; data-rawheight=&quot;175&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;305&quot; data-rawheight=&quot;175&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-3180aa0884f2a72b90e1616867b94d25_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;图4&lt;/p&gt;&lt;p&gt;图3，4中的oe在传统的三总线结构中，通常对应OE#（读）或WE#（写）。&lt;/p&gt;&lt;p&gt;FPGA的I/O基本上都支持双向数据操作，但是由于对外输出端口只有一个，因此需要在端口处合并。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-4ac325d07e94b38a7131914867aa2a7d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;418&quot; data-rawheight=&quot;252&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;418&quot; data-rawheight=&quot;252&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-4ac325d07e94b38a7131914867aa2a7d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;图5&lt;/p&gt;&lt;p&gt;在图5中，输出流向从FPGA内部逻辑out0–&amp;gt;out–&amp;gt;PAD；输入流向PAD–&amp;gt;in–&amp;gt;FPGA 内部逻辑。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-652fdac97bcdb8865e08487233a23457_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;438&quot; data-rawheight=&quot;243&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-652fdac97bcdb8865e08487233a23457_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;438&quot; data-rawheight=&quot;243&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-652fdac97bcdb8865e08487233a23457_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-652fdac97bcdb8865e08487233a23457_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;图6&lt;/p&gt;&lt;p&gt;在图6中，输出流向从FPGA内部逻辑–&amp;gt;out0–&amp;gt;out–&amp;gt;PAD；输入流向PAD–&amp;gt;in–&amp;gt;FPGA 内部逻辑。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;从图5，6可以看出，由于PAD 共享输入、输出。一般在推拉驱动模型中，三态门的输出能力相对较强，考虑到如果接到FPGA外部器件有同样的接口，应该严格控制他们的时序关系，以免发生短路。如图7，&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-2c4f4001b58a4ac7b3ff52f3bfacde25_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;478&quot; data-rawheight=&quot;592&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-2c4f4001b58a4ac7b3ff52f3bfacde25_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;478&quot; data-rawheight=&quot;592&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-2c4f4001b58a4ac7b3ff52f3bfacde25_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-2c4f4001b58a4ac7b3ff52f3bfacde25_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;图7&lt;/p&gt;&lt;p&gt;在图7中如果a,b两个器件同时输出（两个器件的oe都为’1’），如果恰好一个器件输出为高，一个为低，则会引起短路现象。因此要严格控制时序，保证a,b两个器件避开由内部逻辑同时驱动输出的情况。只有在两个器件oe一个为高，另一个为低，或者两个器件的oe都为低的时候，两个器件的端口才能连在一起。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;ol/&gt;&lt;p&gt;在传统的工业控制总线中，分为主从模式。一般MCU或FPGA为MASTER，SRAM 、EPROM等器件为从模式。在这种模式下，FPGA生成控制信号oe， 同时取反后接到对方的OE端上。如图8：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c6ebb37d4dec2623ff67956fec8e7c5b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;480&quot; data-rawheight=&quot;359&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-c6ebb37d4dec2623ff67956fec8e7c5b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;480&quot; data-rawheight=&quot;359&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-c6ebb37d4dec2623ff67956fec8e7c5b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-c6ebb37d4dec2623ff67956fec8e7c5b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;图8&lt;/p&gt;&lt;p&gt;图8中，由于oe是由一个主器件控制，因此实现推拉模式，即主器件输入，从器件输出；主器件输出，从器件输入。从输出角度看，在输出的时段内，高低电平直接输出，这一点不同后面要介绍的漏极开路（OD）带上拉电阻的结构。&lt;/p&gt;&lt;p&gt;推拉MOS管模型如图9：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e9e772e7fac9e29b0d8f0cd5e757ff2c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1010&quot; data-rawheight=&quot;714&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-e9e772e7fac9e29b0d8f0cd5e757ff2c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1010&quot; data-rawheight=&quot;714&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-e9e772e7fac9e29b0d8f0cd5e757ff2c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-e9e772e7fac9e29b0d8f0cd5e757ff2c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;图9&lt;/p&gt;&lt;p&gt;例1：Master 模式单线控制双向接口（Verilog）。&lt;/p&gt;&lt;p&gt;门级描述：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;table data-draft-node=&quot;block&quot; data-draft-type=&quot;table&quot; data-size=&quot;normal&quot; data-row-style=&quot;normal&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;12345678910111213141516171819202122232425262728293031323334&lt;/td&gt;&lt;td&gt;module bidir_gate(    input            clk,    input            rst,    inout      [3:0] a,    output           noe,    output reg [3:0] in_val  ); reg [3:0] counta, countb; assign noe = ~counta[3];bufif1 tri1_0(a[0], countb[0], ~noe);bufif1 tri1_1(a[1], countb[1], ~noe);bufif1 tri1_2(a[2], countb[2], ~noe);bufif1 tri1_3(a[3], countb[3], ~noe); always@(posedge clk or posedge rst)if(rst) begin    counta &amp;lt;= 0;    countb &amp;lt;= 0;endelse begin    counta &amp;lt;= counta + 1;     if(counta == 15)        countb &amp;lt;= countb + 1;     if(noe)        in_val &amp;lt;= a;endendmodule&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;RTL描述&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;table data-draft-node=&quot;block&quot; data-draft-type=&quot;table&quot; data-size=&quot;normal&quot; data-row-style=&quot;normal&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1234567891011121314151617181920212223242526272829303132&lt;/td&gt;&lt;td&gt;module bidir_RTL(    input            clk,    input            rst,    inout      [3:0] a,    output           noe,    output reg [3:0] in_val  );  reg [3:0] counta, countb; assign noe = ~counta[3];assign  a  = (!noe) ? countb : 4&#x27;bZZZZ;   //双向口输出  always@(posedge clk or posedge rst)if(rst) begin    counta &amp;lt;= 0;    in_val &amp;lt;= 0;endelse begin    counta &amp;lt;= counta + 1;     if(counta==15)        countb &amp;lt;= countb + 1;     if(noe)        in_val &amp;lt;= a; //获得输入，可以给FPGA内部其它模块使用end endmodule&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;在RTL的描述中可以看出，在Verilog中直接使用高阻4’bZZZZ就起到了三态门的效果，因此应习惯这种使用方法。&lt;/p&gt;&lt;p&gt;例2：Master 模式双向结构(Verilog RTL)， 结构模式参看例1。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;table data-draft-node=&quot;block&quot; data-draft-type=&quot;table&quot; data-size=&quot;normal&quot; data-row-style=&quot;normal&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;12345678910111213141516171819202122232425262728293031323334&lt;/td&gt;&lt;td&gt;module bidir_gate(    input            clk,    input            rst,    inout      [3:0] a,    output           noe,    output           nwe,    output reg [3:0] in_val  );  reg [3:0] counta, countb; assign noe = ~counta[3];assign nwe = counta[3];   //采用tri0模型assign a   = ~nwe ? countb : 4&#x27;bZZZZ; always@(posedge clk or posedge rst)if(rst) begin    counta &amp;lt;= 0;endelse begin    counta &amp;lt;= counta + 1;     if(counta==15)        countb &amp;lt;= countb + 1;    if(~noe) in_val &amp;lt;= a; end   endmodule&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;上拉电阻结构适合总线模型，如I2C总线，485总线等多master多slave的结构。在上拉电阻的结构中，双向口一般不需要读（noe）、写（nwe）控制接口配合。但需要协议配合实现。以I2C 为例，在主、从的结构中都采用OD的方式如图10，因此多个器件的输出端可以直接通过连线接在一起。但在由于输出没有推拉结构，在期望高电平输出时，由于MOS管关闭，实际输出为也为高阻，因此需要在总线上结上拉电阻，以保证在输出阶段且输出为高电平时，可以得到确保的高电平状态，如图11，&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-46760ba4189b6d5c37b864771c5c4778_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;214&quot; data-rawheight=&quot;125&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;214&quot; data-rawheight=&quot;125&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-46760ba4189b6d5c37b864771c5c4778_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;图10 OD结构&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-611cf20a5acc6b432c7b99e81bd8d3ce_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;319&quot; data-rawheight=&quot;507&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;319&quot; data-rawheight=&quot;507&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-611cf20a5acc6b432c7b99e81bd8d3ce_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;图11&lt;/p&gt;&lt;p&gt;在OD（或OC）的设计中，Verilog描述在输入、低电平输出时与推拉结构一致，只有在输出高电平时不同。在输出高电平时要确保真正输出的是高阻。I2C总线接口就是标准的OD结构，在SDA，SDL都要加上拉电阻，如图12&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f8143099483b3baa62809f42579bd9e6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;460&quot; data-rawheight=&quot;261&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-f8143099483b3baa62809f42579bd9e6_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;460&quot; data-rawheight=&quot;261&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-f8143099483b3baa62809f42579bd9e6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-f8143099483b3baa62809f42579bd9e6_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;图12&lt;/p&gt;&lt;p&gt;由于inout信号一般只在端口使用，因此在FPGA的内部逻辑（内部模块）将会把inout（双向口）变换成input, output类型进行传递, 具体的使用见例3.&lt;/p&gt;&lt;p&gt;例3：I2C接口Verilog描述。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;table data-draft-node=&quot;block&quot; data-draft-type=&quot;table&quot; data-size=&quot;normal&quot; data-row-style=&quot;normal&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;12345678910111213141516171819202122232425262728293031323334&lt;/td&gt;&lt;td&gt;module I2C_intereface(    inout        SCL,    inout        SDA,    input  [7:0] datain,    output [7:0] dataout);  wire    SCL_in;wire    SDA_in; wire    SCL_out;wire    SDA_out; assign  SCL     = SCL_out ? 1’bZ : 1’b0;   //这里处理方式与推拉结构不同。assign  SCL_in  = SCL;assign  SDA     = SDA_out ? 1’bZ : 1’b0;assign  SDA_in  = SDA; I2C  I2C_inst(    .SCL_in  (SCL_in),    .SDA_in  (SDA_in),     .SCL_out (SCL_out),    .SDA_out (SDA_out),     .datain  (datain),    .dataout (dataout))  endmodule&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;上面程序中，输入直接赋值给SDA_in，是全阶段赋值，即把输出阶段也给输入端赋值，因此在I2C 的程序中，何时使用输入的值，应有严格定时。关于I2C的时序描述请参照I2C部分内容。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cdd393d6cf1a461df6aa1f8c5fdef306</guid>
<title>Reactive Spring 实战：响应式 MySQL 交互</title>
<link>https://toutiao.io/k/eqigqry</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;本文与大家探讨Spring中如何实现MySql响应式交互。&lt;/p&gt;&lt;p&gt;Spring Data R2DBC项目是Spring提供的数据库响应式编程框架。&lt;br/&gt;R2DBC是Reactive Relational Database Connectivity的首字母缩写词。R2DBC是一个API规范倡议，它声明了一个响应式API，由驱动程序供应商实现，并以响应式编程的方式访问他们的关系数据库。&lt;br/&gt;实现数据库的响应式编程并不是容易的，传统的JDBC协议是一个完全阻塞的 API，所以响应式编程对JDBC协议可以说是一种“颠覆”了。&lt;/p&gt;&lt;p&gt;这里再强调一次响应式编程，响应式编程是一种非阻塞异步的编程模式，而Spring响应式编程提供了一种友好、直观、易于理解的编码模式处理异步结果（可参考前面的文章）。&lt;br/&gt;也就是说，应用发送SQL给数据库后，应用线程不需要阻塞等待数据库返回结果，而是直接返回处理其他任务，等到数据库SQL处理完成后，再由Spring调用线程处理结果。&lt;/p&gt;&lt;p&gt;到目前，Spring Data R2DBC项目支持以下数据库：&lt;br/&gt;H2 (io.r2dbc:r2dbc-h2)&lt;br/&gt;MariaDB (org.mariadb:r2dbc-mariadb)&lt;br/&gt;Microsoft SQL Server (io.r2dbc:r2dbc-mssql)&lt;br/&gt;MySQL (dev.miku:r2dbc-mysql)&lt;br/&gt;jasync-sql MySQL (com.github.jasync-sql:jasync-r2dbc-mysql)&lt;br/&gt;Postgres (io.r2dbc:r2dbc-postgresql)&lt;br/&gt;Oracle (com.oracle.database.r2dbc:oracle-r2dbc)&lt;/p&gt;&lt;p&gt;下面基于MySql，介绍一下Spring Data R2DBC使用方式。&lt;/p&gt;&lt;p&gt;引入依赖&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-r2dbc&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;dev.miku&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;r2dbc-mysql&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.8.2.RELEASE&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置文件&lt;/p&gt;&lt;pre&gt;&lt;code&gt;spring.r2dbc.url=&lt;span&gt;r2dbcs:&lt;/span&gt;&lt;span&gt;mysql:&lt;/span&gt;/&lt;span&gt;/127.0.0.1:3306/bin&lt;/span&gt;-springreactive?useSSL=&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;spring.r2dbc.username=...&lt;br/&gt;spring.r2dbc.password=...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Spring Data R2DBC可以与Spring Data JPA结合使用，其实R2DBC与原来的JPA使用方式差别不大，使用非常简单。&lt;br/&gt;只是Spring Data JPA中方法返回的是真实的值，而R2DBC中，返回的是数据流Mono，Flux。&lt;/p&gt;&lt;p&gt;简单介绍一个Spring Data JPA。Spring Data JPA是Spring基于ORM框架、JPA规范的基础上封装的一套 JPA  (Java Persistence API) 应用框架，简单说，就是类似Mybatis，Hibernate的框架（Spring Data JPA底层通过Hibernate操作数据库）。&lt;/p&gt;&lt;p&gt;Repository是Spring Data R2DBC中的重要概念，封装了对一个实体的操作，相当于一个dao（Data Access Object，数据访问对象）。&lt;/p&gt;&lt;p&gt;假如应用中有一个实体DeliveryCompany，对应表delivery_company。&lt;br/&gt;实体定义如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DeliveryCompany&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Id&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; id;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String name;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String label;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Integer level;&lt;br/&gt;    ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;@Id&lt;/code&gt;注解标志了id属性。&lt;/p&gt;&lt;p&gt;下面我们定义一个DeliveryCompanyRepository接口，继承与R2dbcRepository。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Repository&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;DeliveryCompanyRepository&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;R2dbcRepository&lt;/span&gt;&amp;lt;&lt;span&gt;DeliveryCompany&lt;/span&gt;,&lt;span&gt;Long&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;  ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;R2dbcRepository是Spring实现的接口，该接口继承与ReactiveCrudRepository，ReactiveCrudRepository接口提供了增删改查的模板方法。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public interface ReactiveCrudRepository&lt;span&gt;&amp;lt;&lt;span&gt;T,&lt;/span&gt; &lt;span&gt;ID&lt;/span&gt;&amp;gt;&lt;/span&gt; extends Repository&lt;span&gt;&amp;lt;&lt;span&gt;T,&lt;/span&gt; &lt;span&gt;ID&lt;/span&gt;&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt; Mono&lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt;&amp;gt;&lt;/span&gt; save(S var1);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt; Flux&lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt;&amp;gt;&lt;/span&gt; saveAll(Iterable&lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt;&amp;gt;&lt;/span&gt; var1);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt; Flux&lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt;&amp;gt;&lt;/span&gt; saveAll(Publisher&lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt;&amp;gt;&lt;/span&gt; var1);&lt;br/&gt;&lt;br/&gt;    Mono&lt;span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt; findById(ID var1);&lt;br/&gt;&lt;br/&gt;    Mono&lt;span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt; findById(Publisher&lt;span&gt;&amp;lt;&lt;span&gt;ID&lt;/span&gt;&amp;gt;&lt;/span&gt; var1);&lt;br/&gt;&lt;br/&gt;    ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意这里的返回结果，是Mono、Flux等异步结果，这就是响应式交互与非响应式交互的最大区别。&lt;/p&gt;&lt;p&gt;如果要自定义操作，有以下方式&lt;br/&gt;（1） 通过方法名定义&lt;br/&gt;只要我们按规则定义方法名，Spring就会为我们生成SQL。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// 按名称查找&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Flux&amp;lt;DeliveryCompany&amp;gt; &lt;span&gt;findByName&lt;/span&gt;(&lt;span&gt;String name&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 查找给定范围内的&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Flux&amp;lt;DeliveryCompany&amp;gt; &lt;span&gt;findByIdGreaterThan&lt;/span&gt;(&lt;span&gt;Long startId&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 查找大于给定id的数据&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Flux&amp;lt;DeliveryCompany&amp;gt; &lt;span&gt;findByIdGreaterThan&lt;/span&gt;(&lt;span&gt;Long startId&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 查询名称以给定字符串开头的数据&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Flux&amp;lt;DeliveryCompany&amp;gt; &lt;span&gt;findByNameStartingWith&lt;/span&gt;(&lt;span&gt;String start&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 分页&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Flux&amp;lt;DeliveryCompany&amp;gt; &lt;span&gt;findByIdGreaterThanEqual&lt;/span&gt;(&lt;span&gt;Long startId, Pageable pageable&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，上面方法名需要按规范定义&lt;/p&gt;&lt;pre&gt;&lt;code&gt;findByName -&amp;gt; findBy&lt;span&gt;&amp;lt;&lt;span&gt;fieldName&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;findByIdGreaterThan -&amp;gt; findBy&lt;span&gt;&amp;lt;&lt;span&gt;fieldName&lt;/span&gt;&amp;gt;&lt;/span&gt;GreaterThan&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Spring会为我们生成对应的SQL，非常方便。这种方法可以满足多数简单的查询。&lt;/p&gt;&lt;p&gt;对应的还有删除操作&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Mono&amp;lt;Integer&amp;gt; deleteByName(&lt;span&gt;String&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;);   &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;详细的方法命名规则，则参考官方文档。&lt;/p&gt;&lt;p&gt;（2）手动编写SQL&lt;br/&gt;对于复杂的SQL，开发人员也可以手写SQL，&lt;/p&gt;&lt;pre&gt;&lt;code&gt;@Query(&quot;&lt;span&gt;select&lt;/span&gt;  &lt;span&gt;id&lt;/span&gt;,&lt;span&gt;name&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; delivery_company &lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;  (:ids)&lt;span&gt;&quot;)&lt;br/&gt;Flux&amp;lt;DeliveryCompany&amp;gt; findByIds2(List&amp;lt;Long&amp;gt; ids);&lt;br/&gt;&lt;br/&gt;@Query(&quot;&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;  &lt;span&gt;id&lt;/span&gt;,&lt;span&gt;name&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; delivery_company &lt;span&gt;where&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; = :&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;)&lt;br/&gt;Flux&amp;lt;DeliveryCompany&amp;gt; findByName2(String name);&lt;br/&gt;&lt;br/&gt;@Modifying&lt;br/&gt;@Query(&quot;&lt;/span&gt;&lt;span&gt;update&lt;/span&gt; delivery_company &lt;span&gt;set&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; = :&lt;span&gt;name&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; = :&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;)&lt;br/&gt;Mono&amp;lt;DeliveryCompany&amp;gt; update2(@Param(&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;) long id, @Param(&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;) String name);&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，编写SQL也非常简单，对于集合参数支持非常好。&lt;br/&gt;目前未发现使用JPQL（Java Persistence Query Language）的方式，不过使用原生的SQL是没有问题的。&lt;/p&gt;&lt;p&gt;如果大家使用过Mybatis，应该会用过以下判断参数非空的做法&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;&lt;span&gt;select&lt;/span&gt; id=&lt;span&gt;&quot;findByName2&quot;&lt;/span&gt;&lt;br/&gt;     resultType=&lt;span&gt;&quot;DeliveryCompany&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;  &lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; delivery_company&lt;br/&gt;  &lt;span&gt;WHERE&lt;/span&gt; name = &lt;span&gt;#{name}&lt;/span&gt;&lt;br/&gt;  &amp;lt;&lt;span&gt;if&lt;/span&gt; test=&lt;span&gt;&quot;label != null&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    &lt;span&gt;AND&lt;/span&gt; label &lt;span&gt;like&lt;/span&gt; &lt;span&gt;#{label}&lt;/span&gt;&lt;br/&gt;  &amp;lt;/&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;&amp;lt;/&lt;span&gt;select&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可惜在JPA中非找到支持的方法，如果有同学知道，请不吝指教。&lt;/p&gt;&lt;p&gt;(3) 使用R2dbcEntityTemplate&lt;br/&gt;另外，可以使用R2dbcEntityTemplate自动生成SQL&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    @Autowired&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; R2dbcEntityTemplate template;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Flux&amp;lt;DeliveryCompany&amp;gt; &lt;span&gt;getByName3&lt;/span&gt;(&lt;span&gt;String name&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; template&lt;br/&gt;                .&lt;span&gt;select&lt;/span&gt;(DeliveryCompany.class)&lt;br/&gt;                .&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;delivery_company&quot;&lt;/span&gt;)&lt;br/&gt;                .matching(Query.query(Criteria.&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;name&quot;&lt;/span&gt;).&lt;span&gt;is&lt;/span&gt;(name))).all();&lt;br/&gt;        &lt;span&gt;// Criteria.where(&quot;name&quot;).is(name).and&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Mono&amp;lt;Integer&amp;gt; &lt;span&gt;update3&lt;/span&gt;(&lt;span&gt;DeliveryCompany company&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; template&lt;br/&gt;                .update(DeliveryCompany.class)&lt;br/&gt;                .inTable(&lt;span&gt;&quot;delivery_company&quot;&lt;/span&gt;)&lt;br/&gt;                .matching(Query.query(Criteria.&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;id&quot;&lt;/span&gt;).&lt;span&gt;is&lt;/span&gt;(company.getId())))&lt;br/&gt;                .apply(Update.update(&lt;span&gt;&quot;name&quot;&lt;/span&gt;, company.getName()));&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种方式可以实现判断参数非空查询，不过使用起来较为繁琐（我们也可以对其进行一定的封装以方便我们使用）。&lt;/p&gt;&lt;p&gt;(4)Spring Data R2DBC中同样支持Querydsl，&lt;br/&gt;我们定义的Repository可以继承于ReactiveQuerydslPredicateExecutor&lt;deliverycompany&gt;，该接口提供以下模板方法&lt;/deliverycompany&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;ReactiveQuerydslPredicateExecutor&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;Mono&amp;lt;T&amp;gt; &lt;span&gt;findOne&lt;/span&gt;&lt;span&gt;(Predicate var1)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;Flux&amp;lt;T&amp;gt; &lt;span&gt;findAll&lt;/span&gt;&lt;span&gt;(Predicate var1)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;Flux&amp;lt;T&amp;gt; &lt;span&gt;findAll&lt;/span&gt;&lt;span&gt;(Predicate var1, Sort var2)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;Flux&amp;lt;T&amp;gt; &lt;span&gt;findAll&lt;/span&gt;&lt;span&gt;(Predicate var1, OrderSpecifier... var2)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;Flux&amp;lt;T&amp;gt; &lt;span&gt;findAll&lt;/span&gt;&lt;span&gt;(OrderSpecifier... var1)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;Mono&amp;lt;Long&amp;gt; &lt;span&gt;count&lt;/span&gt;&lt;span&gt;(Predicate var1)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;Mono&amp;lt;Boolean&amp;gt; &lt;span&gt;exists&lt;/span&gt;&lt;span&gt;(Predicate var1)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Spring Data R2DBC中同样支持@QuerydslPredicate注解，这里不再深入。&lt;/p&gt;&lt;p&gt;Spring Data R2DBC支持事务，使用方法很简单，在业务方法添加@Transactional即可&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;@Transactional&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Flux&amp;lt;DeliveryCompany&amp;gt; &lt;span&gt;save&lt;/span&gt;&lt;span&gt;(List&amp;lt;DeliveryCompany&amp;gt; companyList)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Flux&amp;lt;DeliveryCompany&amp;gt; result = Flux.just();&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (DeliveryCompany deliveryCompany : companyList) {&lt;br/&gt;            result = result.concat(result, repository.save(deliveryCompany));&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; result;&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了展示事务的使用，这里没有调用Repository的saveAll方法，而是循环插入数据并返回最后的结果。&lt;br/&gt;注意，最后的结果Flux、Mono一定要作为方法返回值，因为响应式编程的异常信息保存在这些结果中（而不是在方法调用时抛出），所以这些结果必须作为方法返回值，否则Spring无法知道方法是否报错，也就无法回退事务。&lt;/p&gt;&lt;p&gt;Spring Data R2DBC基本与Spring Data JPA的使用相同，所以本篇文章主要还是对Spring Data JPA使用方式的介绍。&lt;br/&gt;我之前并没有使用过Spring Data JPA，本篇文章主要还是入门介绍，还有很多东西没有涉及，如id生成，多表查询等，这里不再一一介绍。&lt;/p&gt;&lt;p&gt;官方文档：https://docs.spring.io/spring-data/r2dbc/docs/1.3.2/reference/html/&lt;br/&gt;文章完整代码：https://gitee.com/binecy/bin-springreactive/tree/master/delivery-service&lt;/p&gt;&lt;p&gt;如果您觉得本文不错，欢迎关注我的微信公众号，系列文章持续更新中。您的关注是我坚持的动力！&lt;/p&gt;&lt;figure&gt;文章最后，附图一张&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6008230452674898&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Of81vjDNtAwpp6FRh0mBRZhkWKA9VjCvWSw7FBsnkiar73c6H4z58nG6Tkv0HbzLIYkHgL6bn6JOMqDSL1OsGsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;972&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>