<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3e0b0b969dfb48bb6c9915b0d14b56fa</guid>
<title>玩转直播系列之消息模块演进（三）</title>
<link>https://toutiao.io/k/2deq8i8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;vivo互联网技术&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;微信号&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;vivoVMIC&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;功能介绍&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;分享 vivo 互联网技术干货与沙龙活动，推荐最新行业动态与热门会议。&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e3d2d2c67631e7602488407406a7350f</guid>
<title>微服务快速开发框架</title>
<link>https://toutiao.io/k/vnu4ffo</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;file_content markdown-body&quot;&gt;
&lt;img src=&quot;/gdzWork/JPower/raw/master/docs/image/logo.png&quot;/&gt;
&lt;h1&gt;
&lt;a id=&quot;jpower-a-rapid-development-platform-for-microservices&quot; class=&quot;anchor&quot; href=&quot;#jpower-a-rapid-development-platform-for-microservices&quot;/&gt;JPower: A rapid development platform for microservices&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://gitee.com/gdzWork/JPower&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Release-V2.0.2-green.svg&quot; alt=&quot;Gitter&quot;/&gt;&lt;/a&gt;   &lt;a href=&quot;https://gitee.com/gdzWork/JPower&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Author-mr.g-orange.svg&quot; alt=&quot;License&quot;/&gt;&lt;/a&gt;
&lt;a href=&quot;https://gitee.com/gdzWork/JPower&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Copyright%20-@Jpower-%23ff3f59.svg&quot; alt=&quot;Gitter&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a id=&quot;qq-number--860452768&quot; class=&quot;anchor&quot; href=&quot;#qq-number--860452768&quot;/&gt;QQ Number : 860452768&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;tip: After joining the group, you can get a free code generator with the screenshot of Star&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h4&gt;
&lt;a id=&quot;jpower-is-just-getting-started-many-features-are-still-under-development-so-stay-tuned&quot; class=&quot;anchor&quot; href=&quot;#jpower-is-just-getting-started-many-features-are-still-under-development-so-stay-tuned&quot;/&gt;JPower is just getting started, many features are still under development, so stay tuned...&lt;/h4&gt;
&lt;h2&gt;
&lt;a id=&quot;jpower-summary&quot; class=&quot;anchor&quot; href=&quot;#jpower-summary&quot;/&gt;JPower summary&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;JPower&lt;/code&gt;It is upgraded and optimized from a government commercial project.&lt;/p&gt;
&lt;p&gt;Adopting the front-end and back-end separation model, front-end open source projects:&lt;a href=&quot;https://gitee.com/gdzWork/jpower-ui&quot;&gt;jpower-ui&lt;/a&gt; (basedOn AVue、Vue、Element-UI)、&lt;a href=&quot;https://gitee.com/deep_letters/jpower&quot;&gt;JPowerWeb&lt;/a&gt;(basedOn Vue、Element-UI)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JPower&lt;/code&gt; basedOn&lt;code&gt;SpringCloud(2020.0.1)&lt;/code&gt;  + &lt;code&gt;SpringBoot(2.4.2)&lt;/code&gt; a rapid development platform for microservices
It has multiple modules such as unified gateway authentication, Xss anti-cross-site attack, and distributed transaction, and supports the parallel development of multi-service systems.
Supports parallel development of multiple services and can be used as a scaffolding for the development of back-end services. The code is concise, the comments are complete, and the structure is clear. It is very suitable for learning and use as a basic framework.
&lt;code&gt;JPower&lt;/code&gt; The blueprint of the goal is to be able to create a development framework that integrates a variety of useful tools, such as configuring various reports on the page, integrating echarts to achieve rapid page generation, data transmission in various scenarios, and so on. tool.
At present, only the basic architecture has been developed, and various tools will be gradually developed into the framework in the future.&lt;/p&gt;
&lt;p&gt;Core technology adopts spring cloud alibaba、SpringBoot、Mybatis、Seata、Sentinel、SkyWalking main frameworks and middleware。
I hope to work hard to create a set of solutions that integrates &lt;code&gt;basic framework&lt;/code&gt; —&amp;gt;&lt;code&gt;distributed microservice architecture&lt;/code&gt; —&amp;gt; &lt;code&gt;tool integration&lt;/code&gt; —&amp;gt; &lt;code&gt;system monitoring&lt;/code&gt;. &lt;code&gt;This project aims to achieve basic capabilities and does not involve specific businesses. &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Using JWT for Token authentication can expand and integrate Redis and other fine-grained control schemes.&lt;/p&gt;
&lt;p&gt;The registration center and configuration center select Nacos to strengthen the linkage between the modules while reducing the weight of the project.&lt;/p&gt;
&lt;p&gt;The integration of Sentinel protects the stability of services from multiple dimensions such as flow control and fuse degradation.&lt;/p&gt;
&lt;p&gt;The code generator is implemented based on MybatisPlus-generator.&lt;/p&gt;
&lt;h2&gt;
&lt;a id=&quot;branch-introduction&quot; class=&quot;anchor&quot; href=&quot;#branch-introduction&quot;/&gt;Branch introduction&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;master The branch is the latest stable version, and each commit will be upgraded with a version number&lt;/li&gt;
&lt;li&gt;dev The branch is the author&#x27;s development branch. The latest code developed by the author will be submitted in real time. Those who like early adopters can switch to dev. But there may be errors, omissions, etc. If you are not familiar with the project, please don&#x27;t try it.&lt;/li&gt;
&lt;li&gt;tag Each fixed version will be tagged with a tag to facilitate subsequent switching of any version.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
&lt;a id=&quot;technical-documents&quot; class=&quot;anchor&quot; href=&quot;#technical-documents&quot;/&gt;Technical documents&lt;/h2&gt;

&lt;h2&gt;
&lt;a id=&quot;project-demonstration-address&quot; class=&quot;anchor&quot; href=&quot;#project-demonstration-address&quot;/&gt;Project demonstration address&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Project demonstration address： &lt;a href=&quot;http://jpower.top:81&quot; rel=&quot;nofollow&quot;&gt;http://jpower.top:81&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Super user login（Tenant code：000000）：&lt;/li&gt;
&lt;li&gt;administrator： root/123456&lt;/li&gt;
&lt;li&gt;Tenant user login（Tenant code：LXD0DP）：&lt;/li&gt;
&lt;li&gt;Ordinary account： admin/123456&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ps: No write permission in the demo environment&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
&lt;a id=&quot;business-function-introduction&quot; class=&quot;anchor&quot; href=&quot;#business-function-introduction&quot;/&gt;Business function introduction：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Tenant management: super user role manages all tenant creation&lt;/li&gt;
&lt;li&gt;Organization management: department, user data maintenance, reset user password, etc.&lt;/li&gt;
&lt;li&gt;Permission settings: data permissions, role management, bind users to roles, authorize menus and resources to roles&lt;/li&gt;
&lt;li&gt;System settings: menu function, attachment management, dictionary, administrative area, system parameters, application management, etc.&lt;/li&gt;
&lt;li&gt;Gateway management: current limiting and blocking access, registration center&lt;/li&gt;
&lt;li&gt;System monitoring: interface documentation, service monitoring, SkyWalking monitoring, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
&lt;a id=&quot;project-highlights-feature-introduction&quot; class=&quot;anchor&quot; href=&quot;#project-highlights-feature-introduction&quot;/&gt;Project highlights feature introduction:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Service registration &amp;amp; discovery and invocation：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Service registration and discovery based on Nacos, using OpenFeign to realize service intermodulation, It is possible to achieve the same coding experience as calling a local method when using HTTP requests for remote calls. Developers are completely unaware that this is a remote method, let alone an HTTP request.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Service authentication:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JWT is used to strengthen the authorization verification of scheduling between services to ensure the security of internal services.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fuse mechanism：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Because of the distribution of services, in order to avoid the &quot;avalanche&quot; of calls between services, Sentinel is ​​used as a fuse to avoid the &quot;avalanche&quot; between services.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monitor：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use Spring Boot Admin To monitor the running status of each independent Service; use SkyWalking to view the call chain between each service, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Link call monitoring:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At the same time, it realized SkyWalking as the full link performance monitoring of this project, Various indicators are displayed from the overall dimension to the partial dimension, and the performance information of all call chains across applications is displayed in a centralized manner, which can facilitate the measurement of overall and partial performance, and facilitate the identification of the source of the failure, which can greatly shorten the troubleshooting time in production.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data permission&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The data permission function is realized by using the interceptor based on Mybatis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Anti-cross-site scripting attack(XSS)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pass the filter for all requests Form parameter Filter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Online API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Because some functions of native swagger-ui are not friendly enough, the domestic open source is adopted&lt;code&gt;knife4j&lt;/code&gt;, And made a statuser, which is convenient for springboot users to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Distributed transaction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Integrate Ali&#x27;s distributed transaction middleware: seata, with &lt;strong&gt;Efficient&lt;/strong&gt; And for business &lt;strong&gt;0 intrusion&lt;/strong&gt; The way，Solve the distributed transaction problems faced in the microservice scenario。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automatic query of dictionary data across tables, databases, and services&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Used to solve the properties of cross-table, cross-database, cross-service paging data or the properties of a single object Echo the pain of dictionary data, Support for static data attributes(Data Dictionary)Automatic injection。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Grayscale release&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to solve frequent service updates and launches, version rollbacks, rapid iteration, and collaborative development within the company, this project uses a modified ribbon load balancing strategy to achieve gray release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interface monitoring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to ensure that the interface is unblocked at any time, the monitoring of the interface is specially developed for this, and the interface monitoring of any other services can also be realized, and some custom parameter settings can be realized.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
&lt;a id=&quot;工程结构&quot; class=&quot;anchor&quot; href=&quot;#%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84&quot;/&gt;工程结构：&lt;/h2&gt;
&lt;div class=&quot;white&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span id=&quot;LC1&quot; class=&quot;line&quot;&gt;JPower&lt;/span&gt;
&lt;span id=&quot;LC2&quot; class=&quot;line&quot;&gt;├── jpower-boot -- Boot project implementation&lt;/span&gt;
&lt;span id=&quot;LC3&quot; class=&quot;line&quot;&gt;├── jpower-core-login -- Authorized login module&lt;/span&gt;
&lt;span id=&quot;LC4&quot; class=&quot;line&quot;&gt;├── jpower-core-server -- Core business module&lt;/span&gt;
&lt;span id=&quot;LC5&quot; class=&quot;line&quot;&gt;├    ├── jpower-file -- File module&lt;/span&gt;
&lt;span id=&quot;LC6&quot; class=&quot;line&quot;&gt;├    ├    ├── file-api -- File API &lt;/span&gt;
&lt;span id=&quot;LC7&quot; class=&quot;line&quot;&gt;├    ├    ├── file-api-biz -- File API implementation&lt;/span&gt;
&lt;span id=&quot;LC8&quot; class=&quot;line&quot;&gt;├    ├    ├── file-biz -- File business realization &lt;/span&gt;
&lt;span id=&quot;LC9&quot; class=&quot;line&quot;&gt;├    ├    ├── file-entity -- File Entity &lt;/span&gt;
&lt;span id=&quot;LC10&quot; class=&quot;line&quot;&gt;├    ├    └── file-server -- File service&lt;/span&gt;
&lt;span id=&quot;LC11&quot; class=&quot;line&quot;&gt;├    ├── jpower-user -- User module&lt;/span&gt;
&lt;span id=&quot;LC12&quot; class=&quot;line&quot;&gt;├    ├    ├── user-api -- User API &lt;/span&gt;
&lt;span id=&quot;LC13&quot; class=&quot;line&quot;&gt;├    ├    ├── user-api-biz -- User API implementation&lt;/span&gt;
&lt;span id=&quot;LC14&quot; class=&quot;line&quot;&gt;├    ├    ├── user-biz -- User business realization &lt;/span&gt;
&lt;span id=&quot;LC15&quot; class=&quot;line&quot;&gt;├    ├    ├── user-entity -- User Entity &lt;/span&gt;
&lt;span id=&quot;LC16&quot; class=&quot;line&quot;&gt;├    ├    └── user-server -- User Server&lt;/span&gt;
&lt;span id=&quot;LC17&quot; class=&quot;line&quot;&gt;├    ├── jpower-system -- System module&lt;/span&gt;
&lt;span id=&quot;LC18&quot; class=&quot;line&quot;&gt;├    ├    ├── system-api -- System API &lt;/span&gt;
&lt;span id=&quot;LC19&quot; class=&quot;line&quot;&gt;├    ├    ├── system-api-biz -- System API implementation&lt;/span&gt;
&lt;span id=&quot;LC20&quot; class=&quot;line&quot;&gt;├    ├    ├── system-biz -- System business realization &lt;/span&gt;
&lt;span id=&quot;LC21&quot; class=&quot;line&quot;&gt;├    ├    ├── system-entity -- System Entity &lt;/span&gt;
&lt;span id=&quot;LC22&quot; class=&quot;line&quot;&gt;├    └──  └── system-server -- System Server&lt;/span&gt;
&lt;span id=&quot;LC23&quot; class=&quot;line&quot;&gt;├── jpower-module-common -- Toolkit module&lt;/span&gt;
&lt;span id=&quot;LC24&quot; class=&quot;line&quot;&gt;├    ├── common-auth -- Authorization Toolkit &lt;/span&gt;
&lt;span id=&quot;LC25&quot; class=&quot;line&quot;&gt;├    ├── common-dbs -- Database toolkit &lt;/span&gt;
&lt;span id=&quot;LC26&quot; class=&quot;line&quot;&gt;├    ├── common-deploy -- Basic Startup Kit &lt;/span&gt;
&lt;span id=&quot;LC27&quot; class=&quot;line&quot;&gt;├    ├── common-exception -- Anomaly Toolkit&lt;/span&gt;
&lt;span id=&quot;LC28&quot; class=&quot;line&quot;&gt;├    ├── common-log -- Log Toolkit &lt;/span&gt;
&lt;span id=&quot;LC29&quot; class=&quot;line&quot;&gt;├    ├── common-nacos -- Nacos Toolkit&lt;/span&gt;
&lt;span id=&quot;LC30&quot; class=&quot;line&quot;&gt;├    ├── common-redis -- Cache Toolkit &lt;/span&gt;
&lt;span id=&quot;LC31&quot; class=&quot;line&quot;&gt;├    ├── common-feign -- The feign toolkit also integrates sentinel&lt;/span&gt;
&lt;span id=&quot;LC32&quot; class=&quot;line&quot;&gt;├    ├── common-swagger -- Swagger Toolkit&lt;/span&gt;
&lt;span id=&quot;LC33&quot; class=&quot;line&quot;&gt;├    ├── common-tool -- Basic Configuration Toolkit &lt;/span&gt;
&lt;span id=&quot;LC34&quot; class=&quot;line&quot;&gt;├    ├── common-transaction -- Distributed Transaction Toolkit &lt;/span&gt;
&lt;span id=&quot;LC35&quot; class=&quot;line&quot;&gt;├    └── common-utils -- Tools &lt;/span&gt;
&lt;span id=&quot;LC36&quot; class=&quot;line&quot;&gt;├── jpower-module-gateway -- Gateway module&lt;/span&gt;
&lt;span id=&quot;LC37&quot; class=&quot;line&quot;&gt;├── jpower-op-server -- Operation and maintenance module&lt;/span&gt;
&lt;span id=&quot;LC38&quot; class=&quot;line&quot;&gt;├    ├── jpower-api -- Swagger Page&lt;/span&gt;
&lt;span id=&quot;LC39&quot; class=&quot;line&quot;&gt;├    ├── jpower-log -- Log Service&lt;/span&gt;
&lt;span id=&quot;LC40&quot; class=&quot;line&quot;&gt;└──  └── jpower-admin -- SpringBootAdmin &lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;
&lt;a id=&quot;technology-stack&quot; class=&quot;anchor&quot; href=&quot;#technology-stack&quot;/&gt;Technology stack：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The related technologies involved are
&lt;ul&gt;
&lt;li&gt;Cache：Redis&lt;/li&gt;
&lt;li&gt;Database： MySQL 5.7&lt;/li&gt;
&lt;li&gt;Persistence framework： Mybatis-plus&lt;/li&gt;
&lt;li&gt;API Gateway：Gateway&lt;/li&gt;
&lt;li&gt;Service registration and discovery: Nacos&lt;/li&gt;
&lt;li&gt;Service consumption：OpenFeign&lt;/li&gt;
&lt;li&gt;Load balancing：Ribbon&lt;/li&gt;
&lt;li&gt;Configuration Center：Nacos&lt;/li&gt;
&lt;li&gt;Service fusing：Sentinel&lt;/li&gt;
&lt;li&gt;Project construction：Maven 3.3&lt;/li&gt;
&lt;li&gt;Distributed transaction：seata&lt;/li&gt;
&lt;li&gt;Traffic Guard of Distributed System：Sentinel&lt;/li&gt;
&lt;li&gt;Monitor：spring-boot-admin&lt;/li&gt;
&lt;li&gt;Link call tracking&amp;amp;APM Monitoring：skywalking&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deployment aspect
&lt;ul&gt;
&lt;li&gt;Server：CentOS&lt;/li&gt;
&lt;li&gt;Docker 18&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id=&quot;project-screenshot&quot; class=&quot;anchor&quot; href=&quot;#project-screenshot&quot;/&gt;Project screenshot：&lt;/h2&gt;

&lt;h1&gt;
&lt;a id=&quot;if-you-feel-that-this-project-is-of-any-help-to-you-please-click-star-in-the-upper-right-corner-to-support-it-and-promote-it-to-your-friends-and-colleagues-thank-you&quot; class=&quot;anchor&quot; href=&quot;#if-you-feel-that-this-project-is-of-any-help-to-you-please-click-star-in-the-upper-right-corner-to-support-it-and-promote-it-to-your-friends-and-colleagues-thank-you&quot;/&gt;If you feel that this project is of any help to you, please click &quot;Star&quot; in the upper right corner to support it and promote it to your friends and colleagues, thank you!&lt;/h1&gt;
&lt;h1&gt;
&lt;a id=&quot;please-submit-if-you-find-a-bug-issues&quot; class=&quot;anchor&quot; href=&quot;#please-submit-if-you-find-a-bug-issues&quot;/&gt;Please submit if you find a bug &lt;a href=&quot;https://gitee.com/gdzWork/JPower/issues&quot;&gt;issues&lt;/a&gt;
&lt;/h1&gt;
&lt;h1&gt;
&lt;a id=&quot;participate-in-contribution&quot; class=&quot;anchor&quot; href=&quot;#participate-in-contribution&quot;/&gt;Participate in contribution&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Fork This warehouse&lt;/li&gt;
&lt;li&gt;New feat_xxx Branch&lt;/li&gt;
&lt;li&gt;Submit code&lt;/li&gt;
&lt;li&gt;New Pull Request&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;
&lt;a id=&quot;thanks-to-the-free-open-source-license-provided-by-jetbrains&quot; class=&quot;anchor&quot; href=&quot;#thanks-to-the-free-open-source-license-provided-by-jetbrains&quot;/&gt;Thanks to the free open source license provided by JetBrains:&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/?from=lamp-cloud&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;/gdzWork/JPower/raw/master/docs/image/jetbrains.png&quot; alt=&quot;JetBrains&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
&lt;a id=&quot;friendship-link--special-thanks&quot; class=&quot;anchor&quot; href=&quot;#friendship-link--special-thanks&quot;/&gt;Friendship link &amp;amp; special thanks&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f78aa1bcb4df23ac947365e724d36555</guid>
<title>一起玩 dubbo，万字长文揭秘服务暴露</title>
<link>https://toutiao.io/k/yrznu58</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日常写组件，最近又接了一个需求，让我负责实现一个rpc组件，提高公司游戏跨服开发的效率，为了写好这个组件，算是将dubbo里里外外研究了一波，目前组件的实现也接近尾声了，因此打算给dubbo的学习做个总结，并穿插说说rpc实现的心路历程，同样需要实现rpc的朋友，或者对dubbo有兴趣的朋友可以关注这个系列。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在写rpc组件之前，我先提了几个灵魂疑问，并从dubbo中找到了答案。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;服务是啥？&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个模块，一种玩法，只要是需要进行远程调度的都可以用服务的概念进行包装，我这边简单包装了一个副本服务，类情况如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.48705096073517123&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlumPqyPA6vs9f1p70DylJaOlWLn3Ooz20ayxTFbwdg6IWzPicyKRNvCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1197&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527013946923&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;平平无奇，等等，我们来看看提供方如何标记服务&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.46733668341708545&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlkRJ361njjrG8BqD4rjSJ7K5tYphBfmR2fOxSWAxiaoIxVmx36uX2Ticw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1194&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527014002431&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到了这一步，服务已经完成了基本定义。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;服务最终被注册到了那里？&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在xml配置上，我们已经看到了有注册中心的配置&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.09090909090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0Il5yJegZRlAtqYROjpzRrEfeU4rsZ4G1VWxicnNKHibCLnc54BqawTVicyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;935&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527014013076&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没错，最后提供方定义好的服务会注册到注册中心，目前支持的类型有多种&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0718954248366013&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0Ilwg510NH0hicrwdpdfycY51AUW4icBnE4x7iahN7mhdianLA1c7lziaCP6Cg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;306&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527014023579&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体可以查看里边提供的demo实例，那么注册中心有什么作用呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单点描述就是注册中心就是管理服务的地方，提供方将服务放到了这个管理处，而订阅方要用的话则从这个管理处将服务拿过来用，通过注册中心实现了服务的感知。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;服务谁来消费？&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消费方来使用，我们可以看到&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.36462699077954736&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlWQ5V6YrsbfVKwCia8r7uI1xEiaiaeEAn1tcPaooxevAXF4froB2ILGZvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1193&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527014040894&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样也是平平无奇的代码，就是消费方拿到boss接口后，直接调用对应接口即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对应提供方有xml去定义服务的注册，同样消费方也是有xml去定义服务的订阅信息，可以看到&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.504180602006689&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0Il3FkB5R8sW7ibekFWNza8WQT5rItyNGxmMs2ArTjfu7bfvVicqnE4WN7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1196&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527014051399&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单来说就是，提供方将服务放到注册中心，订阅方从注册中心拿来用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来会涉及到源码部分，以下源码的示例接来自dubbo2.6x，源码方面的注释都已经提交到github上，有需要的可以clone：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://github.com/wiatingpub/dubbo/tree/2.6.x&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;什么时候触发的服务暴露&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在设计rpc组件的时候，不得不面对这个问题，本着抄dubbo的想法，研究了下dubbo的实现方案&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;dubbo采用了比较经典的xml配置，并理所当然的使用了NamespaceHandlerSupport将xml中的节点配置映射成了对应对象&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到在dubbo-config-spring包底下有个spring.handlers的配置，通过该配置指定了DubboNamespaceHandler&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.42631140716069943&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlvvWGJ4gUlG5GoKicjFbN3mo6yBultvOmY2hr9URngHHzL3GTeU2xJPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1201&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527014228992&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DubboNamespaceHandler会将xml配置对应标签的配置映射成对象，比如service&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.41127694859038144&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlRoDajNtxL3U6pWdR6CorDSibiazQMYgwSqAJLpcoicWVxaeTyFRtKITgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1206&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527014215448&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.14196762141967623&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0Il4fkzUKzPLibnBUAnTzwpV9tptts3u40vvYywHcibXLvPRv8FUgL89qlw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;803&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527014207406&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看看ServiceBean在映射成对象后做了啥，先看看ServiceBean结构&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.12603648424543948&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlzxUSQZKicOH47NXLyPYSQNAVxQ60SUXuANKXYEMf0heIjby3sqWPDJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1206&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527014200847&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自身是一个监听器，再通过CTRL+F12看看有哪些方法&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6237885462555066&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlosY02IIj4GRp2mhdicOP3y4RF47aedwmibQrmicB10mvonHJOZ5SIEGnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1135&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527014147890&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到export暴露这个方法后，ALT+F7反调下发现除了注解Annoatition外有两个地方调用，分别是&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.36911764705882355&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlChDvDGiaCElib7lqe5AWbkgQkEXCdCnDGeTbGVP9iceveybg70lM9cCkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;680&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527014138412&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一种是在属性被设置后调用，可以看到如果是延迟函数则不会调用。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.25664451827242524&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlPsicYibynfEQhnTj4PwzEfnjFRu6uBLJkso8h1NNV8wv4yLhlbiaVb0lg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1204&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527014130269&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二种是看到isDelay的时候才会调用export，也就是说延迟暴露的服务是在监听到ContextRefreshedEvent事件后进行调用的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在export方法内可以看到&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8964677222898904&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IliaicImuhicSF3GI7yWXKwCeVmpJUuHbeWz1oFpPBWnhRd6XteUNYNtSEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;821&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527014121568&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以针对不同的服务配置配置delay延迟时间，具体的肯定是在xml上配置了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;触发机制到这里基本就结束了，总结一下dubbo的触发机制就是建立在NamespaceHandlerSupport上，将xml中的标签实例化，并通过在afterPropertiesSet或者在监听到Spring容器抛出的容器刷新事件后，触发服务的暴露。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;画个流程图总结下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3075060532687651&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlR9iadv3SWnMpibia5dcVPQPqwr06WVmoFLldqtSVO3ic9CeAKdTtIqvTWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1239&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210529184757359&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于我司这边的服务配置最终落地在使用yaml方案上，不引入xml，最终我并没有使用NamespaceHandlerSupport去实例化，而是模仿dubbo3.0的方案包装了一个ServiceBootstrap对象，依赖SmartLifeCycle的生命周期，在start的时候取到yaml的配置，遍历进行服务暴露。dubbo3.0做了比较大调整，后续会专门讲，有兴趣的持续关注该系列。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;提一波URL&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在说服务暴露之前必须先提一波URL，否则主线没了，后续不好讲。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我没有接触到dubbo之前，我对URL的定位是指网络地址，而在dubbo中，可以认为是一种约定，几乎dubbo的所有模块都是通过URL来传参，这有什么好处呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以想想，如果没有约定好，那么不同的接口之间进行交互的参数便会乱掉，一会是字符串，一会是map，而有了统一的约定后，代码便会更加的规范和统一，我们在看代码的时候也会比较清晰，也容易拓展，比如如果你想拓展什么东西，直接往URL上拼接参数就可以了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7631027253668763&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlGG44G9EQRsFZjuABkdPkDxweHt5kPeZ7pLibadoqzdwZhyOnMIMhOzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;954&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527014111466&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到，除了几个基础的参数外，很多参数其实最终都放到了parameters中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;而在我司项目中，我们参考了URL的设计，构建了元数据的结构，也就是map，将服务的部分动态参数通过map进行传递。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;服务暴露过程&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在深入源码之前先大概总结下服务暴露的几个步骤，分别是：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;配置的构建、合并、检查。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;URL的组装。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务的暴露、注册。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我将这三个主要的过程放入流程图内&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.33657858136300417&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlGWtU5UiaOwKzTXHfFVErL1rchCTVzhHdMSJVQQLt6qIsFEfrnz5JI8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1438&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续跟进服务暴露的具体逻辑，也就是doExport后&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doExport&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (unexported) {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;Already unexported!&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (exported) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    exported = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (interfaceName == &lt;span&gt;null&lt;/span&gt; || interfaceName.length() == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&amp;lt;dubbo:service interface=\&quot;\&quot; /&amp;gt; interface not allow null!&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 检查provider是否为空，为空则创建一个，并通过系统变量为其初始化&lt;/span&gt;&lt;br/&gt;    checkDefault();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/** 各种初始值的设置 **/&lt;/span&gt;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 检查Application是否为空&lt;/span&gt;&lt;br/&gt;    checkApplication();&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 检查注册中心是否为空&lt;/span&gt;&lt;br/&gt;    checkRegistry();&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 检查protocols是否为空&lt;/span&gt;&lt;br/&gt;    checkProtocol();&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 补充各种参数&lt;/span&gt;&lt;br/&gt;    appendProperties(&lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 Stub合法性检查&lt;/span&gt;&lt;br/&gt;    checkStub(interfaceClass);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 mock合法性检查&lt;/span&gt;&lt;br/&gt;    checkMock(interfaceClass);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (path == &lt;span&gt;null&lt;/span&gt; || path.length() == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        path = interfaceName;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 多协议多注册中心暴露服务&lt;/span&gt;&lt;br/&gt;    doExportUrls();&lt;br/&gt;    ProviderModel providerModel = &lt;span&gt;new&lt;/span&gt; ProviderModel(getUniqueServiceName(), &lt;span&gt;this&lt;/span&gt;, ref);&lt;br/&gt;    ApplicationModel.initProviderModel(getUniqueServiceName(), providerModel);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结下来不外乎两步：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;对各类配置进行校验，并且更新部分配置；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;多协议多注册中心暴露服务；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中检查的细节暂时不铺开，因为服务暴露整个过程才是重点，后续服务治理了再重新讲这块，接下来继续讲重点doExportUrls方法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@SuppressWarnings&lt;/span&gt;({&lt;span&gt;&quot;unchecked&quot;&lt;/span&gt;, &lt;span&gt;&quot;rawtypes&quot;&lt;/span&gt;})&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doExportUrls&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 加载注册中心URL &lt;/span&gt;&lt;br/&gt;    List&amp;lt;URL&amp;gt; registryURLs = loadRegistries(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (ProtocolConfig protocolConfig : protocols) {&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 根据不同协议进行服务暴露 &lt;/span&gt;&lt;br/&gt;        doExportUrlsFor1Protocol(protocolConfig, registryURLs);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;loadRegistries也很简单，其实就是根据注册中心的配置组装成URL，这里多个注册中心比较好理解，多个protocols是什么鬼呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实是这样的，一个服务如果有多个协议那么就都需要暴露，比如同时支持 dubbo 协议和 hessian 协议，那么需要将这个服务用两种协议分别向多个注册中心暴露注册。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考了这块逻辑，在我司项目中，我们规范了注册中心的接口，允许注册中心有多种实现， 甚至是本地注册中心，但是并不允许有多个注册中心，目前来说是没有这种需求，而要选择哪个注册中心，只需要在yaml文件上进行配置即可&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来看doExportUrlsFor1Protocol方法&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在分析服务暴露流程之前便有提到过，dubbo内部使用URL来携带各类数据，从而贯穿整个生命周期的，而入口其实就是从这个方法开始的，等下我们便可以看到该方法可以分为两个步骤，前个步骤是组装URL的逻辑，后个步骤是真正实现暴露dubbo服务等逻辑的地方，不说了，继续code&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doExportUrlsFor1Protocol&lt;/span&gt;&lt;span&gt;(ProtocolConfig protocolConfig, List&amp;lt;URL&amp;gt; registryURLs)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;/**组装服务的URL开始**/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 获取协议名&lt;/span&gt;&lt;br/&gt;    String name = protocolConfig.getName();&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 如果为空，则默认是dubbo&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (name == &lt;span&gt;null&lt;/span&gt; || name.length() == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        name = &lt;span&gt;&quot;dubbo&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 设置map等各种参数&lt;/span&gt;&lt;br/&gt;    Map&amp;lt;String, String&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;();&lt;br/&gt;    map.put(Constants.SIDE_KEY, Constants.PROVIDER_SIDE);&lt;br/&gt;    map.put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion());&lt;br/&gt;    map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (ConfigUtils.getPid() &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 添加application、module、provider等信息到map中&lt;/span&gt;&lt;br/&gt;    appendParameters(map, application);&lt;br/&gt;    appendParameters(map, &lt;span&gt;module&lt;/span&gt;);&lt;br/&gt;    appendParameters(map, provider, Constants.DEFAULT_KEY);&lt;br/&gt;    appendParameters(map, protocolConfig);&lt;br/&gt;    appendParameters(map, &lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 如果methods的配置列表不为空，则遍历methods配置列表&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (methods != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !methods.isEmpty()) {&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (MethodConfig method : methods) {&lt;br/&gt;            &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 把方法名加入map&lt;/span&gt;&lt;br/&gt;            appendParameters(map, method, method.getName());&lt;br/&gt;            &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 添加methodconfig对象的字段信息到map中&lt;/span&gt;&lt;br/&gt;            String retryKey = method.getName() + &lt;span&gt;&quot;.retry&quot;&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (map.containsKey(retryKey)) {&lt;br/&gt;                String retryValue = map.remove(retryKey);&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;false&quot;&lt;/span&gt;.equals(retryValue)) {&lt;br/&gt;                    map.put(method.getName() + &lt;span&gt;&quot;.retries&quot;&lt;/span&gt;, &lt;span&gt;&quot;0&quot;&lt;/span&gt;);&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 添加ArgumentConfig列表&lt;/span&gt;&lt;br/&gt;            List&amp;lt;ArgumentConfig&amp;gt; arguments = method.getArguments();&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (arguments != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !arguments.isEmpty()) {&lt;br/&gt;                &lt;span&gt;for&lt;/span&gt; (ArgumentConfig argument : arguments) {&lt;br/&gt;                    &lt;span&gt;// convert argument type&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (argument.getType() != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; argument.getType().length() &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 利用反射拿到接口类的所有方法&lt;/span&gt;&lt;br/&gt;                        Method[] methods = interfaceClass.getMethods();&lt;br/&gt;                        &lt;span&gt;if&lt;/span&gt; (methods != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; methods.length &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                            &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 遍历methods&lt;/span&gt;&lt;br/&gt;                            &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; methods.length; i++) {&lt;br/&gt;                                String methodName = methods[i].getName();&lt;br/&gt;                                &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 找到目标方法&lt;/span&gt;&lt;br/&gt;                                &lt;span&gt;if&lt;/span&gt; (methodName.equals(method.getName())) {&lt;br/&gt;                                    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 通过反射拿到方法参数类型&lt;/span&gt;&lt;br/&gt;                                    Class&amp;lt;?&amp;gt;[] argtypes = methods[i].getParameterTypes();&lt;br/&gt;                                    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 如果下表为-1&lt;/span&gt;&lt;br/&gt;                                    &lt;span&gt;if&lt;/span&gt; (argument.getIndex() != -&lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;                                        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 检测argtypes的名称与ArgumentConfig中的type是否一致&lt;/span&gt;&lt;br/&gt;                                        &lt;span&gt;if&lt;/span&gt; (argtypes[argument.getIndex()].getName().equals(argument.getType())) {&lt;br/&gt;                                            appendParameters(map, argument, method.getName() + &lt;span&gt;&quot;.&quot;&lt;/span&gt; + argument.getIndex());&lt;br/&gt;                                        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                                            &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 不一致则抛出异常&lt;/span&gt;&lt;br/&gt;                                            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;argument config error : the index attribute and type attribute not match :index :&quot;&lt;/span&gt; + argument.getIndex() + &lt;span&gt;&quot;, type:&quot;&lt;/span&gt; + argument.getType());&lt;br/&gt;                                        }&lt;br/&gt;                                    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                                        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 遍历参数，查找argument.type的类型&lt;/span&gt;&lt;br/&gt;                                        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; argtypes.length; j++) {&lt;br/&gt;                                            Class&amp;lt;?&amp;gt; argclazz = argtypes[j];&lt;br/&gt;                                            &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 如果找得到则将ArgumentConfig字段添加map中&lt;/span&gt;&lt;br/&gt;                                            &lt;span&gt;if&lt;/span&gt; (argclazz.getName().equals(argument.getType())) {&lt;br/&gt;                                                appendParameters(map, argument, method.getName() + &lt;span&gt;&quot;.&quot;&lt;/span&gt; + j);&lt;br/&gt;                                                &lt;span&gt;if&lt;/span&gt; (argument.getIndex() != -&lt;span&gt;1&lt;/span&gt; &amp;amp;&amp;amp; argument.getIndex() != j) {&lt;br/&gt;                                                    &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;argument config error : the index attribute and type attribute not match :index :&quot;&lt;/span&gt; + argument.getIndex() + &lt;span&gt;&quot;, type:&quot;&lt;/span&gt; + argument.getType());&lt;br/&gt;                                                }&lt;br/&gt;                                            }&lt;br/&gt;                                        }&lt;br/&gt;                                    }&lt;br/&gt;                                }&lt;br/&gt;                            }&lt;br/&gt;                        }&lt;br/&gt;                    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (argument.getIndex() != -&lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;                        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 用户未配置type属性，但配置了index属性，且index != -1，则直接添加到map中&lt;/span&gt;&lt;br/&gt;                        appendParameters(map, argument, method.getName() + &lt;span&gt;&quot;.&quot;&lt;/span&gt; + argument.getIndex());&lt;br/&gt;                    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;argument config must set index or type attribute.eg: &amp;lt;dubbo:argument index=&#x27;0&#x27; .../&amp;gt; or &amp;lt;dubbo:argument type=xxx .../&amp;gt;&quot;&lt;/span&gt;);&lt;br/&gt;                    }&lt;br/&gt;&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;// end of methods for&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 如果是泛化调用，则在map中设置generic和methods&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (ProtocolUtils.isGeneric(generic)) {&lt;br/&gt;        map.put(Constants.GENERIC_KEY, generic);&lt;br/&gt;        map.put(Constants.METHODS_KEY, Constants.ANY_VALUE);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 获得版本号&lt;/span&gt;&lt;br/&gt;        String revision = Version.getVersion(interfaceClass, version);&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 放入map中&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (revision != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; revision.length() &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;            map.put(&lt;span&gt;&quot;revision&quot;&lt;/span&gt;, revision);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 获得方法集合&lt;/span&gt;&lt;br/&gt;        String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (methods.length == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;            logger.warn(&lt;span&gt;&quot;NO method found in service interface &quot;&lt;/span&gt; + interfaceClass.getName());&lt;br/&gt;            &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 设置方法为*&lt;/span&gt;&lt;br/&gt;            map.put(Constants.METHODS_KEY, Constants.ANY_VALUE);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 否则加入方法集合中&lt;/span&gt;&lt;br/&gt;            map.put(Constants.METHODS_KEY, StringUtils.join(&lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;String&amp;gt;(Arrays.asList(methods)), &lt;span&gt;&quot;,&quot;&lt;/span&gt;));&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 将token加入map&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!ConfigUtils.isEmpty(token)) {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (ConfigUtils.isDefault(token)) {&lt;br/&gt;            map.put(Constants.TOKEN_KEY, UUID.randomUUID().toString());&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            map.put(Constants.TOKEN_KEY, token);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (Constants.LOCAL_PROTOCOL.equals(protocolConfig.getName())) {&lt;br/&gt;        protocolConfig.setRegister(&lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;        map.put(&lt;span&gt;&quot;notify&quot;&lt;/span&gt;, &lt;span&gt;&quot;false&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    String contextPath = protocolConfig.getContextpath();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; ((contextPath == &lt;span&gt;null&lt;/span&gt; || contextPath.length() == &lt;span&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; provider != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;        contextPath = provider.getContextpath();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 获得地址、端口号&lt;/span&gt;&lt;br/&gt;    String host = &lt;span&gt;this&lt;/span&gt;.findConfigedHosts(protocolConfig, registryURLs, map);&lt;br/&gt;    Integer port = &lt;span&gt;this&lt;/span&gt;.findConfigedPorts(protocolConfig, name, map);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 组装生成URL&lt;/span&gt;&lt;br/&gt;    URL url = &lt;span&gt;new&lt;/span&gt; URL(name, host, port, (contextPath == &lt;span&gt;null&lt;/span&gt; || contextPath.length() == &lt;span&gt;0&lt;/span&gt; ? &lt;span&gt;&quot;&quot;&lt;/span&gt; : contextPath + &lt;span&gt;&quot;/&quot;&lt;/span&gt;) + path, map);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**组装服务的URL结束**/&lt;/span&gt;&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;/*&lt;br/&gt;  * 后续讲解服务暴露&lt;br/&gt;  */&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个方法实在是又臭又长，我特意分成两部分，目前这部分是组装服务的URL部分，其实简单点说就是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先将provider、applicaiton、module等各种基础配置直接放入map中，再针对method配置等进行校验，查看该配置是否有配置方法存在，并进行方法签名的校验，如果是才放入map中，然后还额外将一些多余数据，比如泛化调用、版本号等加入map中，最终根据host和port，结合map组装成URL，貌似还是有点长。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总归就是结合服务自身的各种配置放入map中，然后根据host和port以及map等生成URL就是了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来看看后续服务暴露部分&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doExportUrlsFor1Protocol&lt;/span&gt;&lt;span&gt;(ProtocolConfig protocolConfig, List&amp;lt;URL&amp;gt; registryURLs)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;/*&lt;br/&gt;  * 前面URL组装&lt;br/&gt;  */&lt;/span&gt;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 加载ConfiguratorFactory，并生成Configurator实例，判断是否有该协议的实现存在&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (ExtensionLoader.getExtensionLoader(ConfiguratorFactory&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;            .&lt;span&gt;hasExtension&lt;/span&gt;(&lt;span&gt;url&lt;/span&gt;.&lt;span&gt;getProtocol&lt;/span&gt;())) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 通过SPI机制配置URL&lt;/span&gt;&lt;br/&gt;        url = ExtensionLoader.getExtensionLoader(ConfiguratorFactory&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;                .&lt;span&gt;getExtension&lt;/span&gt;(&lt;span&gt;url&lt;/span&gt;.&lt;span&gt;getProtocol&lt;/span&gt;()).&lt;span&gt;getConfigurator&lt;/span&gt;(&lt;span&gt;url&lt;/span&gt;).&lt;span&gt;configure&lt;/span&gt;(&lt;span&gt;url&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    String scope = url.getParameter(Constants.SCOPE_KEY);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 如果scope为none，则什么都不做&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!Constants.SCOPE_NONE.toString().equalsIgnoreCase(scope)) {&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 如果scope不是远程，则暴露到本地&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!Constants.SCOPE_REMOTE.toString().equalsIgnoreCase(scope)) {&lt;br/&gt;            &lt;span&gt;/** 本地服务暴露 **/&lt;/span&gt;&lt;br/&gt;            exportLocal(url);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 如果不是local，则暴露到远程&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!Constants.SCOPE_LOCAL.toString().equalsIgnoreCase(scope)) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (logger.isInfoEnabled()) {&lt;br/&gt;                logger.info(&lt;span&gt;&quot;Export dubbo service &quot;&lt;/span&gt; + interfaceClass.getName() + &lt;span&gt;&quot; to url &quot;&lt;/span&gt; + url);&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (registryURLs != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !registryURLs.isEmpty()) {&lt;br/&gt;                &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 遍历注册中心&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;for&lt;/span&gt; (URL registryURL : registryURLs) {&lt;br/&gt;                    url = url.addParameterIfAbsent(Constants.DYNAMIC_KEY, registryURL.getParameter(Constants.DYNAMIC_KEY));&lt;br/&gt;                    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 加载监视器连接&lt;/span&gt;&lt;br/&gt;                    URL monitorUrl = loadMonitor(registryURL);&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (monitorUrl != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 如果没有则添加一个&lt;/span&gt;&lt;br/&gt;                        url = url.addParameterAndEncoded(Constants.MONITOR_KEY, monitorUrl.toFullString());&lt;br/&gt;                    }&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (logger.isInfoEnabled()) {&lt;br/&gt;                        logger.info(&lt;span&gt;&quot;Register dubbo service &quot;&lt;/span&gt; + interfaceClass.getName() + &lt;span&gt;&quot; url &quot;&lt;/span&gt; + url + &lt;span&gt;&quot; to registry &quot;&lt;/span&gt; + registryURL);&lt;br/&gt;                    }&lt;br/&gt;&lt;br/&gt;                    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 根据URL拿到代理方式&lt;/span&gt;&lt;br/&gt;                    String proxy = url.getParameter(Constants.PROXY_KEY);&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (StringUtils.isNotEmpty(proxy)) {&lt;br/&gt;                        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 给注册中心的URL添加代理方式&lt;/span&gt;&lt;br/&gt;                        registryURL = registryURL.addParameter(Constants.PROXY_KEY, proxy);&lt;br/&gt;                    }&lt;br/&gt;&lt;br/&gt;                    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/24 通过SPI机制拿到对应的proxyFactory&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;/** 根据proxyFactory拿到Invoker **/&lt;/span&gt;&lt;br/&gt;                    Invoker&amp;lt;?&amp;gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));&lt;br/&gt;                    DelegateProviderMetaDataInvoker wrapperInvoker = &lt;span&gt;new&lt;/span&gt; DelegateProviderMetaDataInvoker(invoker, &lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;                    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/24 通过SPI机制拿到对应的protocol,先是RegistryProtocol，再被AOP强化&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;/** 服务暴露 **/&lt;/span&gt;&lt;br/&gt;                    Exporter&amp;lt;?&amp;gt; exporter = protocol.export(wrapperInvoker);&lt;br/&gt;                    exporters.add(exporter);&lt;br/&gt;                }&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/24 通过SPI机制拿到对应的proxyFactory&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;/** 根据proxyFactory拿到Invoker **/&lt;/span&gt;&lt;br/&gt;                Invoker&amp;lt;?&amp;gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, url);&lt;br/&gt;                DelegateProviderMetaDataInvoker wrapperInvoker = &lt;span&gt;new&lt;/span&gt; DelegateProviderMetaDataInvoker(invoker, &lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;                &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/24 通过SPI机制拿到对应的protocol&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;/** 服务暴露 **/&lt;/span&gt;&lt;br/&gt;                Exporter&amp;lt;?&amp;gt; exporter = protocol.export(wrapperInvoker);&lt;br/&gt;                exporters.add(exporter);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.urls.add(url);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后续重要的地方可以认为其实就是遍历注册中心进行服务暴露，只是会根据服务配置域scope来针对性做一些暴露处理，比如如果scope不是远程，则暴露到本地，如果不是local，则暴露到远程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该方法中又包含了几个核心的拓展实现，包括：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;本地服务暴露&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;根据proxyFactory拿到Invoker&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;远程服务暴露、注册&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续补充流程图，整理思路&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3574468085106383&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlXSnKNebeHhlnpFR98NlNL14qibdAPibuvzquaiaPgbuib5u9N2htKVEiaAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1410&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210529230858560&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先第1点，看看本地服务暴露逻辑&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;exportLocal&lt;/span&gt;&lt;span&gt;(URL url)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(url.getProtocol())) {&lt;br/&gt;        URL local = URL.valueOf(url.toFullString())&lt;br/&gt;                .setProtocol(Constants.LOCAL_PROTOCOL)&lt;br/&gt;                .setHost(LOCALHOST)&lt;br/&gt;                .setPort(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;        StaticContext.getContext(Constants.SERVICE_IMPL_CLASS).put(url.getServiceKey(), getServiceClass(ref));&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/27 根据SPI拿到了InjvmProtocol调用了export方&lt;/span&gt;&lt;br/&gt;        Exporter&amp;lt;?&amp;gt; exporter = protocol.export(&lt;br/&gt;                proxyFactory.getInvoker(ref, (Class) interfaceClass, local));&lt;br/&gt;        &lt;span&gt;// 放入集合中缓存&lt;/span&gt;&lt;br/&gt;        exporters.add(exporter);&lt;br/&gt;        logger.info(&lt;span&gt;&quot;Export dubbo service &quot;&lt;/span&gt; + interfaceClass.getName() + &lt;span&gt;&quot; to local registry&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;Exporter&amp;lt;T&amp;gt; &lt;span&gt;export&lt;/span&gt;&lt;span&gt;(Invoker&amp;lt;T&amp;gt; invoker)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; RpcException &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InjvmExporter&amp;lt;T&amp;gt;(invoker, invoker.getUrl().getServiceKey(), exporterMap);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;暴露到本地的大致逻辑其实就是根据SPI机制拿到了InjvmProtocol生成了InjvmExporter，之后放入集合缓存中，至于SPI机制，后续需要开个文章专门讲讲，有兴趣持续关注该系列。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;为啥要有本地服务暴露？&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大致原因应该是因为可能存在同一个 JVM 内部引用自身服务的情况，因此暴露的本地服务在内部调用的时候可以直接消费同一个 JVM 的服务避免了网络间的通信。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续看第2点，根据proxyFactory拿到Invoker部分，首先我们看ProxyFactory类名就大概可以猜到该类具备生成代理对象的能力，我们看proxyFactory的生成模式&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.046199701937406856&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0Ilh4iaia9nTk1V27WbO10b6J5DDINsejUrZtdMAJEq9Ur8M5QMzkHCXwTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1342&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210527012515717&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，该对象也是通过SPI机制生成的，由于SPI机制也是比较庞大的，为了避免混淆，后续再开篇文章讲解，有兴趣的持续关注。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过SPI机制拿到了ProxyFactory的实现对象JavassisProxyFactory，最终调用的代码&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;Invoker&amp;lt;T&amp;gt; &lt;span&gt;getInvoker&lt;/span&gt;&lt;span&gt;(T proxy, Class&amp;lt;T&amp;gt; type, URL url)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/23 为目标类创建Wrapper&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf(&lt;span&gt;&#x27;$&#x27;&lt;/span&gt;) &amp;lt; &lt;span&gt;0&lt;/span&gt; ? proxy.getClass() : type);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/23 创建匿名的Invoker对象，并实现doInvoker方法&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AbstractProxyInvoker&amp;lt;T&amp;gt;(proxy, type, url) {&lt;br/&gt;        &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; Object &lt;span&gt;doInvoke&lt;/span&gt;&lt;span&gt;(T proxy, String methodName,&lt;br/&gt;                                  Class&amp;lt;?&amp;gt;[] parameterTypes,&lt;br/&gt;                                  Object[] arguments)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Throwable &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/23 调用Wrapper的invokeMethod方法，invokeMethod最终会调用目标方法&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);&lt;br/&gt;        }&lt;br/&gt;    };&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该方法就是创建了一个匿名的Inovker对象，在doInvker方法中调用wrapper.invokeMethod方法，invokeMethod最终会调用目标方法。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;那么wrapper又是啥？&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Wrapper是一个抽象类，在调用Wrapper.getWrapper创建子类的时候，会根据目标Class对象进行解析，拿到各种方法、类成员变量等信息，以及生成invokeMethod方法等代码，在代码生成完毕后，通过Javassist生成Class对象，可以理解为该Class对象就是BossServiceImpl的代理实例，有兴趣了解生成过程的可以看Wrapper.makeWrapper方法。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;为啥一定要封装Invoker？&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实就是为了屏蔽本地调用或者远程调用或者集群调用的细节，统一暴露出一个可执行体，方便调用者调用，而不管怎么封装，其实最终都是调向目标方法。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;为啥要封装Exporter？&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个涉及到后续服务被具体调用，后面会开一篇文章专门讲这个，有兴趣的可以持续关注。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在我司的rpc框架中，倒是没有使用Javassist去生成代理对象，而是选择了使用jdk提供的Proxy生成机制。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续补充流程图，整理思路&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6867256637168142&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlBNHfkhLkmvc05F2Yos6LtxkWndQBZvANS8GRSkMghb2WadibO4hWIYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;565&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210529232357356&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来说说远程服务暴露&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;远程服务暴露要比本地复杂的多，在doExportUrlsFor1Protocol后半部分，通过proxyFactory生成Inovker后，就需要调用protocol.export做真的服务暴露了，我们可以看到protocol是如何实例化的&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.045454545454545456&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlzesP1j4BU3XvkiaQmic1tBjfuxfBGgbzhB1YJ3ZaDsjChl29CMbbn6WA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1188&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210529150630482&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;又是通过SPI实例化的，通过断点可以看到会先被AOP切面拦截额外做了一些其他的操作，不过最终走向的RegisterProtocol，AOP这块后续再分析，有兴趣的持续关注。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来继续看RegisterProtocol.export做了啥&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;Exporter&amp;lt;T&amp;gt; &lt;span&gt;export&lt;/span&gt;&lt;span&gt;(&lt;span&gt;final&lt;/span&gt; Invoker&amp;lt;T&amp;gt; originInvoker)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; RpcException &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 服务暴露&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; ExporterChangeableWrapper&amp;lt;T&amp;gt; exporter = doLocalExport(originInvoker);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/23 获得注册中心的URL&lt;/span&gt;&lt;br/&gt;    URL registryUrl = getRegistryUrl(originInvoker);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; Registry registry = getRegistry(originInvoker);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/23 获得已经注册的服务提供者URL&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; URL registeredProviderUrl = getRegisteredProviderUrl(originInvoker);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;boolean&lt;/span&gt; register = registeredProviderUrl.getParameter(&lt;span&gt;&quot;register&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    ProviderConsumerRegTable.registerProvider(originInvoker, registryUrl, registeredProviderUrl);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (register) {&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 真正做服务注册的地方&lt;/span&gt;&lt;br/&gt;        register(registryUrl, registeredProviderUrl);&lt;br/&gt;        ProviderConsumerRegTable.getProviderWrapper(originInvoker).setReg(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/23 获取override订阅URL&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; URL overrideSubscribeUrl = getSubscribedOverrideUrl(registeredProviderUrl);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/23 创建override的监听器&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; OverrideListener overrideSubscribeListener = &lt;span&gt;new&lt;/span&gt; OverrideListener(overrideSubscribeUrl, originInvoker);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/23 缓存监听器到集合中&lt;/span&gt;&lt;br/&gt;    overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/23 向注册中心订阅override数据&lt;/span&gt;&lt;br/&gt;    registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/23 创建并返回DestroyableExporter&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; DestroyableExporter&amp;lt;T&amp;gt;(exporter, originInvoker, overrideSubscribeUrl, registeredProviderUrl);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从代码上看，该方法其实做了两件事情，分别是服务暴露和注册：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;执行了doLocalExport进行服务暴露&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;加载注册中心实现类，向注册中心注册服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;向注册中心订阅override数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;创建并返回DestroyableExporter&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来继续看看doLocalExport做了啥&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;ExporterChangeableWrapper&amp;lt;T&amp;gt; &lt;span&gt;doLocalExport&lt;/span&gt;&lt;span&gt;(&lt;span&gt;final&lt;/span&gt; Invoker&amp;lt;T&amp;gt; originInvoker)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    String key = getCacheKey(originInvoker);&lt;br/&gt;    ExporterChangeableWrapper&amp;lt;T&amp;gt; exporter = (ExporterChangeableWrapper&amp;lt;T&amp;gt;) bounds.get(key);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (exporter == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;synchronized&lt;/span&gt; (bounds) {&lt;br/&gt;            exporter = (ExporterChangeableWrapper&amp;lt;T&amp;gt;) bounds.get(key);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (exporter == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/24 创建Invoker为委托对象&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;final&lt;/span&gt; Invoker&amp;lt;?&amp;gt; invokerDelegete = &lt;span&gt;new&lt;/span&gt; InvokerDelegete&amp;lt;T&amp;gt;(originInvoker, getProviderUrl(originInvoker));&lt;br/&gt;                &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/24 调用protocol的export方法暴露服务&lt;/span&gt;&lt;br/&gt;                exporter = &lt;span&gt;new&lt;/span&gt; ExporterChangeableWrapper&amp;lt;T&amp;gt;((Exporter&amp;lt;T&amp;gt;) protocol.export(invokerDelegete), originInvoker);&lt;br/&gt;                bounds.put(key, exporter);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; exporter;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看逻辑比较简单，主要是根据不同协议配置，根据SPI调用不同的protocol实现，跟暴露到本地时实现的InjvmPortocol一样，默认这里调用的是DubboProtocol.export&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;Exporter&amp;lt;T&amp;gt; &lt;span&gt;export&lt;/span&gt;&lt;span&gt;(Invoker&amp;lt;T&amp;gt; invoker)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; RpcException &lt;/span&gt;{&lt;br/&gt;    URL url = invoker.getUrl();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 得到服务key,格式：group+&quot;/&quot;+serviceName+&quot;:&quot;+serviceVersion+&quot;:&quot;+port&lt;/span&gt;&lt;br/&gt;    String key = serviceKey(url);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 创建exporter &lt;/span&gt;&lt;br/&gt;    DubboExporter&amp;lt;T&amp;gt; exporter = &lt;span&gt;new&lt;/span&gt; DubboExporter&amp;lt;T&amp;gt;(invoker, key, exporterMap);&lt;br/&gt;    exporterMap.put(key, exporter);&lt;br/&gt;&lt;br/&gt;    Boolean isStubSupportEvent = url.getParameter(Constants.STUB_EVENT_KEY, Constants.DEFAULT_STUB_EVENT);&lt;br/&gt;    Boolean isCallbackservice = url.getParameter(Constants.IS_CALLBACK_SERVICE, &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (isStubSupportEvent &amp;amp;&amp;amp; !isCallbackservice) {&lt;br/&gt;        String stubServiceMethods = url.getParameter(Constants.STUB_EVENT_METHODS_KEY);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (stubServiceMethods == &lt;span&gt;null&lt;/span&gt; || stubServiceMethods.length() == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (logger.isWarnEnabled()) {&lt;br/&gt;                logger.warn(&lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;consumer [&quot;&lt;/span&gt; + url.getParameter(Constants.INTERFACE_KEY) +&lt;br/&gt;                        &lt;span&gt;&quot;], has set stubproxy support event ,but no stub methods founded.&quot;&lt;/span&gt;));&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/24 开启服务器&lt;/span&gt;&lt;br/&gt;    openServer(url);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 序列化 &lt;/span&gt;&lt;br/&gt;    optimizeSerialization(url);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; exporter;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以到export先是new了一个DubboExporter对象， 后续打开了服务，接下来继续看openServer做了啥&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;openServer&lt;/span&gt;&lt;span&gt;(URL url)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    String key = url.getAddress();&lt;br/&gt;    &lt;span&gt;boolean&lt;/span&gt; isServer = url.getParameter(Constants.IS_SERVER_KEY, &lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (isServer) {&lt;br/&gt;        ExchangeServer server = serverMap.get(key);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (server == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/24 启动一个服务实例&lt;/span&gt;&lt;br/&gt;            serverMap.put(key, createServer(url));&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;// server supports reset, use together with override&lt;/span&gt;&lt;br/&gt;            server.reset(url);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; ExchangeServer &lt;span&gt;createServer&lt;/span&gt;&lt;span&gt;(URL url)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 服务器关闭是发送readonly时间 &lt;/span&gt;&lt;br/&gt;    url = url.addParameterIfAbsent(Constants.CHANNEL_READONLYEVENT_SENT_KEY, Boolean.TRUE.toString());&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 心跳默认时间 &lt;/span&gt;&lt;br/&gt;    url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 获得远程通讯服务端实现方式 &lt;/span&gt;&lt;br/&gt;    String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (str != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; str.length() &amp;gt; &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !ExtensionLoader.getExtensionLoader(Transporter&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;).&lt;span&gt;hasExtension&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;))&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;RpcException&lt;/span&gt;(&quot;&lt;span&gt;Unsupported&lt;/span&gt; &lt;span&gt;server&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;: &quot; + &lt;span&gt;str&lt;/span&gt; + &quot;, &lt;span&gt;url&lt;/span&gt;: &quot; + &lt;span&gt;url&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 添加编解码器DubboCodec实现 &lt;/span&gt;&lt;br/&gt;    url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME);&lt;br/&gt;    ExchangeServer server;&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 启动服务器 &lt;/span&gt;&lt;br/&gt;        server = Exchangers.bind(url, requestHandler);&lt;br/&gt;    } &lt;span&gt;catch&lt;/span&gt; (RemotingException e) {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RpcException(&lt;span&gt;&quot;Fail to start server(url: &quot;&lt;/span&gt; + url + &lt;span&gt;&quot;) &quot;&lt;/span&gt; + e.getMessage(), e);&lt;br/&gt;    }&lt;br/&gt;    str = url.getParameter(Constants.CLIENT_KEY);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (str != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; str.length() &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        Set&amp;lt;String&amp;gt; supportedTypes = ExtensionLoader.getExtensionLoader(Transporter&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;).&lt;span&gt;getSupportedExtensions&lt;/span&gt;()&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!supportedTypes.contains(str)) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RpcException(&lt;span&gt;&quot;Unsupported client type: &quot;&lt;/span&gt; + str);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; server;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到最终还是依赖URL携带的远程通讯实现方法创建了一个服务器对象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结一下：doLocalExport最终其实就是根据URL开启了服务器，并返回了Exporter。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来继续看注册服务部分&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;register&lt;/span&gt;&lt;span&gt;(URL registryUrl, URL registedProviderUrl)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 获取注册中心实例&lt;/span&gt;&lt;br/&gt;    Registry registry = registryFactory.getRegistry(registryUrl);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 调用register&lt;/span&gt;&lt;br/&gt;    registry.register(registedProviderUrl);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Regsitry的生成最终也是依赖了SPI机制，最终走向FailbackRegistry.register&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;register&lt;/span&gt;&lt;span&gt;(URL url)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;super&lt;/span&gt;.register(url);&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/24 从失败的集合中移除&lt;/span&gt;&lt;br/&gt;    failedRegistered.remove(url);&lt;br/&gt;    failedUnregistered.remove(url);&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/24 向注册中心发起注册请求&lt;/span&gt;&lt;br/&gt;        doRegister(url);&lt;br/&gt;    } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;        Throwable t = e;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;boolean&lt;/span&gt; check = getUrl().getParameter(Constants.CHECK_KEY, &lt;span&gt;true&lt;/span&gt;)&lt;br/&gt;                &amp;amp;&amp;amp; url.getParameter(Constants.CHECK_KEY, &lt;span&gt;true&lt;/span&gt;)&lt;br/&gt;                &amp;amp;&amp;amp; !Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());&lt;br/&gt;        &lt;span&gt;boolean&lt;/span&gt; skipFailback = t &lt;span&gt;instanceof&lt;/span&gt; SkipFailbackWrapperException;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (check || skipFailback) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (skipFailback) {&lt;br/&gt;                t = t.getCause();&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;Failed to register &quot;&lt;/span&gt; + url + &lt;span&gt;&quot; to registry &quot;&lt;/span&gt; + getUrl().getAddress() + &lt;span&gt;&quot;, cause: &quot;&lt;/span&gt; + t.getMessage(), t);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            logger.error(&lt;span&gt;&quot;Failed to register &quot;&lt;/span&gt; + url + &lt;span&gt;&quot;, waiting for retry, cause: &quot;&lt;/span&gt; + t.getMessage(), t);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 发生异常则放入failedRegistered&lt;/span&gt;&lt;br/&gt;        failedRegistered.add(url);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到注册的核心实现是在doRegister中，不过通过代码机制我们也可以看出，在注册报错的时候会被trycatch拦截，然后放入failedRegistered容器中，结合FailbackRegistry该类名可以推测应该是有个重试机制存在，看看构造方法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/24 从url中获取重试频率参数，启动定时器进行重试逻辑&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;FailbackRegistry&lt;/span&gt;&lt;span&gt;(URL url)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;super&lt;/span&gt;(url);&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.retryPeriod = url.getParameter(Constants.REGISTRY_RETRY_PERIOD_KEY, Constants.DEFAULT_REGISTRY_RETRY_PERIOD);&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.retryFuture = retryExecutor.scheduleWithFixedDelay(&lt;span&gt;new&lt;/span&gt; Runnable() {&lt;br/&gt;        &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 定时重试 &lt;/span&gt;&lt;br/&gt;                retry();&lt;br/&gt;            } &lt;span&gt;catch&lt;/span&gt; (Throwable t) { &lt;span&gt;// Defensive fault tolerance&lt;/span&gt;&lt;br/&gt;                logger.error(&lt;span&gt;&quot;Unexpected error occur at failed retry, cause: &quot;&lt;/span&gt; + t.getMessage(), t);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }, retryPeriod, retryPeriod, TimeUnit.MILLISECONDS);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;果不其然，最终如果注册发生了异常，则会进行定时重试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关于重试机制也是要有的，在我司的rpc框架中，我们将重试时间放在yaml上去配置，不过定时器并没有采用Executor机制，而是模仿了dubbo3.0的写法，也就是时间轮的机制，性能更好。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来看注册核心部分doRegister，可以看到该方法是一个抽象方法，由于我在xml配置中配置的注册中心是Zookeeper，因而最终走向ZookeeperRegistry&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doRegister&lt;/span&gt;&lt;span&gt;(URL url)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, &lt;span&gt;true&lt;/span&gt;));&lt;br/&gt;    } &lt;span&gt;catch&lt;/span&gt; (Throwable e) {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RpcException(&lt;span&gt;&quot;Failed to register &quot;&lt;/span&gt; + url + &lt;span&gt;&quot; to zookeeper &quot;&lt;/span&gt; + getUrl() + &lt;span&gt;&quot;, cause: &quot;&lt;/span&gt; + e.getMessage(), e);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务注册走到这里基本到头了，再深入便是看注册中心的实现了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来看看向注册中心订阅override数据部分&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面有说过registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener)最终走向的方法是FailbackRegistry.subscribe&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;subscribe&lt;/span&gt;&lt;span&gt;(URL url, NotifyListener listener)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;super&lt;/span&gt;.subscribe(url, listener);&lt;br/&gt;    removeFailedSubscribed(url, listener);&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 真正做订阅的地方 &lt;/span&gt;&lt;br/&gt;        doSubscribe(url, listener);&lt;br/&gt;    } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;        Throwable t = e;&lt;br/&gt;&lt;br/&gt;        List&amp;lt;URL&amp;gt; urls = getCacheUrls(url);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (urls != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !urls.isEmpty()) {&lt;br/&gt;            notify(url, listener, urls);&lt;br/&gt;            logger.error(&lt;span&gt;&quot;Failed to subscribe &quot;&lt;/span&gt; + url + &lt;span&gt;&quot;, Using cached list: &quot;&lt;/span&gt; + urls + &lt;span&gt;&quot; from cache file: &quot;&lt;/span&gt; + getUrl().getParameter(Constants.FILE_KEY, System.getProperty(&lt;span&gt;&quot;user.home&quot;&lt;/span&gt;) + &lt;span&gt;&quot;/dubbo-registry-&quot;&lt;/span&gt; + url.getHost() + &lt;span&gt;&quot;.cache&quot;&lt;/span&gt;) + &lt;span&gt;&quot;, cause: &quot;&lt;/span&gt; + t.getMessage(), t);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;// If the startup detection is opened, the Exception is thrown directly.&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;boolean&lt;/span&gt; check = getUrl().getParameter(Constants.CHECK_KEY, &lt;span&gt;true&lt;/span&gt;)&lt;br/&gt;                    &amp;amp;&amp;amp; url.getParameter(Constants.CHECK_KEY, &lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;boolean&lt;/span&gt; skipFailback = t &lt;span&gt;instanceof&lt;/span&gt; SkipFailbackWrapperException;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (check || skipFailback) {&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (skipFailback) {&lt;br/&gt;                    t = t.getCause();&lt;br/&gt;                }&lt;br/&gt;                &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;Failed to subscribe &quot;&lt;/span&gt; + url + &lt;span&gt;&quot;, cause: &quot;&lt;/span&gt; + t.getMessage(), t);&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                logger.error(&lt;span&gt;&quot;Failed to subscribe &quot;&lt;/span&gt; + url + &lt;span&gt;&quot;, waiting for retry, cause: &quot;&lt;/span&gt; + t.getMessage(), t);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 订阅失败，则放入失败容器中 &lt;/span&gt;&lt;br/&gt;        addFailedSubscribed(url, listener);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样，订阅失败后也是放入失败容器中，定时重试进行订阅。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再看看核心实现方法doSubscribe方法，最终走向ZookeeperRegistry.doSubscribe中&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSubscribe&lt;/span&gt;&lt;span&gt;(&lt;span&gt;final&lt;/span&gt; URL url, &lt;span&gt;final&lt;/span&gt; NotifyListener listener)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 处理URL参数中interface为*的订阅，例如监控中心的订阅&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (Constants.ANY_VALUE.equals(url.getServiceInterface())) {&lt;br/&gt;            &lt;span&gt;/** 先无视 **/&lt;/span&gt;&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            List&amp;lt;URL&amp;gt; urls = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;URL&amp;gt;();&lt;br/&gt;            &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 遍历分类数组&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (String path : toCategoriesPath(url)) {&lt;br/&gt;                &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 获得监听器集合&lt;/span&gt;&lt;br/&gt;                ConcurrentMap&amp;lt;NotifyListener, ChildListener&amp;gt; listeners = zkListeners.get(url);&lt;br/&gt;                &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 如果没有则创建&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (listeners == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                    zkListeners.putIfAbsent(url, &lt;span&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;NotifyListener, ChildListener&amp;gt;());&lt;br/&gt;                    listeners = zkListeners.get(url);&lt;br/&gt;                }&lt;br/&gt;                &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 获得监听器&lt;/span&gt;&lt;br/&gt;                ChildListener zkListener = listeners.get(listener);&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (zkListener == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                    listeners.putIfAbsent(listener, &lt;span&gt;new&lt;/span&gt; ChildListener() {&lt;br/&gt;                        &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;childChanged&lt;/span&gt;&lt;span&gt;(String parentPath, List&amp;lt;String&amp;gt; currentChilds)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;                            &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 通知服务变化，回调NotifyListener&lt;/span&gt;&lt;br/&gt;                            ZookeeperRegistry.&lt;span&gt;this&lt;/span&gt;.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds));&lt;br/&gt;                        }&lt;br/&gt;                    });&lt;br/&gt;                    zkListener = listeners.get(listener);&lt;br/&gt;                }&lt;br/&gt;                &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 创建节点，如:/dubbo/com.alibaba.dubbo.demo.DemoService/providers&lt;/span&gt;&lt;br/&gt;                zkClient.create(path, &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;                List&amp;lt;String&amp;gt; children = zkClient.addChildListener(path, zkListener);&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (children != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                    urls.addAll(toUrlsWithEmpty(url, path, children));&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 2021/5/29 通知数据变更，如RegistryDirectory&lt;/span&gt;&lt;br/&gt;            notify(url, listener, urls);&lt;br/&gt;        }&lt;br/&gt;    } &lt;span&gt;catch&lt;/span&gt; (Throwable e) {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RpcException(&lt;span&gt;&quot;Failed to subscribe &quot;&lt;/span&gt; + url + &lt;span&gt;&quot; to zookeeper &quot;&lt;/span&gt; + getUrl() + &lt;span&gt;&quot;, cause: &quot;&lt;/span&gt; + e.getMessage(), e);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个方法主要做了订阅和监听触发逻辑，具体逻辑就是订阅了某个服务的URL，在服务变更的时候触发逻辑变化。其实此处已经是可以归纳入服务治理模块了，后续会有专门的文章分享服务治理，有兴趣可以持续关注。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;画个流程图，整理下思路&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4340359094457455&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlId5hiaa7LrsBUxMKjXmyLz06umdV8shyrvs6EbYiccuib4g9rTromzKFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1281&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20210529232729748&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到这里服务暴露流程基本理完了，还是有点东西在里面的，并且还需要掌握 Dubbo SPI，不然有些点例如自适应什么的还是很难理解的，为了写这篇文章，我前前后后也是花了不少的时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后我再来一张完整的流程图带大家再过一遍，具体还是有很多细节，不过不是主干我就不做分析了，不然文章散掉了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2602078693392725&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuiatwY7xaX5ENHDg0YYKV0IlEa6xLIVLQp3fAEHmbQB3zUmibPfaknJJlhiaHwfLjuNqbX4DZhU9BjQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2694&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;dubbo流程&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后续服务治理、APO、SPI机制也会在该流程图上进行拓展，有兴趣的也可以关注流程图链接：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://www.processon.com/view/link/60b25f275653bb3c7e646934&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然看完了该篇文章，但是还是建议大家自己打断点过一遍，可以更加清晰，而如果是为了应付面试官提问的话，基本上记住上面流程图的内容就差不多了，当你研究完了dubbo后，其实会发现dubbo有很多东西可以写，比如服务应用、SPI、dubbo中的AOP机制、服务治理等好几个模块，最后就是带大家撸一个RPC框架了，还是那句话，想学dubbo的可以持续关注这一系列。&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;- 原创不易，帮忙点个在看、分享支持一下 -&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;- 往期文章推荐 -&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend-list&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247485423_1&quot; data-recommend-article-time=&quot;1620837351&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/YtkPhPEJUuhCYN6zfjF4Mf7gjbaRBgVcibTic8I058LVv0K4OFYQiaiarouIyJbRsQYqGw9IibGFTFKQD56rBiamURWg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;一起玩dubbo，先入个门&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NjMwMzgzOA==&amp;amp;mid=2247485423&amp;amp;idx=1&amp;amp;sn=7ca7f2507ee168cf0815a5a73fb8e30e&amp;amp;chksm=ebdfb4dedca83dc85cfec9b75c42c1faed79209b214e4f4d908b9c92237ccff2069fa2249b76#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NjMwMzgzOA==&amp;amp;mid=2247485423&amp;amp;idx=1&amp;amp;sn=7ca7f2507ee168cf0815a5a73fb8e30e&amp;amp;chksm=ebdfb4dedca83dc85cfec9b75c42c1faed79209b214e4f4d908b9c92237ccff2069fa2249b76&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.4239290989660266&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YtkPhPEJUuhCYN6zfjF4Mf7gjbaRBgVcibTic8I058LVv0K4OFYQiaiarouIyJbRsQYqGw9IibGFTFKQD56rBiamURWg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;677&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;一起玩dubbo，先入个门&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247484692_1&quot; data-recommend-article-time=&quot;1609945281&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/YtkPhPEJUug3ianCofva8iayBzZGibLSwaezic8oTBM0B6IW4j8jUYoZPuBEFfYpWeEC0b4iciasY5mD5Hzr8BhJl1rA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;Caffeine实战教程篇&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NjMwMzgzOA==&amp;amp;mid=2247484692&amp;amp;idx=1&amp;amp;sn=bf8f09b00d5e4eb44d3ae3aa28145d7c&amp;amp;chksm=ebdfb625dca83f3328aae1aebae539f55ac9a507fdebc75c1530cea561544d15c32f944cd76d#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NjMwMzgzOA==&amp;amp;mid=2247484692&amp;amp;idx=1&amp;amp;sn=bf8f09b00d5e4eb44d3ae3aa28145d7c&amp;amp;chksm=ebdfb625dca83f3328aae1aebae539f55ac9a507fdebc75c1530cea561544d15c32f944cd76d&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.4232111692844677&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YtkPhPEJUug3ianCofva8iayBzZGibLSwaezic8oTBM0B6IW4j8jUYoZPuBEFfYpWeEC0b4iciasY5mD5Hzr8BhJl1rA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1146&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;Caffeine实战教程篇&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247484635_1&quot; data-recommend-article-time=&quot;1609722000&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/YtkPhPEJUuia0aIrpJTu9mmfWy4tsphuVE3iawQ8Gen53m4BfLe20LrACH0SLVNKicWfIOdySyaOr1IAVrovEBBuQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;元旦用SpringBoot撸了个博客网站送给大家&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NjMwMzgzOA==&amp;amp;mid=2247484635&amp;amp;idx=1&amp;amp;sn=5fa3db7a2648a398616a201c11f41e84&amp;amp;chksm=ebdfb7eadca83efcd4f835958ba4b2dcf5975cbd904cca1d8aedc78ba5ca06ae5695e73d27c6#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NjMwMzgzOA==&amp;amp;mid=2247484635&amp;amp;idx=1&amp;amp;sn=5fa3db7a2648a398616a201c11f41e84&amp;amp;chksm=ebdfb7eadca83efcd4f835958ba4b2dcf5975cbd904cca1d8aedc78ba5ca06ae5695e73d27c6&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.42638398115429915&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YtkPhPEJUuia0aIrpJTu9mmfWy4tsphuVE3iawQ8Gen53m4BfLe20LrACH0SLVNKicWfIOdySyaOr1IAVrovEBBuQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;849&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;元旦用SpringBoot撸了个博客网站送给大家&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247485301_1&quot; data-recommend-article-time=&quot;1612610642&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/YtkPhPEJUuiaahS8ibmd3tEuLLQaniaWNic3icXQPD7aMydCEdCUv67oWfM9g3zSz3cOrcC2iabz8r2p4GEQv5Inw6sg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;聊聊Autowired的常考面试题&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NjMwMzgzOA==&amp;amp;mid=2247485301&amp;amp;idx=1&amp;amp;sn=4bc64019f88a358660cf3d95b5147ddf&amp;amp;chksm=ebdfb444dca83d527f1e55de2b42479b6baa7dc33d8c172666f2320e218c66ab58526dd861a9#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NjMwMzgzOA==&amp;amp;mid=2247485301&amp;amp;idx=1&amp;amp;sn=4bc64019f88a358660cf3d95b5147ddf&amp;amp;chksm=ebdfb444dca83d527f1e55de2b42479b6baa7dc33d8c172666f2320e218c66ab58526dd861a9&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.42632850241545894&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YtkPhPEJUuiaahS8ibmd3tEuLLQaniaWNic3icXQPD7aMydCEdCUv67oWfM9g3zSz3cOrcC2iabz8r2p4GEQv5Inw6sg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;828&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;聊聊Autowired的常考面试题&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247485276_1&quot; data-recommend-article-time=&quot;1610928600&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/YtkPhPEJUuhe3bmtuzx6tygRz5HJ0UsujbTRyiaP0dRAsibvInBvrx8ExALG1t6OWG5IbaibB5L9XmNZicBbH5ZUyw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;面试官告诉你什么是JMM和常考面试题&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NjMwMzgzOA==&amp;amp;mid=2247485276&amp;amp;idx=1&amp;amp;sn=e54e5736c16ecbb20fda2e8c72cf7f8c&amp;amp;chksm=ebdfb46ddca83d7b5841de17d295ae13169509c2590b76948a03695f5618793e9cc461286963#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NjMwMzgzOA==&amp;amp;mid=2247485276&amp;amp;idx=1&amp;amp;sn=e54e5736c16ecbb20fda2e8c72cf7f8c&amp;amp;chksm=ebdfb46ddca83d7b5841de17d295ae13169509c2590b76948a03695f5618793e9cc461286963&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.428125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YtkPhPEJUuhe3bmtuzx6tygRz5HJ0UsujbTRyiaP0dRAsibvInBvrx8ExALG1t6OWG5IbaibB5L9XmNZicBbH5ZUyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;面试官告诉你什么是JMM和常考面试题&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247485240_1&quot; data-recommend-article-time=&quot;1610515401&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/YtkPhPEJUuiaw04e1q4DnmMsjz6diaotCmBg8ETp5YXqf0oTpsczviaAy2GUoPfIqV3NJwN2yfLncRibRgm8EOLzzg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;去年面了多个候选人，看看我挖的坑还有他们应该要补的Java基础(二)&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NjMwMzgzOA==&amp;amp;mid=2247485240&amp;amp;idx=1&amp;amp;sn=e415d480ae461d97dc4e950fdd537b63&amp;amp;chksm=ebdfb409dca83d1f6abf2abff9e2805f75895d5ff280382518b92383f3ffb514a23c4f9e8700#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NjMwMzgzOA==&amp;amp;mid=2247485240&amp;amp;idx=1&amp;amp;sn=e415d480ae461d97dc4e950fdd537b63&amp;amp;chksm=ebdfb409dca83d1f6abf2abff9e2805f75895d5ff280382518b92383f3ffb514a23c4f9e8700&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.42870544090056284&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YtkPhPEJUuiaw04e1q4DnmMsjz6diaotCmBg8ETp5YXqf0oTpsczviaAy2GUoPfIqV3NJwN2yfLncRibRgm8EOLzzg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1066&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;去年面了多个候选人，看看我挖的坑还有他们应该要补的Java基础(二)&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247485211_1&quot; data-recommend-article-time=&quot;1610199000&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/YtkPhPEJUug5wwPyou1zK5EZ4sl7vWaZM0y0dzVKRB49c7txa4GrD5OXEljl3PMJia64oyvBhFxyGAGXXazU0HA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;去年面了多个候选人，看看我挖的坑还有他们应该要补的Java基础(一)&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NjMwMzgzOA==&amp;amp;mid=2247485211&amp;amp;idx=1&amp;amp;sn=e8cbcfaad0b299275c595787deb2ce7e&amp;amp;chksm=ebdfb42adca83d3ce9e014e8faeba18680ca22ec54225dedb8c209d8a512432eadb0fef7a7a6#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NjMwMzgzOA==&amp;amp;mid=2247485211&amp;amp;idx=1&amp;amp;sn=e8cbcfaad0b299275c595787deb2ce7e&amp;amp;chksm=ebdfb42adca83d3ce9e014e8faeba18680ca22ec54225dedb8c209d8a512432eadb0fef7a7a6&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.42569832402234636&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YtkPhPEJUug5wwPyou1zK5EZ4sl7vWaZM0y0dzVKRB49c7txa4GrD5OXEljl3PMJia64oyvBhFxyGAGXXazU0HA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;895&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;去年面了多个候选人，看看我挖的坑还有他们应该要补的Java基础(一)&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;想学dubbo的关注我&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI4NjMwMzgzOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YtkPhPEJUuhCYN6zfjF4Mf7gjbaRBgVcwgj6OpiaHmtSUbljAGOOFibLgYkADTWhgpVQtv6SibZaVa15TTKf9CI3g/0?wx_fmt=png&quot; data-nickname=&quot;稀饭下雪&quot; data-alias=&quot;xifanxiaxue&quot; data-signature=&quot;游戏大厂服务端高级开发，对游戏或者后端技术有兴趣的小伙伴们，欢迎关注&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3720217afc5abb1475ed9a28a8e17052</guid>
<title>Elasticsearch 索引生命周期管理 ILM 实战指南</title>
<link>https://toutiao.io/k/ioc5xc2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、什么是索引生命周期？&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关于人生，有人这么说：“人，生来一个人，死去一个人，所以，人生就是一个人生老病死的简称。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9770773638968482&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YcEqibPSdmHMqzgKKibqzcD7Rxs6Shk7uqia1rqqDLATG1LRos2VGMEaFR17dicW5JFx67aXomy5SNlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;698&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在基于日志、指标、实时时间序列的大型系统中，集群的索引也具备类似上图中相通的属性，一个索引自创建之后，不可能无限期的存在下去，
从索引产生到索引“消亡”，也会经历：“生、老、病、死”的阶段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3292102759276879&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YcEqibPSdmHMqzgKKibqzcD7w4sXekBr1BT4jiaqKACxrjY9d99YfMicGLSljvAGFdFYuGe4c7OWrz3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1051&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们把索引的“生、老、病、死”的全过程类比称为索引的生命周期。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、什么是索引生命周期管理？&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于自然规律，人会“不可逆转”的由小长到大，由大长到老，且理论上年龄一般不会超过 150 岁（吉尼斯世界纪录：122岁零164天）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;索引不是人，理论上：一旦创建了索引，它可以一直存活下去（假定硬件条件允许，寿命是无限的）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;索引创建后，它自身是相对静态的，没有“自然规律”牵引它变化，若放任其成长，它只会变成一个数据量极大的臃肿的“大胖子”。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里可能就会引申出来问题：若是时序数据的索引，随着时间的推移，业务索引的数据量会越来越大。但，基于如下的因素：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;集群的单个分片最大文档数上限：2 的 32 次幂减去 1（20亿左右）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;索引最佳实践官方建议：分片大小控制在30GB-50GB，若索引数据量无限增大，肯定会超过这个值。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;索引大到一定程度，当索引出现健康问题，会导致真个集群核心业务不可用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;大索引恢复的时间要远比小索引恢复慢的多得多。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;索引大之后，检索会很慢，写入和更新也会受到不同程度的影响。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;某些业务场景，用户更关心最近3天、最近7天的业务数据，大索引会将全部历史数据汇集在一起，不利于这种场景的查询。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;非常有必要对索引进行管理起来，不再放任其“野蛮长成体弱多病、潜在风险极大的大胖子”，而是限制其分阶段、有目标的、有规律的生长。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这种分阶段、有目标的操作和实现，我们称为索引生命周期管理。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、索引生命周期管理的历史演变&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;索引生命周期管理 (ILM) 是在 Elasticsearch 6.6（公测版）首次引入，在 6.7 版本正式推出的一项功能。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;ILM 是 Elasticsearch 的一部分，主要用来帮助用户管理索引。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;没有 ILM 之前索引生命周期管理基于：&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484303&amp;amp;idx=1&amp;amp;sn=49f3c2c3a5ad3c7cc80b476f0f514192&amp;amp;chksm=eaa82ba7dddfa2b11af8e9575c878b3676388bc6918a42b4446108435b3a51081f95f6ded088&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;rollover + curator &quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;rollover + curator &lt;/span&gt;&lt;/a&gt;&lt;span&gt;实现。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;ILM 是早些年呼声非常高的功能之一，我印象中 2017 年南京的 meetup 中，就有公司说实现了类似的功能。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Kibana 7.12.0 索引生命周期管理配置界面如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4878556557945871&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YcEqibPSdmHMqzgKKibqzcD75ZicibaAiazdaw4NUXDUTegAXSt0o7GGSE2WiajsKD25twuzzNINxNw6fw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1441&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、索引生命周期管理的前提&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本文演示试用版本：Elasticesarch：7.12.0，Kibana：7.12.0。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;集群规模：3节点，属性（node_roles）设置分别如下：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;节点 node-022：主节点+数据节点+热节点（Hot）。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;节点 node-023：主节点+数据节点+温节点（Warm）。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;节点 node-024：主节点+数据节点+冷节点（Cold）。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.1 冷热集群架构&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;冷热架构也叫热暖架构，是“Hot-Warm” Architecture的中文翻译。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;冷热架构本质是给节点设置不同的属性，让每个节点具备了不同的属性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为演示 ILM，需要首先配置冷热架构，三个节点在 elasticsearch.yml 分别设置的属性如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;- node.attr.box_type: hot&lt;br/&gt;- node.attr.box_type: warm&lt;br/&gt;- node.attr.box_type: cold&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;拿舆情数据举例，通俗解读如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如：最近3天的数据——近期大火的“曹县牛皮666，我的宝贝”。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;温节点（Warm）：存放前一段时间沉淀的热数据，现在不再热了。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;比如：3-7天的热点事件——“特斯拉车顶事件”。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;冷节点（Cold）：存放用户不太关心或者关心优先级低的冷数据，很久之前的热点事件。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;比如：7天前或者很久前的热点事件——去年火热的“后浪视频“、”马老师不讲武德”等。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果磁盘数量不足，冷数据是待删除优先级最高的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果硬件资源不足，热节点优先配置为 SSD 固态盘。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;检索优先级最高的是热节点的数据，基于热节点检索数据自然比基于全量数据响应时间要快。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;更多冷热架构推荐：&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484554&amp;amp;idx=1&amp;amp;sn=ed691dbd91966cb0f9da4efff0e9d79e&amp;amp;chksm=eaa82ca2dddfa5b4ef36ad43146c130750f551fcf15cab88a439fc292f5d184992964c44c8c0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;干货 | Elasticsearch 冷热集群架构实战&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;干货 | Elasticsearch 冷热集群架构实战&lt;/span&gt;&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.2 rollover 滚动索引&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;实际Elasticsearch 5.X 之后的版本已经推出：Rollover API。Rollover API解决的是以日期作为索引名称的索引大小不均衡的问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Rollover API对于日志类的数据非常有用，一般我们按天来对索引进行分割（数据量更大还能进一步拆分），没有Rollover之前，需要在程序里设置一个自动生成索引的模板。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;推荐阅读：&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484130&amp;amp;idx=1&amp;amp;sn=454f1994eb9434687f787f00533d414d&amp;amp;chksm=eaa82acadddfa3dcef7c1cf3966db4828f1e46f6302cececbf5a20ee353310800f39a1df367e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;干货 | Elasticsearch索引生命周期管理探索&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;干货 | Elasticsearch索引生命周期管理探索&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;rollover 滚动索引实践一把：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;# 1、创建基于日期的索引&lt;/span&gt;&lt;br/&gt;PUT %3Cmy-index-%7Bnow%2Fd%7D-000001%3E&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;aliases&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;my-alias&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;is_write_index&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 2、批量导入数据&lt;/span&gt;&lt;br/&gt;PUT my-alias/_bulk&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:1}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;testing 01&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:2}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;testing 02&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:3}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;testing 03&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:4}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;testing 04&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:5}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;testing 05&quot;&lt;/span&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 3、rollover 滚动索引&lt;/span&gt;&lt;br/&gt;POST my-alias/_rollover&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;conditions&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;max_age&quot;&lt;/span&gt;: &lt;span&gt;&quot;7d&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;max_docs&quot;&lt;/span&gt;: 5,&lt;br/&gt;    &lt;span&gt;&quot;max_primary_shard_size&quot;&lt;/span&gt;: &lt;span&gt;&quot;50gb&quot;&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;GET my-alias/_count&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 4、在满足滚动条件的前提下滚动索引&lt;/span&gt;&lt;br/&gt;PUT my-alias/_bulk&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:6}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;testing 06&quot;&lt;/span&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 5、检索数据，验证滚动是否生效&lt;/span&gt;&lt;br/&gt;GET my-alias/_search&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如上的验证结论是：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;{&lt;br/&gt;        &lt;span&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span&gt;&quot;my-index-2021.05.30-000001&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;_type&quot;&lt;/span&gt; : &lt;span&gt;&quot;_doc&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span&gt;&quot;5&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;_score&quot;&lt;/span&gt; : 1.0,&lt;br/&gt;        &lt;span&gt;&quot;_source&quot;&lt;/span&gt; : {&lt;br/&gt;          &lt;span&gt;&quot;title&quot;&lt;/span&gt; : &lt;span&gt;&quot;testing 05&quot;&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;      },&lt;br/&gt;      {&lt;br/&gt;        &lt;span&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span&gt;&quot;my-index-2021.05.30-000002&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;_type&quot;&lt;/span&gt; : &lt;span&gt;&quot;_doc&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span&gt;&quot;6&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;_score&quot;&lt;/span&gt; : 1.0,&lt;br/&gt;        &lt;span&gt;&quot;_source&quot;&lt;/span&gt; : {&lt;br/&gt;          &lt;span&gt;&quot;title&quot;&lt;/span&gt; : &lt;span&gt;&quot;testing 06&quot;&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;_id 为 6 的数据索引名称变成了：my-index-2021.05.30-000002，实现了 后缀 id 自增。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.339662447257384&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YcEqibPSdmHMqzgKKibqzcD7YhgZUJCAhaiavg7iaL8B8BFyibVQiaa69icRRB5G4zMHHTjDublhV5StX5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;474&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里要强调下，索引滚动变化的三个核心条件：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&quot;max_age&quot;: &quot;7d&quot;, 最长期限 7d，超过7天，索引会实现滚动。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&quot;max_docs&quot;: 5, 最大文档数 5，超过 5个文档，索引会实现滚动（测试需要，设置的很小）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&quot;max_primary_shard_size&quot;: &quot;50gb&quot;，主分片最大存储容量 50GB，超过50GB，索引就会滚动。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意，三个条件是或的关系，满足其中一个，索引就会滚动。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.3 shrink 压缩索引&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;压缩索引的本质：在索引只读等三个条件的前提下，减少索引的主分片数。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;# 设置待压缩的索引，分片设置为5个。&lt;/span&gt;&lt;br/&gt;PUT kibana_sample_data_logs_ext&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;settings&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;number_of_shards&quot;&lt;/span&gt;:5&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 准备索引数据&lt;/span&gt;&lt;br/&gt;POST _reindex&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;source&quot;&lt;/span&gt;:{&lt;br/&gt;    &lt;span&gt;&quot;index&quot;&lt;/span&gt;:&lt;span&gt;&quot;kibana_sample_data_logs&quot;&lt;/span&gt;&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;&quot;dest&quot;&lt;/span&gt;:{&lt;br/&gt;    &lt;span&gt;&quot;index&quot;&lt;/span&gt;:&lt;span&gt;&quot;kibana_sample_data_logs_ext&quot;&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# shrink 压缩之前的三个必要条件&lt;/span&gt;&lt;br/&gt;PUT kibana_sample_data_logs_ext/_settings&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;settings&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;index.number_of_replicas&quot;&lt;/span&gt;: 0,&lt;br/&gt;    &lt;span&gt;&quot;index.routing.allocation.require._name&quot;&lt;/span&gt;: &lt;span&gt;&quot;node-024&quot;&lt;/span&gt;, &lt;br/&gt;    &lt;span&gt;&quot;index.blocks.write&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;                                    &lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 实施压缩&lt;/span&gt;&lt;br/&gt;POST kibana_sample_data_logs_ext/_shrink/kibana_sample_data_logs_shrink&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;settings&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;index.number_of_replicas&quot;&lt;/span&gt;: 0,&lt;br/&gt;    &lt;span&gt;&quot;index.number_of_shards&quot;&lt;/span&gt;: 1, &lt;br/&gt;    &lt;span&gt;&quot;index.codec&quot;&lt;/span&gt;: &lt;span&gt;&quot;best_compression&quot;&lt;/span&gt; &lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;&quot;aliases&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;kibana_sample_data_logs_alias&quot;&lt;/span&gt;: {}&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有图有真相：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5338345864661654&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YcEqibPSdmHMqzgKKibqzcD77rlDV5H7fq5ibicbB3GloTLAS8jVEywaXXEpj6ynrOMs3mgSWJFeSdicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1330&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;强调一下三个压缩前的条件，缺一不可：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&quot;index.number_of_replicas&quot;: 0&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;副本设置为 0。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&quot;index.routing.allocation.require._name&quot;: &quot;node-024&quot;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; 分片数据要求都集中到一个独立的节点。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&quot;index.blocks.write&quot;: true&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;索引数据只读。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.4 Frozen 冷冻索引&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为高效检索，核心业务索引都会保持在内存中，意味着内存使用率会变得很高。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对于一些非业务必须、非密集访问的某些索引，可以考虑释放内存，仅磁盘存储，必要的时候再还原检索。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这时候，就会用到 Frozen 冷冻索引。除了在内存中维护其元数据，冻结索引在集群上几乎没有开销，并且冷冻索引是只读的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;具体使用如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;# 冷冻索引&lt;/span&gt;&lt;br/&gt;POST kibana_sample_data_logs_shrink/_freeze&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 冷冻后，不能写入&lt;/span&gt;&lt;br/&gt;POST kibana_sample_data_logs_shrink/_doc/1&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;test&quot;&lt;/span&gt;:&lt;span&gt;&quot;12111&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 冷冻后，能检索，但不返回具体数据，只返回0。&lt;/span&gt;&lt;br/&gt;POST kibana_sample_data_logs_shrink/_search&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 解除冷冻&lt;/span&gt;&lt;br/&gt;POST kibana_sample_data_logs_shrink/_unfreeze&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 解除冷冻后，可以检索和写入了&lt;/span&gt;&lt;br/&gt;POST kibana_sample_data_logs_shrink/_search&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;综合上述拆解分析可知：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有了：冷热集群架构，集群的不同节点有了明确的角色之分，冷热数据得以物理隔离，SSD 固态盘使用效率会更高。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有了：rollover 滚动索引，索引可以基于文档个数、时间、占用磁盘容量滚动升级，实现了索引的动态变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有了：Shrink 压缩索引、Frozen 冷冻索引，索引可以物理层面压缩、冷冻，分别释放了磁盘空间和内存空间，提高了集群的可用性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;除此之外，还有：Force merge 段合并、Delete 索引数据删除等操作，索引的“生、老、病、死”的全生命周期的更迭，已然有了助推器。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如上指令单个操作，非常麻烦和繁琐，有没有更为快捷的方法呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有的！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第一：命令行可以 DSL 大综合实现。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第二：可以借助 Kibana 图形化界面实现。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面两小节会结合实例解读。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5、Elasticsearch ILM 实战&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.1 核心概念：不同阶段（Phrase）的功能点（Acitons）&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.37834036568213786&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YcEqibPSdmHMqzgKKibqzcD7Dazib0ByE5Rpa6LtdasTPfSAhHFca4144QFARNIFiaiaqydDwial8yiaic3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1422&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意：仅在 Hot 阶段可以设置：Rollover 滚动。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.2 各生命周期 Actions 设定&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;后两节演示要用。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.2.1 Hot 阶段&lt;/span&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;基于：max_age=3天、最大文档数为5、最大size为：50gb rollover 滚动索引。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;设置优先级为：100（值越大，优先级越高）。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.2.2 Warm 阶段&lt;/span&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;实现段合并，max_num_segments 设置为1.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;副本设置为 0。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数据迁移到：warm 节点。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;优先级设置为：50。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.2.3 Cold 阶段&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.2.4 Delete 阶段&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关于&lt;/span&gt;&lt;span&gt;触发滚动的条件&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;Hot 阶段的触发条件：手动创建第一个满足模板要求的索引。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;其余阶段触发条件：min_age，索引自创建后的时间。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;时间类似：业务里面的 热节点保留 3 天，温节点保留 7 天，冷节点保留 30 天的概念。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.3 DSL 实战索引生命周期管理&lt;/span&gt;&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;# step1: 前提：演示刷新需要&lt;/span&gt;&lt;br/&gt;PUT _cluster/settings&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;persistent&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;indices.lifecycle.poll_interval&quot;&lt;/span&gt;: &lt;span&gt;&quot;1s&quot;&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# step2:测试需要，值调的很小&lt;/span&gt;&lt;br/&gt;PUT _ilm/policy/my_custom_policy_filter&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;policy&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;phases&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;hot&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;actions&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;rollover&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;max_age&quot;&lt;/span&gt;: &lt;span&gt;&quot;3d&quot;&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;&quot;max_docs&quot;&lt;/span&gt;: 5,&lt;br/&gt;            &lt;span&gt;&quot;max_size&quot;&lt;/span&gt;: &lt;span&gt;&quot;50gb&quot;&lt;/span&gt;&lt;br/&gt;          },&lt;br/&gt;          &lt;span&gt;&quot;set_priority&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;priority&quot;&lt;/span&gt;: 100&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;      },&lt;br/&gt;      &lt;span&gt;&quot;warm&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;min_age&quot;&lt;/span&gt;: &lt;span&gt;&quot;15s&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;actions&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;forcemerge&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;max_num_segments&quot;&lt;/span&gt;: 1&lt;br/&gt;          },&lt;br/&gt;          &lt;span&gt;&quot;allocate&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;require&quot;&lt;/span&gt;: {&lt;br/&gt;              &lt;span&gt;&quot;box_type&quot;&lt;/span&gt;: &lt;span&gt;&quot;warm&quot;&lt;/span&gt;&lt;br/&gt;            },&lt;br/&gt;            &lt;span&gt;&quot;number_of_replicas&quot;&lt;/span&gt;: 0&lt;br/&gt;          },&lt;br/&gt;          &lt;span&gt;&quot;set_priority&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;priority&quot;&lt;/span&gt;: 50&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;      },&lt;br/&gt;      &lt;span&gt;&quot;cold&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;min_age&quot;&lt;/span&gt;: &lt;span&gt;&quot;30s&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;actions&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;allocate&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;require&quot;&lt;/span&gt;: {&lt;br/&gt;              &lt;span&gt;&quot;box_type&quot;&lt;/span&gt;: &lt;span&gt;&quot;cold&quot;&lt;/span&gt;&lt;br/&gt;            }&lt;br/&gt;          },&lt;br/&gt;          &lt;span&gt;&quot;freeze&quot;&lt;/span&gt;: {}&lt;br/&gt;        }&lt;br/&gt;      },&lt;br/&gt;      &lt;span&gt;&quot;delete&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;min_age&quot;&lt;/span&gt;: &lt;span&gt;&quot;45s&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;actions&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;delete&quot;&lt;/span&gt;: {}&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# step3:创建模板，关联配置的ilm_policy&lt;/span&gt;&lt;br/&gt;PUT _index_template/timeseries_template&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;index_patterns&quot;&lt;/span&gt;: [&lt;span&gt;&quot;timeseries-*&quot;&lt;/span&gt;],                 &lt;br/&gt;  &lt;span&gt;&quot;template&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;settings&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;number_of_shards&quot;&lt;/span&gt;: 1,&lt;br/&gt;      &lt;span&gt;&quot;number_of_replicas&quot;&lt;/span&gt;: 0,&lt;br/&gt;      &lt;span&gt;&quot;index.lifecycle.name&quot;&lt;/span&gt;: &lt;span&gt;&quot;my_custom_policy_filter&quot;&lt;/span&gt;,      &lt;br/&gt;      &lt;span&gt;&quot;index.lifecycle.rollover_alias&quot;&lt;/span&gt;: &lt;span&gt;&quot;timeseries&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;index.routing.allocation.require.box_type&quot;&lt;/span&gt;: &lt;span&gt;&quot;hot&quot;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# step4:创建起始索引（便于滚动）&lt;/span&gt;&lt;br/&gt;PUT timeseries-000001&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;aliases&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;timeseries&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;is_write_index&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# step5：插入数据&lt;/span&gt;&lt;br/&gt;PUT timeseries/_bulk&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:1}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;testing 01&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:2}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;testing 02&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:3}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;testing 03&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:4}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;testing 04&quot;&lt;/span&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# step6：临界值（会滚动）&lt;/span&gt;&lt;br/&gt;PUT timeseries/_bulk&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:5}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;testing 05&quot;&lt;/span&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 下一个索引数据写入&lt;/span&gt;&lt;br/&gt;PUT timeseries/_bulk&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:6}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;testing 06&quot;&lt;/span&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;核心步骤&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;总结如下：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第一步：创建生周期 policy。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第二步：创建索引模板，模板中关联 policy 和别名。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第三步：创建符合模板的起始索引，并插入数据。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第四步: 索引基于配置的 ilm 滚动。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;实现效果如下GIF动画（请耐心看完）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5070866141732283&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/mjl8GCpsL9YcEqibPSdmHMqzgKKibqzcD7CbKseNQj2wn2PxVDBzjZBZY19Lxgxn7UEeSDjicGiamxXyWM4n8drgWg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;635&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.4、Kibana 图形化界面实现索引生命周期管理&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;步骤 1：配置 policy。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7436570428696413&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YcEqibPSdmHMqzgKKibqzcD7d0JLyO5TJibgTCEvYetA9RgGpJqHLK0aJjNM0dPlw134T74yiapYUg8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1143&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;步骤 2：关联模板。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5138648180242634&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YcEqibPSdmHMqzgKKibqzcD7RMMB2v1szwIIFzUkiaXNPzMuAhuZDZx9ib3M0QWh2SfJPfia4xHzsqlow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1154&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前提条件：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;模板要自己 DSL 创建，以便关联。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;PUT _index_template/timebase_template &lt;br/&gt;{ &lt;span&gt;&quot;index_patterns&quot;&lt;/span&gt;: [&lt;span&gt;&quot;time_base-*&quot;&lt;/span&gt;] }&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;创建起始索引，指定别名和写入。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;PUT time_base-000001 { &lt;span&gt;&quot;aliases&quot;&lt;/span&gt;: { &lt;span&gt;&quot;timebase_alias&quot;&lt;/span&gt;: { &lt;span&gt;&quot;is_write_index&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt; } } }&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7276264591439688&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YcEqibPSdmHMqzgKKibqzcD7N9hhA4gbiayqfX9jsKmHnpialRI3DEWwvRwTjy3aBAGawoib8aLB66cuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;514&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6、小结&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;索引生命周期管理需要加强对三个概念的认知：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;横向——Phrase 阶段：Hot、Warm、Cold、Delete 等对应索引的生、老、病、死。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;纵向——Actions 阶段：各个阶段的动作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;横向纵向整合的Policy：实际是阶段和动作的综合体。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;配置完毕Policy，关联好模板 template，整个核心工作就完成了80%。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;剩下就是各个阶段 Actions 的调整和优化了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;实战表明：用 DSL 实现ILM 比图形化界面更可控、更便于问题排查。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;ILM 你实际生产环境使用了吗？效果如何？欢迎留言讨论。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/example-using-index-lifecycle-policy.html&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://ptran32.github.io/2020-08-08-hot-warm-cold-elasticsearch/&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://www.elastic.co/cn/blog/implementing-hot-warm-cold-in-elasticsearch-with-index-lifecycle-management&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;魏彬老师ET开源课堂&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0d5213c7c3e2bfaffd184079d2ad2c4f</guid>
<title>无埋点核心技术：iOS Hook 在字节的实践经验</title>
<link>https://toutiao.io/k/sfvvj1u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.2604166666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGxIETGY0Ft8gTUsLSicv2j2BZs5s9vVaN1mH7Sb4NPfT4y4RysvMEXpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;h1&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;众所周知，字节跳动的推荐在业内处于领先水平，而精确的推荐离不开大量埋点，常见的埋点采集方案是在响应用户行为操作的路径上进行埋点。但是由于 App 通常会有比较多界面和操作路径，主动埋点的维护成本就会非常大。所以行业的做法是无埋点，而无埋点实现需要 AOP 编程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个常见的场景，比如想在 UIViewController 出现和消失的时刻分别记录时间戳用于统计页面展现的时长。要达到这个目标有很多种方法，但是 AOP 无疑是最简单有效的方法。Objective-C 的 Hook 其实也有很多种方式，这里以 Method Swizzle 给个示例。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;objectivec&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;UIViewController&lt;/span&gt; (&lt;span class=&quot;code-snippet__title&quot;&gt;MyHook&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;UIViewController&lt;/span&gt; (&lt;span class=&quot;code-snippet__title&quot;&gt;MyHook&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+ (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)load {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        swizzleMethods(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(viewDidAppear:), &lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(my_viewDidAppear:));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)my_viewDidAppear:(&lt;span class=&quot;code-snippet__built_in&quot;&gt;BOOL&lt;/span&gt;)animated {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; my_viewDidAppear: animated];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来我们探讨一个具体场景：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;UICollectionView&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 或者 &lt;/span&gt;&lt;code&gt;&lt;span&gt;UITableView&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是 iOS 中非常常用的列表 UI 组件，其中列表元素的点击事件回调是通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;delegate&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 完成的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里以 &lt;/span&gt;&lt;code&gt;&lt;span&gt;UICollectionView&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 为例， &lt;/span&gt;&lt;code&gt;&lt;span&gt;UICollectionView&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;delegate&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，有个方法声明， &lt;/span&gt;&lt;code&gt;&lt;span&gt;collectionView:didSelectItemAtIndexPath:&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，实现这个方法我们就可以给列表元素添加点击事件。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;我们的目标是 Hook 这个 delegate 的方法，在点击回调的时候进行额外的埋点操作。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;h1&gt;&lt;span&gt;一、方案迭代&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1.1 方案1：Method Swizzle&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;通常情况下，Method Swizzle 可以满足绝大部分的 AOP 编程需求。因此首次迭代，我们直接使用 Method Swizzle 来进行 Hook。&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;objectivec&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;UICollectionView&lt;/span&gt; (&lt;span class=&quot;code-snippet__title&quot;&gt;MyHook&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;UICollectionView&lt;/span&gt; (&lt;span class=&quot;code-snippet__title&quot;&gt;MyHook&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)setMyDelegate:(&lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;)delegate {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (delegate != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        swizzleMethodsXXX(delegate, &lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(collectionView:didSelectItemAtIndexPath:), &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(my_collectionView:didSelectItemAtIndexPath:));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; setMyDelegate:&lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)my_collectionView:(&lt;span class=&quot;code-snippet__built_in&quot;&gt;UICollectionView&lt;/span&gt; *)ccollectionView didSelectItemAtIndexPath:(&lt;span class=&quot;code-snippet__built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)index {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; my_collectionView:ccollectionView didSelectItemAtIndexPath:index];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们把这个方案集成到今日头条 App 里面进行测试验证，发现没法办法验证通过。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;主要原因今日头条 App 是一个庞大的项目，其中引入了非常多的三方库，比如 IGListKit 等，这些三方库通常对 &lt;/span&gt;&lt;code&gt;&lt;span&gt;UICollectionView&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的使用都进行了封装，而这些封装，恰恰导致我们不能使用常规的 Method Swizzle 来 Hook 这个 delegate。直接的原因总结有以下两点：&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;setDelegate&lt;/span&gt;&lt;/code&gt; 传入的对象不是实现 &lt;code&gt;&lt;span&gt;UICollectionViewDelegate&lt;/span&gt;&lt;/code&gt;  协议的那个对象&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.28700906344410876&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGDgoMwgZqCAq0I9NZQdn5e5icUAawUUWkutUFMicBaAwFqBohP9SytczA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1324&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如图示， &lt;/span&gt;&lt;code&gt;&lt;span&gt;setDelegate &lt;/span&gt;&lt;/code&gt;&lt;span&gt;传入的是一个代理对象 proxy，proxy 引用了实际的实现 &lt;/span&gt;&lt;code&gt;&lt;span&gt;UICollectionViewDelegate &lt;/span&gt;&lt;/code&gt;&lt;span&gt;协议的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;delegate&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，proxy 实际上并没有实现  &lt;/span&gt;&lt;code&gt;&lt;span&gt;UICollectionViewDelegate &lt;/span&gt;&lt;/code&gt;&lt;span&gt;的任何一个方法，它把所有方法都转发给实际的  &lt;/span&gt;&lt;code&gt;&lt;span&gt;delegate&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。这种情况下，我们不能直接对 proxy 进行 Method Swizzle&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;多次 &lt;code&gt;&lt;span&gt;setDelegate&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.28700906344410876&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGDgoMwgZqCAq0I9NZQdn5e5icUAawUUWkutUFMicBaAwFqBohP9SytczA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1324&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在上述图例中，使用方存在连续调用两次 &lt;/span&gt;&lt;code&gt;&lt;span&gt;setDelegate&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的情况，第一次是真实  &lt;/span&gt;&lt;code&gt;&lt;span&gt;delegate&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，第二次是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;proxy&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，我们需要区别对待。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;span&gt;1.2 代理模式和 NSProxy 介绍&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;使用 proxy 对原对象进行代理，在处理完额外操作之后再调用原对象，这种模式称为代理模式。而 Objective-C 中要实现代理模式，使用 NSProxy 会比较高效。详细内容参考下列文章。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;99&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;代理模式：https://juejin.cn/post/6844903544965857294&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;NSProxy 使用：https://juejin.cn/post/6962720860700409886&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里面 &lt;/span&gt;&lt;code&gt;&lt;span&gt;UICollectionView&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;setDelegate&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 传入的是一个 &lt;/span&gt;&lt;code&gt;&lt;span&gt;proxy&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是非常常见的操作，比如 IGListKit，同时 App 基于自身需求，也有可能会做这一层封装。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 &lt;/span&gt;&lt;code&gt;&lt;span&gt;UICollectionView&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;setDelegate&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的时候，把 &lt;/span&gt;&lt;code&gt;&lt;span&gt;delegate&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 包裹在 &lt;/span&gt;&lt;code&gt;&lt;span&gt;proxy&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 中，然后把 proxy 设置给 &lt;/span&gt;&lt;code&gt;&lt;span&gt;UICollectionView&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;proxy&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 对  &lt;/span&gt;&lt;code&gt;&lt;span&gt;delegate&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 进行消息转发。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.28700906344410876&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGDgoMwgZqCAq0I9NZQdn5e5icUAawUUWkutUFMicBaAwFqBohP9SytczA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1324&quot;/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;1.3 方案2：使用代理模式&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;方案 1 已经无法满足我们的需求了，我们考虑到既然对 &lt;/span&gt;&lt;code&gt;&lt;span&gt;delegate&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 进行代理是一种常规操作，我们何不也使用代理模式，对 &lt;/span&gt;&lt;code&gt;&lt;span&gt;proxy&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 再次次代理。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;1.3.1 代码实现&lt;/span&gt;&lt;/h3&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;先 Hook &lt;code&gt;&lt;span&gt;UICollectionView &lt;/span&gt;&lt;/code&gt;的 &lt;code&gt;&lt;span&gt;setDelegate &lt;/span&gt;&lt;/code&gt;方法&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代理 &lt;code&gt;&lt;span&gt;delegate&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;简单的代码示意如下：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;objectivec&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelegateProxy&lt;/span&gt; : &lt;span class=&quot;code-snippet__title&quot;&gt;NSProxy&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;weak&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt; target;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BDCollectionViewDelegateProxy&lt;/span&gt; : &lt;span class=&quot;code-snippet__title&quot;&gt;DelegateProxy&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BDCollectionViewDelegateProxy&lt;/span&gt; &amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;UICollectionViewDelegate&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)collectionView:(&lt;span class=&quot;code-snippet__built_in&quot;&gt;UICollectionView&lt;/span&gt; *)collectionView didSelectItemAtIndexPath:(&lt;span class=&quot;code-snippet__built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.target respondsToSelector:&lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(collectionView:didSelectItemAtIndexPath:)]) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.target collectionView:collectionView didSelectItemAtIndexPath:indexPath];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (&lt;span class=&quot;code-snippet__built_in&quot;&gt;BOOL&lt;/span&gt;)bd_isCollectionViewTrackerDecorator {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (&lt;span class=&quot;code-snippet__built_in&quot;&gt;BOOL&lt;/span&gt;)respondsToSelector:(SEL)aSelector {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (aSelector == &lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(bd_isCollectionViewTrackerDecorator)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.target respondsToSelector:aSelector];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;UICollectionView&lt;/span&gt; (&lt;span class=&quot;code-snippet__title&quot;&gt;MyHook&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;UICollectionView&lt;/span&gt; (&lt;span class=&quot;code-snippet__title&quot;&gt;MyHook&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;) setDd_TrackerProxy:(BDCollectionViewDelegateProxy *)object {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    objc_setAssociatedObject(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(bd_TrackerProxy), object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (BDCollectionViewDelegateProxy *) bd_TrackerProxy {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    BDCollectionViewDelegateProxy *bridge = objc_getAssociatedObject(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(bd_TrackerProxy));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; bridge;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)setMyDelegate:(&lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;)delegate {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (delegate == &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; setMyDelegate:delegate];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ([delegate respondsToSelector:&lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(bd_isCollectionViewTrackerDecorator)]) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; setMyDelegate:delegate]; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    BDCollectionViewDelegateProxy *proxy = [[BDCollectionViewDelegateProxy alloc] initWithTarget:delegate];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; setMyDelegate:proxy];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.bd_TrackerProxy = proxy;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;h3/&gt;&lt;h3&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;1.3.2 模型&lt;/span&gt;&lt;/h3&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;17&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;下图实线表示强引用，虚线表示弱引用&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;情况一&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;如果使用方没有对 &lt;/span&gt;&lt;code&gt;&lt;span&gt;delegate &lt;/span&gt;&lt;/code&gt;&lt;span&gt;进行代理，而我们使用代理模式：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.28700906344410876&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGDgoMwgZqCAq0I9NZQdn5e5icUAawUUWkutUFMicBaAwFqBohP9SytczA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1324&quot;/&gt;&lt;/section&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;情况二&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;如果使用方也对 &lt;/span&gt;&lt;code&gt;&lt;span&gt;delegate&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 进行代理，我们使用代理模式：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.23329129886506936&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGE1hdWsKyZO92Z9LaU3jyewRB7mTVtsCDYDpDQfVnxicC9En9ia1AHKnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1586&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从这里我们可以看出，代理模式有很好的扩展性，它允许代理链不断嵌套，只要我们都遵循代理模式的原则即可。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;到这里，我们的方案已经在今日头条App上测试通过了。但是事情远还没有结束。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;h1&gt;&lt;span&gt;二、踩坑之旅&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;span&gt;目前的还算比较可以，但是也不能完全避免问题。这里其实不仅仅是 &lt;strong&gt;UICollectionView 的 delegate，包括:&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;UIWebView&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;WKWebView&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;UITableView&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;UICollectionView&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;UIScrollView&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;UIActionSheet&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;UIAlertView&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;我们都采用相同的方法来进行 Hook。&lt;strong&gt;同时我们将方案封装一个 SDK 对外提供，以下统称为 MySDK。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;2.1 第一次踩坑&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;某客户接入我们的方案之后，在集成过程中反馈有必现 Crash，下面详细介绍一下这一次踩坑的经历。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;2.1.1 堆栈信息&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;重点信息是：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;UIWebView&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:decidePolicyForNavigationAction:request:frame:decisionListener:&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;0 Crashed:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;code-snippet__string&quot;&gt;libobjc.A.dylib   0x000000018198443c objc_msgSend + 28&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;code-snippet__string&quot;&gt;UIKit             0x000000018be05b4c -[UIWebView webView:decidePolicyForNavigationAction:request:frame:decisionListener:] + 200&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;code-snippet__string&quot;&gt;CoreFoundation    0x0000000182731cd0 __invoking___ + 144&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;code-snippet__string&quot;&gt;CoreFoundation    0x000000018261056c -[NSInvocation invoke] + 292&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;code-snippet__string&quot;&gt;CoreFoundation    0x000000018261501c -[NSInvocation invokeWithTarget:] + 60&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;code-snippet__string&quot;&gt;WebKitLegacy      0x000000018b86d654 -[_WebSafeForwarder forwardInvocation:] + 156&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从堆栈信息不难判断出 crash 原因是 UIWebView 的 delegate 野指针，那为啥出现野指针呢？&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这里先说明一下 crash 的直接原因，然后再来具体分析为什么就出现了问题。&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;MySDK 对 setDelegate 进行了 Hook&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;客户也对 setDelegate 进行了 Hook&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;先执行 MySDK 的 Hook 逻辑调用，然后执行客户的 Hook 逻辑调用&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;span&gt;客户 Hook 的代码&lt;/span&gt;&lt;/h3&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;objectivec&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;UIWebView&lt;/span&gt; (&lt;span class=&quot;code-snippet__title&quot;&gt;JSBridge&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;UIWebView&lt;/span&gt; (&lt;span class=&quot;code-snippet__title&quot;&gt;JSBridge&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)setJsBridge:(&lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;)object {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    objc_setAssociatedObject(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(jsBridge), object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (WebViewJavascriptBridge *)jsBridge {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    WebViewJavascriptBridge *bridge = objc_getAssociatedObject(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(jsBridge));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; bridge;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;+ (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)load {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        swizzleMethods(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(setDelegate:), &lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(setJSBridgeDelegate:));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        swizzleMethods(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(initWithFrame:), &lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(initJSWithFrame:));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (&lt;span class=&quot;code-snippet__keyword&quot;&gt;instancetype&lt;/span&gt;)initJSWithFrame:(&lt;span class=&quot;code-snippet__built_in&quot;&gt;CGRect&lt;/span&gt;)frame {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; initJSWithFrame:frame];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        WebViewJavascriptBridge *bridge = [WebViewJavascriptBridge bridgeForWebView:&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; setJsBridge:bridge];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)setJSBridgeDelegate:(&lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;)delegate {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    WebViewJavascriptBridge *bridge = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.jsBridge;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (delegate == &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; || bridge == &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; setJSBridgeDelegate:delegate];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (bridge == delegate) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; setJSBridgeDelegate:delegate];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (![delegate isKindOfClass:[WebViewJavascriptBridge &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;]]) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            [bridge setWebViewDelegate:delegate];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; setJSBridgeDelegate:bridge];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; setJSBridgeDelegate:delegate];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;MySDK Hook 代码&lt;/span&gt;&lt;/h3&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;objectivec&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;UIWebView&lt;/span&gt; (&lt;span class=&quot;code-snippet__title&quot;&gt;MyHook&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;UIWebView&lt;/span&gt; (&lt;span class=&quot;code-snippet__title&quot;&gt;MyHook&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)setWebViewDelegate:(&lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;)delegate {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (delegate == &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; setWebViewDelegate:delegate];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    BDWebViewDelegateProxy *proxy = [[BDWebViewDelegateProxy alloc] initWithTarget:delegate];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.bd_TrackerDecorator = proxy;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    [&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt; setWebViewDelegate:proxy];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@end&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt; &lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;2.1.2 野指针原因&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;UIWebView 有两次调用 setDelegate 方法，第一次是传的 WebViewJavascriptBridge，第二次传的另一个实际的 WebViewDelegate。暂且称第一次传了 bridge 第二次传了实际上的 delegate。&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第一次调用，MySDK Hook 的时候会用 DelegateProxy 包装住 bridge，所有方法通过 DelegateProxy 转发到 bridge，这里传给 &lt;code&gt;&lt;span&gt;setJSBridgeDelegate:(id)delegate&lt;/span&gt;&lt;/code&gt; 的 delegate 实际上是 DelegateProxy &lt;/span&gt;&lt;span&gt;&lt;strong&gt;而非 bridge&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.29310344827586204&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGhr2lQ5IjeNetVh5TJB2m3DX3nFSH2gckLVIY2Lz5Geg6rHfSopItEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1392&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里需要注意，UIWebView 的 delegate 指向 DelegateProxy 是客户给设置上的，且这个属性 &lt;strong&gt;assign 而非 weak，这个 assign 很关键，assigin 在对象释放之后不会自动变为 nil。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第二次调用，MySDK Hook 的时候会用新的 DelegateProxy 包装住 delegate 也就是 WebViewDelegate，这个时候 MySDK 的逻辑是把新的 DelegateProxy给强引用中，老的 DelegateProxy 就失去了强引用因此释放了。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.46320346320346323&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGibY7TZRUD9iafU0QPKTcjwSU8byWFHYp3o9iagLqr2FsPd8PUquwia67QQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1386&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;此时的状态如果不做任何处理，当前状态就如图示：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;delegate 指向已经释放的 DelegateProxy，野指针&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;UIWebview 触发回调就导致 crash&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;2.1.3 修复方法&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;如果补上那一句， &lt;/span&gt;&lt;code&gt;&lt;span&gt;setJSBridgeDelegate:(id)delegate&lt;/span&gt;&lt;/code&gt;&lt;span&gt;在判断了 delegate 不是 bridge 之后，把 UIWebView 的 delegate 设置为 bridge 就可以完成了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;注释中 fix with this 下一行代码&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5544554455445545&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGkoMib9yLYGX9FtMGd8Mf5bG87wSibn1vKWfSWDNenUtGaAtp2ezgO45w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1414&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;修复后模型&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;2.1.4 总结&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;使用 Proxy 的方式虽然也可以解决一定的问题，但是也需要使用方遵循一定的规范，要意识到第三方 SDK 也可能 &lt;/span&gt;&lt;code&gt;&lt;span&gt;setDelegate &lt;/span&gt;&lt;/code&gt;&lt;span&gt;进行 Hook，也可能使用 Proxy。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt; &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2.2 第二次踩坑&lt;/span&gt;&lt;/h2&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;82&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;先补充一些参考资料&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;RxCocoa 源码参考 https://github.com/ReactiveX/RxSwift&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;rxcocoa 学习-DelegateProxy&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;RxCocoa 也使用了代理模式，对 delegate 进行了代理，按道理应该没有问题。但是 RxCocoa 的实现有点出入。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;RxCocoa&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3241758241758242&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGKqcrPmeib0iag15W3JzgjibawsmFIuXia8AjMfA3bYAoD3BdBZRiaKkyMKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1456&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果单独只使用了 &lt;strong&gt;RxCocoa &lt;/strong&gt;的方案，和方案是一致，也就不会有任何问题。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;RxCocoa + MySDK&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5055487053020962&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGJsq8WcnnEwDnBOmSpjt5DVbm8hWzxa9YRQuiaDvVibpAiazibjfruDXibuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1622&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;RxCocoa+MySDK 之后，变成这样子。UICollectionView 的 delegate 直接指向谁在于谁调用的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;setDelegate&lt;/span&gt;&lt;/code&gt;&lt;span&gt;方法后调。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;理论也应该没有问题，就是引用链多一个 poxy 包装而已。但是实际上有两个问题。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;问题 1&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;RxCocoa 的 delegate 的 get 方法命中 assert&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Reactive&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Base&lt;/span&gt;: &lt;span class=&quot;code-snippet__title&quot;&gt;UIScrollView&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; delegate: &lt;span class=&quot;code-snippet__type&quot;&gt;DelegateProxy&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__type&quot;&gt;UIScrollView&lt;/span&gt;, &lt;span class=&quot;code-snippet__type&quot;&gt;UIScrollViewDelegate&lt;/span&gt;&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;RxScrollViewDelegateProxy&lt;/span&gt;.proxy(&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;: base)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;RxScrollViewDelegateProxy&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; object: ParentObject)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Self&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;let&lt;/span&gt; maybeProxy = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.assignedProxy(&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;: object)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;let&lt;/span&gt; proxy: &lt;span class=&quot;code-snippet__type&quot;&gt;AnyObject&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;let&lt;/span&gt; existingProxy = maybeProxy {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            proxy = existingProxy&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            proxy = castOrFatalError(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.createProxy(&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;: object))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.assignProxy(proxy, toObject: object)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.assignedProxy(&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;: object) === proxy)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;let&lt;/span&gt; currentDelegate = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;._currentDelegate(&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;: object)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;let&lt;/span&gt; delegateProxy: &lt;span class=&quot;code-snippet__type&quot;&gt;Self&lt;/span&gt; = castOrFatalError(proxy)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; currentDelegate !== delegateProxy {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            delegateProxy._setForwardToDelegate(currentDelegate, retainDelegate: &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;assert&lt;/span&gt;(delegateProxy._forwardToDelegate() === currentDelegate)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;._setCurrentDelegate(proxy, to: object)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;._currentDelegate(&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;: object) === proxy)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;assert&lt;/span&gt;(delegateProxy._forwardToDelegate() === currentDelegate)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; delegateProxy&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;重点逻辑&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;delegateProxy 即使 RxDelegateProxy&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;currentDelegate 为 RxDelegateProxy 指向的对象&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;RxDelegateProxy._setForwardToDelegate 把 RxDelegateProxy 指向真实的 Delegate&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;标红的前面一句执行的时候，是调用 setDelegate 方法，把 RxDelegateProxy 的 proxy 设置给 UIScrollView (其实是一个 UICollectionView 实例)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;然后进入了 MySDK 的 Hook 方法，把 RxDelegateProxy 给包了一层&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;最终结果如下图&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;然后导致 self._currentDelegate(for: object)  是 DelegateProxy 而非 RxDelegateProxy，&lt;strong&gt;触发标红断言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.2859025032938076&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGfMYvOMyPyQgFG9lcgyvtuZibEYiacJ5YNxufPtgMIgKJndw5HGYMicYBQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1518&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;这个断言就很霸道&lt;/strong&gt;，相当于 RxCocoa 认为就只有它能够去使用 Proxy 包装 delegate，其他人不能这样做，只要做了，就断言。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;进一步分析&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当前状态&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.2859025032938076&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGfMYvOMyPyQgFG9lcgyvtuZibEYiacJ5YNxufPtgMIgKJndw5HGYMicYBQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1518&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;再次进入 Rx 的方法&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;currentDelegate 是 UICollectionView 指向的 DelegateProxy（MySDK 的包装）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;delegateProxy 指向还是 RxDelegateProxy&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;触发 Rx 的 if 判断,Rx 会把其指向真实的 delegate 改向 UICollectionView 指向的 DelegateProxy&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;导致循环指向，引用链中真实的 Delegate 丢失了&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3672955974842767&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGbjIpgk8Vt16bN4MAUEo3X2gCoqqPYhml5OzX5YebSDQAQeIxpHNJxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1590&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;问题2&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;上面提到多次调用导致了循环指向，而循环指向导致了在实际的方法转发的时候变成了死循环。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.33214285714285713&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGk3b68fPVpnnc5F9CbD13vRJ0bZ0GKIC0P05GdS0NMzwEoITqj4ZpYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;840&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;responds 代码&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;RxScrollViewDelegateProxy&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;responds&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(to aSelector: Selector!)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Bool&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.responds(to: aSelector)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            || (&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;._forwardToDelegate?.responds(to: aSelector) ?? &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            || (&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.voidDelegateMethodsContain(aSelector) &amp;amp;&amp;amp; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.hasObservers(selector: aSelector))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;objectivec&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BDCollectionViewDelegateProxy&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- (&lt;span class=&quot;code-snippet__built_in&quot;&gt;BOOL&lt;/span&gt;)respondsToSelector:(SEL)aSelector {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (aSelector == &lt;span class=&quot;code-snippet__keyword&quot;&gt;@selector&lt;/span&gt;(bd_isCollectionViewTrackerDecorator)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt; respondsToSelector:aSelector];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;@end&lt;/span&gt;    &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;似乎只要不多次调用就没有问题了？&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;关键在于 Rx 的 setDelegate 方法也调用了 get 方法，导致一次 get 就触发第二次调用。也就是多次调用是无法避免。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;2.1.1 解决方案&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;问题的原因比较明显，如果改造 RxCocoa 的代码，把第三方可能的 Hook 考虑进来，完全可以解决问题。&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;解决方案1&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;参考 MySDK 的 proxy 方案，在 proxy 中加入一个特殊方法，来判断 RxDelegateProxy 是否已经在引用链中，而不去主动改变这个引用链。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.3671875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDG1KU5M5sToicmV3TOjemqcUhW1K2K6N5KK15bDAqf93kjwpJcqtdpMsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;RxScrollViewDelegateProxy&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; object: ParentObject)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Self&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;let&lt;/span&gt; currentDelegate = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;._currentDelegate(&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;: object)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;let&lt;/span&gt; delegateProxy: &lt;span class=&quot;code-snippet__type&quot;&gt;Self&lt;/span&gt; = castOrFatalError(proxy)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; !currentDelegate.responds(to: xxxMethod) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            delegateProxy._setForwardToDelegate(currentDelegate, retainDelegate: &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;assert&lt;/span&gt;(delegateProxy._forwardToDelegate() === currentDelegate)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;._setCurrentDelegate(proxy, to: object)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;._currentDelegate(&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;: object) === proxy)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;assert&lt;/span&gt;(delegateProxy._forwardToDelegate() === currentDelegate)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; currentDelegate&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; delegateProxy&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;类似这样的改造，就可以解决问题。我们与 Rx 团队进行了沟通，也提了 PR，可惜最终被拒绝合入了。Rx 给出的说明是，Hook 是不优雅的方式，不推荐 Hook 系统的任何方法，也不想兼容任何第三方的 Hook。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;解决方案2&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;有没有可能，RxCocoa 不改代码，MySDK 来兼容？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;刚才提到，有可能是两种状态。&lt;/span&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;100&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;状态1&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.28534031413612565&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGGtpmZia0pQE4uPII3IfP9PWNZdK0anAAhk1KoPYXMDwbK9e4Q8pO5MQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1528&quot;/&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;61&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;状态2&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.2665764546684709&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGNtcSSsYgGllwjjl7otz5QpVUf5us5kOxhq9kvaIoTicEnVuKfWObcPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1478&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实如果是状态 2，似乎 Rxcocoa 的 bug 是不会复现的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;但是仔细查看 Rxcocoa 的 setDelegate 代码&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Reactive&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Base&lt;/span&gt;: &lt;span class=&quot;code-snippet__title&quot;&gt;UIScrollView&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setDelegate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt; delegate: UIScrollViewDelegate)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -&amp;gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Disposable&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;RxScrollViewDelegateProxy&lt;/span&gt;.installForwardDelegate(delegate, retainDelegate: &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;, onProxyForObject: &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.base)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;RxScrollViewDelegateProxy&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;installForwardDelegate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt; forwardDelegate: Delegate, retainDelegate: Bool, onProxyForObject object: ParentObject)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Disposable&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; weakForwardDelegate: &lt;span class=&quot;code-snippet__type&quot;&gt;AnyObject&lt;/span&gt;? = forwardDelegate &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;AnyObject&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;let&lt;/span&gt; proxy = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.proxy(&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;: object)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;assert&lt;/span&gt;(proxy._forwardToDelegate() === &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        proxy.setForwardToDelegate(forwardDelegate, retainDelegate: retainDelegate)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Disposables&lt;/span&gt;.create {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;emmm？Rx 里面，UICollectionView 的 setDelegate 和 Delegate 的 get 方法&lt;strong&gt;不是 Hook...&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;collectionView.rx.setDelegate(&lt;span class=&quot;code-snippet__keyword&quot;&gt;delegate&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;delegate&lt;/span&gt; = collectionView.rx.&lt;span class=&quot;code-snippet__keyword&quot;&gt;delegate&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;最终流程就只能是&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;setDelegate 的时候，先进 Rx 的方法，传给 Rx 真实的 delegate&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;后进 MySDK 的 Hook 方法&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;传给 MySDK 的是 RxDelegateProxy&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Rx 里面获取 CollectionView 的 delegate 触发判断&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Delegate 的 get 调用就触发 bug&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;如果 MySDK 还是采用当前的 Hook 方案，就没法在 MySDK 解决了。&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;解决方案3&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;仔细看了一下，发现Rx里面是通过重写 RxDelegateProxy 的 forwardInvocation 来达到方法转发的目的，即&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;回顾消息转发机制&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5475806451612903&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cZycwcLIiajpEjvTjN8riaQNF0UBQRvyDGHibs2IWJK5b1IrpffBqDvrV5G9QTqRq2fRhJ75ibQ8hOxUtduv8IM4UQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们可以在 forwardingTargetForSelector 这一步进行处理，这样可以避开与Rx相关的冲突，处理完再直接跳过。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个解决方案其实也不完美，只能暂时规避与 Rx 的冲突。如果后续有其他 SDK 也来在这个阶段处理 Hook 冲突，也容易出现问题。&lt;/span&gt;&lt;/section&gt;&lt;h1&gt;&lt;span&gt;三、总结&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;span&gt;确实如Rx团队描述的那样，Hook 不是很优雅的方式，任何 Hook 都有可能存在兼容性问题。&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;谨慎使用 Hook&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Hook 系统接口一定要遵循一定的规范，不能假想只有你在 Hook 这个接口&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不要假想其他人会怎么处理，直接把多种方案集成到一起，构建多种场景，测试兼容性&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;文章列举的方案可能不全或者不完善，如果有更好的方案，欢迎讨论。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;参考文档：&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;NSProxy使用：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://juejin.cn/post/6962720860700409886/&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;代理模式：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://juejin.cn/post/6844903544965857294&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;rxcocoa 学习-DelegateProxy：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://xing-ou.github.io/2017/06/13/rxcocoa学习-DelegateProxy/&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;字节跳动移动平台团队(Client Infrastructure)是大前端基础技术行业领军者，负责整个字节跳动的中国区大前端基础设施建设，提升公司全产品线的性能、稳定性和工程效率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;现在&lt;span&gt;字节跳动移动平台团队 &lt;/span&gt;&lt;strong&gt;客户端／前端／服务端／端智能算法／测试开发&lt;/strong&gt; 面向全球范围招聘！&lt;strong&gt;一起来用技术改变世界&lt;/strong&gt;，感兴趣可以联系邮箱 &lt;strong&gt;chenxuwei.cxw@bytedance.com&lt;/strong&gt;，邮件主题 &lt;strong&gt;简历-姓名-求职意向-期望城市-电话。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;关于字节跳动终端技术团队&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;字节跳动终端技术团队在移动端、Web、Desktop 等各终端都有深入研究。支持的产品包括抖音、今日头条、西瓜视频、火山小视频等 App。根据实践结晶，现推出&lt;/span&gt;&lt;span&gt; &lt;span&gt;一站式移动开发平台 veMARS&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，致力于帮助企业打造优质 App ，提供移动开发解决方案。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;👇 点击&lt;strong&gt;阅读原文，免费体验。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>