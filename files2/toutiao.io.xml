<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>6c7354be1671cbf92b65ca027ded182f</guid>
<title>数据智能的未来，是不提大数据但其无所不在的时代</title>
<link>https://toutiao.io/k/4yeshi4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4124860646599777&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCvEco375K13UdJ0uLAfOz4341Nacican7659BxxII4YhRoP6JpYPmoaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1794&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;回首过去十年，我们见证了大数据从概念诞生到行业落地，逐渐发展到基于数据中台驱动决策的数据智能时代。作为后互联网时代的产物，数据智能必将是未来很长一个发展阶段的核心所在。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;每日互动（个推）作为数据智能行业的代表企业之一，于今年迎来了第一个十年。在这十年间，个推以消息推送起家，借助技术力量拓宽以数据智能为核心的业务范畴，现已成长为一家在A股上市的数据智能企业。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但“数据智能”这个词，对于大众来说仍然相对比较陌生。&lt;strong&gt;&lt;span&gt;数据行业资深从业者如何定义“数据智能”？过去的十年间，个推经历了怎么样的发展历程？即将到来的“数据智能”新十年，个推又将以什么样的角色参与当中？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在个推十周年之际，个推 CTO 叶新江针对上述疑问，与 SegmentFault 思否展开了一次对话。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-cropselx1=&quot;40&quot; data-cropselx2=&quot;372&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;294&quot; data-ratio=&quot;0.7125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YC2kunpxjNEjJW3T9SqHH1Fmb8rqKRH8GgogPxpHsIGSyicBMZcCMoib9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;320&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;何谓“数据智能”？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;随着移动互联网时代的到来，互联网内容传播和展现形式发生了巨大的变化，也让数据的量级和形态发生了改变，数据服务也随之发生了转变。传统的数据服务基本只针对于数据本身，而数据智能作为一种由数据、算力和算法等驱动的技术手段，具备着赋能企业进行管理和决策的能力。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q1、数据智能是今年非常热门的一个话题，能否谈谈对于「数据智能」和「数据中台」的定义与理解？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;目前数据经济在国家层面是一个非常重要的发展方向，但同时也延伸出了一个亟待解决的问题 —— &lt;strong&gt;&lt;span&gt;如何把各个行业的数据作为生产要素，通过数据治理发挥出更进一步的作用。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;针对看不见摸不着的数据，需要有一个东西能进行有感管理，数据中台就是一种用来进行数据治理的产品或者平台，而数据智能则属于一个更为广义的范畴，它是以数据作为生产资料，通过结合大规模数据处理、数据挖掘、机器学习、人机交互、可视化、云计算等多种技术，从大量的数据中提炼、发掘、获取知识，为人们在制定决策时提供有效的支持，减少或者消除不确定性的解决方案。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这两个词看起来很接近，但其实是不同维度的。以我们公司来讲，数据中台更多的是一个产品，体现了我们公司的数据能力；而数据智能则包含更多技术，融合了更多的行业知识，中台是其中一个很重要的工具。打一个形象的比喻，数据中台或者平台是一个电脑的操作系统，而数据智能则是结合业务，使用这个电脑，利用多种技术进行APP开发，并且不断进行优化的过程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q2、您认为数据中台的「行业壁垒」和「技术壁垒」分别是什么？个推作为一个成功上市的专业数据智能服务公司，自身在这个领域内具备的最大优势是什么？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;目前市面上有很多数据中台类的产品，据我们观察，其中大部分的重点仍主要聚焦于数据治理的能力，但这可能只是数据中台的“第一步”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于数据中台产品来讲，技术壁垒可能并不是很高。&lt;strong&gt;&lt;span&gt;中台会应用到的技术，虽然有些功能可以通过直接使用开源产品来实现，但也有不少标准或者要求，比如安全性、实时性、可视化能力等，需要专业的技术来定制实现。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然在数据中台层面，采用的技术架构不同、产品设计的理念不同也是可以有差异的，譬如是否容易使用、容易理解、对资源要求是否经济等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果希望通过数据中台中来解决业务问题，实现降本增效或者发现新的业务模式，这就不是数据治理能解决的问题，需要有对行业的深度理解，也就是所谓的行业壁垒。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个推和其他大数据公司的差别，就体现在如何挖掘数据价值的层面。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个推的第一款产品是消息推送服务，这是一项跟数据紧密相关的业务。为了支撑这项业务的进行，实现消息推送在海量数据量下的快速响应，个推一直在尝试为企业内部打造一个业务 + 数据平台的协同闭环。这也为之后公司推出数据服务产品打下了很好的基础。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5650429799426934&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YC2YWCVB0D6gv8Qx9lNB0Xmg21iaxf55YxznryV8sA1uQD5vpwof4q4Lw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1745&quot;/&gt;&lt;/p&gt;&lt;p&gt;在数据服务层面，个推既是服务的提供者也是使用者，这是我们在这个领域内最大的优势。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q3、数据服务领域是否有一套标准化的判定体系？如何评定服务能力与技术水平的高低？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据服务领域暂时还没有一套国际或者国家权威机构提出的行业标准。&lt;strong&gt;&lt;span&gt;究其原因，是因为数据服务在不同的行业间有着很大的差别，与一般的技术体系相比，具备更强的服务属性。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于客户来说，挑选数据服务的时候会有几个考量的维度：&lt;/p&gt;&lt;p&gt;● 平台是否可以快速部署；&lt;/p&gt;&lt;p&gt;●  部署所耗费的资源是否合理；&lt;/p&gt;&lt;p&gt;●  能否借助数据服务快速实现业务提升；&lt;strong&gt;&lt;span&gt;譬如是否能快速开发出业务的新需求，是否能很好地完成内部各个角色之间的协同。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这三项标准会是客户选择服务时的决策依据。但在选择完之后，服务商应该如何完成、如何实现客户提出的需求，因为没有清晰的界定与评判方式，需要客户在选型时进行综合性的考虑，并在后续实际的业务场景中去感受平台的服务能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这种情况其实也和市场需求有关。目前国内企业提出的需求都较为“定制化”，再加上不同行业间的差异，导致国内的数据服务公司大部分是结合行业提供垂直的数据服务能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;个推发展的每一步，踩的都是行业需求&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;我国的数字经济发展才刚刚开始，数据智能服务的能力也在不断迭代、发展。人工智能、区块链、知识图谱、可视化等新兴技术，都可以作为底层的技术支撑为数据智能服务赋能，从而让我们的数据服务具备更强大的能力，产生更多价值。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Q1、个推的发展经历了多个阶段，技术也在不断迭代和演进。能否简要分享一下不同阶段的业务逻辑重点以及技术研发重点？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个推是我们的消息推送产品，做得比较早并且比较成熟了。但其实我们公司发展到现在已经十年了，业务范畴也早就不止是消息推送了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;公司发展的第一个阶段是 2010 年到 2013年。当时我们的核心团队主要是在打磨消息推送的能力，也就是一套大规模的通信系统 + 互联网搜索系统，这是一个比较垂直但对于技术要求很高的领域。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2014年至2018年，公司进入了数据价值的“掘金”与“实践”阶段。在不断精进推送能力的同时，我们发现系统产生了非常多的数据，如何让这些数据发挥价值成为了我们需要思考和解决的问题&lt;span&gt;&lt;strong&gt;。也是从这个阶段开始，个推开始致力于大数据系统的研发。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个推的消息推送产品每天会产生几十个 T 的数据，如何存储、清洗、建模，如何在业务场景中产生商业化的价值，这是这一阶段我们的研发重点。经过几年的业务培养与场景实践，我们将在数据服务领域沉淀下来的能力和 know how（知识、经验、流程） ，变成一种可以服务于更多行业的产品，可以说公司正式进入到了数据智能的阶段。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2019年3月，每日互动成功在A股创业板上市，也引起了数据智能领域的一次新风潮。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCiaibk3x5Gbt6iaG6sicFsic5iaNSicT54DPGLnicOh4Jl9X1u71KWqkGVBAorg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在今年的疫情过程中，个推数据智能的能力得到了相当程度的验证。疫情期间，我们与李兰娟院士取得联系，与李兰娟院士团队合作成立联合战队。通过大数据技术，联合战队对疫情发展态势进行了研判，帮助疫情防控部门找到工作重点区域、重点人群和重点场景。在全国逐步有序恢复生产的时候，个推也充分发挥大数据能力并参与其中，为多个省份的疫情联防联控与民生保障、复工复产的有序统筹提供了决策参考依据。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然，个推的数据智能服务仍然是在不断迭代发展的。随着人工智能、区块链、知识图谱、可视化等等新兴技术的发展，这项基于数据的服务也将产生更多的价值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q2、个推致力于打造“每日治数平台”，目标方向是什么样的？与一般的中台产品有什么区别？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;「每日治数平台」其实也是数据中台的概念，但我们提供的数据服务主要是应用于数据治理领域，所以命名为治数平台更为准确。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个平台还有一个提炼后的名字 —— &lt;strong&gt;&lt;span&gt;DMP。D 代表了数据（DATA），M 代表了 机器（MACHINE），而 P 则代表了人（PEOPLE）和专业（PRO）。&lt;/span&gt;&lt;/strong&gt;这几个关键词也代表了我们平台的定位，即数据作为底层资料，快速专业地服务于具体业务当中。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我国的数字经济发展其实才刚刚开始，据了解，不少企业并不知道该如何进行数字化、智能化的转型，业内也缺乏专业的数据人才。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;因此，我们的目标方向和传统的数据中台不同。我们希望真正将个推 know how 的能力沉淀下来，形成客户可以复用的服务或平台产品。之所以想要打造这样的一个平台，背后其实也是基于用户的实际需求。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q3、个推的第一个客户是哪家企业？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个推消息推送业务的第一个客户是新浪微博。当时微博非常火，有着上亿的用户量，消息推送对他们来说是不可或缺的一项功能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2011年，我们主动联系了微博相关业务的负责人，表示可以提供专业的消息推送服务，用更低的成本来实现更好的效果，这也是我们能够打动他们的原因。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;之所以第一个客户就敢挑战“行业顶配”的难度，一方面是技术团队自身具备扎实的技术基础和行业基础，另一方面就是前面提到的，我们在支持自身业务的过程当中沉淀下来的数据和技术能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有这样一个需求明确的大客户，让我们的技术服务能力得以更加高效地迭代，大大加快了技术进步的速度。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;接受挑战并做到“极致”，正是我们公司的工程师文化，&lt;/span&gt;&lt;/strong&gt;对此我们感觉很自豪。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q4、目前面向的客户群体有哪些，涉及哪些领域？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着数据能力的增强，以及对于行业理解的不断加深，&lt;span&gt;&lt;strong&gt;我们目前的服务客户已经扩展到四大领域 —— 互联网、公共服务、风控服务和品牌营销服务。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以金融领域为例， 很多金融机构内部有自己的 App，涉及推送、统计、分析之类非常繁复的数据和信息处理场景。我们帮他们打造了一个集成的消息平台中心，解决了消息处理的分散问题，改善了工作流程。在深度沟通之后，我们发现数据智能服务在金融行业中是一个非常重度的业务场景，为此我们也在考虑开发专门针对金融行业的治数平台。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q5、对于数据公司来说，数据安全是红线。个推如何保障数据安全性？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个推团队自建立之初，便非常注重对于数据安全的保障。正如问题所说，数据安全对数据公司来说是红线，&lt;strong&gt;&lt;span&gt;个推始终认为保护用户数据隐私是企业必须要坚守和捍卫的行业准则、道德底线，并要时刻保持对数据安全的敬畏之心。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个推在严格落实合规和监管要求的同时，倡导行业自律，积极联合行业伙伴的力量，共同推动行业的健康发展。今年8月，由个推牵头起草的《信息安全技术移动互联网应用程序（App）SDK安全指南》国家标准项目，获得全国信息安全标准化技术委员会正式立项，这将有助于SDK行业在开发、运营、信息处理、安全管理等环节向更规范的方向迈进。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.3907407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCell3gJYEgOwq2fvnMlE9Sx2kpyibWPcXpS15GzWvp6Vs5YloXXwT93A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在今年的浙江省网络攻防演练当中，个推在395家参选企业中不借助外部安全公司的力量，仅凭公司自身的安全能力，便取得了第 14 名的成绩，还是很自豪的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;大数据的未来，是不提大数据但是数据又无处不在的时代，“你意识不到我的存在就是我最大的存在”&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;随着数据产业的规模越来越大，生态分工在未来将会越来越细，数据服务也将越来越细。而随着人工智能、云计算、物联网等技术的发展，大数据会不会和互联网一样，不再成为人们单独讨论的概念，而是成为像水电一样的基础设施，服务于各行各业中？&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Q1、随着社会的发展，未来的数据会呈现多形态共存的状态。您认为未来几年大数据领域会出现什么样的一些变化？哪些因素将推动这些变化？你们的生态布局是怎么样的？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着 5G 的成熟，数据领域的发展将从基础的量变迎来一次质变，成为像水电一样的社会基础设施。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;近几年大家其实很少再单独讨论互联网的概念，其中的一个因素，我认为是互联网已经不再是新鲜事物，现阶段技术的发展基于互联网但又高于互联网，大数据之后的发展肯定也会这样，&lt;span&gt;&lt;strong&gt;数据智能的未来，虽然基于大数据，但是不会再单独讨论大数据的概念。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从技术层面来看，大数据行业的发展对海量数据的存储、处理、挖掘需求肯定会越来越高，未来可能也会诞生出几个巨头，将行业进行更加明确的细分。这是一个大家已经能够观察到的趋势。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着数据产业的规模越来越大，生态分工在未来将会越来越明确，数据类的服务也将越来越精细化。我们打造的个推每日治数平台，就是希望能够参与到生态的建设当中，甚至围绕平台打造出一种新的生态。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q2、业内最近有个观点：“云原生体系架构是云服务时代的数据管理方法论”，从技术角度来看，您如何评判云与数据智能间的关系？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不同的人评价同一件事肯定会有不同的出发点，这个观点看起来应该是云服务厂商提出的（笑）。很巧，我前一阵也跟吉利公司的人在讨论这个问题，他们最近刚从一家云厂商中迁移出来。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对企业来说，上不上云、选择公有云还是私有云、选择哪家云厂商需要考虑几个维度：&lt;span&gt;&lt;strong&gt;成本吃不吃得消、是否自主可控、当不满足业务需求或者服务需求时是否方便切换等。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以个推为例，我们目前不会将数据放到第三方的云上，但从资源的调度、成本的控制等方面来看，云体系已经是一个公认的标准答案，所以我们也会使用云计算的相关技术，比如容器云、虚拟化等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q3、物联网、AI、机器学习等新技术的出现，对行业来说是机会还是挑战？个推应对技术的发展是否有做哪些前瞻性的探索？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;新技术的出现，对行业来讲既是机会也是挑战。每次新技术的出现，都能为人类解放生产力或者提高生产力提供了可能性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但一些技术因为过于“新”，暂时还没有找到发挥能力的场景，没办法发挥出实际的社会价值，让企业的投入与产出不成正比。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个推还成立了数据智能研究院，目前研究的方向是探索如何将技术更好地服务于具体的业务当中。比如我们对物联网技术方向的探索，是想将自身的推送技术能力延伸到电视机、汽车等场景当中；对机器学习和区块链的探索则是为了进行一些业务模式的研究。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;技术是面向未来的，但用户的需求是现在的。&lt;/span&gt;&lt;/strong&gt;对于我们来说，目前的重点还是如何借助技术快速迭代服务能力，为用户以及行业赋能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.74&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCJn4ycqXKYeycLhW4bUDVWFt3hpTblyNWb9OJVJ9dC5JaLuU6icf8Y4w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;300&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;回顾大数据行业和个推的发展时间线，不难发现个推成立的这十年，恰巧也是大数据从一种辅助工具向引领发展方向的核心引擎转变的十年。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着大数据行业的发展，国家正在大力发展数字经济，企业正在迎来一波借助数据智能实现数字化、智能化的转型新浪潮。&lt;strong&gt;&lt;span&gt;在这股浪潮中，开始“治数”的个推将会扮演一个什么样的角色？我们拭目以待。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;限时福利&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;在十周年之际，个推为广大开发者准备了重磅福利 —— &lt;strong&gt;&lt;span&gt;爆款SDK免费用1年、热门大数据产品0门槛试用！&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;点击阅读原文，&lt;/span&gt;&lt;/strong&gt;即可参与，还有丰富的惊喜礼盒限时领取！&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.1111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCWNaQqxNkpxdoTJ7zOChMOI1eQmXicHrjgKIeoe427q9P7w1KcHPlDDA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MDc1MjcyMQ==&amp;amp;mid=2247484780&amp;amp;idx=1&amp;amp;sn=eb3f3e453559de485c34f4905f3927df&amp;amp;chksm=fc027452cb75fd44ab0a0f9fde3d66c6cb023315d14ec1eee2f8aabffc18651ed4af0fdeee49&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.25&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCUeeSyHPm4j04DTdIudpJ52QZqZ6OnFU6bptMDia1dPx2NicRvIOeBMQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MDc1MjcyMQ==&amp;amp;mid=2247486015&amp;amp;idx=1&amp;amp;sn=e117d4c8516166c1714badbaf663b2cf&amp;amp;chksm=fc027b01cb75f217d335734f2fb346a394b8901048cc651e9e3eb96db2600de26cadf21bba6f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.25&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCR7jk3TibdREDohUxSWDvmZCdPHXcllDEQE8SicUNSA1IKbOweefZzZKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8cHicoiacTv8JqGJmY1vPHn4JX87favPMp4hm8cibDwyJ0C0P4kvgeo97vk0etSPE6tUic4J0iaxuojABvxvlELLM0g/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.005128205128205&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8cHicoiacTv8JVOE5ibzQy7MmiadREHZ5jdb7lnZHBwRicz7V79AywTRCpiaVb7dvLF4PtB6iaIsKNUxAuwic21BrTqiaSA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;390&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/8cHicoiacTv8LEYDw1vNOkQqDNWLcau8YCQd7NXZlYIzdHDRPdL3Om3VFmh3ppvpqrplD4Umq5SDDRRyJiaIXge0A/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;300&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;立即参与，&lt;strong&gt;&lt;span&gt;领取福利！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>105d25c0a94c5d671671e36d5b7d2287</guid>
<title>一文串联 HTTP、TCP、IP、以太网</title>
<link>https://toutiao.io/k/dqkrq0f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近部门组织了一次前端性能优化交流会，大家从输入页面 URL 到最终页面展示内容这个过程提出了许多优化点。但同时发现很多同学对 HTTP 协议层的知识不能串联起来，于是整理了这篇文章，希望可以给大家带来一丝灵感。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们在页面上发起一个 AJAX 请求的时候，在网络协议层面都经历了哪些内容？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 发起请求&lt;/span&gt;&lt;br/&gt;fetch(&lt;span&gt;&#x27;https://baidu.com&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;// 协议层1...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 协议层2...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 协议层3...&lt;/span&gt;&lt;br/&gt;.then(&lt;span&gt;&lt;span&gt;res&lt;/span&gt;=&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// 得到结果&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.log(res)&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上述代码所示，我们对 &lt;code&gt;baidu.com&lt;/code&gt; 发起了一个网络请求，最终在 then 方法中得到了具体的响应内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 Wireshark 抓包结果如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3148542999289268&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOM27eiaCiattnCddIJk66GwcTQGMRK5EOzjeibkZAZLj5QzX9ygx3t0Q1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1407&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图中可以看到，请求 baidu.com 时，首先通过 TCP 3 次握手建立连接，然后通过 HTTP 传输内容，最后通过 TCP 4 次挥手断开连接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;真实的过程更加复杂，我们主要分析以下几点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;建立连接阶段&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;通过 IP 寻址找到目标服务器（网络层）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 Mac 寻址找到服务器硬件接口（数据链路层）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过网线向服务器硬件接口传输比特信息（物理层）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;DNS 域名解析（应用层）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;建立 TCP 连接（传输层）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;发送数据阶段&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;建立 SSL 安全连接（应用层）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发送 HTTP 请求（应用层）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;建立连接阶段&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要获取 baidu.com 的网页内容，就需要和 baidu 服务器建立连接，怎样建立这个连接呢？&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;通过 DNS 获取 baidu 的 IP 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;建立 TCP 连接。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;DNS 域名解析&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过 DNS 解析，我们就能找到 baidu 服务器对应的 IP 地址。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4074373484236055&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOm8ib4RnLBIARxYoJuUa0OcsHpL9DeUycf8Z2kPbKetMMjsK1YEwAlZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1237&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过 DNS 解析后，我们就能得到 baidu.com 的 IP 地址了：39.156.69.79 和 220.181.38.148，通常客户端会随机选中一个 IP 地址进行通信。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;域名的解析步骤&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实 IP 不一定要通过 DNS 解析才能获取，它通常会被客户端缓存，只有在 DNS 缓存都没有命中的时候才会请求 DNS 服务器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;判断步骤如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;判断浏览器是否有缓存 IP 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断本机是否有缓存该 IP 地址，如：检查 Host 文件。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断本地域名解析服务器是否有缓存 IP 地址，如：电信，联通等运营商。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;向 DNS 根域名解析服务器，解析域名 IP 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;向 DNS 二根域名解析服务器，解析域名 IP 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;以此类推，最终获得 IP 地址。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;建立 TCP 连接&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了 IP 地址之后，客户端和服务器端就能建立连接了，首先是建立 TCP 连接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 是一种面向连接的、&lt;strong&gt;可靠的&lt;/strong&gt;、基于&lt;strong&gt;字节流&lt;/strong&gt;的传输层通信协议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这一层，我们传输的数据会按照一个个的字节装入报文中，当报文的长度达到最大分段（MSS）时，就会发送这个报文。如果传输的报文很长，可能会被拆分成多个 TCP 报文进行传输。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP 报文头如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.32439446366782004&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOqAqlN0kVibuv9pPbuzlYaib1wNFibGUb3gW3ziav8IUaCTNpPlXzia6x2hg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2312&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们主要看以下几点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;源端口、目的端口。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;序列号：seq，报文的唯一标识。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;确认号：ack，报文的确认标识，便于确认 seq 是否已经收到。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TCP 标记：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;SYN 为 1 表示这是连接请求或是连接接受请求。用于创建连接和同步序列号。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ACK 为 1 表示确认号字段有效。注意这里大写的 ACK 只是一个标记，和确认号 ack 并不相同。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;FIN 为 1 表示要求释放连接。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;窗口：表示发送方可以接收的字节数，即接收窗口大小，用于流量控制。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们看一下 TCP 是怎样建立连接的？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6535433070866141&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7L9icdzjNYAUiaCrjHys7vMrViaaibK6eOFLEWygx1NHfZLTB5j2bVJjX9ZSdq6mArAyy0XkYOFiaib0Htg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;889&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图所示，建立 TCP 连接需要 3 个步骤，俗称三次握手。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一次握手：客户端向服务器端发送序列号 seq=x 的标识，表示开始建立连接。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二次握手：服务器端回发一个 ack=x+1 的标识，表示确认收到第一次握手，同时发送自己的标识 seq=y。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三次握手：客户端发送 ack=y+1 的标识，标识确认收到第二次握手。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过了 3 次握手，即保证了客户端和服务器端都能正常发送和接收数据，TCP 连接也就建立成功了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;TCP 可靠传输原理&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上文中说到，TCP 是可靠的传输，这是为什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是因为 TCP 内部使用了 &lt;strong&gt;停止等待协议 ARQ&lt;/strong&gt; ，它通过 &lt;strong&gt;确认&lt;/strong&gt; 和 &lt;strong&gt;重传&lt;/strong&gt; 机制，实现了信息的可靠传输。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3952333664349553&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibO7aX8Y9BdibiaQ7CicYHID19u5Mv5y6h33IPgd0XJrtxiae26icwMAYLEo7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1007&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;客户端发送数据 M1&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务器端确认数据 M1 收到&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端发送数据 M2&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务器端确认数据 M2 收到&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;依次类推 ...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这期间，如果某一条数据很久都没有得到确认，客户端就会重传这条数据。这样一来，对于与每一次发送的数据，服务器端都得到了确认，即保证了数据的可靠性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然 ARQ 可以满足数据可靠性，但每次只能发送和确认一个请求，效率太低了，于是就产生了连续 ARQ 协议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;连续 ARQ 协议&lt;/strong&gt; 会连续发送一组数据，然后再批量等待这一组数据的确认信息，好比把单线程 ARQ 变成了多线程，大大提高了资源的利用效率。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8008982035928144&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOgESc640pdVu5Piciav08Ytg5AxCIQdIlG4pJ5m11Hia5iaXssMtEibFb6qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1336&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;客户端发送数据 M1、M2、M3、M4。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务器端确认数据 M4 收到，表示 M4 及之前的数据都收到了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端发送数据 M5、M6、M7、M8。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务器端确认数据 M8 收到，表示 M8 及之前的数据都收到了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个流程中，服务器端不需要对每一个数据都返回确认信息，而是接收到多个数据时一并确认，这个方式叫做 &lt;strong&gt;累计确认&lt;/strong&gt;。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里有个疑问，TCP 的每一次握手，是怎么找到目的服务器呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：通过 IP 协议。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;根据 IP 协议找到目标服务器&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;IP 协议的目的是实现网络层的数据转发，它通过路由器不断跳转，最终把数据成功送达目的地。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上文中的每一次 TCP 握手以及数据交互，都是通过 IP 协议去传输的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;IP 报文头如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5153949129852744&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7L9icdzjNYAUiaCrjHys7vMrViaD3iaRDRZ7pqZ4AawXNMx3UQGzCwibHJv2rzBRqLBnHHyDjzXW4qYKkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;747&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们关注以下两点就可以了：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发起一个 IP 请求执行流程如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;构建 IP 请求头（源 IP、目标 IP）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;IP 协议通过算法，计算出一条通往服务器端的路径。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发送端查询路由表，找出下一跳的 IP 地址（通常是路由器），并发送数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;路由器查询路由表，找出下一跳的 IP 地址，并发送数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不断重复步骤 4，直到找到目的局域网。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发送数据。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;路由表存在于计算机或路由器中，由目的 IP 地址、子网掩码、下一跳地址、发送接口四部分组成。通过目的 IP 地址，即可找到下一跳的地址，进行转发。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：A 要向 G 发送 IP 数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6015625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOPTibAXtXqquwicGqREhp55ibFYam7VTbsHtpQUibfEsyy0muJ5fEeta6sQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1536&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体流程如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;A 生成 IP 头部（源 IP：A ，目的 IP：G）&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;A 查询路由表，发现下一跳为 B，于是把数据传给 B。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;B 生成 IP 头部（源 IP：A ，目的 IP：G）&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;B 查询路由表，发现下一跳为 E，于是把数据传给 E。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;E 生成 IP 头部（源 IP：A ，目的 IP：G）&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;E 查询路由表，发现下一跳为 G，于是把数据传给 G。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;到达目的地 G。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你是否有疑惑，为什么 IP 会按照这条路径向 G 传输数据呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，上图中的路径并非只有一条，我们通过 ABEG 到达了目的地 G，同样也可以通过 ABCFHG 到达 G，这两种路径都能完成任务，为什么 IP 不选择 ABCFHG 这条路径呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就涉及到了 IP 寻址的算法。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;IP 寻址算法&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以把网络中的所有计算机都看做是一个点，计算机之间的连接看做是一条线，这些点和线就组合成了一个图。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5635294117647058&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/SM05zvmibH7L9icdzjNYAUiaCrjHys7vMrVHvdPlrBm8A9mfW9nqIxlVbMbQo6KZwNfqcUicPQHLFK5C3jmSo0H9gQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上图，我们就把复杂的网络转化成了数学问题。IP 寻址算法，其实就是图论中的最短路径的算法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最短路径算法在 IP 协议中有 2 种实现：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;RIP 协议&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;每个节点中都保存有其他节点的位置信息（跳数和下一跳的 IP）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过和邻居节点进行数据交换，更新自己到目的地的最短距离，不断重复，即可得到起点到终点的最短路径。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现简单，开销很小，适用于小型网络。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用距离矢量算法，&lt;strong&gt;确保 IP 路由跳转的次数最小&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;原理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;OSPF 协议&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;从起始点开始，采用贪心算法的策略，每次遍历到始点距离最近且未访问过的顶点的邻接节点，直到扩展到终点为止。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;适用于大型网络。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用迪杰斯特拉算法，&lt;strong&gt;确保 IP 路由跳转的速度最快&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;原理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过以上两个协议，我们就能找到通往目的地的路径了。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里抛出一个问题：IP 数据是怎样从一个路由器跳到另一个路由器呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：通过以太网协议。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;通过 Mac 寻址找到服务器硬件接口&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;IP 协议主要是用来寻找最优路径的，具体的传输是由以太网协议来做的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以太网属于数据链路层，它主要负责相邻设备的通信。原理是通过查询交换机 Mac 表，找到通信双方的物理接口，进而开始通信。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以太网报文头如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.26247987117552335&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOOloRAzcDYXgvWIKOXXTFPBxn5Tnx1h87u6u5LfxDb21FUaia71Ss6WQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1242&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们只用关心以下 3 个点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;源 Mac 地址&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;目的 Mac 地址&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;校验码 CRC：校验当前帧是否有效。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，以太网层都是通过 Mac 地址进行通信的，这里的 Mac 地址是哪里来的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：通过 ARP 协议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;ARP 协议&lt;/strong&gt; 是一个通过解析 IP 地址来找寻 Mac 地址的协议。IP 地址转换成 Mac 地址后，就能进行以太网数据传输了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7013232514177694&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOqoUQa4r0mM1U3wgvYPGHawp5ryMNXMorZU1T9aJItFVDtSHfCODQNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1058&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当机器 A 向机器 C 发送数据时：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;A 构建以太网报文（源地址：A，目的地址：C），并通过网卡发出数据帧。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据帧到达交换机 B，交换机取出目的地址 C 的 Mac 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;B 查询 Mac 表，根据目的地 Mac 地址，匹配 C 的硬件接口。&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果找到 C 的硬件接口，发送数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果未找到 C 的硬件接口，向 B 直连的所有机器发送广播信息找 C，找到后会把 C 记录到 Mac 表中。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过上述的流程，我们就找到了目的机器的硬件接口。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过以太网协议，我们找到了目标机器的硬件接口，接下来要怎么发送信息呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：通过物理层。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;通过网线向服务器硬件接口传输比特信息&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在没有 WiFi 的年代，我们只能通过插网线来进行上网，网线其实就是物理层的设备之一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网线可以由多种材料组成，最常见的就是光纤和电缆。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;光纤和电缆的传输原理类似，都是通过两个信号来模拟二进制数据的，一个信号即为一个比特。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;电缆中：高电位表示 1 ，低点位表示 0。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;光纤中：光亮表示 1，光熄灭表示 0。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如：在光纤中，我们通过观察光的闪动，即可得知传输的二进制数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了这些物理设备，我们就能把复杂的数据转换成光信号或者电信号进行传输了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;发送数据阶段&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发送数据可以分为两个步骤：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;建立安全层 SSL&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文的案例是发送一个 HTTPS 的请求，所以在发送数据之前，会创建一个 SSL 安全层，用于数据加密。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常的加密方法有两种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;非对称加密&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;A 有钥匙，B 没有钥匙，且他们都有一个公共的锁，B 给 A 发送数据时，都会先把数据锁起来再发送。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;接收数据时，A 用钥匙解开锁，即可得到数据。除 A 以外，其他人没有钥匙，也就获取不到数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现了单向通信加密。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;对称加密&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;A、B 双方都有一把相同的钥匙和一个公共的锁，每次发送数据时，都把数据放在锁里进行发送。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;接收数据时，A、B 双方就用各自的钥匙来解锁。其他人没有钥匙，也就获取不到数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现了双向通信加密。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;互联网通信是双向的，所以我们需要使用对称加密，可是，怎样才能保证通信双方都有一把相同的钥匙呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前的解决方案：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;先使用非对称加密，进行秘钥协商，让通信双方拿到相同的钥匙。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后使用对称加密，进行加密传输。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;秘钥协商过程如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4583741429970617&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOfUCI9aN0xicYP8Kp1stmjfdzaro3NVVnDFaUciaDFibj3vn0hhj5wto1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2042&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图中划重点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;客户端发送自身支持的加密算法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务器端选择一种加密算法，同时返回数字证书。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端确认证书有效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端生成随机数，并使用证书中的服务器公钥加密，然后发送给服务器。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务器端使用私钥解密，获得随机数。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;双方使用第 2 步确定的加密算法，把随机数进行加密，即可获得相同的对称加密秘钥。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Ok，秘钥协商之后，我们的 SSL 安全层也就建好了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;秘钥协商时存在一个问题：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;秘钥协商时，怎么保证是和真正的服务器在协商，而不是一个中间人呢？&lt;/p&gt;&lt;p&gt;答：&lt;strong&gt;数字证书&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数字证书重点关注 2 个部分：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中，数字签名又是由服务器公钥和证书私钥加密生成的，目的是为了防止服务器公钥被篡改。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.567741935483871&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7L9icdzjNYAUiaCrjHys7vMrVwI6mqIECJdtwQYNjKfYnU8qIeatWmsyXSRWP8aibv1zDNcQJo8yia3dg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;620&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了数字证书，客户端就能通过验证证书，来判断服务器是否是真正的服务器了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;验证逻辑如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4420289855072464&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7L9icdzjNYAUiaCrjHys7vMrVDZicM8WzylfjreSicVhcp9zGUaf5HkzOgOgTwkb8F2sCLYaqcJcYKfyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，数字证书通过同样的算法进行解密，如果得到相同的信息摘要，就能保证数据是有效的，如果不一致，则会验证失败，拒绝后续的请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里为止，所有的准备工作都就绪了，接下来才是发送 HTTP 请求。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;发送 HTTP 请求&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HTTP 协议其实就是制定了一个通信规则，规定了客户端和服务器之间的通信格式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以请求 baidu 首页为例：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5910165484633569&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibO0qHibtlSTZvWsou5YWpW7E1voe6aqKibhJDLsiaGdh41VoXyAq8gzbBtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;846&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图所示，发起 HTTP 请求时，必须遵守以下规则：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;请求方法（必填） &lt;code&gt;GET&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;请求地址（必填） &lt;code&gt;/&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;HTTP 协议版本（必填） &lt;code&gt;1.1&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他 HTTP 头部字段（可选） &lt;code&gt;Host&lt;/code&gt;、&lt;code&gt;User-Agent&lt;/code&gt;、&lt;code&gt;Accept&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;请求参数，放在空行后面（可选）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务器响应请求时，同样遵守了 HTTP 响应规则：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;HTTP 协议版本（必填） &lt;code&gt;1.1&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;响应状态码（必填） &lt;code&gt;200&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;状态码描述（必填） &lt;code&gt;OK&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他 HTTP 头部字段（可选） &lt;code&gt;Date&lt;/code&gt;、&lt;code&gt;Server&lt;/code&gt;、&lt;code&gt;ETag&lt;/code&gt;、&lt;code&gt;Last-Modified&lt;/code&gt; 等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;请求参数，放在空行后面（可选）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要我们遵守这个规则，就能进行 HTTP 通信了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到目前为止，我们已经分析完成了数据请求的所有过程，你是否都理解了呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;思考与总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文通过一个网络请求，对整个 HTTP、TCP、IP、以太网等协议进行了流程化分析，最后再梳理一下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;请求 baidu.com。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;DNS 解析 baidu.com，得到 IP 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;建立 TCP 连接。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;IP 协议通过算法，计算出一条通往服务器最优路径。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;IP 沿着路径跳转时，会通过 ARP 协议把 IP 地址转换成 Mac 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;以太网通过 Mac 地址，找到通信双方的硬件接口。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;物理层通过网线作为载体，在两个硬件接口之间传输比特信号。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TCP 连接建立完毕。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;建立 SSL 安全层。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发送 HTTP 请求。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，如果你对此有任何想法，欢迎留言评论！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7Lj72L1qjA4aJpDSCzVOiaibOicoUdfIzlr9RlvLLOvgVeUIRxITZZDGQzhwaBdqLA3aWCP6SGasiboEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>57b4f92b08dfbf31e9214798151c366f</guid>
<title>5 分钟掌握 Spring Boot 自动配置原理</title>
<link>https://toutiao.io/k/8p5funr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;       随着互联网越来越流行，springboot已经成为我们无论是工作，还是面试当中，不得不掌握的技术。说起springboot笔者认为最重要的功能非自动配置莫属了，为什么这么说？如果参与过以前spring复杂项目的朋友肯定，有过这样的经历，每次需要一个新功能，比如事务、AOP等，需要大量的配置，需要导出找jar包，时不时会出现jar兼容性问题，可以说苦不堪言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;      springboot的出现得益于“习惯优于配置”的理念，没有繁琐的配置、难以集成的内容（大多数流行第三方技术都被集成），这是基于Spring 4.x以上的版本提供的按条件配置Bean的能力。有了springboot的自动配置的功能，我们可以快速的开始一个项目。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一 什么是自动配置&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道朋友们在工作当中有没有这样的经历:&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1 引入redisTemplate&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要我们在pom.xml文件中引入spring-boot-starter-data-redis-xxx.jar包，然后只要在配置文件中配置redis连接，如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;spring.redis.database = 0&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;spring.redis.timeout = 10000&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;spring.redis.host = 10.72.16.9&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;spring.redis.port = 6379&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;spring.redis.pattern = 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就可以在service方法中直接注入&lt;code&gt;StringRedisTemplate&lt;/code&gt;对象的实例，可以直接使用了。朋友们有没有想过这是为什么？&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@&lt;span class=&quot;code-snippet__keyword&quot;&gt;Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;private StringRedisTemplate stringRedisTemplate;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2  引入transactionTemplate&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在项目中只要引入spring-boot-starter-xxx.jar，事务就自动生效了，并且可以直接在service方法中&lt;/span&gt;&lt;span&gt;直接注入&lt;/span&gt;&lt;span&gt;&lt;span&gt;TransactionTemplate&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，用它开发编程式事务代码。是不是很神奇？这又是为什么？&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.3  使用@ConfigurationProperties&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;使用&lt;span&gt;@ConfigurationProperties&lt;/span&gt;可以把指定路径下的属性，直接注入到实体对象中，看看下面这个例子：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Data&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Component&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@ConfigurationProperties(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;jump.threadpool&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ThreadPoolProperties&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; corePoolSize;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; maxPoolSize;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; keepAliveSeconds;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; queueCapacity;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;只要&lt;span&gt;application.properties&lt;/span&gt;这样配置，就可以自动注入到上面的实体中&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;jump&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.threadpool&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.corePoolSize&lt;/span&gt;=8&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;jump&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.threadpool&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.maxPoolSize&lt;/span&gt;=16&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;jump&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.threadpool&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.keepAliveSeconds&lt;/span&gt;=10&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;jump&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.threadpool&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.queueCapacity&lt;/span&gt;=100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;没错，这三个例子都是springboot自动配置在起作用，我们分为两种情况：bean的自动配置 和 属性的自动配置。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二 工作原理&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 bean的自动配置&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Spring Boot的启动类上有一个&lt;/span&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;&lt;span&gt;注解，这个注解是Spring Boot项目必不可少的注解。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先看看&lt;span&gt;@SpringBootApplication&lt;/span&gt;注解&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.29335260115606937&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDFKbF3EAtJWnG77cKicgGnWiawpMy4TQRkUS8KvyxbhSqT6Cj0eXASnCJNWmm1nUsASAvU9auFEHibkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1384&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它上面定义了另外一个注解：&lt;span&gt;@EnableAutoConfiguration&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.35572139303482586&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDFKbF3EAtJWnG77cKicgGnWianVzqZzEboSH0tp5JU7pnBKwrQezqfbfVO0CMhrFzn8FTFMxzEBjOlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;804&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该注解的&lt;span&gt;&lt;span&gt;&lt;span&gt;关&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;键功能由&lt;span&gt;@Import&lt;/span&gt;提供，其导入的&lt;span&gt;AutoConfigurationImportSelector&lt;/span&gt;的&lt;span&gt;selectImports&lt;/span&gt;()&lt;span&gt;方法通过SpringFactoriesLoader.loadFacto&lt;/span&gt;&lt;span&gt;ryNames()扫描所有具有META-INF/spring.factories的jar包下面key是EnableAutoConfiguration全名的，所有自动配置类。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看看springboot的spring-boot-autoconfigure-xxx.jar&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7259528130671506&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDFKbF3EAtJWnG77cKicgGnWiaPLCNsv51ucjqBhCpz8vuzc32uWO5HOr5iax4bQx0QD5Y5eeGFsEfHPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1102&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该jar包里面就有&lt;span&gt;META-INF/spring.factories&lt;/span&gt;文件。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4740810556079171&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDFKbF3EAtJWnG77cKicgGnWia5z1PSiacpCMT1dwx6Nd1srADa2vgy7VLcezDSwwKplFqMiao8rwJ9VLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2122&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个&lt;span&gt;spring.factories&lt;/span&gt;文件是一组一组的key=value的形式，其中一个key是&lt;span&gt;EnableAutoConfiguration&lt;/span&gt;类的全类名，而它的value是一个xxxxAutoConfiguration的类名的列表，这些类名以逗号分隔。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;@EnableAutoConfiguration&lt;/span&gt;注解通过&lt;span&gt;@SpringBootApplication&lt;/span&gt;被间接的标记在了Spring Boot的启动类上。在&lt;span&gt;SpringApplication.run&lt;/span&gt;(...)的内部就会执行&lt;span&gt;selectImports&lt;/span&gt;()方法，找到所有JavaConfig自动配置类的全限定名对应的class，然后将所有自动配置类加载到Spring容器中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;SpringApplication.run&lt;/span&gt;&lt;span&gt;(...)&lt;/span&gt;方法怎么调到&lt;span&gt;selectImports&lt;/span&gt;&lt;span&gt;()方法&lt;/span&gt;的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加载过程大概是这样的：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;SpringApplication.run(...)&lt;/span&gt;&lt;span&gt;方法 &lt;/span&gt; 》 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AbstractApplicationContext.refresh()方法  》 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;invokeBeanFactoryPostProcessors(...)方法  》 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(...) 方法  》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(..)方法  》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AutoConfigurationImportSelector.selectImports&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该方法会找到自动配置的类，并给打了@Bean注解的方法创建对象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;postProcessBeanDefinitionRegistry&lt;/span&gt;方法是最核心的方法，它负责解析&lt;span&gt;@Configuration&lt;/span&gt;、&lt;span&gt;@Import&lt;/span&gt;、&lt;span&gt;@ImportSource&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;@Component&lt;/span&gt;、&lt;span&gt;@ComponentScan&lt;/span&gt;、&lt;span&gt;@Bean&lt;/span&gt;等，完成bean的自动配置功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到刚刚第二个例子&lt;span&gt;TransactionTemplate&lt;/span&gt;为什么可以直接引用？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是因为在spring-boot-autoconfigure-xxx.jar的spring.factories配置文件中，&lt;span&gt;EnableAutoConfiguration&lt;/span&gt;&lt;span&gt;全类名&lt;/span&gt;下配置了&lt;span&gt;TransactionAutoConfiguration&lt;span&gt;全&lt;/span&gt;&lt;/span&gt;类名，springboot在启动的时候会加载这个类。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3888048411497731&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDG6vzDZpMIq4uSWtiazr40l6A9CAicq9o95w9odvBuLKYiaq3XthWqhRFicHJw5iaCzHSpGJ0ZC2R66vdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1322&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而&lt;span&gt;TransactionAutoConfiguration&lt;/span&gt;类是一个配置类，它里面创建&lt;span&gt;TransactionTemplate&lt;/span&gt;类的实例。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6620689655172414&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDG6vzDZpMIq4uSWtiazr40l6BiaaAhkUiaveVv3US0Dl2tBXgZQE9IjeiaMbmOeS37hrq2pRFQNmf7sGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1740&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这样在其他地方就可以直接注入&lt;/span&gt;&lt;span&gt;TransactionTemplate&lt;/span&gt;&lt;span&gt;类的实例&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2 属性的自动配置&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;属性的自动配置是通过&lt;span&gt;ConfigurationPropertiesBindingPostProcessor&lt;/span&gt;类的&lt;span&gt;postProcessBeforeInitialization&lt;/span&gt;方法完成，&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Object postProcessBeforeInitialization(Object bean, String beanName)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    throws BeansException {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ConfigurationProperties &lt;span class=&quot;code-snippet__keyword&quot;&gt;annotation&lt;/span&gt; = getAnnotation(bean, beanName,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      ConfigurationProperties.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;annotation&lt;/span&gt; != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    bind(bean, beanName, &lt;span class=&quot;code-snippet__keyword&quot;&gt;annotation&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; bean;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;它会解析@&lt;span&gt;ConfigurationProperties&lt;/span&gt;注解上的属性，将配置文件中对应key的值绑定到属性上。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;三 自动配置的生效条件&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;每个&lt;span&gt;xxxxAutoConfiguration类&lt;/span&gt;上都可以定义一些生效条件，这些条件基本都是从&lt;span&gt;@Conditional&lt;/span&gt;派生出来的。&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;常用的条件如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@ConditionalOnBean&lt;/span&gt;：当容器里有指定的bean时生效&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@ConditionalOnMissingBean&lt;/span&gt;：当容器里不存在指定bean时生效&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@ConditionalOnClass&lt;/span&gt;：当类路径下有指定类时生效&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@ConditionalOnMissingClass&lt;/span&gt;：当类路径下不存在指定类时生效&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@ConditionalOnProperty&lt;/span&gt;：指定的属性是否有指定的值，比如&lt;span class=&quot;code-snippet__meta&quot;&gt;@ConditionalOnProperties&lt;/span&gt;(prefix=”xxx.xxx”, value=”enable”, matchIfMissing=&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;)，代表当xxx.xxx为enable时条件的布尔值为&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;，如果没有设置的情况下也为&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个比较常用的例子看看&lt;span&gt;TransactionAutoConfiguration&lt;/span&gt;，是如何使用条件的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.41797432239657634&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDFKbF3EAtJWnG77cKicgGnWiau5HlHLjY12iaCTMdv7wiaN6LAFRNKibICzicIKkZvYI3FiacibFwUiaWN5D3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1402&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到，条件用的是：&lt;span&gt;@ConditionalOnClass&lt;/span&gt;，表示&lt;span&gt;TransactionAutoConfiguration&lt;/span&gt;类只有在&lt;span&gt;PlatformTransactionManager&lt;/span&gt;类存在时才会生效。&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;如何自定义自动配置类？&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;请阅读《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247484236&amp;amp;idx=1&amp;amp;sn=e7eb1011b39ab1f1bbeb46e1b6228b93&amp;amp;chksm=f9800596cef78c80416c7cdaa9177af8fac8c98959beea95af46c7ac45e8892f73228cb9f879&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;老司机手把手教你编写自己的springboot starter&lt;/a&gt;》里面有详细步骤。&lt;br/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇文章从什么是自动配置，工作原理 和 自动配置的生效条件 三个方面介绍了自动配置的相关知识点。自动配置又分为：&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;的自动配置 和 属性的自动配置&lt;/span&gt;，二者的实现原理不一样。自动配置的生效条件用得非常多，建议朋友们好好研究一下。至于如何自定义自动配置类，本篇没有讲，是因为我在另外一篇文章&lt;span&gt;《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247484236&amp;amp;idx=1&amp;amp;sn=e7eb1011b39ab1f1bbeb46e1b6228b93&amp;amp;chksm=f9800596cef78c80416c7cdaa9177af8fac8c98959beea95af46c7ac45e8892f73228cb9f879&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;老司机手把手教你编写自己的springboot starter&lt;/a&gt;&lt;span&gt;》&lt;/span&gt;中仔细介绍过的，有需要的朋友可以自行查阅。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;如果这篇文档对您有所帮助的话，麻烦关注一下我的公众账号：苏三说技术，或者帮忙点赞或转发，坚持原创不易，您的支持是我坚持最大的动力。后面我会分享更多更实用的干货，谢谢大家的支持。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9e9f722b72a85d8903d4ca379c59cb39</guid>
<title>漫画：只有光头才能让我变强</title>
<link>https://toutiao.io/k/p7iklps</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;68&quot; data-ratio=&quot;0.11796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu4vJHnl2qFx2gLsRLceT0mNiaicib5IZTsALiaU1rzhhibO50BNpv4YO6Z5AYXcykggs6vNHr8vIO9624w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-backw=&quot;578&quot; data-backh=&quot;68&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;了不起的程序员&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;------------------------------------------&lt;span&gt;原创出品&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;-&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我是个程序员&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也曾是个秀发浓密的程序员&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但如今看着镜中光亮如新的自己&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;突然思绪万千&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;......&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;2.0080515297906603&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu4dHkrVTfnVr9Qz5kwBzhhK2548vR7sRbBk1pX9ru1gSLtnVnkDUpzBFnn5KuLPIK47I0zoJjKSUg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.7230273752012883&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu4dHkrVTfnVr9Qz5kwBzhhKF2rL7XGCdZJ4bSX5z9p7CSxd1XiaA73Xic3vewegeDbD6DofXbbA3ZaA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;2.528985507246377&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu4dHkrVTfnVr9Qz5kwBzhhKib9UTic8QxPurjesOevGHt5flMic5dkHic4xDznKs29uhLyEv1ibObYZzFQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;2.7359098228663448&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu4dHkrVTfnVr9Qz5kwBzhhKx7Xw9wfu5YZN9TSe44J1RnzoVicMKBnAbNfeyG98OAx7DvVCoibUVrpg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;2.359903381642512&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu4dHkrVTfnVr9Qz5kwBzhhKm6lJuj77j4ibMibibNJKxwvydxZ4sxznibXE5tKPfhhNtw9bBdEV9cIf4Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;2.6996779388083736&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu4dHkrVTfnVr9Qz5kwBzhhKaThibQJybUAvNFPT9ZgQp4DH6rcCodmEgmKhhgMQa5kqBgA9T5LdYdQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;2.5925925925925926&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu4dHkrVTfnVr9Qz5kwBzhhKk4Sug6eDrT3O1jV2Rj9KYPa1hWlNEnRsrBKueldyOzVo6IHrua4QLw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;2.333064516129032&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu4dHkrVTfnVr9Qz5kwBzhhKfibIIOWD3x0kNialf8GUAATdtYOau3sCcx2dzCzuYeI38b1XiboBkib9ibw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1240&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;2.5152979066022545&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu4dHkrVTfnVr9Qz5kwBzhhKYXalm8dEkIUV1Wbv9yFdiaoZuG4tricwdN4gsBgicq5BnzMxmp2aXGibkw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;3.185185185185185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu4dHkrVTfnVr9Qz5kwBzhhKOKYicjNJxJiaLiaa0LnWoz6dLjJQCukSABhhCXtKI2lL40xdx6siajoESQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;809&quot; data-ratio=&quot;1.3993558776167472&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu4vJHnl2qFx2gLsRLceT0mNRic8BcrBWiciaO9sjpFfDvymlaZ5BLZTplicURBK78I0bBwjAMZ0LK0LvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;-&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;生活从不会亏欠我们的每一份努力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看的每一本书、上的每一节课、加的每一次班、敲的每一行代码、修复的每一个bug……和后来我们说的每一句话、做的每一个选择、迸发的每一个灵感、得到的每一个赞许、收获的每一次成功……都息息相关，是所有的付出让你成为了更优秀的自己。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在通往优秀和强大的路上，我们跑的太快。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以是风太大，吹散了我们的秀发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你看，掉的每一根头发都证明着你我在为梦想和生活而努力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原来&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只有光头才能让我变强&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;既然如此&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再见了、头发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;————&lt;em&gt; END &lt;/em&gt;————&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;转载声明&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文属公众号：了不起的程序员原创作品&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;授权转载请联系客服微信（great0445）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;承蒙厚爱，请多关照&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;创      意 ｜ 小小&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;编      辑 ｜ 小小&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;插画设计｜&lt;/span&gt;&lt;span&gt; 佳祺&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;256&quot; data-ratio=&quot;0.4421875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/DjFlqkxAXu4vJHnl2qFx2gLsRLceT0mNt92o0dpzhIt0bagXJwCQG1MXRW1fwZqR2nBPKtcLsjiapkf66pk3oog/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;记得点「&lt;strong&gt;赞&lt;/strong&gt;」和「&lt;strong&gt;在看&lt;/strong&gt;」↓&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;爱你们&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4e85ce03f6e05229e274a4d2ac2dcfd5</guid>
<title>肝了 3 版才满意：分布式系统之 CAP 理论，我们对它的理解和误解</title>
<link>https://toutiao.io/k/q2fkii4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;引言&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAP 理论，相信很多人都听过，它是指：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么要理解 CAP 理论？我能说出很多理由来。如果是在职场上，也许最合适的理由是，当领导给出的任务不靠谱时，我们可以依据 CAP 去否决它。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，有这么一个任务，给你定了三大目标：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;既要提升系统的可用性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;又要保证数据的实时可见&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;还有提升系统的容错能力&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到“既要、又要、还要”，是不是想到了阿里……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OK，如果你深刻理解了 CAP，你会发现完成这个任务是不可能的。但是，如果你不理解 CAP，然后又拍了胸脯保证完成任务，不好意思，职场是不需要眼泪和后悔的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有点跑题了，书归正传。CAP 理论是分布式设计中最基础最重要的理论，不懂它，你可能连分析一套分布式系统的核心设计理念都做不到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于 CAP 为何你读了那么多文章都还是搞不明白呢？因为 CAP 理论来自学术界，而解读 CAP 理论的人尝试用工程师的方式去阐述它，这本身就有了问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAP 本身基于状态，基于瞬态，是一个描述性的理论，它并不解决工程问题。但是，很多工程师却总是尝试为 CAP 做过多解读。比如，非要说 CAP 理论只能适合某某场景，非要说 CAP 理论里的一致性是非常强的一致性，把其和事务的一致性混为一谈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 CAP 是学术理论，并不是工程理论，它会舍弃很多现实世界的问题。比如网络的时长，比如节点内部的处理速度不一致，比如节点间存储方式和速度的不一致。它说的一致性就是客户端是否能拿到最新数据，它说的可用性就是允许客户端拿不到最新数据。而这些东西被工程师们的过多脑补，导致了文章和文章说法不一样，解析不一样，阐述背景不一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在今天这篇文章中，我们只解释和说明，不脑补，不过多从工程角度解读，只说本质，只指核心，希望能真正说清楚、讲明白 CAP 理论。望本文能达到这个目的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来你看到文字，我前前后后写了 10 天，已经是这篇文章的第三版了，前两版写了一半都被我推翻重写了，因为我自己看了不满意。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一方面是对自己知识掌握程度不满意，本以为自己明白 CAP 了，直到写的时候，发现有些还是拿不准。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一方面是不满意自己的写的太晦涩、太教科书，能把知识讲的通俗易懂，才是我希望的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给大家看看文章上辈子的模样。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7de13Ay4VwjTWZWElOjvicFk1OVBgoX80dweibXdkf04QbQ7oQ2KicVjyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.2532188841201717&quot; data-w=&quot;466&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. CAP 的由来&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要理解 CAP，首先我们要清楚，为何会有人提出 CAP？提出 CAP 是为了解决什么问题？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;时间回到 1985 年，彼时，后来证明了 CAP 理论的 Lynch 教授此时给当时的 IT 界来了一记惊雷：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;她通过不可辩驳的证明告诉业界的工程师们，如果在一个不稳定（消息要么乱序要么丢了）的网络环境里（分布式异步模型），想始终保持数据一致是不可能的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是个什么概念呢？就是她打破了那些既想提供超高质量服务，又想提供超高性能服务的技术人员的幻想。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这本质是在告诉大家，在分布式系统里，需要妥协。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，如何妥协？分布式系统里到底应该怎么权衡这种 trade-off？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以想象一下，在 CAP 定理提出之前，没有这些方向性的指引，在设计和实施分布式系统时该有多么混乱。一套分布式系统是由多个模块组成的，这些模块本身可能由不同的开发人员去完成。然而，对于这些人，在公共层面，竟然没有一个原则去指导他们该怎么完成这套功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我们在同步两个节点的数据时，如果发生了错误，到底我们应该怎么做呢？如果没有统一的标准和方向，那很可能在一套分布式系统中的不同模块，会出现不同的处理情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设一套系统，由 A、B 两个模块构成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;A 模块的设计理念是：节点间出现了问题，它可能会选择不断的重试，一直等到节点通信恢复。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7Sz5tMgqjRByonTWZ733mtfvC9vvgHcKIZpyKhQ88iaoLvFJiboXfDzxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.4981481481481482&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 B 的设计理念是：节点间出现了问题，它断开就是了，可能最多就记录下状态，等以后处理。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7UBt01HgagILpplvO14XezPuYrfeicA5f1FTvyaXjDEBa4iaIrw84o15g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5212962962962963&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可是，当 A、B 之间出现了通信怎么办？那会出现 A 往 B 发请求，出问题会不断重试。而 B 往 A 发请求，出问题则直接断开的情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，在后面我们会说明，CAP 的理念在实际工程中，会允许这种不一致。可是，那种不一致是提前设计好和规划好的，是根据实际数据的重要性和业务需求做的妥协，而不是这种混乱的妥协。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，IT 界的人们就一直在摸索，试图找到一些纲领去指导分布式系统的设计，这一找就找了 15 年。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2000 年时，Eric Brewer 教授在 PODC 会议上提出了 CAP 理论，但是由于没有被证明过，所以，当时只能被称为 CAP 猜想。这个猜想引起了巨大的反响，因为 CAP 很符合人们对设计纲领的预期。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 2002 年后，经过 Seth Gilbert 和 Nancy Lynch 从理论上证明了 CAP 猜想后，CAP 理论正式成为了分布式系统理论的基石之一。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. CAP 到底是什么&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAP 定理表达了一个分布式系统里不可能同时满足以下的三个特性：&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1. C：数据一致性&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么是数据一致性？咋一看真的很让人糊涂，一致性是什么？是指数据能一起变化，是能让数据整齐划一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么问题又来了，数据何时会变化？数据怎么才能被称为一起变化？我们现在来回答这些问题，当我们搞清楚了这些问题，那么对数据一致性就会有了清晰的理解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先第一个问题，数据何时会一起变化？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是：仅且仅当包含数据的服务，收到数据更新请求的时候，数据才会发生变化。而数据更新请求则仅包括数据的增、删、改这三种请求，而这三种请求又被统称为写请求。所以，数据只有在写请求的时候才会发生变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们来回答第二个问题，数据要怎么样才能被称为一起变化了？即谁来判断数据是最终变化了？是服务器对写请求的返回结果吗？告诉写请求成功，数据就一定发生一致性变化了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;NO，数据发生变化是否一致是需要经过读请求来做检验的。那么读请求判断的依据是什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设，我们的分布式存储系统有两个节点，每个节点都包含了一部分需要被变化的数据。如果经过一次写请求后，两个节点都发生了数据变化。然后，读请求把这些变化后的数据都读取到了，我们就把这次数据修改称为数据发生了一致性变化。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7bUxeZKcABQ6lDc9oW7jpQ0aWRmQRb8ffTG6M8wBE5oHAeoGLEQicGJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.937037037037037&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，这还不是完整的一致性。因为系统不可能永久的正常运行下去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果系统内部发生了问题从而导致系统的节点无法发生一致性变化会怎么样呢？当我们这样做的时候，就意味着想看到最新数据的读请求们，很可能会看到旧数据，或者说获取到不同版本的数据。此时，为了保证分布式系统对外的数据一致性，于是选择不返回任何数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub75ichYvUC3DoHYNWg3O6121kumKUY2iayP6AhYeIPw0qOStQMwxBhfokA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.6111111111111112&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里需要注意一下，CAP 定理是在说在某种状态下的选择，和实际工程的理论是有差别的。上面描述的一致性和 ACID 事务中的一致性是两回事。事务中的一致性包含了实际工程对状态的后续处理。但是 CAP 定理并不涉及到状态的后续处理，对于这些问题，后续出现了 BASE 理论等工程结论去处理，目前，只需要明白 CAP 定理主要描述的是状态。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2. A：可用性&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;奥维德曾经说过：“行动被人们遗忘，结果却将永存”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这句话说明了结果的重要性，而可用性在 CAP 里就是对结果的要求。它要求系统内的节点们接收到了无论是写请求还是读请求，都要能处理并给回响应结果。只是它有两点必须满足的条件：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;条件 1：返回结果必须在合理的时间以内，这个合理的时间是根据业务来定的。业务说必须 100 毫秒内返回，合理的时间就是 100 毫秒，需要 1 秒内返回，那就是 1 秒，如果业务定的 100 毫秒，结果却在 1 秒才返回，那么这个系统就不满足可用性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;条件 2：需要系统内能正常接收请求的所有节点都返回结果。这包含了两重含义：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果节点不能正常接收请求了，比如宕机了，系统崩溃了，而其他节点依然能正常接收请求，那么，我们说系统依然是可用的，也就是说，部分宕机没事儿，不影响可用性指标。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果节点能正常接收请求，但是发现节点内部数据有问题，那么也必须返回结果，哪怕返回的结果是有问题的。比如，系统有两个节点，其中有一个节点数据是三天前的，另一个节点是两分钟前的，如果，一个读请求跑到了包含了三天前数据的那个节点上，抱歉，这个节点不能拒绝，必须返回这个三天前的数据，即使它可能不太合理。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7r3q9LjBCW9uLCrIeUtaRjxGjYib0k1VkReHGelUXRVBpmkkb3XqfialQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.1111111111111112&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.3. P：分区容忍性&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式的存储系统会有很多的节点，这些节点都是通过网络进行通信。而网络是不可靠的，当节点和节点之间的通信出现了问题，此时，就称当前的分布式存储系统出现了分区。但是，值得一提的是，分区并不一定是由网络故障引起的，也可能是因为机器故障。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我们的分布式存储系统有 A、B 两个节点。那么，当 A、B 之间由于可能路由器、交换机等底层网络设备出现了故障，A 和 B 通信出现了问题，但是 A、B 依然都在运行，都在对外提供服务。这时候，就说 A 和 B 发生了分区。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一种情况也会发生分区，当 A 出现了宕机，A 和 B 节点之间通信也是出现了问题，那么我们也称 A 和 B 发生了分区。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上，我们可以知道，只要在分布式系统中，节点通信出现了问题，那么就出现了分区。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub77AgVQ9MCqdibbNvp8cbfJhrd7kLJqCYXWNPUwIO7aIdr32b5M8iaVfAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.825925925925926&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，分区容忍性是指什么？它是说，如果出现了分区问题，我们的分布式存储系统还需要继续运行。不能因为出现了分区问题，整个分布式节点全部就熄火了，罢工了，不做事情了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7qoWQEM741EUG5J0n7Nwkoo2SKglgDAd3seFM7LlsMgkQafGTk9GPzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.8898148148148148&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. CAP 怎么选择&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们上面已经知道了，在设计分布式系统时，架构师们在 C、A、P 这三种特性里，只能选择两种。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，这道 CAP 的选择题，就像别人在问你“小明的父亲有三个孩子，老大叫大朗，老二叫二郎，请问老三叫什么”一样。在以分布式存系统为限定条件的 CAP 世界里，P 是早已经确定的答案，P 是必须的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为，在分布式系统内，P 是必然的发生的，不选 P，一旦发生分区错误，整个分布式系统就完全无法使用了，这是不符合实际需要的。所以，对于分布式系统，我们只能能考虑当发生分区错误时，如何选择一致性和可用性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而根据一致性和可用性的选择不同，开源的分布式系统往往又被分为 CP 系统和 AP 系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一套系统在发生分区故障后，客户端的任何请求都被卡死或者超时，但是，系统的每个节点总是会返回一致的数据，则这套系统就是 CP 系统，经典的比如 Zookeeper。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一套系统发生分区故障后，客户端依然可以访问系统，但是获取的数据有的是新的数据，有的还是老数据，那么这套系统就是 AP 系统，经典的比如 Eureka。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说了这么多，其实 CAP 定理本质很简单，它就是一种分布式系统设计的不同理念概括，包括它说的一致性，可用性和分区容错性。这就类似一个大学的校训，是极度概念化的东西。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，大白话来形容下 CAP 吧，CAP 就是告诉程序员们当分布式系统出现内部问题了，你要做两种选择：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;要么迁就外部服务，像外包公司。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要么让外部服务迁就你，像银行。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;迁就外部服务就是我们不能因为我们自己的问题让外部服务的业务运行受到影响，所以要优先可用性。而让外部服务迁就我们，就要优先一致性。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. 对 CAP 的常见误解&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;误解一：分布式系统因为 CAP 定理放弃了 C 或者 A 中的其中一个&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多人在没有对 CAP 做深入了解的情况下，听到很多人说分布式系统必须在 CAP 三个特性里选择两个，就觉得一套分布式系统肯定要么只有可用性要么只有一致性，不存在完整的可用性和一致性功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种理解是大有问题的。因为，P 这种问题发生的概率非常低，所以：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;当没有出现分区问题的时候，系统就应该有完美的数据一致性和可用性。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你什么时候见过一个系统，当内部没有问题的时候，会经常让外部请求卡一下的？要么就冷不丁的提供陈旧的老数据？那还能叫系统吗？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;误解二：C 和 A 之间的选择是针对整个分布式系统的，只能整体考虑 C 和 A 之间的选择&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个理解也是不对的。当分区发生的时候，其实对一致性和可用性的抉择是局部性的，而不是针对整个系统的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能是在一些子系统做一些抉择，甚至很可能只需要对某个事件或者数据，做一致性和可用性的抉择而已。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，当我们做一套支付系统的时候，会员的财务相关像账户余额，账务流水是必须强一致性的。这时候，你就要考虑选 C。但是，会员的名字，会员的支付设置就不必考虑强一致性，可以选择可用性 A。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一套分布式系统的运行，就像人生一样，就是一次又一次的选择。在不同阶段，不同的时刻有不同的事件发生的时候，又怎么可能会有完全一样的选择呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;误解三：CAP 的三个特性只有是和否两种极端选择，而不是一个范围&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种二元性的理解更是极其误导人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAP 理论的三种特性不是 Boolean 类型的，不是一致和不一致，可用和不可用，分区和没分区的这类二选一的选项。而是这三种特性都是范围类型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拿可用性来说，就像我从银行取钱。当我目的是派发压岁钱的时候，我很可能就想全要新票子，但是，新票子很可能就还得多一个步骤，就是需要拿旧票子去换一些新票，此时，我可以多等会儿，能拿到新票子就好。而当我的目的就是做生活花销的时候，票子是新是旧，我根本不那么关心，快点拿到钱就行。这就是可用性的范围需求之一，对时延性的要求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再比如，分区容错则由于探测机制的问题，可能还得各节点搞投票去协商分区是否存在，当某一台机器出现了问题，可能不影响业务的话，就会被机器投票认为分区不存在。然后一直等到多数机器出现了问题，才会投票确认出现了分区问题。这就好像新冠疫情，还会分低、中、高风险区呢，不是一出现通信故障就都被逻辑认定为分区问题。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. CAP 理论的一些疑问&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;疑问一：在遵从 CAP 定理的系统中是否适合任意的写请求&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，在 CAP 定理中，关于一致性会有多种说法，但是总的来说，都是在描述数据最新版本的可见性。而这些可见性往往代表的是读请求返回的数据的可见性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么问题来了，当我们要求读数据的可见性的时候，对写数据有什么要求吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我们系统有三个节点，一个客户端给这个系统发了一个写请求，要求系统写入一个值为 20 的数据。那么，如果要满足 CAP 定理中的一致性，就需要在写完 20 这个数据之后，当其他客户端请求读取这个值为 20 的数据之后，无论请求被转发到系统中任何节点都能返回这个值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就要求写入这个值为 20 的写请求必须成功写到三个节点上，此时，系统就满足了写一致性的。所以，我们可以说对于读一致性的要求是同时约束了写一致性的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7vMa6aI6nPmmDuLtSVpvfJmJHqAWU7tOAbibYsn9oia9Z8lUJOtl5K17w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5324074074074074&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次，在 CAP 定理中，可用性本身要求对读、写请求都要处理。如果我们以可用性作为标准的时候，在发生分区错误时，由于我们对读请求并没有强行要求返回完全准确的数据，所以，可能在本次读请求之前的最近一次写请求可能是部分失败的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样的例子，我们的分布式系统由三个节点组成，最近一次写请求想把值为 20 的数据写到三个节点上。但是，由于发生了分区问题，有一个节点通信故障，写请求写不过去，因此只有两个节点包含了值为 20 的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，写请求会返回给客户端一个结果，可能会告诉客户端写入成功了，也可能告诉客户端写入部分成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候，当后续的读请求恰巧被发送到有通信故障的那个节点，系统可能只能返回一个空的结果。但是，由于系统处理和返回了读写请求，所以，系统是满足了 CAP 中的可用性的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7IJRh1WQyaTgz3mHpBjxumrEVdtzXfOia0sj3iagzL9E4K7mYMwTgV5rg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5287037037037037&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;疑问二：数据分片和数据副本的分布式系统是否都遵守 CAP 定理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道，在一套大规模的分布式系统里，一定是既需要把海量数据做切分，存储到不同的机器上，也需要对这些存储了数据的机器做副本备份的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，如果，一个分布式系统里只有数据分片存储或者只有数据副本存储，他们都会遵守 CAP 定理吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是当数据分片时，也是要遵守 CAP 定理，但是，是种非常特殊的遵守。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当在一套分布式系统只有分片存储的时候，CAP 理论会表现成什么样？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我们有个分布式系统，由三个节点 a、b、c 组成。其中节点 a 存放了 A 表的数据，b 存放了 B 表的数据，c 存放了 C 表的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有一个业务，它的意图是想往 A 表插入一条新数据，在 B 表删除一条已有数据，在 C 表更新一条老数据，这个分布式系统该怎么处理这种业务？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;技术上我们对这种一个意图想做多件事的情况往往会包装成一个事务。当我们包装成一个事务以后，我们可能会通过先在 a 节点执行，然后去 b 节点执行，最后去 c 节点执行，等到都成功了，才会返回成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，发生了分区以后怎么办？当在 a、b 节点都成功了，到 c 发现发生了通信故障？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，根据 CAP 定理，你有两个选择，要么就直接返回一个部分成功的结果给客户端，要么直接卡死等客户端超时或者返回失败给客户端。当返回部分成功的时候，这就是选择了可用性（A），当卡死或者返回失败给客户端的时候，就是选择了一致性（C）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可是，我们将请求包装成了事务，而事务是要求要么都成功，要么都失败……为了遵守这种要求，对于分布式只有分片的情况，迫于客观条件，只能选择C。所以分片的分布式系统，往往都是 CP 的系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可选择，但是无法选择是分布式系统只有分片数据存储的情况时，遵守 CAP 定理的特殊表现。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7B5JxhWjDyjGsOg9IlaggZfOxDl1F2ZqeibQ5mvic40wfvlcJ0qvRibblQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.7537037037037037&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而当分布式系统是多个节点，每个节点存储了完整的一套数据，别的节点只是完整数据的备份的时候，即使事务只在一台机器上成功，当发生分区故障的时候，我们也是可以有充分的余地选择是&lt;strong&gt;单机事务的回退&lt;/strong&gt; or &lt;strong&gt;就此认为写成功的&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单机事务的回退，就可以对外表现为选择了一致性。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7R0picGFzgA5TyCma6vKmf5gsibib4BNRBiafIFtIMA2OfeUm8ThCOQ03Cg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5203703703703704&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就此认为写成功，则可以认为选择了可用性。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KROCIibUicVOEQz7WDQAI5Ub7fya5icVnbWbJbEzicEnx0glIDBe6IGmUcb66xUHnelVLhSnudUlJxauw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5018518518518519&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;疑问三：为何有时候区分一个系统是 AP 还是 CP 是如此之难&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为，就像我们前面讲过的，由于 AP 或者 CP 的选择，可能仅局限为整套系统的局部，甚至某些特殊的数据上，而我们又是用这种局部的特性去描述了整套系统，所以就导致了区分的困难。而这本身其实也日渐成为了 CAP 的一个大问题，从而被人诟病。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6. CAP 的不足&lt;/span&gt;&lt;/h1&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;CAP 定理本身是没有考虑网络延迟的问题的，它认为一致性是立即生效的，但是，要保持一致性，是需要时间成本的，这就导致往往分布式系统多选择 AP 方式&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;由于时代的演变，CAP 定理在针对所有分布式系统的时候，出现了一些力不从心的情况，导致很多时候它自己会把以前很严谨的数学定义改成了比较松弛的业务定义，类似于我们看到，CAP 定理把一致性、可用性、分区容错都变成了一个范围属性，而这和 CAP 定理本身这种数学定理般的称呼是有冲突的，出现了不符合数学严谨定义的问题。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;在实践中以及后来 CAP 定理的提出者也承认，一致性和可用性并不仅仅是二选一的问题，只是一些重要性的区别，当强调一致性的时候，并不表示可用性是完全不可用的状态。比如，Zookeeper 只是在 master 出现问题的时候，才可能出现几十秒的不可用状态，而别的时候，都会以各种方式保证系统的可用性。而强调可用性的时候，也往往会采用一些技术手段，去保证数据最终是一致的。CAP 定理并没有给出这些情况的具体描述。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;CAP 理论从工程角度来看只是一种状态的描述，它告诉大家当有错的时候，分布式系统可能处在什么状态。但是，状态是可能变化的。状态间如何转换，如何修补，如何恢复是没有提供方向的。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7. 引申出来的 BASE&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正因为 CAP 以上的种种不足，epay 的架构师 Dan Pritchett 根据他自身在大规模分布式系统的实践经验，总结出了 BASE 理论。BASE 理论是对 CAP 理论的延伸，核心思想是即使无法做到强一致性（Strong Consistency），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BASE 理论是实践工程的理论，它弥补了CAP 理论过于抽象的问题，也同时解决了 AP 系统的总体工程实践思想，是分布式系统的核心理论之一，我们将在下一篇文章里，详细的讲解此套理论。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8. 大厂面试题&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在文章最后，来几道大厂关于 CAP 的面试真题，检验一下你的学习效果，hiahiahia&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;什么是 CAP 理论？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;CAP 中的 P 是什么意思？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;为什么说分布式系统，只能在 C、A 中二选一？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;结合实际应用，CP、AP 该怎么选择？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;微信公众号改变了推送规则，&lt;span&gt;为了能正常看到文章，欢迎大家看完文章后，时常可以点点文末右下角的在看。&lt;/span&gt;&lt;span&gt;也可以把“四猿外”公众号加上星标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7068645640074211&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KTvmrffCdjtDe9IhiaiazkHSNbiakNHZfwfUkaYxUkn52dVFyfFewEHXbIs4bRU4b0HkqZbicN7hGtT1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;539&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我最近建了一个读者交流群，里面大部分是程序员，一起聊技术、工作、八卦。欢迎加我微信，拉你入群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9852216748768473&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/6nbNnibOq5KQibCDibpTo0kqofPehQvDDibibcb3bQUELdY3Knsl4r0RcgsV9l4icr3icmZQfaBXtSFNTxmdQlAZT1OQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;609&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;智能人工推荐&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484883&amp;amp;idx=1&amp;amp;sn=ae8c6aced4797e859fd2c224a11fea75&amp;amp;chksm=fcd8c992cbaf40848d237c4e499ec1ba7eff9fe5c3e9863af3a91e47782b5285b1673523e9cc&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;架构师的成长之路，第一步该怎么迈？我给大家准备好了&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484862&amp;amp;idx=1&amp;amp;sn=be1f32643415f605da7080f791ed64f9&amp;amp;chksm=fcd8c9ffcbaf40e936ac5aedde29c3b259026a2b2945ea195613087caab036df144f7c2d8937&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;优秀！一鼓作气学会“一致性哈希”，就靠这 18 张图了&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484826&amp;amp;idx=1&amp;amp;sn=35378fc344195edc643c5a68f896bc40&amp;amp;chksm=fcd8c9dbcbaf40cdcad84dd15b972afed8cf477f584748167ee67dc3a2a3532474497aa4d6c1&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一个技术总监的忠告：精通那么多技术，你为何还是受不到重用？&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>