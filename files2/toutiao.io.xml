<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>de4e52a1ed88eb2d79ac53fd3ad0b090</guid>
<title>JavaScript for 循环、in、of 用法详解：有效云开发平台开发技巧</title>
<link>https://toutiao.io/k/jrdwcu5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;pre&gt;&lt;code&gt;我们知道在java script中 for 用来实现循环结构，而for...in 用来实现遍历，for...of用来对象迭代遍历。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;1、for循环&lt;/h2&gt;

&lt;p&gt;与其他开发语言相同，JS中for用来实现循环结构之一，&lt;/p&gt;

&lt;h3&gt;1.1、基本语法：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;for ([initialization]; [condition]; [final-expression]) {
  statement
}

1.2、实例：

for(let i=1;i&amp;lt;=10;i++){
    console.log(&quot;i=&quot;,i);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;1.3、break关键词&lt;/h3&gt;

&lt;p&gt;break关键词用户终止循环&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(let i=1;i&amp;lt;=10;i++){
    if(i&amp;gt;5) 
        break;

    console.log(&quot;i=&quot;,i);
}

循环到第5次终止循环。

执行结果：

i=1
i=2
i=3
i=4
i=5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;1.4、conitue关键词&lt;/h3&gt;

&lt;p&gt;continue关键词用户跳过本次循环，继续下一次&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
for(let i=1;i&amp;lt;=10;i++){

    if(i % 2 === 0 ) continue;

    console.log(&quot;i=&quot;,i);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果i是偶数跳过，执行下一次循环，输出i为奇数&lt;/p&gt;

&lt;p&gt;i=1
i=3
i=5
i=7
i=9&lt;/p&gt;

&lt;p&gt;for循环是js中基础的循环结构，适用于任何情况，而for...in和for...of则更适合于不同的应用场景。
JavaScript for循环、in、of 用法详解——有效云开发平台开发技巧&lt;/p&gt;

&lt;h2&gt;2、for...in&lt;/h2&gt;

&lt;p&gt;for...in循环遍历对象的所有可枚举属性。什么是可枚举呢？你可以理解为可枚举就是可表现为键值对的对象，for...in枚举得到的是键值对的键值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;objs={mp_v:&quot;可视化&quot;,mp_a:&quot;低代码&quot;,mp_name:&quot;有效云&quot;};
for(let objk in objs){
        console.log(&quot;key：&quot;,objk,&quot;值：&quot;,objs[objk]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//执行结果：
key： mp_v 值： 可视化
key： mp_a 值： 低代码
key： mp_name 值： 有效云&lt;/p&gt;

&lt;p&gt;从上例中可以看到，for...in 循环枚举得到了键值对 key-value中的key属性值，检索适用键值对的值，将键视为数组中的索引并将其放在方括号 -&amp;gt;objs[key]中，如上面代码中的：objs[objk]。&lt;/p&gt;

&lt;p&gt;注意：一维数组也可以理解为键值对，key即为数组的索引，但是for...in枚举是无序的，无法保证枚举得到的顺序，所以不建议使用for...in用来枚举数组，应该使用for，for...of 或for each 来遍历数组。
JavaScript for循环、in、of 用法详解——有效云开发平台开发技巧&lt;/p&gt;

&lt;p&gt;3、for..of&lt;/p&gt;

&lt;p&gt;ES6引入for...of之后，它已经成为广大开发者们常用以迭代枚举对象的方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pmname=&quot;有效云开发平台&quot;
for(letter of pmname){
        console.log(letter);
}
//执行结果：
有
效
云
开
发
平
台
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上例使用for...of枚举了字符串中的每个字符，我们注意到，for...of是有序的，这与for...in不同。&lt;/p&gt;

&lt;p&gt;for...of可以用来迭代枚举任何，除字符串外还可以是数组、对象等。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const arrA = [1,2,3,4,5,6];
for( let v of arrA ){
        console.log(v);
}
//执行结果：
1
2
3
4
5
6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面代码使用 for...of 遍历了数组arrA，接下来使用for..of迭代对象。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;objs={mp_v:&quot;可视化&quot;,mp_a:&quot;低代码&quot;,mp_name:&quot;有效云&quot;};

for(const [k,v] of Object.entries(objs)){
        console.log(&quot;key：&quot;,k,&quot;val：&quot;,v);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//    key： mp_v val： 可视化
//    key： mp_a val： 低代码
//    key： mp_name val： 有效云&lt;/p&gt;

&lt;p&gt;通过这个示例，我们看到在遍历对象时，通过[v,k]，同时获得键值对的键和值。&lt;/p&gt;

&lt;p&gt;感谢阅读。&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>722cba5ca4852ba7a082f0ac33e9f122</guid>
<title>CompletableFuture 真香，可以替代 CountDownLatch</title>
<link>https://toutiao.io/k/j0uuaz1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;174&quot; data-backw=&quot;365&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4767123287671233&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/cvQbJDZsKLp6wejHtKTRbqqQyt0wMk9K1wNtuwRqQTJAPOJ1KiaqSeSRbIJRTicVicKpDKRndBodY2DBNN20tvWwA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;365&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原创：小姐姐味道（微信公众号ID：xjjdog），欢迎分享，转载请保留出处。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在对&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650524593&amp;amp;idx=1&amp;amp;sn=99d335849dc1fc92f65dc618106aa844&amp;amp;chksm=8780cc75b0f745637ee03a63d7ea640ad1d4638478e8af5d811e92e985b1509219957408ec27&amp;amp;token=1556116051&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;类的命名这篇长文&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;类的命名这篇长文&lt;/a&gt;中，我们提到了&lt;code&gt;Future&lt;/code&gt;和&lt;code&gt;Promise&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Future相当于一个占位符，代表一个操作将来的结果。一般通过get可以直接阻塞得到结果，或者让它异步执行然后通过callback回调结果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果回调中嵌入了回调呢？如果层次很深，就是回调地狱。Java中的CompletableFuture其实就是Promise，用来解决回调地狱问题。Promise是为了让代码变得优美而存在的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有多优美？这么说吧，一旦你使用了CompletableFuture，就会爱不释手，就像初恋女友一样，天天想着她。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;一系列静态方法&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从它的源代码中，我们可以看到，CompletableFuture直接提供了几个便捷的静态方法入口。其中有&lt;code&gt;run&lt;/code&gt;和&lt;code&gt;supply&lt;/code&gt;两组。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5076923076923077&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLpsgAkLzXYicDoxwahBdiaaHM0ZpSk3Zk1GHA3tib55XlXYOibBiatlVcDPYLFoKDlF9JdqB4icJoOyC5rw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;715&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;run的参数是Runnable，而supply的参数是Supplier。前者没有返回值，而后者有，否则没有什么两样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两组静态函数，都提供了传入自定义线程池的功能。如果你用的不是外置的线程池，那么它就会使用默认的ForkJoin线程池。默认的线程池，大小和用途你是控制不了的，所以还是建议自己传递一个。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;典型的代码，写起来是这个样子。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;CompletableFuture&amp;lt;String&amp;gt; future = CompletableFuture.supplyAsync(()-&amp;gt;{&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;test&quot;&lt;/span&gt;;&lt;br/&gt;});&lt;br/&gt;String result = future.join();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拿到CompletableFuture后，你就可以做更多的花样。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;这些花样有很多&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们说面说了，CompletableFuture的主要作用，就是让代码写起来好看。配合Java8之后的stream流，可以把整个计算过程抽象成一个流。前面任务的计算结果，可以直接作为后面任务的输入，就像是管道一样。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;thenApply&lt;br/&gt;thenApplyAsync&lt;br/&gt;thenAccept&lt;br/&gt;thenAcceptAsync&lt;br/&gt;thenRun&lt;br/&gt;thenRunAsync&lt;br/&gt;thenCombine&lt;br/&gt;thenCombineAsync&lt;br/&gt;thenCompose&lt;br/&gt;thenComposeAsync&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/cvQbJDZsKLpsgAkLzXYicDoxwahBdiaaHMgyic5p2HKkqgYWM38ibBX9nmaQ3viakEpTzwXF1XpG0c13SBLuvTnLkbg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;326&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，下面代码的执行结果是99，并不因为是异步就打乱代码执行的顺序了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;CompletableFuture&amp;lt;Integer&amp;gt; cf = CompletableFuture.supplyAsync(() -&amp;gt; &lt;span&gt;10&lt;/span&gt;)&lt;br/&gt;                .thenApplyAsync((e) -&amp;gt; {&lt;br/&gt;                    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                        Thread.sleep(&lt;span&gt;10000&lt;/span&gt;);&lt;br/&gt;                    } &lt;span&gt;catch&lt;/span&gt; (InterruptedException ex) {&lt;br/&gt;                        ex.printStackTrace();&lt;br/&gt;                    }&lt;br/&gt;                    &lt;span&gt;return&lt;/span&gt; e * &lt;span&gt;10&lt;/span&gt;;&lt;br/&gt;                }).thenApplyAsync(e -&amp;gt; e - &lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;cf.join();&lt;br/&gt;System.out.println(cf.get());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样的，函数的作用还要看then后面的动词。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;apply 有入参和返回值，入参为前置任务的输出&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;accept 有入参无返回值，会返回CompletableFuture&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;run 没有入参也没有返回值，同样会返回CompletableFuture&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;combine 形成一个复合的结构，连接两个CompletableFuture，并将它们的2个输出结果，作为combine的输入&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;compose 将嵌套的CompletableFuture平铺开，用来串联两个CompletableFuture&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;when和handle&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的函数列表，其实还有很多。比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;whenComplete&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;when的意思，就是任务完成时候的回调。比如我们上面的例子，打算在完成任务后，输出一个&lt;code&gt;done&lt;/code&gt;。它也是属于只有入参没有出参的范畴，适合放在最后一步进行观测。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;CompletableFuture&amp;lt;Integer&amp;gt; cf = CompletableFuture.supplyAsync(() -&amp;gt; &lt;span&gt;10&lt;/span&gt;)&lt;br/&gt;                .thenApplyAsync((e) -&amp;gt; {&lt;br/&gt;                    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                        Thread.sleep(&lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;                    } &lt;span&gt;catch&lt;/span&gt; (InterruptedException ex) {&lt;br/&gt;                        ex.printStackTrace();&lt;br/&gt;                    }&lt;br/&gt;                    &lt;span&gt;return&lt;/span&gt; e * &lt;span&gt;10&lt;/span&gt;;&lt;br/&gt;                }).thenApplyAsync(e -&amp;gt; e - &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;                .whenComplete((r, e)-&amp;gt;{&lt;br/&gt;                    System.out.println(&lt;span&gt;&quot;done&quot;&lt;/span&gt;);&lt;br/&gt;                })&lt;br/&gt;                ;&lt;br/&gt;&lt;br/&gt;cf.join();&lt;br/&gt;System.out.println(cf.get());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;handle和exceptionally的作用，和whenComplete是非常像的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; CompletableFuture&amp;lt;T&amp;gt; &lt;span&gt;exceptionally&lt;/span&gt;&lt;span&gt;(Function&amp;lt;Throwable, ? extends T&amp;gt; fn)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span&gt;CompletionStage&amp;lt;U&amp;gt; &lt;span&gt;handle&lt;/span&gt;&lt;span&gt;(BiFunction&amp;lt;? &lt;span&gt;super&lt;/span&gt; T, Throwable, ? extends U&amp;gt; fn)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CompletableFuture的任务是串联的，如果它的其中某一步骤发生了异常，会影响后续代码的运行的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;exceptionally从名字就可以看出，是专门处理这种情况的。比如，我们强制某个步骤除以0，发生异常，捕获后返回-1，它将能够继续运行。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;CompletableFuture&amp;lt;Integer&amp;gt; cf = CompletableFuture.supplyAsync(() -&amp;gt; &lt;span&gt;10&lt;/span&gt;)&lt;br/&gt;                .thenApplyAsync(e-&amp;gt;e/&lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;                .thenApplyAsync(e -&amp;gt; e - &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;                .exceptionally(ex-&amp;gt;{&lt;br/&gt;                    System.out.println(ex);&lt;br/&gt;                    &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;                });&lt;br/&gt;&lt;br/&gt;cf.join();&lt;br/&gt;System.out.println(cf.get());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;handle更加高级一些，因为它除了一个异常参数，还有一个正常的入参。处理方法也都类似，不再赘述。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，CompletableFuture的函数不仅仅这些，还有更多，根据函数名称很容易能够了解到它的作用。它还可以替换复杂的CountDownLatch，这要涉及到几个比较难搞的函数。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;替代CountDownLatch&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;考虑下面一个场景。某一个业务接口，需要处理几百个请求，请求之后再把这些结果给汇总起来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果顺序执行的话，假设每个接口耗时100ms，那么100个接口，耗时就需要10秒。假如我们并行去获取的话，那么效率就会提高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用CountDownLatch可以解决。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ExecutorService executor = Executors.newFixedThreadPool(&lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;CountDownLatch countDown = &lt;span&gt;new&lt;/span&gt; CountDownLatch(requests.size());&lt;br/&gt;&lt;span&gt;for&lt;/span&gt;(Request request:requests){&lt;br/&gt;    executor.execute(()-&amp;gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//some opts&lt;/span&gt;&lt;br/&gt;        }&lt;span&gt;finally&lt;/span&gt;{&lt;br/&gt;            countDown.countDown();&lt;br/&gt;        }&lt;br/&gt;    });&lt;br/&gt;}&lt;br/&gt;countDown.await(&lt;span&gt;200&lt;/span&gt;,TimeUnit.MILLISECONDS);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们使用CompletableFuture来替换它。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ExecutorService executor = Executors.newFixedThreadPool(&lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;List&amp;lt;CompletableFuture&amp;lt;Result&amp;gt;&amp;gt; futureList = requests&lt;br/&gt;    .stream()&lt;br/&gt;    .map(request-&amp;gt;&lt;br/&gt;        CompletableFuture.supplyAsync(e-&amp;gt;{&lt;br/&gt;            &lt;span&gt;//some opts&lt;/span&gt;&lt;br/&gt;        },executor))&lt;br/&gt;    .collect(Collectors.toList());&lt;br/&gt;&lt;br/&gt;CompletableFuture&amp;lt;Void&amp;gt; allCF = CompletableFuture.allOf(futureList.toArray(&lt;span&gt;new&lt;/span&gt; CompletableFuture[&lt;span&gt;0&lt;/span&gt;]));&lt;br/&gt;&lt;br/&gt;allCF.join();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们这里用到了一个主要的函数，那就是allOf，用来把所有的CompletableFuture组合在一起；类似的还有anyOf，表示只运行其中一个。常用的，还有三个函数：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;thenAcceptBoth 处理两个任务的情况，有两个任务结果入参，无返回值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;thenCombine  处理两个任务的情况，有入参有返回值，最喜欢&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;runAfterBoth 处理两个任务的情况，无入参，无返回值&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;End&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自从认识了CompletableFuture，我已经很少硬编码Future了。相对于各种回调的嵌套，CompletableFuture为我们提供了更直观、更优美的API。在“多个任务等待完成状态”这个应用场景，CompletableFuture已经成了我的首选。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;唯一的问题是，它的函数有点多，你需要熟悉一小段时间。另外，有一个小小的问题，个人觉得，这个类如果叫做&lt;code&gt;Promise&lt;/code&gt;的话，就能够和JS的统一起来，算是锦上添花吧。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;作者简介：小姐姐味道 (xjjdog)，一个不允许程序员走弯路的公众号。聚焦基础架构和Linux。十年架构，日百亿流量，与你探讨高并发世界，给你不一样的味道。我的个人微信xjjdog0，欢迎添加好友，进一步交流。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7a06bf0c3c339d3bc909552736be43ea</guid>
<title>使用 Rancher 部署 k8s 集群</title>
<link>https://toutiao.io/k/f9wmnb8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.66484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxibnNhV8hxKQagAAiacf9Yt5icQd3DqrpIeHLHmpz41dGTgVQLqUPibjXGQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;非常详细的长文，建议先收藏关注：&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU1Njk2NjkxNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSylGO1l57ytuOCLjSa4Ow7S80jEdADvlickRR9bfWrDGtf4Wia2p4WeSjbnr1vLn7Aib6iao7rRu4Ejmw/0?wx_fmt=png&quot; data-nickname=&quot;持续交付实践指南&quot; data-alias=&quot;&quot; data-signature=&quot;分享持续交付的实践经验、软件工程感悟&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h3&gt;概述&lt;/h3&gt;&lt;p&gt;随着容器的普及和Kubernetes 的日渐成熟，企业内部运行多个Kubernetes 集群已变得颇为常见，然而部署kubernetes集群的方式也多样化，二进制部署、rancher、kubeadm、minikube等。然而本篇文章主要讲解的是如何使用rancher快速部署一个k8s集群。Rancher是一个开源的企业级容器管理平台。通过Rancher，我们不必再使用一系列的开源软件去从头搭建容器服务平台。Rancher提供了在生产环境中使用的管理Docker和Kubernetes的全栈化容器部署与管理平台。&lt;/p&gt;&lt;h3&gt;主机整体规划&lt;/h3&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.3919354838709677&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzx0oIzWPpqhqbCzveeMRf8TneUPPRo5yiaqic8uZP1Gnzm5upDebQyK3yA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p/&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;span/&gt;&lt;/figcaption&gt;&lt;figcaption&gt;&lt;span&gt;一、docker容器安装&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p/&gt;&lt;p&gt;每台机器都需要安装。&lt;/p&gt;&lt;h3&gt;1、删除已存在的docker&lt;/h3&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yum remove docker \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                  docker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;client \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                  docker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;latest \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                  docker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;common \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                  docker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;latest \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                  docker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;latest&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;logrotate \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                  docker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;logrotate \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                  docker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;selinux \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                  docker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;engine&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;selinux \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                  docker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;engine&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;2、配置repo源和epel源&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;先备份原来的源&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;mv &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;yum&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;repos&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;CentOS&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;Base&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;repo &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;yum&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;repos&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;CentOS&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;Base&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;repo&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;backup&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;下载新的&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;CentOS&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;Base&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;repo &lt;/span&gt;&lt;span&gt;到&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;yum&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;repos&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;wget &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;O &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;yum&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;repos&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;CentOS&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;Base&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;repo https&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;//mirrors.aliyun.com/repo/Centos-7.repo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;或&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;curl &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;o &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;yum&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;repos&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;CentOS&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;Base&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;repo http&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;//mirrors.aliyun.com/repo/Centos-7.repo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;运行&lt;/span&gt;&lt;span&gt; yum makecache &lt;/span&gt;&lt;span&gt;生成缓存&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yum makecache&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;安装&lt;/span&gt;&lt;span&gt;epel&lt;/span&gt;&lt;span&gt;源&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yum &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;y install epel&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;release&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yum&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;&#x27;--showduplicates&#x27;&lt;/span&gt;&lt;span&gt;选项对于显示软件包的多个版本很有用。当您有非常特定的依赖项并尝试查找要安装的软件包的特定名称时，它将起着非常大的作用&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# yum list docker --show-duplicates&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;3、安装依赖&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yum &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;y install yum&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;utils device&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;persistent&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;data lvm2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;4、添加软件源信息&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yum&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;manager &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;repo http&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;5、更新并安装Docker-CE&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yum makecache fast&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yum list docker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ce &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;duplicates&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yum &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;y install docker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ce   &lt;/span&gt;&lt;span&gt;#这种方式是安装最新的docker-ce&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;6、安装指定版本的docker&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yum list docker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ce &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;duplicates&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yum &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;y install docker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;ce&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;19.03&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;3.el7&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;7、添加镜像加速&lt;/p&gt;&lt;p&gt;可参考文档：https://www.cnblogs.com/myitnews/p/11509546.html&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;mkdir &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;docker&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;cat &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;docker&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;daemon&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;json &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; EOF&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&quot;registry-mirrors&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&quot;https://i******.mirror.aliyuncs.com&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;//这里请添加自己的阿里云镜像加速&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;8、启动docker&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 添加开启启动&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;systemctl enable docker&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 更新xfsprogs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;yum &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;y update xfsprogs   &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 启动&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;systemctl start docker&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;docker info&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 测试docker是否已经能够正常使用&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# 启动第一个容器&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;docker run hello&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;world&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;二、启动rancher&lt;/h2&gt;&lt;p&gt;1、启动rancher&lt;/p&gt;&lt;p&gt;在rancher那台机器上运行：&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# docker run -d --restart=unless-stopped --name rancher -p 80:80 -p 443:443 rancher/rancher:stable&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;2、查看日志&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# docker logs -f rancher&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;ERROR&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Rancher&lt;/span&gt;&lt;span&gt; must be ran &lt;/span&gt;&lt;span&gt;with&lt;/span&gt;&lt;span&gt; the &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;privileged flag &lt;/span&gt;&lt;span&gt;when&lt;/span&gt;&lt;span&gt; running outside o&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;启动时需要添加 --privileged 参数&lt;/p&gt;&lt;p&gt;3、再次启动&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# docker run -d --restart=unless-stopped --privileged --name rancher -p 80:80 -p 443:443 rancher/rancher:stable&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;4、查看日志&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# docker logs -f rancher&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;如果不出现明显的错误就可以了&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;5、查看运行状态&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# docker ps&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;CONTAINER ID   IMAGE                    COMMAND           CREATED          STATUS          PORTS                                      NAMES&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;9868df9a9a6e&lt;/span&gt;&lt;span&gt;   rancher&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;rancher&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;stable   &lt;/span&gt;&lt;span&gt;&quot;entrypoint.sh&quot;&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; minutes ago   &lt;/span&gt;&lt;span&gt;Up&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; minutes   &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;tcp&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;443&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;443&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;tcp   rancher&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;6、在Web界面登录&lt;/p&gt;&lt;p&gt;https://192.168.241.138/&lt;/p&gt;&lt;p&gt;因为是使用https的方式登录，所以会报以下错误。点继续前往就可以了。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.41854838709677417&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxpMrGicUicopuVvaRicJxibfvIzsLMULFtpcyZs1xia1mUxIG7oeuvcUXTkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Untitled.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;7、登录设置密码&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8088235294117647&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxIJkBJOoTGKCyjTurWJIZxibOuh9NiaxE7lhFYtuPN04ajz19PLjsCQFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1088&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Untitled 1.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;使用默认的url即可&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7536945812807881&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxHS4Bh1Te7HQvhOxXBItFWbKpVBsj2Nn71yzAq9j08MmnrqGefPyP7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;812&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Untitled 2.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;8、语言更换&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5096774193548387&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxpcic4O9iccY3OvtB0TXTicDH1jOguAvP17oHe5ia7bvd1ZqTClKNjicfIRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Untitled 3.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;三、集群添加&lt;/h2&gt;&lt;p&gt;1、添加一个k8s集群&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.3096774193548387&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxLPO9xPM3vROestHHdk7IK0L5licvKTkjgIfib2ZS3K8PrWnaBCyvK3PA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Untitled 4.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;2、选择自定义&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5701612903225807&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxhB4oVPTHs96tkvDYDaOickzsnSxxES3AGyHX0KIJZvBVBJYnkm7Eesg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Untitled 5.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;3、编写集群信息&lt;/p&gt;&lt;p&gt;这里使用的选择的是kubernetes 1.18.20的版本。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5314516129032258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxeNDROJLugmXv082OTNC29NNrfia9HgwfF75XrBsPC0Xo8icf0oicIWRicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Untitled 6.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.4475806451612903&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzx3kErbTTHNkZNqQ8MU0JtpiaV5ibg3D2RuB9GAQ9TRJlqTfLrswlM5ezA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Untitled 7.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Master节点上这个control组件是必须的！！！&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6282258064516129&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxUjBDQrVibPibYD1zgvItjRmnKXlibXwFsPYDmekJfnfrJSNcicEvRtIRFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Untitled 8.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;4、登录到master01&lt;/p&gt;&lt;p&gt;执行上面copy过来的命令&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;sudo docker run &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;d &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;privileged &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;restart&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;unless&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;stopped &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;net&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;host &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;v &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;kubernetes &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;v &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;run  rancher&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;rancher&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;agent&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;5.9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;server https&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;//192.168.241.138 --token 4692pw82n2jhm7qmtzz7dptlpvhwz7ls9f27v2mkv5n9s89mwp6684 --ca-checksum 9cfb504b8d3f05bd9e37477173524ccf1a2b24129ffc941f52dcc2e9c9175310 --node-name k8s-master01 --controlplane --worker&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;然后就是静静等待集群的启动&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.23387096774193547&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxF939qDlPOCSetn9GTWKSIrkQLVftf5eXgGCwApqwM93A2vdicf3wyLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Untitled 9.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;等到显示active就说明部署好了&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.2120967741935484&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxBSojG6EOTvudTW8icVCH3H3ianliaZzy9QGAYIZQW8O68fuicc8wfyrpjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p/&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p/&gt;&lt;h3&gt;四、worker-node节点的添加&lt;/h3&gt;&lt;p&gt;1、编辑集群&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.2782258064516129&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxvobic7GJPesRLmnRDuIjk1szaRGZpxHT4UdUBzJELibvTgACKzLlHgkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p/&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p/&gt;&lt;p&gt;2、直接点击保存&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.4064516129032258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxS5Oqx1pzILKIMyPT5VCzrcib0bDsBq0dW17KiaibjIzVcaJ7eOC3BhSicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p/&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p/&gt;&lt;p&gt;3、选择组件&lt;/p&gt;&lt;p&gt;由于机器的限制，etcd就部署在了worker-node上。etcd尽量以单数形式部署1、3、5、7......&lt;/p&gt;&lt;p&gt;我这里是选择3台机器部署etcd组件。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6161290322580645&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzx65dF3z9gxRDkvJeHJp4KqaicM4icbgibEN1m5MLEaiaqgicjxmscUX7SSLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p/&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p/&gt;&lt;p&gt;4、登录node01机器&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;sudo docker run &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;d &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;privileged &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;restart&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;unless&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;stopped &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;net&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;host &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;v &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;etc&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;kubernetes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/etc/&lt;/span&gt;&lt;span&gt;kubernetes &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;v &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/var/&lt;/span&gt;&lt;span&gt;run  rancher&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;rancher&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;agent&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;5.9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;server https&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;//192.168.241.138 --token 4tldjd8szx8ndgk9k88hmscdx46q2k8lf6l9z7kg5mbjgmwpb452nd --ca-checksum 9cfb504b8d3f05bd9e37477173524ccf1a2b24129ffc941f52dcc2e9c9175310 --node-name k8s-worker-node01 --etcd --worker&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;5、以后添加node节点只需要添加以下参数就可以了&lt;/p&gt;&lt;p&gt;主机名：&lt;/p&gt;&lt;p&gt;--node-name k8s-worker-node02&lt;/p&gt;&lt;p&gt;--node-name k8s-worker-node03&lt;/p&gt;&lt;p&gt;组件：&lt;/p&gt;&lt;p&gt;--etcd&lt;/p&gt;&lt;p&gt;--controlplane&lt;/p&gt;&lt;p&gt;--worker&lt;/p&gt;&lt;h3&gt;五、kubectl工具的安装&lt;/h3&gt;&lt;p&gt;我这里是将kubectl工具安装在master上&lt;/p&gt;&lt;p&gt;1、使用wget命令下载或者将它下载到本地再上传到服务器。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;wget https&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;//storage.googleapis.com/kubernetes-release/release/v1.18.20/bin/linux/amd64/kubectl&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;2、加x权限&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# chmod +x kubectl&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;3、将二进制文件移到PATH中&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# mv kubectl /usr/local/bin/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;4、查看版本&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# kubectl version --client&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Client&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Version&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; version&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Info&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;Major&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;1&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Minor&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;18&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;GitVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;v1.18.20&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;GitCommit&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;1f3e19b7beb1cc0110255668c4238ed63dadb7ad&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;GitTreeState&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;clean&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;BuildDate&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;2021-06-16T12:58:51Z&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;GoVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;go1.13.15&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Compiler&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;gc&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Platform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;linux/amd64&quot;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;5、创建kube目录&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;mkdir &lt;/span&gt;&lt;span&gt;~/.&lt;/span&gt;&lt;span&gt;kube&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;6、编辑config文件&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5387096774193548&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzx9HakQXI1TT09BlIeXefXsO0JlpmjHWfqV1jONPR62zdG8PiaoGh0Ewg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Untitled 14.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.28601921024546423&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxw0x5fuurczamq08wwFiamzwU2kJqib1FBXDrIYhzJg2I0we2LJ7N8sdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;937&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Untitled 15.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在~/.kube目录下创建config&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;vim &lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;/.kube/&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;查看node状态&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# kubectl get nodes&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;NAME                STATUS   ROLES                 AGE     VERSION&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;k8s&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;master01        &lt;/span&gt;&lt;span&gt;Ready&lt;/span&gt;&lt;span&gt;    controlplane&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;worker   &lt;/span&gt;&lt;span&gt;30m&lt;/span&gt;&lt;span&gt;     v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;18.20&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;k8s&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;worker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;node01   &lt;/span&gt;&lt;span&gt;Ready&lt;/span&gt;&lt;span&gt;    etcd&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;worker           &lt;/span&gt;&lt;span&gt;5m50s&lt;/span&gt;&lt;span&gt;   v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;18.20&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;k8s&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;worker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;node02   &lt;/span&gt;&lt;span&gt;Ready&lt;/span&gt;&lt;span&gt;    etcd&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;worker           &lt;/span&gt;&lt;span&gt;5m1s&lt;/span&gt;&lt;span&gt;    v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;18.20&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;k8s&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;worker&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;node03   &lt;/span&gt;&lt;span&gt;Ready&lt;/span&gt;&lt;span&gt;    etcd&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;worker           &lt;/span&gt;&lt;span&gt;30m&lt;/span&gt;&lt;span&gt;     v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;18.20&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;查看所有pod状态&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;# kubectl get pods -A&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;NAMESPACE       NAME                                      READY   STATUS      RESTARTS   AGE&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;cattle&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;system   cattle&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;cluster&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;agent&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;66dcc68754&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;7lp4q&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;29m&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;cattle&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;system   cattle&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;node&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;agent&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;5twkm&lt;/span&gt;&lt;span&gt;                   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;5m57s&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;cattle&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;system   cattle&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;node&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;agent&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;v7c5l                   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;29m&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;cattle&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;system   cattle&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;node&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;agent&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;wsnnr                   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;6m46s&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;........&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;如下&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6556451612903226&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSzVWdHh79wEXtkNDUByuvzxEFJoA8bD2RPibYKxicibubCLlPhotOyN7Syv8b65eYKUEWedKoUriaic7nA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Untitled 16.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;到这里，rancher部署k8s集群就完成了。可以发现我们只需要在rancher控制台上面点点点的操作就可以简单的把k8s集群部署下来。并且还提供了丰富的可视化功能管理模块。非常方便。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;欢迎关注公众号：持续交付实践指南&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU1Njk2NjkxNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSylGO1l57ytuOCLjSa4Ow7S80jEdADvlickRR9bfWrDGtf4Wia2p4WeSjbnr1vLn7Aib6iao7rRu4Ejmw/0?wx_fmt=png&quot; data-nickname=&quot;持续交付实践指南&quot; data-alias=&quot;&quot; data-signature=&quot;分享持续交付的实践经验、软件工程感悟&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;往期好文：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6a161ef43fe8cba520a091fb7a269222</guid>
<title>阅读器排版探索</title>
<link>https://toutiao.io/k/cxt72og</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p/&gt;&lt;h1&gt;&lt;span&gt;一、待实现需求&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;调整字体大小、字体&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;调整行间距、段间距&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;动态获取可展示内容高度&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;修改字体颜色&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持夜间模式和不同背景模式&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;二、方案探索&lt;/h2&gt;&lt;h3&gt;2.1 为什么不用TextView&lt;/h3&gt;&lt;p&gt;不能根据TextView的高度获取可展示的内容的长度。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;2.2 如何做&lt;/h3&gt;&lt;p&gt;根据屏幕宽度逐行计算可展示字符个数，根据内容区域计算可展示的行数&lt;/p&gt;&lt;h2&gt;三、排版流程&lt;/h2&gt;&lt;h3&gt;3.1 layout-分页&lt;/h3&gt;&lt;p&gt;阅读器根据内容区域大小、文字字号、文字字体、行间距、段间距等信息，将内容分页；&lt;/p&gt;&lt;h3/&gt;&lt;h3&gt;3.2 draw-绘制&lt;/h3&gt;&lt;p&gt;分页数据如何绘制到屏幕上&lt;/p&gt;&lt;p&gt;文字大小、字号、行间距、段间距修改则需要重新分页重新绘制；如果只是字体颜色修改则仅需重绘，不需要重新分页&lt;/p&gt;&lt;h2&gt;四、方案实现&lt;/h2&gt;&lt;h3&gt;4.1 如何分页&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;448&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7754629629629629&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UZibibiaQhjHtniabGRQgxsEZL0ojVuS86ywe9beL8U8lXaDicylcYAEK5UjWMLFbABUhHnQG8mZpECRL6PBxD7BPoA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;分页流程：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;将内容按照换行符拆分成段落&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Paint#breakText&lt;/strong&gt;方法根据宽度返回可以容纳的文字个数，重置内容展示区域：内容区域减去字符的高度和行间距&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;段落结束则内容显示区域减去段间距&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;剩余高度小于0或者展示内容已经全部计算完，则本页分页结束&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h6&gt;核心代码：&lt;/h6&gt;&lt;pre&gt;&lt;code&gt;    /**&lt;br/&gt;     *  @param  content:待分页的内容&lt;br/&gt;     *  @param  pageProperty:分页所需属性：内容区域的大小、行间距、段间距、字体大小&lt;br/&gt;     * @return 分页数组，每一页的内容是一个String的List，表示每一行显示的内容&lt;br/&gt;     */&lt;br/&gt;    fun getLines(content: String, pageProperty: PageProperty): SparseArray&amp;lt;ArrayList&amp;lt;String&amp;gt;&amp;gt; {&lt;br/&gt;        var lines: ArrayList&amp;lt;String&amp;gt; = ArrayList&amp;lt;String&amp;gt;()&lt;br/&gt;        var sparseArray:SparseArray&amp;lt;ArrayList&amp;lt;String&amp;gt;&amp;gt; = SparseArray()&lt;br/&gt;        var height: Int = pageProperty.visibilityHeight;&lt;br/&gt;        if (content != null &amp;amp;&amp;amp; content.isNotEmpty()) {&lt;br/&gt;            val split: Array&amp;lt;String&amp;gt; = content.split(&quot;\n&quot;).toTypedArray()&lt;br/&gt;&lt;br/&gt;            for (s in split) {&lt;br/&gt;                if (s.trim().isEmpty()) {//空行&lt;br/&gt;                    continue;&lt;br/&gt;                }&lt;br/&gt;&lt;br/&gt;                var paragraph = &quot;　　&quot; + s.trim()+&quot;\n&quot; //新段落添加两个字符，增加一个换行符&lt;br/&gt;                while (paragraph.isNotEmpty()) {&lt;br/&gt;                    height -= pageProperty.textPaint.textSize.toInt();&lt;br/&gt;                    if (height &amp;gt;= 0) {//剩余的高度可以放下文字&lt;br/&gt;                        //测量一行占用的字节数&lt;br/&gt;                        val measuredWidth = FloatArray(1)&lt;br/&gt;                        var count: Int = pageProperty.textPaint.breakText(paragraph, true, pageProperty.visibilityWidth.toFloat(), measuredWidth)&lt;br/&gt;                        val subStr = paragraph.substring(0, count)&lt;br/&gt;                        lines.add(subStr)&lt;br/&gt;                        paragraph = paragraph.substring(count)&lt;br/&gt;                    }&lt;br/&gt;&lt;br/&gt;                    height -= pageProperty.intervalSize&lt;br/&gt;                    if (height &amp;lt; 0) {//本页已经绘制完&lt;br/&gt;                        sparseArray.put(sparseArray.size(),ArrayList(lines))&lt;br/&gt;                        height = pageProperty.visibilityHeight;&lt;br/&gt;                        lines.clear();&lt;br/&gt;                    }&lt;br/&gt;&lt;br/&gt;                }&lt;br/&gt;                //段落结束&lt;br/&gt;                height+=pageProperty.intervalSize&lt;br/&gt;                height -=pageProperty.paragraphSize&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            if (lines.isNotEmpty()){//最后一页&lt;br/&gt;                sparseArray.put(sparseArray.size(),ArrayList(lines))&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        return sparseArray;&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;4.2 如何绘制&lt;/h3&gt;&lt;p&gt;使用分页时的字体大小，canvas.drawText 一行一行绘制文字，改变top改变文字绘制的位置&lt;/p&gt;&lt;h6&gt;核心代码：&lt;/h6&gt;&lt;pre&gt;&lt;code&gt;    override fun onDraw(canvas: Canvas) {&lt;br/&gt;        super.onDraw(canvas)&lt;br/&gt;        if (pageData == null) {&lt;br/&gt;            return&lt;br/&gt;        }&lt;br/&gt;        //设置总距离&lt;br/&gt;        val interval = mTextInterval + textPaint!!.textSize.toInt()&lt;br/&gt;        val para = mTextPara + textPaint!!.textSize.toInt()&lt;br/&gt;        var str: String? = null&lt;br/&gt;        var top: Float&lt;br/&gt;        top = mMarginHeight - textPaint!!.fontMetrics.top&lt;br/&gt;        //对内容进行绘制&lt;br/&gt;        for (i in pageData!!.lines.indices) {&lt;br/&gt;            str = pageData!!.lines[i]&lt;br/&gt;            canvas.drawText(str, mMarginWidth, top, textPaint!!)&lt;br/&gt;            top += if (str.endsWith(&quot;\n&quot;)) { //段落&lt;br/&gt;                para.toFloat()&lt;br/&gt;            } else {&lt;br/&gt;                interval.toFloat()&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;五、踩坑记录&lt;/h2&gt;&lt;h3&gt;5.1 &lt;strong&gt;Java String#trim()&lt;/strong&gt;不掉的空格，ASCII 160引起的排版问题&lt;/h3&gt;&lt;h4&gt;5.1.1 问题背景&lt;/h4&gt;&lt;p&gt;在阅读器排版的时候，会统一&lt;strong&gt;Java String#trim()&lt;/strong&gt;去掉段落的前后的空白字符，然后统一添加两个空格。但是某些情况会出现下图情况&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;722&quot; data-backw=&quot;532&quot; data-ratio=&quot;1.3571428571428572&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UZibibiaQhjHtniabGRQgxsEZL0ojVuS86ywib2Hz8mPLUlJl8FHBrrS2QKudkvPuSCwNw0049DgUib0NFkQhNGM67ZA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;532&quot;/&gt;&lt;/p&gt;&lt;h4&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4&gt;5.1.2 问题分析&lt;/h4&gt;&lt;p&gt;debug发现char的值是160。&lt;/p&gt;&lt;p&gt;维基百科的解释是&lt;br/&gt;&lt;code&gt;不换行空格（英语：no-break space，NBSP）是空格字符，用途是禁止自动换行。HTML页面显示时会自动合并多个连续的空白字符，但该字符是禁止合并的，因此该字符也称作“硬空格”（hard space、fixed space）。Unicode码点为：U+00A0 no-break space。&lt;/code&gt;&lt;/p&gt;&lt;p&gt;那为什么&lt;strong&gt;Java String#trim()&lt;/strong&gt;方法对160不生效？&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;Java String#trim()&lt;/strong&gt;方法实现&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;    public String trim() {&lt;br/&gt;        int len = length();&lt;br/&gt;        int st = 0;&lt;br/&gt;&lt;br/&gt;        while ((st &amp;lt; len) &amp;amp;&amp;amp; (charAt(st) &amp;lt;= &#x27; &#x27;)) {&lt;br/&gt;            st++;&lt;br/&gt;        }&lt;br/&gt;        while ((st &amp;lt; len) &amp;amp;&amp;amp; (charAt(len - 1) &amp;lt;= &#x27; &#x27;)) {&lt;br/&gt;            len--;&lt;br/&gt;        }&lt;br/&gt;        return ((st &amp;gt; 0) || (len &amp;lt; length())) ? substring(st, len) : this;&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可见&lt;strong&gt;Java String#trim()&lt;/strong&gt;只是将ASCII值&amp;lt;=32的空白字符去掉，而对于160则无效&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;kotlin String#trim()&lt;/strong&gt;方法实现&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;public inline fun CharSequence.trim(predicate: (Char) -&amp;gt; Boolean): CharSequence {&lt;br/&gt;    var startIndex = 0&lt;br/&gt;    var endIndex = length - 1&lt;br/&gt;    var startFound = false&lt;br/&gt;&lt;br/&gt;    while (startIndex &amp;lt;= endIndex) {&lt;br/&gt;        val index = if (!startFound) startIndex else endIndex&lt;br/&gt;        val match = predicate(this[index])&lt;br/&gt;&lt;br/&gt;        if (!startFound) {&lt;br/&gt;            if (!match)&lt;br/&gt;                startFound = true&lt;br/&gt;            else&lt;br/&gt;                startIndex += 1&lt;br/&gt;        } else {&lt;br/&gt;            if (!match)&lt;br/&gt;                break&lt;br/&gt;            else&lt;br/&gt;                endIndex -= 1&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    return subSequence(startIndex, endIndex + 1)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;public actual fun Char.isWhitespace(): Boolean = Character.isWhitespace(this) || Character.isSpaceChar(this)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;public static boolean isSpaceChar(int codePoint) {&lt;br/&gt;        // We don&#x27;t just call into icu4c because of the JNI overhead. Ideally we&#x27;d fix that.&lt;br/&gt;        // SPACE or NO-BREAK SPACE?&lt;br/&gt;        if (codePoint == 0x20 || codePoint == 0xa0) {&lt;br/&gt;            return true;&lt;br/&gt;        }&lt;br/&gt;        if (codePoint &amp;lt; 0x1000) {&lt;br/&gt;            return false;&lt;br/&gt;        }&lt;br/&gt;        // OGHAM SPACE MARK or MONGOLIAN VOWEL SEPARATOR?&lt;br/&gt;        if (codePoint == 0x1680 || codePoint == 0x180e) {&lt;br/&gt;            return true;&lt;br/&gt;        }&lt;br/&gt;        if (codePoint &amp;lt; 0x2000) {&lt;br/&gt;            return false;&lt;br/&gt;        }&lt;br/&gt;        if (codePoint &amp;lt;= 0xffff) {&lt;br/&gt;            // Other whitespace from General Punctuation...&lt;br/&gt;            return codePoint &amp;lt;= 0x200a || codePoint == 0x2028 || codePoint == 0x2029 || codePoint == 0x202f || codePoint == 0x205f ||&lt;br/&gt;                codePoint == 0x3000; // ...or CJK Symbols and Punctuation?&lt;br/&gt;        }&lt;br/&gt;        // Let icu4c worry about non-BMP code points.&lt;br/&gt;        return isSpaceCharImpl(codePoint);&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;kotlin String#trim()&lt;/strong&gt;是通过Character.isWhitespace(this) || Character.isSpaceChar(this)来删除的，Character.isSpaceChar(this) ASCII=160返回true&lt;/p&gt;&lt;h4&gt;正则表达式&lt;/h4&gt;&lt;p&gt;正则表达式也可以实现去除ASCII=160&lt;/p&gt;&lt;pre&gt;&lt;code&gt; private static final Pattern pattern = Pattern.compile(&quot;^\\s*|\\s*$&quot;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;5.1.3 问题总结&lt;/h3&gt;&lt;p&gt;正则表达式和&lt;strong&gt;Kotlin String#trim()&lt;/strong&gt;方法可以实现过滤ASCII=160&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;解决后&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;725&quot; data-backw=&quot;530&quot; data-ratio=&quot;1.3679245283018868&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UZibibiaQhjHtniabGRQgxsEZL0ojVuS86ywv8o4J2aHJ9zEO8ibY5vv4uUic9omobaKc1WnJnpJqliavRu1eaAXh6LYQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;530&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>051440776469e057593bde81949a0efd</guid>
<title>牛！这个工具能将公式图片转化为 LaTeX 格式</title>
<link>https://toutiao.io/k/m2vylse</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-hnrfcf&quot; options=&quot;[object Object]&quot;&gt;&lt;p&gt;【导语】：将图片中的公式变成 LaTeX 格式。&lt;/p&gt;
&lt;h3&gt;简介&lt;/h3&gt;
&lt;p&gt;image-to-latex 是一个能将 LaTeX 数学方程的图像映射到 LaTeX 代码的应用程序。&lt;/p&gt;
&lt;p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e6c71919a6b3c5fc41b60a3f7f009fe5_b.gif&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;778&quot; data-rawheight=&quot;518&quot; data-thumbnail=&quot;https://pic2.zhimg.com/v2-e6c71919a6b3c5fc41b60a3f7f009fe5_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-e6c71919a6b3c5fc41b60a3f7f009fe5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;778&quot; data-rawheight=&quot;518&quot; data-thumbnail=&quot;https://pic2.zhimg.com/v2-e6c71919a6b3c5fc41b60a3f7f009fe5_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-e6c71919a6b3c5fc41b60a3f7f009fe5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-e6c71919a6b3c5fc41b60a3f7f009fe5_b.gif&quot;/&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Yuntian Deng 等人在 2016 年提出并尝试了 image-to-markup 的问题。他们通过解析来自 arXiv 的 LaTeX 论文来源，提取了大约 10 万个公式。他们使用 pdflatex 渲染公式并将渲染的 PDF 文件转换为 PNG 格式。在他们的模型中，首先使用 CNN 来提取图像特征。然后使用 RNN 对特征行进行编码。&lt;/p&gt;
&lt;p&gt;最后，编码特征由 RNN 解码器使用。该模型共有 948 万个参数。最近，Transformer 在很多语言任务上都超过了 RNN，所以作者在这个问题上进行了新的尝试。&lt;/p&gt;
&lt;p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e290a22317703618f1232f93cae74985_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;427&quot; data-rawheight=&quot;531&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-e290a22317703618f1232f93cae74985_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;427&quot; data-rawheight=&quot;531&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-e290a22317703618f1232f93cae74985_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-e290a22317703618f1232f93cae74985_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;项目地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/kingyiusuen/image-to-latex&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/kingyiusuen/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;image-to-latex&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;下载安装&lt;/h3&gt;
&lt;h4&gt;安装&lt;/h4&gt;
&lt;p&gt;将源代码 clone 到本地文件夹：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;git clone https://github.com/kingyiusuen/image-to-latex.git
cd image-to-latex&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建名称为 venv 的虚拟环境，并安装所需的包：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;make venv
make install-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4&gt;数据预处理&lt;/h4&gt;
&lt;p&gt;运行以下命令下载 im2latex 数据集并进行所有预处理，图像裁剪步骤可能需要一个多小时。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;python scripts/prepare_data.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4&gt;部署&lt;/h4&gt;
&lt;p&gt;创建 API 以使用经过训练的模型进行预测。使用以下命令启动并运行服务器：&lt;/p&gt;
&lt;p&gt;可以通过 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//0.0.0.0%3A8000/docs&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;0.0.0.0:8000/docs&lt;/span&gt;&lt;span class=&quot;invisible&quot;/&gt;&lt;/a&gt; 上生成的文档查看 API 的使用方法。&lt;/p&gt;
&lt;h4&gt;模型架构&lt;/h4&gt;
&lt;p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-21913aaeef4479de5c424fb63ba1293f_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;718&quot; data-rawheight=&quot;584&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-21913aaeef4479de5c424fb63ba1293f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;718&quot; data-rawheight=&quot;584&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-21913aaeef4479de5c424fb63ba1293f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-21913aaeef4479de5c424fb63ba1293f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4&gt;运行例子&lt;/h4&gt;
&lt;p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-226fbe6700204089cebee7c2ccc558af_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;388&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-226fbe6700204089cebee7c2ccc558af_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;388&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-226fbe6700204089cebee7c2ccc558af_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-226fbe6700204089cebee7c2ccc558af_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-17e53e4dca2977d5d13bafddf81c0de6_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;410&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-17e53e4dca2977d5d13bafddf81c0de6_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;410&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-17e53e4dca2977d5d13bafddf81c0de6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-17e53e4dca2977d5d13bafddf81c0de6_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-726732de9831e1fc5a77b1f9075bcedb_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;464&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-726732de9831e1fc5a77b1f9075bcedb_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;464&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-726732de9831e1fc5a77b1f9075bcedb_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-726732de9831e1fc5a77b1f9075bcedb_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;开源前哨&lt;/code&gt; 日常分享热门、有趣和实用的开源项目。参与维护 10万+ Star 的开源技术资源库，包括：Python、Java、C/C++、Go、JS、CSS、Node.js、PHP、.NET 等。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>