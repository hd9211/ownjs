<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>89ae4371cbad6871a9102a0d61024e5b</guid>
<title>工具 | 腾讯开源的，基于 Whistle 实现的多账号多环境远程配置及抓包调试平台</title>
<link>https://toutiao.io/k/iq87lih</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;大家好，我是周刊菌。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以下内容选自「码农周刊 VIP 会员」圈子，每日更新，精彩不断&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;1111&quot; data-ratio=&quot;2.002666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavicWpQhTALEcfH5yHp9JpjJKGa3Nl1KhM1bkIbCDAZ3KMMCc2qGia3oibdkxPOSRGEiahg8iclAZpdU54A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;「码农周刊 VIP 会员」推出 38 周啦！感谢亲们的大力支持！第 038 期「码农周刊 VIP 会员专属邮件周报」已发送完毕，请注意查收。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;告诉大家一个好消息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：已有数位上市公司 CTO 低调订阅了我们的「码农周刊 VIP 会员专属邮件周报」，感谢肯定！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;255&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;255&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;300&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/t8lpVibticjQ7PeUupLzwuuAibicnrRNxKcfCY7fIva78efKsUzANlCCAeuSQEGkGm34rKkzNRpzy6IiaiaHmBNA6DcA/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;「码农周刊 VIP 会员」是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;简介版&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;码农周刊 VIP 会员 = 全年 52 期「VIP 会员专属邮件周报」 + 只限 VIP 会员加入的交流圈子 + 大厂「内推机会」 + N 多福利&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;详细版&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击「阅读原文」即可查看详细介绍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;码农周刊 VIP 新年特惠&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;原价 365 元/年&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;，现价仅需 108 元！&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;全年 52 期「VIP 会员专属邮件周报」&lt;br/&gt;只限 VIP 会员加入的交流圈子&lt;br/&gt;大厂「内推机会」&lt;br/&gt;N 多福利，你值得拥有！&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;CTO 们邀请你加入码农周刊 VIP，升职加薪不再难！&lt;br/&gt;↓↓↓&lt;/strong&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;31&quot; data-cropselx2=&quot;291&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;350&quot; data-ratio=&quot;1.0857487922705313&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNav9LRTqibic3sUoh5tv76OXCpNTWbZ0gCYsFDShjwfRVvM157WDel2cr2dy5ghjxDCCwRc2Mu8bgehnA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;828&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d2cec96b9fe50e783c8bbc5df5f5d512</guid>
<title>VirtualAPP 源码解析：Native Hook 技术</title>
<link>https://toutiao.io/k/ryt03gi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;本篇文章主要介绍VirtualAPP使用的Native Hook技术，不是很深入，因为涉及很多C++，ELF和指令集相关的知识点，很多知识还没有融会贯通，目前只是停留在名词的概念上。后续理解了在进行补充。&lt;/p&gt;&lt;h2&gt;应用背景&lt;/h2&gt;&lt;p&gt;VirtualAPP中使用了Native Hook技术，主要用于虚拟APP的文件访问重定向。这句话怎么理解和为什么这么做呢，我们先回顾一下VirtualAPP的大致原理。在VirtualAPP中启动一个虚拟APP,大致分为如下几部：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;VirtualAPP通过虚拟服务端启动APP B(虚拟APP)&lt;/li&gt;&lt;li&gt; 虚拟服务端通过Provider创建APP B对应的进程，同时替换Intent数据指向代理组件&lt;/li&gt;&lt;li&gt; APP B进程启动，同时将系统服务代理对象，通过动态代理的方式全部替换，指向虚拟服务端&lt;/li&gt;&lt;li&gt; APP B进程 收到intent数据，将intent中数据解析，重新替换为目标组件。从而实现狸猫换太子。&lt;/li&gt;&lt;/ol&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-79c34a2e94389fe3b26f8de79df456cd_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;870&quot; data-rawheight=&quot;460&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-79c34a2e94389fe3b26f8de79df456cd_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;870&quot; data-rawheight=&quot;460&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-79c34a2e94389fe3b26f8de79df456cd_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-79c34a2e94389fe3b26f8de79df456cd_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;在上述步骤我们可以看出，虚拟APP是VirtaulAPP的一个子进程。可想而知我们在虚拟app中进行文件存储或者sp操作时，最终的存储路径也是在VirtaulAPP的data目录下，这样就会带来一个问题。如果允许多个app就会可能出现文件访问冲突，同时也没有做到APP间隔离的目的。而VirtualAPP就是通过Native Hook技术解决了该问题。每个APP都有自己各自的文件存储路径。&lt;/p&gt;&lt;h2&gt;源码分析&lt;/h2&gt;&lt;p&gt;下面我们来简单了解下他是如何实现的，关键方法是VClientImpl的startIOUniformer方法，可以看出进行了存储路径映射，如在子进程当我们访问&lt;/p&gt;&lt;p&gt;/data/data/&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//com.xxx/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;com.xxx/&lt;/span&gt;&lt;span class=&quot;invisible&quot;/&gt;&lt;/a&gt;目录时会直接映射到io.virtualapp/virtual/data/user/0/&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//com.xxx&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;com.xxx&lt;/span&gt;&lt;span class=&quot;invisible&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;NativeEngine.redirectDirectory(&quot;/sys/class/net/wlan0/address&quot;, wifiMacAddressFile);
NativeEngine.redirectDirectory(&quot;/sys/class/net/eth0/address&quot;, wifiMacAddressFile);
NativeEngine.redirectDirectory(&quot;/sys/class/net/wifi/address&quot;, wifiMacAddressFile);

NativeEngine.redirectDirectory(&quot;/data/data/&quot; + info.packageName, info.dataDir);
NativeEngine.redirectDirectory(&quot;/data/user/0/&quot; + info.packageName, info.dataDir);
if (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.N) {
    NativeEngine.redirectDirectory(&quot;/data/user_de/0/&quot; + info.packageName, info.dataDir);
}
String libPath = VEnvironment.getAppLibDirectory(info.packageName).getAbsolutePath();
String userLibPath = new File(VEnvironment.getUserSystemDirectory(userId), info.packageName + &quot;/lib&quot;).getAbsolutePath();
NativeEngine.redirectDirectory(userLibPath, libPath);
NativeEngine.redirectDirectory(&quot;/data/data/&quot; + info.packageName + &quot;/lib/&quot;, libPath);
NativeEngine.redirectDirectory(&quot;/data/user/0/&quot; + info.packageName + &quot;/lib/&quot;, libPath);  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该方法最终会调用IOUniformer.cpp的startUniformer方法&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;void IOUniformer::startUniformer(const char *so_path, int api_level, int preview_api_level) {

void *handle = dlopen(&quot;libc.so&quot;, RTLD_NOW);
if (handle) {
    HOOK_SYMBOL(handle, faccessat);
    HOOK_SYMBOL(handle, __openat);
    HOOK_SYMBOL(handle, fchmodat);
    HOOK_SYMBOL(handle, fchownat);
    HOOK_SYMBOL(handle, renameat);
    HOOK_SYMBOL(handle, fstatat64);
    HOOK_SYMBOL(handle, __statfs);
    HOOK_SYMBOL(handle, __statfs64);
    HOOK_SYMBOL(handle, mkdirat);
    HOOK_SYMBOL(handle, mknodat);
    HOOK_SYMBOL(handle, truncate);
    HOOK_SYMBOL(handle, linkat);
    HOOK_SYMBOL(handle, readlinkat);
    HOOK_SYMBOL(handle, unlinkat);
    HOOK_SYMBOL(handle, symlinkat);
    HOOK_SYMBOL(handle, utimensat);
    HOOK_SYMBOL(handle, __getcwd);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们知道android系统是基于Linux内核，文件读写操作也是间接的通过&lt;b&gt;库函数&lt;/b&gt;进行&lt;b&gt;系统调用&lt;/b&gt;，如我们在应用开发中使用的inputStream与outputStream进行文件读写最终也是调用libc.so库函数提供的方法。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-af6ab061854f8cba1aca0dd21788f9f5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;311&quot; data-rawheight=&quot;251&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;311&quot; data-rawheight=&quot;251&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-af6ab061854f8cba1aca0dd21788f9f5_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;所以需要做到就是将libc库函数的方法进行Hook,将输入参数替换为我们的虚拟app路径，该过程即为native Hook。还有一个疑问点是我们怎么知道要hook哪些函数呢，只能通过查看libc的源码，当然源码也是公开的，可以直接查看如下地址。&lt;br/&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.androidos.net.cn/android/9.0.0_r8/xref/bionic/libc/bionic&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;androidos.net.cn/androi&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;d/9.0.0_r8/xref/bionic/libc/bionic&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;以faccessat方法为例，我们可以看到方法参数有个pathname我们需要将改方法参数替换掉，然后重新调用系统方法。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___faccessat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;faccessat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// &quot;The mode specifies the accessibility check(s) to be performed,
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;  &lt;span class=&quot;c1&quot;&gt;// and is either the value F_OK, or a mask consisting of the
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;  &lt;span class=&quot;c1&quot;&gt;// bitwise OR of one or more of R_OK, W_OK, and X_OK.&quot;
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_OK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W_OK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_OK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W_OK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EINVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;br/&gt;具体实现&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;经过上述步骤我们知道了，需要对libc链接库的方法进行hook,但是如何做到呢，这就不得不提Native Hook的具体实现了，Native Hook的实现方式有两种一个是&lt;b&gt;PLT Hook &lt;/b&gt;与 &lt;b&gt;Inline Hook，&lt;/b&gt;实现原理涉及so动态链接过程与ELF文件格式，汇编指令等，这块大家可以百度一下。而罗迪使用的是一个第三方开源项目&lt;b&gt;Cydia Substrate(&lt;/b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.cydiasubstrate.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cydiasubstrate.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;/&gt;&lt;/a&gt;&lt;b&gt;)，&lt;/b&gt;该项目即是inline Hook的一种具体实现。爱奇艺开源的xHook则是PLT Hook方案的具体实现。与PLT Hook方案比较,inline Hook实用场景更广泛，能力更强大。而VirualAPP通过灵活的运用宏定义，Hook一个方法只需要两个步骤：&lt;br/&gt;&lt;br/&gt;1. Hook调用&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt; &lt;span class=&quot;n&quot;&gt;HOOK_SYMBOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faccessat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt; 2. 定义替换的方法&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// int faccessat(int dirfd, const char *pathname, int mode, int flags);
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;n&quot;&gt;HOOK_DEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faccessat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redirect_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relocate_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__NR_faccessat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;下面我们分析一下 HOOK_SYMBOL与HOOK_DEF宏展开过程&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define HOOK_SYMBOL(handle, func) hook_function(handle, #func, (void*) new_##func, (void**) &amp;amp;orig_##func)
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define HOOK_DEF(ret, func, ...) \
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;  static ret (*orig_##func)(__VA_ARGS__); \
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;  static ret new_##func(__VA_ARGS__)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;在编译期间会进行宏替换，HOOK_SYMBOL(handle, faccessat)最终替换为如下格式 ;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;hook_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faccessat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_faccessat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orig_faccessat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;HOOK_DEF最终会替换为如下格式：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orig_faccessat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_faccessat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faccessat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redirect_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relocate_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__NR_faccessat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;可以看出通过宏替换，我们定义了一个函数指针，和一个newfaccessat的替换函数，最终调用hook_function方法实现Hook,hook_function内部调用&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.cydiasubstrate.com/api/c/MSHookFunction/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;MSHookFunction&lt;/a&gt;函数，该函数即为Cydia Substrate提供的能力。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hook_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlsym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;MSHookFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;相信大家对Native Hook在整体上有了初步的认识，学习Native Hook不能一蹴而就而是个缓慢的过程。后续文章为大家分享MSHookFunction的具体实现原理&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;  &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3bfe1c29e220b7fe035788f19b70f32c</guid>
<title>认识 V8 引擎（一）</title>
<link>https://toutiao.io/k/tdc9eou</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.478125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/otHvoL6neeIDb5ZT3Bs326f22KuLGbcF5xcruFSlN3lKAXHbIQ4s8xlFUr9u9Y7upL9Ebajsb00B1HR3phzpYw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;V8 是一个由 Google 开发的，开源的，高性能的， JavaScript 及 WebAssembly 引擎，使用 C++ 编写。广泛应用于 Google Chrome 浏览器、Node.js 等等。跨平台支持 Windows(Win7以上)、macOS(10.12+)，以及各种 Linux 系统，包括 ARM 的手机系统。同时，V8 也可以独立的运行使用，嵌入集成到 C++ 的应用中。&lt;/p&gt;&lt;p&gt;JavaScript 引擎的主要作用是执行 JavaScript 代码。世界上第一款 JavaScript 引擎是 SpiderMonkey，由布兰登·艾克在网景公司开发，用于 Netscape Navigator 网页浏览器。传闻艾克在 1995年 5 月仅花了十天就把原型设计了出来。&lt;/p&gt;&lt;p&gt;早期的 JavaScript 引擎是通过解释器的方式解释执行，比如将源码转成抽象语法树（AST），然后解释执行，其运行效率并不高。但由于早期的浏览器网页还是以静态网页（HTML）为主，JavaScript 并未被广泛重度的应用，所以解释执行并未遇到太大问题。后来随着动态网页兴起，网页里开始运行越来越多复杂的应用，JavaScript 的瓶颈凸显了出来。&lt;/p&gt;&lt;p&gt;既然 JavaScript 运行性能不行，为什么不替换它呢？换成 Lua，Python 不香吗？或者再重新精心设计另外一门专用语言（WebAssembly）。其实替换 JavaScript 的尝试一直都在进行，但是JavaScript 在浏览器里的地位至今无人能撼动。主要原因我认为有三个：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;经过几十年的应用，JavaScript 已经成为事实标准，改变不易&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;JavaScript 对开发者非常友好，上手较其他语言更容易&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;随着 JIT 技术的引入，JavaScript 的性能已经不再是问题&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;前两个都是习惯问题，即使改变，慢慢也就适应了。但 JIT 技术的引入，几乎解决了 JavaScript 的性能问题，使得 JavaScript 的地位更加的牢固。在 JavaScript 中应用 JIT 的典型代表，就是我们今天的主角：V8。在引入我们的主题之前，我还要简要的介绍一下什么是 JIT 技术。&lt;/p&gt;&lt;p&gt;JIT 的全程是 just-in-time compilation，又译即时编译或实时编译。在 JIT 出现之前，高级编程语言要被计算机执行，通常通过两种方式来实现：AOT 和解释器。AOT 全程 ahead-of-time compilation，即代码预先通过编译器的编译，直接生成目标机器的机器码。因此它的运行效率最高，比如我们常用的 C/C++ 代码，通过 gcc/clang/msvc 等编译器，直接编译出机器码的二进制文件，其运行性能我们称之为原生性能。&lt;/p&gt;&lt;p&gt;既然 AOT 性能最高，全都用 AOT 不就得了？也不尽然。AOT 要求编译的代码是静态类型的，比如一个变量的类型在运行期间不允许变成另一种类型，也不允许动态的往类型里增加属性。而 JavaScript 是动态类型的，比如下面一段代码，变量 foo 的类型可以运行时随时变化：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; foo = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;// foo is a int&lt;/span&gt;foo = &lt;span&gt;&quot;hello&quot;&lt;/span&gt;; &lt;span&gt;// foo change to a string&lt;/span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;Point&lt;/span&gt;() {&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;foo = &lt;span&gt;new&lt;/span&gt; Point(); &lt;span&gt;// foo change to a Point&lt;/span&gt;foo.x = &lt;span&gt;10&lt;/span&gt;;  &lt;span&gt;// foo add x property&lt;/span&gt;foo.y = &lt;span&gt;10&lt;/span&gt;;  &lt;span&gt;// foo add y property&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;foo 类型总是变来变去，给 AOT 编译器增加了很大的麻烦。同时，AOT 还有编译时间长，生成的目标文件大的问题。它不能像 Java 一样『一次编译，到处运行』，而是针对不同平台『编译多次，到处运行』。如果想像 JavaScript 一样做到『一次编写，到处运行』，就需要在用户的浏览器端，运行时实时的进行编译。这样一来，缓慢的编译过程又拖慢了代码的启动速度。&lt;/p&gt;&lt;p&gt;JIT 结合了 AOT 和解释器两者的优势。它可以运行时根据情况在两者之间切换。比如首次启动时，使用解释器来执行，这样保证了代码的启动速度，对于一些短小的一次性执行的代码非常友好。当代码运行一段时间，编译器发现某些代码频繁的反复执行，则切换到 JIT 模式即时的将这部分代码编译成机器码，之后再运行到这类代码时，则可以做到几乎以原生的速度执行。&lt;/p&gt;&lt;p&gt;现代语言的虚拟机几乎都拥有了 JIT 的能力。如 JVM JIT，LuaJIT。几大 JavaScript 引擎，例如微软的 Chakra、Mozilla 的 SpiderMonkey、苹果的 JavaScriptCore、谷歌的 V8，JIT 已经成了标配功能。而其中谷歌的 V8，是所有的 JavaScript 引擎的佼佼者。&lt;/p&gt;&lt;p&gt;为什么 V8 能做到这么优秀呢？我们后面慢慢来讲。我们先来看看 V8 是怎样诞生出来的。从维基百科里了解到，V8 的创建者是一名叫 Lars Bak 的丹麦程序员。我们来看看这位大神的履历：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1991 年在 Sun 工作，开发 Self 虚拟机，成为业界最佳程序员之一&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;1994 年，离开 Sun，加入 LongView，设计和开发了高性能虚拟机 StrongTalk&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;1997 年，LongView 被 Sun 收购，主导开发了著名的 Java 虚拟机 HotSpot&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2002 年回到丹麦，创立名叫 OOVM 的公司。&lt;/p&gt;&lt;p&gt;2004年将公司卖给一家瑞士公司 Esmertec，随后又在该公司干了两年&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2006 年加入谷歌，在丹麦自己的农场开始开发 V8 引擎&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2008 年，开发的 V8 引擎和谷歌浏览器 Chrome 一起横空出世。&lt;/p&gt;&lt;p&gt;V8 处理 JavaScript 的速度比当时的 IE 浏览器快 56 倍&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2011 年主导开发并发布 Dart 语言。&lt;/p&gt;&lt;p&gt;如今应用火热的 Flutter 正是使用该语言进行开发&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;据说 2006 年是劈柴（Sundar Pichai，现谷歌 CEO）哥亲自给 Bak 打的电话，说谷歌正打算开发一款全新的浏览器，你来做高级经理，开发一个高性能的 JavaScript 引擎好不好？Bak 对开发 JavaScript 引擎很有兴趣，欣然接受了这份工作。但他说他不在乎当什么高级经理，在乎的是推动打破技术的边界，并且他不会回到加州，而是在丹麦自己的农场开始他的工作。他家农场距离加州总部相隔 8000 公里，相差了 9 个时区。&lt;/p&gt;&lt;p&gt;他在农场建立了办公室，家就在办公室对面。每天，他走过石子路到办公室，然后开始写代码。结束工作后，又穿过院子走回家，把工作彻底放下。他享受这种工作和生活分开的感觉。这也是他不想去硅谷的原因。他招募了自己的学生卡斯帕伦德一起来农场工作，命名了新的引擎名字叫 V8，以汽车 V 型 8 缸发动机命名，预示着这将是一款性能爆表的引擎。V8 从零开始开发的，一面世就秒杀了市面上所有的 JavaScript 引擎。&lt;/p&gt;&lt;p&gt;早期的 V8 版本，为了追求性能的极致，将源码转成抽象语法树之后，直接通过 Full-codegen 生成目标机器码。2010 年，又推出了 Crankshaft 编译优化器，在代码执行过程中，内置的 Profiler 记录热点函数，然后提交给 Crankshaft 进行优化，生成优化后的机器码，进一步提高执行的效率。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/otHvoL6neeJ47LHtlZjYT9DE7OIatKia8QbvZzjZWK0rEubg7qamC1R87S1ibObFWFvmQUicPc8TC9VVnC6ALkUbA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;由于直接生成目标机器码，导致了占用内存大，编译时间长导致启动速度慢，2016 年 V8 设计了中间字节码 Ignition，以让 V8 能在内存更小的安卓设备上流畅的运行。2017 年推出 V8 5.9 版本，废弃了旧的 Full-codegen+Crankshaft 的编译架构，使用了 Ignition 字节码解释器和编译优化器 TurboFan，内存使用得到进一步降低，网页加载速度也得到大幅的提升。Ignition+TurboFan 的组合沿用至今。&lt;/p&gt;&lt;p&gt;2017 年 V8 5.7 版本，正式支持了 WebAssembly，一个基于浏览器设计的新的字节码标准。2018 年 V8 6.9 版本，引入 WebAssembly 基线编译器 Liftoff，极大提升了首次编译的效率，配合 TurboFan 编译优化器，在启动速度和运行性能上都得到了很大的提升。&lt;/p&gt;&lt;p&gt;截止目前，V8 最新的版本是 8.7，并且一直在不断的迭代进化之中。&lt;/p&gt;&lt;h4&gt;随想&lt;/h4&gt;&lt;p&gt;Lars Bak 从大学时才接触计算机，一直专注在虚拟机的领域，做出像 JVM HotSpot、V8、Dart 这样非凡的产品。这告诉我们，找准自己的兴趣和努力的方向，深耕下去，什么时候开始都不会迟。Bak 加入谷歌时，已经 41 岁。虽然之前他已经积累了不少的财富，但我相信他是由衷的不在乎谷歌的什么高级职位，在乎的只是用更好的技术，突破更多的技术边界。所以 V8 从一开始就是开源的，正如题图 2008 年 Chrome 发布时的宣传漫画里说的一样：『所以，其他浏览器也可以用它（V8），或者，如果有其他项目需要用到 JavaScript，开发者都可以直接使用 V8』&lt;/p&gt;&lt;p&gt;我喜欢写代码，但有时也因程序员 35 岁问题而困扰，了解了 Lars Bak 经历之后，我想，专研深耕自己的领域，专注到兴趣的事情来上，竞争力自然就加强了，也就真没有什么好焦虑了。&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b6f85633b5f8767244bda2998d5b319d</guid>
<title>[译] 应用架构：为什么要随着市场演进</title>
<link>https://toutiao.io/k/adqu0ad</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;本文译自 Application architecture: why it should evolve with the market&lt;br/&gt;最初由Mia Platform团队发布在Mia Platform的博客上&lt;/p&gt;&lt;p&gt;如今，IT 挑战在于通过有效选择应用架构来适应市场和业务需求的发展。为了满足业务和客户的需求，IT 部门应能够对技术和&lt;strong&gt;方法&lt;/strong&gt;采取行动以确保软件具有灵活性，并实现产品和服务的持续创新流程，从而做出更快的反应 。&lt;/p&gt;&lt;p&gt;当然，过去的单体应用程序和刚性基础设施无法做到这一点。相反，它可以通过&lt;strong&gt;为演化而设计的架构&lt;/strong&gt;来实现，该架构在需要时易于更新和重构。容器化实践的广泛应用（根据 Gartner，到2022年，大公司的就业人数将从目前的 30％ 增长到 75％），这种情况下采用云原生方法重新设计微服务应用是成功的关键。&lt;/p&gt;&lt;h2&gt;如何构建不断发展的应用架构&lt;/h2&gt;&lt;p&gt;海外专家称它们为&lt;strong&gt;可演进的架构&lt;/strong&gt;，以将它们与当今阻碍或无助于改变的传统架构区分开。应用架构基于微服务架构风格 ，被设计成在现代虚拟化 IT 和云环境中发挥最佳性能。&lt;/p&gt;&lt;p&gt;基本思想是&lt;strong&gt;创建可以轻松“分解”的应用程序，其组件可以在其他上下文或组合中重用&lt;/strong&gt;，如 Lego 系列。开发一系列微服务，每个微服务都用于执行单个业务功能（根据“单一职责原则”），可以在应用本身的开发和演进中获得相当大的灵活性。实际上，可以根据支持功能的特定生命周期独立开发、更新和测试服务。&lt;/p&gt;&lt;p&gt;此外，谈到部署，微服务应用的架构具有很大的优势：可以根据需要在内部或云中通过使用可用资源来扩展单个微服务。&lt;/p&gt;&lt;p&gt;为此，微服务应用获得&lt;strong&gt;基于容器的基础设施&lt;/strong&gt;的支持，该基础设施通过业务编排系统（通常为 Kubernetes）进行管理，该流程可以自动化并促进公司系统之间以及从这些系统到云提供商服务的软件作业的迁移。&lt;/p&gt;&lt;h2&gt;随着业务发展的应用架构的优势&lt;/h2&gt;&lt;p&gt;基于微服务的应用架构在开发和部署方面具有更大的自治权。如我们所见，微服务可以在其他应用程序中单独实现、“分解”、更新和重用。因此，通过产品或客户需求的演变，它有降低&lt;strong&gt;减少市场所需的每个新产品的设计/开发时间和成本&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;此外，通过使用容器化实践，可以简化在本地、云、多云或混合环境的任何环境中应用程序的部署，从而优化成本。&lt;/p&gt;&lt;p&gt;在微服务架构风格的优点中，我们还发现有可能在各种服务之间的对话及其健康状况上获得更大的&lt;strong&gt;透明度&lt;/strong&gt;：更好的可观察性意味着可以轻松解决复杂应用的问题。实际上，管理员可以&lt;strong&gt;更快地定位和解决性能和安全性问题&lt;/strong&gt;，在运维和代码层面实施措施，从而使响应速度与变更的长期有效性保持一致。&lt;/p&gt;&lt;p&gt;通过采用微服务以及新的开发和部署方法，可以创建能够随时间发展的应用架构。除了 IT 团队必须掌握的新技能外，还必须对公司的未来有一个清晰的愿景，以确保所提供的服务对业务发展有用。&lt;/p&gt;&lt;h2&gt;创建可演进的应用架构&lt;/h2&gt;&lt;p&gt;我们已经看到了基于微服务的现代应用架构如何保证软件的灵活性，并允许你利用本地和按需使用的所有资源，在可以&lt;strong&gt;方便地&lt;/strong&gt;获得所需性能、降低成本或保护数据的&lt;strong&gt;位置分配作业&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;为了使之成为可能，有必要在云和混合环境中创建和管理虚拟化的 IT 环境，并&lt;strong&gt;采用最合适的方法和策略&lt;/strong&gt;。例如，在用于将开发和运维活动链接在一起的DevOps领域中，&lt;strong&gt;持续集成/持续交付&lt;/strong&gt;（CI / CD）策略的方法学支持可帮助提高更新速度和应用软件的质量。&lt;/p&gt;&lt;p&gt;此外，微服务可促进对遗留应用程序的集成，从而使公司更加敏捷，并利用市场上最&lt;strong&gt;先进的解决方案&lt;/strong&gt;。除了需要新的技术和工作方法外，现在还需要可演进的应用架构来&lt;strong&gt;支持数字化转型所决定的不断变化的需求&lt;/strong&gt;。&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>01e8c42bea4a0e124e4372c90e38f8b0</guid>
<title>[推荐] GitHub 访问加速指南</title>
<link>https://toutiao.io/k/5mauvie</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道什么时候开始，&lt;code&gt;GitHub&lt;/code&gt;里面的图片也无法加载出来，本来页面也加载缓慢，这下更是雪上加霜，好在还是有简单的方式加速&lt;code&gt;GitHub&lt;/code&gt;的访问。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过设置&lt;code&gt;hosts&lt;/code&gt;就是一个低成本的方案， &lt;code&gt;GitHub&lt;/code&gt;里面图片都在&lt;code&gt;githubusercontent.com&lt;/code&gt;域名下，我们只需要在&lt;code&gt;hosts&lt;/code&gt;里绑定域名和对应的&lt;code&gt;IP&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. hosts内容&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;hosts&lt;/code&gt;文件内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 2020年12月30日更新&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# GitHub Start&lt;/span&gt;&lt;br/&gt;52.74.223.119     github.com&lt;br/&gt;52.74.223.119   gist.github.com&lt;br/&gt;54.169.195.247   api.github.com&lt;br/&gt;185.199.111.153   assets-cdn.github.com&lt;br/&gt;199.232.96.133    raw.githubusercontent.com&lt;br/&gt;199.232.96.133    gist.githubusercontent.com&lt;br/&gt;199.232.96.133    cloud.githubusercontent.com&lt;br/&gt;199.232.96.133   camo.githubusercontent.com&lt;br/&gt;199.232.96.133   avatars0.githubusercontent.com&lt;br/&gt;199.232.96.133    avatars1.githubusercontent.com&lt;br/&gt;199.232.96.133   avatars2.githubusercontent.com&lt;br/&gt;199.232.96.133    avatars3.githubusercontent.com&lt;br/&gt;199.232.96.133    avatars4.githubusercontent.com&lt;br/&gt;199.232.96.133    avatars5.githubusercontent.com&lt;br/&gt;199.232.96.133    avatars6.githubusercontent.com&lt;br/&gt;199.232.96.133    avatars7.githubusercontent.com&lt;br/&gt;199.232.96.133    avatars8.githubusercontent.com&lt;br/&gt;199.232.96.133  user-images.githubusercontent.com&lt;br/&gt;185.199.109.154   github.githubassets.com&lt;br/&gt;&lt;span&gt;# GitHub End&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果发现没有作用，或者速度不理想，参考「&lt;strong&gt;查找IP&lt;/strong&gt;」内容更新下对应的&lt;code&gt;IP&lt;/code&gt;地址。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 如何修改 hosts&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1 Windows&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hosts文件位置：&lt;code&gt;C:/windows/system32/drivers/etc/hosts&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将前文内容追加到&lt;code&gt;hosts&lt;/code&gt;，然后刷新&lt;code&gt;DNS&lt;/code&gt;缓存：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ipconfig /flushdns&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2 macOS&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hosts文件位置：&lt;code&gt;/etc/hosts&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;macOS&lt;/code&gt;系统下修改需要按照如下方式：&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1：首先，打开（访达）Finder。&lt;span/&gt;&lt;/h5&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2：使用组合键&lt;code&gt;Shift+Command+G&lt;/code&gt;打开&quot;前往文件夹&quot;，输入框中输入&lt;code&gt;/etc/hosts&lt;/code&gt;。&lt;span/&gt;&lt;/h5&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3：然后就会跳转到&lt;code&gt;hosts&lt;/code&gt;文件位置。&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注意：如果你使用&lt;code&gt;VS Code&lt;/code&gt;，可以直接用&lt;code&gt;VS Code&lt;/code&gt;修改和保存。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;复制&lt;code&gt;hosts&lt;/code&gt;文件到桌面上，鼠标右键右击它，选择「打开方式」—「文本编辑」，打开这个&lt;code&gt;hosts&lt;/code&gt;文件，然后将你要修改的内容直接在里面修改就好了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后把你修改好的&lt;code&gt;hosts&lt;/code&gt;文件替换掉：&lt;code&gt;/etc/hosts&lt;/code&gt; 文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：如果弹出密码输入框，你需要输入你当前电脑登录账号的密码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后刷新缓存：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;sudo killall -HUP mDNSResponder&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3. 查找IP&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;http://tool.chinaz.com/dns&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://site.ip138.com&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://www.ipaddress.com&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注：2020年12月30日我实际使用&lt;code&gt;IPAddress&lt;/code&gt;才可以生效，前面两个查询站点获取的&lt;code&gt;IP&lt;/code&gt;均无法使用，各位可以都尝试下直到生效。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面&lt;code&gt;hosts&lt;/code&gt;里面域名里分为两类：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;*.githubusercontent.com&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;*.github.com&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;*.githubusercontent.com&lt;/code&gt;可以使用同一个&lt;code&gt;IP&lt;/code&gt;，不需要每个单独查询。&lt;code&gt;*.github.com&lt;/code&gt;未经测试，目前看是需要单独查询对应的&lt;code&gt;IP&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;其他方案&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;镜像站点&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://github.com.cnpmjs.org&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://hub.fastgit.org&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个网站是整站访问的替代品，你可以浏览项目，也支持下载检出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是不建议登陆自己的账号，毕竟不是直接访问到原站。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;文件下载&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://ghproxy.com&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://gh.api.99988866.xyz&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该方案利用&lt;code&gt;Cloudflare Workers&lt;/code&gt;对 &lt;code&gt;release&lt;/code&gt; 、&lt;code&gt;archive&lt;/code&gt;以及项目文件进行加速，部署无需服务器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果对自建感兴趣，可以访问&lt;span&gt;gh-proxy&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Raw加速&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://7ed.net/gra&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;jsDelivr&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;jsDelivr&lt;/code&gt;不支持&lt;code&gt;exe&lt;/code&gt;文件下载，使用方法参考例子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址格式如下，&lt;code&gt;version&lt;/code&gt;忽略则始终使用最新版本：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://cdn.jsdelivr.net/gh/user/repo@version/file&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 原始url&lt;/span&gt;&lt;br/&gt;https://github.com/ineo6/homebrew-install/blob/master/install.sh&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 转换结果&lt;/span&gt;&lt;br/&gt;https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p&gt;文章内链接无法跳转，可以点击“阅读原文”获得更好的点击体验。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;span&gt;参考资料&lt;br/&gt;&lt;/span&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;http://tool.chinaz.com/dns: &lt;em&gt;http://tool.chinaz.com/dns/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;https://site.ip138.com: &lt;em&gt;https://site.ip138.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;https://www.ipaddress.com: &lt;em&gt;https://www.ipaddress.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;https://github.com.cnpmjs.org: &lt;em&gt;https://github.com.cnpmjs.org/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;https://hub.fastgit.org: &lt;em&gt;https://hub.fastgit.org&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;https://ghproxy.com: &lt;em&gt;https://ghproxy.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;https://gh.api.99988866.xyz: &lt;em&gt;https://gh.api.99988866.xyz/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;gh-proxy: &lt;em&gt;https://github.com/hunshcn/gh-proxy&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;https://7ed.net/gra: &lt;em&gt;https://7ed.net/gra&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/nrI8wQaX8Myib9xibDgNP4cia7SSXmQq4VYvvXSlyOWy1S55OlI7ku9lkjHFOOZNKJURia5hQbnGLWemvF0Olx3Xug/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/nrI8wQaX8Myib9xibDgNP4cia7SSXmQq4VYYsfneoMsdVnKO4DicJiaiae3oLicLEvlicib2Sb7uCBkAXTJibqNnGzlM5n6A/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>