<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>5798dc82b254bce596cd2bac5ac6b40b</guid>
<title>这个 GitHub 项目能克隆你的声音</title>
<link>https://toutiao.io/k/3byclqk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;今天推荐一个黑科技开源项目，&lt;/span&gt;&lt;span&gt;只需要你 5 秒钟的声音对话，就能克隆出你的声音，而且能够实时的生成你任意语音。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;是不是很顶？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我觉个例子，如果我这里有 300 条你说话的语音，我把你的语音数据用这个开源项目去训练，训练完成后，我就可以使用这个训练好的模型生成任何你说的语音了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;你会听到一个声音和你一模一样的人说你没说过的话，那种感觉真的细思极恐。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个黑科技就是：Real-Time-Voice-Cloning，现在已经开源，GitHub 24K 的 Star，最重要的是，这个项目提供了 GUI 界面，交互傻瓜式操作，语音采集、训练、生成都可以交互完成，很方便。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5607476635514018&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ePw3ZeGRruyVTaH3a5FaqfEPiatjfbZDZmWO4Sll1dygEvr4VmJCnGvEic9tBMTicmiaXCD9XBiaG9MHEUjsw4E100w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1926&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;地址：https://github.com/CorentinJ/Real-Time-Voice-Cloning&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;环境配置&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先你需要 Python 3.6 的环境、安装 PyTorch（要求版本 &amp;gt; = 1.0.1）。Pytorch 是深度学习框架，你可以通过这个站点来安装这个库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://pytorch.org/get-started/locally/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;紧接着需要安装 ffmpeg：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;地址 https://ffmpeg.org/download.html#get-packages。除此之外，你还需要安装其他的依赖包。将项目下载下来，在包含 requirements.tx 目录下运行命令 pip install -r requirements.txt 就行了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;下载预训练的模型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;把开源作者训练好的模型下载下来，我们不用自己训练，直接拿来用就行了：https://github.com/CorentinJ/Real-Time-Voice-Cloning/wiki/Pretrained-models，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下载完毕要放到如下的文件夹里面。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;encoder\saved_models\pretrained.&lt;span&gt;pt&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;synthesizer\saved_models\pretrained\pretrained.&lt;span&gt;pt&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;vocoder\saved_models\pretrained\pretrained.&lt;span&gt;pt&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Details about model training &lt;span&gt;and&lt;/span&gt; audio samples can &lt;span&gt;be&lt;/span&gt; found here: http&lt;span&gt;s:&lt;/span&gt;//blue-fish.github.io/experiments/RTVC-&lt;span&gt;7&lt;/span&gt;.html&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;启动&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;当你配完了环境，就可以尝试使用这个黑科技了。&lt;/span&gt;&lt;span&gt;运行命令 python demo_toolbox.py 就能启动这个黑科技啦！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面是比较详细的使用教程，遇到问题可以查看帮助：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;https://www.bilibili.com/video/av79481223?zw&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;https://blog.csdn.net/weixin_41010198/article/details/113186232&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;最后结尾说一下，我用这个模型试了一下，因为这个模型是老外开源的，所以训练的数据是英语的语音，我试了一下说中文，简直就是不会说中文的老外讲中文一个味道，现在我怀疑世界的真实性了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开源地址：https://github.com/CorentinJ/Real-Time-Voice-Cloning&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.488245931283906&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ePw3ZeGRruyVTaH3a5FaqfEPiatjfbZDZY5rRImWfIQmfAUzGKDfbEOC4H68oavQUbGZsIib0HpCEThz7Efyk1Ow/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2212&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;最后，防止找不到本篇文章，可以收藏点赞，方便翻阅查找。&lt;/strong&gt;欢迎关注公众号 逛逛GitHub（ggGithub）。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;hr/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;1. &lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247498236&amp;amp;idx=1&amp;amp;sn=040b1a27686a89690be4f7678802a1f7&amp;amp;chksm=f9a22a35ced5a32314fff0002a2ce31854fbe33d20a42b27381a9c34966aafec49749df60a87&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;图灵的一生&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;2. &lt;/strong&gt;&lt;/em&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247498204&amp;amp;idx=1&amp;amp;sn=fbcd9dcedc3ffd82169650f46a1dec53&amp;amp;chksm=f9a22a15ced5a30307dcfb4e606ff29eff91e274d3810d73c71409b1dc648c1824864c0f226e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;阿里开源的 Java 诊断工具&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;3. &lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247497827&amp;amp;idx=1&amp;amp;sn=ba59a1acda4978b8a007dc57e1a31ec7&amp;amp;chksm=f9a22baaced5a2bc1a32ca9d7354aafe880f8a6ca211119869c8ec68e554bef9776de8fe9081&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;这俩 AI 项目贼有意思&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;4. &lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247497642&amp;amp;idx=2&amp;amp;sn=ec8f2d7a4f03a40d3186e23dadfb5da3&amp;amp;chksm=f9a22463ced5ad753dc826e9eb975a5585068c8275293cd2c7835f56cbd619cb7622c849749f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;GitHub 上的摸鱼神器&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;172&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;172&quot; data-ratio=&quot;1.005449591280654&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;734&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxW7LMX2Iz5DfjRIbFTS7UROhxibBmicicT0HpjIh1yniaJJibSnLFuicMHRx5NEdiaOh2OOACfr6MvR38ibQ/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3850576518efd1a157aa9f89517938c5</guid>
<title>独立开发变现周刊（第 1 期）: Notion 也能做博客？</title>
<link>https://toutiao.io/k/cf864l7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;h1&gt;&lt;a id=&quot;user-content-独立开发变现周刊第-1-期-notion也能做博客&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#独立开发变现周刊第-1-期-notion也能做博客&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;独立开发变现周刊（第 1 期）: Notion也能做博客？&lt;/h1&gt;
&lt;p&gt;自己一直有收集整理【独立开发变现】相关的产品、工具、开源项目、案例、资料等的习惯，最近看到阮一峰老师的【科技爱好者周刊】，很受益。自己也想以周刊的形式，把有独立产品开发相关的，有价值的东西整理出来，每周五发布。一是对自己这一周知识的整理，二是希望通过我的整理能让对别人有一点点帮助。&lt;/p&gt;
&lt;p&gt;今天是2021年5月7日，开启&lt;strong&gt;独立开发变现周刊（第 1 期）&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-1bytemd一个轻量的markdown编辑器&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#1bytemd一个轻量的markdown编辑器&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;1、ByteMD：一个轻量的Markdown编辑器&lt;/h2&gt;
&lt;p&gt;ByteMD是字节跳动开源的Markdown编辑器，基于Svelte实现的。可以和很多框架React, Vue, Angular集成。内置了一些可以选择的插件，页尾、页头、数学公式、流程图等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个 Svelte 组件编译了以后，所有需要的运行时代码都包含在里面了，除了引入这个组件本身，你不需要再额外引入一个所谓的框架运行时！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/4664d30d876d07c1fd2e7817c7fb6123f9bffd064488a3c4f1fc31c42b2889b6/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c65642e706e673f696d61676556696577322f322f772f363030&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/4664d30d876d07c1fd2e7817c7fb6123f9bffd064488a3c4f1fc31c42b2889b6/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c65642e706e673f696d61676556696577322f322f772f363030&quot; alt=&quot;&quot; data-canonical-src=&quot;http://qiniu.gafata.com/2021-05-06-Untitled.png?imageView2/2/w/600&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ByteMD开源库地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bytedance/bytemd&quot;&gt;https://github.com/bytedance/bytemd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个基于ByteMD实现的转微信公众号文章样式的工具：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devtool.tech/markdown&quot; rel=&quot;nofollow&quot;&gt;https://devtool.tech/markdown&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-2winbox一个基于html5的窗口实现&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#2winbox一个基于html5的窗口实现&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;2、winbox:一个基于HTML5的窗口实现&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/f9d698d5ec6b2812813a25666820c6720def7077b6ce8a8faa8585ffd8c91285/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230312e706e673f696d61676556696577322f322f772f363030&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/f9d698d5ec6b2812813a25666820c6720def7077b6ce8a8faa8585ffd8c91285/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230312e706e673f696d61676556696577322f322f772f363030&quot; alt=&quot;&quot; data-canonical-src=&quot;http://qiniu.gafata.com/2021-05-06-Untitled%201.png?imageView2/2/w/600&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个web端实现的窗口风格管理的插件库，轻量，开源，功能丰富的调用。像拖拽、全屏、最小化等，如果想实现类似窗口风格的管理工具，这个插件可以很方便的集成使用。&lt;/p&gt;
&lt;p&gt;在线演示地址：&lt;a href=&quot;https://nextapps-de.github.io/winbox/&quot; rel=&quot;nofollow&quot;&gt;https://nextapps-de.github.io/winbox/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github地址：&lt;a href=&quot;https://github.com/nextapps-de/winbox&quot;&gt;https://github.com/nextapps-de/winbox&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-3nobelium-nextjsnotion的静态博客系统&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#3nobelium-nextjsnotion的静态博客系统&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;3、nobelium: Next.js+Notion的静态博客系统&lt;/h2&gt;
&lt;p&gt;Nobelium 是一个使用 Next.js + Notion API 实现的，部署在 Vercel 上的静态博客系统。相当于用Notion做数据库，文档内容写完就能及时的展示在网站上。还可以搭配上翻页、评论、RSS等。&lt;/p&gt;
&lt;p&gt;Notion已经不仅仅是一个文档编辑器，还可以做数据存储，是基于Electron开发的，我个人的文档都转到了Notion下来管理，是一个非常方便的工具。还提供Private的API接口，后面可能会开放公共API接口。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/673a5811560988d50b71b06667862a5d1df4dbcb8ea0189cafc87f3ffbbc6f6e/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230322e706e673f696d61676556696577322f322f772f363030&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/673a5811560988d50b71b06667862a5d1df4dbcb8ea0189cafc87f3ffbbc6f6e/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230322e706e673f696d61676556696577322f322f772f363030&quot; alt=&quot;&quot; data-canonical-src=&quot;http://qiniu.gafata.com/2021-05-06-Untitled%202.png?imageView2/2/w/600&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/craigary/nobelium&quot;&gt;https://github.com/craigary/nobelium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;扩展介绍搭建步骤的文章：&lt;a href=&quot;https://blog.spencerwoo.com/2021/02/nextjs-blog-notion&quot; rel=&quot;nofollow&quot;&gt;https://blog.spencerwoo.com/2021/02/nextjs-blog-notion&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-4卡片设计的7个小技巧&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#4卡片设计的7个小技巧&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;4、卡片设计的7个小技巧&lt;/h2&gt;
&lt;p&gt;7个卡片设计时的小技巧，可以显著提升设计和用户体验。&lt;/p&gt;
&lt;p&gt;1、调整圆角：内外避免一样的圆角，一个原则是内部组件圆角是外部圆角的一半大小。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/f30cf5dd046236f52077db91500816a474f0d29317b1c0defa4726ed75ffb8d6/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230332e706e673f696d61676556696577322f322f772f363030&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/f30cf5dd046236f52077db91500816a474f0d29317b1c0defa4726ed75ffb8d6/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230332e706e673f696d61676556696577322f322f772f363030&quot; alt=&quot;&quot; data-canonical-src=&quot;http://qiniu.gafata.com/2021-05-06-Untitled%203.png?imageView2/2/w/600&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、高亮主要按钮：强调突出主要按钮事件&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/76b9b4b1a9428c3cb73327a843529c78a338a2d9ada046c0964219d1753643b0/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230342e706e673f696d61676556696577322f322f772f363030&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/76b9b4b1a9428c3cb73327a843529c78a338a2d9ada046c0964219d1753643b0/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230342e706e673f696d61676556696577322f322f772f363030&quot; alt=&quot;&quot; data-canonical-src=&quot;http://qiniu.gafata.com/2021-05-06-Untitled%204.png?imageView2/2/w/600&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、平滑阴影效果：避免使用太重的阴影效果&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/f8582e0fdc3eb9b7feae4f0b0d9a843fd70d97f90a53fa675aa3320bb5dc7b11/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230352e706e673f696d61676556696577322f322f772f363030&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/f8582e0fdc3eb9b7feae4f0b0d9a843fd70d97f90a53fa675aa3320bb5dc7b11/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230352e706e673f696d61676556696577322f322f772f363030&quot; alt=&quot;&quot; data-canonical-src=&quot;http://qiniu.gafata.com/2021-05-06-Untitled%205.png?imageView2/2/w/600&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4、避免太长的内容显示&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/240f12772fe3cb0e63a1ecff3da5d587d6132f8b4ed92a5aeeffb6c6ab594407/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230362e706e673f696d61676556696577322f322f772f363030&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/240f12772fe3cb0e63a1ecff3da5d587d6132f8b4ed92a5aeeffb6c6ab594407/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230362e706e673f696d61676556696577322f322f772f363030&quot; alt=&quot;&quot; data-canonical-src=&quot;http://qiniu.gafata.com/2021-05-06-Untitled%206.png?imageView2/2/w/600&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5、内容文本左对齐更加具有可读性&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/0959c8339e6cf3338ac31638e83ec36f53b8eafc23e7f3d54680c56b15393daf/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230372e706e673f696d61676556696577322f322f772f363030&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/0959c8339e6cf3338ac31638e83ec36f53b8eafc23e7f3d54680c56b15393daf/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230372e706e673f696d61676556696577322f322f772f363030&quot; alt=&quot;&quot; data-canonical-src=&quot;http://qiniu.gafata.com/2021-05-06-Untitled%207.png?imageView2/2/w/600&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6、适当留白更舒服，留白的间隔比例要一致&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/d3a6ea6213f6b753ecc0479b321b7ee5dfdef7702eb56de328b4fbd2f8789d48/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230382e706e673f696d61676556696577322f322f772f363030&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/d3a6ea6213f6b753ecc0479b321b7ee5dfdef7702eb56de328b4fbd2f8789d48/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230382e706e673f696d61676556696577322f322f772f363030&quot; alt=&quot;&quot; data-canonical-src=&quot;http://qiniu.gafata.com/2021-05-06-Untitled%208.png?imageView2/2/w/600&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;7、建议上层用大一些的阴影效果，底层的卡片用小的阴影效果。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/a2113d517dac018462e95aa8027ff2158df76dc065dc043c44cf8e8c4e848872/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230392e706e673f696d61676556696577322f322f772f363030&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a2113d517dac018462e95aa8027ff2158df76dc065dc043c44cf8e8c4e848872/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c6564253230392e706e673f696d61676556696577322f322f772f363030&quot; alt=&quot;&quot; data-canonical-src=&quot;http://qiniu.gafata.com/2021-05-06-Untitled%209.png?imageView2/2/w/600&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Twitter原文链接：&lt;a href=&quot;https://twitter.com/d__raptis/status/1385572926200688641?s=20&quot; rel=&quot;nofollow&quot;&gt;https://twitter.com/d__raptis/status/1385572926200688641?s=20&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;user-content-5landing-page检查列表&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#5landing-page检查列表&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;5、Landing Page检查列表&lt;/h2&gt;
&lt;p&gt;罗列了100+个工具，涵盖了构建Landing Page的16个步骤介绍，每一个步骤有相应的工具推荐，从域名注册、页面构建、Logo设计、文案编写等等。有很多知道的，也有很多不知道的，有的工具还是非常有意思，可以拓展下知识领域。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/4c6686c742cc2510523415a8b50a566aadda6d1ed67ead33afe584bc7c5f5243/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c656425323031302e706e673f696d61676556696577322f322f772f363030&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/4c6686c742cc2510523415a8b50a566aadda6d1ed67ead33afe584bc7c5f5243/687474703a2f2f71696e69752e6761666174612e636f6d2f323032312d30352d30362d556e7469746c656425323031302e706e673f696d61676556696577322f322f772f363030&quot; alt=&quot;&quot; data-canonical-src=&quot;http://qiniu.gafata.com/2021-05-06-Untitled%2010.png?imageView2/2/w/600&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;100+工具官网：&lt;a href=&quot;https://landingpage.fyi/landing-page-checklist.html&quot; rel=&quot;nofollow&quot;&gt;https://landingpage.fyi/landing-page-checklist.html&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;

以上内容会同步更新在：
&lt;p&gt;Indie Maker Start: &lt;a href=&quot;http://www.indiemakerstart.com/&quot; rel=&quot;nofollow&quot;&gt;http://www.indiemakerstart.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/ljinkai/weekly&quot;&gt;https://github.com/ljinkai/weekly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;微信公众号：凯凯而谈&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/f6d1874f2b76aaf2afdd63728c45c3e8f3e9cedfe89e60143a1bf01c68969f7f/687474703a2f2f71696e69752e6761666174612e636f6d2f323031392d30332d31372d7765622d626561722e6a70673f696d61676556696577322f322f772f323030&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/f6d1874f2b76aaf2afdd63728c45c3e8f3e9cedfe89e60143a1bf01c68969f7f/687474703a2f2f71696e69752e6761666174612e636f6d2f323031392d30332d31372d7765622d626561722e6a70673f696d61676556696577322f322f772f323030&quot; alt=&quot;&quot; data-canonical-src=&quot;http://qiniu.gafata.com/2019-03-17-web-bear.jpg?imageView2/2/w/200&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;扫码订阅&lt;/p&gt;

&lt;/article&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6008172363d32d3c7a1951e4398fe494</guid>
<title>可观测性理念篇：结构化日志的重要性</title>
<link>https://toutiao.io/k/a140pj2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6671875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FBPFm28kpSxicPKp3vDhZ5NJmGviaxobiaA1wogHEicqicTxZKXE86BQk2kGAMnGZKua0h0CnoMicr1W8HdHKDwibz75A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU1Njk2NjkxNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSylnVQR07iciae4vSLoFOz9MZFeicgVPZOAHAroeCXOc1J0UQOuBVuUcChJ8TBAePia5SWE2unpwoa09Q/0?wx_fmt=png&quot; data-nickname=&quot;老翟杂谈&quot; data-alias=&quot;&quot; data-signature=&quot;分享持续交付的实践经验、软件工程感悟&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;日志是软件系统的可观测性数据的最常见的媒介之一。通过日志，我们可以做很多事情：查问题、业务数据统计分析、告警监控等。这类系统，通常被称为日志平台或日志分析系统。它们的流程通常是：日志接入/采集 —&amp;gt; 日志清洗 —&amp;gt; 日志分析聚合（option） —&amp;gt; 日志存储 —&amp;gt; 日志查询。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;其中，日志清洗的定义：指通过切分、静态 Join 等操作，将日志数据转化为标准 Key-Value（KV）格式的过程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;笔者看完这个定义后，大脑就浮现一个想法：如果日志一开始就是标准的KV格式，那么，是不是就可以把日志清洗流程省下来了？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;事实上，过去2个月，我们的确这么干了。我们把所有的SpringBoot应用的日志都改成了JSON格式。而且对JSON中的Key进行了规范。将来，我们还会制定一个日志规范，以规范其它语言的应用的日志。这样进一步扩大日志结构化所带来的好处。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过这种方式，我们节约了以下成本：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1. 日志清洗的程序的开发、运行、维护费用。&lt;/p&gt;&lt;p&gt;2. 日志的解析成本：程序员随意打日志，数据工程师只能被动的分析。&lt;/p&gt;&lt;p&gt;3. 查询日志的认知成本：过去是通过grep命令进行查询，现在通过SQL的方式查询。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然，结构化日志本身也有成本：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1. 对历史日志的改造。这部分笔者认为可以看场景而定。&lt;/p&gt;&lt;p&gt;2. 开发人员的打日志习惯的改变成本，比如培训成本。&lt;/p&gt;&lt;p&gt;3. 日志框架本身的实现成本。我们就基于logback-stash实现了自己的日志框架（只是进行了很轻的封装）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;结构化日志本身的成本，比起日志清洗成本，根本不算什么。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本文只是简单介绍了日志非结构化与结构化之间的成本差异。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下一篇介绍基于SpringBoot的实践经验。请关注的我的公众号：&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU1Njk2NjkxNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/FBPFm28kpSylnVQR07iciae4vSLoFOz9MZFeicgVPZOAHAroeCXOc1J0UQOuBVuUcChJ8TBAePia5SWE2unpwoa09Q/0?wx_fmt=png&quot; data-nickname=&quot;老翟杂谈&quot; data-alias=&quot;&quot; data-signature=&quot;分享持续交付的实践经验、软件工程感悟&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;本文插图：https://pixabay.com/zh/photos/woman-camera-photographer-tool-5584377/&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3c69f83df155cfa0d70942de9525c78c</guid>
<title>Chromium 90, 给前端用的 devtools 的前端写得有性能问题</title>
<link>https://toutiao.io/k/i888g51</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post__content e-content&quot;&gt;&lt;p&gt;以此拗口又搞笑的标题纪念一下人生第一次给 Chromium 项目提的 &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=1201609&quot;&gt;issue&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#%E7%BC%98%E8%B5%B7&quot; aria-label=&quot;缘起 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;缘起&lt;/h1&gt;
&lt;p&gt;4月中旬后的一周里，感觉使用 Chrome Devtools 调试非常的卡，尤其是在刚打开 Devtools 的时候卡上七八秒。严重影响了工作效率，心情烦躁，提升了社会不稳定因素（大雾）。&lt;/p&gt;
&lt;h1 id=&quot;定位问题&quot;&gt;&lt;a href=&quot;#%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98&quot; aria-label=&quot;定位问题 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;定位问题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;打开 Mac 的 Activity Monitor，明显发现打开 Devtools 时 Renderer 进程 CPU 飚上 100。&lt;/li&gt;
&lt;li&gt;以上情形只发生在 Devtools 打开 Console tab 的时候，如果一开始并没有打开 Console，就没有卡顿。&lt;/li&gt;
&lt;li&gt;仅在 Console tab 有大量 log 的情况下出现此问题，log 较少时正常。&lt;/li&gt;
&lt;li&gt;使用 Vivaldi 浏览器没有问题，当时它基于 Chromium 89。Chrome 90 和同样基于 90 的 Edge 稳定版出现问题，因此把定位范围缩小到了 Chromium 90 的 Devtools 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Devtools 本身就是用于前端调试和发现潜在性能问题的工具，那么我们用什么来调试它呢？&lt;/p&gt;
&lt;h2 id=&quot;使用-chrometracing&quot;&gt;&lt;a href=&quot;#%E4%BD%BF%E7%94%A8-chrometracing&quot; aria-label=&quot;使用 chrometracing permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;使用 chrome://tracing&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Chromium 的 [Tracing 工具](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) 可以详细录制 Chromium 各个进程的运行时方法调用和占时，包括 C++ 和 Javascript。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;chrome://tracing 除了录制以外，也是一个比较好用的 trace-viewer，可用来查看和分析由其他工具（例如 Android systrace, Electron 等）录制的 &lt;a href=&quot;https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/preview&quot;&gt;trace 数据&lt;/a&gt;。特别说一句，它也可以用来查看 Chrome Devtools Performance 录制的数据，但感觉 Viewer 的侧重不在 Web 开发的角度，没有 Devtools Performance 本身的查看器好用。&lt;/p&gt;
&lt;p&gt;一些参考教程如下:&lt;/p&gt;

&lt;h2 id=&quot;开始录制&quot;&gt;&lt;a href=&quot;#%E5%BC%80%E5%A7%8B%E5%BD%95%E5%88%B6&quot; aria-label=&quot;开始录制 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;开始录制&lt;/h2&gt;
&lt;p&gt;点开 chrome://tracing 页面左上角的 &lt;code&gt;Record&lt;/code&gt; 按钮，然后&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择 &lt;code&gt;Manually select settings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;Record Categories&lt;/code&gt; 的几十个选项里，勾上 &lt;code&gt;devtools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;Record&lt;/code&gt; 开始录制&lt;/li&gt;
&lt;li&gt;操作复现出 Console tab 的卡顿&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是我随便找来的一张截图，展示一下 &lt;code&gt;Record Categories&lt;/code&gt; 里的茫茫选项。里面的 v8/cc/blink 等，是前端工程师日常可以看一看的，可以了解一下 Chromium 一些运行时候的执行过程概略。当然这是建立在你对 Chromium 感兴趣和略有了解的基础上的，前端开发还是主要面向 Web 标准，日常还是应该使用没那么艰深的 Devtools，而不是一头扎入浏览器实现的细节中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d34u8crftukxnk.cloudfront.net/slackpress/prod/sites/7/1_b0nzVLLW3IujyAkrB5vr-w.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;定位到问题&quot;&gt;&lt;a href=&quot;#%E5%AE%9A%E4%BD%8D%E5%88%B0%E9%97%AE%E9%A2%98&quot; aria-label=&quot;定位到问题 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;定位到问题&lt;/h2&gt;
&lt;p&gt;Devtools 的渲染主线程有触目惊心的近 6 秒卡顿，此时 V8 在执行 JS，看起来就🧐... 是前端的锅。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/05/06/XecCki83ajl9bun.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h1 id=&quot;提-issue&quot;&gt;&lt;a href=&quot;#%E6%8F%90-issue&quot; aria-label=&quot;提 issue permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;提 issue&lt;/h1&gt;
&lt;p&gt;去 &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/list&quot;&gt;Issues - chromium&lt;/a&gt; 提一个 issue，贴上截图、可重现问题的 html 文件、tracing 录制压缩包。&lt;/p&gt;
&lt;p&gt;Chromium 缺陷追踪工具界面好难用，里里外外散发着 G 家工程向产品一贯的简陋风格。&lt;/p&gt;
&lt;h1 id=&quot;后续&quot;&gt;&lt;a href=&quot;#%E5%90%8E%E7%BB%AD&quot; aria-label=&quot;后续 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;后续&lt;/h1&gt;
&lt;h2 id=&quot;发现-chromium-91-已修复此问题&quot;&gt;&lt;a href=&quot;#%E5%8F%91%E7%8E%B0-chromium-91-%E5%B7%B2%E4%BF%AE%E5%A4%8D%E6%AD%A4%E9%97%AE%E9%A2%98&quot; aria-label=&quot;发现 chromium 91 已修复此问题 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;发现 chromium 91 已修复此问题&lt;/h2&gt;
&lt;p&gt;Devtools 的前端项目有一个自己的 repo，&lt;a href=&quot;https://chromium.googlesource.com/devtools/devtools-frontend&quot;&gt;devtools/devtools-frontend - Git at Google&lt;/a&gt;，翻了一下发现&lt;a href=&quot;https://chromium-review.googlesource.com/c/devtools/devtools-frontend/+/2813962&quot;&gt;这个 Gerrit Change&lt;/a&gt; 修复了此性能问题。&lt;/p&gt;
&lt;h1 id=&quot;更多阅读&quot;&gt;&lt;a href=&quot;#%E6%9B%B4%E5%A4%9A%E9%98%85%E8%AF%BB&quot; aria-label=&quot;更多阅读 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;更多阅读&lt;/h1&gt;
&lt;p&gt;对 Devtools 项目有兴趣的，可以看一下他们的 engineering 博客和贡献指南。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>493d124bf0d555858ca0f51846de8d69</guid>
<title>消息队列把消息弄丢了怎么办？</title>
<link>https://toutiao.io/k/w8wyj2e</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消息队列会丢失消息吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是肯定的，所以对于业务严谨的数据，我们要确保其在消息队列中的安全，不能丢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要想解决不丢的问题，首先要弄清楚 &lt;strong&gt;消息是怎么丢的呢？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;丢消息的关键点有3个：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Producer 发送消息的过程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息队列的消息存储&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Consumer 消费消息的过程&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面挨个看看都是怎么丢的，以及解决方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会以 RabbitMQ 和 Kafka 这两个常用的消息系统来说明。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. Producer 弄丢消息&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Producer 向 MQ 发消息，很简单，发过去就完事儿了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，在发送图中是存在危险的，例如网络问题等等，导致 MQ 没有正常收到。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.22686025408348456&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl91WsPa1scdJOfKMWc9GOZugyEoByknO5tEicuWbjL9iaY4ZmTbv1TO5czbHqsOVFibpXjXKq7IFJAiamg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1102&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;怎么解决呢？&lt;/strong&gt; 思路很简单，让 MQ 发一个 &lt;strong&gt;接受确认声明（ack）&lt;/strong&gt; 就行了，就像快递需要签收一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如 &lt;strong&gt;RabbitMQ&lt;/strong&gt;，有两种方式可以确保发送消息的安全。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）事务消息&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Producer 发送消息之前，先开启事务，然后再发送。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果 RabbitMQ 没有正常收到消息，Producer 会收到异常信息，回滚事务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果正常接收了，Producer 就提交事务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很可靠，但效率低，因为这个事务模式是同步的，会产生阻塞。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）confirm 确认模式&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Producer 开启 confirm 模式，发送消息的时候，RabbitMQ 会给这个消息分配一个唯一的 ID。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;成功写入队列之后，RabbitMQ 会向 Producer 发送一个 ack 消息，说明此 ID 的消息已经成功发送。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;confirm 模式还有一个回调机制，Producer 可以准备一个失败的接口，供 RabbitMQ 在接收失败时调用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Producer 收到失败通知，或者超时了，可以执行相应的处理逻辑，例如重发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;confirm 模式是异步的，比事务消息更高效，使用更为广泛。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Kafka&lt;/strong&gt; 也是使用的 ack 方式，使用方式很简单，只要配置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ack=all&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;确保 Kafka 在完全接收成功后才发送确认通知，这样就一定不会发丢了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. MQ 在存储期间弄丢消息&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MQ 成功接收消息之后，需要保存起来，等着 Consumer 消费。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个保存期间，也可以能丢失消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这通常是由 &lt;strong&gt;MQ 故障&lt;/strong&gt;引起的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt; 想要保障消息不丢，需要开启&lt;strong&gt;持久化&lt;/strong&gt;，消息就会写入磁盘。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即使 RabbitMQ 宕机了，只要磁盘没事儿，重启之后还可以重新把消息加载进来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想进一步的保障消息安全，就需要配置 RabbitMQ 的镜像集群了，来确保高可用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Kafka&lt;/strong&gt; 是天然的分布式系统，Topic 分为多个 Partition，每个 Partition 又有多个副本。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6761006289308176&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl91WsPa1scdJOfKMWc9GOZugR2icwpqwEBqYdsmCHAEic3bk1hGKwYyncpADdBCppPgkKO5f7tj2QwwQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1272&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Partition 的多个副本，分为 Leader 和 Follower。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Leader 负责处理消息的读写，Follower 负责备份。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面说的 Kafka 配置 &lt;code&gt;ack=all&lt;/code&gt;，就是告诉Kafka，Leader 和所有 Follower 全都接收到了，才算发送 ack 确认，只有 Leader 自己接收成功是不算的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;否则的话，如果 Leader 接收完成就告诉 Producer OK 了，在 Leader 同步给 Follower 之前，Leader 宕机了，Kafka 会从 Follower 中选举出新的 Leader。那么，老 Leader 在临终前没有同步的消息就丢失了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了保障消息的安全，这 4 个参数要设置好：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;replication.factor&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用于指定 Partition 副本的数量，必须大于 1，就是至少要有 2 个副本，一个 Leader 一个 Follower。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;min.insync.replicas&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用于指定几个副本成功写入才&lt;strong&gt;提交消息&lt;/strong&gt;，只有提交之后的消息才能被 Consumer 消费。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此值至少大于 1，这样就保障 Leader 之外至少有一个副本同步到了这条消息，不怕 Leader 宕掉了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;acks=all&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用于指定几个副本接收到消息之后向 Producer 发送 ack。例如值为 1，表示 Leader 收到就可以了，“all” 表示 “所有副本”，也可以写 “-1”，等同于 “all”。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;retries=999&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用于指定 Producer 发送失败后的重试次数，可以设为一个很大的数，表示失败了就重试，提升发送成功几率。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. Consumer 弄丢消息&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.40145985401459855&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl91WsPa1scdJOfKMWc9GOZugPx5hlyic5y1XmeZNN4WVXxiajPRJV3JflgyEysAb1iaXib4LbNLIvibUD4Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1096&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如 Consumer 成功接收到了消息 “123”，MQ 就会移除这条消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但在 Consumer 处理完这条消息之前，宕机了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.30127041742286753&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl91WsPa1scdJOfKMWc9GOZugQypzrOFddiciboSBA7k1FjsoPWgc4sXpZN5Pz5B9RfVQAC1vM0BDel7g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1102&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Consumer 重启之后继续从 MQ 拿消息，这次拿到的就是下一条消息 “124”，那么 “123” 就丢了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，Consumer 只是接收到消息是不够的，&lt;strong&gt;成功处理完成&lt;/strong&gt;才行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就和 MQ 的消费确认机制有关了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt; 默认是 Consumer 成功接收消息之后就发送 ack 确认，RabbitMQ 就认为消费成功了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关闭自动的 Consumer ack 就行，改为手动发送确认通知。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Kafka&lt;/strong&gt; 的 Consumer 发送的不是 ack 确认，而是 offset，告诉 Kafka 已经消费到哪个位置了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认是 Consumer 接收后自动提交 offset，所以也需要关闭，改为手动提交。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;小结一下&lt;/strong&gt;，要想消息不丢，需要发消息的时候确认发送成功了，MQ 存储的时候要是高可靠的，Consumer 消费的时候，不能接收之后就确认，真正处理完成才行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4Nzc4MjI4MQ==&amp;amp;mid=2652403576&amp;amp;idx=1&amp;amp;sn=00b6cc6110cbfc191d4efdcefd6432da&amp;amp;chksm=8bd8f19ebcaf7888b30a7491523de976154e0bcdd41df2167f10fd22c8526a392e9f7870cc75&amp;amp;token=456207156&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;OAuth2 图解&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4Nzc4MjI4MQ==&amp;amp;mid=2652403396&amp;amp;idx=1&amp;amp;sn=53ac0376b271abab985de793a9a66bb0&amp;amp;chksm=8bd8f022bcaf7934051078105e66fa8f2986e4daaa067a0c6ea3668eb04b728762ba241547cc&amp;amp;token=456207156&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;轻松理解 Kubernetes 的核心概念&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4Nzc4MjI4MQ==&amp;amp;mid=2652403407&amp;amp;idx=1&amp;amp;sn=69489b882cfafb77607a80e150d47b19&amp;amp;chksm=8bd8f029bcaf793fc8435b45f4bd2058200406e7a5f38665ef79acdb382feabacc8c5e5ac904&amp;amp;token=456207156&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;开发者必须要了解的架构技术趋势：Service Mesh&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>