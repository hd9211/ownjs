<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>275829ad82d8c1246384faeb4304f836</guid>
<title>支撑 700 亿数据量的 ClickHouse 高可用架构实践</title>
<link>https://toutiao.io/k/f5v4m55</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>202454cff8d46cdfa5cf4eddec2f1d7e</guid>
<title>工程师职级胜任力框架</title>
<link>https://toutiao.io/k/rxxemhb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ELH62gpbFmH0JY0UHlcISedhbJf4mk0F2GS7YbIR7MChuJ9eDFrYuDwWsx5DdpRicldOhichSslBylibnznibz4J2Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;h2&gt;一、前言&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;尽管这些年国内的IT行业发展迅速，但是仍然欠缺一套比较综合性的面向工程师的职级胜任力框架，造成国内很多工程师大都一心只想成为技术大牛，而忽视了自己全方位的工程师职业素养和能力的培养。&lt;/p&gt;&lt;p&gt;最近我有幸读到了Circle CI公司分享的&lt;span&gt;工程胜任力矩阵&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt;，发现这份文档就是一份比较贴合互联网研发型企业的工程师职级胜任力框架，于是我在它的基础上，重新整理出了一份更适合国内工程师阅读的《工程师职级胜任力框架》，并把它分享在我的&lt;span&gt;github站点&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;上，希望这份文档对工程师的职业开发和成长有帮助。注，Circle CI是美国一家专注CI/CD持续交付领域的SaaS企业服务公司，公司成立于2011年，今年(2020年)已经到E轮1亿美金融资。工程胜任力矩阵是Circle CI公司的HR和工程团队联合开发，于2018年在其&lt;span&gt;技术博客上&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;公开分享出来的。&lt;/p&gt;&lt;h2&gt;二、目标&lt;/h2&gt;&lt;p&gt;工程师职级胜任力框架的主要目标是：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;作为工程师职业开发和成长路径的对标参考&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;作为管理者评估工程师职级/能力+目标设定的对标参考&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;作为HR开发工作描述(JD)和评估候选人职级/能力的对标参考&lt;/span&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;作为企业文化建设的一种手段，将企业的核心价值观和文化融入职级胜任力框架(codify core value and culture into engineering level &amp;amp; competency matrix)，通过职级框架来引导工程师的价值认同和文化行为。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;三、说明&lt;/h2&gt;&lt;p&gt;1.职级一共分六级，分别如下:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;E1 - 助理工程师(Associate Engineer)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;E2 - 工程师(Engineer)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;E3 - 高级工程师(Senior Engineer)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;E4 - 资深工程师(Staff Engineer)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;E5 - 高级资深工程师(Senior Staff Engineer)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;E6 - 首席工程师(Principal Engineer)&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2.评估的纬度共分&lt;strong&gt;5个关键区Key area&lt;/strong&gt;，关键区再细分为&lt;strong&gt;15个价值Value维度&lt;/strong&gt;，价值维度再细分为&lt;strong&gt;27个胜任力Competency纬度&lt;/strong&gt;。其中5个关键区分别是：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;技术技能(Technical skills)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;交付(Delivery)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;反馈、沟通和协作(Feedback, Communication, Collaboration)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;领导力(Leadership)&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;战略性影响(Strategic Impact)&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;3.各个工程级别的&lt;strong&gt;最主要差异&lt;/strong&gt;在所能hold住的&lt;strong&gt;工作的范围scope&lt;/strong&gt;，或者说&lt;strong&gt;影响力范围&lt;/strong&gt;，其中：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;E1 ～ E3 属于独立贡献者(individual contributor)，工作范围有限，偏任务执行(Execution of Work)&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;E1: 任务范围内&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;E2: 项目范围内&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;E3: 小组/团队内&lt;/span&gt;&lt;/p&gt;&lt;p&gt;E4 ～ E6 能够善用人力(一般要带团队)和产品等杠杆进行规模化的生产(Utilizing skills to scale and generate leverage)，职级越高越偏向战略方向、理念和文化建设&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;E4: 整个团队范围&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;E5: 几个相关团队范围&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;E6: 整个技术部门甚至公司&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4.具体做性能评估时，各级别工程师对5个关键区的权重不同，一般E1-E3偏重技术技能和交付，而E4-E6则偏重反馈、沟通/协作、领导力和战略性影响。&lt;/p&gt;&lt;p&gt;5.各个职级之间的另外一个主要差别在&lt;strong&gt;表现某种行为的频度&lt;/strong&gt;，分为：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;偶尔能&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;经常能&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;总是/始终能&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;6.该框架的目标不是将工程师培养成技术牛人，&lt;strong&gt;技术能力在整个框架中只占五分之一&lt;/strong&gt;，而是希望提升工程师的综合素养和能力。&lt;/p&gt;&lt;h2&gt;四、职级和胜任力评估框架&lt;/h2&gt;&lt;h2&gt;1、技术技能&lt;/h2&gt;&lt;h3&gt;1.1 质量和测试&lt;/h3&gt;&lt;h3&gt;1.1.1 写代码&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;写代码时能意识到代码的可测试性和可读性的重要性，能意识到边界情况和错误处理。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;&lt;strong&gt;总是能&lt;/strong&gt;写出易于测试和易于他人理解的代码，能考虑到各种边界情况并做合理错误处理。能书写有效的代码文档。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;总是能写出易于测试和易于其他开发者理解的&lt;strong&gt;生产级的代码&lt;/strong&gt;，能充分考虑各种边界情况和做充分的错误处理。知道在&lt;strong&gt;必要时&lt;/strong&gt;写代码注释，同时尽量让代码&lt;strong&gt;自注释self-documenting&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;同E3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;同E3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;同E3&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;1.1.2 测试&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;知道测试金字塔。能写单元测试(有时需要高级工程师的协助)。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;&lt;strong&gt;理解&lt;/strong&gt;测试金字塔原理，并能根据测试金子塔的原理来编写单元测试，能在高级别工程师指导下编写高层测试(组件、集成、e2e测试等)。不仅能测试成功路径(happy path)，同时也能充分&lt;strong&gt;测试边界和错误情况&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;理解测试金字塔原理，并根据其原理来编写底层单元测试和中高层测试。能写出&lt;strong&gt;高质量的&lt;/strong&gt;测试用例，全面覆盖成功路径、边界和错误情况。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;理解&lt;strong&gt;团队&lt;/strong&gt;所使用的测试方法，通过质量指标改进测试。能根据团队所采用的测试框架和测试金字塔原理来改进测试方法。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;理解&lt;strong&gt;多个团队&lt;/strong&gt;所使用的测试方法，并通过质量指标来改进测试。和这些团队协作，根据所采用的测试框架和测试金字塔原理来改进测试方法。&lt;strong&gt;能对组织的测试战略施加影响&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;理解&lt;strong&gt;公司级&lt;/strong&gt;的测试方法，并通过质量指标来改进测试。和&lt;strong&gt;所有团队&lt;/strong&gt;合作，根据所采用的测试框架和测试金子塔原理来改进测试方法。&lt;strong&gt;推进&lt;/strong&gt;公司级的测试战略。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;1.1.3 调试&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;理解调试基础，知道如何使用调试工具。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;能够使用&lt;strong&gt;系统性方法&lt;/strong&gt;定位和调试单个服务的问题。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;能够&lt;strong&gt;熟练使用系统性方法&lt;/strong&gt;定位和调试单个服务中的所有问题。能够使用系统性方法定位和调试&lt;strong&gt;跨服务问题&lt;/strong&gt;(有时需要更高级工程师协助)。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;&lt;strong&gt;在所负责的领域内&lt;/strong&gt;，能熟练使用系统方法定位和调试所有问题。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;&lt;strong&gt;在所负责的几个领域内&lt;/strong&gt;，能熟练使用系统方法定位和调试所有问题。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;在需要时领导&lt;strong&gt;跨部门的&lt;/strong&gt;事件应急响应机制。使用系统性方法定位和调试&lt;strong&gt;跨部门边界&lt;/strong&gt;的问题。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;1.1.4 可观测性(Observability)&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;N/A(该级别暂无要求)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;知道组织的监控理念，并熟悉自己团队领域内的主要运维监控指标。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;知道组织的监控理念。&lt;strong&gt;能帮助团队改进监控&lt;/strong&gt;。能根据团队领域内的运维监控数据，&lt;strong&gt;对系统的稳定性和性能改进提出合理建议&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;根据组织的监控理念&lt;strong&gt;推动&lt;/strong&gt;所在团队的监控工作。清楚知道所在领域的运维监控数据，能利用这些数据来推动团队&lt;strong&gt;改善&lt;/strong&gt;服务的稳定性和性能。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;在多个团队间推动&lt;strong&gt;可观测的DevOps文化&lt;/strong&gt;，帮助工程师利用运维数据来提升各自领域服务的稳定性和性能。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;多个部门间&lt;/strong&gt;推进可观测的DevOps文化，帮助公司内&lt;strong&gt;不同部门的&lt;/strong&gt;工程团队利用运维数据来提升各自领域服务的性能和稳定性。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;1.2 软件设计和架构&lt;/h3&gt;&lt;h3&gt;1.2.1 理解领域(domain)&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;在高级工程师的帮助下，对团队的领域上下文有初步理解。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;对团队内的&lt;strong&gt;某部分领域&lt;/strong&gt;有较深入理解，能在该领域内高产出地工作。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;对团队内的&lt;strong&gt;某个子领域&lt;/strong&gt;有专业级掌握，能够进行一定的&lt;strong&gt;抽象建模&lt;/strong&gt;，能利用领域抽象能力高产出地工作&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;对&lt;strong&gt;团队负责的整个领域&lt;/strong&gt;有专家级的掌握，包括领域内的服务，它们之间的交互，系统间的数据流等。&lt;strong&gt;对周边领域也要有一定理解，因为它们会影响自己团队的领域&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;对&lt;strong&gt;若干个相关领域&lt;/strong&gt;有专家级掌握，包括领域内的服务，它们之间的交互，系统间的数据流等。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;对&lt;strong&gt;组织的整体架构&lt;/strong&gt;有专家级的掌握，&lt;strong&gt;包括所有的领域，领域之间的边界，以及它们之间如何交互&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;1.2.2 软件架构&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;对服务化架构有总体认识，在此基础上能够设计基本的服务/模块，同时尽量避免冗余代码/功能，减少对接口的不兼容变更。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;设计的服务要和总体服务化架构&lt;strong&gt;对齐&lt;/strong&gt;(align with)。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;设计的服务/系统和总体架构&lt;strong&gt;始终对齐&lt;/strong&gt;。能高效地利用&lt;strong&gt;抽象、模块化和重用机制&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;使用行业沉淀下来的成熟的&lt;strong&gt;设计模式&lt;/strong&gt;来架构服务和系统，让团队可以&lt;strong&gt;增量和自治&lt;/strong&gt;的开发，并考虑未来的扩展性。考虑未来的可能用例场景，在做设计决策时，以&lt;strong&gt;最小化未来变更成本&lt;/strong&gt;为主要目标(也就是架构要灵活适应未来的变化)。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;多个团队之间&lt;/strong&gt;宣导能支持增量和自治开发的，并且能支持未来扩展的&lt;strong&gt;架构文化&lt;/strong&gt;。指导&lt;strong&gt;多个团队&lt;/strong&gt;考虑未来的可能用例场景，在做设计决策时，以最小化未来的变更成本为主要目标。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;整个组织内&lt;/strong&gt;宣导能支持增量和自治开发的，并且能支持未来扩展的架构文化。指导&lt;strong&gt;组织内的所有团队&lt;/strong&gt;考虑未来的可能用例场景，在做设计决策时，以最小化未来的变更成本为目标。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;1.2.3 安全&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;理解安全的重要性。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;理解安全的重要性。在做对安全可能有影响的决策时，咨询更高级工程师的意见。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;&lt;strong&gt;所有工程工作&lt;/strong&gt;都要经过“安全放大镜”的检视。在做code review和peer review时，主动留意安全漏洞。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;积极和安全团队，还有自己的团队进行合作，根据组织的安全战略改进团队的安全方法。在团队中鼓励**安全优先(security first)**的理念，并作出榜样(leading by example)。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;积极和安全团队，还有其他&lt;strong&gt;多个团队&lt;/strong&gt;进行合作，保障组织安全战略的落地。在&lt;strong&gt;多个团队间&lt;/strong&gt;鼓励安全优先(security first)的理念，并作出榜样。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;积极和安全团队进行合作来制定和完善&lt;strong&gt;组织级别的安全战略&lt;/strong&gt;。在&lt;strong&gt;多部门间&lt;/strong&gt;宣导安全优先的理念。&lt;strong&gt;能够识别不易被他人察觉的安全威胁&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;2、交付&lt;/h2&gt;&lt;h3&gt;2.1 增量价值交付&lt;/h3&gt;&lt;h3&gt;2.1.1 任务分解&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;理解合理地将工作分解为大小适当的任务对持续集成和增量交付的重要性。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;在开始工作之前，&lt;strong&gt;确保&lt;/strong&gt;任务已经被分解到适合持续集成和增量交付的大小(通常需要团队成员和管理者的帮助)。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;带着批判性眼光评审&lt;strong&gt;任务&lt;/strong&gt;分解，确保任务已经被分解到适合持续集成和增量交付的大小。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;带着批判性眼光评审&lt;strong&gt;项目&lt;/strong&gt;分解，确保项目已经被分解到适当大小并排优先级，并且团队成员充分理解这种分解和优先级。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;带着批判性眼光评审&lt;strong&gt;跨团队的工作&lt;/strong&gt;分解，确保工作已经被分解到适当大小并排了优先级。并且所有涉及的团队都理解这种分解和优先级。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;带着批判性眼光评审&lt;strong&gt;组织级的工作&lt;/strong&gt;分解，确保工作已经被适当分解并且在&lt;strong&gt;多部门间&lt;/strong&gt;排了工作优先级。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;2.1.2 优先级和依赖分析&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;按照优先级执行任务。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;理解并按照优先级执行任务。关注和说明&lt;strong&gt;任务依赖&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;&lt;strong&gt;确保&lt;/strong&gt;任务的优先级设定合理，并且能说明依赖关系。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;确保任务级别的依赖关系已经被说明，并且团队也理解这些依赖关系。在团队中宣导&lt;strong&gt;优先级文化&lt;/strong&gt;：集中力量解决优先级高的任务 + 优先级的设定要和组织战略对齐。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;确保&lt;strong&gt;跨团队的&lt;/strong&gt;项目依赖关系已经被说明，并且&lt;strong&gt;所有涉及的团队和干系人stakeholders&lt;/strong&gt;都充分理解这些依赖关系。在&lt;strong&gt;多个团队间&lt;/strong&gt;宣导优先级文化：集中力量解决优先级高的任务/项目 + 优先级的设定要和组织战略对齐。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;识别组织的&lt;strong&gt;多个部门间的&lt;/strong&gt;项目依赖关系，并且和相关团队合作，在这些依赖变成实际问题之前先想办法解决它们，并设计出预防性措施以防止依赖问题的重复出现。在&lt;strong&gt;多个部门间&lt;/strong&gt;宣导优先级文化：集中力量解决优先级高的项目 + 优先级的设定要和组织战略对齐。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;2.1.3 应对不确定性(Dealing with ambiguity)&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;N/A(该级别暂无要求)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;在个人工作范围内，&lt;strong&gt;通常&lt;/strong&gt;能够有效处理风险、变更和不确定性。在日常业务处理(甚至在高压情况)中，即使没有明确的下一步指示，也能自动自发地决策和行动。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;在个人工作范围内，能够有效处理风险、变更和不确定性。在日常业务处理(甚至在高压情况)中，即使没有明确的下一步指示，也能自动自发地决策和行动。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;&lt;strong&gt;在团队范围内&lt;/strong&gt;，能够有效处理风险、变更和不确定性。&lt;strong&gt;在团队范围内&lt;/strong&gt;，在日常业务处理(甚至在高压情况)中，即使没有明确的下一步指示，也能自动自发地决策和行动。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;&lt;strong&gt;在多个团队范围内&lt;/strong&gt;，能够有效处理风险、变更和不确定性。&lt;strong&gt;在多个团队范围内&lt;/strong&gt;，在日常业务处理(甚至在高压情况)中，即使没有全景(total picture，足够的上下文)，也能自动自发地决策和行动。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;&lt;strong&gt;在多个部门范围内&lt;/strong&gt;，能够有效处理风险、变更和不确定性。&lt;strong&gt;在多个部门范围内&lt;/strong&gt;，在日常业务处理(甚至在高压情况)中，即使没有全景，也能自动自发地决策和行动。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;2.2 自我组织(self-organization)&lt;/h3&gt;&lt;h3&gt;2.2.1 可信赖和责任感&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;能够每天和团队交流工作进度。能够履行已经承诺的交付，并且具有一定的交付紧迫感。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;承诺和自身工作能力匹配的工作量(不夸大也不低估)，和团队保持沟通，以确保他们理解你的工作的优先级和紧迫性，并按照承诺履行交付。如果有任何阻碍(blockers)、延迟和成本激增问题，则&lt;strong&gt;每天要及时&lt;/strong&gt;将这些问题升级反馈到团队。和团队&lt;strong&gt;澄清各自对工作的预期是什么&lt;/strong&gt;(避免last minute surprise)。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;确保&lt;strong&gt;理性和现实的&lt;/strong&gt;承诺，确保团队理解你的工作的优先级和紧迫性，并按照承诺履行交付。在需要升级阻碍、延迟和成本激增等问题之前，&lt;strong&gt;提前预期&lt;/strong&gt;并沟通这些潜在的问题(防患于未然)。确保在团队中，&lt;strong&gt;所有相关人员&lt;/strong&gt;对各自的工作的预期都是清楚的。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;所在团队的项目&lt;/strong&gt;中，在需要升级阻碍、延迟和成本激增等问题之前，提前预期并沟通这些潜在的问题(防患于未然)。确保在&lt;strong&gt;所在团队和外部干系人&lt;/strong&gt;中，所有相关人员对各自的工作的预期都是清楚的。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;能够成功管理&lt;strong&gt;多个团队&lt;/strong&gt;的交付承诺，交付路线图和进度汇报。在&lt;strong&gt;多个团队&lt;/strong&gt;的项目中，在需要升级阻碍、延迟和成本激增等问题之前，提前预期并沟通这些潜在的问题(防患于未然)。确保在&lt;strong&gt;多个团队和外部干系人&lt;/strong&gt;中，所有相关人员对各自的预期都是清楚的。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;能够成功管理&lt;strong&gt;整个组织级&lt;/strong&gt;的交付承诺，交付路线图和进度汇报。确保在&lt;strong&gt;多个部门和外部干系人&lt;/strong&gt;中，所有相关人员对各自的预期都是清楚的。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;2.2.2 经济思维&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;理解在决策中的成本 vs 价值权衡的重要性。在工作中如果碰到需要这种决策的场景时，能够向更高级的工程师求助。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;在采取具体行动方案时，能够做&lt;strong&gt;成本 vs 价值分析&lt;/strong&gt;，并采用最经济的行动方案，必要时向更高级的工程师咨询。在对团队成员提供建议时，&lt;strong&gt;有时&lt;/strong&gt;能采用这种经济思维。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;在采取具体行动方案时，能够做成本 vs 价值分析，并采用最经济的行动方案，必要时咨询更高级的工程师。在自己的工作中，和对团队提供建议时，&lt;strong&gt;经常使用&lt;/strong&gt;这种经济思维。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;在采取具体行动方案时，能够做成本 vs 价值分析，并采用最经济的行动方案。在自己的工作中经常使用这种经济思维。在&lt;strong&gt;所在团队中&lt;/strong&gt;宣导这种&lt;strong&gt;经济思维文化&lt;/strong&gt;(economic thinking culture)，确保作出及时且经济的决策。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;在采取具体行动方案时，能够做成本 vs 价值分析，并采用最经济的行动方案。在自己的工作中经常使用这种经济思维。在&lt;strong&gt;多个团队中&lt;/strong&gt;宣导经济思维文化，确保作出及时且经济的决策。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;在采取具体行动方案时，能够做成本 vs 价值分析，并采用最经济的行动方案。在自己的工作中经常使用这种经济思维。在&lt;strong&gt;整个组织中&lt;/strong&gt;宣导经济思维文化，确保作出及时且经济的决策。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;3、反馈、沟通和协作&lt;/h2&gt;&lt;h3&gt;3.1 反馈&lt;/h3&gt;&lt;h3&gt;3.1.1 提供反馈&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;知道如何有效地赞扬他人，如何提出建设性反馈。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;能够对&lt;strong&gt;团队组员和管理者&lt;/strong&gt;表达赞扬和提出建设性反馈。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;能够对团队组员和管理者表达赞扬和提出建设性反馈。&lt;strong&gt;在时机恰当时，能够对团队的业务干系人提供反馈&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;团队和团队的业务干系人&lt;/strong&gt;中，鼓励赞扬和提出建设性反馈的文化。自己身体力行展示这种行为。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;多个团队&lt;/strong&gt;和团队的业务干系人中，鼓励赞扬和提出建设性反馈的文化。身体力行展示这种行为。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;整个组织&lt;/strong&gt;中，鼓励赞扬和提出建设性反馈的文化。自己身体力行展示这种行为。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;3.1.2 寻求和接收反馈&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;积极主动向团队组员和管理者寻求反馈，并以寻求和接收反馈作为个人成长的重要途径。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;同E1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;同E1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;在团队和相关的业务干系人中&lt;strong&gt;鼓励主动寻求反馈的文化&lt;/strong&gt;，并以反馈作为成长的重要途径。身体力行展示这种行为。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;多个团队&lt;/strong&gt;和相关的业务干系人中鼓励主动寻求反馈的文化，并以反馈作为成长的重要途径。身体力行展示这种行为。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;整个组织&lt;/strong&gt;中鼓励主动寻求反馈的文化，并以反馈作为成长的重要途径。身体力行展示这种行为。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;3.2 沟通&lt;/h3&gt;&lt;h3&gt;3.2.1 有效沟通(Effective communication)&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;能够面向听众(in an audience-oriented way，以听众为中心而不是自顾自表达)，有效、清晰和简洁地沟通(包括书面和口头形式)。积极聆听对方的反馈，确保你真正理解对方的关切。关注肢体语言。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;在和团队成员沟通时，不管是&lt;strong&gt;技术还是非技术主题&lt;/strong&gt;，&lt;strong&gt;通常&lt;/strong&gt;都能够面向听众，有效、清晰和简洁地沟通(包括书面和口头形式)。积极聆听对方的反馈，确保你真正理解对方的关切。关注肢体语言。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;在和团队成员沟通时，不管是技术还是非技术主题，&lt;strong&gt;始终&lt;/strong&gt;都能够面向听众，有效、清晰和简洁地沟通(包括书面和口头形式)。积极聆听对方的反馈，确保你真正理解对方的关切。关注肢体语言。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;能够在&lt;strong&gt;具有多样背景和性格的团队&lt;/strong&gt;中有效沟通。在团队中，鼓励清晰、简洁、有效和面向听众的&lt;strong&gt;沟通文化&lt;/strong&gt;。确保团队成员能够积极聆听对方的反馈，真正理解对方的关切。身体力行展示这种行为。关注肢体语言。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;能够在具有多样背景和性格的&lt;strong&gt;多个团队间&lt;/strong&gt;有效沟通。在&lt;strong&gt;多个团队间&lt;/strong&gt;，鼓励清晰、简洁、有效和面向听众的沟通文化。确保团队成员能够积极聆听对方的反馈，真正理解对方的关切。身体力行展示这种行为。关注肢体语言。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;能够在&lt;strong&gt;整个公司&lt;/strong&gt;中有效沟通。在&lt;strong&gt;整个公司&lt;/strong&gt;中，鼓励清晰、简洁、有效和面向听众的沟通文化。确保团队成员能够积极聆听对方的反馈，真正理解对方的关切。身体力行展示这种行为。关注肢体语言。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;3.2.2 知识分享&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;理解自己的职责范围内的工作，经常和团队成员分享知识。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;理解自己的工作&lt;strong&gt;领域&lt;/strong&gt;，经常和团队成员分享知识，并&lt;strong&gt;积极充实团队文档库&lt;/strong&gt;。留意可以分享知识的机会。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;理解&lt;strong&gt;所在团队&lt;/strong&gt;的工作领域，经常和团队成员分享知识，并积极充实团队文档库。留意可以分享知识的机会，&lt;strong&gt;鼓励其他人也积极分享知识&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;所在团队和相关业务干系人&lt;/strong&gt;中，鼓励积极分享和书写文档的&lt;strong&gt;分享文化&lt;/strong&gt;。身体力行展示这种行为。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;多个团队&lt;/strong&gt;和各自的相关业务干系人中，鼓励积极分享和书写文档的分享文化。身体力行展示这种行为。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;整个组织&lt;/strong&gt;中，鼓励分享和积极书写文档的分享文化。身体力行展示这种行为。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;3.3 协作&lt;/h3&gt;&lt;h3&gt;3.3.1 团队合作(Teamwork)&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;在组员请求帮忙的情况下，给予力所能及的帮助。为自己积累乐于助人的信誉，在得到别人的帮助时，也要记得别人的信誉。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;在组员请求的情况下，帮助组员&lt;strong&gt;一起克服阻碍完成工作&lt;/strong&gt;。为自己积累乐于助人的信誉，在得到别人帮助时，也要记得别人的信誉。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;&lt;strong&gt;有时&lt;/strong&gt;能&lt;strong&gt;主动&lt;/strong&gt;帮助组员一起克服阻碍完成工作。为自己积累乐于助人的信誉，在得到别人帮助时，也要记得别人的信誉。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;&lt;strong&gt;总是&lt;/strong&gt;能主动帮助组员一起克服阻碍完成工作。为自己积累乐于助人的信誉，在得到别人帮助时，也要记得别人的信誉。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;多个团队&lt;/strong&gt;范围内，总是能主动帮助组员一起克服阻碍完成工作。为自己积累乐于助人的信誉，在得到别人帮助时，也要记得别人的信誉。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;整个组织&lt;/strong&gt;范围内，赋能团队互帮互助，人人乐于积累和给予信誉。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;3.3.2 关系建设(Relationship building)&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;在工作中和团队成员、管理者建立密切关系。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;在工作中和团队成员、管理者，以及对口的&lt;strong&gt;产品团队&lt;/strong&gt;建立密切关系。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;在工作中和团队成员，管理者，以及&lt;strong&gt;相关业务的干系人&lt;/strong&gt;建立密切关系。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;在工作中和团队成员，管理者，团队相关的业务干系人，以及&lt;strong&gt;组织内的高级别工程师&lt;/strong&gt;之间建立密切关系，并不断提升这种关系。&lt;strong&gt;在做团队定位和计划的时候，充分利用这些建立的关系&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;多个团队范围内&lt;/strong&gt;，和工程师、管理者，还有相关业务干系人建立密切的关系。在为&lt;strong&gt;这些团队&lt;/strong&gt;做定位和计划时，充分利用这些建立的关系。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;和&lt;strong&gt;整个组织范围内&lt;/strong&gt;的成员建立密切的关系。在为&lt;strong&gt;整个组织&lt;/strong&gt;做定位和计划时，充分利用这些建立的关系。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;3.3.3 解决分歧(Handling disagreement)&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;讨论时，能积极参与讨论，公开表达自己的观点，同时尊重他人的意见。当发生意见分歧时，能以积极健康的方式解决分歧。能够根据他人的观点输入来调整和改变自己的视角和计划。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;讨论时，能积极参与讨论，公开表达自己的观点，同时尊重他人的意见。当发生意见分歧时，能够开诚布公(而非保守固执)，在有分歧观点的基础上，进行&lt;strong&gt;建设性&lt;/strong&gt;的和&lt;strong&gt;富有成效&lt;/strong&gt;的对话，&lt;strong&gt;通过深入理解对方关切来解决分歧&lt;/strong&gt;。&lt;strong&gt;能够根据他人的观点输入来调整和改变自己的视角和计划&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;鼓励&lt;strong&gt;团队成员&lt;/strong&gt;在讨论时，能积极参与讨论，公开表达自己的观点，同时尊重他人的意见。当发生意见分歧时，能够开诚布公(而非保守固执)，在有分歧观点的基础上，进行建设性的和富有成效的对话，通过深入理解对方立场来解决分歧。能够根据他人的观点输入来调整和改变自己的视角和计划。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;&lt;strong&gt;在团队内鼓励开诚布公和就事论事文化&lt;/strong&gt;，鼓励团队成员在讨论时，能积极参与讨论，公开表达自己的观点，同时尊重他人的意见。当发生意见分歧时，能够开诚布公(而非保守固执)，在有分歧观点的基础上，进行建设性的和富有成效的对话，通过深入理解对方立场来解决分歧。能够根据他人的观点输入来调整和改变自己的视角和计划。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;多个团队范围&lt;/strong&gt;内，鼓励开诚布公和就事论事文化，鼓励团队成员在讨论时，能积极参与讨论，公开表达自己的观点，同时尊重他人的意见。当发生意见分歧时，能够开诚布公(而非保守固执)，在有分歧观点的基础上，进行建设性的和富有成效的对话，通过深入理解对方立场来解决分歧。能够根据他人的观点输入来调整和改变自己的视角和计划。&lt;strong&gt;深入挖掘表层分歧的背后关切，并将这些关切整合到各自的视角和计划中&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;整个组织范围&lt;/strong&gt;内，鼓励开诚布公和就事论事文化，鼓励团队成员在讨论时，能积极参与讨论，公开表达自己的观点，同时尊重他人的意见。当发生意见分歧时，能够开诚布公(而非保守固执)，在有分歧观点的基础上，进行建设性的和富有成效的对话，通过深入理解对方立场来解决分歧。能够根据他人的观点输入来调整和改变自己的视角和计划。&lt;strong&gt;将整个组织的背后关切整合到各自的视角和计划中&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;4、领导力&lt;/h2&gt;&lt;h3&gt;4.1 推进对齐(Driving alignment)&lt;/h3&gt;&lt;h3&gt;4.1.1 推进对齐&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;在初步了解组织战略和原则的基础上，在时机恰当时能积极参与相关内容的小组讨论。在初步理解组织目标的基础上，全力投入实现小组目标(目标导向)。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;在了解组织战略和原则的基础上，在时机恰当时&lt;strong&gt;能发起&lt;/strong&gt;一些相关内容的小组讨论。在初步理解组织目标的基础上，全力投入实现团队目标。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;在理解组织战略和原则的基础上，在时机恰当时能发起一些相关内容的团队讨论，&lt;strong&gt;确保团队目标和组织目标对齐&lt;/strong&gt;。在理解组织目标的基础上，&lt;strong&gt;确保团队全力投入实现共同目标&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;团队中&lt;/strong&gt;鼓励&lt;strong&gt;目标对齐文化&lt;/strong&gt;，在理解组织战略和原则的基础上，按需发起一些相关内容的团队讨论，确保团队目标和组织目标的对齐。在理解组织目标的基础上，确保团队全力投入实现团队目标。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;多个团队&lt;/strong&gt;中鼓励目标对齐文化，在理解组织战略和原则的基础上，按需发起一些相关内容的&lt;strong&gt;多团队&lt;/strong&gt;讨论，确保团队目标和组织目标的对齐。在深入理解组织目标的基础上，确保多个团队全力投入实现各自的团队目标。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;整个组织内&lt;/strong&gt;推动目标对齐文化，在深入理解组织战略和原则的基础上，按需发起战略和目标讨论，确保团队目标和组织目标的对齐。确保在&lt;strong&gt;整个组织范围内&lt;/strong&gt;，大家既理解整个组织的大目标，也清楚各自的团队目标。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;4.2 流程思考&lt;/h3&gt;&lt;h3&gt;4.2.1 流程思考&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;理解团队所采用的实践和流程。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;&lt;strong&gt;有时&lt;/strong&gt;能思考团队所采用的实践和流程，&lt;strong&gt;并能和团队讨论改进办法&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;&lt;strong&gt;经常&lt;/strong&gt;能思考团队所采用的实践和流程，并能和团队讨论改进办法。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;经常能思考团队所采用的实践和流程，并能和团队讨论改进办法。&lt;strong&gt;有时&lt;/strong&gt;能和其他团队合作来改进&lt;strong&gt;组织的&lt;/strong&gt;实践和流程。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;经常思考对&lt;strong&gt;多个团队&lt;/strong&gt;会产生影响的实践和流程，和相关团队讨论改进办法，并推进落地。&lt;strong&gt;经常&lt;/strong&gt;能和其他团队合作来改进组织的实践和流程。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;&lt;strong&gt;对组织的实践和流程的持续改进总负责&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;4.3 协调促进(Facilitation)&lt;/h3&gt;&lt;h3&gt;4.3.1 协调促进&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;N/A(该级别暂无要求)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;N/A(该级别暂无要求)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;在团队中协调促进讨论，确保每个人都有机会分享观点和被倾听，并且讨论的结果和会议目标议题紧密关联。鼓励那些不太愿意说话的参与者，同时防止某人全程垄断讨论。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;同E3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;多个团队间&lt;/strong&gt;协调促进讨论，确保每个人都有机会分享观点和被倾听，并且讨论的结果和会议目标议题紧密关联。&lt;strong&gt;确保相关团队都参加讨论&lt;/strong&gt;。协调讨论向&lt;strong&gt;有结果产出的方向&lt;/strong&gt;推进，协助澄清观点，对于最终讨论结果，确保大家的&lt;strong&gt;认同&lt;/strong&gt;(buy-in)。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;整个组织间&lt;/strong&gt;协调促进讨论，确保每个人都有机会分享观点和被倾听，并且讨论的结果和会议目标议题紧密关联。确保相关团队都参加讨论。协调讨论向有结果产出的方向推进，协助澄清观点，对于最终讨论结果，确保大家的认同(buy-in)。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;4.4 教导(Mentoring)&lt;/h3&gt;&lt;h3&gt;4.4.1 教导&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;主动寻找能帮助自己提升工作经验的导师。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;主动寻找能帮助自己提升工作经验的导师。&lt;strong&gt;有时&lt;/strong&gt;也能以开放灵活、相互尊重和富有同理心的方式去教导其他初级组员。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;能够以开放灵活、相互尊重和富有同理心的方式去教导其他初级组员。&lt;strong&gt;从保持团队技能适度冗余和关键岗位要有候补的角度考虑，主动寻找教导机会&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;能够以开放灵活、相互尊重和富有同理心的方式去教导其他组员。从保持团队技能适度冗余和关键岗位要有候补的角度考虑，主动寻找教导机会。&lt;strong&gt;必要时能够对其他团队的组员进行教导&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;多个团队间&lt;/strong&gt;，能够以开放灵活、相互尊重和富有同理心的方式去教导其他成员。在多个团队间鼓励&lt;strong&gt;教导文化&lt;/strong&gt;，主动为自己和他人寻找教导机会，同时作为导师帮助他人成长。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;整个组织&lt;/strong&gt;中，能够以开放灵活、相互尊重和富有同理心的方式去教导其他成员。鼓励&lt;strong&gt;组织级的教导文化&lt;/strong&gt;，主动为自己和他人寻找教导机会，同时作为导师帮助他人成长。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;5、战略性影响&lt;/h2&gt;&lt;h3&gt;5.1 业务敏锐和战略&lt;/h3&gt;&lt;h3&gt;5.1.1 业务敏锐&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;基本理解团队的领域和整个公司的主营业务。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;基本理解团队的领域，&lt;strong&gt;并且理解团队在整体业务战略中的定位和作用&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;&lt;strong&gt;深入&lt;/strong&gt;理解团队的领域，并且理解团队在整体业务战略中的定位和作用。对&lt;strong&gt;周边团队的业务领域&lt;/strong&gt;有基本的理解。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;深入理解团队的领域和&lt;strong&gt;战略&lt;/strong&gt;，以及如何将其映射到&lt;strong&gt;公司的总体战略版图&lt;/strong&gt;。&lt;strong&gt;充分理解&lt;/strong&gt;周边团队的战略，&lt;strong&gt;理解自己团队在其他团队战略中的定位/作用和接口点&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;深入理解&lt;strong&gt;多个团队&lt;/strong&gt;的领域，理解这些团队在公司整体业务战略中的定位和作用。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;深入理解&lt;strong&gt;整个公司的业务，包括每一个领域&lt;/strong&gt;，理解它们是如何拼装成公司的整体战略版图的。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;5.1.2 战略工作&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;N/A(该级别不适用)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;理解公司的工程技术战略。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;理解公司的工程技术战略，&lt;strong&gt;经常能参与讨论该战略给团队带来的机会和影响&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;根据公司的工程技术战略，&lt;strong&gt;和团队成员+高级工程师协作&lt;/strong&gt;，讨论并决定本团队的工作重点。&lt;strong&gt;有时&lt;/strong&gt;能参与公司的工程技术战略制定。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;&lt;strong&gt;经常&lt;/strong&gt;参与战略性的组织决策和计划。领导&lt;strong&gt;跨团队&lt;/strong&gt;战略工作制定，对决策施加影响以确保&lt;strong&gt;多团队&lt;/strong&gt;和公司总体战略目标的对齐。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;&lt;strong&gt;领导&lt;/strong&gt;战略性的&lt;strong&gt;组织&lt;/strong&gt;决策和计划。&lt;strong&gt;经常在战略层次思考和工作&lt;/strong&gt;，对决策施加影响以确保组织级的战略目标对齐。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;5.1.3 产品思维&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;职级&lt;/td&gt;&lt;td&gt;胜任力&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;E1&lt;/td&gt;&lt;td&gt;理解团队所产出产品的基本功能。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E2&lt;/td&gt;&lt;td&gt;理解团队所专注的&lt;strong&gt;产品区&lt;/strong&gt;，理解它们在总体业务中的&lt;strong&gt;定位和作用&lt;/strong&gt;，有时能提出产品&lt;strong&gt;改进建议&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E3&lt;/td&gt;&lt;td&gt;&lt;strong&gt;充分理解&lt;/strong&gt;公司的业务模式和当前团队所专注产品区的关系。&lt;strong&gt;有时&lt;/strong&gt;能参与产品团队的路线图制定，并提出反馈意见。&lt;strong&gt;寻找机会简化产品和技术设计&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E4&lt;/td&gt;&lt;td&gt;和产品团队一起协作评估和开发新产品功能。&lt;strong&gt;经常参与&lt;/strong&gt;产品路线图的制定。&lt;strong&gt;通过主动对话&lt;/strong&gt;来简化产品和技术设计。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E5&lt;/td&gt;&lt;td&gt;&lt;strong&gt;能够识别新产品机会，以及和竞争对手产品之间的差异点&lt;/strong&gt;。在&lt;strong&gt;多个团队间&lt;/strong&gt;，经常能根据技术战略和限制来协助细化产品路线图。有时能改变技术战略或限制来定义和&lt;strong&gt;创造新产品&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;E6&lt;/td&gt;&lt;td&gt;在&lt;strong&gt;整个组织范围内&lt;/strong&gt;，和产品/业务方通力协作，&lt;strong&gt;积极寻找&lt;/strong&gt;能够创造新产品或重新定义产品路线图的任何机会。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; 工程胜任力矩阵: &lt;em&gt;https://github.com/spring2go/engineer_completency_model/blob/main/CircleCI%20Engineering%20Competency%20Matrix%20%5Bpublic%20version%5D.xlsx&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; github站点: &lt;em&gt;https://github.com/spring2go/engineer_completency_model&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; 技术博客上: &lt;em&gt;https://circleci.com/blog/why-we-re-designed-our-engineering-career-paths-at-circleci/&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ad8697a992b51e2423176bff20c41ffd</guid>
<title>几乎刷完了力扣所有的堆题，我发现了这些东西</title>
<link>https://toutiao.io/k/im0exw3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6601466992665037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4mqa00Kwh4DhkbDkgibI9CZrME3k9NpEvtzcPzn5rcCpufNbZj63Ks4Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1636&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是 lucifer。今天给大家带来的是《堆》专题。先上下本文的提纲，这个是我用 mindmap 画的一个脑图，之后我会继续完善，将其他专题逐步完善起来。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;大家也可以使用 vscode blink-mind 打开源文件查看，里面有一些笔记可以点开查看。源文件可以去我的公众号《力扣加加》回复脑图获取，以后脑图也会持续更新更多内容。vscode 插件地址：https://marketplace.visualstudio.com/items?itemName=awehook.vscode-blink-mind&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本系列包含以下专题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;几乎刷完了力扣所有的链表题，我发现了这些东西。。。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;几乎刷完了力扣所有的树题，我发现了这些东西。。。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;几乎刷完了力扣所有的堆题，我发现了这些东西。。。（就是本文）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一点絮叨&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;堆标签&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;在 leetcode 一共有 &lt;strong&gt;「42 道题」&lt;/strong&gt;。为了准备这个专题，我将 leetcode 几乎所有的堆题目都刷了一遍。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.503448275862069&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4HWUSQTBf1Ll2v9DLrelpCiajZNzAFpAqKIPZkMCdS3fuFEC0SPOMSmw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1450&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看出，除了 3 个上锁的，其他我都刷了一遍。通过集中刷这些题，我发现了一些有趣的信息，今天就分享给大家。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是，本文不对堆和优先队列进行区分。因此本文提到的堆和优先队列大家可以认为是同一个东西。如果大家对两者的学术区别感兴趣，可以去查阅相关资料。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;如果不做特殊说明，本文的堆均指的是小顶堆。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;堆的题难度几何？&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;堆确实是一个难度不低的专题。从官方的难度标签来看，堆的题目一共才 42 道，困难度将近 50%。没有对比就没有伤害，树专题困难度只有不到 10%。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从通过率来看，&lt;strong&gt;「一半以上」&lt;/strong&gt;的题目平均通过率在 50% 以下。作为对比， 树的题目通过率在 50% 以下的只有&lt;strong&gt;「不到三分之一」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过大家不要太有压力。lucifer 给大家带来了一个口诀&lt;strong&gt;「一个中心，两种实现，三个技巧，四大应用」&lt;/strong&gt;，我们不仅讲实现和原理，更讲问题的&lt;strong&gt;「背景以及套路和模板」&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;文章里涉及的模板大家随时都可以从我的力扣刷题插件 leetcode-cheatsheet&lt;sup&gt;[2]&lt;/sup&gt; 中获取。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;堆的使用场景分析&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;堆其实就是一种数据结构，数据结构是为了算法服务的，那堆这种数据结构是为哪种算法服务的？它的适用场景是什么？这是每一个学习堆的人&lt;strong&gt;「第一个」&lt;/strong&gt;需要解决的问题。在什么情况下我们会使用堆呢？堆的原理是什么？如何实现一个堆？别急，本文将一一为你揭秘。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在进入正文之前，给大家一个学习建议 - &lt;strong&gt;「先不要纠结堆怎么实现的，咱先了解堆解决了什么问题」&lt;/strong&gt;。当你了解了使用背景和解决的问题之后，然后&lt;strong&gt;「当一个调包侠」&lt;/strong&gt;，直接用现成的堆的 api 解决问题。等你理解得差不多了，再去看堆的原理和实现。我就是这样学习堆的，因此这里就将这个学习经验分享给你。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了对堆的使用场景进行说明，这里我虚拟了一个场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「下面这个例子很重要， 后面会反复和这个例子进行对比」&lt;/strong&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;一个挂号系统&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;问题描述&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如你是一个排队挂号系统的技术负责人。该系统需要给每一个前来排队的人发放一个排队码（入队），并根据&lt;strong&gt;「先来后到」&lt;/strong&gt;的原则进行叫号（出队）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，我们还可以区分了几种客户类型， 分别是普通客户， VIP 客户 和 至尊 VIP 客户。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果不同的客户使用不同的窗口的话，我该如何设计实现我的系统？（大家获得的服务不一样，比如 VIP 客户是专家级医生，普通客户是普通医生）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果不同的客户都使用一个窗口的话，我该如何设计实现我的系统？（大家获得的服务都一样，但是优先级不一样。比如其他条件相同情况下(比如他们都是同时来挂号的)，VIP 客户 优先级高于普通客户）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我该如何设计我的系统才能满足需求，并获得较好的扩展性？&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;初步的解决方案&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不同的客户使用不同的窗口。那么我们可以设计三个队列，分别存放正在排队的三种人。这种设计满足了题目要求，也足够简单。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5176470588235295&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI46sH2K1AubdjUazzu4wTYszkWWE9Epm95nXUaaiaNbwIhVa6TloeE54g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1190&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们&lt;strong&gt;「只有一个窗口」&lt;/strong&gt;，所有的病人需要使用同一个队列，并且同样的客户类型按照上面讲的&lt;strong&gt;「先到先服务原则」&lt;/strong&gt;，但是不同客户类型之间可能会插队。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单起见，我引入了&lt;strong&gt;「虚拟时间」&lt;/strong&gt;这个概念。具体来说：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;普通客户的虚拟时间就是真实时间。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;VIP 客户的虚拟时间按照实际到来时间减去一个小时。比如一个 VIP 客户是 14:00 到达的，我认为他是 13:00 到的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;至尊 VIP 客户的虚拟时间按照实际到来时间减去两个小时。比如一个 至尊 VIP 客户是 14:00 到达的，我认为他是 12:00 到的。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，我们只需要按照上面的”虚拟到达时间“进行&lt;strong&gt;「先到先服务」&lt;/strong&gt;即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此我们就可以继续使用刚才的三个队列的方式，只不过队列存储的不是真实时间，而是虚拟时间。每次开始叫号的时候，我们使用虚拟时间比较，虚拟时间较小的先服务即可。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5055710306406686&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4KBuV2v4B8Wwcd1xicicBvRiaibgSQ7bhszPicvpLZc1w5VMq5XP1b0ZboAQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1436&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;不难看出，队列内部的时间都是有序。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「而这里的虚拟时间，其实就是优先队列中的优先权重」&lt;/strong&gt;，虚拟时间越小，权重越大。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;可以插队怎么办？&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种算法很好地完成了我们的需求，复杂度相当不错。不过事情还没有完结，这一次我们又碰到新的产品需求：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果有别的门诊的病人转院到我们的诊所，则按照他之前的排队信息算，比如 ta 是 12:00 在别的院挂的号，那么转到本院仍然是按照 12:00 挂号算。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果被叫到号三分钟没有应答，将其作废。但是如果后面病人重新来了，则认为他是当前时间减去一个小时的虚拟时间再次排队。比如 ta 是 13:00 被叫号，没有应答，13：30 又回来，则认为他是 12:30 排队的，重新进队列。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就有了”插队“的情况了。该怎么办呢？一个简单的做法是，将其插入到正确位置，并&lt;strong&gt;「重新调整后面所有人的排队位置」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图是插入一个 1:30 开始排队的普通客户的情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7947019867549668&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4Hiak1bBAiceFtwvayFGlC10cjGasWp6zebMGBRmFR6qWcjRBFIORKDew/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1359&quot;/&gt;（查找插入位置）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5576642335766423&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4wXf8Q0bKmSINplricveiaUC0xiceNbdSnGiayLYg4h6kXMz3d1JpduzkVw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1370&quot;/&gt;（将其插入）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果队列使用数组实现， 上面插队过程的时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2429 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，其中 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;N&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 888 683&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 为被插队的队伍长度。如果队伍很长，那么调整的次数明显增加。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过我们发现，本质上我们就是在维护一个&lt;strong&gt;「有序列表」&lt;/strong&gt;，而使用数组方式去维护有序列表的好处是可以随机访问，但是很明显这个需求并不需要这个特性。如果使用链表去实现，那么时间复杂度理论上是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(1)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2041 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1652, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，但是如何定位到需要插入的位置呢？朴素的思维是遍历查找，但是这样的时间复杂度又退化到了 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2429 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。有没有时间复杂度更好的做法呢？答案就是本文的主角&lt;strong&gt;「优先队列」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面说了链表的实现核心在于查找也需要 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2429 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，我们可以优化这个过程吗？实际上这就是优先级队列的链表实现，由于是有序的，我们可以用跳表加速查找，时间复杂度可以优化到 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(logN)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 3689 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1450, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1935, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2412, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3300, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3806921675774135&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4M9SYYeJbD9YyH7SZ8cU1dgZGYs3kmAk9BaN9YC1k0VWyOcpUYbg7Lg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1098&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实算法界有很多类似的问题。比如建立数据库索引的算法，如果给某一个有序的列添加索引，不能每次插入一条数据都去调整所有的数据吧（上面的数组实现）？因此我们可以用平衡树来实现，这样每次插入可以最多调整 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;(O(logN))&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 4467 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389, 0)&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1541, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1839, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2324, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2801, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3689, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4078, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。优先队列的另外一种实现 - 二叉堆就是这个思想，时间复杂度也可以优化到&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(logN)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 3689 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1450, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1935, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2412, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3300, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9296636085626911&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4vNKoLVbB5kuRAjpic8plL9PDEHX46H0ibkGjfV9rANmcUlm7ClMyVQ9w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;654&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文只讲解常见的二叉堆实现，对于跳表和红黑树不再这里讲。关于优先队列的二叉堆实现，我们会在后面给大家详细介绍。这里大家只有明白优先队列解决的问题是什么就可以了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;使用堆解决问题&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;堆的两个核心 API 是 push 和 pop。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家先不考虑它怎么实现的，你可以暂时把 ta 想象成一个黑盒，提供了两个 api：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;push&lt;/code&gt;：推入一个数据，内部怎么组织我不管。对应我上面场景里面的&lt;strong&gt;「排队」&lt;/strong&gt;和&lt;strong&gt;「插队」&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;pop&lt;/code&gt;：弹出一个数据，该数据一定是最小的，内部怎么实现我不管。对应我上面场景里面的&lt;strong&gt;「叫号」&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;这里的例子其实是小顶堆。而如果弹出的数据一定是最大的，那么对应的实现为大顶堆。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;借助这两个 api 就可以实现上面的需求。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 12:00 来了一个普通的顾客（push）&lt;/span&gt;&lt;br/&gt;heapq.heappush(normal_pq, &lt;span&gt;&#x27;12:00&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;# 12:30 来了一个普通顾客（push）&lt;/span&gt;&lt;br/&gt;heapq.heappush(normal_pq, &lt;span&gt;&#x27;12:30&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;# 13:00 来了一个普通顾客（push）&lt;/span&gt;&lt;br/&gt;heapq.heappush(normal_pq, &lt;span&gt;&#x27;13:00&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;# 插队（push）。时间复杂度可以达到 O(logN)。如何做到先不管，我们先会用就行，具体实现细节后面再讲。&lt;/span&gt;&lt;br/&gt;heapq.heappush(normal_pq, &lt;span&gt;&#x27;12: 20&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;# 叫号（pop）。12:00 来的先被叫到。需要注意的是这里的弹出时间复杂度也变成了 O(logN)，这或许就是幸福的代价吧。&lt;/span&gt;&lt;br/&gt;heapq.heappop(normal_pq)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;小结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面这个场景单纯使用数组和链表都可以满足需求，但是使用其他数据结构在应对”插队“的情况表现地会更好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体来说：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果永远都维护一个有序数组的方式取极值很容易，但是插队麻烦。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果永远都维护一个有序链表的方式取极值也容易。不过要想查找足够快，而不是线性扫描，就需要借助索引，这种实现对应的就是优先级队列的&lt;strong&gt;「跳表实现」&lt;/strong&gt;。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果永远都维护一个树的方式取极值也可以实现，比如根节点就是极值，这样 O(1) 也可以取到极值，但是调整过程需要 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(logN)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 3689 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1450, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1935, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2412, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3300, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。这种实现对应的就是优先级队列的&lt;strong&gt;「二叉堆实现」&lt;/strong&gt;。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单总结下就是，&lt;strong&gt;「堆就是动态帮你求极值的」&lt;/strong&gt;。当你需要动态求最大或最小值就就用它。而具体怎么实现，复杂度的分析我们之后讲，现在你只要记住使用场景，堆是如何解决这些问题的以及堆的 api 就够了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;队列 VS 优先队列&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面通过一个例子带大家了解了一下优先队列。那么在接下来讲具体实现之前，我觉得有必要回答下一个大家普遍关心的问题，那就是&lt;strong&gt;「优先队列是队列么」&lt;/strong&gt;？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多人觉得队列和优先队列是完全不同的东西，就好像 Java 和 JavaScript 一样，我看了很多文章都是这么说的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而我不这么认为。实际上，普通的队列也可以看成是一个特殊的&lt;strong&gt;「优先级队列」&lt;/strong&gt;， 这和网上大多数的说法&lt;strong&gt;「优先级队列和队列没什么关系」&lt;/strong&gt;有所不同。我认为&lt;strong&gt;「队列无非就是以时间这一变量作为优先级的优先队列」&lt;/strong&gt;，时间越早，优先级越高，优先级越高越先出队。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家平时写 BFS 的时候都会用到队列来帮你处理节点的访问顺序。那使用优先队列行不行？当然可以了！我举个例子：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;例题 - 513. 找树左下角的值&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;题目描述&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;定一个二叉树，在树的最后一行找到最左边的值。&lt;br/&gt;&lt;br/&gt;示例 1:&lt;br/&gt;&lt;br/&gt;输入:&lt;br/&gt;&lt;br/&gt;    2&lt;br/&gt;   / \&lt;br/&gt;  1   3&lt;br/&gt;&lt;br/&gt;输出:&lt;br/&gt;1&lt;br/&gt; &lt;br/&gt;&lt;br/&gt;示例 2:&lt;br/&gt;&lt;br/&gt;输入:&lt;br/&gt;&lt;br/&gt;        1&lt;br/&gt;       / \&lt;br/&gt;      2   3&lt;br/&gt;     /   / \&lt;br/&gt;    4   5   6&lt;br/&gt;       /&lt;br/&gt;      7&lt;br/&gt;&lt;br/&gt;输出:&lt;br/&gt;7&lt;br/&gt; &lt;br/&gt;&lt;br/&gt;注意: 您可以假设树（即给定的根节点）不为 NULL。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;思路&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以使用 BFS 来做一次层次遍历，并且每一层我们都从右向左遍历，这样层次遍历的最后一个节点就是&lt;strong&gt;「树左下角的节点」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常规的做法是使用双端队列（就是队列）来实现，由于队列的先进先出原则很方便地就能实现&lt;strong&gt;「层次遍历」&lt;/strong&gt;的效果。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;代码&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于代码看不懂的同学，可以先不要着急。等完整读完本文之后再回过头看会容易很多。下同，不再赘述。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Python Code:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;findBottomLeftValue&lt;/span&gt;&lt;span&gt;(self, root: TreeNode)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; root &lt;span&gt;is&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;:&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;        queue = collections.deque([root])&lt;br/&gt;        ans = &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; queue:&lt;br/&gt;            size = len(queue)&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; _ &lt;span&gt;in&lt;/span&gt; range(size):&lt;br/&gt;                ans = node = queue.popleft()&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; node.right:&lt;br/&gt;                    queue.append(node.right)&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; node.left:&lt;br/&gt;                    queue.append(node.left)&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; ans.val&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上， 我们也可以使用优先队列的方式，思路和代码也几乎和上面完全一样。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;findBottomLeftValue&lt;/span&gt;&lt;span&gt;(self, root: TreeNode)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; root &lt;span&gt;is&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;:&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;        queue = []&lt;br/&gt;        &lt;span&gt;# 堆存储三元组(a,b,c)，a 表示层级，b 表示节点编号（以完全二叉树的形式编号，空节点也编号），c 是节点本身&lt;/span&gt;&lt;br/&gt;        heapq.heappush(queue, (&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, root))&lt;br/&gt;        ans = &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; queue:&lt;br/&gt;            size = len(queue)&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; _ &lt;span&gt;in&lt;/span&gt; range(size):&lt;br/&gt;                level, i, node = heapq.heappop(queue)&lt;br/&gt;                ans = node&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; node.right:&lt;br/&gt;                    heapq.heappush(queue, (level + &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt; * i + &lt;span&gt;1&lt;/span&gt;, node.right))&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; node.left:&lt;br/&gt;                    heapq.heappush(queue, (level + &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt; * i + &lt;span&gt;2&lt;/span&gt;, node.left))&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; ans.val&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;小结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「所有使用队列的地方，都可以使用优先队列来完成，反之却不一定。」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然优先队列这么厉害，那平时都用优先队列不就行了？为啥使用队列的地方没见过别人用堆呢？最核心的原因是时间复杂度更差了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如上面的例子，本来入队和出队都可是很容易地在 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(1)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2041 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1652, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 的时间完成。而现在呢？入队和出队的复杂度都是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(logN)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 3689 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1450, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1935, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2412, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3300, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，其中 N 为当前队列的大小。因此在没有必要的地方使用堆，会大大提高算法的时间复杂度，这当然不合适。说的粗俗一点就是脱了裤子放屁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过 BFS 真的就没人用优先队列实现么？当然不是！比如带权图的最短路径问题，如果用队列做 BFS 那就需要优先队列才可以，因为路径之间是有&lt;strong&gt;「权重的差异」&lt;/strong&gt;的，这不就是优先队列的设计初衷么。&lt;strong&gt;「使用优先队列的 BFS 实现典型的就是 dijkstra 算法」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这再一次应征了我的那句话&lt;strong&gt;「队列就是一种特殊的优先队列而已」&lt;/strong&gt;。特殊到大家的权重就是按照到来的顺序定，谁先来谁的优先级越高。在这种特殊情况下，我们没必须去维护堆来完成，进而获得更好的时间复杂度。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一个中心&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;堆的问题核心点就一个，那就是&lt;strong&gt;「动态求极值」&lt;/strong&gt;。动态和极值二者缺一不可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;求极值比较好理解，无非就是求最大值或者最小值，而动态却不然。比如要你求一个数组的第 k 小的数，这是动态么？这其实完全看你怎么理解。而在我们这里，这种情况就是动态的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何理解上面的例子是动态呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可以这么想。由于堆只能求极值。比如能求最小值，但不能直接求第 k 小的值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们是不是先求最小的值，然后将其出队（对应上面例子的叫号）。然后继续求最小的值，这个时候求的就是第 2 小了。如果要求第 k 小，那就如此反复 k 次即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个过程，你会发现数据是在&lt;strong&gt;「动态变化的」&lt;/strong&gt;，对应的就是堆的大小在变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们通过几个例子来进行说明。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;例一 - 1046. 最后一块石头的重量&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;题目描述&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;有一堆石头，每块石头的重量都是正整数。&lt;br/&gt;&lt;br/&gt;每一回合，从中选出两块 最重的 石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x &amp;lt;= y。那么粉碎的可能结果如下：&lt;br/&gt;&lt;br/&gt;如果 x == y，那么两块石头都会被完全粉碎；&lt;br/&gt;如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。&lt;br/&gt;最后，最多只会剩下一块石头。返回此石头的重量。如果没有石头剩下，就返回 0。&lt;br/&gt;&lt;br/&gt; &lt;br/&gt;&lt;br/&gt;示例：&lt;br/&gt;&lt;br/&gt;输入：[2,7,4,1,8,1]&lt;br/&gt;输出：1&lt;br/&gt;解释：&lt;br/&gt;先选出 7 和 8，得到 1，所以数组转换为 [2,4,1,1,1]，&lt;br/&gt;再选出 2 和 4，得到 2，所以数组转换为 [2,1,1,1]，&lt;br/&gt;接着是 2 和 1，得到 1，所以数组转换为 [1,1,1]，&lt;br/&gt;最后选出 1 和 1，得到 0，最终数组转换为 [1]，这就是最后剩下那块石头的重量。&lt;br/&gt; &lt;br/&gt;&lt;br/&gt;提示：&lt;br/&gt;&lt;br/&gt;1 &amp;lt;= stones.length &amp;lt;= 30&lt;br/&gt;1 &amp;lt;= stones[i] &amp;lt;= 1000&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;思路&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;题目比较简单，直接模拟即可。需要注意的是，每次选择两个最重的两个石头进行粉碎之后，最重的石头的重量便发生了变化。这会&lt;strong&gt;「影响到下次取最重的石头」&lt;/strong&gt;。简单来说就是最重的石头在模拟过程中是&lt;strong&gt;「动态变化」&lt;/strong&gt;的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种&lt;strong&gt;「动态取极值」&lt;/strong&gt;的场景使用堆就非常适合。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;当然看下这个数据范围&lt;code&gt;1 &amp;lt;= stones.length &amp;lt;= 30 且 1 &amp;lt;= stones[i] &amp;lt;= 1000&lt;/code&gt;，使用计数的方式应该也是可以的。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;代码&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java Code:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; java.util.PriorityQueue;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;lastStoneWeight&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt;[] stones)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; n = stones.length;&lt;br/&gt;        PriorityQueue&amp;lt;Integer&amp;gt; maxHeap = &lt;span&gt;new&lt;/span&gt; PriorityQueue&amp;lt;&amp;gt;(n, (a, b) -&amp;gt; b - a);&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; stone : stones) {&lt;br/&gt;            maxHeap.add(stone);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; (maxHeap.size() &amp;gt;= &lt;span&gt;2&lt;/span&gt;) {&lt;br/&gt;            Integer head1 = maxHeap.poll();&lt;br/&gt;            Integer head2 = maxHeap.poll();&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (head1.equals(head2)) {&lt;br/&gt;                &lt;span&gt;continue&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;            maxHeap.offer(head1 - head2);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (maxHeap.isEmpty()) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; maxHeap.poll();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;例二 - 313. 超级丑数&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;题目描述&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;编写一段程序来查找第 n 个超级丑数。&lt;br/&gt;&lt;br/&gt;超级丑数是指其所有质因数都是长度为 k 的质数列表 primes 中的正整数。&lt;br/&gt;&lt;br/&gt;示例:&lt;br/&gt;&lt;br/&gt;输入: n = 12, primes = [2,7,13,19]&lt;br/&gt;输出: 32&lt;br/&gt;解释: 给定长度为 4 的质数列表 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。&lt;br/&gt;说明:&lt;br/&gt;&lt;br/&gt;1 是任何给定 primes 的超级丑数。&lt;br/&gt; 给定 primes 中的数字以升序排列。&lt;br/&gt;0 &amp;lt; k ≤ 100, 0 &amp;lt; n ≤ 10^6, 0 &amp;lt; primes[i] &amp;lt; 1000 。&lt;br/&gt;第 n 个超级丑数确保在 32 位有符整数范围内。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;思路&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题看似和动态求极值没关系。其实不然，让我们来分析一下这个题目。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以实现生成超级多的丑数，比如先从小到大生成 N 个丑数，然后直接取第 N 个么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拿这道题来说， 题目有一个数据范围限制 &lt;code&gt;0 &amp;lt; n ≤ 10^6&lt;/code&gt;，那我们是不是预先生成一个大小为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;10^6&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -864 1403.6 886&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1000, 393.1) scale(0.707)&quot;&gt;&lt;path data-c=&quot;36&quot; d=&quot;M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 的超级丑数数组，这样我们就可通过 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(1)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2041 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1652, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 的时间获取到第 N 个超级丑数了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先第一个问题就是时间和空间浪费。我们其实没有必要每次都计算所有的超级丑数，这样的预处理空间和时间都很差。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二个问题是，我们如何生成 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;10^6&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -864 1403.6 886&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1000, 393.1) scale(0.707)&quot;&gt;&lt;path data-c=&quot;36&quot; d=&quot;M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 以为的超级丑数呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过丑数的定义，我们能知道超级丑数一定可以写出如下形式。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; primes = [a,b,c,....]&lt;br/&gt;&lt;span&gt;then&lt;/span&gt; f(ugly) = a * x1 * b * x2 * c * x3 ...&lt;br/&gt;其中 x1，x2，x3 均为正整数。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不妨将问题先做一下简化处理。考虑题目给的例子：[2,7,13,19]。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以使用四个指针来处理。直接看下代码吧：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;solve&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; ans[]=&lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[n+&lt;span&gt;5&lt;/span&gt;];&lt;br/&gt;        ans[&lt;span&gt;0&lt;/span&gt;]=&lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; p1=&lt;span&gt;0&lt;/span&gt;,p2=&lt;span&gt;0&lt;/span&gt;,p3=&lt;span&gt;0&lt;/span&gt;,p4=&lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;n;i++){&lt;br/&gt;            ans[i]=Math.min(ans[p1]*&lt;span&gt;2&lt;/span&gt;,Math.min(ans[p2]*&lt;span&gt;7&lt;/span&gt;,Math.min(ans[p3]*&lt;span&gt;13&lt;/span&gt;,ans[p4]*&lt;span&gt;19&lt;/span&gt;)));&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt;(ans[i]==ans[p1]*&lt;span&gt;2&lt;/span&gt;) p1++;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt;(ans[i]==ans[p2]*&lt;span&gt;7&lt;/span&gt;) p2++;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt;(ans[i]==ans[p3]*&lt;span&gt;13&lt;/span&gt;) p3++;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt;(ans[i]==ans[p3]*&lt;span&gt;19&lt;/span&gt;) p4++;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; ans[n-&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个技巧我自己称之为&lt;strong&gt;「多路归并」&lt;/strong&gt;（实现想不到什么好的名字），我也会在后面的&lt;strong&gt;「三个技巧」&lt;/strong&gt;也会对此方法使用堆来优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于这里的指针是动态的，指针的数量其实和题目给的 primes 数组长度一致。因此实际上，我们可以使用记忆化递归的形式来完成，&lt;strong&gt;「递归体和递归栈分别维护一个迭代变量即可」&lt;/strong&gt;。而这道题其实可以看出是一个状态机，因此使用动态规划来解决是符合直觉的。而这里，介绍一种堆的解法，相比于动态规划，个人认为更简单和符合直觉。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;关于状态机，我这里有一篇文章原来状态机也可以用来刷 LeetCode？&lt;sup&gt;[3]&lt;/sup&gt;，大家可以参考一下哦。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，我们可以&lt;strong&gt;「动态」&lt;/strong&gt;维护一个当前最小的超级丑数。找到第一个， 我们将其移除，再找&lt;strong&gt;「下一个当前最小的超级丑数」&lt;/strong&gt;（也就是全局第二小的超级丑数）。这样经过 n 轮，我们就得到了第 n 小的超级丑数。这种动态维护极值的场景正是堆的用武之地。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;有没有觉得和上面石头的题目很像？&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以题目给的例子 [2,7,13,19] 来说。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;将 [2,7,13,19] 依次入堆。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;出堆一个数字，也就是是 2。这时取到了&lt;strong&gt;「第一个」&lt;/strong&gt;超级丑数。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;接着将 2 和 [2,7,13,19] 的乘积，也就是 [4,14,26,38] 依次入堆。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如此反复直到取到第 n 个超级丑数。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的正确性是毋庸置疑的，由于每次堆都可以取到最小的，每次我们也会将最小的从堆中移除。因此取 n 次自然就是第 n 大的超级丑数了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;堆的解法没有太大难度，唯一需要注意的是去重。比如 2 * 13 = 16，而 13 * 2 也是 16。我们不能将 16 入两次堆。解决的方法也很简单：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;要么使用哈希表记录全部已经取出的数，对于已经取出的数字不再取即可。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;另一种方法是记录上一次取出的数，由于取出的数字是按照&lt;strong&gt;「数字大小不严格递增」&lt;/strong&gt;的，这样只需要拿上次取出的数和本次取出的数比较一下就知道了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用哪种方法不用多说了吧？&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;代码&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java Code:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;nthSuperUglyNumber&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; n, &lt;span&gt;int&lt;/span&gt;[] primes)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        PriorityQueue&amp;lt;Long&amp;gt; queue=&lt;span&gt;new&lt;/span&gt; PriorityQueue&amp;lt;&amp;gt;();&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; count = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; ans = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;        queue.add(ans);&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; (count &amp;lt; n) {&lt;br/&gt;            ans=queue.poll();&lt;br/&gt;            &lt;span&gt;while&lt;/span&gt; (!queue.isEmpty() &amp;amp;&amp;amp; ans == queue.peek()) {&lt;br/&gt;                queue.poll();&lt;br/&gt;            }&lt;br/&gt;            count++;&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; primes.length ; i++) {&lt;br/&gt;                queue.offer(ans * primes[i]);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt;)ans;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;ans 初始化为 1 的作用相当于虚拟头，仅仅起到了简化操作的作用&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;小结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;堆的中心就一个，那就是&lt;strong&gt;「动态求极值」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而求极值无非就是最大值或者最小值，这不难看出。如果求最大值，我们可以使用大顶堆，如果求最小值，可以用最小堆。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而实际上，如果没有动态两个字，很多情况下没有必要使用堆。比如可以直接一次遍历找出最大的即可。而动态这个点不容易看出来，这正是题目的难点。这需要你先对问题进行分析， 分析出这道题&lt;strong&gt;「其实就是动态求极值」&lt;/strong&gt;，那么使用堆来优化就应该被想到。类似的例子有很多，我也会在后面的小节给大家做更多的讲解。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;两种实现&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面简单提到了堆的几种实现。这里介绍两种常见的实现，一种是基于链表的实现- 跳表，另一种是基于数组的实现 - 二叉堆。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用跳表的实现，如果你的算法没有经过精雕细琢，性能会比较不稳定，且在数据量大的情况下内存占用会明显增加。因此我们仅详细讲述二叉堆的实现，而对于跳表的实现，仅讲述它的基本原理，对于代码实现等更详细的内容由于比较偏就不在这里讲了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;跳表&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跳表也是一种数据结构，因此 ta 其实也是服务于某种算法的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跳表虽然在面试中出现的频率不大，但是在工业中，跳表会经常被用到。力扣中关于跳表的题目只有一个。但是跳表的设计思路值得我们去学习和思考。其中有很多算法和数据结构技巧值得我们学习。比如空间换时间的思想，比如效率的取舍问题等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面提到了应付插队问题是设计&lt;strong&gt;「堆」&lt;/strong&gt;应该考虑的首要问题。堆的跳表实现是如何解决这个问题的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道，不借助额外空间的情况下，在链表中查找一个值，需要按照顺序一个个查找，时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2429 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，其中 N 为链表长度。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.08952702702702703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4KMibNLm4oD9zaY2N5VzqeEDpZlCtcTd8t30yl4uG686Vv3ulMU7c1kQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2368&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（单链表）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当链表长度很大的时候， 这种时间是很难接受的。一种常见的的优化方式是&lt;strong&gt;「建立哈希表，将所有节点都放到哈希表中，以空间换时间的方式减少时间复杂度」&lt;/strong&gt;，这种做法时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(1)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2041 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1652, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，但是空间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2429 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4SbQLicjk2rgOwbCv7kBapYow0TcvrbjNVMAGiaf9jV6RmCcOlZnjAjXQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1572&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（单链表 + 哈希表）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了防止链表中出现重复节点带来的问题，我们需要序列化节点，再建立哈希表，这种空间占用会更高，虽然只是系数级别的增加，但是这种开销也是不小的 。更重要的是，哈希表不能解决查找极值的问题，其仅适合根据 key 来获取内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决上面的问题，跳表应运而生。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图所示，我们从链表中每两个元素抽出来，加一级索引，一级索引指向了原始链表，即：通过一级索引 7 的 down 指针可以找到原始链表的 7 。那怎么查找 10 呢？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;注意这个算法要求链表是有序的。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.27736686390532544&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4H2nu8rHfy0LWo47ibGtJjxyVaZFB1ZSG8XxuIVRmsibHib2cWGdpKRfTQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2704&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（建立一级索引）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;通过现在一级跳表中搜索到 7，发现下一个 18 大于 10 ，也就是说我们要找的 10 在这两者之间。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 down 指针回到原始链表，通过原始链表的 next 指针我们找到了 10。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个例子看不出性能提升。但是如果元素继续增大， 继续增加索引的层数，建立二级，三级。。。索引，使得链表能够实现二分查找，从而获得更好的效率。但是相应地，我们需要付出额外空间的代价。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4528301886792453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI42SymNriaFgm8fMtof4nB7v2NGuiaIjgqXNSKZ3E4MggJwTVgDbdBuTSA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2385&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（增加索引层数）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;理解了上面的点，你可以形象地将跳表想象为玩游戏的&lt;strong&gt;「存档」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个游戏有 10 关。如果我想要玩第 5 关的某一个地方，那么我可以直接从第五关开始，这样要比从第一关开始快。我们甚至可以在每一关同时设置很多的存档。这样我如果想玩第 5 关的某一个地方，也可以不用从第 5 关的开头开始，而是直接选择&lt;strong&gt;「离你想玩的地方更近的存档」&lt;/strong&gt;，这就相当于跳表的二级索引。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跳表的时间复杂度和空间复杂度不是很好分析。由于时间复杂度 = 索引的高度 * 平均每层索引遍历元素的个数，而高度大概为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;logn&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -694 1860 899&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(298, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(783, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1260, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，并且每层遍历的元素是常数，因此时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;logn&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -694 1860 899&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(298, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(783, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1260, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，和二分查找的空间复杂度是一样的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;空间复杂度就等同于索引节点的个数，以每两个节点建立一个索引为例，大概是 n/2 + n/4 + n/8 + … + 8 + 4 + 2 ，因此空间复杂度是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(n)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2141 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1752, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。当然你如果每三个建立一个索引节点的话，空间会更省，但是复杂度不变。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;理解了上面的内容，使用跳表实现堆就不难了。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;入堆操作，只需要根据索引插到链表中，并更新索引（可选）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;出堆操作，只需要删除头部（或者尾部），并更新索引（可选）。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家如果想检测自己的实现是否有问题，可以去力扣的1206. 设计跳表 检测。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们看下一种更加常见的实现 - 二叉堆。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;二叉堆&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;二叉堆的实现，我们仅讲解最核心的两个操作：heappop（出堆） 和 heappush（入堆）。对于其他操作不再讲解，不过我相信你会了这两个核心操作，其他的应该不是难事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现之后的使用效果大概是这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;h = min_heap()&lt;br/&gt;h.build_heap([&lt;span&gt;5&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;])&lt;br/&gt;&lt;br/&gt;h.heappush(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;h.heappop() &lt;span&gt;# 1&lt;/span&gt;&lt;br/&gt;h.heappop() &lt;span&gt;# 2&lt;/span&gt;&lt;br/&gt;h.heappush(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;h.heappop() &lt;span&gt;# 1&lt;/span&gt;&lt;br/&gt;h.heappop() &lt;span&gt;# 3&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;基本原理&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本质上来说，二叉堆就是一颗特殊的完全二叉树。它的特殊性只体现在一点，那就是&lt;strong&gt;「父节点的权值不大于儿子的权值（小顶堆）」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI477m9temKwibibO9Puw0L3SxOrPcoLiaR2UXUGIzY5JcJXdTuUjDwRm0icQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;730&quot;/&gt;（一个小顶堆）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面这句话需要大家记住，一切的一切都源于上面这句话。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于&lt;strong&gt;「父节点的权值不大于儿子的权值（小顶堆）」&lt;/strong&gt;，那么很自然能推导出树的根节点就是最小值。这就起到了堆的&lt;strong&gt;「取极值」&lt;/strong&gt;的作用了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那动态性呢？二叉堆是怎么做到的呢？&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;出堆&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如，我将树的根节点出堆，那么根节点不就空缺了么？我应该将第二小的顶替上去。怎么顶替上去呢？一切的一切还是那句话&lt;strong&gt;「父节点的权值不大于儿子的权值（小顶堆）」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果仅仅是删除，那么一个堆就会变成两个堆了，问题变复杂了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6976744186046512&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4z1pE7ZTeHSSM57UXPbC1wpBgouJjBl36JFANCAriciawrwaoVtiaicQ6sw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;688&quot;/&gt;（上图出堆之后会生成两个新的堆）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个常见的操作是，把根结点和最后一个结点交换。但是新的根结点可能不满足 &lt;strong&gt;「父节点的权值不大于儿子的权值（小顶堆）」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图，我们将根节点的 2 和尾部的数字进行交换后，这个时候是不满足堆性质的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8650137741046832&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4AM5F96rwypfCsOmfibAibbqTfUKJibFqs8GFibLc8SN9TO7zCPFhOefXXg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;726&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个时候，其实只需要将新的根节点下沉到正确位置即可。这里的&lt;strong&gt;「正确位置」&lt;/strong&gt;，指的还是那句话&lt;strong&gt;「父节点的权值不大于儿子的权值（小顶堆）」&lt;/strong&gt;。如果不满足这一点，我们就继续下沉，直到满足。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道根节点往下下沉的过程，其实有两个方向可供选择，是下沉到左子节点？还是下沉到右子节点？以小顶堆来说，答案应该是下沉到较小的子节点处，否则会错失正确答案。以上面的堆为例，如果下沉到右子节点 4，那么就无法得到正确的堆顶 3。因此我们需要下沉到左子节点。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.1128048780487805&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4O1YhIT4Op0XYndgOlE7Cq2NZORdc60MZeYxYpmicn9wUpgAnWQ6QZ2g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;656&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下沉到如图位置，还是不满足 &lt;strong&gt;「父节点的权值不大于儿子的权值（小顶堆）」&lt;/strong&gt;，于是我们继续执行同样的操作。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7901907356948229&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4VHRdOCRd89XFevOuibgJaBstCe89mlwhm7ZYzv5Rl25aeKes7BKdmRQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;734&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有的同学可能有疑问。弹出根节点前堆满足堆的性质，但是弹出之后经过你上面讲的下沉操作，一定还满足么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是肯定的。这个也不难理解。由于最后的叶子节点被提到了根节点，它其实最终在哪是不确定的，但是经过上面的操作，我们可以看出：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;其下沉路径上的节点一定都满足堆的性质。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不在下沉路径上的节点都保持了堆之前的相对关系，因此也满足堆的性质。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此&lt;strong&gt;「弹出根节点后，经过上面的下沉操作一定仍然满足堆的性质」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;时间复杂度方面可以证明，下沉和树的高度成正相关，因此时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;logh&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -694 1836 899&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(298, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(783, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1260, 0)&quot;&gt;&lt;path data-c=&quot;68&quot; d=&quot;M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，其中 h 为树高。而由于二叉堆是一颗完全二叉树，因此树高大约是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;logN&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -694 2148 899&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(298, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(783, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1260, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，其中 N 为树中的节点个数。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;入堆&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;入堆和出堆类似。我们可以直接往树的最后插入一个节点。和上面类似，这样的操作同样可能会破坏堆的性质。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;之所以这么做的其中一个原因是时间复杂度更低，因为我们是用数组进行模拟的，而在数组尾部添加元素的时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(1)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2041 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1652, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8455882352941176&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI43m84ZSicOGGr1B9famuhJbzKWNfSPJPPpGibMOvDiayuXLFzXF1n0XboQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;816&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这次我们发现，不满足堆的节点目前是刚刚被插入节点的尾部节点，因此不能进行下沉操作了。这一次我们需要执行&lt;strong&gt;「上浮操作」&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;叶子节点是只能上浮的（根节点只能下沉，其他节点既可以下沉，又可以上浮）&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和上面基本类似，如果不满足堆的性质，我们将其和父节点交换（上浮），继续这个过程，直到满足堆的性质。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5637065637065637&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4j0GnnhSmiaa3aqJGj7dHI9cLGwa5zndrLToazmRqUKkf9v1ZnqQhv2Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1036&quot;/&gt;(第一次上浮，仍然不满足堆特性，继续上浮)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7482185273159145&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI480PNQnibrB66l0kJzwHqwbIyODnMGXD3IGJyJ1xzNsefSHWibniaiaU7Pg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;842&quot;/&gt;（满足了堆特性，上浮过程完毕）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过这样的操作，其还是一个满足堆性质的堆。证明过程和上面类似，不再赘述。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是，由于上浮&lt;strong&gt;「只需要拿当前节点和父节点进行比对就可以了，」&lt;/strong&gt; 由于省去了判断左右子节点哪个更小的过程，因此更加简单。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于完全二叉树来说使用数组实现非常方便。因为：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果节点在数组中的下标为 i，那么其左子节点下标为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;2 \times i&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -666 2067.4 677&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(722.2, 0)&quot;&gt;&lt;path data-c=&quot;D7&quot; d=&quot;M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1722.4, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，右节点为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;2 \times i&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -666 2067.4 677&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(722.2, 0)&quot;&gt;&lt;path data-c=&quot;D7&quot; d=&quot;M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1722.4, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;+1。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果节点在数组中的下标为 i，那么父节点下标为 i//2（地板除）。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然这要求你的&lt;strong&gt;「数组从 1 开始存储数据」&lt;/strong&gt;。如果不是，上面的公式其实微调一下也可以达到同样的效果。不过这是一种业界习惯，我们还是和业界保持一致比较好。从 1 开始存储的另外一个好处是，我们可以将索引为 0 的位置空出来存储诸如&lt;strong&gt;「堆大小」&lt;/strong&gt;的信息，这是一些大学教材里的做法，大家作为了解即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图所示是一个完全二叉树和树的数组表示法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0925553319919517&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4FSEUvA5PJhFtQL3XPicEx3MibGyoaqepWUGicQUfzpV7bZuKmXnPtsM5g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;497&quot;/&gt;（注意数组索引的对应关系）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;形象点来看，我们可以可以画出如下的对应关系图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.4859649122807017&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTeX9kJPsfuDyDDQX2XytZI4ov1XWCEiczvXkOBaHgJ96Meia3icHWLnrtS8TDvhJrLGXIVhiaum0iccibUg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;570&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样一来，是不是和上面的树差不多一致了？有没有容易理解一点呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面已经讲了上浮和下沉的过程。刚才也讲了父子节点坐标的关系。那么代码就呼之欲出了。我们来下最核心的&lt;strong&gt;「上浮」&lt;/strong&gt;和&lt;strong&gt;「下沉」&lt;/strong&gt;的代码实现吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// x 是要上浮的元素，从树的底部开始上浮&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;shift_up&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;while&lt;/span&gt; (x &amp;gt; &lt;span&gt;1&lt;/span&gt; &amp;amp;&amp;amp; h[x] &amp;gt; h[x / &lt;span&gt;2&lt;/span&gt;]) {&lt;br/&gt;    &lt;span&gt;//  swqp 就是交换数组两个位置的值&lt;/span&gt;&lt;br/&gt;    swap(h[x], h[x / &lt;span&gt;2&lt;/span&gt;]);&lt;br/&gt;    x /= &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// x 是要下沉的元素，从树的顶部开始下沉&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;shift_down&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;while&lt;/span&gt; (x * &lt;span&gt;2&lt;/span&gt; &amp;lt;= n) {&lt;br/&gt;    &lt;span&gt;// minChild 是获取更小的子节点的索引并返回&lt;/span&gt;&lt;br/&gt;    mc = minChild(x);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (h[mc] &amp;lt;= h[x]) &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;    swap(h[x], h[mc]);&lt;br/&gt;    x = mc;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里 Java 语言为例，讲述一下代码的编写。其他语言的二叉堆实现可以去我的&lt;strong&gt;「刷题插件 leetcode-cheatsheet」&lt;/strong&gt; 中获取。插件的获取方式在公众号&lt;strong&gt;「力扣加加」&lt;/strong&gt;里，回复插件即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; java.util.Arrays;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.util.Comparator;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 用完全二叉树来构建 堆&lt;br/&gt; * 前置条件 起点为 1&lt;br/&gt; * 那么 子节点为  i &amp;lt;&amp;lt;1 和 i&amp;lt;&amp;lt;1 + 1&lt;br/&gt; * 核心方法为&lt;br/&gt; * shiftdown 交换下沉&lt;br/&gt; * shiftup 交换上浮&lt;br/&gt; * &amp;lt;p&amp;gt;&lt;br/&gt; * build 构建堆&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Heap&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; size = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; queue[];&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Heap&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; initialCapacity)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (initialCapacity &amp;lt; &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException();&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.queue = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[initialCapacity];&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Heap&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt;[] arr)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        size = arr.length;&lt;br/&gt;        queue = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[arr.length + &lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; val : arr) {&lt;br/&gt;            queue[i++] = val;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;shiftDown&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; temp = queue[i];&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; ((i &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;) &amp;lt;= size) {&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; child = i &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;// child!=size 判断当前元素是否包含右节点&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (child != size &amp;amp;&amp;amp; queue[child + &lt;span&gt;1&lt;/span&gt;] &amp;lt; queue[child]) {&lt;br/&gt;                child++;&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (temp &amp;gt; queue[child]) {&lt;br/&gt;                queue[i] = queue[child];&lt;br/&gt;                i = child;&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        queue[i] = temp;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;shiftUp&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; temp = queue[i];&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; ((i &amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;) &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (temp &amp;lt; queue[i &amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;]) {&lt;br/&gt;                queue[i] = queue[i &amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;                i &amp;gt;&amp;gt;= &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        queue[i] = temp;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;peek&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; res = queue[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; res;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;pop&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; res = queue[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;&lt;br/&gt;        queue[&lt;span&gt;1&lt;/span&gt;] = queue[size--];&lt;br/&gt;        shiftDown(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; res;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;push&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (size == queue.length - &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;            queue = Arrays.copyOf(queue, size &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        queue[++size] = val;&lt;br/&gt;        shiftUp(size);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;buildHeap&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = size &amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span&gt;0&lt;/span&gt;; i--) {&lt;br/&gt;            shiftDown(i);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; arr[] = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[]{&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;8&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;};&lt;br/&gt;        Heap heap = &lt;span&gt;new&lt;/span&gt; Heap(arr);&lt;br/&gt;        heap.buildHeap();&lt;br/&gt;        System.out.println(heap.peek());&lt;br/&gt;        heap.push(&lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; (heap.size &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; num = heap.pop();&lt;br/&gt;            System.out.printf(num + &lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;小结&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;堆的实现有很多。比如基于链表的跳表，基于数组的二叉堆和基于红黑树的实现等。这里我们详细地讲述了二叉堆的实现，不仅是其实现简单，而且其在很多情况下表现都不错，推荐大家重点掌握二叉堆实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于二叉堆的实现，核心点就一点，那就是始终维护堆的性质不变，具体是什么性质呢？那就是 &lt;strong&gt;「父节点的权值不大于儿子的权值（小顶堆）」&lt;/strong&gt;。为了达到这个目的，我们需要在入堆和出堆的时候，使用上浮和下沉操作，并恰当地完成元素交换。具体来说就是上浮过程和比它大的父节点进行交换，下沉过程和两个子节点中较小的进行交换，当然前提是它有子节点且子节点比它小。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于堆化我们并没有做详细分析。不过如果你理解了本文的入堆操作，这其实很容易。因此堆化本身就是一个不断入堆的过程，只不过&lt;strong&gt;「将时间上的离散的操作变成了一次性操作」&lt;/strong&gt;而已。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;预告&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文预计分两个部分发布。这是第一部分，后面的内容更加干货，分别是&lt;strong&gt;「三个技巧」&lt;/strong&gt;和&lt;strong&gt;「四大应用」&lt;/strong&gt;。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;多路归并&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;固定堆&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;事后小诸葛&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;topK&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;带权最短距离&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;因子分解&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;堆排序&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个主题是专门教你怎么解题的。掌握了它，力扣中的大多数堆的题目都不在话下（当然我指的仅仅是题目中涉及到堆的部分）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大家对此有何看法，欢迎给我留言，我有时间都会一一查看回答。更多算法套路可以访问我的 LeetCode 题解仓库：https://github.com/azl397985856/leetcode 。目前已经 37K star 啦。大家也可以关注我的公众号《力扣加加》带你啃下算法这块硬骨头。&lt;/span&gt;&lt;img data-ratio=&quot;0.5555555555555556&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfxVVL24QAkhAH6jz59gX6V38gUibAy7Qth9CC0VibNIf4fMCxfuaxLicDjRdNopThzeO2HMmAkoBUVA/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;爱心三连击&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;1.看到这里了就点个在看支持下吧，你的&lt;strong&gt;在看&lt;/strong&gt;是我创作的动力。&lt;/p&gt;&lt;p&gt;2.关注公众号&lt;strong&gt;力扣加加&lt;/strong&gt;，带你啃下算法这块硬骨头！&lt;strong&gt;加个星标&lt;/strong&gt;，不错过每一条成长的机会。&lt;/p&gt;&lt;p&gt;3.如果你觉得本文的内容对你有帮助，就帮我&lt;strong&gt;转发&lt;/strong&gt;一下吧。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;br/&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;堆标签: &lt;span&gt;https://leetcode-cn.com/tag/tree/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;力扣刷题插件 leetcode-cheatsheet: &lt;span&gt;https://chrome.google.com/webstore/detail/leetcode-cheatsheet/fniccleejlofifaakbgppmbbcdfjonle/related?hl=zh-CN&amp;amp;authuser=0&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;原来状态机也可以用来刷 LeetCode？: &lt;span&gt;https://lucifer.ren/blog/2020/01/12/1262.greatest-sum-divisible-by-three/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>16a0ffc8b697a6ac6e6e9f4a7e925488</guid>
<title>Go 并发编程（八）：深入理解 sync.Once</title>
<link>https://toutiao.io/k/vxx4z19</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;markdown-body&quot;&gt;&lt;blockquote&gt;&lt;p&gt;本系列为极客时间 Go 进阶训练营笔记，同步直播更新，预计一周更新 1 ~ 2 篇文章，到 202103 月更新完成&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在上一篇文章《&lt;a href=&quot;https://lailin.xyz/post/go-training-week3-errgroup.html&quot;&gt;Week03: Go 并发编程(七) 深入理解 errgroup&lt;/a&gt;》当中看 &lt;code&gt;errgourp&lt;/code&gt; 源码的时候我们发现最后返回 &lt;code&gt;err&lt;/code&gt; 是通过 once 来只保证返回一个非 nil 的值的，本文就来看一下 Once 的使用与实现&lt;/p&gt;&lt;h2 id=&quot;案例&quot;&gt;&lt;a href=&quot;#案例&quot; class=&quot;headerlink&quot; title=&quot;案例&quot;/&gt;案例&lt;/h2&gt;&lt;p&gt;once 的使用很简单&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; (
o  sync.Once
wg sync.WaitGroup
)

&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; i++ {
wg.Add(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)

&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; wg.Done()
o.Do(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
fmt.Println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;once&quot;&lt;/span&gt;, i)
})
}(i)
}

wg.Wait()
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;❯ &lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; run ./main.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;
once &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;源码分析&quot;&gt;&lt;a href=&quot;#源码分析&quot; class=&quot;headerlink&quot; title=&quot;源码分析&quot;/&gt;源码分析&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; Once &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {
done &lt;span class=&quot;hljs-keyword&quot;&gt;uint32&lt;/span&gt;
m    Mutex
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;done 用于判定函数是否执行，如果不为 0 会直接返回&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(o *Once)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(f &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;()&lt;/span&gt;)&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// Note: Here is an incorrect implementation of Do:&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;//if atomic.CompareAndSwapUint32(&amp;amp;o.done, 0, 1) {&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;//f()&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;//}&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// Do guarantees that when it returns, f has finished.&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// This implementation would not implement that guarantee:&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// given two simultaneous calls, the winner of the cas would&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// call f, and the second would return immediately, without&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// waiting for the first&#x27;s call to f to complete.&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// This is why the slow path falls back to a mutex, and why&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// the atomic.StoreUint32 must be delayed until after f returns.&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; atomic.LoadUint32(&amp;amp;o.done) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// Outlined slow-path to allow inlining of the fast-path.&lt;/span&gt;
o.doSlow(f)
}
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看 go 的源码真的可以学到很多东西，在这里还给出了很容易犯错的一种实现&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; atomic.CompareAndSwapUint32(&amp;amp;o.done, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {
f()
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果这么实现最大的问题是，如果并发调用，一个 goroutine 执行，另外一个不会等正在执行的这个成功之后返回，而是直接就返回了，这就不能保证传入的方法一定会先执行一次了&lt;br/&gt;所以回头看官方的实现&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; atomic.LoadUint32(&amp;amp;o.done) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Outlined slow-path to allow inlining of the fast-path.&lt;/span&gt;
    o.doSlow(f)
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;会先判断 done 是否为 0，如果不为 0 说明还没执行过，就进入 &lt;code&gt;doSlow&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(o *Once)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;doSlow&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(f &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;()&lt;/span&gt;)&lt;/span&gt; {
o.m.Lock()
&lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; o.m.Unlock()
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; o.done == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; atomic.StoreUint32(&amp;amp;o.done, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)
f()
}
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 &lt;code&gt;doSlow&lt;/code&gt; 当中使用了互斥锁来保证只会执行一次&lt;/p&gt;&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;/&gt;总结&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Once 保证了传入的函数只会执行一次，这常用在单例模式，配置文件加载，初始化这些场景下&lt;/li&gt;&lt;li&gt;但是需要注意。Once 是不能复用的，只要执行过了，再传入其他的方法也不会再执行了&lt;/li&gt;&lt;li&gt;并且 Once.Do 在执行的过程中如果 f 出现 panic，后面也不会再执行了&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;/&gt;参考文献&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://pkg.go.dev/sync#Once&quot;&gt;https://pkg.go.dev/sync#Once&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sync-primitives/#once&quot;&gt;6.2 同步原语与锁&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;关注我获取更新&quot;&gt;&lt;a href=&quot;#关注我获取更新&quot; class=&quot;headerlink&quot; title=&quot;关注我获取更新&quot;/&gt;关注我获取更新&lt;/h2&gt;&lt;p&gt;看到这里了还不关注点赞走一波&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4292b566075791a810bd41836cfafea1</guid>
<title>武汉有哪些牛批的互联网公司？</title>
<link>https://toutiao.io/k/tznmh1q</link>
<content:encoded>&lt;div&gt;&lt;div&gt;

                

                
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>