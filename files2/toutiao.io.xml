<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>89ad2d48c5dffe72695c11323c3898de</guid>
<title>神奇！可在浏览器中运行终端命令行的开源工具</title>
<link>https://toutiao.io/k/hbxr41j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;【导语】：将 CLI 工具变成 Web 应用在浏览器端访问。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;简介&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;GoTTY 是一个简单的命令行工具，可以将 CLI 工具转换为 Web 应用程序。GoTTY 是使用 xterm.js 和 hterm 在 Web 浏览器上运行基于 JavaScript 的终端。&lt;/p&gt;&lt;p&gt;GoTTY 本身提供了一个 websocket 服务器，它简单地将来自 TTY 的输出中转到客户端，并接收来自客户端的输入并将其转发到 TTY。这个 hterm + websocket 的想法受到 Wetty 的启发。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b3bdeb6e57b24c0f211786d09dcb901c_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;604&quot; data-rawheight=&quot;480&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-b3bdeb6e57b24c0f211786d09dcb901c_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-b3bdeb6e57b24c0f211786d09dcb901c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;604&quot; data-rawheight=&quot;480&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-b3bdeb6e57b24c0f211786d09dcb901c_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-b3bdeb6e57b24c0f211786d09dcb901c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-b3bdeb6e57b24c0f211786d09dcb901c_b.gif&quot;/&gt;&lt;/figure&gt;&lt;p&gt;项目地址是：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/sorenisanerd/gotty&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/sorenisanerd&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/gotty&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;&lt;b&gt;安装&lt;/b&gt;&lt;/h3&gt;&lt;h3&gt;&lt;b&gt;安装包安装&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;可以从 Releases 页面下载最新的稳定二进制文件进行安装，文件名中包含 darwin_amd64 的适用于 Mac 系统。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;https://github.com/sorenisanerd/gotty/releases  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;使用 Homebrew 安装&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ brew install sorenisanerd/gotty/gotty  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-5c81db5d629086fee8b7bb5d17dc7b77_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1020&quot; data-rawheight=&quot;554&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-5c81db5d629086fee8b7bb5d17dc7b77_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1020&quot; data-rawheight=&quot;554&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-5c81db5d629086fee8b7bb5d17dc7b77_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-5c81db5d629086fee8b7bb5d17dc7b77_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;b&gt;使用 Go 安装&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;如果有 Go 语言环境，可以使用 go get 命令安装 GoTTY 。但是，此命令会从最新的 master 分支构建一个二进制文件，其中可能包含不稳定的代码。GoTTY 需要 go 1.9 或以上版本。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ go get github.com/sorenisanerd/gotty  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;用法&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;gotty [options] &amp;lt;command&amp;gt; [&amp;lt;arguments...&amp;gt;]  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用终端命令作为 gotty 的参数，如 gotty top。默认情况下，GoTTY 在端口 8080 启动 Web 服务器。在 Web 浏览器上打开 URL，可以看到正在运行的命令，就像在终端上运行一样。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;命令参数&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;--address value, -a value     要监听的 IP 地址(默认: &quot;0.0.0.0&quot;) [$GOTTY_ADDRESS]  
   --port value, -p value        要监听的端口号(默认: &quot;8080&quot;) [$GOTTY_PORT]  
   --path value, -m value        访问路径url(默认: &quot;/&quot;) [$GOTTY_PATH]  
   --permit-write, -w            允许客户端执行写操作(默认: false) [$GOTTY_PERMIT_WRITE]  
   --credential value, -c value  身份验证的凭证(如: 用户名:密码, 默认禁用) [$GOTTY_CREDENTIAL]  
   --random-url, -r              向 URL 添加一个随机字符串(默认: false) [$GOTTY_RANDOM_URL]  
   --random-url-length value     随机 URL 字符串的长度(默认: 8) [$GOTTY_RANDOM_URL_LENGTH]  
   --tls, -t                     启用 TLS/SSL (默认: false) [$GOTTY_TLS]  
   --tls-crt value               TLS/SSL 证书文件路径(默认: &quot;~/.gotty.crt&quot;) [$GOTTY_TLS_CRT]  
   --tls-key value               TLS/SSL 密钥文件路径(默认: &quot;~/.gotty.key&quot;) [$GOTTY_TLS_KEY]  
   --tls-ca-crt value            TLS/SSL 用于客户端认证的证书(默认: &quot;~/.gotty.ca.crt&quot;) [$GOTTY_TLS_CA_CRT]  
   --index value                 自定义 index.html 文件[$GOTTY_INDEX]  
   --title-format value          浏览器窗口的标题格式(默认: &quot;{{ .command }}@{{ .hostname }}&quot;) [$GOTTY_TITLE_FORMAT]  
   --reconnect                   启用重新连接(默认: false) [$GOTTY_RECONNECT]  
   --reconnect-time value        重新连接的时间(默认: 10) [$GOTTY_RECONNECT_TIME]  
   --max-connection value        gotty 的最大连接数(默认: 0) [$GOTTY_MAX_CONNECTION]  
   --once                        只接受一个客户端并在断开连接后退出(默认: false) [$GOTTY_ONCE]  
   --timeout value               等待客户端连接超时时间(0 表示禁用) (默认: 0) [$GOTTY_TIMEOUT]  
   --permit-arguments            允许客户端在 URL 中发送命令行参数(e.g. http://example.com:8080/?arg=AAA&amp;amp;arg=BBB) (默认: false) [$GOTTY_PERMIT_ARGUMENTS]  
   --width value                 屏幕的静态宽度，0(默认)表示动态调整大小 [$GOTTY_WIDTH]  
   --height value                屏幕的静态高度，0(默认)表示动态调整大小 [$GOTTY_HEIGHT]  
   --ws-origin value             与 WebSocket 源 URL 匹配的正则表达式。默认情况下不接受跨源请求 [$GOTTY_WS_ORIGIN]  
   --term value                  要在浏览器上使用的终端名称，xterm 或 hterm 之一. (默认: &quot;xterm&quot;) [$GOTTY_TERM]  
   --enable-webgl                启用 WebGL 渲染器(默认: true) [$GOTTY_ENABLE_WEBGL]  
   --close-signal value          当 gotty 停止命令时，发送到命令进程的信号(默认: SIGHUP) [$GOTTY_CLOSE_SIGNAL]  
   --close-timeout value         客户端断开后关闭进程的时间(默认: -1) [$GOTTY_CLOSE_TIMEOUT]  
   --config value                配置文件路径(默认: &quot;~/.gotty&quot;) [$GOTTY_CONFIG]  
   --help, -h                    查看帮助文档 (默认: false)  
   --version, -v                 打印当前版本 (默认: false)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;配置文件&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;可以通过配置文件来修改 gotty 的一些默认行为，默认会从 ~/.gotty 路径加载配置文件。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;// 使用 9000 端口进行监听  
port = &quot;9000&quot;  
  
// 启用 TSL/SSL  
enable_tls = true  
  
// 修改终端显示字体、颜色  
preferences {  
    font_size = 5  
    background_color = &quot;rgb(16, 16, 32)&quot;  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;安全配置&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;默认情况下，GoTTY 只允许调整终端窗口大小，不允许客户端发送可能导致写入的命令。如果要允许客户端将输入写入 TTY 时，请添加 -w 选项。不过，接受来自远程客户端的输入对于大多数命令来说是危险的操作。&lt;/p&gt;&lt;p&gt;要限制客户端访问，可以使用 -c 选项启用基本身份验证。使用此选项，客户端需要输入指定的用户名和密码才能连接到 GoTTY 服务器。这种情况下，用户名和密码会以纯文本形式在服务器和客户端之间传输。如果对安全要求更高，请使用 SSL/TLS 证书身份验证。&lt;/p&gt;&lt;p&gt;-r 选项是一种更随意的限制访问方式。GoTTY 会生成一个随机 URL，以便只有知道该 URL 的人才能访问服务器。&lt;/p&gt;&lt;p&gt;默认情况下，服务器和客户端之间的所有流量都未加密。如果通过 GoTTY 发送机密信息，官方强烈建议使用 -t 在会话中启用 TLS/SSL。默认情况下，GoTTY 加载的 CRT和密钥文件放在 ~/.gotty.crt 和 ~/.gotty.key。可以使用 --tls-crt 和 --tls-key 选项指定证书文件路径。如果需要生成自签名认证文件时，可以使用openssl命令：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;openssl req -x509 -nodes -days 9999 -newkey rsa:2048 -keyout ~/.gotty.key -out ~/.gotty.crt  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ce9eda7226d96190e5c59b4b637b3edb</guid>
<title>PHP 祖传代码拯救者 Deliverer 他，来了</title>
<link>https://toutiao.io/k/6w9ol9z</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;blog-content&quot; class=&quot;blog-content smoothing markdown-body&quot;&gt;
    



    &lt;p&gt;前几日有位群友接手一段祖传代码，排查很久没有解决，准备提桶跑路，最终帮其解决，完整的过程见 &lt;a href=&quot;https://mengkang.net/1470.html&quot;&gt;https://mengkang.net/1470.html&lt;/a&gt; 但是最后代码的定位我有一些基于个人经验，实际调用的链路和我预计的不一样，都是靠猜。没有看到完整的调用链路，所以我想着需要一个工具来辅助明确查询到整个完整的调用链。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;所以搞了这么个工具，主要是用于一些不熟悉的项目，而且日常环境不好复现的线上场景。&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;&lt;code&gt;deliverer&lt;/code&gt; 祖传代码跑路拯救者 &lt;a href=&quot;https://github.com/zhoumengkang/deliverer&quot;&gt;https://github.com/zhoumengkang/deliverer&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;如果你的项目不是那么糟糕，日常环境都 ok，那么熟悉一个项目最好的方式还是 xdebug，这个工具主要是排查线上问题。&lt;br/&gt;类似的工具有 360 的 phptrace 实现原理上稍微有点不同&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;blog-title-1&quot;&gt;功能点&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;可以根据&lt;code&gt;函数名&lt;/code&gt;、&lt;code&gt;类名&lt;/code&gt;、&lt;code&gt;方法名&lt;/code&gt;、&lt;code&gt;路由&lt;/code&gt;来过滤输出&lt;/li&gt;&lt;li&gt;可以在查询到指定过滤内容 n 次之后退出&lt;/li&gt;&lt;li&gt;可以根据 request id 回放细看整个完整的调用链&lt;/li&gt;&lt;li&gt;过滤的内容会高亮显示&lt;/li&gt;&lt;li&gt;调用栈比较深的可以指定 -l 来隐藏深度调用的展示&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;blog-title-2&quot;&gt;原理&lt;/h1&gt;&lt;p&gt;其实比较简单，分两步，第一步收集日志，第二步分析日志。&lt;/p&gt;&lt;h2 id=&quot;blog-title-3&quot;&gt;第一步&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;PHP_MINIT&lt;/code&gt;阶段，通过&lt;code&gt;zend_set_user_opcode_handler&lt;/code&gt; 来设置对 &lt;code&gt;ZEND_DO_UCALL&lt;/code&gt; 、&lt;code&gt;ZEND_DO_FCALL_BY_NAME&lt;/code&gt;、&lt;code&gt;ZEND_DO_FCALL&lt;/code&gt; 三类 &lt;code&gt;opcode&lt;/code&gt; 的处理分析。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;注意其中会涵盖一些内置函数和方法的调用，我们可以通过类型进行过滤。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;然后在&lt;code&gt;PHP_RINIT&lt;/code&gt;阶段新建日志文件，写入请求的信息&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pid-ts sapi http_method http_url&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请求过程中在自定义的 handler 里面打印调用栈信息&lt;/p&gt;&lt;p&gt;最后在&lt;code&gt;PHP_RSHUTDOWN&lt;/code&gt;关闭日志文件的写入&lt;/p&gt;&lt;h2 id=&quot;blog-title-4&quot;&gt;第二步&lt;/h2&gt;&lt;p&gt;对收集好的日志，利用&lt;code&gt;bin/deliverer&lt;/code&gt;进行分析和整理，这块是 php 脚本，就不赘述了。&lt;/p&gt;&lt;h1 id=&quot;blog-title-5&quot;&gt;安装使用&lt;/h1&gt;&lt;h2 id=&quot;blog-title-6&quot;&gt;编译&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ phpize
$ ./configure --with-php-config=/usr/local/php/bin/php-config
$ make &amp;amp;&amp;amp; sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;blog-title-7&quot;&gt;配置 php.ini&lt;/h2&gt;&lt;p&gt;追加&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;[deliverer]
extension=deliverer.so&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;blog-title-8&quot;&gt;重启 php-fpm&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo service php-fpm restart&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;blog-title-9&quot;&gt;使用分析工具&lt;/h2&gt;&lt;p&gt;可以移动&lt;code&gt;./bin/deliverer&lt;/code&gt;到你觉得合适的目录，假如在当前目录&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ chmod +x deliverer&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用一段我自己很久之前的祖传代码（我的博客）来跑下&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./bin/deliverer -t&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样会一直监控所有的 php 进程的执行&lt;/p&gt;&lt;p&gt;&lt;img data-original=&quot;/upload/image/2021/0623/1624420468155102.jpg&quot;/&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./bin/deliverer -tAction::initUser -n3 -l5&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img data-original=&quot;/upload/image/2021/0623/1624420481407372.jpg&quot;/&gt;&lt;br/&gt;&lt;img data-original=&quot;/upload/image/2021/0623/1624420488305285.jpg&quot;/&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;值&lt;/th&gt;&lt;th&gt;解释&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;-t&lt;/td&gt;&lt;td&gt;Action::initUser&lt;/td&gt;&lt;td&gt;过滤包含该调用的请求&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;-n&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;统计三次然后退出&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;-l&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;函数（方法）调用深度显示，最多显示 5 层，超出部分在末尾标出&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./bin/deliverer -v7979-1624369150991941&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过 &lt;code&gt;-v&lt;/code&gt; &lt;code&gt;requestId&lt;/code&gt; 来详细查看完整调用栈&lt;/p&gt;&lt;p&gt;&lt;img data-original=&quot;/upload/image/2021/0623/1624420502378165.jpg&quot;/&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./bin/deliverer -tSqlExecute::getAll -n1 -l3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当要查询方法，函数调用栈过深，不在层级查询范围之内，则其外层调用显示红色&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/upload/image/2021/0623/1624420511944914.jpg&quot; alt=&quot;PHP 祖传代码拯救者 Deliverer 他，来了！&quot;/&gt;&lt;/p&gt;&lt;h1 id=&quot;blog-title-10&quot;&gt;todo&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;配置项优化&lt;/li&gt;&lt;li&gt;命令行和扩展联动配置&lt;/li&gt;&lt;li&gt;其他版本还未做兼容，本周跟上&lt;/li&gt;&lt;/ol&gt;            &lt;blockquote class=&quot;blog-header-tip&quot;&gt;
            &lt;p&gt;原创博客，如需转载，请联系 i@mengkang.net&lt;br/&gt;链接：&lt;a href=&quot;https://mengkang.net/1473.html&quot;&gt;https://mengkang.net/1473.html&lt;/a&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;img data-original=&quot;/upload/image/2021/0615/1623765378553484.jpg&quot;/&gt;
&lt;/div&gt;            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>446c921068a05ba747dbe411ee8ea818</guid>
<title>聊聊 Spring Boot 项目引用第三平台私有 jar 踩到的坑</title>
<link>https://toutiao.io/k/lwp4q3t</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.4482758620689655&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/x3PUSozJwwAaJw4zXjqfPRUA7lJmekCwibg7BQjEA5DnAL3micemNQFaQ8qM1HKwxibZS7icibtYnBfZjXwSAice1RqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;58&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;点击上方&lt;span data-mid=&quot;&quot;&gt;蓝字&lt;/span&gt;关注我们&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.4482758620689655&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hY4KIU3VygBDHnandGNlscl5JDiaYsa0ADibK059RiaNjG21YZJZgr9qNRqjvDMQtbh0EqnBylWaIdBVB9vxfSibmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;58&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;01&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;最近和朋友闲聊，他说他遇到一个问题，他引用了第三方公司私有API包，他在本地项目启动没问题，打包运行却找不到这个API包，于是我就问他怎么引用这个jar。&lt;/p&gt;&lt;p&gt;他工程项目第三jar存放的位置类似如下&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7557077625570776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxIdkf8Ta2OMxib11Y5Bty7HgIXyQKhJLnPiaHOcKGfxwvsI7n5pM93QO4Ec06PmibzLELqr4rRHbWZsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;438&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在pom做如下引用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.example&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;demo-api&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;system&lt;span&gt;&amp;lt;/&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;systemPath&lt;/span&gt;&amp;gt;&lt;/span&gt;${project.basedir}/lib/demo-api.jar&lt;span&gt;&amp;lt;/&lt;span&gt;systemPath&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;pom打包插件用springboot自带的插件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;&lt;span&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;&amp;lt;&lt;span&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;repackage&lt;span&gt;&amp;lt;/&lt;span&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;/&lt;span&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;/&lt;span&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;/&lt;span&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;看到这个插件，大概就知道问题所在了，springboot默认的打包插件是不会把systemscope的jar打进springboot项目的BOOT-INF/lib/。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; springboot项目默认会引用BOOT-INF/lib/里面的jar&lt;/p&gt;&lt;p&gt;于是我就跟朋友说，不要用systemscope了，直接搭建maven私仓，然后把第三方jar上传到私仓中，pom做如下引用&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.example&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;demo-api&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;朋友给回复是公司没有私仓，我一脸懵逼，我就问他应该不至于吧，再次确认，得到他同样的回复后。后边就提供了下边的几种方案，让他参考选择&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;02&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;springboot如何引用没有发布到私仓的第三jar&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;strong&gt;整体思路&lt;/strong&gt;&lt;span&gt;：因为springboot提供的打包插件，默认是会把位于BOOT-INF/lib/里面的jar编译成class文件然后供项目引用。因此我们只需确保BOOT-INF/lib/里面含有我们要引用的第三方jar即可&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mYa0sCia1qwCvHOMJjG9CpYS2Dxg4BTswGyYqHicBiblUPjYtNVRRV8FfvmjHGrv2QDbXSTonQI2cxWbClolxgR1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zG8IRvK3Jv7v7KkHWz3icB3KyTibM5FHc8agmPbXe6JmlEBp8DaAicJnXP6uGW3ib9GC27vCvuiadzB0wiaticmUqWAUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;方案一：pom指定jar范围为system+springboot插件加入includeSystemScope标签的属性为true&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DVZP48AYchdT255kFMRWTzyhjz4G7gCkibZoIZzGyRL8tC8TmnwMNRXvnQzXIQfpXicBhryMc8v4iczz9jcOKVTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O8ibmtKwBdw2y81ibxiaccicUBbaVmPQtu2EYiaUDwicb704E6QHad6o5oJhLeibDSMewvakJR9UNJ43ibibLCyYeAkWZVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.example&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;demo-api&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;system&lt;span&gt;&amp;lt;/&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;systemPath&lt;/span&gt;&amp;gt;&lt;/span&gt;${project.basedir}/lib/demo-api.jar&lt;span&gt;&amp;lt;/&lt;span&gt;systemPath&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;includeSystemScope&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;span&gt;includeSystemScope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;/&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;&lt;span&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;&amp;lt;&lt;span&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;repackage&lt;span&gt;&amp;lt;/&lt;span&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;/&lt;span&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;/&lt;span&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;/&lt;span&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mYa0sCia1qwCvHOMJjG9CpYS2Dxg4BTswGyYqHicBiblUPjYtNVRRV8FfvmjHGrv2QDbXSTonQI2cxWbClolxgR1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zG8IRvK3Jv7v7KkHWz3icB3KyTibM5FHc8agmPbXe6JmlEBp8DaAicJnXP6uGW3ib9GC27vCvuiadzB0wiaticmUqWAUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;方案二：pom指定jar范围为system+resources标签引入要包含的jar&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DVZP48AYchdT255kFMRWTzyhjz4G7gCkibZoIZzGyRL8tC8TmnwMNRXvnQzXIQfpXicBhryMc8v4iczz9jcOKVTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O8ibmtKwBdw2y81ibxiaccicUBbaVmPQtu2EYiaUDwicb704E6QHad6o5oJhLeibDSMewvakJR9UNJ43ibibLCyYeAkWZVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.example&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;demo-api&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;system&lt;span&gt;&amp;lt;/&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;systemPath&lt;/span&gt;&amp;gt;&lt;/span&gt;${project.basedir}/lib/demo-api.jar&lt;span&gt;&amp;lt;/&lt;span&gt;systemPath&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;resources&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;resource&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;directory&lt;/span&gt;&amp;gt;&lt;/span&gt;${project.basedir}/lib&lt;span&gt;&amp;lt;/&lt;span&gt;directory&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;targetPath&lt;/span&gt;&amp;gt;&lt;/span&gt;BOOT-INF/lib/&lt;span&gt;&amp;lt;/&lt;span&gt;targetPath&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;includes&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;include&lt;/span&gt;&amp;gt;&lt;/span&gt;**/*.jar&lt;span&gt;&amp;lt;/&lt;span&gt;include&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;/&lt;span&gt;includes&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;resource&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;resources&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;&lt;span&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;&amp;lt;&lt;span&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;repackage&lt;span&gt;&amp;lt;/&lt;span&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;/&lt;span&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;/&lt;span&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;/&lt;span&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mYa0sCia1qwCvHOMJjG9CpYS2Dxg4BTswGyYqHicBiblUPjYtNVRRV8FfvmjHGrv2QDbXSTonQI2cxWbClolxgR1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zG8IRvK3Jv7v7KkHWz3icB3KyTibM5FHc8agmPbXe6JmlEBp8DaAicJnXP6uGW3ib9GC27vCvuiadzB0wiaticmUqWAUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;方案三：直接将第三方jar打进要发布的本地仓库&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DVZP48AYchdT255kFMRWTzyhjz4G7gCkibZoIZzGyRL8tC8TmnwMNRXvnQzXIQfpXicBhryMc8v4iczz9jcOKVTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O8ibmtKwBdw2y81ibxiaccicUBbaVmPQtu2EYiaUDwicb704E6QHad6o5oJhLeibDSMewvakJR9UNJ43ibibLCyYeAkWZVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.856020942408377&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxIdkf8Ta2OMxib11Y5Bty7Hg85Pdria48HU2ibqHEIjGAK0Bz3dOh0Xmg4iasEOmdhVkvKfRNr7OAYTyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;764&quot;/&gt;&lt;/p&gt;&lt;p&gt;上图是maven官方的仓库流程图，其实对maven比较熟悉的朋友应该会知道，maven会先从本地仓库找jar，本地仓库找不到jar，就会再从私仓（如果有搭建私仓）里面找，私仓没有再从中央仓库找，然后找到的jar再存放到本地仓库。&lt;/p&gt;&lt;p&gt;因此我们执行如下命令就可以将第三方jar直接打进本地仓库&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;mvn &lt;span&gt;install&lt;/span&gt;:&lt;span&gt;install&lt;/span&gt;-&lt;span&gt;file&lt;/span&gt; -DgroupId=org.example -DartifactId=demo-api -Dversion=&lt;span&gt;1.0&lt;/span&gt;-&lt;span&gt;SNAPSHOT&lt;/span&gt; -Dfile=F:\boot-thirdparty\lib\demo-api.jar -Dpackaging=jar&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;项目的pom直接像如下引入第三方jar即可&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.example&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;demo-api&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mYa0sCia1qwCvHOMJjG9CpYS2Dxg4BTswGyYqHicBiblUPjYtNVRRV8FfvmjHGrv2QDbXSTonQI2cxWbClolxgR1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zG8IRvK3Jv7v7KkHWz3icB3KyTibM5FHc8agmPbXe6JmlEBp8DaAicJnXP6uGW3ib9GC27vCvuiadzB0wiaticmUqWAUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;方案四：搭建maven私仓，将第三方jar上传到maven私仓&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DVZP48AYchdT255kFMRWTzyhjz4G7gCkibZoIZzGyRL8tC8TmnwMNRXvnQzXIQfpXicBhryMc8v4iczz9jcOKVTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O8ibmtKwBdw2y81ibxiaccicUBbaVmPQtu2EYiaUDwicb704E6QHad6o5oJhLeibDSMewvakJR9UNJ43ibibLCyYeAkWZVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 搭建私仓不在本文论述范围，就讲下如何将第三方jar上传到私仓&lt;/p&gt;&lt;p&gt;&lt;strong&gt;a、&lt;/strong&gt; 先在maven的settings.xml的servers标签配置如下内容&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;server&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;nexus&lt;span&gt;&amp;lt;/&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;username&lt;/span&gt;&amp;gt;&lt;/span&gt;admin&lt;span&gt;&amp;lt;/&lt;span&gt;username&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;password&lt;/span&gt;&amp;gt;&lt;/span&gt;admin123&lt;span&gt;&amp;lt;/&lt;span&gt;password&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;server&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;b、&lt;/strong&gt;&lt;span&gt; 执行发布命令行，如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;mvn deploy:deploy-&lt;span&gt;file&lt;/span&gt; -DgroupId=org.example -DartifactId=demo-api -Dversion=&lt;span&gt;1.0&lt;/span&gt;-SNAPSHOT -Dpackaging=jar -Dfile=F:\boot-thirdparty\lib\demo-api.jar -Durl=你的私仓地址 -DrepositoryId=和settings.xml配置server标签id一致，如上的nexus&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;或者也可以利用maven私仓自带的可视化界面进行上传&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;03&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面几种方案，个人是比较倾向方案三和方案四，因为本来就是用maven来管理jar了，在项目中还要额外把jar引进来，然后再修改插件，看着就感觉有点变扭&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1be0c52e53a5f85dd8745edf06df0386</guid>
<title>一文理解 Kafka 的选举机制与 Rebalance 机制</title>
<link>https://toutiao.io/k/oaspge5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-source-line=&quot;1&quot;&gt;Kafka是一个高性能，高容错，多副本，可复制的分布式消息系统。在整个系统中，涉及到多处选举机制，被不少人搞混，这里总结一下，本篇文章大概会从三个方面来讲解。&lt;/p&gt;&lt;ol data-source-line=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;控制器（Broker）选举机制&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分区副本选举机制&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;消费组选举机制&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;7&quot;&gt;如果对Kafka不了解的话，可以先看这篇博客《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&amp;amp;mid=2247484251&amp;amp;idx=1&amp;amp;sn=92d6b50c5987f4f80316313db05b56ff&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;一文快速了解Kafka&lt;/a&gt;》。&lt;/p&gt;&lt;h2 data-source-line=&quot;9&quot;&gt;控制器选举&lt;/h2&gt;&lt;p data-source-line=&quot;11&quot;&gt;控制器是Kafka的核心组件，它的主要作用是在Zookeeper的帮助下管理和协调整个Kafka集群。集群中任意一个Broker都能充当控制器的角色，但在运行过程中，只能有一个Broker成为控制器。&lt;/p&gt;&lt;blockquote data-source-line=&quot;13&quot;&gt;&lt;p&gt;控制器的作用可以查看文末&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-source-line=&quot;15&quot;&gt;控制器选举可以认为是Broker的选举。&lt;/p&gt;&lt;p data-source-line=&quot;17&quot;&gt;集群中第一个启动的Broker会通过在Zookeeper中创建临时节点/controller来让自己成为控制器，其他Broker启动时也会在zookeeper中创建临时节点，但是发现节点已经存在，所以它们会收到一个异常，意识到控制器已经存在，那么就会在Zookeeper中创建watch对象，便于它们收到控制器变更的通知。&lt;/p&gt;&lt;p data-source-line=&quot;19&quot;&gt;那么如果控制器由于网络原因与Zookeeper断开连接或者异常退出，那么其他broker通过watch收到控制器变更的通知，就会去尝试创建临时节点/controller，如果有一个Broker创建成功，那么其他broker就会收到创建异常通知，也就意味着集群中已经有了控制器，其他Broker只需创建watch对象即可。&lt;/p&gt;&lt;p data-source-line=&quot;21&quot;&gt;如果集群中有一个Broker发生异常退出了，那么控制器就会检查这个broker是否有分区的副本leader，如果有那么这个分区就需要一个新的leader，此时控制器就会去遍历其他副本，决定哪一个成为新的leader，同时更新分区的ISR集合。&lt;/p&gt;&lt;p data-source-line=&quot;23&quot;&gt;如果有一个Broker加入集群中，那么控制器就会通过Broker ID去判断新加入的Broker中是否含有现有分区的副本，如果有，就会从分区副本中去同步数据。&lt;/p&gt;&lt;h3 data-source-line=&quot;25&quot;&gt;防止控制器脑裂&lt;/h3&gt;&lt;p data-source-line=&quot;27&quot;&gt;如果控制器所在broker挂掉了或者Full GC停顿时间太长超过zookeeper&lt;code&gt;session timeout&lt;/code&gt;出现假死，Kafka集群必须选举出新的控制器，但如果之前被取代的控制器又恢复正常了，它依旧是控制器身份，这样集群就会出现两个控制器，这就是控制器脑裂问题。&lt;/p&gt;&lt;p data-source-line=&quot;29&quot;&gt;解决方法：&lt;/p&gt;&lt;p data-source-line=&quot;31&quot;&gt;为了解决Controller脑裂问题，ZooKeeper中还有一个与Controller有关的持久节点/controller_epoch，存放的是一个整形值的epoch number（纪元编号，也称为隔离令牌），集群中每选举一次控制器，就会通过Zookeeper创建一个数值更大的epoch number，如果有broker收到比这个epoch数值小的数据，就会忽略消息。&lt;/p&gt;&lt;h2 data-source-line=&quot;33&quot;&gt;分区副本选举机制&lt;/h2&gt;&lt;p data-source-line=&quot;35&quot;&gt;由控制器执行。&lt;/p&gt;&lt;ol data-source-line=&quot;37&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;从Zookeeper中读取当前分区的所有ISR(in-sync replicas)集合。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;调用配置的分区选择算法选择分区的leader。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-source-line=&quot;40&quot;&gt;Unclean leader选举&lt;/h3&gt;&lt;p data-source-line=&quot;42&quot;&gt;ISR是动态变化的，所以ISR列表就有为空的时候，ISR为空说明leader副本也挂掉了。此时Kafka要重新选举出新的leader。但ISR为空，怎么进行leader选举呢？&lt;/p&gt;&lt;p data-source-line=&quot;44&quot;&gt;Kafka把不在ISR列表中的存活副本称为“非同步副本”，这些副本中的消息远远落后于leader，如果选举这种副本作为leader的话就可能造成数据丢失。所以Kafka broker端提供了一个参数&lt;code&gt;unclean.leader.election.enable&lt;/code&gt;，用于控制是否允许非同步副本参与leader选举；如果开启，则当 ISR为空时就会从这些副本中选举新的leader，这个过程称为 Unclean leader选举。&lt;/p&gt;&lt;p data-source-line=&quot;46&quot;&gt;可以根据实际的业务场景选择是否开启Unclean leader选举。一般建议是关闭Unclean leader选举，因为通常数据的一致性要比可用性重要。&lt;/p&gt;&lt;h2 data-source-line=&quot;48&quot;&gt;消费组选主&lt;/h2&gt;&lt;p data-source-line=&quot;50&quot;&gt;在Kafka的消费端，会有一个消费者协调器以及消费组，组协调器（Group Coordinator）需要为消费组内的消费者选举出一个消费组的leader。&lt;/p&gt;&lt;p data-source-line=&quot;52&quot;&gt;如果消费组内还没有leader，那么第一个加入消费组的消费者即为消费组的leader，如果某一个时刻leader消费者由于某些原因退出了消费组，那么就会重新选举leader，选举方式如下：&lt;/p&gt;&lt;pre data-source-line=&quot;53&quot;&gt;&lt;code&gt;private val members = new mutable&lt;span&gt;.HashMap&lt;/span&gt;[String, MemberMetadata]&lt;br/&gt;leaderId = members&lt;span&gt;.keys&lt;/span&gt;&lt;span&gt;.headOption&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-source-line=&quot;57&quot;&gt;在组协调器中消费者的信息是以HashMap的形式存储的，其中key为消费者的member_id，而value是消费者相关的元数据信息。而leader的取值为HashMap中的第一个键值对的key（等同于随机）。&lt;/p&gt;&lt;blockquote data-source-line=&quot;59&quot;&gt;&lt;p&gt;消费组的Leader和Coordinator没有关联。消费组的leader负责Rebalance过程中消费分配方案的制定。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-source-line=&quot;61&quot;&gt;消费端Rebalance机制&lt;/h2&gt;&lt;p data-source-line=&quot;63&quot;&gt;就Kafka消费端而言，有一个难以避免的问题就是消费者的重平衡即Rebalance。Rebalance是让一个消费组的所有消费者就如何消费订阅topic的所有分区达成共识的过程，在Rebalance过程中，所有Consumer实例都会停止消费，等待Rebalance的完成。因为要停止消费等待重平衡完成，因此Rebalance会严重影响消费端的TPS，是应当尽量避免的。&lt;/p&gt;&lt;h3 data-source-line=&quot;65&quot;&gt;触发Rebalance的时机&lt;/h3&gt;&lt;p data-source-line=&quot;67&quot;&gt;Rebalance 的触发条件有3个。&lt;/p&gt;&lt;ol data-source-line=&quot;69&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;消费组成员个数发生变化。例如有新的Consumer实例加入或离开该消费组。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;订阅的 Topic 个数发生变化。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;订阅 Topic 的分区数发生变化。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;73&quot;&gt;Rebalance 发生时，Group 下所有Consumer 实例都会协调在一起共同参与，kafka 能够保证尽量达到最公平的分配。但是 Rebalance 过程对 consumer group 会造成比较严重的影响。在 Rebalance 的过程中 consumer group 下的所有消费者实例都会停止工作，等待 Rebalance 过程完成。&lt;/p&gt;&lt;h3 data-source-line=&quot;75&quot;&gt;Rebalance过程&lt;/h3&gt;&lt;p data-source-line=&quot;77&quot;&gt;Rebalance过程分为两步：Join和Sync。&lt;/p&gt;&lt;ol data-source-line=&quot;79&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Join。所有成员都向Group Coordinator发送JoinGroup请求，请求加入消费组。一旦所有成员都发送了JoinGroup请求，Coordinator会从中选择一个Consumer担任leader的角色，并把组成员信息以及订阅信息发给leader——注意leader和coordinator不是一个概念。leader负责消费分配方案的制定。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;81&quot;&gt;&lt;img data-ratio=&quot;0.3856812933025404&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7GkYyUQ3uicbnn8hX8n5Q8weyPqYO6CLpXT6VBCqOOk6lufAZF72wCaMfEWg3GQfricGZrVnHI5DyZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;ol start=&quot;2&quot; data-source-line=&quot;83&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Sync。这一步leader开始分配消费方案，即哪个consumer负责消费哪些topic的哪些partition。一旦完成分配，leader会将这个方案封装进SyncGroup请求中发给coordinator，非leader也会发SyncGroup请求，只是内容为空。coordinator接收到分配方案之后会把方案塞进SyncGroup的response中发给各个consumer。这样组内的所有成员就都知道自己应该消费哪些分区了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;85&quot;&gt;&lt;img data-ratio=&quot;0.42032332563510394&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7GkYyUQ3uicbnn8hX8n5Q8wehribjEppQw8B1zjpqOmgPkicKDsSLkjGO55SvbURnI5RrGs8VibLVY9xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;h3 data-source-line=&quot;87&quot;&gt;避免不必要的Rebalance&lt;/h3&gt;&lt;p data-source-line=&quot;89&quot;&gt;前面说过Rebalance发生的时机有三个，后两个时机是可以人为避免的。发生Rebalance最常见的原因是消费组成员个数发生变化。&lt;/p&gt;&lt;p data-source-line=&quot;91&quot;&gt;这其中消费者成员正常的添加和停掉导致Rebalance，也是无法避免。但是在某些情况下，Consumer实例会被Coordinator错误地认为已停止从而被踢出Group。从而导致rebalance。&lt;/p&gt;&lt;p data-source-line=&quot;93&quot;&gt;这种情况可以通过Consumer端的参数&lt;code&gt;session.timeout.ms&lt;/code&gt;和&lt;code&gt;max.poll.interval.ms&lt;/code&gt;进行配置。&lt;/p&gt;&lt;blockquote data-source-line=&quot;95&quot;&gt;&lt;p&gt;有关这种情况，可以查看博客《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&amp;amp;mid=2247484391&amp;amp;idx=1&amp;amp;sn=09fc29827f315a20619551473f009531&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;一文理解Kafka重复消费的原因和解决方案&lt;/a&gt;》&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-source-line=&quot;97&quot;&gt;除了这个参数，Consumer还提供了控制发送心跳请求频率的参数，就是&lt;code&gt;heartbeat.interval.ms&lt;/code&gt;。这个值设置得越小，Consumer实例发送心跳请求的频率就越高。频繁地发送心跳请求会额外消耗带宽资源，但好处是能够更快地知道是否开启Rebalance，因为Coordinator通知各个Consumer实例是否开启Rebalance就是将REBALANCE_NEEDED标志封装进心跳请求的响应体中。&lt;/p&gt;&lt;p data-source-line=&quot;99&quot;&gt;总之，要为业务处理逻辑留下充足的时间使Consumer不会因为处理这些消息的时间太长而引发Rebalance，但也不能时间设置过长导致Consumer宕机但迟迟没有被踢出Group。&lt;/p&gt;&lt;h2 data-source-line=&quot;101&quot;&gt;补充&lt;/h2&gt;&lt;h3 data-source-line=&quot;103&quot;&gt;Kafka控制器的作用&lt;/h3&gt;&lt;p data-source-line=&quot;105&quot;&gt;Kafka控制器的作用是管理和协调Kafka集群，具体如下：&lt;/p&gt;&lt;ol data-source-line=&quot;107&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;主题管理：创建、删除Topic，以及增加Topic分区等操作都是由控制器执行。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分区重分配：执行Kafka的reassign脚本对Topic分区重分配的操作，也是由控制器实现。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Preferred leader选举。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-source-line=&quot;111&quot;&gt;&lt;p&gt;因为在Kafka集群长时间运行中，broker的宕机或崩溃是不可避免的，leader就会发生转移，即使broker重新回来，也不会是leader了。在众多leader的转移过程中，就会产生leader不均衡现象，可能一小部分broker上有大量的leader，影响了整个集群的性能，所以就需要把leader调整回最初的broker上，这就需要Preferred leader选举。&lt;/p&gt;&lt;/blockquote&gt;&lt;ol start=&quot;4&quot; data-source-line=&quot;113&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;集群成员管理：控制器能够监控新broker的增加，broker的主动关闭与被动宕机，进而做其他工作。这也是利用Zookeeper的ZNode模型和Watcher机制，控制器会监听Zookeeper中/brokers/ids下临时节点的变化。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据服务：控制器上保存了最全的集群元数据信息，其他所有broker会定期接收控制器发来的元数据更新请求，从而更新其内存中的缓存数据。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-source-line=&quot;116&quot;&gt;Kafka协调器&lt;/h3&gt;&lt;p data-source-line=&quot;118&quot;&gt;Kafka中主要有两种协调器：&lt;/p&gt;&lt;ol data-source-line=&quot;120&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;组协调器（Group Coordinator）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;消费者协调器（Consumer Coordinator）&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;123&quot;&gt;Kafka为了更好的实现消费组成员管理、位移管理以及Rebalance等，broker服务端引入了组协调器（Group Coordinator），消费端引入了消费者协调器（Consumer Coordinator）。&lt;/p&gt;&lt;p data-source-line=&quot;125&quot;&gt;每个broker启动时，都会创建一个组协调器实例，负责监控这个消费组里的所有消费者的心跳以及判断是否宕机，然后开启消费者Rebalance。&lt;/p&gt;&lt;p data-source-line=&quot;127&quot;&gt;每个Consumer启动时，会创建一个消费者协调器实例并会向Kafka集群中的某个节点发送FindCoordinatorRequest请求来查找对应的组协调器，并跟其建立网络连接。&lt;/p&gt;&lt;p data-source-line=&quot;129&quot;&gt;&lt;img data-ratio=&quot;0.4222222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7GkYyUQ3uicbnn8hX8n5Q8wefvcZJkrXDj6aj1ibwM2QXUtakFZ5ZfEpU5BLwHo9vDGk0EOIdCtTxxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;131&quot;&gt;客户端的消费者协调器和服务端的组协调器会通过心跳保持通信。&lt;/p&gt;&lt;h3 data-source-line=&quot;133&quot;&gt;Kafka舍弃ZooKeeper的理由&lt;/h3&gt;&lt;p data-source-line=&quot;135&quot;&gt;Kafka目前强依赖于ZooKeeper：ZooKeeper为Kafka提供了元数据的管理，例如一些Broker的信息、主题数据、分区数据等等，还有一些选举、扩容等机制也都依赖ZooKeeper。&lt;/p&gt;&lt;ol data-source-line=&quot;137&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;运维复杂度&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;139&quot;&gt;运维Kafka的同时需要保证一个高可用的Zookeeper集群，增加了运维和故障排查的复杂度。&lt;/p&gt;&lt;ol start=&quot;2&quot; data-source-line=&quot;141&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;性能差&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul data-source-line=&quot;143&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;在一些大公司，Kafka集群比较大，分区数很多的时候，ZooKeeper存储的元数据就会很多，性能就会变差。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ZooKeeper需要选举，选举的过程中是无法提供服务的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Zookeeper节点如果频繁发生Full Gc，与客户端的会话将超时，由于无法响应客户端的心跳请求，从而与会话相关联的临时节点也会被删除。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-source-line=&quot;147&quot;&gt;所以Kafka 2.8版本上支持内部的quorum服务来替换ZooKeeper的工作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>716a3da00bdea2f789697f9407fb9a48</guid>
<title>领域泛化最新综述</title>
<link>https://toutiao.io/k/rujv1ts</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section class=&quot;mp_profile_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwMTE1NjQxMQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/BJbRvwibeSTttHgILiboWS0spPWQT1uOfiamEC03e9ic1YlzovegQphn2ErRxy4zVbbbfYm3uLQ6gaAv1zF0c1A6tQ/0?wx_fmt=png&quot; data-nickname=&quot;我爱计算机视觉&quot; data-alias=&quot;aicvml&quot; data-signature=&quot;专业计算机视觉技术分享平台，“有价值有深度”，分享开源技术与最新论文解读，传播视觉技术的业内最佳实践。知乎/微博：我爱计算机视觉，官网 www.52cv.net 。KeyWords：深度学习、机器学习、计算机视觉、人工智能。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;0 导读&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;领域泛化（Domain Generalization）研究的问题是如何利用源领域数据训练一个模型，其目的是使得该模型能够泛化到其他不同数据分布的目标领域。虽然这项能力对于人类来讲似乎并不需要刻意学习就能拥有，但是对于目前的机器学习模型和算法，领域泛化仍然是极具挑战性的问题。从领域泛化这个研究问题的正式诞生到如今已经经历了整整十年的探索，期间涌现出了形形色色的方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为该领域的第一篇系统性综述，本文将会引领你去详细了解领域泛化这个问题的历史，问题的种类，当前通用的基准数据库，以及对现有方法的归类和总结。文章的最也提出了对该领域今后研究的展望。希望读者在阅读完之后能够对领域泛化这个问题的研究有一个系统性的认知。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3910171730515192&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BJbRvwibeSTsLIickp52hcxtJ4RlCdHr3hm1YAO79q1EticIITN2cLiaJGnZH8a0vicwiaMYwPE45b9iawuiaVLHkfnVxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1514&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;论文链接：https://arxiv.org/abs/2103.02503&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以下我们将简要介绍论文里的三个核心部分，有兴趣的读者可以阅读原文来了解更多内容。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;1. 背景介绍 &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（Background, Section 2）&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;什么是领域泛化？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简单来说，一个领域通常定义为对数据变量X和标签变量Y的一个联合分布P(X, Y)。在领域泛化的问题中，源领域数据的分布PS(X, Y)和目标领域数据的分布PT(X, Y)是不同的，并且目标领域的数据在模型训练过程中是不可见的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;根据源领域数据的来源数量，领域泛化的问题又可以分为单一领域泛化（Single-Source Domain Generalization），或者是多领域泛化（Multi-Source Domain Generalization）。顾名思义，前者只能用单一来源的数据做模型训练，而后者则是采用多个来源不同的数据做模型训练。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;领域泛化的相关研究领域有哪些？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;领域泛化可以说是和多个研究领域息息相关，例如迁移学习（Transfer Learning），零次学习（Zero-Shot Learning），和领域自应性学习（Domain Adaptation）。领域泛化与其相关领域的异同之处大概可以归纳为以下几个要点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）源领域数据的来源数量&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）源领域和目标领域数据分布的异同&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）源领域和目标领域的标签空间的异同&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4）目标领域数据的可见性&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;那领域泛化的算法又是如何进行实验验证，以及当前通用的基准数据库有哪些？&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实验证的方法很直观，那就是把数据库当中任意一个领域作为目标领域，然后把剩下的领域作为源领域用做模型训练。测试的时候则直接把在源领域训练好的模型部署在之前选定的目标领域上做测试。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于当前通用的数据库，文章总结了超过20个在机器视觉领域里常用的数据库（见以下剪切图），其涵盖了多个视觉任务，例如物体识别（Object Recognition），语义分割（Semantic Segmentation），以及行人再识别（Person Re-identification）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8154050464807437&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BJbRvwibeSTsLIickp52hcxtJ4RlCdHr3herbzGnAXuF3vxY2leDibeYF2X8A2koiabc7ia8vmoZQ978ZBIal1dsEXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1506&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;2. 方法论的综述&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（Methodologies: A Survey, Section 3）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;十年的研究在领域泛化这个问题上产生了形形色色的方法。文章对这些方法做了一个全面的总结，并概括出了&lt;/span&gt;&lt;strong&gt;&lt;span&gt;11&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;种类别（预览请见以下从文章中剪切出来的表4）。以下会简单介绍每种类别方法的主要设计思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.040909090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BJbRvwibeSTsLIickp52hcxtJ4RlCdHr3hw2Co1eVz5icjvQ0V4nrBzEBTfjcHgp5Kdxg3uY734CNI6Q8dhasOjEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;类别1&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;  领域对齐（Domain Alignment）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这类方法通常是去对齐源领域之间的特征分布。其设计的主要驱动力是：如果学到的特征对源领域之间的分布偏移不敏感，那么该特征也应该对目标领域的分布偏移具有较好的鲁邦性。目前绝大多数的领域泛化方法都是基于领域对齐这个思想开发的。这类方法一般会对齐1）边缘分布P(X)，2）类别条件分布P(X | Y)，或是3）后验分布P(Y | X)。对齐的方法有许多，例如利用最大平均差异（Maximum Mean Discrepancy），或者领域对抗训练（Domain-Adversarial Learning）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 类别2 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  元学习（Meta-Learning）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这类方法的核心要素是把多个源领域随机分成伪源领域（pseudo-source domain）和伪目标领域（pseudo-target domain），然后利用元学习的算法去优化伪源领域上的目标函数，使得模型在伪目标领域上的性能有所提升，以此来激发模型学习泛化性强的特征。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 类别3 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  数据增强（Data Augmentation）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这类方法的目的很直接，就是扩增训练数据，使得模型能够学习到对领域偏移鲁棒性更强的特征。这类方法一般可以归类成以下四种模型：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;1）基于手工变形的方法（Hand-Engineered Transformations），例如对图像像素点强度做调整，或者是对图像进行随机切割和变形来做数据扩增；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）基于梯度的数据增强方法（Gradient-Based Augmentation），例如把一个领域分类器上回传的对抗性梯度加在原始图像上；&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）基于模型的数据增强方法（Model-Based Augmentation），其主要特点是用神经网络生成领域偏移的图像；&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4）基于特征的增强方法（Feature-Based Augmentation），例如把图像之间的特征统计参数做一个混合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 类别4 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  集成学习（Ensemble Learning）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这类方法一般适用于多源数据，其特点是学习多个模型或模块，然后在测试的时候做融合。最简单直观的例子就是在每个源领域上学习一个特定的分类器，然后在做测试时把这些分类器简单地融合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 类别5 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  网络架构设计（Network Architecture Design）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了在训练算法上做文章，一些领域泛化方法还尝试对神经网络模型架构做改动。比如，针对照明偏移的图片，我们可以在卷积网络里加入实例归一化层（Instance Normalization Layers），这样可以很大程度上加强特征对照明偏移的鲁棒性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 类别6 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  自监督学习（Self-Supervised Learning）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;近几年来特别火热的自监督学习也被应用在领域泛化上，例如在训练分类网络的目标函数上加入了基于拼图（Jigsaw Puzzle）设计的损失函数。这类方法的动机是让模型学习一些和任务不相关的特征，从而达到减小模型在目标任务上过拟合的作用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 类别7 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  表征分解学习（Learning Disentangled Representations）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;顾名思义，这类方法的目的是学习如何分解出对领域分布相关的特征和对领域分布不相关的特征。常见的有基于模型局部改造的方法和基于生成学习的方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 类别8 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  不变风险最小化（Invariant Risk Minimization）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这类方法主要是从不变风险最小化这个算法上衍生出来的，其设计目的是减少模型对非相关元素的依赖，例如图像背景。此类方法一般是在目标函数或者训练方式上做特别设计，例如设计特殊的正则化项。这类方法通常有理论分析来做支撑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 类别9 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  启发式训练（Training Heuristics）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这类方法通常是基于直观或经验来设计的，例如我们通常认为泛化性强的特征主要包含图像的全局结构以及物体形状的信息，为了抑制模型对图像的局部结构过于依赖，我们可以构造局部神经网络，也就是1x1卷积网络，然后最大化这个网络的预测错误，从而迫使模型提取全局信息做预测。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 类别10 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  辅助信息（Side Information）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这类方法通常借助额外的辅助信息来帮助模型训练。例如，我们可以使用额外标定的属性信息去帮助模型学习到更具泛化能力的底层和中层特征，或者利用语义分割标签让特征学习聚焦在物体上，从而防止模型学习和图像背景相关联的特征。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 类别11 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  迁移学习（Transfer Learning）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这类方法的设计初衷是让模型在源领域上学习新知识的同时，要保留其在原始大规模数据上预训练获得的知识，其主要应用在合成数据（如3D模型）到真实数据的泛化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;3. 关于未来研究方向&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;Future Research Directions, Section 4）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然过去十年的研究极大的推动了领域泛化的发展，但是解决这个极具挑战性的问题仍然还有很长的一段路要走。本文也对未来研究方向做了展望，并总结了几个值得探索的课题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些课题主要归类于三个大方向，分别是&lt;/span&gt;&lt;strong&gt;&lt;span&gt;模型架构&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，&lt;strong&gt;学习算法&lt;/strong&gt;，和&lt;strong&gt;基准数据库&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从&lt;/span&gt;&lt;strong&gt;&lt;span&gt;模型架构&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的角度，我们可以尝试例如动态架构（Dynamic Architectures）设计，让网络自己生成适合输入图像分布的参数，或者开发自适应归一化层，使得归一化层里的估计参数能够克服测试数据分布偏移的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从&lt;/span&gt;&lt;strong&gt;&lt;span&gt;学习算法&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的角度，我们可以探索如何在不使用领域标签的情况下学习泛化性强的特征，让领域泛化算法更具灵活性，或者研究如何训练神经网络去生成逼真的新领域数据做数据增强。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，从&lt;/span&gt;&lt;strong&gt;&lt;span&gt;构造基准数据库&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的角度出发，我们可以思考如何让领域泛化算法在实际场景中更具实用性，例如可以考虑把增量学习（Incremental Learning）和领域泛化做结合。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwMTE1NjQxMQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/BJbRvwibeSTttHgILiboWS0spPWQT1uOfiamEC03e9ic1YlzovegQphn2ErRxy4zVbbbfYm3uLQ6gaAv1zF0c1A6tQ/0?wx_fmt=png&quot; data-nickname=&quot;我爱计算机视觉&quot; data-alias=&quot;aicvml&quot; data-signature=&quot;专业计算机视觉技术分享平台，“有价值有深度”，分享开源技术与最新论文解读，传播视觉技术的业内最佳实践。知乎/微博：我爱计算机视觉，官网 www.52cv.net 。KeyWords：深度学习、机器学习、计算机视觉、人工智能。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section data-id=&quot;1825&quot; data-type=&quot;lspecial02&quot; data-md5=&quot;d5b54&quot;&gt;&lt;section label=&quot;Powered by xmyeditor.com&quot; data-tools=&quot;小蚂蚁编辑器&quot; data-md5=&quot;d5b54&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;d5b54&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;d5b54&quot;&gt;&lt;img data-ratio=&quot;0.967741935483871&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BJbRvwibeSTs9dOR7Gib4iaUWr48BTXsCPGBXxdakCvpsN4tDGKHrkdorqgYz4aotbu4EsdKvPN2IONFXSMPBgZkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;93&quot;/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;d5b54&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;d5b54&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;d5b54&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;d5b54&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;d5b54&quot;&gt;&lt;p data-md5=&quot;d5b54&quot;&gt;&lt;strong&gt;备注：综合&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;d5b54&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;182&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;182&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/BJbRvwibeSTvzdxia9wWRak2INrulXSCV7TsffuGIqqlN7HukMA34XfkyD8Jhe9Jfibc0SvrRPicc7jyGXXqHpUc3A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;430&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;d5b54&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;d5b54&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;d5b54&quot;&gt;&lt;p data-md5=&quot;d5b54&quot;&gt;&lt;strong&gt;计算机视觉交流群&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;d5b54&quot;&gt;&lt;p data-md5=&quot;d5b54&quot;&gt;图像分割、姿态估计、智能驾驶、超分辨率、自监督、无监督、2D、3D目标检测等最新资讯，&lt;span&gt;若已为CV君其他账号好友请直接私信。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在看，让更多人看到  &lt;/span&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/0ic75eZIUNXNib7zWr7ZsaEg8ssY2rO4HRKQhhicvoSHeETu0yP5dibPo8YzCwsGdTQjHiaLhWqmdgxkVFRQSNbcvIw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>