<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3f76ae18b378186fdc9cb0fa3bf6054a</guid>
<title>URL 中的 # 原来是这个意思</title>
<link>https://toutiao.io/k/7kpbo94</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry-content&quot;&gt;&lt;p&gt;URL 是我们进行网络活动中很重要的概念，一个URL中可以包含域名，路径和参数等，&lt;/p&gt;
&lt;h2&gt;一个典型的 URL&lt;/h2&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span/&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nl&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//www.example.com/fruits.html?from=google#apple&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;这其中包含了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议： https&lt;/li&gt;
&lt;li&gt;域名: www.example.com&lt;/li&gt;
&lt;li&gt;路径文件名: fruits.html&lt;/li&gt;
&lt;li&gt;参数: from=google&lt;/li&gt;
&lt;li&gt;片段： apple&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;#片段是什么&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;URL 中的 &lt;code&gt;#&lt;/code&gt; 指的是一个片段&lt;/li&gt;
&lt;li&gt;URL 片段 往往用来告知浏览器约定的一个滑动位置&lt;/li&gt;
&lt;li&gt;如果一个 URL 指向了一个文档，那么片段指向的就是文档的某个内容区间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;# 作用范围&lt;/h2&gt;

&lt;h3&gt;所以&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;www.example.com/fruits.html#apple&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;www.example.com/fruits.html#orange&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对应的情况是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于浏览器，上面的链接指向同一文档，但是具有不同的滑动位置&lt;/li&gt;
&lt;li&gt;对于服务器，上面的链接指向同一文档，没有其他信息了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;# 还能怎么用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;考虑到在浏览器可以获取片段信息，我们可以利用 Javascript做一些事情&lt;/li&gt;
&lt;li&gt;网页应用可以使用片段来实现参数控制，做到不刷新页面，展示不同的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下为 JavaScript获取片段的示例代码&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span/&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2&gt;SEO 的影响&lt;/h2&gt;
&lt;p&gt;基于上面的理解，&lt;code&gt;www.example.com/fruits.html#apple&lt;/code&gt;和&lt;code&gt;www.example.com/fruits.html#orange&lt;/code&gt; 会被搜索引擎当成一个链接。&lt;/p&gt;
&lt;p&gt;如果不想被搜索引擎如上处理，有两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用不同的网页链接如&lt;code&gt;www.example.com/fruits_apple.html&lt;/code&gt;和&lt;code&gt;www.example.com/fruits_orange.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;#!&lt;/code&gt;，即&lt;code&gt;www.example.com/fruits.html#!apple&lt;/code&gt;和&lt;code&gt;www.example.com/fruits.html#!orange&lt;/code&gt; 这种方式，可能只是Google 支持，其他搜索引擎待验证。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考内容&lt;/h2&gt;

&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1f9eece28e3fc8139b9c06709bd683bb</guid>
<title>这些开源项目，让你轻松应对十大工作场景</title>
<link>https://toutiao.io/k/wpo96pp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;俗话说得好，工欲善其事必先利其器。本文阿宝哥将介绍一些优秀的开源项目，利用这些开源项目，你将能能轻松应对以下十个工作场景：文件上传、图片处理、文档处理、网络请求、数据存储、微前端、表单设计器、H5 页面设计器、文档管理和 API 管理。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;文件上传&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;uppy&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;The next open source file uploader for web browsers 🐶&lt;/p&gt;&lt;p&gt;https://github.com/transloadit/uppy&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;uppy 是一个体验顺滑、模块化的 JavaScript 文件上传器，可以无缝地与任何应用程序集成。它速度快，使用方便，可以让你专注比构建文件上传器更重要的问题。该库拥有以下特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持 I18n 及可访问性；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;轻量，基于模块化的插件架构，可按需加载；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过开放的 tus 标准，可恢复文件上传，可以解决上传过程中网络故障的问题。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40HwqricHfq8hyoBcAYYoJtRe69x9Me1nDy6OkLo9IXKu4Tgb5Db0v28bA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.4981481481481482&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;filepond&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;🌊 A flexible and fun JavaScript file upload library&lt;/p&gt;&lt;p&gt;https://github.com/pqina/filepond&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;filepond 是一个 JavaScript 库，可以上传你扔给它的任何内容，优化图像以加快上传速度，并提供出色的，可访问的，柔滑的用户体验。该库拥有以下特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;接受目录，文件，Blobs，本地 URL，远程 URL 和 Data URIs；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图像优化，自动调整图像大小，支持裁剪，过滤和修复 EXIF 方向；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持拖拽文件，从文件系统选择文件，复制和粘贴文件或使用 API 添加文件；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用 AJAX 进行异步上传，支持分块上传，可以将文件编码为 base64 数据，并可以通过表单提交。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40HDGD1Wvuo5Aw4SdxLud91eQYibr23IHQibGOUqEWaSLuudUUKjl4gYABw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.37407407407407406&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;✨ &lt;strong&gt;扩展阅读&lt;/strong&gt; ✨&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;图片处理&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;tui.image-editor&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;🍞🎨 Full-featured photo image editor using canvas. It is really easy, and it comes with great filters.&lt;/p&gt;&lt;p&gt;https://github.com/nhn/tui.image-editor&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;tui.image-editor 是使用 HTML5 Canvas 的全功能图像编辑器。它易于使用，并提供强大的过滤器。同时它支持对图像进行裁剪、翻转、旋转、绘图、形状、文本、遮罩和图片过滤等操作。该库的浏览器兼容情况如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Chrome&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Edge&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Safari&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Firefox&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;IE 10+&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40HL8HBnraTMdZKJ8lNcChiaicy4mwbrxFJGHtJv9ye36DxKnNmOkoIVavQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.5777777777777777&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;cropperjs&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;JavaScript image cropper.&lt;/p&gt;&lt;p&gt;https://github.com/fengyuanchen/cropperjs&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cropper.js 是一款非常强大却又简单的图片裁剪工具，它可以进行非常灵活的配置，支持手机端使用，支持包括 IE9 以上的现代浏览器。它可以用于满足诸如裁剪头像上传、商品图片编辑之类的需求。该库拥有以下特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持 39 个配置选项；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持 27 个方法；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持 6 种事件；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持 touch（移动端）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持缩放、旋转和翻转；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持在画布上裁剪；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持在浏览器端通过画布裁剪图像；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持处理 Exif 方向信息；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;跨浏览器支持。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40HWWdvzNklAG7K3iahfI42wicLgloYAuB4dxYfCicNPor3lObxgp83owoUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.6268518518518519&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;✨ &lt;strong&gt;扩展阅读&lt;/strong&gt; ✨&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;文档处理&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;kkFileView&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;使用 Spring Boot 打造文件文档在线预览项目解决方案，支持 doc、docx、ppt、pptx、xls 等文件在线预览。&lt;/p&gt;&lt;p&gt;https://github.com/kekingcn/kkFileView&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;kkFileView 为文件文档在线预览解决方案，该项目使用流行的 Spring Boot 搭建，易上手和部署，基本支持主流办公文档的在线预览，如doc，docx，xls，xlsx，ppt，pptx，pdf，txt，zip，rar，图片，视频，音频等等。该库拥有以下特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一键部署，快速接入：支持 Windows、Linux 平台一键部署，两行 JS 代码就可以接入预览；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持常见文件格式，兼容新版 Office 文档：支持文本、图片、Office 文档、WPS 文档、PDF、视频、音频、压缩包等常见文件类型预览；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持多种预览模式灵活切换：支持 PDF、懒加载分页图、轮播图片等预览模式动态配置、灵活切换；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;独立部署，提供 Restful 接口，适用于微服务场景：独立于业务系统外，提供 Restful Http 接口，开发语言无关，微服务场景下直接提供在线预览服务。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40HlrgIEibDHanIts24hTpjYEbrEKYFlom6qVH392wvEOWu9BmekNEWF0w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.2657407407407407&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Luckysheet&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Luckysheet is an online spreadsheet like excel that is powerful, simple to configure, and completely open source.&lt;/p&gt;&lt;p&gt;https://github.com/mengshukeji/Luckysheet&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Luckysheet ，一款纯前端类似 excel 的在线表格，功能强大、配置简单、完全开源。该库拥有以下特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;格式设置：样式、条件格式、文本对齐及旋转、支持文本的截断、溢出、自动换行和单元格多样式；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;单元格：拖拽选取来修改单元格、选取下拉填充、自动填充选项、多选区操作、查找与替换和合并单元格；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;操作体验：撤销/重做、复制/粘贴/剪切操作、快捷键支持和格式刷；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;公式和函数：内置公式、公式支持数组、远程公式和自定义公式；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据透视图：字段拖拽、聚合方式、筛选数据和数据透视表下钻。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40HwttRNiagUzbJIraRibL4VMP590cvaA8xWicjJb87LAhl5RPGdLiaicYE9FQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.3388888888888889&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;✨ &lt;strong&gt;扩展阅读&lt;/strong&gt; ✨&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;网络请求&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Axios&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Promise based HTTP client for the browser and node.js&lt;/p&gt;&lt;p&gt;https://github.com/axios/axios&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Axios 是一个基于 Promise 的 HTTP 客户端，该库拥有以下特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持 Promise API；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;能够拦截请求和响应；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;能够转换请求和响应数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端支持防御 CSRF 攻击；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;同时支持浏览器和 Node.js 环境；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;能够取消请求及自动转换 JSON 数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40Hic4gO42Bg5kYzHBDuWzna6QyGeVXicC6MnJA8C7alCPP1klzFFSicAiblA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.22685185185185186&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;react-query&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;⚛️ Hooks for fetching, caching and updating asynchronous data in React&lt;/p&gt;&lt;p&gt;https://github.com/tannerlinsley/react-query&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;react-query 是一个用在 React 项目中，用于获取、缓存和更新异步数据的钩子。该库拥有以下特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;多层缓存 + 自动垃圾回收；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持分页和基于游标的查询；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持加载更多、无限滚动查询和滚动恢复；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自动缓存 + 重新获取（重新验证时有效，窗口重新聚焦，轮询/实时）。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40HxsWOsVmTeWLJ40VgIaFiazLscjyNshX5tCW12qnXSiaRBicllXsdzqFzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.33611111111111114&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;✨ &lt;strong&gt;扩展阅读&lt;/strong&gt; ✨&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;数据存储&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;PouchDB&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;🐨 - PouchDB is a pocket-sized database.&lt;/p&gt;&lt;p&gt;https://github.com/pouchdb/pouchdb&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PouchDB 是一个浏览器内数据库，允许应用程序在本地保存数据，以便用户即使在离线时也可以享受应用程序的所有功能。另外，数据在客户端之间是同步的，因此用户可以随时随地保持最新状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PouchDB 也在 Node.js 中运行，可以用作与 &lt;strong&gt;CouchDB&lt;/strong&gt; 兼容的服务器的直接接口。该 API 在每个环境中工作都是相同的，因此你可以花更少的时间来担心浏览器的差异，而花更多的时间来编写干净、一致的代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PouchDB 支持所有现代浏览器：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Firefox 29+ (Including Firefox OS and Firefox for Android)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Chrome 30+&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Safari 5+&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Internet Explorer 10+&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Opera 21+&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Android 4.0+&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;iOS 7.1+&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Windows Phone 8+&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PouchDB 在幕后使用 IndexedDB，若当前环境不支持 IndexedDB 则回退到 Web SQL。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40Ht1A3vdfZWCtXos7Ktv7VwGbQaWr7OV1pHiaBekqzF7xrbBBVHGofx8A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.2740740740740741&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Rxdb&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;💻 🔄 📱 A realtime Database for JavaScript Applications.&lt;/p&gt;&lt;p&gt;https://github.com/pubkey/rxdb&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RxDB（Reactive Database 的缩写）是 NoSQL 数据库，用于 JavaScript 应用程序，如网站，混合应用程序，Electron Apps，Progressive Web Apps 和 Node.js。响应式意味着你不仅可以查询当前状态，还可以订阅所有状态更改，比如查询的结果或文档的单个字段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RxDB 支持以下特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Mango-Query：支持 mquery API 从集合中获取数据，支持链式的 mongoDB 查询风格。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Replication：因为 RxDB 依赖于 PouchDB，因此很容易实现终端设备与服务器之间的数据同步。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Reactive：RxDB 使得同步 DOM 的状态变得很简单。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MultiWindow/Tab：当 RxDB 的两个实例使用相同的存储引擎，它们的状态和操作流将会被广播。这意味着对于两个浏览器窗口，窗口 #1 的数据变化也会自动影响窗口 #2 的数据状态。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Schema：通过 jsonschema 来定义 Schemas，它们用来描述数据格式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Encryption：通过将模式字段设置为encrypted，该字段的值将以加密模式存储，没有密码就无法读取。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40H0YQW2wcxuiaatTlGtVm5TFBmUhY51qBpZDS8qEiaCtlLZey19aCGFJTg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-ratio=&quot;0.37871674491392804&quot; data-w=&quot;639&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;✨ &lt;strong&gt;扩展阅读&lt;/strong&gt; ✨&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;微前端&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;qiankun&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;📦 🚀 Blazing fast, simple and completed solution for micro frontends.&lt;/p&gt;&lt;p&gt;https://github.com/umijs/qiankun&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;qiankun 是一个基于 single-spa 的微前端实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。目前 qiankun 已在蚂蚁内部服务了超过 200+ 线上应用，在易用性及完备性上，绝对是值得信赖的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该库拥有以下特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;📦 &lt;strong&gt;基于 single-spa&lt;/strong&gt; 封装，提供了更加开箱即用的 API；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;📱 &lt;strong&gt;技术栈无关&lt;/strong&gt;，任意技术栈的应用均可 使用/接入，不论是 React/Vue/Angular/JQuery 还是其他等框架；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;💪 &lt;strong&gt;HTML Entry 接入方式&lt;/strong&gt;，让你接入微应用像使用 iframe 一样简单；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;🛡 &lt;strong&gt;样式隔离&lt;/strong&gt;，确保微应用之间样式互相不干扰；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;🧳 &lt;strong&gt;JS 沙箱&lt;/strong&gt;，确保微应用之间 全局变量/事件 不冲突；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;⚡️ &lt;strong&gt;资源预加载&lt;/strong&gt;，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;🔌 &lt;strong&gt;umi 插件&lt;/strong&gt;，提供了 @umijs/plugin-qiankun 供 umi 应用一键切换成微前端架构系统。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40HRXORx1icAO2IKeShOjYe0ichx33wozYiaQAnBicxRSU1Cewtial3kTnsx0Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.18611111111111112&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;single-spa&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;The router for easy microfrontends&lt;/p&gt;&lt;p&gt;https://github.com/single-spa/single-spa&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Single-spa 是一个将多个单页面应用聚合为一个整体应用的 JavaScript 微前端框架。使用 single-spa 进行前端架构设计可以带来很多好处，例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;独立部署每一个单页面应用；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;改善初始加载时间，迟加载代码；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;新功能使用新框架，旧的单页应用不用重写可以共存；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在同一页面上使用多个前端框架 而不用刷新页面 (React，AngularJS，Angular，Ember 等)。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40H8ibl7KGCibA7qHRdosKZr1xMv6vLItXvEJmeSDdXibtriaMiaYMtHyx9hEQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.31296296296296294&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;✨ &lt;strong&gt;扩展阅读&lt;/strong&gt; ✨&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;最全微前端集合：https://juejin.cn/post/6844904030720770055&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;表单设计器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;form-generator&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;✨Element UI 表单设计及代码生成器&lt;/p&gt;&lt;p&gt;https://github.com/JakHuang/form-generator&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.33203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40HviccescFUibrHAVadg2SRMJbnybmWJnqD099iaROicTBYNeKN38h7OibE0Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;form-render&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;🚴‍♀️ 易用的跨组件体系的表单渲染引擎 - 通过 JSON Schema 快速生成自定义表单配置界面&lt;/p&gt;&lt;p&gt;https://github.com/alibaba/form-render&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40H2pXTCQKoV9uz9ic3cThfdFIuwFic5daMA2VH054UibTmHnf9ic0ePtr6Zg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-ratio=&quot;0.539906103286385&quot; data-w=&quot;639&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;H5 页面设计器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;gods-pen&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;基于 vue 的高扩展在线网页制作平台，可自定义组件，可添加脚本，可数据统计。&lt;/p&gt;&lt;p&gt;https://github.com/ymm-tech/gods-pen&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40HTlp6OzdfWTC6dcBgGdUBQAFia6UGgoUYofRH1cpx4zp2jXxwia0N3NwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.4888888888888889&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;luban-h5&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;类似易企秀的 H5 制作、建站工具、可视化搭建系统.&lt;/p&gt;&lt;p&gt;https://github.com/ly525/luban-h5&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;238&quot; data-ratio=&quot;0.47578125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40HiaqMibGy36JPGhp0bvicnmLpvyNkvWWfE2xFsuFj9boHibytnoNXJssupQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;文档管理&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;storybook&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;📓 The UI component explorer. Develop, document, &amp;amp; test for React, Vue, Angular, Ember, Web Components, &amp;amp; more!&lt;/p&gt;&lt;p&gt;https://github.com/storybookjs/storybook/&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Storybook 是一个 UI 组件的开发环境。它允许你能够浏览一个组件库，查看每个组件的不同状态，以及支持交互式的方式开发和测试组件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Storybook 在你的应用程序之外运行。这允许你能够独立的开发 UI 组件，你可以提高组件的可重用性、可测试性和开发速度。你可以快速构建，而无需担心应用程序特定的依赖项。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40Hqk34fxTiaqb5HVreicRUIErAZRwsPibSNxBnwbQsAeREcwXzEcicZ0nuBA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-ratio=&quot;0.5633333333333334&quot; data-w=&quot;600&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;TypeDoc&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Documentation generator for TypeScript projects.&lt;/p&gt;&lt;p&gt;在线地址：https://typedoc.org/&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TypeDoc 用于将 TypeScript 源代码中的注释转换为 HTML 文档或 JSON 模型。它可灵活扩展，并支持多种配置。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40HibKOSzITktPKDl6TNqf6ibjyMEibXsoUMib1cyQp8YzoH7J5osiaW2iarEzg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.36666666666666664&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;API 管理&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;yapi&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;YApi 是一个可本地部署的、打通前后端及QA的、可视化的接口管理平台&lt;/p&gt;&lt;p&gt;https://github.com/ymfe/yapi&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;YApi 是&lt;strong&gt;高效&lt;/strong&gt;、&lt;strong&gt;易用&lt;/strong&gt;、&lt;strong&gt;功能强大&lt;/strong&gt;的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 API，YApi 还为用户提供了优秀的交互体验，开发人员只需利用平台提供的接口数据写入工具以及简单的点击操作就可以实现接口的管理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该项目拥有以下特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;基于 Json5 和 Mockjs 定义接口返回数据的结构和文档，效率提升多倍；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;扁平化权限设计，即保证了大型企业级项目的管理，又保证了易用性；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;类似 Postman 的接口调试；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自动化测试, 支持对 Response 断言；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MockServer 除支持普通的随机 mock 外，还增加了 Mock 期望功能，根据设置的请求过滤规则，返回期望数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持 postman, har, swagger 数据导入；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;免费开源，内网部署，信息再也不怕泄露了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40HHP86ibVFw8a1BaeD58DuEnEIXs71CicsNEqRgEKwNC7N4VX3lx4sibicSg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.35648148148148145&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;APIJSON&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;🏆码云最有价值开源项目 🚀后端接口和文档自动化，前端(客户端) 定制返回 JSON 的数据和结构！&lt;/p&gt;&lt;p&gt;https://github.com/Tencent/APIJSON&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;APIJSON 是一种专为 API 而生的 JSON 网络传输协议 以及 基于这套协议实现的 ORM 库。APIJSON 为 “简单的增删改查、复杂的查询、简单的事务操作” 提供了完全自动化的 API，能大幅降低开发和沟通成本，简化开发流程，缩短开发周期。它适合中小型前后端分离的项目，尤其是 BaaS、Serverless、互联网创业项目和企业自用项目。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该项目拥有以下特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;通过自动化API，前端可以定制任何数据、任何结构！&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;大部分 HTTP 请求后端再也不用写接口了，更不用写文档了！&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;前端再也不用和后端沟通接口或文档问题了！再也不会被文档各种错误坑了！&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;后端再也不用为了兼容旧接口写新版接口和文档了！再也不会被前端随时随地没完没了地烦了！&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V0zmtJwH4UFUk5KgVfsN40Hic5QqiaibL3Phia2nxzjGHOQibvDas2ibicibU30zqvECSWPejrbb37mTGFcibg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;0.2966666666666667&quot; data-w=&quot;900&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7e2ab14906a114c274e1a7ef01f845a5</guid>
<title>每个程序员都应该知道的延迟数字</title>
<link>https://toutiao.io/k/pv1wt7h</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;blockquote&gt;&lt;p&gt;公众号简介里写着分布式存储，但一直没有写过，这篇简单的小文章，算是一个开篇。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;Jeff Dean 在他关于分布式系统的 ppt&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt; 中列出了“每个程序员都应该了解的数字(Numbers Everyone Should Know)”，对计算机各类操作的耗时做了大致估计。这些数字在很多地方都很有用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hBL5R2neMA0iaia4IBERcsoY5yGVibqicCmUhEsn70wwGggo6tqdm5zgEJfpsweAf0KqFp3vmicRHlRM54K2Cq59nhA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;这些数字最早应该出现在 Peter Norvig 著名的博客 &lt;span&gt;《Teach Yourself Programming in Ten Years》&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;，不过略有一些不同：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5752508361204013&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hBL5R2neMA0iaia4IBERcsoY5yGVibqicCmUiauIibT0pZLW5R0Po9IbXrIAkicic5V1Q4UZHeCESzoBC0ocpVZia84qbYA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;598&quot;/&gt;&lt;/p&gt;&lt;h3&gt;这些数字还准确吗？&lt;/h3&gt;&lt;p&gt;这些数字大多是 2009 年给出的，虽然摩尔定律已经失效，但计算机发展到今天，这些数字确实有些过时。&lt;/p&gt;&lt;p&gt;但是，jeff dean 和 Peter Norvig给出这些数字的重点在于&lt;strong&gt;它们之间的数量级和比例&lt;/strong&gt;，而不是具体的数字。&lt;/p&gt;&lt;p&gt;对于今天的数字，伯克利大学有个&lt;span&gt;动态网页&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;，可以查看每年各个操作耗时的变化，根据网页的数据，总结每 10 年来的变化如下图：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4328571428571429&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hBL5R2neMA0iaia4IBERcsoY5yGVibqicCmUmGDtwtjqFKt8krUu9T3fLWCuLoyOMLstBBTq6jSnOiap3GW32KT1E7g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可以观察到：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;网络传输速度有了质的飞跃；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;同一数据往返&lt;/strong&gt;和&lt;strong&gt;从美国发送到欧洲&lt;/strong&gt;的耗时没有任何变化，原因可以理解，信号在光纤中是速度是不变的；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;2000 年以来，前两列的数值没有太大变化，但是内存、SSD 和机械硬盘顺序读取速度有了非常大的提升；&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;2020 年版本&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;操作&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;延迟&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;执行一个指令&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;1 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;L1 缓存查询&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;0.5 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;分支预测错误（Branch mispredict）&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;3 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;L2 缓存查询&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;4 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;互斥锁/解锁&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;17 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;在 1Gbps 的网络上发送 2KB&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;44 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;主存访问&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;100 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Zippy 压缩 1KB&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;2,000 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;从内存顺序读取 1 MB&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;3,000 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;SSD 随机读&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;16,000 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;从 SSD 顺序读取 1 MB&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;49,000 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;同一个数据中心往返&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;500,000 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;从磁盘顺序读取 1 MB&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;825,000 ns&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;磁盘寻址&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;2,000,000 ns (2 ms)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;从美国发送到欧洲的数据包&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;150,000,000 ns（150 ms）&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;注： &lt;/p&gt;&lt;p&gt;1 ns = 10^-9 s&lt;/p&gt;&lt;p&gt;1 ms = 10^-3 s = 1,000 us = 1,000,000 ns&lt;/p&gt;&lt;h3&gt;这些数字有什么作用？&lt;/h3&gt;&lt;p&gt;对于 ns 为单位的时间我们可能没有什么概念，所以我们可以&lt;span&gt;将数字乘以 10 亿&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt;，来观察数量级的差距。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;操作&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;延迟&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;L1 缓存查询&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;0.5 s&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;L2 缓存查询&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;4 s&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;在 1Gbps 的网络上发送 2KB&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;44 s&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;主存访问&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;100 s&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;从内存顺序读取 1 MB&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;50 min&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;SSD 随机读&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;4.4 h&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;从 SSD 顺序读取 1 MB&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;13.6 h&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;同一个数据中心往返&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;5.8 days&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;从磁盘顺序读取 1 MB&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;9.5 days&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;磁盘寻址&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;23.1 days&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;从美国发送到欧洲的数据包&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;4.8 years&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这样一来就非常明显了，L1 缓存查询相当于一次心跳，这样的话对于内存、网络、SSD 和机械硬盘之间的访问速度有了一个直观的对比：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;内存：100 秒&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;SSD：4.4 小时&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;同一数据中心往返：5.8 天&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;机械硬盘寻址：23.1 天&lt;/span&gt;&lt;/p&gt;&lt;p&gt;了解这些数字有助于设计和比较不同的解决方案。可以看出，&lt;strong&gt;从远程服务器的内存中读数据要比直接从硬盘上读取要快的&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;推广到一般的应用，这也意味着使用磁盘存储往往比使用数据库服务要慢（数据库通常已经把需要的数据放到了内存）。BTW，这些数字也被&lt;span&gt; CMU 的数据库课程引用&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;对于读取 1MB 数据，内存、SSD 和磁盘基本差了一个数量级：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;内存：50 分钟&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;SSD：13.6 小时&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;磁盘：9.5 天&lt;/span&gt;&lt;/p&gt;&lt;p&gt;尤其在设计存储引擎时，很多开源软件（Kafka、Leveldb、Rocksdb）都充分利用了存储介质顺序读、写速度远远快过随机读、写的特性，只做追加写操作来达到最佳性能。&lt;/p&gt;&lt;h3&gt;延迟、带宽和吞吐之间有什么区别？&lt;/h3&gt;&lt;p&gt;&lt;span&gt;StackOverflow 有一个延伸问题&lt;sup&gt;[6]&lt;/sup&gt;&lt;/span&gt;，延迟(Latency)、带宽(Bandwidth)和吞吐(Throughput)之间有什么区别？&lt;/p&gt;&lt;p&gt;最佳回答用水管来举例。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.562&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hBL5R2neMA0iaia4IBERcsoY5yGVibqicCmUe8kf5BsEMV679UN3fv7mQFIDibp07EUoO7fJqAzbicmZO4fACSb8hVUw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;延迟&lt;/strong&gt;表示通过管道需要花费的时间&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;带宽&lt;/strong&gt;表示管道的宽度&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;每秒钟流过的水的数量就是&lt;strong&gt;吞吐&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; Jeff Dean 在他关于分布式系统的 ppt: &lt;em&gt;https://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; 《Teach Yourself Programming in Ten Years》: &lt;em&gt;http://norvig.com/21-days.html#answers&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; 动态网页: &lt;em&gt;https://colin-scott.github.io/personal_website/research/interactive_latency.html&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[4]&lt;/code&gt; 将数字乘以 10 亿: &lt;em&gt;https://gist.github.com/hellerbarde/2843375&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[5]&lt;/code&gt; CMU 的数据库课程引用: &lt;em&gt;https://15445.courses.cs.cmu.edu/fall2019/slides/03-storage1.pdf&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[6]&lt;/code&gt; StackOverflow 有一个延伸问题: &lt;em&gt;https://stackoverflow.com/questions/36949735/what-is-the-difference-between-latency-bandwidth-and-throughput&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;欢迎关注我的公众号：&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2qgPwzomIicebbmoOGzU1IsUWQMb3xr4nLcjtfIy5Zwyia3HTKnIJ8xc9NFkkPBkL8MEAfh3YdNuaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3bd92fa951c7048399f5a7cf97fb3272</guid>
<title>超全面分布式缓存高可用方案：哨兵机制</title>
<link>https://toutiao.io/k/1k0udg9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;1&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;2&quot;&gt;开发工作中对于分布式缓存高可用方案（搭建Redis缓存高可用方案），Redis主从架构下是如何保证高可用的呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;3&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;4&quot;&gt;我们知道是应用了哨兵机制来实现。那Redis 服务部署的哨兵模式主要是什么，又解决了什么问题呢，于是利用周末时间整理了下，相信看完这篇文章，你也可以去给别人做技术分享了。O(∩_∩)O哈哈~&lt;/span&gt;&lt;/p&gt;&lt;h2 data-id-heading0=&quot;&quot; data-slate-type=&quot;pm_heading&quot; data-slate-object=&quot;block&quot; data-key=&quot;5&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;6&quot;&gt;问题铺垫&lt;/span&gt;&lt;/h2&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;7&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;8&quot;&gt;在讨论哨兵模式之前，我们先来看一个应用问题：&lt;span data-slate-leaf=&quot;true&quot; data-offset-key=&quot;9:0&quot; data-first-offset=&quot;true&quot;&gt;&lt;strong data-slate-type=&quot;pm_bold&quot; data-slate-object=&quot;mark&quot;&gt;Redis服务主机宕机&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;10&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;11&quot;&gt;实际使用过程中，会出现master宕机的情况（这样会导致没有写服务，只有读服务）。那我们要保证服务的可用，就需要从其他salve节点中选取一个来作为master节点，来继续提供服务能力。&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;12&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;13&quot;&gt;&lt;strong data-slate-type=&quot;pm_bold&quot; data-slate-object=&quot;mark&quot;&gt;那主要的动作抽象下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;12&quot;&gt;&lt;span&gt;将宕机的master下线&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;12&quot;&gt;&lt;span&gt;找一个slave作为master&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;12&quot;&gt;&lt;span&gt;通知所有的slave连接新的master&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;12&quot;&gt;&lt;span&gt;全量数据或者部分数据同步&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;27&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;28&quot;&gt;&lt;strong data-slate-type=&quot;pm_bold&quot; data-slate-object=&quot;mark&quot;&gt;其中存在几个问题：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;39&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;40&quot;&gt;其实引入&lt;span data-slate-leaf=&quot;true&quot; data-offset-key=&quot;41:0&quot; data-first-offset=&quot;true&quot;&gt;&lt;strong data-slate-type=&quot;pm_bold&quot; data-slate-object=&quot;mark&quot;&gt;哨兵机制&lt;/strong&gt;&lt;/span&gt;，就可以很好的解决上述问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4745011086474501&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRzuof9uYrBaBicdVQUFNKQGeE7b36CFd05okdB5QbQjNicl4DjZaHu0HTtZluCRXb33ycxDnMHTTHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;902&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;哨兵-Redis集群&lt;/span&gt;&lt;/p&gt;&lt;h2 data-id-heading1=&quot;&quot; data-slate-type=&quot;pm_heading&quot; data-slate-object=&quot;block&quot; data-key=&quot;46&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;47&quot;&gt;什么是哨兵？&lt;/span&gt;&lt;/h2&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;48&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;49&quot;&gt;Sentinel（哨兵）是Redis 的高可用性解决方案：由一个或多个Sentinel 实例组成的Sentinel 系统可以监视任意多个主服务，以及这些主服务器属下的所有从服务，并在被监视的主服务进入下线（不可服务）状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器。&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;50&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;51&quot;&gt;﻿&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;52&quot;&gt;&lt;span&gt;&lt;strong data-slate-type=&quot;pm_bold&quot; data-slate-object=&quot;mark&quot;&gt;总结一下哨兵的作用：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;58&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;59&quot;&gt;    不断的检查master和slave是否正常运行（master存活检测、master与slave运行情况检测）&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;64&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;65&quot;&gt;    当被监控的服务器出现问题时，向其他哨兵、客户端发送通知&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;70&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;71&quot;&gt;    断开故障master与slave的连接，选取一个slave作为新master，将其他slave连接到新的master并告知客户端新的服务器地址。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-slate-type=&quot;pm_blockquote&quot; data-slate-object=&quot;block&quot; data-key=&quot;74&quot;&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;75&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;76&quot;&gt;注意：哨兵也是一台Redis服务器，只是不提供数据服务；通常哨兵配置的数量为单数。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-id-heading2=&quot;&quot; data-slate-type=&quot;pm_heading&quot; data-slate-object=&quot;block&quot; data-key=&quot;77&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;78&quot;&gt;哨兵的工作原理&lt;/span&gt;&lt;/h2&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;79&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;80&quot;&gt;下面主要针对哨兵在进行故障转移过程中经历的三个阶段分别进行阐述。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-id-heading3=&quot;&quot; data-slate-type=&quot;pm_heading&quot; data-slate-object=&quot;block&quot; data-key=&quot;81&quot;&gt;&lt;span&gt;1、集群监控&lt;/span&gt;&lt;/h3&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;83&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;84&quot;&gt;&lt;strong data-slate-type=&quot;pm_bold&quot; data-slate-object=&quot;mark&quot;&gt;step1：哨兵1连接到Redis集群&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;83&quot;&gt;&lt;span&gt;发送info命令到master，并建立cmd连接；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;83&quot;&gt;&lt;span&gt;哨兵端保存哨兵状态（SentinelStatus），保存所有哨兵状态，主节点和从节&lt;/span&gt;&lt;span&gt;点的信息；master端会记录 redis 实例的信息（SentinelRedisInstance）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;83&quot;&gt;&lt;span&gt;哨兵根据master中获取的每个slave信息，去连接每个slave，发送同样也是info命令。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5700197238658777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRzuof9uYrBaBicdVQUFNKQGxxPLNq0TXY3mJAGKUGGVJywOJazQmAvGFTUicJdozhhPuc2PADdSQtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1014&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;集群监控&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;96&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;97&quot;&gt;&lt;strong data-slate-type=&quot;pm_bold&quot; data-slate-object=&quot;mark&quot;&gt;step2：哨兵2加入进来后&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;96&quot;&gt;&lt;span&gt;同样会发送info命令到master节点，并建立cmd连接；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;96&quot;&gt;&lt;span&gt;发现master中存在其他哨兵节点的信息，哨兵2中保存哨兵信息（区别与哨兵1的是它保存了哨兵1和哨兵2的2个哨兵节点信息）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;96&quot;&gt;&lt;span&gt;为了每个哨兵的信息都一致它们之间建立了一个发布订阅。为了哨兵之间的信息长期对称它们之间也会互发 ping 命令。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.46991869918699186&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRzuof9uYrBaBicdVQUFNKQGlojD0ib1yRRRG9n5Kp2y12BleUZjsmC7t0aY3IB1XCic99ZbKR0tczPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1230&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;集群监控&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;111&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;112&quot;&gt;&lt;strong data-slate-type=&quot;pm_bold&quot; data-slate-object=&quot;mark&quot;&gt;step3：哨兵3加入后&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6419354838709678&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRzuof9uYrBaBicdVQUFNKQGZt1atOq0us0xswSM2DQ1ahy13bgE5Y75lXS46oo2jZo9vTqUvwFibpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;集群监控&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;123&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;124&quot;&gt;&lt;strong data-slate-type=&quot;pm_bold&quot; data-slate-object=&quot;mark&quot;&gt;小结一下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-id-heading4=&quot;&quot; data-slate-type=&quot;pm_heading&quot; data-slate-object=&quot;block&quot; data-key=&quot;132&quot;&gt;&lt;span&gt;2、消息通知&lt;/span&gt;&lt;/h3&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;134&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;135&quot;&gt;1）Sentinel节点会通过master/slave 节点建立的cmd连接获取其工作状态&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;136&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;137&quot;&gt;2）Sentinel收到反馈结果之后，会在哨兵内部进行信息的互通&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4048059149722736&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRzuof9uYrBaBicdVQUFNKQG8bwmsMVNqs7DysCvA5Nps2UHSop6fbYAzyDJiby1oGZDcmyniabPeh7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1082&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;消息通知&lt;/span&gt;&lt;/p&gt;&lt;h3 data-id-heading5=&quot;&quot; data-slate-type=&quot;pm_heading&quot; data-slate-object=&quot;block&quot; data-key=&quot;141&quot;&gt;&lt;span&gt;3、故障转移&lt;/span&gt;&lt;/h3&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;143&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;144&quot;&gt;关于故障转移，严格来讲可划分两个步骤：&lt;span data-slate-leaf=&quot;true&quot; data-offset-key=&quot;145:0&quot; data-first-offset=&quot;true&quot;&gt;&lt;strong data-slate-type=&quot;pm_bold&quot; data-slate-object=&quot;mark&quot;&gt;故障判定&lt;/strong&gt;&lt;/span&gt;、&lt;span data-slate-leaf=&quot;true&quot; data-offset-key=&quot;147:0&quot; data-first-offset=&quot;true&quot;&gt;&lt;strong data-slate-type=&quot;pm_bold&quot; data-slate-object=&quot;mark&quot;&gt;故障转移&lt;/strong&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-id-heading6=&quot;&quot; data-slate-type=&quot;pm_heading&quot; data-slate-object=&quot;block&quot; data-key=&quot;149&quot;&gt;&lt;span&gt;Q1：如何判断一个节点出现故障？&lt;/span&gt;&lt;/h4&gt;&lt;blockquote data-slate-type=&quot;pm_blockquote&quot; data-slate-object=&quot;block&quot; data-key=&quot;155&quot;&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;156&quot;&gt;&lt;span&gt;直到主节点故障，哨兵报出 sdown，同时此哨兵还会向其他哨兵发布消息说这个主节点挂了。发送的指令是 sentinel is-master-down-by-address-port。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-slate-type=&quot;pm_blockquote&quot; data-slate-object=&quot;block&quot; data-key=&quot;164&quot;&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;165&quot;&gt;&lt;span&gt;其余的哨兵也会发送他们收到的信息并且发送指令 sentinel is-master-down-by-address-port 到自己的内网，确认一下第一个发送 sentinel is-master-down-by-address-port 的哨兵说你说的对，这个家伙确实挂了。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-slate-type=&quot;pm_blockquote&quot; data-slate-object=&quot;block&quot; data-key=&quot;173&quot;&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;174&quot;&gt;&lt;span&gt;当一个哨兵认为主节点挂了标记的是 sdown，当半数哨兵都认为挂了其标记的状态是 odown。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;176&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;177&quot;&gt;﻿&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;178&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;179&quot;&gt;一个哨兵认为master节点挂了称为主观下线（sdown），超半数哨兵认为master节点挂了则称为客观下线（odown）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.46855345911949686&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRzuof9uYrBaBicdVQUFNKQGpV8htDDEVhmloCiahrbBbCDTGp7dulSXEe8HOicP9aEPzZXVz1tJ7Tag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1272&quot;/&gt;&lt;/p&gt;&lt;h4 data-id-heading7=&quot;&quot; data-slate-type=&quot;pm_heading&quot; data-slate-object=&quot;block&quot; data-key=&quot;183&quot;&gt;&lt;span&gt;Q2：如何进行故障转移？&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-slate-type=&quot;pm_bold&quot; data-slate-object=&quot;mark&quot;&gt;1）首先，哨兵选举出哨兵Leader去处理故障转移&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt; 此时选举方式应用的是Raft协议，这个之前有过介绍，感兴趣的同学可以移步了解：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDg5MDkzOA==&amp;amp;mid=2448762601&amp;amp;idx=1&amp;amp;sn=8bfef19e832b46b423d7e48bdf836ed4&amp;amp;chksm=8b34623cbc43eb2a5abcf0a6e40c1c01d36929e4052cb9f77f82cc0c19fa9870e433c7cc8224&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一致性算法Raft 简易入门&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong data-slate-type=&quot;pm_bold&quot; data-slate-object=&quot;mark&quot;&gt;2）其次，哨兵Leader从所有的slave节点找出一个作为master节点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;193&quot;&gt;&lt;span&gt;主要的规则：&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;207&quot;&gt;&lt;span&gt;假如以上优先级均一致，会考虑其他优先原则：&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-slate-type=&quot;pm_blockquote&quot; data-slate-object=&quot;block&quot; data-key=&quot;213&quot;&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;214&quot;&gt;&lt;span&gt;假如说 slave1 的 offset 为 50，slave2 偏移量为 55，则哨兵就会选择 slave2 为新的主节点。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-slate-type=&quot;pm_blockquote&quot; data-slate-object=&quot;block&quot; data-key=&quot;222&quot;&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;223&quot;&gt;&lt;span&gt;这点类似于职场中的论资排辈，也就说根据 runid 的创建时间来判断，时间早的先上位。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;225&quot;&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;227&quot;&gt;&lt;span&gt;&lt;strong data-slate-type=&quot;pm_bold&quot; data-slate-object=&quot;mark&quot;&gt;3）数据转移&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-id-heading8=&quot;&quot; data-slate-type=&quot;pm_heading&quot; data-slate-object=&quot;block&quot; data-key=&quot;236&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;237&quot;&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;238&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;239&quot;&gt;Redis 主从复制的作用中有这么一句话“主从复制是高可用的基石”，那实现高可用必不可少的就是哨兵和集群。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-id-heading9=&quot;&quot; data-slate-type=&quot;pm_heading&quot; data-slate-object=&quot;block&quot; data-key=&quot;240&quot;&gt;&lt;span&gt;1、Sentinel的作用&lt;/span&gt;&lt;/h3&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;246&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;247&quot;&gt;不断的检查master和slave是否正常运行（master存活检测、master与slave运行情况检测）&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;252&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;253&quot;&gt;当被监控的服务器出现问题时，向其他哨兵、客户端发送通知&lt;/span&gt;&lt;/p&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;258&quot;&gt;&lt;span data-slate-object=&quot;text&quot; data-key=&quot;259&quot;&gt;断开故障master与slave的连接，选取一个slave作为新master，将其他slave连接到新的master并告知客户端新的服务器地址。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-id-heading10=&quot;&quot; data-slate-type=&quot;pm_heading&quot; data-slate-object=&quot;block&quot; data-key=&quot;260&quot;&gt;&lt;span&gt;2、Sentinel的工作方式&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;blockquote data-slate-type=&quot;pm_blockquote&quot; data-slate-object=&quot;block&quot; data-key=&quot;269&quot;&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;270&quot;&gt;&lt;span&gt; 若 Master 重新向 Sentinel 的 PING 命令返回有效回复， Master 的主观下线状态就会被移除。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-slate-type=&quot;pm_blockquote&quot; data-slate-object=&quot;block&quot; data-key=&quot;279&quot;&gt;&lt;p data-slate-type=&quot;pm_paragraph&quot; data-slate-object=&quot;block&quot; data-key=&quot;280&quot;&gt;&lt;span&gt;若没有足够数量的 Sentinel 同意 Master 已经下线， Master 的客观下线状态就会被移除。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;hr/&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;往期热文推荐：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98311&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;395&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;395&quot; data-ratio=&quot;0.36484375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgSxEpr7AzM5lGCicdEjfuE6jaiae9Rmj1CVCg85GJKaFKuico89ZlnhGicQiciciccOiaqVibE5cmKXwO1AOuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87502&quot;&gt;&lt;p&gt;&lt;span&gt;「技术架构精进」专注架构研究，技术分享&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Thanks for reading!&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7689fd4d05aa3818c3cb1c5cab2eb49f</guid>
<title>怎样提高代码质量？</title>
<link>https://toutiao.io/k/199j35o</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-source-line=&quot;1&quot;&gt;&lt;span&gt;要提高代码质量，可以从两个方面考虑。一是提高程序员的个人能力，二是建立健全有效的软件开发流程。&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;3&quot;&gt;&lt;span&gt;提高程序员的个人能力，可以从以下几个方面考虑：&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;7&quot;&gt;&lt;span&gt;程序员必须要能熟练使用软件开发语言的编程工具。比如排版、查找变量和函数、配置文件加载路径、断点调试等等功能都能熟练使用。&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;11&quot;&gt;&lt;span&gt;程序员要非常熟悉组织制定的编码规范，并按照规范要求进行编码，以减少编码中缺陷的产生。&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;15&quot;&gt;&lt;span&gt;程序员要能够正确理解软件需求，快速编写出逻辑正确、表述清楚、满足需求的代码。&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;19&quot;&gt;&lt;span&gt;程序员要熟悉单元测试、集成测试等技术，能够通过静态代码审查和动态测试快速发现代码中缺陷。&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;23&quot;&gt;&lt;span&gt;在发现代码中的缺陷之后，程序员要能够使用断点调试等技术，快速定位问题，修复缺陷。&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;27&quot;&gt;&lt;span&gt;程序员应学会估算、策划和监控自己的时间，并能按期完成所承担的任务。&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;29&quot;&gt;&lt;span&gt;建立健全有效的软件开发流程，包括：&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;32&quot;&gt;&lt;span&gt;组织要对所有的软件开发语言建立一套编码规范，并在所有的软件项目组推行。&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;36&quot;&gt;&lt;span&gt;重用是最佳的软件工程实践，没有之一。组织要梳理项目中的共性需求，建立软件重用库，推进软件重用。可以预见，组织的重用库越丰富，软件的质量会越高。&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;40&quot;&gt;&lt;span&gt;组织要不断地跟踪和引进先进的软件开发/测试工具，通过这些工具来提高软件开发的质量和效率。&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;44&quot;&gt;&lt;span&gt;组织要建立并推进代码走查制度。通过人工代码走查可以发现很多动态测试不能发现的程序中的逻辑错误。&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;48&quot;&gt;&lt;span&gt;组织要克服困难，促进项目组执行软件单元测试。因为单元测试是确保软件代码内在质量的有效手段。&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;50&quot;&gt;&lt;span&gt;这正是：&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;52&quot;&gt;&lt;strong&gt;&lt;span&gt;代码质量要提高，两手都抓不能少&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-source-line=&quot;54&quot;&gt;&lt;strong&gt;&lt;span&gt;个人能力须提高，流程建设要搞好&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;57&quot;&gt;&lt;span&gt;参考书目：术以载道：软件过程改进实践指南，作者：任甲林，出版社：人民邮电出版社&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h6 data-source-line=&quot;62&quot;&gt;&lt;span&gt;作者简介：王小双，长期从事GJB5000推广、实施、评价、改进的工作，创建《软件工程之思》微信公众号，一直在《软件工程之思》分享GJB5000、CMMI、软件工程的知识和感悟。现致力于GJB5000咨询以及软件过程改进、软件工程能力提升的研究工作。&lt;/span&gt;&lt;/h6&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>