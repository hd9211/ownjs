<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>893b051456c8e22928fe1449253d2da9</guid>
<title>python制作炸弹人小游戏</title>
<link>https://toutiao.io/k/xz30ujj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;游戏规则：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;玩家通过↑↓←→键控制角色zelda(绿色)行动，当玩家按下空格键时，则可以在当前位置放置炸弹。&lt;/span&gt;&lt;span&gt;其他角色(dk和batman)则由电脑控制进行随机行动。&lt;/span&gt;&lt;span&gt;所有角色&lt;/span&gt;&lt;span&gt;被炸弹产生的火焰灼烧时(包括自己放置的炸弹&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;，都&lt;/span&gt;&lt;span&gt;将损失一定生命值；&lt;/span&gt;&lt;span&gt;所有角色&lt;/span&gt;&lt;span&gt;吃到水果时，均可恢复一定数值&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;生命值。另外，墙可以阻止炸弹产生的火焰进一步扩散。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当我方角色zelda生命值为0时，游戏失败；当电脑方所有角色生命值为0时，游戏胜利，进入下一关。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;逐步实现：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;首先，我们来明确一下该游戏包含哪些游戏精灵类：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;墙类和背景类很好定义，只需要可以导入图片，然后把图片绑定到指定位置就行了：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;墙类&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Wall&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(pygame.sprite.Sprite)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, imagepath, coordinate, blocksize, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pygame.sprite.Sprite.__init__(self)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.image = pygame.image.load(imagepath)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.image = pygame.transform.scale(self.image, (blocksize, blocksize))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.rect = self.image.get_rect()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.rect.left, self.rect.top = coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] * blocksize, coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] * blocksize&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.coordinate = coordinate&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.blocksize = blocksize&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;画到屏幕上&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, screen)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    screen.blit(self.image, self.rect)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;背景类&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(pygame.sprite.Sprite)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, imagepath, coordinate, blocksize, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pygame.sprite.Sprite.__init__(self)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.image = pygame.image.load(imagepath)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.image = pygame.transform.scale(self.image, (blocksize, blocksize))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.rect = self.image.get_rect()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.rect.left, self.rect.top = coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] * blocksize, coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] * blocksize&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.coordinate = coordinate&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.blocksize = blocksize&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;画到屏幕上&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, screen)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    screen.blit(self.image, self.rect)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;水果类定义其实也差不多，但是不同的水果可以帮助角色恢复不同数值的生命值：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;水果类&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Fruit&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;pygame&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;sprite&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;Sprite&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, imagepath, coordinate, blocksize, **kwargs)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pygame.sprite.Sprite.__init_&lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.kind = imagepath.split(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;/&#x27;&lt;/span&gt;)[-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;].split(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;.&#x27;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.kind == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;banana&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.value = &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    elif &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.kind == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;cherry&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.value = &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__symbol&quot;&gt;else:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      raise ValueError(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Unknow fruit &amp;lt;%s&amp;gt;...&#x27;&lt;/span&gt; % &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.kind)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image = pygame.image.load(imagepath)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image = pygame.transform.scale(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image, (blocksize, blocksize))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image.get_rect()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.left, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.top = coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] * blocksize, coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] * blocksize&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate = coordinate&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.blocksize = blocksize&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;画到屏幕上&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, screen)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    screen.blit(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;炸弹类和角色类的定义就稍稍复杂一些了。角色类需要根据玩家或者电脑的指示上下左右移动，同时可以在自己的位置上产生炸弹以及吃水果之后恢复一定数值的生命值：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;角色类&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Hero&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;pygame&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;sprite&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;Sprite&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, imagepaths, coordinate, blocksize, map_parser, **kwargs)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pygame.sprite.Sprite.__init_&lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.imagepaths = imagepaths&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image = pygame.image.load(imagepaths[-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image = pygame.transform.scale(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image, (blocksize, blocksize))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image.get_rect()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.left, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.top = coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] * blocksize, coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] * blocksize&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate = coordinate&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.blocksize = blocksize&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.map_parser = map_parser&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.hero_name = kwargs.get(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;hero_name&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.health_value = &lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.bomb_cooling_time = &lt;span class=&quot;code-snippet__number&quot;&gt;5000&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.bomb_cooling_count = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.randommove_cooling_time = &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.randommove_cooling_count = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;角色移动&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, direction)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.__updateImage(direction)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; direction == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;left&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.map_parser.getElemByCoordinate([&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]]) &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;w&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;x&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;z&#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    elif direction == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;right&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; &amp;gt;= &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.map_parser.width &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.map_parser.getElemByCoordinate([&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]]) &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;w&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;x&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;z&#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    elif direction == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;up&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.map_parser.getElemByCoordinate([&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]) &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;w&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;x&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;z&#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    elif direction == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;down&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; &amp;gt;= &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.map_parser.height &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.map_parser.getElemByCoordinate([&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]) &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;w&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;x&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;z&#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__symbol&quot;&gt;else:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      raise ValueError(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Unknow direction &amp;lt;%s&amp;gt;...&#x27;&lt;/span&gt; % direction)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.left, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.top = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] * &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.blocksize, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] * &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.blocksize&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; True&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;随机行动(AI电脑用)&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;randomAction&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, dt)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.randommove_cooling_count &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.randommove_cooling_count -= dt&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    action = random.choice([&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;left&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;left&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;right&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;right&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;up&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;up&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;down&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;down&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;dropbomb&#x27;&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    flag = False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; action &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;left&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;right&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;up&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;down&#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.randommove_cooling_count &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        flag = True&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.move(action)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.randommove_cooling_count = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.randommove_cooling_time&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    elif action &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;dropbomb&#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.bomb_cooling_count &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        flag = True&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.bomb_cooling_count = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.bomb_cooling_time&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; action, flag&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;生成炸弹&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;generateBomb&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, imagepath, digitalcolor, explode_imagepath)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Bomb(imagepath=imagepath, coordinate=copy.deepcopy(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate), blocksize=&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.blocksize, digitalcolor=digitalcolor, explode_imagepath=explode_imagepath)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;画到屏幕上&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, screen, dt)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.bomb_cooling_count &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.bomb_cooling_count -= dt&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    screen.blit(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; True&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;吃水果&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;eatFruit&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, fruit_sprite_group)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    eaten_fruit = pygame.sprite.spritecollide(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, fruit_sprite_group, True, None)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; fruit &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;code-snippet__symbol&quot;&gt;eaten_fruit:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.health_value += fruit.value&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;更新角色朝向&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__updateImage&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, direction)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    directions = [&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;left&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;right&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;up&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;down&#x27;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    idx = directions.index(direction)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image = pygame.image.load(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.imagepaths[idx])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image = pygame.transform.scale(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image, (&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.blocksize, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.blocksize))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;炸弹类则需要有倒计时提示功能，以及倒计时结束之后在炸弹杀伤范围内产生火焰特效(穷，估计只值1毛钱的特效T_T，大家多担待)：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;炸弹类&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Bomb&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;pygame&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;sprite&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;Sprite&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, imagepath, coordinate, blocksize, digitalcolor, explode_imagepath, **kwargs)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pygame.sprite.Sprite.__init_&lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image = pygame.image.load(imagepath)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image = pygame.transform.scale(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image, (blocksize, blocksize))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.explode_imagepath = explode_imagepath&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image.get_rect()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.left, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.top = coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] * blocksize, coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] * blocksize&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate = coordinate&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.blocksize = blocksize&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.explode_millisecond = &lt;span class=&quot;code-snippet__number&quot;&gt;6000&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.explode_second = int(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.explode_millisecond / &lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.start_explode = False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.exploding_count = &lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.harm_value = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.is_being = True&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.font = pygame.font.SysFont(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Consolas&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.digitalcolor = digitalcolor&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;画到屏幕上&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, screen, dt, map_parser)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;code-snippet__symbol&quot;&gt;start_explode:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.explode_millisecond -= dt&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.explode_second = int(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.explode_millisecond / &lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.explode_millisecond &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.start_explode = True&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      screen.blit(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      text = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.font.render(str(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.explode_second), True, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.digitalcolor)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      rect = text.get_rect(center=(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.centerx-&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.centery+&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      screen.blit(text, rect)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__symbol&quot;&gt;else:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.exploding_count -= dt&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.exploding_count &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.__explode(screen, map_parser)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__symbol&quot;&gt;else:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.is_being = False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;爆炸效果&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__explode&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, screen, map_parser)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    explode_area = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.__calcExplodeArea(map_parser.instances_list)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; each &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;code-snippet__symbol&quot;&gt;explode_area:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      image = pygame.image.load(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.explode_imagepath)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      image = pygame.transform.scale(image, (&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.blocksize, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.blocksize))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      rect = image.get_rect()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      rect.left, rect.top = each[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] * &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.blocksize, each[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] * &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.blocksize&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      screen.blit(image, rect)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; explode_area&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;计算爆炸区域&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__calcExplodeArea&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, instances_list)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    explode_area = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; ymin &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]-&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;, -&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ymin &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; instances_list[ymin][&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]] &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;w&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;x&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;z&#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      explode_area.append([&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;], ymin])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; ymax &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]+&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ymax &amp;gt;= len(instances_list) &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; instances_list[ymax][&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]] &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;w&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;x&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;z&#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      explode_area.append([&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;], ymax])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; xmin &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]-&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;, -&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; xmin &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; instances_list[&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]][xmin] &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;w&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;x&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;z&#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      explode_area.append([xmin, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; xmax &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]+&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; xmax &amp;gt;= len(instances_list[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]) &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; instances_list[&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]][xmax] &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;w&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;x&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;z&#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      explode_area.append([xmax, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; explode_area&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;因为炸弹类和角色类每帧都要绑定到游戏屏幕上，所以一些倒计时操作就合并地写到draw函数里了，当然最好是重新写一个函数来实现该功能，那样代码结构看起来会更清晰一些。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来，我们在.map文件中设计我们的游戏地图：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0222222222222221&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZTbkic2pYRqLuhC7gS8NH1wG7wh8XQPDXeL0f1sibFkJP2t6dFqxIKiariazMcKDAN9ZGtR1J2cq2sfcCRCyfXnow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;225&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后通过一个地图解析类来解析.map文件，这样每次切换关卡时只需要重新导入一个新的.map文件就行了，同时这样也方便游戏后续进行扩展：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;.map文件解析器&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;mapParser&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, mapfilepath, bg_paths, wall_paths, blocksize, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.instances_list = self.__parse(mapfilepath)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.bg_paths = bg_paths&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.wall_paths = wall_paths&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.blocksize = blocksize&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.height = len(self.instances_list)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.width = len(self.instances_list[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    self.screen_size = (blocksize * self.width, blocksize * self.height)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;地图画到屏幕上&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, screen)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(self.height):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(self.width):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        instance = self.instances_list[j][i]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; instance == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;w&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          elem = Wall(self.wall_paths[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;], [i, j], self.blocksize)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; instance == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;x&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          elem = Wall(self.wall_paths[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;], [i, j], self.blocksize)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; instance == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;z&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          elem = Wall(self.wall_paths[&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;], [i, j], self.blocksize)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; instance == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;0&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          elem = Background(self.bg_paths[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;], [i, j], self.blocksize)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; instance == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;1&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          elem = Background(self.bg_paths[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;], [i, j], self.blocksize)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; instance == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;2&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          elem = Background(self.bg_paths[&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;], [i, j], self.blocksize)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;raise&lt;/span&gt; ValueError(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;instance parse error in mapParser.draw...&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        elem.draw(screen)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;随机获取一个空地&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;randomGetSpace&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, used_spaces=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      i = random.randint(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, self.width&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      j = random.randint(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, self.height&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      coordinate = [i, j]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; used_spaces &lt;span class=&quot;code-snippet__keyword&quot;&gt;and&lt;/span&gt; coordinate &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; used_spaces:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      instance = self.instances_list[j][i]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; instance &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;0&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;1&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;2&#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; coordinate&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;根据坐标获取元素类型&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getElemByCoordinate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, coordinate)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; self.instances_list[coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]][coordinate[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;解析.map文件&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__parse&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, mapfilepath)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    instances_list = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;with&lt;/span&gt; open(mapfilepath) &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; f.readlines():&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        instances_line_list = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; line:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; c &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;w&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;x&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;z&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;0&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;1&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;2&#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            instances_line_list.append(c)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        instances_list.append(instances_line_list)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; instances_list&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;OK，做完这些准备工作，就可以开始写游戏主循环啦：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;游戏主程序&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(cfg)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  pygame.init()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  pygame.mixer.init()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  pygame.mixer.music.load(cfg.BGMPATH)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  pygame.mixer.music.play(&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0.0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  screen = pygame.display.set_mode(cfg.SCREENSIZE)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  pygame.display.set_caption(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Bomber Man - 微信公众号: Charles的皮卡丘&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Interface(screen, cfg, mode=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;game_start&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  font = pygame.font.SysFont(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Consolas&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;15&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; gamemap_path &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; cfg.GAMEMAPPATHS:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    map_parser = mapParser(gamemap_path, bg_paths=cfg.BACKGROUNDPATHS, wall_paths=cfg.WALLPATHS, blocksize=cfg.BLOCKSIZE)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fruit_sprite_group = pygame.sprite.Group()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    used_spaces = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      coordinate = map_parser.randomGetSpace(used_spaces)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      used_spaces.append(coordinate)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      fruit_sprite_group.add(Fruit(random.choice(cfg.FRUITPATHS), coordinate=coordinate, blocksize=cfg.BLOCKSIZE))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    coordinate = map_parser.randomGetSpace(used_spaces)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    used_spaces.append(coordinate)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ourhero = Hero(imagepaths=cfg.HEROZELDAPATHS, coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;ZELDA&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    aihero_sprite_group = pygame.sprite.Group()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    coordinate = map_parser.randomGetSpace(used_spaces)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    aihero_sprite_group.add(Hero(imagepaths=cfg.HEROBATMANPATHS, coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;BATMAN&#x27;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    used_spaces.append(coordinate)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    coordinate = map_parser.randomGetSpace(used_spaces)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    aihero_sprite_group.add(Hero(imagepaths=cfg.HERODKPATHS, coordinate=coordinate, blocksize=cfg.BLOCKSIZE, map_parser=map_parser, hero_name=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;DK&#x27;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    used_spaces.append(coordinate)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    bomb_sprite_group = pygame.sprite.Group()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    is_win_flag = &lt;span class=&quot;code-snippet__keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    screen = pygame.display.set_mode(map_parser.screen_size)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    clock = pygame.time.Clock()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      dt = clock.tick(cfg.FPS)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; event &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; pygame.event.get():&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; event.type == pygame.QUIT:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          pygame.quit()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          sys.exit(&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; event.type == pygame.KEYDOWN:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; event.key == pygame.K_UP:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ourhero.move(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;up&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; event.key == pygame.K_DOWN:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ourhero.move(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;down&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; event.key == pygame.K_LEFT:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ourhero.move(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;left&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; event.key == pygame.K_RIGHT:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ourhero.move(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;right&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; event.key == pygame.K_SPACE:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ourhero.bomb_cooling_count &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              bomb_sprite_group.add(ourhero.generateBomb(imagepath=cfg.BOMBPATH, digitalcolor=cfg.YELLOW, explode_imagepath=cfg.FIREPATH))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      screen.fill(cfg.WHITE)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; hero &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; aihero_sprite_group:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        action, flag = hero.randomAction(dt)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; flag &lt;span class=&quot;code-snippet__keyword&quot;&gt;and&lt;/span&gt; action == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;dropbomb&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          bomb_sprite_group.add(hero.generateBomb(imagepath=cfg.BOMBPATH, digitalcolor=cfg.YELLOW, explode_imagepath=cfg.FIREPATH))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      ourhero.eatFruit(fruit_sprite_group)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; hero &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; aihero_sprite_group:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        hero.eatFruit(fruit_sprite_group)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      map_parser.draw(screen)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; bomb &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; bomb_sprite_group:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;not&lt;/span&gt; bomb.is_being:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          bomb_sprite_group.remove(bomb)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        explode_area = bomb.draw(screen, dt, map_parser)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; explode_area:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ourhero.coordinate &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; explode_area:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ourhero.health_value -= bomb.harm_value&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; hero &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; aihero_sprite_group:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; hero.coordinate &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; explode_area:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              hero.health_value -= bomb.harm_value&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      fruit_sprite_group.draw(screen)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; hero &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; aihero_sprite_group:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        hero.draw(screen, dt)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      ourhero.draw(screen, dt)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      pos_x = showText(screen, font, text=ourhero.hero_name+&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;(our):&#x27;&lt;/span&gt;+str(ourhero.health_value), color=cfg.YELLOW, position=[&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; hero &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; aihero_sprite_group:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        pos_x, pos_y = pos_x+&lt;span class=&quot;code-snippet__number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        pos_x = showText(screen, font, text=hero.hero_name+&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;(ai):&#x27;&lt;/span&gt;+str(hero.health_value), color=cfg.YELLOW, position=[pos_x, pos_y])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ourhero.health_value &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        is_win_flag = &lt;span class=&quot;code-snippet__keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; hero &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; aihero_sprite_group:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; hero.health_value &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          aihero_sprite_group.remove(hero)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; len(aihero_sprite_group) == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        is_win_flag = &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      pygame.display.update()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      clock.tick(cfg.FPS)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; is_win_flag:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      Interface(screen, cfg, mode=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;game_switch&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Interface(screen, cfg, mode=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;game_end&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;逻辑很简单，就是初始化之后导入关卡地图开始游戏，结束一关之后，判断是游戏胜利还是游戏失败，游戏胜利的话就进入下一关，否则就退出主循环，让玩家选择是否重新开始游戏。具体细节自己看下代码就能懂了，必要的注释我都加过了。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;All done~完整源代码详见相关文件~&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7d60381ba6e7ccb821d5e8565f2ec223</guid>
<title>我的命令行开发环境 ❤️</title>
<link>https://toutiao.io/k/hjda293</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-body&quot;&gt;
  &lt;p&gt;常言道，工欲善其事、必先利其器，熟练一套高效且趁手的工具，对开发工作的重要性不言而喻。&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;marked&quot;&gt;本文分享我的命令行开发环境，文章较长，配图较多&lt;/span&gt;，
其中几处详细内容，已将其折叠起来，读者可视兴趣展开阅读。&lt;/p&gt;

&lt;p&gt;命令行工具非常多，称得上神器的，提炼为以下四个：&lt;/p&gt;





&lt;p&gt;我选择工具的标准是：&lt;span class=&quot;marked&quot;&gt;美、快、爽&lt;/span&gt;。&lt;/p&gt;
      &lt;h4 id=&quot;终端程序--alacritty&quot;&gt;
        &lt;span class=&quot;heading-text&quot;&gt;
        
          终端程序 — Alacritty &lt;a href=&quot;#终端程序--alacritty&quot; class=&quot;heading-anchor&quot;&gt;¶&lt;/a&gt;
        
        &lt;/span&gt;
      &lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/alacritty/alacritty&quot; target=&quot;_blank&quot;&gt;Alacritty&lt;/a&gt; 是一款 rust 编写的、
启用 GPU 加速的终端模拟器。&lt;/p&gt;

&lt;p&gt;天下武功，唯快不破，它唯一特点就是：快。&lt;/p&gt;

&lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-70&quot; src=&quot;/assets/images/posts/commandline-dev-tools/1.1-alacritty.png-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/1.1-alacritty.png&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图1.1 alacritty 终端模拟器
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
&lt;p/&gt;

&lt;p&gt;在 2018 年之前，我一直在用流行的 &lt;a href=&quot;https://iterm2.com/&quot; target=&quot;_blank&quot;&gt;iterm 2&lt;/a&gt;。
不过，自从邂逅 alacritty 后，就从未离开。相比 iterm2 来说，alacritty 的功能要简单的多，
但是，它足够快。&lt;/p&gt;

&lt;p&gt;下面的动图展示了同时在 alacritty（左） 和 iterm2 中用 &lt;a href=&quot;https://github.com/atanunq/viu&quot; target=&quot;_blank&quot;&gt;viu&lt;/a&gt;
打开一张图片时的渲染速度：&lt;/p&gt;

&lt;figure&gt; 
  &lt;img id=&quot;pic-1-2&quot; class=&quot;post-img lazyload max-width-100&quot; src=&quot;/assets/images/posts/commandline-dev-tools/1.2-alacritty-vs-iterm2-render-image.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/1.2-alacritty-vs-iterm2-render-image.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图1.2 左边 alacritty 和 右边 iterm2 渲染图片对比
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
&lt;p/&gt;

&lt;p&gt;作为终端，一定要颜值在线。 Alacritty 也支持配色，可参考 &lt;a href=&quot;https://github.com/eendroroy/alacritty-theme&quot; target=&quot;_blank&quot;&gt;alacritty-theme&lt;/a&gt; ，
我用的配色是 &lt;a href=&quot;https://github.com/alebelcor/alacritty-snazzy&quot; target=&quot;_blank&quot;&gt;snazzy&lt;/a&gt; ，从未换过。
此外，选择一款 &lt;span class=&quot;marked&quot;&gt;等宽的&lt;/span&gt; 字体，对终端的整体颜值至关重要，我一直在用的字体是 InconsolataLGC Nerd Font。&lt;/p&gt;

&lt;p&gt;我对 alacritty 的功能需求非常少，只要它够快，够漂亮 就好。比如说，我是没有用终端 Tab 页的习惯的，
这些事情 &lt;a href=&quot;#终端复用--tmux&quot;&gt;tmux&lt;/a&gt; 完全可以搞定。作为终端模拟器，简单快速就好！&lt;/p&gt;
    
      &lt;h4 id=&quot;shell--fish&quot;&gt;
        &lt;span class=&quot;heading-text&quot;&gt;
        
          Shell – Fish &lt;a href=&quot;#shell--fish&quot; class=&quot;heading-anchor&quot;&gt;¶&lt;/a&gt;
        
        &lt;/span&gt;
      &lt;/h4&gt;

&lt;p&gt;无独有偶，选择 &lt;a href=&quot;https://fishshell.com/&quot; target=&quot;_blank&quot;&gt;fish shell&lt;/a&gt; 的原因，仍然是它更快，同时也更轻。&lt;/p&gt;

&lt;p&gt;这里所说的「快」，是指 shell 的 &lt;span class=&quot;marked&quot;&gt;prompt 加载快&lt;/span&gt;，
如下图中，进入 fish 几乎是没有延迟的：&lt;/p&gt;

&lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-70&quot; src=&quot;/assets/images/posts/commandline-dev-tools/2.1-fish-prompt-fast.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/2.1-fish-prompt-fast.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图2.1 配置的少的 shell 才快
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
&lt;p/&gt;

&lt;p&gt;当然，不带任何配置的 zsh 和 bash 也很快。 但是，为了酷炫的颜值、快捷的功能，
许多 zsh 用户都会搭配类似 &lt;a href=&quot;https://ohmyz.sh&quot; target=&quot;_blank&quot;&gt;oh-my-zsh&lt;/a&gt; 的东西，
或者是搞一大堆配置，这都会让 shell 变慢。&lt;/p&gt;

&lt;p&gt;但是真正的不同在于，&lt;span class=&quot;marked&quot;&gt;fish 是开箱即用的&lt;/span&gt;，大可不必自己折腾那么多。
比如 fish 的一大特色是自带补全暗示功能:&lt;/p&gt;

&lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-55&quot; src=&quot;/assets/images/posts/commandline-dev-tools/2.2-fish-hint.jpg-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/2.2-fish-hint.jpg&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图2.2 fish 自带的 hint 提示
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
&lt;p/&gt;

&lt;p&gt;还有自带的 ManPage 补全功能等等，这一切都无需插件。&lt;/p&gt;

&lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-60&quot; src=&quot;/assets/images/posts/commandline-dev-tools/2.3-fish-complete.jpg-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/2.3-fish-complete.jpg&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图2.3 fish 自带的 ManPage 补全功能
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
&lt;p/&gt;

&lt;p&gt;因此 fish 的插件要相对少得多。我在用的也很少:&lt;/p&gt;



&lt;p&gt;除去工具本身外，unix 中 &lt;a href=&quot;https://tiswww.cwru.edu/php/chet/readline/rluserman.html&quot; target=&quot;_blank&quot;&gt;emacs 风格的 shell 快捷键&lt;/a&gt; 也值得推荐，
它们在常见的 shell (fish, zsh, bash) 中都是通用的，其中部分快捷键甚至可以在网页文本框中使用。&lt;/p&gt;

&lt;details&gt;
  &lt;summary&gt;
  Emacs 风格的 shell 快捷键 - 光标移动和编辑
&lt;/summary&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a&lt;/code&gt; 光标回到行首, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-e&lt;/code&gt; 光标回到行尾&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-f&lt;/code&gt; 光标向前移动一个字符，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-b&lt;/code&gt; 光标向后移动一个字符&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alt-f&lt;/code&gt; 光标向前移动一个单词, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alt-b&lt;/code&gt; 光标向后移动一个单词&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-k&lt;/code&gt; 清掉光标后面的部分, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-d&lt;/code&gt; 删掉光标后的一个字符 或 退出&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-l&lt;/code&gt; 相当于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear&lt;/code&gt; 命令，清屏&lt;/li&gt;
  &lt;/ul&gt;

  &lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-60&quot; src=&quot;/assets/images/posts/commandline-dev-tools/2.5-shell-unix-key.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/2.5-shell-unix-key.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图2.5 unix 默认的 emacs 风格快捷键
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
  &lt;p/&gt;

  &lt;p&gt;甚至，当命令非常长的时候，还可以跳入编辑器来编辑命令
（ &lt;a href=&quot;https://github.com/hit9/dotfiles/blob/4b80a9048b7204ce6fb30dcd6d4f7d597696cd05/fish/config.fish#L72&quot; target=&quot;_blank&quot;&gt;fish 配置&lt;/a&gt; ）：&lt;/p&gt;

  &lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-80&quot; src=&quot;/assets/images/posts/commandline-dev-tools/2.7-shell-unix-ctrl-x.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/2.7-shell-unix-ctrl-x.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图2.7 调用编辑器来编辑长命令
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
  &lt;p/&gt;

&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;
    Emacs 风格的 shell 快捷键 - 回翻历史命令
  &lt;/summary&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-p&lt;/code&gt; 向上翻历史命令， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-n&lt;/code&gt; 向下翻历史命令&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-r&lt;/code&gt; 向上搜索历史命令 (顺手推荐搜索命令历史的增强工具 &lt;a href=&quot;https://github.com/junegunn/fzf&quot; target=&quot;_blank&quot;&gt;fzf&lt;/a&gt;)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-80&quot; src=&quot;/assets/images/posts/commandline-dev-tools/2.6-shell-fzf-ctrl-r.jpg-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/2.6-shell-fzf-ctrl-r.jpg&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图2.6 FZF C-R 搜索历史命令
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
  &lt;p/&gt;

&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;
    Emacs 风格的 shell 快捷键 - 进程挂起
  &lt;/summary&gt;

  

  &lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-70&quot; src=&quot;/assets/images/posts/commandline-dev-tools/2.6.1-shell-fg.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/2.6.1-shell-fg.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图2.6.1 挂起当前进程到后台
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
  &lt;p/&gt;

&lt;/details&gt;

&lt;p&gt;其实，主流的 shell (fish, zsh, bash) 也都支持 vi 风格的操作模式。
虽然身为 vim 用户，之所以在 shell 中选择 emacs 风格，是因为它在大部分情况下都是
&lt;span class=&quot;marked&quot;&gt;默认的&lt;/span&gt; 设定。&lt;/p&gt;

&lt;p&gt;在带过的每一支技术团队中，我总会提醒小伙伴们要勤用这些 emacs 风格的快捷键，它看似麻烦，
但是一旦熟练起来，一定比鼠标快。只要刻意地去用，就会熟起来，将大有裨益。&lt;/p&gt;
    
      &lt;h4 id=&quot;终端复用--tmux&quot;&gt;
        &lt;span class=&quot;heading-text&quot;&gt;
        
          终端复用 — Tmux &lt;a href=&quot;#终端复用--tmux&quot; class=&quot;heading-anchor&quot;&gt;¶&lt;/a&gt;
        
        &lt;/span&gt;
      &lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tmux/tmux&quot; target=&quot;_blank&quot;&gt;Tmux&lt;/a&gt; 是一款终端复用神器，不必多言，它早已声名远扬。&lt;/p&gt;

&lt;p&gt;简单讲，终端复用就是在一个终端中，可以开多个 shell 会话。
一些现代的终端应用，比如 &lt;a href=&quot;https://iterm2.com/documentation-general-usage.html&quot; target=&quot;_blank&quot;&gt;iterm2&lt;/a&gt;，
也支持 Tab 页 和 切屏，不过它们在 tmux 的颜值和效率面前，都相形见绌。&lt;/p&gt;

&lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-70&quot; src=&quot;/assets/images/posts/commandline-dev-tools/3.1-tmux.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/3.1-tmux.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图3.1 tmux 常用的功能
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
&lt;p/&gt;

&lt;p&gt;几乎所有的 tmux 功能，都需要按一下 &lt;span class=&quot;marked&quot;&gt;前缀键&lt;/span&gt; 来触发，
默认的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-b&lt;/code&gt;，我则是习惯用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;我常用的 tmux 功能有：面板、窗口、Copy 模式、会话保持 还有 两三个小插件。&lt;/p&gt;

&lt;details&gt;
  &lt;summary&gt;
    tmux - 面板和窗口快捷键
 &lt;/summary&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a &quot;&lt;/code&gt; 横向打开一个面板&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a %&lt;/code&gt; 纵向打开一个面板&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a o&lt;/code&gt; 在面板之间切换&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a q&lt;/code&gt; 展示当前窗口的所有面板的标号&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a z&lt;/code&gt; 放大或缩小一个窗口&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a c&lt;/code&gt; 创建一个窗口&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a n&lt;/code&gt; 切换下一个窗口&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a p&lt;/code&gt; 切换上一个窗口&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;作为一枚 vim 党，我习惯用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hjkl&lt;/code&gt; 来切换面板，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a h&lt;/code&gt; 会跳入右边的面板、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a j&lt;/code&gt; 会跳入下边的面板 等
（ &lt;a href=&quot;https://github.com/hit9/dotfiles/blob/9c78c08a14c8cbf25dbd40aebdd25049b2b987b5/tmux/tmux.conf#L37&quot; target=&quot;_blank&quot;&gt;相关 tmux 配置&lt;/a&gt; ）。&lt;/p&gt;

&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;
    tmux - copy 模式
  &lt;/summary&gt;

  &lt;p&gt;刚进入 tmux 的同学，常会遇到一个问题：如何滚屏 ?&lt;/p&gt;

  &lt;p&gt;在 tmux 中可以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a [&lt;/code&gt; 来进入一个叫做 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy mode&lt;/code&gt; 的模式，
然后就可以用方向键滚屏了。 但是方向键太难用了，可以设定 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy mode&lt;/code&gt; 下采用 vim 键位
( &lt;a href=&quot;https://github.com/hit9/dotfiles/blob/9c78c08a14c8cbf25dbd40aebdd25049b2b987b5/tmux/tmux.conf#L62&quot; target=&quot;_blank&quot;&gt;相关配置&lt;/a&gt; )。&lt;/p&gt;

  &lt;p&gt;在 copy 模式下，vim 键位可谓如鱼得水：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-u&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-d&lt;/code&gt; 来上下翻页&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hjkl&lt;/code&gt; 来上下左右移动光标&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; 来跳到行首、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; 来跳到行尾&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; 来按单词为单位前后移动光标&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F&lt;/code&gt; 来前后搜索字符以跳跃光标&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt; 开始选择一块区域，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V&lt;/code&gt; 开始按行选择一块区域&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; 以拷贝内容，并退出 copy 模式, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q&lt;/code&gt; 也可退出 copy 模式&lt;/li&gt;
  &lt;/ul&gt;

  &lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-70&quot; src=&quot;/assets/images/posts/commandline-dev-tools/3.2-tmux-copy-mode.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/3.2-tmux-copy-mode.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图3.2 tmux 的 copy 模式
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
  &lt;p/&gt;

  &lt;p&gt;还可以在 copy 模式下调整面板大小，
仍然采用 vim 风格的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-hjkl&lt;/code&gt; ，是不是很有趣？
(&lt;a href=&quot;https://github.com/hit9/dotfiles/blob/9c78c08a14c8cbf25dbd40aebdd25049b2b987b5/tmux/tmux.conf#L43&quot; target=&quot;_blank&quot;&gt;相关配置&lt;/a&gt;)&lt;/p&gt;

  &lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-70&quot; src=&quot;/assets/images/posts/commandline-dev-tools/3.3-tmux-copy-mode-scale-panels.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/3.3-tmux-copy-mode-scale-panels.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图3.3 tmux 的 copy 模式下调整面板的大小
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
  &lt;p/&gt;

&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;
    tmux - 会话保持
  &lt;/summary&gt;

  &lt;p&gt;Tmux 还有一个非常棒的功能，就是会话保持。简单来说，就是可以暂时保存工作环境，稍后可重新进入。
这个功能对于需要服务器跑脚本这种事情，非常合适，不必再担心 ssh 断掉后进程断掉。&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a d&lt;/code&gt; 临时离开当前 tmux 会话 (detach 之意)&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tmux a&lt;/code&gt; 重新进入 tmux 会话 (attach 之意)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;甚至如果把整个终端模拟器退出，仍然可以重新进去，工作环境不会丢失。
当我的 alacritty 出现讨厌的闪屏之类的小问题时，我会直接 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmd-q&lt;/code&gt; 杀掉终端，重启终端后即可直接回到 tmux 中。
前面的 &lt;a href=&quot;#pic-1-2&quot;&gt;图1.2&lt;/a&gt; 就是在两个不同的终端应用中运行同一个 tmux 会话，两边的交互完全是同步进行的。&lt;/p&gt;

  &lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-70&quot; src=&quot;/assets/images/posts/commandline-dev-tools/3.4-tmux-d-a.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/3.4-tmux-d-a.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图3.4 tmux 的会话临时退出和恢复
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
  &lt;p/&gt;

&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;
    tmux - 用到的三个小插件
  &lt;/summary&gt;

  &lt;p&gt;Tmux 拥有着 &lt;a href=&quot;https://github.com/rothgar/awesome-tmux&quot; target=&quot;_blank&quot;&gt;丰富的社区生态&lt;/a&gt;，
其中不乏一些 “花里胡哨” 的插件，我不怎么用，状态栏比较干净。
比较喜欢的插件则是这三个：&lt;/p&gt;

  

&lt;/details&gt;

&lt;p&gt;Tmux 的可配置性很强，我的建议是，&lt;span class=&quot;marked&quot;&gt;多用默认的快捷键，只做少许的自定义快捷键&lt;/span&gt;，
毕竟我们许多时候会在服务器等其他环境下使用它。&lt;/p&gt;
    
      &lt;h4 id=&quot;编辑器--vim&quot;&gt;
        &lt;span class=&quot;heading-text&quot;&gt;
        
          编辑器 — Vim &lt;a href=&quot;#编辑器--vim&quot; class=&quot;heading-anchor&quot;&gt;¶&lt;/a&gt;
        
        &lt;/span&gt;
      &lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://www.vim.org/&quot; target=&quot;_blank&quot;&gt;Vim&lt;/a&gt; 有着「编辑器之神」的美誉，
如果把程序员比作武林中的侠客，那么 vim 就是倚天屠龙的利器。
已诞生 30 余年, 宝刀虽老，但是在 2022 年的今天，&lt;span class=&quot;marked&quot;&gt;它的文本编辑效率仍尚无敌手&lt;/span&gt;。&lt;/p&gt;

&lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-70&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.1-vim.jpg-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.1-vim.jpg&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图4.1 我的 vim 编辑器的样子
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
&lt;p/&gt;

&lt;p&gt;相对于现代编辑器 或 IDE 来说，上手 vim 的难度曲线要陡峭许多。
据说有许多新手在刚刚进入 vim 时，不得不关机或重启终端程序来退出它 …&lt;/p&gt;

&lt;p&gt;不过，这是个先苦后甜的过程。&lt;span class=&quot;marked&quot;&gt;
如果前面花功夫去学，坚持用下去，甚至形成肌肉记忆，就会爱上它，而 vim 也会在后期带来惊喜&lt;/span&gt;。
熟练之后，自会入境，享受 「指随心动、码字如飞」的感觉。&lt;/p&gt;

&lt;p&gt;Vim 中的学问很多，我用 vim 码字也蛮多年了，但也远远不敢妄称精通，只能说是经常用。&lt;/p&gt;

&lt;p&gt;但是，&lt;span class=&quot;marked&quot;&gt;只需要了解 vim 中少部分的知识点，就足够完成大部分的编辑工作&lt;/span&gt;。&lt;/p&gt;

&lt;p&gt;我将基本内容总结为下面几块。&lt;/p&gt;

&lt;details&gt;
  &lt;summary&gt;
  Vim - 5 种常用的模式
&lt;/summary&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Normal&lt;/code&gt; 普通模式，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Esc&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-c&lt;/code&gt; 进入&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Visual&lt;/code&gt; 可视模式，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v, V, C-v&lt;/code&gt; 等键进入&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Insert&lt;/code&gt; 插入模式，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i, I, a, A, o, O&lt;/code&gt; 等键进入&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command&lt;/code&gt; 命令模式，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; 进入，常用的有: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:w&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:%s&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q:&lt;/code&gt; 等&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Replace&lt;/code&gt; 替换模式，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt; 进入&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;普通模式是最常用的模式，其他模式都要从普通模式进入。&lt;/p&gt;

  &lt;p&gt;推荐采用 &lt;a href=&quot;https://github.com/itchyny/lightline.vim&quot; target=&quot;_blank&quot;&gt;lightline&lt;/a&gt; 插件，
可以更好的看到当前的 vim 模式。&lt;/p&gt;

  &lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-90&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.1.1-vim-lightline.png-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.1.1-vim-lightline.png&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图4.1.1 lightline 插件效果图
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
  &lt;p/&gt;

&lt;/details&gt;

&lt;details id=&quot;vim-motion&quot;&gt;
  &lt;summary&gt;
  Vim - 快速移动光标 motion
&lt;/summary&gt;

  &lt;ul&gt;
    &lt;li&gt;字符粒度：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h j k l&lt;/code&gt; 左、下、上、右&lt;/li&gt;
    &lt;li&gt;单词粒度：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w W e E&lt;/code&gt; 向前，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b B&lt;/code&gt; 向后&lt;/li&gt;
    &lt;li&gt;行内移动：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; 行首，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; 行尾，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f{c}&lt;/code&gt; 向前搜字符、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F{c}&lt;/code&gt; 向后搜字符 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;按块移动：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(  )&lt;/code&gt; 句子、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{  }&lt;/code&gt; 段落 等&lt;/li&gt;
    &lt;li&gt;翻页：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-u&lt;/code&gt; 向上翻页，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-d&lt;/code&gt; 向下翻页&lt;/li&gt;
    &lt;li&gt;全文：文首 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gg&lt;/code&gt;，文尾 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;G&lt;/code&gt; ，等价于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:0&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:$&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;这些键位，&lt;span class=&quot;marked&quot;&gt;最好结合其英文含义来理解&lt;/span&gt;，
比如说 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt; 是 “word” 的意思，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt; 是 “end” 的意思，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; 是 “backward” 的意思，
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt; 是 “find” 的意思，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-u&lt;/code&gt; 是 “up” 的意思 等等。&lt;/p&gt;

  &lt;p&gt;悄悄地说，我其实并未真正去记 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hjkl&lt;/code&gt; 到底哪个向上、哪个向下，但是手熟了之后，
手放在键盘上自然就可以运用起来。这和许多人背不过键盘布局，但是仍然可以熟练打字是一样的。
&lt;span class=&quot;marked&quot;&gt;我认为 vim 的键位更多地依赖于熟练度，而不是死记硬背&lt;/span&gt;。&lt;/p&gt;

  &lt;p&gt;我比较常用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt; 跳转，有一款加强 vim 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt; 效果的插件，叫做
&lt;a href=&quot;https://github.com/unblevable/quick-scope&quot; target=&quot;_blank&quot;&gt;quick-scope&lt;/a&gt;，
它会自动高亮一些字符，方便 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt; 去跳转，小巧有趣。&lt;/p&gt;

  &lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-80&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.3.1.1-vim-quick-scope.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.3.1.1-vim-quick-scope.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图4.3.1.1 vim 插件 quick-scope 高亮辅助 f 跳转效果图
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
  &lt;p/&gt;

  &lt;p&gt;对于行内跳转光标，有一款插件叫做
&lt;a href=&quot;https://github.com/jayflo/vim-skip&quot; target=&quot;_blank&quot;&gt;vim-ship&lt;/a&gt; ，
它以 &lt;span class=&quot;marked&quot;&gt;二分的形式&lt;/span&gt; 移动光标，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; 向前移动到一半，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S&lt;/code&gt; 向后移动一半，
是不是很聪明！正是由于这个插件，我经常使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; 来二分跳进光标，可以很快地靠近编辑目标附近。&lt;/p&gt;

  &lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-80&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.3.1.2-vim-skip.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.3.1.2-vim-skip.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图4.3.1.2 vim 插件 vim-skip 的二分跳跃效果
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
  &lt;p/&gt;

  &lt;p&gt;这些在 vim 中都叫做 &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/motion.html&quot;&gt;motion&lt;/a&gt;，
它的重要之处不仅仅在于光标移动本身，还可以
&lt;span class=&quot;marked&quot;&gt;和数字、文本编辑、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visual&lt;/code&gt;&lt;/span&gt; 模式相结合，举例来说：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;可以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4j&lt;/code&gt; 来直接向下移动 4 行、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4e&lt;/code&gt; 来向前跳 4 个单词 等&lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;可以用 motion 来帮助选择文本块，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vaw&lt;/code&gt; 会选中一个单词、
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt; 进入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visual&lt;/code&gt; 模式后可以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hl&lt;/code&gt; 左右调整区域范围 等等&lt;/p&gt;

      &lt;figure&gt; 
&lt;img class=&quot;post-img lazyload max-width-80&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.3.2.1-vim-motion-visual-1.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.3.2.1-vim-motion-visual-1.gif&quot; alt=&quot;&quot;/&gt;
    
     
     &lt;figcaption&gt;图4.3.2.1 vim 中 单词粒度 motion 向左向右选中一块区域
       
     &lt;/figcaption&gt;
     
   
  &lt;/figure&gt;
      &lt;p/&gt;

      &lt;figure&gt; 
&lt;img class=&quot;post-img lazyload max-width-80&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.3.2.2-vim-motion-visual-2.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.3.2.2-vim-motion-visual-2.gif&quot; alt=&quot;&quot;/&gt;
    
     
     &lt;figcaption&gt;图4.3.2.2 vim 中 motion 结合 C-v 调整一块区域的选择
       
     &lt;/figcaption&gt;
     
   
  &lt;/figure&gt;
      &lt;p/&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;结合文本编辑，例如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;de&lt;/code&gt; 可以删除当前位置到单词尾巴的内容，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c$&lt;/code&gt; 可以清除当前位置到行尾的内容，
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c0&lt;/code&gt; 可以清除到行首的内容等。&lt;/p&gt;

      &lt;figure&gt; 
&lt;img class=&quot;post-img lazyload max-width-80&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.3.3.1-vim-motion-edit.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.3.3.1-vim-motion-edit.gif&quot; alt=&quot;&quot;/&gt;
    
     
     &lt;figcaption&gt;图4.3.3.1 vim 中 de 和 d$ 的效果
       
     &lt;/figcaption&gt;
     
   
  &lt;/figure&gt;
      &lt;p/&gt;

      &lt;p&gt;有一类 motion 叫做 文本对象 &lt;a href=&quot;https://gist.github.com/webdevel/4050973ffcb19edb07f72540c71ae38f#text-objects&quot; target=&quot;_blank&quot;&gt;text objects&lt;/a&gt;，
例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ciw&lt;/code&gt; 可以编辑一个单词 等等。&lt;/p&gt;

      &lt;figure&gt; 
&lt;img class=&quot;post-img lazyload max-width-80&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.3.3.1-vim-text-object-ciw.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.3.3.1-vim-text-object-ciw.gif&quot; alt=&quot;&quot;/&gt;
    
     
     &lt;figcaption&gt;图4.3.3.1 vim 文本对象 - ciw 重新编辑一个单词的实例
       
     &lt;/figcaption&gt;
     
   
  &lt;/figure&gt;
      &lt;p/&gt;

      &lt;p&gt;有一款插件叫做 &lt;a href=&quot;https://github.com/wellle/targets.vim&quot; target=&quot;_blank&quot;&gt;targets.vim&lt;/a&gt; ，它极大地扩充了可用的文本对象。
比如说 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&quot;&lt;/code&gt; 可选中双引号之内的内容，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;di)&lt;/code&gt; 可删除括号内的内容等等。&lt;/p&gt;

      &lt;figure&gt; 
&lt;img class=&quot;post-img lazyload max-width-80&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.3.3.2-vim-text-object-targets.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.3.3.2-vim-text-object-targets.gif&quot; alt=&quot;&quot;/&gt;
    
     
     &lt;figcaption&gt;图4.3.3.2 vim 文本对象 targets.vim 插件- vi&quot; 和 vi) 的效果
       
     &lt;/figcaption&gt;
     
   
  &lt;/figure&gt;
      &lt;p/&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;我使用 vim-skip 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; 二分跳进 和  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0 $&lt;/code&gt; 的频率是很高的，
因为它们可以在行内 &lt;span class=&quot;marked&quot;&gt;大幅度地跳转光标&lt;/span&gt;。
当光标靠近想要编辑的文本时，才开始采用小粒度移动方式（按字符或者单词）。
我也几乎不用段落跳转 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;}&lt;/code&gt;，而是直接使用翻页 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-u/d&lt;/code&gt;，并不是说后者更好，而是说习惯一种就好。
&lt;span class=&quot;marked&quot;&gt; 人总是很难记住很多东西的，更多的情况是，用起来一些顺手了，就会经常用它们 &lt;/span&gt;。&lt;/p&gt;

&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;
  Vim - 快速编辑文本
&lt;/summary&gt;

  &lt;p&gt;常用编辑快键位：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; 向右插入，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; 向左插入，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt; 向下插入，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O&lt;/code&gt; 向上插入&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; 删除一个字符，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; 删除选中文本，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt; 删除一行&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt; 替换当前字符, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt; 进入替换模式&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u&lt;/code&gt; 撤销最近一次编辑&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;J&lt;/code&gt; 把下一行提上来，合到当前行&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; 清空重新编辑、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cc&lt;/code&gt; 清空当前行&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 向右递进、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 向左递进, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; 缩进一行&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; 拷贝选中区域，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yy&lt;/code&gt; 拷贝一行，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; 粘贴&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;可以发现，对于一些操作，连续两次即可操作一行，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yy&lt;/code&gt; 等：&lt;/p&gt;

  &lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-70&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.4.1.1-vim-dd-cc-shit.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.4.1.1-vim-dd-cc-shit.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图4.4.1.1 Vim 中 dd, &amp;gt;&amp;gt;, cc 的操作效果
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
  &lt;p/&gt;

  &lt;p&gt;其中，一些编辑操作是可以结合数字使用，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4x&lt;/code&gt; 可以连续删除 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt; 个字符。
也可以结合前面所说的 motion ，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c$&lt;/code&gt; 可以清掉到行尾的内容。
还可以结合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visual mode&lt;/code&gt;，例如选中一块区域后 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 来缩进 等等，不再展开。&lt;/p&gt;

  &lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-90&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.4.1.2-vim-visual-shift.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.4.1.2-vim-visual-shift.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图4.4.1.2 Vim 中缩进一块选中区域
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
  &lt;p/&gt;

  &lt;p&gt;Vim 中也可以对多行编辑：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;比如要批量注释一段代码，可以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-v&lt;/code&gt; 进入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visual mode&lt;/code&gt; ，然后 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; 插入注释字符：&lt;/p&gt;

      &lt;figure&gt; 
&lt;img class=&quot;post-img lazyload max-width-90&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.4.2.1-vim-multiple-line-1.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.4.2.1-vim-multiple-line-1.gif&quot; alt=&quot;&quot;/&gt;
    
     
     &lt;figcaption&gt;图4.4.2.1 Vim 中 C-v 编辑多行，操作: C-v I ESC
       
     &lt;/figcaption&gt;
     
   
  &lt;/figure&gt;
      &lt;p/&gt;

      &lt;p&gt;单单对于注释多行来说，有一个更便捷的插件，叫做 &lt;a href=&quot;https://github.com/tpope/vim-commentary&quot; target=&quot;_blank&quot;&gt;vim-commentary&lt;/a&gt;，
可以直接选中多行，然后按 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\&lt;/code&gt; 就可以了
( &lt;a href=&quot;https://github.com/hit9/dotfiles/blob/4b80a9048b7204ce6fb30dcd6d4f7d597696cd05/vim/vimrc#L288&quot; target=&quot;_blank&quot;&gt;相关key mapping 配置&lt;/a&gt; )&lt;/p&gt;

      &lt;figure&gt; 
&lt;img class=&quot;post-img lazyload max-width-90&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.4.2.2-vim-commentary.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.4.2.2-vim-commentary.gif&quot; alt=&quot;&quot;/&gt;
    
     
     &lt;figcaption&gt;图4.4.2.2 vim-commentary 快速注释插件
       
     &lt;/figcaption&gt;
     
   
  &lt;/figure&gt;
      &lt;p/&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;也可以把多行聚合成一行，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-v&lt;/code&gt; 选中多行，然后 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;J&lt;/code&gt; 即可：&lt;/p&gt;

      &lt;figure&gt; 
&lt;img class=&quot;post-img lazyload max-width-90&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.4.2.3-vim-multiple-line-2.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.4.2.3-vim-multiple-line-2.gif&quot; alt=&quot;&quot;/&gt;
    
     
     &lt;figcaption&gt;图4.4.2.3 Vim 中聚合多行为一行，操作：C-v J
       
     &lt;/figcaption&gt;
     
   
  &lt;/figure&gt;
      &lt;p/&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;说到多行注释，vim 的世界中有一个出名的插件叫做
&lt;a href=&quot;https://github.com/terryma/vim-multiple-cursors&quot; target=&quot;_blank&quot;&gt;vim-multiple-cursors&lt;/a&gt; ，不过它已经年久失修，
而且性能贼差。我在用的是 &lt;a href=&quot;https://github.com/mg979/vim-visual-multi&quot; target=&quot;_blank&quot;&gt;vim-visual-multi&lt;/a&gt;，还是很快的。
它的一个优点在于，我们可以在多行编辑时运用 vim motion，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w e b f&lt;/code&gt; 等。&lt;/p&gt;

      &lt;figure&gt; 
&lt;img class=&quot;post-img lazyload max-width-90&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.4.2.4-vim-visual-multi.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.4.2.4-vim-visual-multi.gif&quot; alt=&quot;&quot;/&gt;
    
     
     &lt;figcaption&gt;图4.4.2.4 vim-visual-multi 编辑多行的效果，操作: C-n tab fi a ESC
       
     &lt;/figcaption&gt;
     
   
  &lt;/figure&gt;
      &lt;p/&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;另一类常见的编辑需求，是搜索和替换：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/{text}&lt;/code&gt; 当前文档内向后搜索文本，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?{text}&lt;/code&gt; 向前搜索文本&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; 以继续下一个结果，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; 以回到上一个搜索结果&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:%s/a/b/&lt;/code&gt; 当前文档内全局替换 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; 到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;默认地，在 vim 中搜索文本，是没有高亮的，可以设置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set hlsearch&lt;/code&gt; 。
有一个叫做 &lt;a href=&quot;https://github.com/markonm/traces.vim&quot; target=&quot;_blank&quot;&gt;traces.vim&lt;/a&gt; 的插件，
它可以实时地高亮搜索命中的部分。&lt;/p&gt;

  &lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-100&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.4.3.1-vim-traces.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.4.3.1-vim-traces.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图4.4.3.1 vim-traces 实时显示搜索和替换效果
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
  &lt;p/&gt;

&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;
  Vim - 窗口和标签页
&lt;/summary&gt;

  &lt;p&gt;Vim 也支持切屏和标签页，常用的操作有：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:spl&lt;/code&gt; 横向切屏、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:vsp&lt;/code&gt; 纵向切屏&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-w hjkl&lt;/code&gt; 来跳到不同窗口&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:tabnew&lt;/code&gt; 新建标签页&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gt&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gT&lt;/code&gt; 来切换标签页&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;我平时用切屏比较多，因为写代码时，经常需要一边写这里、一边写那里。&lt;/p&gt;

  &lt;p&gt;推荐两个插件：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/simeji/winresizer&quot; target=&quot;_blank&quot;&gt;winresizer&lt;/a&gt; - 用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hjkl&lt;/code&gt; 的方式更方便地调整 vim 窗口的大小 (和 tmux 中类似)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/troydm/zoomwintab.vim&quot; target=&quot;_blank&quot;&gt;zoomwintab.vim&lt;/a&gt; - 放大和缩小 vim 窗口
 (和 shell 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-z&lt;/code&gt;, tmux 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt; 类似, 我也采用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt; 作为快捷键)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;figure&gt; 
  &lt;img class=&quot;post-img lazyload max-width-75&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.5.1-vim-window-resize-and-zoom.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.5.1-vim-window-resize-and-zoom.gif&quot; alt=&quot;&quot;/&gt;
    
     
       &lt;figcaption&gt;图4.5.1 vim 窗口大小调整和缩放效果
       
       &lt;/figcaption&gt;
     
   
    &lt;/figure&gt;
  &lt;p/&gt;

&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;
  Vim - 开发和编程
&lt;/summary&gt;

  &lt;p&gt;大部分情况下，vim 都是用来做编程开发，在这一方面，它的表现丝毫不比流行的 IDE 差：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;语法高亮&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;所有主流的编程语言，都有对 vim 的高亮的插件。对我而言，可能唯一的问题是，
有些编程语言的插件做的太臃肿了，它们提供一揽子配套，比如 &lt;a href=&quot;https://github.com/fatih/vim-go&quot; target=&quot;_blank&quot;&gt;vim-go&lt;/a&gt;，
&lt;a href=&quot;https://github.com/python-mode/python-mode&quot; target=&quot;_blank&quot;&gt;python-mode&lt;/a&gt; 等等，
但我一般只需要语法高亮，并不想去学习它们额外的一些命令、键位什么的，因为这些都不通用。
针对这种 “绑上编程语言 IDE 式” 的插件，我要么找更轻量的替代品，要么就 fork 出来，只扒出来语法高亮的部分用。&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Git 集成&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;我没有在用 &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot; target=&quot;_blank&quot;&gt;vim-fugitive&lt;/a&gt; 之类的插件，
因为我觉得这些事情都可以在 shell 中完成，也不必单独去记其特殊的命令。&lt;/p&gt;

      &lt;p&gt;在用的一个插件叫做 &lt;a href=&quot;https://github.com/mhinz/vim-signify&quot; target=&quot;_blank&quot;&gt;vim-signify&lt;/a&gt; ，
它可以显示出改了哪些行。&lt;/p&gt;

      &lt;figure&gt; 
&lt;img class=&quot;post-img lazyload max-width-80&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.6.1-vim-signify.jpg-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.6.1-vim-signify.jpg&quot; alt=&quot;&quot;/&gt;
    
     
     &lt;figcaption&gt;图4.6.1 vim-signify 显示修改的 diff 情况
       
     &lt;/figcaption&gt;
     
   
  &lt;/figure&gt;
      &lt;p/&gt;

      &lt;p&gt;另一款在用的插件叫做 &lt;a href=&quot;sindrets/diffview.nvim&quot; target=&quot;_blank&quot;&gt;diffview&lt;/a&gt; ，它可以让我们一览所有改动的情况，
简单说，就是相比 vimdiff 多了导航栏。我一般用在 code review 中。这是一款仅支持 &lt;a href=&quot;https://neovim.io/&quot; target=&quot;_blank&quot;&gt;neovim&lt;/a&gt;
的插件。&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;缩进&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;对于写 Python 的人而言，显示缩进的层级可能非常重要，推荐 &lt;a href=&quot;https://github.com/Yggdroot/indentLine&quot; target=&quot;_blank&quot;&gt;indentLine&lt;/a&gt; 。&lt;/p&gt;

      &lt;figure&gt; 
&lt;img class=&quot;post-img lazyload max-width-80&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.6.3.1-vim-indentline.jpg-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.6.3.1-vim-indentline.jpg&quot; alt=&quot;&quot;/&gt;
    
     
     &lt;figcaption&gt;图4.6.3.1 vim-indentline 在 Python 代码中的效果
       
     &lt;/figcaption&gt;
     
   
  &lt;/figure&gt;
      &lt;p/&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;补全和定义跳转&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;补全和定义跳转，是对编程效率至关重要的一环。我在用的是 &lt;a href=&quot;https://github.com/neoclide/coc.nvim&quot; target=&quot;_blank&quot;&gt;coc.nvim&lt;/a&gt; ，
它支持大部分的编程语言， 速度上不快不慢，够用，大部分情况都表现良好。&lt;/p&gt;

      &lt;p&gt;coc 中，补全列表中的条目浏览采用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-p&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-n&lt;/code&gt; ，也符合 shell 中的快捷键风格。
定义跳转，我用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gd&lt;/code&gt; 来映射。&lt;/p&gt;

      &lt;p&gt;在编程中，相信和大家一样，&lt;span class=&quot;marked&quot;&gt;我是非常依赖补全和定义跳转的&lt;/span&gt;。&lt;/p&gt;

      &lt;figure&gt; 
&lt;img class=&quot;post-img lazyload max-width-80&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.6.4.1-vim-coc.jpg-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.6.4.1-vim-coc.jpg&quot; alt=&quot;&quot;/&gt;
    
     
     &lt;figcaption&gt;图4.6.4.1 coc.nvim 的补全效果
       
     &lt;/figcaption&gt;
     
   
  &lt;/figure&gt;
      &lt;p/&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;格式检查&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;许多编程语言都有一套约定俗成的风格和检查工具，比如 black 之于 Python，clang-format 之于 C/C++，
gofmt 之于 Golang 等等。Vim 中也有支持格式检查的插件，比如 &lt;a href=&quot;https://github.com/dense-analysis/ale&quot; target=&quot;_blank&quot;&gt;ale&lt;/a&gt; ，
它可以在编辑保存时，自动格式化代码，目前我用上去没觉得卡。&lt;/p&gt;

      &lt;figure&gt; 
&lt;img class=&quot;post-img lazyload max-width-80&quot; src=&quot;/assets/images/posts/commandline-dev-tools/4.6.5.1-vim-ale.gif-small.svg&quot; data-src=&quot;/assets/images/posts/commandline-dev-tools/4.6.5.1-vim-ale.gif&quot; alt=&quot;&quot;/&gt;
    
     
     &lt;figcaption&gt;图4.6.5.1 ale 自动格式化代码
       
     &lt;/figcaption&gt;
     
   
  &lt;/figure&gt;
      &lt;p/&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

&lt;/details&gt;

&lt;p&gt;顺带一提，目前在用的配色是 &lt;a href=&quot;https://github.com/NLKNguyen/papercolor-theme&quot; target=&quot;_blank&quot;&gt;PaperColor&lt;/a&gt; ，用了好久了，
中间偶尔会烦一下，换换配色、换换心情，不过，最终又总是回到这个配色上来。&lt;/p&gt;

&lt;p&gt;Vim 的键位集中在字母区，大部分情况下，在 vim 中编辑，手是不用离开键盘的。
话说，是不是许多 &lt;a href=&quot;https://happyhackingkb.com/&quot; target=&quot;_blank&quot;&gt;HHKB&lt;/a&gt; 用户都喜欢用 vim 呢？&lt;/p&gt;

&lt;p&gt;如果非要去理解 vim 编辑器之高效到底来自何处，恐怕只能亲身体会才能知晓。我看来，高效的不是 vim 本身，
而是它帮用户养成的编辑习惯。&lt;/p&gt;

&lt;p&gt;目前有一款社区维护的、脱胎于 vim 的编辑器，叫做 &lt;a href=&quot;https://neovim.io/&quot; target=&quot;_blank&quot;&gt;NeoVim&lt;/a&gt; ，
它支持 lua 语言的插件， 对 &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot; target=&quot;_blank&quot;&gt;LSP&lt;/a&gt;
作了 &lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot; target=&quot;_blank&quot;&gt;内建支持&lt;/a&gt;，
而且完全兼容 vim ，在社区驱动下，neovim 的迭代要比 vim 快多了，社区生态也是遍地开花。
不过我仍然没有离开 vim8，因为目前为止还找不到什么动力去换，或许未来会尝试切过去试一段时间，
所谓，&lt;span class=&quot;marked&quot;&gt; 生命不息，折腾不止 &lt;/span&gt; 嘛。&lt;/p&gt;
    
      &lt;h4 id=&quot;结尾语&quot;&gt;
        &lt;span class=&quot;heading-text&quot;&gt;
        
          结尾语 &lt;a href=&quot;#结尾语&quot; class=&quot;heading-anchor&quot;&gt;¶&lt;/a&gt;
        
        &lt;/span&gt;
      &lt;/h4&gt;
    &lt;hr/&gt;

&lt;p&gt;命令行下的快捷键虽然多，但是不同工具的快捷键，都具有一定的共通性。
而这些快捷键熟练之后，将体会到，键盘操作是比鼠标要快的。&lt;/p&gt;

&lt;p&gt;在配置方面，许多人都把配置做成了仓库托管在 &lt;a href=&quot;https://github.com/topic/dotfiles&quot; target=&quot;_blank&quot;&gt;github 上&lt;/a&gt; ，
我的在这里 - &lt;a href=&quot;https://github.com/hit9/dotfiles&quot;&gt;hit9/dotfiles&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;最后，天下神器，因人而异。不同的工具在不同的人手上、发挥的效果不尽相同。
&lt;span class=&quot;marked&quot;&gt; 工具的强大，因为它们的高上限，而最终威力几何，取决于执剑之人 &lt;/span&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;神兵之神，不在兵器本身，而在于用兵器的人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（完）&lt;/p&gt;
  &lt;/div&gt;


&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e8747ae66f6b6dab204c60e6d758029d</guid>
<title>你用的这些App，都来自乌克兰；高并发是一种架构思维模式；跟着Go作者掌握泛型｜码农周刊VIP会员专属邮件周报 Vol.082</title>
<link>https://toutiao.io/k/teuw2f2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>018697dd2fd7d3f22b5dbee8a70ee805</guid>
<title>开源｜一个轻量级的前端低代码框架</title>
<link>https://toutiao.io/k/8k4e2op</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d2e8f9d060111acfa6ae0d27da83eb63</guid>
<title>如何保护SpringBoot配置文件中的敏感信息</title>
<link>https://toutiao.io/k/fp4d1c1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUyMzM2ODUwMA==&amp;amp;action=getalbum&amp;amp;album_id=1951643299048423427#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1951643299048423427&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#Java&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;70个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section&gt;&lt;mpsearch class=&quot;js_mpsearch appmsg_search_iframe js_uneditable custom_select_card&quot; data-keywords=&quot;%5B%7B%22label%22%3A%22Java%22%7D%2C%7B%22label%22%3A%22%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%22%7D%2C%7B%22label%22%3A%22%E4%B8%8B%E8%BD%BD%22%7D%5D&quot; data-parentclass=&quot;appmsg_search_iframe_wrp&quot; data-ratio=&quot;1.5664335664335665&quot; data-w=&quot;286&quot;/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;来源：blog.csdn.net/jeikerxiao/article/details/96480136&lt;/em&gt;&lt;br/&gt;&lt;/h3&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;说明&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;使用过SpringBoot配置文件的朋友都知道，资源文件中的内容通常情况下是明文显示，安全性就比较低一些。&lt;/section&gt;&lt;section&gt;打开&lt;code&gt;application.properties&lt;/code&gt;或&lt;code&gt;application.yml&lt;/code&gt;，比如 MySql登陆密码，Redis登陆密码以及第三方的密钥等等一览无余，这里介绍一个加解密组件，提高一些属性配置的安全性。&lt;/section&gt;&lt;section&gt;jasypt由一个国外大神写了一个springboot下的工具包，用来加密配置文件中的信息。&lt;/section&gt;&lt;section&gt;GitHub Demo地址&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;https://github.com/jeikerxiao/spring-boot2/tree/master/spring-boot-encrypt&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;数据用户名和数据库密码加密为例&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 引入包&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;查看最新版本可以到:&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;https://github.com/ulisesbocchio/jasypt-spring-boot&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;section&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.ulisesbocchio&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jasypt-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.1.0&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 配置加/解的密码&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;section&gt;&lt;span&gt;# jasypt加密的密匙&lt;/span&gt;&lt;br/&gt;&lt;span&gt;jasypt:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;encryptor:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;password:&lt;/span&gt; &lt;span&gt;Y6M9fAJQdU7jNp5MW&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. 测试用例中生成加密后的秘钥&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;section&gt;&lt;span&gt;@RunWith&lt;/span&gt;(SpringRunner&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;@&lt;span&gt;SpringBootTest&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;DatabaseTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; StringEncryptor encryptor;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;getPass&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String url = encryptor.encrypt(&lt;span&gt;&quot;jdbc:mysql://localhost:3306/mydb?autoReconnect=true&amp;amp;serverTimezone=GMT%2B8&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&quot;&lt;/span&gt;);&lt;br/&gt;        String name = encryptor.encrypt(&lt;span&gt;&quot;root&quot;&lt;/span&gt;);&lt;br/&gt;        String password = encryptor.encrypt(&lt;span&gt;&quot;123456&quot;&lt;/span&gt;);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;database url: &quot;&lt;/span&gt; + url);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;database name: &quot;&lt;/span&gt; + name);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;database password: &quot;&lt;/span&gt; + password);&lt;br/&gt;        Assert.assertTrue(url.length() &amp;gt; &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;        Assert.assertTrue(name.length() &amp;gt; &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;        Assert.assertTrue(password.length() &amp;gt; &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;下面是输出加密字符串：&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;section&gt;database url: 6Ut7iADnHS18cManoFJuNRQ5QEDfcho/F96SOhsHZdXlHYCa5PSrz6rk48I9eHB7qPp5AxDFBk9xi0I1hi6BJ0DSPYA9443gBAk5JDUxDufjUKsdh6knZJLNELmFJzYrDvCu4S0x22MYdZqJDLbyDUU2JcoezCvs156vmsPgU4A=&lt;br/&gt;database name: fmai72yGYKGlP6vTtX77EQ==&lt;br/&gt;database password: GPMG7FGV+EA9iGkC27u67A==&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. 将加密后的字符串替换原明文&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;applicatioin.yml&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;section&gt;&lt;span&gt;server:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;port:&lt;/span&gt; &lt;span&gt;8080&lt;/span&gt;&lt;br/&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# 数据库相关配置&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;datasource:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;driver-class-name:&lt;/span&gt; &lt;span&gt;com.mysql.cj.jdbc.Driver&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 这里加上后缀用来防止mysql乱码,serverTimezone=GMT%2b8设置时区&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;url:&lt;/span&gt; &lt;span&gt;ENC(h20YiPrvNnuuTGjlrE1RVpudMuIQAS6ZPSVo1SPiYVyLen7/TWI5rXVRkStA3MDcoVHQCmLa70wYU6Qo8wwtnsmaXa5jykD3MNhAp5SGJxHsTG5u7tflPdnNmOufyhdsYPxBGWAgibYs9R7yBfrvtwBTRbe096APd3bnG3++Yro=)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;username:&lt;/span&gt; &lt;span&gt;ENC(sT6BztXbJEa71eg3pPGYMQ==)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;password:&lt;/span&gt; &lt;span&gt;ENC(MpSZFJ9ftq+3+VUANZjr0Q==)&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;jpa:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;hibernate:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;ddl-auto:&lt;/span&gt; &lt;span&gt;update&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;show-sql:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# 返回的api接口的配置，全局有效&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;jackson:&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;# 如果某一个字段为null，就不再返回这个字段&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;default-property-inclusion:&lt;/span&gt; &lt;span&gt;non_null&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;date-format:&lt;/span&gt; &lt;span&gt;yyyy-MM-dd&lt;/span&gt; &lt;span&gt;HH:mm:ss&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;serialization:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;write-dates-as-timestamps:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;time-zone:&lt;/span&gt; &lt;span&gt;GMT+8&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# jasypt加密的密匙&lt;/span&gt;&lt;br/&gt;&lt;span&gt;jasypt:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;encryptor:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;password:&lt;/span&gt; &lt;span&gt;Y6M9fAJQdU7jNp5MW&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;注意: 上面的 &lt;code&gt;ENC()&lt;/code&gt; 是固定写法.&lt;/section&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;附言&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;部署时配置salt(盐)值&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;为了防止salt(盐)泄露,反解出密码.可以在项目部署的时候使用命令传入salt(盐)值:&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;section&gt;java -jar xxx.jar  -Djasypt.encryptor.password=Y6M9fAJQdU7jNp5MW&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;或者在服务器的环境变量里配置,进一步提高安全性。&lt;span&gt;学习资料：&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTI4MjI0MQ==&amp;amp;mid=2247506972&amp;amp;idx=2&amp;amp;sn=790959d9ee2b74e0d0c8a0a5395bc665&amp;amp;chksm=fc79b1b2cb0e38a498933a034926df45b51524b044762583488d498ae2112c06cf35d412fb3b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Java进阶视频资源&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;Java进阶视频资源&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;打开&lt;code&gt;/etc/profile&lt;/code&gt;文件&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;section&gt;vim /etc/profile&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;在profile文件末尾插入salt(盐)变量&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;section&gt;&lt;span&gt;export&lt;/span&gt; JASYPT_PASSWORD = Y6M9fAJQdU7jNp5MW&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;编译，使配置文件生效&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;section&gt;&lt;span&gt;source&lt;/span&gt; /etc/profile&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;运行&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;section&gt;java -jar -Djasypt.encryptor.password=&lt;span&gt;${JASYPT_PASSWORD}&lt;/span&gt; xxx.jar&lt;strong/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-mpa-category=&quot;分割&quot; data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;END&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;逆锋起笔&lt;/code&gt;是一个专注于程序员圈子的技术平台，你可以收获&lt;code&gt;最新技术动态&lt;/code&gt;、&lt;code&gt;最新内测资格&lt;/code&gt;、&lt;code&gt;BAT等大厂的经验&lt;/code&gt;、&lt;code&gt;精品学习资料&lt;/code&gt;、&lt;code&gt;职业路线&lt;/code&gt;、&lt;code&gt;副业思维&lt;/code&gt;，微信搜索&lt;code&gt;逆锋起笔&lt;/code&gt;关注！&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494760&amp;amp;idx=2&amp;amp;sn=334c293020ebf9e9fbb3bdb5507b59bc&amp;amp;chksm=fa3f0d33cd4884258ec2fca52239c1c50e7a9e655a12922a6cadfde7248f775b4d99527ae4d1&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;SpringBoot 打包部署最佳实践&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494316&amp;amp;idx=2&amp;amp;sn=d1a3632d6afcb2dc05882193f781eacb&amp;amp;chksm=fa3f0bf7cd4882e12ebebb7f5a987c0ab3163af5f42ba521362d9de580de8292ee3911561d8f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Spring Boot 项目瘦身指南！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494160&amp;amp;idx=2&amp;amp;sn=d317d2bf50fe90b310919c898ce0ea9f&amp;amp;chksm=fa3f0b4bcd48825dd8c321b844aede5476e55deabbb9ddbda506d6ac145918c462e055bc9e76&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;40 个 SpringBoot 常用注解&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494155&amp;amp;idx=1&amp;amp;sn=4a4d04799e4953ba2da243b6e8615ca7&amp;amp;chksm=fa3f0b50cd4882467453cc0261ce92960c7f50e9dd093c82c25d529f210d63ea8b7929274e44&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;基于 SpringBoot 仿豆瓣完整源码分享！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494491&amp;amp;idx=2&amp;amp;sn=bc208873a3a0e7dbdc7698f3d25083e1&amp;amp;chksm=fa3f0a00cd488316a7aec8a2fff04fed8086c7c57a56b533cfbf0f113077fc0116b77f0df05c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Spring Boot 解决跨域问题的 3 种方案！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100010004&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hs540iaTKoaKPniafc8icFWanFqBKibEfLvQn0HKtribhibtAgbxicQUVLllQW86vsQuM0sx6DDkSPf1Ez43hlI6kX6WA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>