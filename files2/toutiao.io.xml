<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>02328df5cf209d939c372339beab98c3</guid>
<title>生产力工具</title>
<link>https://toutiao.io/k/ltecz1p</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;生产力工具&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;当下什么才是最重要的?&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;是时间, 我加了时间 &lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXhmIFpqtHiaheADHrTlqZlYqk1HPWlzm3QtJj3GJxRpIFgEeUPsiaf9Ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt; &quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;省下时间才能做更多事情, 所以提高生产力才是王道啊! 文章内容均来自本人真实体验和观点, 分享一些我常用的生产力工具.&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;utools&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用mac 的同学可能用过 &lt;strong&gt;Alfred&lt;/strong&gt;, &lt;strong&gt;utools&lt;/strong&gt; 功能与之类似.提供了诸多小工具, 和常用开发文档. utools 也是类 spotlight 应用. 没用过的可以体验一下.&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持 macOS, windows 双平台. mac 上可以通过 option + space 呼出&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.47&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUHuhbV9kicGHH30ClsB6hSxibdVsGN1TIgS0oC5NemiaM0HXJDhVETnRJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;使用简单支持输入, 拖拽, 自动粘贴等. 如下拖拽图片会匹配相应的插件供用户筛选使用&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.61&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUAXRYbVGA0OhttMjjASGhPDq4PVwJAGGzHPO7H254ibNOZ3rMbAGt7sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;快速启动, 对中文友好.&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.67&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUicvVV3nnFRzic5C8TDO7JEjnAeQibIxdJc6VuEexSI49prnTO1dh0D4hQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;以下是我常用的工具, 推荐大家试试:&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Everything(windows)&amp;amp;Everything(Mac) 可搜索搜索 文件名文件内容.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图片压缩&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图床&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;json 编辑器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Code 计算器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;hosts 切换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自动化助手&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;各种文档&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外, utools 开放了插件系统, 用户可以自助编写, 或提交插件供其他用户使用.&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;typora&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.32196969696969696&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUWVtiaFIFEDuo1RCrdCzeeTMCrL06t1X8tjA4nppVW63HJIlgoHK8iaWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;792&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Typora 首先是一个 Markdown 文本编辑器, 它支持且仅支持 Markdown 语法的文本编辑.&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;同样支持 window, macOS, linux 等多个平台. beta 版本可以免费使用. 目前只有 beta 版本&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;界面简洁美观, 写的舒服,提供多种 Markdown 选择的权利, 非常适合做笔记.&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5622254758418741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUuVAcIYmSFZ4ZhXlYDJvRzmJ2qB8X6NYDicu9EmTuKsXAxX8fPEnS3mQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1366&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;可以自定义主题, 是要你前端玩的6. 当然也提供能主题可供筛选&lt;/p&gt;&lt;p&gt;typora 主题&lt;/p&gt;&lt;figure/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUulX151EgicksDibjicA1zsVTDdzjgPaibcSH8kibJp2yWeUibia6icxh7NCKcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5657407407407408&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;支持导出 html, pdf, docx 等多种格式&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6771844660194175&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUXsGX8qmsTINaRYPwnTic5OYCHqQIwSNc58SrWJletTG0BrP1pBPSUUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;412&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提一嘴, 本片文章就是使用的 typora 编写的. 在笔记工具挑选方面我做出了很多时间, 最终选择 typora + github 的方式.  想看一眼的话, 手机上可以同过 github App(未来可期) 预览.&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;PicGo&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图传 一开始用的是 utools 的图床插件. 没毛病的. 一样很好用, 直到我发现 typora 和 PicGo 联动功能之后, 便爱不释手.&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;PicGo 本体支持如下图床：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;微博图床&lt;/code&gt; V1.0 &lt;strong&gt;微博图床从2019年4月开始进行防盗链，不建议继续使用&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;七牛图床&lt;/code&gt; V1.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;腾讯云COS v4\v5版本&lt;/code&gt; v1.1和v1.5.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;又拍云&lt;/code&gt; V1.2.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;GitHub&lt;/code&gt; V1.5.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SM.MS&lt;/code&gt; V1.5.1&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;阿里云OSS&lt;/code&gt; V1.6.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Imgur&lt;/code&gt; V1.6.0&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;支持 windows, macOS, linux 多个操作系统&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Typora 复制上传 PicGo&lt;/p&gt;&lt;img data-ratio=&quot;0.8650568181818182&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUvlCKpwxK97fvFLSwIEssCFqfZkf7nICTCujsq2icKJPribt8C2yNJpqw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1408&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;typora&amp;gt; 偏好设置&amp;gt;图片, 如下图设置即可&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.688034188034188&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUWibCX33YwMyMhJmoIIVyRztem3ickzyY2ibgnLqTJPC75ZaEoVd57JkRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;702&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Clipy&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUZibRwatibT2tsCyIs1fL9IsneAZzrOwHWpleZGYbjAttKskz05tibiafVg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你在 Mac 上还在使用传统的 &lt;code&gt;⌘Command-C&lt;/code&gt; 和 &lt;code&gt;⌘Command-V&lt;/code&gt; 快捷键来操作剪贴版，那样是很难谈得上有效率的。而使用剪贴板工具能够帮助你减少重复性输入，提高输入文字的效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 &lt;code&gt;⇧ +⌘ + V&lt;/code&gt; 呼出&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6469248291571754&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUricribWQhr8MUDvKrCPMib8ObnT044YEqauYtE65WKPCpqUeXuT9sq8Eg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;439&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Clipy 全面支持纯文本、富文本（RTF、RTFD）、PDF、Filename、URL、TIFF Image 这些格式，能基本满足使用者们的需求。!&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;支持自定义分组片断(一个复制的文本)&lt;/p&gt;&lt;p&gt;⇧ +⌘ + V &amp;gt; 编辑片段 &amp;gt; 添加文件夹&amp;gt;添加片断&lt;/p&gt;&lt;figure/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.77875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNURgKCWxzrq4fiaK4uWLJ9P5pqeTIghkStGCsWjgPjddvyUTHWB4I2ZuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;OneNote&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不能是工作还是学习, 可以说最接近真实是笔记本的存在. 一开始我也尝试过做自己的笔记博客载体, 但是实在是过于灵活了. 后来我选择 Markdown 编辑器 Typora . OneNote 我找到了新的使用场景  GTD (Getting Things Done).&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么是 GTD? Getting Things Done 应该翻译为，“把事情处理完” 或者 “把事情做好”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是有时候会觉得&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;觉得自己每天都有好多事情要做，作业、培训、报表、项目、工作总结、微信、电话、邮箱……早上出门发现垃圾没扔，晚上回家发现洗衣机的衣服没晾……打开手机看到别人的出行照片和视频才发现，原来心心念念一年的旅行连计划都还没有做……睡前更要挣扎好久才能睡，因为你可能突然想到，单词没有背、买的几本书没看，收藏夹里还有数不清的文章在吃灰……&quot;  ----引自 topbook&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你是这种状态建议 可以了解一下 GTD, 本文不做过多赘述 .&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5044444444444445&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUgQyvkcCticFicsj633Dou0Od5pNbSLzpvZomictDSuyKQNWnfylnBDFDA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUl2Ll673pqcbUbG2FCcWkSyDKxWQmdkWt8QK420cpkrkWUB1LD0I7SQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;250&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;DataGrip&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUeFSFkvXeCDgVNBl1D4loicVkjZzXLxAOOBuES50RNH4FW6mQrOHq7lA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日常开发中少不了各种可视化数据库管理工具。如果需要同时能连接多种数据库，大家肯定都会想到 &lt;strong&gt;DBeaver&lt;/strong&gt;、&lt;strong&gt;Navicat Premium&lt;/strong&gt; , 其实 DataGrip 也很香的.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Intellij 全家桶工具之一, 所以你不用担心用不习惯, 有些操作手感来了就自己会了&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;提供多数据库驱动 比 Navicat多一些&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拥有智能的上下文敏感和编码语法提示&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拥有可视化的表格编辑，你可以添加、删除、编辑和克隆数据行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提供版本控制支持&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重构支持（主要是会给你SQL优化的建议，使你能够重构sql）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.1435768261964736&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUTEh0qwUkanZb8ia2vDjoCC81hW4mwzBH2q667USg4iarVM83LviaCfKhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;397&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Chrome 插件&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;uBlock Origin&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一款高效的网络请求过滤工具，能去除网页的大部分广告包括视频的广告而且占用极低的内存和CPU(相对 adblock plus)。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.24770642201834864&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUvcScdOKyiaJB9E8dc4Qyr46PpCUfxO3mt0uAxGcTIwpuaUzEib92hJRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;654&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;uBlock Origin 的拦截更新里面能添加adblock的规则&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;uBlock Origin 能拦截视频广告 直接跳过非黑屏&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Aerys - 窗口标签管理器&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好用不火, 清爽的网页标签管理器.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;⌘+⇧+k 快捷键打开&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;直接输入搜索标签页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分类显示现有标签页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;点击跳转，方便查找&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分类关闭，快速清理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拖动改变顺序，方便在窗口之间移动标签页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;显示最近关闭的标签页，点击重新开启&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5130784708249497&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUyATlMNJKY5bsGZ8cAR0uiaqW6OX5XTWr7zxjibHXSLuZRXhTsoBICgVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;994&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Dark Reader&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;黑暗主题&lt;/strong&gt; 我知道很多人不喜欢. 但是我还是要说&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一个护眼程序, 可以实时生成一个黑暗主题为每个网站启动夜间模式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以调整亮度、对比度，应用棕褐色滤镜、黑暗模式，设置字体和忽略的网站列表&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4395702775290958&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUSqRLo6XE1R11fPdhSeaAcf9AqwjBzWcYMn3xa2IlGhXpb4iaWchLuRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1117&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNU19KdeEzx6JFXdUH7ttldiaFKdkPC1fOBG7xibxibE51djDAy0N8DCtotg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Git Master&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好用不火&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持GIt目录树查看&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持文件夹和 文件名搜索&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;GitHub显示仓库、文件大小，并支持文件复制下载&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;github 消息通知&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;文件历史浏览 GitHub &amp;amp;&amp;amp; GitLab&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能有些同学用过 Octotree, 但是 Octotree支持 github. Git Master 支持 github, gitLab, gitee,gitea&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0590277777777777&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNU1G5XMsdicym3K8nxWpgstrBL3bricBqjaP3XibGpLdm75hAibUtkCdOD0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;53&quot; data-cropselx2=&quot;303&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;250&quot; data-ratio=&quot;0.7015755329008341&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicX09OR6yyCDtUJFIj4Xolq2r8rziaHd06LrLuor2nZQBLNibM3SYZQ4fhA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot; data-backw=&quot;356&quot; data-backh=&quot;250&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;IDEA 插件&lt;br/&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;EasyYapi&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;EasyYapi 是个Idea文档生成工具 . 详情可以参考API 管理平台工具&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;YAPI 部署地址 http://easy-interfaces.tongdun.me:8088&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.49053627760252366&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXicezibn4cqmoYMc0aticSyaZiaDJpENgDHiafddh3OVuT9R2LavOLxglEFg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;634&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;导出http到&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;导出rpc到&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Call api 调用 API&lt;/section&gt;&lt;/li&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;MyBatisCodeHelperPro&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;406&quot; data-ratio=&quot;0.7852593266606005&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmy0FkFRNRZC9fTiaKP38x2YH4881QCkvbKg40f5IT1My2U9bq3O6JPxEoQYuDohWk0JZdo1v5o1icWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1099&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;438&quot; data-ratio=&quot;0.7270560190703218&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXCzhtPBjIEGEmA9JuESMvqy4icibPNkEHf8AY8GZia7SKgMAkf5bLgvwEQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;839&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;功能点&lt;/th&gt;&lt;th&gt;未激活版&lt;/th&gt;&lt;th&gt;激活版&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;接口与xml互相跳转 更换图标&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;接口方法名重构&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键添加param&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xml中的 param的自动提示 resultMap refid 等的自动提示&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;resultMap中的property的自动提示&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测没有使用的xml 可一键删除&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测mybatis接口中方法是否有实现，没有则报红 可创建一个空的xml方法块&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测resultmap的property是否有误&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;支持spring 将mapper注入到spring中 intellij的spring注入不再报错 支持springboot&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键生成分页查询&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;代码模版，生成cdata和collection语句&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键添加resultMap中未被使用的属性&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键生成mybatis接口的testcase&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;通过方法名生成sql&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;通过数据库生成crud代码&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;通过java类生成crud代码&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xml collection中的 param提示&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;识别mybatis的标签 全自动sql补全&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测#{中的参数是否正确&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;if test when test foreach collection $中的OGNL支持&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;param重构功能(2.7.2)&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;resultMap中column提示与检测(2.7.2)&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mybatis xml代码格式化(2.8.2)&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是收费的功能比较好用. 之前好像是 99块钱 3 年吧. 我之前买过.还是买的起的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MyBatisCodeHelper-Pro插件破解版 仅供大家学习, 有能力还是要支持一下正版&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Maven Helper&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Maven Helper 用于分析依赖冲突插件, 当然使用 Maven 命令也可以完成. maven helper 提高了 maven 使用体验 .&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8273504273504273&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUXkKHTGhBhYtaXWLk6NFOh5bVSPm880efNHcLEU3viaG4bQnShibafyTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;585&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;691&quot; data-ratio=&quot;1.238709677419355&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXvbdbmvdbbmeLicskNPsWO0G0FCG6MNNBot8r9mhbJ2ibmibxS6bHOrSicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;620&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;写在最后&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是推荐使用的生产力工具. 每个人喜好不一样. 大家酌情筛选. 顺便提一个问题 , mac 有没有什么好用的 gif 编辑器. photoshop 就算了. 想找个轻量级一点的 .&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天就分享这么多,欢迎关注,评论,点赞,转载~&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.61875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmzRnkibQCicbgruQJxOGOYXYE7ZOpRiafYWaqSSdGFcicCyibI50SATqjc6qT7vm2ZFO7nsA6GfqcJbqmA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;480&quot;/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f9c03ef0ee7b37d084a3daa5a1b94123</guid>
<title>Hadoop 框架：MapReduce 基本原理和入门案例</title>
<link>https://toutiao.io/k/x2r860r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h1&gt;&lt;span&gt;一、MapReduce概述&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、基本概念&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Hadoop核心组件之一：分布式计算的方案MapReduce，是一种编程模型，用于大规模数据集的并行运算，其中Map（映射）和Reduce（归约）。&lt;/p&gt;&lt;p&gt;MapReduce既是一个编程模型，也是一个计算组件，处理的过程分为两个阶段，Map阶段：负责把任务分解为多个小任务，Reduce负责把多个小任务的处理结果进行汇总。其中Map阶段主要输入是一对Key-Value，经过map计算后输出一对Key-Value值；然后将相同Key合并，形成Key-Value集合；再将这个Key-Value集合转入Reduce阶段，经过计算输出最终Key-Value结果集。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、特点描述&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;MapReduce可以实现基于上千台服务器并发工作，提供很强大的数据处理能力，如果其中单台服务挂掉，计算任务会自动转义到另外节点执行，保证高容错性；但是MapReduce不适应于实时计算与流式计算，计算的数据是静态的。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、操作案例&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、流程描述&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3671875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBMfiaK0lXA3qezX67I3l9AOe7A0Y3P1DF6fGKxjY5gKwLHlmtkfgpjzrmIkwe6hdHxJLCvAU8ibPbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;数据文件一般以CSV格式居多，数据行通常以空格分隔，这里需要考虑数据内容特点；&lt;/p&gt;&lt;p&gt;文件经过切片分配在不同的MapTask任务中并发执行；&lt;/p&gt;&lt;p&gt;MapTask任务执行完毕之后，执行ReduceTask任务，依赖Map阶段的数据；&lt;/p&gt;&lt;p&gt;ReduceTask任务执行完毕后，输出文件结果。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、基础配置&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;hadoop:&lt;br/&gt;  &lt;span&gt;# 读取的文件源&lt;/span&gt;&lt;br/&gt;  inputPath: hdfs:&lt;span&gt;//hop01:9000/hopdir/javaNew.txt&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# 该路径必须是程序运行前不存在的&lt;/span&gt;&lt;br/&gt;  outputPath: /wordOut&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;3、Mapper程序&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WordMapper&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Mapper&lt;/span&gt;&amp;lt;&lt;span&gt;LongWritable&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;IntWritable&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    Text mapKey = &lt;span&gt;new&lt;/span&gt; Text();&lt;br/&gt;    IntWritable mapValue = &lt;span&gt;new&lt;/span&gt; IntWritable(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;map&lt;/span&gt; &lt;span&gt;(LongWritable key, Text value, Context context)&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 1、读取行&lt;/span&gt;&lt;br/&gt;        String line = value.toString();&lt;br/&gt;        &lt;span&gt;// 2、行内容切割，根据文件中分隔符&lt;/span&gt;&lt;br/&gt;        String[] words = line.split(&lt;span&gt;&quot; &quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;// 3、存储&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (String word : words) {&lt;br/&gt;            mapKey.set(word);&lt;br/&gt;            context.write(mapKey, mapValue);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;4、Reducer程序&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WordReducer&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Reducer&lt;/span&gt;&amp;lt;&lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;IntWritable&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;IntWritable&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; sum ;&lt;br/&gt;    IntWritable value = &lt;span&gt;new&lt;/span&gt; IntWritable();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;reduce&lt;/span&gt;&lt;span&gt;(Text key, Iterable&amp;lt;IntWritable&amp;gt; values,Context context)&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 1、累加求和统计&lt;/span&gt;&lt;br/&gt;        sum = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (IntWritable count : values) {&lt;br/&gt;            sum += count.get();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// 2、输出结果&lt;/span&gt;&lt;br/&gt;        value.set(sum);&lt;br/&gt;        context.write(key,value);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;5、执行程序&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WordWeb&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Resource&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; MapReduceConfig mapReduceConfig ;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/getWord&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getWord&lt;/span&gt; &lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException, ClassNotFoundException, InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 声明配置&lt;/span&gt;&lt;br/&gt;        Configuration hadoopConfig = &lt;span&gt;new&lt;/span&gt; Configuration();&lt;br/&gt;        hadoopConfig.set(&lt;span&gt;&quot;fs.hdfs.impl&quot;&lt;/span&gt;,&lt;br/&gt;                org.apache.hadoop.hdfs.DistributedFileSystem.class.getName()&lt;br/&gt;        );&lt;br/&gt;        hadoopConfig.set(&lt;span&gt;&quot;fs.file.impl&quot;&lt;/span&gt;,&lt;br/&gt;                org.apache.hadoop.fs.LocalFileSystem.class.getName()&lt;br/&gt;        );&lt;br/&gt;        Job job = Job.getInstance(hadoopConfig);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// Job执行作业 输入路径&lt;/span&gt;&lt;br/&gt;        FileInputFormat.addInputPath(job, &lt;span&gt;new&lt;/span&gt; Path(mapReduceConfig.getInputPath()));&lt;br/&gt;        &lt;span&gt;// Job执行作业 输出路径&lt;/span&gt;&lt;br/&gt;        FileOutputFormat.setOutputPath(job, &lt;span&gt;new&lt;/span&gt; Path(mapReduceConfig.getOutputPath()));&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 自定义 Mapper和Reducer 两个阶段的任务处理类&lt;/span&gt;&lt;br/&gt;        job.setMapperClass(WordMapper.class);&lt;br/&gt;        job.setReducerClass(WordReducer.class);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 设置输出结果的Key和Value的类型&lt;/span&gt;&lt;br/&gt;        job.setOutputKeyClass(Text.class);&lt;br/&gt;        job.setOutputValueClass(IntWritable.class);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//执行Job直到完成&lt;/span&gt;&lt;br/&gt;        job.waitForCompletion(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;success&quot;&lt;/span&gt; ;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;6、执行结果查看&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;将应用程序打包放到hop01服务上执行；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;java -jar &lt;span&gt;map&lt;/span&gt;-reduce-case01.jar&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5587628865979382&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBMfiaK0lXA3qezX67I3l9AOWC6Uiah1aNeBBVtabria5TxO2ZQPcu15HwibianEM8SoEsRSuqyfPnIbzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;970&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、案例分析&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、数据类型&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Java数据类型与对应的Hadoop数据序列化类型；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4794520547945205&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBMfiaK0lXA3qezX67I3l9AO999VxYKd4ViaSMbIeyOOJHVrL93icHUEMbDRrHLiaxY8z9t891aqXcccw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;876&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、核心模块&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Mapper模块&lt;/strong&gt;：处理输入的数据，业务逻辑在map()方法中完成，输出的数据也是KV格式；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Reducer模块&lt;/strong&gt;：处理Map程序输出的KV数据，业务逻辑在reduce()方法中；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Driver模块&lt;/strong&gt;：将程序提交到yarn进行调度，提交封装了运行参数的job对象；&lt;/p&gt;&lt;h1&gt;&lt;span&gt;四、序列化操作&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、序列化简介&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;序列化：将内存中对象转换为二进制的字节序列，可以通过输出流持久化存储或者网络传输；&lt;/p&gt;&lt;p&gt;反序列化：接收输入字节流或者读取磁盘持久化的数据，加载到内存的对象过程；&lt;/p&gt;&lt;p&gt;Hadoop序列化相关接口：Writable实现的序列化机制、Comparable管理Key的排序问题；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、案例实现&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;案例描述：读取文件，并对文件相同的行做数据累加计算，输出计算结果；该案例演示在本地执行，不把Jar包上传的hadoop服务器，驱动配置一致。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;实体对象属性&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AddEntity&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Writable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; addNum01;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; addNum02;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; resNum;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 构造方法&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;AddEntity&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;AddEntity&lt;/span&gt;&lt;span&gt;(&lt;span&gt;long&lt;/span&gt; addNum01, &lt;span&gt;long&lt;/span&gt; addNum02)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;();&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.addNum01 = addNum01;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.addNum02 = addNum02;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.resNum = addNum01 + addNum02;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 序列化&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;write&lt;/span&gt;&lt;span&gt;(DataOutput dataOutput)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;        dataOutput.writeLong(addNum01);&lt;br/&gt;        dataOutput.writeLong(addNum02);&lt;br/&gt;        dataOutput.writeLong(resNum);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 反序列化&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;readFields&lt;/span&gt;&lt;span&gt;(DataInput dataInput)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 注意：反序列化顺序和写序列化顺序一致&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.addNum01  = dataInput.readLong();&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.addNum02 = dataInput.readLong();&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.resNum = dataInput.readLong();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 省略Get和Set方法&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Mapper机制&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AddMapper&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Mapper&lt;/span&gt;&amp;lt;&lt;span&gt;LongWritable&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;AddEntity&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    Text myKey = &lt;span&gt;new&lt;/span&gt; Text();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;map&lt;/span&gt;&lt;span&gt;(LongWritable key, Text value, Context context)&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 读取行&lt;/span&gt;&lt;br/&gt;        String line = value.toString();&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 行内容切割&lt;/span&gt;&lt;br/&gt;        String[] lineArr = line.split(&lt;span&gt;&quot;,&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 内容格式处理&lt;/span&gt;&lt;br/&gt;        String lineNum = lineArr[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; addNum01 = Long.parseLong(lineArr[&lt;span&gt;1&lt;/span&gt;]);&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; addNum02 = Long.parseLong(lineArr[&lt;span&gt;2&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;        myKey.set(lineNum);&lt;br/&gt;        AddEntity myValue = &lt;span&gt;new&lt;/span&gt; AddEntity(addNum01,addNum02);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 输出&lt;/span&gt;&lt;br/&gt;        context.write(myKey, myValue);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Reducer机制&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AddReducer&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Reducer&lt;/span&gt;&amp;lt;&lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;AddEntity&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;AddEntity&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;reduce&lt;/span&gt;&lt;span&gt;(Text key, Iterable&amp;lt;AddEntity&amp;gt; values, Context context)&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; addNum01Sum = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; addNum02Sum = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 处理Key相同&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (AddEntity addEntity : values) {&lt;br/&gt;            addNum01Sum += addEntity.getAddNum01();&lt;br/&gt;            addNum02Sum += addEntity.getAddNum02();&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 最终输出&lt;/span&gt;&lt;br/&gt;        AddEntity addRes = &lt;span&gt;new&lt;/span&gt; AddEntity(addNum01Sum, addNum02Sum);&lt;br/&gt;        context.write(key, addRes);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;案例最终结果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.366&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBMfiaK0lXA3qezX67I3l9AO9KYVrIJvskZOIrwm0rUfAQicj5AjS7X4jJpLIYKP6hbVgiaX726lK4xw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;五、源代码地址&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;GitHub·地址&lt;br/&gt;https:&lt;span&gt;//github.com/cicadasmile/big-data-parent&lt;/span&gt;&lt;br/&gt;GitEE·地址&lt;br/&gt;https:&lt;span&gt;//gitee.com/cicadasmile/big-data-parent&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3783359497645212&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCjMheLZtcM2iaVMBOpIUKR4CDRCG9FLT5K6NmGXvG7exrW0TSuDjnTKJQ5PDq8j8Y7PHDd17Z3gicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dd90df23f462174300ae154c29e396f0</guid>
<title>资料 | Linkedin 工程团队出品的 SRE 入门教程</title>
<link>https://toutiao.io/k/zak7avs</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>15961f674ccf17e1d3a424d902756498</guid>
<title>Golang Mac M1 的性能压测</title>
<link>https://toutiao.io/k/sus7h8k</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;clearfix entry-content&quot;&gt;&amp;#13;

&lt;p class=&quot;has-text-color has-vivid-green-cyan-color&quot;&gt;前言：&lt;/p&gt;



&lt;p&gt;同事在我的强烈推荐下购买了mac m1，13寸本，内存16g。😅&lt;/p&gt;



&lt;p&gt;主机来了后开始配置环境，这也是烦躁的开始。像一些开发者工具的教程多是x86的，所以需要找到m1的适配教程。像brew工具，官方文档中就有标注m1的安装文档。&lt;/p&gt;



&lt;p&gt;golang release里没有m1的版本，下载x86和arm版运行提示不可用，arm版直接报错，x86 golang二进制文件运行后一直hang住，没有任何提示。go官方博客中说1.16的版本会支持mac m1，但1.16的正式版是2021年的2月份，预计会提前先放出几版beta测试版。&lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img src=&quot;http://xiaorui.cc/wp-content/uploads/2020/12/Jietu20201209-233910.jpg&quot; alt=&quot;golang mac m1 编译&quot; class=&quot;wp-image-7155&quot;/&gt;&lt;/figure&gt;



&lt;p&gt;但这也不能耽误人家工作呀，所以在网上一堆找方案，安装rosetta 2指令翻译器，然后重新编译golang。 具体编译golang过程我就不描述了，自己在网上搜吧。&lt;/p&gt;



&lt;p&gt;Rosetta 2 的作用在于它通过指令翻译，可以让 ARM 平台的 macOS，直接运行绝大部分的 X86 软件。经过测试，以前常用的Mac x86软件多数可流程运行，也有一些各别的软件出现卡顿，比如karabiner、vimac、magnet等。vscode打开一瞬间像是hang住了，近2秒后才显示按钮布局。Rosetta 2的翻译还是有损耗，还是要等软件出m1适配版。&lt;/p&gt;



&lt;p class=&quot;has-text-color has-vivid-green-cyan-color&quot;&gt;M1&lt;/p&gt;



&lt;p&gt;借来玩了几天Mac M1，续航真是不错。除了前期遇到些问题，后面的应用体验跟x86差不多，平时办公和开发用到的软件也都可以流畅跑起来。除了docker和虚拟机不能x86系统之外，没什么影响。&lt;/p&gt;



&lt;p&gt;我个人习惯使用Vim和vscode做为golang的代码编辑器，在M1下基本无问题，可以用。Goland支持当然也没有问题的。&lt;/p&gt;



&lt;p&gt;最让人惊艳的就是散热，首先没有风扇的声音干扰太爽了。😁 就日常开发工作中，相比16寸 mac来说温度着实低些。&lt;/p&gt;



&lt;p class=&quot;has-text-color has-vivid-green-cyan-color&quot;&gt;性能对比&lt;/p&gt;



&lt;p&gt;全网都在鼓吹M1的性能，个人也相当的感兴趣，所以来一波简单粗暴、不可靠的压力测试。由于工作主要是基于golang开发，那么索性就测试github中较热门的benchmark。&lt;/p&gt;



&lt;p&gt;下面是 mac m1 跟 mac 2019 16寸 i7的性能对比，分别做了5轮测试，且go test都限制为4个u，取各个平台的多次结果中较为平均的测试输出。压力测试项目用的这个 github.com/cornelk/go-benchmark 。&lt;/p&gt;



&lt;p&gt;单单就测试耗时来说，m1是要比intel i7执行的快个14%。其实之前在两个mac上还做过 go_serialization_benchmarks 对比测试，m1耗时依然要比intel i7快12%左右。&lt;/p&gt;



&lt;p&gt;mac m1&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;// mac m1

➜  go-benchmark git:(master) go test -bench=. -cpu=4
goos: darwin
goarch: amd64
pkg: github.com/cornelk/go-benchmark
BenchmarkAtomicInt32-4                    334891      3539 ns/op
BenchmarkAtomicInt64-4                    335152      3551 ns/op
BenchmarkAtomicUintptr-4                  333566      3551 ns/op
BenchmarkDefer-4                         3812605       315 ns/op
BenchmarkDeferNo-4                      39484240        30.4 ns/op
BenchmarkGoroutineNew-4                    10000   2556633 ns/op
BenchmarkGoroutineChan1RteCPU-4            10000   1370799 ns/op
BenchmarkGoroutineChan10RteCPU-4           10000    314480 ns/op
BenchmarkGoroutineChanCPURteCPU-4          10000    349479 ns/op
BenchmarkGoroutineChan100RteCPU-4          10000    150737 ns/op
BenchmarkGoroutineChan10000RteCPU-4        10000    159831 ns/op
BenchmarkGoroutineChan10Rte10-4            10000    320326 ns/op
BenchmarkGoroutineChan100Rte100-4          10000    253850 ns/op
BenchmarkGoroutineChan10000Rte10000-4        100  14479701 ns/op
BenchmarkHashing64MD5-4                  5085172       250 ns/op  32.05 MB/s
BenchmarkHashing64SHA1-4                 4629715       280 ns/op  28.53 MB/s
BenchmarkHashing64SHA256-4               3403106       354 ns/op  22.62 MB/s
BenchmarkHashing64SHA3B224-4             1511235       828 ns/op   9.66 MB/s
BenchmarkHashing64SHA3B256-4             1791288       765 ns/op  10.45 MB/s
BenchmarkHashing64RIPEMD160-4            2268490       529 ns/op  15.11 MB/s
BenchmarkHashing64Blake2B-4              1834280       707 ns/op  11.32 MB/s
BenchmarkHashing64Blake2BSimd-4          1937584       622 ns/op  12.86 MB/s
BenchmarkHashing64Murmur3-4             13321485       134 ns/op  59.49 MB/s
BenchmarkHashing64Murmur3Twmb-4         14345737        89.2 ns/op  89.73 MB/s
BenchmarkHashing64SipHash-4             18197372        85.3 ns/op  93.77 MB/s
BenchmarkHashing64XXHash-4              16784458        68.6 ns/op 116.63 MB/s
BenchmarkHashing64XXHashpier-4          17751019        84.3 ns/op  94.90 MB/s
BenchmarkHashing64HighwayHash-4          8982220       141 ns/op  56.64 MB/s
BenchmarkHashing32XXHashvova-4          18115452        65.8 ns/op 121.56 MB/s
BenchmarkHashing32XXHashpier-4          20853364        63.9 ns/op 125.20 MB/s
BenchmarkHashing32XXHash-4              13377956        98.3 ns/op  81.40 MB/s
BenchmarkHashing16XXHash-4              18447655        98.3 ns/op  81.36 MB/s
BenchmarkHashing8XXHash-4               18637072        68.7 ns/op 116.47 MB/s
BenchmarkValueUnsafePointer-4           53164192        22.3 ns/op
BenchmarkValueInterface-4               23458231        51.0 ns/op
BenchmarkReflect-4                       2154338       555 ns/op
BenchmarkCast-4                         18145458        66.1 ns/op
BenchmarkParameterPassedByPointer-4     12744134        92.5 ns/op
BenchmarkParameterPassedByValue-4       12046428        93.0 ns/op
BenchmarkSliceReadRange-4               54937928        21.7 ns/op
BenchmarkSliceReadForward-4             38538789        31.0 ns/op
BenchmarkSliceReadBackwards-4           33178958        36.0 ns/op
BenchmarkSliceReadLastItemFirst-4       38209411        31.4 ns/op
BenchmarkSliceFillByIndex-4             55740060        21.5 ns/op
BenchmarkSliceFillByIndexMake-4         56151075        26.9 ns/op
BenchmarkSliceFillMakeAppend-4          50314112        23.9 ns/op
BenchmarkSliceFillAppendNoMake-4         3114499       601 ns/op
BenchmarkSliceFillSmallMakeAppend-4      2443990       943 ns/op
BenchmarkFillLinkedListPushBack-4         619824      3911 ns/op
BenchmarkFillLinkedListPushFront-4        692575      2082 ns/op
BenchmarkSyncRWMutex-4                  11111484       109 ns/op
BenchmarkSyncRWAtomic-4                 10568516       113 ns/op
BenchmarkSyncRWAtomicGosched-4          13135485        91.8 ns/op
PASS
ok  github.com/cornelk/go-benchmark327.366s
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;mac intel i7 2019 16寸&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;// mac intel i7 2019 16寸

 go test -bench=. -cpu=4
goos: darwin
goarch: amd64
pkg: github.com/cornelk/go-benchmark
BenchmarkAtomicInt32-4                    309592      3785 ns/op
BenchmarkAtomicInt64-4                    310130      3941 ns/op
BenchmarkAtomicUintptr-4                  300513      3910 ns/op
BenchmarkDefer-4                         3523532       328 ns/op
BenchmarkDeferNo-4                      12503139        91.2 ns/op
BenchmarkGoroutineNew-4                    10000   1820902 ns/op
BenchmarkGoroutineChan1RteCPU-4            10000    334300 ns/op
BenchmarkGoroutineChan10RteCPU-4           10000    220070 ns/op
BenchmarkGoroutineChanCPURteCPU-4          10000    204412 ns/op
BenchmarkGoroutineChan100RteCPU-4          10000    170625 ns/op
BenchmarkGoroutineChan10000RteCPU-4        10000    175718 ns/op
BenchmarkGoroutineChan10Rte10-4            10000    213040 ns/op
BenchmarkGoroutineChan100Rte100-4          10000    241891 ns/op
BenchmarkGoroutineChan10000Rte10000-4        100  19974006 ns/op
BenchmarkHashing64MD5-4                  7532625       189 ns/op  42.33 MB/s
BenchmarkHashing64SHA1-4                 5739030       186 ns/op  43.08 MB/s
BenchmarkHashing64SHA256-4               5050978       242 ns/op  33.01 MB/s
BenchmarkHashing64SHA3B224-4             1565026       901 ns/op   8.88 MB/s
BenchmarkHashing64SHA3B256-4             1690936       765 ns/op  10.45 MB/s
BenchmarkHashing64RIPEMD160-4            2395820       499 ns/op  16.02 MB/s
BenchmarkHashing64Blake2B-4              3472456       341 ns/op  23.49 MB/s
BenchmarkHashing64Blake2BSimd-4          3831225       340 ns/op  23.54 MB/s
BenchmarkHashing64Murmur3-4             18620680        64.3 ns/op 124.35 MB/s
BenchmarkHashing64Murmur3Twmb-4         19444350        63.5 ns/op 125.97 MB/s
BenchmarkHashing64SipHash-4             21155768        56.0 ns/op 142.77 MB/s
BenchmarkHashing64XXHash-4              31849977        51.3 ns/op 155.94 MB/s
BenchmarkHashing64XXHashpier-4          28207137        44.9 ns/op 178.29 MB/s
BenchmarkHashing64HighwayHash-4         13295876        92.0 ns/op  86.95 MB/s
BenchmarkHashing32XXHashvova-4          33265984        35.6 ns/op 224.68 MB/s
BenchmarkHashing32XXHashpier-4          31837797        37.0 ns/op 216.20 MB/s
BenchmarkHashing32XXHash-4              21471313        56.1 ns/op 142.53 MB/s
BenchmarkHashing16XXHash-4              21619030        55.0 ns/op 145.49 MB/s
BenchmarkHashing8XXHash-4               31882546        36.8 ns/op 217.49 MB/s
BenchmarkValueUnsafePointer-4           68717324        17.0 ns/op
BenchmarkValueInterface-4               30155677        38.9 ns/op
BenchmarkReflect-4                       7165081       165 ns/op
BenchmarkCast-4                         18640602        62.4 ns/op
BenchmarkParameterPassedByPointer-4     16345183        76.5 ns/op
BenchmarkParameterPassedByValue-4       10353224       120 ns/op
BenchmarkSliceReadRange-4               59617837        19.7 ns/op
BenchmarkSliceReadForward-4             18860553        61.5 ns/op
BenchmarkSliceReadBackwards-4           18713661        62.0 ns/op
BenchmarkSliceReadLastItemFirst-4       47315362        25.2 ns/op
BenchmarkSliceFillByIndex-4             72714333        16.3 ns/op
BenchmarkSliceFillByIndexMake-4         35459602        31.7 ns/op
BenchmarkSliceFillMakeAppend-4          41651622        28.7 ns/op
BenchmarkSliceFillAppendNoMake-4         3953661       671 ns/op
BenchmarkSliceFillSmallMakeAppend-4      2419346       430 ns/op
BenchmarkFillLinkedListPushBack-4         498951      2398 ns/op
BenchmarkFillLinkedListPushFront-4        503970      2394 ns/op
BenchmarkSyncRWMutex-4                  19353127        61.8 ns/op
BenchmarkSyncRWAtomic-4                  4075513       303 ns/op
BenchmarkSyncRWAtomicGosched-4          18012901        68.9 ns/op
PASS
ok  github.com/cornelk/go-benchmark375.283s&lt;/code&gt;&lt;/pre&gt;



&lt;p class=&quot;has-text-color has-vivid-green-cyan-color&quot;&gt;总结&lt;/p&gt;



&lt;p&gt;Mac M1各方面还真是可以，性能压测数据也相对可观，但还是建议够买需求的朋友再稳稳。毕竟对于程序员来说，Mac是生产工具，而不是让你烦躁的发动机。要么等开发工具完美适配，要么等M2出世。&lt;/p&gt;



&lt;p&gt;M1的发热控制的不错，在压测的几十分钟内，M1的发热要比16寸低一些。另外，长时间跑cpu密集运算，M1还是会有些降频的。&lt;/p&gt;
        &lt;div&gt;&amp;#13;
            &lt;hr/&gt;&amp;#13;
            &lt;span&gt;大家觉得文章对你有些作用！&amp;#13;
                如果想&lt;span&gt;赏钱&lt;/span&gt;，可以用微信扫描下面的二维码，感谢!&lt;br/&gt;另外再次标注博客原地址  &lt;a href=&quot;http://xiaorui.cc&quot; target=&quot;_blank&quot;&gt;xiaorui.cc&lt;/a&gt;&lt;br/&gt;&lt;span/&gt;&amp;#13;
&amp;#13;
            &lt;/span&gt;&amp;#13;
                &lt;center&gt;&lt;img src=&quot;http://static.xiaorui.cc/static/weixin_new.jpg&quot;/&gt;&lt;/center&gt;&amp;#13;
        &lt;/div&gt;&amp;#13;
&lt;/div&gt;&amp;#13;
&amp;#13;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9944d0bfa57fb553ea6a64918ebd8c04</guid>
<title>Go 并发编程（一）：goroutine</title>
<link>https://toutiao.io/k/5l5bvv8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;markdown-body&quot; id=&quot;post-body&quot;&gt;&lt;blockquote&gt;&lt;p&gt;本系列为极客时间 Go 进阶训练营笔记，同步直播更新，预计一周更新 1 ~ 2 篇文章，到 202103 月更新完成&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;接下来会一共会有 4 - 6 篇文章讲解 Go 并发编程，并发编程本身是一个挺大的话题，在第四周的两节课，毛老师花了将近 7 个小时讲解这些内容，我也结合自己的一些微不足道的经验，再加上一些大神们的文章，整理出了这一部分的笔记。&lt;br/&gt;当然这里更多的是抛砖引玉的作用，更多的还是我们自己要有相关的意识避免踩坑，在各个坑的边缘反复横跳，可能我们有缘会在同一个坑中发现，咦，原来你也在这里 😄&lt;/p&gt;&lt;h2 id=&quot;请对你创建的-goroutine-负责&quot;&gt;&lt;a href=&quot;#请对你创建的-goroutine-负责&quot; class=&quot;headerlink&quot; title=&quot;请对你创建的 goroutine 负责&quot;/&gt;请对你创建的 goroutine 负责&lt;/h2&gt;&lt;h3 id=&quot;不要创建一个你不知道何时退出的-goroutine&quot;&gt;&lt;a href=&quot;#不要创建一个你不知道何时退出的-goroutine&quot; class=&quot;headerlink&quot; title=&quot;不要创建一个你不知道何时退出的 goroutine&quot;/&gt;不要创建一个你不知道何时退出的 goroutine&lt;/h3&gt;&lt;p&gt;请阅读下面这段代码，看看有什么问题？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;为什么先从下面这段代码出发，是因为在之前的经验里面我们写了大量类似的代码，之前没有意识到这个问题，并且还因为这种代码出现过短暂的事故&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Week03/blog/01/01.go&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (
&lt;span class=&quot;hljs-string&quot;&gt;&quot;log&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
_ &lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;
)

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 这里面有一些初始化的操作&lt;/span&gt;
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
setup()

&lt;span class=&quot;hljs-comment&quot;&gt;// 主服务&lt;/span&gt;
server()

&lt;span class=&quot;hljs-comment&quot;&gt;// for debug&lt;/span&gt;
pprof()

&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; {}
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
mux := http.NewServeMux()
mux.HandleFunc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {
w.Write([]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pong&quot;&lt;/span&gt;))
})

&lt;span class=&quot;hljs-comment&quot;&gt;// 主服务&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err := http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:8080&quot;&lt;/span&gt;, mux); err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
log.Panicf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http server err: %+v&quot;&lt;/span&gt;, err)
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
}
}()
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;pprof&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 辅助服务，监听了其他端口，这里是 pprof 服务，用于 debug&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:8081&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;灵魂拷问来了，请问：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果 &lt;code&gt;server&lt;/code&gt; 是在其他包里面，如果没有特殊说明，你知道这是一个异步调用么？&lt;/li&gt;&lt;li&gt;&lt;code&gt;main&lt;/code&gt; 函数当中最后在哪里空转干什么？会不会存在浪费？&lt;/li&gt;&lt;li&gt;如果线上出现事故，debug 服务已经退出，你想要 debug 这时你是否很茫然？&lt;/li&gt;&lt;li&gt;如果某一天服务突然重启，你却找不到事故日志，你是否能想起这个 &lt;code&gt;8081&lt;/code&gt; 端口的服务？&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;请将选择权留给对方，不要帮别人做选择&quot;&gt;&lt;a href=&quot;#请将选择权留给对方，不要帮别人做选择&quot; class=&quot;headerlink&quot; title=&quot;请将选择权留给对方，不要帮别人做选择&quot;/&gt;请将选择权留给对方，不要帮别人做选择&lt;/h4&gt;&lt;p&gt;请把是否并发的选择权交给你的调用者，而不是自己就直接悄悄的用上了 goroutine&lt;br/&gt;下面这次改动将两个函数是否并发操作的选择权留给了 main 函数&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (
&lt;span class=&quot;hljs-string&quot;&gt;&quot;log&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
_ &lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;
)

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 这里面有一些初始化的操作&lt;/span&gt;
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
setup()

&lt;span class=&quot;hljs-comment&quot;&gt;// for debug&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; pprof()

&lt;span class=&quot;hljs-comment&quot;&gt;// 主服务&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; server()

&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; {}
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
mux := http.NewServeMux()
mux.HandleFunc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {
w.Write([]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pong&quot;&lt;/span&gt;))
})

&lt;span class=&quot;hljs-comment&quot;&gt;// 主服务&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err := http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:8080&quot;&lt;/span&gt;, mux); err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
log.Panicf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http server err: %+v&quot;&lt;/span&gt;, err)
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
}
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;pprof&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 辅助服务，监听了其他端口，这里是 pprof 服务，用于 debug&lt;/span&gt;
http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:8081&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;请不要作为一个旁观者&quot;&gt;&lt;a href=&quot;#请不要作为一个旁观者&quot; class=&quot;headerlink&quot; title=&quot;请不要作为一个旁观者&quot;/&gt;请不要作为一个旁观者&lt;/h4&gt;&lt;p&gt;一般情况下，不要让主进程成为一个旁观者，明明可以干活，但是最后使用了一个 &lt;code&gt;select&lt;/code&gt; 在那儿空跑&lt;br/&gt;感谢上一步将是否异步的选择权交给了我( &lt;code&gt;main&lt;/code&gt; )，在旁边看着也怪尴尬的&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (
&lt;span class=&quot;hljs-string&quot;&gt;&quot;log&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
_ &lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;
)

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 这里面有一些初始化的操作&lt;/span&gt;
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
setup()

&lt;span class=&quot;hljs-comment&quot;&gt;// for debug&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; pprof()

&lt;span class=&quot;hljs-comment&quot;&gt;// 主服务&lt;/span&gt;
server()
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
mux := http.NewServeMux()
mux.HandleFunc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {
w.Write([]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pong&quot;&lt;/span&gt;))
})

&lt;span class=&quot;hljs-comment&quot;&gt;// 主服务&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err := http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:8080&quot;&lt;/span&gt;, mux); err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
log.Panicf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http server err: %+v&quot;&lt;/span&gt;, err)
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
}
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;pprof&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 辅助服务，监听了其他端口，这里是 pprof 服务，用于 debug&lt;/span&gt;
http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:8081&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;不要创建一个你永远不知道什么时候会退出的-goroutine&quot;&gt;&lt;a href=&quot;#不要创建一个你永远不知道什么时候会退出的-goroutine&quot; class=&quot;headerlink&quot; title=&quot;不要创建一个你永远不知道什么时候会退出的 goroutine&quot;/&gt;不要创建一个你永远不知道什么时候会退出的 goroutine&lt;/h4&gt;&lt;p&gt;我们再做一些改造，使用 &lt;code&gt;channel&lt;/code&gt; 来控制，解释都写在代码注释里面了&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (
&lt;span class=&quot;hljs-string&quot;&gt;&quot;context&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;&quot;log&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
_ &lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;&quot;time&quot;&lt;/span&gt;
)

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 这里面有一些初始化的操作&lt;/span&gt;
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
setup()

&lt;span class=&quot;hljs-comment&quot;&gt;// 用于监听服务退出&lt;/span&gt;
done := &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; error, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)
&lt;span class=&quot;hljs-comment&quot;&gt;// 用于控制服务退出，传入同一个 stop，做到只要有一个服务退出了那么另外一个服务也会随之退出&lt;/span&gt;
stop := &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{}, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;hljs-comment&quot;&gt;// for debug&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
done &amp;lt;- pprof(stop)
}()

&lt;span class=&quot;hljs-comment&quot;&gt;// 主服务&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
done &amp;lt;- app(stop)
}()

&lt;span class=&quot;hljs-comment&quot;&gt;// stoped 用于判断当前 stop 的状态&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; stoped &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// 这里循环读取 done 这个 channel&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// 只要有一个退出了，我们就关闭 stop channel&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;cap&lt;/span&gt;(done); i++ {
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err := &amp;lt;-done; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
log.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;server exit err: %+v&quot;&lt;/span&gt;, err)
}

&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; !stoped {
stoped = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;(stop)
}
}
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(stop &amp;lt;-&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
mux := http.NewServeMux()
mux.HandleFunc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {
w.Write([]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pong&quot;&lt;/span&gt;))
})

&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; server(mux, &lt;span class=&quot;hljs-string&quot;&gt;&quot;:8080&quot;&lt;/span&gt;, stop)
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;pprof&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(stop &amp;lt;-&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 注意这里主要是为了模拟服务意外退出，用于验证一个服务退出，其他服务同时退出的场景&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
server(http.DefaultServeMux, &lt;span class=&quot;hljs-string&quot;&gt;&quot;:8081&quot;&lt;/span&gt;, stop)
}()

time.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; * time.Second)
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fmt.Errorf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mock pprof exit&quot;&lt;/span&gt;)
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 启动一个服务&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(handler http.Handler, addr &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, stop &amp;lt;-&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
s := http.Server{
Handler: handler,
Addr:    addr,
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 这个 goroutine 我们可以控制退出，因为只要 stop 这个 channel close 或者是写入数据，这里就会退出&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// 同时因为调用了 s.Shutdown 调用之后，http 这个函数启动的 http server 也会优雅退出&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&amp;lt;-stop
log.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;server will exiting, addr: %s&quot;&lt;/span&gt;, addr)
s.Shutdown(context.Background())
}()

&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.ListenAndServe()
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们看一下返回结果，这个代码启动 5s 之后就会退出程序&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;❯ &lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; run ./&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;_goroutine/&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;
&lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; server exit err: mock pprof exit
&lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; server will exiting, addr: :&lt;span class=&quot;hljs-number&quot;&gt;8081&lt;/span&gt;
&lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; server will exiting, addr: :&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;
&lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; server exit err: http: Server closed&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;思考题&quot;&gt;&lt;a href=&quot;#思考题&quot; class=&quot;headerlink&quot; title=&quot;思考题&quot;/&gt;思考题&lt;/h4&gt;&lt;p&gt;虽然我们已经经过了三轮优化，但是这里还是有一些需要注意的地方，可以思考一下怎么做&lt;/p&gt;&lt;ul&gt;&lt;li&gt;虽然我们调用了 &lt;code&gt;Shutdown&lt;/code&gt; 方法，但是我们其实并没有实现优雅退出，相信聪明的你可以完成这项工作。可以参考上一篇笔记：&lt;a href=&quot;https://lailin.xyz/post/go-training-03.html&quot;&gt;Go 错误处理最佳实践&lt;/a&gt;&lt;/li&gt;&lt;li&gt;在 &lt;code&gt;server&lt;/code&gt; 方法中我们并没有处理 &lt;code&gt;panic&lt;/code&gt; 的逻辑，这里需要处理么？如果需要那该如何处理呢？&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;不要创建一个永远都无法退出的-goroutine-goroutine-泄漏&quot;&gt;&lt;a href=&quot;#不要创建一个永远都无法退出的-goroutine-goroutine-泄漏&quot; class=&quot;headerlink&quot; title=&quot;不要创建一个永远都无法退出的 goroutine [goroutine 泄漏]&quot;/&gt;不要创建一个永远都无法退出的 goroutine [goroutine 泄漏]&lt;/h3&gt;&lt;p&gt;再来看下面一个例子，这也是常常会用到的操作&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;leak&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {
ch := &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
fmt.Println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;异步任务做一些操作&quot;&lt;/span&gt;)
&amp;lt;-ch
}()

w.Write([]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;will leak&quot;&lt;/span&gt;))
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复用一下上面的 server 代码，我们经常会写出这种类似的代码&lt;/p&gt;&lt;ul&gt;&lt;li&gt;http 请求来了，我们启动一个 goroutine 去做一些耗时一点的工作&lt;/li&gt;&lt;li&gt;然后返回了&lt;/li&gt;&lt;li&gt;然后之前创建的那个 &lt;strong&gt;goroutine 阻塞&lt;/strong&gt;了&lt;/li&gt;&lt;li&gt;然后就泄漏了&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;绝大部分的 goroutine 泄漏都是因为 goroutine 当中因为各种原因阻塞了，我们在外面也没有控制它退出的方式，所以就泄漏了，具体导致阻塞的常见原因会在接下来的 sync 包、channel 中讲到，这里就不过多赘述了&lt;br/&gt;接下来我们验证一下是不是真的泄漏了&lt;br/&gt;启动之后我们访问一下: &lt;a href=&quot;http://localhost:8081/debug/pprof/goroutine?debug=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:8081/debug/pprof/goroutine?debug=1&lt;/a&gt; 查看当前的 goroutine 个数为 7&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;goroutine profile: total &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; @ &lt;span class=&quot;hljs-number&quot;&gt;0x43b945&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x40814f&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x407d8b&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x770998&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x470381&lt;/span&gt;
#&lt;span class=&quot;hljs-number&quot;&gt;0x770997&lt;/span&gt;main.server.func1+&lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt;/home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week03/blog/&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;_goroutine/&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;05.&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;71&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我们再访问几次 &lt;a href=&quot;http://localhost:8080/leak&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:8080/leak&lt;/a&gt; 可以发现 goroutine 增加到了 15 个，而且一直不会下降&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;goroutine profile: total &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; @ &lt;span class=&quot;hljs-number&quot;&gt;0x43b945&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x40814f&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x407d8b&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x770ad0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x470381&lt;/span&gt;
#&lt;span class=&quot;hljs-number&quot;&gt;0x770acf&lt;/span&gt;main.leak.func1+&lt;span class=&quot;hljs-number&quot;&gt;0x8f&lt;/span&gt;/home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week03/blog/&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;_goroutine/&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;05.&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;83&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;确保创建出的-goroutine-的工作已经完成&quot;&gt;&lt;a href=&quot;#确保创建出的-goroutine-的工作已经完成&quot; class=&quot;headerlink&quot; title=&quot;确保创建出的 goroutine 的工作已经完成&quot;/&gt;确保创建出的 goroutine 的工作已经完成&lt;/h3&gt;&lt;p&gt;这个其实就是优雅退出的问题，我们可能启动了很多的 goroutine 去处理一些问题，但是服务退出的时候我们并没有考虑到就直接退出了。例如退出前日志没有 flush 到磁盘，我们的请求还没完全关闭，异步 worker 中还有 job 在执行等等。&lt;br/&gt;我们也来看一个例子，假设现在有一个埋点服务，每次请求我们都会上报一些信息到埋点服务上&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Reporter 埋点服务上报&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; Reporter &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {
}

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reporter Reporter

&lt;span class=&quot;hljs-comment&quot;&gt;// 模拟耗时&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(r Reporter)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(data &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {
time.Sleep(time.Second)
fmt.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;report: %s\n&quot;&lt;/span&gt;, data)
}

mux.HandleFunc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 在请求中异步调用&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; reporter.report(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ping pong&quot;&lt;/span&gt;)
    fmt.Println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ping&quot;&lt;/span&gt;)
    w.Write([]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pong&quot;&lt;/span&gt;))
})&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我在发送了一次请求之后直接退出了，异步上报的逻辑根本没执行上&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;❯ &lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; run ./&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;_goroutine/&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;
ping
^Csignal: interrupt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个有两种改法，一种是给 reporter 加上 shutdown 方法，类似 http 的 shutdown，等待所有的异步上报完成之后，我们再退出，另外一种是我们直接使用 一些 worker 来执行，在当然这个 worker 也要实现类似 shutdown 的方法。一般推荐后一种，因为这样可以避免请求量比较大时，创建大量 goroutine，当然如果请求量比较小，不会很大，用第一种也是可以的。&lt;br/&gt;我们给一个第二种的简单实现，第一种可以参考 &lt;a href=&quot;https://www.ardanlabs.com/blog/2019/04/concurrency-trap-2-incomplete-work.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ardanlabs.com/blog/2019/04/concurrency-trap-2-incomplete-work.html&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Reporter 埋点服务上报&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; Reporter &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {
worker   &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;
messages &lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;
wg       sync.WaitGroup
closed   &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;
}

&lt;span class=&quot;hljs-comment&quot;&gt;// NewReporter NewReporter&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;NewReporter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(worker, buffer &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;Reporter&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;Reporter{worker: worker, messages: &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, buffer)}
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(r *Reporter)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(stop &amp;lt;-&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{})&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&amp;lt;-stop
r.shutdown()
}()

&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; r.worker; i++ {
r.wg.Add(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; msg := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; r.messages {
time.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; * time.Second)
fmt.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;report: %s\n&quot;&lt;/span&gt;, msg)
}
r.wg.Done()
}()
}
r.wg.Wait()
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(r *Reporter)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
r.closed = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// 注意，这个一定要在主服务结束之后再执行，避免关闭 channel 还有其他地方在啊写入&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;(r.messages)
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 模拟耗时&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(r *Reporter)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(data &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; r.closed {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
}
r.messages &amp;lt;- data
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在 main 函数中我们加上&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
    reporter.run(stop)
    done &amp;lt;- &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;
}()&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;/&gt;总结&lt;/h2&gt;&lt;p&gt;总结一下这一部分讲到的几个要点，这也是我们&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;请将是否异步调用的选择权交给调用者&lt;/strong&gt;，不然很有可能大家并不知道你在这个函数里面使用了 goroutine&lt;/li&gt;&lt;li&gt;如果你要启动一个 goroutine 请对它负责&lt;ol&gt;&lt;li&gt;&lt;strong&gt;永远不要启动一个你无法控制它退出，或者你无法知道它何时推出的 goroutine&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;还有上一篇提到的，启动 goroutine 时请加上 panic recovery 机制，避免服务直接不可用&lt;/li&gt;&lt;li&gt;造成 goroutine 泄漏的主要原因就是 goroutine 中造成了阻塞，并且没有外部手段控制它退出&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;尽量避免在请求中直接启动 goroutine 来处理问题&lt;/strong&gt;，而应该通过启动 worker 来进行消费，这样可以避免由于请求量过大，而导致大量创建 goroutine 从而导致 oom，当然如果请求量本身非常小，那当我没说&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;/&gt;参考文献&lt;/h2&gt;&lt;h2 id=&quot;关注我获取更新&quot;&gt;&lt;a href=&quot;#关注我获取更新&quot; class=&quot;headerlink&quot; title=&quot;关注我获取更新&quot;/&gt;关注我获取更新&lt;/h2&gt;&lt;p&gt;看到这里了还不关注点赞走一波&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>