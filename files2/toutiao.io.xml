<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>4666a148faab9d5d521d525ca086497f</guid>
<title>再见 Go 面试官：GMP 模型，为什么要有 P？</title>
<link>https://toutiao.io/k/2fe4jjq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近金三银四，是面试的季节。在我的 Go 读者交流群里出现了许多小伙伴在讨论自己面试过程中所遇到的一些 Go 面试题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天的主角，是 Go 面试的万能题 GMP 模型的延伸题（疑问），那就是 ”&lt;strong&gt;GMP 模型，为什么要有 P&lt;/strong&gt;？“&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进一步推敲问题的背后，其实这个面试题本质是想问：”&lt;strong&gt;GMP 模型，为什么不是 G 和 M 直接绑定就完了，还要搞多一个 P 出来，那么麻烦，为的是什么，是要解决什么问题吗&lt;/strong&gt;？“&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章煎鱼就带你一同探索，GM、GMP 模型的变迁是因为什么原因。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;GM 模型&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Go1.1 之前 Go 的调度模型其实就是 GM 模型，也就是没有 P。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天带大家一起回顾过去的设计。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;解密 Go1.0 源码&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们了解一个东西的办法之一就是看源码，和煎鱼一起看看 Go1.0.1 的调度器源码的核心关键步骤：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;br/&gt;&lt;span&gt;schedule&lt;/span&gt;&lt;span&gt;(G *gp)&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt; ...&lt;br/&gt; schedlock();&lt;br/&gt; &lt;span&gt;if&lt;/span&gt;(gp != nil) {&lt;br/&gt;  ...&lt;br/&gt;  &lt;span&gt;switch&lt;/span&gt;(gp-&amp;gt;status){&lt;br/&gt;  &lt;span&gt;case&lt;/span&gt; Grunnable:&lt;br/&gt;  &lt;span&gt;case&lt;/span&gt; Gdead:&lt;br/&gt;   &lt;span&gt;// Shouldn&#x27;t have been running!&lt;/span&gt;&lt;br/&gt;   runtime·&lt;span&gt;throw&lt;/span&gt;(&lt;span&gt;&quot;bad gp-&amp;gt;status in sched&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;case&lt;/span&gt; Grunning:&lt;br/&gt;   gp-&amp;gt;status = Grunnable;&lt;br/&gt;   gput(gp);&lt;br/&gt;   &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt; gp = nextgandunlock();&lt;br/&gt; gp-&amp;gt;readyonstop = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt; gp-&amp;gt;status = Grunning;&lt;br/&gt; m-&amp;gt;curg = gp;&lt;br/&gt; gp-&amp;gt;m = m;&lt;br/&gt; ...&lt;br/&gt; runtime·gogo(&amp;amp;gp-&amp;gt;sched, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;调用 &lt;code&gt;schedlock&lt;/code&gt; 方法来获取全局锁。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;获取全局锁成功后，将当前 Goroutine 状态从 Running（正在被调度） 状态修改为 Runnable（可以被调度）状态。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;调用 &lt;code&gt;gput&lt;/code&gt; 方法来保存当前 Goroutine 的运行状态等信息，以便于后续的使用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;调用 &lt;code&gt;nextgandunlock&lt;/code&gt; 方法来寻找下一个可运行 Goroutine，并且释放全局锁给其他调度使用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;获取到下一个待运行的 Goroutine 后，将其运行状态修改为 Running。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;调用 &lt;code&gt;runtime·gogo&lt;/code&gt; 方法，将刚刚所获取到的下一个待执行的 Goroutine 运行起来，进入下一轮调度。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;思考 GM 模型&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过对 Go1.0.1 的调度器源码剖析，我们可以发现一个比较有趣的点。那就是调度器本身（schedule 方法），在正常流程下，是不会返回的，也就是不会结束主流程。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6170940170940171&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4hia2z5uVFmZ7SQvFnicib7HSQ8YsJibALnx8pMMnYzkqjegtsE7LTwD5XXYt4F4gia8hfackwaib1F9cjw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1170&quot;/&gt;&lt;figcaption&gt;G-M模型简图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他会不断地运行调度流程，GoroutineA 完成了，就开始寻找 GoroutineB，寻找到 B 了，就把已经完成的 A 的调度权交给 B，让 GoroutineB 开始被调度，也就是运行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然了，也有被正在阻塞（Blocked）的 G。假设 G 正在做一些系统、网络调用，那么就会导致 G 停滞。这时候 M（系统线程）就会被会重新放内核队列中，等待新的一轮唤醒。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;GM 模型的缺点&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这么表面的看起来，GM 模型似乎牢不可破，毫无缺陷。但为什么要改呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 2012 年时 Dmitry Vyukov 发表了文章《Scalable Go Scheduler Design Doc》，目前也依然是各大研究 Go 调度器文章的主要对象，其在文章内讲述了整体的原因和考虑，下述内容将引用该文章。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当前（代指 Go1.0 的 GM 模型）的 Goroutine 调度器限制了用 Go 编写的并发程序的可扩展性，尤其是高吞吐量服务器和并行计算程序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现有如下的问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;存在单一的全局 mutex（Sched.Lock）和集中状态管理：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;mutex 需要保护所有与 goroutine 相关的操作（创建、完成、重排等），导致锁竞争严重。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;Goroutine 传递的问题：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;goroutine（G）交接（G.nextg）：工作者线程（M&#x27;s）之间会经常交接可运行的 goroutine。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;上述可能会导致延迟增加和额外的开销。每个 M 必须能够执行任何可运行的 G，特别是刚刚创建 G 的 M。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;每个 M 都需要做内存缓存（M.mcache）：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;会导致资源消耗过大（每个 mcache 可以吸纳到 2M 的内存缓存和其他缓存），数据局部性差。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;频繁的线程阻塞/解阻塞：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在存在 syscalls 的情况下，线程经常被阻塞和解阻塞。这增加了很多额外的性能开销。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;GMP 模型&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决 GM 模型的以上诸多问题，在 Go1.1 时，Dmitry Vyukov 在 GM 模型的基础上，新增了一个 P（Processor）组件。并且实现了 Work Stealing 算法来解决一些新产生的问题。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.64453125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4hia2z5uVFmZ7SQvFnicib7HSQ4Q50Kia5k7ibkwtsLV5DudHq5aicHn5MLs2t5cW4CuWbRwjUFWl9J9aqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GMP 模型，在上一篇文章《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247487250&amp;amp;idx=1&amp;amp;sn=3004324a9d2ba99233c4af48843dba64&amp;amp;chksm=f9041a4fce7393597151804174e0d9ac1889f1fff7ac46b1c64de4b4c477e9f1b596eda21d3e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Go 群友提问：Goroutine 数量控制在多少合适，会影响 GC 和调度？&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Go 群友提问：Goroutine 数量控制在多少合适，会影响 GC 和调度？&lt;/a&gt;》中已经讲解过了。&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxMDI4MDc1NA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4iac2xQZIq5icSiaTepuae8zLIUMiaxibbUM8ic735ewo6e89GRtjGbUBlgNYibwCjAicglQcvz6dCQ6yTKOw/0?wx_fmt=png&quot; data-nickname=&quot;脑子进煎鱼了&quot; data-alias=&quot;eddycjy&quot; data-signature=&quot;分享计算机基础、Go 语言、微服务架构和系统设计；著有图书《Go 语言编程之旅》。&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;觉得不错的小伙伴可以关注一下，这里就不再复述了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;带来什么改变&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加了 P 之后会带来什么改变呢？我们再更显式的讲一下。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;每个 P 有自己的本地队列，大幅度的减轻了对全局队列的直接依赖，所带来的效果就是锁竞争的减少。而 GM 模型的性能开销大头就是锁竞争。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;每个 P 相对的平衡上，在 GMP 模型中也实现了 Work Stealing 算法，如果 P 的本地队列为空，则会从全局队列或其他 P 的本地队列中窃取可运行的 G 来运行，减少空转，提高了资源利用率。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;为什么要有 P&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候就有小伙伴会疑惑了，如果是想实现本地队列、Work Stealing 算法，那&lt;strong&gt;为什么不直接在 M 上加呢，M 也照样可以实现类似的功能&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么又再加多一个 P 组件？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结合 M（系统线程） 的定位来看，若这么做，有以下问题。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来讲，M 的数量都会多于 P。像在 Go 中，M 的数量最大限制是 10000，P 的默认数量的 CPU 核数。另外由于 M 的属性，也就是如果存在系统阻塞调用，阻塞了 M，又不够用的情况下，M 会不断增加。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;M 不断增加的话，如果本地队列挂载在 M 上，那就意味着本地队列也会随之增加。这显然是不合理的，因为本地队列的管理会变得复杂，且 Work Stealing 性能会大幅度下降。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;M 被系统调用阻塞后，我们是期望把他既有未执行的任务分配给其他继续运行的，而不是一阻塞就导致全部停止。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此使用 M 是不合理的，那么引入新的组件 P，把本地队列关联到 P 上，就能很好的解决这个问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天这篇文章结合了整个 Go 语言调度器的一些历史情况、原因分析以及解决方案说明。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;”GMP 模型，为什么要有 P“ 这个问题就像是一道系统设计了解，因为现在很多人为了应对面试，会硬背 GMP 模型，或者是泡面式过了一遍。而理解其中真正背后的原因，才是我们要去学的要去理解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;知其然知其所以然，才可破局。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;关注煎鱼公众号，吸取精华：&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxMDI4MDc1NA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4iac2xQZIq5icSiaTepuae8zLIUMiaxibbUM8ic735ewo6e89GRtjGbUBlgNYibwCjAicglQcvz6dCQ6yTKOw/0?wx_fmt=png&quot; data-nickname=&quot;脑子进煎鱼了&quot; data-alias=&quot;eddycjy&quot; data-signature=&quot;分享计算机基础、Go 语言、微服务架构和系统设计；著有图书《Go 语言编程之旅》。&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;👆 点击关注煎鱼，在知识的海洋里遨游&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习资料分享，关注公众号回复指令：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;回复【000】，下载 LeetCode 题解大全。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;回复【001】，下载 Go 进阶图书 Mastering Go。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;来一个反馈！&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ad35a8d5c3e8c9a0b454434e71d3b24f</guid>
<title>Elasticsearch 警惕使用 wildcard 检索！然后呢？</title>
<link>https://toutiao.io/k/eq90xv4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、wildcard 检索定义&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;wildcard 检索可以定义为：支持通配符的模糊检索。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;类似 Mysql 中的 like 模糊匹配，如下所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.17420066152149946&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mjl8GCpsL9afReB8mS8z8nDXLsQOeRib7vFz8cjHv0NwLBFlnWS9iceichpozyY2sjONr2iaBkTiaeBwpgyiabUAbENw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;907&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Elasticsearch 中的 wildcard 使用方式如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4918032786885246&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9afReB8mS8z8nDXLsQOeRib7UZ2aQGjbvDQOficPibudF7So3cibIiafvvezhjicKRIR6Kmra06tsrZE9icA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;427&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通配符运算符是匹配一个或多个字符的占位符。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通配符支持两种：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;? : 支持模糊匹配单个字符。举例：Ma?s 仅能匹配：Mars, Mass, 和 Maps。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;: 支持模糊匹配零个或者多个字符。举例：Ma*s 能匹配：Mars, Matches 和 Massachusetts等。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、全局视野——wildcard 检索所处位置&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;全局认知非常重要，检索核心类型大致（非严谨、精确）分为：精准匹配检索（Term-level queries）和基于分词的全文匹配检索（Full text queries）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;全文匹配检索细分如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.815686274509804&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9afReB8mS8z8nDXLsQOeRib7rALAExKYpgeiaau5Qz6DibmibKoBGicv7r0JibhiaqkZ8tMmYKwrgdtCAwCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;255&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;精准匹配检索细分如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.9656652360515021&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9afReB8mS8z8nDXLsQOeRib7yw1gnqaRKxLK67ib5WqIs8zCfAia4x2JSBjEZ0k5RscyLibvgwe9v4OuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;233&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;也就是：wildcard 是和Term、Terms检索&lt;/span&gt;&lt;span&gt;平级&lt;/span&gt;&lt;span&gt;的检索。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、wildcard 检索适用场景&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;适用于：召回率要求高的业务场景。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;基于分词的全文检索，可能会导致明明存在，但是检索不到。可能的原因如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;举个例子一看就明白了：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前置说明：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;1、纯属举例，不涉及针对具体人。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;2、Ik 词典main.dic 非原生，做了互联网词库的扩展，但词库中依然没有“刘强东”三个字。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;3、如果你在本地测试结果和文章不一致，极大可能是词典不一样导致的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;PUT &lt;span&gt;test&lt;/span&gt;-004&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;mappings&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;properties&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;title&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;text&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;analyzer&quot;&lt;/span&gt;: &lt;span&gt;&quot;ik_max_word&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;fields&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;keyword&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;keyword&quot;&lt;/span&gt;&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;POST &lt;span&gt;test&lt;/span&gt;-004/_bulk&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:1}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;英文官网承认刘强东一度被捕的原因是涉嫌XX&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:2}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;别提了朋友哥哥刘强东窗事发了&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:3}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;刘强东施效颦，没想到竟然收获了流量&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:4}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;刘强东是谁？我不认识&quot;&lt;/span&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;POST &lt;span&gt;test&lt;/span&gt;-004/_search&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;query&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;match_phrase&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;title&quot;&lt;/span&gt;: &lt;span&gt;&quot;刘强东&quot;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;用的短语检索 match_phrase，搜索结果如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.3222222222222222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9afReB8mS8z8nDXLsQOeRib7e6xuicLNZDr3ZvEropkpmiaBwcEK97Y3TlrjSDSx8objg3swdicItOvOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;450&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;原因说明，analyzer API 能说明一切。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;POST &lt;span&gt;test&lt;/span&gt;-004/_analyze&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;text&quot;&lt;/span&gt;: [&lt;br/&gt;    &lt;span&gt;&quot;京东英文官网承认刘强东一度被捕的原因是涉嫌XX&quot;&lt;/span&gt;&lt;br/&gt;  ],&lt;br/&gt;  &lt;span&gt;&quot;analyzer&quot;&lt;/span&gt;: &lt;span&gt;&quot;ik_max_word&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;分词结果如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.2261640798226163&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9afReB8mS8z8nDXLsQOeRib75iaxQbfhicdJzDWu74fAYSq1nA6Zp6djvWBorSU7WF8sKJJ8V1q7UlYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;451&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;面对如上召回情况，部分不追求精准率只追求召回率的业务场景，可能会需要文档_id = 1、2、3、4 全部都要召回。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这时候，如果不改变分词的情况下，可能的解决方案之一就是：wildcard 检索实现。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;POST &lt;span&gt;test&lt;/span&gt;-004/_search&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;query&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;wildcard&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;title.keyword&quot;&lt;/span&gt;: &lt;span&gt;&quot;*刘强东*&quot;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如上的方式，文档1、2、3、4全部召回。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;相当于在原有DSL的基础上，只改动检索方式和字段名称就搞定了产品经理的提高召回率的需求。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;貌似，可以交差大吉了。实则，有非常大的隐患。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、wildcard 可能的风险&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;官方文档是这么说的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.08710801393728224&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mjl8GCpsL9afReB8mS8z8nDXLsQOeRib7thONyu6xR4LsJ7ibpgGDbguRpcKZh8iaO3zdic6JCEV0woRgh6Ngkx4Hg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;861&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;中文含义是：避免以*或？开头的模式。这会增加查找匹配项所需的迭代次数并降低搜索性能。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;wildcard 到底有多慢？如下示例可见一斑：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.42839036755386567&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9afReB8mS8z8nDXLsQOeRib77G0ibTVXxTRwicsv1RMWJfEOicAVKbAlu9RSKRqAAicxR1cut50Wkpejdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;789&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;wildcard 检索字段指定的字符数多了以后，会报错如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.34447900466562986&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9afReB8mS8z8nDXLsQOeRib7U5R4BymODhiaYUzbK1c5A6CxYNeZaZialDSrEibsEOQYiaQZjnd8JWgWMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1286&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 wood 大叔 2017年的文章中，曾经指出如下的核心点：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;用户输入的字符串长度没有做限制，导致首尾通配符中间可能是很长的一个字符串。后果就是对应的wildcard Query执行非常慢，非常消耗CPU。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了加速通配符和正则表达式的匹配速度，Lucene4.0开始会将输入的字符串模式构建成一个DFA (Deterministic Finite Automaton)，带有通配符的pattern构造出来的DFA可能会很复杂，开销很大。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;源码及细节推荐阅读：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://elasticsearch.cn/article/171&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://elasticsearch.cn/article/186&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5、wildcard 实战中的悲剧&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如下，采用原汁原味的技术群交流内容，更具有说服力。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;更能警示大家：慎用 Wildcard！&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.1 悲剧1：一味的满足产品经理的需求，wildcard 不考虑性能的乱用。&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;2.181547619047619&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9afReB8mS8z8nDXLsQOeRib7GIMzYpTic2v22FMqe9GLTUJZFMzuNRRVia5rczkdhzmXZf9sibCVGGrDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;336&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.2 悲剧2：wildcard 参数传了一篇文章进来，导致集群宕机！&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;2.6310344827586207&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9afReB8mS8z8nDXLsQOeRib7uibyf5J7VRq7KllAFicSZ5HvkaJficzpl96Zlic1rNufq5HIrrxxib2EiaUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;290&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.3 悲剧3：wildcard 搜索一百个汉字，导致CPU利用率 100%！&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意是：不同100个字组合，一直搜。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.41098901098901097&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9afReB8mS8z8nDXLsQOeRib7XBjvqWxicdS034QhGX1MfqhzRwwxtNP7jdQWVB1FmiblGHuv2hvvCnMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;455&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.4 悲剧4：客户现场演示，集群宕机！&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根因：bool 组合了近 100 组+ wildcard 不同关键词的检索。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6、wildcard 可能的替代方案&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在寻求解决方案的时候，我们要先问一下：为什么大家喜欢用 wildcard 实现模糊检索?&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;得到的答复往往是：&lt;span&gt;顺手&lt;/span&gt;，类似Mysql like 查询，短、平、快的达到了产品经理的要求，满足了项目需求。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但，这忽略了性能问题以及可能带来的灾难后果。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以，解决方案应该从根源上入手，以寻求彻底解决。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6.1 替代方案一：写入时分词优化，使用 Ngram 分词。&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;更细粒度分词，更有利于数据的召回！&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;PUT &lt;span&gt;test&lt;/span&gt;-005&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;settings&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;index.max_ngram_diff&quot;&lt;/span&gt;: 10,&lt;br/&gt;    &lt;span&gt;&quot;analysis&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;analyzer&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;my_analyzer&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;tokenizer&quot;&lt;/span&gt;: &lt;span&gt;&quot;my_tokenizer&quot;&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;      },&lt;br/&gt;      &lt;span&gt;&quot;tokenizer&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;my_tokenizer&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;ngram&quot;&lt;/span&gt;,&lt;br/&gt;          &lt;span&gt;&quot;min_gram&quot;&lt;/span&gt;: 3,&lt;br/&gt;          &lt;span&gt;&quot;max_gram&quot;&lt;/span&gt;: 10,&lt;br/&gt;          &lt;span&gt;&quot;token_chars&quot;&lt;/span&gt;: [&lt;br/&gt;            &lt;span&gt;&quot;letter&quot;&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;&quot;digit&quot;&lt;/span&gt;&lt;br/&gt;          ]&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;&quot;mappings&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;properties&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;title&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;text&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;analyzer&quot;&lt;/span&gt;: &lt;span&gt;&quot;my_analyzer&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;fields&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;keyword&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;keyword&quot;&lt;/span&gt;&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;POST &lt;span&gt;test&lt;/span&gt;-005/_bulk&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:1}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;英文官网承认刘强东一度被捕的原因是涉嫌性侵&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:2}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;别提了朋友哥哥刘强东窗事发了&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:3}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;刘强东施效颦，没想到竟然收获了流量&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:4}}&lt;br/&gt;{&lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;刘强东是谁？我不认识&quot;&lt;/span&gt;}&lt;br/&gt;&lt;br/&gt;POST &lt;span&gt;test&lt;/span&gt;-005/_search&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;query&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;match_phrase&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;title&quot;&lt;/span&gt;: &lt;span&gt;&quot;刘强东&quot;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Ngram 实现推荐：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484758&amp;amp;idx=1&amp;amp;sn=1fa663c5f8b85a82ef25f8453af88394&amp;amp;chksm=eaa82d7edddfa4682a2ff4de9465d8d6fc99a6f925c3f018c0e77b6ee8f59406c687854648cf&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Elasticsearch能检索出来，但不能正确高亮怎么办？&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Elasticsearch能检索出来，但不能正确高亮怎么办？&lt;/span&gt;&lt;/a&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6.2 替代方案二：7.9 + 以上的版本，使用 wildcard 数据类型。&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;wildcard &lt;/span&gt;&lt;span&gt;类型&lt;/span&gt;&lt;span&gt;出现的目的：一方面避免了某些场景下分词查询不准确的问题，另一方面也解决了通配符和正则检索的效率问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意：新上的&lt;/span&gt;&lt;span&gt;数据类型&lt;/span&gt;&lt;span&gt; wildcard，而非 wildcard 检索。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;使用方法参见：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://www.elastic.co/guide/en/elasticsearch/reference/master/keyword.html#wildcard-field-type。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6.3 禁用方案：禁止使用wildcard 模糊检索&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;特殊业务场景需要禁止：wildcard 检索。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;实现如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;PUT _cluster/settings&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;transient&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;search.allow_expensive_queries&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;需要强调的是： &lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&quot;search.allow_expensive_queries&quot;  是 7.7+ 版本才有的功能，早期版本会报错。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;7、小结&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于技术惯性，我们习惯于相同或者相通技术的技术迁移，比如：mysql like 查询迁移到 Elasticsearch 中的 wildcard 模糊检索。但迁移的时候一定要注意：不同技术点的实现差异，同时要多关注技术点不能可能导致的性能问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;即便 2017年 wood 大叔就发了两篇文章让大家警惕 wildcard 模糊检索可能带来的性能问题。但四年后的今天，仍然很多公司的实战业务中还未考虑性能及后果的前提下，乐此不疲的用着 wildcard 检索！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以，本文算是 wood 大叔的 wildcard 警示文章接力，希望更多人看到。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://t.zsxq.com/Y3zv7Eq &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://t.zsxq.com/bm62zZf&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7dca8b88dd966068e1cc12177be6f956</guid>
<title>一次性总结了 Pandas 提取数据的 15 种方法，统统只需 1 行代码</title>
<link>https://toutiao.io/k/poubxrt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;pandas是Python数据分析必备工具，它有强大的数据清洗能力，往往能用非常少的代码实现较复杂的数据处理&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天，总结了pandas筛选数据的15个常用技巧，主要包括5个知识点：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;比较运算：&lt;code&gt;==、&amp;lt;、&amp;gt;、&amp;gt;=、&amp;lt;=、!=&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;范围运算：&lt;code&gt;between(left,right)&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;字符筛选:&lt;code&gt;str.contains&lt;/code&gt;(pattern或字符串,na=False)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;逻辑运算：&lt;code&gt;&amp;amp;（与）、|（或）、not(取反)&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;比较函数：&lt;code&gt;eq, ne, le, lt, ge, gt&lt;/code&gt;（相当于&lt;code&gt;==,=!，&amp;lt;=，&amp;lt;，&amp;gt;=，&amp;gt;&lt;/code&gt;）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;apply&lt;/code&gt;和&lt;code&gt;isin&lt;/code&gt;函数&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面以超市运营数据为例，给大家逐个讲解首先读取数据：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import pandas as pd&lt;br/&gt;data=pd.read_excel(&lt;span&gt;&#x27;超市运营数据模板.xlsx&#x27;&lt;/span&gt;)&lt;br/&gt;data&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZI24icKKLWCs7bHanfLtscI6UgTHiaQGQyj9gWElqPana0r9cLXG0Ect0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5248713550600344&quot; data-w=&quot;583&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先看一下各列的数据类型：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data.dtypes&lt;br/&gt;商品ID             int64&lt;br/&gt;类别ID             int64&lt;br/&gt;门店编号            object&lt;br/&gt;单价             float64&lt;br/&gt;销量             float64&lt;br/&gt;订单ID            object&lt;br/&gt;日期      datetime64[ns]&lt;br/&gt;时间              object&lt;br/&gt;dtype: object&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面以实际应用场景为例开始讲解：&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.筛选门店编号为&#x27;CDXL&#x27;的运营数据&lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;①第一种方法，用比较运算符‘==’：&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data[data.门店编号==&lt;span&gt;&#x27;CDXL&#x27;&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZI1F1zoYxVMCC86OZC0Vcd7kNT9Jiaz4FpZPYgicDlib1kYRiaHNUWlMtgHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.4925619834710744&quot; data-w=&quot;605&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;②第二种方法，用比较函数&#x27;eq&#x27;：&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data[data[&lt;span&gt;&#x27;门店编号&#x27;&lt;/span&gt;].eq(&lt;span&gt;&#x27;CDXL&#x27;&lt;/span&gt;)]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZIhgg5MOcdEnuVqk6rIeganYIBu58ol7vAERFSMXpUhXSsCEynXYDZ4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5190972222222222&quot; data-w=&quot;576&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.筛选单价小于等于10元的运营数据&lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;③第一种方法，用比较运算符‘&amp;lt;=’:&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data[data.单价&amp;lt;=10]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZIcKMiaCRVQt6QPkQwPIQ6EpyaYrcGmLEL07Q5wch5d1ZbbkV8oFLArAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5246478873239436&quot; data-w=&quot;568&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;④第二种方法，用比较函数&#x27;le&#x27;：&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data[data[&lt;span&gt;&#x27;单价&#x27;&lt;/span&gt;].le(10)]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZIqajVl5bPJpRADlpL3rHQ3sx8oOfz0eiaqzN2sO6U0hFzibaoY3u3fywg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5094339622641509&quot; data-w=&quot;583&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.筛选销量大于2000的运营数据&lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;⑤第一种方法，用比较运算符‘&amp;gt;=’:&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data[data.销量&amp;gt;2]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZIUkXk4XfgKKHchxibXmZHHBm9wXbBL9ZzDc0eb4fXSMxxIrZRicicpy7yA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5227272727272727&quot; data-w=&quot;572&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;⑥第二种方法，用比较函数&#x27;ge&#x27;：&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data[data[&lt;span&gt;&#x27;销量&#x27;&lt;/span&gt;].ge(2)]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZIUkXk4XfgKKHchxibXmZHHBm9wXbBL9ZzDc0eb4fXSMxxIrZRicicpy7yA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5227272727272727&quot; data-w=&quot;572&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.筛选除门店&#x27;CDXL&#x27;外的运营数据&lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;⑦第一种方法，用比较运算符‘!=’:&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data[data.门店编号!=&lt;span&gt;&#x27;CDXL&#x27;&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZItlTlncKK1rZkNaIEudHlKNm11YjX0b6MTJvVh7adQYNsnExiad1PkXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.525305410122164&quot; data-w=&quot;573&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;br/&gt;⑧第二种方法，用比较函数&#x27;ne&#x27;:&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data[data[&lt;span&gt;&#x27;门店编号&#x27;&lt;/span&gt;].ne(&lt;span&gt;&#x27;CDXL&#x27;&lt;/span&gt;)]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZILbIoakFXWuUEIVw8R6fPXibPN9uHqzk7QYLPp76R0FYWrjz8KM337NA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5136986301369864&quot; data-w=&quot;584&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5.筛选2020年5月的运营数据&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先将日期格式化：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data[&lt;span&gt;&#x27;日期&#x27;&lt;/span&gt;]=data[&lt;span&gt;&quot;日期&quot;&lt;/span&gt;].values.astype(&lt;span&gt;&#x27;datetime64&#x27;&lt;/span&gt;)  &lt;span&gt;#如果已为日期格式则此步骤可省略&lt;/span&gt;&lt;br/&gt;data[&lt;span&gt;&#x27;日期&#x27;&lt;/span&gt;]&lt;br/&gt;import datetime&lt;br/&gt;s_date = datetime.datetime.strptime(&lt;span&gt;&#x27;2020-04-30&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;%Y-%m-%d&#x27;&lt;/span&gt;).date()  &lt;span&gt;#起始日期&lt;/span&gt;&lt;br/&gt;e_date = datetime.datetime.strptime(&lt;span&gt;&#x27;2020-06-01&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;%Y-%m-%d&#x27;&lt;/span&gt;).date()  &lt;span&gt;#结束日期&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;⑨第一种方法，用逻辑运算符号&#x27;&amp;gt;&#x27; &#x27;&amp;lt;&#x27;和&#x27;&amp;amp;&#x27;：&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Pandasdatetime64[ns]&lt;/code&gt;不能直接与&lt;code&gt;datetime.date&lt;/code&gt;相比，需要用&lt;code&gt;pd.Timestamp&lt;/code&gt;进行转化&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data[(data.日期&amp;gt;pd.Timestamp(s_date))&amp;amp;(data.日期&amp;lt;pd.Timestamp(e_date))]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZIpJCBkxib3Q91icBGSfpSHa4jh2l1WTAbVqB5VfQqXqYvLicZia83FCGydg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5959252971137521&quot; data-w=&quot;589&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;⑩第二种，用比较函数&#x27;gt&#x27;&#x27;lt&#x27;和&#x27;&amp;amp;&#x27;:&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data[(data[&lt;span&gt;&#x27;日期&#x27;&lt;/span&gt;].lt(pd.Timestamp(e_date)))&amp;amp;(data[&lt;span&gt;&#x27;日期&#x27;&lt;/span&gt;].gt(pd.Timestamp(s_date)))]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZIf8ibA6gGWyDdbu2R70C5qCwxRIiaLSpnX7GVnyibt12MNApNCb3VhncrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.503448275862069&quot; data-w=&quot;580&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;⑪第三种，用apply函数实现:&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;id_a=data.日期.apply(lambda x: x.year ==2020  and x.month==5)&lt;br/&gt;data[id_a]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZIOSKb1BnLW0YhibVhficVlew8libQCaSD2KzIgqjN5xgBuURyrIBaCsrGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.506108202443281&quot; data-w=&quot;573&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;⑫第四种，用between函数实现:&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;id_b=data.日期.between(pd.Timestamp(s_date),pd.Timestamp(e_date))&lt;br/&gt;data[id_b]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZIh3FXUzo1CU6nXLRwuB75akibXjnuiaU7bFfRfZkLt6p7QSOgwyibzH4zg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5181975736568457&quot; data-w=&quot;577&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6.筛选“类别ID”包含&#x27;000&#x27;的数据&lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;⑬第一种，用contains函数：&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data[&lt;span&gt;&#x27;类别ID&#x27;&lt;/span&gt;]=data[&lt;span&gt;&#x27;类别ID&#x27;&lt;/span&gt;].values.astype(&lt;span&gt;&#x27;str&#x27;&lt;/span&gt;)  &lt;span&gt;#将该列转换为字符数据类型&lt;/span&gt;&lt;br/&gt;id_c=data.类别ID.str.contains(&lt;span&gt;&#x27;000&#x27;&lt;/span&gt;,na=False)&lt;br/&gt;data[id_c]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZIOPb1yy6BmTUCln8lTldKfjeyZXAAbCybvu6coum25DPmuxtuPRagTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5259515570934256&quot; data-w=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;⑭第二种，用isin函数：&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;id_i=data.类别ID.isin([&lt;span&gt;&#x27;000&#x27;&lt;/span&gt;])  &lt;span&gt;#接受一个列表&lt;/span&gt;&lt;br/&gt;data[id_i]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很遗憾，isin函数搞不定，因为它只能判断该列中元素是否在列表中&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7.筛选商品ID以“301”开头的运营数据&lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;⑮需要用contains函数结合正则表达式使用：&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data[&lt;span&gt;&#x27;商品ID&#x27;&lt;/span&gt;]=data[&lt;span&gt;&#x27;商品ID&#x27;&lt;/span&gt;].values.astype(&lt;span&gt;&#x27;str&#x27;&lt;/span&gt;)  &lt;span&gt;#将该列转换为字符数据类型&lt;/span&gt;&lt;br/&gt;id_c2=data.商品ID.str.contains(&lt;span&gt;&#x27;301\d{5}&#x27;&lt;/span&gt;,na=False)&lt;br/&gt;data[id_c2]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/I4gYnKQgV1V0ptEUG8Tn01nqPBZpXzZIOPb1yy6BmTUCln8lTldKfjeyZXAAbCybvu6coum25DPmuxtuPRagTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5259515570934256&quot; data-w=&quot;&quot;/&gt;&lt;/figure&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p&gt;为了方便大家学习，我已经将本文数据及代码打包好，请关注 数据分析与开发 公众号在后台回复关键字：&lt;span&gt;&lt;strong&gt;筛选数据 &lt;/strong&gt;&lt;/span&gt;获取。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5ODM5MDU3MA==&amp;amp;mid=2650869810&amp;amp;idx=2&amp;amp;sn=cea7c191f87235d091c30191eda28abc&amp;amp;chksm=8b67f777bc107e615e747b266937c032624708209d0339086d0edff9fe69fc843ee1aa696b4d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Pandas 必知必会的使用技巧，值得收藏！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5ODM5MDU3MA==&amp;amp;mid=2650870875&amp;amp;idx=1&amp;amp;sn=b28725c5f3d3c0a6331550f008994f59&amp;amp;chksm=8b67f31ebc107a0814ddd5c943b13369e69adf4b9e628bb1746b4844868c0ecb0339a7730a59&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一行 Pandas 代码搞定 Excel “条件格式”！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5ODM5MDU3MA==&amp;amp;mid=2650863849&amp;amp;idx=1&amp;amp;sn=fa0f58c0dcc172e0bbdd449731d980f5&amp;amp;chksm=8b661facbc1196baa215166eb69db5e831e4b0f4885fefcc15c185401d2b033d6066b2baec46&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Python 数据处理库 pandas 进阶教程&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;推荐关注「数据分析与开发」，提升数据技能&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA5ODM5MDU3MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/DmibiaFiaAI4B3yECIF3LxR8ZMPVxnto79bB8LrraNT18VPT5aCHSDFGiczOnt4CYCQlBCWg5ykox33kcLydFc4jhA/0?wx_fmt=png&quot; data-nickname=&quot;数据分析与开发&quot; data-alias=&quot;DBDevs&quot; data-signature=&quot;「数据分析与开发」分享数据分析与开发相关技术文章、教程、工具&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5f060077e03fa300af8c6e902d7a6282</guid>
<title>我在架构设计和代码开发中的一些常用原则</title>
<link>https://toutiao.io/k/sso4l2l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6259765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naJ8wib0SP8iaWGVgWb0VNrUIe78lY2RAUFY9aHS34u4xnqT0OMDdoXTsD5rJia1icZNvnPuTMMtPlOjng/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;不管我一生中取得了多大的成功，其主要原因都不是我知道多少事情，而是我知道在无知的情况下自己应该怎么做。我一生中学到的最重要的东西是一种以原则为基础的生活方式，是它帮助我发现真相是什么，并据此如何行动。&lt;br/&gt;&lt;br/&gt;——瑞·达利欧（Ray Dalio）&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在日常的开发和设计过程中，大家对技术设计上的一些问题往往会面临很多的选择，不同的人会有不同的选择，每每如此，我都会尝试着问自己：我做出选择和判断背后的原则是什么？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;经过这么多年的发展，在软件设计过程，目前沉淀下来的原则有很多，但很多情况下，很多原则为了普适性，总结得会比较抽象，一旦太过抽象，对原则的解释和理解就会因人而异，譬如：高内聚低耦合原则，大家都懂，但是如何落地和执行却是很难说完全达成一致。因此，需要针对一些实际的场景中的问题去总结和补充，在大的原则下具化形成大家容易理解一致的相对明确原则。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文介绍的就是我在工作中遇到的一些问题而总结和使用到的一些常用原则。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;一  常用原则总结&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  分层设计相关原则&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;单向依赖原则&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;原则上只允许较高层次依赖较低层次，不允许反向依赖。&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们部门是为B类企业提供金融解决方案的技术部门，针对我们部门，在金融平台层系统不能反向依赖业务产品层系统。同一层的金融平台层系统之间的依赖不进行限制，但会尽量减少同层依赖。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，我们在解决底层依赖的高层中沉淀了几种基本方式：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;系统依赖转换为数据依赖；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;接口依赖，通过底层定义SPI，业务层实现，这种做法其实是不得已为之，同时，我们在设计过程中还是尽可能避免走这条路；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过事件机制解耦依赖。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;无循环依赖原则&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;系统设计时，尽量减少系统之间的依赖，同时需要避免系统之间出现循环调用。&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这是微服务场景下最容易出现的一个问题，尤其是同层的领域系统之间的调用，导致系统容易出现循环调用，循环依赖带来的一个严重的问题是影响系统的发布和部署问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;避免跨层调用原则&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;较高层次不允许之间跨层调用底层。&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;软件设计中进行分层的一个重要目的是通过分层屏蔽底层的实现细节，如果出现跨层相当于把底层的实现直接暴露了。譬如门面服务层，绕过领域服务层，直接调用DAO层进行数据读写操作，一旦需要重构修改原有的DAO层接口，就发现升级改造成本巨大，我不知道有多少个团队&lt;span&gt;也&lt;/span&gt;面临过这种痛苦。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;单一职责原则&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;该原则由罗伯特·C&lt;span&gt;·&lt;/span&gt;马丁（Robert C. Martin）于《敏捷软件开发：原则、模式和实践》一书中提出的。这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分（There should never be more than one reason for a class to change）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个原则虽然提出时是解决类的职责定义问题，但实际上在对模块的划分上也有指导意义。该原则虽然很简单，但是往往也容易被忽视。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在最近的项目中，我充分体会到这个原则的作用，我们部门的金融网络系统主要解决机构标准化对接问题，我们将系统分为了上下两层，下层通过标准化的接口对接机构，提升机构跨产品的复用能力；上层是产品扩展层，通过提供标准接口给到上游的业务产品层，支持同一个产品接入多家机构，屏蔽机构差异。我们判断一个功能到底属于机构对接层，还是产品扩展层的一个简单的原则是：如果新增一家机构，能否做到只影响机构对接层，而保持产品扩展层代码不改；反过来，如果新增一个产品，是否能做到只修改产品扩展层，机构层能否不改代码。同时，为了避免这个原则被突破，我们甚至在机构对接层的代码中，去除了所有和产品有关的参数，这样，根据产品定制的逻辑天然无法放到这一层。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;数据冗余&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;架构设计应该使得系统中数据的冗余最小。&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;譬如我们在实践过程中，接口设计时，在Javadoc上强制指定接口的必传参数，尽量做到最小集，减少上游系统使用接口的成本。另外要求在接口实现时，提前进行参数校验，不让不满足要求的数据冗余到系统中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了提高系统性能，备份节点和子系统/模块必要时需要对数据进行缓存，当发生变化时，必须有相应的机制保证缓存数据的一致性和有效性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  质量属性相关原则&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;数据安全&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这块在我们金融业务部门中尤其突出，金融由于其特殊性，往往需要收集大量的客户真实和隐私数据，数据安全是设计中需要重点考虑的问题，通常我们会主要关注以下三个方面的问题：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3  资损防控&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对金融技术部门而言，资损防控是第一位，而我们在实际过程中发现，由于前期的一些系统在设计之初没有考虑资损的防控，导致核对或者监控的成本很高，因此，在后来的系统数据模型设计时重点会去review是否具备可核对。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4  并发控制&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;悲观锁：代码编码规范——一锁二查三更新。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;乐观锁：必须在事务内更新。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5  热点问题&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;避免流量倾斜，导致单台机器/单个数据表/数据库集中读写。&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个需要在设计时充分提前预判业务的发展规模和系统的容量问题。在实际实施过程中，我们会提前按照3~5年左右的业务规模来设计。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;6  数据倾斜&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;分表分库规则在设计时需要考虑数据分布均匀，避免单库或者单表数据倾斜。&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据倾斜这个在之前踩过比较大的坑，在系统设计之初没有结合业务场景去考虑系统的数据存储层设计，导致数据出现严重倾斜，数据库操作出现瓶颈，现在是我们在设计存储层方案时必须要考虑的一个原则。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;7  性能原则&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;可压测：对性能要求高的链路，需要做到可以压测。&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个主要是由于每到大促就需要重新梳理和改造压测链路，耗时费力，苦不堪言。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;8  事务控制相关原则&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;9  一致性相关原则&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二  API设计相关设计原则&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  水平越权控制&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;API设计时需要考虑防范水平越权。&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;目前我们的做法是，从前端到后端，每层都需要进行越权校验。通过从接口设计层面防控，避免某层出现疏忽导致越权的事件发生。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  接口幂等控制&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;调用方必须提供用于幂等控制的参数，为了控制幂等，同一个请求的幂等参数不变。&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在血泪史上，由于接口不幂等导致的问题太多了，这个目前基本上已经成了部门在接口设计上的共识。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3  兼容性原则&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;API升级和调整，需要兼容老的版本。&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了保证接口可以升级，我们对接口的设计就会存在比较高的要求，譬如接口参数中不能使用枚举，不能使用Java基础类型等，同时也要求接口设计需要具备一定前瞻性和通用性，尤其对于面向业务领域的接口设计，更要求对该领域的业务知识有比较多的了解。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当然还有一些原则在《Java开发手册》中已有叙述，这里就不在赘述。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;三  总结&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文介绍了我们在系统设计和开发实际场景中总结出的一些原则，通过这些原则的总结和沉淀，可以在后续出现同类问题时做出相对正确的选择，避免重蹈覆辙。另外，通过在大的原则下进行具体化和明确化，能够让大家容易达成一致，让架构方案更容易落地，不走偏。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，无论是在生活上还是工作上，建议多从成功的经验或者失败的教训中去总结，形成自己的原则，丰富自己的决策系统。这是《&lt;span&gt;原则&lt;/span&gt;》这本书给我带来的一个比较大的启发。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;电子书免费下载&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;《名人堂》&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;今天，所有的IT技术日趋互联网化，不管是工业还是商业领域的系统，都将面临互联网技术的变革。阿里巴巴CIO学院采访了15位包括金融、工业、交通、建材、钢铁、证券、建筑、家居等领域的知名专家，分享他们对数字化的所思所想，互相交流学习，共同拥抱变化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击“阅读原文”，立即下载&lt;/span&gt;&lt;span&gt;吧~&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e31b5dc4bec38563ae7ccd10d1b4a8d5</guid>
<title>进程与线程：入门知识篇</title>
<link>https://toutiao.io/k/8labbkw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;container app-preview post-body&quot;&gt;
  &lt;div class=&quot;preview&quot;&gt;&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;大家好啊，我是汤小圆。&lt;/p&gt;

&lt;p&gt;今天给大家推荐的是，进程与线程的入门知识，希望对大家有帮助，谢谢。&lt;/p&gt;

&lt;h2&gt;简介&lt;/h2&gt;

&lt;p&gt;首先用术语来讲一下，进程是系统进行资源调度和分配的基本单元，线程是进程的最小执行单元；&lt;/p&gt;

&lt;p&gt;比如Windows中的任务管理器，就可以看到正在运行的进程，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/03/26/YepVMXJuNsz4tBT.png&quot; alt=&quot;进程-win10&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PS：这里要注意一点，程序不等于进程&lt;/p&gt;

&lt;p&gt;程序是指令的集合，是静态的；进程是正在执行的程序，是活的&lt;/p&gt;

&lt;p&gt;当你双击运行程序（.exe文件）时，程序的指令会加载到内存中，此时你就会得到这个程序的进程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好了，术语讲完了，接下来开始讲人话&lt;/p&gt;

&lt;h3&gt;知识点&lt;/h3&gt;

&lt;h4&gt;1. 进程和线程的关系是怎么样的呢？&lt;/h4&gt;

&lt;p&gt;进程可以看作一个容器，线程就是容器内的最小执行单元；&lt;/p&gt;

&lt;p&gt;我们用一个例子来说明，比如有一个宿舍（进程），宿舍里有两个人（线程），一个厕所（共享资源）&lt;/p&gt;

&lt;p&gt;宿舍和人的关系就是进程和线程的关系&lt;/p&gt;

&lt;p&gt;一个进程可以包含多个线程。&lt;/p&gt;

&lt;h4&gt;2. 既然有了进程，为啥还要有线程呢？&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;每个进程都有自己独立的数据空间，进程之间不共享这些数据资源，通讯不方便；&lt;/p&gt;

&lt;p&gt;但是线程不一样，一个进程内的多个线程共享这个进程的数据资源，通讯方便&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多进程之间切换开销大；&lt;/p&gt;

&lt;p&gt;但是多线程不会，线程来回切换开销很小&lt;/p&gt;

&lt;p&gt;（这里简单解释下，引入一个虚拟空间的概念，多个进程拥有不同的虚拟空间和缓存，但是多个线程共享进程的虚拟空间和缓存，进程切换之后，缓存失效，要重新去寻址虚拟空间，但是线程因为共享空间，缓存还是可以用的，所以比进程快）&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;3. 多线程都有哪些好处呢？&lt;/h4&gt;

&lt;p&gt;多线程相互协作，重复利用系统资源，提高系统吞吐率&lt;/p&gt;

&lt;p&gt;如果只是单个线程，那么程序在执行比较耗时的操作（比如IO）时，CPU 是处于空闲的状态，就会造成资源的浪费&lt;/p&gt;

&lt;p&gt;但是多线程可以切换到其他线程，继续执行其他任务，从而充分利用CPU&lt;/p&gt;

&lt;p&gt;比如我们在看电影的时候，眼睛在工作，耳朵也在工作，这样就可以充分利用我们的身体去享受电影；&lt;/p&gt;

&lt;p&gt;但是如果眼睛和耳朵要分开工作，那就难受了（脑补一下声音画面不同步的场景）&lt;/p&gt;

&lt;h4&gt;4. 多线程要怎么确保数据安全呢？&lt;/h4&gt;

&lt;p&gt;有多种方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;局部变量，即单个线程内定义的局部变量只有自己可见，那肯定是安全的&lt;/li&gt;
&lt;li&gt;只读对象，即共享的对象是只读的，那肯定也是安全的&lt;/li&gt;
&lt;li&gt;线程安全类，即类本身是线程安全的，那么基于这个类的操作肯定也是安全，比如StringBuffer类&lt;/li&gt;
&lt;li&gt;同步与锁机制，即用户自己通过加锁，来确保数据安全；这个会导致程序变得复杂且容易出现问题&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;5. 线程的生命周期都有哪些呢？&lt;/h4&gt;

&lt;p&gt;通过JDK源码可以看到，线程的生命周期有6个状态，如下所示&lt;/p&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt; public enum State {
        NEW, // 创建了线程，但是啥也没干
        RUNNABLE, // 启动了线程，处于运行状态
        BLOCKED, // 阻塞了线程，处于阻塞状态
        WAITING, // 等待状态，没有时间限制，直到有其他事件通知
        TIMED_WAITING, // 等待状态，有时间限制，时间到了，会返回到运行状态
        TERMINATED; // 终止状态，线程结束
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;6. 这些状态之间的关系是咋样的呢？&lt;/h4&gt;

&lt;p&gt;可以用一张图来描述，如下所示，可以看到除了NEW状态和TERMINATED状态，其他状态都是跟RUNNABLE状态互通的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/03/25/JwSKVbuDkgQe2lH.png&quot; alt=&quot;线程状态图&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;7. 那么线程的创建 New 有几种方式呢？&lt;/h4&gt;

&lt;p&gt;三种&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;（不推荐）继承Thread类，但是这样的话不符合LSP原则（里氏替换原则，详细内容可参考：&lt;a href=&quot;https://www.jianshu.com/p/cf9f3c7c0df5%EF%BC%89&quot;&gt;https://www.jianshu.com/p/cf9f3c7c0df5）&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;（推荐）实现Runnable接口，比第一种灵活，也更加安全&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;（推荐）实现Callable接口，相比于第二种，多了&lt;strong&gt;返回值&lt;/strong&gt;和&lt;strong&gt;异常抛出&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;8. BLOCKED 状态一般什么情况下会出现呢？&lt;/h4&gt;

&lt;p&gt;遇到锁的情况下，如果锁没有释放，那么线程就会阻塞&lt;/p&gt;

&lt;h4&gt;9. WAITING 和 TIMED_WAITING有啥区别，不都是等待状态吗？&lt;/h4&gt;

&lt;p&gt;WAITING 状态会无休止的等待下去，直到其他事件通知它，它才会停止等待，进入RUNNABLE状态（被动）&lt;/p&gt;

&lt;p&gt;TIMED_WAITING 状态会有一个等待最长时间，如果到了等待最长时间，还没有人通知它，它会自动停止等待，进入RUNNABLE状态（被动+主动）&lt;/p&gt;

&lt;h2&gt;总结&lt;/h2&gt;

&lt;p&gt;上面只是简单介绍了线程和进程，真正要学的话东西还是很多的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考书籍&lt;/strong&gt;：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Java并发编程实战&lt;/li&gt;
&lt;li&gt;实战Java高并发程序设计（第二版）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;参考链接&lt;/strong&gt;：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;里氏替换原则：&lt;a href=&quot;https://www.jianshu.com/p/cf9f3c7c0df5&quot;&gt;https://www.jianshu.com/p/cf9f3c7c0df5&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;后记&lt;/h2&gt;

&lt;p&gt;最后，感谢大家的观看，谢谢。&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>