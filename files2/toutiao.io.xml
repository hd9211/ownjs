<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e0c16c7dc777372308d270fb459bef65</guid>
<title>程序员必备基础：10 种常见安全漏洞浅析</title>
<link>https://toutiao.io/k/7v2gnx6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们日常开发中，很多小伙伴容易忽视安全漏洞问题，认为只要正常实现业务逻辑就可以了。其实，&lt;strong&gt;安全性才是最重要的&lt;/strong&gt;。本文将跟大家一起学习常见的安全漏洞问题，希望对大家有帮助哈。如果本文有什么错误的话，希望大家提出哈，感谢感谢~&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. SQL 注入&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.1 什么是SQL注入？&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SQL注入是一种代码注入技术，一般被应用于攻击web应用程序。它通过在web应用接口传入一些特殊参数字符，来欺骗应用服务器，执行恶意的SQL命令，以达到非法获取系统信息的目的。它目前是黑客对数据库进行攻击的最常用手段之一。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2 SQL注入是如何攻击的？&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个常见的&lt;strong&gt;业务场景&lt;/strong&gt;：在web表单搜索框输入员工名字，然后后台查询出对应名字的员工。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7041420118343196&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpzpOPY3wqt1arDaRRETanRlP73Biay0ibwbKlULCibdQicC36yXKOGrWcjwNDlP9yYcmhcEWv4uDKVPIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;507&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种场景下，一般都是前端页面把一个名字参数name传到后台，然后后台通过SQL把结果查询出来&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;name = &lt;span&gt;&quot;田螺&quot;&lt;/span&gt;; //前端传过来的&lt;br/&gt;&lt;br/&gt;SQL= &lt;span&gt;&quot;select * from staff where name=&quot;&lt;/span&gt; + name;  //根据前端传过来的name参数，查询数据库员工表staff&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为SQL是直接拼接的，如果我们完全信任前端传的参数的话。假如前端传这么一个参数时&lt;code&gt;&#x27;&#x27; or &#x27;1&#x27;=&#x27;1&#x27;&lt;/code&gt;，SQL就变成酱紫的啦。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;select * from staff &lt;span&gt;where&lt;/span&gt; name=&lt;span&gt;&#x27;&#x27;&lt;/span&gt; or &lt;span&gt;&#x27;1&#x27;&lt;/span&gt;=&lt;span&gt;&#x27;1&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个SQL会把所有的员工信息全都查出来了，酱紫请求用户已经越权啦。请求者可以获取所有员工的信息，其他用户信息已经暴露了啦。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3 如何预防SQL注入问题&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3.1 使用#{}而不是${}&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在MyBatis中,使用&lt;code&gt;#{}&lt;/code&gt;而不是&lt;code&gt;${}&lt;/code&gt;，可以很大程度防止sql注入。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;★&lt;/span&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;因为&lt;code&gt;#{}&lt;/code&gt;是一个参数占位符，对于字符串类型，会自动加上&quot;&quot;，其他类型不加。由于Mybatis采用&lt;strong&gt;预编译&lt;/strong&gt;，其后的参数不会再进行SQL编译，所以一定程度上防止SQL注入。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;${}&lt;/code&gt;是一个简单的字符串替换，字符串是什么，就会解析成什么，存在SQL注入风险&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3.2 不要暴露一些不必要的日志或者安全信息，比如避免直接响应一些sql异常信息。&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果SQL发生异常了，不要把这些信息暴露响应给用户，可以自定义异常进行响应&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3.3 不相信任何外部输入参数，过滤参数中含有的一些数据库关键词关键词&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以加个参数校验过滤的方法，过滤&lt;code&gt;union，or&lt;/code&gt;等数据库关键词&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3.4 适当的权限控制&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在你查询信息时，先校验下当前用户是否有这个权限。比如说，实现代码的时候，可以让用户多传一个企业Id什么的，或者获取当前用户的session信息等，在查询前，先校验一下当前用户是否是这个企业下的等等，是的话才有这个查询员工的权限。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. JSON反序列化漏洞——如Fastjson安全漏洞&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1 什么是JSON序列化，JSON发序列化&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;序列化：把对象转换为字节序列的过程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;反序列：把字节序列恢复为Java对象的过程&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.38055555555555554&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpzpOPY3wqt1arDaRRETanRlpYDKRN1uvyLjZkeWPgqJop1hnarKzK3h7ZnRy3Ib0uR8j98s7uDFeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Json序列化&lt;/strong&gt;就是将对象转换成Json格式的字符串，&lt;strong&gt;JSON反序列化&lt;/strong&gt;就是Json串转换成对象&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2 JSON 反序列化漏洞是如何被攻击？&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不安全的反序列化可以导致远程代码执行、重放攻击、注入攻击或特权升级攻击。之前Fastjson频繁爆出安全漏洞，我们现在分析fastjson 1.2.24版本的一个反序列化漏洞吧，这个漏洞比较常见的利用手法就是通过jndi注入的方式实现RCE。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先来看fastjson一个反序列化的简单例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public class User {&lt;br/&gt;    private String name;&lt;br/&gt;&lt;br/&gt;    private int age;&lt;br/&gt;&lt;br/&gt;    public String &lt;span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; name;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public void setName(String name) {&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;调用了name方法&quot;&lt;/span&gt;);&lt;br/&gt;        this.name = name;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public int &lt;span&gt;&lt;span&gt;getAge&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; age;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public void setAge(int age) {&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;调用了age方法&quot;&lt;/span&gt;);&lt;br/&gt;        this.age = age;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public static void main(String[] args) {&lt;br/&gt;        String str = &lt;span&gt;&quot;{\&quot;@type\&quot;:\&quot;cn.eovie.bean.User\&quot;,\&quot;age\&quot;:26,\&quot;name\&quot;:\&quot;捡田螺的小男孩\&quot;}&quot;&lt;/span&gt;;&lt;br/&gt;        User user = JSON.parseObject(str,User.class);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;调用了age方法&lt;br/&gt;调用了name方法&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加了&lt;code&gt;@type&lt;/code&gt;属性就能调用对应对象的&lt;code&gt;setXXX&lt;/code&gt;方法，而&lt;code&gt;@type&lt;/code&gt;表示指定反序列化成某个类。如果我们能够找到一个类，而这个类的某个&lt;code&gt;setXXX&lt;/code&gt;方法中通过我们的精心构造能够完成命令执行，即可达到攻击的目的啦。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;★&lt;/span&gt;&lt;p&gt;com.sun.rowset.JdbcRowSetImpl 就是类似这么一个类，它有两个set方法，分别是setAutoCommit和setDataSourceName&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有兴趣的小伙伴，可以看下它的源代码&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;  public void setDataSourceName(String var1) throws SQLException {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (this.getDataSourceName() != null) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (!this.getDataSourceName().equals(var1)) {&lt;br/&gt;                super.setDataSourceName(var1);&lt;br/&gt;                this.conn = null;&lt;br/&gt;                this.ps = null;&lt;br/&gt;                this.rs = null;&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            super.setDataSourceName(var1);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;      public void setAutoCommit(boolean var1) throws SQLException {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (this.conn != null) {&lt;br/&gt;            this.conn.setAutoCommit(var1);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            this.conn = this.connect();&lt;br/&gt;            this.conn.setAutoCommit(var1);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    private Connection connect() throws SQLException {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (this.conn != null) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; this.conn;&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (this.getDataSourceName() != null) {&lt;br/&gt;            try {&lt;br/&gt;                InitialContext var1 = new InitialContext();&lt;br/&gt;                DataSource var2 = (DataSource)var1.lookup(this.getDataSourceName());&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; this.getUsername() != null &amp;amp;&amp;amp; !this.getUsername().equals(&lt;span&gt;&quot;&quot;&lt;/span&gt;) ? var2.getConnection(this.getUsername(), this.getPassword()) : var2.getConnection();&lt;br/&gt;            } catch (NamingException var3) {&lt;br/&gt;                throw new SQLException(this.resBundle.handleGetObject(&lt;span&gt;&quot;jdbcrowsetimpl.connect&quot;&lt;/span&gt;).toString());&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; this.getUrl() != null ? DriverManager.getConnection(this.getUrl(), this.getUsername(), this.getPassword()) : null;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;setDataSourceName&lt;/code&gt; 简单设置了设置了dataSourceName的值，&lt;code&gt;setAutoCommit&lt;/code&gt;中有connect操作，connect方法中有典型的jndi的&lt;code&gt;lookup&lt;/code&gt;方法调用，参数刚好就是在&lt;code&gt;setDataSourceName&lt;/code&gt;中设置的dataSourceName。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，有漏洞的反序列代码实现如下即可：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public class FastjsonTest {&lt;br/&gt;&lt;br/&gt;    public static void main(String[] argv){&lt;br/&gt;        testJdbcRowSetImpl();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public static void &lt;span&gt;&lt;span&gt;testJdbcRowSetImpl&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt;        //JDK 8u121以后版本需要设置改系统变量&lt;br/&gt;        System.setProperty(&lt;span&gt;&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;&lt;/span&gt;, &lt;span&gt;&quot;true&quot;&lt;/span&gt;);&lt;br/&gt;        //RMI&lt;br/&gt;        String payload2 = &lt;span&gt;&quot;{\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://localhost:1099/Exploit\&quot;,&quot;&lt;/span&gt; +&lt;br/&gt;                &lt;span&gt;&quot; \&quot;autoCommit\&quot;:true}&quot;&lt;/span&gt;;&lt;br/&gt;        JSONObject.parseObject(payload2);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;漏洞复现的流程如下哈：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5666906993511175&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpzpOPY3wqt1arDaRRETanRlGjpegFIGqSmKtHwup0QibXnaAYxaIrBIozbNkRfAsiaaFo5MibAmosjPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1387&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考的代码来源这里哈，fastjson漏洞代码测试（https://github.com/earayu/fastjson_jndi_poc）&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;如何解决json反序列化漏洞问题&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;可以升级版本，比如fastjson后面版本，增强AutoType打开时的安全性 fastjson，增加了AutoType黑名单等等，都是为了应对这些安全漏洞。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;反序列化有fastjson、gson、jackson等等类型，可以替换其他类型。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;升级+打开safemode&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. XSS 攻击&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1 什么是XSS？&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;★&lt;/span&gt;&lt;p&gt;XSS 攻击全称跨站脚本攻击（Cross-Site Scripting），这会与层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，因此有人将跨站脚本攻击缩写为XSS。它指的是恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意攻击用户的特殊目的。XSS攻击一般分三种类型：存储型 、反射型 、DOM型XSS&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2 XSS是如何攻击的？&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拿反射型举个例子吧，流程图如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6226551226551227&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpzpOPY3wqt1arDaRRETanRlAOxpV8LUXWdlsWQBIK1zqCUaia7TJicFBF9ZXZMhxK5IAq6ZWyS9IpTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1386&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们搞点简单代码样例吧，首先正常html页面如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;input &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;text&quot;&lt;/span&gt; name=&lt;span&gt;&quot;name&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;&amp;lt;input &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;submit&quot;&lt;/span&gt; value=&lt;span&gt;&quot;搜索&quot;&lt;/span&gt; onclick=&lt;span&gt;&quot;http://127.0.0.1/search?name=&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&amp;lt;/body&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpzpOPY3wqt1arDaRRETanRlhSnag4s2pMQsLtsuEU06fSCxLl6BrOBmU4AqfNz67Lh4ic43QLqdvtw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;620&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;用户输入搜索信息，点击搜索按钮，就是到达正常服务器的。如果黑客在url后面的参数中加入如下的恶意攻击代码。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;http://127.0.0.1/search?keyword=&lt;span&gt;&quot;&amp;lt;a href =&quot;&lt;/span&gt;http://www.baidu.com&lt;span&gt;&quot;&amp;gt;&amp;lt;script&amp;gt;alert(&#x27;XSS&#x27;);&amp;lt;/script&amp;gt;&amp;lt;/a&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;当用户打开带有恶意代码的URL的时候，正常服务器会解析出请求参数 name，得到&quot;&quot;，拼接到 HTML 中返回给浏览器。形成了如下的 HTML：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;用户浏览器接收到响应后执行解析，其中的恶意代码也会被执行到。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2303370786516854&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpzpOPY3wqt1arDaRRETanRlkIcdAqAy4ZY5G9xiaMicwl3XcEuuBa0pxBWJ1ZHibj2TFERYYgVwYj1GA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1780&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4.这里的链接我写的是百度搜索页，实际上黑客攻击的时候，是引诱用户输入某些重要信息，然后跳到他们自己的服务器，以窃取用户提交的内容信息。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3 如何解决XSS攻击问题&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;不相信用户的输入，对输入进行过滤，过滤标签等，只允许合法值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;HTML 转义&lt;img data-ratio=&quot;0.8774038461538461&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpzpOPY3wqt1arDaRRETanRlqUBBZpy1NbeAkFxiaoib5awtHj4ll70yLsFX1UyKN1hCUZzlaGMic2rpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;416&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于链接跳转，如&lt;code&gt;&amp;lt;a href=&quot;xxx&quot;&lt;/code&gt; 等，要校验内容，禁止以script开头的非法链接。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;限制输入长度等等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. CSRF 攻击&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.1 什么是CSRF 攻击？&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CSRF，跨站请求伪造（英语：Cross-site request forgery），简单点说就是，攻击者盗用了你的身份，以你的名义发送恶意请求。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.2 CSRF是如何攻击的呢？&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看下这个例子哈（来自百度百科）&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6726384364820847&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpzpOPY3wqt1arDaRRETanRlk2gVicJTA8gU07MhiaKRcJYtBt6icoVsNODQguAoZtca5ticuXwic4HzzxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;614&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Tom 登陆银行，没有退出，浏览器包含了Tom在银行的身份认证信息。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;黑客Jerry将伪造的转账请求，包含在在帖子&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Tom在银行网站保持登陆的情况下，浏览帖子&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将伪造的转账请求连同身份认证信息，发送到银行网站&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;银行网站看到身份认证信息，以为就是Tom的合法操作，最后造成Tom资金损失。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.3 如何解决CSRF攻击&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;检查Referer字段。HTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;添加校验token。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. 文件上传下载漏洞&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5.1 文件上传漏洞&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;★&lt;/span&gt;&lt;p&gt;文件上传漏洞是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。常见场景是web服务器允许用户上传图片或者普通文本文件保存，而用户绕过上传机制上传恶意代码并执行从而控制服务器。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;解决办法&lt;/strong&gt;一般就是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;限制服务器相关文件目录的权限&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;校验上传的文件，如后缀名 禁止上传恶意代码的文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;尽量禁止使用前端上传的文件名&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5.2 文件下载漏洞&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文件下载漏洞，举个例子，使用 .. 等字符，使应用读取到指定目录之外的其他目录中的文件内容，从而可能读取到服务器的其他相关重要信息。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.1743119266055046&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpzpOPY3wqt1arDaRRETanRle7AnUvEr7xzet9D2qCJMP8pxicQFFibE5ibjnZRtIcIQg7ricHhw77dmpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6. 敏感数据泄露&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个相对比较好理解，一般敏感信息包括密码、用户手机身份证信息、财务数据等等，由于web应用或者API未加密或者疏忽保护，导致这些数据极易被黑客利用。所以我们需要保护好用户的隐私数据，比如用户密码加密保存，请求采用https加密，重要第三方接口采用加签验签，服务端日志不打印敏感数据等等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7. XXE 漏洞&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.1 什么是XXE&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;★&lt;/span&gt;&lt;p&gt;XXE就是XML外部实体注入。当允许引用外部实体时，通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.2 XXE三种攻击场景&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;?xml version=&lt;span&gt;&quot;1.0&quot;&lt;/span&gt;?&amp;gt;&lt;br/&gt;&amp;lt;!DOCTYPE foo [&lt;br/&gt;&amp;lt;!ELEMENT foo (&lt;span&gt;#ANY)&amp;gt;&lt;/span&gt;&lt;br/&gt;&amp;lt;!ENTITY file SYSTEM &lt;span&gt;&quot;file:///etc/passwd&quot;&lt;/span&gt;&amp;gt;]&amp;gt;&lt;br/&gt;]&amp;gt;&lt;br/&gt;&amp;lt;foo&amp;gt;&amp;amp;xxe;&amp;lt;/foo&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;场景2. 攻击者通过将上面的实体行更改为一下内容来探测服务器的专用网络&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;!ENTITY xxe SYSTEM &lt;span&gt;&quot;https://192.168.1.1/private&quot;&lt;/span&gt;&amp;gt;]&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;!ENTITY xxe SYSTEM &lt;span&gt;&quot;file:///dev/random&quot;&lt;/span&gt;&amp;gt;]&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.3 如何防御XXE&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;使用开发语言提供的禁用外部实体的方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;过滤用户提交的XML数据，过滤&amp;lt;!DOCTYPE和&amp;lt;!ENTITY等关键词。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8. DDoS 攻击&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;8.1 什么是DDos攻击&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DDoS 攻击，英文全称是 Distributed Denial of Service，谷歌翻译过来就是“分布式拒绝服务”。一般来说是指攻击者对目标网站在较短的时间内发起大量请求，大规模消耗目标网站的主机资源，让它无法正常服务。在线游戏、互联网金融等领域是 DDoS 攻击的高发行业。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了方便理解，引用一下知乎上一个非常经典的例子&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;★&lt;/span&gt;&lt;p&gt;我开了一家有五十个座位的重庆火锅店，由于用料上等，童叟无欺。平时门庭若市，生意特别红火，而对面二狗家的火锅店却无人问津。二狗为了对付我，想了一个办法，叫了五十个人来我的火锅店坐着却不点菜，让别的客人无法吃饭。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;8.2 如何应对 DDoS 攻击？&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;高防服务器&lt;/strong&gt;，即能独立硬防御 50Gbps 以上的服务器，能够帮助网站拒绝服务攻击，定期扫描网络主节点等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;黑名单&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;DDoS 清洗&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;CDN 加速&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9. 框架或应用漏洞&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Struts 框架漏洞：远程命令执行漏洞和开放重定向漏洞&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;QQ Browser 9.6：API 权限控制问题导致泄露隐私模式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Oracle GlassFish Server：REST CSRF&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;WebLogic: 未授权命令执行漏洞&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Hacking Docker：Registry API 未授权访问&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;WordPress 4.7 / 4.7.1：REST API 内容注入漏洞&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10. 弱口令、证书有效性验证、内部接口在公网暴露、未鉴权等权限相关漏洞&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;10.1 弱口令&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;★&lt;/span&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;空口令&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;口令长度小于8&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;口令不应该为连续的某个字符（QQQQQQ）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;账号密码相同（例：root：root）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;口令与账号相反（例：root：toor）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;口令纯数字（例：112312324234， 电话号）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;口令纯字母（例：asdjfhask）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;口令已数字代替字母（例：hello word， hell0 w0rd）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;口令采用连续性组合（例：123456，abcdef，654321，fedcba）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务/设备默认出厂口令&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;10.2 证书有效性验证漏洞&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不对证书进行有效性验证，那https就如同虚设啦。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果是客户生成的证书，需要跟系统可信根CA形成信任链，不能为了解决ssl证书报错的问题，选择在客户端代码中信任客户端中所有证书的方式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;证书快过期时，需要提前更换。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;10.3 未鉴权等权限相关漏洞&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一些比较重要的接口，一般建议鉴权。比如你查询某账号的转账记录，肯定需要先校验该账号是不是操作人旗下的啦。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;参考与感谢&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;【入坑JAVA安全】fastjson中的jndi注入&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Web渗透之文件上传漏洞总结&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;XXE漏洞利用技巧：从XML到远程代码执行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;WEB应用常见15种安全漏洞一览&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是 DDoS 攻击？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;弱口令总结（什么是弱口令）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section class=&quot;wx_profile_card_inner&quot;&gt;&lt;section&gt;&lt;section class=&quot;wx_profile weui-flex&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3NzU5NTIwNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpxpY5pHeUUaicHSaqaylBb25Rbib0ocE4ZmXWdicS9tbGvFc9qvbiaNDibKKvuFYqlUdSW6VicXhoLNHfMQ/0?wx_fmt=png&quot; data-nickname=&quot;捡田螺的小男孩&quot; data-alias=&quot;&quot; data-signature=&quot;专注后端技术栈，热爱分享，热爱交朋友，热爱工作总结。毕业于华南理工大学，软件工程专业~&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>76336e0a4a665fe3b7e042b6fa99c031</guid>
<title>技术之外的工程师另类成长指南</title>
<link>https://toutiao.io/k/fsnuhkp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h2&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;今年是我从事软件测试工作的第七年，之间经历过实体零售、银行、互联网电商等行业，遇到过不少挫折和挑战，也遇到了不少好的同事和领导，总归还是收获满满。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之前读了一本书：《软技能：代码之外的生存指南》，读后触动挺大的，一直想写写自己在技术之外的一些成长经历，或者说对于职场生存和职业规划方面的思考和看法，拖沓很久，终于还是写出来了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;另一个角度看“级别”&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;可能很多同学对这点都有很深的印象，近几年各大招聘网站挂的岗位，都是高级/资深/专家什么的title。但比较尴尬的是，大部分公司，内部没有一个很规范的岗位能力模型，导致面试后的定级，基本都是面试官根据自身的理解和标准来定级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我自己最近也面试了将近100位候选人，从自己的角度来看，很多候选人不符合我所招聘岗位的要求。当然，我招聘的是偏技术岗（性能、测试开发、中间件相关），但不能说候选人没有达到某个“级别”，只是说他不适合我招聘的岗位，但是在业务测试方面（比如金融支付、电商订单、供应链进销存等）可能很匹配。这点也引发了我对“级别”定级的思考。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;业内划分&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;一般来说，业内大体的划分模型，会&lt;strong&gt;&lt;span&gt;综合学历、技术能力、工作年限、大厂履历、项目经验以及沟通表达能力&lt;/span&gt;&lt;/strong&gt;来做定级，大体如下面的表格所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;PS&lt;/strong&gt;：&lt;span&gt;这里以软件测试工程师岗位为例！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td rowspan=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;岗位定级&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;6&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;匹配定级条件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;学历专业&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;技术能力&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;工作年限&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;是否有大厂履历&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;项目/业务经验&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;沟通表达/逻辑思维&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;初级&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;应届/1年以内&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;中级&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;1-3年&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;默认升一级&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;高级&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;3-5年&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;默认升一级&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;强匹配度&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;资深&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;5年以上&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;默认升一级&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;强匹配度&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;测试专家&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;5-7年以上&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;强匹配度&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;\&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;这里针对上述六点专门做个说明：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、学历专业&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在业内基本默认是本科学历起步，大厂基本强制卡985/211学历，专业最好是本专业。当然除非你特别优秀，否则学历会成为职场生涯后期的一个桎梏（针对大多数人而言）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、技术能力&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对测试同学来说，通用的技术能力大概如下几点，会的越多，技能越熟练，实战经验越多加分项越多。&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;测试流程（需求-评审-编码-测试-预发-验收-上线）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;接口测试（用工具算是入门，用开源框架或者自己魔改二次开发造轮子算熟练）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;自动化测试（UI很鸡肋，移动端可能好点，跑兼容；做的最多的还是API的自动化，近几年单测&amp;amp;代码覆盖率的占比多了起来）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;CICD（貌似这几年Devops、Testops啥的挺火，然而没几个玩的好的）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;代码能力（这个不好判断到底什么程度才算好，看面试官自己如何定义）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;其他基础技能（协议、操作系统、数据库）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;题外话：性能、安全比较特殊点，也比较小众，路越走越窄，不适合大多数人！&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、工作年限&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参照上面的表格基本没差，当然有些大厂有自己的定义，如阿里的P，现在还是硬通货。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;4、大厂履历&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同样，参照上面的表格和上一个topic的回答。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;5、项目/业务经验&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;举个例子，电商企业，更倾向于有电商业务经验的，因为可以快速适应，降低学习成本，形成即战力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;6、沟通/逻辑思维&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个基本就是看面试时候表现，思维清晰，条理明确，举一反三的候选人，谁都喜欢。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;技能之外&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;看完了上面的划分，下面来谈谈我自己对不同“级别”的工程师的一些理解和看法。当然，按照顺序由初级到资深，我觉得这是另一种成长的过程，可能需要转变一下思维。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;安排我做什么？&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;一般刚入职场的同学，都处在这个阶段，都是被动接受阶段。师兄或者领导安排工作，有什么做什么。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;我能做点什么？&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;这个阶段就到了问题驱动阶段，可以理解为在工作中发现哪里存在不足或者效率低下或者存在风险的点，自发想办法去解决这些问题。在这个过程可以获得一些心理上的满足感和同事领导的认同感。这是一个好的现象，已经开始潜移默化的变强了。。。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;我要做点什么？&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;一般这个阶段，我将之定义为向前一步阶段。基本都是3-5年经验以上的同学，有了一定的职场经验和积累，对未来也有一定的想法，会自发的想做一些事情来获得更多的物质或者其他方面的回报。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;我想做点什么？&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;职场到了一定阶段，追求的除了物质，可能就是自己的一些想法能否借助公司的资源实现了。俗话说好风凭借力，有一定“野心”的同学，这个阶段我建议主动出击，借助一定的公司资源，做一些即能收到认可又可以塑造个人品牌的项目，对职场发展和跳槽以及物质回报，都会有很大的好处。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;跳槽要关注哪些方面&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;关键字：&lt;strong&gt;&lt;span&gt;大公司、宽赛道、技术文化、降维打击！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;大公司&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;作为互联网从业者，我还是建议大部分同学有机会的话，在职场生涯前期，尽可能去大公司，优势如下：&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;流程制度&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;大公司（业内大厂、细分赛道头部公司等）一般来说在流程制度方便比较完善和规范，对于职场新人或者没有大厂经验的同学来说，能快速的了解到，&lt;strong&gt;&lt;span&gt;如何正确规范的做一件事&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;新人培养&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;大公司一般在新人入职后，会有专门的新人落地机制，有师兄带你快速适应相关流程和技术栈，以及比较多的业务串讲，疑问一般都会有问有答，可以快速的熟悉适应。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;技术建设&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;大公司一般来说都会有更完善的基础技术建设、更复杂和多元化的业务技术架构，当然，还有造轮子的机会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于基础技术建设，这里举几个例子：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;较为完善友好的监控告警体系；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;较为方便快捷的服务发布/回滚/灰度/CICD机制；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;岗位职责划分较为明确（甩锅踢皮球也不少，比较心累）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;薪酬体系&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;相比于中小型公司，大公司在员工定级、晋升路径、薪酬体系方面比较完善，你会有比较清晰的晋升认知。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PS：大公司不太好的地方在于，一个萝卜一个坑，对于有想法有野心的同学，会有点煎熬，而且技术能力&amp;amp;业务能力不再是唯一的晋升标准。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;与优秀同行&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;大公司相对来说整体员工水平能力更好，大牛更多，有更多的机会和更优秀的人共事，从他们身上学到好的点。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;宽赛道&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;业务深度&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;这里的业务深度指的是业务的复杂性和依赖性更多，可以了解到很多细节的东西，也许对转行产品有一定帮助。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;举个例子：电商业务中，基本的几个业务模块有会员体系、增长营销体系、支付金融体系、商家体系、商品体系、供应链体系等。大家可以用一些小众的电商APP和天猫京东等对比看看，反推下其中的业务逻辑，会发现很多有意思的不同点。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;业务广度&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;至于业务广度，一般到了一定规模，大部分公司都会走上业务扩张拓展的道路。以我司来说，最开始只有社区相关的业务，后来不断扩展，有了交易、洗护、95分、直播以及跨境海外等相关业务。当然，交易业务可能会不断拓展品类，不同的品类也会有不同的业务逻辑在内。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;接触范围&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;我之前也待过传统线下零售企业，小公司也待过，日常接触的同事基本都是研发运维产品。大公司的话，接触的人从事的岗位，可能会更宽泛，比如技术、产品、业务、运营、客服、营销、线下团队等。我个人认为这对职场发展是有一定好处的，最起码认知盲区会小一点，这点因人而异吧。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;技术文化&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;对于做技术的同学来说，大部分应该都更喜欢技术氛围浓厚，扁平化的企业文化。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;扁平化：&lt;/strong&gt;扁&lt;span&gt;平化意味着沟通协调高效、汇报体系没那么复杂、自我诉求的表达更容易满足。当然，规模越大，汇报层级越多，务虚、部门墙、向上管理、职场PUA可能更多。&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;技术氛围：&lt;/strong&gt;至于技术氛围，以我曾经待过的某家小公司为例，除了写用例测试，就是发布上线，其他没了，你能很快的感受到工作的枯燥乏味。&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;而大公司或者说技术氛围较为浓厚的公司来说，code review、复盘、内部分享、线下沙龙、外部大会等学习机会相对来说会更多一些，至于能否学到或者有所成长，见仁见智。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;降维打击&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;这里为什么会提到降维打击呢？一些同学在大厂工作久了，基本就没什么上升空间了，这个时候，去二线城市或者二线企业，你之前在大厂累积的一些务实或者务虚的东西，就派的上用场了。也算变相的延长职业生涯吧，这点是比较辛酸的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;说白了，能去大厂的毕竟少数，大部分人还在中小企业或者外包来回流浪，不断内卷。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;人是如何不断变强的&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;4月17号受某家企业邀请，做了一次线上直播分享，其中分享的最后一个topic就是：测试同学如何持续成长。下面是我当时画的一个思维导图，供参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7804878048780488&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWhE6JyPxib3yqwgNPjwpjb4BXKwjPjysbx28e11bEiaJhLDnHf5alTzOcARtxkrdFGIhIhokOTHGF3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;615&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;思维转变&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;首先，成长是一个状态和过程，而不是结果，这需要先做到思维上的转变。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;学习实践&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;对于技术同学来说，保持持续学习的状态，快速学习并且大量的实践，是错不了的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;短期内应该学习那些可以快速变现的技能，比如工作中遇到一个问题，去找解决方案并且实践解决，这就是一个快速变现的过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长期来说，应该学习那些不变的知识。互联网行业技术迭代太多，很难样样精样样通，但万变不离其宗，操作系统、数据结构、算法、网络协议、数据库等相关知识，几乎没怎么变化。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;获得反馈&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;学习是需要获得反馈的。实践过程中，遇到了问题，自己尝试去看官方文档、逛论坛社区找解决方案，解决问题后，你收获的就是正向反馈。长此以往，你会发现你累积了很多的知识。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里说个反例，我大概17年学python时候，尝试用python来做自动化相关的事情。那会儿python处在2.7和3.5版本的交替阶段，安装过程就不说了，很多市场上的教材都是2.7的，3.5相关的资料比较少，怎么办呢？自己想办法解决呗。不断解决问题，请教别人的过程中，我对python的熟悉程度，也算学习进度还行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，那个阶段python&amp;amp;自动化比较火热嘛，很多测试群的同学都在学自动化，有的卡在了工具安装环境搭建，有的卡在了框架怎么用，怎么定位页面的元素，有的卡在了不会集成jenkins，不会用allure来出报告，总之到了最后，真正掌握这一套的测试同学，并不多。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;总结复盘&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;我自己近几年一直在坚持一个习惯，每次学习完，解决了某个问题，都会写博客或者笔记记录一下问题以及解决过程及解决方案。每半年会复盘总结下自己目前学习掌握的技能知识，哪里需要加强，哪里学的已经可以满足工作所需，下一阶段我要学习什么。相对来说短期目标比较清晰，长期坚持下来，也就有了较为长远的规划，自己也在这个过程中收获了很多工作以外的东西。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;输出搏新&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;上面说到了写博客，我大概是16年6月28号开通了博客园，写下了自己的第一篇博客。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最开始只是作为学习笔记的，后来关注的人多了起来，我自己也专职做了性能测试，就写了很多性能测试&amp;amp;全链路压测相关的博客，貌似看得人还不少。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大概19年8月份开通了公众号，最开始都是从测试群微信群引流的关注，自己也没特意做一些推广拉新关注，现在也有了5000+的关注，没怎么掉粉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后来在掘金、开源中国、infoQ、知乎等技术平台也尝试了多渠道运营，效果貌似不咋地，但也学到了一些运营拉新相关的知识，聊胜于无吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为什么要说博新这个词呢？因为后来我发现，写技术博客，做分享是有钱可赚的（可能比较俗）。比如微信公众号，我写的比较好的文章我会设置付费阅读，每个月有广告点击费，偶尔还有商业推广打赏等其他外快收入，好歹每个月喝咖啡的钱有了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;坚持久了，个人品牌慢慢建立起来了，有人找我做付费技术咨询，也有人找我做技术分享（有的纯帮忙有的花钱邀请）。长此以往，我也看到了技术&amp;amp;工资之外的未来可能性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;      最后，上面扯了这么多，不是说大家一定要写博客，做分享。&lt;span&gt;而是提供一个参考，一种另类的技术人成长指南，与君共勉。&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>622f3c189d456b97a38e70c2feb90d5f</guid>
<title>Raft 的 Figure 8 讲了什么问题？为什么需要 no-op 日志？</title>
<link>https://toutiao.io/k/funesvi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;em data-darkmode-color-16136621561195=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-style=&quot;max-width: 100%; color: rgb(52, 73, 94); font-family: &amp;quot;Source Sans Pro&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 16px; letter-spacing: 0.544px; text-align: start; white-space: normal; caret-color: rgb(52, 73, 94); background-color: rgb(255, 255, 255); text-size-adjust: auto; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__1&quot; data-darkmode-color-16165880998151=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;strong data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; font-size: medium; letter-spacing: 0.544px; color: rgb(0, 0, 0); font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__2&quot; data-darkmode-color-16094149065186=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(0, 0, 0)&quot; data-darkmode-color-16107273892940=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-color-16121907968588=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16107273892940=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-color-16121907968588=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(217, 33, 66)&quot; data-darkmode-color-16094149065186=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(217, 33, 66)&quot; data-darkmode-color-16107273892940=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-color-16121907968588=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot;&gt;▲ &lt;/span&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(2, 30, 170)&quot; data-style=&quot;max-width: 100%; color: rgb(2, 30, 170); text-align: center; font-size: 11px; letter-spacing: 1px; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__3&quot; data-darkmode-color-16094149065186=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(2, 30, 170)&quot; data-darkmode-color-16107273892940=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-color-16121907968588=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot;&gt;点击上方&quot;多颗糖&quot;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;em data-darkmode-color-16136621561195=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-style=&quot;max-width: 100%; color: rgb(52, 73, 94); font-family: &amp;quot;Source Sans Pro&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 16px; letter-spacing: 0.544px; text-align: start; white-space: normal; caret-color: rgb(52, 73, 94); background-color: rgb(255, 255, 255); text-size-adjust: auto; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__4&quot; data-darkmode-color-16165880998151=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;strong data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; font-size: medium; letter-spacing: 0.544px; color: rgb(0, 0, 0); font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__5&quot; data-darkmode-color-16094149065186=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(0, 0, 0)&quot; data-darkmode-color-16107273892940=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-color-16121907968588=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16107273892940=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-color-16121907968588=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; color: rgb(2, 30, 170); text-align: center; font-size: 11px; letter-spacing: 1px; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__6&quot;&gt;关注公众号&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;发现之前写的 Raft 文章并没有分析过 Figure 8 的问题，而这张图比较容易让人产生歧义，群里讨论过不止一次。在这里谈谈我的理解。&lt;/p&gt;&lt;p&gt;Figure 8 用来说明为什么 Leader &lt;strong&gt;不能提交之前任期的日志，只能通过提交自己任期的日志，从而间接提交之前任期的日志。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4414784394250513&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA1QrN8KibuCOop0Ry6a1C0jQkfHJPlwAUpuREMY95BtHd1zzBOQmP7NicRWqtpj6UBVx2ynKRYvO0wg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;487&quot;/&gt;&lt;/p&gt;&lt;p&gt;先按&lt;strong&gt;错误的情况&lt;/strong&gt;，也就是 Leader 可以提交之前任期的日志。那么上述的流程：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;(a) S1 是任期 2 的 Leader(&lt;em&gt;仔细看，有个黑框&lt;/em&gt;)，日志已经复制到了 S2。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(b) S1 宕机，S5 获得 S3、S4 和 S5 的选票成为 Leader，然后写了一条日志 index=2 &amp;amp; term=3。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(c) S5 刚写完就宕机了，S1 重新当选 Leader，currentTerm = 4，&lt;strong&gt;此刻还没有新的请求进来&lt;/strong&gt;，S1 将 index=2 &amp;amp; term = 2 的日志复制到了 S3，多数派达成，S1 提交了这个日志(注意，&lt;strong&gt;term=2 不是当前任期的日志，我们在讨论错误的情况&lt;/strong&gt;)。然后请求进来，刚写了本地 index=3 &amp;amp; term=4 的日志，S1 就故障了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(d) 这时候 S5 可以通过来自 S2、S3、S4 和自己的投票，重新成为 Leader(currentTerm&amp;gt;=5)，并将 index=2 &amp;amp;&amp;amp; term=3 的日志复制到其他所有节点并提交，此时 &lt;strong&gt;index=2 的日志提交了两次！&lt;/strong&gt;一次 term=2，一次term=3，这是绝对不允许发生的，已经提交的日志不能够被覆盖！&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(e) 这里的情况是，S1 在宕机之前将自己 term=4 的日志复制到了大多数机器上，这样 S5 就不可能选举成功。这是 S1 不发生故障，正确复制的情况。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这里主要通过 (c) 和 (d) 来说明问题所在。其实这张图用 Raft 大论文的图会比较好理解。(d) 和 (e) 分别对应 term=4 有没有复制到多数派的情况。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9674620390455532&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA1QrN8KibuCOop0Ry6a1C0jQMg5mtAib50Xeia0mXiap5Sb4Q8YsBqx0TibibgEdl2AicfnibrBGqJx2OAjtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;922&quot;/&gt;&lt;/p&gt;&lt;p&gt;所以，&lt;strong&gt;我们要增加提交的约束，不让 (d) 这种情况发生&lt;/strong&gt;。这个约束就是，&lt;strong&gt;Leader 只能提交自己任期的日志&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;我们再来看看，加了约束后会变成什么样？前面 (a) 和 (b) 没有任何改变，我们从 (c) 开始。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;(c) 还是将 index=2 &amp;amp; term=2 复制到大多数，&lt;strong&gt;由于 currentTerm = 4，所以不能提交这条日志&lt;/strong&gt;。如果 S1 将 term = 4 的日志复制到多数派，那么 Leader 就可以提交日志，index=2 &amp;amp; term=2 也会间接一起提交，其实这就是 (e) 的情况，1-2-4 都被提交。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(d) 的情况我觉得是理解问题的关键。如果 S1 只将 term=4 写入自己的日志，然后宕机了；S5 选举成功成为 Leader，然后将 index=2 &amp;amp; term=3 的日志复制到所有节点，&lt;strong&gt;现在 index=2 是没有提交过的，S5 能提交 index=2 &amp;amp; term=3 的日志吗？&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;答案是不能&lt;/strong&gt;。因为 S5 在 S1(term=4) 选举出来后 currentTerm 至少是 5，也可能是 6、7、8……我们假设就是 5，但这条日志 term = 3，&lt;strong&gt;Leader 不能提交之前任期的日志，所以这条日志是不能提交的。&lt;/strong&gt;只有等到新的请求进来，超过半数节点复制了 1-3-5 后，term=3 的日志才能跟着 term=5 的一起提交。&lt;/p&gt;&lt;p&gt;虽然加了这个约束不会重复提交了，但如果一直没新的请求进来，index=2 &amp;amp; term=3 岂不是就一直不能提交？那这里不就阻塞了吗？如果这里是 kv 数据库，问题就很明显了。假设 (c) 或 (d) 中 index=2 那条日志里的 Command 是 &lt;code&gt;Set(&quot;k&quot;, &quot;1&quot;)&lt;/code&gt;，S5 当选 Leader 后，客户端来查询 &lt;code&gt;Get(&quot;k&quot;)&lt;/code&gt;，Leader 查到日志有记录但又不能回复 1 给客户端(因为按照约束这条日志未提交)，线性一致性要求不能返回陈旧的数据，Leader 迫切地需要知道这条日志到底能不能提交。&lt;/p&gt;&lt;p&gt;所以 raft 论文提到了引入 no-op 日志来解决这个问题。这个在 etcd 中有实现。&lt;/p&gt;&lt;h2&gt;引入 no-op 日志&lt;/h2&gt;&lt;p&gt;no-op 日志即只有 index 和 term 信息，command 信息为空。也是要写到磁盘存储的。&lt;/p&gt;&lt;p&gt;具体流程是在 Leader 刚选举成功的时候，立即追加一条 no-op 日志，并立即复制到其它节点，no-op 日志一经提交，Leader 前面那些未提交的日志全部间接提交，问题就解决了。像上面的 kv 数据库，有了 no-op 日志之后，Leader 就能快速响应客户端查询了。&lt;/p&gt;&lt;p&gt;本质上，no-op 日志使 Leader 隐式地快速提交之前任期未提交的日志，确认当前 &lt;code&gt;commitIndex&lt;/code&gt;，这样系统才会快速对外正常工作。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;另外说一句，6.824 的实验不需要实现 no-op 日志。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这个问题之前阿里巴巴团队称之为“幽灵复现”，参见《&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247494453&amp;amp;idx=1&amp;amp;sn=17b8a97fe9490d94e14b6a0583222837&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;如何解决分布式系统中的“幽灵复现”？&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;如何解决分布式系统中的“幽灵复现”？&lt;/a&gt;》，里面讨论了 Paxos、Raft 和 Zab 的解决方案。&lt;/p&gt;&lt;h2&gt;相关阅读&lt;/h2&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwODA2NjIxOA==&amp;amp;mid=2247484284&amp;amp;idx=1&amp;amp;sn=c18c27cdc1b21b99ab8375fb8c5ff80e&amp;amp;chksm=970980b9a07e09af010a31930559b73bc7757951ce3a5c02658fad61b1ded538e0542f0aabd9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;运行 3000 次都不出错的 MIT 6.824 Raft 实验&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;em data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot;&gt;运行 3000 次都不出错的 MIT 6.824 Raft 实验&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;欢迎关注我的公众号：&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwODA2NjIxOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA0g3RQ9bRYaJib92ovwsSB9pPup1lt5cB24cJVJia1dc3Nr2kFSBHsJq5HL9DcLhoAGribSBvHU7ZzjA/0?wx_fmt=png&quot; data-nickname=&quot;多颗糖&quot; data-alias=&quot;duoketang&quot; data-signature=&quot;分布式系统和个人成长。我想要说的，前人们都说过了。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2c3c4ed75c42ac9b5cabc88b975493d3</guid>
<title>Kafka 不再需要 ZooKeeper</title>
<link>https://toutiao.io/k/07qzmoj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.562&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl90s4YEWASPaYA3eo3smu2HtjetZW6LAGfehZHZW3EQrbf7KMuMgoricgHHYqbHt7SOksFIl6G5OA5A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 2.8.0 出炉了，此版本有一项重大改进：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;实现了 Raft 分布式一致性机制，意味着可以脱离 ZooKeeper 独立运行了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ZooKeeper 在 Kafka 中扮演着重要的角色，用来存储 Kafka 的元数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ZooKeeper 存储着 Partition 和 Broker 的元数据 ，同时也负责 Kafka Controller 的选举工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于 Kafka 来讲，ZooKeeper 是一套外部系统，要想部署一套 Kafka 集群，就要同时部署、管理、监控 ZooKeeper。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ZooKeeper 有自己的配置方式、管理工具，和 Kafka 完全不一样，所以，一起搞两套分布式系统，自然就提升了&lt;strong&gt;复杂度&lt;/strong&gt;，也更容易出现问题。有时工作量还会加倍，例如要开启一些安全特性，Kafka 和 ZooKeeper 中都需要配置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了复杂度，外部存储也会降低系统&lt;strong&gt;效率&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如 Kafka 集群每次启动的时候，Controller 必须从 ZooKeeper 加载集群的状态信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再比如选举出一个新的 Controller 之后也会比较麻烦，因为需要加载元数据，而此时元数据的量可能已经非常大了，这就产生了效率问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，ZooKeeper 带来的复杂度、系统效率这两个问题已经成为 Kafka 的痛点，Kafka 团队一直在努力去除对 ZooKeeper 的依赖。Kafka 2.8.0 这个版本终于实现了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 Raft 模式之后，元数据、配置信息都会保存在 &lt;code&gt;@metadata&lt;/code&gt; 这个 Topic 中，自动在集群中复制。这样 Kafka 就会简单轻巧很多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但需要&lt;strong&gt;注意&lt;/strong&gt;的是，Zookeeper-less Kafka 还属于早期版本，并不完善，所以，现在&lt;strong&gt;不要&lt;/strong&gt;应用在线上产品环境中。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ab54042f3cde18ab2c0128bd06521d6a</guid>
<title>ThreadLocal 使用与原理</title>
<link>https://toutiao.io/k/efrdgy5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在处理多线程并发安全的方法中，最常用的方法，就是使用锁，通过锁来控制多个不同线程对临界区的访问。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，无论是什么样的锁，乐观锁或者悲观锁，都会在并发冲突的时候对性能产生一定的影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那有没有一种方法，可以彻底避免竞争呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是肯定的，这就是ThreadLocal。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从字面意思上看，ThreadLocal可以解释成线程的局部变量，也就是说一个ThreadLocal的变量只有当前自身线程可以访问，别的线程都访问不了，那么自然就避免了线程竞争。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，ThreadLocal提供了一种与众不同的线程安全方式，它不是在发生线程冲突时想办法解决冲突，而是彻底的避免了冲突的发生。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;ThreadLocal的基本使用&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建一个ThreadLocal对象：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; ThreadLocal&amp;lt;Integer&amp;gt; localInt = &lt;span&gt;new&lt;/span&gt; ThreadLocal&amp;lt;&amp;gt;();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述代码创建一个localInt变量，由于ThreadLocal是一个泛型类，这里指定了localInt的类型为整数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面展示了如果设置和获取这个变量的值：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;setAndGet&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    localInt.set(&lt;span&gt;8&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; localInt.get();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述代码设置变量的值为8，接着取得这个值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于ThreadLocal里设置的值，只有当前线程自己看得见，这意味着你不可能通过其他线程为它初始化值。为了弥补这一点，ThreadLocal提供了一个withInitial()方法统一初始化所有线程的ThreadLocal的值：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; ThreadLocal&amp;lt;Integer&amp;gt; localInt = ThreadLocal.withInitial(() -&amp;gt; &lt;span&gt;6&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述代码将ThreadLocal的初始值设置为6，这对全体线程都是可见的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;ThreadLocal的实现原理&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ThreadLocal变量只在单个线程内可见，那它是如何做到的呢？我们先从最基本的get()方法说起：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; T &lt;span&gt;get&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;//获得当前线程&lt;/span&gt;&lt;br/&gt;    Thread t = Thread.currentThread();&lt;br/&gt;    &lt;span&gt;//每个线程 都有一个自己的ThreadLocalMap，&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;//ThreadLocalMap里就保存着所有的ThreadLocal变量&lt;/span&gt;&lt;br/&gt;    ThreadLocalMap map = getMap(t);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (map != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;//ThreadLocalMap的key就是当前ThreadLocal对象实例，&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;//多个ThreadLocal变量都是放在这个map中的&lt;/span&gt;&lt;br/&gt;        ThreadLocalMap.Entry e = map.getEntry(&lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (e != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;@SuppressWarnings&lt;/span&gt;(&lt;span&gt;&quot;unchecked&quot;&lt;/span&gt;)&lt;br/&gt;            &lt;span&gt;//从map里取出来的值就是我们需要的这个ThreadLocal变量&lt;/span&gt;&lt;br/&gt;            T result = (T)e.value;&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; result;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 如果map没有初始化，那么在这里初始化一下&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; setInitialValue();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，所谓的ThreadLocal变量就是保存在每个线程的map中的。这个map就是Thread对象中的threadLocals字段。如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ThreadLocal.ThreadLocalMap threadLocals = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ThreadLocal.ThreadLocalMap是一个比较特殊的Map，它的每个Entry的key都是一个弱引用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Entry&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;WeakReference&lt;/span&gt;&amp;lt;&lt;span&gt;ThreadLocal&lt;/span&gt;&amp;lt;?&amp;gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;/** The value associated with this ThreadLocal. */&lt;/span&gt;&lt;br/&gt;    Object value;&lt;br/&gt;    &lt;span&gt;//key就是一个弱引用&lt;/span&gt;&lt;br/&gt;    Entry(ThreadLocal&amp;lt;?&amp;gt; k, Object v) {&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;(k);&lt;br/&gt;        value = v;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样设计的好处是，如果这个变量不再被其他对象使用时，可以自动回收这个ThreadLocal对象，避免可能的内存泄露（注意，Entry中的value，依然是强引用，如何回收，见下文分解）。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;理解ThreadLocal中的内存泄漏问题&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然ThreadLocalMap中的key是弱引用，当不存在外部强引用的时候，就会自动被回收，但是Entry中的value依然是强引用。这个value的引用链条如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.1510015408320493&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uChmeeX1Fpzfd7JmFnEfgLDU1vmaOKiamr2KxFLKaQ7icgpibwdBuGBKSB21oqCQKoKRXaDmtnmJndNTzPniaOcctw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;649&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，只有当Thread被回收时，这个value才有被回收的机会，否则，只要线程不退出，value总是会存在一个强引用。但是，要求每个Thread都会退出，是一个极其苛刻的要求，对于线程池来说，大部分线程会一直存在在系统的整个生命周期内，那样的话，就会造成value对象出现泄漏的可能。处理的方法是，在ThreadLocalMap进行set(),get(),remove()的时候，都会进行清理：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以getEntry()为例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; Entry &lt;span&gt;getEntry&lt;/span&gt;&lt;span&gt;(ThreadLocal&amp;lt;?&amp;gt; key)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; i = key.threadLocalHashCode &amp;amp; (table.length - &lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;    Entry e = table[i];&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (e != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; e.get() == key)&lt;br/&gt;        &lt;span&gt;//如果找到key，直接返回&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; e;&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;//如果找不到，就会尝试清理，如果你总是访问存在的key，那么这个清理永远不会进来&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; getEntryAfterMiss(key, i, e);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是getEntryAfterMiss()的实现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; Entry &lt;span&gt;getEntryAfterMiss&lt;/span&gt;&lt;span&gt;(ThreadLocal&amp;lt;?&amp;gt; key, &lt;span&gt;int&lt;/span&gt; i, Entry e)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    Entry[] tab = table;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; len = tab.length;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;while&lt;/span&gt; (e != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;// 整个e是entry ，也就是一个弱引用&lt;/span&gt;&lt;br/&gt;        ThreadLocal&amp;lt;?&amp;gt; k = e.get();&lt;br/&gt;        &lt;span&gt;//如果找到了，就返回&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (k == key)&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; e;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (k == &lt;span&gt;null&lt;/span&gt;)&lt;br/&gt;            &lt;span&gt;//如果key为null，说明弱引用已经被回收了&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;//那么就要在这里回收里面的value了&lt;/span&gt;&lt;br/&gt;            expungeStaleEntry(i);&lt;br/&gt;        &lt;span&gt;else&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;//如果key不是要找的那个，那说明有hash冲突，这里是处理冲突，找下一个entry&lt;/span&gt;&lt;br/&gt;            i = nextIndex(i, len);&lt;br/&gt;        e = tab[i];&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;真正用来回收value的是expungeStaleEntry()方法，在remove()和set()方法中，都会直接或者间接调用到这个方法进行value的清理：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从这里可以看到，ThreadLocal为了避免内存泄露，也算是花了一番大心思。不仅使用了弱引用维护key，还会在每个操作上检查key是否被回收，进而再回收value。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是从中也可以看到，ThreadLocal并不能100%保证不发生内存泄漏。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，很不幸的，你的get()方法总是访问固定几个一直存在的ThreadLocal，那么清理动作就不会执行，如果你没有机会调用set()和remove()，那么这个内存泄漏依然会发生。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，一个良好的习惯依然是：&lt;strong&gt;当你不需要这个ThreadLocal变量时，主动调用remove()，这样对整个系统是有好处的&lt;/strong&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;ThreadLocalMap中的Hash冲突处理&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ThreadLocalMap作为一个HashMap和java.util.HashMap的实现是不同的。对于java.util.HashMap使用的是链表法来处理冲突：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4334862385321101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uChmeeX1Fpzfd7JmFnEfgLDU1vmaOKiam7mYzh4cZ1JP1twTu4iaYula2KuCAc6JKVyEraILjdzr98AWjZ9B4Nzw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;436&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，对于ThreadLocalMap，它使用的是简单的线性探测法，如果发生了元素冲突，那么就使用下一个槽位存放：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4013761467889908&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uChmeeX1Fpzfd7JmFnEfgLDU1vmaOKiamAO1wBiaRFU28le6Ggwks9Hicu8WmMHUFibNk0hGc7ewNREKiaOmR5Rvo2A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;436&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体来说，整个set()的过程如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9953917050691244&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uChmeeX1Fpzfd7JmFnEfgLDU1vmaOKiamE4oJ20326zgoaCwcdOMWBRXCPvSuo81b3HFOLZ12ZuxpAD57s3bapQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1085&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;可以被继承的ThreadLocal——InheritableThreadLocal&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际开发过程中，我们可能会遇到这么一种场景。主线程开了一个子线程，但是我们希望在子线程中可以访问主线程中的ThreadLocal对象，也就是说有些数据需要进行父子线程间的传递。比如像这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    ThreadLocal threadLocal = &lt;span&gt;new&lt;/span&gt; ThreadLocal();&lt;br/&gt;    IntStream.range(&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;10&lt;/span&gt;).forEach(i -&amp;gt; {&lt;br/&gt;        &lt;span&gt;//每个线程的序列号，希望在子线程中能够拿到&lt;/span&gt;&lt;br/&gt;        threadLocal.set(i);&lt;br/&gt;        &lt;span&gt;//这里来了一个子线程，我们希望可以访问上面的threadLocal&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; Thread(() -&amp;gt; {&lt;br/&gt;            System.out.println(Thread.currentThread().getName() + &lt;span&gt;&quot;:&quot;&lt;/span&gt; + threadLocal.get());&lt;br/&gt;        }).start();&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            Thread.sleep(&lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;    });&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行上述代码，你会看到：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Thread-&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;null&lt;/span&gt;&lt;br/&gt;Thread-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;null&lt;/span&gt;&lt;br/&gt;Thread-&lt;span&gt;2&lt;/span&gt;:&lt;span&gt;null&lt;/span&gt;&lt;br/&gt;Thread-&lt;span&gt;3&lt;/span&gt;:&lt;span&gt;null&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为在子线程中，是没有threadLocal的。如果我们希望子线可以看到父线程的ThreadLocal，那么就可以使用InheritableThreadLocal。顾名思义，这就是一个支持线程间父子继承的ThreadLocal，将上述代码中的threadLocal使用InheritableThreadLocal：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;InheritableThreadLocal threadLocal = &lt;span&gt;new&lt;/span&gt; InheritableThreadLocal();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再执行，就能看到：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Thread-&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;br/&gt;Thread-&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;&lt;br/&gt;Thread-&lt;span&gt;2&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;&lt;br/&gt;Thread-&lt;span&gt;3&lt;/span&gt;:&lt;span&gt;3&lt;/span&gt;&lt;br/&gt;Thread-&lt;span&gt;4&lt;/span&gt;:&lt;span&gt;4&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，每个线程都可以访问到从父进程传递过来的一个数据。虽然InheritableThreadLocal看起来挺方便的，但是依然要注意以下几点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;变量的传递是发生在线程创建的时候，如果不是新建线程，而是用了线程池里的线程，就不灵了&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;变量的赋值就是从主线程的map复制到子线程，它们的value是同一个对象，如果这个对象本身不是线程安全的，那么就会有线程安全问题&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;写在最后的话&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天，我们介绍了ThreadLocal，ThreadLocal在Java的多线程开发中有着十分重要的作用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里，我们介绍了ThreadLocal的基本使用和实现原理，尤其重点介绍了基于当前实现原理下可能存在的内存泄漏问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，还介绍了一个用于在父子线程间传递数据的特殊的ThreadLocal实现，希望对大家有所帮助。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我是敖丙，你知道的越多，你不知道的越多，我们下期见。&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>