<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f06a22e68546939003be28a1bf91b21c</guid>
<title>7 年，从 “游戏少年” 到大厂技术总监的逆袭之路</title>
<link>https://toutiao.io/k/9dk11zm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;▲ &lt;/span&gt;&lt;span&gt;点击上方&quot;pointers&quot;&lt;/span&gt;&lt;span&gt;关注公众号&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6671875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4XQ0RVoHjpx5goZfBeXlEAXKs4NWzw4NicUh9cibYTkicNGvnKxDEic4tgm0CVlGYj9ib9o9FW4LGcpR7q3lEeA3yVA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;成长&amp;amp;认知 &lt;/span&gt;&lt;/strong&gt;丨 作者&lt;/span&gt;&lt;span&gt; / &lt;/span&gt;&lt;span&gt;袁吴范&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;pointers公众号&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;分享的第&lt;/span&gt;&lt;span&gt;&lt;strong&gt;21&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;篇原创文章&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;写了20篇原创文章，一直没有正式的介绍过自己，一方面粉丝太少，另一方面确实没有时间写。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;算一算在杭州已经有11个年头了。算是一个彻头彻尾的杭漂，现在已经在杭州安家立业。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;希望大家看过我的经历，能够给到北漂、深漂和杭漂们一些&lt;/span&gt;鼓&lt;span&gt;励。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt; 1&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;无知&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我是浙江人，出生在浙北的一个普通农村家庭，按照我老婆的话说是自带土气，这恐怕是农村人与生俱来的气质了吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从小家里条件不是很好，在我模糊的印象中，冬天家里总是断电，父亲就会肩扛竹竿，在竹林里寻找断开的电线，再用竹竿把两头断线接上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当时年小的我还不知道这个小小操作是如此的危险，就是觉得父亲总是什么都能搞定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;应该是“开窍”晚的原因吧，直到一年级前，还不会从1数到10，别人家的娃已经可以加减乘除了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在小学期间，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;我的成绩表现的可以用糟糕来形容&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小学的成绩一直排名垫底，行动表现上，一直后知后觉，呆头呆脑，用我妈的话说就是傻傻的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从那个时候开始就被我妈一直用别人家娃来激励我。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你看别人芳芳又拿三好学生了&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;你看别&lt;/span&gt;人&lt;span&gt;优优又考试第一名了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;不过还好，我有一点还可以的，就是体育&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在四年级的时候还获得镇上同年级200米和50米短跑比赛的第一名。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为此学校的领导还在国旗前给我了奖状。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;这个奖状也就成为我小学期间唯一的奖状，有点心酸。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以我一直认为在小学期间，体育是最重要的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一般体育好的学生，文化课都不会差，就算现在差，以后也会追上来的。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt; 2&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;懵懂&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;初中的时候，进入到了镇上的中心学校，这所学校在县里应该算是最差的那种了吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在学校里，我第一次看到了电脑，当时看这个屁股大大的东西，看着很高科技感觉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当时并不知道，这还只是个显示器，主机是在桌子下面的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;初一开始有了电脑课，当时的电脑课的机房是这样的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.752&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4XQ0RVoHjpwNmxAHfN2Sm5WGKL0QEVndLcoxwMMaeYibBJr0dJ7ZacKlibQK5In8eRbvK5ITrPnBQO89nq2R0aRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用的已经是xp系统了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;01年xp系统发布，03年我初一，现在想想当时用的还是挺先进的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最开始学习的就是word，然后还学了flash制作动画，我也不知道学校为什么让学这个。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之前对电脑只是存在脑海中的一个静态画面，当我第一次看到电脑能够通过笨拙的鼠标控制，我被震撼了，还可以这样用？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我就被这个样子看起来怪怪的东西，深深的吸引了。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;快速发展20年的互联网，让人感到唏嘘，新技术层出不穷，微软还是那么的能打，从pc时代到移动互联时代，强者恒强，office套件已经家喻户晓，而flash逐渐快被淘汰。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;扯远了，话题拉回来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在当时，电脑课是我最喜欢的课程，因为我学的很快，每次课堂作业，都是第一个完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就因为接受的比较快，还经常被老师在课堂上，点名表扬。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这在其他课上还不可能存在的。不被老师抓到办公室批评就不错了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在那时，就是比较简单的想法，下定决心，一定要熟练的操作电脑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就因为对电脑的热爱，心中的火苗彻底被点燃，学会了一样对我之后的发展影响极大的技能，就是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;盲打字的习惯&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;高中&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进入高中后，学习成绩突飞猛进，一直在前十的状态，在县里的排名一直在前100名。按照以前的经验，前60名，就可以进入浙大了。所以高中阶段，一直是把浙大当做我的大学目标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可是高考成绩彻底将我的梦击碎，我的成绩只高出一本线20分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那段时间，情绪一直比较低迷，感觉世界都要崩塌，又来经过家人、朋友和老师的辅导下，渐渐缓了过来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;填报志愿时候，没有选择离开浙江，还是填报了杭州的一所双非学校。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;浙江只有一所985、211高校，大家都懂了吧，浙江的学生难啊。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt; 大学&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进入大学之后，下定决定刻苦学习，发誓要考上浙大研究生，去实现自己未完成的梦。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可我的毅力弱的性格，再一次击败了我。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整个大学四年，都沉迷在dota这款游戏当中。就是下图这个，大家好好看看，是不是很熟悉？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4XQ0RVoHjpwNmxAHfN2Sm5WGKL0QEVnddoQ0TicJDS7sDpgl9bVzPfiaWUNPVfWTssjw6Ea2c71U8icicBsHzm7rjw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最疯狂的一次，在天梯平台上，为了冲分数，从早上的八点，一直打到第二天的晚上的八点。整整36个小时，除了上厕所没有离开过凳子。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整个大学生涯中，除了必须要签到的课，其他的基本没有参加过。不过还好，我没有挂科，我总是能最后时间内，完成临时抱佛脚，考试通过。顺利完成了毕业。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;心心念念的考研，去浙大上学，在颓废中，逐渐的放弃了。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt; 3&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;初露锋芒&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我的人生转折点，是在毕业找工作的那段时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;找了好几个月，都是产线普工的岗位，或者是需要经常出差的技术支持岗，又或者是销售岗位。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根本不是我想要做的研发岗。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;在一次和我妈妈电话的过程中，我哭了。这是我大学四年来第一次流泪。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;男儿有泪不轻弹啊&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;感谢残酷而又现实的社会，让我感受到了可能会饿死的危机感和城市中无法生存的绝望感。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一下子就把我迷迷糊糊的脑子，彻底打醒了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;心灰意冷的我，我静下心想了一个星期，下定决心，给自己定了一个小目标&lt;/span&gt;&lt;span&gt;&lt;strong&gt;：一周之内把常见的面试题全部刷了一遍，先找一个小厂，干几年学到技术之后，最终跳槽去大厂。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了实现这个目标，我近乎疯狂的学习，每天睡4个小时。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;终于功夫不负有心人，有一家新成立的创业公司，面试期间，我表现出的基础能力得到了面试官的认可，顺利拿到了研发岗的offer。不知道那天晚上多开心，立即给我妈打电话报喜。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那家创业公司是要开发一款智能机器人，带队的是浙大航天学院的一个副教授，擅长机器视觉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是我实现目标过程中的选择，我到现在都觉得是一个正确的选择，也感谢当时给我机会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里的氛围是科研氛围，感觉能够学到东西（虽然工资很低，但是当时没有考虑薪资方面，有自知之明，管饱就行）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来就是没日没夜的看书，弥补自己的大学欠下的债。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;晚上9点下班，骑车回家，洗漱好，10点钟看书到12点睡觉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;早上6点起床，看书到9点，骑车上班。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;甚至不放过吃饭时间——边吃饭边看书，这样的状态一直持续了2年。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是我毕业后，工作前期这个阶段，我觉得需要做到3点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.深蹲&amp;amp;积累&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个阶段，认知收益和认知成本的比值非常小。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好在我自己深知能力积累的“非线性增长”规律，所以也并没有过于气馁和急躁，一直积攒着能量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我觉得，造成我们和优秀同事之间的能力巨大鸿沟的决定性因素其实是“知识能力”积累到一定程度带来的自身增值速度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只有深蹲，积攒强大的能量，在某个时刻能瞬间打通了任督二脉，厚积薄发，职场中一路飙升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.整合&amp;amp;建立认知链接&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我认识到了积累的重要性了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是对不起，即便是日以继夜的积累，也可能达不到能力提升的目的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最好还差一步，就是需要系统性思维。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过长期积累的知识并没有纳入到你自己的知识体系中去，他们还只是单纯的孤立的知识点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们的记忆本质就是记忆逻辑，也就是记忆关联。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们需要将新知识和已有的认知进行连接。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样才能达到融会贯通，才能达到信手拈来的程度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;那如何培养自己的系统思维呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我自己的学习方式是每当我学习到一个全新知识的时候，我会去思考这个知识点与我脑中现有的知识系统有何联系。然后再去想，我该去如何使用这些知识。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;打一个比方。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我学习数据结构的时候，其中有链表，二叉树等等，这时候你就要去想，这些数据结构是怎么使用的？在你的工作中哪些地方可以用到。跟你脑中的已经学习到的例如Linux内核有关系吗？是不是Linux内核中也使用这些数据结构？内核中为什么要这样使用的？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过这一番深度思考之后，是不是对知识的理解更加深刻，也就真正成为了我自己的东西了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;仔细想想为什么常常我们道理都明白，却很难做到？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;其实很多时候我们都犯了一个巨大的错误，那就是误把“知道”当作“明白”或者“感悟”。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;想知道，道理很容易，那些祖训大家都耳熟能详，但往往真正明白并内化到自己的骨子里却需要付出不少的精力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再看极少数身边优秀的人，在年轻时就能把这些有价值的道理真正内化到了自己的行动上，不得不说这才是他们身上一直被人们忽略的最大的天赋。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.起跳&amp;amp;突破&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不要满足于当前的得过且过状态，你身边的同事们正在暗暗较劲，拼劲学习，努力积累经验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此时将你们进行横向对比，确实差别不大。正所谓逆水行舟不进则退，倘若再过几年呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在认知收益和认知成本比值不断增大的情况下，在温水煮青蛙的状态下，在你还没有意识到时，对方能力的已经把你甩的老远。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此时，对方已经开始崭露头角，领导的资源就慢慢向他倾斜。那时，你该如何是好呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;不要在本该奋斗的年纪选择安逸，那样以后的路越来越难走。天底下没有速成的秘诀，没有捷径可走。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;时刻保持危机感，设立高标准，严格要求自己。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你要相信，能力是存在跃升，只是时间未到，多点耐心。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你要相信，认知收益和成本会急剧的增大，要多积累。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你要对自己的认知进行整合，建立认知链接，打造自己的知识体系。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt; 4&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;披荆斩棘&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这小厂的2年时间内，我就像井底的青蛙，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;虽然练就了“一身武艺”&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，但并不知道外面大厂的流程制度规范，技术能力到底是怎样的情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，我决定跳出这个小圈子，去外面看一看、闯一闯。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后来大家也知道了，我进入了海康。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.赢得好印象&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;进入海康，第一件事情就是，赢得好印象。怎么做呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;刚来第一个月里，一般情况下就是熟悉团队氛围和公司制度、文化的阶段，而我发现代码中的兼容性、扩展性都比较差，而且耦合特别大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就强制要求自己每天早上非常早的就来公司，晚上几乎11、12点下班，在一个月时间内就输出了一份软件架构方案，递到了领导的手上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后虽然方案还是有漏洞，但是大的问题没有，在第二年就慢慢切换使用我设计的架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过这件事情，我获得了什么？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;在领导、同事心里：“能力强”，“有拼劲”，“执行力强”的标签，就一直伴随着我。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;获取正面的标签，这还不够，还需要做一件事情，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;持续增加曝光&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;好印象=好的第一印象＋持续增加曝光&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当时作为新员工进来，一直非常的拼，在别人的印象中就是有拼劲，同时能力非常强，而且这种状态一直保持了5年，这就是持续地曝光。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;凡是都是有因果的，没有无缘无故的成功，只是很多的“因”由于自身的认知局限而被忽视了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个阶段，我已经完成了领导心中的好印象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我要成功真正的管理者，必须要完成管理跃升&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.完成管理跃升&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这次的跃升，是我真正叩开了管理的大门。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然只是叩开了大门，但这对我来说，是整个能力系统的改变。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当我还是个人贡献者时，我的能力是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;发现问题、解决问题、总结和反思&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而我是基层管理者时，我的能力要求，完全发生了变化：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;自己的工作发生了彻底的变化，要求变成了&lt;/span&gt;&lt;span&gt;协调、组织、反馈&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以下面这4个升级一定要做到。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一个升级，叫责任升级&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在个人贡献者的时候，我是对任务负责，领导交给我一件事情，把任务的细节和deadline告诉我。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我只需要在deadline之前，把这件事干好，就OK了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如：领导让我开发一个界面，开发一个测试工具等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而现在我需要对这个事情的结果负责。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也就是，同样是一样事情，不是由我亲自去干，而是由我分配任务给到下属，教练指导下属去完成这个任务，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个任务的结果好坏都是由我自己来承担&lt;/span&gt;&lt;span&gt;。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;切记中间多坎坷，作为基层管理者，都需要想方设法的达成目标&lt;/span&gt;&lt;span&gt;，因为这是你的责任。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二个升级，叫做行动升级&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在从单打独斗，成为了一个团队的管理者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为一个新经理，总是会犯的一个错误，就是“总是觉得别人做的不好，自己亲自来”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个想法是非常愚蠢的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个人能力再强，也干不过一个有组织的团队。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;有一次一个系统崩溃问题，我并没有亲自去解决，而是&lt;/span&gt;&lt;span&gt;安排好计划，定好合适的责任人，下达任务命令。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;记住，千万不要替代他们解决问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第三个升级，叫做协作升级&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在个人贡献者时，我的工作关系，比较简单，组内同事和领导。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当成为管理者时，工作关系，会变得复杂，领导、下属、兄弟同事、外部客户等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这时候的协作方式就需要发生大的变化，我不仅仅需要考虑下属和领导，还需要考虑其他外部关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;在这期间我组织完成了一件重大的技术方案落地的项目，项目人员涉及到全公司各个领域，公共项目人员在&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;+人。关系变得复杂，工作的协作方式也需要升级。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从单纯的组内同事之间的技术协作，升级为组间的配合协作和技术协作的混合模式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从封闭的协作范围，升级为开发的协作范围。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注的不仅仅是组内的工作，还需要考虑其他部门的工作情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正如数学概念中的面升级到立体三维空间，协作方式也需要进行全新的升级&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第四个升级，叫做成就升级&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我从个人成就，升级到团队成就。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过我的管理，我的下属持续成长，团队能力越来越强，这就是团队成就。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为基层管理者，只是单单做到个人成就，不注重成就下属，我们的团队是很难做强的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个团队的不强，想想你还能晋升吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为一个团队的老大，需要有成就下属的胸怀，才能走的更远。&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;就这样，&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;年时间，我完成了&lt;/span&gt;&lt;span&gt;责任升级，行动升级，协作升级，成就升级&lt;/span&gt;&lt;span&gt;，这个阶段也算真正的一名管理者了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最终，&lt;/span&gt;&lt;span&gt;事实也证明了，&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;年后，也就是&lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;&lt;span&gt;年，我成功晋升为技术经理，带领着10+人的团队。&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt; 5&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;笑傲江湖&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2018年至2020年，这段时间是我的另一次的自我进化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我称之为领导跃升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我从技术经理晋升到了技术总监。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这次跃升，是从基层管理者，跃升到团队的领导者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;成为领导者需要从局部把控，变为对全局的掌握，领导团队运筹帷幄，披荆斩棘，以弱胜强，最终走向胜利。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我是从下面2个升级，完成了这个跃升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一个就是战略升级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;战略相对于战术，而战术只为实现战略的手段之一，基层管理者做的就是战术。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;争一时之长短，用战术就可以达到！如果是“争一世之雌雄”，就需要从全局出发去规划，这就是战略！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;什么意思？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;运用到企业管理上就是要”&lt;/span&gt;&lt;span&gt;做正确的事情&lt;/span&gt;&lt;span&gt;“。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而团队领导者，最重要的职责，是制定部门的战略目标、组织文化建设。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要完成什么目标，怎么和供应商合作？规划未来3到5年做什么。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;团队需要怎样的组织架构，需要怎样的文化氛围等等。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二个就是影响力升级&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;影响力是用一种别人所乐于接受的方式，改变他人的思想和行动的能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;影响力，是一个非常重要的武器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我通过影响力，建立了部门内的文化价值观，愿景，并且以身作则，激励团队，可以产生巨大的凝聚力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我们的团队正在破釜沉舟，越战越勇，期待我们部门分拆，独立上市的一天到来&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt; 6&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;最后&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们职场生涯就是一次次对自己能力重构的过程，保持持续突破。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当你学会了走路，就要想学着跑步，当你学会了跑步，就要想着到水里，学着游泳。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一直在不断的超越自我的路上，终生学习。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我是袁吴范，帮助你提升认知和能力提升。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__134&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;推荐阅读（干货）&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247484039&amp;amp;idx=1&amp;amp;sn=64ff331bd87889216754aa60311a493e&amp;amp;chksm=cf209795f8571e83b586a3211a4bea0343b053ba347ccb5c6b89b4c410a396ce90ee23049de5&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;面试过200人的经验，都在这里了&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247484027&amp;amp;idx=1&amp;amp;sn=fb6fe35037e1693bf0f1c0a81d059bdc&amp;amp;chksm=cf209769f8571e7f311b5195d1f4c8fc1dc7f6905375bbdc6b0afbec0abc4775889b1012db7c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;程序员成为高级管理者的三次跃升&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247484011&amp;amp;idx=1&amp;amp;sn=e52d915760314e3300c145039ede831b&amp;amp;chksm=cf209779f8571e6f81be5951b70607c2a2518fd0fc94c80c8f96c3331f82bdd6e07807179ce4&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;技术总监7年总结，如何进行正确的沟通？&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__141&quot;&gt;&lt;span&gt;从业7年。从软件开发、高级软件开发、技术经理再到技术总监，分享职业发展、技术管理、职场晋升、技术成长等个人多年经验和心得。一起成长！有问题可以加我微信交流：&lt;/span&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__145&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;pointersss&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__146&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__148&quot;&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__149&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;关注我&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__149&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;↓&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__149&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;↓&lt;/strong&gt;，帮你答疑解惑！&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__148&quot;&gt;&lt;span data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__149&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4XQ0RVoHjpx4fJoOHia8o9pebg6ffoYJ3SueWibyfyfUpyBqtcmMwSUg5DrJ3bXLPnhrJya3Xjk0JHkJ9uJu7IrA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;1&quot; data-w=&quot;430&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(49, 49, 49)&quot; data-style=&quot;max-width: 100%; color: rgb(49, 49, 49); font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 15px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__1&quot;&gt;觉得不错，记得关注、转发和在看！多年经验分享，实属不易，感谢支持！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-qa class=&quot;js_uneditable custom_select_card qa_iframe&quot; data-pluginname=&quot;insertquestion&quot; data-id=&quot;1609666334655643654&quot; data-bizuin=&quot;Mzg3NzUxMTgwNQ==&quot; data-title=&quot;只求点个在看，谢谢啦！&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>20d2b8574f6637f88d51de65eb71f1f4</guid>
<title>史上最姨母级 Java 继承详解</title>
<link>https://toutiao.io/k/5x6siju</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.6363636363636364&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gicQ7o2bUTaxXgDML1Cvs0YYYGg7otpOAQ2gzVSZojZ3bqfyfLiaHJU0UXotWCThVwW9wP9AcebCAmGiahgVrFibKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;88&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;点击上方&lt;span data-mid=&quot;&quot;&gt;蓝字&lt;/span&gt;关注我，设为&lt;span&gt;星标，&lt;/span&gt;&lt;span&gt;任何转载请滴滴我授权&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.96&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQeIt3Pib9ACndicibtRFhb6kvGnco1ruEg1kd4dx35GUUAl2ia08ib3usxsUJZP5smvZh9N1zg8uQ5mgibwn34gxHhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;50&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;课程导学&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Java课堂中，所有老师不得不提到&lt;strong&gt;面向对象&lt;/strong&gt;（Object Oriented），而在谈到面向对象的时候，又不得不提到面向对象的三大特征：封装、&lt;strong&gt;继承&lt;/strong&gt;、多态。三大特征紧密联系而又有区别，本课程就带你学习Java的&lt;strong&gt;继承&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可能不知道继承到底有什么用，但你大概率曾有过这样的经历：写Java项目/作业时候创建很多相似的类，类中也有很多相同的方法，做了很多重复的工作量，感觉很臃肿。而合理使用继承就能大大减少重复代码，&lt;strong&gt;提高代码复用性。&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5688073394495413&quot; data-type=&quot;png&quot; data-w=&quot;1090&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxb8Uq5s2GDLnHttkedRlHBlz88Sp3ApyhmayZtRFvLRQ0tQEic11parwg/640?wx_fmt=png&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;继承的初相识&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习继承，肯定是先从广的概念了解继承是什么以及其作用，然后才从细的方面学习继承的具体实现细节，本关就是带你先快速了解和理解继承的重要概念。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;什么是继承&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;继承&lt;/strong&gt;（英语：inheritance）是面向对象软件技术中的一个概念。它使得&lt;strong&gt;复用以前的代码非常容易，能够大大缩短开发周期，降低开发费用。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java语言是非常典型的面向对象的语言，在Java语言中&lt;strong&gt;继承就是子类继承父类的属性和方法，使得子类对象（实例）具有父类的属性和方法，或子类从父类继承方法，使得子类具有父类相同的方法&lt;/strong&gt;。父类有时也叫基类、超类；子类有时也被称为派生类。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来举个例子：我们知道动物有很多种，是一个比较大的概念。在动物的种类中，我们熟悉的有猫(Cat)、狗(Dog)等动物，它们都有动物的一般特征（比如能够吃东西，能够发出声音），不过又在细节上有区别（不同动物的吃的不同，叫声不一样）。在Java语言中实现Cat和Dog等类的时候，就需要继承Animal这个类。继承之后Cat、Dog等具体动物类就是子类，Animal类就是父类。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5816203143893591&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbB0GHqTx8b7Bp1XjSlsYqWrt3dyVpMkvAia0LX8tAZgTHHwxaxhVJSjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1654&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;为什么需要继承&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可能会疑问&lt;strong&gt;为什么需要继承&lt;/strong&gt;？在具体实现的时候，我们创建Dog，Cat等类的时候实现其具体的方法不就可以了嘛，实现这个继承似乎使得这个类的结构不那么清晰。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果仅仅只有两三个类，每个类的属性和方法很有限的情况下确实没必要实现继承，但事情并非如此，事实上一个系统中往往有很多个类并且有着很多相似之处，比如猫和狗同属动物，或者学生和老师同属人。各个类可能又有很多个相同的属性和方法，这样的话如果每个类都重新写不仅代码显得很乱，代码工作量也很大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时继承的优势就出来了：可以直接使用父类的属性和方法，自己也可以有自己新的属性和方法满足拓展，父类的方法如果自己有需求更改也可以重写。这样&lt;strong&gt;使用继承不仅大大的减少了代码量，也使得代码结构更加清晰可见&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5283251231527094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbASmiabAuliaRa8pDrlRldeqT5iavIicECsVm8iaqpALHYFjXhUdGQka9P3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1624&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以这样从代码的层面上来看我们设计这个完整的Animal类是这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Animal&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; String name;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; age;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; weight;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Animal&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; id, String name, &lt;span&gt;int&lt;/span&gt; age, &lt;span&gt;int&lt;/span&gt; weight)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.id = id;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.name = name;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.age = age;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.weight = weight;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;//这里省略get set方法&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;hello&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;eat&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;I&#x27;m eating&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sing&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;sing&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而Dog，Cat，Chicken类可以这样设计：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Dog&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Animal&lt;/span&gt;//继承&lt;span&gt;animal&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Dog&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; id, String name, &lt;span&gt;int&lt;/span&gt; age, &lt;span&gt;int&lt;/span&gt; weight)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;(id, name, age, weight);&lt;span&gt;//调用父类构造方法&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Cat&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Animal&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Cat&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; id, String name, &lt;span&gt;int&lt;/span&gt; age, &lt;span&gt;int&lt;/span&gt; weight)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;(id, name, age, weight);&lt;span&gt;//调用父类构造方法&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Chicken&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Animal&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Chicken&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; id, String name, &lt;span&gt;int&lt;/span&gt; age, &lt;span&gt;int&lt;/span&gt; weight)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;(id, name, age, weight);&lt;span&gt;//调用父类构造方法&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;//鸡下蛋&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;layEggs&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;我是老母鸡下蛋啦，咯哒咯！咯哒咯！&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;各自的类继承Animal后可以直接使用Animal类的属性和方法而不需要重复编写，各个类如果有自己的方法也可很容易地拓展。上述代码中你需要注意extends就是用来实现继承的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;继承的分类&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继承分为单继承和多继承，Java语言只支持类的单继承，但可以通过实现接口的方式达到多继承的目的。&lt;strong&gt;我们先用一张表概述一下两者的区别，然后再展开讲解。&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;定义&lt;/th&gt;&lt;th&gt;优缺点&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;单继承&lt;br/&gt;&lt;img data-ratio=&quot;0.5816203143893591&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbB0GHqTx8b7Bp1XjSlsYqWrt3dyVpMkvAia0LX8tAZgTHHwxaxhVJSjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1654&quot;/&gt;&lt;/td&gt;&lt;td&gt;一个子类只拥有一个父类&lt;/td&gt;&lt;td&gt;优点：在类层次结构上比较清晰&lt;br/&gt;缺点：结构的丰富度有时不能满足使用需求&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;多继承（Java不支持，但可以用其它方式满足多继承使用需求）&lt;br/&gt;&lt;img data-ratio=&quot;0.576214405360134&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbjLtDHvpyWfq3ezk9C4QwZRpdHhjtO5KibQw9yMuuWEwIicOpvOP4hqMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1194&quot;/&gt;&lt;/td&gt;&lt;td&gt;一个子类拥有多个直接的父类&lt;/td&gt;&lt;td&gt;优点：子类的丰富度很高&lt;br/&gt;缺点：容易造成混乱&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;单继承&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单继承，是一个子类只拥有一个父类，如我们上面讲过的Animal类和它的子类。&lt;strong&gt;单继承在类层次结构上比较清晰，但缺点是结构的丰富度有时不能满足使用需求&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;多继承&lt;/strong&gt;(Java不支持，但可以实现)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多继承，是一个子类拥有多个直接的父类。这样做的好处是子类拥有所有父类的特征，&lt;strong&gt;子类的丰富度很高，但是缺点就是容易造成混乱&lt;/strong&gt;。下图为一个混乱的例子。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6099173553719008&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbDHia3o8toQImVAVJjkaFqeichrv1vhXRnia70lL6EUvRnWvm654Vwycxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1210&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java虽然不支持多继承，但是Java有三种实现多继承效果的方式，&lt;strong&gt;分别是&lt;/strong&gt;内部类、多层继承和实现接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;内部类&lt;/strong&gt;可以继承一个与外部类无关的类，保证了内部类的独立性，正是基于这一点，可以达到多继承的效果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;多层继承：&lt;strong&gt;子类继承父类，父类如果还继承其他的类，那么这就叫&lt;/strong&gt;多层继承&lt;/strong&gt;。这样子类就会拥有所有被继承类的属性和方法。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5919477693144722&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbbOhgibuXQCdXksJCdLowXHImPc7QtHaHwjBaqGCh9Wa4iaemg2g9icpAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1838&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;实现接口&lt;/strong&gt;无疑是满足多继承使用需求的最好方式，一个类可以实现多个接口满足自己在丰富性和复杂环境的使用需求。类和接口相比，&lt;strong&gt;类就是一个实体，有属性和方法，而接口更倾向于一组方法&lt;/strong&gt;。举个例子，就拿斗罗大陆的唐三来看，他存在的继承关系可能是这样的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbZbBvw4NCzEKCtfCL5NzzwxlvNtY5Iso4UAiaUNHHKvGBm52lw2qsnqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1864&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;如何实现继承&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现继承&lt;strong&gt;除了上面用到的extends&lt;/strong&gt;外，还可以用implements这个关键字实现。下面，让我给你逐一讲解一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;extends关键字&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Java中，类的继承是单一继承，也就是说一个子类只能拥有一个父类，所以&lt;strong&gt;extends&lt;/strong&gt;只能继承一个类。其使用语法为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; 子类名 &lt;span&gt;extends&lt;/span&gt; 父类名&lt;/span&gt;{}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如Dog类继承Animal类，它是这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Animal&lt;/span&gt;&lt;/span&gt;{} &lt;span&gt;//定义Animal类&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Dog&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Animal&lt;/span&gt;&lt;/span&gt;{} &lt;span&gt;//Dog类继承Animal类&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;子类继承父类后，就拥有父类的非私有的&lt;strong&gt;属性和方法&lt;/strong&gt;。如果不明白，请看这个案例，在IDEA下创建一个项目，创建一个test类做测试，分别创建Animal类和Dog类，Animal作为父类写一个sayHello()方法，Dog类继承Animal类之后就可以调用sayHello()方法。具体代码为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Animal&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;  &lt;span&gt;sayHello&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt;//父类的方法&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;hello,everybody&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Dog&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Animal&lt;/span&gt;//继承&lt;span&gt;animal&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{ }&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;test&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;       Dog dog=&lt;span&gt;new&lt;/span&gt; Dog();&lt;br/&gt;       dog.sayHello();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点击运行的时候Dog子类可以直接使用Animal父类的方法。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7730496453900709&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbLVOPHGK6NTian6OmVI1gvLtkmmXekL6BfCCNENwpz2ue2RRXlGeLu1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1410&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;implements 关键字&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用implements 关键字可以变相使Java拥有多继承的特性，使用范围为类实现接口的情况，一个类可以实现多个接口(接口与接口之间用逗号分开)。Java接口是一系列方法的声明，&lt;strong&gt;一个接口中没有方法的具体实现&lt;/strong&gt; 。子类实现接口的时候必须重写接口中的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看一个案例，创建一个test2类做测试，分别创建doA接口和doB接口，doA接口声明sayHello()方法，doB接口声明eat()方法，创建Cat2类实现doA和doB接口，并且在类中需要重写sayHello()方法和eat()方法。具体代码为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;doA&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;doB&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;eat&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;//以下会报错 接口中的方法不能具体定义只能声明&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;//public void eat(){System.out.println(&quot;eating&quot;);}&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Cat2&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt;  &lt;span&gt;doA&lt;/span&gt;,&lt;span&gt;doB&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;span&gt;//必须重写接口内的方法&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;hello!&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;eat&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;I&#x27;m eating&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;test2&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Cat2 cat=&lt;span&gt;new&lt;/span&gt; Cat2();&lt;br/&gt;        cat.sayHello();&lt;br/&gt;        cat.eat();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cat类实现doA和doB接口的时候，需要实现其声明的方法，点击运行结果如下，这就是一个类实现接口的简单案例：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.1002949852507375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbd1nm9A7vBeo8vEEASLLnGqjcqYnD7QHPjLYH5zuux1uG9HyOGuhITw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1356&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;继承的特点&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继承的主要内容就是子类继承父类，并重写父类的方法。使用子类的属性或方法时候，首先要创建一个对象，而对象通过&lt;strong&gt;构造方法&lt;/strong&gt;去创建，在构造方法中我们可能会调用子父类的一些属性和方法，所以就需要提前掌握&lt;strong&gt;this和super&lt;/strong&gt;关键字。创建完这个对象之后，在调用&lt;strong&gt;重写&lt;/strong&gt;父类的方法，并区别重写和重载的区别。所以本节根据this、super关键字—&amp;gt;构造函数—&amp;gt;方法重写—&amp;gt;方法重载的顺序进行讲解。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;this和super关键字&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;this和super关键字是继承中&lt;strong&gt;非常重要的知识点&lt;/strong&gt;，分别表示当前对象的引用和父类对象的引用，两者有很大相似又有一些区别。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;this表示当前对象，是指向自己的引用。&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;this.属性 // 调用成员变量，要区别成员变量和局部变量&lt;br/&gt;this.() // 调用本类的某个方法&lt;br/&gt;this() // 表示调用本类构造方法&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;super表示父类对象，是指向父类的引用。&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;super.属性 // 表示父类对象中的成员变量&lt;br/&gt;super.方法() // 表示父类对象中定义的方法&lt;br/&gt;super() // 表示调用父类构造方法&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，this和super关键字只能出现在非static修饰的代码中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;this()和super()都只能在&lt;strong&gt;构造方法&lt;/strong&gt;的第一行出现，如果使用this()表示调用当前类的其他构造方法，使用super()表示调用父类的某个构造方法，所以两者只能根据自己使用需求选择其一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写一个小案例，创建D1类和子类D2如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;D1&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;D1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{}&lt;span&gt;//无参构造&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;hello&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;D2&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;D1&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; String name;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;D2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;();&lt;span&gt;//调用父类构造方法&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.name=&lt;span&gt;&quot;BigSai&quot;&lt;/span&gt;;&lt;span&gt;//给当前类成员变量赋值&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;hello，我是&quot;&lt;/span&gt;+&lt;span&gt;this&lt;/span&gt;.name);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;.sayHello();&lt;span&gt;//调用父类方法&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.sayHello();&lt;span&gt;//调用当前类其他方法&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;test8&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        D2 d2=&lt;span&gt;new&lt;/span&gt; D2();&lt;br/&gt;        d2.test();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行的结果为：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0212765957446808&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbeLKIia3WNQlF5aBib5zHjgxHo0JX1FgLovc6l90PjEn2BP8AXuIosjCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1410&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;构造方法&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;构造方法是一种特殊的方法，&lt;strong&gt;它是一个与类同名的方法&lt;/strong&gt;。对象的创建就通过构造方法来完成，其主要的功能是完成对象的初始化。但在继承中&lt;strong&gt;构造方法是一种比较特殊的方法&lt;/strong&gt;（比如不能继承），所以要了解和学习在继承中构造方法的规则和要求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;构造方法可分为有参构造和无参构造，这个可以根据自己的使用需求合理设置构造方法。但继承中的构造方法有以下几点需要注意：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;父类的构造方法不能被继承：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为构造方法语法是&lt;strong&gt;与类同名&lt;/strong&gt;，而继承则不更改方法名，如果子类继承父类的构造方法，那明显与构造方法的语法冲突了。比如Father类的构造方法名为Father()，Son类如果继承Father类的构造方法Father()，那就和构造方法定义：&lt;strong&gt;构造方法与类同名&lt;/strong&gt;冲突了，所以在子类中不能继承父类的构造方法，但子类会调用父类的构造方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;子类的构造过程必须调用其父类的构造方法：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java虚拟机&lt;strong&gt;构造子类对象前会先构造父类对象，父类对象构造完成之后再来构造子类特有的属性，&lt;strong&gt;这被称为&lt;/strong&gt;内存叠加&lt;/strong&gt;。而Java虚拟机构造父类对象会执行父类的构造方法，所以子类构造方法必须调用super()即父类的构造方法。就比如一个简单的继承案例应该这么写：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; String name;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;span&gt;//无参构造&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;A&lt;/span&gt; &lt;span&gt;(String name)&lt;/span&gt;&lt;/span&gt;{&lt;span&gt;//有参构造&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;B&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;B&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;span&gt;//无参构造&lt;/span&gt;&lt;br/&gt;       &lt;span&gt;super&lt;/span&gt;();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;B&lt;/span&gt;&lt;span&gt;(String name)&lt;/span&gt; &lt;/span&gt;{&lt;span&gt;//有参构造&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;//super();&lt;/span&gt;&lt;br/&gt;       &lt;span&gt;super&lt;/span&gt;(name);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如果子类的构造方法中没有显示地调用父类构造方法，则系统默认调用父类无参数的构造方法。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可能有时候在写继承的时候子类并没有使用super()调用，程序依然没问题，其实这样是为了节省代码，系统执行时会自动添加父类的无参构造方式，如果不信的话我们对上面的类稍作修改执行：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0395894428152492&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbYV4qdIAl7t6wNqUiaL3Q0hO83HFsscxXpCFN5icDtbic3Bxf8umzkhSKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1364&quot;/&gt;&lt;figcaption&gt;image-20201026201029796&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;方法重写(Override)&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方法重写也就是子类中出现和父类中一模一样的方法(包括返回值类型，方法名，参数列表)，它建立在继承的基础上。你可以理解为方法的&lt;strong&gt;外壳不变，但是核心内容重写&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里提供一个简单易懂的方法重写案例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;E1&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doA&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; a)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;这是父类的方法&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;E2&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;E1&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doA&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; a)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;我重写父类方法，这是子类的方法&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中@Override注解显示声明该方法为注解方法，可以帮你检查重写方法的语法正确性，当然如果不加也是可以的，但建议加上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于重写，你需要注意以下几点：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从重写的要求上看：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;重写的方法和父类的要一致(包括返回值类型、方法名、参数列表)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;方法重写只存在于子类和父类之间，同一个类中只能重载&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从访问权限上看：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;子类方法不能缩小父类方法的访问权限&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;子类方法不能抛出比父类方法更多的异常&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;父类的私有方法不能被子类重写&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从静态和非静态上看：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;父类的静态方法不能被子类重写为非静态方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;子类可以定义于父类的静态方法同名的静态方法，以便在子类中隐藏父类的静态方法（满足重写约束）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;父类的非静态方法不能被子类重写为静态方法&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从抽象和非抽象来看：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;父类的抽象方法可以被子类通过两种途径重写（即实现和重写）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;父类的非抽象方法可以被重写为抽象方法&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，这些规则可能涉及一些修饰符，在第三关中会详细介绍。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;方法重载(Overload)&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有两个方法的&lt;strong&gt;方法名相同&lt;/strong&gt;，但参数不一致，那么可以说一个方法是另一个方法的重载。方法重载规则如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;被重载的方法&lt;strong&gt;必须改变参数列表&lt;/strong&gt;(参数个数或类型或顺序不一样)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;被重载的方法可以改变返回类型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;被重载的方法可以改变访问修饰符&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;被重载的方法可以声明新的或更广的检查异常&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;方法能够在同一个类中或者在一个子类中被重载&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无法以返回值类型作为重载函数的区分标准&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重载可以通常理解为完成同一个事情的方法名相同，但是参数列表不同其他条件也可能不同。一个简单的方法重载的例子，类E3中的add()方法就是一个重载方法。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;E3&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; a,&lt;span&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; a+b;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;span&gt;double&lt;/span&gt; a,&lt;span&gt;double&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; a+b;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; a,&lt;span&gt;int&lt;/span&gt; b,&lt;span&gt;int&lt;/span&gt; c)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; a+b+c;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;方法重写和方法重载的区别&lt;/strong&gt;：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方法重写和方法重载名称上容易混淆，但内容上有很大区别，下面用一个表格列出其中区别：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;区别点&lt;/th&gt;&lt;th&gt;方法重写&lt;/th&gt;&lt;th&gt;方法重载&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;结构上&lt;/td&gt;&lt;td&gt;垂直结构，是一种父子类之间的关系&lt;/td&gt;&lt;td&gt;水平结构，是一种同类之间关系&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;参数列表&lt;/td&gt;&lt;td&gt;不可以修改&lt;/td&gt;&lt;td&gt;可以修改&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;访问修饰符&lt;/td&gt;&lt;td&gt;子类的访问修饰符范围必须大于等于父类访问修饰符范围&lt;/td&gt;&lt;td&gt;可以修改&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;抛出异常&lt;/td&gt;&lt;td&gt;子类方法异常必须是父类方法异常或父类方法异常子异常&lt;/td&gt;&lt;td&gt;可以修改&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;继承与修饰符&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java修饰符的作用就是对类或类成员进行修饰或限制，每个修饰符都有自己的作用，而在继承中可能有些特殊修饰符使得被修饰的属性或方法不能被继承，或者继承需要一些其他的条件，下面就详细介绍在继承中一些修饰符的作用和特性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java语言提供了很多修饰符，修饰符用来定义类、方法或者变量，通常放在语句的最前端。主要分为以下两类：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里访问修饰符主要讲解public，protected，default，private四种访问控制修饰符。非访问修饰符这里就介绍static修饰符，final修饰符和abstract修饰符。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;访问修饰符&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;public，protected，default(无修饰词)，private&lt;/strong&gt;修饰符是面向对象中非常重要的知识点，而在继承中也需要懂得各种修饰符使用规则。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我们都知道不同的关键字作用域不同，四种关键字的作用域如下：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;同一个类&lt;/th&gt;&lt;th&gt;同一个包&lt;/th&gt;&lt;th&gt;不同包子类&lt;/th&gt;&lt;th&gt;不同包非子类&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;private&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;default&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;protect&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;public&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;private：Java语言中对访问权限限制的&lt;strong&gt;最窄&lt;/strong&gt;的修饰符，一般称之为“私有的”。被其修饰的属性以及方法&lt;strong&gt;只能被该类的对象访问&lt;/strong&gt;，其子类不能访问，更不能允许跨包访问。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;default：(也有称friendly)&lt;strong&gt;即不加任何访问修饰符&lt;/strong&gt;，通常称为“默认访问权限“或者“包访问权限”。该模式下，只允许在同一个包中进行访问。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;protected：介于public 和 private 之间的一种访问修饰符，一般称之为“保护访问权限”。被其修饰的属性以及方法只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;public：Java语言中访问限制&lt;strong&gt;最宽&lt;/strong&gt;的修饰符，一般称之为“公共的”。被其修饰的类、属性以及方法不仅可以跨类访问，而且允许跨包访问。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java 子类重写继承的方法时，&lt;strong&gt;不可以降低方法的访问权限&lt;/strong&gt;，&lt;strong&gt;子类继承父类的访问修饰符作用域不能比父类小&lt;/strong&gt;，也就是更加开放，假如父类是protected修饰的，其子类只能是protected或者public，绝对不能是default(默认的访问范围)或者private。所以在继承中需要重写的方法不能使用private修饰词修饰。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果还是不太清楚可以看几个小案例就很容易搞懂，写一个A1类中用四种修饰词实现四个方法，用子类A2继承A1，重写A1方法时候你就会发现父类私有方法不能重写，非私有方法重写使用的修饰符作用域不能变小(大于等于)。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6324062877871826&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbt7L5bicslan68egU8EdkUkqScV7MZgu0jKfDlQX4Q8ibibWicLchwaVBGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1654&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正确的案例应该为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;A1&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doA&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{ }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;doB&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{}&lt;span&gt;//default&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doC&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{}&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doD&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{}&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;A2&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;A1&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doB&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{ }&lt;span&gt;//继承子类重写的方法访问修饰符权限可扩大&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doC&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{ }&lt;span&gt;//继承子类重写的方法访问修饰符权限可和父类一致&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doD&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{ }&lt;span&gt;//不可用protected或者default修饰&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还要注意的是，&lt;strong&gt;继承当中子类抛出的异常必须是父类抛出的异常或父类抛出异常的子异常&lt;/strong&gt;。下面的一个案例四种方法测试可以发现子类方法的异常不可大于父类对应方法抛出异常的范围。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.549&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbZyYj7RiamGMakPnHiaR5a8qaNGCsTkqlmvjRemHF50DOH4oJ0icXlqTvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2000&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正确的案例应该为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;B1&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doA&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception&lt;/span&gt;{}&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doB&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception&lt;/span&gt;{}&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doC&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException&lt;/span&gt;{}&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doD&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException&lt;/span&gt;{}&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;B2&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;B1&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;//异常范围和父类可以一致&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doA&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{ }&lt;br/&gt;    &lt;span&gt;//异常范围可以比父类更小&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doB&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{ }&lt;br/&gt;    &lt;span&gt;//异常范围 不可以比父类范围更大&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doC&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{ }&lt;span&gt;//不可抛出Exception等比IOException更大的异常&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doD&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{ }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;非访问修饰符&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;访问修饰符用来控制访问权限，而非访问修饰符每个都有各自的作用，下面针对static、final、abstract修饰符进行介绍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;static 修饰符&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;static 翻译为“静态的”，能够与变量，方法和类一起使用，&lt;strong&gt;称为静态变量，静态方法(也称为类变量、类方法)&lt;/strong&gt;。如果在一个类中使用static修饰变量或者方法的话，它们&lt;strong&gt;可以直接通过类访问，不需要创建一个类的对象来访问成员。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在设计类的时候可能会使用静态方法，有很多工具类比如&lt;code&gt;Math&lt;/code&gt;，&lt;code&gt;Arrays&lt;/code&gt;等类里面就写了很多静态方法。static修饰符的规则很多，这里仅仅介绍和Java继承相关用法的规则：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;构造方法不允许声明为 static 的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;静态方法中不存在当前对象，因而不能使用 this，当然也不能使用 super。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;静态方法不能被非静态方法重写(覆盖)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;静态方法能被静态方法重写(覆盖)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看以下的案例证明上述规则：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5470332850940666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbpq3Fu9oAMTUaMnicJwvO4OCicBp4O3k8GUQymJI6icVG8M248Gao6YBicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1382&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;源代码为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;C1&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt;  &lt;span&gt;int&lt;/span&gt; a;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;C1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{}&lt;br/&gt;   &lt;span&gt;// public static C1(){}// 构造方法不允许被声明为static&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doA&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{}&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doB&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{}&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;C2&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;C1&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;  &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doC&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt;//静态方法中不存在当前对象，因而不能使用this和super。&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//System.out.println(super.a);&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doA&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{}&lt;span&gt;//静态方法能被静态方法重写&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;// public void doB(){}//静态方法不能被非静态方法重写&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;final修饰符&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;final变量：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;final 表示&quot;最后的、最终的&quot;含义，&lt;strong&gt;变量一旦赋值后，不能被重新赋值&lt;/strong&gt;。被 final 修饰的实例变量必须显式指定初始值(即不能只声明)。final 修饰符通常和 static 修饰符一起使用来创建类常量。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;final 方法：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;父类中的 final 方法可以被子类继承，但是不能被子类重写&lt;/strong&gt;。声明 final 方法的主要目的是防止该方法的内容被修改。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;final类：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;final 类不能被继承&lt;/strong&gt;，没有类能够继承 final 类的任何特性。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以无论是变量、方法还是类被final修饰之后，都有代表最终、最后的意思。内容无法被修改。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;abstract 修饰符&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;abstract 英文名为“抽象的”，主要用来修饰类和方法，称为抽象类和抽象方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;抽象方法&lt;/strong&gt;：有很多不同类的方法是相似的，但是具体内容又不太一样，所以我们只能抽取他的声明，没有具体的方法体，即抽象方法可以表达概念但无法具体实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;抽象类&lt;/strong&gt;：&lt;strong&gt;有抽象方法的类必须是抽象类&lt;/strong&gt;，抽象类可以表达概念但是无法构造实体的类。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;抽象类和抽象方法内容和规则比较多。这里只提及一些和继承有关的用法和规则：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;抽象类也是类，如果一个类继承于抽象类，就不能继承于其他的（类或抽象类）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;子类可以继承于抽象类，但是一定要实现父类们所有abstract的方法。如果不能完全实现，那么子类也必须被定义为抽象类&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;只有实现父类的所有抽象方法，才能是完整类。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5957446808510638&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbQgMOvsqg4hZs0DHsZ0erZWURtE2YSbCf8LYcicLhdyKpDiciaWsoIRRRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1504&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我们可以这样设计一个People抽象类以及一个抽象方法，在子类中具体完成：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;People&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;span&gt;//抽象方法&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Chinese&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;People&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;span&gt;//实现抽象方法&lt;/span&gt;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;你好&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Japanese&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;People&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;span&gt;//实现抽象方法&lt;/span&gt;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;口你七哇&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;American&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;People&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;span&gt;//实现抽象方法&lt;/span&gt;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;hello&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Object类和转型&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提到Java继承，不得不提及所有类的根类：Object(java.lang.Object)类，如果一个类没有显式声明它的父类（即没有写extends xx），那么默认这个类的父类就是Object类，任何类都可以使用Object类的方法，创建的类也可和Object进行向上、向下转型，所以Object类是掌握和理解继承所必须的知识点。而Java向上和向下转型在Java中运用很多，也是建立在继承的基础上，所以Java转型也是掌握和理解继承所必须的知识点。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Object类概述&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Object是类层次结构的&lt;strong&gt;根类&lt;/strong&gt;，所有的类都隐式的继承自Object类。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Java所有的对象都拥有Object默认方法&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Object类的构造方法有一个，并且是&lt;strong&gt;无参构造&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Object是java所有类的父类，是整个类继承结构的顶端，也是最抽象的一个类。像toString()、equals()、hashCode()、wait()、notify()、getClass()等都是Object的方法。你以后可能会经常碰到，但其中遇到更多的就是toString()方法和equals()方法，我们经常需要重写这两种方法满足我们的使用需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;**toString()**方法表示返回该对象的字符串，由于各个对象构造不同所以需要重写，如果不重写的话默认返回&lt;code&gt;类名@hashCode&lt;/code&gt;格式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如果重写toString()方法后&lt;/strong&gt;直接调用toString()方法就可以返回我们自定义的该类转成字符串类型的内容输出，而不需要每次都手动的拼凑成字符串内容输出，大大简化输出操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;**equals()&lt;strong&gt;方法主要比较两个对象是否相等，因为对象的相等不一定非要严格要求两个对象地址上的相同，有时内容上的相同我们就会认为它相等，比如String 类就重写了&lt;/strong&gt;euqals()**方法，通过字符串的内容比较是否相等。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3978685612788632&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbeOqUhgERuVO1yaWe89mNV5TXKZjOe7hDF90UzwocIWjFK8eYO2eCOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2252&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;向上转型&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;向上转型&lt;/strong&gt; : 通过子类对象(小范围)实例化父类对象(大范围)，这种属于自动转换。用一张图就能很好地表示向上转型的逻辑：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3857331571994716&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbhGYRXwun0Xhu8vWia2TCRFv4icmsibSlHIOJNtmDh4SBaEomgOlhrDMYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1514&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;父类引用变量指向子类对象后，只能使用父类已声明的方法，但方法如果被重写会执行子类的方法，如果方法未被重写那么将执行父类的方法。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;向下转型&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;向下转型&lt;/strong&gt; : 通过父类对象(大范围)实例化子类对象(小范围)，在书写上父类对象需要加括号&lt;code&gt;()&lt;/code&gt;强制转换为子类类型。但父类引用变量实际引用必须是子类对象才能成功转型，这里也用一张图就能很好表示向上转型的逻辑：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.69559902200489&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbEZPiaM3bleOTXKAjsGmUywQQTr8ZEZ4rRx3I5iasndtZLQVEicDQJib3fA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1636&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;子类引用变量指向父类引用变量指向的对象后(一个Son()对象)，就完成向下转型，就可以调用一些子类特有而父类没有的方法 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里写一个向上转型和向下转型的案例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Object object=&lt;span&gt;new&lt;/span&gt; Integer(&lt;span&gt;666&lt;/span&gt;);&lt;span&gt;//向上转型&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;Integer i=(Integer)object;&lt;span&gt;//向下转型Object-&amp;gt;Integer，object的实质还是指向Integer&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;String str=(String)object;&lt;span&gt;//错误的向下转型，虽然编译器不会报错但是运行会报错&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;子父类初始化顺序&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Java继承中，父子类初始化先后顺序为：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;父类中静态成员变量和静态代码块&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;子类中静态成员变量和静态代码块&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;父类中普通成员变量和代码块，父类的构造函数&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;子类中普通成员变量和代码块，子类的构造函数&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总的来说，就是&lt;strong&gt;静态&amp;gt;非静态，父类&amp;gt;子类，非构造函数&amp;gt;构造函数&lt;/strong&gt;。同一类别（例如普通变量和普通代码块）成员变量和代码块执行从前到后，需要注意逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个也不难理解，静态变量也称类变量，可以看成一个全局变量，静态成员变量和静态代码块在类加载的时候就初始化，而非静态变量和代码块在对象创建的时候初始化。所以静态快于非静态初始化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而在创建子类对象的时候需要先创建父类对象，所以父类优先于子类。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而在调用构造函数的时候，是对成员变量进行一些初始化操作，所以普通成员变量和代码块优于构造函数执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于更深层次为什么这个顺序，就要更深入了解JVM执行流程啦。下面一个测试代码为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Father&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Father&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(++b1+&lt;span&gt;&quot;父类构造方法&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;span&gt;//父类构造方法 第四&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; a1=&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//父类static 第一 注意顺序&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; {&lt;br/&gt;        System.out.println(++a1+&lt;span&gt;&quot;父类static&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; b1=a1;&lt;span&gt;//父类成员变量和代码块 第三&lt;/span&gt;&lt;br/&gt;    {&lt;br/&gt;        System.out.println(++b1+&lt;span&gt;&quot;父类代码块&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Son&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Father&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Son&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(++b2+&lt;span&gt;&quot;子类构造方法&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;span&gt;//子类构造方法 第六&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; {&lt;span&gt;//子类static第二步&lt;/span&gt;&lt;br/&gt;        System.out.println(++a1+&lt;span&gt;&quot;子类static&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; b2=b1;&lt;span&gt;//子类成员变量和代码块 第五&lt;/span&gt;&lt;br/&gt;    {&lt;br/&gt;        System.out.println(++b2 + &lt;span&gt;&quot;子类代码块&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;test9&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Son son=&lt;span&gt;new&lt;/span&gt; Son();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行结果：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.09585121602289&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxb2Y9aKCiaGJCic0wQ8bB81ib02fQvbxowBUb8HeiampqIdy5ia7uX9ee7rTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1398&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结语&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好啦，本次继承就介绍到这里啦，Java面向对象三大特征之一继承——优秀的你已经掌握。再看看Java面向对象三大特性：封装、继承、多态。最后问你能大致了解它们的特征嘛？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;封装：是对类的封装，封装是对类的属性和方法进行封装，只对外暴露方法而不暴露具体使用细节，所以我们一般设计类成员变量时候大多设为私有而通过一些get、set方法去读写。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继承：子类继承父类，即“子承父业”，子类拥有父类除私有的所有属性和方法，自己还能在此基础上拓展自己新的属性和方法。主要目的是&lt;strong&gt;复用代码&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;多态&lt;/strong&gt;：多态是同一个行为具有多个不同表现形式或形态的能力。即一个父类可能有若干子类，各子类实现父类方法有多种多样，调用父类方法时，父类引用变量指向不同子类实例而执行不同方法，这就是所谓父类方法是多态的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后送你一张图捋一捋其中的关系吧。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5685685685685685&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThyglKQx7icn4QbFKCQicbCRxbKxrY47MTKKU0SDq7GwX1ZiaAbfs8GU2g1JuJLiaPUibtAWs7Hr5N5qGUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1998&quot;/&gt;&lt;section&gt;&lt;strong&gt;&lt;br/&gt;近期精彩：&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MTE1NjA2Mg==&amp;amp;mid=2247484932&amp;amp;idx=1&amp;amp;sn=4da58d7460faf412bc0af81062deac6f&amp;amp;chksm=ce1a21b5f96da8a37157732a1b8292d2e350fd41fabb90072a484be6ad71e5fa9dbb2758a5b3&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;硬核！手写一个优先队列&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MTE1NjA2Mg==&amp;amp;mid=2247485144&amp;amp;idx=1&amp;amp;sn=2624bdd152e1bbaba99d3363943999d3&amp;amp;chksm=ce1a2169f96da87fd4a36009a31c7567bdb34b009a2acf4ed17edeee645d147082a62b0a4532&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;图解|双轴快排分析&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MTE1NjA2Mg==&amp;amp;mid=2247484764&amp;amp;idx=1&amp;amp;sn=abc1ca0a2470f0bb2e3d543fc66ced4d&amp;amp;chksm=ce1a22edf96dabfba04b385be4c3dcc3e8b726572c9a947a9de23187ca505eaa207123fb02ed&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;MongoDB助力一个物流订单系统&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MTE1NjA2Mg==&amp;amp;mid=2247485126&amp;amp;idx=2&amp;amp;sn=d443dcabfacf4082ab089a453ca209dd&amp;amp;chksm=ce1a2177f96da861e0040e4afdd30ad2a668c5070e1a630b43df4f60b1f72f9fb2daff26e939&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;面试官:什么是缓存穿透、缓存雪崩、缓存击穿？&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MTE1NjA2Mg==&amp;amp;mid=2247485341&amp;amp;idx=1&amp;amp;sn=9322f5ea2eca0fb3f6927d87c3b532fb&amp;amp;chksm=ce1a202cf96da93a615868dba376b98d77561b88cdcc776bd58c4dd8e00d52b9b9267ad9f3a1&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;16张图带你彻底搞懂基数排序&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MTE1NjA2Mg==&amp;amp;mid=2247485201&amp;amp;idx=1&amp;amp;sn=e2eb19410784b5bcb085d1e6775b6966&amp;amp;chksm=ce1a20a0f96da9b69778cabb9d09f70dfedef073fcc47acd131060934611c991099aac57dff9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;8张图带你分析Redis与MySQL数据一致性问题&lt;/a&gt;&lt;/section&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，不说了，咱们下次再见！本文同时收录在&lt;strong&gt;回车课堂！&lt;/strong&gt;欢迎查看&lt;strong&gt;。最后bigsai请你们&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;在看、关注&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;支持一波&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;原创小博主&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;，谢谢！&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lia5wemIHThwm52gaOjYD1rTpFBzPSct2PlYan9Bco2fVvkjNZLqqBZS9xd4SvvTyaXVezcWBlpXIwbz6cibPLHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-qa class=&quot;js_uneditable custom_select_card qa_iframe&quot; data-pluginname=&quot;insertquestion&quot; data-id=&quot;1608873668762238977&quot; data-bizuin=&quot;Mzg2MTE1NjA2Mg==&quot; data-title=&quot;本文阅读体验如何？&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>80a70ca7d8172c288b4b44bce43207d4</guid>
<title>Pulsar 能否超越 Kafka？</title>
<link>https://toutiao.io/k/abi4u4p</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl90xJmPdJH19wGQlqh8tiaPhZDvibaXWwiaNhbpicCGVB8uSNYSVx8Cj0YjAwSNlIuC8H0HDAzibic5DzQsw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1620&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pulsar 是类似于 Kafka 的一个消息中间件，是 Yahoo 开源的，可以说 Pulsar 就是针对 Kafka 的痛点而来的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面就说说 Kafka 都有哪些痛点，以及 Pulsar 的优质特性，当然还会说下它的不足。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. Kafka 概述&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5621428571428572&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl90xJmPdJH19wGQlqh8tiaPhZaVhZF0icN5ZS50PBqdXCO7OwgUDMhWuu2uRcHyul0M1Okb6gFM9u5ibw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1400&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 于 2011 年由 LinkedIn 创建，发展到现在已经成为消息系统的王者，支持了越来越多的功能，例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Schema Registry&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka Connect，用于对接其他数据源&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka Streams，用于分布式的流处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;KSQL，用于对 Topic 进行类似 SQL 的查询&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;……&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 速度快、安装简单，适用于非常多的使用场景，极其流行。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. Kafka 痛点&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;扩展困难，这是 Kafka 架构造成的，broker 存储了数据，想要动 broker，就意味着 topic 分区以及副本的复制，非常耗时。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不支持完全独立的多租户模式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;异步复制的情况下可能丢失数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于 broker、topic、partition、replica 的数量需要做一个规划，以便尽量避免扩展问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当你只需要一个单纯的消息系统时，基于 offset 的方式就有点麻烦。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;集群再平衡会影响 producer 和 consumer 的性能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MirrorMaker Geo 复制机制有问题，例如 Uber 设计了自己的方案来克服此问题。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. Pulsar 概述&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6613039796782387&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl90xJmPdJH19wGQlqh8tiaPhZubwt8LXH22zpibDWdLDLEjOS8ib0eUDBN5KduIYvwQ40TibV1zKmxvibFw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1181&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pulsar 是 Yahoo 在 2013 年创建的，2016年贡献给了 Apache 基金会，目前已经是 Apache 的顶级项目。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Yahoo、Verizon、Twitter 等很多公司都在使用 Pulsar 来处理海量消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pulsar 声称比 Kafka 更快、运行成本更低、解决了很多 Kafka 的痛点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pulsar 非常灵活，可以像 Kafka 一样作为分布式日志系统，也可以作为类似 RabbitMQ 这类简单的消息系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pulsar 有多种订阅类型、传递保障、保存策略。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. Pulsar 特性&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不同的团队可以使用同一个集群，互相隔离。支持隔离、认证授权、配额。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pulsar 使用特定的数据层来存储 topic 数据，使用了 Apache BookKeeper 作为数据账本。Broker 与存储分离。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用分隔机制可以解决集群的扩展、再平衡、维护等问题。也提升了可用性，不会丢失数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为使用了多层架构，对于 topic 数量没有限制，topic 与存储是分离的，也可以创建非持久化的 topic。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 中存储是很昂贵的，所以很少存储冷数据。Pulsar 使用了多层存储，可以自动把旧数据移动到专门的存储设备，例如 Amazon S3，但是对于客户端来讲是透明的，还可以正常使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pulsar Function 是一种部署简单，轻量级计算、对开发人员友好的 API，无需像 Kafka 那样运行自己的流处理引擎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;内置了代理、多租户安全机制、可插入的身份验证等功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;partition 被分为了小块儿，所以再平衡时非常快。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如 Kafka、RabbitMQ 等系统都可以轻松集成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如 Go、Java、Scala、Node、Python 等等。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. 小结&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pulsar 的确弥补了 Kafka 的很多不足，因为 Yahoo 就是为了解决这些问题而开发的 Pulsar。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但 Pulsar 也有明显的弱势，例如它的普及度比 Kafka 差太多了，而且 Kafka 有 Confluent 的专业支持，这个支持力度不是 Pulsar 能比的，由此就带来了其他问题，比如扩展插件太少、人才太少等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pulsar 与 Kafka 各有所长，各有所短，没有技术是完美的，多一种技术就多一种选择，需要根据自己的情况来选择合适的技术。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考资料：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://itnext.io/pulsar-advantages-over-kafka-7e0c2affe2d6&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Happy Learning ヾ(￣▽￣)Bye~Bye~&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>21efe7542d81852799be8af79a377aef</guid>
<title>内存数据库解析与主流产品对比（三）</title>
<link>https://toutiao.io/k/9qv70vb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mpa-category=&quot;模板&quot; data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;在上一篇文章&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247489169&amp;amp;idx=1&amp;amp;sn=3be9ce6999b1bde68dc38fa8f5dd3459&amp;amp;chksm=e8c7b1b2dfb038a4708d6200402350563b3e9df0df4dbf8000dda51c67ff9b4ba6354b6877b3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《内存数据库解析与主流产品对比（二）》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;《内存数据库解析与主流产品对比（二）》&lt;/span&gt;&lt;/a&gt;&lt;span&gt;中，我们从数据组织和索引的角度介绍了内存数据库的特点和几款产品的技术实现。本文将继续解析内存数据库，从并发控制、持久化和查询处理的角度介绍几款技术，带来更多维度、更细致的内存数据库技术讨论。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;— 数据库管理系统中的并发控制&lt;/strong&gt;&lt;strong&gt;—&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 内存数据库并发控制的两种策略&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;a. 多版本的并发控制&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;内存数据库中的并发控制主要采用两类策略：1. 多版本的并发控制；2. 分Partition处理。并发控制机制可以分为乐观和悲观两种类型。悲观并发控制则认为进程竞争资源总是存在的，因此访问时先加锁，访问完再释放；乐观并发控制认为大多数情况不需要竞争资源，只在最后提交前检查是否存在冲突，有冲突就回滚，没有就提交。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;乐观并发控制大多数不采用基于锁的技术实现，并且通常是多版本的。多版本意味着每次更新都会产生新的版本，读操作根据可见范围选取合适的老版本，读操作不阻塞写操作，所以并发程度比较高。其缺点是会产生额外开销，例如更新要创建新版本，而且随着版本越来越多，还需要额外开销收回老版本。内存数据库多采用乐观的多版本并发控制机制，相比于基于锁的悲观并发控制其优势是开销较小，而且支持并发程度较高的场景；缺点是在有大量写竞争的场景下，事务间冲突概率比较高时，大量事务会失败和回滚。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;b. 分Partition处理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;内存数据库并发控制的另外一类策略是把数据库分成多个Partition，每个Partition采用串行方式处理事务。优势是单Partition业务的执行没有用于并发控制的额外开销，缺点是存在跨Partition事务时系统的吞吐率会直线下降。因此，如果不能保证所有业务都是单Partition进行，将导致性能不可预测。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 多版本并发控制之 Hekaton&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Hekaton采用乐观的多版本并发控制。Transaction开始时，系统为事务分配读时间戳，并将Transaction标记为active，然后开始执行事务，在操作过程中系统记录被读取/扫描/写入的数据。随后，在Pre-commit阶段，先获取一个结束的时间戳，然后验证读和扫描数据的版本是否仍然有效。如果验证通过，就写一个新版本到日志，执行Commit，然后把所有的新版本设置为可见。Commit之后，Post-Processing记录版本时间戳，之后Transaction才真正结束。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;268.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.4649350649350649&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2FfMrPibBFH5CToLFjGhjklOeXIbaH2IxN9CF4ibzFWbvO62KajaNM3uQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1155&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;a. Hekaton 的事务验证&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h5&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;i) Read Stability：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;Hekaton系统能够保证数据的读稳定性（Read Stability），比如交易开始时读到的每条记录版本，在Commit时仍然可见，从而实现Read Stability。&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h5&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ii) Phantom Avoidances：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;Phantom指一个事务在开始和结束时执行相同的条件查询，两次结果不一样。出现幻影的原因是该事务执行过程中，其他事务对相同数据集进行了增加/删除/更新操作。应该如何避免幻影现象呢？可通过重复扫描，检查所读取的数据是否有新版本，保证记录在事务开始时的版本和在结束时一致。&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Hekaton并发控制的好处在于，不需要对Read-Only事务做验证，因为多版本能够保证事务开始时的记录版本在结束时依然存在。对于执行更新的事务，是否做验证由事务的隔离级别决定。例如如果快照隔离级别，就不需要做任何验证；如果要做可重复读，就要做Read Stability；如果是串行化隔离级别，既要保证Read Stability，又要保证Phantom Avoidance。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;b. Hekaton的&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;回收策略&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;Hekaton中的回收任务并不由独立的线程处理，而是每个事务自己回收。如下图所示，Transaction ID为250的事务结束时间戳为150且状态为terminated，此时会有一个Write Set获取所有老版本，并判断当前所有active的Transaction的开始时间戳是否大于ID为250的事务结束时间，即150。如果都大于150，说明不可能再基于时间戳早于150的旧版本进行修改，因而由事务回收旧版本，这部分工作是每个线程在处理Transaction时的额外工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;207.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.3595706618962433&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ27Cdn3bJHUue9DBfeQjHMbzK7v8kReErAaH9zJPcWdUz5PGMCXqUo5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1118&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 多版本并发控制之Hyper&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hyper的并发控制和Hekaton的区别主要有以下三点：1. 直接在记录位置进行更新，通过undo buffer来保存对数据的修改，数据和所有修改被链接在一起；2. 验证是根据最近的更新与读的记录进行比较来实现（后续会涉及到）；3. 串行化处理commit，对提交的事务进行排序，并依次处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;238.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.413290113452188&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2XfZZhN6DdUgT7S0VyI7LVQEpW0wkiauwgdqwYTQgNb7GkA3458Z9n0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1234&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在事务验证方面，Hyper的验证需要在日志中记录Read Predictates，包括查询或Range Scan，而且要记录插入、删除和更新的记录。在Hyper模式中，插入/删除/更新通过对应的Undo Buffer获悉被修改过的记录，所以记录改动对于Hyper而言是容易的。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对于每个Transaction，只需要比较该事务从开始到Commit之间，是否存在其他Transaction对满足搜索条件的数据集进行过增/删/改，从而判断是否存在幻影现象，如果存在，就直接终止事务。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. 多版本并发控制&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;之HANA和&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;HStore/VoltDB&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HANA并行控制方式比较简单，采用悲观的多版本控制，由行级锁保护数据结构，每行由时间戳决定每个版本的可见范围。每个Transaction在更新或删除时都需要申请写锁，而且要做死锁检测。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HStore/VoltDB是一个Partition系统，锁的粒度很粗，每个Partition对应一把锁，因此Transaction在某节点上执行时，需要拿到该节点所有资源。一旦一个事务可能涉及到两个Partition，就需要把两个Partition的锁都拿到。所以Partition系统的优点是单Partition处理速度非常快，缺点是多Partition效率很低。同时，系统对于负载的偏斜非常敏感，如果有热点数据，那么热点数据就构成系统瓶颈。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5. 多版本并发控制之负载预知&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;假设一个工作负载中，事务需要读和写的数据集可以提前获得，就可以在执行前确定所有事务的执行顺序。Calvin就是基于这样的假设设计的VLL (Very Lightweight Locking）超轻量级锁数据库原型系统。通用场景的工作负载是无法提前知道读写集合的，但在存储过程业务的应用中，可以提前确定读写集合，对于这些场景就可以考虑类似Calvin的系统。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;— 数据库管理系统中的持久化技术—&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对于内存数据库而言，和基于磁盘的数据库相同也需要日志和Checkpoint。Checkpoint的目的是恢复可以从最近的检查点开始，而不需要回放所有数据。因为Checkpoint涉及写入磁盘的操作，所以影响性能，因此要尽量加快相关的处理。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;一个不同是内存数据库的日志和Checkpoint可以不包含索引，在恢复时通过基础数据重新构造索引。内存数据库中的索引在恢复时重新构造，构造完成后也放在内存中而不用落盘，内存索引数据丢失了再重构即可。另外一个不同是内存数据库Checkpoint的数据量更大。面向磁盘的数据库在Checkpoint时，只需要把内存中所有Dirty Page写到磁盘上即可，但是内存数据库Checkpoint要把所有数据全部写到磁盘，数据量无论多大都要全量写一遍，所以内存数据库Checkpoint时写入磁盘的数据远大于基于磁盘的数据库。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Hekaton Checkpoint&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;对于持久化的性能优化，第一要保证写日志时的高吞吐量和低延迟，第二要考虑恢复时如何快速重构整个数据库。Hekaton的记录和索引存放在内存，所有操作写日志到磁盘。日志只记录数据的更新，而不记录索引的更新。进行Checkpoint时，Hekaton会从日志中恢复，并根据主键范围并行处理。如下图，分三个主键范围：100~199、200~299、300~399，绿色代表数据，红色代表删除的记录（单独保存被删除的文件）。在恢复时，Hekaton用并行算法在内存中重构索引和数据，过程中根据删除记录过滤数据文件，去除被删除的数据，然后从Checkpoint点开始，根据日志回放数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;250.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.43378607809847197&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ21QQKeN56UcEAr47yU4piaya6crtKUVDRTnsdLlwbHDSAaMmHxMxW1jA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1178&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;其他系统的Checkpoints&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;1. 采用Logic Logging的系统如H-Store/VoltDB，即不记录具体的数据改动，而是记录执行过的操作、指令。它的优势是记录的日志信息比较少。写日志时，HStore/VoltDB采用COW(Copy-on-Write)模式，即正常状态是单版本，但在写日志时会另外“复制”一个版本，待写完再合并版本。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;2. 另一种是定期把Snapshot写入磁盘（不包括索引），比如Hyper就是基于操作系统Folk功能来提供Snapshot。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;— 数据库管理系统中的查询处理—&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;传统的查询处理采用火山模型，查询树上的每个节点是一个通用的Operator，优势在于Operator可以任意组合。但Operator拿到的记录只是一个字节数组，还需要调用另一个方法来解析属性以及属性类型。如果这种设计放到内存数据库中，属性以及类型的解析都是在Runtime而非编译时进行的，会对性能产生影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外对于get-next，如果有百万个数据就要调用百万次，同时get-next通常实现是一个虚函数，通过指针调用，相比直接通过内存地址调用，这些都会影响性能。此外，这样的函数代码在内存中的分布是非连续的，要不断跳转。综上，传统DBMS的查询处理方式在内存数据库当中并不适用，尤其体现在在底层执行时。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;504.011364&quot; data-backw=&quot;547.011364&quot; data-ratio=&quot;0.9213893967093236&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ22QYcKvSJb1s0NM4p1m36uBwXrKzicaNiaSDjoT3giceQ666Y9wpW3UNHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;547&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;内存数据库通常采用编译执行的方式，首先对查询进行解析，然后优化解析后的语句，并生成执行计划，然后根据模板对执行计划进行编译产生可执行的机器代码，随后把机器代码加载到数据库引擎，执行时直接调用。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;203.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.3520456707897241&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2NO5kQ5cIGtnSq2MJ3iaOSX59a3K6icTPFEXvJBq7ib8aSo5rN3xYfLSibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1051&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下图是对不同查询方式的耗时分析，可以看出编译执行方式中Resource Stall的占比很少。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;439.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.7608695652173914&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2AGYhRicjN9ibZoAdmAxNQ8OJRz2CCLdqvqs2wCORd07LX9FbUg58Lib4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外一张图解释了目前的CPU架构实现，L2 Cache和主存之间存在Hardware Pre-fetcher。L2 Cache分为指令Cache和Data Cache，指令Cache会由Branch Prediction实现分支预测，Data Cache会由基于Sequential Pattern的Pre-fetcher实现预测。因此，数据库系统的设计需要考虑该架构下如何充分发挥Pre-fetcher功能，让Cache可以不断为 CPU计算单元提供指令和数据，避免出现Cache Stall。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;463.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.801994301994302&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2ickiaNV9qkvu6FpTHmLO3s8By6gqd26AdI3B4gBmvyrcICHQZ4I4Xbmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;702&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Hekaton编译查询处理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Hekaton的编译采用T-SQL存储过程，编译的中间形式叫做MAT Generator，生成最终的C代码在编译器中执行。它产生的库和通用Operator的区别在于：通用Operator需要在运行时解释数据类型；而Hekaton编译方式是把表的定义和查询编译在一起，每个库只能处理对应的表而不能通用，自然就能拿到数据类型，这样的实现能获得3~4倍的性能提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;724.011364&quot; data-backw=&quot;518.011364&quot; data-ratio=&quot;1.3976833976833978&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2kRlNEcOv9BC2aO9jFjU3Laq9DpcpuPr5OdLHicbM9j2v1y9G6ZDBCJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;518&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;HyPer和MemSQL编译查询处理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;HyPer的编译方式是把查询树按照Pipeline的分割点每段编译。而MemSQL采用LLVM做编译，把MPI语言编译成代码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;327.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.5676937441643324&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2gjdic4m3qMBoncaYXpbvSOUNt0Aic5UmDViaAISDe3CGPMfu5kTWJk4cA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1071&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下图是一个对MemSQL性能的测试。没有采用编译执行时，MemSQL两次执行相同查询的时间都是0.05秒；如果采用编译执行，第一次耗时0.08秒，但是再执行时耗时仅0.02秒。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.35177865612648224&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2q7icL3jX7e0xbibXIEonibAonRPjwVcG25gf9vxu99YK6JUvzr08pMoKA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;506&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.33969465648854963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ29XZjgSyicyymgB5N2NpXWQIlPia5KJZDwYwiaph4ZnJ6mVBiaKOrHnbdicw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;524&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;— 其他内存数据库系统—&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;除了之前提到的几种内存数据库外，还有其他一些著名的内存DBMS出现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;i) SolidDB：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;诞生于1992年的混合型数据库系统，同时具备基于磁盘和内存的优化引擎，使用VTRIE（Variable-length Trie）树索引和悲观锁机制进行并发控制，通过Snapshot Checkpoints恢复。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ii) Oracle Times Ten&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;早期是惠普实验室名为Smallbase的研究项目，在2005年被Oracle收购，现在多作为大型数据库系统的前端内存加速引擎。Oracle Times Ten支持灵活部署，具有独立的DBMS引擎和基于RDBMS的事务缓存；在BI工作时支持Memory Repository，通过Locking进行并发控制；使用行级Latching处理写冲突，采用Write-Ahead Logging和Checkpoint机制提高持久性。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;iii) Altibase&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;于1999年在韩国成立，在电信、金融和制造业应用广泛。Altibase在Page上存储记录，以Page为粒度进行Checkpoint且兼容传统DBMS引擎；支持多版本并发控制，使用预写日志记录和检查点实现持久性和恢复能力，通过Latching-Free对Page的数据进行Checkpoint。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;iv) P*Time:&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 21世纪起源于韩国，2005年出售给SAP，现在是SAP HANA的一部分。P*Time具备极佳的性能处理，对日志记录使用差分编码（XOR），采用混合存储布局，支持大于内存（Larger-than-Memory）的数据库管理系统。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;— 本文小结—&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;每一个数据库系统都是针对特定的硬件环境设计，基于磁盘的数据库系统面临CPU单核、内存小、磁盘慢的场景设计。而内存数据库以内存为主存，不需要再重复读写磁盘，磁盘I/O不再是性能瓶颈，而要解决其他瓶颈，比如：1. Locking/Latching的开销；2. Cache-Line Miss，即如果数据结构定义的不够好或在内存中组织的不好，无法匹配CPU的层级缓存，会导致计算性能变差；3. Pointer Chasing，即需要另一个指针解释，或者查另外的表才能查到记录地址，也是主要的性能开销。此外，还有Predicate Evaluation计算、数据迁移/存储时的大量拷贝、分布式系统应用与数据库系统的网络通信等开销。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在本专栏中，我们介绍了传统基于磁盘的DBMS和内存数据库的特点，并从数据组织、索引、并发控制、语句处理编译、持久化几个方面对内存数据库与基于磁盘数据库的相同和差异性进行了介绍：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 数据组织：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;内存数据库中，把记录分成定长和变长管理，不需要数据连续存储，用指针替代了Page ID + Offset的间接访问；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 索引优化：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;考虑面向内存中的Cach Line优化、快速的内存访问等Latch-Free技术，以及索引的更新不记录日志等；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 并发控制：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;可以采用悲观和乐观的并发控制方式，但是与传统基于磁盘数据库的区别是，内存数据库锁信息和数据绑定，而不用单独的Lock Table管理；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. 查询处理：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;内存数据库场景下的顺序访问和随机访问性能差别不大。可以通过编译执行提高查询性能；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5. 持久化：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;仍然通过WAL（Write-Ahead Logging）做Logging，并采用轻量级的日志，日志记录的内容尽量少，目的是降低日志写入磁盘延迟。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;内存数据库从1970s开始出现经历了理论成熟、投入生产、市场验证等发展环节。随着当前互联网秒杀、移动支付、短视频平台等高并发、大流量、低时延的平台出现，对于数据库性能提出了巨大需求和挑战。同时，内存本身在容量、单位价格友好度上不断提升，以及近期非容失性存储（NVM）的发展，促进了内存数据库的发展，这些因素使得内存数据库在未来有着广阔的市场和落地机会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;注：本文相关内容参照以下资料：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;. Pavlo, Andrew &amp;amp; Curino, Carlo &amp;amp; Zdonik, Stan. (2012). Skew-aware automatic database partitioning in shared-nothing, parallel OLTP systems. Proceedings of the ACM SIGMOD International Conference on Management of Data. DOI: 10.1145/2213836.2213844. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2. &lt;span&gt;Kemper, Alfons &amp;amp; Neumann, Thomas. (2011). HyPer: A hybrid OLTP&amp;amp;OLAP main memory database system based on virtual memory snapshots. Proceedings - International Conference on Data Engineering. 195-206. &lt;/span&gt;&lt;/span&gt;&lt;span&gt;DOI: 10.1109/ICDE.2011.5767867. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. Faerber, Frans &amp;amp; Kemper, Alfons &amp;amp; Larson, Per-Åke &amp;amp; Levandoski, Justin &amp;amp; Neumann, Tjomas &amp;amp; Pavlo, Andrew. (2017). Main Memory Database Systems. Foundations and Trends in Databases. 8. 1-130. DOI: 10.1561/1900000058. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. Sikka, Vishal &amp;amp; Färber, Franz &amp;amp; Lehner, Wolfgang &amp;amp; Cha, Sang &amp;amp; Peh, Thomas &amp;amp; Bornhövd, Christof. (2012). Efficient Transaction Processing in SAP HANA Database –The End of a Column Store Myth. DOI: 10.1145/2213836.2213946. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5. Diaconu, Cristian &amp;amp; Freedman, Craig &amp;amp; Ismert, Erik &amp;amp; Larson, Per-Åke &amp;amp; Mittal, Pravin &amp;amp; Stonecipher, Ryan &amp;amp; Verma, Nitin &amp;amp; Zwilling, Mike. (2013). Hekaton: SQL server&#x27;s memory-optimized OLTP engine. 1243-1254. DOI: 10.1145/2463676.2463710. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(126, 157, 241)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(9, 29, 83)&quot;&gt;往期原创文章&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247489169&amp;amp;idx=1&amp;amp;sn=3be9ce6999b1bde68dc38fa8f5dd3459&amp;amp;chksm=e8c7b1b2dfb038a4708d6200402350563b3e9df0df4dbf8000dda51c67ff9b4ba6354b6877b3&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;内存数据库解析与主流产品对比（二）&lt;/span&gt;&lt;span/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247487789&amp;amp;idx=1&amp;amp;sn=7872b03b049c600c8ef3123c0b36de89&amp;amp;chksm=e8c7b60edfb03f1894e6e7b2ec2d8d90a96ba001ceb379bb3723c09391b74409a5a1fcab2d83&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;内存数据库解析与主流产品对比（一）&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247487280&amp;amp;idx=1&amp;amp;sn=9e8f0ed06f371f22a649daf3d3a7e2bd&amp;amp;chksm=e8c7a813dfb0210543c7f33bfb2f53e36665ad2f38a3a25052143b84dadcfe65e73c971c6266&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(79, 122, 241)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(10, 42, 129)&quot; data-style=&quot;font-size: 14px; text-decoration: underline; color: rgb(10, 42, 129);&quot; class=&quot;js_darkmode__58&quot;&gt;企业数据质量提升实践的几个关键点&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247486933&amp;amp;idx=1&amp;amp;sn=6562407bcdcc1a7e97598681ac7369f1&amp;amp;chksm=e8c7aaf6dfb023e0b106b421dd5a9828b174e0c1cf2eac502c34852dd1fe8222b2866cd39684&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(79, 122, 241)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(10, 42, 129)&quot; data-style=&quot;font-size: 14px; text-decoration: underline; color: rgb(10, 42, 129);&quot; class=&quot;js_darkmode__56&quot;&gt;十分钟漫谈容器网络方案01—Flannel&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247486583&amp;amp;idx=1&amp;amp;sn=66912de8836056ebf0163d3f61f05518&amp;amp;chksm=e8c7ab54dfb0224290df954f503dabd6f77b98a0c777d3718c1f0556d0860ec30424f2363da7&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(79, 122, 241)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(10, 42, 129)&quot; data-style=&quot;color: rgb(10, 42, 129); text-decoration: underline; font-size: 14px;&quot; class=&quot;js_darkmode__53&quot;&gt;DevOps与SRE在容器时代下的发展与变化&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247486294&amp;amp;idx=1&amp;amp;sn=ad01a81146ebeb835ba46f572e476a93&amp;amp;chksm=e8c7ac75dfb025634abc7207817a8c16eb574675b873689afcf85778e41fb7b1994e00b45c6d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot;&gt;&lt;span&gt;Docker和Kubernetes的前世今生（下）&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247486079&amp;amp;idx=1&amp;amp;sn=f6f2ff5c7d0fd3c046594ff8774cf850&amp;amp;chksm=e8c7ad5cdfb0244a21250aea5ab05f96512943ddd6ee317d6b22b8228a5a62661ff05f0011de&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(79, 122, 241)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(10, 42, 129)&quot; data-style=&quot;color: rgb(10, 42, 129); text-decoration: underline; letter-spacing: 0.544px; font-size: 14px;&quot; class=&quot;js_darkmode__49&quot;&gt;Docker与Kubernetes的前世今生（上）&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247485345&amp;amp;idx=1&amp;amp;sn=ff4a4e8d929aa73135222ad0d0bd2b1d&amp;amp;chksm=e8c7a082dfb029940204f8bf12634cc720f5eec302841aba707967a884eda4f3b58e646d1bf6&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(79, 122, 241)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(10, 42, 129)&quot; data-style=&quot;color: rgb(10, 42, 129); text-decoration: underline; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); cursor: pointer; font-size: 14px;&quot; class=&quot;js_darkmode__47&quot;&gt;TCOS 2.0 发布 | 面向异构联邦的容器操作系统&lt;/a&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin: 5px 16px; white-space: normal; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); line-height: 2em;&quot; class=&quot;js_darkmode__60&quot;&gt;&lt;br data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot;/&gt;&lt;/section&gt;&lt;section title=&quot;152，更新于2015-06-14 09:25&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin: 5px auto; white-space: normal; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); line-height: 25.6px;&quot; class=&quot;js_darkmode__61&quot;&gt;&lt;section data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-style=&quot;margin: 15px; line-height: 2em; color: rgb(62, 62, 62);&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(62, 62, 62)&quot; class=&quot;js_darkmode__62&quot;&gt;&lt;section data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(62, 62, 62)&quot;&gt;&lt;span&gt;&lt;span data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(0, 0, 0)&quot;&gt;大数据开放实验室由星环信息科技（上海）有限公司运营，专门致力于大数据技术的研究和传播。&lt;/span&gt;&lt;span data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(0, 0, 0)&quot;&gt;若转载请在文章开头明显注明“文章来源于微信订阅号——大数据开放实验室”，并保留作者和账号介绍。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section title=&quot;499，更新于2015-12-09 17:34&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin: 5px auto; white-space: normal; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); line-height: 25.6px; text-align: center;&quot; class=&quot;js_darkmode__64&quot;&gt;&lt;section data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/S0GvtHOgkWdTEyia1gXviasstgbicicxHdPvibu0ZlC4iaRCJuyGkxxMzOBP87pKZX73kdcA5roW25HH2icAc1jXaUYqg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;1&quot; data-w=&quot;258&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9c843de582c692c50edef5ad79876df1</guid>
<title>Python 源码混淆与加密</title>
<link>https://toutiao.io/k/3g7dp26</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/pajG4l5Gnt55HcTYDo5mBdiaV28ZRC2VhLwD8yr2ySHApdcEPddVhGu5jBNuSNY0go6HJMCbeibDMAUKiaUvSGucg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Python 是一种解释型语言，没有编译过程，发布程序的同时就相当于公开了源码，这也是其作为开源语言的一个特性。但在某些场景下，我们的源码是不想被别人看到的，例如开发商业软件、编写 0day 漏洞 POC/EXP、免杀 shellcode 等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以免杀为例，如果打包的源码没做任何处理，安全研究人员在捕获到样本后连分析的过程都省掉了，直接通过源码锁定特征，很快免杀就会失效，这显然不是我们想看到的。因此对源码做相应的保护还是有必要的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注：本文代码只为介绍源码保护方法，不涉及免杀姿势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;目前保护 Python 代码主要有以下几种方式：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n6&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对代码进行混淆以降低源码可读性&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将 py 文件编译为二进制 pyc 文件&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用 Pyinstaller 打包源码为二进制可执行文件&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用 PyArmor 加密脚本&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将 py/pyc 文件使用 AES 加密为 pye 文件&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将 py 文件转为 c 文件后编译为动态链接库文件&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;代码混淆&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码混淆是指在不改变代码逻辑的情况下，对代码结构进行变换，通过一些带有混淆性质的命名、注释等，使代码变得晦涩难懂，从而达到保护代码的作用。这里提供两种代码混淆的方式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;代码混淆库 pyobfuscate&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;pyobfuscate 会对代码中用户定义的类、函数、变量等进行重命名、更改代码缩进(默认1)、移除注释、添加不影响逻辑的代码语句，最终起到混淆的作用。不过 pyobfuscate 使用 Python2 编写，无法解析 Python3 中的 f-string 等特殊语法，因此使用前需要将源码进行一定程度的修改，当然也可以直接修改 pyobfuscate 库，增加对 Python3 版本的支持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;样例 (对 malicious.py 文件进行混淆)：&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n26&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;python2 pyobfuscate.py malicious.py &amp;gt; malicious_obfuscated.py&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4118457300275482&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joIia2IicuUgVwpxD2XREYOIU6kC6JfOxz7AoQawibGpI7FYvcBKU7yg7MQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;726&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;效果如下图所示，左侧为一段从云端获取 shellcode 加载进内存执行的代码，右图为其混淆后的结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4759581881533101&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joJdoicMn6Hm0OIRbpDvnao4eiaNTTrECRaibhicIeCQD3iaX7L6Fjialqna0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1435&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以看出代码虽然进行了一定程度的变换，但代码结构基本还是原来的样子，并不能很有效的增加破解难度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;利用 AST 混淆源码&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;AST，即抽象语法树，它可以将源代码以树状结构表示。Python 内置了 ast 模块，该模块通过内置函数 compile() 和 parse() 将  Python 源代码解析为 AST，之后可以利用 ast 模块内的方法对 ast 节点进行相应的操作，混淆处理后使用 codegen 库将 AST 重新生成为 Python 源码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;样例：&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;&quot; cid=&quot;n35&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;python2 astobf.py malicious.py &amp;gt; malicious_astobfed.py&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3852040816326531&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jo4wlTIiaRT76hYXhZibYZ8UHBfBoZS4Iv2kLtyQTAGT8T6JsBOwVjnAjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;784&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;效果如下图所示，AST 混淆后的代码略有修改，以保证 Python3 下脚本可正常执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4944769330734243&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jo1yDXSXrvz5pjicUyPDBm9ichLdVZ6vxicX8Gf3TWJjcD2XrqTVEZDLA0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1539&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;混淆后的代码使用 __import__ 动态导入模块、使用 getattr 调用类方法，这样就可以以字符串方式传入模块名和方法名，借由字符串翻转拼接、数字计算等方式达到混淆目的，相比之下，AST 方式的混淆效果明显要优于 pyobfuscate 库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;编译为 pyc 文件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;pyc 文件是 Python 的字节码文件，其存在的意义在于每次调用模块时，不用重新对该模块进行解释，从而提高效率，减少性能损耗。但是在运行一个单独的脚本时，该脚本是不会被编译为 pyc 文件的，这是由于 Python 的解释器认为只有导入的包才会被不断复用，才有编译的价值。不过 Python 提供了 py_compile 库和 compileall 程序用于手动编译 py 文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;py_compile&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;python&quot; cid=&quot;n42&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot;&gt;import py_compile&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;py_compile.compile(file=&quot;malicious.py&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;compileall&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n44&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;python -m compileall ./&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.25196850393700787&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joq9m9F1vQVF0H2gq0PzLtheqQtH0F5NUvSTGxPuBAAzsCAnMvfK7ictg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1143&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;编译为字节码文件后，确实没办法直接读取源码了，但是 Python 有 uncompyle6 这么一个跨版本反编译器，可以将 Python 字节码转换回等效的 Python 源代码。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n47&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot;&gt;python -m pip install uncompyle6&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;uncompyle6 malicious.cpython-37.pyc &amp;gt; malicious_Decompiled.py&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3840104849279161&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jovEK7cETNQH2AYKqOySoBopQags76x2N78GeymyAu1mJw4pTCk0nAIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4966722129783694&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jokHFlJdlgx4Ryvw8UW3ic2qOPvgJmr8biawSHvic8VtR06icFMklaP7VibEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1202&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而且 pyc 还有一个弊端，就是它依赖于 Python 解释器的版本，使用某版本解释器编译的 pyc 文件必须使用相同版本解释器运行才能正常工作， 所以实际上将 py 文件编译为 pyc 文件的实用性并不是很大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;打包为独立可执行程序&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过将 Python 文件打包为独立可执行程序也是一种保护源码的方式。Windows 平台下 ，有 Pyinstaller 、 py2exe 和 cx_Freeze 等多种打包程序可以使用，以 Pyinstaller 为例，打包 malicious.py 命令如下：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n53&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot;&gt;python -m pip install pyinstaller&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;pyinstaller -Fw -i myicon.ico malicious.py&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;-F 表示生成单文件，-w 表示隐藏控制台窗口，-i 表示为生成的 exe 文件添加图标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4313326551373347&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joqUFTbpewQJnOSsy6aYvuwniaiaIaI4M4dDBm4D05Zoibz9gWv2IuNjxicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;983&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Python 打包的 exe 程序并不是将文件编译为真正的机器码，而是将脚本编译为 pyc 后连同依赖文件、当前的 Python 解释器一同打包起来，根据命令参数生成文件夹或打包成单独的可执行文件。之后运行 exe 时，实际运行的是一个引导加载程序，引导加载程序会创建一个临时的 Python 环境，通过解释器副本来执行 pyc 文件。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于这种运行方式的特殊性，Pyinstaller 打包的 exe 文件也是可以被还原出源码的。使用 pyinstxtractor 解包 exe：&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n58&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;python pyinstxtractor.py malicious.exe&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.41230551626591233&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joqVlrnQ0h0ia9f2C5xUOIJBGzxHibF1aztjJnByribvR0icMJxYJdyv0TiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1414&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解包后的文件夹内包含了 malicious.pyc 文件，之后使用 uncompyle6 反编译该文件就可以拿到源码。所以将 Python 打包为 exe 只相当于在编译为 pyc 的基础上添加了一步打包操作，同样不能很有效的对源码进行保护。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;使用 PyArmor 加密代码&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n62&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p&gt;&lt;span&gt;PyArmor 是一个用于加密和保护 Python 脚本的工具。它能够在运行时刻保护 Python 脚本的二进制代码不被泄露，设置加密后 Python 源代码的有效期限，绑定加密后的 Python 源代码到硬盘、网卡等硬件设备。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;它的保障机制主要包括：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n65&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;加密编译后的代码块，保护模块中的字符串和常量&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在脚本运行时候动态加密和解密每一个函数（代码块）的二进制代码&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码块执行完成之后清空堆栈局部变量&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通过授权文件限制加密后脚本的有效期和设备环境&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PyArmor 的工作原理相对复杂，有兴趣的朋友可以参考官方的说明文档：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://pyarmor.readthedocs.io/。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用 PyArmor 默认加密方式加密 malicious.py：&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;&quot; cid=&quot;n77&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;pyarmor obfuscate malicious.py&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5500878734622144&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jo7csSqg4bicTWSDL3ZPXvZl8ZszuoobkujwxU3bDqiblHtNAtqUg0cs0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1138&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.155467720685112&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joBE3WUg7nUSy7RNLczCQ4R1ybalDgw93SwIUb6SHKh4iboQfyRwLEp3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;759&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加密后的文件前两行代码是引导代码，用于加载 pytransform 动态链接库和添加三个内置函数到 builtins 模块，之后调用 __pyarmor__ 导入加密模块执行加密代码。加密后的文件目录还有一个名叫 pytransform 的运行辅助包，它是解密文件所必须的，因此打包加密文件时需要同时将运行辅助包打包进去。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;&quot; cid=&quot;n81&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;pyinstaller -Fw --add-data &quot;pytransform;pytransform&quot; malicious.py&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.44569288389513106&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5josN61LRXTLyJsqViaokicId9mzXhBrxFoIcXM0a25smFQZwv45FdGHmSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1335&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PyArmor 使用分片式技术来保护 Python 脚本。所谓分片保护，就是单独加密每一个函数，在运行脚本的时候，只有当前调用的函数被解密，其他函数都没有解密。而一旦函数执行完成，就又会重新加密。这种方式相对于混淆来说，效果明显要好的多。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;加密为 pye 文件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;pyconcrete 是另一个 python 的文件加密库，安装它需要提供一个密钥，用于之后对源码文件进行加密，同时由于过程中涉及 .c 文件的编译，因此 Windows 下需要安装 VC++ build tools，Linux 下需要安装 GCC。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解压出 pyconcrete 库源码后，使用 setup 进行安装。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n87&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;python setup.py install&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6798457087753134&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joZHzylkhIecXnwOdppYd1tMcqYW917EZBJDL6EQObriafqk3uEqvho8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1037&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;安装成功后复制 pyconcrete-admin.py 文件到项目文件夹就可以使用了。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;pyconcrete 可以将源码文件夹下所有 py/pyc 文件通过 AES128 加密为 pye 文件，该文件无法被正常的 Pyhon 解释器解释，需要使用 pyconcrete 程序加载运行。当然也可以将函数定义部分提出来作为库文件单独加密，函数调用部分独立出来作为一个入口，如下，将 malicious.py 文件拆分为 malicious_func.py 和 malicious_enter.py。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5199686765857479&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joAu97n8umW9fHNmOrgnZXgpcwDQVtLzrY1y0B6Xwpo7Dq4eKbahT7vQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1277&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对 malicious_func.py 文件单独加密。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n93&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;python pyconcrete-admin.py compile --source=malicious_func.py --pye&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joCjGibkDmV0MgjkZWSln1VSv0nojQg5NauKu33VZJVic9NO9zErfsMyicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1186&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加密后在只有 malicious_enter.py 和 malicious_func.pye 两个文件的情况下运行 malicious_enter.py 文件，脚本是可以在本地正常运行的，因为解释器在导入 pye 文件时会自动调用环境变量中的 pyconcrete 进行解密。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.1962233169129721&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joGmNLkGko8QyYMnyxic8omUwtLT1LLBKTGkZ8Mgw2WDZ18OII0QvH0Mg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1218&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果想将其打包为 exe 在其他机器上运行，还需要进行一些修改：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot; start=&quot;&quot; cid=&quot;n98&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;修改 malicious_enter.py 文件，在首部导入 pyconcrete，以及加密脚本中需要用到的库，这是为了在调用 Pyinstaller 时，将 pyconcrete 解密程序和脚本依赖的库同时打包进 exe。pyconcrete 库需要在其他库之前导入，它会自动和其他模块挂钩，在其目录寻找 pye 文件，然后通过 _pyconcrete.pyd 对 pye 文件进行解密。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pyinstaller 不会将 pye 文件主动打包进 exe，需要在打包时通过 --add-data 添加。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5247813411078717&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jo2bcuXpkGpsULUSlyicKGWgcNXZIxYzicOSRLyDm621EHnO7WuQicazMkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1029&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样打包出的 exe 就可以执行了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4096244131455399&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jobmg8DzUdTibUP6JDR9NHPEevFsUhe1nwO9ib0bbOadUVfQr0QvopHzsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;852&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用 pyconcrete 加密的源码在运行时会调用 _pyconcrete.pyd 文件进行解密，该文件内存储了用于解密源码的密钥。由于其密钥隐藏在二进制数据中，无法通过十六进制编辑器直接看到，因此想要解密源码，就必须对 _pyconcrete.pyd 文件进行逆向分析，提取密钥。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;编译为 pyd 文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面提到的 pyd 文件是 Python 的动态链接库，类似 Windows 下的 DLL 和 Linux 下的 SO，它是 Cython 结合 C 的编译器编译而来，涉及 C 的编译， 因此同样需要 VC++ build tools 或 GCC。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实际上，Cython 是一门单独的语言，专门用来写 Python 的 C 扩展。原本是为了解决 Python 语言的效率问题，但由于其有专门的转换器可以将 .py 文件转换为 .c 文件 (自动加入大量 C-Python API ) 后编译为 pyd，因此也可以利用这个特点来保护 Python 源码，下面为编译方法：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;pyd 的文件为库文件，所以也需要一个 py 文件进行调用，这里还是使用 malicious_enter.py 和 malicious_func.py 作为示例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;创建一个 py 文件，用于将 malicious_func.py 编译为 pyd。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;python&quot; cid=&quot;n112&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;from distutils.core import setup&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;from Cython.Build import cythonize&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;setup(&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    ext_modules = cythonize([&#x27;malicious_func.py&#x27;,]),&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;cythonize 方法会将 malicious_func.py 的 Python 代码转换为 Cython 代码，之后调用 setup 将 .c 文件编译为 pyd。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n114&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;python build_pyd.py build_ext --inpla&lt;/span&gt;&lt;span role=&quot;presentation&quot;&gt;ce&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6796714579055442&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joDgUcibduNZNOBTos0gokSZhAn0kBdooLqYMiab2THnVIFKciaibLsibgUUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;974&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以直接运行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.20134228187919462&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joQxogL4K5ib596eLdjtwWsCUhciafvnXQVBSOFxJ1ZGtOCPcsLZiamibq3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1192&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也可以打包为 exe，Pyinstaller 会自动将 pyd 文件作为依赖导入。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.17105263157894737&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jomNPJdPJ16O3U50QaL9aLjc8NkWlo423SyzrcCNNvFXiaiaS2YxFbK1Bw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1292&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;编译为 pyd 后，想要了解源码的逻辑就必须通过逆向来分析，相较于从 _pyconcrete.pyd 中提取密钥解密 pye，这种直接将完整逻辑代码编译为二进制文件的方式更不容易被逆向出来，逻辑写的越复杂，逆向分析的代价就越高。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;最后，&lt;/span&gt;&lt;span&gt;上面说的这些 Python 源码保护方法其实正常情况下很少会用得到，既然使用了 Python，一般也不会有人刻意去隐藏自己的代码。不过对于安全领域，这些方法还是有一定价值的。拿免杀来说，复杂的加解密流程，配合上面某些方法，说不定就能很好的隐藏自己的特征，养出一匹低调的马儿。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;未完待续...&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-darkmode-bgcolor-16033623352947=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033623352947=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__4&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-darkmode-bgcolor-16033623352947=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033623352947=&quot;rgb(255, 255, 255)&quot;&gt;&lt;p class=&quot;js_darkmode__5&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;360BugCloud开源漏洞响应平台，国内自主议价漏洞收录模式开拓者！&lt;/span&gt;聚焦收录未被披露的开源以及通用组件高危漏洞，致力于维护开源软件和供应链安全。平台采用入驻邀请制，只面向成功提交未被披露漏洞的安全研究员开放。&lt;/span&gt;&lt;span&gt;360BugCloud开源漏洞响应平台首创“自主议价”模式及“第三方专家评审”机制，先议价后交洞，仅需提交漏洞影响力描述即可进行议价，让安全研究员完全掌握漏洞提交主动权，高额奖金上不封顶，让漏洞价值得到充分保障与肯定。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;步轻松实现在360BugCloud提交漏洞&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.12660135644310475&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt47NrPdS5Fjg9X5ELN8k4ERHSNkViaRyJQ223ic9W4VRobKYicfic4oaIhibuO1PBrbV5K5YrGBoye67IA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1327&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;360BugCloud漏洞提交地址&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt6MgPpQNjUVSTFfmoOribhBO9lz5OuynFTDtpGCZYjLxqjRyFqJTKRfpjDibuR0NISwgHyHyOIxnHhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;360BugCloud开源漏洞响应平台秉承“Trust信任、Tenet原则、Top权威、Together共建”的04T宗旨，力争打造以技术为驱动、以安全专家为核心的应急响应平台，提升网络安全防护能力，为国家、企业、用户打造最安全的网络环境。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;2.1653333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jo7Naa7aqkia6qPd2gf5JzZ38mh5aX9qJiclO2rZZIRJlwQ3EFYdAcB2vw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1125&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-darkmode-bgcolor-16033623352947=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033623352947=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__4&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-darkmode-bgcolor-16033623352947=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033623352947=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16033623352947=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033623352947=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin: 0.5em 16px; max-width: 100%; width: 636.375px; min-height: 1em; white-space: pre-wrap; border-color: rgb(68, 231, 172); border-top-width: 1px; color: transparent; border-top-style: dashed; line-height: normal; text-align: center; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__5&quot;&gt;&lt;br data-darkmode-bgcolor-16033623352947=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033623352947=&quot;rgb(255, 255, 255)&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.67265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt55HcTYDo5mBdiaV28ZRC2Vh0Qzjvba44iaLcKJiaWbaWeQdbDoRRe0mGIspGYjQUTWoHicHbSia8icOFgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>