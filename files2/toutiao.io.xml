<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>2238ff0e46f8f6e2033dc4fe8f6f3a1e</guid>
<title>温故知新-软件生存周期和过程模型</title>
<link>https://toutiao.io/k/zuhm9p8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
            &lt;h1&gt;在《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486911&amp;amp;idx=1&amp;amp;sn=16a0624b76463ebc4d5b22d67aad2d02&amp;amp;chksm=fafde711cd8a6e07003d0044ee6a35336408ab338eb2f691805964ad76b4a7c5d053b37c31e9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;温故知新-什么是软件工程&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;温故知新-什么是软件工程&lt;/strong&gt;&lt;/a&gt;》中，我发起了一个投票：word、excel基于软件功能的划分来看属于什么软件？从结果来看，77%的朋友选择了【应用软件-个人计算机软件】。这个选项在大学考试时选它一定没错。&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;但是剩下选【支撑软件】的朋友并不意味着选择了一个错误的答案。软件=程序+文档+数据。支撑软件是协助软件开发的工具性软件。开发文档用word、excel有什么不行吗？&lt;/h1&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9378698224852071&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlib2EZUgfwByhZkibDJtviabtTu0WVK8GTPtUEjab70SeUPjH8WDBTqqDZ5ib2EHXma9hwKJPl02mwcwg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;338&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;软件生存周期&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;软件生存周期也叫软件生命周期。&lt;span&gt;是软件的产生直到报废或停止使用的生命周期。在国标，也就是国内标准中，被分成了下面8个阶段。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7410881801125704&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlib2EZUgfwByhZkibDJtviabtT93PHiaia0ib3I9I9uIE6WNuekMWDnHGkZibRnG2XPfrGuOBnd3lcNbgpqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;533&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这些阶段咱们大家在平时工作中都在用，不再赘述，重点说一下可行性研究与计划。不具备可行性不代表不能做，有可能是成本不可接受。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;之前贾跃亭贾总为了制造智能汽车，几乎赔上了整个乐视。其实那段时间想做智能汽车的不只是贾总，很多人都想做。但是其他人在可行性研究与计划阶段，估算出其成本远高于收益，所以在可行性研究与计划阶段就放弃了。我个人因为之前也在乐视工作其实蒙受了不小的经济损失，乐视现在还欠我十几万的专利费，当时还是我们总监出面帮我要回来一部分。其实我对贾总追求梦想的精神上还是很钦佩的。但是在&lt;span&gt;可行性研究与计划阶段&lt;/span&gt;，我不赞同其为了自己的梦想放弃公司整体利益的行为。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;常用的软件过程模型&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;软件过程模型是将软件生存周期的各个阶段组合的过程。就好像是各个阶段是不同的菜，软件过程模型是套餐，是一种组合方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;瀑布模型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;瀑布模型是将软件生存周期的各项活动规定为按固定顺序而连接的若干阶段工作，形如瀑布流水，最终得到软件产品。在瀑布模型之前，没有模型的指导，开发是比较混乱的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7818181818181819&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlib2EZUgfwByhZkibDJtviabtTa49ydub4vX2Sc6uGaYS0vF0Y9lIcaRSrgKribesl8Kdvfrt1Npxmezg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;550&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是瀑布模型具有顺序性和依赖性，必须等前一个阶段完成才能进行下一个阶段，前一个阶段的输出是下一个阶段的输入。所以，人们就提出推迟实现的思想，就是把程序物理实现推迟到最后，保证前期工作的扎实。相信，这也是实际工作中，很多团队都反复强调的一点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6337777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlib2EZUgfwByhZkibDJtviabtTTZic294zA4TtLm7tsyJFfLhIIByGyp1Mafqsb8amQlb8AahoOialRX2Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1125&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;快速原型模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;快速原型模型是说要快速建立反映用户主要需求的原型系统，反复由用户评价修正，开发出最终产品。快速原型模型在确定需求上优于瀑布模型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种模型非常适用于非自主研发的、或者初创期的产品。比如一个初创公司要去拉投资，除了一堆设计理念的文档，很多潜在的投资人都愿意看到产品的初始模型，再决定是否进行投资。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是这种开发方式也有明显的缺点：初期可能由于时间问题，代码和设计底层都很粗糙，后期稳定性和架构优化会有很大的阻力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5305466237942122&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlib2EZUgfwByhZkibDJtviabtTBQWPkdL3bQofVicDGJpFhyFYv7hBSzSL7Ibn2eECIA1v4tSXkhyX9eg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;933&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;增量模型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;增量模型又叫渐增模型，将软件产品作为一系列的增量构件进行设计、编码、集成和测试。区别于瀑布模型和快速原型模型，增量模型是分批的而不是一次性将全部产品交付给用户。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在很多互联网产品都是采用这种形式，开始时只提供基础的功能，后期又不断丰富。比如微信，刚开始只是一个IM即时通信工具。后来又开放了朋友圈、红包、搜一搜等功能。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;增量模型可以在较短的时间提供给用户一个功能性产品，还给了用户充裕的时间学习适应产品。但是增量模型对扩展性有很高的要求。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5897959183673469&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlib2EZUgfwByhZkibDJtviabtTWHA4OuKJnqQJCbPuiaQEK4APJ2ibfv2OCwRMsLibFfIUEk1akX5L1cialA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;490&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;螺旋模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;螺旋模型基本的做法是在“瀑布模型”的每一个开发阶段之前，引入非常严格的风险识别、风险分析和风险控制。直到采取了消除风险的措施之后，才开始计划下一阶段的开发工作。否则，项目就很可能被取消。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7454545454545455&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlib2EZUgfwByhZkibDJtviabtTPAhgUPNFMWuF5V1yv55gm13j3U6RAmibTYCTQ1US1iccfkYsMPm3QQiag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;715&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;螺旋模型沿着螺线进行若干次迭代，图中的四个象限代表了以下活动：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1） 制定计划：确定软件目标，选定实施方案，弄清项目开发的限制条件；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2） 风险分析：分析评估所选方案，考虑如何识别和消除风险；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3） 实施工程：实施软件开发和验证；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4） 客户评估：评价开发工作，提出修正建议，制定下一步计划。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;螺旋模型由风险驱动，强调可选方案和约束条件从而支持软件的重用，有助于将软件质量作为特殊目标融入产品开发之中。但是，螺旋模型也有一定的限制条件，具体如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1） 螺旋模型强调风险分析，但要求许多客户接受和相信这种分析，并做出相关反应是不容易的，因此，这种模型往往适应于内部的大规模软件开发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2） 如果执行风险分析将大大影响项目的利润，那么进行风险分析毫无意义，因此，螺旋模型只适合于大规模软件项目。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3） 软件开发人员应该擅长寻找可能的风险，准确地分析风险，否则将会带来更大的风险&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用螺旋模型的代表是联想文化，&lt;span&gt;联想文化的螺旋发展模型脱胎于竞争性文化价值模型。在联想文化整理的过程中，对竞争性文化价值模型进行了改进和完善，逐渐形成了适合联想文化的企业文化螺旋发展模型。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在我15年从业经验中，对软件产品的开发采用&lt;span&gt;螺旋模型&lt;/span&gt;的，我并没有见过。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;敏捷过程模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;敏捷过程模型是指基于迭代开发的软件开发方法。敏捷方法将任务分解为较小的迭代, 或者部分不直接涉及长期计划。在开发过程的开始就确定了项目范围和要求。事先明确定义了有关迭代次数, 每次迭代的持续时间和范围的计划。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每次迭代都被视为敏捷流程模型中的短时间”框架”, 通常持续一到四个星期。将整个项目分成较小的部分有助于最大程度地降低项目风险, 并减少总体项目交付时间要求。每次迭代都涉及一个团队, 在整个软件开发生命周期中进行工作, 包括计划, 需求分析, 设计, 编码和测试, 然后再向客户展示有效产品。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;敏捷开发应该在咱们平时工作中常用，一般项目制的产品经常采用这种过程模型。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3420479302832244&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlib2EZUgfwByhZkibDJtviabtTWJnIn8PCA2fiaIhAJxREOk3dF7hGAvRgJcCJQGm7rZwACOs4pkSocRQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;918&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;如果文章对你有帮助，请点【&lt;strong&gt;&lt;span&gt;在看&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;】&lt;/span&gt;&lt;/p&gt;&lt;p&gt;如果文章你喜欢，&lt;span&gt;请点【&lt;/span&gt;&lt;strong&gt;&lt;span&gt;赞&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;】&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果文章既没有帮助又不喜欢，或者有其他建议，欢迎【&lt;/span&gt;&lt;strong&gt;&lt;span&gt;留言&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;】&lt;/span&gt;或者直接加我微信 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;brmayi&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 反馈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;反馈是你的思考，我的成长，我们同步的进步源泉~&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>438c7a1f0071f0e2fa4c4dce22f34f2b</guid>
<title>深度解密（二）：Kubernetes从中心走向边缘</title>
<link>https://toutiao.io/k/9w6x75x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                  &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                    &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                  &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                  &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                &lt;/div&gt;
                                              
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f6b1d50f850c784cf29a4fe1a5864a18</guid>
<title>腾讯人均年薪增至84.7万元；微博被SEC列入「预摘牌名单」；英伟达发布下一代Hopper架构GPU｜开发者头条</title>
<link>https://toutiao.io/k/svj91xj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;我爱程序员&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;developerWorks&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;我们的产品：《码农周刊》 http://manong.io/ 、《开发者头条》 http://toutiao.io/&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1ce00ceb3eddb3e112433ef4bf9a69a8</guid>
<title>数位上市公司 CTO 都在订阅，你还等什么？</title>
<link>https://toutiao.io/k/gaqeyaa</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>be2655d5da2a20827b6cd166348e623d</guid>
<title>かいわ面试官 の 两个事务并发写，能保证数据唯一吗？</title>
<link>https://toutiao.io/k/pq5riwl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;哟，又是我小白，**面试官就是我，想不到吧。最近有点高产了。&lt;/p&gt;&lt;p&gt;连我自己都害怕了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AnAgeMhDIiamCILQTcRXpCpS9LoQEuu5rMb1BcvTflPVxhKlbVM7Bd0z98bZJ5fKOZGmpfab7Yjw4j4NG6P13eA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;375&quot;/&gt;&lt;/p&gt;&lt;p&gt;直接进入正题吧。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;两个事务并发写，能保证数据唯一吗？&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我先来解释下标题讲的是个啥。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们假设有这么一个用户注册的场景。用户并发请求注册新用户。&lt;/p&gt;&lt;p&gt;你有一张数据库表，也就是下面的user表。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4166666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIiamCILQTcRXpCpS9LoQEuu5rImbPeV8tQrswFDQS8FyDTMEI5YOv0TPRSFKnMEUQYibpgkWmDQxQs8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;user表数据库原始状态&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;产品经理要求用户和用户之间，电话号码不能重复，为了保证这一点。我们想到了先查一下数据库，再判断一下，如果存在，就退出，否则插入一条数据。类似下面这样的伪代码。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; phone_no =&lt;span&gt;2&lt;/span&gt;;  // 查询sql&lt;br/&gt;if (user 存在) {&lt;br/&gt;        return &lt;br/&gt;} else {&lt;br/&gt;  &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;;   // 插入sql&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但这是两条sql语句，先执行查询sql，判断后再决定要不要执行插入sql。每次用户注册的时候都会执行这么一段逻辑。&lt;/p&gt;&lt;p&gt;那如果，此时有多个用户在做操作，就会&lt;strong&gt;并发&lt;/strong&gt;执行这段逻辑。&lt;/p&gt;&lt;p&gt;如果都并发执行，第一条sql语句执行完之后，都会发现没有用户存在。此时都执行了插入，这样就出现了两条一样的数据才对。&lt;/p&gt;&lt;p&gt;所以，有人就想了，这&lt;strong&gt;两条sql语句逻辑应该是一个整体&lt;/strong&gt;，不应该拆开，于是就想到了事务，通过事务把这两个sql作为&lt;strong&gt;一个整体&lt;/strong&gt;，要么一起执行，要么都回滚。&lt;/p&gt;&lt;p&gt;这正是数据库ACID里的A（Atomicity），原子性的完美体现啊。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4166666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIiamCILQTcRXpCpS9LoQEuu5rqZJmXLNj8lEfica5mIKXznIDJiceIcVZfnz6OqOPTf8bATLgNuqkfAKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;ACID&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;伪代码类似下面这样。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;begin&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; phone_no =&lt;span&gt;2&lt;/span&gt;;  // 查询sql&lt;br/&gt;if (user 存在) {&lt;br/&gt;        return &lt;br/&gt;} else {&lt;br/&gt;  &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;;   // 插入sql&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;commit&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么问题来了，&lt;strong&gt;这段逻辑，并发执行，能保证数据唯一？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;当然是不能。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;事务內的多条sql语句，确实是原子的，要么一起成功，要么一起失败，这没错，但跟这个场景没什么太大关系。事务是并发执行的，第一个事务执行查询用户，并&lt;strong&gt;不会阻塞&lt;/strong&gt;另一个事务查询用户，所以都有可能查到用户不存在，此时两个事务逻辑都判断为用户不存在，然后插入数据库。事务内两条sql都执行成功了，于是就插入了两条一样的数据。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.509375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIiamCILQTcRXpCpS9LoQEuu5riaWaeJ0WCOROFWPMTHXMdHZib2jWb8vnPj5kk1K29eHicYHhjicUFqL7Xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;并发事务写入两条数据.drawio&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;怎么保证数据唯一？&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;那么我们接下来聊聊，怎么保证上面这种场景下，插入的数据是唯一的。方法有很多种，但我们今天只讨论mysql内部的做法，不考虑其他外部中间件（比如redis分布式锁这些）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;唯一索引&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;通过下面的命令，可以为数据库user表的phone_no字段加入唯一索引。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;ALTER&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;`user`&lt;/span&gt; &lt;span&gt;ADD&lt;/span&gt; &lt;span&gt;unique&lt;/span&gt;(&lt;span&gt;`phone_no`&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们执行一条写操作时，比如下面这句，&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;`user`&lt;/span&gt; (&lt;span&gt;`user_name`&lt;/span&gt;, &lt;span&gt;`phone_no`&lt;/span&gt;) &lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;&#x27;小红&#x27;&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一次会插入成功，第二次再执行插入，则会出现报错。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Duplicate entry &#x27;2&#x27; for key &#x27;phone_no&#x27;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;含义是phone_no这个字段是唯一的，加两次phone_no=2会导致重复。&lt;/p&gt;&lt;p&gt;于是乎回到我们文章开头的场景里，就完美解决了重复插入的问题了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那么问题来了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;为什么唯一索引能保证数据唯一？&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;我们看看一句写操作，会经历什么。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.04&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIiamCILQTcRXpCpS9LoQEuu5rExrx1vp03vRHSE3D16XcjME3JOsv3PhDicByn6pRyWpaxuZduJEYUDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;Mysql架构&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;首先，mysql作为一个数据库，内部主要分为两层，一层是&lt;strong&gt;server层&lt;/strong&gt;，一层是&lt;strong&gt;存储引擎层&lt;/strong&gt;（一般是&lt;strong&gt;innodb&lt;/strong&gt;）。&lt;/p&gt;&lt;p&gt;server层主要管的是数据库链接，权限校验，以及sql语句校验和优化之类的工作。请求打到存储引擎层，才是真正的查询和更新数据的操作。&lt;/p&gt;&lt;p&gt;大家都知道数据库是持久化存储，且最后都是把数据存到&lt;strong&gt;磁盘&lt;/strong&gt;上的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;那数据库读写是直接读写磁盘数据吗？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;不是，如果直接读写磁盘的话，那就太慢了，为了提升速度。&lt;/p&gt;&lt;p&gt;它在磁盘前面加了一层内存，叫&lt;strong&gt;buffer pool&lt;/strong&gt;。它里面有很多细节，但最主要的就是个双向链表，里面放的是一个个数据页，每个数据页的大小默认是 16kb，数据页里面放的就是磁盘的数据。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIiamCILQTcRXpCpS9LoQEuu5rFSuVgdfkOgbZP0WCHtEVUeyrGdn3zicx8VRaK9bNYBujWDVicnUkIJHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;bufferPool与磁盘&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;于是有了这层buffer pool内存，mysql的读和写操作都可以先操作这部分内存，如果想要读写的数据页不在buffer pool里，再跑到磁盘里去捞。由于&lt;strong&gt;读写内存的速度比读写磁盘快得多&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;所以引擎读写都快多了。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;但这还不够，&lt;strong&gt;很多时候写操作，我的诉求就是把xx更新为xx，或插入xx，数据库光知道这一点就够了，我根本不需要知道数据页原来长什么样子。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;有点抽象？举个例子吧。&lt;/p&gt;&lt;p&gt;比方说我想要把id=1的这条数据的phone_no字段更新为100，数据库知道这一点就够了，至于这条数据原来phone_no究竟是等于20，还是30，这根本不重要，反正最后都会变成我想要的phone_no=100。&lt;/p&gt;&lt;p&gt;也就是说，如果有那么&lt;strong&gt;一块内存&lt;/strong&gt;，记录下我准备把数据改成什么样子，然后后续异步慢慢更新到磁盘数据上。那我甚至到不需要在一开始就把这块数据从磁盘读到buffer pool中，按照这个思路，&lt;strong&gt;change buffer&lt;/strong&gt;就来了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4166666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIiamCILQTcRXpCpS9LoQEuu5rv8icqzULhm9cB0J2jaFtEbAdvlcDefFYFaZK2fCIpjprY2ibKmhia82XA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;changeBuffer在bufferPool内&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;于是乎，写加了&lt;strong&gt;普通索引&lt;/strong&gt;的数据，它只要把想要写的内容写到change buffer上，就立马结束返回了。后面innodb引擎拿着这个change buffer，再异步读入磁盘数据到内存，将change buffer的数据修改到数据页中，再写回磁盘，这速度就上来了，秒啊。&lt;/p&gt;&lt;p&gt;但这个change buffer，放在&lt;strong&gt;唯一索引&lt;/strong&gt;这里就不管用了，毕竟，它得保证数据真的只有一条，那就得去看下数据库里，是不是真的有这条数据。&lt;/p&gt;&lt;p&gt;所以，对于insert场景，普通索引把需求扔到change buffer就完事返回了，而唯一索引需要真的把数据从磁盘读到内存来，看下是不是有重复的，没重复的再插入数据。&lt;/p&gt;&lt;p&gt;这唯一索引，在性能上就输了一截了。&lt;/p&gt;&lt;p&gt;所以回到&lt;strong&gt;唯一索引为什么能保证数据唯一&lt;/strong&gt;的问题上，一句话概括就是，&lt;strong&gt;唯一索引会绕过change buffer，确保把磁盘数据读到内存后再判断数据是否存在，不存在才能插入数据，否则报错，以此来保证数据是唯一的。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;更改隔离级别&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;上面之所以写入时数据不能保证唯一是因为有两个事务在同时并发操作。&lt;/p&gt;&lt;p&gt;mysql有四层隔离级别，应对不同的事务并发处理能力。之前写的&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg5NDY2MDk4Mw==&amp;amp;mid=2247487976&amp;amp;idx=1&amp;amp;sn=3c2335694d947f951325f7fb9279a8fd&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;《mysql主库更新后，从库都读到最新值了，主库还有可能读到旧值吗？》&lt;/a&gt;,里面用一个例子简单介绍了他们之间的区别。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4166666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIiakO9eicHw4LMHdub4ibnLKExobAHdhCMaBqzqa0HPIn2gl50hyT4nu1ER0CKpFyPJDeWtC4WJRzlDIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;四层隔离级别&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;其中，串行化（serializable）隔离级别，正好从效果上来看，事务们都是依次执行的，这样就不存在并发问题了。&lt;/p&gt;&lt;p&gt;于是，执行逻辑成了下面这样。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.66015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIiamCILQTcRXpCpS9LoQEuu5rVhyoa0lAtfnSlR9OtIYSlL4XmSgEhL17N5wvkNeliaEBc4W75CVeV3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;串行化隔离级别加锁并发写数据&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;所以也能保证只插入一条数据。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;这方案生产中能用吗？&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;这个方案虽然确实能保证只插入一条数据，但&lt;strong&gt;生产中不建议这么用&lt;/strong&gt;，性能比较差，用了可能会被同事喷。但是如果一定要用，可以&lt;strong&gt;只将当前数据库连接会话（session）改为串行化，而不是将全局（global）改为串行化。&lt;/strong&gt;这样就不会影响到其他会话的事务隔离级别。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// 修改当前会话为串行化&lt;br/&gt;&lt;span&gt;SET&lt;/span&gt; &lt;span&gt;SESSION&lt;/span&gt;  &lt;span&gt;TRANSACTION&lt;/span&gt; &lt;span&gt;ISOLATION&lt;/span&gt; &lt;span&gt;LEVEL&lt;/span&gt;  &lt;span&gt;SERIALIZABLE&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;// 查看当前会话的事务隔离级别&lt;br/&gt;&lt;span&gt;select&lt;/span&gt; @@tx_isolation; &lt;br/&gt;// 输出 SERIALIZABLE&lt;br/&gt;&lt;br/&gt;// 查看全局事务隔离级别&lt;br/&gt;&lt;span&gt;select&lt;/span&gt; @@global.tx_isolation;&lt;br/&gt;// 输出 REPEATABLE-READ&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h3&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;加唯一索引可以保证数据并发写入时数据唯一，而且最省事省心。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据库通过引入一层buffer pool内存来提升读写速度，普通索引可以利用change buffer提高数据插入的性能。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;唯一索引会绕过change buffer，确保把磁盘数据读到内存后再判断数据是否存在，不存在才能插入数据，否则报错，以此来保证数据是唯一的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;更改隔离级别为串行化，也能实现并发写入时数据唯一。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;给大家留个问题呗，前面也提到了，&lt;strong&gt;innodb中，利用了change buffer，为普通索引做了加速&lt;/strong&gt;。&lt;strong&gt;有没有哪些场景下，change buffer不仅不能给普通索引加速，还起到反作用的呢？&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;最后&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;大家也别笑，文章开头提到的通过开事务来保证数据唯一性的错误操作，其实很容易犯，而且我曾经也遇到过不止一次这样的事情。&lt;/p&gt;&lt;p&gt;做这个操作的人，还会信誓旦旦，言之凿凿的说出他的理解，在我解释了几遍发现无果之后，我选择低头假装思考，然后说：&quot;你说的有点道理，我再回去好好想想&quot;，然后默默的为数据表加上唯一索引……&lt;/p&gt;&lt;p&gt;我相信对方肯定已经理解了。那一刻，我感觉我写的不是代码，我写的是人情世故。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9840909090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AnAgeMhDIiakO9eicHw4LMHdub4ibnLKExouoHwbicrpLT5np4rEgS0LXAN4MDYdlXiaI8zPxcCicJpgPQet8MJCw3iaA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;440&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;别说了，一起在知识的海洋里呛水吧&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;点击&lt;/strong&gt;下方名片，关注公众号:【小白debug】&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg5NDY2MDk4Mw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIianpibeb1icaNfMQWI9DibKw3EcA2nvqMtwQ1GuX5bFuupzh6LaH1AkOZggtabj6t0mXvgIGibhwUYCz4w/0?wx_fmt=png&quot; data-nickname=&quot;小白debug&quot; data-alias=&quot;xiaobaidebug&quot; data-signature=&quot;答应我，关注之后，好好学技术，别只是收藏我的表情包。。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不满足这点知识？网管为大家整理了一本超实用的《Go 开发参考书》收集了70多条开发实践。去我的公众号回复【gocookbook】即刻领取&lt;span&gt;！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2966226138032306&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4iaCnxtgAMCN6ibAA9MRWUeLSArXnCwdGTUp6qZj5XPh2cUiaOg8aM9kXALOVLpMRpNiaJlRpSecbuibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1362&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUzNTY5MzU2MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4pGhLz2xEbRFHnAQon2QLYgbBibCJo1ibJHesLWshPJeRibateRtAqkaf6BgjlbhYiaxHLq6Zu07CRPw/0?wx_fmt=png&quot; data-nickname=&quot;网管叨bi叨&quot; data-alias=&quot;kevin_tech&quot; data-signature=&quot;分享软件开发和系统架构设计基础、Go 语言和Kubernetes。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;扫码关注公众号「网管叨bi叨」&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0188679245283019&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4icJbGAQ8RjXUUVdUZsGADuMBVWePgn7tfrWjjHyc6b8kXTQ7Sdkp0QQFFK4mel5tniczqooMna1CA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;318&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;给网管个星标，第一时间吸我的知识 👆&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;网管为大家整理了一本超实用的《Go 开发参考书》收集了70多条开发实践。去公众号回复【gocookbook】即刻领取！&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;觉得有用就点个在看&lt;/span&gt;&lt;span&gt;  👇👇👇&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>