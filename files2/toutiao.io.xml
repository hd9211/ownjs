<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>810b220539785ee2355a4df72e1c341c</guid>
<title>华为鸿蒙 2.0，让我遇见未来 | 码农周刊第 318 期</title>
<link>https://toutiao.io/k/6rprzrd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;issue&quot; id=&quot;readabilityBody&quot;&gt;
        &lt;h1&gt;华为鸿蒙 2.0，让我遇见未来 | 码农周刊第 318 期&lt;/h1&gt;
        &lt;h2&gt;码农周刊第318期（2020-09-16）&lt;/h2&gt;
        &lt;p&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=318&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3180&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_316.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&amp;#13;
☞ &lt;a href=&quot;https://weekly.manong.io/bounce?nid=318&amp;amp;aid=19803&amp;amp;url=https%3A%2F%2Fwww.sheca.com%2Fassets%2Fwwx%2Fpage1.html%3Fsite%3Dkaifazhe02&quot; target=&quot;_blank&quot;&gt;SHECA 提供 SSL 证书一站式服务，为你的网络安全保驾护航，上海 CA 权威认证&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;small&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=318&amp;amp;aid=19185&amp;amp;url=https%3A%2F%2Fjinshuju.net%2Ff%2FV7DxN9&quot; target=&quot;_blank&quot;&gt;商务合作&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        
        &lt;h3 id=&quot;程序设计&quot;&gt;程序设计&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;深入讲解&lt;/p&gt;
        
        &lt;p&gt;业界实战&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        &lt;h3 id=&quot;VIP会员专区&quot;&gt;VIP会员专区&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;工作地点：成都 | 薪资：15-30K | 简历投递邮箱：xiexiaofang@huobi.com&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;持续更新&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;帮助大家有针对性地准备面试&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;用于播放特效动画的实现方案。具有高压缩率、硬件解码等优点。同时支持 iOS, Android, Web 平台。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;工具资料&quot;&gt;工具资料&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;各有千秋&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;附 demo&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;收藏吧&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;经验分享&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;深入研究&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;教你用 Deployment 全搞定&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程语言&quot;&gt;编程语言&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;程序员进阶系列&lt;/p&gt;
        
        &lt;p&gt;编程体系结构系列&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;看完这个视频你转头也写了一吨&lt;/p&gt;
        
        &lt;p&gt;类似微信的小程序&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        &lt;h3 id=&quot;每周独家号推荐&quot;&gt;每周独家号推荐&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;死磕Elasticsearch！&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 272620 即可&lt;/p&gt;
        
        &lt;p&gt;前端 Or NodeJs。喜欢造轮子的懒人&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 95159 即可&lt;/p&gt;
        
        &lt;p&gt;关于计算机很多很多好玩的，一些常见的使用技巧和案例，还有技术方面的&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 72425 即可&lt;/p&gt;
        
        &lt;p&gt;顺势而为; 在技术人的后场; 分享前沿「技术」和「思想」。&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 56624 即可&lt;/p&gt;
        
        &lt;p&gt;五分钟不刷心里发慌&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 378 即可&lt;/p&gt;
        &lt;h3 id=&quot;每周一书&quot;&gt;每周一书&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=318&amp;amp;aid=19870&amp;amp;url=https%3A%2F%2Fu.jd.com%2FDpNS3m&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/book_318.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程之外&quot;&gt;编程之外&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;采访实录&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;p&gt;
        &lt;/p&gt;
        
        
        
        
        &lt;div class=&quot;qrcode&quot;&gt;
  &lt;img src=&quot;https://img.toutiao.io/ads/vip_qrcode.png&quot; alt=&quot;Qrcode 258&quot;/&gt;&lt;span&gt;加入码农周刊VIP会员&lt;/span&gt;
&lt;/div&gt;
    &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8ddf7f48ba84a8c9310c862b46082111</guid>
<title>解密 Go 协程的栈内存管理</title>
<link>https://toutiao.io/k/fkrobd3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应用程序的内存会分成堆区（Heap）和栈区（Stack）两个部分，&lt;strong&gt;程序在运行期间可以主动从堆区申请内存空间，这些内存由内存分配器分配并由垃圾收集器负责回收&lt;/strong&gt;。&lt;strong&gt;栈区的内存由编译器自动进行分配和释放，栈区中存储着函数的参数以及局部变量，它们会随着函数的创建而创建，函数的返回而销毁&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;网管碎碎念：&lt;/strong&gt;堆和栈都是编程语言里的虚拟概念，并不是说在物理内存上有堆和栈之分，两者的主要区别是栈是每个线程或者协程独立拥有的，从栈上分配内存时不需要加锁。而整个程序在运行时只有一个堆，从堆中分配内存时需要加锁防止多个线程造成冲突，同时回收堆上的内存块时还需要运行可达性分析、引用计数等算法来决定内存块是否能被回收，所以从分配和回收内存的方面来看栈内存效率更高。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;Go&lt;/code&gt;应用程序运行时，每个&lt;code&gt;goroutine&lt;/code&gt;都维护着一个自己的栈区，这个栈区只能自己使用不能被其他&lt;code&gt;goroutine&lt;/code&gt;使用。&lt;strong&gt;栈区的初始大小是2KB&lt;/strong&gt;（比x86_64架构下线程的默认栈2M要小很多），在&lt;code&gt;goroutine&lt;/code&gt;运行的时候栈区会按照需要增长和收缩，占用的内存最大限制的默认值在64位系统上是1GB。栈大小的初始值和上限这部分的设置都可以在&lt;code&gt;Go&lt;/code&gt;的源码&lt;code&gt;runtime/stack.go&lt;/code&gt;里找到：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// rumtime.stack.go&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// The minimum size of stack used by Go code&lt;/span&gt;&lt;br/&gt;_StackMin = &lt;span&gt;2048&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; maxstacksize &lt;span&gt;uintptr&lt;/span&gt; = &lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;20&lt;/span&gt; &lt;span&gt;// enough until runtime.main sets it for real&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实栈内存空间、结构和初始大小在最开始并不是2KB，也是经过了几个版本的更迭&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;v1.0 ~ v1.1 — 最小栈内存空间为 4KB；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;v1.2 — 将最小栈内存提升到了 8KB；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;v1.3 — 使用&lt;strong&gt;连续栈&lt;/strong&gt;替换之前版本的分段栈；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;v1.4 — 将最小栈内存降低到了 2KB；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;分段栈和连续栈&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;分段栈&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 1.3 版本前使用的栈结构是分段栈，随着&lt;code&gt;goroutine&lt;/code&gt; 调用的函数层级的深入或者局部变量需要的越来越多时，运行时会调用 &lt;code&gt;runtime.morestack&lt;/code&gt; 和 &lt;code&gt;runtime.newstack&lt;/code&gt;创建一个新的栈空间，这些栈空间是不连续的，但是当前 &lt;code&gt;goroutine&lt;/code&gt; 的多个栈空间会以双向链表的形式串联起来，运行时会通过指针找到连续的栈片段：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9885931558935361&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4FKriblLnWa6aXcpXyuysvWWo5VhvVBial7Ticl7855OhSCD9dgMp1qzyibJ1DWs0QicRR97icAU7I134w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1052&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分段栈虽然能够按需为当前 &lt;code&gt;goroutine&lt;/code&gt; 分配内存并且及时减少内存的占用，但是它也存在一个比较大的问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果当前 &lt;code&gt;goroutine&lt;/code&gt; 的栈几乎充满，那么任意的函数调用都会触发栈的扩容，当函数返回后又会触发栈的收缩，如果在一个循环中调用函数，栈的分配和释放就会造成巨大的额外开销，这被称为热分裂问题（Hot split）。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决这个问题，Go在1.2版本的时候不得不将栈的初始化内存从4KB增大到了8KB。后来把采用连续栈结构后，又把初始栈大小减小到了2KB。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;连续栈&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;连续栈可以解决分段栈中存在的两个问题，其核心原理就是每当程序的栈空间不足时，初始化一片比旧栈大两倍的新栈并将原栈中的所有值都迁移到新的栈中，新的局部变量或者函数调用就有了充足的内存空间。使用连续栈机制时，栈空间不足导致的扩容会经历以下几个步骤：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;调用用&lt;code&gt;runtime.newstack&lt;/code&gt;在内存空间中分配更大的栈内存空间；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用&lt;code&gt;runtime.copystack&lt;/code&gt;将旧栈中的所有内容复制到新的栈中；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;将指向旧栈对应变量的指针重新指向新栈&lt;/strong&gt;；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;调用&lt;code&gt;runtime.stackfree&lt;/code&gt;销毁并回收旧栈的内存空间；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6382730455075846&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4FKriblLnWa6aXcpXyuysvWbfJaj1C2qAyjuLXK51PkV6PPIRWuyRFUgL60Pb6c9a18MsrhmEs6wg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1714&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;copystack&lt;/code&gt;会把旧栈里的所有内容拷贝到新栈里然后调整所有指向旧栈的变量的指针指向到新栈， 我们可以用下面这个程序验证下，栈扩容后同一个变量的内存地址会发生变化。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; x [&lt;span&gt;10&lt;/span&gt;]&lt;span&gt;int&lt;/span&gt;&lt;br/&gt; &lt;span&gt;println&lt;/span&gt;(&amp;amp;x)&lt;br/&gt; a(x)&lt;br/&gt; &lt;span&gt;println&lt;/span&gt;(&amp;amp;x)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//go:noinline&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;&lt;span&gt;(x [10]&lt;span&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;println&lt;/span&gt;(&lt;span&gt;`func a`&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; y [&lt;span&gt;100&lt;/span&gt;]&lt;span&gt;int&lt;/span&gt;&lt;br/&gt; b(y)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//go:noinline&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;b&lt;/span&gt;&lt;span&gt;(x [100]&lt;span&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;println&lt;/span&gt;(&lt;span&gt;`func b`&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; y [&lt;span&gt;1000&lt;/span&gt;]&lt;span&gt;int&lt;/span&gt;&lt;br/&gt; c(y)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//go:noinline&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;c&lt;/span&gt;&lt;span&gt;(x [1000]&lt;span&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;println&lt;/span&gt;(&lt;span&gt;`func c`&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序的输出可以看到在栈扩容前后，变量&lt;code&gt;x&lt;/code&gt;的内存地址的变化：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;0xc000030738&lt;br/&gt;...&lt;br/&gt;...&lt;br/&gt;0xc000081f38&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;栈区的内存管理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面说了每个&lt;code&gt;goroutine&lt;/code&gt;都维护着自己的栈区，栈结构是连续栈，是一块连续的内存，在&lt;code&gt;goroutine&lt;/code&gt;的类型定义的源码里我们可以找到标记着栈区边界的&lt;code&gt;stack&lt;/code&gt;信息，&lt;code&gt;stack&lt;/code&gt;里记录着栈区边界的高位内存地址和低位内存地址：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; g &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; stack       stack&lt;br/&gt;  ...&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; stack &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; lo &lt;span&gt;uintptr&lt;/span&gt;&lt;br/&gt; hi &lt;span&gt;uintptr&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;全局栈缓存&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;栈空间在运行时中包含两个重要的全局变量，分别是 &lt;code&gt;runtime.stackpool&lt;/code&gt; 和&lt;code&gt;runtime.stackLarge&lt;/code&gt;，这两个变量分别表示全局的栈缓存和大栈缓存，前者可以分配小于 32KB 的内存，后者用来分配大于 32KB 的栈空间：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; &lt;span&gt;// Number of orders that get caching. Order 0 is FixedStack&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// and each successive order is twice as large.&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// We want to cache 2KB, 4KB, 8KB, and 16KB stacks. Larger stacks&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// will be allocated directly.&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// Since FixedStack is different on different systems, we&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// must vary NumStackOrders to keep the same maximum cached size.&lt;/span&gt;&lt;br/&gt; &lt;span&gt;//   OS               | FixedStack | NumStackOrders&lt;/span&gt;&lt;br/&gt; &lt;span&gt;//   -----------------+------------+---------------&lt;/span&gt;&lt;br/&gt; &lt;span&gt;//   linux/darwin/bsd | 2KB        | 4&lt;/span&gt;&lt;br/&gt; &lt;span&gt;//   windows/32       | 4KB        | 3&lt;/span&gt;&lt;br/&gt; &lt;span&gt;//   windows/64       | 8KB        | 2&lt;/span&gt;&lt;br/&gt; &lt;span&gt;//   plan9            | 4KB        | 3&lt;/span&gt;&lt;br/&gt;_NumStackOrders = &lt;span&gt;4&lt;/span&gt; - sys.PtrSize/&lt;span&gt;4&lt;/span&gt;*sys.GoosWindows - &lt;span&gt;1&lt;/span&gt;*sys.GoosPlan9&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; stackpool [_NumStackOrders]mSpanList&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; stackpoolItem &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; mu   mutex&lt;br/&gt; span mSpanList&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; stackLarge &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; lock mutex&lt;br/&gt; free [heapAddrBits - pageShift]mSpanList&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//go:notinheap&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; mSpanList &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; first *mspan &lt;span&gt;// first span in list, or nil if none&lt;/span&gt;&lt;br/&gt; last  *mspan &lt;span&gt;// last span in list, or nil if none&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到这两个用于分配空间的全局变量都与内存管理单元 &lt;code&gt;runtime.mspan&lt;/code&gt; 有关，所以我们栈内容的申请也是跟前面文章里的一样，先去当前线程的对应尺寸的&lt;code&gt;mcache&lt;/code&gt;里去申请，不够的时候&lt;code&gt;mache&lt;/code&gt;会从全局的&lt;code&gt;mcental&lt;/code&gt;里取内存等等，想了解这部分具体细节的同学可以参考前面的文章&lt;strong&gt;《&lt;/strong&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;amp;mid=2247485736&amp;amp;idx=1&amp;amp;sn=921a9dfe3d638074b68a4fd072ea3cb9&amp;amp;chksm=fa80d8bfcdf751a948ea49ee620ca9d88ff0a62b4ad4e3a53321fee6813b8f90098fd72f7b11&amp;amp;token=401640573&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;图解Go内存管理器的内存分配策略&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;》&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实从调度器和内存分配的角度来看，如果运行时只使用全局变量来分配内存的话，势必会造成线程之间的锁竞争进而影响程序的执行效率，栈内存由于与线程关系比较密切，所以在每一个线程缓存 &lt;code&gt;runtime.mcache&lt;/code&gt; 中都加入了栈缓存减少锁竞争影响。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; mcache &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;  ...&lt;br/&gt;  alloc [numSpanClasses]*mspan&lt;br/&gt;  &lt;br/&gt; stackcache [_NumStackOrders]stackfreelist&lt;br/&gt;  ...&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; stackfreelist &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; list gclinkptr&lt;br/&gt; size &lt;span&gt;uintptr&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;栈扩容&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编译器会为函数调用插入运行时检查&lt;code&gt;runtime.morestack&lt;/code&gt;，它会在几乎所有的函数调用之前检查当前&lt;code&gt;goroutine&lt;/code&gt; 的栈内存是否充足，如果当前栈需要扩容，会调用&lt;code&gt;runtime.newstack&lt;/code&gt; 创建新的栈：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;newstack&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;   ......&lt;br/&gt;   &lt;span&gt;// Allocate a bigger segment and move the stack.&lt;/span&gt;&lt;br/&gt;   oldsize := gp.stack.hi - gp.stack.lo&lt;br/&gt;   newsize := oldsize * &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; newsize &amp;gt; maxstacksize {&lt;br/&gt;       &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;runtime: goroutine stack exceeds &quot;&lt;/span&gt;, maxstacksize, &lt;span&gt;&quot;-byte limit\n&quot;&lt;/span&gt;)&lt;br/&gt;      throw(&lt;span&gt;&quot;stack overflow&quot;&lt;/span&gt;)&lt;br/&gt;   }&lt;br/&gt;&lt;br/&gt;   &lt;span&gt;// The goroutine must be executing in order to call newstack,&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;// so it must be Grunning (or Gscanrunning).&lt;/span&gt;&lt;br/&gt;   casgstatus(gp, _Grunning, _Gcopystack)&lt;br/&gt;&lt;br/&gt;   &lt;span&gt;// The concurrent GC will not scan the stack while we are doing the copy since&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;// the gp is in a Gcopystack status.&lt;/span&gt;&lt;br/&gt;   copystack(gp, newsize, &lt;span&gt;true&lt;/span&gt;)&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; stackDebug &amp;gt;= &lt;span&gt;1&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;stack grow done\n&quot;&lt;/span&gt;)&lt;br/&gt;   }&lt;br/&gt;   casgstatus(gp, _Gcopystack, _Grunning)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;旧栈的大小是通过我们上面说的保存在&lt;code&gt;goroutine&lt;/code&gt;中的&lt;code&gt;stack&lt;/code&gt;信息里记录的栈区内存边界计算出来的，然后用旧栈两倍的大小创建新栈，创建前会检查是新栈的大小是否超过了单个栈的内存上限。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;   oldsize := gp.stack.hi - gp.stack.lo&lt;br/&gt;   newsize := oldsize * &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; newsize &amp;gt; maxstacksize {&lt;br/&gt;       &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;runtime: goroutine stack exceeds &quot;&lt;/span&gt;, maxstacksize, &lt;span&gt;&quot;-byte limit\n&quot;&lt;/span&gt;)&lt;br/&gt;      throw(&lt;span&gt;&quot;stack overflow&quot;&lt;/span&gt;)&lt;br/&gt;   }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果目标栈的大小没有超出程序的限制，会将 &lt;code&gt;goroutine&lt;/code&gt; 切换至 &lt;code&gt;_Gcopystack&lt;/code&gt; 状态并调用 &lt;code&gt;runtime.copystack&lt;/code&gt; 开始栈的拷贝，在拷贝栈的内存之前，运行时会先通过&lt;code&gt;runtime.stackalloc&lt;/code&gt; 函数分配新的栈空间：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;copystack&lt;/span&gt;&lt;span&gt;(gp *g, newsize &lt;span&gt;uintptr&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; old := gp.stack&lt;br/&gt; used := old.hi - gp.sched.sp&lt;br/&gt;  &lt;span&gt;// 创建新栈&lt;/span&gt;&lt;br/&gt; &lt;span&gt;new&lt;/span&gt; := stackalloc(&lt;span&gt;uint32&lt;/span&gt;(newsize))&lt;br/&gt; ...&lt;br/&gt;  &lt;span&gt;// 把旧栈的内容拷贝至新栈&lt;/span&gt;&lt;br/&gt; memmove(unsafe.Pointer(&lt;span&gt;new&lt;/span&gt;.hi-ncopy), unsafe.Pointer(old.hi-ncopy), ncopy)&lt;br/&gt;  ...&lt;br/&gt;  &lt;span&gt;// 调整指针&lt;/span&gt;&lt;br/&gt;  adjustctxt(gp, &amp;amp;adjinfo)&lt;br/&gt;  &lt;span&gt;// groutine里记录新栈的边界&lt;/span&gt;&lt;br/&gt;  gp.stack = &lt;span&gt;new&lt;/span&gt;&lt;br/&gt;  ...&lt;br/&gt;  &lt;span&gt;// 释放旧栈&lt;/span&gt;&lt;br/&gt;  stackfree(old)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新栈的初始化和数据的复制是一个比较简单的过程，整个过程中最复杂的地方是将指向源栈中内存的指针调整为指向新的栈，这一步完成后就会释放掉旧栈的内存空间了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以通过修改一下源码文件&lt;code&gt;runtime.stack.go&lt;/code&gt;，把常量&lt;code&gt;stackDebug&lt;/code&gt;的值修改为1，使用命令&lt;strong&gt;go build -gcflags -S main.go&lt;/strong&gt; 运行文章最开始的那个例子，观察栈的初始化和扩容过程：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;stackalloc 2048&lt;br/&gt;stackcacherefill order=0&lt;br/&gt;  allocated 0xc000030000&lt;br/&gt;...&lt;br/&gt;copystack gp=0xc000000180 [0xc000030000 0xc0000306e0 0xc000030800] -&amp;gt; [0xc00005c000 0xc00005cee0 0xc00005d000]/4096&lt;br/&gt;stackfree 0xc000030000 2048&lt;br/&gt;stack grow done&lt;br/&gt;...&lt;br/&gt;copystack gp=0xc000000180 [0xc00005c000 0xc00005c890 0xc00005d000] -&amp;gt; [0xc000064000 0xc000065890 0xc000066000]/8192&lt;br/&gt;stackfree 0xc00005c000 4096&lt;br/&gt;stack grow done&lt;br/&gt;...&lt;br/&gt;copystack gp=0xc000000180 [0xc000064000 0xc000065890 0xc000066000] -&amp;gt; [0xc00006c000 0xc00006f890 0xc000070000]/16384&lt;br/&gt;stackfree 0xc000064000 8192&lt;br/&gt;stack grow done&lt;br/&gt;...&lt;br/&gt;copystack gp=0xc000000180 [0xc00006c000 0xc00006f890 0xc000070000] -&amp;gt; [0xc000070000 0xc000077890 0xc000078000]/32768&lt;br/&gt;stackfree 0xc00006c000 16384&lt;br/&gt;stack grow done&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;栈缩容&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;goroutine&lt;/code&gt;运行的过程中，如果栈区的空间使用率不超过1/4，那么在垃圾回收的时候使用&lt;code&gt;runtime.shrinkstack&lt;/code&gt;进行栈缩容，当然进行缩容前会执行一堆前置检查，都通过了才会进行缩容&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;shrinkstack&lt;/span&gt;&lt;span&gt;(gp *g)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; ...&lt;br/&gt; oldsize := gp.stack.hi - gp.stack.lo&lt;br/&gt; newsize := oldsize / &lt;span&gt;2&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; newsize &amp;lt; _FixedStack {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt; avail := gp.stack.hi - gp.stack.lo&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; used := gp.stack.hi - gp.sched.sp + _StackLimit; used &amp;gt;= avail/&lt;span&gt;4&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; copystack(gp, newsize)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果要触发栈的缩容，新栈的大小会是原始栈的一半，不过如果新栈的大小低于程序的最低限制 2KB，那么缩容的过程就会停止。缩容也会调用扩容时使用的 &lt;code&gt;runtime.copystack&lt;/code&gt; 函数开辟新的栈空间，将旧栈的数据拷贝到新栈以及调整原来指针的指向。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我们上面的那个例子里，当&lt;code&gt;main&lt;/code&gt;函数里的其他函数执行完后，只有&lt;code&gt;main&lt;/code&gt;函数还在栈区的空间里，如果这个时候系统进行垃圾回收就会对这个&lt;code&gt;goroutine&lt;/code&gt;的栈区进行缩容。在这里我们可以在程序里通过调用&lt;code&gt;runtime.GC&lt;/code&gt;，强制系统进行垃圾回收，来试验看一下栈缩容的过程和效果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;var&lt;/span&gt; x [&lt;span&gt;10&lt;/span&gt;]&lt;span&gt;int&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;println&lt;/span&gt;(&amp;amp;x)&lt;br/&gt;   a(x)&lt;br/&gt;   runtime.GC()&lt;br/&gt;   &lt;span&gt;println&lt;/span&gt;(&amp;amp;x)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行命令&lt;strong&gt;go build -gcflags -S main.go&lt;/strong&gt;后会看到类似下面的输出。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;...&lt;br/&gt;shrinking stack 32768-&amp;gt;16384&lt;br/&gt;stackalloc 16384&lt;br/&gt;  allocated 0xc000076000&lt;br/&gt;copystack gp=0xc000000180 [0xc00007a000 0xc000081e60 0xc000082000] -&amp;gt; [0xc000076000 0xc000079e60 0xc00007a000]/16384&lt;br/&gt;...&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;栈内存是应用程序中重要的内存空间，它能够支持本地的局部变量和函数调用，栈空间中的变量会与栈一同创建和销毁，这部分内存空间不需要工程师过多的干预和管理，现代的编程语言通过逃逸分析减少了我们的工作量，理解栈内存空间的分配对于理解 Go 语言的运行时有很大的帮助。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;看到这里了，如果喜欢我的文章可以帮我点个赞和在看把分享给更多小伙伴，我会每周通过技术文章分享我的所学所见，感谢你的支持。微信搜索关注公众号「网管叨bi叨」第一时间获取我的文章推送。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0491724e51170b6e3e6c718abecd68bf</guid>
<title>[译] Vue 3.0 发布</title>
<link>https://toutiao.io/k/lxr8qxr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Vue 团队于 2020 年 9 月 18 日晚 11 点半发布了 Vue 3.0 版本，我们连夜对 Release 进行了翻译。由于时间仓促，文中如有翻译不当的地方还望提出。如有侵权，请联系删帖。以下为译文正文。&lt;/p&gt;&lt;p&gt;原文：https://github.com/vuejs/vue-next/releases&lt;/p&gt;&lt;p&gt;作者：Vue 团队&lt;/p&gt;&lt;p&gt;译文：https://zhuanlan.zhihu.com/p/254219538&lt;/p&gt;&lt;p&gt;译者：QC-L&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天，我们非常自豪地宣布 Vue.js 3.0 &quot;One Piece&quot; 发布。本次主版本更新包含性能的改进，更小的 bundle 体积，对 TypeScript 更好的支持，用于处理大规模用例的全新 API，以及为框架未来的长期迭代奠定了夯实的基础。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3.0 的发布意味着两年多以来的努力，其中包含 &lt;span&gt;30+ RFC&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;，2600+ commits，&lt;span&gt;99 位贡献者&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;所提交的 &lt;span&gt;628 个 PR&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;，还有许多除核心仓库以外的开发及文档编写工作。在此对 Vue 团队成员表示最深切的感谢，感谢贡献者们提交的 PR，感谢&lt;span&gt;赞助商和 sponsors&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt; 的资金支持，感谢广大社区成员参与预发布版本的设计与谈论，并提供反馈。Vue 是一个独立项目，为社区建立，也由社区维护，没有大家的鼎立支持，Vue 3.0 是不可能实现的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;进一步推进 &quot;渐进式框架&quot; 概念&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue 从开始就有一个简单的使命：成为任何人都能快速学习且平易近人的框架。随着我们用户群体的增长，框架的应用范围也在不断扩大，以适应不断迭代的需求。随着时间的流逝，它演变成了 &quot;渐进式框架&quot;：一个可以逐步学习和采用的框架，同时为用户提供持续支持，以应对越来越多的苛刻场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;时至今日，我们在全球拥有 130 多万的用户，我们看到 Vue 被应用于各种不同的场景中的可能，从在传统的服务端渲染页面之上添加交互，到拥有数百个组件的完整单页应用。Vue 3.0 将这种灵活性进一步提升。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;分离内部模块&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue 3.0 核心仍然通过一个简单的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签来使用，但其内部结构已经被重写，并&lt;span&gt;解耦成一个个模块的集合&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;。新的架构下为源码提供了更好的可维护性，并允许终端用户通过 tree-shaking 的形式将减少一半的运行时体积。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些模块还暴露了底层 API，解锁了许多高级用法：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;编译器支持自定义 AST 转换，用于在构建时自定义（如，&lt;span&gt;在构建时进行 i18n 操作&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;核心运行时提供了一系列 API，用于针对不同渲染目标（如 &lt;span&gt;native moile&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;、&lt;span&gt;WebGL&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt; 或&lt;span&gt;终端&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;）的自定义容器。默认的 DOM 渲染器也使用这系列 API 构建。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;`@vue/reactivity` 模块&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;导出的功能，可以直接访问 Vue 的响应式系统。并且可以作为一个独立的包进行使用。它可以与其他模块解决方案配对使用（如 &lt;span&gt;lit-html&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt;），甚至是在非 UI 场景中使用。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;用于解决规模问题的全新 API&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Vue 3.0 中，基于对象的 2.x API 基本没有变化，并引入了 &lt;span&gt;Composition API&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt; — 一套全新的 API，旨在解决 Vue 在大规模应用场景中的痛点。Composition API 构建于响应式 API 之上，实现了类似于 React hook 的逻辑组成与复用，相较于 2.x 基于对象的 API 方式来说，拥有更加灵活的代码组织模式，以及更为可靠的类型推断能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Composition API 同时还提供了适用于 Vue 2.x 的版本，可通过 &lt;span&gt;`@vue/composition-api`&lt;/span&gt;&lt;sup&gt;[13]&lt;/sup&gt; 插件来在项目中使用，目前已有适用于 Vue 2 和 Vue 3 的 Composition API 实用的工具库（如 &lt;span&gt;`vueuse`&lt;/span&gt;&lt;sup&gt;[14]&lt;/sup&gt;，&lt;span&gt;`vue-composable`&lt;/span&gt;&lt;sup&gt;[15]&lt;/sup&gt;）。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;性能提升&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue 3 与 Vue 2 相比，在 bundle 包大小方面（tree-shaking 减少了 41% 的体积），初始渲染速度方面（快了 55%），更新速度方面（快了 133%）以及内存占用方面（减少了 54%）都有着&lt;span&gt;显著的性能提升&lt;/span&gt;&lt;sup&gt;[16]&lt;/sup&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 3.0 中，我们采取了 “编译信息虚拟 DOM” 的方式：针对模板编译器进行了优化，并生成渲染函数代码，以提升静态内容的渲染性能，为绑定类型留下运行时提示，最为重要的是，模板内部的动态节点进行了扁平化处理，以减少运行时遍历的开销。因此，用户可以获得两全其美的效果，从模板中获得编译器优化后的性能，或在需要时通过手动渲染函数直接控制。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;改进与 TypeScript 的兼容&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue 3 的代码库完全采用 TypeScript 编写，自动生成、测试并构建类型声明，因此它们总为最新。Composition API 可以很好的进行类型推断。Vetur，官方推出的 VSCode 插件，现已支持对模板表达式和 props 的类型检查，同时，&lt;span&gt;Vue 3 已全面支持 TSX&lt;/span&gt;&lt;sup&gt;[17]&lt;/sup&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实验特性&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们为单文件组件提出了&lt;span&gt;两个新特性&lt;/span&gt;&lt;sup&gt;[18]&lt;/sup&gt;（SFC，又称为 &lt;code&gt;.vue&lt;/code&gt; 文件）:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt;：在 SFC 内使用 Composition API 的语法糖&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&amp;lt;style vars&amp;gt;&lt;/code&gt;：在 SFC 中支持将状态作为 CSS 变量注入到样式中&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些特性在 3.0 中均已实现且可用，但提供这些特性的目的只是为了收集反馈。在最终合并到 RFC 之前，这些特性仍是实验性的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们还实现了一个目前尚未编写文档的 &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt; 组件，它允许在初始渲染或 branch 切换时，等待嵌套的异步依赖（异步组件或带有 &lt;code&gt;async setup()&lt;/code&gt; 组件）。我们正在与 Nuxt.js 团队一起测试和迭代此功能（&lt;span&gt;Nuxt 3 正在开发中&lt;/span&gt;&lt;sup&gt;[19]&lt;/sup&gt;），并可能会在 3.1 时完善它。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;分阶段发布&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue 3.0 的发布意味着本框架的整体准备就绪。虽然框架的一些子项目还需进一步完善才能达到稳定状态（特别是 router 以及 Vuex 与 devtools 的集成），但我们相信现在已经可以使用 Vue 3 开启全新的项目。同时，我们也鼓励库作者开始升级项目以支持 Vue 3。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查阅 &lt;span&gt;Vue 3 的库指南&lt;/span&gt;&lt;sup&gt;[20]&lt;/sup&gt;，以了解框架所有子项目的详细进展。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;迁移与 IE11 的支持&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于时间限制，我们推迟了迁移构建（v3 兼容 v2 的构建，以及迁移警告）和兼容 IE11 的计划，并打算在 2020 年 Q4 集中进行。因此，计划迁移现有 v2 应用或需要兼容 IE11 的用户，目前应注意限制。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;下一阶段工作&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于发布后的一段时间内，我们将重点关注：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;迁移构建&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持 IE11&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Router 以及 Vuex 与 devtools 的集成&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对 Vetur 中模板类型推断的进一步改进&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前，Vue 3 及其相关子项目的文档站、github 分支以及 npm 的 dist 标签都将保持在 &lt;code&gt;next&lt;/code&gt; 状态。这意味着 &lt;code&gt;npm install vue&lt;/code&gt; 仍会安装 2.x 版本，而通过 &lt;code&gt;npm install vue@next&lt;/code&gt; 将会安装 v3 版本。我们计划在 2020 年底之前将所有文档链接，分支以及 npm 标签全部切为 3.0。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与此同时，我们已开始规划 2.7 版本，这将会是 2.x 的最后一个小版本。2.7 将与 v3 进行兼容改进，并对使用 v3 中已删除/更改的 API 发出警告，以更好的帮助 3.0 的迁移升级工作。我们计划在 2021 年 Q1 进行 2.7 的工作，发布后将直接成为 LTS 版本，维护周期为 18 个月。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;试用&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欲了解更多关于 Vue 3.0 的信息，请查阅&lt;span&gt;全新的文档站&lt;/span&gt;&lt;sup&gt;[21]&lt;/sup&gt;，如果你是 2.x 的老用户，请直接查看&lt;span&gt;迁移指南章节&lt;/span&gt;&lt;sup&gt;[22]&lt;/sup&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关注我们&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们将为你带来最前沿的前端资讯。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3685185185185185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/INNfEriciaG5fyPObKpreW36pEXnuEEIuWYdOCCXMlrA1liaGQGEXbfsYhYiaNOsTqxAd2OwnsCK8B5XUnuicANQ2pw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;30+ RFC: &lt;em&gt;https://github.com/vuejs/rfcs/tree/master/active-rfcs&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;99 位贡献者: &lt;em&gt;https://github.com/vuejs/vue-next/graphs/contributors&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;628 个 PR: &lt;em&gt;https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview++sort%3Aupdated-desc&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;赞助商和 sponsors: &lt;em&gt;https://github.com/vuejs/vue/blob/dev/BACKERS.md&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;解耦成一个个模块的集合: &lt;em&gt;https://github.com/vuejs/vue-next/tree/master/packages&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;在构建时进行 i18n 操作: &lt;em&gt;https://github.com/intlify/vue-i18n-extensions&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;native moile: &lt;em&gt;https://github.com/rigor789/nativescript-vue-next&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;WebGL: &lt;em&gt;https://github.com/Planning-nl/vugel&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;终端: &lt;em&gt;https://github.com/ycmjason/vuminal&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;p&gt;&lt;code&gt;@vue/reactivity&lt;/code&gt; 模块: &lt;em&gt;https://github.com/vuejs/vue-next/tree/master/packages/reactivity&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11]&lt;/span&gt;&lt;p&gt;lit-html: &lt;em&gt;https://github.com/yyx990803/vue-lit&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12]&lt;/span&gt;&lt;p&gt;Composition API: &lt;em&gt;https://v3.vuejs.org/guide/composition-api-introduction.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[13]&lt;/span&gt;&lt;p&gt;&lt;code&gt;@vue/composition-api&lt;/code&gt;: &lt;em&gt;https://github.com/vuejs/composition-api&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[14]&lt;/span&gt;&lt;p&gt;&lt;code&gt;vueuse&lt;/code&gt;: &lt;em&gt;https://github.com/antfu/vueuse&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[15]&lt;/span&gt;&lt;p&gt;&lt;code&gt;vue-composable&lt;/code&gt;: &lt;em&gt;https://github.com/pikax/vue-composable&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[16]&lt;/span&gt;&lt;p&gt;显著的性能提升: &lt;em&gt;https://docs.google.com/spreadsheets/d/1VJFx-kQ4KjJmnpDXIEaig-cVAAJtpIGLZNbv3Lr4CR0/edit?usp=sharing&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[17]&lt;/span&gt;&lt;p&gt;Vue 3 已全面支持 TSX: &lt;em&gt;https://github.com/vuejs/vue-next/blob/master/test-dts/defineComponent.test-d.tsx&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[18]&lt;/span&gt;&lt;p&gt;两个新特性: &lt;em&gt;https://github.com/vuejs/rfcs/pull/182&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[19]&lt;/span&gt;&lt;p&gt;Nuxt 3 正在开发中: &lt;em&gt;https://nuxtjs.slides.com/atinux/state-of-nuxt-2020&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[20]&lt;/span&gt;&lt;p&gt;Vue 3 库指南: &lt;em&gt;https://v3.vuejs.org/guide/migration/introduction.html#supporting-libraries&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[21]&lt;/span&gt;&lt;p&gt;全新的文档站: &lt;em&gt;https://v3.vuejs.org/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[22]&lt;/span&gt;&lt;p&gt;迁移指南章节: &lt;em&gt;https://v3.vuejs.org/guide/migration/introduction.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cbce16035db7affeee9f5fb7c5ff34d9</guid>
<title>使用 Docker 快速上手鸿蒙</title>
<link>https://toutiao.io/k/4enrvyp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-content&quot; id=&quot;post-content&quot; itemprop=&quot;postContent&quot;&gt;
            &lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;/&gt;准备&lt;/h3&gt;
&lt;h3 id=&quot;编译鸿蒙系统镜像&quot;&gt;&lt;a href=&quot;#编译鸿蒙系统镜像&quot; class=&quot;headerlink&quot; title=&quot;编译鸿蒙系统镜像&quot;/&gt;编译鸿蒙系统镜像&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir ~/OpenHarmony&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;cd ~/OpenHarmony&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;docker run --rm -ti -v ${PWD}/out:/OpenHarmony/out ystyle/open-harmony&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;编译成功后各镜像在out目录下面, 默认编译的是&lt;code&gt;Hi3861&lt;/code&gt;开发板的系统镜像, 可自行烧录到固定测试&lt;/li&gt;
&lt;li&gt;如果要编译其它板子可以设置dokcer镜像的环境变量&lt;code&gt;HARDWARE&lt;/code&gt; 目前支持: &lt;code&gt;wifiiot&lt;/code&gt;、&lt;code&gt;ipcamera_hi3516dv300&lt;/code&gt;、&lt;code&gt;ipcamera_hi3518ev300&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;编写应用程序&quot;&gt;&lt;a href=&quot;#编写应用程序&quot; class=&quot;headerlink&quot; title=&quot;编写应用程序&quot;/&gt;编写应用程序&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;示例在这&lt;a href=&quot;https://openharmony.gitee.com/openharmony/docs/blob/master/quick-start/Hi3861%E5%BC%80%E5%8F%91%E6%9D%BF%E7%AC%AC%E4%BA%8C%E4%B8%AA%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hi3861开发板第二个示例程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;创建一个代码目录: &lt;code&gt;my_first_app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新建文件&lt;code&gt;hello_world.c&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&quot;ohos_init.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&quot;ohos_types.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;/&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;[DEMO] Hello world.\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;SYS_RUN(HelloWorld);&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新建文件&lt;code&gt;BUILD.gn&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static_library(&lt;span class=&quot;string&quot;&gt;&quot;myapp&quot;&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  sources = [&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;hello_world.c&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  ]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  include_dirs = [&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;//utils/native/liteos/include&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  ]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新建文件&lt;code&gt;APP_BUILD.gn&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;//build/lite/config/component/lite_component.gni&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;lite_component(&lt;span class=&quot;string&quot;&gt;&quot;app&quot;&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    features = [&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;my_first_app:myapp&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现在的目录结构为&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;├── APP_BUILD.gn&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;├── BUILD.gn&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;└── hello_world.c&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;编译代码&quot;&gt;&lt;a href=&quot;#编译代码&quot; class=&quot;headerlink&quot; title=&quot;编译代码&quot;/&gt;编译代码&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run --rm \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  -e HARDWARE=wifiiot \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  -v ${PWD}/out:/OpenHarmony/out \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  -v ${PWD}/APP_BUILD.gn:/OpenHarmony/applications/sample/wifi-iot/app/APP_BUILD.gn \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  -v ${PWD}:/OpenHarmony/applications/sample/wifi-iot/app/my_first_app \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  ystyle/open-harmony&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;编译后的文件在out目录&lt;br/&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;├── APP_BUILD.gn&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;├── BUILD.gn&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;├── hello_world.c&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;└── out&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    └── wifiiot&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;其它问题&quot;&gt;&lt;a href=&quot;#其它问题&quot; class=&quot;headerlink&quot; title=&quot;其它问题&quot;/&gt;其它问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果实际开发，建议直接替换掉 整个&lt;code&gt;/OpenHarmony/applications/sample/wifi-iot/app/&lt;/code&gt; 目录, 目录里边的都是示例代码.&lt;/li&gt;
&lt;li&gt;如果要修改启动编译的命令的话，可以写好shell 脚本， run时指定cmd命令&lt;ul&gt;
&lt;li&gt;构建命令为: &lt;code&gt;python build.py ${HARDWARE} -b debug&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run --rm -v ${PWD}/mybuild.sh:/OpenHarmony/mybuild.sh ystyle/open-harmony /OpenHarmony/mybuild.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更新鸿蒙代码: 用修改镜像启动命令的方法，在&lt;code&gt;/OpenHarmony&lt;/code&gt;目录执行&lt;code&gt;repo sync -c&lt;/code&gt; 命令&lt;/li&gt;
&lt;li&gt;其它驱动开发或系统组件开发也可以用挂载的方式把工程目录映射到容器，开发并编译&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;本文所使用Docker镜像的dockerfile文件&quot;&gt;&lt;a href=&quot;#本文所使用Docker镜像的dockerfile文件&quot; class=&quot;headerlink&quot; title=&quot;本文所使用Docker镜像的dockerfile文件&quot;/&gt;本文所使用Docker镜像的dockerfile文件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;参考&lt;code&gt;@keithyau&lt;/code&gt;&lt;a href=&quot;https://openharmony.gitee.com/keithyau/build_lite/blob/master/Dockerfile20.04&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;所写的Dockerfile&lt;/a&gt;修改而来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; ubuntu:&lt;span class=&quot;number&quot;&gt;20.04&lt;/span&gt; AS build-&lt;span class=&quot;keyword&quot;&gt;env&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LABEL&lt;/span&gt; version=2020-09-10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Set your hardware&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ENV&lt;/span&gt; HARDWARE=wifiiot&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Prevent interactive&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ENV&lt;/span&gt; DEBIAN_FRONTEND=noninteractive&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Setting up the build environment&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt; sed -i &#x27;s/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&#x27; /etc/apt/sources.list &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    sed -i &#x27;s/security.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&#x27; /etc/apt/sources.list &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    apt-get clean -y &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    apt-get -y update &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    apt-get remove python* -y &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    apt-get install git curl build-essential libdbus-glib-1-dev libgirepository1.0-dev -y &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    apt-get install zip libncurses5-dev pkg-config -y &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    apt-get install python3-pip -y &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    apt-get install scons dosfstools mtools -y &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    rm -rf /var/lib/apt/lists/*&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Setup python&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Make sure python install on the right python version path&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt; update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1 &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    pip3 install --upgrade pip -i https://mirrors.aliyun.com/pypi/simple &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    pip3 install ninja kconfiglib pycryptodome ecdsa -i https://mirrors.aliyun.com/pypi/simple &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    pip3 install six --upgrade --ignore-installed six -i https://pypi.tuna.tsinghua.edu.cn/simple &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    rm -rf /var/cache/apt/archives&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Fix Dash&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt; rm -rf /bin/sh &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    ln -s /bin/bash /bin/sh&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Setup gn&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ENV&lt;/span&gt; PATH /tools/gn:$PATH&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt; mkdir /tools &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    cd /tools &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    curl -LO http://tools.harmonyos.com/mirrors/gn/1523/linux/gn.1523.tar &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    tar xvf /tools/gn.1523.tar &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    rm -rf /tools/gn.1523.tar&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Setup LLVM&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#ADD ./llvm-linux-9.0.0-34042.tar /tools&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ENV&lt;/span&gt; PATH /tools/llvm/bin:$PATH&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt; cd /tools &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    curl -LO http://tools.harmonyos.com/mirrors/clang/9.0.0-34042/linux/llvm-linux-9.0.0-34042.tar &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    tar xvf /tools/llvm-linux-9.0.0-34042.tar &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    rm -rf /tools/llvm-linux-9.0.0-34042.tar&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Setup hc-gen&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ENV&lt;/span&gt; PATH /tools/hc-gen:$PATH&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt; cd /tools &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    curl -LO http://tools.harmonyos.com/mirrors/hc-gen/0.64/linux/hc-gen-0.64-linux.tar &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    tar xvf /tools/hc-gen-0.64-linux.tar &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    rm -rf /tools/hc-gen-0.64-linux.tar&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Setup gcc_riscv32&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ENV&lt;/span&gt; PATH /tools/gcc_riscv32/bin:$PATH&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt; cd /tools &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    curl -LO http://tools.harmonyos.com/mirrors/gcc_riscv32/7.3.0/linux/gcc_riscv32-linux-7.3.0.tar.gz &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    tar xvf /tools/gcc_riscv32-linux-7.3.0.tar.gz &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    rm -rf /tools/gcc_riscv32-linux-7.3.0.tar.gz&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Create work dir&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt; mkdir /OpenHarmony&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WORKDIR&lt;/span&gt; /OpenHarmony&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Gitee Repo tool and download&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Make sure requests install at the right location&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt; curl https://gitee.com/oschina/repo/raw/fork_flow/repo-py3 &amp;gt; /usr/bin/repo &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    chmod a+x /usr/bin/repo &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple requests&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Download source, update to your info&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt; git config --global user.email &quot;lxy5266@live.com&quot; &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    git config --global user.name &quot;ystyle&quot; &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    git config --global color.ui false &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    git config --global credential.helper store &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    repo init -u https://gitee.com/openharmony/manifest.git -b master --repo-branch=stable --no-repo-verify &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    repo sync -c&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# compile&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ENV&lt;/span&gt; LANGUAGE en&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ENV&lt;/span&gt; LANG en_US.utf-&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt; export|grep LANG&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CMD&lt;/span&gt; [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;python build.py ${HARDWARE} -b debug&quot;]&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

        &lt;/div&gt;

        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5aaaa176096ebb7ef2f554d7c9d391d5</guid>
<title>伪造图像的对抗攻击，从天池大赛说起</title>
<link>https://toutiao.io/k/zsqz9o0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6246819338422391&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BJbRvwibeSTusicGZ66FeJjhsE4eqMeClrvqgAgCNNycO3POCtUibA6FxvKibIicekhewn8qoFLpGnGUsh5BHibG7jJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;786&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3674767&quot; data-style-type=&quot;&quot;/&gt;&lt;p&gt;每张图像限定五个区域进行篡改如下图所示四个红框位置加上盖章：&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.68125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BJbRvwibeSTusicGZ66FeJjhsE4eqMeClreL4vHgrWcGPaT9TD7oA8licPicUzYstBKZoEDZy4xHl2ePXyRQxZBbxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;参赛者从10个类别中各任意选择2张进行伪造篡改，最终需要提交20张篡改图像即可。给定参赛者的数据时，同一张图像额外给定一张标定篡改位置信息的图像。篡改操作不限定（如splicing、copy-move、object removal等任意操作），允许进行后处理（如高斯模糊，JPEG压缩等）。并且不需要考虑图像的元数据。&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3588346&quot; data-style-type=&quot;&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;    04    &lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Error Level Analysis&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本次比赛的检测模型有两个黑盒模型和一个ELA模型。其中ELA的英文全称是Error Level Analysis ，汉译为“错误级别分析”或者叫“误差分析”。它是通过检测特定压缩比率重新绘制图片后造成的误差分布，可用于识别JPEG图片的压缩。&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3762213&quot; data-style-type=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;►ELA原理&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;它把图片分割成很多个正方形中的1像素点，对每一个小块进行单独的色彩空间转换。每次对JPG图片的修改，都会进行第二次转换。两次转换自然会存在差异，ELA就是靠对比这种差异来判断图片的哪部分被修改过。ELA检测可以分为以下三部分：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;点，指画面中的重复纹理或者类似数据，重复纹理在ELA分析的时候应该表现出近似的颜色，细节较多的区域数据差异也应该大。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;线，是不同颜色大面之间的交界线，相同反差边缘应该表现出近似的ELA结果。反差越大，ELA值越高，线条越清晰&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;面，纯色面不存在差异，也就不存在ELA，黑色或黑色着色。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如下图所示为ELA模型检测图像的效果示意图，左图和右图比对可以发现，图中嘴唇，衬衫，眼睛人脸和形体轮廓区域是高亮的，说明这些区域被修改过。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3441822620016273&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BJbRvwibeSTusicGZ66FeJjhsE4eqMeClrc4bEMuTvNz3DohvAQkVa2AGNsUYxaXRicUj6LweROMmshxYMORwhzOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1229&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3762213&quot; data-style-type=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;►模型获取&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;在github中挑选出比较好的ELA模型摘选自于文章《A Picture’s Worth 》 该程序是用keras编写的，环境配置容易而且程序简洁易懂很好实现，如下图所示核心代码短小精悍。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.32265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BJbRvwibeSTusicGZ66FeJjhsE4eqMeClrCT6l7VrX91I1G91FVw630YW4Z46CSmqzxBa2fQLB1rCxkbticibPeqOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3674767&quot; data-style-type=&quot;&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;除此之外&lt;/span&gt;&lt;span&gt;，还有两个demo可以尝试用一下，在比赛中也有起到一定的帮助。&lt;/span&gt;&lt;span&gt;一个是FotoForensics ，另一个是Forensically ，这两个demo的界面如下图所示：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.29296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BJbRvwibeSTusicGZ66FeJjhsE4eqMeClrg7f4oupNZ5KzB5t8qrmmRmG6Jicet2kBSqJwkB8sx330UE55NkYCeZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BJbRvwibeSTusicGZ66FeJjhsE4eqMeClrUxXLEFWX2BuYgchkxoicUoXoqRtno5GmxSnrXqCp2rlmFibUCFicq2bGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3674767&quot; data-style-type=&quot;&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3588346&quot; data-style-type=&quot;&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;    05    &lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;指标介绍&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;参赛选手在每个提供的图像上都可以对选择图像的候选5个区域进行伪造篡改。&lt;/span&gt;&lt;span&gt;其中对P图的方式和后处理方式没有任何限制，但是会要求篡改痕迹尽量肉眼不可见。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;选手得分由四部分构成：&lt;span&gt;未检出篡改的比例、候选区域内篡改像素比例、候选区域外像素变化的比例、篡改区域背景一致性&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;为了保证比赛的难度，主办方选取了4种经典图像取证算法作为攻击目标，包括1个白盒模型—Error Level Analysis (ELA)和另外3个未知的黑盒模型。&lt;/p&gt;&lt;p&gt;在进行评估时，需要使用原始图像减去修改后的图像，得到修改量，然后分别计算候选区域外未修改得分和区域内的修改得分，同时计算篡改区域背景一致性得分，图像在4个检测模型的检测得分。&lt;/p&gt;&lt;p&gt;候选区域外像素变化越小，得分越高；候选区域内，改动的差异越大，的得分越高；篡改区域背景一致性越高，的得分越高；候选区域内修改内容越难被检测，得分越高。为了保证篡改符合场景语义，主办方对图像伪造篡改进行如下限制：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.16538461538461538&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BJbRvwibeSTusicGZ66FeJjhsE4eqMeClrv8Ua9ILNQcB0DzLq9Af3w3qZPtcCEJrmLDtIHyibYqZZbAvLaySoFibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;780&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>