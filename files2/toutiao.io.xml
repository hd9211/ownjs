<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>6eac1e059f5c0ad6662a61f85641cc9f</guid>
<title>优质网站同好者周刊（第 57 期）- 倾城之链 - 悠然宜想亭</title>
<link>https://toutiao.io/k/8jgfrzw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;Post-body&quot;&gt;
                    &lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot; rel=&quot; nofollow ugc&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot; rel=&quot; nofollow ugc&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot; rel=&quot; nofollow ugc&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot; rel=&quot; nofollow ugc&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot; rel=&quot; nofollow ugc&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot; rel=&quot; nofollow ugc&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot; rel=&quot; nofollow ugc&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E7%BC%96%E7%A8%8B&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;编程&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E8%8B%B9%E6%9E%9C&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;苹果&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;编程语言&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：Swift, 编程语言, Apple, iOS, 现代, 安全, 高性能, 用户体验, Xcode, 简单&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.swift.org.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - Swift.org - Welcome to Swift.org&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.swift.org/&quot; rel=&quot; nofollow ugc&quot;&gt;Swift.org&lt;/a&gt;，是一种通用的编程语言，使用现代的安全、性能和软件设计模式的方法构建。Swift 由 Apple 创建，专门用于开发原生 iOS 应用程序。它虽然于 2014 年发布，但已经在移动应用程序开发中获得了很大的吸引力。以前使用 Objective-C 进行应用程序开发的公司转而使用 Swift，以利用其灵活性、简洁性和简单性。&lt;/p&gt;

&lt;p&gt;创建 Swift 的主要目标是吸引更多开发人员参与 iOS 和 macOS 的开发。由于 Objective-C 相当复杂，Swift 更简单，使开发人员能够利用原生硬件特性并构建特性密集和高质量的应用程序。利用 Apple 软件的功能，公司可以使用相机、GPS、蓝牙等构建更先进的解决方案。&lt;/p&gt;

&lt;p&gt;为什么公司转而使用 Swift 来构建 iOS 应用程序？是什么让它在移动开发领域如此受欢迎？因为 Swift 具有以下好处：&lt;/p&gt;

&lt;h3&gt;速度&lt;/h3&gt;

&lt;p&gt;苹果官方网站声称 Swift 比其前身 Objective-C 快 2.6 倍。Swift 具有简单的语法并使用 LLVM 工具将代码直接编译为机器码。正如语言名称所暗示的那样，使用 Swift 构建应用程序可以加快开发过程。&lt;/p&gt;

&lt;h3&gt;可读性&lt;/h3&gt;

&lt;p&gt;该语言的语法更简单，更容易掌握，与其他技术相比，这使其成为一种更具可读性的技术。开发人员还需要更少的代码行来生成功能性应用程序，从而缩短上市时间。&lt;/p&gt;

&lt;h3&gt;安全&lt;/h3&gt;

&lt;p&gt;Swift 移动开发不易出错，因为它具有类型安全的特性。这使开发人员可以在键入时捕获代码中的潜在错误，并防止他们将错误带入代码执行。最重要的是，Swift 会自动定义所有的内存访问，从而保护程序不会崩溃。&lt;/p&gt;

&lt;h3&gt;ABI 稳定性&lt;/h3&gt;

&lt;p&gt;ABI（应用程序二进制接口）稳定性随着该语言的 Swift 5 版本生效并解决了一个主要问题。如果没有这个特性，每次推出新版本的语言并且开发人员试图将其实现到现有应用程序中时，一些特性就会崩溃。ABI 稳定性可以防止这种情况发生，并确保所有语言版本相互兼容。&lt;/p&gt;

&lt;h3&gt;用户体验&lt;/h3&gt;

&lt;p&gt;Swift 编写的应用程序更轻巧，安装时间更短，并且在设备上需要更少的内存存储。该语言也是专门为原生 iOS 开发而创建的，它提供了对原生设备功能的更多访问权限。因此，您可以构建外观和性能更好的应用程序，并吸引更多用户。&lt;/p&gt;

&lt;h3&gt;Xcode&lt;/h3&gt;

&lt;p&gt;Xcode 和 Swift 有什么区别？后者是一种编程语言，而前者是一种 IDE，可以帮助您创建出色的应用程序。使用 Swift 进行 iOS 原生应用程序开发可以访问 Xcode。这些技术协同工作，让您可以为 macOS、tvOS、watchOS 和 iOS 构建应用程序。您甚至可以为 Linux 和 Windows 创建应用程序并扩大您的目标受众。&lt;/p&gt;

&lt;p&gt;作为一项相对较新的技术，Swift 在建立强大的社区、开发有用的库和包等方面，还有很长的路要走。但是，它已经获得了移动应用程序开发社区的大量关注，被认为是应用程序开发的最佳语言之一。同时，如果您选择使用 Swift，您可能需要花费更多时间寻找经验丰富的专业人士。&lt;/p&gt;

&lt;p&gt;Swift 使编写设计得非常快速和安全的软件变得容易。Swift 团队怀有雄心勃勃的目标：&lt;strong&gt;想让简单的事情变得简单，让困难的事情成为可能&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;对于新手来说，学习 Swift 是对现代编程概念和最佳实践的一个很好的介绍。而且由于它是开放的，他们的 Swift 技能将能够应用于更广泛的平台，从移动设备到桌面再到云。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6232f5ca77e4352be838a308&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - Swift.org - Welcome to Swift.org&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/CDN&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;CDN&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%85%8D%E8%B4%B9&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;免费&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%80%E6%BA%90&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;开源&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：jsdelivr, cdn, npm, github, js, javascript, free, open source, oss, deno, wordpress&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;Supports npm, GitHub, WordPress, Deno, and more. Largest network and best performance among all CDNs. Serving more than 80 billion requests per month.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.jsdelivr.com.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - jsDelivr - A free, fast, and reliable CDN for open source&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.jsdelivr.com/&quot; rel=&quot; nofollow ugc&quot;&gt;JSDeliver&lt;/a&gt; 是一个用于开源项目的免费公共 CDN，专注于性能、可靠性和安全性。每个人都可以免费使用，没有带宽限制。它可以直接从 npm 注册表和 GitHub 存储库提供 Web 文件，而无需任何配置。除此之外，JSDeliver 还具有以下特征：&lt;/p&gt;

&lt;h3&gt;为生产而生&lt;/h3&gt;

&lt;ul&gt;&lt;li&gt;四个 CDN 和两个 DNS 提供商；&lt;/li&gt;
&lt;li&gt;超过 750 个入驻点；&lt;/li&gt;
&lt;li&gt;基于 RUM 的负载均衡；&lt;/li&gt;
&lt;li&gt;比任何其他 CDN 都快；&lt;/li&gt;
&lt;li&gt;每一层的故障转移；&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;开发者友好&lt;/h3&gt;

&lt;ul&gt;&lt;li&gt;来自 npm 和 GitHub 的所有文件；&lt;/li&gt;
&lt;li&gt;零设置可用；&lt;/li&gt;
&lt;li&gt;按需组合多个文件；&lt;/li&gt;
&lt;li&gt;按需缩小文件；&lt;/li&gt;
&lt;li&gt;Source Map 支持；&lt;/li&gt;
&lt;li&gt;版本别名；&lt;/li&gt;
&lt;li&gt;使用统计；&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;安全可靠&lt;/h3&gt;

&lt;ul&gt;&lt;li&gt;JSDeliver 专注于生产使用；&lt;/li&gt;
&lt;li&gt;所有 jsDelivr 服务都支持 HTTPS；&lt;/li&gt;
&lt;li&gt;所有与 jsDelivr 相关的帐户都受到强密码、2FA 和 IP 白名单的保护；&lt;/li&gt;
&lt;li&gt;JSDeliver 和其他几位独立专家都彻底审查了我们的关键代码；&lt;/li&gt;
&lt;li&gt;采取保护措施，防止人们使用 jsDelivr 来提供恶意文件；&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;如果您想了解 jsDelivr 是如何工作的，详情可参见：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.jsdelivr.com/network/infographic&quot; rel=&quot; nofollow ugc&quot;&gt;How jsDelivr works&lt;/a&gt;。jsDelivr，对 Web 开发者尤其有用，相对于其他 CDN 服务，JSDeliver 快速而稳定，值得信赖。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62321d8373e9e03b84d59879&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - jsDelivr - A free, fast, and reliable CDN for open source&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E7%94%B5%E5%BD%B1&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;电影&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%9C%A8%E7%BA%BF&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;在线&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%8A%A8%E6%BC%AB&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;动漫&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：在线影院, 免费电影网, 无广告电影网, 电视剧超前点播, 电视剧免费观看, 电视剧大全, 在线观看&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;视中心影院是专门为网友提供 2022 最新高清电影，热播电视剧高清资源的免费网站,无广告急速播放观看体验极佳，每天第一时间给大家更新最新优质电影、连续剧、综艺、动漫，看热门电影就来视中心影院。&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.mhz8.com.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - 最新电影-热播电视剧免费在线观看-视中心影院&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.mhz8.com/&quot; rel=&quot; nofollow ugc&quot;&gt;视中心影院&lt;/a&gt;，是为网友提供音影相关的娱乐网站，涵盖有电影、电视剧、综艺、动漫等内容，此外还提供有影视资讯。值得一提的是，该网站所涉及的内容，时值当下，不仅提供了详细介绍，而且在线可播放（除去优酷视频外，还有诸多其他节点）；更值得称赞的是，视频质量不错，且没有广告。初次体验，网站稳定性、访问速度这块儿，似乎有待提升。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6231ef5e0f09030dc18e0d9e&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - 最新电影-热播电视剧免费在线观看-视中心影院&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E8%AE%BA%E5%9D%9B&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;论坛&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B7%A5%E5%85%B7&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;工具&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%80%E6%BA%90&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;开源&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;The reason you joined the Internet. Forem provides open-source tools to help you host a thriving, focused, and adaptable community.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.forem.com.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - [Forem] Community for Everyone&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.forem.com/&quot; rel=&quot; nofollow ugc&quot;&gt;Forem&lt;/a&gt;，是一个&lt;strong&gt;开源&lt;/strong&gt;社区平台，用于培养现代、安全、独立的社区。您可以自定义和扩展 Forem 以满足您的确切需求，通过可调整的品牌、自定义页面、社区徽章等设计您的最佳用户体验；Forem 具有以下功能特色：&lt;/p&gt;

&lt;h3&gt;连接&lt;/h3&gt;

&lt;p&gt;围绕共同的痴迷集会。Forem 的新闻提要等功能，将最好的社交媒体与现代社区融合在一起。&lt;/p&gt;

&lt;h3&gt;创建&lt;/h3&gt;

&lt;p&gt;以任何形式发表您的想法。Markdown、富文本、图像和视频共享。&lt;/p&gt;

&lt;h3&gt;从事&lt;/h3&gt;

&lt;p&gt;为您的用户提供通知、丰富的会员资料和徽章以奖励活动。&lt;/p&gt;

&lt;h3&gt;缓和&lt;/h3&gt;

&lt;p&gt;他们是安全和包容性社区建设的先驱。Forem 提供一流的工具，因此您的社区也可以这样做。&lt;/p&gt;

&lt;h3&gt;发现&lt;/h3&gt;

&lt;p&gt;嵌入式 SEO 工具，可确保您的高价值用户生成的内容，将被当前和未来的用户编入索引和发现。&lt;/p&gt;

&lt;h3&gt;延长&lt;/h3&gt;

&lt;p&gt;该平台使您可以通过自定义页面做任何事情，从独特的静态内容到运行有数千名参与者的实时会议。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.forem.com/&quot; rel=&quot; nofollow ugc&quot;&gt;Forem&lt;/a&gt; 为蓬勃发展的社区提供支持，例如 &lt;a href=&quot;https://nicelinks.site/post/5ffee335f14a2d7ea7457b41&quot; rel=&quot; nofollow ugc&quot;&gt;DEV&lt;/a&gt;（一个软件开发人员社区，他们撰写文章、参与讨论并建立他们的专业档案）；基于 forem，为您的同龄人、客户、粉丝群、家人、朋友以及其他任何时间和空间建立的社区，在这些时间和空间里，人们需要聚集在一起成为集体的一部分。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/622f3d866b1cb73bee890063&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - [Forem] Community for Everyone&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%AF%BC%E8%88%AA&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;导航&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%BD%91%E7%AB%99&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;网站&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%88%86%E4%BA%AB&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;分享&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：完美导航, 网址导航, 上网主页, 网址大全, 网址目录, 免费网址大全, 免费网址推荐, 网站导航, 免费资源网站推荐&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;完美导航（www.9eip.com） 给您最好的互联网搜索功能和网址收集体验，拥有超强的聚合搜索引擎，精选大量实用的网址，（生活、休闲、办公、影视、工具、资源网址）超贴心的服务，某个网址失效了？找不到？完美导航会第一时间给您找出相关并且发布在失效网址页内和回复您的反馈。&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.9eip.com.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - 完美网址导航 - 好看实用的上网主页&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.9eip.com/&quot; rel=&quot; nofollow ugc&quot;&gt;完美导航&lt;/a&gt;，基于 &lt;a href=&quot;https://nicelinks.site/post/602e4a576eaf2a7660805af1&quot; rel=&quot; nofollow ugc&quot;&gt;WordPress&lt;/a&gt; 等搭建的网站；该站原名：9e 导航，上线于 2021 年 1 月，旨在为广大朋友搜寻收集全网最新、实用、有趣的网站平台，以及软件/工具。它有着简洁清爽的风格界面，也非常适合用做于浏览器主页；当然，该导航也支持「网址提交」。除了网站导航外，&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.9eip.com/&quot; rel=&quot; nofollow ugc&quot;&gt;完美导航&lt;/a&gt;还提供了些其他版本内容，如：实时·疫情数据、小游戏、壁纸等。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/622c8846a2eb9379e4c960ab&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - 完美网址导航 - 好看实用的上网主页&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;

&lt;p&gt;&amp;lt;div align=&quot;center&quot;&amp;gt;&amp;lt;img src=&quot;&lt;a href=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; rel=&quot; nofollow ugc&quot;&gt;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&lt;/a&gt;&quot; style=&quot;width: 200px;min-width: 200px;&quot; alt=&quot;倾城之链 - 客服微信&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;

&lt;h2&gt;本期文末寄语&lt;/h2&gt;

&lt;p&gt;我居北海君南海，寄雁传书谢不能。  &lt;br/&gt;
&lt;strong&gt;桃李春风一杯酒，江湖夜雨十年灯&lt;/strong&gt;。  &lt;br/&gt;
持家但有四立壁，治病不蕲三折肱。  &lt;br/&gt;
想见读书头已白，隔溪猿哭瘴溪藤。  &lt;br/&gt;
── 北宋 · 黄庭坚《寄黄几复》&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&amp;lt;img src=&quot;&lt;a href=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/300/h/300/interlace/1/ignore-error/1&quot; rel=&quot; nofollow ugc&quot;&gt;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/300/h/300/interlace/1/ignore-error/1&lt;/a&gt;&quot; style=&quot;width: 200px;min-width: 200px;&quot; alt=&quot;小程序码 - 倾城之链&quot;/&amp;gt;&lt;/p&gt;

&lt;h3&gt;您可能感兴趣的文章&lt;/h3&gt;



                &lt;/div&gt;
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2dc81879370ab2c8ca67a6a0b61c949b</guid>
<title>Golang 常见设计模式之装饰模式</title>
<link>https://toutiao.io/k/jwkjr3i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.11875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/OdIoEOgFgUGcibO4v5qxt8aOe6ArwX6qwM3icvwPccBDAjM1eoJTf9QbJ2WcUicIw5QkOiasIKgvNV56qWIXqTcBicg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;想必只要是熟悉 Python 的同学对装饰模式一定不会陌生，这类 Python 从语法上原生支持的装饰器，大大提高了装饰模式在 Python 中的应用。尽管 Go 语言中装饰模式没有 Python 中应用的那么广泛，但是它也有其独到的地方。接下来就一起看下装饰模式在 Go 语言中的应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;简单装饰器&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我们通过一个简单的例子来看一下装饰器的简单应用，首先编写一个 hello 函数：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    hello()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;完成上面代码后，执行会输出“&lt;span&gt;Hello World!&lt;/span&gt;”。&lt;/span&gt;&lt;span&gt;接下来通过以下方式，在打印“&lt;span&gt;Hello World!&lt;/span&gt;”前后各加一行日志：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;before&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;after&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    hello()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;代码执行后输出：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;before&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Hello World!&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;after&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;当然我们可以选择一个更好的实现方式，即单独编写一个专门用来打印日志的 logger 函数，示例如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;package main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; &quot;fmt&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(f &lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;before&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        f()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;after&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    hello := logger(hello)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    hello()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;可以看到 logger 函数接收并返回了一个函数，且参数和返回值的函数签名同 hello 一样。&lt;/span&gt;&lt;span&gt;然后我们在原来调用 hello() 的位置进行如下修改：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;hello := logger(hello)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;hello()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这样我们通过 logger 函数对 hello 函数的包装，更加优雅的实现了给 hello 函数增加日志的功能。&lt;/span&gt;&lt;span&gt;执行后的打印结果仍为：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;before&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Hello World!&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;after&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;其实 logger 函数也就是我们在 Python 中经常使用的装饰器，因为 logger 函数不仅可以用于 hello，还可以用于其他任何与 hello 函数有着同样签名的函数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然如果想使用 Python 中装饰器的写法，我们可以这样做：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;package main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; &quot;fmt&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(f &lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;before&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        f()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;after&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@logger&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    hello()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;但很遗憾，上面的程序无法通过编译。&lt;/span&gt;&lt;span&gt;因为 Go 语言目前还没有像 Python 语言一样从语法层面提供对装饰器语法糖的支持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;装饰器实现中间件&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;尽管 Go 语言中装饰器的写法不如 Python 语言精简，但它被广泛运用于 Web 开发场景的中间件组件中。&lt;/span&gt;&lt;span&gt;比如 Gin Web 框架的如下代码，只要使用过就肯定会觉得熟悉：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;package main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; &quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    r := gin.&lt;span class=&quot;code-snippet__type&quot;&gt;New&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    r.&lt;span class=&quot;code-snippet__type&quot;&gt;Use&lt;/span&gt;(gin.&lt;span class=&quot;code-snippet__type&quot;&gt;Logger&lt;/span&gt;(), gin.&lt;span class=&quot;code-snippet__type&quot;&gt;Recovery&lt;/span&gt;())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    r.&lt;span class=&quot;code-snippet__type&quot;&gt;GET&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt; *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;JSON&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;200&lt;/span&gt;, gin.&lt;span class=&quot;code-snippet__type&quot;&gt;H&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;message&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;pong&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt; = r.&lt;span class=&quot;code-snippet__type&quot;&gt;Run&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;:8888&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如示例中使用 gin.Logger() 增加日志，使用 gin.Recovery() 来处理 panic 异常一样，在 Gin 框架中可以通过 r.Use(middlewares...) 的方式给路由增加非常多的中间件，来方便我们拦截路由处理函数，并在其前后分别做一些处理逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而 Gin 框架的中间件正是使用装饰模式来实现的。下面我们借用 Go 语言自带的 http 库进行一个简单模拟。这是一个简单的 Web Server 程序，其监听 8888 端口，当访问 /hello 路由时会进入 handleHello 函数逻辑：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;loggerMiddleware&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(f http.HandlerFunc)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;HandlerFunc&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;before&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        f(w, r)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;after&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;authMiddleware&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(f http.HandlerFunc)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;HandlerFunc&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; token := r.Header.Get(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;token&quot;&lt;/span&gt;); token != &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fake_token&quot;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            _, _ = w.Write([]&lt;span class=&quot;code-snippet__keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;unauthorized\n&quot;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        f(w, r)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;handleHello&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;handle hello&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    _, _ = w.Write([]&lt;span class=&quot;code-snippet__keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hello World!\n&quot;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    http.HandleFunc(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;, authMiddleware(loggerMiddleware(handleHello)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.Println(http.ListenAndServe(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;:8888&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我们分别使用 loggerMiddleware、authMiddleware 函数对 handleHello 进行了包装，使其支持打印访问日志和认证校验功能。如果我们还需要加入其他中间件拦截功能，可以通过这种方式进行无限包装。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;启动这个 Server 来验证下装饰器：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;199&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.34408602150537637&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUEzTWPvOLpB170qFNyzNL7wIxjGKUjGNHtdpGO1Be6IdzicrUs1ibMC47fyGxDtwCvvPxUVxjzT4eHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;930&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;130&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.225&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUEzTWPvOLpB170qFNyzNL7wwwkKgsDsEbWEnE6YiamYEVvZ8jWxbYqWM8VdZgSibHH1F82zTo8dop3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对结果进行简单分析可以看到，第一次请求 /hello 接口时，由于没有携带认证 token，收到了 unauthorized 响应。第二次请求时携带了 token，则得到响应“&lt;span&gt;Hello World!&lt;/span&gt;”，并且后台程序打印如下日志：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;before&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;handle hello&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;after&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这说明中间件执行顺序是先由外向内进入，再由内向外返回。&lt;/span&gt;&lt;span&gt;而这种一层一层包装处理逻辑的模型有一个非常形象且贴切的名字，洋葱模型。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;435&quot; data-backw=&quot;478&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9100418410041841&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUEzTWPvOLpB170qFNyzNL7w5x0sU7v0N1iatsbibdeNROaQicoYf1FjB0W8SIyknVYM3dnoyrazeOK3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;478&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;但用洋葱模型实现的中间件有一个直观的问题。相比于 Gin 框架的中间件写法，这种一层层包裹函数的写法不如 Gin 框架提供的 r.Use(middlewares...) 写法直观。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Gin 框架源码的中间件和 handler 处理函数实际上被一起聚合到了路由节点的 handlers 属性中。其中 handlers 属性是 HandlerFunc 类型切片。对应到用 http 标准库实现的 Web Server 中，就是满足 func(ResponseWriter, *Request) 类型的 handler 切片。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当路由接口被调用时，Gin 框架就会像流水线一样依次调用执行 handlers 切片中的所有函数，再依次返回。这种思想也有一个形象的名字，就叫作流水线（Pipeline）。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;228&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.39453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUEzTWPvOLpB170qFNyzNL7wasfaKia3ynUZU0zX1IFyKoq1HeibicGvEBG2CpxiaOdOaxic2YfAdnibKicnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;接下来我们要做的就是将 handleHello 和两个中间件 loggerMiddleware、authMiddleware 聚合到一起，同样形成一个 Pipeline。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;authMiddleware&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(f http.HandlerFunc)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;HandlerFunc&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; token := r.Header.Get(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;token&quot;&lt;/span&gt;); token != &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fake_token&quot;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            _, _ = w.Write([]&lt;span class=&quot;code-snippet__keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;unauthorized\n&quot;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        f(w, r)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;loggerMiddleware&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(f http.HandlerFunc)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;HandlerFunc&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;before&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        f(w, r)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;after&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; handler &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(http.HandlerFunc)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;HandlerFunc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// 聚合 &lt;span class=&quot;code-snippet__title&quot;&gt;handler&lt;/span&gt; 和 &lt;span class=&quot;code-snippet__title&quot;&gt;middleware&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;pipelineHandlers&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(h http.HandlerFunc, hs ...handler)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;HandlerFunc&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; hs {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        h = hs[i](h)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; h&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;handleHello&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;handle hello&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    _, _ = w.Write([]&lt;span class=&quot;code-snippet__keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hello World!\n&quot;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    http.HandleFunc(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;, pipelineHandlers(handleHello, loggerMiddleware, authMiddleware))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.Println(http.ListenAndServe(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;:8888&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我们借用 pipelineHandlers 函数将 handler 和 middleware 聚合到一起，实现了让这个简单的 Web Server 中间件用法跟 Gin 框架用法相似的效果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再次启动 Server 进行验证：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;160&quot; data-backw=&quot;465&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.34408602150537637&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUEzTWPvOLpB170qFNyzNL7w37kO2VibIcTTdEiagw74LV5EhNP7uTkMaZT8htuP9QZ2cODnqC4SVnYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;465&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;90&quot; data-backw=&quot;400&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.225&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUEzTWPvOLpB170qFNyzNL7wYABbEoialibKJ1aEGR6AcwUOn6sac3lXG14wq22lMaC6o1X8Sicf0jnsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;改造成功，跟之前使用洋葱模型写法的结果如出一辙。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;简单了解了 Go 语言中如何实现装饰模式后，我们通过一个 Web Server 程序中间件，学习了装饰模式在 Go 语言中的应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;需要注意的是，尽管 Go 语言实现的装饰器有类型上的限制，不如 Python 装饰器那般通用。就像我们最终实现的 pipelineHandlers 不如 Gin 框架中间件强大，比如不能延迟调用，通过 c.Next() 控制中间件调用流等。但不能因为这样就放弃，因为 GO 语言装饰器依然有它的用武之地。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Go 语言是静态类型语言不像 Python 那般灵活，所以在实现上要多费一点力气。希望通过这个简单的示例，相信对大家深入学习 Gin 框架有所帮助。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击&lt;/span&gt;&lt;span&gt;&lt;strong&gt;↓↓阅读原文↓↓&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;了解更多 Golang 常见设计模式~&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;hr/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;快 来&lt;/span&gt;&lt;strong&gt;&lt;span&gt; 找 &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;又&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 小 拍&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;h2&gt;&lt;hr/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;319&quot; data-backw=&quot;546&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;319&quot; data-fileid=&quot;506103129&quot; data-ratio=&quot;0.5833333333333334&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUFAQemPjhnJTKkl7TwPLibto5mn4m21ZrshVQSeibqIYTw6XqhicImzlLxeW0v3BE4ycJbHd84ic5Oiayg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;span&gt;推 荐 阅 读&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODc5ODgyMw==&amp;amp;mid=2653587587&amp;amp;idx=1&amp;amp;sn=18b035915f270199e84be9c70402f049&amp;amp;chksm=bd1b1c0b8a6c951dd567ebdf2f174886f32ace652b6417eb48c60f09e052be1a1516d93e1e6c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;273&quot; data-backw=&quot;546&quot; data-before-oversubscription-url=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUElpXebXbjgibum7I6LiboCtK6KV8gcYQ1mFV2XdonnCrOhaQdtBNh71z1u0JNzcdrx5EQRg56zb0IA/0?wx_fmt=jpeg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;273&quot; data-fileid=&quot;506103128&quot; data-oversubscription-url=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUEUylg3O41wsJR8aiasuMebIJsicZ1HyIIL8XbjU22CGg8eV9ZciclQxtibdwcudh6PAicxj2D6ibG3T8mg/0?wx_fmt=jpeg&quot; data-ratio=&quot;0.5007751937984496&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUFBQRBscXZkAKXxfOAficofO34WHJeUR2ArFxfdrowNpdEDfJia1xH24eZZMmXyqBKYWeEYWpg3hLjQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;645&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODc5ODgyMw==&amp;amp;mid=2653587474&amp;amp;idx=1&amp;amp;sn=e1ee8074bc3fdda535b20f71061669c7&amp;amp;chksm=bd1b1c9a8a6c958c3f63ad5fd17441ddf4c3c5274a26e40a925c6cb3579e411a4f84e2f1ebed&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;273&quot; data-backw=&quot;546&quot; data-before-oversubscription-url=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUElpXebXbjgibum7I6LiboCtK6KV8gcYQ1mFV2XdonnCrOhaQdtBNh71z1u0JNzcdrx5EQRg56zb0IA/0?wx_fmt=jpeg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;273&quot; data-fileid=&quot;506103128&quot; data-oversubscription-url=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUEUylg3O41wsJR8aiasuMebIJsicZ1HyIIL8XbjU22CGg8eV9ZciclQxtibdwcudh6PAicxj2D6ibG3T8mg/0?wx_fmt=jpeg&quot; data-ratio=&quot;0.5007751937984496&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUHPLSeib80YKtuXfQ0dvZorWThtCS84G0hRXrlYeCa9Q50cbK1qsOgnPYMia5zpyESia7asEwav9Gw6g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;645&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODc5ODgyMw==&amp;amp;mid=2653586502&amp;amp;idx=1&amp;amp;sn=4c8ae1db8fa9ed55cd2de61abb5dc38f&amp;amp;chksm=bd1b10ce8a6c99d82a0aecdfc4e9bb51c9b5c8677b98e30687d485710dcb4396064b64770cf2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;273&quot; data-backw=&quot;546&quot; data-before-oversubscription-url=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUElpXebXbjgibum7I6LiboCtK6KV8gcYQ1mFV2XdonnCrOhaQdtBNh71z1u0JNzcdrx5EQRg56zb0IA/0?wx_fmt=jpeg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;273&quot; data-fileid=&quot;506103130&quot; data-oversubscription-url=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUEUylg3O41wsJR8aiasuMebIJsicZ1HyIIL8XbjU22CGg8eV9ZciclQxtibdwcudh6PAicxj2D6ibG3T8mg/0?wx_fmt=jpeg&quot; data-ratio=&quot;0.5007751937984496&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OdIoEOgFgUHvPqu0rib1WF6P3LOB3Vp6EtEibA2tGJX6ZIjJ7h4tv5lrCcUhic6TyBibZ8pqqZFlxOUSmlGnVyDeiaA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;645&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;设为星标&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506103126&quot; data-ratio=&quot;0.9037037&quot; data-type=&quot;png&quot; data-w=&quot;135&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OdIoEOgFgUHbb6jzHdqCC83fulktKZtY2WUNN9vVlgibWSiaR7RDHYbVyTy8icCibHV04APOmEqXhdoJv7GHJDMgvg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;更新不错过&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>49eda7c57de239ca2a804f43e746d56b</guid>
<title>WebRTC系列分享 第二期 | WebRTC QoS方法之Pacer实现</title>
<link>https://toutiao.io/k/kirmecw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.25&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/wndUCAU5ml4Fzp8Q60ruEmaA1EvD9cFEY8nfUdeK1DsgXZ1jkvg2jnCt5T3EIkHduQvd20w5TJhFCoUC9HicPHg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;导语 |&lt;/span&gt;&lt;span&gt; 本文将解读WebRTC中Pacer算法的实现。WebRTC有两套Pacer算法：TaskQueuePacedSender、PacedSender。本文仅介绍PacedSender的实现。&lt;/span&gt;&lt;span&gt;（文章中引用的WebRTC代码基于master，commit：&lt;/span&gt;&lt;span&gt;3f412945f05ce1ac372a7dad77d85498d23deaae源码分析）&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.048&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/APDZeM2BxAGzvV1GJOXdJ4F94MpEyibQAa1obHlhG6NJt7lic3dMSeSnF28cXMuqoGXIqXwzX6D5XO0CwqhWTNhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2250&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;背景介绍&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;若仅仅发送音频数据，不需要Pacer模块。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一帧音频数据本身不大，不会超过以太网的最大报文长度。一个RTP报文可以搞定，按照打包时长的节奏发送就可以。但视频数据不能按照音频数据的思路发送，一帧视频可能很大，远大于以太网的1500byte，需要分别封装在几个RTP报文中，若这些视频帧RTP报文一起发送到网络上，必然会导致网络瞬间拥塞。产生丢包抖动等异常。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;大多数编解码格式下，一帧音频数据长度固定，音频码率持续平稳。码率不会出现忽高忽低现象。但是一帧视频数据长度受内容影响严重。I、P、B帧间的长度相差非常大。直接发送网络波动幅度很大。尤其是WIFI环境下，受限WIFI的调度机制，媒体数据能否平稳发送，对弱网的WiFi环境对通话质量影响很大。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Pacer的目的就是让视频数据按照评估码率均匀的在各个时间片发送出去。如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;545&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;398&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.13561470215462612&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/APDZeM2BxAHm1lVGgxo03ibUeJjslSrYZjVXCF0vvICc3A4XPhTcFlibHsl8JicAicYPvmvLzwDgv07aP9vh7NprRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;789&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;实现原理&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3442796610169492&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/APDZeM2BxAF6IytPEx1h0rFDtibaYzKD7Jk7qN1YHnutQWdAlbXLibp9GdOmfw2ITMWW1iat6CwdDUPX3eFKlKIjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;944&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;设计PACER模块主要解决三个问题：怎么发送报文、什么时候发报文、每次发多少数据量。&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 怎么发送报文&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;音频、视频、NACK、FEC、Padding报文都要统一从Pacer模块发送。若不区分报文优先级，势必会对系统延时产生很大影响。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以音视频编码数据RTP切分打包后，首先将RTP报文存在pace queue队列，并将报文元数据(packet id, size, timestamp, 重传标示)送到pacer queue进行排队等待发送，插入队列的元数据会进行优先级排序。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;pace queue是一个基于优先级排序的多维链表，它并不是一个先进先出的fifo，而是一个按优先级排序的list。报文优先级规则是：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Pacer每次触发发送事件时先从queue的最前面取出优先级最高的报文进行发送，这样做的目的是让视频在传输的过程中延迟尽量小，重传的报文尽快能到达防止等待卡顿。pace queue还可以设置最大延迟，如果超过最大延迟，会计算queue中数据发送所需要的码率，并且会把这个码率替代target bitrate作为budget参考码率来加速发送。（最大延时详细处理流程会在后文中介绍）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根据报文类型确定数据优先级处理函数如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;GetPriorityForType&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(RtpPacketMediaType type)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;switch&lt;/span&gt; (type) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; RtpPacketMediaType::kAudio:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; kFirstPriority + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; RtpPacketMediaType::kRetransmission:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; kFirstPriority + &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; RtpPacketMediaType::kVideo:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; RtpPacketMediaType::kForwardErrorCorrection:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; kFirstPriority + &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; RtpPacketMediaType::kPadding:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; kFirstPriority + &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  RTC_CHECK_NOTREACHED();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;按照优先级POP数据处理函数如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt; RoundRobinPacketQueue::QueuedPacket::&lt;span class=&quot;code-snippet__keyword&quot;&gt;operator&lt;/span&gt;&amp;lt;(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; RoundRobinPacketQueue::QueuedPacket&amp;amp; other) &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (priority_ != other.priority_)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; priority_ &amp;gt; other.priority_;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (is_retransmission_ != other.is_retransmission_)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; other.is_retransmission_;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; enqueue_order_ &amp;gt; other.enqueue_order_;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 什么时候发报文&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.19291109819872168&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/APDZeM2BxAF6IytPEx1h0rFDtibaYzKD7KbJBwK0icXLanjd9mDoibxTjjBNFHhmtFnd8QnkvUm7O68AXW86o8h9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1721&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PacingController::ProcessPackets按照PacingController::NextSendTime控制的节奏周期调用。完成PACER平滑发送功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PacingController::NextSendTime在控制发送节奏上，有两种模式kPeriodic、kDynamic。这里先介绍kPeriodic实现方式。kPeriodic模式下，固定每隔5ms调用一次发送报文任务。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;constexpr&lt;/span&gt; TimeDelta kDefaultMinPacketLimit = TimeDelta::Millis(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4587628865979381&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/APDZeM2BxAF6IytPEx1h0rFDtibaYzKD70sgOTQ0GYtyNWsiamAxGZ9ZamvLURROLxTbMOsXCgynobmkWQKwiavXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1552&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 每次发多少数据量&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;PacingController::ProcessPackets被定时触发后，会计算当前时间和上次被调用时间的时间差，然后将时间差参数传入media_budget_，media_budget_算出当前时间片网络可以发送多少数据，然后从pacer queue当中取出报文元数据进行网络发送。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;media_budget_根据评估出来的参考码率计算这次定时事件能发送多少字节的公式如下：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.09554140127388536&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/APDZeM2BxAF6IytPEx1h0rFDtibaYzKD7rJJ2KE2vyE3ic6dBynU4EXxr8CxSjFBhW33aymo8q8rIWibER4ehos1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;314&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;delta time：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;上次检查时间点和这次检查时间点的时间差。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;target bitrate：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;pacer的参考码率，是由probe模块根据网络探测带宽评估出来的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;remain_bytes：&lt;/strong&gt;每次触发发包时会减去发送报文的长度size,如果remain_bytes &amp;gt; 0，继续从pace queue中取下一个报文进行发送，直到remain_bytes &amp;lt;=0 或者 pace queue没有更多的报文。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果pacer queue没有更多待发送的报文，但media_budget_计算出还可以发送更多的数据，这个时候pacer会进行padding报文补充&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. Pacer模块引入延时规避方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;max_pacing_delay：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Pacer模块定量计算发送网络报文数据量，相当于cache等待发送，必然会引起延迟。为了保证实时性，Pacer模块有个max_pacing_delay全局变量，配置最大缓冲发送延时时间上限，若最大缓冲延时大于该值，就要重新调整Pacer模块的目标码率，保证当前数据都能及时发送出去。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;max_pacing_delay生效流程如下&lt;/span&gt;：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.21346023113528212&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/APDZeM2BxAF6IytPEx1h0rFDtibaYzKD7c3ED1Itl04pwcOjAcvHfrnoeI8Pib6nyg9cGzElic3PCfRVn8voSiaUzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1471&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;VideoSendStreamImpl::VideoSendStreamImpl配置到transport-&amp;gt;SetQueueTimeLimit&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;void PacingController::SetQueueTimeLimit(TimeDelta &lt;span class=&quot;code-snippet__built_in&quot;&gt;limit&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  queue_time_limit = &lt;span class=&quot;code-snippet__built_in&quot;&gt;limit&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PacingController::ProcessPackets&lt;/span&gt;&lt;span&gt;会实时计算当前处理方式会引入的系统延时，当延时大于设定目标上限值，需要及时调整Pacer目标码率，保证Pacer模块引入延时时间可控。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6889738687061823&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/APDZeM2BxAF6IytPEx1h0rFDtibaYzKD7o1XiaEgaPjD2yqkz4dq7UEpYtbTlKOJibgyZPrj330JQKmBicpibAP5tPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1569&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很明显这仅仅是一个迫不得己的规避方法，实际应用中，这种方法会出现码率梯度上升现象。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;编码算法码控模块配合：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Pacer模块实现不复杂，但是要想真正做好Pacer功能，仅仅靠一个Pacer模块是玩不转的，需要与视频编码器的码控模块配合：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些参数都要根据自己的实际应用场景进行调优。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1NTEzOTM5Mw==&amp;amp;mid=2247485966&amp;amp;idx=1&amp;amp;sn=113920ae7c4f908f4576fbcc1484781a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;WebRTC的拥塞控制和带宽策略&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;WebRTC的拥塞控制和带宽策略&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;&lt;br mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;/&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;27&quot; data-fileid=&quot;100019330&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.06533333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/APDZeM2BxAE1Wy1lFItVtfUaVIxshfy2SRxpVsQJ8PuwTeiaVF9ClMbXxpQZFtfQhZznibkmOiam1e20feem8zfTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2250&quot;/&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0NDI1OTUzMw==&amp;amp;mid=2247487185&amp;amp;idx=1&amp;amp;sn=6ee6f115330bbd461301d0d82466ea2c&amp;amp;chksm=c3262673f451af6520f847a1902aeafa2bd004f2985583c3874652f463380ff75307aa677828&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.17148014440433212&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wndUCAU5ml6rqz5WKTHCsgCEcgAyFRjCfvN1dvuhs14NsCq7FrflUIrVcZbBrsC6MycPJIWw646DIJstiaGqyww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1108&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-darkmode-color-16475853156911=&quot;rgb(100, 99, 100)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(100, 99, 100)&quot;&gt;&lt;strong data-darkmode-color-16475853156911=&quot;rgb(100, 99, 100)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(100, 99, 100)&quot;&gt;&lt;span data-darkmode-color-16475853156911=&quot;rgb(100, 99, 100)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(100, 99, 100)&quot;&gt;关于云架构平台部&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-darkmode-color-16475853156911=&quot;rgb(100, 99, 100)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(100, 99, 100)&quot;&gt;&lt;span data-darkmode-color-16475853156911=&quot;rgb(100, 99, 100)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(100, 99, 100)&quot;&gt;云架构平台是腾讯规模最大的技术部门之一，为公司各业务提供存储、接入和计算服务，这里有海量的存储和数据库平台，世界级的CDN服务，先进的操作系统和视频编解码技术，我们致力于用技术的力量持续赋能客户，帮助客户提升效率，降低成本。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;hr data-style=&quot;border-style: solid; border-width: 1px 0px 0px; border-color: rgba(0, 0, 0, 0.1); transform-origin: 0px 0px; transform: scale(1, 0.5);&quot; class=&quot;js_darkmode__2&quot;/&gt;&lt;section data-darkmode-color-16475853156911=&quot;rgba(255, 255, 255, 0.6)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)&quot;&gt;&lt;span data-darkmode-color-16475853156911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(0, 128, 255)&quot;&gt;&lt;strong data-darkmode-color-16475853156911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(0, 128, 255)&quot;&gt;&lt;span data-darkmode-color-16472438610485=&quot;rgb(43, 156, 186)&quot; data-darkmode-original-color-16472438610485=&quot;#fff|rgb(43, 156, 186)&quot; data-darkmode-color-16475853156911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(0, 128, 255)|rgb(0, 128, 255)&quot;&gt;招贤纳士：TEG云架平&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span data-darkmode-color-16475853156911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(0, 128, 255)&quot;&gt;&lt;strong data-darkmode-color-16475853156911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(0, 128, 255)&quot;&gt;&lt;span data-darkmode-color-16472438610485=&quot;rgb(43, 156, 186)&quot; data-darkmode-original-color-16472438610485=&quot;#fff|rgb(43, 156, 186)&quot; data-darkmode-color-16475853156911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(0, 128, 255)|rgb(0, 128, 255)&quot;&gt;快直播团队诚招热爱技术的你&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-color-16475853156911=&quot;rgba(255, 255, 255, 0.6)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)&quot;&gt;&lt;span data-darkmode-color-16475853156911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(0, 128, 255)&quot;&gt;&lt;strong data-darkmode-color-16475853156911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(0, 128, 255)&quot;&gt;岗位要求：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-color-16475853156911=&quot;rgba(255, 255, 255, 0.6)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)&quot;&gt;&lt;span data-darkmode-color-16475853156911=&quot;rgb(146, 146, 146)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(84, 84, 84)&quot; data-style=&quot;outline: 0px; max-width: 100%; color: rgb(84, 84, 84); font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;&quot; class=&quot;js_darkmode__3&quot;&gt;1、熟悉实时音视频整体解决方案和技术，如RTP/RTCP、WebRTC、传输QoS优化；&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-color-16475853156911=&quot;rgba(255, 255, 255, 0.6)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)&quot;&gt;&lt;span data-darkmode-color-16475853156911=&quot;rgb(146, 146, 146)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(84, 84, 84)&quot; data-style=&quot;outline: 0px; max-width: 100%; color: rgb(84, 84, 84); font-size: 12px; box-sizing: border-box !important; word-wrap: break-word !important;&quot; class=&quot;js_darkmode__4&quot;&gt;2、熟悉iOS、Android、Windows至少一个平台的音视频采集渲染技术；&lt;br data-darkmode-color-16475853156911=&quot;rgb(146, 146, 146)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(84, 84, 84)&quot;/&gt;3、熟悉H.264、H.265、AV1、AAC、Opus等音视频编解码标准和FFmpeg；&lt;br data-darkmode-color-16475853156911=&quot;rgb(146, 146, 146)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(84, 84, 84)&quot;/&gt;（以上1、2、3精通其中之一即可）&lt;br data-darkmode-color-16475853156911=&quot;rgb(146, 146, 146)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(84, 84, 84)&quot;/&gt;4、精通C++和多线程编程；熟悉常用数据结构、算法，具备良好的编码习惯，优秀的编码能力。&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-color-16475853156911=&quot;rgba(255, 255, 255, 0.6)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)&quot;&gt;&lt;span data-darkmode-color-16475853156911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(0, 128, 255)&quot;&gt;&lt;strong data-darkmode-color-16472438610485=&quot;rgb(43, 156, 186)&quot; data-darkmode-original-color-16472438610485=&quot;#fff|rgb(43, 156, 186)&quot; data-darkmode-color-16475853156911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgba(255, 255, 255, 0.6)|rgb(0, 128, 255)&quot;&gt;简历请投递至：tencentarchitect@126.com&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;hr data-darkmode-bgcolor-16472452891297=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472452891297=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;outline: 0px; max-width: 100%; border-color: rgba(0, 0, 0, 0.1); background-color: rgb(255, 255, 255); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; font-size: 16px; border-style: solid; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; transform-origin: 0px 0px 0px; transform: scale(1, 0.5); box-sizing: border-box !important; word-wrap: break-word !important; color: rgb(163, 163, 163) !important;&quot; class=&quot;js_darkmode__5&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)&quot;/&gt;&lt;p data-darkmode-bgcolor-16472452891297=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472452891297=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;outline: 0px; max-width: 100%; background-color: rgb(255, 255, 255); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; font-size: 16px; box-sizing: border-box !important; word-wrap: break-word !important; color: rgb(163, 163, 163) !important;&quot; class=&quot;js_darkmode__6&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)&quot;&gt;&lt;br data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)&quot;/&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16472452891297=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472452891297=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;outline: 0px; max-width: 100%; background-color: rgb(255, 255, 255); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; font-size: 16px; box-sizing: border-box !important; word-wrap: break-word !important; color: rgb(163, 163, 163) !important;&quot; class=&quot;js_darkmode__7&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)&quot;&gt;&lt;span data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(0, 128, 255)&quot;&gt;&lt;strong data-darkmode-bgcolor-16472452891297=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472452891297=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472452891297=&quot;rgb(255, 23, 0)&quot; data-darkmode-original-color-16472452891297=&quot;#fff|rgb(61, 167, 66)|rgb(255, 0, 0)&quot; data-style=&quot;outline: 0px; max-width: 100%; color: rgb(255, 0, 0); letter-spacing: 0.544px; text-align: left; box-sizing: border-box !important; word-wrap: break-word !important;&quot; class=&quot;js_darkmode__8&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(255, 23, 0)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(0, 128, 255)|rgb(255, 0, 0)&quot;&gt;&lt;span data-darkmode-bgcolor-16472452891297=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472452891297=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472452891297=&quot;rgb(61, 167, 66)&quot; data-darkmode-original-color-16472452891297=&quot;#fff|rgb(61, 167, 66)|rgb(255, 0, 0)|rgb(61, 167, 66)&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(0, 128, 255)|rgb(255, 0, 0)|rgb(0, 128, 255)&quot;&gt;&lt;strong data-darkmode-bgcolor-16472452891297=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472452891297=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472452891297=&quot;rgb(0, 104, 255)&quot; data-darkmode-original-color-16472452891297=&quot;#fff|rgb(61, 167, 66)|rgb(255, 0, 0)|rgb(61, 167, 66)|rgb(0, 82, 217)&quot; data-style=&quot;outline: 0px; max-width: 100%; color: rgb(0, 82, 217); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important;&quot; class=&quot;js_darkmode__9&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(0, 104, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(0, 128, 255)|rgb(255, 0, 0)|rgb(0, 128, 255)|rgb(0, 82, 217)&quot;&gt;扫码添加 “&lt;strong data-darkmode-bgcolor-16472452891297=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472452891297=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472452891297=&quot;rgb(255, 23, 0)&quot; data-darkmode-original-color-16472452891297=&quot;#fff|rgb(61, 167, 66)|rgb(255, 0, 0)|rgb(61, 167, 66)|rgb(0, 82, 217)|rgb(255, 0, 0)&quot; data-style=&quot;outline: 0px; max-width: 100%; color: rgb(255, 0, 0); font-size: 16px; letter-spacing: 0.544px; box-sizing: border-box !important; word-wrap: break-word !important;&quot; class=&quot;js_darkmode__10&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(255, 23, 0)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(0, 128, 255)|rgb(255, 0, 0)|rgb(0, 128, 255)|rgb(0, 82, 217)|rgb(255, 0, 0)&quot;&gt;&lt;span data-darkmode-bgcolor-16472452891297=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472452891297=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472452891297=&quot;rgb(61, 167, 66)&quot; data-darkmode-original-color-16472452891297=&quot;#fff|rgb(61, 167, 66)|rgb(255, 0, 0)|rgb(61, 167, 66)|rgb(0, 82, 217)|rgb(255, 0, 0)|rgb(61, 167, 66)&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(0, 128, 255)|rgb(255, 0, 0)|rgb(0, 128, 255)|rgb(0, 82, 217)|rgb(255, 0, 0)|rgb(0, 128, 255)&quot;&gt;&lt;strong data-darkmode-bgcolor-16472452891297=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472452891297=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472452891297=&quot;rgb(0, 104, 255)&quot; data-darkmode-original-color-16472452891297=&quot;#fff|rgb(61, 167, 66)|rgb(255, 0, 0)|rgb(61, 167, 66)|rgb(0, 82, 217)|rgb(255, 0, 0)|rgb(61, 167, 66)|rgb(0, 82, 217)&quot; data-style=&quot;outline: 0px; max-width: 100%; color: rgb(0, 82, 217); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important;&quot; class=&quot;js_darkmode__11&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(0, 104, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(0, 128, 255)|rgb(255, 0, 0)|rgb(0, 128, 255)|rgb(0, 82, 217)|rgb(255, 0, 0)|rgb(0, 128, 255)|rgb(0, 82, 217)&quot;&gt;鹅厂架构师小客服&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;” ，成功通过后可进入【&lt;strong data-darkmode-bgcolor-16472452891297=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472452891297=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472452891297=&quot;rgb(255, 23, 0)&quot; data-darkmode-original-color-16472452891297=&quot;#fff|rgb(61, 167, 66)|rgb(255, 0, 0)|rgb(61, 167, 66)|rgb(0, 82, 217)|rgb(255, 0, 0)&quot; data-style=&quot;outline: 0px; max-width: 100%; color: rgb(255, 0, 0); font-size: 16px; letter-spacing: 0.544px; box-sizing: border-box !important; word-wrap: break-word !important;&quot; class=&quot;js_darkmode__12&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(255, 23, 0)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(0, 128, 255)|rgb(255, 0, 0)|rgb(0, 128, 255)|rgb(0, 82, 217)|rgb(255, 0, 0)&quot;&gt;&lt;span data-darkmode-bgcolor-16472452891297=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472452891297=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472452891297=&quot;rgb(61, 167, 66)&quot; data-darkmode-original-color-16472452891297=&quot;#fff|rgb(61, 167, 66)|rgb(255, 0, 0)|rgb(61, 167, 66)|rgb(0, 82, 217)|rgb(255, 0, 0)|rgb(61, 167, 66)&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(0, 128, 255)|rgb(255, 0, 0)|rgb(0, 128, 255)|rgb(0, 82, 217)|rgb(255, 0, 0)|rgb(0, 128, 255)&quot;&gt;&lt;strong data-darkmode-bgcolor-16472452891297=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472452891297=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472452891297=&quot;rgb(0, 104, 255)&quot; data-darkmode-original-color-16472452891297=&quot;#fff|rgb(61, 167, 66)|rgb(255, 0, 0)|rgb(61, 167, 66)|rgb(0, 82, 217)|rgb(255, 0, 0)|rgb(61, 167, 66)|rgb(0, 82, 217)&quot; data-style=&quot;outline: 0px; max-width: 100%; color: rgb(0, 82, 217); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; word-wrap: break-word !important;&quot; class=&quot;js_darkmode__13&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(0, 104, 255)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(0, 128, 255)|rgb(255, 0, 0)|rgb(0, 128, 255)|rgb(0, 82, 217)|rgb(255, 0, 0)|rgb(0, 128, 255)|rgb(0, 82, 217)&quot;&gt;鹅厂架构师圈&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;】，与技术爱好者、技术关注者分享交流，共同进步成长，欢迎大家！↓↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16472452891297=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472452891297=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;outline: 0px; max-width: 100%; background-color: rgb(255, 255, 255); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; font-size: 16px; text-align: center; box-sizing: border-box !important; word-wrap: break-word !important; color: rgb(163, 163, 163) !important;&quot; class=&quot;js_darkmode__14&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wndUCAU5ml4nb1oibI1F2s07zVksXI0ePPwjklkclodMXHmyEy3AEbLsQ1uhk4Ln6X8muJpAndhfibzdkPVic4B0A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;430&quot;/&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16472438610485=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472438610485=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 2.66667px; margin-bottom: 2.66667px; outline: 0px; max-width: 100%; background-color: rgb(255, 255, 255); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; font-size: 16px; text-align: left; line-height: 30.6px; box-sizing: border-box !important; word-wrap: break-word !important; color: rgb(163, 163, 163) !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__15&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)&quot;&gt;&lt;span data-darkmode-bgcolor-16472438610485=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472438610485=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472438610485=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16472438610485=&quot;#fff|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(136, 136, 136)&quot;&gt;&lt;strong data-darkmode-bgcolor-16472438610485=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472438610485=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472438610485=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16472438610485=&quot;#fff|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(136, 136, 136)&quot;&gt;&lt;span data-darkmode-bgcolor-16472438610485=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472438610485=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472438610485=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16472438610485=&quot;#fff|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(136, 136, 136)&quot;&gt;关于我们&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br data-darkmode-bgcolor-16472438610485=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472438610485=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)&quot;/&gt;&lt;/p&gt;&lt;hr data-darkmode-bgcolor-16472438610485=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472438610485=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;outline: 0px; max-width: 100%; border-color: rgba(0, 0, 0, 0.1); background-color: rgb(255, 255, 255); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; font-size: 16px; border-style: solid; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; transform-origin: 0px 0px 0px; transform: scale(1, 0.5); box-sizing: border-box !important; word-wrap: break-word !important; color: rgb(163, 163, 163) !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__16&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)&quot;/&gt;&lt;p data-darkmode-bgcolor-16472438610485=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472438610485=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 2.66667px; margin-bottom: 2.66667px; outline: 0px; max-width: 100%; background-color: rgb(255, 255, 255); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; font-size: 16px; text-align: left; line-height: 30.6px; box-sizing: border-box !important; word-wrap: break-word !important; color: rgb(163, 163, 163) !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__17&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)&quot;&gt;&lt;strong data-darkmode-bgcolor-16472438610485=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472438610485=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472438610485=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16472438610485=&quot;#fff|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(136, 136, 136)&quot;&gt;&lt;span data-darkmode-bgcolor-16472438610485=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472438610485=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472438610485=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16472438610485=&quot;#fff|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(136, 136, 136)&quot;&gt;出品：腾讯云音视频团队&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16472438610485=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472438610485=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 2.66667px; margin-bottom: 2.66667px; outline: 0px; max-width: 100%; background-color: rgb(255, 255, 255); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; font-size: 16px; text-align: left; line-height: 30.6px; box-sizing: border-box !important; word-wrap: break-word !important; color: rgb(163, 163, 163) !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__18&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)&quot;&gt;&lt;strong data-darkmode-bgcolor-16472438610485=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472438610485=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472438610485=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16472438610485=&quot;#fff|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(136, 136, 136)&quot;&gt;&lt;span data-darkmode-bgcolor-16472438610485=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472438610485=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16472438610485=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16472438610485=&quot;#fff|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)|rgb(136, 136, 136)&quot;&gt;技术分享：关注微信公众号 【鹅厂架构师】&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16472438610485=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16472438610485=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 2.66667px; margin-bottom: 2.66667px; outline: 0px; max-width: 100%; background-color: rgb(255, 255, 255); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; font-size: 16px; text-align: left; line-height: 30.6px; box-sizing: border-box !important; word-wrap: break-word !important; color: rgb(163, 163, 163) !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__19&quot; data-darkmode-bgcolor-16475853156911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16475853156911=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16475853156911=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16475853156911=&quot;#fff|rgb(163, 163, 163)&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wndUCAU5ml6rC6MqoPKHtpenNcYZBdTf3bBbXp0v1yicduTguZ03Uia869Xl2k1fWC3Tbpo7ndiaibUPCIpZtibKCSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d5ed4ec41b11b04e238301ab5e197406</guid>
<title>复盘归因，提高交付质量的秘诀</title>
<link>https://toutiao.io/k/mvs5ovy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h2&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;写这篇文章的初衷，是前几天在团队内部进行了一次缺陷和用户反馈建议的复盘归因分享，略有所得。正好昨天看到chenkl老师的一篇文章：《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==&amp;amp;mid=2247484921&amp;amp;idx=1&amp;amp;sn=7e95a1cd15cd69f9299475ffc3e26a55&amp;amp;chksm=ce714da5f906c4b30dd25057b3f3cae15110c8db755afabd4587c3b16d02fde48c25f1b2f426&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;团队交付质量如何评估&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;团队交付质量如何评估&lt;/span&gt;&lt;/a&gt;&lt;span&gt;》。其中讲到的很多点如缺陷趋势图、交付时长、线上BUG逃逸率、用户反馈等，给了我很多不一样的启发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这篇文章，我想来聊聊，如何通过复盘归因，来提高交付质量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;软件交付质量&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;在日常的工作流程中，比较通用的流程如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8867647058823529&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWglYXLYWtSubq9x5hoa8NfpweDbQ8LIOPnibxnlfvzjVe3Gs0xMzNmZicqx6cpuFP6GISroMRuibv3mw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;680&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从质量保障和交付的角度来讲，软件交付生命周期中大体可分为如下三个阶段：&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;需求设计质量&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;这个阶段包括原型图、PRD文档、交互设计、技术方案、测试用例等几项重要产出物，当然他们有一定的前后依赖关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们谈软件交付质量，不可避免要从它的源头说起，而源头就是需求和设计阶段要做的事情。如上图所示，我们为什么需要做大量的评审工作呢？因为如果在源头存在问题，那么研发过程和后面的用户使用质量，就无从谈起。方向错了，就全错了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;评审最大的作用就是&lt;/span&gt;&lt;strong&gt;&lt;span&gt;集各个角色(产品&amp;amp;研发&amp;amp;测试)从不同角度对需求设计进行解读理解，提出疑问和建议并进行修正&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;确保开始就确定方向和需求细节，尽可能降低或者避免遗漏及不合理带来的质量交付风险。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;研发过程质量&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;有句话怎么说来着？“软件质量是构建出来的，不是测试出来的”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;测试的本质是&lt;/span&gt;&lt;strong&gt;&lt;span&gt;验证研发交付的产出物是否达到需求设计及预期的标准&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。并不能直接带来质量的提升，只能通过种种手段多维度去验证是否达标，并通过流程规范、度量标准等去保障最终的交付物达标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此我们常说的各种测试手段，都是验证和保障交付质量的手段，而不是构建质量的手段。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;用户使用质量&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;用户使用质量指是软件上线后，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;对用户使用过程进行追踪并采集数据进行评估度量的过程&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;常见的评估维度有线上缺陷逃逸率、客诉工单、用户反馈建议、数据埋点等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;具体内容可参考chenkl老师的《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==&amp;amp;mid=2247484921&amp;amp;idx=1&amp;amp;sn=7e95a1cd15cd69f9299475ffc3e26a55&amp;amp;chksm=ce714da5f906c4b30dd25057b3f3cae15110c8db755afabd4587c3b16d02fde48c25f1b2f426&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;团队交付质量如何评估&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;团队交付质量如何评估&lt;/span&gt;&lt;/a&gt;&lt;span&gt;》，这里不做过多的赘述。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;复盘归因的价值&lt;/strong&gt;&lt;/h2&gt;&lt;h4&gt;&lt;strong&gt;为什么要复盘归因&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;之前有人问我，软件测试的本质是什么？我考虑良久，给出的答复是“质量+效率”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;先保障质量可控，再提高过程效率，通过节省下来的资源去投入到提高质量的过程中&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面的内容提到了软件交付生命周期以及软件交付质量在不同阶段的产出物，在每个环节都需要通过评审、检查、度量、验证、回归等手段来保障交付质量。但这些手段只能保障在每次迭代的生命周期中，软件交付质量处在一个可控的范围内。长期来看，并不能达到提高交付质量以及过程效率的目的。因此，复盘归因的价值就体现了出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过对过程和交付结果以及线上用户使用质量进行跟踪度量评估，找到出现问题的原因、解决方案，并&lt;/span&gt;&lt;strong&gt;&lt;span&gt;将其中可复用的进行归纳总结，通过流程规范、技术优化、文档培训等方式融入贯穿交付过程，最终达到提高交付质量和效率的目的&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;如何开展复盘归因&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;先看下面这张流程图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4988558352402745&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWglYXLYWtSubq9x5hoa8NfpqEd0psDQ55xo6gicHxLaaSsAia3Wd1zs9piaY87FkxqR4dXwBdfVaSlSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;437&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们在谈到软件交付质量的时候，分了三个阶段，每个阶段都有不同的手段去测试验证，也有各自的产出物。比如：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;需求设计阶段：原型图、PRD文档、交互设计&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;研发过程阶段：单测覆盖率、codereview记录、bug列表&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户使用阶段：线上问题list、用户反馈list、数据埋点结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整体的复盘归因过程，可以拆解为下列几个步骤：&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;复盘归因的真正目的&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;上面我们聊了交付过程的三个阶段，也聊了为什么要进行复盘归因以及它的过程，那复盘归因的真正目的是什么呢？&lt;/span&gt;&lt;span&gt;这里我想从测试的角度加入一个新的词：&lt;/span&gt;&lt;span&gt;收敛。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;测试的本质是什么？我觉得在当下的应用实践中，应该是&lt;/span&gt;&lt;strong&gt;&lt;span&gt;保障质量可控→提高过程效率→确保问题收敛&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9884318766066839&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWglYXLYWtSubq9x5hoa8Nfpk8NlWrOqgg7wV4yoOunO2d7LqfhOicKyOxmsPRDt0FNeKFh4lwmxGLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;778&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这篇文章主要内容是介绍复盘归因对于提高项目交付质量的原因，以及如何进行复盘归因，同时介绍了我对测试本质的理解，内容说明，仅供参考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后续我会和大家聊聊，技术项目落地交付以及交付质量的一些事情，敬请期待。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;最后，文末福利，预约有惊喜！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.7777777777777777&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWglYXLYWtSubq9x5hoa8NfpbugguNbdysaSJPiboG5Pb6F3OwrVmof4QHibic1ElMI4nicszSSwxAsRuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2b8ccf50fe21a80db87db89f3cbfd67d</guid>
<title>Go 1.18 终于来了！</title>
<link>https://toutiao.io/k/zmhxdzr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU0NjM2OTk0OA==&amp;amp;action=getalbum&amp;amp;album_id=2312006528054116354#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2312006528054116354&quot; data-tag_source=&quot;1&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#Go语言1.18&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;0个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU0NjM2OTk0OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/8IYnuEhwfhiajqvezicBlgRomp4S1yzGmu7TaWIzDuMJxL0kMwEDaeUYZwbmsrgAmxyzQ121QBUeFwiah10Kcozdg/0?wx_fmt=png&quot; data-nickname=&quot;面向加薪学习&quot; data-alias=&quot;study_money&quot; data-signature=&quot;专注于Go、Java、Flutter、Vue、React、Taro、小程序、Android、项目管理、软件架构。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;Go 1.18 正式版发布了！包含大量新功能的版本，最大的改变带来---泛型、工具链的实现、运行时和库的更改，还改善了性能。&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以点击底部 查看原文，观看视频版泛型教程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;该版本保持了Go语言的兼容性承诺：&lt;span&gt;几乎所有 Go 程序都能像以前一样继续编译和运行。下面来看一下新版本的一些重大特性：&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;泛型&lt;/h3&gt;&lt;p&gt;下面是 Go 1.18 泛型的主要功能变化，更详细信息请参阅官方文档。&lt;/p&gt;&lt;p&gt;1. 函数和类型声明的语法，现在接受类型参数。&lt;/p&gt;&lt;p&gt;2. 参数化函数和类型可以通过&lt;span&gt;在方括号中&lt;/span&gt;列出类型参数来实例化。&lt;/p&gt;&lt;p&gt;3. 新标记&lt;code&gt;~&lt;/code&gt;已添加到操作符和标点符号中。&lt;/p&gt;&lt;p&gt;4. 接口类型的语法现在允许嵌入任意类型（不仅仅是接口的类型名称）以及 union 和 ~T 类型元素。，这样的接口只能用作类型约束。&lt;/p&gt;&lt;p&gt;5. 新的 预声明标识符 &lt;code&gt;any&lt;/code&gt;是空接口的别名，可以用来代替 &lt;code&gt;interface{}&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;6. 新的 预声明标识符 &lt;code&gt;comparable&lt;/code&gt;是一个接口，表示可以使用&lt;code&gt;==&lt;/code&gt;或者 &lt;code&gt;!=&lt;/code&gt; 比较的所有类型的集合，它只能用作（或嵌入）类型约束。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面3个包，不在兼容性保证范围内：&lt;/p&gt;&lt;p&gt;&lt;code&gt;1. golang.org/x/exp/constraints&lt;/code&gt;：对通用代码有用的约束，例如 &lt;code&gt;constraints.Ordered&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;2. golang.org/x/exp/slices&lt;/code&gt;&lt;span&gt;：对任何元素类型的切片进行操作的通用函数集合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;3. golang.org/x/exp/maps&lt;/code&gt;&lt;span&gt;：对任何键或元素类型的映射进行操作的通用函数集合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;泛型实现具有如下限制：&lt;/p&gt;&lt;p&gt;1. Go 编译器无法处理泛型函数或方法中的类型声明，计划在 Go 1.19 中取消这个限制。&lt;/p&gt;&lt;p&gt;2. Go 编译器不接受具有预声明函数 real、imag 和 complex 的参数类型的参数，计划在 Go 1.19 中取消这个限制。&lt;/p&gt;&lt;p&gt;2. 如果 m 由 P 的约束接口显式声明，Go 编译器仅支持在类型参数类型 P 的值 x 上调用方法 m。类似地，方法值 x.m 和方法表达式 P.m 也仅在 m 由 P 显式声明时才受支持，即使 m 可能在 P 的方法集中，因为 P 中的所有类型都实现了 m，计划在 Go 1.19 中取消这个限制。&lt;/p&gt;&lt;p&gt;3. Go 编译器不支持访问结构字段 x.f，其中 x 是类型参数类型，即使类型参数的类型集中的所有类型都具有字段 f，计划在 Go 1.19 中取消这个限制。&lt;/p&gt;&lt;p&gt;4. 不允许将类型参数或指向类型参数的指针作为结构类型中的未命名字段嵌入，同样地，也不允许在接口类型中嵌入类型参数。&lt;/p&gt;&lt;p&gt;5. 具有多个 &lt;span&gt;term &lt;/span&gt;的 union 元素可能不包含具有非空方法集的接口类型。&lt;/p&gt;&lt;p&gt;泛型代表 Go 生态系统的巨大变化，虽然官方更新了几个支持泛型的核心工具，但还有很多工作要做。剩余的工具、文档和库需要一些时间才能赶上这些语言变化。&lt;/p&gt;&lt;h2&gt;模糊测试&lt;/h2&gt;&lt;p&gt;1. Go 1.18 包括 fuzzing（模糊测试） 的实现，详情请参阅 fuzzing相关文档。&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 注意，模糊测试会消耗大量内存&lt;/span&gt;，并且可能会影响机器运行时的性能。&lt;/p&gt;&lt;p&gt;3. 另请注意，模糊引擎在运行时会将扩展测试覆盖率的值写入模糊缓存目录 &lt;code&gt;$GOCACHE/fuzz&lt;/code&gt;。目前对可以写入模糊缓存的文件数量或总字节数&lt;span&gt;没有限制&lt;/span&gt;，因此可能会占用大量存储空间（可能为 GB 级别）。&lt;/p&gt;&lt;h2&gt;编译器&lt;/h2&gt;&lt;p&gt;&lt;span&gt;1. 现在编译器可以内联包含范围循环或标记为循环的函数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 编译器的类型检查器被完全替换以支持泛型，一些错误消息可能使用与以前不同的措辞（提供更多详细信息，或以更有用的方式表述）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;3. 由于与支持泛型相关的编译器的更改，Go 1.18 的&lt;span&gt;编译速度&lt;/span&gt;可能比 Go 1.17 的编译速度&lt;span&gt;慢大约 15%&lt;/span&gt;，代码的执行时间不受影响，目前计划在 Go 1.19 中提高编译器的速度。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;性能提升&lt;/h2&gt;&lt;p&gt;由于 Go1.17 中寄存器 ABI 调用约定扩展到了 &lt;span&gt;RM64 / Apple M1 / PowerPC 64&lt;span&gt; &lt;/span&gt;&lt;/span&gt;架构，因此 Go1.18 对这几个架构包含了高达 20% 的 CPU 性能提升。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;AMD64&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;Go 1.18 引入了新的&lt;code&gt;GOAMD64&lt;/code&gt;环境变量，它在编译时选择 AMD64 架构的最低目标版本，允许的值为&lt;code&gt;v1&lt;/code&gt;、 &lt;code&gt;v2&lt;/code&gt;、&lt;code&gt;v3&lt;/code&gt;或&lt;code&gt;v4&lt;/code&gt;，默认是&lt;code&gt;v1&lt;/code&gt;。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;RISC-V&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Linux 上的 64 位 RISC-V 架构（linux/riscv64 端口）现在支持 c-archive 和 c-shared 构建模式。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;Linux&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Go 1.18 需要 Linux 内核版本 2.6.32 或更高版本。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Windows&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;windows/arm 和 windows/arm64 端在支持非合作抢占，有希望解决在调用 Win32 函数时遇到的一些细微的 bug，这些bug在很长一段时间内会阻塞。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;iOS&lt;/h3&gt;&lt;p&gt;在 iOS（ios/arm64 端口）和在基于 AMD64 的 macOS（ios/amd64 端口）上运行的 iOS 模拟器上，Go 1.18 现在需要 iOS 12 或更高版本；已停止支持以前的版本。&lt;/p&gt;&lt;h3&gt;FreeBSD&lt;/h3&gt;&lt;p&gt;Go 1.18 是支持 FreeBSD 11.x 的最后一个版本，Go 1.19 需要 FreeBSD 12.2+ 或 FreeBSD 13.0+。&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以点击底部 查看原文，观看视频版泛型教程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;关注公众号，不迷路！&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU0NjM2OTk0OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/8IYnuEhwfhiajqvezicBlgRomp4S1yzGmu7TaWIzDuMJxL0kMwEDaeUYZwbmsrgAmxyzQ121QBUeFwiah10Kcozdg/0?wx_fmt=png&quot; data-nickname=&quot;面向加薪学习&quot; data-alias=&quot;study_money&quot; data-signature=&quot;专注于Go、Java、Flutter、Vue、React、Taro、小程序、Android、项目管理、软件架构。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;mpcps frameborder=&quot;0&quot; class=&quot;js_editor_cps&quot; data-datakey=&quot;1647397272854_0.3568419265735945&quot; data-uid=&quot;1647397272772&quot; data-type=&quot;1&quot; data-product=&quot;&quot; data-templateid=&quot;list&quot; data-pid=&quot;13168780&quot; data-categoryid=&quot;3&quot; data-appuin=&quot;3208869061&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>