<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f8028b4fcba6fdffdceecadd411cf538</guid>
<title>欢迎加入读者圈子，一起交流！</title>
<link>https://toutiao.io/k/h3qlj72</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;&lt;strong&gt;欢迎加入读者圈子，一起交流！&lt;br/&gt;↓↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;圈子剧透&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、600+圈子成员，以中高级程序员为主，更有架构师、CTO坐镇交流；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、1000+优质主题，数十G独家资料，每日分享，精挑细选；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、全年52期专属邮件周报，让你轻松掌握业界资讯、技术干货，提升认知水平；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、全年52本好书共读，让你花最少的时间，获取更好的知识；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;心动不如行动，赶快加入吧！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b568c5fe50542f7211084cd740c1afa0</guid>
<title>You Only Live Once？</title>
<link>https://toutiao.io/k/rr0kakz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;当&lt;/span&gt;&lt;span&gt;你&lt;/span&gt;&lt;span&gt;埋&lt;/span&gt;&lt;span&gt;头&lt;/span&gt;&lt;span&gt;苦&lt;/span&gt;&lt;span&gt;干的时候&lt;/span&gt;&lt;span&gt;，请&lt;/span&gt;&lt;span&gt;也要记&lt;/span&gt;&lt;span&gt;得，&lt;/span&gt;&lt;span&gt;时常&lt;/span&gt;&lt;span&gt;抬&lt;/span&gt;&lt;span&gt;头看看&lt;/span&gt;&lt;span&gt;天。&lt;/span&gt;&lt;/p&gt;&lt;article data-content=&quot;[{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;3060-1621846615933&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;p5PQ-1621846617594&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;当你埋头苦干的时候，请也要记得，抬头看看天。&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;Su1d-1654823560296&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;QKpb-1654823560294&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;说实话，5 年前大家都在讨论区块链的时候，除了让人疯狂的比特币挖矿，我其实没看到它有其他更好的落地场景。&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;t6yB-1654824165761&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;Ccvh-1654824165759&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;后来，国家政策越来越清晰，禁止非法 ICO，限制比特币挖矿，限制比特币的交易和炒作。因为，于我国而言，不经过银行的跨国转账无疑是转移资产的便利手段。在中美贸易战的大背景下，不受节制的转移资产的通道，ZF当然是不能容忍的。&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;kzns-1654823862635&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;pHH8-1654823862634&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;但，毋庸置疑的是，区块链技术本身，是伟大的。屠龙刀在手，就看你怎么用它了。&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;NmIp-1654824470101&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;Curs-1654824470100&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;2021 年，元宇宙的元年。这一年，Facebook 把公司名改成了 Meta，元宇宙第一股 Roblox 上市。&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;CovV-1654824817995&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;hnrK-1654824817993&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;关于元宇宙的特征，一千个人心中有一个个汉姆雷特。参考 Roblox 的描述，元宇宙有如下 8 大特征：&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;dJV6-1654827247790&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;list-item&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;q7Gh-1654827249534&amp;quot;,&amp;quot;listType&amp;quot;:&amp;quot;ordered&amp;quot;,&amp;quot;listLevel&amp;quot;:1,&amp;quot;style&amp;quot;:{}},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;bNUm-1654827247788&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;Identity：身份&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{&amp;quot;index&amp;quot;:1}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;dQFE-1654827266097&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;list-item&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;q7Gh-1654827249534&amp;quot;,&amp;quot;listType&amp;quot;:&amp;quot;ordered&amp;quot;,&amp;quot;listLevel&amp;quot;:1,&amp;quot;style&amp;quot;:{}},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;8jrj-1654827266095&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;Friends：朋友&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{&amp;quot;index&amp;quot;:2}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;d7yb-1654827341700&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;list-item&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;q7Gh-1654827249534&amp;quot;,&amp;quot;listType&amp;quot;:&amp;quot;ordered&amp;quot;,&amp;quot;listLevel&amp;quot;:1,&amp;quot;style&amp;quot;:{}},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;wHj3-1654827341698&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;Immersive：沉浸感，你就是角色，角色就是你&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{&amp;quot;index&amp;quot;:3}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;rP6m-1654827353781&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;list-item&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;q7Gh-1654827249534&amp;quot;,&amp;quot;listType&amp;quot;:&amp;quot;ordered&amp;quot;,&amp;quot;listLevel&amp;quot;:1,&amp;quot;style&amp;quot;:{}},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;bR29-1654827353779&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;Low Friction：低延迟&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{&amp;quot;index&amp;quot;:4}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;gN83-1654828563391&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;list-item&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;q7Gh-1654827249534&amp;quot;,&amp;quot;listType&amp;quot;:&amp;quot;ordered&amp;quot;,&amp;quot;listLevel&amp;quot;:1,&amp;quot;style&amp;quot;:{}},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;FcjP-1654828563390&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;Variety：多样性，多元性&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{&amp;quot;index&amp;quot;:5}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;Nylo-1654828636951&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;list-item&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;q7Gh-1654827249534&amp;quot;,&amp;quot;listType&amp;quot;:&amp;quot;ordered&amp;quot;,&amp;quot;listLevel&amp;quot;:1,&amp;quot;style&amp;quot;:{}},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;jBRB-1654828636950&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;Anywhere：不受地点的限制，可以利用终端，随时在现实和虚拟世界里穿越&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{&amp;quot;index&amp;quot;:6}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;UG5m-1654828737294&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;list-item&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;q7Gh-1654827249534&amp;quot;,&amp;quot;listType&amp;quot;:&amp;quot;ordered&amp;quot;,&amp;quot;listLevel&amp;quot;:1,&amp;quot;style&amp;quot;:{}},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;vqqI-1654828737293&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;Economy：元宇宙的经济体系包括：数字创造，数字资产，数字市场，以及数字货币。&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{&amp;quot;index&amp;quot;:7}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;gM9S-1654828829127&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;list-item&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;q7Gh-1654827249534&amp;quot;,&amp;quot;listType&amp;quot;:&amp;quot;ordered&amp;quot;,&amp;quot;listLevel&amp;quot;:1,&amp;quot;style&amp;quot;:{}},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;oG5O-1654828829125&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;Civility：依靠智能合约进行社区自治&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{&amp;quot;index&amp;quot;:8}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;D2s0-1654825380456&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;9BKc-1654825380454&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;元宇宙是 web 3.0 的具象，这也意味着，Web 3.0 大潮将至的端倪已初现。&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;1He5-1654827108630&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;Gnja-1654827108628&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;相比 5 年前，这一次，可以落地的场景已经丰富了很多：NFT，DeFi，DAO，POAP，RSS3，各类创作类游戏，数字人，等等 。。。&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;VPX8-1654827067945&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;QNS0-1654827067943&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;接下来，会有更多的资本和政策来完善 web 3.0 中的基础设施：5G/6G，XR 设备，加解密算法，脑机交互技术，安全技术，全息影像技术，色香味触传感器，游戏引擎，边缘计算，各类创作平台（如低代码平台）等等。&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;Q04t-1654826355922&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;4JyA-1654826355920&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;从技术的角度看，Web 3.0 的技术基础，可以用 BIGANT（大蚂蚁）来概括。&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;UGJ0-1654826421561&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;9Auu-1654826421560&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;B：Blockchain，区块链技术&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;1plr-1654826448572&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;cPFH-1654826448570&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;I： Interactivity，交互技术&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;2cCn-1654826488654&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;JRM5-1654826488653&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;G：Game，电子游戏技术&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;mRd3-1654826508662&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;bCcE-1654826508661&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;A：AI，人工智能技术&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;SqkN-1654826649508&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;EgJZ-1654826649506&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;N：Network 网络技术&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;65WL-1654826667020&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;DFbm-1654826667018&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;T：Internet of Things，物联网技术&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;Y43R-1654826433610&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;PRBg-1654826433609&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;17He-1654830672296&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;Erzf-1654830672295&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;作为技术人，再看看关于 Web 3.0相关的一些岗位，当然这些你在 Boss 上是搜不到的&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;4VgA-1654831711149&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;url&amp;quot;:&amp;quot;https://note.youdao.com/yws/res/65176/WEBRESOURCE9c3ef835528c2815a641921983d7be8d&amp;quot;,&amp;quot;version&amp;quot;:1,&amp;quot;width&amp;quot;:815,&amp;quot;height&amp;quot;:520},&amp;quot;nodes&amp;quot;:[],&amp;quot;state&amp;quot;:{&amp;quot;renderSource&amp;quot;:&amp;quot;https://note.youdao.com/yws/res/65176/WEBRESOURCE9c3ef835528c2815a641921983d7be8d&amp;quot;,&amp;quot;initialSize&amp;quot;:{&amp;quot;width&amp;quot;:815,&amp;quot;height&amp;quot;:520},&amp;quot;loading&amp;quot;:false}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;Zbhm-1654822951248&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;TrXH-1654822951235&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;J78V-1654823059199&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;ODh9-1654823059187&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;vqZs-1654822597063&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;url&amp;quot;:&amp;quot;https://note.youdao.com/yws/res/64990/WEBRESOURCEe2de01aeb3ab95e9ed43f90e5f2f272b&amp;quot;,&amp;quot;version&amp;quot;:1,&amp;quot;width&amp;quot;:815,&amp;quot;height&amp;quot;:543},&amp;quot;nodes&amp;quot;:[],&amp;quot;state&amp;quot;:{&amp;quot;renderSource&amp;quot;:&amp;quot;https://note.youdao.com/yws/res/64990/WEBRESOURCEe2de01aeb3ab95e9ed43f90e5f2f272b&amp;quot;,&amp;quot;initialSize&amp;quot;:{&amp;quot;width&amp;quot;:815,&amp;quot;height&amp;quot;:543},&amp;quot;loading&amp;quot;:false}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;Fswv-1654821453504&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;style&amp;quot;:{&amp;quot;textIndent&amp;quot;:252}},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;m4Jo-1654821453502&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;Bored Ape Yacht Club #8817&amp;quot;,&amp;quot;marks&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;color&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;#454545&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;backgroundColor&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;rgb(255, 255, 255)&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;fontSize&amp;quot;,&amp;quot;value&amp;quot;:14}]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;gQK7-1654822610153&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;list-item&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;UxpH-1654831966516&amp;quot;,&amp;quot;listLevel&amp;quot;:1,&amp;quot;listType&amp;quot;:&amp;quot;unordered&amp;quot;,&amp;quot;style&amp;quot;:{},&amp;quot;version&amp;quot;:1},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;SbQ9-1654822610152&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;熟悉 Web3.js/Ethers.js/Truffle/Hardhat&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{&amp;quot;index&amp;quot;:1}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;Ic4L-1654831966524&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;list-item&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;UxpH-1654831966516&amp;quot;,&amp;quot;listLevel&amp;quot;:1,&amp;quot;listType&amp;quot;:&amp;quot;unordered&amp;quot;,&amp;quot;style&amp;quot;:{},&amp;quot;version&amp;quot;:1},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;8H6U-1654831966523&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;熟悉 Solidity 项目开发&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{&amp;quot;index&amp;quot;:2}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;zzqX-1654831969275&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;list-item&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;UxpH-1654831966516&amp;quot;,&amp;quot;listLevel&amp;quot;:1,&amp;quot;listType&amp;quot;:&amp;quot;unordered&amp;quot;,&amp;quot;style&amp;quot;:{},&amp;quot;version&amp;quot;:1},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;aM31-1654831969274&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;熟悉&amp;quot;,&amp;quot;marks&amp;quot;:[]},{&amp;quot;text&amp;quot;:&amp;quot;网络编程、分布式架构、共识机制&amp;quot;,&amp;quot;marks&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;color&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;#000000&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;backgroundColor&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;rgb(255, 255, 255)&amp;quot;}]}]}],&amp;quot;state&amp;quot;:{&amp;quot;index&amp;quot;:3}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;eEMT-1654832247379&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;list-item&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;UxpH-1654831966516&amp;quot;,&amp;quot;listLevel&amp;quot;:1,&amp;quot;listType&amp;quot;:&amp;quot;unordered&amp;quot;,&amp;quot;style&amp;quot;:{},&amp;quot;version&amp;quot;:1},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;1lt1-1654832247377&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;熟悉 EVM 环境&amp;quot;,&amp;quot;marks&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;color&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;#000000&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;backgroundColor&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;rgb(255, 255, 255)&amp;quot;}]}]}],&amp;quot;state&amp;quot;:{&amp;quot;index&amp;quot;:4}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;BsJP-1654832326920&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;list-item&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;UxpH-1654831966516&amp;quot;,&amp;quot;listLevel&amp;quot;:1,&amp;quot;listType&amp;quot;:&amp;quot;unordered&amp;quot;,&amp;quot;style&amp;quot;:{},&amp;quot;version&amp;quot;:1},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;ToNY-1654832326919&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;会用至少一门脚本语言，如 python/Javascript/Typescript&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{&amp;quot;index&amp;quot;:5}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;ZZty-1654832396941&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;list-item&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;UxpH-1654831966516&amp;quot;,&amp;quot;listLevel&amp;quot;:1,&amp;quot;listType&amp;quot;:&amp;quot;unordered&amp;quot;,&amp;quot;style&amp;quot;:{},&amp;quot;version&amp;quot;:1},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;6Y8o-1654832396940&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;熟悉 Golang/Rust/C++,  (貌似web 3相关岗位的后端用Java 的比较少）&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{&amp;quot;index&amp;quot;:6}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;C3M2-1654821588051&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;2QEg-1654821588049&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;UyO3-1654821588188&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;LkWH-1654821588186&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}},{&amp;quot;type&amp;quot;:&amp;quot;block&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;EH2J-1654821588686&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;paragraph&amp;quot;,&amp;quot;data&amp;quot;:{},&amp;quot;nodes&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;hq9B-1654821588685&amp;quot;,&amp;quot;leaves&amp;quot;:[{&amp;quot;text&amp;quot;:&amp;quot;很多人说，现在看不懂元宇宙&amp;quot;,&amp;quot;marks&amp;quot;:[]}]}],&amp;quot;state&amp;quot;:{}}]&quot;&gt;&lt;section&gt;&lt;span&gt;5 年前，大家都在讨论区块链的时候，&lt;span&gt;说&lt;/span&gt;&lt;span&gt;实话，&lt;/span&gt;除了让人疯狂的比特币挖矿，我其实没看到它有其他更好的落地场景。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;后来，国家政策越来越清晰：禁止非法&lt;/span&gt;&lt;strong&gt;&lt;span&gt; ICO&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，限制比特币挖矿，限制比特币的交易和炒作。因为就我国而言，不经过银行的跨国转账无疑是转移资产的便利手段。在中美贸易战的大背景下，不受节制地转移资产的通道，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;ZF &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;当然是不能容忍的。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;但，毋庸置疑的是，区块链的横空出世，就技术本身而言，它是伟大的。屠龙刀在手，就看你怎么用它了。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;时间来到 2021 年，元宇宙的元年。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这一年，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Facebook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 改名 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;Meta，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;元宇宙第一股 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;Roblox&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 上市。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于元宇宙的特征，一千个人心中有一千个哈姆雷特。按 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;Roblox&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 的描述，元宇宙有如下 8 大特征：&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;dentity&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：身份不可篡改&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Friends&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：通过虚拟世界的社交网络，你也有志同道合的朋友&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Immersive&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;沉浸感：你就是角色，角色就是你&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Low Friction&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;网络低延迟，请求能快速响应&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Variety&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;多元性。在物理世界，you only live once，但在元宇宙，你可以体验多样的人生&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Anywhere&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;不受地点的限制，可以利用终端，随时在现实和虚拟世界里穿越&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Economy&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;有一套分布式的、多层次的经济体系，让元宇宙中的价值和数字资产实现流转&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Civility&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;依靠智能合约进行社区自治，代码即法律&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;元宇宙是 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;Web&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 3.0 的具象，这也意味着，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Web&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 3.0 大潮将至的端倪已初现。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;可以看到，相比 5 年前，这一次 &lt;strong&gt;&lt;span&gt;Web&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 3.0 这棵大树以区块链为根基，&lt;/span&gt;上面结出了累累硕果：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;NFT&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;DeFi&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;DAO&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;POAP&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;RSS3&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，各类创作类游戏，数字人 ......&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;385&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdSEoUqC8ZSCarEUSzCibZicFh4ylwZicQQRVHU8dLCqibSLtO3jbKlZEaS4kU8JY3AXwF4TlCiasp2nYrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Bord Ape Yacht Club #8817, 售价: $ 3, 400,000&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接下来，会有更多的资本和政策来完善 Web 3.0 中的基础设施以及各种各样的应用：5G/6G，AR/VR/XR，加解密算法，脑机交互技术，安全技术，全息影像技术，味觉触觉传感器，游戏引擎，边缘计算，各类创作平台（如低代码平台）等等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;404&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6993076162215628&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdSEoUqC8ZSCarEUSzCibZicFhowW82KiaWlfInKnCc9vfgwWwZZHJIB7AvkVjSLEpCmZgqib1qEuvqicCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4044&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从技术的角度看，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Web&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 3.0 的技术基础，可以用 &lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;BIGANT&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;（大蚂蚁）来概括：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;B&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Blockchain &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;区块链技术&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;I&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Inte&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ractivity &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;交互技术&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;G&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Game &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;电子游戏技术&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;A&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;AI  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;人工智能技术&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;N&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Network&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 网络通信技术&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;T&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Internet of  Things &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;物联网技术&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Web &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;3.0 会催生很多新兴事物，带来更多的就业机会。那么作为技术人，我们应该如何准备上船呢？&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;来看看 &lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Web&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 3.0 相关的一些研发类岗位：目前主要是合约开发，区块链开发，加解密算法的岗位。未来肯定会有更多的偏业务类的岗位。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些岗位因为太新，在传统的招聘平台，如 Boss 直聘上基本搜不到相关岗位，目前主要是由一些远程工作的渠道发布的。这恰恰也说明，很多 Web 2.0 的企业还没开始转型，而这，正是创业公司的机会。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;369&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6384915474642393&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/la8s6uvJibdSEoUqC8ZSCarEUSzCibZicFhPNZnFEsXe3mjlUzsgaQlgxMMud4ZibbicXEcFRwrO7ic58icIL42zWNuAg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1538&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6258148631029987&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/la8s6uvJibdSEoUqC8ZSCarEUSzCibZicFhObSKc2TkHj6q7iaPemiaqnOyhCykOeEtViaEu5A0CiboicPN23OWdnicj65Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1534&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5872395833333334&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/la8s6uvJibdSEoUqC8ZSCarEUSzCibZicFhiacPqc7wRYGoJ4QjKp1B5lv1p875vV9SPucccVfLMHXUrEaBBraxGww/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1536&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7369791666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/la8s6uvJibdSEoUqC8ZSCarEUSzCibZicFhQaBibn28bmqTzrsXZdfuXsoxvoiae6pzic8NQmqr3kG0uMib5x6dN8dfGQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1536&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7708333333333334&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/la8s6uvJibdSEoUqC8ZSCarEUSzCibZicFhTIQhicN9COAyeV1RibQv40XqGhZwhduk5k0U1b7icWDROia3knOsLKTM7Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1536&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5489296636085627&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/la8s6uvJibdSEoUqC8ZSCarEUSzCibZicFhk3dFbPos39FnammYndkKvA2DFMictZkgxsn6iaVRHIA2zVAs2orvUoDg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1308&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;还有一些币所的职位，待遇很丰厚，技术要求也高。但因为目前在国内不合法，所以请大家也要留心，时刻以法律为底线，有限制的自由才是真正的自由。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从上面的岗位要求可以看出，要从事 Web 3 相关的研发工作，特别是后端技术，需要具备以下技能：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;世界很精彩，想象未来的样子，竟然莫名激动。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;跳出自己的一亩三分地，现在上船，为时还不晚。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Enjoy~&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/article&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b286d1e8046453bbb52d018c6dc5baec</guid>
<title>支持10X增长，携程机票订单库Sharding实践</title>
<link>https://toutiao.io/k/cp43o8k</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:0.title1&quot;&gt;&lt;p&gt;&lt;strong&gt;作者简介&lt;/strong&gt;&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;初八，携程资深研发经理，专注于订单后台系统架构优化工作；JefferyXin，携程高级后端开发专家，专注系统性能、业务架构等领域。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt; &lt;span&gt;&lt;strong&gt;一、背景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着机票订单业务的不断增长，当前订单处理系统的架构已经不能满足日益增长的业务需求，系统性能捉襟见肘，主要体现在以下方面：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据库CPU资源在业务高峰期经常达到50%以上，运行状况亮起了黄灯&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;磁盘存储空间严重不足，需要经常清理磁盘数据腾挪可用空间&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;系统扩容能力不足，如果需要提升处理能力只能更换配置更好的硬件资源&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;因此我们迫切需要调整和优化机票订单数据库的架构，从而提升订单系统的处理性能。&lt;/span&gt;&lt;span&gt;通过建立良好的水平扩展能力，来满足日益增长的业务需求，为后续系统优化和支撑10x订单量的增长打下良好基础。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.1 存储架构的演进&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们选择一个新的系统架构，应该基于当下面临的问题，综合成本、风险、收益等多方面因素，选择出的最合适的方案。机票订单库的架构演进也不例外。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们最开始接触机票订单数据库时，它是一个非常庞大的数据集合，所有的订单业务全部都集中一个数据库上，因此整体BR非常高。同时，我们的SQL语句也非常复杂，混杂着很多历史遗留下来的存储过程。可想而之，整个数据库当时的压力巨大，维护成本居高不下。DBA每天的工作也非常忙碌，想方设法降高频，解决慢SQL等线上问题。生产偶尔也会因为某些没有review的SQL导致数据库短暂的停止服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;初期，我们采用了最常见的几种手段进行优化，包括：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然手段比较常规，通过一段时间的治理，订单库的稳定性也得到了一定的增强。总体实施成本较低，效果也是立竿见影的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着时间的推移和数据的积累，新的性能瓶颈逐渐显露。我们再次对系统进行了升级，对数据库架构做了改进。主要包括以下几个方面：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5376447876447876&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1f8I46haPDFTLIyklaY4Ol1YkwmU9yy76uW7m8gLyibRNg6iaiaoUIP76OLzRklOfl3tmNO7frxW7Gvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1036&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 订单库根据业务属性拆分成了多个数据库&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于业务对数据库进行垂直拆分在很大程度上提高了系统的可靠性和可维护性。&lt;/span&gt;&lt;span&gt;一个上百人的团队，同时对一套数据库进行维护，对于发布变更来说是一种煎熬，同时也存在很大的风险。&lt;/span&gt;&lt;span&gt;当一个非核心链路上的发布出现了问题，例如某些操作导致了锁表或者占用过多的系统资源，其他关键链路的数据库访问都会因此受到影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们根据不同的业务场景，例如：订单管理系统、出票、退票、改签等业务，将数据库进行垂直拆分。使各自业务系统数据隔离，减少相互的影响。这些拆分的数据库，可以根据不同性能要求，灵活调整数据库的部署方式，来降低总体成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.44375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dfeHORfMOsLB0qX6qFsoRXNGsX3yYx9g26VIEdjFFOfOUUakynDao3BkkLqPDPp5Hagt59nR1pYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通常来说，当航班过了起飞时间并且用户已经使用了当前机票，那么我们认为该订单服务已经完成，&lt;/span&gt;&lt;span&gt;后续订单数据发生改变的可能性很小，&lt;/span&gt;&lt;span&gt;于是会将该数据迁移到一个具有相同结构的冷数据库中。&lt;/span&gt;&lt;span&gt;该数据库仅提供查询功能，不提供修改功能。&lt;/span&gt;&lt;span&gt;但是我们发现少数场景仍然需要对这些数据进行修改。于是我们开发了一套数据还原功能，将处于冷数据库中的数据，还原到热数据库中，然后再进行操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注：我们当时采用的数据库和数据结构是完全一致的，这样做备份和还原、查询会比较方便。其实也可以采用其他类型的数据库，例如Mongo等。在读取性能和使用成本等方面可能会更具优势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这次升级同样解决了不少问题，使数据库的稳定性得到了很大的增强。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.2 基于冷热数据分离的适用性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然基于冷热数据的分库方案，在目前来看遇到了瓶颈。但是我认为它是一个非常值得借鉴的方案。我们现在仍然有大量的业务系统数据库采用这种方案对数据进行拆分。它不仅实施简单，同时运维成本也相对较低。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;优势：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;局限性：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据冷处理的规则应该相对简单，不应该经常发生变化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;热数据的膨胀需要受到限制，否则热数据的量一旦累积过多，性能瓶颈仍然会出现&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;需要额外的查询来找到订单所处的位置（冷/热数据库）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;因为冷数据量庞大，冷数据的查询能力、表结构调整能力都收到了限制，不能进行复杂的业务查询操作&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;根据我们的系统规划，在当下或者可预见的未来满足以上提到原因中的多个，那么就得谨慎选择采用此方案。或者在改方案的基础上进行优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正是由于我们目前的业务场景恰好命中了上面列举的所有问题，我们才需要对这个架构进行进一步调整，选择一个更好的水平扩展的方式，解决当前系统面临的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.3 当时面临的主要问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从2019年开始，我们就开始着手研究和规划订单数据库sharding项目。当时主要面临如下问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.3.1 订单的存储要求&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;受制于当前订单数据库架构的限制以及机票业务的特殊性（通常不超过2年的处理生命周期），改造前的订单数据库仅能够支持2年的订单存储。超过2年，我们会将数据进行归档。用户和员工都无法通过在线查询的方式获取订单信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是基于以下几个方面原因，原本2年的存储和处理周期已经不能满足客户和业务的需要：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1) 从客户的角度出发，仍然有查询历史订单的需求；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2) 业务场景的拓展导致机票订单整个服务周期变长；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原先机票使用完成（出行）一段时间后就可以视为服务结束，大部分订单3个月后就不会发生变化，但是由于新业务的推出，热点数据查询和处理周期明显变长。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.3.2 系统架构瓶颈&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）热数据膨胀&lt;/span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;热数据原本仅千万级别，由于业务的变化热数据数量不断膨胀。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）冷数据量庞大&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于订单存储周期拉长和订单量的增长，冷数据的数量也不断攀升。冷数据库查询性能不断下降；索引调整也变得非常困难，经常出现修改失败的场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）数据库高峰期BR达到了10w+；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4）系统存储了20TB的数据，磁盘使用率达到80%以上，经常触发使用容量告警；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5）主库的CPU使用率高峰期接近50%；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6）由于采用了读写分离的架构，当主库的服务器的性能受到影响的时候，AG延迟变得非常高，偶尔达到分钟级，有的时候甚至更长。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主从同步的延迟，导致了数据新鲜度的降低。我们之前的ORM层封装了一个新鲜容忍度的参数。当不能满足新鲜度要求的时候，读取会切换到主库，从而进一步加重了主库的负担。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，订单库的整体性能压力非常大，如果想快速解决性能问题，只能对机器进行扩容。但是由于数据库本身就是消耗资源大户，CPU和内存消耗非常高，只能通过进一步提高数据库的硬件配置来解决问题，因此整体升级的成本居高不下。另外硬件升级完成后，SQLServer的授权成本可能也会进一步提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了彻底解决以上问题，我们计划通过&lt;strong&gt;优化架构来提升系统的水平扩展能力&lt;/strong&gt;，从而进一步提升我们系统的性能和服务水平。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、项目目标和实施方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1 目标&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于上文提到的这些问题，为了确保系统能够长久持续的稳定运行并且提升订单系统的处理能力，我们计划对数据库的架构进行升级，总体实现以下目标：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们希望通过1-2年的时间，实现对数据库架构升级改造以及完成SQLServer迁移到MySQL的目标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2 架构改造&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.2.1 新旧架构的对比&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;旧系统架构：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.44375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dfeHORfMOsLB0qX6qFsoRXNGsX3yYx9g26VIEdjFFOfOUUakynDao3BkkLqPDPp5Hagt59nR1pYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构说明：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）订单数据库&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为热数据的主库，提供读写功能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）&lt;span&gt;订单数据库&lt;/span&gt; Slave&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为热数据的从库，在保障新鲜度的前提下提供只读功能，采用SQLServer的AlwaysOn技术&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）订单备份数据库&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为冷数据库（没有主从之分），仅提供只读功能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4）Archive&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;备份机制，根据业务的需要，为了缓解主数据库的压力，对于符合条件的订单（通常时起飞后+已出行）定时迁移到冷数据库的操作&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5）Restore&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还原机制。在一些特殊情况下，需要对已经备份的数据进行修改，我们需要将数据从冷数据库中恢复到热数据库然后才能进行操作。这个操作叫做还原。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当前存在的问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）数据量变多，业务场景变得复杂后，主库的数据量从千万级增长到亿级别，对数据库的性能产生明显影响&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）冷数据库的历史累计数据量也在不断膨胀，受到本地SSD磁盘容量的限制，磁盘空间使用率达到了80%以上&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）冷数据库的订单数量达到了十亿级，数据库索引调整，结构调整变得较为困难；查询性能也受到了很大的影响&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4）备份和还原逻辑需要根据业务要求不断调整&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;新系统架构：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1dfeHORfMOsLB0qX6qFsoRXYnibgzrW8icuicoemXusV9gqUksHjT2geE023BAXoq1aqm5WLyibJXta9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构说明：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）订单数据库Shard Cluster&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;新数据库基于订单号将数据水平拆分成64个分片，目前部署在16台物理机上&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）&lt;/span&gt;&lt;span&gt;订单聚合数据库&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对热点数据，通过Binglog和有序消息队列同步到订单聚合数据库，方便数据监控，并且用于提高数据聚合查询的性能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.2.2 新旧架构的差异&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;新旧系统的主要差别包括：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;新数据库的拆分维度从冷热数据变更成了根据订单号进行水平拆分&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据库从1拆2，变成了1拆64解决了磁盘存储空间不足的问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;新数据库的部署方式更加灵活，如果16台物理机器资源不足时，可以通过增加服务器的数量快速提高数据库的处理性能&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果64个分片的数量不足时，可以通过调整分片计算的组件功能，扩展分片数量&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;原先的SQLServer采用的一主多从一DR的模式进行配置。当前系统每个分片物理服务器采用一主一从一DR的模式进行配置&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过增加订单聚合数据库将部分跨分片的数据通过Binglog+有序消息的方式聚合到新的数据库上，降低跨分片查询带来的性能损失&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.3 技术方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在项目执行过程中有非常多的技术细节问题需要分析和解决。我们列举一些在项目过程中可能会遇到的问题：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如何选择分片键&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如何解决跨分片查询性能的损失&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如何提高开发效率，降低项目风险&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;全链路的灰度切换方案&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分片故障的处理方案&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;下面我们就选择几个典型的例子，来说明我们在项目过程中遇到的问题，以及解决这些问题的方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.3.1 分片键选择&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;分库的第一步也是最重要的一步，就是选择分片键。选择的原则是：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分片键必须是不会被更新的字段&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;各个分库的数据量和读写压力要均匀，避免热点分库&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;要尽量减少单次查询涉及的分库数量，降低DB压力&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;分片键的选择，是需要根据具体的业务场景来确定。对于订单数据的拆分，常见的选择是订单ID和用户ID两个维度，这也是业内最常用的两个分片键。我们最终采用的是主订单ID，主要是基于四个因素：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;90%的请求都是基于订单ID进行查询&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;主订单ID是对应于用户的一个订单，包含多个行程和贵宾休息室等附加产品，后台会可能将这些拆分为多个子订单，而子订单之间会做Join等关联处理，所以不能选择子订单维度&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一个主订单可能关联多个用户ID，比如用户A为用户B购买机票，用户B又可以自己为这个订单添加值机的功能。一个订单ID关联了两个用户ID，从而使用用户ID用作分片键会导致订单分布在不同的分片&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分销商的订单量非常大，按用户ID分库会导致数据不均衡&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;我们决定采用主订单号作为分片键后，进行了下列改造，用于实现并且加速分片选择的过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）订单ID索引表&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问题】：如何获取主子订单对应的分片ID？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;按主订单ID分库，首先产生的问题是子订单ID如何计算分库，需要查询所有分库么？我们是采用异构索引表的方式，即创建一个订单ID到主订单ID的索引表，并且索引表是按订单ID进行分库。每次查询订单ID查询时，从索引表中获取对应的主订单ID，计算出分库，再进行业务查询，避免查询所有分库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）索引表多级缓存&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问题】：通过索引表查询分片ID会增加了查询的二次开销，使查询性能损失严重，如何减少数据库二次查询的开销来提高查询性能呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;订单ID的二次查询，仍然会带来数据库的压力明显上升，实际上订单ID是不会更新的，订单ID和主订单ID的映射关系也是不会发生变化的，完全可以把订单ID索引表的信息缓存起来，每次查询时从缓存中就可以获取主订单ID。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们设计了多级缓存来实现查询加速，所有的缓存和分库逻辑都封装在组件中，提供给各个客户端使用。三级缓存结构如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.14102564102564102&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1f8I46haPDFTLIyklaY4Ol1lNYGWRbqA0O1XnVwls1KppRGBCXSUuAEdGWxdU2ROplOyiaBlymf3zQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1248&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注：&lt;/span&gt;&lt;span&gt;图下方的数字代表在当前缓存和它的所有上级缓存命中率的总和。&lt;/span&gt;&lt;span&gt;例如Redis的99.5%代表1000个订单有995个在本地缓存或者是Redis缓存中命中了。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;客户端本地缓存：将最热门的订单ID索引存放在应用的本地内存中，只需要一次内存操作就能获取主订单号，不需要进行额外的网络IO&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Redis分布式缓存：将大量的索引信息存放在Redis中，并且所有客户端可以共用Redis缓存，命中率超过99%，并且由于订单的映射关系是不会发生变化的，因此可以在生成订单号的阶段对缓存进行预填充&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;服务端本地缓存：对DB索引表的读取，都是在特定的应用中实现，未命中缓存时客户端是通过服务端获取索引信息。服务端也有本地缓存，使用Guava实现用于减缓热点key的流量尖刺避免缓存击穿&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）本地缓存的内存优化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问题】：使用本地缓存可以减少索引表查询开销，如果需要提高缓存命中率，就需要消耗更多的内存使用，那么如何减少内存占用的问题呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本地缓存的效率是最高的，存储在本地的索引信息自然是越多越好。但本地内存是宝贵而有限的，我们需要尽量减少单个索引占用的内存。订单ID都是Long类型，每个Long类型占用24个字节，通常情况下，单个索引中包含两个Long类型， 还需要缓存内部的多层Node节点，最终单个索引大约需要100个字节。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们主要是结合业务场景来改进内存的使用。订单ID是有序的，而且主子订单ID的生成时间是非常接近的，大部分情况下，主订单ID和子订单ID的数值差异是很小的。对于连续的数字，数组的方式是非常节省空间的，100个Long类型占用2400个字节，而一个长度为100的long数组，则只占用824个字节。同时不直接存储主订单ID，而是只存储主子订单ID的差值，从long类型缩减为short类型，可以进一步减少内存占用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最终的缓存结构为：Map&amp;lt;Long, short[]&amp;gt;。从而使整体的内存占用减少了大约93%的存储空间。也就意味着我们可以适当增加本地缓存的容量，同时减少内存的消耗。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4578125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1f8I46haPDFTLIyklaY4Ol1w8Cibp702e2EWsQ8BohOqc6CPdibDdyGh1dplhyyMCFD5QLTrhfWfpCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;改&lt;/span&gt;&lt;span&gt;造后：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【Key】表示订单ID所在的桶，计算方式为订单ID对 64（数组长度）取模&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【下标】表示订单ID的具体位置，计算方式为订单ID对 64（数组长度）取余数，即【KEY】和【下标】合计起来表示订单ID&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【偏移量】表示主订单ID的信息，计算方式是主订单ID减去订单ID&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最优情况下，存储64个索引只需要一个Long类型、一个长度64的short数组和约50个字节的辅助空间，总计200个字节，平均每个索引3个字节，占用的内存缩减到原来的100个字节的3%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;值得注意的是对于偏移量的设计仍然有一定的讲究。我们需要分析主子订单的差异区间范围。Short的取值范围是-32768 ～ 32767，首先将-32768定义为非法值。我们还发现大部分的订单分布区间其实并没有和这个取值范围重叠，因此需要额外再给偏移量增加二次偏移量来优化这个问题，实际的取值范围是：-10000 ～ 55534，进一步提高了short偏移量的覆盖面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4）主子订单ID同余&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问题】我们对订单ID索引做了各种改进，使它运行的越来越顺畅，但三级缓存的引入，也使得我们的系统结构变复杂，是否有办法跳过索引表呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们将未使用的订单ID按余数分成多个桶，新增订单在拆分订单时，子订单ID不再是随机生成，而是按照主订单ID的余数确定对应的桶，然后只允许使用这个桶内的订单ID，即保证主订单ID和子订单ID的余数是相同的。在查询时，子订单ID直接取余数就能确定对应的分库，不需要读取订单索引。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再进一步，生成主订单ID时也不再是随机选择，而是基于用户ID来分桶和选择，做到一个UID下的订单会尽量集中到单一分库中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1f8I46haPDFTLIyklaY4Ol1OREAUfKiaNNz2OuKwkrv1xd7spWWFZudeDYbHUIqML6QPuoNayhja4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户ID/主订单ID/子订单ID三者同余&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.3.2 跨分片查询优化&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据分库后，当查询条件不是分片键时，例如使用用户ID、更新时间等作为查询条件，都需要对所有分片进行查询，在DB上的执行次数会变为原来的64倍，消耗的CPU资源也会急剧放大。这是所有分库分表都会遇到的问题，也是一个分库项目最具有技术挑战的环节。我们针对各种场景，采取多种方式来进行优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）UID索引表&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问题】UID是除了订单号以外消耗资源最多的查询之一，大约占用大约8%的数据库使用资源。使用allShards查询会消耗非常多的资源，严重降低查询性能。那么我们如何对UID查询进行优化，从而提升查询效率呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;索引表是一种常见的解决方案，需要满足三个条件：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以用户ID作为条件的查询，是业务中非常重要的一类查询，也是排除订单ID查询后，最多的一类查询。基于业务和现有数据来分析，由于单个用户购买机票的总数并不是很多，用户ID分布在了有限的分库上。我们增加一个用户ID索引表，存储用户ID与订单ID的映射信息，并按照用户ID进行分库存储。如下图，每次用户ID的查询，会先查询索引，获取包含此用户订单的所有分库列表，通过一次额外的查询，能够快速排除大量无关的分库。再结合前面提及的用户ID与订单ID同余的策略，单个用户ID的新增订单会集中存储在单一分库中，随着历史数据的逐步归档，单个用户查询的分库数量会越来越少。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4751592356687898&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1f8I46haPDFTLIyklaY4Ol1iaBNicmxHIH1RWxETKp87o2RNSib1EkLrBic5vvXhhxxp27VWPjcK7j0vg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;785&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;UserIDIndex表结构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）镜像库&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问题】：并不是所有的查询都可以像用户ID一样，通过建立一个二级索引表来优化查询问题，而且建立二级索引表的代价比较大，我们需要一个更通用的方案解决这些查询问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;AllShards查询中的另一类查询就是时间戳的查询，尤其是大量的监控查询，大部分请求是可以接受一定的延迟，同时这些请求只是关注热点数据，比如尚未被使用的订单。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们新建了一套MySQL数据库，作为镜像库，将64个分库中的热点数据，集中存储到单一数据库中，相关的查询直接在镜像库中执行，避免分库的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;镜像库的数据同步，则是通过Canal+QMQ的方式来实现，并定时对比数据，业务应用上则是只读不写，严格保证双边数据一致性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）ES/MySQL对比&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问题】：镜像库存在多种实现方案，很多系统采用了ES作为查询引擎，我们该如何选择？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ES也是解决复杂查询场景的一种常见方案，我们曾经考虑采用ES来提升查询性能，并且进行了详细的评估和测试，但最终放弃了ES方案，主要考虑到以下几点原因：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;项目前期对所有的查询进行了充分简化和规整，目前所有的查询使用MySQL都可以很好的运行。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在已经正确建立索引和优化SQL语句的情况下，MySQL消耗的CPU可能远小于ES，尤其是订单ID、时间戳等数字类型的查询，MySQL消耗的CPU只是ES消耗的20%甚至更低。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ES并不擅长数字查询，而是更合适索引字段多变的场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;因此具体采用ES还是MySQL，或者是其他数据库来建立镜像数据库，最重要的一点还是要基于现有的业务场景和实际生产上的需求进行综合分析和验证后，找出一个最适合自己当前情况的方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.3.3 双写组件设计&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为技术栈的问题，目前我们的ORM采用的是公司的DAL组件。这个组件本身对公司的环境支持较好，而且该组件对于Sharding数据库也提供了良好的支持。因此我们在该项目上仍然使用DAL作为我们数据库的访问组件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是原生的DAL并不支持双写的功能，不支持读写的切换。针对项目的特性，我们需要尽可能的让开发少感知或者不感知底层数据库的双写和读写切换的操作。一切对于用户来说变得更简单、更透明。另一方面，我们打算优化组件本身的使用接口，让用户使用起来更傻瓜化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;组件的升级改造需要符合以下原则：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对业务代码侵入少&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;改造少，降低工作量&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用简单&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;符合直觉&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;这些改造的意义是非常重大的，它是我们能够高质量上线的关键。&lt;/span&gt;&lt;span&gt;于是我们对组件进行了一些封装和优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）业务层对象和数据库层对象进行隔离&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了统一维护方便我们将团队内所有的数据库对象（Pojo）都维护在了公共组件中。因此，在公共jar包中生成的对象通常是一个大而全的数据库实体。这种大而全的实体信息存在以下几个问题：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;单表查询时直接只用pojo返回了全量信息，影响查询性能&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;直接在代码中使用pojo带来了大量无用的字段，不符合按需使用的原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;很难统计应用对于数据库字段的依赖的问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据库字段和代码直接耦合，在代码编写期间不能对字段的命名等问题进行优化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;为了解决以上问题，我们中间新增了Model层，实现数据库pojo和业务代码的隔离。&lt;/span&gt;&lt;span&gt;例如我们的航班信息表（Flight）有200多个字段，&lt;/span&gt;&lt;span&gt;但是实际在代码中仅需要使用航班号和起飞时间。&lt;/span&gt;&lt;span&gt;我们可以在业务代码中定义一个新的FlightModel，如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Builder&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; Flight &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; DalDto {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; Long orderId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   [DalField=”flight”]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; flightNo;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;扩展组件将该对象映射到数据库的Pojo上，并且可以改变字段的命名甚至类型从而优化代码的可读性。在数据库查询时也进行了优化，仅仅查询必要字段，减少了开销。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）双写功能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们实现的双写方案是先写SQLServer再写MySQL，同时也实现了失败处理相关的策略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;双写模式包括：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个主要是在双写功能实现的初期，我们会使用队列+异步线程的方式将数据写入到MySQL。&lt;/span&gt;&lt;span&gt;采取这种方式的数据一致性是比较差的，之所以采用这种方式也是在初期我们对数据库处于探索阶段，避免MySQL数据库故障对当前系统产生影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当SQLServer写入成功后，在相同的线程中对MySQL进行写入。&lt;/span&gt;&lt;span&gt;这种模式相对来说数据一致性会比较好，但是在极端情况下仍然可能存在数据不一致的情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如下图所示。当任务1更新MySQL数据库之前，如果有别的任务抢先更新了相同的数据字段就有可能产&lt;/span&gt;&lt;span&gt;生脏写的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.1076642335766422&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1f8I46haPDFTLIyklaY4Ol1VzhtDicC7nW3XLegb6fZMTdA75VicRRAWIN6roTIdas9k7wdb8ZwNvOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;548&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们可以通过以下手段减少数据不一致的问题：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据表的读写尽可能收口&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;访问收口以后，通过对业务系统增加分布式锁等手段缓解此类问题的产生&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以增加数据比对的工具，主动发现数据的不一致并进行修复，&lt;/span&gt;&lt;span&gt;通&lt;/span&gt;&lt;span&gt;过一个异步的&lt;/span&gt;&lt;span&gt;扫描时间戳的工具来主动进行数据对比注和修复&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;写入&lt;/span&gt;&lt;span&gt;失败需要根据当前的模式触发自动补偿的策略，&lt;/span&gt;&lt;span&gt;这&lt;/span&gt;&lt;span&gt;个可以参考下文提到的数据双写异常的补&lt;/span&gt;&lt;span&gt;偿方案&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;注：&lt;/span&gt;&lt;span&gt;数据对比和补偿需要注意热点数据频繁更新和由于读取时间差导致的不一致的问题&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;刚才提到我们抽象了Model层的数据，在此基础上，我们的双写改造对用户来说非常的容易。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@DalEntity&lt;/span&gt;(primaryTypeName = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;com.ctrip.xxx.dal.sqlserver.entity.FlightPojo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          secondaryTypeName = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;com.ctrip.xxx.dal.mysql.entity.FlightPojo&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Builder&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Flight&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DalDto&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们仅需在Model对象上增加DalEntity注解实现数据库Pojo的双边映射。&lt;/span&gt;&lt;span&gt;除此之外，开发人员不需要对业务代码做其他调整，即可以通过配置实现双写、数据源切换等操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）双写异常处理模式&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;双写时，我们需要尽可能保证数据的一致性，对于MySQL数据写入异常时，我们提供了多种异常处理模式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;异步双写时，如果从库发生异常进行数据捕获，不抛出异常，仅输出告警信息&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同步双写时，如果从库发生异常进行数据捕获，不抛出异常，仅输出告警信息&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同步双写时，如果从库发生异常，抛出异常，中断处理流程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4）双读功能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;双写功能相对比较好理解。在灰度切换过程中，假如存在灰度控制的订单A以SQLServer为主，订单B以MySQL为主。但是我们查询到结果中同时包含了订单A和订单B的场景。这个时候我们希望的是，同时查询SQLServer和MySQL的数据源，并且从不同数据源中获取相应的订单数据，然后进行组合、排序、拼接。这些筛选逻辑由我们的组件来自动完成，从而实现了更加精细的灰度控制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;值得注意的是allShard查询的结果在部分情况下（例如分页查询）和单库查询的结果存在较大的差异，也需要组件的支持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5）数据写入异常的补偿方案&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们需要在不同阶段设计不同的补偿方案。初期MySQL的数据并不会对外提供服务，即使数据写入失败，也不能影响系统流程的正常运行，同时也要保证数据写入的准确性。因此，我们采用了SC的异常处理模式，并且增加了主动和被动的数据补偿。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1f8I46haPDFTLIyklaY4Ol1d614PL1EicdpZrueT9J3zz4diakaxwYhkewkPiaeEDBpUrqqWM9WNJaKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是我们的目标是使用MySQL的数据。&lt;/span&gt;&lt;span&gt;因此，当主数据源需要SQLServer切换到MySQL后，&lt;/span&gt;&lt;span&gt;虽然数据库写入的顺序仍然保持先写SQLServer再写MySQL，但是数据写入失败的处理模式需要发生变化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里先插播一个问题，就是为什么不能先写MySQL然后同步更新SQLServer。主要考虑到以下两个因素：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于MySQL是Sharding数据库，如果先插入该数据库，默认情况下会通过雪花算法生成主键。&lt;/span&gt;&lt;span&gt;写入完成后，我们将该主键同步给SQLServer。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是受到公司ORM框架和历史遗留的技术限制，SQLServer不会使用该数据，仍然采用自增的方式生成主键。导致数据严重不一致。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当我们以SQLServer作为主数据库时，如果数据不一致需要同步给MySQL（异步存在延时）；&lt;/span&gt;&lt;span&gt;当以MySQL作为主数据库时，如果发生数据不一致，需要进行反向同步。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一来，数据补偿程序复杂度很高。二来，如果我们如果在MySQL和SQLServer数据库谁作为主库之间切换频繁，数据同步程序就会变得非常迷茫，到底谁该同步给谁？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么如何提高在以MySQL为主的情况下，双边数据库的一致性呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，我们得关闭自动补偿功能，异常处理模式需要从SC切换到ST，遇到MySQL失败直接抛出数据库异常，然后基于系统的业务场景进行如下操作：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于订单处理系统，大部分的流程其实具备了自动补偿的能力，因此哪怕SQLServer更新成功，MySQL未成功。&lt;/span&gt;&lt;span&gt;下次补偿程序仍然读取MySQL，SQLServer会被二次更新，从而达到最终一致性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个时候，需要考虑的SQLServer的可重入性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为此时MySQL已经作为主要数据源，如果SQLServer存在不一致的场景可以提供手工的方式将数据补偿回SQLServer。&lt;/span&gt;&lt;span&gt;这边没有实现自动补偿，因为理论上只有在数据不一致的场景，并且发生了回切才会产生影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6) 组件设计的功能和策略分离&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们整体的功能都整合在名为Dal-Extension的系统组件里，主要分为功能实现和策略两大部分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;功能就是前面提到的例如双写，读切换，异常处理模式切换等。策略就是引擎，它实现了功能和功能间的联动。例如上文提到的，如果以SQLServer作为主数据源，那么系统自动采用SC的异常处理模式，并且主动调用数据补偿功能。如果是以MySQL作为主数据源，那么系统自动切换到ST的异常处理模式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相较于基于应用、表维度的切换策略。我们提供了维度更丰富的切换组合策略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过对以上维度的配置进行灵活调整，我们即可以实现单表，单机器的试验性切换控制，&lt;/span&gt;&lt;span&gt;也可以进行全链路的灰度切换，&lt;/span&gt;&lt;span&gt;确保一个订单在整个订单处理生命周期使用相同的数据源，从而避免因为数据双写或者同步导致的数据读取结果不一致的问题。&lt;/span&gt;&lt;span&gt;整体的数据切换操作由配置中心统一托管。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.3.4 分片故障处理&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原先的数据库如果发生了故障，会导致整个系统不可用。但是新的数据库扩展成64个分片后，其实相对来说故障概率提高了64倍。因此，我们需要避免部分分片故障导致整个系统失效的情况。另外增加故障转移和隔离功能，避免故障扩散，减少损失也是我们重点关注的功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（当然，如果发生分片故障，首选的故障恢复方案是数据库的主从切换）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）返回仅包含查询成功分片的部分数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问题】针对跨分片查询的场景，如果一个分片故障默认情况下会导致整个查询失败，那么如何提高查询成功率呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们调研了数据使用端，发现有很多场景，例如人工订单处理的环节，是可以接受部分数据的返回。也就是说有查询出尽可能多符合条件的订单，放入人工待处理列表中。我们增加了continueOnError参数来表示当前查询可以接受部分分片失效的场景。并且，系统返回了查询结果后，如果存在分片查询失败的场景，系统会提供了错误分片的信息。这样业务上不仅能够确保了很多业务环节处理不中断，同时针对它提供的错误分片信息可以让我们快速感知失效的分片，以便系统自动或者人工对这些分片进行干预。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）故障分片隔离&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问题】当故障分片出现大规模错误后，如果是因为响应时间长会导致大量线程block，从而拖累整个应用服务器。那么如何解决此类问题呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当分片发生故障时，有可能我们的数据库请求被hang住。我们allShards查询的底层实现是基于共享线程池。当部分分片的响应慢时，会拖累整个线程池。另外单表查询时，也可能会因为数据库响应时间的问题导致工作线程数量上涨的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们为此增加了分片屏蔽的参数。当我们启用分片临时屏蔽功能后，底层数据库查询时，发现该分片被屏蔽直接抛出异常，让应用程序能够得到快速响应。从而避免了网络和数据库访问时间消耗，提高了异常执行的效率，避免问题扩散到正常的分片的数据处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）故障订单转移&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问题】根据之前的介绍，用户订单号是根据UID的哈希值进行分配的。也就是说同一个用户分配的分片是固定的。如果该分片故障时，用户就无法提交订单。那么如何避免或者减少此类问题呢？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/kEeDgfCVf1f8I46haPDFTLIyklaY4Ol1l5RrzTBAtHfr36ibVuUsWibn0TC6kYpQ51sHgqNsAiaAiaE72dHkxNPlTg/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1138&quot; data-cropy1=&quot;45.28373702422145&quot; data-cropy2=&quot;614.2837370242214&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kEeDgfCVf1f8I46haPDFTLIyklaY4Ol12FB44PGMx3blbpicgicK3dj2aSzxeUkXdnDAJI5f4t60BQibgAtRibiceSA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如上图所示，用户ID_1和用户ID_2根据哈希算法，原先会在分片1上生成订单。但是如果发生了分片1故障时，我们的UID分片计算组件会将分片1标记为不可用，然后通过新的Hash算法计算出新的分片。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里需要注意的是，新hash算法的选择。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;方法1：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用同样的哈希算法，但是生成结果后取模的值为63（64-1），但是这个存在的问题是用户ID_1和用户ID_2计算出来的分片结果是一致的。假如新的分片号为2的话，如果发生分片1、分片2同时失效的情况下。那么仍然有1/64的订单出现问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;方法2：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;采用新的哈希算法，尽量使订单分布在出了分片1以外的其他分片上。那么这种方法，即使分片1、分片2同时失效。那么仅仅会影响到1/64 * 1/63的订单。受影响的订单量大幅降低。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、项目规划&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了以上提到的技术问题以外，我们再谈谈项目的管理和规划问题。首先，圈定合理的项目范围，划清项目边界是项目顺利实施的重要前提。这个项目的范围包括两个重要的属性：数据和团队。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;数据范围&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）划定数据表范围，先进行表结构优化的工作&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们需要在项目初期明确数据表的范围，针对一些可以下线的表或者字段，先完成合并和下线的工作，来缩小项目范围。避免表结构的变化和该项目耦合在一起，造成不必要的困扰。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）相关数据表中哪些数据需要被迁移&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们在处理这个问题上，有一些反复。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;方案1：仅迁移热数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为订单数据分为冷热数据，所以我们最开始考虑是不是只要迁移热数据就好了，冷数据仅保留查询功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是，这个方案有两个很大的问题：一是存在冷数据需要被还原到热数据的场景，增加了系统实现的复杂度。二是冷数据保留时限的问题，无法在短时间内下线这个数据库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;方案2：部分数据自然消亡的表和字段不进行迁移&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对有一些表由于业务或者系统改造的原因，可能后续数据不会更新了，或者在新的订单上这些字段已经废弃了。大家在设计新表的时候其实往往很不喜欢把这些已经废弃了的信息加到新设计的表中。但是，我们需要面临的问题是，旧数据如何兼容是一个非常现实的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，当我们开发到中间的过程中，还是将部分表和字段重新加了回来。来确保旧数据库尽快下线以及历史逻辑保持兼容。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;方案3：保留当前所有的表结构和信息&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们最后采用了这个方案，哪怕这个数据表或者字段未来不会做任何修改。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;团队范围&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;确定好数据范围后，我们需要根据这些数据，确定我们需要做的工作以及找到完成这些工作的相关团队并提前安排好资源。整个项目的资源分为核心成员和相关配合改造的团队。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;核心成员需要做到组织分工明确，并且需要经常一起头脑风暴，提出问题，解决问题，消除隐患。核心成员的另一个职责是帮助配合改造的团队，协调并且解决技术问题、资源问题等等。特别是涉及到的改动点较多、改造难度较大的团队，需要提前介入，在适当的时候提供更多的帮助。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1 规划&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;确定了项目的目标和范围后，我们为项目设计了6个里程碑，来帮助我们更好的完成这个项目。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.37734375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1f8I46haPDFTLIyklaY4Ol1FgnwtY3tzLXhIA1mtNw4YibE8GFic5oJuIRjzwNdL3cKXwECN1VQIia5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阶段1：通过API对读取进行收口&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个阶段虽然难度并不大，但是周期很长，沟通成本较高。在这个阶段重点在于任务的协调和跟进。DBA帮助我们研发了生产Trace查询的工具，能够准实时的知道数据表的访问情况，帮我们快速验收并且圈定改造范围。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们建立了任务的看板，为每一个任务设定了负责人以及预期解决的时间，定期对任务进行进行跟踪。项目的负责人也作为验收人，确认每个任务的完成情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过一段时间的努力，数据库的访问收口在极少数内部应用当中。实现了数据访问的收口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阶段2：开发双读/双写功能来实现平滑的数据切换&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个阶段需要将整个项目的技术点、难点都逐一的找到，并且给出解决方案。如何提高效率和质量也是这个阶段重点关注的话题，我们尽量把这些双写、切换的功能进行封装，让业务逻辑层尽可能少感知，或者不感知这些底层逻辑。降低代码开发量，不仅能提高效率，还能提升质量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总的来说，这个阶段需要提升开发效率，提高开发质量并且降低项目风险。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阶段3：验证数据一致性&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个是对阶段2的验证工作，需要注意的是在验证中减少噪音，提高验证的自动化率，能有效的提升项目的开发质量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阶段4：通过压测，故障模拟等手段验证系统性能。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在数据库故障时，提供可靠的系统的灾备和故障隔离能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阶段5：数据读取从SQLServer切换到MySQL&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个阶段可能不需要有太多的资源投入，但是风险却是最大的。这个阶段是对前面所有阶段成果的验收。做好数据监控、制定良好的切换方案、出现问题时能够回退是这个阶段顺利实施的重点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阶段6：停止SQLServer写入并且下线相关数据表&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相比起阶段5，阶段6没有后悔药。一旦停止了SQLServer的写入，就非常难进行回切的操作。所以得仔细做好白名单的验证，并且及时响应和解决相关问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 原则&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整个项目周期较长，我们需要制定好每个阶段的目标，每个任务的目标。由于数据库承载了非常核心的业务，因此整个阶段、所有任务以及技术方案其实围绕着一个原则展开，就是降低风险。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以我们在设计每个技术方案的时候，尽可能考虑这点。例如在数据源切换的开关虽然涉及较多的服务实例，但是我们通过一个集中控制的平台，来实现全链路的切换和灰度控制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、经验分享&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该项目整体的周期较长，每个阶段的挑战不尽相同。为了确保项目的上线质量，后续在读切换、写切换两个流程的灰度时间比较久。项目大约在2021年下半年顺利完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实现了以下主要目标和功能：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;系统分片数量为64，部署在16台物理机上。&lt;/span&gt;&lt;span&gt;后续根据业务需要机器的部署方式和分片数量可以进行灵活调整。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;数&lt;/span&gt;&lt;span&gt;据库服务器的CPU利用率从高峰期40%下降到目前的3%-5%之间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原先区分冷热数据，热数据大约仅能支持3个月的订单，按照现在硬件资源推算，系统可以处理至少5年以上的订单。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;原先近200个应用直接访问数据库，给我们的改造带来很大的不便。&lt;/span&gt;&lt;span&gt;目前仅有限的内部应用允许直接访问订单库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原先主从服务器的CPU为128核，内存256G；&lt;/span&gt;&lt;span&gt;现在服务器缩减为40核心的标准配置。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在项目过程中也积累了不少的经验，例如：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整个项目中大约建立了数百个子任务，每一个任务需要落实负责人以及上线时间，&lt;/span&gt;&lt;span&gt;并对上线结果进行验收。&lt;/span&gt;&lt;span&gt;才能确保整个项目的周期不至于拉的非常长，减少后续的项目返工和风险。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当一个大型的项目存在非常多的例外情况，这些特殊情况就得特殊处理，那么到最后总会有一些没有处理干净的尾巴。&lt;/span&gt;&lt;span&gt;这些问题都是项目的潜在隐患。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个和我们日常开发关系也非常密切，当一项任务有多个依赖方的时候，往往项目的进展会大幅超出我们的预期。&lt;/span&gt;&lt;span&gt;因此减少一些前置依赖，在不是非常确定的情况下。&lt;/span&gt;&lt;span&gt;我们得先做好最坏的打算。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;很多时候我们往往会高估自己的能力，例如在这次的改造中，我们会顺便优化一些表的结构。&lt;/span&gt;&lt;span&gt;于是造成了MySQL和SQLServer的数据表差异过大的问题。&lt;/span&gt;&lt;span&gt;那么这些差异其实为后面的开发造成了不小的困扰。&lt;/span&gt;&lt;span&gt;所有的方案，包括数据补偿、迁移、&lt;/span&gt;&lt;span&gt;数据源的切换等等场景都得为这些特殊差异的表单独考虑方案，单独实现逻辑。&lt;/span&gt;&lt;span&gt;一不留神或者没有考虑的很周全的情况下，往往会漏掉这部分的差异。&lt;/span&gt;&lt;span&gt;导致项目返工，甚至出现生产故障。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;项目的成功上线离不开每一个成员的努力。在实施过程中，遇到的问题比这篇文章列举的问题多得多，很多都是一些非常琐碎的事情。特别是项目初期，我们往往是解决了一个，冒出了更多的问题。但是每次遇到问题后，团队的成员都积极思考，集思广益，攻破了一个又一个的技术问题和业务问题。通过一年多时间的锻炼，团队成员的项目能力、技术能力进步显著；发现问题的角度更敏锐，思考的角度更全面；团队的凝聚力也得到了明显提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;【推荐阅读】&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kEeDgfCVf1f8I46haPDFTLIyklaY4Ol1TjnEu3cDfb4QhWHVE02d8lPn2Ys94adlwqpywCiaxzQUiathJfdPibqcQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt; “携程技术”公众号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;  分享，交流，成长&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3ff3f7e2242b5570c00c051f64879b9f</guid>
<title>go-zero 微服务实战系列（二、服务拆分）</title>
<link>https://toutiao.io/k/gipty7q</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;微服务概述&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微服务架构是一种架构风格，它将一个大的系统构建为多个微服务的集合，这些微服务是围绕业务功能构建的，服务关注单一的业务功能，这些服务具有以下特点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;高度可维护和可测试&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;松散的耦合&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可独立部署&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;围绕业务功能进行构建&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;由不同的小团队进行维护&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微服务架构能够快速、频繁、可靠地交付大型、复杂的应用程序，通过业务拆分实现服务组件化，使用组件进行组合从而快速开发系统。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.686456400742115&quot; data-type=&quot;png&quot; data-w=&quot;539&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg23pp0yCuvGp4jQJWasjZdLGIETGZicakldkKjA8iah9EtfvDOMq06IRnRn3mLHDLvS1UIXZGu6yJBA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;服务划分&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们首先进行微服务的划分，在实际的项目开发中，我们通常采用两种微服务划分策略，第一种方式是通过业务职能进行微服务边界的划分，第二种方式是通过DDD的界限上下文进行微服务边界的划分，我们这里采用大家比较容易理解的业务职能的方式进行微服务划分，再次贴上我们电商项目的思维导图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7599225556631172&quot; data-type=&quot;png&quot; data-w=&quot;2066&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg23pp0yCuvGp4jQJWasjZdLOF92bQUTUQmP3NmOzwY2RH24pVCqicfOicqrZcNBfvGyr9Udib5zFPg5g/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从以上思维导图可以看出整个电商系统功能还是比较多的，我们根据业务职能做如下微服务的划分：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;商品服务(product) - 商品的添加、信息查询、库存管理等功能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;购物车服务(cart) - 购物车的增删改查&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;订单服务(order) - 生成订单，订单管理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支付服务(pay) - 通过调用第三方支付实现支付功能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;账号服务(user) - 用户信息、等级、封禁、地址管理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;推荐服务(recommend) - 首页商品推荐&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;评论服务(reply) - 商品的评论功能、评论的回复功能&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;BFF层&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般对客户端我们都会采用HTTP接口的方式提供服务，那是不是以上划分的这些微服务都需要直接提供HTTP接口对外提供服务呢？这样当然可以，架构整体看起来也比较简单。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6597938144329897&quot; data-type=&quot;png&quot; data-w=&quot;873&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg23pp0yCuvGp4jQJWasjZdL100uHevrDu0BqicNa6l4AEFVoaEicwlq9fOFVDjMvucHgUafdVCHBLNA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但对于一个复杂的高并发的系统来说，我们需要处理各种异常的场景，比如某个页面需要依赖多个微服务提供的数据，为了避免串行请求导致的耗时过长，我们一般会并行的请求多个微服务，这个时候其中的某个服务请求异常的话我们可能需要做一些特殊的处理，比如提供一些降级的数据等。还有我们的页面展示的数据往往都是面向业务功能的，而不是单单某一个微服务的数据，这时候我们往往需要组装多个微服务的数据来满足需求，如果我们每个微服务都直接对外提供HTTP接口的话，那么这些复杂的数据组装和异常处理等工作只能由客户端来完成。众所周知客户端是不宜做复杂的业务逻辑的，客户端的重点应该更多是做交互体验上的优化，我们的整体架构需要做到前轻后重，即客户端逻辑尽量少而把比较重的业务处理逻辑下沉到服务端，而服务端又根据业务职能拆分成了不同的微服务，这些微服务只关注单一的业务，那么这些面向业务场景的复杂逻辑的处理应该放到哪里呢？我们的解决方案就是加一层，即BFF层，通过BFF对外提供HTTP接口，客户端只与BFF进行交互。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6443965517241379&quot; data-type=&quot;png&quot; data-w=&quot;928&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg23pp0yCuvGp4jQJWasjZdLH2vg6ibH7sT8Tw37h6h5ecEArm4V9wL08ocd2YcewTaANfk4IXP9n4w/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BFF层的引入解决了我们上面遇到的问题，但增加一层就会增加架构的复杂度，所以如果你的服务是一个单体应用的话，那么BFF是不必要的，引入它不会增加任何价值。对于我们这个项目来说，我们的应用程序依赖于微服务，同时我们需要面向业务功能提供HTTP接口和要保证接口的高可用，所以BFF对于我们这个项目来说是一个合适的选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以提供多个BFF吗？答案是当然可以。BFF的目的是为客户端提供一个集中的接口，例如移动端页面和浏览器页面的数据协议不同，这种情况下为了更好的表示数据，可以使用两个BFF，同时只供一个BFF如果该BFF异常就会导致所有的业务受影响，提供多个BFF也可以提高服务的可用性，降低业务异常的影响面。多个BFF架构图如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.585810162991371&quot; data-type=&quot;png&quot; data-w=&quot;1043&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg23pp0yCuvGp4jQJWasjZdLj0KYvRp6Wjoksnician1gLLt2w7CUsVib8ib2r8X2epyQhNhAibSib0T5ATg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的这个项目为了简化只会采用一个BFF服务。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;工程结构&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们采用集中管理的方式，把所有的服务放到一个大仓库中，仓库的目录结构如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6292906178489702&quot; data-type=&quot;png&quot; data-w=&quot;874&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg23pp0yCuvGp4jQJWasjZdLEh7QNz8XD3Llib6Cm4pJeSJVokJQPg0WmQlhBVk7eOfLJibCBhN9nkPQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;lebron为工程名，lebron下面有apps和pkg两个目录，其中apps存放的是我们所有的微服务，比如order为订单相关的微服务，pkg目录为所有服务共同依赖的包的存放路径，比如所有的服务都需要依赖鉴权就可以放到pkg目录下。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;app - BFF服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;cart - 购物车服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;order - 订单服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;pay - 支付服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;product - 商品服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;recommend - 推荐服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;reply - 评论服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;user - 账号服务&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在每个服务目录下我们又会分为多个服务，主要会有如下几类服务：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;api - 对外的BFF服务，接受来自客户端的请求，暴露HTTP接口&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;rpc - 对内的微服务，仅接受来自内部其他微服务或者BFF的请求，暴露gRPC接口&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;rmq - 负责进行流式任务处理，上游一般依赖消息队列，比如kafka等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;admin - 也是对内的服务，区别于rpc，更多的是面向运营侧的且数据权限较高，通过隔离可带来更好的代码级别的安全，直接提供HTTP接口&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;apps目录下每个服务的结构如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8729446935724963&quot; data-type=&quot;png&quot; data-w=&quot;669&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg23pp0yCuvGp4jQJWasjZdLbFlAfjpoaIiaY8TkR635eG4S7kWevIcMNHAq1GSUicCl1aLBhDXDhiaTw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大多服务都会拆分成rpc、rmq和admin来满足对内提供rpc接口和运营数据的需求，同时通过rmq来处理流式任务。比较特殊的是app下只有api服务，因为app是BFF所有只有api服务，后面可能会增加rmq服务，比如来流式处理用户每天首次登陆加经验之类的逻辑，我们后面可以随时扩展，暂时先只提供api服务。recommend只有rpc服务，因为推荐服务需要依赖AI团队或者大数据团队提供的数据，我们只需要请求对应的数据接口和做一些满足业务的处理即可，所以这里recommend只有rpc服务。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;代码初始化&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个工程的结构已经定义清楚了，下面我们做服务代码的初始化&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们使用goctl来进行项目的初始化，比如我们先初始化order，先进入order目录下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;cd&lt;/span&gt; lebron/apps/order&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行如下命令即可初始化order rpc代码&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; goctl rpc new rpc&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生成的代码结构如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6353677621283255&quot; data-type=&quot;png&quot; data-w=&quot;639&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg23pp0yCuvGp4jQJWasjZdLH0ZseWIoibiagOZF52MoXvDegSzAImHQ5QT5lpmyx7ZgRibkqPypslopg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行如下命令即可初始化order admin代码，注意order admin为api服务，直接对前端提供HTTP接口&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; goctl api new admin&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生成的代码结构如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5179407176287052&quot; data-type=&quot;png&quot; data-w=&quot;641&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg23pp0yCuvGp4jQJWasjZdLms7BPGhqmxOjicibjPEibbDmXvYKvO1Kh6D9AmbS2zFiaUmmXY51cowdFQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生成的服务代码我们可以直接运行，默认侦听在8888端口&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; go run admin.go&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;Starting server at 0.0.0.0:8888...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于rmq服务我们会使用go-zero提供的 kq 功能，这里先初始化main.go&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.08554913294797688&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg23pp0yCuvGp4jQJWasjZdLIWWkiabPxjqBoOPRxWvFDghVt4CW2mru0siaHlT1LEdbBANBibAClaibSg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里order服务的代码初始化已经完成，其他服务和order服务类似，这里就不再赘述了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;pkg下目前不需要初始化，当我们需要提供业务通用功能的时候我们再进行添加。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结束语&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇我们讲解了微服务的定义，微服务是围绕业务功能构建的，服务关注单一的业务，服务间采用轻量级的通讯机制，每个微服务都可以独立的部署和测试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们根据商城功能进行了微服务的拆分，主要拆分了购物车、订单、支付、商品、评论、推荐、账号等服务，然后我们又说明了为什么需要引入BFF服务，BFF本质上是一个用于做数据组装的服务，对外提供面向业务功能的或者说面向客户端UI的HTTP接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着我们定义了我们这个工程的目录结构，主要分为api、rpc、rmq和admin等服务，不同服务的职责不同，api对外提供HTTP接口，rpc对内提供RPC接口，rmq做流式数据的处理，admin面向运营后台提供HTTP接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后我们通过goctl对项目做了初始化，使用goctl可一键生成项目框架代码，大大提供了生产力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;希望本篇文章对你有所帮助，谢谢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;每周一、周四更新&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;代码仓库：https://github.com/zhoushuguang/lebron&lt;/em&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;参考&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://microservices.io/index.html&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://blog.bitsrc.io/bff-pattern-backend-for-frontend-an-introduction-e4fa965128bf&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;项目地址&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://github.com/zeromicro/go-zero&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎使用 &lt;code&gt;go-zero&lt;/code&gt; 并 &lt;strong&gt;star&lt;/strong&gt; 支持我们！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;微信交流群&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关注『&lt;strong&gt;微服务实践&lt;/strong&gt;』公众号并点击 &lt;strong&gt;交流群&lt;/strong&gt; 获取社区群二维码。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>38590463463d4f8938189c97a7ce7937</guid>
<title>腾讯信息流亿级相似视频识别技术架构优化实践</title>
<link>https://toutiao.io/k/0esxgh4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.66640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FE4VibF0SjfPh3zP5kHIFeicDo8WN6GbzTYtZ52sqib3oO1cycWfXA6OD94JUiafPniat9vUZL5uhVj7amVwOQafic8Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;作者 | 邹建勋，袁易之，常郅博&lt;/section&gt;&lt;section&gt;编辑 | 蔡芳芳&lt;/section&gt;&lt;section&gt;&lt;span&gt;1&lt;/span&gt;信息流业务背景介绍&lt;/section&gt;&lt;p&gt;信息流是一种可以滚动浏览，持续给用户提供内容的数据形式。信息流源于内容信息平台，兴起于社交媒体、新闻资讯类平台。信息流内容会出现在外观相似、一个接连一个显示的版块中。近年来，信息流内容市场发展迅速，通常内嵌在各类 App 中，由平台主动推送，用户的抵达率高。而通过对用户的行为偏好进行跟踪分析建立算法推荐模型，当内容足够丰富时，可以为用户主动推荐无限多感兴趣的内容。&lt;/p&gt;&lt;p&gt;随着各类视频 App 火爆，目前短视频已经成为信息流中最重要的流量窗口。短视频碎片化的内容突破了空间、时间、人群的限制，广受用户欢迎。同时， 其个性化、平民化的传播形式和语言表达，也契合了用户的情绪价值。&lt;/p&gt;&lt;p&gt;视频内容理解主要负责视频的理解分析和加工处理，是视频信息流生态中重要的组成部分，也是其核心财富。而相似视频识别是内容理解中非常重要的一环。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.659942363112392&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;694&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VO0ibcxgQyuiaO7lHsktvPX1ej3TZyRFuF25VoKoAk1ibDORjrobsTRCmcfw6Nrv0Rp8A6So0C8VCoNg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 1 短视频信息流形态&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;2&lt;/span&gt;为什么需要相似视频识别能力？&lt;/section&gt;&lt;p&gt;随着短视频业务不断发展，吸引了越来越多的优秀内容创作者前来发布，同时也出现了一些搬运号搬运内容的情况。这些内容或完全相同，或只是添加了水印、花边、裁剪、旋转、滤镜等干扰因素。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9642857142857143&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;756&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VO0ibcxgQyuiaO7lHsktvPX1eMY0YL5sDEXg0Pb9ricItZxmFmGmckPMwTrY8dKGR1iaaZPCPORbpznhw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 2 搬运内容的形态&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这些重复或相似的内容，可能会带来以下影响：&lt;/p&gt;&lt;p&gt;因此我们需要构建相似视频识别的能力，用来对重复的视频进行去重。此外，相似视频识别的能力在推荐打散、搬运号识别、低质识别、品牌采买等场景也能得到有效收益。&lt;/p&gt;&lt;p&gt;本文将围绕相似视频识别技术展开详细介绍，包括架构演进、工程优化、组件沉淀等部分，希望能为有相同诉求的读者带来一些启发。&lt;/p&gt;&lt;section&gt;&lt;span&gt;3&lt;/span&gt;亿级别相似视频识别的挑战&lt;/section&gt;&lt;p&gt;不同人群对于相似视频识别能力的需求各不相同。对用户来说，推荐池中一旦存在重复视频，就很容易被推荐系统基于画像反复推荐，因此从用户体验考虑，需要更重召回；对号主来说，一旦判断错误，视频被误打击，号主这条视频就不可能再被启用，因此从号主体验考虑，又需要重准确。&lt;/p&gt;&lt;p&gt;综上，我们的相似视频识别能力既要保证足够高的召回率，还必须足够准确，这就需要对多个环节进行全面优化。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;原有架构存在不足&lt;/section&gt;&lt;/section&gt;&lt;p&gt;早期的相似视频识别架构相对简单，整个去重的流程基本在一个服务中就完成了。比如很早就支持标题去重服务，整个流程包括：对标题提取特征向量，向量写入样本池；然后用此向量检索样本池，召回相似标题；再对召回的相似标题进行校准，是否真正重复；最后做出决策，是否进行去重拦截。&lt;/p&gt;&lt;p&gt;但后来我们发现仅标题去重无法满足产品发展需要，于是仿照标题去重又新增了视频的画面去重、封面图去重等等。系统架构变成了如下图 3 所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6253602305475504&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;694&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VO0ibcxgQyuiaO7lHsktvPX1eJsGNGr7JrCaibkUcuDV9kLHluDE5OJ0sRDOTbicMicICOcYTCT7KvtnwQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 3 早期去重架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这种架构存在多种问题：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. 单机存在性能上限&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;最初每一种召回服务的样本池都是自己在内存中管理。服务都使用大内存机器，进行单机部署，同时部署 1 台冷备机器。主机读写时，与备机进行强一致性数据同步。这样的架构很明显存在性能上限，无法利用分布式的优势。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. 各去重模块相互耦合，无法利用多种判断结果，重复开发工作量大&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;对于仅标题重复、画面不重复的视频，如果想要做到不拦截、只打标记，在原有架构下是无法完成的。因为标题去重服务在决策的时候没有画面信息和封面信息。&lt;/p&gt;&lt;p&gt;以一个非常简单的需求为例：调整去重优先级，对不同层级的账号调整对应的优先级。要满足这个需求，上面三个服务每一个都需要调整，相当于三倍开发量。碰到复杂的需求，必定会浪费大量开发人力，同时这种重复代码也不利于维护。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 不利于扩展&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如果以后需要新增召回策略，只能再次新增一个类似的服务，进一步加剧系统的维护难度。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;算法模型服务消耗大量成本&lt;/section&gt;&lt;/section&gt;&lt;p&gt;在我们的业务场景下，系统每天需要处理百万级的新增视频，我们需要对视频进行各个维度的特征提取、生成向量，用于召回和校准。而特征提取依赖的算法模型会消耗大量的机器资源，包括 CPU、GPU 和内存存储，存在极大的成本挑战。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;检索架构高可用问题&lt;/section&gt;&lt;/section&gt;&lt;p&gt;在我们的检索架构中会存储若干天历史视频向量，总体视频数量达千万到亿级，对应的抽帧图数量则达几十亿到百亿级。每新增一个视频，我们都需要在秒级的时间内，从几千万到亿级的视频库中，召回重复视频。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这些业务特点对于我们的相似视频识别架构、算法模型处理效率和检索架构高可用等层面，都提出了非常大的挑战。下面分别从这三个角度出发，介绍我们所做的一些优化。&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;4&lt;/span&gt;相似视频识别架构设计&lt;/section&gt;&lt;p&gt;我们重新设计了整个相似视频识别的架构，采用分层设计，把特征提取、召回、校准以及决策分离开。新架构如下图 4 所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1481481481481481&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VO0ibcxgQyuiaO7lHsktvPX1edic9pVIbguyfAo2x8W72bRyGtQgNFib4ZFHWTXj3sJibY0icwUHNQIGAUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;756&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 4 新的去重架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;整个新架构共分为 6 层，自顶向下分别是：&lt;/p&gt;&lt;p&gt;预处理层负责对视频介质进行预处理，抽取 1 秒 1 帧的平均帧，以及场景切换的关键帧，同时提取视频中的音频，以及智能提取封面图。&lt;/p&gt;&lt;p&gt;这里为什么存在 2 种抽帧呢？因为我们发现它们在去重的效果上各有优势，无法相互替代。例如：有些场景切换比较频繁的视频，如果抽取平均帧时，时间轴刚好错开了，就会导致抽取的帧之间关联性很小，影响召回。反之，对于场景切换少，甚至静止类的视频，显然只用关键帧是不适用的。&lt;/p&gt;&lt;p&gt;特征提取层主要负责对视频介质进行相应的特征提取。对于关键帧，提取为二值向量（值为 0/1）；平均帧提取为 Embedding 向量；音频提取为 mfcc 和 chromaprint 向量；标题提取为 bert 向量；封面图提取 sift 特征。特征向量存储至 MySQL。在第 3 层中建立 Faiss 索引时，会读取 MySQL 中的向量。&lt;/p&gt;&lt;p&gt;为何需要多种特征和多种召回路径呢？因为业务对重复视频的定义是：只有画面 + 音频 + 语义，这三者都重复才算是视频重复。因此，任何单一的一种特征向量，都不足以判断视频是否重复。此外，即使 2 个视频的画面和音频都不重复，但标题或者封面图重复，如果这 2 个视频出现在用户的同 1 刷的展示列表中，也会带来不好的体验。因此，对这种仅标题或封面图重复的，也会进行召回，在推荐后台进行打散处理。&lt;/p&gt;&lt;p&gt;召回层负责基于特征提取层中生成的各种向量，建立向量检索库，进行召回。我们使用的是内部基于 Faiss 之上开发的分布式向量检索引擎。对于每种向量，会建立一个相应的索引库，用于召回。&lt;/p&gt;&lt;p&gt;校准层会对召回的疑似重复的视频 pair 进行校准。因为在召回层，我们更注重高召回率，会适当降低对准确率的要求，准确率交给校准层来保证。例如：视频 A，召回了和 B、C、D 重复，则校准层会分别对 A&amp;amp;B、A&amp;amp;C、A&amp;amp;D 这 3 个 pair 进行校准。校准的内容包括标题、画面、音频等维度，进一步识别这些 pair 的标题、画面、音频看是否真正重复。&lt;/p&gt;&lt;p&gt;决策层主要用于处理业务逻辑，包含了大量业务规则。主要做的工作包括：识别到重复视频后，计算优先级，应该启用哪些、拦截掉哪些；同时，对视频 A，生成类似的关系链形式：B|C|D，给到推荐端，进行去重或者打散；也会记录标题、封面、画面、音频等哪些维度是重复的。&lt;/p&gt;&lt;p&gt;监控层用于监控整个系统的运行情况，统计每天去重识别的量级等多个指标数据。人工定期抽检去重掉的视频是否合理。同时，我们也建立了 benchmark 机制，用于准确评估整个系统的准召率。当算法模型或者工程服务有版本更新时，先在 benchmark 系统上进行评估，达标后再发布上线，减少系统风险。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;通过架构优化，我们对整个框架做了更合理的划分，每一层各司其职，同时每一层都可平行扩展，使得开发成本和维护成本都大大降低，也得以更好地支持业务的快速发展。&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;5&lt;/span&gt;算法模型服务性能优化&lt;/section&gt;&lt;p&gt;如前文所述，特征提取层和校准层主要负责提取视频的各个特征，会消耗大量的机器资源。本节重点介绍如何提高算法模型服务的处理效率，进而降低机器资源成本。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;PyTorch 模型服务性能提升 7 倍&lt;/section&gt;&lt;/section&gt;&lt;p&gt;相似视频识别系统其中一路召回的特征模型，输出的是二值向量结果（0/1）。该模块基于 PyTorch 框架开发，采用的 ResNet50 模型，整体过程是将视频的每张抽帧图转换为 N 维的 0/1 向量。最初上线部署至 Kubernetes pod 容器（8 核）上时，单帧向量化需 3.4 秒，但在同等配置的 8 核实体机上，只需 0.46 秒。&lt;/p&gt;&lt;p&gt;工程同学不断深挖，最终发现是环境配置导致的差异。PyTorch 中默认使用了 OpenMP 并行计算来加速模型。如果不配置 OMP_NUM_THREADS 环境变量，默认会使用 pod 容器所在母机 node 的所有 CPU 核。母机 node 是 64 核，则模型在 pod 容器中会开启 64 个线程，每个线程试图去抢占 CPU 核。然而 Kubernets 只分配给 pod 容器 8 核算力，64 个线程跑到一定时候会被内核强制调度让出 CPU，此时中间的一些 CPU Cache 数据会失效，程序会被迫进行上下文切换。而频繁的上下文切换非常影响性能，导致 64 核比 8 核运行的性能更差。通过设置正确的 OMP_NUM_THREADS，pod 容器计算性能可以恢复至实体机的 95%。&lt;/p&gt;&lt;p&gt;下图 5 是优化前后的耗时对比，最终性能提升了 7 倍。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7509578544061303&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;522&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VO0ibcxgQyuiaO7lHsktvPX1eFJsicnKocDI8V8l93YMKkqJKhjuJjiblnZiackibfqfmg2zWNsHuqZXWsA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 5 优化前后的性能对比&lt;/span&gt;&lt;/p&gt;&lt;p&gt;同理，使用 golang 开发的服务，如果没有正确配置 GOMAXPROCS 变量，在 Kubernetes 容器（整体核数&amp;gt;所需核数）上部署时也会遭遇类似问题。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;SKLearn 模型服务性能提升 9 倍&lt;/section&gt;&lt;/section&gt;&lt;p&gt;在相似视频识别系统中，对召回的疑似重复视频 pair，会提取其音频并转换为 chromaprint 向量，计算两个音频向量之间的海明距离，以此判定 pair 的音频是否重复。&lt;/p&gt;&lt;p&gt;该模型服务基于 sklearn 框架开发，使用了 RANSAC 回归模型。初期部署至 Kubernetes 容器时，一对 2 分钟左右的音频处理耗时需 4.7 秒左右，pod 基本满负载运行。工程同学通过分析 sklearn 模型代码，找出了计算复杂度较高的 top N 步骤，发现其中之一是海明距离计算。通过对其进行优化，使用 gmpy2 代替自己计算海明距离，耗时降低到 2.3 秒。然后，在同等配置实体机上进行测试，发现处理相同的音频 pair 只需 0.5 秒。在代码和调用栈分析协助下，发现原来 sklearn 也使用了 OpenMP 进行并行计算。和上一节情况类似，如果没有正确设置 OMP_NUM_THREADS 值，pod 使用的 CPU 核数会超过分配限制，被迫切换上下文，从而导致性能低下。&lt;/p&gt;&lt;p&gt;我们修改了适当的 OMP_NUM_THREADS 值，却发现在 sklearn 模型中并没有生效，翻阅 sklearn 文档也并没有找到相关的设置 API。我们推测是模型本身对于线程做了控制，就尝试将 sklearn 模型转换为 ONNX 模型，通过使用 ONNX 提供的 API 设置适当的 OMP_NUM_THREADS，最终把耗时降低到 0.5 秒。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3522388059701493&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;335&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VO0ibcxgQyuiaO7lHsktvPX1eq7n9xDs1XsOpgiaCQtoR7q0qjeVELbmdicpRN1YJV2Ly47QX0D4qvia4g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 6 优化前后的性能对比&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;ONNX Runtime 加速模型推理性能提升 8 倍&lt;/section&gt;&lt;/section&gt;&lt;p&gt;如前文所述，我们通过正确配置 Kubernetes pod 环境参数，大幅降低了模型处理耗时。然而因为每天要处理海量图片，该模型仍然消耗了非常可观的机器资源。于是，我们尝试对模型本身进行推理加速，提高整体图片处理的吞吐量。&lt;/p&gt;&lt;p&gt;我们调研了 ONNX Runtime、OpenVINO、TensorRT 等模型推理框架，发现这些框架通过对算法模型进行层间的融合，如卷积 +BatchNorm 是 CNN 中常见的结构，而 BatchNorm 本身是线性操作，在推理时可以融合至卷积操作中，使计算量可以显著降低。同时这些框架也为卷积、矩阵乘法等耗时运算提供了一套性能较好的实现，使得推理速度相比于原生 PyTorch 有非常大的提升。&lt;/p&gt;&lt;p&gt;我们选取了 ResNet50 作为基准模型测试了 ONNX Runtime 和 OpenVINO 上的推理性能，其中 ResNet50 模型原生 PyTorch 推理速度为 93ms，ONNX Runtime 推理速度为 38ms，OpenVINO 推理速度为 43ms，ONNX Runtime 有 2.45 倍的加速比。&lt;/p&gt;&lt;p&gt;同时在重构推理服务的过程中，工程同学发现服务代码中遗留了算法同学的部分训练代码，存在 PyTorch 训练时的 DataLoader 逻辑，使得处理每个请求时都需要创建 DataLoader 和背后的进程池，在请求结束时再全部销毁。通过将此类冗余逻辑重构，处理耗时降低至 35ms。相比加速前的耗时，性能提升了近 8 倍。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;综上，我们通过优化模型服务的性能，不仅有效提升了服务的处理速度，亦可以大大降低服务成本。&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;6&lt;/span&gt;相似内容检索架构优化&lt;/section&gt;&lt;p&gt;我们需要用新入库的内容去检索所有目前已经在库中的内容，根据某种度量方式，来判断内容是否相似。目前业界常见都是将视频整体或者视频帧转为 Embedding 向量进行检索。我们库中现在有几十亿的向量，如果暴力计算出最相近的 K 个向量（K-Nearest Neighbor，KNN）, 会导致服务计算量过大、耗时太长，在生产环境不可接受。所以我们一般都采用似近邻（Approximate Nearest Neighbor，ANN）算法，从而平衡线上召回效果以及检索性能。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;分布式向量检索&lt;/section&gt;&lt;/section&gt;&lt;p&gt;Facebook 开源了一个 ANN 向量相似度检索算法库 Faiss，但是 Faiss 只支持单机，在我们十亿量级下，单机根本无法满足需求。业界一般都会基于 Faiss 搭建一套自己的分布式特征向量检索系统。&lt;/p&gt;&lt;p&gt;我们的检索架构早期是一个单机服务，而视频量的快速增长，我们也逐步演进到集群化。目前我们使用的是公司基于 Faiss 库之上实现的一个高可用、高吞吐的通用分布式相似性搜索组件。&lt;/p&gt;&lt;p&gt;也正是因为这套组件是基于 Faiss 开发的，不仅继承了 Faiss 的众多优点，但同时也继承了 Faiss 的一些固有限制：&lt;/p&gt;&lt;p&gt;在我们的业务场景中，每天会有百万量级的新视频需要加入到索引库中。同时，每个新视频还需要实时检索，召回重复的视频。&lt;/p&gt;&lt;p&gt;前文提到过，索引库会保存历史 N 天的所有视频，量级在几千万到上亿级。如果我们只建单个 Faiss 索引，对这种量级的索引进行实时的混合读写操作性能很低，无法使用。&lt;/p&gt;&lt;p&gt;索引库最多保存历史 N 天的所有视频，意味着每天需要从库中淘汰掉第 N+1 天的视频。众所周知，直接从 Faiss 索引中删除大量向量是一种非常糟糕的方案。&lt;/p&gt;&lt;p&gt;Faiss 索引的模型需要定期训练更新，不然会影响检索的准确度。但更新时不能中断服务，否则会影响线上检索请求。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;分布式向量检索管理系统&lt;/section&gt;&lt;/section&gt;&lt;p&gt;为了解决上述几个问题，我们设计了一套分布式向量检索管理系统。整体架构如下图 7 所示，主要分为两层：统一管理向量读写接入的 Proxy 和索引管理系统 Manager。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8187830687830688&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;756&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VO0ibcxgQyuiaO7lHsktvPX1ezYdWoqHq2OzCsHRu1TWIpAkxBOMDThTAmpK74t3qZtWLq5ypoZ858A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 7 向量索引管理系统&lt;/span&gt;&lt;/p&gt;&lt;p&gt;我们采用大小两个索引读写分离的方式，来解决实时写入性能低的问题。其中大索引保存前 1 天至前 N 天的海量数据，只提供检索（读）功能，小索引保存当天的实时新增数据，提供实时写入和检索（读写）功能。因为小索引最多只保存 1 天的数据，量级相对小很多，足以支持实时的读写，性能满足要求。如下图 8 所示：通过 proxy 写入向量的时候，会实时写入小索引以及存储 db。而读的时候会并发读大索引以及小索引，然后 proxy 合并两者的检索结果。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7209302325581395&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;430&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VO0ibcxgQyuiaO7lHsktvPX1e538oa7vyuAkN6PicN8e2Qfs2fpI1j9hGphcxsly3tKvgkVmQTPwwRibw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 8 大小索引的读写分离&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Manager 从逻辑上把索引数据抽象为两种类型。一个是工作索引，称为 buffer0，提供线上的写入和检索服务，包含大索引（保存历史 N-1 天的海量数据）和小索引（保存当天数据）。另一个是备用索引，称为 buffer1。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6798941798941799&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VO0ibcxgQyuiaO7lHsktvPX1ekENia0aYcZIpC6gGcdEQSibVU7AuEmj2JCKwwXFVF6Z23OfjQM9ib2Aww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;756&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 9 双 buffer 索引&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Manager 每天会对 Faiss 索引进行重建，重建过程中，会淘汰掉 N+1 这天的旧数据，同时会重新训练 Faiss 模型。Manager 分别重建好新的大索引和小索引后，即完成了 buffer1 备用索引的创建。此时，会触发索引切换，buffer1 备用索引提升为工作索引。Proxy 会把线上请求引入至 buffer1 中。buffer1 变为新的工作索引，buffer0 变为备用索引，其中的索引数据会被清空释放。&lt;/p&gt;&lt;p&gt;以此循环，再到新的一天，Manager 会在 buffer0 中重建新的大索引和小索引，然后再把线上流量从 buffer1 切换至 buffer0。buffer0 变为新的工作索引，buffer1 变为备用索引，其中的索引数据会被清空释放。&lt;/p&gt;&lt;p&gt;依靠双 buffer 每天不断切换，就可以解决旧数据淘汰和模型定期训练的问题。具体的索引重建流程可参考图 7。&lt;/p&gt;&lt;p&gt;重建大索引时，Manager 从 MySQL 中导出前 1 天至前 N 天的向量数据，按照约定格式，落地为 N-1 个文件。每个文件即代表某一天的全量向量数据，而文件的一行即代表某个视频或者某个抽帧的 X 维向量。由此可知，导出 db 数据时，自然就把第 N+1 这天的旧数据淘汰掉了，最终重建好的大索引，就不再包括第 N+1 天的数据了。&lt;/p&gt;&lt;p&gt;向量原始数据准备完毕后，即可按照图中 step1 至 step6 的步骤，进行索引重建。包括采样数据，训练 Faiss 模型，然后 load 数据至 Faiss，进行索引重建。小索引的重建只需从 MySQL 中导出当天的向量数据，后面步骤同大索引。&lt;/p&gt;&lt;p&gt;如上所述，采用读写分离能够解决索引的实时写入性能问题。但随着业务快速发展，视频量级不断增长，又出现了新的挑战：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;每天新增视频越来越多，小索引即使只保存当天视频向量数据，量级也不再小了，在可预见的将来，混合读写的模式会遇到瓶颈。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;大索引重建耗时太长。因为大索引保存的是 N-1 天的海量数据，数量在几十亿级以上，每天重建需花费数小时以上。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;空闲资源浪费。双 buffer 机制，意味着需要预留 1 倍的资源给备用索引使用。而这些预留的资源只在每天重建的那段时间才会用到，大部分时间处于闲置状态。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;为了解决以上问题，我们引入了分 set 索引的机制。即，把大小索引数据拆分成多份（每一份称之为 set），建多个 set，每次只是将增量数据加入需要淘汰数据的那一个 set，那么只需把那一份对应的数据重建索引即可。假设大索引分成 m 个 set，那每天重建大索引时，只要将需要淘汰数据所在的那一个 set 重建即可，预留的资源只需 m 分之一。&lt;/p&gt;&lt;p&gt;这样既加快了重建的速度，也减少了空闲资源。&lt;/p&gt;&lt;p&gt;当然，proxy 也会对分 set 进行适配。向量写入时，hash 写入某一个小索引 set 中；检索时，会并发检索所有的大索引 set 和小索引 set，合并检索结果。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4312169312169312&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VO0ibcxgQyuiaO7lHsktvPX1e3ia4bUut32s7EIibIqP0hVCuncmHctRCoj94vWO8dLVlf79ibdFRibdhcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;756&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 10 分 set 后的索引重建&lt;/span&gt;&lt;/p&gt;&lt;p&gt;通过分布式向量检索以及分布式向量检索管理系统，大大节约了我们的存储成本，也使得我们的内容管理和检索变得更高效，平行扩展也更方便了。&lt;/p&gt;&lt;section&gt;&lt;span&gt;7&lt;/span&gt;小结&lt;/section&gt;&lt;p&gt;在业务规模快速增长的情况下，我们重新设计相似视频识别的架构与分层，各司其职，使得各层可以快速水平扩展。对算法模型服务的性能优化，在内容量快速增长的同时，更好的控制了业务成本。&lt;/p&gt;&lt;p&gt;通过对相似内容检索架构优化，有效的支撑了在海量内容的相似内容检索。至此，亿级别的相似视频识别问题基本得到解决。后续我们也会持续优化，提升整套框架的易用性，可配置化，同时也会支持更多的底层的向量检索库，以适配各种不同业务场景的需求。&lt;/p&gt;&lt;p&gt;最后感谢负责人 chale 的支持，这项工作也汇聚了 kiefer、jeven、scales、lusha、alvin、lizhi、yuxuan、edin、bowen、lusheng 等小伙伴的很多心血。&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;作者介绍&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;邹建勋，QQ 小世界内容理解高级算法工程师，曾负责腾讯看点内容理解能力建设以及 QQ 公众号的消息推送系统等，对高性能后台开发，和信息流业务中内容处理有一定的经验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;袁易之，QQ 小世界内容理解算法工程负责人，对信息流业务中内容处理的全链路有较多的经验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;常郅博，曾负责 QQ 公众号关系链系统，腾讯看点内容中心建设等，致力于算法工程效率提升，对内容处理与理解有独到见解。&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>