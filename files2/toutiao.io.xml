<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e6a4935b722c2937a477d08eb105e304</guid>
<title>DDD 之于逛逛内容营销中的应用</title>
<link>https://toutiao.io/k/qxynml6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages __bg_gif&quot; data-backh=&quot;96&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.16666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/33P2FdAnju95xNQaJWFlU3fWicicxBac5nuOMtveZ6lxCCnoZU1Xd6ITUVhoibJib5eyx6d2hePhGFNbQ4nT3Gicgpg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;636&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;88287&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;DDD指的是Domain-Driven Design 即领域驱动设计，DDD并不是关于技术的，而是关于讨论，聆听，理解和发现业务价值。&lt;/span&gt;&lt;span&gt;DDD让我们的关注点向软件系统所提供的业务价值方向思考。&lt;/span&gt;&lt;span&gt; DDD最大的好处是：&lt;/span&gt;&lt;span&gt;接触到需求第一步就是考虑领域模型，DDD让你首先考虑的是业务语言，而不是数据和行为。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我通过逛逛的内容营销项目来介绍一下DDD在逛逛内容营销中的应用。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-id=&quot;86516&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86516&quot;&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot; hm_fix=&quot;173:596&quot;&gt;&lt;span&gt;逛逛营销业务背景&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在做逛逛内容营销的这半年的里前端做了很多的营销活动，如下图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;232&quot; data-backw=&quot;450&quot; data-ratio=&quot;0.5155555555555555&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPfE3OEZvEIRWXpakg3vHeoELXvzoRZRMLelnmMO5RFsibSgZykc7nyYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;450&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们做了各种大大小小的营销活动后，觉得内容营销活动可以剥离出一套通用的解决方案，它们看起来总是大同小异，首先想到的就是搭建。把每一个业务模块开发成组件，然后开放给运营自由组合。然而这样有一个弊端就是：每个营销需求来了之后我们都需要评估哪些是已有组件，哪些需要新开发。而且对运营搭建的页面完全失去控制，对性能体验之类的也无从谈起--因为你完全不知道运营会搭建出哪些神奇的布局页面......&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-id=&quot;86516&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86516&quot;&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot; hm_fix=&quot;173:596&quot;&gt;&lt;span&gt;业务分析&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;从运营的角度看&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从业务方的角度思考营销活动，每次的营销都有一定的目的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;3.1481481481481484&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPLFag5vYibj0jKCGKtHzbvCTxmeHdO8SsDyia3qUBSraDiccbzibo164fFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;108&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;3.1481481481481484&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPiayKXMTq8rrfkbxPe1peibQadVOeNb4k0K9eCjFGUV7x1RYicJX77RPpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;108&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.0365853658536586&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPCNNdlyktsAgwfyzR91CDOhIMJ5aY0ekiaXnISV71XUwdesbGEEKMgUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;328&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;从运营的角度看不同角色的视角&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;不同角色对营销活动的视角是不一样的&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;内容浏览型，--为了给用户种草&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;任务打榜型，--吸引某些流量明星的粉丝&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;权益抽奖型。--采用权益刺激培养用户某些心智&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;轮播图+feed流&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;轮播图+任务列表&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;轮播图+权益+feed流&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个内容营销都可以理解成一种营销玩法，每个玩法都有一个核心组成，用户打开这个活动承载页，就要引导用户去完成这个核心玩法。所以浏览型的活动会突出海景房；任务型的会突出任务；权益类的会突出权益。诸如此类。其他的一些能力比如: banner位，关注卡，话题分类，拉起发布器这些都是非核心元素。他们的存在只是为了辅助装饰整个营销玩法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样我们就可以把玩法抽象成模版，每个模版对应一个玩法。那么如何划分玩法模版呢？这里就需要用到DDD的思想，领域驱动设计。&lt;br/&gt;&lt;br/&gt;从DDD经典架构的六边形架构得到一些启示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;img data-backh=&quot;380&quot; data-backw=&quot;450&quot; data-ratio=&quot;0.8444444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPNwbVXQrZGQGzgmoHLQYDgPH9kFph5FMYIwibaxdmYAHEM9FibQzuFXpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;450&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;六边形架构又称为端口-适配器，六边形架构将系统分为内部（内部六边形）和外部，内部代表了应用的业务逻辑，外部代表应用的驱动逻辑、基础设施或其他应用。&lt;br/&gt;&lt;br/&gt;那么我们的营销活动架构设计可以参照此思想：把一个营销活动划分为核心模块&amp;amp;装饰性模块，核心玩法对应了内部业务逻辑，装饰性模块对应了外部驱动逻辑，他们一起组成了一个营销活动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;158&quot; data-backw=&quot;450&quot; data-ratio=&quot;0.3511111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPjDAzTCCkJ19mdfpzECCf5mZtC9MoxnMqv5DgPkMjYzW7WFVZxvUPRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;450&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-id=&quot;86516&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86516&quot;&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot; hm_fix=&quot;173:596&quot;&gt;&lt;span&gt;建立领域模型&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;领域驱动设计，旨在建立合适的领域模型。玩法模版就是我们要定义的领域模型&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;核心模块=&amp;gt;玩法模版=&amp;gt;活动页面&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们把&lt;/span&gt;&lt;span&gt;&lt;strong&gt;海景房(轮播图)、feed流、任务列表、权益抽奖&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;定义为核心模块，把&lt;/span&gt;&lt;span&gt;&lt;strong&gt;banner卡片、关注卡片、话题卡片、异步发布等&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;定义为装饰模块。核心模块的排列组合形成核心玩法，核心玩法与N个装饰模块形成一个营销活动，区别在于：核心模块是不可重复的，装饰性模块可以随意重复。也可以理解为：装饰性模块为活动玩法本身的能力的表现，这些模块唤起了这个能力。&lt;br/&gt;&lt;br/&gt;整体系统架构图如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-backh=&quot;443&quot; data-backw=&quot;570&quot; data-ratio=&quot;0.7763975155279503&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPWahQtDX6T4UXTiaaZhiaCpiaVbJCt2fhHYvfNyicDYSEAV4kQy9SBG3MWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;644&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我们对这个架构有以下约束：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;核心模块运营同学无法删除or添加，只能隐藏&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;装饰性模块只能在核心模块的楼层上面or下面进行无限制的添加&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;新增一个玩法需要新开发一个页面。一个玩法对应一个唯一的页面地址(分治法)。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至此我们的营销活动整体链路如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;266&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4596069868995633&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPDJNWdFwVkjzibUAaCQ5HNgYxGgSBlIX2WRjoWXwZuuK1gD9yqEMTdibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1832&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;这套解决方案的核心在于：运营在开始一个营销活动的时候需要明确知道自己的活动目的是什么，然后选择对应的玩法模版(不同的玩法模版解决不同的运营诉求)，运营可以在核心模块的上下界限随意组合装饰模块，形成自己的活动页面。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;把每种玩法固化下来，也可以把相关的玩法数据沉淀下来，好的玩法用的人就越来越多。差的玩法业务数据不好，用的人就少了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-id=&quot;86516&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86516&quot;&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot; hm_fix=&quot;173:596&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;有的同学可能会觉得这套解决方案的缺点在于玩法的迭代需要依赖前端和产品去沟通确定，然后再进行组件的组合开发，不如把组件完全开放给运营自由组合方便，不过在我看来这并不是问题，作为业务前端我们本来就需要去深入理解每个业务需求，完全的自由预示着完全的失控，其次我举例说明一下这套模板化方案的优势：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;比如我需要在页面的两个元素唤起逛逛内容发布器，这两个模块长的不一样，那我可能需要引入两次发布器的能力，但是在这个模板化的解决方案中，发布器的能力已经集成，只需要把唤起发布器作为一个特殊逇素材坑位处理就行了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在于强控玩法之后我们可以对页面的性能做出很多优化措施既保证了视觉标准规范也保证页面的性能体验。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;其实运营有时候并不需要那么多的营销玩法页面：参考蚂蚁保险的营销搭建体系的经验&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;运营搭建了几百个营销页面真正有区别的只有&lt;/span&gt;&lt;span&gt;几十个页面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;✿ &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt;&lt;span&gt;拓展阅读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;amp;mid=2650427571&amp;amp;idx=1&amp;amp;sn=bfc3c1c6f189965a1a4c7f3918012405&amp;amp;chksm=839698abb4e111bd5e02344f27d86c928ccfe4d3da1649817b02924c07f681fc1a7ea818f442&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;103&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.17844202898550723&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPnbwch5MHwuJ5j3Nb8ibSFXVGVvxRhc8kKRDcnwsvfUIoZBmRCG3K5Ew/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1104&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;amp;mid=2650414919&amp;amp;idx=1&amp;amp;sn=0ad1df1a1b0e2488f7faa21008fdbdd0&amp;amp;chksm=8396d75fb4e15e49341b07022780dcb8dca66a0efb7f129d4de86a5ef5d8a890f6e0d2fd6432&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;94&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.16304347826086957&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPY9cZgJV13MZ20yKfSaffhK82gwg0PVxf5xckica3O5g2cic0tYv8JXGg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1104&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;作者&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;|&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;泉脉&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;编辑|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;橙子君&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;出品|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;阿里巴巴新零售淘系技术&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;331&quot; data-backw=&quot;578&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/33P2FdAnju9qJSYLusYZ20IeW1JcwLxOiboFmk6AE4WC0UFUU2MfXQS9E9ibVUdVZoMpic6wE97ylUl6r4olNpDow/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;720&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;412.318339100346&quot; data-ratio=&quot;0.5722222222222222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9qJSYLusYZ20IeW1JcwLxOmYpQKzz1XI7PlgmOA3cPARTxwZuKFw6osZsksibeH7HrS9oiaVooQSZQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;720&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;96&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.16666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju9I3TY9EP8M3D7oDuMfTuEh37yxribyjc3viaicCKBT9nJhqBcib36SSRaib3vIobcZbx93RYyf9QvgzOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3b51cb1ca8853a9f14542552be09e76f</guid>
<title>短视频 Go 研发框架实践</title>
<link>https://toutiao.io/k/gpas4sf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;span&gt;导读：&lt;/span&gt;&lt;span&gt;hulk是短视频研发部研发的基于G&lt;/span&gt;&lt;span&gt;DP2（Go Develop Platform ）的&lt;/span&gt;&lt;span&gt;go服务开发框架。它是⼀款⾯向业务的Web开发框架，提供了诸多开箱即⽤的组件和功能，可以⽤来快速开发Web服务。同时，依托于hulk框架并结合⼚内/业界优秀的开发实践，初步构建了⼀个符合业务应⽤场景的go⽣态体系。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;全文7330字，预计阅读时间 12分钟。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、产生背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;hulk框架是在“好看视频”服务端的go服务化架构升级背景下产生的。&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.1 为什么要做架构升级？当前架构面临哪些问题？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好看&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1.开发效率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：对于主代码库，所有服务端同学都会在这同一个代码空间开发，此外还有依赖的第三方团队也会修改，频繁的修改/合并降低了开发效率，同时也加大了代码的维护成本和难度；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2.上线效率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：多用户开发同一代码库的另一个弊端就是上线等待，由于同一个时刻只能有一个分支上线（分级上线），导致相连的上线需求要排队等待。这也导致我们的同学摸索出“搭车上线”的模式，虽然加快了上线效率，但也加大了上线的风险，没有从根本上解决问题；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3.运行效率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：PHP在开发效率和灵活度方面确实有一定优势，但当所支撑的业务达到几千万DAU及以上时，我们必须要考虑服务的运行效率和资源成本等问题。PHP语言在多线程/多协程的支持上，弱于Java、C/C++、Go等语言，基于物理机部署的类单体服务部署架构，在资源利用率和服务扩缩容等方面也很难满足需求；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;4.SRE效率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：在出现稳定性问题时，我们期望能够做到快速感知、快速定位、快速止损。目前基于sia的监控/报警，基于日志的问题定位方式距离理想目标还有一定的距离：一是同学要奔波于各个平台/系统获取问题线索，二是获取到的线索及信息维度很多时候也无法满足快速、精确定位问题的需求；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些问题需要通过“4化”，从总体业务架构、部署架构、基础设施等多方面去解决： &lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.35545454545454547&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cQePujZt5aGmtr8IIqywqUicoIFgcDibRXLadSy4N0tuiaJ5e5tDkHZckg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot;/&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2 为什么不直接基于GDP2 ？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5790909090909091&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9ceGsjtS78WItsGn0f9pg3Ox65DiaNfjdkXic0S5d3icNJE1XlcqclP5FMg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;好看的go服务化升级工作开展时，GDP2还未正式发布，这也是其中一个因素。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.3 hulk与gdp2能⼒对照&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;下⾯从三个⽅⾯与gdp2做⼀个简单的对照，初步了解hulk的整体能⼒及与gdp2的⼀些差异。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;1.3.1 web server能⼒&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;hulk⽬前主要服务于web应⽤，⾸先了解⼀下hulk的web server能⼒。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.40093023255813953&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;2150&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cW3icWl2nRfKOTWJFLrINnDEfnv7hicXbbmMWehn5SdR2dthky8oho2icA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;1.3.2 功能/组件&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;功能/组件的丰富度及⾃身能⼒，很⼤程度上影响了框架对业务服务的⽀持能⼒。备注：ral资源访问层&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7428256070640177&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1812&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9ciaib2czZicMOHfJw6BAcWO1SRUOsiaeFKjQbUpwJmCCHhsZ884me1XBQibA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;1.3.3 框架周边及基础设施&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;框架从来不是“单打独⽃的”，它需要有周边⼯具和基础设施来⽀持。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.40987654320987654&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1620&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9ckdzeUZ3tkx2lbkUEa3HLTw6nYkJBRe1nibzDlZ2A94mBia1qbXaA5WKA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;65&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;NOTE：&lt;/span&gt;&lt;/p&gt;&lt;span&gt;1. 好看在做go化时，也调研了开源社区⾥⽐较优秀的⼀些⼯具系统和⽅案并引⼊， hulk中默认添加了对这些基础设施的集成；&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;1.3.4 对照总结&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;本节主要站在hulk能力角度与GDP2做了一些方面的参考对照。以上对照，可以概括为4点：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.很多基础能⼒，hulk是复⽤gdp的，如：bns、net、codec等；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.⼀些通⽤/扩展组件，hulk按照业务需求场景，进⾏⼆次封装和增强，如：httpserver、ral、redis、mysql等；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.对于gdp⽬前没有⽀持的⼀些业务需求，进⾏开发集成，如：定时任务、配置中⼼、服务治理等；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4.参考业界开源实践，引入了一些新的基础设施：如prometheus+grafana集群、sentry集群、故障定位系统等；&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;GDP2由几十个模块共同构成，由于时间有限，可能个别功能点的对照有偏差。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;二、了解hulk&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.1 设计思路&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.46090909090909093&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cK4nXh1VLic1lUV76yzbiaYia2jIcia86ZvhGspLCiaIVBBicZOaic4wBhV1DA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;2.2 框架结构&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从功能上来看，hulk的整体能力可以划分为四层：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6809421841541756&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1401&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbO85j9r29IwiajnBRWCNnTDiaYb1eMA5f42aXwQmd2Rt011HmWtrDEVeZU492Mv8S6pwndtEPEicYLj2g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;2.2.1 基础组件&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;提供了绝大部分项目都应该需要的基础能力，也是其他上层功能组件很可能依赖的组件。hulk框架通过这些基础组件，使上层应用可以无感的与基础设施进行集成：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;2.2.2 通用组件&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;这一层的组件能力是通用的，提供了一些管理控制和切面能力：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;2.2.3 扩展组件&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;前两层功能对直接的业务处理逻辑参与较少，这一层的组件其能力多是为了处理某一类特定业务逻辑和场景，如redis/mysql/定时任务等：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1.redis组件&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：基于GDP2 redis模块的封装并作了功能增，提供了：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;a)&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;strong&gt;metrics hook&lt;/strong&gt;，对所有的redis请求进行监控(prometheus)打点（latency/p99/qps/错误码分布等）；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;b&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;) sentry hook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，支持将redis错误在记错误日志同时发送到sentry；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;c) 降级hook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，支持按集群/实例/百分比维度降级redis访问；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;d) 熔断hook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，支持按集群/实例/错误率/慢请求率对依赖的服务进行熔断设置；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2.mysql组件&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：mysql组件是基于GDP2 mysql和 gorm_adapter的封装，在已有能力之上，进行了以下功能扩展：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;a) 提供了metrics hook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，对所有的mysql请求进行监控(prometheus)打点（latency/p99/qps/错误码分布等）；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;b) 提供了sentry hook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，支持将mysql错误在记错误日志的同时发送到sentry；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3.分布式锁&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：hulk提供了基于redis的分布式锁实现。其中redis连接是基于GDP2的redis模块的改造，分布式锁功能是封装了开源项目redsync；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;4.定时任务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：支持两种定时任务模式；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;a) 带分布式锁的运行方式&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：对于多实例部署的定时任务，如果任务不是幂等的，则需要使用分布式锁对任务的调度运行进行控制；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;b) 不带分布式锁的运行方式&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：此模式下，如果部署了多实例，则所有实例上同一时刻的定时任务，会同时执行；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;2.2.4 http server&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;hulk（目前只提供了http server能力）提供了很多通用且高效的http middleware，并对外暴露了一些管理控制接口，在一些特殊情况下，可以通过这些管理接口，在运行时干预服务的运行：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;logger_middleware&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：用于记录http的请求、响应、耗时等信息，同时支持实时修改日志打印策略-如按idc/ip/百分比/uid/cuid等维度打印；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;timer_middleware&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：用于http请求的监控埋点，可以输出可用性、tp99、流量、平响、错误码等metrics，维度包括服务级/idc/instance等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;recover_middleware&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：用于捕获http 请求链路中的painc事件，并可自定义panic handler逻辑，如通过结合sentry和如流，可以实时感知并定位panic事件；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;flow_control_middleware&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：接口限流组件，可以通过配置中心或管理接口，对接口按idc/instance维度进行限流；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;timeout_middleware&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：通过该middleware或与配置中心结合使用，可以对接口按idc维度进行超时控制；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;其他middleware可以查看hulk文档&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;（如-internal_user_middleware、jager_opentracing_middleware、thirdparty_auth_middleware、b2logger_middleware等）&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;管理控制接口&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：如健康检查接口，服务治理-熔断、限流、降级接口，metrics接口，线上实例性能调试接口等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.3 框架生态&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;通过近一年的建设，我们初步构建了一个以hulk框架为中心的、符合好看业务场景的go生态体系，包括：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;标准目录规范&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：避免各个项目结构不统一，减少项目维护难度和工作量；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;代码生成器&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：基于hulk框架、标准目录规范、组件使用规范的代码生成器，目的是减少通用模块/组件使用不规范，解决通用流程编码、处理不一致的问题；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;hklib&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：好看的通用lib库，提供了一些的通用功能（也包含了很多PHP转go过程中的一些orp通用/基础的函数/功能），也提供了50+对中台服务的调用client，减少重复代码，提升研发效率，提升可维护性；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;基础设施&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：prometheus+thanos集群、sentry服务、apollo集群、pyroscope性能分析平台等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;iconf&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：好看自研配置中心，能力在对齐开源的Apollo之外，还增加/增强了一些功能，如-key维度的发布、更安全的配置获取、更简洁的操作页面、类分级发布等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;artemis&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：服务可视化与故障智能定位系统，可以在该系统中看到服务的部署架构、服务内部调用链、多维度细粒度的近实时监控和关键日志。在发生可用性故障时，一些故障问题可以秒级的定位到原因和具体代码；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.4 框架应用情况&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;目前短视频所有go服务都是基于hulk构建的，在资源、接口性能和可用性等方面都有一些阶段性产出和收益。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;hulk框架应用现状：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9ciaSWyABMibSic5Y31qDeianF186nEz3CD6VnXLS3tUtckUtFayWagqBCmQ/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1036&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;297.5363321799308&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2857142857142857&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1036&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5p8giadRibbO85j9r29IwiajnBRWCNnTDiaYGvy05xDgiaZjVJTajIVm84M7vcPPCrqiab2aicY4HbAxQRqP0ckVhpBrw/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;资源和性能收益：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6172506738544474&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;2226&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cM5fcvc8YCMUSJmAHsRMibDv9j28szNCNsQRKUsic9W7QaRamdePrQ5Ww/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;58&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;资源和性能收益，很大一部分要归属于PHP-&amp;gt;Go的技术栈切换；而框架为服务应用相应技术栈特性提供了便捷和高效的方式。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.4 hulk服务架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;下图描述了一个微服务（基于hulk）的架构全景图：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8809090909090909&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cDsqiaAbVdjBA77n0M4NFRI9m5aJicIIM8CYibIiay3hFJXgvPekgp2zKicQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;hulk组件初始化及与周边基础设施的集成，基本都可以通过环境变量/配置文件来完成。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、框架能力与应用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下面我们从日常开发遇到的一些痛点，来介绍框架的能力，并配以示例来说明这些能力是如何减少或解决痛点的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.1 如何提升代码质量？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;代码质量会直接或间接的产生以下影响：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码质量会直接影响代码维护成本；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码质量会影响程序出bug的概率；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码质量会影响程序运行效率；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;hulk框架从以下三方面分别来提升代码质量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;3.1.1 规范代码组织结构&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;降低项目维护成本，提升研发效率。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;3.1.2 编码规范和静态检查&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;提升代码可读性，减少低级代码bug&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;遵循百度Go编码规范+业务编码补充规范；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用GDP的代码检查工具：go_fmt、goc；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;3.1.3 配套的压测和性能分析平台&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;确定服务的压力边界，发现潜在的性能问题。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5036363636363637&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cNicJMA8uu8k0usMFDKRo8kSrOdK353BoiaUr54H5o5KQleL4wC1Qqo5A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5015625&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9c3ZIqK4JSMyXaeuHTdgp6EGkesxmeALcoS0w5HQVwpqnD2W1M826iaJA/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.2 如何提升开发迭代速度？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如何让开发者专注于业务逻辑与实现？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如何让开发者快速响应并完成产品需求？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;hulk框架为提升迭代速度，提供了以下支持。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;3.2.1 丰富的实用组件/功能&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;提升研发效率，避免试错，减少出错。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;559&quot; data-ratio=&quot;0.988984088127295&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cTlHXcC8GSle3hEJXsQiayXJr0Kr7gHNXcDNd4V21Ovo1VGnHUeibBnwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1634&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;857&quot; data-ratio=&quot;1.5161870503597121&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cGHaaI7eiaLibtOU6pk8yiboxNED5ODF0LwYydvSSFkAwYKvFMGGeCVRKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1112&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;3.2.2 配置化、低代码支持&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;减少代码的修改和上线，提升需求的响应和完成速度。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;262&quot; data-ratio=&quot;0.4861842105263158&quot; data-type=&quot;png&quot; data-w=&quot;3040&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9c6nGbZwV2EKnJx58HngLv0uRNE1k6SePxjSaVYLiaW6DyNeqfkgsf30g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;3.3 如何快速感知并定位问题？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;hulk为提升SRE效率，从以下几个方面提供支持。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;3.3.1 完善的事件追踪定位与通告能力&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;能够实时追踪开发者自定义的错误并通告&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;331&quot; data-ratio=&quot;0.635948210205636&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cjGKYdxmicpYFkjFYf4QDI2KOeqSOV59FiasDEZgo4S8HPo5cK8qzodJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2626&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;512&quot; data-ratio=&quot;0.9097744360902256&quot; data-type=&quot;png&quot; data-w=&quot;1862&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cSXJNnGcMdIvnoTTQ4m6ho1xkv2KPpjOaNvhicJpRibDNh1beEBiaJuN2g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;3.3.2 prometheus+sia监控支持&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;通过prometheus与noah的互补，支持多维度全方位监控，能够获得更多的服务稳定性相关信息&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;3.3.3 ftrace日志查询与分析功能&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;hulk默认支持ftrace平台的日志格式&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;240&quot; data-ratio=&quot;0.5192307692307693&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9c6oMpYl3Swof6mzRUygtEKkY9eWSaqQXGgDbNG6RugWs7ib4WOklqJxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3016&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;3.4 基于hulk的服务可视化和故障智能定位系统&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;artemis是我们基于hulk研发的一款服务可视化与故障智能定位追踪系统，它集服务部署架构可视化、近实时多维度监控、关键日志、服务调用链等多方面信息，可以快速、高效、精准的发现和定位稳定性问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;该系统目前已接入好看/全民/度咔等多个后端服务，极大加速了故障定位效率。在一些故障场景，可以秒级定位问题，给出问题的代码行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;3.4.1 服务部署架构&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;通过实例列表，可以获取服务的idc列表、instance列表和详情，并提供了便捷高效的调试入口和登录指令：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;324&quot; data-ratio=&quot;0.4572072072072072&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cH2nDBfWXoQ9MJYahibzp1pMroWibulqE6F1kL1OD6X2e1iaVtibdmSxjLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2664&quot;/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;3.4.2 近实时多维度监控&lt;/span&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;artemis提供的近实时监控，能够提供更多维度信息，这些维度是sia和prometheus无法提供的，如：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;409&quot; data-ratio=&quot;0.7002477291494632&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cur1bpiaje4avxCjPat3l2iavdV4yCqySpte5UThnzYYVLOkz3LvIibW3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2422&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;3.4.3 关键日志&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;由于与hulk的深度集成，在业务代码中打印warning级别以上的日志时，artemis能拿到更多的日志信息，如-各维度信息、调用栈、上下文等：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;310&quot; data-ratio=&quot;0.5514096185737977&quot; data-type=&quot;png&quot; data-w=&quot;2412&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9c00nYMNSzY2yOh4eVbP1Qn747CwqlITCCRbeMPZmfOWurAYlEVwTKSA/640?wx_fmt=png&quot;/&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;576&quot; data-ratio=&quot;0.9359116022099447&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cBspI26MqPnA0oRicZX2ZEaboguPIzZGibUIut8bqPgd8LoZqFlVXn4gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1810&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;3.4.4 服务调用链&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在hulk框架的协助下，artemis还可以获取到URI及URI所依赖的RAL调用信息，由此可以构建出请求调用链，并实时展示调用链上的相关metrics信息：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6636363636363637&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cyxFMP7hrq6gg7VvDK9n8pfCOBFBcafa7usung0DXy2YM85dO1WPIOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不同颜色的链路代表不同的可用性：红色-1个9及以下，黄色-2个9，蓝色-3个9，灰色-4个9。通过服务调用链，可以非常直观的看到服务里，哪个接口有问题，还可以看到哪些下游影响了这个接口的可用性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;3.4.5 使用案例&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;通过与报警系统的联动，可以在发生报警的第一时间，在artemis系统中找到受影响的服务及URI，确定是否是下游引起，错误是什么，哪一行代码报了错等，以下是一个artemis的实际应用示例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;324&quot; data-ratio=&quot;0.5645371577574967&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cibYd6ljHY5WpH7mnm498UJZmWrjgE9aFBFwty01V2iaLXaOC2Syf2znw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3068&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;四、总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;hulk虽然是⼀个新的go语⾔web框架，但不是重复造轮，⽽是站在⼚内和开源软件的基础上，结合业务实际开发、部 署、运⾏、运维环境，对这些开源框架和⼯具进⾏取⻓补短、⼆次开发，最终切合实际的业务使⽤场景。同时，围绕hulk初步构建起的go生态，为服务在开发、部署、运行、运维等各个阶段都提供了有力支持。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后，希望短视频研发部在go服务化架构升级/研发框架上的⼀些实践、⽅案和经验，能够给有相同架构升级需求、 在go项⽬实践中遇到问题的其他业务线同学⼀些帮助和参考。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;五、附录 （外网不可访问）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 框架及使⽤⽂档：&lt;/span&gt;&lt;span&gt;http://hulk-go.baidu-int.com/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. hulk底层是基于GDP2的，了解gdp也更有助于了解hulk：&lt;/span&gt;&lt;span&gt;http://gdp.baidu-int.com/&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;招聘信息&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;短视频研发部，负责好看视频、全民小视频以及多款创新APP的孵化研发工作。是公司级战略产品，承担百度系产品矩阵短视频内容供给任务，重点支持百度搜索和信息流视频化，肩负百度内容生态视频化转型使命。&lt;span&gt;仅用两年的时间就实现用户规模从零到亿级增长，日活数千万。拥有百亿级流量，亿级数据量，丰富新奇和全面的产品玩法，多类型的技术系统和领先的技术架构。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;欢迎加入&lt;span&gt;短视频研发部&lt;/span&gt;，社招，实习，校招都要哦&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;简历投递邮箱：geektalk@baidu.com （投递备注&lt;/span&gt;&lt;span&gt;【短视频】）&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;参考阅读：&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术原创及架构实践文章，欢迎通过公众号菜单「联系我们」进行投稿。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;高可用架构&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;改变互联网的构建方式&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAwMDU1MTE1OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/8XkvNnTiapONl06YmHad4csRU93kcbJ76JIWzEAmOSVooibFHHkzfWzzkc7dpU4H06Wp9F6Z687vIghdawxvl47A/0?wx_fmt=png&quot; data-nickname=&quot;高可用架构&quot; data-alias=&quot;ArchNotes&quot; data-signature=&quot;高可用架构公众号。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ef943d93925e08fe2fb051a99d0c7a18</guid>
<title>VLDB 2021 论文推荐（一）</title>
<link>https://toutiao.io/k/j95sviy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-sourcepos=&quot;3:1-3:264&quot;&gt;&lt;strong data-darkmode-color-16275682949322=&quot;rgb(255, 23, 0)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)&quot; data-style=&quot;font-family: &amp;quot;Source Sans Pro&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 16px; text-align: start; white-space: normal; caret-color: rgb(52, 73, 94); color: rgb(233, 0, 0);&quot; class=&quot;js_darkmode__1&quot;&gt;&lt;em data-darkmode-color-16275682949322=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)&quot; data-style=&quot;color: rgb(52, 73, 94); text-size-adjust: auto;&quot; class=&quot;js_darkmode__2&quot;&gt;&lt;em data-darkmode-color-16136621561195=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-style=&quot;max-width: 100%; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); text-size-adjust: auto; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__3&quot; data-darkmode-color-16165880998151=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16275682949322=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;strong data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; font-size: medium; letter-spacing: 0.544px; color: rgb(0, 0, 0); font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__4&quot; data-darkmode-color-16094149065186=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(0, 0, 0)&quot; data-darkmode-color-16107273892940=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-color-16121907968588=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16275682949322=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16107273892940=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-color-16121907968588=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16275682949322=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(217, 33, 66)&quot; data-darkmode-color-16094149065186=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(217, 33, 66)&quot; data-darkmode-color-16107273892940=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-color-16121907968588=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16275682949322=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;▲ &lt;/span&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(2, 30, 170)&quot; data-style=&quot;max-width: 100%; color: rgb(2, 30, 170); text-align: center; font-size: 11px; letter-spacing: 1px; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__5&quot; data-darkmode-color-16094149065186=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(2, 30, 170)&quot; data-darkmode-color-16107273892940=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-color-16121907968588=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16275682949322=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;点击上方&quot;多颗糖&quot;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;em data-darkmode-color-16136621561195=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-style=&quot;max-width: 100%; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); text-size-adjust: auto; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__6&quot; data-darkmode-color-16165880998151=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16275682949322=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;strong data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; font-size: medium; letter-spacing: 0.544px; color: rgb(0, 0, 0); font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__7&quot; data-darkmode-color-16094149065186=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(0, 0, 0)&quot; data-darkmode-color-16107273892940=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-color-16121907968588=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16275682949322=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16107273892940=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-color-16121907968588=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; color: rgb(2, 30, 170); text-align: center; font-size: 11px; letter-spacing: 1px; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__8&quot; data-darkmode-color-16275682949322=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;关注公众号&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;3:1-3:179&quot;&gt;VLDB 2021 本月刚举办完毕，由于千夜姐姐说过“&lt;strong&gt;指望看完 DDIA 就做 infra? 没戏。&lt;/strong&gt;”于是赶紧膜一下本月刚结束的 VLDB 2021 有哪些新东西。&lt;/p&gt;&lt;blockquote data-sourcepos=&quot;5:1-5:228&quot;&gt;&lt;p data-sourcepos=&quot;5:3-5:228&quot;&gt;VLDB (Very Large Data Base) 是数据库研究人员、厂商、应用开发者以及用户广泛参与的年度国际会议，它与 SIGMOD、ICDE 被公认为数据管理与数据库领域的三大国际顶尖学术会议。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-sourcepos=&quot;9:1-9:29&quot;&gt;Storage and in-memory DBMS&lt;/h2&gt;&lt;h4 data-sourcepos=&quot;11:1-11:63&quot;&gt;Constructing and Analyzing the LSM Compaction Design Space&lt;/h4&gt;&lt;p data-sourcepos=&quot;13:1-13:429&quot;&gt;LSM-tree 作为如今最广泛讨论的存储引擎，每年都有一些新的研究出现。为了提升读性能，LSM-tree 会定期压实(Compaction)数据，compaction 从根本上影响了 LSM-tree 引擎在写放大、写吞吐量、查找、空间放大和删除方面的性能，因此，选择适当的 compaction 策略至关重要。本文提出一种评估和设计 compaction 策略的关键性能指标，包括：&lt;/p&gt;&lt;ol data-sourcepos=&quot;14:1-18:0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;压实触发器(the compaction trigger);&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据布局（the data layout）;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;压实粒度(the compaction granularity);&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据移动策略(the data movement policy)；&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;http://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1icJ843V7Xf1Qnwt4ODsLI1tvfzzDdibCRC67jKyibJhbPcIiamyR9WZGDw/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;697&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;274.9411764705883&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3931133428981349&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1Bic9T9ymUfKd7v5YbgXjbW6MeMjSGLFexV0uOOzY1Y8yPXokKiaOVouA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;697&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;22:1-22:123&quot;&gt;如图所示，这张图展示了各种不同的压实策略，这些方法又可以组合出已有的和全新的策略。&lt;/p&gt;&lt;p data-sourcepos=&quot;24:1-24:134&quot;&gt;此外，本文还分析了 10 种 compaction 策略，并给出了结果和收获，这些信息提供了 LSM-tree 的设计指导。&lt;/p&gt;&lt;p data-sourcepos=&quot;26:1-26:238&quot;&gt;其实我很喜欢这种偏总结型的文章，是非常好的学习材料。笔者打算写一个深入讨论 LSM-tree 的专栏，本文提供了很好的 compaction 策略相关的参考。做存储引擎设计的同学值得一读。&lt;/p&gt;&lt;h4 data-sourcepos=&quot;28:1-28:83&quot;&gt;Taurus: Lightweight Parallel Logging for In-Memory Database Management Systems&lt;/h4&gt;&lt;p data-sourcepos=&quot;30:1-30:418&quot;&gt;DBMS 通过写入一个持久性的 WAL 来实现故障恢复，这样的单一串行日志可能成为 in-memory 数据库的性能瓶颈。Taurus 充分利用现代多核硬件的并行能力，提供一个并行写入多日志流方案，主要使用向量化的日志序列号(log sequence number Vector, LSN Vector 或 LV)，同时确保能够追溯向量之间的依赖关系，以在恢复时被正确执行。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.43781094527363185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1iaoS5U5sMHWPU8grzPxD9ibQ541OYJHsY8dzzbicbP7OzsTgHYPS9bLNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;603&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;34:1-34:189&quot;&gt;本文作者 Yu Xia 是姚班大佬，现在 MIT 攻读博士；作者中还有著名的数据库网红 Andrew Pavlo。如果你在寻找一种更高效的并行 WAL，该文值得一读。&lt;/p&gt;&lt;h4 data-sourcepos=&quot;37:1-37:61&quot;&gt;CoroBase: Coroutine-Oriented Main-Memory Database Engine&lt;/h4&gt;&lt;p data-sourcepos=&quot;39:1-39:337&quot;&gt;基于内存的数据库另一个可能开销是，一些指针类的数据结构导致多核 CPU 缓存未命中，而通过 C++20 的协程切换能够改善缓存未命中的情况。CoroBase 非常有意思的地方就是用上了最新的 C++20 的协程，将一次事务处理建模为一个 coroutine，保留了 CPU 的预取。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5739837398373984&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1Erg71o0brSSlw8yhfNuT8sRPwFuibmO1kzaXamNExIJgkxBaEP3vicFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;615&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;43:1-44:114&quot;&gt;通过论文来看，通过更好的协程切换，应该比 CPU 缓存未命中开销更低(the&lt;br/&gt;switching overhead can be cheaper than a last-level cache miss)，如果我理解错了，希望大家纠正我。&lt;/p&gt;&lt;p data-sourcepos=&quot;46:1-46:146&quot;&gt;CoroBase 源码开源：https://github.com/sfu-dis/corobase， HackerNews 也有过相关讨论：https://news.ycombinator.com/item?id=25281377。&lt;/p&gt;&lt;p data-sourcepos=&quot;48:1-48:82&quot;&gt;论文最有意思的就是这么快就用上了 C++20协程，感兴趣的同学我之前也写过《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwODA2NjIxOA==&amp;amp;mid=2247484221&amp;amp;idx=1&amp;amp;sn=4c9bebb3236a4dc83f3d5b3dbaf54264&amp;amp;chksm=970980f8a07e09ee8cd5458d88c5eed0178d0c389d696c680f4599388c5fe98a780f2bdbe736&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;如何编写 C++20 协程&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;如何编写 C++20 协程&lt;/a&gt;》。&lt;/p&gt;&lt;h4 data-sourcepos=&quot;51:1-51:82&quot;&gt;Toward a Better Understanding and Evaluation of Tree Structures on Flash SSDs&lt;/h4&gt;&lt;p data-sourcepos=&quot;53:1-53:580&quot;&gt;本文也是一篇总结性加避坑的文章，讨论了如何更好的理解和评估闪存 SSD 上的树结构。文章提出，由于树结构的内部行为对性能的影响，以及 SSD 底层逻辑的特殊性，SSD 上对数结构进行基准测试是一个复杂的过程，容易出现不准确的评估。本文通过 RocksDB 和 WiredTiger 确定了 7 个 SSD 基准测试陷阱，该陷阱会导致对关键性能指标的错误测量，导致生产环境中无法实现最优部署。当然，本文还提供了避坑指南来获得更可靠的性能测量结果。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;http://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1ibU5eaMhblLlsGF5eanQRmq6yZQUnibz9o7nbeze1MnAuPgtw7nxepgQ/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;652&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;256.0622837370242&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3911042944785276&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1u0WibApBnQxafqd9jQK2NJCvvIfTYeqfLWr2KnYmXb2KG8Q5US5JXnA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;652&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;58:1-58:80&quot;&gt;文章比较易读也挺有意思，推荐研究 SSD 存储的小伙伴阅读。&lt;/p&gt;&lt;h2 data-sourcepos=&quot;60:1-60:22&quot;&gt;Distributed Systems&lt;/h2&gt;&lt;p data-sourcepos=&quot;62:1-62:55&quot;&gt;&lt;strong&gt;又到了我们最喜欢的分布式系统环节。&lt;/strong&gt;&lt;/p&gt;&lt;h4 data-sourcepos=&quot;64:1-64:85&quot;&gt;Seagull: An Infrastructure for Load Prediction and Optimized Resource Allocation&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6857142857142857&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1qxfSa0eoyPXta2ibQibL6WWPTlfricJmFUCjxJqETicWL4iaOI16BbEfhKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;840&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;69:1-69:451&quot;&gt;来自 Microsoft Azure 团队，Seagull 是一个采用 Data Science 来预测用户负载、优化资源分配、控制成本的基础架构。Seagull 会收集每台服务器的数据，并通过机器学习来预测每天服务器未来24小时的用户负载。Azure 在生产环境中的 PostgreSQL 和 MySQL 服务器中部署了 Seagull，并且在低负荷时间安排进行备份，最大限度减少了负载干扰，提升了用户体验。&lt;/p&gt;&lt;p data-sourcepos=&quot;73:1-73:286&quot;&gt;&lt;/p&gt;&lt;h4 data-sourcepos=&quot;75:1-75:88&quot;&gt;MorphoSys: Automatic Physical Design Metamorphosis for Distributed Database Systems&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3895004233700254&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1uofMa79cibaJUOiarsc0PkAITPgJ6HJNSQfV8ALhsGMFAkpyGxGgj0tg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1181&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;79:1-79:558&quot;&gt;分布式数据库通常通过分片和复制来存储数据，困难在于如何决定哪些数据进行分片和复制，每个选择都是 trade-off，而一个糟糕的选择会大大降低性能，目前很多数据分布通常是静态的，不能适应 workload 的变化。MorphoSys 是一个可以根据工作负载动态选择和改变其数据分布的分布式数据库系统，MorphoSys 通过 learned cost model 来对所有的数据分区、复制和放置进行综合决策，并通过一个新的并发控制提供更高效的事务执行。&lt;/p&gt;&lt;p data-sourcepos=&quot;81:1-81:138&quot;&gt;这里说的动态适应会更智能一些，例如下图所示的范围查询，会自动调整数据分布而避免查询多个分片。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.33203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1bsjzQ2xr1Za7wxPRtP7U9JAxzjq7l46RIf5wGszMIXwHN5BpHuI2ZQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h4 data-sourcepos=&quot;87:1-87:79&quot;&gt;Trident: Task Scheduling over Tiered Storage Systems in Big Data Platforms&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5906344410876133&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me13iaibSfQJCfSQWFnf2pLvdGWHT8RiaP2RFuoob4kHCDX9y3D22ca920Pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;662&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;92:1-92:381&quot;&gt;分层存储系统(tiered storage systems，例如内存+SSD+HDD)在数据密集型计算集群中已普及，然而大数据平台(如 Hadoop 和 Spark)的任务调度器只根据数据位置信息分配任务，而完全忽略了数据存储在不同的存储介质上。Trident 是一种根据局部性原理(locality)和存储层信息作出最佳任务分配的调度系统。&lt;/p&gt;&lt;h4 data-sourcepos=&quot;94:1-94:69&quot;&gt;Crystal: A Unified Cache Storage System for Analytical Databases&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.19230769230769232&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1DYY8cc6ToF7JykpzDYN9eBvdDzeYOPbCpl4hAacn3CSG3rPspRibtBA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1144&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;98:1-98:388&quot;&gt;分析型数据库采用存算分离架构，因此在计算节点上缓存数据是很重要的，本文提供了一种新的智能缓存存储架构 Crystal，与计算节点共处一地。Crystal 需要处理 DBMS 具有下推谓词的 data sources，因此 Crystal 包含了查询处理和优化组件。Crystal 能够大大改善查询延迟，同时节省了远程存储的带宽。&lt;/p&gt;&lt;h4 data-sourcepos=&quot;71:1-71:49&quot;&gt;ByShard: Sharding in a Byzantine Environment&lt;/h4&gt;&lt;p data-sourcepos=&quot;73:1-73:286&quot;&gt;ByShard 是一个研究分片拜占庭容错系统的统一框架，能够处理多分片事务，实现了两阶段提交(原子性)和两阶段锁(隔离性)。有趣的是 ByShard 也是 C++20 实现的，提供了源代码和 talk 讲解：https://www.jhellings.nl/projects/byshard/&lt;/p&gt;&lt;h2 data-sourcepos=&quot;100:1-100:38&quot;&gt;持久内存（Persistent Memory）&lt;/h2&gt;&lt;p data-sourcepos=&quot;102:1-102:146&quot;&gt;持久内存(Persistent Memory, PMEM 或 PM)这个方向越来越受欢迎，本次 VLDB 2021 在 PM 方向两个 session 一共有 8 篇论文。&lt;/p&gt;&lt;h4 data-sourcepos=&quot;104:1-104:87&quot;&gt;Revisiting the Design of LSM-tree Based OLTP Storage Engine with Persistent Memory&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5429447852760736&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1QsgewGKJ9tiaIJ1JP5yjrp73WfP3C9U1oU927QnG1Cmt61VLbAl90ZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;652&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;109:1-109:121&quot;&gt;本文由北航和阿里合作发表，重新审视了基于 LSM-tree 的 OLTP 存储引擎，提出了 4 个新东西：&lt;/p&gt;&lt;ol data-sourcepos=&quot;110:1-114:0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Halloc：一个为 LSM-tree 专门设计的轻量级 PM allocator；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个高性能的 Semi-persistent Memtable；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Reorder Ring：一个实现 OLTP 无日志(log-free)事务处理的并发提交算法；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Global index：一个全局有序的内存 L0，支持非阻塞的内存压实(compaction)；&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-sourcepos=&quot;115:1-115:240&quot;&gt;Reorder Ring 和 Semi-persistent Memtable 实现了无同步日志开销的快速写入和接近即时的恢复时间。此外，Semi-persistent Memtable 和内存压实的 Global index 大大减少了读写放大以及后台压实开销。&lt;/p&gt;&lt;p data-sourcepos=&quot;119:1-119:180&quot;&gt;&lt;/p&gt;&lt;h4 data-sourcepos=&quot;121:1-121:77&quot;&gt;Zen: a High-Throughput Log-Free OLTP Engine for Non-Volatile Main Memory&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4629360465116279&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1F3qq1TXCfad3Y0I0ico7nSGtaPFrNJpKgW3VjJM2LqbRTB8puE5uaVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1376&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;126:1-126:100&quot;&gt;中科大计算所陈世敏老师团队提出的基于 PM 的 OLTP 存储引擎，主要特点有：&lt;/p&gt;&lt;ol data-sourcepos=&quot;127:1-131:0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Tuple Metadata (事务相关元数据)存在 PM 中，Index 存到 DRAM 中；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Met-Cache：将 tuple 缓存到 DRAM 中，Zen 可以完全在 DRAM 中进行并发控制；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;NVM Space Management：两层 NVM 管理器 NVM page manager 和 NVM-tuple manager；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;不需要日志；&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-sourcepos=&quot;132:1-132:125&quot;&gt;此外，VLDB 2021 陈世敏老师的团队还有一篇 &quot;Updatable Learned Index with Precise Positions&quot;，很好很强大！&lt;/p&gt;&lt;h4 data-sourcepos=&quot;134:1-134:57&quot;&gt;Viper: An Efficient Hybrid PMem-DRAM Key-Value Store&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5239398084815321&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1e0OiaEibTdNykcevVGUIG5HlAfYdROicf2bUZ11WnkEAN5gLyS4tDjusg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;731&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;139:1-139:346&quot;&gt;由于基于块(block-based)访问在 PMem 和磁盘中不同，简单地使用 PMem 替换现有存储并不能获得良好的性能。Viper 是一个混合 PMem-DRAM 的 KV 存储系统，其中 key-value 存储在 PMem 中的 VPage 中，索引存放在 DRAM 中，能够利用 DRAM 的随机写入速度和 PMem 的高效顺序写入性能。&lt;/p&gt;&lt;p data-sourcepos=&quot;142:1-142:49&quot;&gt;源代码开放：https://github.com/hpides/viper&lt;/p&gt;&lt;h4 data-sourcepos=&quot;117:1-117:110&quot;&gt;Optimizing In-memory Database Engine For AI-powered On-line Decision Augmentation Using Persistent Memory&lt;/h4&gt;&lt;p data-sourcepos=&quot;119:1-119:180&quot;&gt;第四范式、新加坡国立大学和 intel 合作的 paper，本文作者自己已经进行介绍了，我就不展开了。中文介绍：https://zhuanlan.zhihu.com/p/401513878&lt;/p&gt;&lt;h4 data-sourcepos=&quot;144:1-144:63&quot;&gt;Persistent Memory Hash Indexes: An Experimental Evaluation&lt;/h4&gt;&lt;p data-sourcepos=&quot;146:1-146:88&quot;&gt;总结实验型文章，对 6 种基于 PM 的持久性哈希表进行全面的评估。&lt;/p&gt;&lt;h2 data-sourcepos=&quot;149:1-149:9&quot;&gt;总结&lt;/h2&gt;&lt;p data-sourcepos=&quot;151:1-151:57&quot;&gt;感想：&lt;strong&gt;成功都是别人的，而我的失败，彻彻底底！&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;欢迎关注我的公众号：&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwODA2NjIxOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA0g3RQ9bRYaJib92ovwsSB9pPup1lt5cB24cJVJia1dc3Nr2kFSBHsJq5HL9DcLhoAGribSBvHU7ZzjA/0?wx_fmt=png&quot; data-nickname=&quot;多颗糖&quot; data-alias=&quot;duoketang&quot; data-signature=&quot;分布式系统和个人成长。我想要说的，前人们都说过了。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA1ynq0HZhJ5kup6vibWOUCRsH7QIzgtnEIDoWXpYqiacbxwrHoWMAL3XYQj08bbxRxNlcQd4NYLZibCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1a49396e8f0040c4ff14b90ef3023c98</guid>
<title>Android 进阶之 Dialog 对应的 Context 必须是 Activity 吗？从源码详细分析</title>
<link>https://toutiao.io/k/uokpkyl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;创建Dialog的时候知道在Dialog的构造方法中需要一个上下文环境，而对这个“上下文”没有具体的概念结果导致程序报错，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是发现Dialog需要的上下文环境只能是activity。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以接下来这篇文章将会从源码的角度来彻底的理顺这个问题；&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、Dialog创建失败&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Dialog的构造方法中传入一个Application的上下文环境。看看程序是否报错：&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   Dialog dialog = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Dialog(getApplication());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        TextView textView = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; TextView(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        textView.setText(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;使用Application创建Dialog&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        dialog.setContentView(textView);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        dialog.show();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;运行程序，程序不出意外的崩溃了，我们来看下报错信息：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Caused &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt;: android.view.WindowManager$BadTokenException: Unable to &lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt; window -- token &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;is&lt;/span&gt; not &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; an application&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    at android.view.ViewRootImpl.setView(ViewRootImpl.java:&lt;span class=&quot;code-snippet__number&quot;&gt;517&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:&lt;span class=&quot;code-snippet__number&quot;&gt;301&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:&lt;span class=&quot;code-snippet__number&quot;&gt;215&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    at android.view.WindowManagerImpl$CompatModeWrapper.addView(WindowManagerImpl.java:&lt;span class=&quot;code-snippet__number&quot;&gt;140&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这段错误日志，有两点我们需要注意一下&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;程序报了一个BadTokenException异常;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;程序报错是在ViewRootImpl的setView方法中;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我们一定很疑惑BadTokenException到底是个啥，在说明这个之前我们首先需要了解Token，在了解了Token的概念之后，再结合ViewRootImpl的setView方法，就能理解BadTokenException这个到底是什么，怎么产生的;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、Token分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、token详解&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Token直译成中文是令牌的意思，android系统中将其作为一种安全机制，其本质是一个Binder对象，在跨进程的通行中充当验证码的作用。比如：在activity的启动过程及界面绘制的过程中会涉及到ActivityManagerService，应用程序，WindowManagerService三个进程间的通信，此时Token在这3个进程中充当一个身份验证的功能，ActivityManagerService与WindowManagerService通过应用程序的activity传过来的Token来分辨到底是控制应用程序的哪个activity。具体来说就是：&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在启动Activity的流程当中，首先，ActivityManagerService会创建ActivityRecord由其本身来管理，同时会为这个ActivityRecord创建一个IApplication（本质上就是一个Binder）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ActivityManagerService将这个binder对象传递给WindowManagerService，让WindowManagerService记录下这个Binder。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;当ActivityManagerService这边完成数据结构的添加之后，会返回给ActivityThread一个ActivityClientRecord数据结构，中间就包含了Token这个Binder对象。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ActivityThread这边拿到这个Token的Binder对象之后，就需要让WindowManagerService去在界面上添加一个对应窗口，在添加窗口传给WindowManagerService的数据中WindowManager.LayoutParams这里面就包含了Token。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;最终WindowManagerService在添加窗口的时候，就需要将这个Token的Binder和之前ActivityManagerService保存在里面的Binder做比较，验证通过说明是合法的，否则，就会抛出BadTokenException这个异常。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;到这里，我们就知道BadTokenException是怎么回事了，然后接下来分析为什么使用Application上下文会报BadTokenException异常，而Activity上下文则不会&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.8819875776397516&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhF3w6lSI5ial49T8x5cHZvdKuPLV3ib6kautL9IzDGoHkz0DVtTYPoMo2eD2VL53sjaAJQLoEOLlEBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;644&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、为什么非要一个Token&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;因为在WMS那边需要根据这个Token来确定Window的位置（不是说坐标），如果没有Token的话，就不知道这个窗口应该放到哪个容器上了;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;因为非Activity的Context它的WindowManger没有ParentWindow，导致在WMS那边找不到对应的容器，也就是不知道要把Dialog的Window放置在何处。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;还有一个原因是没有SYSTEM_ALERT_WINDOW权限（当然要加权限啦，DisplayArea.Tokens的子容器，级别比普通应用的Window高，也就是会显示在普通应用Window的前面，如果不加权限控制的话，被滥用还得了）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在获得SYSTEM_ALERT_WINDOW权限并将Dialog的Window.type指定为SYSTEM_WINDOW之后能正常显示，是因为WMS会为SYSTEM_WINDOW类型的窗口专门创建一个WindowToken（这下就有容器了），并放置在DisplayArea.Tokens里面（这下知道放在哪里了）;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、创建dialog流程分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8300970873786407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhF3w6lSI5ial49T8x5cHZvdKQtnLBN4sauicBtd1W1g9CCKwdlKiaUib46mnib6bZX73M7YKafIQFqjuiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1030&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、&lt;strong&gt;activity的界面最后是&lt;/strong&gt;通过ViewRootImpl的setView方法连接WindowManagerService，从而让WindowManagerService将界面绘制到手机屏幕上。而从上面的异常日志中其实也可以看出，Dialog的界面也是通过ViewRootImpl的setView连接WindowManagerService，从而完成界面的绘制的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们首先来看Dialog的构造方法。不管一个参数的构造方法。两个参数的构造方法，最终都会调用到3个参数的构造方法：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Dialog(&lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt; Context context, &lt;span class=&quot;code-snippet__meta&quot;&gt;@StyleRes&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; themeResId, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;createContextThemeWrapper) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; Window w = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; PhoneWindow(mContext);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWindow = w;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        w.setCallback(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        w.setOnWindowDismissedCallback(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        w.setWindowManager(mWindowManager, &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        w.setGravity(Gravity.CENTER);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mListenersHandler = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ListenersHandler(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这段代码可以看出dialog的创建实质上和activity界面的创建没什么两样，都需要完成一个应用窗口Window的创建，和一个应用窗口视图对象管理者WindowManagerImpl的创建。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后Dialog同样有一个setContentView方法：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setContentView&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;@LayoutRes &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; layoutResID&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWindow.setContentView(layoutResID);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;依然是调用PhoneWindow的setContentView方法。再接着我们来看下dialog的show方法：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mDecor = mWindow.getDecorView();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        WindowManager.LayoutParams l = mWindow.getAttributes();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((l.softInputMode&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &amp;amp; WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION) == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            WindowManager.LayoutParams nl = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.LayoutParams();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            nl.copyFrom(l);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            nl.softInputMode |=&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            l = nl;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mWindowManager.addView(mDecor, l);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mShowing = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            sendShowMessage();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这段代码和activity的makeVisable方法类似，这里也不多说了，注释已经大概的写清楚了。然后调用WindowManagerImpl的addView方法：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8830508474576271&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhF3w6lSI5ial49T8x5cHZvdKFgczXgE2hDD7MlgPNiapUss0u3yWXCuaH0uzE2pOXw3uGbV3Y84XpTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;590&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@&lt;span class=&quot;code-snippet__function&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;addView&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;@NonNull View view, @NonNull ViewGroup.LayoutParams &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        applyDefaultToken(&lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mGlobal.addView(view, &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;, mDisplay, mParentWindow);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;接着调用了WindowManagerGlobal的addView方法：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;addView&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;View view, ViewGroup.LayoutParams &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Display display, Window parentWindow&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;WindowManager.LayoutParams类型的wparams &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (parentWindow != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            parentWindow.adjustLayoutParamsForSubWindow(wparams);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ViewRootImpl root;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        View panelParentView = &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        synchronized (mLock) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            root = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ViewRootImpl(view.getContext(), display);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            view.setLayoutParams(wparams);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mViews.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(view);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mRoots.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(root);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mParams.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(wparams);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            root.setView(view, wparams, panelParentView);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (RuntimeException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            synchronized (mLock) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                final &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; index = findViewLocked(view, &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (index &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    removeViewLocked(index, &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (parentWindow != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            parentWindow.adjustLayoutParamsForSubWindow(wparams);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、这里会首先判断一个类型&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;为Window的parentWindow 是否为空，如果不为空会通过Window的adjustLayoutParamsForSubWindow方法调整一个类型为WindowManager.LayoutParams的变量wparams的一些属性值。应用程序请求WindowManagerService服务时会传入一个Token，其实那个Token就会通过Window的adjustLayoutParamsForSubWindow方法存放在wparams的token变量中，也就是说如果没有调用Window的adjustLayoutParamsForSubWindow方法就会导致wparams的token变量为空。然后我们接下来看一下wparams的token变量是如何赋值的：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;adjustLayoutParamsForSubWindow&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;WindowManager.LayoutParams wp&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        CharSequence curTitle = wp.getTitle();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (wp.type &amp;gt;= WindowManager.LayoutParams.FIRST_SUB_WINDOW &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            wp.type &amp;lt;= WindowManager.LayoutParams.LAST_SUB_WINDOW) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (wp.token == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                wp.token = mContainer == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; ? mAppToken : mContainer.mAppToken;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (wp.packageName == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            wp.packageName = mContext.getPackageName();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (mHardwareAccelerated) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            wp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这里我们可以看到这段代码首先会做一个判断如果wp.type的值有没有位于WindowManager.LayoutParams.FIRST_SUB_WINDOW与WindowManager.LayoutParams.LAST_SUB_WINDOW之间，如果没有则会给wp.token赋值。wp.type代表窗口类型，有3种级别，分别为系统级，应用级以及子窗口级。而这里是判断是否为子窗口级级别。而Dialog的WindowManager.LayoutParams.type默认是应用级的，因此会走else分支，给wp.token赋值mAppToken。至于mAppToken是什么，我们待会再来分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、看WindowManagerGlobal的addView方法的&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，会调用ViewRootImpl的setView方法，我们来看一下，ViewRootImpl是如何连接WindowManagerService传递token的：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; void setView(View view, WindowManager.LayoutParams attrs, View &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;panelParentView) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        synchronized (this) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (mView == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                mView = view;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    res = mWindowSession.addToDisplay(mWindow, mSeq, mWindowAttributes,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            getHostVisibility(), mDisplay.getDisplayId(),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            mAttachInfo.mContentInsets, mAttachInfo.mStableInsets,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            mAttachInfo.mOutsets, mInputChannel);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (RemoteException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Adding window failed&quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (restore) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        attrs.restore();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (res &amp;lt; WindowManagerGlobal.ADD_OKAY) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;switch&lt;/span&gt; (res) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_BAD_APP_TOKEN:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.BadTokenException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window -- token &quot;&lt;/span&gt; + attrs.token&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; is not valid; is your activity running?&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_NOT_APP_TOKEN:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.BadTokenException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window -- token &quot;&lt;/span&gt; + attrs.token&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; is not for an application&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_APP_EXITING:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.BadTokenException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window -- app for token &quot;&lt;/span&gt; + &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;attrs.token&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; is exiting&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_DUPLICATE_ADD:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.BadTokenException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window -- window &quot;&lt;/span&gt; + mWindow&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; has already been added&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_STARTING_NOT_NEEDED:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_MULTIPLE_SINGLETON:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.BadTokenException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window &quot;&lt;/span&gt; + mWindow +&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; -- another window of this type already &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;exists&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_PERMISSION_DENIED:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.BadTokenException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window &quot;&lt;/span&gt; + mWindow +&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; -- permission denied for this window type&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_INVALID_DISPLAY:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.InvalidDisplayException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window &quot;&lt;/span&gt; + mWindow +&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; -- the specified display can not be found&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_INVALID_TYPE:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.InvalidDisplayException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window &quot;&lt;/span&gt; + mWindow&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; -- the specified window type is not valid&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window -- unknown error code &quot;&lt;/span&gt; + res);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这段代码有两处需要注意：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;会通过一个mWindowSession的binder对象请求WindowManagerService服务，传递一个类型为WindowManager.LayoutParams的变量mWindowAttributes到WindowManagerService，mWindowAttributes里面装有代表当前activity的token对象。然后通过WindowManagerService服务创建屏幕视图。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;会根据请求WindowManagerService服务的返回结果判断是否请求成功，如果请求失败会抛出异常，注释的地方就是在文章开头示例抛出的异常。此时attrs.token为空。如果创建dialog的上下文环境改为activity的为什么就不为空呢？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;四、分析创建Dialog的上下文Activity为何与众不同&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、上文的分析中&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;可以看出attrs.token的赋值在Window的adjustLayoutParamsForSubWindow方法中。而Dialog默认的WindowManager.LayoutParams.type是应用级别的，因此，如果能进入这个方法内，attrs.token肯定能被赋值。现在只有一种情况，如果不是activity的上下文环境就没有进入到这个方法内。这时我们再看WindowManagerGlobal的addView方法的：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;addView&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;View view, ViewGroup.LayoutParams &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Display display, Window parentWindow&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (parentWindow != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            parentWindow.adjustLayoutParamsForSubWindow(wparams);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从这里看出如果Window类型的parentWindow为空，就不会进入adjustLayoutParamsForSubWindow方法。从而可以得出结论如果不是activity的上下文环境WindowManagerGlobal的第四个参数parentWindow为空。紧接着我们再来分析为什么其他的上下文会导致parentWindow为空。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;WindowManagerGlobal调用addView方法在WindowManagerImpl的addView方法中&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; @&lt;span class=&quot;code-snippet__function&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;addView&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;@NonNull View view, @NonNull ViewGroup.LayoutParams &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        applyDefaultToken(&lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mGlobal.addView(view, &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;, mDisplay, mParentWindow);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;WindowManagerImpl的addView方法在Dialog的首位方法中调用：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mWindowManager.addView(mDecor, l);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mShowing = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            sendShowMessage();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对&lt;/span&gt;&lt;span&gt;比这两个方法。可以看出WindowManagerImpl的addView方法调用WindowManagerGlobal的addView方法是多出来了两个参数mDisplay, mParentWindow，我们只看后一个，多了一个Window类型的mParentWindow，可以一mParentWindow并不是在Dialog的show方法中赋值的。那么它在哪赋值呢？在WindowManagerImpl类中搜索mParentWindow发现它在WindowManagerImpl的两个参数的构造方法中被赋值。从这里我们可以猜测，如果是使用的activity上下文，那么在创建WindowManagerImpl实例的时候用的是两个参数的构造方法，而其他的上下文是用的一个参数的构造方法。现在问题就集中到了WindowManagerImpl是如何被创建的了。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们再回过头来看Dialog的构造方法中WindowManagerImpl是如何创建的：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Dialog(&lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt; Context context, &lt;span class=&quot;code-snippet__meta&quot;&gt;@StyleRes&lt;/span&gt; int themeResId, &lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;createContextThemeWrapper) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;然后分别查看activity的getSystemService方法，和Application的getSystemService方法：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;activity的getSystemService方法&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; getSystemService(&lt;span class=&quot;code-snippet__meta&quot;&gt;@ServiceName&lt;/span&gt; &lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; name) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (WINDOW_SERVICE.equals(name)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; mWindowManager;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (SEARCH_SERVICE.equals(name)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           ensureSearchManager();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; mSearchManager;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.getSystemService(name);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在这个方法中直接返回了activity的mWindowManager对象，activity的mWindowManager对象在activity的attach方法中：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;void attach(Context context, ActivityThread aThread,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;Instrumentation&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;instr, IBinder token, int ident,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;application, Intent intent, ActivityInfo info,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;title, Activity parent, String id,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;NonConfigurationInstances&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;lastNonConfigurationInstances,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;Configuration&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;config, String referrer, IVoiceInteractor voiceInteractor) {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;......&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__meta&quot;&gt;mWindow.setWindowManager((WindowManager)context.getSystemService(Context.WINDOW_SERVICE),mToken,&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;mComponent.flattenToString(),&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__meta&quot;&gt;(info.flags&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&amp;amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__meta&quot;&gt;......&lt;/span&gt;  &lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、我们再看Window的setWindowManager方法&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; setWindowManager(WindowManager wm, IBinder appToken, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; appName,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt; hardwareAccelerated) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mAppToken = appToken;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWindowManager = ((WindowManagerImpl)wm).createLocalWindowManager(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这段代码两个地方需要注意，一是前ActivityManagerService传过来的Token赋值给Winow的mAppToken，这个token最后会保存到attr.token，具体操作在Window的adjustLayoutParamsForSubWindow方法中。二是调用WindowManagerImpl的createLocalWindowManager方法创建WindowManagerImpl：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; WindowManagerImpl &lt;span class=&quot;code-snippet__title&quot;&gt;createLocalWindowManager&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Window parentWindow&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManagerImpl(mDisplay, parentWindow);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;到这里就可以看出如果创建Dialog的上下文是activity，则会调用WindowManagerImpl两个参数的构造方法，从而导致parentWindow不为空。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、Application的getSystemService方法&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于Application是Context的子类，所以Application的getSystemService最终会调到ContextImpl的getSystemService方法&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; getSystemService(&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; name) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; SystemServiceRegistry.getSystemService(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;, name);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;直接调用了SystemServiceRegistry的getSystemService方法,这个方法又会得到匿名内部类CachedServiceFetcher&amp;lt;WindowManager&amp;gt;的createService方法的返回值。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; WindowManager createService(ContextImpl ctx) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManagerImpl(ctx.getDisplay());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从这个方法中可以看出上下文为Application时，调用的是WindowManagerImpl的一个参数的构造方法，从而parentWindow为空；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;创建dialog时，如果传入构造方法不是一个activity类型的上下文，则导致WindowManagerImpl类型为Window的变量mParentWindow，从而导致WindowManagerGlobal的addView不会调用Window的adjustLayoutParamsForSubWindow方法，从而不会给attr.token赋值，导致在WindowManagerService服务中的身份验证失败，抛出BadTokenException异常；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Show一个普通的Dialog需要的并不是Activity本身，而是一个容器的token，我们平时会传Activity，只不过是Activity刚好对应WMS那边的一个WindowState的容器而已；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>11e82ccd7bb795c40470bb768974976c</guid>
<title>从零开始，配置一个趁手的 Python 开发环境</title>
<link>https://toutiao.io/k/pj6r7lr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content wangEditor-txt&quot; data-v-6a669db8=&quot;&quot;&gt;&lt;p&gt;&lt;strong&gt;Matrix 首页推荐&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://sspai.com/matrix&quot;&gt;Matrix&lt;/a&gt; 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&lt;/p&gt;&lt;p&gt;文章代表作者个人观点，少数派仅对标题和排版略作修改。&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;引子&lt;/h2&gt;&lt;p&gt;若干年前，我入坑 Python ，一窍不通的我偷懒选择了一个开袋即食的开发环境 &lt;a href=&quot;http://winpython.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Winpython&lt;/a&gt;，它免费开源、绿色免安装、预装了很多常用包（Packages），下载、解压缩后就可以使用了，对小白十分友好。但是这个开发环境存在一些问题：它侧重于科学统计和计算，所使用的集成开发环境（Integrated Development Environment，IDE）&lt;a href=&quot;https://www.spyder-ide.org/&quot; target=&quot;_blank&quot;&gt;Spyder&lt;/a&gt; 略显臃肿，开启速度较慢。更重要的是，我正在开发的一个 Python 项目需要使用一个名叫「pyinstaller」的包来将程序打包成 exe 程序，使用 Winpython 操作总是失败。&lt;/p&gt;&lt;p&gt;近日，我鼓起勇气从头开始正儿八经地配置一个更轻量、更趁手的 Python 开发环境。经过一番折腾，我比较顺利地在 Windows 10 上配置了一个比较满意的 Python 环境：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;安装稳定版本的 Python 3.7&lt;/li&gt;&lt;li&gt;使用微软出品的 VS Code 作为 IDE&lt;/li&gt;&lt;li&gt;使用 venv 模块为不同 Python 项目搭建相互隔离的运行环境&lt;/li&gt;&lt;li&gt;使用 Git 对 Python 项目进行版本管理&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;本文就用大白话来介绍我的配置过程，对其中涉及的专业术语和操作加以解释，供自己日后复习查看，也希望能为准备尝试 Python 的新手朋友提供参考。&lt;/p&gt;&lt;p&gt;欢迎闲来无事的大小朋友们一起来玩 Python！&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;本文的操作在 Windows 10 上进行，但配置思路和所用软件均适用于 MacOS 。&lt;/p&gt;&lt;h2&gt;安装 Python&lt;/h2&gt;&lt;p&gt;在电脑上配置 Python 开发环境，第一件事当然是安装 Python 。安装 Python 就像安装一个其他软件一样：到 Python 官网上下载安装程序，然后安装到电脑上。&lt;/p&gt;&lt;p&gt;在 &lt;a href=&quot;https://www.python.org/&quot; target=&quot;_blank&quot;&gt;Python 官网&lt;/a&gt;，我们选择「Downloads——Windows」（根据你电脑的操作系统来选择），就可以来到供 Windows 操作系统使用的 Python 的下载页面。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/04/5f92a22bd9b8fa739d76ee4d21c7a032.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/04/5f92a22bd9b8fa739d76ee4d21c7a032.png&quot;/&gt;&lt;figcaption&gt;▲ Python 官网&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/06/9422f74b4336bcf9ed267dcff3dc8be3.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/06/9422f74b4336bcf9ed267dcff3dc8be3.png&quot;/&gt;&lt;figcaption&gt;▲ 在 Python 下载页面，每个版本都有对应的下载链接。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在这个页面，我们可以看到诸多的 Python 版本可供下载。这个时候，我们就迎来了一个关键的选择：选择哪个版本的 Python ？&lt;/p&gt;&lt;p&gt;Python 目前有两个大版本：Python 2 和 Python 3。Python 2 目前已经不再更新，最后一个版本是 Python 2.7.18；Python 3 是相较于 Python 2 有较大升级，不向下兼容，目前仍在持续更新中，最新版本是 Python 3.9.6。&lt;/p&gt;&lt;p&gt;「 Python 2 逐渐被淘汰，Python 3 当道」相信会是大势所趋。因此，&lt;strong&gt;如果没有特殊需求（比如你的项目需要用到的包不支持 Python 3 ），我们就选择安装 Python 3 了。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;至于选择 Python 3 的哪个小版本，我的建议是选稳定的版本，而非最新的版本，以避免出现某些包还不支持最新版本 Python 导致的疑难杂症。我近日就有过一次血泪教训：我安装了最新的 Python 3.9.6，而在使用 pyinstaller 包将代码打包成 exe 程序的过程中总是出现缺失某个 dll 文件的警告，生成的 exe 程序到了别的电脑也无法正常运行。在苦苦折腾了一下午无果后，我卸载了 Python 3.9.6，安装了 Python 3.7.11，重新操作，一发就成功了。&lt;/p&gt;&lt;p&gt;以上就是我对选择 Python 版本的一些个人建议。决定好使用哪个版本的 Python 之后，我们在下载页面找到心仪版本，根据自己电脑是 32 位或 64 位下载相应的 &lt;i&gt;Windows installer&lt;/i&gt; 或者 &lt;i&gt;Windows executable installer&lt;/i&gt; 文件到电脑即可。&lt;/p&gt;&lt;p&gt;下载完成后，我们双击 exe 文件开始安装。安装时，我们可以选择「Install Now」来使用默认设置直接安装，也可以选择「Customize installation」来自定义安装目录和内容。请务必勾选「Add Python 3.7 to PATH」，也就是将 Python 添加至系统环境变量。这是一个很有用的操作，稍后会做详细介绍。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/05/dc6b4c1165d6ccc654c4298f9294c4c1.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/05/dc6b4c1165d6ccc654c4298f9294c4c1.png&quot;/&gt;&lt;/figure&gt;&lt;p&gt;安装完成后，我们的电脑就可以「运行」Python 程序了。打开 Python 安装目录下的「python.exe」，在弹出的 Python 命令行窗口中输入&lt;code&gt;print(&quot;Hello World&quot;)&lt;/code&gt;并按回车，我们就简单而仪式感拉满地运行了第一段 Python 代码啦。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/05/3f5293097a4871fceb33f39a5470d48c.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/05/3f5293097a4871fceb33f39a5470d48c.png&quot;/&gt;&lt;figcaption&gt;▲ 第一段 Python 代码&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;当然了，我们不需要打开 python.exe 就可以运行 Python 程序。打开一个 Windows 终端，如 cmd 命令提示符窗口&lt;sup class=&quot;ss-footnote&quot; href=&quot;&quot; title=&quot;在Windows「开始」菜单输入「cmd」搜索，即可找到cmd命令提示符。&quot; footnote-id=&quot;1&quot;&gt;1&lt;/sup&gt;，输入&lt;code&gt;python&lt;/code&gt;并按回车，窗口就会返回电脑上安装的 Python 版本信息，这时候我们已经进入Python，接着输入&lt;code&gt;print(&quot;Hello World&quot;)&lt;/code&gt;并按回车，就运行这段代码了。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/06/3323c68ea3e352f680b7ed190e8fdbc0.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/06/3323c68ea3e352f680b7ed190e8fdbc0.png&quot;/&gt;&lt;figcaption&gt;▲ 从 Windows 终端进入 Python 并执行 Python 代码&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我们也可以在 Windows 终端中使用指令&lt;code&gt;python Path\CodeName.py&lt;/code&gt;来直接运行某一个后缀为「.py」的 Python 程序（或称为「脚本」）。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/06/b496abfd1bca7d581c73e7d6245d83a8.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/06/b496abfd1bca7d581c73e7d6245d83a8.png&quot;/&gt;&lt;figcaption&gt;▲ 从 Windows 终端运行一个命名为「myPyCode.py」的 Python 程序&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;这要归功于我们在安装时「将 Python 添加至系统环境变量」的操作。「环境变量」的意义是：当我们要求系统运行一个程序而没有提供程序的完整路径时，系统除了在当前目录下面寻找此程序外，还会到「环境变量——Path」中指定的路径去寻找&lt;sup class=&quot;ss-footnote&quot; href=&quot;https://zhuanlan.zhihu.com/p/93089405&quot; title=&quot;引自：知乎《python设置环境变量有什么用》&quot; footnote-id=&quot;2&quot;&gt;2&lt;/sup&gt;。我们将 Python 添加到系统环境变量，就可以让系统更快捷地找到并运行 Python，它的作用包括：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在终端中运行 Python 程序&lt;/li&gt;&lt;li&gt;使用 pip 安装或者离线安装 Python 包时找到 Python 的版本和路径&lt;/li&gt;&lt;li&gt;让某些 IDE 找到并调用 Python&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;因此，「将 Python 添加至系统环境变量」可以说是一个必要操作。如果安装时忘记勾选了也没有关系，我们稍费些功夫 &lt;a href=&quot;https://www.php.cn/python-tutorials-424800.html&quot; target=&quot;_blank&quot;&gt;手动添加&lt;/a&gt; 即可。&lt;/p&gt;&lt;p&gt;到目前为止，我们的电脑已经搭建起了简单的 Python 开发环境。但是它还很简陋，下一步我们利用各种工具就来让它变得更加好用。&lt;/p&gt;&lt;h2&gt;使用 VS Code 开发 Python&lt;/h2&gt;&lt;p&gt;上文多次提到 IDE，它的全称是「Integrated Development Environment」，中文称为「集成开发环境」，它是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器等，具有图形化用户界面&lt;sup class=&quot;ss-footnote&quot; href=&quot;https://baike.baidu.com/item/集成开发环境/298524&quot; title=&quot;引自：百度百科《集成开发环境》&quot; footnote-id=&quot;3&quot;&gt;3&lt;/sup&gt;。用大白话讲，IDE 就是一个让我们方便地写 Python 代码并运行和调试代码的软件。&lt;/p&gt;&lt;p&gt;目前用于开发 Python 的 IDE 有很多，我使用的是微软出品的 Visual Studio Code（简称 VS Code）。它功能和运行速度兼备，用起来十分舒服。&lt;/p&gt;&lt;p&gt;我们首先需要到 &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot;&gt;Visual Studio Code 网站&lt;/a&gt; 下载安装包并安装。&lt;/p&gt;&lt;p&gt;安装完成后运行 VS Code，这时候界面为英文。我们可以点击左侧边栏的 Extensions（拓展），搜索「Chinese」，就可以找到简体中文语言包拓展，点击「install」安装成功后重启软件，VS Code 现在就是中文界面了。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/06/5be72e771758e81a59e3ca7565b50d15.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/06/5be72e771758e81a59e3ca7565b50d15.png&quot;/&gt;&lt;figcaption&gt;▲ 为 VS Code 安装简体中文语言包拓展&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;接下来，我们还需要在 VS Code 安装「Python」拓展，它才能运行和调试 Python 程序。搜索和安装「Python」拓展时请认准 Microsoft 出品的那个。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/06/0f5d4b0594043c5134016028fef8eb58.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/06/0f5d4b0594043c5134016028fef8eb58.png&quot;/&gt;&lt;figcaption&gt;▲ 为 VS Code 安装「Python」拓展&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;安装完成后，我们点击「文件——新建文件」，VS Code 就会新建一个代码编辑窗口。点击第一行的「选择语言」，搜索并选择「Python」。由于是首次使用，此时 VS Code 会开始激活和加载「Python」拓展，完成后，左下角状态栏会显示我们电脑上所安装的 Python 版本3.7.9，这说明 VS Code 已经找到了我们所安装的 Python，并且会用它作为解释器来运行和调试 Python 程序。&lt;/p&gt;&lt;p&gt;我们在窗口中输入一些 Python 代码，由于安装了「Python」拓展，我们在输入代码时已经可以享受到代码着色、补全和智能提示等令人愉悦的功能了。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/06/b81b1ffdb33dc27f1cca803e69a4857a.gif&quot; data-original=&quot;https://cdn.sspai.com/2021/08/06/b81b1ffdb33dc27f1cca803e69a4857a.gif&quot;/&gt;&lt;figcaption&gt;▲输入代码时的代码着色、补全和智能提示功能&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;代码编辑完成后，保存并点击右上角绿色三角形来运行。可以看到，VS Code 在编辑器下方打开了一个终端，并运行了我们的 Python 程序。&lt;/p&gt;&lt;p&gt;从终端所提供的信息，我们可以很清晰地看出在 VS Code 编辑和运行 Python 程序的逻辑：VS Code 提供编辑器让我们编辑代码；运行时，VS Code 找到并调用了我们安装在电脑上的 python.exe 作为解释器来运行我们的代码，并在终端中将运行结果打印出来。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/06/548629867d0b1280b0a353f77b7881ae.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/06/548629867d0b1280b0a353f77b7881ae.png&quot;/&gt;&lt;/figure&gt;&lt;p&gt;现在，我们的 Python 开发环境开始好了起来，我们已经可以比较舒服地编辑 Python 代码、开发 Python 项目了。接下来，我们再来添加一些进阶的功能。&lt;/p&gt;&lt;h2&gt;使用 venv 模块搭建虚拟环境&lt;/h2&gt;&lt;p&gt;目前，我们电脑上安装了一个 Python，我们安装的所有包都会被安装到同一个目录下，供 Python 使用。来看看以下两个场景：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;场景一：我们同时在开发两个 Python 项目，项目一需要用到包 A 的 2.7 版本，项目二需要用到包 A 的 2.8 版本，这时候两个项目就会冲突了。&lt;/li&gt;&lt;li&gt;场景二：我们开发了一个 Python 项目，并顺利完成调试。若干年后，我们的 Python 开发环境发生了变化（安装了某些与项目所用的包冲突的包、项目所用的包被删或更新等等），这时候我们的项目程序可能已经无法运行了。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;「虚拟环境」就可以解决以上痛点。它为我们每一个 Python 项目创建一个隔离的开发环境，每个开发环境所安装的包和依赖相互独立，可以确保项目的开发环境不相互干扰和污染。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/26/c4237683562b00127f6f6535e1e1ec36.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/26/c4237683562b00127f6f6535e1e1ec36.png&quot;/&gt;&lt;figcaption&gt;▲在各自的虚拟环境中开发多个 Python 项目&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;一些第三方包如 &lt;a href=&quot;https://virtualenv.pypa.io/en/latest/&quot; target=&quot;_blank&quot;&gt;virtualenv&lt;/a&gt; 、 &lt;a href=&quot;https://pipenv.pypa.io/en/latest/&quot; target=&quot;_blank&quot;&gt;pipenv&lt;/a&gt; 等都可以用来创建虚拟环境，而 Python 从 3.3 版本之后，自带了可以用于创建虚拟环境的 &lt;a href=&quot;https://docs.python.org/3/library/venv.html&quot; target=&quot;_blank&quot;&gt;venv&lt;/a&gt; 模块，十分方便。我们就以 venv 模块为例，来展示 Python 虚拟环境的用法。&lt;/p&gt;&lt;p&gt;假设我们正在开发的项目文件位于「D:\myProject」目录下，我们来为这个项目创建一个虚拟环境。在 windows 终端中执行以下指令，就可以在「D:\myProject\virtualEnvironment」目录下创建一个空的虚拟环境：&lt;/p&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code&gt;python -m venv D:\myProject\virtualEnvironment&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;指令执行完成后，可以看到在「myProject」目录下新建了一个目录「virtualEnvironment」,里面就包含了一套独立的 Python 开发环境，包括 Python 解释器、第三方包等。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/07/f149d3bb0ec5439bd78a885e855b7901.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/07/f149d3bb0ec5439bd78a885e855b7901.png&quot;/&gt;&lt;figcaption&gt;▲成功创建一个虚拟环境，「virtualEnvironment」目录里包含了虚拟环境的文件。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;想要进入这个虚拟环境，我们需要在根据所使用的终端类型，运行「.\virtualEnvironment\Scripts」中的「activate.bat」或「activate.ps1」文件。运行文件的方法很简单，在终端中输入文件的完整路径后按回车即可：&lt;/p&gt;&lt;pre class=&quot;language-null&quot;&gt;&lt;code&gt;#如果使用的终端是 cmd 命令提示符，需要运行「activate.bat」文件
D:\myProject\virtualEnvironment\Scripts\activate.bat

#如果使用的终端是 Windows PowerShell，需要运行「activate.ps1」文件
D:\myProject\virtualEnvironment\Scripts\activate.ps1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里有一个坑需要留意。当我们在 Windows PowerShell 终端中运行「activate.ps1」文件时，终端会报错：「在此系统上禁止运行脚本」。这是由于 PowerShell 的执行策略默认为「禁止执行脚本」所致。解决的办法是：以管理员身份运行 Windows PowerShell，在运行「activate.ps1」文件前，先执行以下指令来将执行策略设置为「RemoteSigned」，就可以运行本机上的脚本了：&lt;/p&gt;&lt;pre class=&quot;language-null&quot;&gt;&lt;code&gt;set-executionpolicy RemoteSigned&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行「activate」文件后，现在终端的提示符前会出现&lt;code&gt;(virtualEnvironment)&lt;/code&gt;的标识，说明我们现在已经进入所创建的虚拟环境中了。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/07/878211c00e1c0115b0835c29799c53fb.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/07/878211c00e1c0115b0835c29799c53fb.png&quot;/&gt;&lt;figcaption&gt;▲ 从 cmd 进入虚拟环境&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/07/13f8e479a994f30404e8cc16f48f8b27.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/07/13f8e479a994f30404e8cc16f48f8b27.png&quot;/&gt;&lt;figcaption&gt;▲ 从 Windows PowerShell 进入虚拟环境&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;此时，我们在这个终端里运行 Python 程序、安装第三方包，都会在这个虚拟环境中进行，不会受电脑上原有的 Python 开发环境影响。我们可以使用 pip list 指令将开发环境中安装的所有包的列表打印出来，可以看到，本机原生开发环境和虚拟环境中的包是相互独立的。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/07/7963d4dee0f361f02a6d9bfda6fe8e38.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/07/7963d4dee0f361f02a6d9bfda6fe8e38.png&quot;/&gt;&lt;figcaption&gt;▲左：本机原生 Python 开发环境所安装的包；右：虚拟环境内所安装的包。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在终端中，想要退出虚拟环境，我们只需要输入&lt;code&gt;deactivate&lt;/code&gt;并回车即可。&lt;/p&gt;&lt;p&gt;在 VS Code 使用虚拟环境的方法相同，我们在 VS Code 打开一个终端，同样运行「activate」文件，随后 VS Code 就会在虚拟环境中运行 Python 程序了。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/07/372891f8598dac8a1c10be8e779c0a73.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/07/372891f8598dac8a1c10be8e779c0a73.png&quot;/&gt;&lt;figcaption&gt;▲在 VS Code 中进入虚拟环境&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;这里又有一个坑需要注意。举个例子，我在 VS Code 中进入到虚拟环境，在虚拟环境中成功安装了 numpy 包，然后运行一个 Python 程序。此时终端退出了虚拟环境，并报错：找不到 numpy 这个包。这是由于 VS Code 仍采用虚拟环境外的 Python 解释器所导致的。解决的办法是：点击 VS Code 左下角的 Python 版本号，在弹出的「选择解释器」弹窗中选择虚拟环境中的 python 解释器（位于「.\virtualEnvironment\Scripts」目录下）即可。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/07/68082dc2f969e3845c16e7021c1cf3df.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/07/68082dc2f969e3845c16e7021c1cf3df.png&quot;/&gt;&lt;figcaption&gt;▲ 将 VS Code 的 Python 解释器切换为虚拟环境中的 Python&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/07/f8d2f0f08c44989de0f033b9a9106f8a.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/07/f8d2f0f08c44989de0f033b9a9106f8a.png&quot;/&gt;&lt;figcaption&gt;▲ 切换到虚拟环境中的 Python 解释器后，VS Code 成功在虚拟环境中运行了 Python 程序&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;使用「虚拟环境」来管理我们的 Python 项目是一个非常科学的编程思想，可以让我们的 Python 开发环境变得很有条理，使用起来也是十分方便的。Python 的「虚拟环境」还有很多进阶的玩法，比如多 Python 版本并存、管理和快速切换虚拟环境等等，大家可以深入探索。&lt;/p&gt;&lt;h2&gt;使用 Git 进行项目版本管理&lt;/h2&gt;&lt;p&gt;在上文，我们采用「虚拟环境」来管理我们不同的 Python 项目，现在，我们来对每一个 Python 项目进行版本管理，让项目的程序文件可以被妥善、便捷地备份和恢复。所用到的工具是 Git。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/26/d4e0beb4b0014041246c83ce8bf959a5.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/26/d4e0beb4b0014041246c83ce8bf959a5.png&quot;/&gt;&lt;figcaption&gt;▲ 使用 Git 备份和恢复 Python 项目&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;大名鼎鼎的 Git 是创建了 Linux 的 Linus 大神的作品，它是一个功能强大的分布式版本控制系统，可以实现代码版本回退、远程仓库、多人协作等功能。Git 的用法和功能很多，关于 Git 的详细操作，推荐大家参考 &lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot; target=&quot;_blank&quot;&gt;廖雪峰的 Git 教程&lt;/a&gt;。在这里，我仅抛砖引玉地介绍 Git 的安装和基础功能&lt;sup class=&quot;ss-footnote&quot; href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot; title=&quot;本文对 Git 的使用方法介绍，亦来自于廖雪峰的 Git 教程。&quot; footnote-id=&quot;4&quot;&gt;4&lt;/sup&gt;。&lt;/p&gt;&lt;h3&gt;安装 Git&lt;/h3&gt;&lt;p&gt;使用 Git，要先安装 Git。在 Linux 或 MacOS 上的安装方法请看 &lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;。在 Windows 上，我们到 &lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot;&gt;Git 网站下载&lt;/a&gt; 安装程序并安装即可，安装目录可根据自己的喜好来，安装过程中有很多设置选项，作为新手，我们无脑下一步即可。 安装完成之后，我们在安装目录或者开始菜单中找到「Git Bash.exe」，双击打开，看到一个命令行窗口，说明 Git 已经安装成功。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/22/6b3f6068be138db947484355066851da.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/22/6b3f6068be138db947484355066851da.png&quot;/&gt;&lt;figcaption&gt;▲ Git Bash 命令行窗口&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;接着，我们在这个命令行窗口中输入以下指令来向 Git 声明我们的名字和 Email 地址：&lt;/p&gt;&lt;pre class=&quot;language-null&quot;&gt;&lt;code&gt;$ git config --global user.name &quot;User Name&quot;
$ git config --global user.email &quot;email@example.com&quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在，我们电脑上的 Git 已经准备就绪，我们可以用它来对我们的 Python 项目进行版本管理了。使用 Git 进行版本管理的流程是十分清晰的：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;创建 Git 版本库&lt;/li&gt;&lt;li&gt;在开发过程中随时向 Git 版本库提交程序文件&lt;/li&gt;&lt;li&gt;必要时从 Git 版本库恢复代码文件&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;创建 Git 版本库&lt;/h3&gt;&lt;p&gt;首先，我们需要为我们的项目创建一个 Git 版本库（Repository）。仍以 myProject 这个项目为例，打开一个 Windows 终端，如 Powershell，执行&lt;code&gt; cd D:\myProject&lt;/code&gt;指令进入到项目目录「D:\myProject」，然后执行&lt;code&gt; git init&lt;/code&gt;指令。执行后，命令行窗口会提示创建了一个空的 Git 版本库，在「myProject」目录下可以看到一个新建的隐藏目录「.git」,目录里包含了版本库的所需文件。一个空的 Git 版本库就轻松创建完成。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/22/aea57fe96f00bb75e44c0aa95d848a58.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/22/aea57fe96f00bb75e44c0aa95d848a58.png&quot;/&gt;&lt;figcaption&gt;▲成功创建一个空的版本库，「.git」目录里包含了版本库的所需文件。&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;提交文件到 Git 版本库&lt;/h3&gt;&lt;p&gt;我们的「D:\myProject」项目目录下有两个Python程序文件 myCode1.py 和 myCode2.py。现在，我们来将它们提交到 Git 版本库中，让 Git 来记录和管理它们的内容变动。这需要两步操作：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;第一步：在项目目录下执行&lt;code&gt;git add myCode1.py&lt;/code&gt;指令来添加文件到版本库，其中&lt;code&gt;myCode1.py&lt;/code&gt;为完整的文件名。我执行了两次&lt;code&gt;git add&lt;/code&gt;指令来添加两个文件。&lt;/li&gt;&lt;li&gt;第二步：执行&lt;code&gt;git commit -m &quot;add 2 files.&quot;&lt;/code&gt;指令来完成本次提交，其中&lt;code&gt;&quot;add 2 files.&quot;&lt;/code&gt;是对本次提交的注释，注意不要漏掉引号。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;执行完成后，命令行窗口就会返回本次提交的文件改动数量和改动内容等信息。像下图，我们就成功向 Git 版本库提交了 myCode1.py 和 myCode2.py 两个文件。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/22/7760157f124d6939cb985d30b75c1429.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/22/7760157f124d6939cb985d30b75c1429.png&quot;/&gt;&lt;figcaption&gt;▲ 将 myCode1.py 和 myCode2.py 提交到 Git 版本库&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;现在，我们可以执行一个指令&lt;code&gt;git status&lt;/code&gt;来查看版本库的状态：&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/24/8a5f501f27fad6325b4fadc0da956ddd.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/24/8a5f501f27fad6325b4fadc0da956ddd.png&quot;/&gt;&lt;figcaption&gt;▲&lt;code&gt;Git status&lt;/code&gt;指令提示除了虚拟环境文件夹外，没有其他文件准备提交到版本库&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;从 Git 返回的信息来看，我们的虚拟环境文件夹没有提交到版本库，除此之外，我们的项目目录里没有准备提交的文件。&lt;/p&gt;&lt;p&gt;那么，现在我们来继续编辑我们的 Python 程序文件。myCode1.py 文件的代码内容如下，我们将最后一行代码&lt;code&gt;print(&#x27;&#x27;Hello World!\n&#x27;&#x27;)&lt;/code&gt;注释掉，并添加一行代码&lt;code&gt;print(&#x27;&#x27;Hello Git!\n&#x27;&#x27;)&lt;/code&gt;，然后保存：&lt;/p&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code&gt;import numpy

print (&quot;\nThis is a Python Program\n&quot;)
for i in numpy.arange(4):
    print (i)
# print (&#x27;Hello World!\n&#x27;)
print (&#x27;Hello Git!\n&#x27;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在，在 Windows 终端里再次执行&lt;code&gt; git status &lt;/code&gt;指令看看结果：&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/24/f53db33570c74c34a0bcccb9efcceccf.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/24/f53db33570c74c34a0bcccb9efcceccf.png&quot;/&gt;&lt;figcaption&gt;▲&lt;code&gt;Git status&lt;/code&gt;指令提示 myCode1.py 文件被修改了，修改内容未提交到版本库&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;可以看到，Git 提示我们，myCode1.py 文件在上一次提交到版本库之后被修改过了，修改内容还没有被提交到版本库。那么myCode1.py 具体被改动了什么呢？我们可以执行另一条指令&lt;code&gt; git diff myCode1.py &lt;/code&gt;来查看：&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/24/3220c2c66be8f5a9545890e370a16ef7.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/24/3220c2c66be8f5a9545890e370a16ef7.png&quot;/&gt;&lt;figcaption&gt;▲&lt;code&gt;Git diff&lt;/code&gt;指令提示 myCode1.py 文件详细的修改内容&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;可以看到，Git 可以不仅可以发现程序文件发生了修改，还可以知道具体的修改内容。事实上，Git 可以追踪各种文本文件的改动内容，包括txt文件、网页和各种程序代码等。而对于图片、视频、Microsoft Word 文件等二进制文件，Git 只能发现文件发生改动，但无法追踪具体的改动内容&lt;sup class=&quot;ss-footnote&quot; href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600/896827951938304&quot; title=&quot;引自：廖雪峰的 Git 教程&quot; footnote-id=&quot;5&quot;&gt;5&lt;/sup&gt;。&lt;/p&gt;&lt;p&gt;现在，我们就把修改后的 myCode1.py 再次提交给版本库吧。同样，执行&lt;code&gt; git add myCode1.py&lt;/code&gt;指令来添加，但在执行提交指令&lt;code&gt; git commit &lt;/code&gt;之前，先&lt;code&gt;git status&lt;/code&gt;一下看看此时的状态：&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/24/0a0308d990bf0b0ab697019474625442.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/24/0a0308d990bf0b0ab697019474625442.png&quot;/&gt;&lt;figcaption&gt;▲&lt;code&gt;Git status&lt;/code&gt;指令提示 myCode1.py 文件准备提交到版本库&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Git 提示我们：修改后的 myCode1.py 准备被提交到版本库。现在，我们就执行&lt;code&gt; git commit -m &quot;modify the Hello info in myCode1&quot;&lt;/code&gt;来完成提交。&lt;/p&gt;&lt;p&gt;以上就是我们在项目开发过程中不断向 Git 版本库提交程序文件的一个缩影。在这个过程中，我们可以随时用&lt;code&gt;git status&lt;/code&gt;和&lt;code&gt;git diff filename&lt;/code&gt;来查看版本管理的状态。&lt;/p&gt;&lt;p&gt;当我们向 Git 版本库提交了很多次文件之后，我们可以执行&lt;code&gt;git log&lt;/code&gt;指令来查看提交日志：&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/25/3dca3f934aea1d260dace49795af6474.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/25/3dca3f934aea1d260dace49795af6474.png&quot;/&gt;&lt;figcaption&gt;▲ 提交日志从最近到最远显示提交人员、日期和提交的注释&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;可以看到，提交日志忠诚地记录了我们项目的程序文件的每一次提交，提交日期和注释可以帮助我们记忆每次提交时的修改内容。这相当于我们的项目被妥善地「存盘」了。&lt;/p&gt;&lt;h3&gt;从 Git 版本库恢复文件&lt;/h3&gt;&lt;p&gt;版本管理的一个重要作用在于：我们把程序文件搞砸了之后，可以把文件恢复到某个历史版本，也就是「版本回退」。我们从 Git 版本库恢复上一版本文件的指令是&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;，其中，&lt;code&gt;HEAD&lt;/code&gt;表示版本库最后一次提交的版本，而上一个版本是&lt;code&gt;HEAD^&lt;/code&gt;，再上一个版本就是&lt;code&gt;HEAD^^&lt;/code&gt;，往上100个版本可以写成&lt;code&gt;HEAD~100&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;比如说，我执行了指令&lt;code&gt;git reset --hard HEAD^^&lt;/code&gt;，得到了以下结果：&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/25/a165c24817b1024afbe234221e0f803d.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/25/a165c24817b1024afbe234221e0f803d.png&quot;/&gt;&lt;figcaption&gt;▲ 执行了回退到上上个版本的指令后，Git 提示文件回到了「add 2 files」那个版本&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;打开两个程序文件看看，它们的确恢复到了「add 2 files」那一次提交时的状态的。&lt;/p&gt;&lt;p&gt;就这样，我们顺利地开始利用 Git 来对我们的项目进行版本管理了。不过，以上内容只是 Git 皮毛中的皮毛，更多的内容需要大家自行深入学习。&lt;/p&gt;&lt;p&gt;我们所使用的 VS Code 也为 Git 提供了 VIP 级别的可视化支持。我们电脑安装了 Git 之后，打开 VS Code ，点开左侧工具栏的「源代码管理」，就可以可视化地使用 Git 功能了。我们可以打开本地目录或者克隆版本库；如果打开的目录还没有 Git 版本库，VS Code 会提示我们进行初始化来新建 Git 版本库或者将文件夹发布到 GitHub；在一个配置了 Git 版本库的目录里，我们可以进行提交、推送、克隆等 Git 操作，相比于命令行指令，操作又更方便了一些啦。此外，我们还可以在 VS Code中安装「Git」拓展来实现更完整的 Git 功能。&lt;/p&gt;&lt;p&gt;关于 VS Code 中的 Git 用法，推荐大家参考 &lt;a href=&quot;https://cloud.tencent.com/developer/article/1662720&quot; target=&quot;_blank&quot;&gt;使用 VS Code 进行 Git 可视化操作&lt;/a&gt;。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/26/64248166a7dcb495816e6fb5bd604517.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/26/64248166a7dcb495816e6fb5bd604517.png&quot;/&gt;&lt;figcaption&gt;▲ 在 VS Code 中的「源代码管理」中使用 Git&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/26/0b517b63b6e5f031e078e457f8681a1f.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/26/0b517b63b6e5f031e078e457f8681a1f.png&quot;/&gt;&lt;figcaption&gt;▲ 打开一个不包含版本库的目录时，VS Code 发出相关提示&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdn.sspai.com/2021/08/26/267c11dbb28b328bbe09d541feab30dd.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&quot; data-original=&quot;https://cdn.sspai.com/2021/08/26/267c11dbb28b328bbe09d541feab30dd.png&quot;/&gt;&lt;figcaption&gt;▲ 在VS Code 中进行可视化 Git 操作&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;现在，我们的项目目录里有「virtualEnvironment」目录和「.git」目录，它们是我们管理 Python 项目的两个利器：虚拟环境和 Git 。有两个利器在手，我们的 Python 项目开发环境就非常清晰和舒服了。&lt;/p&gt;&lt;h2&gt;尾声&lt;/h2&gt;&lt;p&gt;看到这里，大家辛苦了。以上就是我在电脑上搭建 Python 开发环境的讲解。本人才疏学浅，在 Python 开发上只是一名半路出家的门外汉，文中（尤其是虚拟环境和 Git 的使用部分）的不足和错误在所难免，请大牛轻喷，欢迎评论交流。&lt;/p&gt;&lt;p&gt;&amp;gt; 下载少数派 &lt;a href=&quot;https://sspai.com/page/client&quot;&gt;客户端 &lt;/a&gt;、关注 &lt;a href=&quot;https://sspai.com/s/J71e&quot;&gt;少数派公众号 &lt;/a&gt;，了解更妙的数字生活 🍃&lt;/p&gt;&lt;p&gt;&amp;gt; 想申请成为少数派作者？&lt;a href=&quot;https://sspai.com/apply/writing&quot;&gt;冲！&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>