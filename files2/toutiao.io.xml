<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>2720c7fdeda81bec550dfdf2b5dd6770</guid>
<title>盒子放久了，总会长出猫的！猫盒+抓板，点击链接立即购买！</title>
<link>https://toutiao.io/k/kcky0ar</link>
<content:encoded>&lt;div&gt;&lt;body id=&quot;readabilityBody&quot;&gt;


&lt;/body&gt;
&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>baa85896b025a8e7002f19d97346598c</guid>
<title>[推荐] 一张图看懂微服务架构路线</title>
<link>https://toutiao.io/k/upx1qip</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAwNzM1NjQyNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YwqPrBKOSKgM2wVWedA1PSzc587ALAWeY2PP8EcleqPY0jR44ndsiaHjeGp3qhFrTGjOT3b8ok0dW1htCyLjibog/0?wx_fmt=png&quot; data-nickname=&quot;中生代架构&quot; data-alias=&quot;archthink&quot; data-signature=&quot;囊括架构精华文章、书籍、视频&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;101&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;我为什么选择微服务架构&lt;/strong&gt;&lt;strong&gt;    -&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2/&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9495798319327731&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D727NicjCjMODibvVboMMSVrc1fcytVUOkNycA4jWELpmLGy3eQBeibPb72yEN6cJR3EH9fricibm5dkF3tgqiavNaNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;476&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;众所周知，单体应用程序，由于其种种不足，几乎不支持敏捷方法。如果你想为一个大型或复杂的业务创建一个软件项目，最好从微服务架构开始。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;微服务架构是一种灵活的架构，可以显著性地提高应用程序灵活性、可扩展性等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;微服务架构路线&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;据我了解很多开发者，想知道他们应该如何开始微服务架构旅程，虽然有成千上万的资源可以使用，但是资源到处分散。我决定通过为微服务架构学习定义路线图，使这段旅程更加清晰。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;基本思路&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;基于微服务的架构通常有几个独立的单元，它们协同工作以接收和处理各种请求。这个复杂的某些部分可以是插件，这意味着在需要的情况下，你可以在不干扰应用程序的整体工作情况下， 新增一个新插件或删除一个插件。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;例如，如果你决定实现一个微服务架构，你应该熟悉应用程序生命周期中的各种关注点，如持久化、日志记录、监控、负载均衡、缓存等，此外你还应该知道哪些哪些工具比较好或哪些堆栈更适合你的应用程序。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文，我将从以下几个方面来介绍各种关注点&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;它是什么？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;请注意，我在哪些工具比较好部分提到了两三个哪些工具比较好，当然，我们还有很多其他哪些工具比较好，选择这些哪些工具比较好的标准是业务需求，受欢迎程度、性能、开源以及更新频率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;再次注意，我们还有基于云的服务，这不在本文讨论的范围内。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5792922673656619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/D727NicjCjMODibvVboMMSVrc1fcytVUOkia1pK7BbYrxMK89VEBnOeAliaLn0BfQiakYjAiaqxophGpDaqAUibvOea0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文，我用上图作为架构图示例。这个图涉及到大部分微服务架构组件，虽然不是也很全面，但是微服务架构的标准模型。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文将会介绍微服务架构的关注点有：&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Docker&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;容器编排&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Docker容器管理&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;API网关&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;负载均衡&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;服务发现&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;事件总线&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;日志记录&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;监控和警报&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分布式追踪&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数据持久化&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缓存&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;云供应商&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Docker 是一个开源平台，用于容器化你的应用程序，其中包含你的应用程序在各种环境中运行所需的类库和依赖项。在 Docker 的帮助下，开发团队能够将应用程序打包到容器中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实际上，Docker 是容器化应用程序的哪些工具比较好之一，你也可以在不使用 Docker 的情况下创建容器，Docker 的真正好处是使这个过程更容易、更安全、更简单。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;span&gt;Docker&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;容器编排&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在容器化应用程序后，你将需要一些哪些工具比较好来管理容器化应用程序，以执行一些手动和自动操作，例如水平扩展。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些哪些工具比较好为你的应用程序管理提供一些服务，例如自动负载均衡，保证服务的高可用性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这种服务是通过定义多个管理器节点来完成的，如果一个节点管理器出现任何故障，其他管理器可以保持应用程序服务可用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Kubernetes or K8s，Docker Swarm&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;Docker 容器管理&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;管理 Docker 环境、配置、安全等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为用户提供了一个基于 GUI 的Docker 容器管理，可以使他们不必处理不舒服的 CLI。这些工具也为开发人员提供了丰富的 UI 来构建和发布他们的镜像，还可以通过提供简化的用户界面来更轻松地执行一些操作任务，例如服务水平扩展。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Portainer , DockStation, Kitematic,Rancher&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;API网关&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;API 网关可以被视为一种充当你的应用程序服务和不同客户端之间的中间件。API 网关可以管理许多事情，例如：&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;Routing ：网关接收所有 API 请求并将它们转发到目标服务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Logging ：你将能够在一处记录所有请求。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Authorization: 检查你作为用户是否有资格访问该服务，如果没有，可以拒绝该请求&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Performance profiling：你可以估计每个请求的执行时间并检查你的应用程序瓶颈。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Caching：通过在网关级别处理缓存，你将消除服务上的大量流量。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;事实上，它是作为一个反向代理工作的，客户端只需要知道你的网关，应用服务就可以隐藏起来，不直接向其他系统暴露。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果没有 API 网关，你可能需要在每个服务中做一些横切关注点，例如，如果你想记录服务的请求和响应。此外，如果你的应用程序由多个服务组成，你的客户端需要知道每个服务地址，并且在更改服务地址的情况下，应该更新多个地方。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Kong，Ocelot&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们选择微服务架构最重要的原因是可扩展性，这意味着我们将能够通过运行更多服务实例来处理更多请求，但问题是，哪个实例应该接收请求，或客户端如何知道哪个服务实例应该处理请求？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些问题的答案是负载均衡。负载均衡是高可用网络基础架构的关键组件,通常用于将工作负载分布到多个服务器来提高网站、应用、数据库或其他服务的性能和可靠性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了扩展你的独立服务，你需要运行多个服务实例。使用负载均衡器，客户端不需要知道服务的正确实例。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Traefik , NGINX,Seesaw&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;服务发现&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;随着你的应用服务的数量越来越多，服务需要知道彼此的服务实例地址，但是在有很多服务的大型应用中，这是无法处理的。因此我们需要服务发现，它负责提供应用程序中所有组件的地址，它们可以轻松地向服务发现系统发送请求并获取可用的服务实例地址。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当你的应用程序中可以有多个服务时，服务发现对于你的应用程序来说是必不可少的。你的应用服务不需要知道每个服务实例地址，这意味着服务发现为你铺平了道路。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Consul，Zookeeper，Eureka，etcd和Keepalived&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;事件总线&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在微服务架构模式中，你将使用两种不同类型的通信，同步通信以及异步通信。同步通信是指服务之间通过 HTTP 或 GRPC 相互调用。异步通信意味着服务通过消息总线或事件总线相互交互，这意味着服务之间没有直接连接。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你的架构可以同时使用两种通信方式，例如在在线商店示例中，你可以在订单注册时发送消息，并且订阅了特定频道的服务将收到该消息。但有时你可能需要一些实时的查询，例如，你需要知道一个物品的数量，你可能会在服务之间使用 GRPC 或 HTTP 调用来获取响应。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你想要一个包含多个服务的可扩展应用程序，你将遵循的原则之一是创建松散耦合的服务，这些服务通过事件总线相互交互。此外，如果你需要创建一个能够插入新服务以接收一系列特定消息的应用程序，则需要使用事件总线。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;RabbitMQ，Kafka&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;日志记录&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用微服务架构模式时，最好将服务日志集中起来。这些日志将用于调试问题或根据其类型聚合日志以供分析使用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;系统调试时，如果没有提前集中在一个地方收集服务日志，你可能会遇到困难。你还可以将与特定请求相关的日志与唯一的相关 ID 关联。这意味着与请求相关的不同服务中的所有日志都可以通过此关联 ID 访问。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Elastic Logstash&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;监控和警报&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在微服务架构中，如果你想要一个可靠的应用程序或服务，你必须监控应用程序的功能、性能、通信和任何其他方面，以实现一个负责任的应用程序。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你需要监控整体功能和服务健康状况，还需要监控性能瓶颈，并准备解决故障的计划。通过在关键点定义服务的早期警报来减少服务的停机时间，从而优化用户体验。当负载较重时等，可以监控服务的整体资源消耗。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Prometheus , Kibana,Graphana&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;分布式追踪&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;调试始终是开发人员最关心的问题之一，因为你都有跟踪或调试单体引用程序的经验。那是非常直接和容易，但是在微服务架构上，因为一个请求可能会通过不同的服务，这使得调试和跟踪变得困难，因为服务不在一个地方，所以分布式追踪工具将会有所帮助。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果没有分布式跟踪哪些工具比较好，通过不同的服务跟踪你的请求会令人沮丧或不可能。你可以借助用于演示请求流的丰富 UI 轻松跟踪请求和事件。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;OpenTelemetry , Jeager,Zipkin&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;数据持久化&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在大多数系统中，我们需要持久化数据，将应用程序的数据写入具有不同结构的物理文件中，以便数据用于进一步的处理或报告。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在单体应用程序中，我们曾经有一种或两种不同的持久性类型，大多数单体应用程序使用关系数据库，如 SQL Server、Oracle、MySQL。但是在微服务架构中，我们应该遵循“DataBase Per Service”模式，这意味着保持每个微服务的持久数据对该服务是私有的，并且只能通过其 API 访问。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于不同的用途和场景，你将拥有不同的数据库。例如，数据展示服务可能会使用像 ElasticSearch 或 MongoDB 这样的 NoSQL 数据库，因为它们使用文档基础结构，这意味着这些数据库中持久化数据的结构与关系数据库不同，更适用于具有读多写少的服务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另一方面，在某些微服务中，你可能需要 Oracle 或 SQL SERVER 等关系数据库，或者你可能还需要一些支持图结构或键值结构的数据库。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，在微服务架构中，根据服务的使命，你会需要不同类型的数据库。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关系数据库或 RDBMS : PostgreSQL, MySQL, SQL SERVRE, Oracle&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;NoSQL 数据库 : MongoDB, Cassandra,Elasticsearch&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;缓存&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;缓存减少了微服务架构的服务到服务通信的延迟。缓存是高速数据存储层。当从缓存中请求数据时，它的速度比访问硬盘中的数据要快。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么要使用它：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在微服务架构中，有许多策略可以通过这些方式实现缓存。考虑以下：&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;1：嵌入式缓存（分布式和非分布式）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2：客户端-服务器缓存（分布式）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3：反向代理缓存（Sidecar）&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了减少延迟，可以在不同的层中实现缓存。此外，你还可以实现分布式缓存，它可以被多个微服务访问。它们还有不同的用途，比如限流，限流的目的是通过对并发访问/请求进行限速或者一个时间窗口内的的请求进行限速来保护系统，一旦达到限制速率则可以拒绝服务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Redis (Remote Dictionary Server), Apache Ignite,Hazelcast IMDG&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;云供应商&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;它是什么：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;云服务提供商是一个第三方公司，提供基于云的平台，基础设施，应用程序或存储服务。就像房主为电力或天然气等公用事业付费一样，公司通常只需根据业务需求为他们使用的云服务数量付费。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;云提供商最重要的类别：&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;软件即服务 (SaaS)。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;平台即服务 (PaaS)。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基础设施即服务 (IaaS)。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;我为什么要使用它&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用云计算服务的一个好处是，公司可以避免搭建和维护自己的 IT 基础设施的前期成本和复杂性，而只需在使用时为所用的东西付费。今天，公司可以租用从应用程序到存储的任何东西，而不是拥有自己的计算基础设施或数据中心。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;哪些工具比较好：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Amazon Web Services (AWS), Microsoft Azure, Google Cloud,Alibaba Cloud&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;506960231&quot; data-ratio=&quot;0.9900990099009901&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqscN6FicEzJ7iaIdeV8ibJEyVBJNVD6VdujVn2zyicOYIKribkoPEBP1Vb4icQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;-     &lt;/strong&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;    -&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;在本文中，我试图展示一个与微服务架构模式相关的路线图。如果你想从头开始实现微服务架构或将单体架构迁移到微服务架构，你将需要了解这些概念。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了这些概念之外，我们还有其他概念，如服务网格、缓存、持久性，它们可能是本路线图的一部分，但为了简单起见，我故意没有提及它们。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;pre&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;pre&gt;&lt;pre&gt;&lt;pre&gt;&lt;pre&gt;&lt;section data-role=&quot;outer&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;93376&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;pre&gt;&lt;pre&gt;&lt;pre&gt;&lt;section data-role=&quot;outer&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;93376&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools-id=&quot;23409&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;作者：王延飞&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;来源&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247487551&amp;amp;idx=1&amp;amp;sn=18f64ba49f3f0f9d8be9d1fdef8857d9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;来源：juejin.cn/post/7004756545741258765&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;&lt;span&gt;www.kubernetes.org.cn/9711.html&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;版权申明：内容来源网络，版权归原创者所有。除非无法确认，我们都会标明作者及出处，如有侵权烦请告知，我们会立即删除并表示歉意。谢谢！&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;section&gt;&lt;section&gt;&lt;pre&gt;&lt;pre&gt;&lt;pre&gt;&lt;pre&gt;&lt;section data-role=&quot;outer&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;93376&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-recommend-type=&quot;list-title&quot; data-recommend-tid=&quot;6&quot; data-mpa-template=&quot;t&quot; data-mid=&quot;&quot; data-from=&quot;yb-recommend&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;往期推荐&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835303_1&quot; data-recommend-article-time=&quot;1644798600&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHoQtsu1vmjibyGbmIpYINNytz15DFeGaynRNSmt3czian8yQVCG0hgt4axLibnacV1etKLcvC5L0gTCg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;如何写出让人抓狂的低质量代码？&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835303&amp;amp;idx=1&amp;amp;sn=0c6b8cb6147b8adc8619e65d8f09b79b&amp;amp;chksm=f0dc9ddbc7ab14cd04939e41e19d11fc9d0ce153f618b1cb5141a96bbcd4468812e5e11787ac#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835303&amp;amp;idx=1&amp;amp;sn=0c6b8cb6147b8adc8619e65d8f09b79b&amp;amp;chksm=f0dc9ddbc7ab14cd04939e41e19d11fc9d0ce153f618b1cb5141a96bbcd4468812e5e11787ac&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;如何写出让人抓狂的低质量代码？&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835291_1&quot; data-recommend-article-time=&quot;1644629400&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHo9FOliaLxdN95AP1dvESfYS4nPuhfnQXjbjArI7XwdP5cVZLbZw97YN08tEPyzxIkh8zkVoLlOvpQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;入行二十年的一些认知&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835291&amp;amp;idx=1&amp;amp;sn=93896848a1d83acfd2c21324cdcd8f66&amp;amp;chksm=f0dc9de7c7ab14f1943d4e4a4ba297aaf92376048e63a54771bab16261e6926883555f8ffdb2#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835291&amp;amp;idx=1&amp;amp;sn=93896848a1d83acfd2c21324cdcd8f66&amp;amp;chksm=f0dc9de7c7ab14f1943d4e4a4ba297aaf92376048e63a54771bab16261e6926883555f8ffdb2&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;入行二十年的一些认知&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835285_1&quot; data-recommend-article-time=&quot;1644540938&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHo9FOliaLxdN95AP1dvESfYSNs1pmWrgXjVlLNDEBW0WbPvQRYfBO5qHvicGiaB0f01w27wc3eibg4kicg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;微信支付架构为什么这么牛？&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835285&amp;amp;idx=1&amp;amp;sn=c8fd4f6a6c42eb7fe5dfa3611bb59b88&amp;amp;chksm=f0dc9de9c7ab14ff2b364c0b4aeede12d90158a4434f9b88f9740f9539f94f211d4807e48d8b#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835285&amp;amp;idx=1&amp;amp;sn=c8fd4f6a6c42eb7fe5dfa3611bb59b88&amp;amp;chksm=f0dc9de9c7ab14ff2b364c0b4aeede12d90158a4434f9b88f9740f9539f94f211d4807e48d8b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;微信支付架构为什么这么牛？&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835275_1&quot; data-recommend-article-time=&quot;1644281097&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHrQV7I5XbI8D8biaeUtatcLrHnGVum5ht0OrRbiccfp9GBCw7ybhhVWbib2Hhz6HbMz4XcDDhWzickrdg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;设计抗100亿请求的春晚红包系统&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835275&amp;amp;idx=1&amp;amp;sn=36621b01280ed7a944752461a109d67e&amp;amp;chksm=f0dc9df7c7ab14e1b529ad76c9472a12a86f0c3f634959ef869dfe229b2fc491cba91784b934#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835275&amp;amp;idx=1&amp;amp;sn=36621b01280ed7a944752461a109d67e&amp;amp;chksm=f0dc9df7c7ab14e1b529ad76c9472a12a86f0c3f634959ef869dfe229b2fc491cba91784b934&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;设计抗100亿请求的春晚红包系统&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835225_1&quot; data-recommend-article-time=&quot;1643342799&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHoRQCPVtYNZkr2ficGSpiamQffZWsHRnMheywXCjAy81kVk8QqZf1y7iaTpTrzUVp8DuP1kw4K5W609A/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;DDD权限平台建模与实战(附代码)&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835225&amp;amp;idx=1&amp;amp;sn=e18c2f4f21e70fdc9aaa0b941adeb448&amp;amp;chksm=f0dc9d25c7ab1433b9c6eb802be36998121afaed17253ba599d1d2e972a1db8ba7767044095e#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835225&amp;amp;idx=1&amp;amp;sn=e18c2f4f21e70fdc9aaa0b941adeb448&amp;amp;chksm=f0dc9d25c7ab1433b9c6eb802be36998121afaed17253ba599d1d2e972a1db8ba7767044095e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;DDD权限平台建模与实战(附代码)&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835179_2&quot; data-recommend-article-time=&quot;1641861000&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/sz_mmbiz_jpg/aCASXoK2nU5lJrmrBS1XpNS32JLwuia1rE7KkZztLGebTicEOXFCjAiaNIVxIRvkszMjxRWibpCRkW8IyzFGdV8ZgQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;异地多活实践与设计思考点归纳&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835179&amp;amp;idx=2&amp;amp;sn=2c5609f25636822a9adfb96b9ccc3c7c&amp;amp;chksm=f0dc9d57c7ab1441669e188145dd7d48b7076bda6b7059cf4f0ed104df5721add3dbde14260a#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835179&amp;amp;idx=2&amp;amp;sn=2c5609f25636822a9adfb96b9ccc3c7c&amp;amp;chksm=f0dc9d57c7ab1441669e188145dd7d48b7076bda6b7059cf4f0ed104df5721add3dbde14260a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;异地多活实践与设计思考点归纳&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835169_1&quot; data-recommend-article-time=&quot;1641774600&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/MOwlO0INfQqSK8oGvx1a0AUYniaMRY8bUqtJscDwSdADZZvz0l7R5xOBkot7noLaKVcLPRnbYHbUoEcoaaU2sKw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;技术经理：别当超级英雄！&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835169&amp;amp;idx=1&amp;amp;sn=2cdada0c230f33ddfb208a021d7592d2&amp;amp;chksm=f0dc9d5dc7ab144bc4d1e24113738965866d7a1c7c460d31b85cd42b67417060299291ac18b0#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835169&amp;amp;idx=1&amp;amp;sn=2cdada0c230f33ddfb208a021d7592d2&amp;amp;chksm=f0dc9d5dc7ab144bc4d1e24113738965866d7a1c7c460d31b85cd42b67417060299291ac18b0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;技术经理：别当超级英雄！&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835162_1&quot; data-recommend-article-time=&quot;1641342600&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHopOTFBC2bGGQZW7AjIoznwcDoibnoGdawPjfhT4FNXqTjawZibVPXzwZFWYgFG8DDybepTZC5Azzkg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;天画-codeMaker组件化架构升级实践&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835162&amp;amp;idx=1&amp;amp;sn=656aa6d6262b9aa7ba58655fdc1881e9&amp;amp;chksm=f0dc9d66c7ab14706964a4523a0c32d06fa91cfbe9c2a5e7ada4b3132d6a3fb55945672e8926#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835162&amp;amp;idx=1&amp;amp;sn=656aa6d6262b9aa7ba58655fdc1881e9&amp;amp;chksm=f0dc9d66c7ab14706964a4523a0c32d06fa91cfbe9c2a5e7ada4b3132d6a3fb55945672e8926&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;天画-codeMaker组件化架构升级实践&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835101_2&quot; data-recommend-article-time=&quot;1640824200&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHq4aOFXia5jslCBYDSgibA8VR4RpYbAO2NDuRQ1ia43CPx3Y38ZIDQbwAoBqHo8QOTHqheRC6CAVWIyQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;干掉visio，这个画图神器真的绝了！！！&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835101&amp;amp;idx=2&amp;amp;sn=3473b347604ecf3546c7d3f0cd0a11ea&amp;amp;chksm=f0dc9ca1c7ab15b76af1f2411e54084923fc843d395b5c848490af5c21b2fe9d55193503120d#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835101&amp;amp;idx=2&amp;amp;sn=3473b347604ecf3546c7d3f0cd0a11ea&amp;amp;chksm=f0dc9ca1c7ab15b76af1f2411e54084923fc843d395b5c848490af5c21b2fe9d55193503120d&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;干掉visio，这个画图神器真的绝了！！！&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2651835088_1&quot; data-recommend-article-time=&quot;1640651400&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_jpg/3xsFRgx4kHqg8cwTCRAn5XqAevUd0icbnQSNcsmdgvl2rhQsu2dEFW3TEfzC6Bbrt8xichicsWsZ3mNicC0rXibypBg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;RedisJson 是什么？比ES快 500 倍？&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835088&amp;amp;idx=1&amp;amp;sn=87e4561dfa8baf897647f09dbdf8ac39&amp;amp;chksm=f0dc9cacc7ab15ba11d85a2983702e079068896349f3814c71e083dcb3e6c78dd24dd84fc3f8#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;amp;mid=2651835088&amp;amp;idx=1&amp;amp;sn=87e4561dfa8baf897647f09dbdf8ac39&amp;amp;chksm=f0dc9cacc7ab15ba11d85a2983702e079068896349f3814c71e083dcb3e6c78dd24dd84fc3f8&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;RedisJson 是什么？比ES快 500 倍？&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3203125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3xsFRgx4kHroUReIFtPr1aREjjBpxfXC2WV0orcb6qeLZIXWFibDoFGCL9lK5L6Ixem7VbEa9G9LUiaTcibA8rN0w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>85be7a012e69058b109d75da09ef3f00</guid>
<title>[推荐] ClickHouse使用实践与规范</title>
<link>https://toutiao.io/k/fb7mdkl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIwNTUxNTI1Ng==&amp;amp;action=getalbum&amp;amp;album_id=2271725946531643400#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2271725946531643400&quot; data-tag_source=&quot;1&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#ClickHouse&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;1个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;hr/&gt;&lt;section label=&quot;Copyright Reserved by PLAYHUDONG.&quot; donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;导读：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ClickHouse作为一款开源列式数据库管理系统（DBMS）近年来备受关注，主要用于数据分析（OLAP）领域。作者根据以往经验和遇到的问题，总结出一些基本的开发和使用规范，以供使用者参考。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着公司业务数据量日益增长，数据处理场景日趋复杂，急需一种具有高可用性和高性能的数据库来支持业务发展，ClickHouse是俄罗斯的搜索公司Yandex开源的MPP架构的分析引擎，号称比事务数据库快100-1000倍，最大的特色是高性能的向量化执行引擎，而且功能丰富、可靠性高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在过去的一年中，杭研DBA团队已经支撑网易集团内部多个事业部上线使用，集群规模共计十几套，CPU近3000核，每日近千亿数据入库，千亿级别表查询可在秒级完成，大大提升了业务原有OLAP架构的效能，覆盖的业务场景包括：用户行为日志分析，进行PV、UV、留存、转化漏斗和操作，包括游戏反外挂数据统计分析；用户画像，人群圈定和问卷投放；AB实验数据的实时计算与分析；机器和业务日志的分析、监控、查询等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;1&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;ClickHouse应用场景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 写在前面&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）如果你的业务预算或机器资源有限，强烈不推荐使用clickhouse，因为这套架构成本比较高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）最小集群部署所需机器：ck节点需要2台256G内存/40c cpu物理机，磁盘使用SSD，加上3台zookeeper和2台chproxy应用主机或者云主机。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）Clickhouse自带了丰富的功能来应对复杂的业务场景和大数据量，所以在使用期间需要运维和开发侧都投入人力对这些功能(表引擎类型)学习和掌握。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 业务在数据层的表现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）业务大多数是读请求，存储宽表，无大字段，较少的并发(单台100-200qps左右)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）数据批写入（1000条以上，线上业务建议5w-10w），不修改或少修改已添加的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）无事务要求，对数据一致性要求低。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）对于简单查询，允许延迟大约50毫秒，每一个查询除了一个大表外都很小。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（5）处理单个查询时需要高吞吐量（每个服务器每秒高达数十亿行）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.具体业务场景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）用户行为分析，精细化运营分析：日活，留存率分析，路径分析，有序漏斗转化率分析，Session分析等；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）实时日志分析，监控分析；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）实时数仓。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;表引擎选择&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ClickHouse表引擎一共分为四个系列，分别是Log、MergeTree、Integration、Special。其中包含了两种特殊的表引擎Replicated、Distributed，功能上与其他表引擎正交，目前业务上主要使用MergeTree系列，配合使用Mview和Distributed引擎。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOW6WfmLxxsr8zTZKfrrFxlsgx5RgYT8VaiarBialb3j21bhNRrLkC64Wo0iaf0yuTAYfcdM5t1T3Vibhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ClickHouse 包含以下几种常用的引擎类型：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;MergeTree 引擎：该系列引擎是执行高负载任务的最通用和最强大的表引擎，它们的特点是可以快速插入数据以及进行后续的数据处理。该系列引擎还同时支持数据复制（使用Replicated的引擎版本），分区 (partition) 以及一些其它引擎不支持的额外功能。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Log 引擎：该系列引擎是具有最小功能的轻量级引擎。当你需要快速写入许多小表（最多约有100万行）并在后续任务中整体读取它们时使用该系列引擎是最有效的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;集成引擎：该系列引擎是与其它数据存储以及处理系统集成的引擎，如 Kafka，MySQL 以及 HDFS 等，使用该系列引擎可以直接与其它系统进行交互，但也会有一定的限制，如确有需要，可以尝试一下。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;特殊引擎：该系列引擎主要用于一些特定的功能，如 Distributed 用于分布式查询，MaterializedView 用来聚合数据，以及 Dictionary 用来查询字典数据等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在所有的表引擎中，最为核心的当属MergeTree系列表引擎，这些表引擎拥有最为强大的性能和最广泛的使用场合。对于非MergeTree系列的其他引擎而言，主要用于特殊用途，场景相对有限。而MergeTree系列表引擎是官方主推的存储引擎，支持几乎所有ClickHouse核心功能，下面主要介绍MergeTree系列表引擎：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. MergeTree表引擎&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;MergeTree在写入一批数据时，数据总会以数据片段的形式写入磁盘，且数据片段不可修改。为了避免片段过多，ClickHouse会通过后台线程，定期合并这些数据片段，属于相同分区的数据片段会被合成一个新的片段。这种数据片段往复合并的特点，也正是合并树名称的由来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; MergeTree作为家族系列最基础的表引擎，主要有以下特点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 建表语法：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;(   name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1] [TTL expr1],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2] [TTL expr2],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    INDEX index_name1 expr1 TYPE type1(...) GRANULARITY value1,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    INDEX index_name2 expr2 TYPE type2(...) GRANULARITY value2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) ENGINE = MergeTree()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ORDER BY expr&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[PARTITION BY expr]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[PRIMARY KEY expr]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[SAMPLE BY expr]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[TTL expr [DELETE|TO DISK &#x27;xxx&#x27;|TO VOLUME &#x27;xxx&#x27;], ...]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[SETTINGS name=value, ...]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ENGINE：ENGINE = MergeTree()，MergeTree引擎没有参数&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ORDER BY：排序字段。比如ORDER BY (Col1, Col2)，值得注意的是，如果没有指定主键，默认情况下 sorting key(排序字段)即为主键。如果不需要排序，则可以使用ORDER BY tuple()语法，这样的话，创建的表也就不包含主键。这种情况下，ClickHouse会按照插入的顺序存储数据。&lt;/span&gt;&lt;span&gt;必选。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;PARTITION BY：分区字段，&lt;/span&gt;&lt;span&gt;强烈建议指定。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;PRIMARY KEY：指定主键，如果排序字段与主键不一致，可以单独指定主键字段。否则默认主键是排序字段。可选。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;SAMPLE BY：采样字段，如果指定了该字段，那么主键中也必须包含该字段。比如SAMPLE BY intHash32(UserID) ORDER BY (CounterID, EventDate, intHash32(UserID))。可选。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;TTL：数据的存活时间。在MergeTree中，可以为某个列字段或整张表设置TTL。当时间到达时，如果是列字段级别的TTL，则会删除这一列的数据；如果是表级别的TTL，则会删除整张表的数据。&lt;/span&gt;&lt;span&gt;大表强烈建议指定。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;SETTINGS：额外的参数配置。一般设置index_granularity=8192 ，可选。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. ReplicatedMergeTree表引&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ReplicatedMergeTree使得以上 MergeTree 家族拥有副本机制，保证高可用，用于生产环境，对于大数据量的表来说不推荐使用，因为副本是基于zk做数据同步的，大数据量会对zk造成巨大压力，成为整个ck整个集群瓶颈。业务可以根据数据重要程度在性能和数据副本之间做选择。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;建表示例：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;TABLE&lt;/span&gt; [&lt;span class=&quot;code-snippet__keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;EXISTS&lt;/span&gt;] [db.]table_name [&lt;span class=&quot;code-snippet__keyword&quot;&gt;ON&lt;/span&gt; CLUSTER cluster]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;`id`&lt;/span&gt; Int64, &lt;span class=&quot;code-snippet__string&quot;&gt;`ymd`&lt;/span&gt; Int64)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;ENGINE&lt;/span&gt; = ReplicatedMergeTree(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;/clickhouse/tables/replicated/{shard}/test&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;{replica}&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;BY&lt;/span&gt; ymd&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;/clickhouse/tables/ 这一部分指定的是在ZK上创建的路径地址，可随意变换只要记得即可&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;{shard} 指的是分片的标志，同一个分片内的所有机器应该保持相同。建议使用使用的是集群名+分片名的配置也就是{layer}-{shard}，这里的数据就是在macros中配置的属性&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;test 建议使用表名称&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;{replica} 参数建议在macros配置成机器的hostname，因为每台机器的hostname都是不一样的，因此就能确保每个表的识别符都是唯一的了&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. ReplacingMergeTree表引&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上文提到MergeTree表引擎无法对相同主键的数据进行去重，ClickHouse提供了ReplacingMergeTree引擎，可以针对相同主键的数据进行去重，它能够在合并分区时删除重复的数据。值得注意的是，ReplacingMergeTree只是在一定程度上解决了数据重复问题，但是并不能完全保障数据不重复。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;建表语法：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;(   name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) ENGINE = ReplacingMergeTree([ver])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[PARTITION BY expr]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[ORDER BY expr]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[PRIMARY KEY expr]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[SAMPLE BY expr]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[SETTINGS name=value, ...]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[ver]：可选参数，列的版本，可以是UInt、Date或者DateTime类型的字段作为版本号。该参数决定了数据去重的方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当没有指定[ver]参数时，保留最新的数据；如果指定了具体的值，保留最大的版本数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注意点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）去重规则&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ReplacingMergeTree是支持对数据去重的，去除重复数据时，是以ORDERBY排序键为基准的，而不是PRIMARY KEY。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）何时删除重复数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在执行分区合并时，会触发删除重复数据。optimize的合并操作是在后台执行的，无法预测具体执行时间点，除非是手动执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）不同分区的重复数据不会被去重&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ReplacingMergeTree是以分区为单位删除重复数据的。只有在相同的数据分区内重复的数据才可以被删除，而不同数据分区之间的重复数据依然不能被剔除。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. SummingMergeTree表引&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该引擎继承了MergeTree引擎，当合并 SummingMergeTree 表的数据片段时，ClickHouse 会把所有具有相同主键的行合并为一行，该行包含了被合并的行中具有数值数据类型的列的汇总值，即如果存在重复的数据，会对对这些重复的数据进行合并成一条数据，类似于group by的效果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐将该引擎和 MergeTree 一起使用。例如，将完整的数据存储在 MergeTree 表中，并且使用 SummingMergeTree 来存储聚合数据。这种方法可以避免因为使用不正确的主键组合方式而丢失数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果用户只需要查询数据的汇总结果，不关心明细数据，并且数据的汇总条件是预先明确的，即GROUP BY的分组字段是确定的，可以使用该表引擎。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;建表语法：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;(   name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2],    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ENGINE = SummingMergeTree([columns]) -- 指定合并汇总字段&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[PARTITION BY expr]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[ORDER BY expr]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[SAMPLE BY expr]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[SETTINGS name=value, ...]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 注意点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 要保证PRIMARY KEY expr指定的主键是ORDER BY expr 指定字段的前缀，比如&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; -- 如下情况是允许的：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;ORDER BY (A,B,C)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;KEY A&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;-- 如下情况会报错：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;http&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;DB::Exception: Primary key must be a prefix of the sorting key&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ORDER BY (A,B,C)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;PRIMARY KEY B&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种强制约束保障了即便在两者定义不同的情况下，主键仍然是排序键的前缀，不会出现索引与数据顺序混乱的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;SummingMergeTree是根据什么对两条数据进行合并的用ORBER BY排序键作为聚合数据的条件Key。即如果排序key是相同的，则会合并成一条数据，并对指定的合并字段进行聚合。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;仅对分区内的相同排序key的数据行进行合并以数据分区为单位来聚合数据。当分区合并时，同一数据分区内聚合Key相同的数据会被合并汇总，而不同分区之间的数据则不会被汇总。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果没有指定聚合字段，会怎么聚合如果没有指定聚合字段，则会按照非主键的数值类型字段进行聚合&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对于非汇总字段的数据，该保留哪一条如果两行数据除了排序字段相同，其他的非聚合字段不相同，那么在聚合发生时，会保留最初的那条数据，新插入的数据对应的那个字段值会被舍弃。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5. Aggregatingmergetree表引&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该表引擎继承自MergeTree，可以使用 AggregatingMergeTree 表来做增量数据统计聚合。如果要按一组规则来合并减少行数，则使用 AggregatingMergeTree 是合适的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;AggregatingMergeTree是通过预先定义的聚合函数计算数据并通过二进制的格式存入表内。与SummingMergeTree的区别在于：SummingMergeTree对非主键列进行sum聚合，而AggregatingMergeTree则可以指定各种聚合函数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;建表语法：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;(    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1],    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2],    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ENGINE = AggregatingMergeTree()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[PARTITION BY expr]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[ORDER BY expr]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[SAMPLE BY expr]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[SETTINGS name=value, ...]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 6. 其他特殊的表引&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Distributed表引擎&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Distributed表引擎是分布式表的代名词，它自身不存储任何数据，数据都分散存储在某一个分片上，能够自动路由数据至集群中的各个节点，所以Distributed表引擎需要和其他数据表引擎一起协同工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，一张分布式表底层会对应多个本地分片数据表，由具体的分片表存储数据，分布式表与本地分片数据表是一对多的关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Distributed表引擎的定义形式如下所示：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Distributed&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;cluster_name&lt;/span&gt;, &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;database_name&lt;/span&gt;, &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-attr&quot;&gt;[, sharding_key]&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;各个参数的含义分别如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;创建分布式表是读时检查的机制，也就是说对创建分布式表和本地表的顺序并没有强制要求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同样值得注意的是，在上面的语句中使用了ON CLUSTER分布式DDL，这意味着在集群的每个分片节点上，都会创建一张Distributed表，这样便可以从其中任意一端发起对所有分片的读、写请求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;3&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;开发规范&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt; 1. 查询sql编写规范&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）当多表联查时，查询的数据仅从其中一张表出时，可考虑使用IN操作而不是JOIN。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）多表查询性能较差，多表Join时要满足小表在右的原则，右表关联时被加载到内存中与左表进行比较，ClickHouse中无论是Left Join 、Right Join还是Inner Join永远都是拿着右表中的每一条记录到左表中查找该记录是否存在，所以右表必须是小表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）将一些需要关联分析的业务创建成字典表进行join操作，前提是字典表不宜太大，因为字典表会常驻内存。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）禁⽌业务select * ，列存数据,每减少一个字段会减少大量的数据扫描,提升查询效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（5）建议使用 limit 限制返回数据条数使用limit返回指定的结果集数量，不会进行向下扫描，大大提升了查询效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;6）查询时如果可以建议带上分区键查询,可以有效减少数据扫描量,提升查询效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（7）CK的稀疏索引使得点查询(即kv类型的查询)性能不佳，千万不要把它简单当做关系型数据库进行查询。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（8）使用Global优化分布式子查询，避免出现查询指数级放大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（9）使用 uniqCombined 替代 distinctuniqCombined 对去重进行了优化，通过近似去重提升十倍查询性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（10）尽量不去使用字符串类型，时间类型最终会转换成数值类型进行处理，数值类型在执行效率和存储上远好过字符串。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（11）ClickHouse的分布式表性能性价比不如物理表高，建表分区字段值不宜过多，防止数据导入过程磁盘可能会被打满。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（12）不要在唯一列或大基数列上进行分组或去重操作，基数太大会消耗过多的io和内存。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（13）CPU一般在50%左右会出现查询波动，达到70%会出现大范围的查询超时，CPU是最关键的指标，要非常关注。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 2. 数据写入注意事项&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）不适合高并发写入，最好还是从异步化队列写入，batch insert 5w-10w 起步，尽量不要执行单条或插入操作，会产生大量小分区文件，给后台merge任务带来巨大压力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）几乎完全不支持update/delete，也不支持事务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）建议表要指定分区键,尤其是数据量大的表，插入/查询/合并都是以分区为单位，合理的分区可以提升整体性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）分区不建议太多，如果分区太多，会因需要打开的文件描述符过多导致查询效率不佳。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（5）数据在写入ClickHouse前预先的对数据进行分组，避免一次插入的数据属于多个分区。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（6）注意MerTree 主键允许存在重复数据(ReplacingMergeTree可以在分区内去重)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 3. 建表规范&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）本地表命名格式：{tab_name}_local，分布式表命名格式：{tab_name}_shard 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）物化视图命名规范：&lt;/span&gt;&lt;span&gt;{tabl_name_xxx}_mv 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）尽量不要使用Nullable类型,该类型对性能有一定影响,且不能包含在索引中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）合理设置分区，所有本地表使用order by关键字指定分区字段，建议采用日期作为一级分区。&lt;/span&gt;&lt;span&gt;默认 order by 字段作为主键。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;5）如果表中不是必须保留全量历史数据，建议指定TTL，可以免去手动过期历史数据的麻烦。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（6）所有复制引擎表建表指定 use_minimalistic_part_header_in_zookeeper=1。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 本地ReplicatedMergeTree表建表模板如下所示：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CREATE TABLE IF NOT EXISTS ads. ads_af_city_complaint_1d _local ON cluster ycdata_3shards_3replicas&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;(`id` UInt64 COMMENT &#x27;序号&#x27;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;`order_id` UInt64 COMMENT &#x27;订单号&#x27;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;`gross_weight` UInt64  COMMENT &#x27;权重&#x27;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;`create_time` Date COMMENT &#x27;创建时间&#x27;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;`event` String COMMENT &#x27;事件&#x27;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ENGINE = ReplicatedMergeTree(&#x27;/clickhouse/table/{shared}/ads_af_city_complaint_1d _local&#x27;, &#x27;{replica}&#x27;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;PARTITION BY create_time&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ORDER BY id&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;TTL create_time + toIntervalDay(90)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SETTINGS index_granularity = 8192, use_minimalistic_part_header_in_zookeeper = 1;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解释：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;4&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;集群架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt; 1. 常用架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为简化业务使用方式，降低业务使用成本。对clickhouse集群的使用做一些约束，能够提升交付速度，提高标准化程度，降低使用成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以4台机器为例，集群模式固定为2分片2副本模式，若数据量较大4台机器不够时，可以增加2台机器，集群模式未3分片每个分片2副本形式，另外需要3台zookeeper和2台chproxy应用主机或者云主机，两台chproxy使用NLB管理，程序直连NLB IP。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于单表数据量超过100亿数据的表不建议使用副本表，建议采用4分片0副本架构。(具体架构可以和DBA沟通后确定)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总体上讲，一句话总结：业务访问统一入口，读分布式表，写本地表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7942028985507247&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOW6WfmLxxsr8zTZKfrrFxlspNRNGAOMicnECwEOBp7wIEUzraoC0rjRiadAHLkQLrSvxrYh70hyLZuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 优势：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;限制：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）业务写入本地表(以_local结尾),读分布式表(以_shard结尾表)&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务表名为musci_bi_t1,则写入musci_bi_t1_local 通过proxy代理轮询写入底层节点保证数据分布均衡；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;读musci_bi_t1_shard表,同样可以通过proxy将shard表路由压力分散到底层节点。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;（2）业务写入时需要批量写入,需要业务去保证每批次数据量大小尽量一致,以保证数据尽量均匀分布。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）业务每批次写入时都要重新获取连接,禁止使用长连接否则无法使用负载均衡能力,会导致数据分布不均衡。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）不支持跨集群访问&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因业务每批次写入数据量的不同，会导致数据分布的不均匀。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;运维注意点：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对业务不透明，insert需要指定local结尾表,查询需要查sharded表,需要与业务确认；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;副本同步使用底层ReplicatedMergeTree引擎,提升副本同步性能以及数据一致性（&lt;/span&gt;&lt;span&gt;需要手动创建底层表,保证主备关系正确）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用on cluster 语法在每个节点中创建分布式表,提升建表效率。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. zookeeper的关键作用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ClickHouse中依赖Zookeeper解决的问题可以分为两大类：分布式DDL执行、ReplicatedMergeTree表主备节点之间的状态同步。zk的性能会影响整个集群的性能表现。使用复制表之后，随着数据量的增加，zookeeper可能成为集群瓶颈，zk集群建议机器配置如下：3台32G/4c机器，万兆网卡，磁盘80G-200G。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以看作ck把zookeeper用成了目录服务，日志服务和协调服务，当znode达到几百万后，zk出现异常，常见是连接失败，此时有些表会出现readonly模式。头条对这个问题的处理方式是改写源码调整ck对zk的使用方式，为zk减重。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果业务上单表数据量较大并且希望使用复制表，务必在建表时指定use_minimalistic_part_header_in_zookeeper参数为1，达到压缩zk数据的目的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8554817275747508&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOW6WfmLxxsr8zTZKfrrFxlsmRJXSRzQ0mfBEJpEZR5RFWnrq5FibSA6AQc1VOolfxAbH7dHnqQuGUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1204&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. chproxy&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;chproxy官方推荐的是专用于ClickHouse数据库的HTTP代理和负载均衡器，使用go语言实现，目前仅支持http协议。在Clickhouse集群中，每一台机器都是单独的实例，我们可以使用其中的一台作为查询机器。此时如何更好的完成负载均衡是我们所关注的，&lt;/span&gt;&lt;span/&gt;&lt;span&gt;chproxy即是这么一个工具。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;特性:&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;用户路由和响应缓存。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;灵活的限制。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;自动SSL证书续订。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;chroxy连接测试：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;echo &#x27;&lt;span class=&quot;code-snippet__keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;databases&lt;/span&gt;;&#x27; | curl &#x27;http://10.200.161.49:9009/?user=writeuser&amp;amp;password=xxxx&#x27; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于chroxy参数配置可参照如下文档：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://github.com/ContentSquare/chproxy&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;5&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;客户端工具选择&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. DBeave&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DBeaver是免费和开源（GPL）为开发人员和数据库管理员通用数据库工具。易用性是该项目的主要目标，是经过精心设计和开发的数据库管理工具。免费、跨平台、基于开源框架和允许各种扩展写作（插件）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. Superse&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Superset 是一款由 Airbnb 开源的“现代化的企业级 BI（商业智能） Web 应用程序”，其通过创建和分享 dashboard，为数据分析提供了轻量级的数据查询和可视化方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. Tabi&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;功能和部署方式与Superset相似，可参考如下文档：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://github.com/smi2/tabix.ui/releases&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;6&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;可用性说明&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根据选择的集群架构不同， clickhouse集群表现出的可用性也不同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）数据的读写高可用就是依赖复制表引擎创建多副本机制保证。如果Clickhouse集群使用是多分片多副本架构，当一个副本所在的机器宕机后，chproxy层会自动路由到可用的副本读写数据；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）如果Clickhouse集群只用了sharding分片，没有用到复制表作为数据副本，那么单台机器宕机只会影响到单个数据分片的读写；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）当zk集群不可用时，整个集群的写入会都会受影响，不管有没有使用复制表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据可用性要求越高，意味着投入更多的资源，单台机器的资源利用率越低，业务可根据数据重要程度灵活选择，不过Clickhouse的定位是在线分析olap系统，建议业务方将ck里的数据也定义为二级数据，数据丢失后是可以再生成的，从而控制整体架构的成本，提高单台机器的资源利用率。同时强烈建议业务不要强依赖Clickhouse，要有一定的兜底和熔断机制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;7&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;span&gt;集群配置参数调&lt;/span&gt;优&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. max_concurrent_querie&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最大并发处理的请求数(包含select,insert等)，默认值100，推荐150(不够再加)，在我们的集群中出现过”max concurrent queries”的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. max_bytes_before_external_sor&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当order by已使用max_bytes_before_external_sort内存就进行溢写磁盘(基于磁盘排序)，如果不设置该值，那么当内存不够时直接抛错，设置了该值order by可以正常完成，但是速度相对内存来说肯定要慢点(实测慢的非常多，无法接受)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. background_pool_size&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后台线程池的大小，merge线程就是在该线程池中执行，当然该线程池不仅仅是给merge线程用的，默认值16，推荐32提升merge的速度(CPU允许的前提下)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. max_memory_usag&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;单个SQL在单台机器最大内存使用量，该值可以设置的比较大，这样可以提升集群查询的上限。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5. max_memory_usage_for_all_querie&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;单机最大的内存使用量可以设置略小于机器的物理内存(留一点内操作系统)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6. max_bytes_before_external_group_b&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在进行group by的时候，内存使用量已经达到了max_bytes_before_external_group_by的时候就进行写磁盘(基于磁盘的group by相对于基于磁盘的order by性能损耗要好很多的)，一般max_bytes_before_external_group_by设置为max_memory_usage / 2，原因是在clickhouse中聚合分两个阶段：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些内存参数强烈推荐配置上，增强集群的稳定性避免在使用过程中出现莫名其妙的异常。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;学习资料：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101582&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;作者简介&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p hm_fix=&quot;322:369&quot;&gt;&lt;span&gt;刘彦鹏，网易杭州研究院数据库工程师。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;105280&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;获取最新动态&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;最新的推文无法在第一时间看到？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;以前的推文还需要复杂漫长的翻阅？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;进入“网易有数”公众号介绍页，点击右上角&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;“设为星标”&lt;/strong&gt;&lt;/span&gt;！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;置顶公众号，从此消息不迷路&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.652&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sYBGQlzfEOXMVDJu304Kjzpsibf96dricaQcaJKrxpViaVWwc8ciaIN33NlOzxoMeaN1icSo093icXVLKylAp5sE5M9A/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;span&gt;设为星标，最新推文不迷路&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwNTUxNTI1Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOV4Bfic2e5zqTMCl0XxmMuVq1XpDOBrbXicVB4KmrEXglsWcnMREoQXfX24sscdvQIR74ic3SiciaLoMFA/0?wx_fmt=png&quot; data-nickname=&quot;网易有数&quot; data-alias=&quot;Youdata_Netease&quot; data-signature=&quot;网易有数是网易数帆旗下大数据技术与服务品牌，以“数据价值”为导向，聚焦于企业 “看数”、“管数”、“用数”等业务场景，提供全链路大数据技术及产品服务，致力于盘活企业数据生产力，加速实现数字化转型。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100003451&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sYBGQlzfEOXECeWKgyIia3c7bom7Ir4rh4qI4XdxuRW4lyHudFyglytmLrOM4yYOWs3XNqqj0XlXTEw8icZ2Eb1Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;317:401&quot;&gt;分享，点赞，在看，安排一下？&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>90487b18bff80772fa21fb43e4a6588f</guid>
<title>[推荐] 你分库分表的姿势对么？——详谈水平分库分表</title>
<link>https://toutiao.io/k/eteqw6s</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;22&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;作者：vivo平台产品开发团队-Han Lei&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、背景&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;提起分库分表，对于大部分服务器开发来说，其实并不是一个新鲜的名词。随着业务的发展，我们表中的数据量会变的越来越大，字段也可能随着业务复杂度的升高而逐渐增多，我们为了解决单表的查询性能问题，一般会进行分表操作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;同时我们业务的用户活跃度也会越来越高，并发量级不断加大，那么可能会达到单个数据库的处理能力上限。此时我们为了解决数据库的处理性能瓶颈，一般会进行分库操作。不管是分库操作还是分表操作，我们一般都有两种方式应对，一种是垂直拆分，一种是水平拆分。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;关于两种拆分方式的区别和特点，互联网上参考资料众多，很多人都写过相关内容，这里就不再进行详细赘述，有兴趣的读者可以自行检索。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;此文主要详细聊一聊，我们最实用最常见的水平分库分表方式中的一些特殊细节，希望能帮助大家避免走弯路，找到最合适自身业务的分库分表设计。&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;87&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;【注1】本文中的案例均基于Mysql数据库，下文中的分库分表统指水平分库分表。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;【注2】后文中提到到M库N表，均指共M个数据库，每个数据库共N个分表，即总表个数其实为M*N。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、什么是一个好的分库分表方案？&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.1 方案可持续性&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;前期业务数据量级不大，流量较低的时候，我们无需分库分表，也不建议分库分表。但是一旦我们要对业务进行分库分表设计时，就一定要考虑到分库分表方案的可持续性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;那何为可持续性？&lt;/strong&gt;其实就是：业务数据量级和业务流量未来进一步升高达到新的量级的时候，我们的分库分表方案可以持续使用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一个通俗的案例，假定当前我们分库分表的方案为10库100表，那么未来某个时间点，若10个库仍然无法应对用户的流量压力，或者10个库的磁盘使用即将达到物理上限时，我们的方案能够进行平滑扩容。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在后文中我们将介绍下目前业界常用的翻倍扩容法和一致性Hash扩容法。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.2 数据偏斜问题&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;一个良好的分库分表方案，它的数据应该是需要比较均匀的分散在各个库表中的。如果我们进行一个拍脑袋式的分库分表设计，很容易会遇到以下类似问题：&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;135&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;a、某个数据库实例中，部分表的数据很多，而其他表中的数据却寥寥无几，业务上的表现经常是延迟忽高忽低，飘忽不定。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;b、数据库集群中，部分集群的磁盘使用增长特别块，而部分集群的磁盘增长却很缓慢。每个库的增长步调不一致，这种情况会给后续的扩容带来步调不一致，无法统一操作的问题。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这边我们定义分库分表最大数据偏斜率为 ：（数据量最大样本 - 数据量最小样本）/ 数据量最小样本。一般来说，如果我们的最大数据偏斜率在5%以内是可以接受的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100008465&quot; data-ratio=&quot;0.5117773019271948&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7ibSqqgkw7u8SC7X6Jv4YzZgAnfMNvQibZvq4LtEbZeoBN27oY1KicgZHAXDu0Fs8ax3HeUjQYh2pKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;467&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、常见的分库分表方案&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3.1 Range分库分表&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;顾名思义，该方案根据数据范围划分数据的存放位置。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;举个最简单例子，我们可以把订单表按照年份为单位，每年的数据存放在单独的库（或者表）中。如下图所示：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt; * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;code-snippet__title&quot;&gt;rangeShardByYear&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String orderId)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; year = Integer.parseInt(orderId.substring(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;t_order_&quot;&lt;/span&gt; + year;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过数据的范围进行分库分表，该方案是最朴实的一种分库方案，它也可以和其他分库分表方案灵活结合使用。时下非常流行的分布式数据库：TiDB数据库，针对TiKV中数据的打散，也是基于Range的方式进行，将不同范围内的[StartKey,EndKey)分配到不同的Region上。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面我们看看该方案的缺点：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;39&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;这点非常容易被遗忘，尤其是稳定跑了几年没有迭代任务，或者人员又交替频繁的模块。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里就需要注意了，因为是通过年份进行分库分表，那么元旦的那一天，你的定时任务很有可能会漏掉上一年的最后一天的数据扫描。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3.2 Hash分库分表&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;虽然分库分表的方案众多，但是Hash分库分表是最大众最普遍的方案，也是本文花最大篇幅描述的部分。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;针对Hash分库分表的细节部分，相关的资料并不多。大部分都是阐述一下概念举几个示例，而细节部分并没有特别多的深入，如果未结合自身业务贸然参考引用，后期非常容易出现各种问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在正式介绍这种分库分表方式之前，我们先看几个常见的错误案例。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;常见错误案例一：非互质关系导致的数据偏斜问题&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ShardCfg &lt;span class=&quot;code-snippet__title&quot;&gt;shard&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String userId)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; hash = userId.hashCode();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 对库数量取余结果为库序号&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; dbIdx = Math.&lt;span class=&quot;code-snippet__built_in&quot;&gt;abs&lt;/span&gt;(hash % DB_CNT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 对表数量取余结果为表序号&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; tblIdx = Math.&lt;span class=&quot;code-snippet__built_in&quot;&gt;abs&lt;/span&gt;(hash % TBL_CNT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ShardCfg(dbIdx, tblIdx);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;上述方案是初次使用者特别容易进入的误区，用&lt;span&gt;Hash&lt;/span&gt;值分别对分库数和分表数取余，得到库序号和表序号。其实稍微思索一下，我们就会发现，以10库100表为例，如果一个&lt;span&gt;Hash&lt;/span&gt;值对100取余为0，那么它对10取余也必然为0。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这就意味着只有0库里面的0表才可能有数据，而其他库中的0表永远为空！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;类似的我们还能推导到，0库里面的共100张表，只有10张表中(个位数为0的表序号)才可能有数据。这就带来了非常严重的数据偏斜问题，因为某些表中永远不可能有数据，最大数据偏斜率达到了无穷大。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那么很明显，该方案是一个未达到预期效果的错误方案。数据的散落情况大致示意图如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;303&quot; data-backw=&quot;578&quot; data-fileid=&quot;100008466&quot; data-ratio=&quot;0.5237449118046132&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7ibSqqgkw7u8SC7X6Jv4YzZpIKzw3xB1jE6WvhrjwNfpRA2W6cPuvco1Lqm6bxgsmWChU7IegDqaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;737&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;事实上，只要库数量和表数量非互质关系，都会出现某些表中无数据的问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;证明如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100008467&quot; data-ratio=&quot;0.4548440065681445&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7ibSqqgkw7u8SC7X6Jv4YzZJz6wCq1zwxLI062iahVEGn80PS0RcDfAdQ5hQWrB5kXPpwBcYyCrrKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;609&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;那么是不是只要库数量和表数量互质就可用用这种分库分表方案呢？比如我用11库100表的方案，是不是就合理了呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;答案是否定的，我们除了要考虑数据偏斜的问题，还需要考虑可持续性扩容的问题，一般这种&lt;span&gt;Hash&lt;/span&gt;分库分表的方案后期的扩容方式都是通过翻倍扩容法，那11库翻倍后，和100又不再互质。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然，如果分库数和分表数不仅互质，而且分表数为奇数(例如10库101表)，则理论上可以使用该方案，但是我想大部分人可能都会觉得使用奇数的分表数比较奇怪吧。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;常见错误案例二：扩容难以持续&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;如果避开了上述案例一的陷阱，那么我们又很容易一头扎进另一个陷阱，大概思路如下；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们把10库100表看成总共1000个逻辑表，将求得的Hash值对1000取余，得到一个介于[0，999)中的数，然后再将这个数二次均分到每个库和每个表中，大概逻辑代码如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ShardCfg &lt;span class=&quot;code-snippet__title&quot;&gt;shard&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String userId)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// ① 算Hash&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; hash = userId.hashCode();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// ② 总分片数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; sumSlot = DB_CNT * TBL_CNT;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// ③ 分片序号&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; slot = Math.&lt;span class=&quot;code-snippet__built_in&quot;&gt;abs&lt;/span&gt;(hash % sumSlot);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// ④ 计算库序号和表序号的错误案例&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; dbIdx = slot % DB_CNT ;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; tblIdx = slot / DB_CNT ;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ShardCfg(dbIdx, tblIdx);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;该方案确实很巧妙的解决了数据偏斜的问题，只要&lt;span&gt;Hash&lt;/span&gt;值足够均匀，那么理论上分配序号也会足够平均，于是每个库和表中的数据量也能保持较均衡的状态。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100008468&quot; data-ratio=&quot;0.7772357723577236&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7ibSqqgkw7u8SC7X6Jv4YzZiaBvZ7pLrTdsmfFPRC4FlJvHbqGNRXYHQ6JyA7WJhC4lJC08466l5ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;615&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但是该方案有个比较大的问题，那就是在计算表序号的时候，依赖了总库的数量，那么后续翻倍扩容法进行扩容时，会出现扩容前后数据不在同一个表中，从而无法实施。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如上图中，例如扩容前&lt;span&gt;Hash&lt;/span&gt;为1986的数据应该存放在6库98表，但是翻倍扩容成20库100表后，它分配到了6库99表，表序号发生了偏移。这样的话，我们在后续在扩容的时候，不仅要基于库迁移数据，还要基于表迁移数据，非常麻烦且易错。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;看完了上面的几种典型的错误案例，那么我们有哪些比较正确的方案呢？下面将结合一些实际场景案例介绍几种Hash分库分表的方案。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;常用姿势一：标准的二次分片法&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上述错误案例二中，整体思路完全正确，只是最后计算库序号和表序号的时候，使用了库数量作为影响表序号的因子，导致扩容时表序号偏移而无法进行。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;事实上，我们只需要换种写法，就能得出一个比较大众化的分库分表方案。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ShardCfg &lt;span class=&quot;code-snippet__title&quot;&gt;shard2&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String userId)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// ① 算Hash&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; hash = userId.hashCode();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// ② 总分片数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; sumSlot = DB_CNT * TBL_CNT;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// ③ 分片序号&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; slot = Math.&lt;span class=&quot;code-snippet__built_in&quot;&gt;abs&lt;/span&gt;(hash % sumSlot);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// ④ 重新修改二次求值方案&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; dbIdx = slot / TBL_CNT ;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; tblIdx = slot % TBL_CNT ;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ShardCfg(dbIdx, tblIdx);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;大家可以注意到，和错误案例二中的区别就是通过分配序号重新计算库序号和表序号的逻辑发生了变化。它的分配情况如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;426&quot; data-backw=&quot;568&quot; data-fileid=&quot;100008469&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7ibSqqgkw7u8SC7X6Jv4YzZSdnFhxmkHZicZX7P3W6iceeraNwiaNibp2cexGiacNAmHNy1aMMEOVib60fQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;568&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那为何使用这种方案就能够有很好的扩展持久性呢？我们进行一个简短的证明：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100008470&quot; data-ratio=&quot;0.5790251107828656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7ibSqqgkw7u8SC7X6Jv4YzZG1Wg0sVFvdcAhJfwjfTgLpw0gtwLYbiaBiarNibLsAPLThFMHLIMj3r9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;677&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过上面结论我们知道，通过翻倍扩容后，我们的表序号一定维持不变，库序号可能还是在原来库，也可能平移到了新库中(原库序号加上原分库数)，完全符合我们需要的扩容持久性方案。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100008471&quot; data-ratio=&quot;0.8562992125984252&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7ibSqqgkw7u8SC7X6Jv4YzZII2eI7xAY7V3wxpXEO6LoU41HA0pQo1WpicEbq0UibFpqshjdp83B1RQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;508&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【方案缺点】&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1、翻倍扩容法前期操作性高，但是后续如果分库数已经是大几十的时候，每次扩容都非常耗费资源。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2、连续的分片键&lt;span&gt;Hash&lt;/span&gt;值大概率会散落在相同的库中，某些业务可能容易存在库热点（例如新生成的用户&lt;span&gt;Hash&lt;/span&gt;相邻且递增，且新增用户又是高概率的活跃用户，那么一段时间内生成的新用户都会集中在相邻的几个库中）。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;常用姿势二：关系表冗余&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们可以将分片键对应库的关系通过关系表记录下来，我们把这张关系表称为&quot;路由关系表&quot;。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ShardCfg &lt;span class=&quot;code-snippet__title&quot;&gt;shard&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;String userId&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; tblIdx = Math.abs(userId.hashCode() % TBL_CNT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 从缓存获取&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Integer dbIdx = loadFromCache(userId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; == dbIdx) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 从路由表获取&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            dbIdx = loadFromRouteTable(userId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; != dbIdx) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__comment&quot;&gt;// 保存到缓存&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                saveRouteCache(userId, dbIdx);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; == dbIdx) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 此处可以自由实现计算库的逻辑&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            dbIdx = selectRandomDbIdx();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            saveToRouteTable(userId, dbIdx);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            saveRouteCache(userId, dbIdx);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ShardCfg(dbIdx, tblIdx);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;该方案还是通过常规的&lt;span&gt;Hash&lt;/span&gt;算法计算表序号，而计算库序号时，则从路由表读取数据。因为在每次数据查询时，都需要读取路由表，故我们需要将分片键和库序号的对应关系记录同时维护在缓存中以提升性能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上述实例中&lt;strong&gt;selectRandomDbIdx方法&lt;/strong&gt;作用为生成该分片键对应的存储库序号，这边可以非常灵活的动态配置。例如可以为每个库指定一个权重，权重大的被选中的概率更高，权重配置成0则可以将关闭某些库的分配。当发现数据存在偏斜时，也可以调整权重使得各个库的使用量调整趋向接近。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;该方案还有个优点，就是理论上后续进行扩容的时候，仅需要挂载上新的数据库节点，将权重配置成较大值即可，无需进行任何的数据迁移即可完成。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如下图所示：最开始我们为4个数据库分配了相同的权重，理论上落在每个库的数据概率均等。但是由于用户也有高频低频之分，可能某些库的数据增长会比较快。当挂载新的数据库节点后，我们灵活的调整了每个库的新权重。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100008472&quot; data-ratio=&quot;0.44283121597096187&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/4g5IMGibSxt7ibSqqgkw7u8SC7X6Jv4YzZ9icic99AgSdJ8CpmiboWqb2Js9gMZw5qqfKn6icBRakKVlr3T0FbChF5Tw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;551&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;该方案似乎解决了很多问题，那么它有没有什么不适合的场景呢？当然有，该方案在很多场景下其实并不太适合，以下举例说明。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;a、每次读取数据需要访问路由表，虽然使用了缓存，但是还是有一定的性能损耗。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;b、路由关系表的存储方面，有些场景并不合适。例如上述案例中用户id的规模大概是在10亿以内，我们用单库百表存储该关系表即可。但如果例如要用文件MD5摘要值作为分片键，因为样本集过大，无法为每个md5值都去指定关系（当然我们也可以使用md5前N位来存储关系）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;c、&lt;strong&gt;饥饿占位问题，如下详叙&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们知道，该方案的特点是后续无需扩容，可以随时修改权重调整每个库的存储增长速度。但是这个愿景是比较缥缈，并且很难实施的，我们选取一个简单的业务场景考虑以下几个问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;【&lt;strong&gt;业务场景&lt;/strong&gt;】：以用户存放文件到云端的云盘业务为例，需要对用户的文件信息进行分库分表设计，有以下假定场景：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们使用路由表记录每个用户所在的库序号信息。那么该方案会有以下问题：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第一：&lt;/strong&gt;我们总共有2亿个用户，只有3000W个产生过事务的用户。若程序不加处理，用户发起任何请求则创建路由表数据，会导致为大量实际没有事务数据的用户提前创建路由表。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;笔者最初存储云盘用户数据的时候便遇到了这个问题，客户端app会在首页查询用户空间使用情况，这样导致几乎一开始就为每个使用者分配好了路由。随着时间的推移，这部分没有数据的&quot;静默&quot;的用户，随时可能开始他的云盘使用之旅而“复苏”，从而导致它所在的库迅速增长并超过单个库的空间容量极限，从而被迫拆分扩容。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;解决这个问题的方案，其实就是只针对事务操作(例如购买空间，上传数据，创建文件夹等等)才进行路由的分配，这样对代码层面便有了一些倾入。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第二、&lt;/strong&gt;按照前面描述的业务场景，一个用户最终平均有2000条数据，假定每行大小为1K，为了保证B+数的层级在3层，我们限制每张表的数据量在2000W，分表数为100的话，可以得到理论上每个库的用户数不能超过100W个用户。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;也就是如果是3000W个产生过事务的用户，我们需要为其分配30个库，这样会在业务前期，用户平均数据量相对较少的时候，存在非常大的数据库资源的浪费。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;解决第二个问题，我们一般可以将很多数据库放在一个实例上，后续随着增长情况进行拆分。也可以后续针对将满的库，使用常规手段进行拆分和迁移。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;常用姿势三：基因法&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;还是由错误案例一启发，我们发现案例一不合理的主要原因，就是因为库序号和表序号的计算逻辑中，有公约数这个因子在影响库表的独立性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那么我们是否可以换一种思路呢？我们使用相对独立的&lt;span&gt;Hash&lt;/span&gt;值来计算库序号和表序号。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ShardCfg &lt;span class=&quot;code-snippet__title&quot;&gt;shard&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String userId)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; dbIdx = Math.&lt;span class=&quot;code-snippet__built_in&quot;&gt;abs&lt;/span&gt;(userId.substring(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;).hashCode() % DB_CNT );&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; tblIdx = Math.&lt;span class=&quot;code-snippet__built_in&quot;&gt;abs&lt;/span&gt;(userId.hashCode() % TBL_CNT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ShardCfg(dbIdx, tblIdx);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;如上所示，我们计算库序号的时候做了部分改动，我们使用分片键的前四位作为&lt;span&gt;Hash&lt;/span&gt;值来计算库序号。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这也是一种常用的方案，我们称为基因法，即使用原分片键中的某些基因（例如前四位）作为库的计算因子，而使用另外一些基因作为表的计算因子。该方案也是网上不少的实践方案或者是其变种，看起来非常巧妙的解决了问题，然而在实际生成过程中还是需要慎重。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;笔者曾在云盘的空间模块的分库分表实践中采用了该方案，使用16库100表拆分数据，上线初期数据正常。然而当数据量级增长起来后，发现每个库的用户数量严重不均等，故猜测该方案存在一定的数据偏斜。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了验证观点，进行如下测试，随机2亿个用户id（16位的随机字符串），针对不同的M库N表方案，重复若干次后求平均值得到结论如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;8库100表&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;min=248305(dbIdx=2, tblIdx=64), max=251419(dbIdx=7, tblIdx=8), rate= 1.25%            √&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;16库100表&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;min=95560(dbIdx=8, tblIdx=42), max=154476(dbIdx=0, tblIdx=87), rate= 61.65%           ×&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;20库100表&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;min=98351(dbIdx=14, tblIdx=78), max=101228(dbIdx=6, tblIdx=71), rate= 2.93%&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们发现该方案中，分库数为16，分表数为100，数量最小行数仅为10W不到，但是最多的已经达到了15W+，最大数据偏斜率高达61%。按这个趋势发展下去，后期很可能出现一台数据库容量已经使用满，而另一台还剩下30%+的容量。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;该方案并不是一定不行，而是我们在采用的时候，要综合分片键的样本规则，选取的分片键前缀位数，库数量，表数量，四个变量对最终的偏斜率都有影响。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;例如上述例子中，如果不是16库100表，而是8库100表，或者20库100表，数据偏斜率都能降低到了5%以下的可接受范围。所以该方案的隐藏的&quot;坑&quot;较多，我们不仅要估算上线初期的偏斜率，还需要测算若干次翻倍扩容后的数据偏斜率。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;例如你用着初期比较完美的8库100表的方案，后期扩容成16库100表的时候，麻烦就接踵而至。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;常用姿势四：剔除公因数法&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;还是基于错误案例一启发，在很多场景下我们还是希望相邻的&lt;span&gt;Hash&lt;/span&gt;能分到不同的库中。就像N库单表的时候，我们计算库序号一般直接用&lt;span&gt;Hash&lt;/span&gt;值对库数量取余。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那么我们是不是可以有办法去除掉公因数的影响呢？下面为一个可以考虑的实现案例：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ShardCfg &lt;span class=&quot;code-snippet__title&quot;&gt;shard&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String userId)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; dbIdx = Math.&lt;span class=&quot;code-snippet__built_in&quot;&gt;abs&lt;/span&gt;(userId.hashCode() % DB_CNT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算表序号时先剔除掉公约数的影响&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; tblIdx = Math.&lt;span class=&quot;code-snippet__built_in&quot;&gt;abs&lt;/span&gt;((userId.hashCode() / TBL_CNT) % TBL_CNT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ShardCfg(dbIdx, tblIdx);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;经过测算，该方案的最大数据偏斜度也比较小，针对不少业务从N库1表升级到N库M表下，需要维护库序号不变的场景下可以考虑。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;常用姿势五：一致性Hash法&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;一致性Hash算法也是一种比较流行的集群数据分区算法，比如RedisCluster即是通过一致性Hash算法，使用16384个虚拟槽节点进行每个分片数据的管理。关于一致性Hash的具体原理这边不再重复描述，读者可以自行翻阅资料。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这边详细介绍如何使用一致性Hash进行分库分表的设计。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们通常会将每个实际节点的配置持久化在一个配置项或者是数据库中，应用启动时或者是进行切换操作的时候会去加载配置。配置一般包括一个[StartKey,Endkey)的左闭右开区间和一个数据库节点信息，例如：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;503&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;195&quot; data-fileid=&quot;100008473&quot; data-ratio=&quot;0.38911290322580644&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7AWBMjESn4VYZibMW4Z0ScG0EwOmwf17qWyia5Y2OsNDia6qk0D8HZbY9vDVCsQwKD2Zvh88luLJJeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;496&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;示例代码：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; TreeMap&amp;lt;Long, Integer&amp;gt; nodeTreeMap = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; TreeMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@&lt;span class=&quot;code-snippet__function&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 启动时加载分区配置&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    List&amp;lt;HashCfg&amp;gt; cfgList = fetchCfgFromDb();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (HashCfg cfg : cfgList) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        nodeTreeMap.put(cfg.endKey, cfg.nodeIdx);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; ShardCfg &lt;span class=&quot;code-snippet__title&quot;&gt;shard&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String userId)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; hash = userId.hashCode();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; dbIdx = nodeTreeMap.tailMap((&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt;) hash, &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;).firstEntry().getValue();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; tblIdx = Math.&lt;span class=&quot;code-snippet__built_in&quot;&gt;abs&lt;/span&gt;(hash % &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ShardCfg(dbIdx, tblIdx);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们可以看到，这种形式和上文描述的Range分表非常相似，Range分库分表方式针对分片键本身划分范围，而一致性Hash是针对分片键的&lt;span&gt;Hash&lt;/span&gt;值进行范围配置。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;正规的一致性Hash算法会引入虚拟节点，每个虚拟节点会指向一个真实的物理节点。这样设计方案主要是能够在加入新节点后的时候，可以有方案保证每个节点迁移的数据量级和迁移后每个节点的压力保持几乎均等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但是用在分库分表上，一般大部分都只用实际节点，引入虚拟节点的案例不多，主要有以下原因：&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;188&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;a、应用程序需要花费额外的耗时和内存来加载虚拟节点的配置信息。如果虚拟节点较多，内存的占用也会有些不太乐观。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;b、由于mysql有非常完善的主从复制方案，与其通过从各个虚拟节点中筛选需要迁移的范围数据进行迁移，不如通过从库升级方式处理后再删除冗余数据简单可控。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;c、虚拟节点主要解决的痛点是节点数据搬迁过程中各个节点的负载不均衡问题，通过虚拟节点打散到各个节点中均摊压力进行处理。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;而作为OLTP数据库，我们很少需要突然将某个数据库下线，新增节点后一般也不会从0开始从其他节点搬迁数据，而是前置准备好大部分数据的方式，故一般来说没有必要引入虚拟节点来增加复杂度。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;四、常见扩容方案&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.1 翻倍扩容法&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;翻倍扩容法的主要思维是每次扩容，库的数量均翻倍处理，而翻倍的数据源通常是由原数据源通过主从复制方式得到的从库升级成主库提供服务的方式。故有些文档将其称作&quot;&lt;strong&gt;从库升级法&lt;/strong&gt;&quot;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;理论上，经过翻倍扩容法后，我们会多一倍的数据库用来存储数据和应对流量，原先数据库的磁盘使用量也将得到一半空间的释放。如下图所示:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100008475&quot; data-ratio=&quot;0.5273775216138329&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7ibSqqgkw7u8SC7X6Jv4YzZwJlqfTzSZEDuiaibgRibNrqFj5CcibPicbBHlkvg3KO9tW4YDH1PnibrCPRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;694&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;具体的流程大致如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;①、时间点t1：为每个节点都新增从库，开启主从同步进行数据同步。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;②、时间点t2：主从同步完成后，对主库进行禁写。&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;153&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;此处禁写主要是为了保证数据的正确性。若不进行禁写操作，在以下两个时间窗口期内将出现数据不一致的问题：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;a、断开主从后，若主库不禁写，主库若还有数据写入，这部分数据将无法同步到从库中。&lt;/p&gt;&lt;p&gt; b、应用集群识别到分库数翻倍的时间点无法严格一致，在某个时间点可能两台应用使用不同的分库数，运算到不同的库序号，导致错误写入。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;③、时间点t3：同步完全完成后，断开主从关系，理论上此时从库和主库有着完全一样的数据集。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;④、时间点t4：从库升级为集群节点，业务应用识别到新的分库数后，将应用新的路由算法。&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;161&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;一般情况下，我们将分库数的配置放到配置中心中，当上述三个步骤完成后，我们修改分库数进行翻倍，应用生效后，应用服务将使用新的配置。这里需要注意的是，业务应用接收到新的配置的时间点不一定一致，所以必定存在一个时间窗口期，该期间部分机器使用原分库数，部分节点使用新分库数。这也正是我们的禁写操作一定要在此步完成后才能放开的原因。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;⑤、时间点t5：确定所有的应用均接受到库总数的配置后，放开原主库的禁写操作，此时应用完全恢复服务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;⑥、启动离线的定时任务，清除各库中的约一半冗余数据。&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;65&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;为了节省磁盘的使用率，我们可以选择离线定时任务清除冗余的数据。也可以在业务初期表结构设计的时候，将索引键的Hash值存为一个字段。&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;257&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;那么以上述常用姿势四为例，我们离线的清除任务可以简单的通过sql即可实现（需要防止锁住全表，可以拆分成若干个id范围的子sql执行）：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;delete from db0.tbl0 where hash_val mod 4 &amp;lt;&amp;gt; 0; &lt;/p&gt;&lt;p&gt;delete from db1.tbl0 where hash_val mod 4 &amp;lt;&amp;gt; 1;&lt;/p&gt;&lt;p&gt;delete from db2.tbl0 where hash_val mod 4 &amp;lt;&amp;gt; 2;&lt;/p&gt;&lt;p&gt;delete from db3.tbl0 where hash_val mod 4 &amp;lt;&amp;gt; 3;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;具体的扩容步骤可参考下图：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100008476&quot; data-ratio=&quot;1.0336&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/4g5IMGibSxt7ibSqqgkw7u8SC7X6Jv4YzZfaZ1SZUkySuiccD7xiayc6kOPvIcWnVB3MnuvTQocGOCTmhvfbpl2hTw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;625&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：通过上述迁移方案可以看出，从时间点t2到t5时间窗口呢内，需要对数据库禁写，相当于是该时间范围内服务器是部分有损的，该阶段整体耗时差不多是在分钟级范围内。若业务可以接受，可以在业务低峰期进行该操作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然也会有不少应用无法容忍分钟级写入不可用，例如写操作远远大于读操作的应用，此时可以结合canel开源框架进行窗口期内数据双写操作以保证数据的一致性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;该方案主要借助于mysql强大完善的主从同步机制，能在事前提前准备好新的节点中大部分需要的数据，节省大量的人为数据迁移操作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但是缺点也很明显，一是过程中整个服务可能需要以有损为代价，二是每次扩容均需要对库数量进行翻倍，会提前浪费不少的数据库资源。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.2 一致性Hash扩容&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们主要还是看下不带虚拟槽的一致性Hash扩容方法，假如当前数据库节点DB0负载或磁盘使用过大需要扩容，我们通过扩容可以达到例如下图的效果。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下图中，扩容前配置了三个&lt;span&gt;Hash&lt;/span&gt;分段，发现[-Inf，-10000）范围内的的数据量过大或者压力过高时，需要对其进行扩容。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100008477&quot; data-ratio=&quot;0.548460661345496&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7ibSqqgkw7u8SC7X6Jv4YzZVUcTNVh9jBUiaplWhveGiapBAxdNFVpicm6vyX77ylMziaqtryJv0Pia1vA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;877&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;主要步骤如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;①、&lt;strong&gt;时间点t1&lt;/strong&gt;：针对需要扩容的数据库节点增加从节点，开启主从同步进行数据同步。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;②、&lt;strong&gt;时间点t2&lt;/strong&gt;：完成主从同步后，对原主库进行禁写。&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;35&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt; 此处原因和翻倍扩容法类似，需要保证新的从库和原来主库中数据的一致性。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;③、&lt;strong&gt;时间点t3&lt;/strong&gt;：同步完全完成后，断开主从关系，理论上此时从库和主库有着完全一样的数据集。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;④、&lt;strong&gt;时间点t4&lt;/strong&gt;：修改一致性Hash范围的配置，并使应用服务重新读取并生效。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;⑤、&lt;strong&gt;时间点t5&lt;/strong&gt;：确定所有的应用均接受到新的一致性Hash范围配置后，放开原主库的禁写操作，此时应用完全恢复服务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;⑥、&lt;strong&gt;启动离线的定时任务&lt;/strong&gt;，清除冗余数据。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可以看到，该方案和翻倍扩容法的方案比较类似，但是它更加灵活，可以根据当前集群每个节点的压力情况选择性扩容，而无需整个集群同时翻倍进行扩容。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;五、小结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;本文主要描述了我们进行水平分库分表设计时的一些常见方案。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们在进行分库分表设计时，可以选择例如范围分表，&lt;span&gt;Hash&lt;/span&gt;分表，路由表，或者一致性Hash分表等各种方案。进行选择时需要充分考虑到后续的扩容可持续性，最大数据偏斜率等因素。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;文中也列举了一些常见的错误示例，例如库表计算逻辑中公约数的影响，使用前若干位计算库序号常见的数据倾斜因素等等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们在实际进行选择时，一定要考虑自身的业务特点，充分验证分片键在各个参数因子下的数据偏斜程度，并提前规划考虑好后续扩容的方案。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;END&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.title1&quot;&gt;&lt;p&gt;猜你喜欢&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b966d723322a4beef32cb793e0184f27</guid>
<title>[推荐] 什么人能成为Leader，大Leader该做什么</title>
<link>https://toutiao.io/k/pnlaqae</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原创不易，求分享、求一键三连&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;两个故事&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;谁能成为Leader&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前接手了一块产品业务线，于是与原Leader说了下分工，大概意思是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我是过来学习的，也能给团队带来更多的资源，团队内的工作你继续管理，之前的规划继续做，不要管我。在愉快（&lt;strong&gt;「真愉快」&lt;/strong&gt;）的相处下，到了部门周会。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;周会上，我发现一旦是团队有疏漏的地方，这位leader，&lt;strong&gt;「自然而然」&lt;/strong&gt;、骄傲的说道：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这块小钗会做规划，这块小钗下来会组织，这块我下来跟小钗聊聊，小钗让你准备下，小钗说不需要提供......&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尼玛，我怎么成背锅侠了！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里要注意，这个产品同学&lt;strong&gt;「绝对不是因为不满意我的存在」&lt;/strong&gt;而这样说的！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结下来，出现这种情况的主要原因是：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;团队中如果出现一个新leader（可能最强的人）后，那么其余人甚至是之前的leader，更倾向于停止思考，事事请示，躺平等待带飞...&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Leader该做什么&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在之前一次年底考评的时候，有一位leader将一个案例同时用到了自己和下属身上，老板发出了责问：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个项目到底你是负责人，还是你下面的同学是负责人，如果下面的同学是负责人，为什么要算到你的头上？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老板这边的逻辑是，一件事只能放到一个人身上，下属用了，你就不能用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;leader感到很委屈，他的逻辑是，我投了大量的资源支持这个同学做这个项目，作为管理者，我的主要工作是管理啊！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在那个场景下，老板多少有点刻意，该同学的反驳又很苍白，最终效果不太好，但是却给我留下了深刻的印象和疑问：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「大leader跟一线leader究竟有何不同？」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跟这个相关的一个现象就是，有些leader定位不清晰喜欢抢下面同学活干，这种行为能带来&lt;strong&gt;「巨大的安全感」&lt;/strong&gt;，这种安全感甚至是&lt;strong&gt;「可触摸的」&lt;/strong&gt;！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;困难与担当&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先回答第一个故事的问题：&lt;strong&gt;「什么人适合做Leader」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里直接给出答案：&lt;strong&gt;「有担当的人适合做Leader」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;故事一如果对应&lt;strong&gt;「权责利模型」&lt;/strong&gt;，其行为是合理的，但合理未必是正确的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为这类同学在晋升，或&lt;strong&gt;「重大机会来临时往往不会被作为首选」&lt;/strong&gt;，这里的核心原因就是&lt;strong&gt;「担当，责任心」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于更远的路，&lt;strong&gt;「担当是重要的特质」&lt;/strong&gt;，Leader会遇到很多&lt;strong&gt;「三不管事物」&lt;/strong&gt;，部门互相推脱造成的&lt;strong&gt;「全局浪费」&lt;/strong&gt;是惊人的！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面对巨大的困难，人们倾向于呼唤英雄，或将自己摘干净。于是一些有意思的现象就产生了：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）各部门发现创新难后更倾向于&lt;strong&gt;「老板带飞或躺平」&lt;/strong&gt;；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）做事&lt;strong&gt;「不具备持续性」&lt;/strong&gt;，上层关注点变了后，容易将手里的事丢弃，一些&lt;strong&gt;「重要的事也就不了了之了」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并且人们自古是慕强、崇拜英雄的，这种行为很容易被自己说服：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）全力做老板关注的事情有什么不对；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）老板的&lt;strong&gt;「战略变化比我战术都快」&lt;/strong&gt;，光是跟着也很累啊；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）老板一个假动作又把我忽悠瘸了；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要较真的话，我认为这是一种&lt;strong&gt;「甩锅行为」&lt;/strong&gt;，这种行为不好判断，也没有依据去惩罚这种行为，毕竟跟着英雄的思路有什么不对呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是&lt;strong&gt;「浪费行为因为没有成本而更肆无忌惮」&lt;/strong&gt;；&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;有担当的人倾向于&lt;strong&gt;「解决问题」&lt;/strong&gt;，投机的人倾向于&lt;strong&gt;「转移问题」&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，相较于一线员工，Leader是新的起点，跟之前的压力类型有所不同，该吃的屎更大坨，逐渐从&lt;strong&gt;「体力痛苦、脑力痛苦」&lt;/strong&gt;，变成了&lt;strong&gt;「心理痛苦」&lt;/strong&gt;，请关注这批同学的心理健康！&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Leader的能力模型&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Leader也会有相关的能力要求，所以需要回答Leader的评价模型是什么：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;leader是个相对复杂的工种，我这边形成了一个五维评价模型，提出来跟大家讨论：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;战略能力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;战术能力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;信息收集能力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;表达（营销）能力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;持之以恒的能力&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7555555555555555&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTALTBqwSqpgW7wnaZibAibbKicjcicbjGt8RzsaWSVb9mOgTZDGL5Idjkm2Hz3cLDricMYkf6vehkkXuRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;战略能力&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;战略能力是极其重要而稀缺的能力&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;战略能力的本质是&lt;strong&gt;「对事物的认知程度」&lt;/strong&gt;，好的战略能力可以&lt;strong&gt;「清晰的预测未来」&lt;/strong&gt;、发掘&lt;strong&gt;「事件的发展的趋势」&lt;/strong&gt;。战略能力越强，对未来的描述&lt;strong&gt;「越清晰」&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;战略的意义是提出目标（相对正确的目标），需要回答what的问题，只有提出正确目标的人才能成为合格的leader，所以提升战略能力事实上是提升个人整体的认知能力.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「认知是自我对世界认知的投影」&lt;/strong&gt;，人人都是有认知能力，所以人人都有战略能力，小到我要买一个玩具，大到我要做世界首富，都可以是战略能力。这样说有点虚，这里举两个点说明：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一、战略能力可以是确定我们当前团队的团队文化是什么.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的文化可以是某种特质、某种喜好，最初创业团队leader的特质可能会决定这个团队可以走多远，一个健康的团队一定不会缺少某个特质（可以参考贝尔宾性格测试）.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如说，我们可以确定我们的团队文化是能者居之、轻松平等、战功文化、帮扶文化、狼性文化......&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;二、战略能力可以是提出团队目标，&lt;strong&gt;「目标是真实能将一个团队【短时间】凝聚的方式」&lt;/strong&gt;，这里的目标可以是团队目标、业务目标、个人目标，人才会因为目标聚集，却会因为文化或者&lt;strong&gt;「更大的目标」&lt;/strong&gt;而留下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的团队目标可以是：把盘子做大、成为技术最好的团队、活下来、集体升职加薪......&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;做战略（或者说做目标）首先要考虑长线，全局最优，不要总是思考&lt;strong&gt;「分蛋糕的方式」&lt;/strong&gt;（也不要完全不考虑），要想办法&lt;strong&gt;「把蛋糕做大」&lt;/strong&gt;；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次要搜集足够的信息量、方案，建立完善的认知&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;战术能力&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;战术主要解决的是目标（可以是团队目标、个人目标）如何实践的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说得更具体一点可以是执行力，其三要素是：意愿、信息、能力。一般来说，确定团队目标后，我们所谓“秀操作”的管理手段，全部是战术层面的表现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样说比较虚，我提一个概念：战术的核心是好的&lt;strong&gt;「节奏感」&lt;/strong&gt;：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;所谓节奏感，可以简单理解为leader对自己的时间管理，梳理出事物的轻重缓急，优先提出不要做什么，再考虑要做什么，再确定做事优先级，其中拒绝的能力一定要重视！！！&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;战略是在正确的事件做正确的事，战术是将这件事做成，这里再提一点解释战略和战术的关系：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.987037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTALTBqwSqpgW7wnaZibAibbKic0bQuc6wkSOuUSjgXXoXXQIkOOabmcicuuibNkNBiaqju1aYaI8DmB7TnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;战略往往很清晰、很简单，可以做的事情极少，好的战略甚至不需要宣导；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;战略演化出来的路径也不会太复杂，甚至只是多了几个流程、几章表格，唯一不同的是多了一些解释、一些培训，却可能多了一些&lt;strong&gt;「分歧」&lt;/strong&gt;；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体到战略的落地、路径的实现、难点的突破就很难“约束”了，正如西天取经九九八十一难：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）西天取经度化世人是战略；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）九九八十一难是底层逻辑对应的实现路径（机制）；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）具体到每一难怎么过，很难定义，也就是我们秀操作的战术了；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要说怎么创新提出战略、提出点子这个事情很难，要说怎么提高操作水平，就有很多“方法论”工具或者实践经验可以使用了，比如：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）使用OKR工具&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）培育土壤，设定规则，解决能不能的问题&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）身先士卒&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;信息处理能力&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;信息处理能力事实上很大一部分是操作层面的技能，信息分析又可以归为&lt;strong&gt;「前置的战略准备」&lt;/strong&gt;，考虑其足够重要，这里将其独立出来。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;信息获取&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要解决的第一难题是如何获取消息，从信息来源来说可分为：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;① 上层信息，多来源于leader的信息&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;② 平级信息，多来源于跨部门同学信息&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;③ 团队下级信息，这个一般来源于抱怨&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里要注意，所有的信息都可能&lt;strong&gt;「经过修剪」要注意甄别&lt;/strong&gt;：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9953703703703703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTALTBqwSqpgW7wnaZibAibbKicqzlsy9tytOWYu0bViadOeKqLljXBJwMIn4mJj8rmOJuoYT40YwMXkibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;八卦是信息的主要来源，leader本身如果不具备八卦能力的话，最好有一个“八卦”的副手，否则会丢失很多信息量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从信息来源目标来说，又要注意他们的类型，跟不同的人交流方式不同，如：高人、强势型、甩锅侠、狡猾型、合作型、问题领袖、个人主义、锋芒毕露出风头......&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从角色定位又可以分为：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;① &lt;strong&gt;「朋友」&lt;/strong&gt;，这种角色需要完整的分享信息量和观点，与对方碰撞讨论&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;② &lt;strong&gt;「镜子」&lt;/strong&gt;，这种角色与你实力相当，做事却风格完全不一样，更多的观察对比，看看他的做法是不是更优，这样更容易打破自己的认知&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;③ &lt;strong&gt;「导师」&lt;/strong&gt;，这种角色每个周期，准备好问题和自己的答案去与他交流，多听少说，虚心受教，考虑背景，明辨所需&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;信息获取时候要注意以下情绪：抖机灵、急躁、面服心不服、我没问题，你们都是傻逼、我不要你觉得，我要我觉得、这里肯定有问题，我就不说，我就是玩儿！&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;信息获取时候一定要注意清楚负能量传递，不要被影响、挑逗、愤怒，很多时候引出负能量十分简单，解决问题才是真本事&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;信息获取的方式很多，大家选取适合自己的即可：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;① 请人吃饭（少请点人）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;② 信息交换（需要拉扯）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;③ 某种意义的投名状（比如去足疗？）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;......&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里强调下，兼听则明、偏信则暗，信息就是信息切记主观情绪，切记信息来源单一，&lt;strong&gt;「信息差创造价值的事情一直在发生」&lt;/strong&gt;！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;信息处理&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何处理信息的话题有点玄，又有点“创新”的意思，这种话题大概是没办法写的，这里可以使用的一个“方法论”工具是5W2H：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7430555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTALTBqwSqpgW7wnaZibAibbKicY8VJptkgWNZ04M58tDP154KibRhNW5mLichOZiczDBTgxVXMG4BJcVX8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一定程度的分析能力是可以锻炼的，确实不行就把信息量尽量无损的给自己的“高人”，请他帮忙分析也行，每个团队都会有智囊团角色，我这里临时的处理策略是：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5598705501618123&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTALTBqwSqpgW7wnaZibAibbKicLGDyEGlc56YfJvfh2ibw2AEX4SyVduLP0qZ4tDUdwZ0dgN26hZiaHJzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;618&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于信息相关，最后说一个点，团队规模大了后，信息会变得五花八门，团队矛盾也会逐渐产生，甚至&lt;strong&gt;「不可调和」&lt;/strong&gt;，对于leader来说，以下几个点可能需要考虑：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;① 具体事宜分歧需要绝对压制，谁对结果负责，谁做决定，参考&lt;strong&gt;「权责利分锅模型」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;② 处理分歧点要考虑当前团队的&lt;strong&gt;「主要矛盾是什么」&lt;/strong&gt;，当前团队的主要问题是什么，&lt;strong&gt;「没有绝对的对错」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;③ 处理矛盾除非某一方有明显错误，处理的方式是&lt;strong&gt;「不表态或者对事不对人」&lt;/strong&gt;，最后都需要请他们吃饭或者喝酒，喝到他们服（这里如果有女生会变得非常难办）！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;④ 凝聚力是团队最重要财富，谁影响凝聚力就要处理谁，&lt;strong&gt;「负能量者」&lt;/strong&gt;必死&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;⑤ 沟通的难点在于如何达成一致，&lt;strong&gt;「妥协也是一种一致」&lt;/strong&gt;（至少可以减少阻碍）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;......&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;表达/营销能力&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓表达能力可以认为是：&lt;strong&gt;「讲故事的能力」&lt;/strong&gt;、撕逼能力&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;表象是比声音大，本质是比认知比信息量比辩论手段，我认为认知 &amp;gt;= 信息量 &amp;gt; 手段，所谓降维打击就是如此。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;表达能力说小点是如何清晰描述清楚一件事（比如一个BUG如何发生），说大点就是如何聊清楚战略了，平时多使用&lt;strong&gt;「金字塔模型」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我自己表达能力也不是很好，可以提的建议就偏少了:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;① 思考清楚、信息量足，才不会胡言乱语&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;② 朗读古文、写作文&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;③ 重要的汇报提前准备&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;......&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;持之以恒&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;持之以恒其实更不好测量，更多的是一个品质，但如果没有这种坚持的能力，我们工作中的高管极容易“东一下、西一下”，任何战略或者产品都没有持续性，这样是不能把事情做成的，我们评价一个人，还是要从他做的事着手，看他做成了什么事，做成的这个事做到了什么程度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是我们总结的战略、战术、信息、表达、持之以恒五维模型，如果做成了其中2个点就会是个不错的大leader，也就是我们所谓技术总监了，这是“技术管理者”的评价体系的基础，大家可以对比下自身情况判断是否合用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了以上基础再来探讨&lt;strong&gt;「大Leader和小Leader有何不同」&lt;/strong&gt;？&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Leader该做什么&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;了解了Leader的能力要求后，还要约束Leader的可用手段，否则Leader也喜欢去&lt;strong&gt;「挑简单的事情做」&lt;/strong&gt;，比如写代码、带项目，跟下面同学抢活干。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大leader解决问题的思路只能从以下几个维度去想办法：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;选题；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;梯队建设；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;资源协调；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;核心辅导；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;机制匹配；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从要求的点来说，已经排除了leader下场干项目的可能性了！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;选题&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的选，就是把自己的疑惑，将业务中碰到的问题，全部整理成一些课题，将这些课题指派给团队的“专家组”进行研讨，尽量找到答案，形成方案；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;选题是&lt;strong&gt;「战略切割」&lt;/strong&gt;，大了资源不足，小了没有效果；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;思考选题要卷入足够的资源足够的意见，但不要被轻易带偏，要有自己的坚持；选题能力就是战略能力；&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;梯队建设&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个容易理解，就是人才储备，招人开人；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;选题是解决做什么的问题，人才是解决谁来做的问题，缺一不可。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;资源协调&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;资源的使用有两点要注意：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）&lt;strong&gt;做预算&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;资源使用的第一步是资源获取，获取结束便是分配。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你要将资源分给哪些选题，这是一种&lt;strong&gt;预算思维&lt;/strong&gt;，也是利益分配的底层逻辑。只有选题得宜加上初期合适的资源预算，事情才能得到推进，但这只是开始，还没完。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）&lt;strong&gt;资源协调&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大leader最大的优势其实是势能，也是我们所谓的影响力，因为影响力，很多你拿不到的资源我拿得到，你做不了的跨部门协作我能做。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;找到合适的选题和合适的人，还得帮他们把相应的执行环境准备好；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;团队做事会有很多卡点，这个时候你是否知道这个卡点所需要的资源是什么，是否能获得这个资源。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;核心指导&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在下面同学干活的时候，要协助其做大框架设计，粗粒度的梳理，防止他们走偏，给予合适的信息输入；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获得资源后，告诉团队如何使用资源；甚至告诉团队如何自己获取资源；&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;即大Leader要往团队做很多额外的信息输入&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;机制匹配&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;团队的问题是否得到&lt;strong&gt;「系统性的解决」&lt;/strong&gt;，是否每次都&lt;strong&gt;「依赖个人英雄」&lt;/strong&gt;？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同学们实际干活的时候，依旧会有很多牛鬼蛇神影响进度，要匹配对应的机制，加速团队运转效率，减少不必要耗损；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我的认知里面这五个维度事项，确实可以很好定义大leader的工作，也可以回答故事二中的问题：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;大的工作不是做项目而是找课题，并且想办法、做机制让这个课题顺滑的执行下去，获得成果，所以部门内的所有项目都是我的成果。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;兜底&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一部分回答是，leader的重要工作可能还有一点绕不过去的缺漏：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;大leade需要对下面同学的工作进行兜底&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候不该做，却不得不做，当然兜底的策略未必非要自己做：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）提拔梯队同学进行兜底；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）做机制防止出现第一负责人掉链子的情况；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）在迫不得已，比如全线崩毁的情况下，自己能兜得住；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有兜底的情况，往往是梯队建设出问题了。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Leader的思维&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后回归一下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;是什么造就了一个员工成为Leader；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;是什么造就一个Leader成长为了大Leader？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是&lt;strong&gt;「足够的担当」&lt;/strong&gt;，&lt;strong&gt;「主动的思考」&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;所谓有担当&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;碰到具体事项时，尽量别让leader帮你思考，也尽量别让leader帮你背锅，如果可以的话，请尽量别让下游团队帮你背锅。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提供你的&lt;strong&gt;「专业意见」&lt;/strong&gt;，提供你的&lt;strong&gt;「决策模型」&lt;/strong&gt;，提供你对当前事项决策所用的&lt;strong&gt;「论据」&lt;/strong&gt;，最后跟相关方尽量做到&lt;strong&gt;「信息同步」&lt;/strong&gt;，再请leader拍板即可，这里所谓的担当更多的是&lt;strong&gt;「对你自己」&lt;/strong&gt;，未必是对你leader。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;所谓主动思考&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前一段时间我的工作思维是&lt;strong&gt;「坚决执行老板对产品的理解」&lt;/strong&gt;，这是最大的优点，但可能也是最大的问题，因为我的工作变成了&lt;strong&gt;「对老板输入的解读」&lt;/strong&gt;，这就导致我的思维全部圈定在了老板的思维里。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么导致这个事实的原因是什么？我觉得可能是两点：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）老板的想法太有侵略性，众人很难否定老板的想法（没有有效证据链拉扯）；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）我的主要输入源是老板；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但，这个未必是健康的状态，也许真实情况是需要在&lt;strong&gt;「细分领域跳出框架」&lt;/strong&gt;，&lt;strong&gt;「上下佐证才能形成真正的创新」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「创新的底色是足够的阅读量」&lt;/strong&gt;，如果要跳出老板的认知，在通篇阅读量方面超过不容易，就要在细分领域下足够的功夫，这里的一个思考是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老板给予20%左右的思想输入，然后就要在某一层面、某一阶段的拒绝老板思想的影响，自己独立把这20%的论点，演化论证到60%左右，拿着多出的这40%跟老板对比拉扯。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;毕竟他时间有限，虽然想的广，但未必在细分领域验证的有我们深，老板想的广，我们论证深，这也许就是一个差异化补足和配合的方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于这额外40%的延伸对不对、好不好可以讨论、可以拉扯，但是我们已经是站在60%的场景下讨论问题了，这多出来40%的研究，就是我们跟老板叫板的底气&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何从60%去到100%，里面的占比是多少，我们可以一起讨论、一起测试、一起斟酌嘛。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的核心思维是：&lt;strong&gt;「主动思考」&lt;/strong&gt;，找问题中最难的点去攻破，不要有取巧的想法，对于真正困难的事物，取巧很难过关。&lt;strong&gt;「死磕、深钻才可能取得真正的解法」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;希望此文对各位有帮助。&lt;strong&gt;「原创不易，请各位多多分享」&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;最后重要提示：&lt;span&gt;北妈铁粉读者交流群，限时开放！&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;欢迎加入北妈的铁粉摸鱼唠嗑副业羊毛基地！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;北妈铁粉交流群（摸鱼、白嫖课程、羊毛、交友为主），限时开放！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;想进群的，&lt;span&gt;可以关注下方公号内&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;回复：&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;666，&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;拉你加群。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;点下方卡片，关注公号内&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;回复：666，&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;加群&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIyMjQxMDY5NQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/sz_mmbiz_png/cj7OZoyPvRvNYGrjPep1kecZAd3mBKtHoIbTZG8U8IFQwkcjPoXxl8N9iapLluicKgmGm0jGy0W5rQ1LBINA1pog/0?wx_fmt=png&quot; data-nickname=&quot;北妈说正事&quot; data-alias=&quot;&quot; data-signature=&quot;他不干正事儿，但说正事儿&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.33076923076923076&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MYDsergzqQmiaFWgDe1oSATjSlicNRB2pHMWc84DiaqFFBIdgNFeazWttSZ3c0tDNibSFz8MGbqibYM9icKWeH4GicARQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;260&quot;/&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6561514195583596&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MYDsergzqQmiaFWgDe1oSATjSlicNRB2pHuJ02RtDkHP2aQMKn0VsDDgYBkvyQvwFhbiafjJdqLEEczat5wKicHrDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;每天都深夜了，还在讨论，每天输出3000+消息，堪称 &lt;/span&gt;&lt;span&gt;加特林&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;北妈所有群活跃度，敢说第二，没人说第一。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;全国各个城市的铁友和大神都有。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;内推、副业、吃瓜、技术交流、找对象&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;应有尽有&lt;/span&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>