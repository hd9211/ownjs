<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>dd76875173a8e8570cc188d9632eeebe</guid>
<title>9大高性能优化经验总结，强烈建议收藏！！！</title>
<link>https://toutiao.io/k/26za4ep</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mid=&quot;&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;点击蓝字&lt;/span&gt;&lt;span&gt;&lt;span&gt;关注&lt;/span&gt;&lt;span&gt;&lt;span&gt;△&lt;/span&gt;&lt;/span&gt;&lt;span&gt;回复&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;【&lt;/span&gt;&lt;span&gt;架构&lt;/span&gt;&lt;span&gt;】&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;strong&gt;&lt;span&gt;领取300期+原创架构技术系列文章与1000+大厂面试题答案合集&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.400352733686067&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SdOdAZX2thVrWjNky6BuHcED9ibNbodAg6lfiaE5LCcZKKVbs2CYic8Azia2GVx0iba3V0UhibEKajJur5UW00fd2jxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot; title=&quot;9大性能优化经验总结，强烈建议收藏！-mikechen的互联网架构&quot;/&gt;&lt;/p&gt;&lt;p&gt;性能优化基本属于Java高级岗的必备技能了，特备对于大流量的互联网应用至关重要@&lt;a href=&quot;https://mikechen.cc/&quot; data-linktype=&quot;2&quot;&gt;mikechen&lt;/a&gt;&lt;/p&gt;&lt;p&gt;今天主要给大家介绍下9种性能优化：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7040169133192389&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SdOdAZX2thVrWjNky6BuHcED9ibNbodAgPfSWoDhWK8qzlO4rov7OwGicVnHLqUxGFoTRELVs0NOaicure2O5WyIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1419&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;nav&gt;&lt;p&gt;&lt;span&gt;1.代码&lt;/span&gt;&lt;/p&gt;&lt;/nav&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;之所以把代码放到第一位，是因为这一点最容易引忽视，比如拿到一个性能优化的需求以后，言必称缓存、异步等。&lt;/p&gt;&lt;p&gt;实际上，第一步就应该是分析相关的代码，找出相应的瓶颈，再来考虑具体的优化策略。&lt;/p&gt;&lt;p&gt;有一些性能问题，完全是由于代码写的不合理，通过直接修改一下代码就能解决问题的，比如for循环次数过多、作了很多无谓的条件判断、相同逻辑重复多次等，这样的优化成本是最低的。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h2&gt;&lt;span/&gt;2.数据库&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.31837307152875177&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SdOdAZX2thVrWjNky6BuHcED9ibNbodAg9JT6PFnPTsq0icljR0HrQSQS9MYiarx1jFvPnEIQ9uX3C8jOEiaMuEnIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;713&quot; title=&quot;9大性能优化经验总结，强烈建议收藏！-mikechen的互联网架构&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span/&gt;1.SQL优化&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;这里以MySQL为例，最常见的方式是，由自带的慢查询日志或者开源的慢查询系统定位到具体的出问题的SQL，然后使用explain、profile等工具来逐步调优，最后经过测试达到效果后上线。&lt;/p&gt;&lt;p&gt;这里举几个优化的例子：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1.查询优化&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;对查询进行优化，要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.避免null判断&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：&lt;/p&gt;&lt;pre data-enlighter-language=&quot;generic&quot;&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt; id &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; t &lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt; num &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3.避免全表扫描&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;应尽量避免在 where 子句中使用 != 或 &amp;lt;&amp;gt; 操作符，否则将引擎放弃使用索引而进行全表扫描。&lt;/p&gt;&lt;p&gt;应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描。&lt;/p&gt;&lt;p&gt;in和 not in 也要慎用，否则会导致全表扫描，如：&lt;/p&gt;&lt;pre data-enlighter-language=&quot;generic&quot;&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt; id &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; t &lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt; num &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;对于连续的数值，能用 between就不要用 in 了：&lt;/p&gt;&lt;pre data-enlighter-language=&quot;generic&quot;&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt; id &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; t &lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt; num between &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;and&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;4.大数据量查询&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;对于多张大数据量的表JOIN，要先分页再JOIN，否则逻辑读会很高。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5.合理使用索引&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。&lt;/p&gt;&lt;p&gt;一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.多使用数字型字段&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。&lt;/p&gt;&lt;p&gt;这是因为引擎在处理查询和连 接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;7.避免大数量&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;8.避免大事务&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;尽量避免大事务操作，提高系统并发能力。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h3&gt;&lt;span/&gt;2.连接池调优&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;我们的应用为了实现数据库连接的高效获取、对数据库连接的限流等目的，通常会采用连接池类的方案，即每一个应用节点都管理了一个到各个数据库的连接池。&lt;/p&gt;&lt;p&gt;随着业务访问量或者数据量的增长，原有的连接池参数可能不能很好地满足需求，这个时候就需要结合当前使用连接池的原理、具体的连接池监控数据和当前的业务量作一个综合的判断，通过反复的几次调试得到最终的调优参数。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h3&gt;&lt;span/&gt;3.架构层面&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;这一类调优包括读写分离、多从库负载均衡、水平和垂直分库分表等方面，一般需要的改动较大，但是频率没有SQL调优高，而且一般需要DBA来配合参与。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5283757338551859&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SdOdAZX2thVrWjNky6BuHcED9ibNbodAgSIOWZ5zThVBYql0CLq25cSua8NkJibaTRebIvib12iccNaW51IR5G7UbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1022&quot; title=&quot;9大性能优化经验总结，强烈建议收藏！-mikechen的互联网架构&quot;/&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h2&gt;&lt;span/&gt;3.分布式缓存&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;缓存可以称的上是性能优化的利器，缓存主要用来存放那些读写比很高、很少变化的数据。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3347778981581798&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SdOdAZX2thVrWjNky6BuHcED9ibNbodAg03j0QPB2bTlYtcNTmSSG0D7ybKDcoAJUGiaPoC26oedQNialvnFCkeibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1846&quot; title=&quot;9大性能优化经验总结，强烈建议收藏！-mikechen的互联网架构&quot;/&gt;&lt;/p&gt;&lt;p&gt;什么情况适合用缓存？考虑以下两种场景：&lt;/p&gt;&lt;p&gt;使用缓存需要注意的问题：&lt;/p&gt;&lt;h3&gt;&lt;span/&gt;1.避免缓存失效&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;把频繁修改的数据放入缓存，容易出现数据写入缓存后，应用还来不及读取缓存，数据就已经失效的情形，徒增系统负担。&lt;/p&gt;&lt;h3&gt;&lt;span/&gt;2.缓存热点数据&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;缓存使用的内存资源非常宝贵，只能将最新访问的数据缓存起来，而把历史数据清理出缓存，即缓存资源应该留给20%的热点数据。&lt;/p&gt;&lt;h3&gt;&lt;span/&gt; 3.数据不一致性&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;一般会对缓存设置失效时间，超过失效时间，就要从数据库重新加载。&lt;/p&gt;&lt;p&gt;因此应用要忍受一定时间的数据不一致，另一种策略是数据更新时立即更新缓存，不过这也会带来更多的系统开销和事务一致性的问题。&lt;/p&gt;&lt;h3&gt;&lt;span/&gt; 4.缓存可用性&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;业务发展到一定阶段时，缓存会承担大部分数据访问的压力，数据库已经习惯了有缓存的日子，所以当缓存服务器崩溃时，数据库会因为完全不能承受如此大的压力而宕机，进而导致整个网站不可用，这种情况被称作缓存雪崩，发生这种故障，甚至不能简单地重启缓存服务器和数据库服务器来恢复网站访问。&lt;/p&gt;&lt;p&gt;解决方式：&lt;/p&gt;&lt;p&gt;1）缓存热备（当某台服务器宕机时，将缓存访问切换到热备服务器上；&lt;/p&gt;&lt;p&gt;2）缓存服务器集群。&lt;/p&gt;&lt;h3&gt;&lt;span/&gt;5. 缓存预热&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;缓存中存放的是热点数据，热点数据是缓存系统用LRU对不断访问的数据筛选出来的，这个过程需要较长的时间。&lt;/p&gt;&lt;p&gt;新启动的缓存系统没有任何数据，此时系统的性能和数据库负载都不太好。因此可以选择在启动缓存是就把热点数据预加载好。&lt;/p&gt;&lt;h3&gt;&lt;span/&gt; 6.缓存穿透&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;因为不恰当的业务或恶意攻击，持续高并发地访问某一个不存在的数据，如果缓存不保存该数据，就会有大量的请求压力落在数据库上。&lt;/p&gt;&lt;p&gt;简单的解决方式是把请求的不存在的数据也放进缓存，其value是null。&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;4.异步化&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;针对某些客户端的请求，在服务端可能需要针对这些请求做一些附属的事情，这些事情其实用户并不关心或者用户不需要立即拿到这些事情的处理结果，这种情况就比较适合用异步的方式处理这些事情。&lt;/p&gt;&lt;p&gt;异步化的作用：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt; 缩短接口响应时间，使用户的请求快速返回，用户体验更好。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; 避免线程长时间处于运行状态，这样会引起服务线程池的可用线程长时间不够用，进而引起线程池任务队列长度增大，从而阻塞更多请求任务，使得更多请求得不到技术处理。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; 线程长时间处于运行状态，可能还会引起系统Load、CPU使用率、机器整体性能下降等一系列问题，甚至引发雪崩。异步的思路可以在不增加机器数和CPU数的情况下，有效解决这个问题。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;比如：使用消息队列（MQ）中间件服务，MQ天生就是异步的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8270967741935484&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SdOdAZX2thVrWjNky6BuHcED9ibNbodAgpmic3Ic6lQHBepNng8MjPRfgj5acbQ2VroCazk1mPDUw9m890KtRu4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;775&quot; title=&quot;9大性能优化经验总结，强烈建议收藏！-mikechen的互联网架构&quot;/&gt;&lt;/p&gt;&lt;p&gt;一些额外的任务，可能不需要我这个系统来处理，但是需要其他系统来处理，这个时候可以先把它封装成一个消息，扔到消息队列里面，通过消息中间件的可靠性保证把消息投递到关心它的系统，然后让这个系统来做相应的处理。&lt;/p&gt;&lt;p&gt;再比如C端在完成一个提单动作以后，可能需要其它端做一系列的事情，但是这些事情的结果不会立刻对C端用户产生影响，那么就可以先把C端下单的请求响应先返回给用户，返回之前往MQ中发一个消息即可，而且这些事情理应不是C端的负责范围，所以这个时候用MQ的方式，来解决这个问题最合适。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h2&gt;&lt;span/&gt;5.Web前段&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;Web前端指网站业务逻辑之前的部分，包括：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3108298171589311&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SdOdAZX2thVrWjNky6BuHcED9ibNbodAggJwlEnbibUeKrCHgNBrZElu8MOE6SicUlEsAo7pOWeMYXY8jx9FMY19A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;711&quot; title=&quot;9大性能优化经验总结，强烈建议收藏！-mikechen的互联网架构&quot;/&gt;&lt;/p&gt;&lt;p&gt;主要优化手段有优化浏览器访问，使用反向代理，CDN等。&lt;/p&gt;&lt;h3&gt;&lt;span/&gt;1.浏览器访问优化&lt;span/&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span/&gt;(1)减少http请求&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;HTTP协议是无状态的应用层协议，意味着每次HTTP请求都需要简历通信链路，进行数据传输，而在服务器端，每个HTTP都需要启动独立的线程去处理，这些通信和服务的开销都很昂贵，减少HTTP请求的数目可有效提高访问性能。&lt;/p&gt;&lt;p&gt;减少HTTP请求的主要手段是:&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt; 合并CSS，以及压缩CSS大小&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; 合并JavaScript，以及压缩JS大小&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; 合并图片&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;将浏览器一次访问需要的JavaScript,CSS合并成一个文件，这样浏览器就只需要一次请求。多张图片合并成一张，如果每张图片都有不同的超链接，可通过CSS偏移响应鼠标点击操作，构造不同的URL。&lt;/p&gt;&lt;h4&gt;&lt;span/&gt;(2)使用浏览器缓存&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;对一个网站而言，CSS,JavaScript,Logo,图标等这些静态资源文件更新的频率都比较低，而这些文件又几乎是每次HTTP请求都需要的，如果将这些文件缓存在浏览器中，可以极好地改善性能。通过设置HTTP头中Cache-Control和Expires属性，可设定浏览器缓存，缓存时间可以是数天甚至是几个月。有时候，静态资源文件变化需要及时应用到客户端浏览器，这种情况可以通过改变文件名实现，比如一般会在JavaScript后面加上一个版本号，使浏览器刷新修改的文件。&lt;/p&gt;&lt;h4&gt;&lt;span/&gt;(3)启用压缩&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;在服务器端对文件进行压缩，在浏览器端对文件解压缩，可有效较少通信传输的数据量。文本文件的压缩效率科大80%以上。&lt;/p&gt;&lt;h4&gt;&lt;span/&gt;(4)CSS放在页面最上面，JavaScript放在页面最下面&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;浏览器会在下载完全部CSS之后对整个页面进行渲染，因此最好的做法是将CSS放在页面最上面，让浏览器尽快下载CSS。JS则想法，浏览器在加载JS后立即执行，有可能会阻塞整个页面，造成页面显示缓慢，因此JS最好放在页面最下面。&lt;/p&gt;&lt;h4&gt;&lt;span/&gt;(5)减少Cookie传输&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;一方面，Cookie包含在每次请求和响应中，太大的Cookie会严重影响数据传输，因此哪些数据需要写入Cookie需要慎重考虑，尽量减少Cookie中传输的数据量。另一方面，对于某些静态资源的访问，如CSS,JS等，发送Cookie没有意义，可以考虑静态资源使用独立域名访问，避免请求静态资源时发送Cookie，减少Cookie传输的次数。&lt;/p&gt;&lt;h3&gt;&lt;span/&gt;2.CDN加速&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;CDN(Content Distribute Network,内存分发网络)的本质上仍然是一个缓存，而且将数据缓存在离用户最近的地方，是用户以最快速度获取数据，即所谓网络访问第一跳。&lt;/p&gt;&lt;p&gt;CDN一般缓存的是静态资源，如图片，文件，CSS，Script脚本，静态网页等，但是这些文件访问频率很高，将其缓存在CDN可极大改善网页的打开速度。&lt;/p&gt;&lt;h3&gt;&lt;span/&gt;3.反向代理&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;传统代理服务器位于浏览器一侧，代理浏览器将HTTP请求发送到互联网上，而反向代理服务器位于网站机房一侧，代理网站Web服务器接收HTTP请求。&lt;/p&gt;&lt;p&gt;和传统代理服务器可以保护浏览器安全一样，反向代理服务器也具有保护网站安全的作用，来自互联网的访问请求必须经过代理服务器，相当于在Web服务器和可能的网络攻击之间建立了一个屏障。&lt;/p&gt;&lt;p&gt;除了安全功能，代理服务器也可以通过配置缓存功能加速Web请求，当用户第一次访问静态内容的时候，静态内容就被缓存在反向代理服务器上，这样当其他用户访问该静态内容的时候，就可以直接从反向代理服务器返回，加速Web请求响应速度，减轻服务器负载要。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;strong&gt;6.服务化&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;做服务化最基础的是按业务做服务拆分，避免跨业务间的互相影响，数据和服务同时拆分。同一个业务内部我们还按计算密集型/IO密集型的服务拆分、C端/B端服务拆分、核心/非核心服务拆分、高频服务单独部署等原则做拆分。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;strong&gt;7.硬件升级&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;硬件问题对性能的影响不容忽视。&lt;/p&gt;&lt;p&gt;举一个例子：一个DB集群经常有慢SQL报警，业务排查下来发现SQL都很简单，该做的索引优化也都做了，后来DBA同学帮忙定位到问题是硬件过旧导致，将机械硬盘升级成固态硬盘之后报警立马消失了，效果立竿见影！&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;strong&gt;8.搜索引擎&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;复杂查询以及一些聚合计算不适合在数据库中做，可以利用搜索引擎来实现，另外搜索引擎还可以帮我们很好的解决跨库、跨数据源检索的场景。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h2&gt;&lt;span/&gt;&lt;strong&gt;9.产品逻辑优化&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;业务逻辑优化经常会容易被忽略，但效果却往往比&lt;a href=&quot;https://mikechen.cc/collection/performance&quot; data-linktype=&quot;2&quot;&gt;数据库性能优化&lt;/a&gt;、&lt;a href=&quot;https://mikechen.cc/3321.html&quot; data-linktype=&quot;2&quot;&gt;JVM调优&lt;/a&gt;之类的来的更明显。&lt;/p&gt;&lt;p&gt;举一个例子，12306春运抢火车票的场景，由于访问的人多，用户点击“查票”之后系统会非常卡，进度条非常慢，作为用户，我们会习惯性的再去点“查票”，可能会连续点个好几次。&lt;/p&gt;&lt;p&gt;假设平均一个用户点5次，则后端系统负载就增加了5倍！而其中80%的请求是重复请求。&lt;/p&gt;&lt;p&gt;这个时候我们可以通过产品逻辑的方式来优化，比如，在用户点击查询之后将“按钮置灰”，或者通过JS控制xx秒只能只能提交一次请求等，有效的拦截了80%的无效流量。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;必看●文章干货&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MDAxNDEwMA==&amp;amp;mid=2247488808&amp;amp;idx=1&amp;amp;sn=258331df45fc236b0650e3e1b197398a&amp;amp;chksm=fcf4b5d3cb833cc555733775e15df0075e56cef9e8cbce6034927b7dcd79b633e5437e998bcc&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;史上最强消息队列MQ万字图文总结！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mikechen.cc/8280.html&quot; textvalue=&quot;JVM(Java虚拟机)从0到1全部合集，强烈建议收藏！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;JVM(Java虚拟机)从0到1全部合集，强烈建议收藏！&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mikechen.cc/8225.html&quot; textvalue=&quot;Java多线程与并发系列从0到1全部合集，强烈建议收藏！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;Java多线程与并发系列从0到1全部合集，强烈建议收藏！&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mikechen.cc/7161.html&quot; textvalue=&quot;单点登录SSO的实现原理与方案详解&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;单点登录SSO的实现原理与方案详解&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mikechen.cc/7319.html&quot; textvalue=&quot;史上最强消息队列MQ万字图文总结！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;史上最强消息队列MQ万字图文总结！&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;必看●视频干货&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mikechen.cc/779.html&quot; textvalue=&quot;如何快速达到50W+年薪？我的独家经验分享！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mikechen.cc/779.html&quot; textvalue=&quot;如何快速达到50W+年薪？我的独家经验分享！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;如何快速达到50W+年薪？我的独家经验分享！视频详解&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mikechen.cc/779.html&quot; textvalue=&quot;阿里P6-&amp;gt;P7-&amp;gt;P8有哪些技能要求？哪些技术栈需要精通？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;阿里P6-&amp;gt;P7-&amp;gt;P8的技能要求？独家完整揭秘！视频详解&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mikechen.cc/779.html&quot; textvalue=&quot;大厂必考的HashMap有哪些必考点？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;大厂必考的HashMap底层实现源码深度剖析&lt;/a&gt;！&lt;a target=&quot;_blank&quot; href=&quot;https://mikechen.cc/779.html&quot; textvalue=&quot;Redis如何实现高性能？有哪3大核心原因？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;视频详解&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mikechen.cc/779.html&quot; textvalue=&quot;如何快速达到50W+年薪？我的独家经验分享！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;2022金三银四最新一线大厂Java必考题解析！视频详解&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mikechen.cc/779.html&quot; textvalue=&quot;手把手教你如何阅读RocketMQ中间件源码？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;手把手教你如何阅读RocketMQ中间件源码？&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mikechen.cc/779.html&quot; textvalue=&quot;Redis如何实现高性能？有哪3大核心原因？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;视频详解&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mikechen.cc/779.html&quot; textvalue=&quot;如何快速达到50W+年薪？我的独家经验分享！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注「mikechen的互联网架构」公众号，回复&lt;/span&gt;&lt;span&gt;&lt;span&gt;【&lt;/span&gt;&lt;span&gt;&lt;strong&gt;架构&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;】&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，领取我&lt;/span&gt;原创的300期+架构技术系列文章与1000+大厂面试题答案合集&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;如果你对大厂、架构等感兴趣或者遇到职业发展瓶颈想交流，&lt;span&gt;关注「mikechen的互联网架构」公众号，&lt;/span&gt;回复&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;【交流】&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，即可加我微信，一起交流学习。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SdOdAZX2thVeCmXchLLhiaOatUyyjibibUOMaT2IXKy4LugIbJCmwe90rvtjQRl1DMABWl11jPQvuPdrmibVia3ppOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1350&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8df54fdb49c587e7bff5e4690da8e7ef</guid>
<title>基于HiKariCP组件，分析连接池原理</title>
<link>https://toutiao.io/k/n613vsx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;blockquote&gt;&lt;p&gt;池塘里养：Connection；&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;&lt;span&gt;一、设计与原理&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、基础案例&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;HiKariCP作为SpringBoot2框架的默认连接池，号称是跑的最快的连接池，数据库连接池与之前两篇提到的线程池和对象池，从设计的原理上都是基于池化思想，只是在实现方式上有各自的特点；首先还是看HiKariCP用法的基础案例：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; com.zaxxer.hikari.HikariConfig;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.zaxxer.hikari.HikariDataSource;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.sql.Connection;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.sql.ResultSet;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.sql.Statement;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ConPool&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; HikariConfig &lt;span&gt;buildConfig&lt;/span&gt; &lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        HikariConfig hikariConfig = &lt;span&gt;new&lt;/span&gt; HikariConfig() ;&lt;br/&gt;        &lt;span&gt;// 基础配置&lt;/span&gt;&lt;br/&gt;        hikariConfig.setJdbcUrl(&lt;span&gt;&quot;jdbc:mysql://127.0.0.1:3306/junit_test?characterEncoding=utf8&quot;&lt;/span&gt;);&lt;br/&gt;        hikariConfig.setUsername(&lt;span&gt;&quot;root&quot;&lt;/span&gt;);&lt;br/&gt;        hikariConfig.setPassword(&lt;span&gt;&quot;123456&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;// 连接池配置&lt;/span&gt;&lt;br/&gt;        hikariConfig.setPoolName(&lt;span&gt;&quot;dev-hikari-pool&quot;&lt;/span&gt;);&lt;br/&gt;        hikariConfig.setMinimumIdle(&lt;span&gt;4&lt;/span&gt;);&lt;br/&gt;        hikariConfig.setMaximumPoolSize(&lt;span&gt;8&lt;/span&gt;);&lt;br/&gt;        hikariConfig.setIdleTimeout(&lt;span&gt;600000L&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; hikariConfig ;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 构建数据源&lt;/span&gt;&lt;br/&gt;        HikariDataSource dataSource = &lt;span&gt;new&lt;/span&gt; HikariDataSource(buildConfig()) ;&lt;br/&gt;        &lt;span&gt;// 获取连接&lt;/span&gt;&lt;br/&gt;        Connection connection = dataSource.getConnection() ;&lt;br/&gt;        &lt;span&gt;// 声明SQL执行&lt;/span&gt;&lt;br/&gt;        Statement statement = connection.createStatement();&lt;br/&gt;        ResultSet resultSet = statement.executeQuery(&lt;span&gt;&quot;SELECT count(1) num FROM jt_activity&quot;&lt;/span&gt;) ;&lt;br/&gt;        &lt;span&gt;// 输出执行结果&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (resultSet.next()) {&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;query-count-result：&quot;&lt;/span&gt;+resultSet.getInt(&lt;span&gt;&quot;num&quot;&lt;/span&gt;));&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;2、核心相关类&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;HikariDataSource类&lt;/strong&gt;：汇集数据源描述的相关信息，例如配置、连接池、连接对象、状态管理等；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;HikariConfig类&lt;/strong&gt;：维护数据源的配置管理，以及参数校验，例如userName、passWord、minIdle、maxPoolSize等；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;HikariPool类&lt;/strong&gt;：提供对连接池与池中对象管理的核心能力，并实现池相关监控数据的查询方法；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;ConcurrentBag类&lt;/strong&gt;：抛弃了常规池中采用的阻塞队列作为容器的方式，自定义该并发容器来存储连接对象；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;PoolEntry类&lt;/strong&gt;：拓展连接对象的信息，例如状态、时间等，方便容器中追踪这些实例化对象；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过对连接池中几个核心类的分析，也能直观地体会到该源码的设计原理，与上篇总结的对象池应用有异曲同工之妙，只是不同的组件不同的开发者在实现的时候，都具备各自的抽象逻辑。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;3、加载逻辑&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.42890625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvDgPbk1z87ibOlfz4x3Kia3R4tXsTujHNibZlMGHl9ULI680jZ49diaCM5APcGkHohnwEiaAYzEibQaTzLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;通过配置信息去构建数据源描述，在构造方法中基于配置再去实例化连接池，在HikariPool的构造中，实例化ConcurrentBag容器对象；下面再从源码层面分析实现细节。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、容器分析&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、容器结构&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;容器ConcurrentBag类提供PoolEntry类型的连接对象存储，以及基本的元素管理能力，对象的状态描述；虽然被HikariPool对象池类所持有，但是实际的操作逻辑是在该类中；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1.1 基础属性&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;其中最为核心的是&lt;code&gt;sharedList&lt;/code&gt;共享集合、&lt;code&gt;threadList&lt;/code&gt;线程级缓存、&lt;code&gt;handoffQueue&lt;/code&gt;即时队列；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// 共享对象集合，存放数据库连接&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; CopyOnWriteArrayList&amp;lt;T&amp;gt; sharedList;&lt;br/&gt;&lt;span&gt;// 缓存线程级连接对象，会被优先使用，避免被争抢&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ThreadLocal&amp;lt;List&amp;lt;Object&amp;gt;&amp;gt; threadList;&lt;br/&gt;&lt;span&gt;// 等待获取连接的线程数&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; AtomicInteger waiters;&lt;br/&gt;&lt;span&gt;// 标记是否关闭&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; closed;&lt;br/&gt;&lt;span&gt;// 即时处理连接的队列，当有等待线程时，通过该队列将连接分配给等待线程&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; SynchronousQueue&amp;lt;T&amp;gt; handoffQueue;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;1.2 状态描述&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在ConcurrentBag类中的IConcurrentBagEntry内部接口，被PoolEntry类实现，该接口定义连接对象的状态：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;STATE_NOT_IN_USE：未使用，即闲置中；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;STATE_IN_USE：使用中；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;STATE_REMOVED：被废弃；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;STATE_RESERVED：保留态，中间状态，用于尝试驱逐连接对象时；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;2、包装对象&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;容器的基本能力是用来存储连接对象的，而对象的管理则需要很多扩展的跟踪信息，以有效的完成各种场景下的识别，此时就需要借助包装类的引入；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// 业务真正使用的连接对象&lt;/span&gt;&lt;br/&gt;Connection connection;&lt;br/&gt;&lt;span&gt;// 最近访问时间&lt;/span&gt;&lt;br/&gt;&lt;span&gt;long&lt;/span&gt; lastAccessed;&lt;br/&gt;&lt;span&gt;// 最近借出时间&lt;/span&gt;&lt;br/&gt;&lt;span&gt;long&lt;/span&gt; lastBorrowed;&lt;br/&gt;&lt;span&gt;// 状态描述&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; state = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;// 是否驱逐&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; evict;&lt;br/&gt;&lt;span&gt;// 生命周期结束时的调度任务&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; ScheduledFuture&amp;lt;?&amp;gt; endOfLife;&lt;br/&gt;&lt;span&gt;// 连接生成的Statement对象&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; FastList&amp;lt;Statement&amp;gt; openStatements;&lt;br/&gt;&lt;span&gt;// 池对象&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; HikariPool hikariPool;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里需要注意FastList类实现List接口，为HiKariCP组件自定义，相比ArrayList类，出于对性能的追求，在元素的管理时，去掉诸多的范围校验。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、对象管理&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;基于连接池的常规用法，来看看连接对象具体是如何管理，比如被借出，被释放，被废弃等，以及这些操作下对象的状态转换过程；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;1、初始化&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;上文&lt;strong&gt;加载逻辑&lt;/strong&gt;的描述中，已经提到在构建数据源的时候，会根据配置实例化连接池，在初始化的时候，基于两个核心切入点来分析源码：1.实例化多少连接对象、2.连接对象转换包装对象；&lt;/p&gt;&lt;p&gt;在连接池的构造中执行了&lt;code&gt;checkFailFast&lt;/code&gt;方法，在该方法内执行MinIdle最小空闲数的判断，如果大于0，则创建一个包装对象并放入容器中；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.36171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvDgPbk1z87ibOlfz4x3Kia3R4l00I0uEMyMX82tmFS7RliajZFojG3bYHJY7TQshMLwl73KUW6bK1m5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;HikariPool&lt;/span&gt;&lt;span&gt;(&lt;span&gt;final&lt;/span&gt; HikariConfig config)&lt;/span&gt; &lt;/span&gt;;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;checkFailFast&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; PoolEntry poolEntry = createPoolEntry();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (config.getMinimumIdle() &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        connectionBag.add(poolEntry);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要注意两个问题，创建的连接包装对象，初始状态是0即闲置中；另外虽然案例中设置&lt;code&gt;MinIdle=4&lt;/code&gt;的值，但是这里的判断大于0，也只在容器中预先放入一个空闲对象；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、借用对象&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;从池中获取连接对象时，实际调用的是容器类中的&lt;code&gt;borrow&lt;/code&gt;方法：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; Connection HikariPool.getConnection(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; hardTimeout) &lt;span&gt;throws&lt;/span&gt; SQLException ;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; T ConcurrentBag.borrow(&lt;span&gt;long&lt;/span&gt; timeout, &lt;span&gt;final&lt;/span&gt; TimeUnit timeUnit) &lt;span&gt;throws&lt;/span&gt; InterruptedException ;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvDgPbk1z87ibOlfz4x3Kia3R4up2y4Dr3hVpNwVicBMZD3IAzV1Vlv0MPmnkNdgQ6rsuL33ScKKKa7LA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;在执行&lt;code&gt;borrow&lt;/code&gt;方法时，涉及如下几个核心步骤与逻辑：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; T &lt;span&gt;borrow&lt;/span&gt;&lt;span&gt;(&lt;span&gt;long&lt;/span&gt; timeout, &lt;span&gt;final&lt;/span&gt; TimeUnit timeUnit)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 遍历本地线程缓存&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; List&amp;lt;Object&amp;gt; list = threadList.get();&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = list.size() - &lt;span&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span&gt;0&lt;/span&gt;; i--) {&lt;br/&gt;       &lt;span&gt;final&lt;/span&gt; Object entry = list.remove(i);&lt;br/&gt;       &lt;span&gt;final&lt;/span&gt; T bagEntry = weakThreadLocals ? ((WeakReference&amp;lt;T&amp;gt;) entry).get() : (T) entry;&lt;br/&gt;       &lt;span&gt;if&lt;/span&gt; (bagEntry != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) { }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 增加等待线程数&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; waiting = waiters.incrementAndGet();&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;// 遍历Shared共享集合&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (T bagEntry : sharedList) {&lt;br/&gt;           &lt;span&gt;if&lt;/span&gt; (bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) { }&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// 一定时间内轮询handoff队列&lt;/span&gt;&lt;br/&gt;        listener.addBagItem(waiting);&lt;br/&gt;        timeout = timeUnit.toNanos(timeout);&lt;br/&gt;        &lt;span&gt;do&lt;/span&gt; {&lt;br/&gt;           &lt;span&gt;final&lt;/span&gt; T bagEntry = handoffQueue.poll(timeout, NANOSECONDS);&lt;br/&gt;        } &lt;br/&gt;    } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;// 减少等待线程数&lt;/span&gt;&lt;br/&gt;       waiters.decrementAndGet();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;首先反向遍历本地线程缓存，如果存在空闲连接，则返回该对象；如果没有则寻找共享集合；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;遍历Shared共享集合前，会标记等待线程数加1，如果存在空闲连接则直接返回；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当Shared共享集合中也没有空闲连接时，这时当前线程进行一定时间的&lt;code&gt;handoffQueue&lt;/code&gt;队列轮询，可能会有资源的释放，也可能是新添加的资源；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;注意这里在遍历集合时，取出的对象都会对状态进行判断和更新，如果得到空闲对象，会更新为&lt;code&gt;IN_USE&lt;/code&gt;状态，然后返回；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;3、释放对象&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;从池中释放连接对象时，实际调用的是容器类中的&lt;code&gt;requite&lt;/code&gt;方法：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;void&lt;/span&gt; HikariPool.recycle(&lt;span&gt;final&lt;/span&gt; PoolEntry poolEntry) ;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ConcurrentBag.requite(&lt;span&gt;final&lt;/span&gt; T bagEntry) ;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.36328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvDgPbk1z87ibOlfz4x3Kia3R4K9xlEhRra4HghU6QlZeDAbzuuOeJkU2abNzGByNEyoDo8XicJRbXkHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;在释放连接对象时，首先更新对象状态为空闲，然后判断当前是否有等待的线程，在&lt;code&gt;borrow&lt;/code&gt;方法中等待线程会进入一定时间的轮询，如果没有的话则把对象放入本地线程缓存中：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;requite&lt;/span&gt;&lt;span&gt;(&lt;span&gt;final&lt;/span&gt; T bagEntry)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 更新状态&lt;/span&gt;&lt;br/&gt;    bagEntry.setState(STATE_NOT_IN_USE);&lt;br/&gt;    &lt;span&gt;// 等待线程判断&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; waiters.get() &amp;gt; &lt;span&gt;0&lt;/span&gt;; i++) {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (bagEntry.getState() != STATE_NOT_IN_USE || handoffQueue.offer(bagEntry)) { }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 本地线程缓存&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; List&amp;lt;Object&amp;gt; threadLocalList = threadList.get();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (threadLocalList.size() &amp;lt; &lt;span&gt;50&lt;/span&gt;) {&lt;br/&gt;        threadLocalList.add(weakThreadLocals ? &lt;span&gt;new&lt;/span&gt; WeakReference&amp;lt;&amp;gt;(bagEntry) : bagEntry);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意这里涉及到连接对象的状态从使用中转为&lt;code&gt;NOT_IN_USE&lt;/code&gt;空闲；&lt;code&gt;borrow&lt;/code&gt;与&lt;code&gt;requite&lt;/code&gt;作为连接池中两个核心方法，负责资源创建与回收；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;最后&lt;/strong&gt;本篇文章并没有站在HiKariCP组件的整体设计上构思，只是分析连接池这冰山一角，尽管只是部分源码，但是已经足够彰显出作者对于性能的极致追求，比如：本地线程缓存、自定义容器类型、FastList等；能被普遍采用必然存在诸多支撑的理由。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;四、参考源码&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;应用仓库：&lt;br/&gt;https://gitee.com/cicadasmile/butte-flyer-parent&lt;br/&gt;&lt;br/&gt;组件封装：&lt;br/&gt;https://gitee.com/cicadasmile/butte-frame-parent&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU4Njg0MzYwNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBCuF3zfJnqPKpUia4wfn1FUtTHpxxkR5HvbicPgOjibPicX0goMOkny1NdkLAJvBaqrYh3UdwMjiaDQMA/0?wx_fmt=png&quot; data-nickname=&quot;知了一笑&quot; data-alias=&quot;cicada_smile&quot; data-signature=&quot;积累是一个孤独且枯燥的过程&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>60cfaf5f1f4d5359433afc8695764958</guid>
<title>大前端性能体系建设，记住这几条tips</title>
<link>https://toutiao.io/k/lxaqahw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;a class=&quot;weui-flex original_primary_card appmsg_card_context wx_tap_card js_wx_tap_highlight&quot; href=&quot;#&quot; id=&quot;copyright_info&quot;&gt;
                  
                  &lt;div class=&quot;weui-flex__item&quot; role=&quot;option&quot;&gt;
                    &lt;strong class=&quot;original_primary_nickname&quot;&gt;HeapDump性能社区&lt;/strong&gt;
                                          &lt;span class=&quot;weui-hidden_abs&quot;&gt;.&lt;/span&gt;
                      &lt;p class=&quot;original_primary_desc&quot;&gt;PerfMa旗下专注于性能领域的技术社区。为您提供性能领域的知识、问答、课程，以及各种解决性能问题的工具插件。&lt;/p&gt;
                                      &lt;/div&gt;
                  &lt;p class=&quot;weui-flex__ft&quot;/&gt;
                &lt;/a&gt;
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8c1176e72c27b67b8bb33b61344ce439</guid>
<title>再谈开源：开源发展与商业化</title>
<link>https://toutiao.io/k/7lmth5o</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span&gt;开源的本质在于开放、共享、协同，作为一种创新协作模式，开源不仅限于开源代码的软件开发，还包括更为广泛的开放技术领域及协同创新的理念和机制。开源作为一种文化，具有“创新、开放、自由、共享、协同、民主化”等价值取向和重要特征，即以创新为发展主线，具有开放（开放标准、开放环境、开放源码）、自由（自由发布、自由传播、自由复制、自由修改、自由使用）、协同（协同开发、协同生产）、民主化（在新兴协同共享中，创新孵化新的激励方式，基于较小的经济汇报，推动人类经济生活方式，实现全球民主化）的特征。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1).发展概述&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;开源软件的发展，可以说经历了几个时期。最早的软件开源理念可追溯到计算机软件产业初期，早期的开发者提出的“自由软件”的概念。其核心理念是软件不应该作为一种被私有化的商业资产，而应该成为一种公开的、可免费获取的公共资源。随后在1976年的著作权法，更加剧了自由软件开发者的不满，同时加速了市场对一种开放、非私有的软件开发和运营方式的探索。到了1998年，开源组织OSI正式提出开源理念及十大特性规范，开源软件产业进入成长期。特别到到了20世纪末的互联网经济的加速发展为开源软件提供了良好的发展环境。进入21世纪后，包括云计算、大数据、AI等新兴的技术的发展开始更多基于开源技术。开源对于企业打磨产品，构造生态的意义突显。在最近的十年，基于开源软件的商业模式也逐步清晰，这点从资本对开源产品的追捧可见一二。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2).开源理念&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;开源软件领域有一本经典的著作《大教堂与集市》，书中将开源软件与传统软件以集市和大教堂两个生动的比喻来阐述其中开发的区别。“大教堂”模式指代的是软件企业进行商业化软件开发的流程，是以少数领导决策、下述团队执行，开发过程紧凑高效，以商业化成功为导向；“集市”模式指代是开源软件的开发模式，软件代码公开，海量用户和开发整合在了解软件的过程中不断提出改进意见并修补完善。热衷于开源的开发者认为，“集市”模式通过市场的自然选择，能够挖掘出真正具备潜力和价值的项目和创意，从而为软件的持续发展赋能。&lt;/span&gt;&lt;span&gt;开源模式具备以下优势：&lt;/span&gt;&lt;/h3&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❖ 软件迭代速度领先&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如前文在《大教堂与集市》中谈到的。大教堂模式是传统的闭源软件开发模式，是一种严格有序、自上而下的顶层设计；而开源软件对应的集市模式，看似混乱，实为一种允许并行多线开发、动态多人协同的软件开发模式，是由开源社区共同提出和认领任务、社区自治、而下而上的解决问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26825396825396824&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xZOm0XATx0VeYoKkyhmko6eiabgssgWDFmvsOAvsHKnSZYWbYTjOymIUqaoLia7iaAJtwib3eaVFWuictSL8OgHgN9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;630&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这两者的差异在于对软件源代码价值的认知，闭源软件认为源代码本身具备很高价值；开源软件则认为软件迭代速度是核心优势所在。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❖ 需求更加切合场景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在传统的软件研发过程中，是有明确的角色划分。甲方对软件提出需求，乙方根据需求投入资源研发。这一模式是从需求及供给侧天然存在不同程度的错配。乙方依赖甲方认知输出来构建产品，通过不断迭代进行改进。在传统的软件研发过程中，是有明确的角色划分。甲方对软件提出需求，乙方根据需求投入资源研发。这一模式是从需求及供给侧天然存在不同程度的错配。乙方依赖甲方认知输出来构建产品，通过不断迭代进行改进。然而在开源模式中，客户既是软件的使用者、购买者，又是开发者。正是在不断地用户使用中，开源产品因为吸收了用户提供的各种业务场景，可更加贴近用户需求，让开源产品变得愈发强大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❖ 吸引顶尖人才参与&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;人的能力与投入度决定了软件项目的质量，而开源社区往往能吸引能力最优秀的开发者，愿意成为社区的一员。而闭源模式下，产品的高度局限于公司内部员工的认知和能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❖ 面向开发者模式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开源软件通过社区的模式吸引开发者。而每一个开发者的加入，社区自身的网络效应也得以增强，开源项目和社区整体价值都得以提升。这种toC的属性也是开源商业模式的魅力之一，这在后期形成强大的社区壁垒。通过网络效应的累积，形成开发者、社区、产品的飞轮效应。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.680672268907563&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xZOm0XATx0VeYoKkyhmko6eiabgssgWDFKcNbY1WfqyEsv9mib1PWzAkBkWynNe0BSFEa5G3ANUnD5EkzjgdIG5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;714&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3).开源许可证&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3665024630541872&quot; data-type=&quot;png&quot; data-w=&quot;1015&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xZOm0XATx0VeYoKkyhmko6eiabgssgWDFyo0T4zXpg65z4nnzYdD8OGXWrgRmtloBf2c2QLTDnvpzmsqehzXYuQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开源许可证，是一种法律许可。通过它，版权拥有人明确允许用户可以免费地使用、修改、共享版权软件。它是一种具有法律性质的合同，目的在于规范受著作权保护的软件的使用或者分发行为。从通常意义来看，所有的开源协议本质上都是允许商用的。所不同的是指其“传染性”问题，带有传染性的开源许可证软件要求对其进行修改发布时保留原来的许可证（意味着必须将修改后的软件也公开源代码）。按这一维度，如上图可见，开源许可证可分为两类：宽松自有软件许可协议（Permissive License）、著作权许可证（Copyleft License）。前者是一种对软件的使用、修改、传播等方式采用最低限制的自由软件许可协议条款类型。这种类型的软件许可协议将不保证原作品的派生作品会继续保持与原作品完全相同的限制条件，从而为原作品的自由使用、修改和传播等提供更大的空间。后者则是在有限空间内的自由使用、修改和传播，且不得违背原作品的限制条款。如果一款软件使用此类型许可协议规定软件不得用于商业目的且不可闭源，那么后续的衍生软件也必须遵循该条款。这两者最大的区别在于，在软件被修改并再发行时，Copyleft License仍然强制要求公开源代码（衍生软件需要开源），而Permissive License不要求公开源代码（衍生软件可变为专有软件）。上图中Apache、MIT、BSD都是宽松许可证，GPL是典型的强著作权许可证，LGPL、MPL是弱著作权许可证。除上述外，还有些新许可协议，如MongoDB提出的SSPL，针对这些还存在些争议。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4).开源组织&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;提到开源，就不得不提到开源&lt;span&gt;界两大名声显赫的开源阵营，地位比较权威，它们分别是FSF与OSI。FSF（Free Software Foundation,自由软件基金会），自由软件基金会是在1985年10月由理查德·斯托曼建立的美国民间非营利组织，并提出“自由软件”的概念，即要尊重用户自由，为了该自由提出了Copyleft（自由）概念，就是Copyright（版权）的反义词。它指出自由软件是必须100%提供源码，但是“自由软件”并不是完全免费，发布“自由软件”的作者可以选择适当的收费（收费价格需合理），也可以免费。FSF发布的License许可证协议被广泛使用的就是GPL协议与LGPL协议。OSI（Open Source Initiative,开源计划组织），在1998年OSI正式成立，因为FSF提出的“自由软件”很容易给人带来免费自由的误解，同时“自由软件”对于个人开发者来说很喜欢，但是对于企业来说想继承发展“自由软件”会有一些顾忌，因为使用了“自由软件”的源码，新的项目的源码也需要公开，许多商业公司是不愿意的。基于此Christine Peterson想到了“开源（Open Source)”一词，并得到开源界的广泛认可，并最终将OSI成为一个权威的开源标准组织。被OSI组织批准的开源协议有BSD协议、MIT协议、Apache协议等接近上百种协议。FSF自由软件基金会发布的GPL协议也得到OSI组织的认可，进入OSI组织的大名单中。&lt;/span&gt;&lt;span&gt;FSF和OSI在代码开源上殊途同归，很大程度上了都实现了“免费开源”，但他们的出发点是不同的。目前基于这两大思想，当今的开源License也通常可以分成两大类：Copyleft(版权许可证，以GPL为代表)和Permissive(自由许可证，比如MIT、BSD等)。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5).开源基金会&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;开源基金会是专门为支持开源软件项目而办的非营利性组织，它们通过为软件项目社区提供服务与支持实现价值。为开发者提供一个发现、使用、交流开源技术的平台。一般而言，开源基金会提供软件知识产权管理的法律框架、技术服务（如软件仓库、问题跟踪等）、日常的运营和治理支持等。国际上比较著名的基金会ASF、CNCF等。ASF，全称Apache Software Foundation，Apache软件基金会，它是全球最大的开源软件基金会，其开源软件支撑了全球亿万计软件，服务于全球各行各业。CNCF，全称Cloud Native Computing Foundation，云原生计算基金会，他们全球云计算领域最知名的开源基金，当前几乎所有知名的云原生开源项目都托管在CNCF。&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❖ 开源项目发展流程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;项目进入基金会托管，会经历几个发展阶段。下面取自艾瑞开源报告内容，标识出主要阶段及各阶段的特征。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38247011952191234&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xZOm0XATx0VeYoKkyhmko6eiabgssgWDFAuFK2wic18KOpqombSjEnC6rtOWicZKAVpFw2lL847T3P5Qwu3z5Wqfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1004&quot;/&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❖ 开源基金会运作模式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;开源基金会的组织架构主要包括三个核心部分：&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;董事会/理事会，重大决定须通过董事会/理事会表决才能执行；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;项目管理委员会/技术监督委员会，决定开源项目是否能进入孵化流程以及能否毕业，对基金会中的项目提供技术支持与指导，确保每个项目都符合基金会的规范章程；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;运营和执行部门，负责监督、运营、人事、章程制定等常规工作，实际执行基金的使用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下面以Apache基金会为例，说明其运作原理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44345238095238093&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xZOm0XATx0VeYoKkyhmko6eiabgssgWDFAVeANhLwpox2pSDhbpfl4qz4zx7L0AIubFyHhJCNhSDL1RuEibjUxXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1008&quot;/&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❖ 中国与开源基金会&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;中国作为一个充满活力的开源生态发展区域，也积极参与到全球的开源浪潮中，并已成为开源技术的主要消费者和贡献者。在全球知名的ASF、CNCF中，已存在大量中国提交的的项目。一方面国内企业对国际级开源项目的贡献持续保持着较高的水平，另一方面越来越多的中国开发者在国际社区扮演着重要角色，成为开源基金会的管理层，参与到国际开源标准的制定中。与此同时，国内的开源基金会建设虽然起步较晚，但发展迅速。2020.6成立的开放原子开源基金会，目前是国内开源领域的唯一基金会组织，已经吸引到超过10以上项目入驻孵化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5736842105263158&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xZOm0XATx0VeYoKkyhmko6eiabgssgWDF7SibIfdicgpo9xD5HaHwhibLSUAQspFU9IwmX3aS2VscPtCK7DquFK4icg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;570&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们以近年来进入ASF孵化的项目来看，国内项目占比逐年提高，在2021年进入ASF孵化的所有项目均来自中国。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6).开源产业链&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从开源整体产业来看，涉及到多方，包括有开源作者（含企业）、开源基金会、开源社区、开源贡献者、开源软件使用者多方。下图标识出多方在这其中的角色及发挥的作用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23010920436817472&quot; data-type=&quot;png&quot; data-w=&quot;1282&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xZOm0XATx0VeYoKkyhmko6eiabgssgWDFpqQEs7yRJE39X2NyKhPDrfS2p5N7wN36Sicia654jVcAANBmHwl0Ux1w/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开源代码的最初的贡献者，可能来自企业或个人，其开发出开源项目。根据其所在实体或者意愿，可选择多种开源路径。一种是通过企业开源运营，一种是捐赠给开源基金会负责运营。无论哪一种都是需要有个成熟的开源社区来支撑运营。这其中以代码托管平台和开源软件论坛为核心，辅助以市场宣传、法律服务、专家指导、产业联盟机构和服务，协同开展项目的开源运营活动，促进项目发展。代码通过托管平台开放后，二次开发者和最终用户都可以免费获取。二次开发者可以为项目持续改进贡献；最终用户则可通过使用体验为项目更好发展提出建议和意见。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;89204&quot;&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;2. 开源商业化&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1).开源与闭源软件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在开启开源商业化之前，我们先关注开源软件与闭源软件的对比。从下图我们可见，两者的诸多不同。这些诸多的不同点，也造就了后面开源商业化的策略与传统商业软件的不同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44132334581772786&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xZOm0XATx0VeYoKkyhmko6eiabgssgWDFP3kpZnjUNhZOGLK4ZqKaBesFBLjBbrJAjUG6K5f4r5nQYe5TcwcU5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1602&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而从整体核心技术生态体系来看，开源与闭源软件已经不分伯仲，甚至在大部分领域产品更加广泛。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.594188376753507&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xZOm0XATx0VeYoKkyhmko6eiabgssgWDFlSNj2fYlhyoia63YO3do9XzQ86g8crXgRZKpHdzW2mqqH7evDIZWmxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;998&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2).开源商业本质&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;开源，如何实现商业化变现？一直是人们很关注的一个问题。这部分，我们就来聊聊开源商业化的问题。&lt;/span&gt;&lt;span&gt;从本质来讲，开源并非一种商业模式，其本质是一种新型的生产协作关系，用来大幅提高软件供给侧交付效率。通过构建在开发者与需求者、开发者与开发者之间新型协作关系，一方面可充分利用前人的成果，一方面让需求者也参与到软件开发环境中。通过大量使用者的参与，可快速积累测试用例，帮助产品快速成熟。&lt;/span&gt;&lt;span&gt;而开源背后的经济学原理，是根据一种商品的价格变化对另一个商品的需求影响，将商品划分为互补品和替代品。举个简单例子，作为水果的苹果和香蕉是替代品关系，作为餐具的碗和筷子是互补品关系。前者一个售卖多了，另一个自然售卖少了；后者一个售卖多了，反而会促进另一个的售卖。开源商业的本质就是找到边际成本足够低的部分，将价格降到最低，以期望用户使用实惠的产品后，倾向于购买其他互补品，最后通过互补品实现收益最大化。作为开源的基础软件，将一套软件代码的边际成本降低为0，直接将其开源、免费提供，以最快的速度go to market，并将其中一部分用户转化为对互补品的需求，从互补品上收费获益。因此，商业化的核心问题就是如何框定这个边际成本为0的范围，如何选择最合适的互补品，如何对互补品定价。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3).开源商业模式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开源公认的有三种盈利模式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❖ 增值服务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种模式靠技术服务盈利。开源软件后面的运维、部署、咨询、升级等，统称为技术服务。其中模式的变现价值点主要为企业提供一种保障。因为开源软件一般涉及到企业内部核心的基础设施，其稳定性和服务保障率是企业重要的指标。同城企业会倾向于采购外部的保障服务，作为“保险”。其核心风险是难以规模化，服务收入的增长通常意味着内部服务人员的增长。在不扩大人员规模的情况下，增长的方式只有扩展产品线。这种模式的毛利率在20~30%，典型公司如Redhat。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❖ 双版本（Open Core）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种模式是通过发行两个版本，一个开源社区版本，一个企业版本。在企业版本中增加开源版本不具备的功能，例如数据审计、数据加密、权限管理等，以此更好地满足企业用户的诉求。此外，还可提供集群版本扩大支撑规模，提供开发工具提升效率等方式。这种模式会比增值服务模式更容易规模化，但是企业需要平衡企业版本与开源版本的利益。大部分开源社区中，企业版用户仅占一小部分，如果所有核心功能仅提供给企业版用户，无疑开源社区会因此失去活力。这种模式的毛利率在60~80%，典型公司如Elastic。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❖ 云托管（Hosting）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着云计算的兴起，把软件部署在云端，提供安全、高效、可用的方案，让用户省去部署运维麻烦。这种模式的价值点在于云为软件提供很好的分发渠道，用户可更加便捷地购买软件。在选择这一模式后，企业避免本地部署、运维步骤，节省了人力成本，为企业使用软件带来极大便利。这一模式亮点在于边际成本递减，可规模化潜力高，风险在于服务构建于云厂商，而云厂商会利用开源版本与开源公司形成直接竞争关系。通常这种方式可通过与Open Core方式结合形成混合云能力或者改变开源版权，来形成竞争壁垒。这种商业模式的的毛利率在40~60%，典型企业如MongoDB。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33729216152019004&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xZOm0XATx0VeYoKkyhmko6eiabgssgWDFNKfOkyhB6KmWcqHYBHprMcebjyKPJ35C3mLAFt2wCJ6acnL2nTIoqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;842&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4).开源企业发展阶段&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;开源软件的发展，可大体分为三个阶段，分别是孵化期、产品验证期和价值变现期。在不同的阶段，会关注到不同的指标，过早的商业化、收割用户往往不能持续。早期的漂亮数字，不代表后期具备高成长性。往往这一过程是需要十年以上，如果没有足够的耐心，是无法看到硕果累累的季节。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❖ 孵化期&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开源项目成立的前3~4年，最重要的是孵化，建立开源社区。企业重点关注的是开源项目是否能够吸引开发者参与、是否愿意积极与社区互通、是否解决了开发者群体的共性问题？这个阶段企业可通过诸如Github指标来衡量社区发展情况。此时的目标用户画像是开发者。这个阶段是开源企业最为重要的阶段，建立好的社区是企业未来发展的保障和企业的长期壁垒。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26233453670276774&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xZOm0XATx0VeYoKkyhmko6eiabgssgWDFRvLEiaPYHK3homjIbfZ6BuxT4F079CgY5JZzicS7ZbIWlL6ywgPbibPTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;831&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❖ 产品验证期&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在获得足够开发者认可后，下一步是进行产品的PMF。该阶段重点关注的是产品是否满足企业用户的需求，可通过下载量、使用情况、KA客户、付费意愿等来评估，进而对企业客户是否从产品中获取价值、产品的商业基础是否成立做出判断。企业付费的价值点很多，开源企业需要找到合适自己的模式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❖ 价值变现期&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在开源项目、企业级产品均得到验证后，开源企业才会转移到获取利润。此时，企业需要验证的是经济模型是否可持续、是否可规模化，衡量的指标就是常规的营收、订单数、ARR等。到了这个阶段，开源企业的商业价值才能完全体现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28157589803012745&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xZOm0XATx0VeYoKkyhmko6eiabgssgWDF0j5Er09LUJApDUVH2sFvuArKPpSqF9dzAF2ezjkwdk8MUMJUpdbFyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;863&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❖ 案例：MongoDB的发展&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40421263791374124&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xZOm0XATx0VeYoKkyhmko6eiabgssgWDFMVvbxIopTystXX7OibnNFWwqQFpba7p5w0Sv1IXTu1CZiavKp2OZITiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;997&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5).开源软件选型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;前面从开源企业角度谈到了很多商业模式问题，那么从用户角度如何对开源软件进行选型。可从下图列出的选型要素中进行评估。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.390194075587334&quot; data-type=&quot;png&quot; data-w=&quot;979&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xZOm0XATx0VeYoKkyhmko6eiabgssgWDFs4SCjiaVZRdGWVKVc5LEYhMoGsSPGmqiaLPYYp0gHtt9iaWhmEn5zR09g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这其中需重点关注的要素有：&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;开源许可证，这里蕴含着巨大的法务风险，避免可能带来的开源传染性问题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;软件生态，是否有良好开源社区作为后续发展的支持也很关键。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;软件成熟度，尽量选择开源时间较长，成熟主流的开源软件。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2117d50ff4768a62fbedaf6104ecd6f9</guid>
<title>Web3建设者的去中心化指南；科学居家运动指南；谷歌工程最佳实践｜码农周刊VIP会员专属Newsletter Vol.087</title>
<link>https://toutiao.io/k/gdesf1u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078463&amp;amp;idx=1&amp;amp;sn=95f0bdce33a58fcfca68d01de3c75cfd&amp;amp;chksm=bd2918088a5e911ee49f12cb649c16057350d1a11c884496460b3052d653f9fe80e31ac10f7b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavib3NlJt37DBSrTmLaGd7y82icbyrtFQ5edhQTZA13mpdrBmbianfFq2ib4Jiar4GBhSN4ppvVY1RrTgPQ/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078463&amp;amp;idx=1&amp;amp;sn=95f0bdce33a58fcfca68d01de3c75cfd&amp;amp;chksm=bd2918088a5e911ee49f12cb649c16057350d1a11c884496460b3052d653f9fe80e31ac10f7b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;如何获取优质信息？推荐一种高手都在用的方式！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如何获取优质信息？推荐一种高手都在用的方式！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;本期，首先分享的是&lt;strong&gt;迪士尼CEO的45条领导哲学&lt;/strong&gt;，摘录几条，供参考。&lt;br/&gt;1）想要讲述精彩的故事，你就需要杰出的人才； &lt;br/&gt;2）拼死创新； &lt;br/&gt;3）在犯错时勇敢承担责任；&lt;br/&gt; 4）以善待人；&lt;br/&gt; 5）过去已逝，未来才是重点；&lt;br/&gt;……&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;查看完整链接版请微信扫描下方二维码，加入「码农周刊VIP会员」。&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavicibroqCN98y5SNT9NbfA3oHYQiaicFScHFfppgek7ZGicJiaHK45qc2zoccBibfEzIvzTsI4AB2xO2IaOw/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;科学居家运动指南&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;https://mp.weixin.qq.com/s/rL4GW-YfJL39GznOtHRSgA&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;如果你一时不能出门，没法到户外运动也去不了健身房、运动馆，在家也可以用一些简单的运动来帮助保持身体和心理的健康。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;Web3 建设者的去中心化指南：原则、模型、方法&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;https://mp.weixin.qq.com/s/7kxUA2oQp_POklrNJuZSwA&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以多个场景为例对 Web3 应用去中心化的基本原理与方法进行深度解析&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;谷歌工程最佳实践&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/q19mmjh&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Google 团队长期以来的内部项目最佳实践&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;10道不得不会的JVM面试题&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/t1vquz4&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;试试吧&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Rust语言中不可变性、可变性、内部可变性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/01n5z5r&lt;br/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构杂谈&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;GitHub 最受欢迎的Top 20 JavaScript 项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/pc5k15b&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;Git 全功能介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/k2gx16j&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;详细介绍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;2022年MySQL最新面试题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/to1dvco&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基础知识&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;查看完整链接版请微信扫描下方二维码，加入「码农周刊VIP会员」。&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavicibroqCN98y5SNT9NbfA3oHYQiaicFScHFfppgek7ZGicJiaHK45qc2zoccBibfEzIvzTsI4AB2xO2IaOw/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>