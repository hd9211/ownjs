<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>5151016486f50b46b366b2bddb61f2e0</guid>
<title>@Value 竟然能玩出这么多花样</title>
<link>https://toutiao.io/k/1xelgdh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;大家好，我是苏三，又跟大家见面了。&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于从事java开发工作的小伙伴来说，spring框架肯定再熟悉不过了。spring给开发者提供了非常丰富的api，满足我们日常的工作需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想要创建bean实例，可以使用@Controller、@Service、@Repository、@Component等注解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想要依赖注入某个对象，可以使用@Autowired和@Resource注解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想要开启事务，可以使用@Transactional注解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想要动态读取配置文件中的某个系统属性，可以使用@Value注解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;等等，还有很多。。。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面几种常用的注解，在我以往的文章《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247488466&amp;amp;idx=1&amp;amp;sn=1e63e6991b5fb47e067d2edf055981d3&amp;amp;chksm=f9801508cef79c1ea208906ceef09593a9f594b3926478eb65b7ef64e0311f13ac5aaf4135ce&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;@Autowired的这些骚操作，你都知道吗？&lt;/a&gt;》《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247489032&amp;amp;idx=1&amp;amp;sn=20b5be9bbc2991309d4af3cb9b4a8ae7&amp;amp;chksm=f98010d2cef799c423df29f7bcda0b619efdff626ea65d8a64e7c151557b8d4e3aa2f9265c62&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;聊聊spring事务失效的12种场景，太坑了&lt;/a&gt;》《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;amp;mid=2247487517&amp;amp;idx=1&amp;amp;sn=f2de07ab34a554f33a57b536b8240e93&amp;amp;chksm=f98016c7cef79fd1948f886274a1af726e66f919aafb628f04b32aa64d32f1c9597cb295bd10&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;惊呆了，spring中竟然有12种定义bean的方法&lt;/a&gt;》中已经介绍过了，在这里就不过多讲解了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天咱们重点聊聊&lt;code&gt;@Value&lt;/code&gt;注解，因为它是一个非常有用，但极其容易被忽视的注解，绝大多数人可能只用过它的一部分功能，这是一件非常遗憾的事情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以今天有必要和大家一起，重新认识一下&lt;code&gt;@Value&lt;/code&gt;。&lt;img data-ratio=&quot;0.9086021505376344&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGb81QziavqgchX5nNfSSh9c4U5ueiaytI5aNEZaK0OCOoFt94ghN9rhE5XW01NjS8QeWiaIEefWWJmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1116&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxODkzNTQ3Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uL371281oDHlDcdbjNJic1yCwAu2dmJ9AunIQh9DXdm5JE7v9libnPgJQicoaGs9Eiaee2kPeFGWJxsPkZ9zCQbrIw/0?wx_fmt=png&quot; data-nickname=&quot;苏三说技术&quot; data-alias=&quot;susanSayJava&quot; data-signature=&quot;作者就职于知名互联网公司，掘金月度优秀作者，从事开发、架构和部分管理工作。实战经验丰富，对jdk、spring、springboot、springcloud、mybatis等开源框架源码有一定研究，欢迎关注，和我一起交流。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 由一个例子开始&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如在UserService类中，需要注入系统属性到userName变量中。通常情况下，我们会写出如下的代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.userName}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String userName;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;test&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(userName);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; userName;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过&lt;code&gt;@Value&lt;/code&gt;注解指定系统属性的名称&lt;code&gt;susan.test.userName&lt;/code&gt;，该名称需要使用&lt;code&gt;${}&lt;/code&gt;包起来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样spring就会自动的帮我们把对应的系统属性值，注入到userName变量中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，上面功能的重点是要在&lt;code&gt;applicationContext.properties&lt;/code&gt;文件（简称：配置文件）中配置同名的系统属性：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;#张三&lt;br/&gt;susan.test.userName=\u5f20\u4e09&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，名称真的必须完全相同吗？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 关于属性名&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候，有些朋友可能会说：在&lt;code&gt;@ConfigurationProperties&lt;/code&gt;配置类中，定义的参数名可以跟配置文件中的系统属性名不同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，在配置类MyConfig类中定义的参数名是userName：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span&gt;&quot;susan.test&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String userName;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而配置文件中配置的系统属性名是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;susan.test.user-name=\u5f20\u4e09&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类中用的&lt;code&gt;userName&lt;/code&gt;，而配置文件中用的&lt;code&gt;user-name&lt;/code&gt;，不一样。但测试之后，发现该功能能够正常运行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置文件中的系统属性名用 &lt;code&gt;驼峰标识&lt;/code&gt; 或 &lt;code&gt;小写字母加中划线的组合&lt;/code&gt;，spring都能找到配置类中的属性名userName进行赋值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由此可见，配置文件中的系统属性名，可以跟配置类中的属性名不一样。不过，有个前提，前缀susan.test必须相同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，&lt;code&gt;@Value&lt;/code&gt;注解中定义的系统属性名也可以不一样吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案：不能。如果不一样，启动项目时会直接报错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.24835988753514526&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGb81QziavqgchX5nNfSSh9cKb5WXuTqN9dVMRwQwYFQRqoUrlFv17Ze7bnU5yvO00u1PG8lepiadqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2134&quot;/&gt;此外，如果只在@Value注解中指定了系统属性名，但实际在配置文件中没有配置它，也会报跟上面一样的错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，&lt;strong&gt;@Value注解中指定的系统属性名，必须跟配置文件中的相同。&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 乱码问题&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道细心的小伙伴们有没有发现，我配置的属性值：&lt;code&gt;张三&lt;/code&gt;，其实是&lt;code&gt;转义&lt;/code&gt;过的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;susan.test.userName=\u5f20\u4e09&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么要做这个转义？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如在配置文件中配置中文的张三：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;susan.test.userName=张三&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后获取数据时，你会发现userName竟然出现了乱码：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;å¼ ä¸&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;what？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么会出现乱码？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：在springboot的&lt;code&gt;CharacterReader&lt;/code&gt;类中，默认的编码格式是&lt;code&gt;ISO-8859-1&lt;/code&gt;，该类负责&lt;code&gt;.properties&lt;/code&gt;文件中系统属性的读取。如果系统属性包含中文字符，就会出现乱码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5565693430656934&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGb81QziavqgchX5nNfSSh9czDAcVtgAxJjzykcOHEUbKXIsTEcHAR5CFz3xuib5XLsFZ96BxFvZ9ww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1096&quot;/&gt;那么，如何解决乱码问题呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前主要有如下三种方案：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;手动将ISO-8859-1格式的属性值，转换成UTF-8格式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设置encoding参数，不过这个只对@PropertySource注解有用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将中文字符用unicode编码转义。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;显然@Value不支持encoding参数，所以方案2不行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如使用方案1，具体实现代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(value = &lt;span&gt;&quot;${susan.test.userName}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String userName;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;test&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String userName1 = &lt;span&gt;new&lt;/span&gt; String(userName.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);&lt;br/&gt;        System.out.println();&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; userName1;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;确实可以解决乱码问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果项目中包含大量中文系统属性值，每次都需要加这样一段特殊转换代码。出现大量重复代码，有没有觉得有点恶心？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反转我被恶心到了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，如何解决代码重复问题呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：将属性值的中文内容转换成unicode。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类似于这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;susan.test.userName=\u5f20\u4e09&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式同样能解决乱码问题，不会出现恶心的重复代码。但需要做一点额外的转换工作，不过这个转换非常容易，因为有现成的在线转换工具。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;推荐使用这个工具转换：http://www.jsons.cn/unicode/&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里顺便告诉你一个小秘密：如果你使用的是&lt;code&gt;.yml&lt;/code&gt;或&lt;code&gt;.yaml&lt;/code&gt;格式的配置文件，并不会出现中文乱码问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这又是为什么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为.yml或.yaml格式的配置文件，最终会使用&lt;code&gt;UnicodeReader&lt;/code&gt;类进行解析，它的&lt;code&gt;init&lt;/code&gt;方法中，首先读取BOM文件头信息，如果头信息中有UTF8、UTF16BE、UTF16LE，就采用对应的编码，如果没有，则采用默认&lt;code&gt;UTF8&lt;/code&gt;编码。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8870481927710844&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGb81QziavqgchX5nNfSSh9cjVbNCMSB3hEAUfTmXcnRQaM7KoofOILUD1qQwytuA2lgM5AzrWp0RQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1328&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;需要注意的是：乱码问题一般出现在本地环境，因为本地直接读取的.properties配置文件。在dev、test、生产等环境，如果从zookeeper、apollo、nacos等配置中心中获取系统参数值，走的是另外的逻辑，并不会出现乱码问题。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.默认值&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候，默认值是我们非常头疼的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么这样说呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为很多时候使用java的默认值，并不能满足我们的日常工作需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如有这样一个需求：如果配置了系统属性，userName就用配置的属性值。如果没有配置，则userName用默认值susan。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些朋友可能认为可以这样做：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(value = &lt;span&gt;&quot;${susan.test.userName}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; String userName = &lt;span&gt;&quot;susan&quot;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在定义参数时直接给个默认值，但如果仔细想想这招是行不通的的。因为设置userName默认值的时机，比@Value注解依赖注入属性值要早，也就是说userName初始化好了默认值，后面还是会被覆盖。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，到底该如何设置默认值呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：使用&lt;code&gt;:&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(value = &lt;span&gt;&quot;${susan.test.userName:susan}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; String userName;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在需要设置默认值的系统属性名后，加&lt;code&gt;:&lt;/code&gt;符号。紧接着，在&lt;code&gt;:&lt;/code&gt;右边设置默认值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建议大家平时在使用@Value时，尽量都设置一个默认值。如果不需要默认值，宁可设置一个空。比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(value = &lt;span&gt;&quot;${susan.test.userName:}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; String userName;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么这么说？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如有这种场景：在business层中包含了UserService类，business层被api服务和job服务都引用了。但UserService类中@Value的userName只在api服务中有用，在job服务中根本用不到该属性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于job服务来说，如果不在.properties文件中配置同名的系统属性，则服务启动时就会报错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个坑，我之前踩过多次。所以，建议大家，使用@Value注解时，最好给参数设置一个默认值，以防止出现类似的问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. static变量&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们已经见识过，如何使用@Value注解，给类的&lt;code&gt;成员变量&lt;/code&gt;注入&lt;code&gt;系统属性值&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，问题来了，&lt;code&gt;静态变量&lt;/code&gt;可以自动注入系统属性值不？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们一起看看，假如将上面的userName定义成&lt;code&gt;static&lt;/code&gt;的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.userName}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String userName;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序可以正常启动，但是获取到userName的值却是null。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由此可见，被&lt;code&gt;static&lt;/code&gt;修饰的变量通过@Value会注入失败。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为好奇宝宝的你，此时肯定想问：如何才能给静态变量注入系统属性值呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：这就需要使用如下的骚代码了：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String userName;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.userName}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setUserName&lt;/span&gt;&lt;span&gt;(String userName)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        UserService.userName = userName;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;test&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; userName;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提供一个静态参数的&lt;code&gt;setter&lt;/code&gt;方法，在该方法上使用@Value注入属性值，并且同时在该方法中给静态变量赋值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些细心的朋友可能会发现，@Value注解在这里竟然使用在setUserName方法上了，也就是对应的setter方法，而不是在变量上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有趣，有趣，这种用法有点高端喔。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，通常情况下，我们一般会在pojo实体类上，使用lombok的@Data、@Setter、@Getter等注解，在编译时动态增加setter或getter方法，所以@Value用在方法上的场景其实不多。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6.变量类型&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的内容，都是用的字符串类型的变量进行举例的。其实，@Value注解还支持其他多种类型的系统属性值的注入。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;6.1 基本类型&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;众所周知，在Java中的基本数据类型有4类8种，然我们一起回顾一下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;整型：byte、short、int、long&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;浮点型：float、double&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;布尔型：boolean&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;字符型：char&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相对应地提供了8种包装类：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;整型：Byte、Short、Integer、Long&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;浮点型：Float、Double&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;布尔型：Boolean&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;字符型：Character&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;@Value注解对这8中基本类型和相应的包装类，有非常良好的支持，例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.a:1}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt; a;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.b:100}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;short&lt;/span&gt; b;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.c:3000}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; c;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.d:4000000}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; d;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.e:5.2}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; e;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.f:6.1}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; f;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.g:false}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; g;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.h:h}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; h;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.a:1}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt; a1;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.b:100}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Short b1;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.c:3000}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Integer c1;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.d:4000000}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Long d1;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.e:5.2}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Float e1;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.f:6.1}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Double f1;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.g:false}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Boolean g1;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.h:h}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Character h1;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了这些常用的数据类型，我们在定义变量类型时，可以非常愉快的玩耍了，不用做额外的转换。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;6.2 数组&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但只用上面的基本类型是不够的，特别是很多需要批量处理数据的场景中。这时候可以使用&lt;code&gt;数组&lt;/code&gt;，它在日常开发中使用的频率很高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在定义数组时可以这样写：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.array:1,2,3,4,5}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] array;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring默认使用逗号分隔参数值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果用空格分隔，例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;@Value(&lt;span&gt;&quot;&lt;span&gt;${susan.test.array:1 2 3 4 5}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;br/&gt;private int[] array;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring会自动把空格去掉，导致数据中只有一个值：12345，注意千万别搞错了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顺便说一下，定义数组的时候，里面还是有挺多门道的。比如上面列子中，我的数据是：1,2,3,4,5。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们把数组定义成：short、int、long、char、string类型，spring是可以正常注入属性值的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果把数组定义成：float、double类型，启动项目时就会直接报错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.26626506024096386&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGb81QziavqgchX5nNfSSh9cb1KzKyOiaGIcF7v4MEgncMEbqKq8q6NiaiaibWCvY8QmRzBzxH8Z2BJHPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1660&quot;/&gt;小伙伴们，下巴惊掉了没？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按理说，1,2,3,4,5用float、double是能够表示的呀，为什么会报错？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果使用int的包装类，比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.array:1,2,3,4,5}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Integer[] array;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动项目时同样会报上面的异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，定义数组时一定要注意属性值的类型，必须完全一致才可以，如果出现下面这种情况：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.array:1.0,abc,3,4,5}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] array;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;属性值中包含了1.0和abc，显然都无法将该字符串转换成int。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;6.3 集合类&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了基本类型和数组，的确让我们更加方便了。但对数据的处理，只用数组这一种数据结构是远远不够的，下面给大家介绍一下其他的常用数据结构。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6.3.1 List&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;List是数组的变种，它的长度是可变的，而数组的长度是固定的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看看List是如何注入属性值的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${susan.test.list}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; list;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最关键的是看配置文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;susan.test.list[&lt;span&gt;0&lt;/span&gt;]=&lt;span&gt;10&lt;/span&gt;&lt;br/&gt;susan.test.list[&lt;span&gt;1&lt;/span&gt;]=&lt;span&gt;11&lt;/span&gt;&lt;br/&gt;susan.test.list[&lt;span&gt;2&lt;/span&gt;]=&lt;span&gt;12&lt;/span&gt;&lt;br/&gt;susan.test.list[&lt;span&gt;3&lt;/span&gt;]=&lt;span&gt;13&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你满怀希望的启动项目，准备使用这个功能的时候，却发现竟然报错了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.23603793466807166&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGb81QziavqgchX5nNfSSh9chYVVzV8k3g8aPZU6EympiayynYtJlTe9cwtNn6skTb89kyM5DZMPSjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1898&quot;/&gt;what?&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看来@Value不支持这种直接的List注入。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，如何解决这个问题呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有人说用&lt;code&gt;@ConfigurationProperties&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要定义一个MyConfig类：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span&gt;&quot;susan.test&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; list;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在调用的地方这样写：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; MyConfig myConfig;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;test&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(myConfig.getList());&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方法确实能够完成List注入。但是，只能说明@ConfigurationProperties注解的强大，跟@Value有半毛钱的关系？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：没有。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，问题来了，用@Value如何实现这个功能呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：使用spring的EL表达式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;List的定义改成：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{&#x27;${susan.test.list}&#x27;.split(&#x27;,&#x27;)}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; list;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用&lt;code&gt;#&lt;/code&gt;号加大括号的EL表达式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后配置文件改成：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;susan.test.list=&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;11&lt;/span&gt;,&lt;span&gt;12&lt;/span&gt;,&lt;span&gt;13&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跟定义数组时的配置文件一样。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6.3.2 Set&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Set也是一种保存数据的集合，它比较特殊，里面保存的数据不会重复。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以这样定义Set：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{&#x27;${susan.test.set}&#x27;.split(&#x27;,&#x27;)}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Set&amp;lt;String&amp;gt; set;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置文件是这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;susan.test.set=&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;11&lt;/span&gt;,&lt;span&gt;12&lt;/span&gt;,&lt;span&gt;13&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Set跟List的用法极为相似。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但为了证明本节的独特之处，我打算说点新鲜的内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何给List或者Set设置默认值空呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些朋友可能会说：这还不简单，直接在@Value的$表达式后面加个:号不就行了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{&#x27;${susan.test.set:}&#x27;.split(&#x27;,&#x27;)}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Set&amp;lt;String&amp;gt; set;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果却跟想象中不太一样：&lt;img data-ratio=&quot;0.9277899343544858&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGb81QziavqgchX5nNfSSh9cKyFr1738aKYIibecxqFtf0ZekIibiaE0SnrdFqWHl0HZ9MomPCEcDvRug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;914&quot;/&gt;Set集合怎么不是空的，而是包含了一个空字符串的集合？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好吧，那我在:号后加null，总可以了吧？&lt;img data-ratio=&quot;0.8638297872340426&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGb81QziavqgchX5nNfSSh9cH8tFn6YRMlODIHHxeLor1F5magogicDX92wNegx55ibwttna9KrmO1iag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;940&quot;/&gt;Set集合也不是空的，而是包含了一个&quot;null&quot;字符串的集合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也不行，那也不行，该如何是好？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：使用EL表达式的&lt;code&gt;empty&lt;/code&gt;方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{&#x27;${susan.test.set:}&#x27;.empty ? null : &#x27;${susan.test.set:}&#x27;.split(&#x27;,&#x27;)}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Set&amp;lt;String&amp;gt; set;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行之后，结果对了：&lt;img data-ratio=&quot;0.6109422492401215&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGb81QziavqgchX5nNfSSh9coBjufBbCgRGuJqWn3EmEiawCkkepB78eGSy17BLElSwZIjsLOp1c2uQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1316&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实List也有类似的问题，也能使用该方法解决问题。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在这里温馨的提醒一下，该判断的表达式比较复杂，自己手写非常容易写错，建议复制粘贴之后根据实际需求改改。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6.3.3 Map&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一种比较常用的集合是map，它支持key/value键值对的形式保存数据，并且不会出现相同key的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以这样定义Map：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{${susan.test.map}}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Map&amp;lt;String, String&amp;gt; map;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置文件是这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;susan.test.map={&lt;span&gt;&quot;name&quot;&lt;/span&gt;:&lt;span&gt;&quot;苏三&quot;&lt;/span&gt;, &lt;span&gt;&quot;age&quot;&lt;/span&gt;:&lt;span&gt;&quot;18&quot;&lt;/span&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种用法跟上面稍微有一点区别。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设置默认值的代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{&#x27;${susan.test.map:}&#x27;.empty ? null : &#x27;${susan.test.map:}&#x27;}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Map&amp;lt;String, String&amp;gt; map;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7 EL高端玩法&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们已经见识过spring EL表达式的用法了，在设置空的默认值时特别有用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，&lt;code&gt;empty&lt;/code&gt;方法只是它很普通的用法，还有更高端的用法，不信我们一起看看。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;7.1 注入bean&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以前我们注入bean，一般都是用的@Autowired或者@Resource注解。例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RoleService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getRoleName&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;管理员&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RoleService roleService;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;test&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(roleService.getRoleName());&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但我要告诉你的是@Value注解也可以注入bean，它是这么做的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{roleService}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; RoleService roleService;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过这种方式，可以注入id为roleService的bean。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;7.2 bean的变量和方法&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过EL表达式，@Value注解已经可以注入bean了。既然能够拿到bean实例，接下来，可以再进一步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在RoleService类中定义了：成员变量、常量、方法、静态方法。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RoleService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; DEFAULT_AGE = &lt;span&gt;18&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id = &lt;span&gt;1000&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getRoleName&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;管理员&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getParentId&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;2000&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在调用的地方这样写：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{roleService.DEFAULT_AGE}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; myAge;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{roleService.id}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{roleService.getRoleName()}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String myRoleName;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{roleService.getParentId()}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String myParentId;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;test&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(myAge);&lt;br/&gt;        System.out.println(id);&lt;br/&gt;        System.out.println(myRoleName);&lt;br/&gt;        System.out.println(myParentId);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在UserService类中通过@Value可以注入：成员变量、常量、方法、静态方法获取到的值，到相应的成员变量中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一下子有没有豁然开朗的感觉，有了这些，我们可以通过@Value注解，实现更多的功能了，不仅仅限于注入系统属性。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;7.3 静态类&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面的内容都是基于bean的，但有时我们需要调用静态类，比如：Math、xxxUtil等静态工具类的方法，该怎么办呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：用T加括号。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例1：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{T(java.io.File).separator}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; String path;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以注入系统的路径分隔符到path中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例2：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{T(java.lang.Math).random()}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; randomValue;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以注入一个随机数到randomValue中。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;7.4 逻辑运算&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上面介绍的内容，我们可以获取到绝大多数类的变量和方法的值了。但有了这些值，还不够，我们能不能在EL表达式中加点逻辑？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拼接字符串：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{roleService.roleName + &#x27;&#x27; + roleService.DEFAULT_AGE}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; String value;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;逻辑判断：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{roleService.DEFAULT_AGE &amp;gt; 16 and roleService.roleName.equals(&#x27;苏三&#x27;)}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; String operation;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;三目运算：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{roleService.DEFAULT_AGE &amp;gt; 16 ? roleService.roleName: &#x27;苏三&#x27; }&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; String realRoleName;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有很多很多功能，我就不一一列举了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;EL表达式实在太强大了，对这方面如果感兴趣的小伙伴可以找我私聊。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8 ${}和#{}的区别&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面巴拉巴拉说了这么多@Value的牛逼用法，归根揭底就是&lt;code&gt;${}&lt;/code&gt;和&lt;code&gt;#{}&lt;/code&gt;的用法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面重点说说${}和#{}的区别，这可能是很多小伙伴比较关心的话题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;8.1 ${}&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要用于获取配置文件中的系统属性值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(value = &lt;span&gt;&quot;${susan.test.userName:susan}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; String userName;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过&lt;code&gt;:&lt;/code&gt;可以设置默认值。如果在配置文件中找不到susan.test.userName的配置，则注入时用默认值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果在配置文件中找不到susan.test.userName的配置，也没有设置默认值，则启动项目时会报错。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;8.2 #{}&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要用于通过spring的EL表达式，获取bean的属性，或者调用bean的某个方法。还有调用类的静态常量和静态方法。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{roleService.DEFAULT_AGE}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; myAge;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{roleService.id}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{roleService.getRoleName()}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; String myRoleName;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;#{T(java.lang.Math).random()}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; randomValue;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是调用类的静态方法，则需要加T(包名 + 方法名称)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：T(java.lang.Math)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，今天的内容就介绍到这里，希望对你会有所帮助。随便剧透一下，后面的文章会继续介绍：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;@Value的原理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;@Value动态刷新属性值的原因&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;@ConfigurationProperties注解的用法，它也非常强大。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好不好奇？赶紧关注一波呀。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1b9e3faf0ace23e39114e0fd258c7ce1</guid>
<title>Golang Context 这三个应用场景，你知吗</title>
<link>https://toutiao.io/k/fej10u7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4311797752808989&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHPkqJklltMPpJmMPEwxR6T0Nm1zw9ibBKVbum6jHudbgH5AVRaBLz7iaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1424&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-dynamic-material=&quot;t&quot; data-mpa-template=&quot;t&quot; data-mpa-dynamic-material-category=&quot;envelope&quot; data-mpa-category=&quot;动态&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-click-envelope-show-text-id=&quot;envelopePreviewContent&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;用户发送 开始消费 请求时：开启多个协程开始消费消息队列某个topic的信息；&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;用户发送 结束消费 请求时：把消费中的topic相关的协程关闭掉，结束消费；&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;svg mpa-from-tpl=&quot;t&quot; opacity=&quot;1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;set attributename=&quot;visibility&quot; from=&quot;visible&quot; to=&quot;hidden&quot; begin=&quot;click+1s&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;animate attributename=&quot;opacity&quot; fill=&quot;freeze&quot; dur=&quot;1s&quot; begin=&quot;click&quot; from=&quot;1&quot; to=&quot;0&quot; restart=&quot;never&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/svg&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4707865168539326&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHWaqBVz3tjicrVa2BNXqjesO0qQHf3pCxrgB50LKjV2GCKraiaUd565yA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1780&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4240422721268164&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHjh35bQ7aF27TbErqQA23ONEicakhBpEYwEgL2FEFHTUP3YR8Mib38ZIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1514&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3895538628944505&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHnfJEjPMNbg4Hic7S6IFC9icnNTyc6MhiaGuBDQR438oym08Qic6iavKur9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1838&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4697173620457604&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHH23DFRa2A3QZAicrWz7M1laYxfWrxJCTtdgEJLCPbXjBa4fdf8o3I63g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1486&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3727175080558539&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHH3yVzhraze2tv7O8rvMzvoEdSXCwBjlCicX9RhhmbvLzKaz1tuKYHejg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1862&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.49539170506912444&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHCeqoJndDQicv1Fypicf2T4gBx3qTEQjEEicwOFk0iaYgm50Tz0YBnFGCtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1736&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;跨服务传递信息&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0740740740740742&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/65kKfpfiaHYJb5Dich6GdMtnZre8jhjTibGVwwOgApImzZWplXUib7CrRLG0ZlcicwWM9spLF5qwfdicWeLtwabw5VWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;54&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在具备一定规模的互联网公司都用微服务形式让各系统组合起来为用户提供服务，一个简单的业务在流程上可能需要十几个甚至几十个系统间互相调用。由于每个系统内部的正确性无法保证，若出现了case，比如用户反馈积分少发了，就需要排查这十几个系统的日志信息，看问题出在哪里。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此处需要一个ID凭证，ID是请求级别的，在各个系统中记录着与此请求相关的日志信息，我们把它叫做trace ID。把日志采集并落盘到ES这样的存储中，有case时只需要拿到请求的trace ID就可以把全流程的关键信息还原出来。如图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3906926406926407&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHpJq6JytUxPZlibsf8UjiaXrHfQfyNyVHd3OoufN9xfNfTiaQO0vov7u8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1848&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Golang web服务中，每个请求都是开一个协程去处理的。系统间传递信息时，若通信协议用HTTP，那trace ID等信息可放在HTTP Header中，在web框架的middle层把这些信息存入Context。demo如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 检测上游服务是否传递traceID信息，若传递了直接使用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; v, ok := req.Header[&lt;span&gt;&quot;my-awesome-trace-ID&quot;&lt;/span&gt;]; ok {&lt;br/&gt;   traceID = v[&lt;span&gt;0&lt;/span&gt;]&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;// 若没传则用公共库生成一个全局唯一的traceID信息&lt;/span&gt;&lt;br/&gt;  traceID = GenTraceID()&lt;br/&gt;  req.Header[&lt;span&gt;&quot;my-awesome-trace-ID&quot;&lt;/span&gt;] = []&lt;span&gt;string&lt;/span&gt;{traceID}&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 处理完各种请求上下文信息后，把这些信息统一存储到ctx中，传递给业务层的对应Handler&lt;/span&gt;&lt;br/&gt;ctx = context.WithValue(ctx, ContentKey, record)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Context处理请求上下文这块主要用到了&lt;code&gt;WithValue&lt;/code&gt;，这个函数接收一个ctx和一对k-v。把k-v对存起来后返回一个子ctx，这次我们先简单介绍其使用场景，下篇文章会从源码层面理解这个函数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ctx的生命周期是 伴随请求开始而诞生、请求结束而终止的。在请求中ctx会跨越多个函数多个协程，在打日志时，第一个参数预留给ctx是因为日志库需要从Context中抽取trace ID等信息，从而记录下完整的日志。获取信息时只需要调用context的Value方法，demo如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 从Context中获取traceID, 打到日志里&lt;/span&gt;&lt;br/&gt;v := ctx.Value(&lt;span&gt;&quot;my-awesome-trace-ID&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里画个图帮助理解：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.43552036199095023&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHEnFichB7RxwYkETiaHRdWy88HkUw8klFdSFic02Tm5UQ4brFBemvCjYzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1768&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;若我们的系统也需要请求第三方服务，同样应把trace ID等信息放入HTTP Header后发送请求，其他服务按照同样的流程接收到trace ID后开始内部逻辑处理。这样一个请求在多个系统中就通过trace ID串联起了整个流程。除trace ID外，Context还可以传递 URL Path、请求时间、Caller等信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.42328042328042326&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHpXHrMeDIhrT7z1gIn3xoJPtmdaguoOXhHYv8OewSMWeMjrVcgDO5Hg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1890&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.30777903043968435&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHGhmkOujuicvfxKqvXtht4pVBvSAhJPg6tW0P9z0wqNIaXPvMTsArBVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1774&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4363395225464191&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHjkeiagIjB95m10DnHYulh8YibD4QWic5ls1zniaqEEfX85hstAgibrBNIcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1508&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.39473684210526316&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHGLlQAeBuxls5VI3oURVkTYNWqictPrzsIK8aapxOGia2R698tsE3ibOHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1444&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多协程消费demo：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// 此协程负责监听错误信息，开启消费&lt;/span&gt;&lt;br/&gt; &lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;// code&lt;/span&gt;&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt; }()&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// 此协程负责监听re-balance信息，开启消费&lt;/span&gt;&lt;br/&gt; &lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;// code&lt;/span&gt;&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt; }()&lt;br/&gt;  &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4838709677419355&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHlIt3T8ibKuibNNptm5zkfVn0eBufC7KoiaY2h9Y668QREVJPnvaI1Zyyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1612&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; ctx, cancel := context.WithCancel(context.Background())&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// 此协程负责监听错误信息，开启消费&lt;/span&gt;&lt;br/&gt; &lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;退出监听错误协程&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;逻辑处理中...&quot;&lt;/span&gt;)&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt; }()&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// 此协程负责监听re-balance信息，开启消费&lt;/span&gt;&lt;br/&gt; &lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;退出监听re-balance协程&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;    fmt.Println(&lt;span&gt;&quot;逻辑处理中...&quot;&lt;/span&gt;)&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt; }()&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// 调用cancelFunc, 结束消费&lt;/span&gt;&lt;br/&gt; cancel()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.6842105263157895&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DicaSkNicmQsrib4XcyjpcIKAyg82NvjCzUjwaxrzV4avLjslQjgTQcG96mOIpkB3y4bWnc4eQqYvOXxtb68ksVag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;76&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;控制协程关闭&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面代码用到了&lt;code&gt;WithCancel&lt;/code&gt;方法，调用它会返回一个可被取消的ctx和CancelFunc，需要取消ctx时，调用cancel函数即可。context有个Done方法，这个方法返回一个channel，当Context被取消时，这个channel会被关闭。消费中的协程通过select监听这个channel，收到关闭信号后一个return就能结束消费。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;CancelFunc&lt;/code&gt;可以预防系统做不必要的工作&lt;/strong&gt;。比如用户请求A接口时，A接口内部需要请求A database、B cache 、C System获取各种数据，把这些数据经过计算后组装到一起返回给调用方。这是正常情况的时序图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9095541401273886&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHG7p7ttMxmUO6nqy3L0LB8VzSMSuZgvTsAicCNKvqS2xEvgw6xiaRm3fQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1570&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果用户在访问网站时觉得没意思，去其他网站了。此时若你的服务收到用户请求后继续去访问其他C system、B database就是浪费资源。比较符合直觉的做法是：当业务请求取消时，你的系统也应该停止请求下游系统。前面我们介绍过context在系统中贯穿请求周期，那么当用户取消访问时，只要context监听取消事件并在用户取消时发送取消事件，就可以取消请求了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9263456090651558&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHC0OpCcL5LaY5ThzV0MqA9oVxEfprnERajeIGic9Z0rCdm6XR7EhqavQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1412&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里有份demo代码，项目启动后，可以用&lt;code&gt;curl localhost:8888&lt;/code&gt;访问这个接口，若1s内取消请求，服务端会打印出&lt;code&gt;request canceleld&lt;/code&gt;，正常情况下，服务会返回&lt;code&gt;process finished&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; http.ListenAndServe(&lt;span&gt;&quot;:8888&quot;&lt;/span&gt;, http.HandlerFunc(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  ctx := r.Context()&lt;br/&gt;  fmt.Println(&lt;span&gt;&quot;get request&quot;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;case&lt;/span&gt; &amp;lt;-time.After(&lt;span&gt;1&lt;/span&gt; * time.Second):&lt;br/&gt;   w.Write([]&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;process finished&quot;&lt;/span&gt;))&lt;br/&gt;  &lt;span&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;br/&gt;   fmt.Println(&lt;span&gt;&quot;request canceleld&quot;&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt; }))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了用户中途取消请求的情况，还有一种情况也可以用到cancelFunc：服务A的返回数据依赖服务B和服务C的相关接口，若服务B或者服务C挂了，此次请求就算失败了，没必要再访问另一个服务，此时也可以用&lt;code&gt;CancelFunc&lt;/code&gt;。Demo如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;getUserInfoBySystemA&lt;/span&gt;&lt;span&gt;(ctx context.Context)&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; time.Sleep(&lt;span&gt;100&lt;/span&gt; * time.Millisecond)&lt;br/&gt; &lt;span&gt;// 模拟请求出错的情况&lt;/span&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; errors.New(&lt;span&gt;&quot;failed&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;getOrderInfoBySystemB&lt;/span&gt;&lt;span&gt;(ctx context.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &amp;lt;-time.After(&lt;span&gt;500&lt;/span&gt; * time.Millisecond):&lt;br/&gt;  fmt.Println(&lt;span&gt;&quot;process finished&quot;&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;br/&gt;  fmt.Println(&lt;span&gt;&quot;process cancelled&quot;&lt;/span&gt;)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; ctx, cancel := context.WithCancel(context.Background())&lt;br/&gt;&lt;br/&gt; &lt;span&gt;//并发从两个服务中获取相关数据&lt;/span&gt;&lt;br/&gt; &lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  err := getUserInfoBySystemA(ctx)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;// 发生错误，调用cancelFunc&lt;/span&gt;&lt;br/&gt;   cancel()&lt;br/&gt;  }&lt;br/&gt; }()&lt;br/&gt;&lt;br/&gt; getOrderInfoBySystemB(ctx)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.40224159402241594&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHtdhf9svksbicWXPycNams9ETpcZGXESyiaeptHfZkVkib2doo1iabyrwxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1606&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3991537376586742&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHBrTg9q80IsyMPicQicRsYQVCqawYXU36rCFY3iaYktFB6MXwcE8MojjRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1418&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.45229681978798586&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHK9NNYLiaQPbTpEl2hRl1xoqBibfBDzqpzq31iawDdyueWgcUHaz07bvEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1698&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.47470817120622566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHvic5ibTEF0rXvnwDtDpxo1o4a6DS4rAmESEiadrYblD5eUSshckyaKY9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1542&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.6296296296296297&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wibLMEtPxf6EkD9f6Evlem2Z3Kwx8Wsf3ibbJxgNhMufMWibuhVC8fraoR28ibQBwCWXQhOkZMM2ezUHCoHQLjxNYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;54&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;控制超时取消&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你的服务对外承诺的SLA是100ms，但系统依赖的服务B的HTTP接口有点不稳定，有时50ms就能返回结果，有时100ms才能返回结果，为了保证你服务的SLA，可以用Context的&lt;code&gt;WithTimeout&lt;/code&gt;方法设置一个超时时间，demo如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// 设置超时时间100ms&lt;/span&gt;&lt;br/&gt; ctx, _ := context.WithTimeout(context.Background(), &lt;span&gt;100&lt;/span&gt;*time.Millisecond)&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// 构建一个HTTP请求&lt;/span&gt;&lt;br/&gt; req, _ := http.NewRequest(http.MethodGet, &lt;span&gt;&quot;https://www.baidu.com/&quot;&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;// 把ctx信息传进去&lt;/span&gt;&lt;br/&gt; req = req.WithContext(ctx)&lt;br/&gt;&lt;br/&gt; client := &amp;amp;http.Client{}&lt;br/&gt; &lt;span&gt;// 向百度发送请求&lt;/span&gt;&lt;br/&gt; res, err := client.Do(req)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  fmt.Println(&lt;span&gt;&quot;Request failed:&quot;&lt;/span&gt;, err)&lt;br/&gt;  return }&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;Response received, status code:&quot;&lt;/span&gt;, res.StatusCode)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正常情况下，会得到这样的输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Response received, status code: 200&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们请求百度超时了，会得到这样的输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Request failed: Get https://www.baidu.com/: context deadline exceeded&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.37142857142857144&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHqrZ5seWxTzmfrrNwWPg6KhAVIgIrTOyyF48VX8eZcvz2Niam9pfDTjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1890&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4818713450292398&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9Kb1sYaOnX3ia9FHohDZ7wHHq63Lf8HyMastUYAmyO2MMiccg8BBzsdCIevUU0zVdNGK4hmDSrWibWSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1710&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，给自己打个广告&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎加入 &lt;strong&gt;随波逐流的薯条&lt;/strong&gt; 微信群。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;薯条目前有草帽群、木叶群、琦玉群，群交流内容不限于技术、投资、趣闻分享等话题。欢迎感兴趣的同学入群交流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;入群请加薯条的个人微信：709834997。并备注：加入薯条微信群。&lt;/p&gt;&lt;p&gt;欢迎关注我的公众号~&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIxODcxMTIzNQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YdZzofiato9J9Zggib9T7Iibq78c1TUWq8JjURtqFSKYxps1Qur347zl04U3ERmjBgv9B7MUC4fzNyjorW2y0SsvA/0?wx_fmt=png&quot; data-nickname=&quot;薯条的编程修养&quot; data-alias=&quot;yigfuutc&quot; data-signature=&quot;互联网公司一线开发，日常扯扯淡，分享 Golang、数据库、经验总结、系统设计等方面的技术文章&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>917627a7448b3c67f1451ac9e0a54513</guid>
<title>全链路压测（二）：方案调研和项目立项</title>
<link>https://toutiao.io/k/cnf8e8a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h2&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;全链路压测从零开始系列的第一篇文章介绍了全链路压测的背景、定义、和传统压测的差异以及如何解决差异带来的不稳定性，落地要面临的挑战和完整的压测实践流程以及长期的能力建设演变，算是对全链路压测有了一个比较系统和全面的介绍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本篇是系列的第二篇，从这篇文章开始，我会基于自己的个人落地实践经验，给大家分享从零开始落地全链路压测，要做哪些事情，以及这个过程中遇到的挑战、踩过的坑以及该如何解决这些问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;申报立项&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;一般来说，像生产全链路压测这种复杂的需要多个技术团队参与的复杂技术项目，在企业内部都会有一个项目申报和评估立项的过程。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;项目申报&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;下面是一个项目申报的模板，大家可以参考下：&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;为什么要做这件事？（线上故障频发，性能问题凸显，云资源成本太高）&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;目的&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;为了解决什么问题？（降低线上故障率和损失，降低硬件成本）&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;具体的解决方案是什么？（生产环境全链路压测）&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;价值&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;做这件事带来的价值是什么？（提高用户体验，团队练兵，保障业务价值的实现）&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;资源&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;做这件事需要什么资源？（研发、运维、DBA、测试等）&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;时间&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;什么时候开始，什么时候上线？&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;评估立项&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;项目申报后，就是多方评估是否立项的环节，在这个环节，主要有如下几件事：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;目前存在的问题是否真的有这么严重？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;这些问题如果不解决是否会对业务造成影响？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;做这件事，能否解决目前存在的问题？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;做这件事，要投入的时间资源和对业务及团队的价值，有多大？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;5&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;这件事的优先级有多高？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;调研评估&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;在项目正式启动前会有个调研环节。这里的调研主要指的是基于自身当前所处阶段及面临的问题和实现生产全链路压测之间的差异，以及如何解决差异的解决方案。我个人总结下来，方案调研可以分为如下四个阶段：&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;看：大厂都是怎么做的？&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;全链路压测是个技术复杂度比较高的跨团队的技术项目，最初是大厂的自留地。在调研方案时候，有必要看看大厂都是如何做的，避免走太多弯路。前面提到了落地生产全链路压测的几个挑战，下面我从这几个挑战点来做个梳理对比，帮大家快速的了解，大厂是如何做的。&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;挑战点/大厂&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;阿里&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;美团&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;京东&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;滴滴&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;饿了么&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;核心链路梳理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;鹰眼系统&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;Mtrace系统&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;trace系统&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;数据安全隔离&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;流量/线程染色透传&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;影子库表&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;流量/线程染色透传&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;影子库表&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;流量/线程染色透传&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;影子库表+特殊标记&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;流量/线程染色透传&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;影子库表&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;流量/线程染色透传&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;特殊标记(逻辑隔离)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;避免业务侵入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;性能定位分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;服务安全保护&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;PS&lt;/strong&gt;：针对上表的一些术语和“/”内容，这里做个说明。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、链路梳理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在大多数企业都是采用微服务架构来设计系统，且业务场景多样化，导致了系统架构异常复杂。要覆盖所有压测范围内的场景，就需要对涉及的所有应用及其调用关系进行梳理，手工来梳理，耗时且费力。上面提到的几家大厂的鹰眼啊Mtrace系统之类的，实际上都是基于分布式链路追踪工具自研或二次开发的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;分布式链路追踪工具，推荐开源的Jaeger，Jaeger是Uber推出的一款开源分布式追踪系统，兼容OpenTracing API。分布式追踪系统用于记录请求范围内的信息，例如，一次远程方法调用的执行过程和耗时。是&lt;strong&gt;排查系统问题和系统性能的利器，同时在链路梳理方面，能提高很多效率&lt;/strong&gt;。Jaeger的UI相较于Zipkin更加直观和丰富，还有则是sdk比较丰富，go语言编写，上传采用的是udp传输，效率高速度快。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6965098634294385&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWjiaymbZOKZUvvdXpyjk85YWtzT0VibPGMKq4Aq8oFNXarj5geTMN1clcEJIiay6JzdcdvBfnOYsAsrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1318&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、数据隔离&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;流量染色&lt;/span&gt;&lt;/strong&gt;：&lt;span&gt;对于单服务来说，识别压测流量只要在请求头中加特殊压测标识即可，HTTP和RPC服务是一样的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;线程染色&lt;/span&gt;&lt;/strong&gt;：对于多线程调用服务来说，要保证测试标识在跨线程的情况下不丢失。以 Java 应用为例，主线程根据压测请求，将测试标识写入当前线程的 ThreadLocal 对象中（ThreadLocal 会为每个线程创建一个副本，用来保存线程自身的副本变量），利用 InheritableThreadLocal 的特性，对于父线程 ThreadLocal 中的变量会传递给子线程，保证了压测标识的传递。而对于采用线程池的情况，同样对线程池进行了封装，在往线程池中添加线程任务时，额外保存了 ThreadLocal 中的变量，执行任务时再进行替换 ThreadLocal 中的变量。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.69377990430622&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWjiaymbZOKZUvvdXpyjk85YWHb9ibRKNLKdAwHkrLPb595AaRdzs8yluWuj44UkIQkWggiaZXM9w4Xicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;418&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、避免业务侵入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果要通过修改业务应用或者采用数据库表数据标记的方式来实现，势必会对生产业务造成一定影响（要改造需要大量资源和时间）。&lt;span&gt;对于跨服务的调用，一般都是对所有涉及到的中间件进行了改造。利用trace系统的服务间传递上下文特性，在原有传输上下文的基础上，添加测试标识的属性，以保证传输中始终带着测试标识。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;拿java举例，可以通过字节码增强，在无业务侵入情况下，实现压测流量的识别透传。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;4、性能定位分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;全链路压测的初衷还是为了发现并解决系统在峰值流量冲击下的稳定性问题，因此性能定位分析的工具和完善的监控体系是必备的。&lt;span&gt;一般在企业级技术监控领域，大体分为五种类型的监控：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;基础监控&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：包括带宽、CDN、CPU、Memory、DiskIO、Network、Load5等指标；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;指标监控&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：服务接口维度，QPS、TPS、SLB、RT、99RT、timeout、activethreads等；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;业务监控&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：拿电商来说，有同比下单量、支付量、履约率、DAU、GMV等多重指标；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;链路追踪&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：如上面提到的Jaeger，是&lt;/span&gt;排查系统问题和系统性能的利器，同时在链路梳理方面，能提高很多效率&lt;span&gt;；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;舆情监控&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：主要指对外部的一些讯息的监控，比如某APP突然挂了、下不了单、有BUG可以刷单、客诉等一些列对企业或者品牌不利的因素，便于快速处理甚至公关；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;5、服务安全保护&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;全链路压测是在生产环境进行，压测过程中，要考虑不对生产服务造成影响。因此需要一套完整的机制来保证，压测在正常实施的同时，不对生产服务应用造成影响。一般都会通过&lt;strong&gt;&lt;span&gt;熔断和流量干预的机制&lt;/span&gt;&lt;/strong&gt;来保证。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根据业务自定义的熔断阙值，监控系统实时分析监控数据，当达到熔断阙值时，任务调度器会向压测引擎发送降低 QPS 或者直接中断压测的指令，防止系统被压挂。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;听：SaaS服务商怎么说？&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;国内全链路压测的SaaS服务商，目前只有2家：数列科技和perfma。这里以我比较熟悉的数列的SaaS产品举例子，他们的全链路压测产品主要优势有如下几点：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;业务代码0侵入&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：在接入、采集和实现逻辑控制时，不需要修改任何业务代码；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;链路自动梳理&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;仅需部署客户端，无需对应用进行任何改造，就可以看到所有的服务调用关系，快速理解系统架构，并且通过链路架构图可以详细了解链路经过的应用、缓存、中间件、DB，甚至第三方的API，每条链路的所有走向都一目了然；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;数据安全隔离&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：在不污染生产环境业务数据情况下进行全链路压测，可以对写类型接口进行直接的性能测试；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;安全性能压测&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：在生产环境进行性能压测，对业务不会造成影响；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;5&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;性能瓶颈快速定位&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：性能测试结果直接展现业务链路中性能瓶颈的节点；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.566468253968254&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWjiaymbZOKZUvvdXpyjk85YWiam4icAZ3hNENniaW2WAUP36wUK6AoxRHMPWtjnq5QiaeJWPAUibia94DlHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1008&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而且今年他们已经将自己的全链路压测产品开源了，并且支持多环境压测，下面是他们的压测多环境支持流程图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4187568157033806&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWjiaymbZOKZUvvdXpyjk85YWRPUmwlgydWibiaY5tuEicIibJIvXeOyVCSpsqj35moFWnP1rI9eCOF1GVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;917&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Github地址：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;https://github.com/shulieTech/Takin&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;做：小范围接入改造看效果&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;看完大厂是怎么做的，以及SaaS服务商的产品，接下来就是要进行小范围验证了。一般进行小范围接入改造，主要有如下几点需要注意：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;环境&lt;/span&gt;&lt;/strong&gt;：如果有多套测试环境，可以选择一套使用率较低的，否则建议临时单独搭建一套缩容的环境进行改造接入以及测试验证；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;业务&lt;/span&gt;&lt;/strong&gt;：前期在调研验证阶段，建议选择核心业务对应的应用服务来进行验证，这样更方面了解具体的效果是否达到预期（当然，在落地阶段，刚开始建议选择非核心业务）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;资源&lt;/span&gt;&lt;/strong&gt;：这里主要指人力资源，在项目立项后，建议有专门的人手资源来做这件事，否则项目很容易延期甚至无疾而终，在工作产出考核上，也不太好；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;评：自研或SaaS产品的ROI&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;经过上述三个阶段的调研和验证，这里需要对项目最终的整套解决方案做一个选型确定：是选择自研还是SaaS服务商的全链路压测产品。从我个人的落地实践经验和了解来说，无论是自研，还是选择SaaS服务商，需要考量的因素主要有如下几点：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;研发能力&lt;/span&gt;&lt;/strong&gt;：一般来说，大厂或者中大型独角兽公司，研发能力和资源相对会比较强，且出于造轮子和KPI的目的，选择自研是相对来说比较好的方案。当然对于中小型企业来说，研发能力和资源会弱一些，这种情况我建议还是选择三方服务商的SaaS服务或者开源产品，性价比会更高一些；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;业务接受能力&lt;/span&gt;&lt;/strong&gt;：如果是自研，特别是选择改造业务代码的方案时，一定要考虑到业务的接受能力。因为每次变更都会对线上带来新的不稳定因素，且改造占用的时间和资源会和业务需求迭代有所冲突。如果是中间件层面改造或者采用的是无侵入的SaaS产品及开源产品，那么相对来说这个矛盾就仅限于技术团队内部；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;项目预算投入&lt;/span&gt;&lt;/strong&gt;：这里的预算包括时间、风险、需要投入的人力物力等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ROI(投入产出比)&lt;/span&gt;&lt;/strong&gt;：实际上一个项目到了最后，要不要做的最终考虑因素就是投入产出比，以更低的风险和成本解决更大范围的严重问题，永远是优先级最高的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;本篇主要对全链路压测的项目立项和调研环节要考量的点以及业内的一些方案&amp;amp;SaaS及开源产品做了介绍，下一篇开始，会介绍落地实践过程中具体要做的一些事情，包括工具选型、流量评估等，会结合具体的业务场景来为大家分享如何从零开始的落地全链路压测。建个一个学习群，关注回复全链路压测进群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==&amp;amp;mid=2247483966&amp;amp;idx=1&amp;amp;sn=48b4cb850c14599505897e2e600bd841&amp;amp;chksm=ce714a62f906c37454a2e388b29dd7f44440a2680653ca02dfeb6c2bb8fc201461bc8e173dcb&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;生产全链路压测实践之道&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==&amp;amp;mid=2247484133&amp;amp;idx=1&amp;amp;sn=c706d08f7935a81be90ca07d467d034b&amp;amp;chksm=ce714ab9f906c3af35b36a9e706562c644cf71c29228dc053f75061096cbab77ba748a38ea73&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;全链路压测落地和演进之路&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==&amp;amp;mid=2247484504&amp;amp;idx=1&amp;amp;sn=56a21aa7dc5aad958dbe6f759946d0a0&amp;amp;chksm=ce714c04f906c512c8b080de09e6acfd4f82c2782823f5ed442e2cae2247c4da637bb50886d6&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;全链路压测(1)：认识全链路压测&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==&amp;amp;mid=2247484459&amp;amp;idx=1&amp;amp;sn=561b3ea760bf41675d66c361dbe9ff6c&amp;amp;chksm=ce714c77f906c561fde4663cf994ab766b06cef94192db024e5a04f23f805b75a3c1e3b18ab2&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;聊聊传统压测和全链路压测的区别&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>00d2c944af282b4dd3accc655ab53dda</guid>
<title>计算机架构的机器学习</title>
<link>https://toutiao.io/k/zsus9yc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;最近机器学习 (ML) 进步的关键贡献者之一是定制加速器的开发，例如Google TPU和Edge TPU，它们显着提高了可用计算能力，从而解锁了各种功能，例如AlphaGo、RankBrain、WaveNets和对话代理。这种增加可以提高神经网络训练和推理的性能，为视觉、语言、理解和自动驾驶汽车等广泛的应用提供新的可能性。&lt;/p&gt;&lt;p&gt;为了保持这些进步，硬件加速器生态系统必须继续在架构设计方面进行创新，并适应快速发展的 ML 模型和应用程序。这需要对许多不同的加速器设计点进行评估，每个点不仅可以提高计算能力，还可以揭示新的能力。这些设计点通常由各种硬件和软件因素（例如，内存容量、不同级别的计算单元数量、并行性、互连网络、流水线、软件映射等）参数化。这是一项艰巨的优化任务，因为搜索空间呈指数级大1 而目标函数（例如，更低的延迟和/或更高的能源效率）通过模拟或综合进行评估在计算上是昂贵的，这使得确定可行的加速器配置具有挑战性。&lt;/p&gt;&lt;p&gt;在“ Apollo: Transferable Architecture Exploration ”中，我们介绍了我们在定制加速器的 ML 驱动设计方面的研究进展。虽然最近的 工作已经证明了利用 ML 来改进低级布局规划过程（其中硬件组件在空间上布局并在硅中连接）方面的有希望的结果，但在这项工作中，我们专注于将 ML 混合到高级系统规范和架构设计阶段，这是影响芯片整体性能的关键因素，其中建立了控制高级功能的设计元素。我们的研究展示了 ML 算法如何促进架构探索并建议跨一系列深度神经网络的高性能架构，其领域涵盖图像分类、对象检测、OCR和语义分割。&lt;/p&gt;&lt;h2&gt;&lt;em&gt;架构搜索空间和工作负载&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;架构探索的目标是为一组工作负载发现一组可行的加速器参数，以便在一组可选的用户定义下最小化所需的目标函数（例如，运行时的加权平均值）约束。然而，体系结构搜索的流形通常包含许多点，从软件到硬件没有可行的映射。其中一些设计点是先验已知的，可以通过用户将它们制定为优化约束来绕过（例如，在面积预算2约束，总内存大小不得超过预定义的限制）。然而，由于体系结构和编译器的相互作用以及搜索空间的复杂性，一些约束可能无法正确地表述到优化中，因此编译器可能无法为目标硬件找到可行的软件映射。这些不可行点在优化问题中不容易表述，并且在整个编译器通过之前通常是未知的。因此，架构探索的主要挑战之一是有效地避开不可行的点，以最少数量的周期精确架构模拟来有效探索搜索空间。&lt;/p&gt;&lt;p&gt;下图显示了目标 ML 加速器的整体架构搜索空间。加速器包含处理元件 (PE) 的二维阵列，每个处理元件以单指令多数据(SIMD) 方式执行一组算术计算。每个 PE 的主要架构组件是处理核心，包括用于 SIMD 操作的多个计算通道。每个 PE在其所有计算核心之间具有共享内存 ( PE Memory )，主要用于存储模型激活、部分结果和输出，而单个核心具有主要用于存储模型参数的内存。每个内核有多个计算通道，具有多路乘法累加(MAC) 单位。每个周期的模型计算结果要么存储在 PE 内存中以供进一步计算，要么卸载回 DRAM。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img data-ratio=&quot;0.3828125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/eG1jA7faiceFtMU8TaZZ77zicmEbWVBbMpgXFiaEk5Rb0JJT5AcArTHsLvCfEnhibqZSbvry0iaT2X3cRUx1E2hgxGA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;优化策略&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;在本研究中，我们在架构探索的背景下探索了四种优化策略：&lt;/p&gt;&lt;p&gt;1.随机：随机均匀地对架构搜索空间进行采样。&lt;/p&gt;&lt;p&gt;2.Vizier：使用贝叶斯优化在搜索空间中进行探索，其中目标函数的评估成本很高（例如硬件模拟，可能需要数小时才能完成）。使用来自搜索空间的一组采样点，贝叶斯优化形成一个代理函数，通常用高斯过程表示，它近似于搜索空间的流形。在代理函数值的指导下，贝叶斯优化算法在探索和开发的权衡中决定是从流形中的有希望的区域中采样更多（开发），还是从搜索空间中不可见的区域中采样更多（勘探）。然后，优化算法使用这些新采样点并进一步更新代理函数以更好地对目标搜索空间进行建模。Vizier 将预期改进作为其核心获取功能。在这里，我们使用Vizier (safe)，这是一种约束优化的变体，它指导优化过程避免建议不满足给定约束的试验。&lt;/p&gt;&lt;p&gt;3.Evolutionary：使用k 个个体的种群 执行进化搜索，其中每个个体的基因组对应于一系列离散化的加速器配置。通过使用锦标赛选择从种群中为每个个体选择两个父母，以某种交叉率重组他们的基因组，并以某种概率突变重组的基因组，从而产生新个体。&lt;/p&gt;&lt;p&gt;4.基于种群的黑盒优化(P3BO)：使用一组优化方法，包括进化和基于模型，已被证明可以提高样本效率和稳健性。采样数据在集成中的优化方法之间交换，优化器根据其性能历史进行加权以生成新的配置。在我们的研究中，我们使用 P3BO 的变体，其中优化器的超参数使用进化搜索动态更新。&lt;/p&gt;&lt;h2&gt;&lt;em&gt;加速器搜索空间嵌入&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;为了更好地可视化每个优化策略在加速器搜索空间导航中的有效性，我们使用t 分布随机邻居嵌入 (t-SNE) 将探索的配置映射到优化范围内的二维空间。所有实验的目标（奖励）定义为每个加速器区域的吞吐量（推理/秒）。在下图中，x轴和y轴表示嵌入空间的 t-SNE 组件（嵌入 1 和嵌入 2）。星形和圆形标记分别显示不可行（零奖励）和可行设计点，可行点的大小与其奖励相对应。&lt;/p&gt;&lt;p&gt;正如预期的那样，随机策略以均匀分布的方式搜索空间，最终在设计空间中找到很少的可行点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6447574334898278&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/eG1jA7faiceFtMU8TaZZ77zicmEbWVBbMppenbrIIOe36BYI6aZIp7Y6RZ99X0Ejn7MhWk5dcEooTAchfibgNGpEg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;639&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;与随机抽样方法相比，Vizier默认优化策略在探索搜索空间和找到具有更高奖励的设计点（1.14 对 0.96）之间取得了很好的平衡。然而，这种方法往往会陷入不可行的区域，虽然它确实找到了一些具有最大回报的点（由红十字标记表示），但它在最后一次探索迭代中几乎找不到可行的点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.64375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/eG1jA7faiceFtMU8TaZZ77zicmEbWVBbMpagGyLtR9eDDsRiaib3ibuO2n72lTp6ff2ibYyQAPjZFDkW68FCZic8nTb7Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;另一方面，进化优化策略在优化的早期找到可行的解决方案，并在它们周围组装可行点的集群。因此，这种方法主要导航可行区域（绿色圆圈）并有效地避开不可行点。此外，进化搜索能够找到更多具有最大奖励（红色十字）的设计选项。具有高回报的解决方案的这种多样性为设计师探索具有不同设计权衡的各种架构提供了灵活性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/eG1jA7faiceFtMU8TaZZ77zicmEbWVBbMpc8uvIJFrAS6YPRONfA1MGDXdaspibngpDqiaje30bJKLmrQhP9NSwRWA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后，基于群体的优化方法 (P3BO) 以更有针对性的方式（具有高奖励点的区域）探索设计空间，以找到最佳解决方案。P3BO 策略在具有更严格约束（例如，大量不可行点）的搜索空间中找到具有最高奖励的设计点，显示其在具有大量不可行点的搜索空间中导航的有效性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.646875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/eG1jA7faiceFtMU8TaZZ77zicmEbWVBbMp4qZpbVl5u9lbKgKwloxRqpWMbAALxFWxM9u0RFpSq8JQEjprg97Qcg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;不同设计约束下的架构探索&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;我们还研究了每种优化策略在不同面积预算约束（6.8 mm 2、5.8 mm 2和4.8 mm 2 ）下的优势。以下小提琴图显示了优化结束时（每次运行 4K 次运行 10 次后）在所研究的优化策略中最大可实现奖励的完整分布。较宽的部分代表在特定给定奖励下观察可行架构配置的可能性更高。这意味着我们倾向于在具有更高奖励（更高性能）的点上产生增加宽度的优化算法。&lt;/p&gt;&lt;p&gt;架构探索的两个表现最佳的优化策略是进化和 P3BO，两者都提供具有高回报和跨多次运行稳健性的解决方案。查看不同的设计约束，我们观察到随着面积预算约束的收紧，P3BO 优化策略会产生更高性能的解决方案。例如，当面积预算约束设置为 5.8 mm 2 时，P3BO 发现奖励（吞吐量/加速器面积）为 1.25 的设计点优于所有其他优化策略。当面积预算约束设置为 4.8 mm 2 时，观察到相同的趋势，在多次运行中发现具有更高稳健性（更少可变性）的稍微更好的奖励。&lt;/p&gt;&lt;p&gt;小提琴图显示了在 6.8 mm 2的面积预算下经过 4K 试验评估后，在 10 个优化策略中运行的最大可实现奖励的完整分布。P3BO 和 Evolutionary 算法产生了更多的高性能设计（更宽的部分）。x 轴和 y 轴分别表示研究的优化算法和基准加速器上加速（奖励）的几何平均值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6807017543859649&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/eG1jA7faiceFtMU8TaZZ77zicmEbWVBbMpnz1jo31k6Szx4BoCDvIgm9gVosQiaWeiclJLH69sZ8B4ribEiavkxP8HzQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;570&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6807017543859649&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/eG1jA7faiceFtMU8TaZZ77zicmEbWVBbMp3q6D55hALn2tLmJibK8CyVaK1CBlv3DqTfO60pBwK0A4JMYvDeib1tiaA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;570&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;结论&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;虽然Apollo为更好地理解加速器设计空间和构建更高效的硬件迈出了第一步，但发明具有新功能的加速器仍然是一个未知领域和新领域。我们相信，这项研究是一条令人兴奋的前进道路，可以进一步探索用于跨计算堆栈的架构设计和协同优化（例如编译器、映射和调度）的 ML 驱动技术，从而为下一代开发具有新功能的高效加速器。应用程序。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bcac1c4b031829511e21a2a98a2463bc</guid>
<title>自适应通用广义 PageRank 图神经网络</title>
<link>https://toutiao.io/k/a75d5oy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;263&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;245&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4556254367575122&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30W5zqKXlXPoekZrYnPl5HPOv55kFmhI1fZYCaiakmDJBMjBWKlUaVcicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1431&quot;/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-bottom: -10px; margin-left: -8px; max-width: 100%; width: 18px; height: 18px; border-top: 8px solid rgb(54, 65, 173); border-left: 8px solid rgb(54, 65, 173); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;br data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;/&gt;&lt;/section&gt;&lt;section data-bgopacity=&quot;50%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot; data-style=&quot;max-width: 100%; width: 543.333px; background: rgb(247, 247, 247); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span&gt;分享嘉宾：簡翌/彭建浩 UIUC&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span&gt;编辑整理：何坤登 氪信科技&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span&gt;出品平台：DataFunTalk&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; width: 18px; height: 18px; border-bottom: 8px solid rgb(54, 65, 173); border-right: 8px solid rgb(54, 65, 173); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;导读：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;大家好，我叫彭建浩，我是UIUC电子科技与计算机工程专业的在读博士生，今天我会和我的同事简翌分享一篇我们最近被ICLR收录的论文，名字叫Adaptive Universal Generalized PageRank Graph Neural Network，简称GPRGNN。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相信大家都知道，图神经网络或GNN已经在很多图结构的数据集上展现出了较传统方法更优越的性能，包括在各种节点分类，图分类，还有关联预测等等任务上，其实除去一些常见的标准测试数据集还有各种各样的合成数据，图神经网络还可以运用到很多新兴生物医学领域上，目前他们大多数还是使用传统的方法，例如：根据不同的疾病来分类相同的基因，或者把不同的药物跟基因或者疾病作关联，把已有的药物用在潜在的疾病上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30sG29RfJibBTVeyqnettvetI5DHgL985x4Dc0vz5FibRFYSoWcJTicnBhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 在基因和疾病的关联上&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们做的事情可以有一个已知基因网络的部分基因，然后我们尝试对剩余的基因进行节点分类，我们就知道什么样的基因和这个疾病是有关的，还有就是已知基因网络跟疾病网络，还有部分疾病到疾病的联系，我们就尝试去做剩余的基因跟疾病之间的关联预测，也就是link prediction, node classification的任务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ302xlOV8yw23B595LqZEDqGP3ia3A3HHibpMnpBWTQicyx7VmEKIkFRjORg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 类似的，在药物与疾病相关联上&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们可以通过做药物基因的关联网络还有疾病基因的关联网络，然后通过基因把他们串联起来，去预测不同药物与疾病之间的关系，或者对药物进行不同疾病的分类，也就是线性预测, 节点分类的任务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30iaWmumDv4NpRjhAcjB6icdygjAqzrF7B0X3fN3UbQb4znvNSNvlUc91A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上述话题其实都是在生物领域非常热门的话题。回到今天展示的主要内容，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们将我们的论文概括成以下五点：&lt;/span&gt;&lt;span&gt;&lt;span&gt;① &lt;/span&gt;&lt;span&gt;已有的图神经网络；② 现有图神经网络普遍存在的两个主要问题：一般性和过平滑；③ GPR-GNN模型；④ GPR-GNN模型的实验结果；⑤ 总结以及GPR-GNN模型未来的研究方向。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;已有的图神经网络&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 常用符号&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，我们先介绍一些比较通用的符号：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;和其他的方法类似，我们首先定义GNN 的邻接矩阵A，节点特征矩阵 X，类别特征矩阵Y，还有必要的normalized degree和邻接矩阵tilde D 和tilde A 以及delta函数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ304ubGSd7j5T9YjXeqQ5MYrF7fuUFk2hYLVSFH3h4xCOZjAj8OVg22ibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 现有模型：stacking GNN layers&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大部分常用的GNN结构其实都是通过不断的叠加类似于下图的GNN layer或者传播 layer来得到。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30iciaJsL4B0Bo1zU3LQIGsq6LKvlZlmTSTaHQs9gKcibf2WAwK3PNPYWZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从图里面我们能看到的是GCN用到的单层结构, 概括的讲，从k-1层的特征矩阵 H0到k层的特征矩阵Hk，GCN或者普遍的GNN的单层结构会先用normalized 邻接矩阵作为自特征层的传播乘上该层对应的变换矩阵作一个线性的变化，最后再通过一个非线性累加得到下一层的结果；不断的迭代,直到在最后层用softmax对所有的节点做最终的表达， 然后对该表达做一个节点的分类或者其他的任务。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;现有GNN模型的缺陷&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在GCN的影响下，大家又提出的其他的不同的GNN结构，比较常见的例如GAT，Graph SAGE以及其他更多的一些结构，其通用逻辑可以概括为先提出一个类似上述的传播层, 然后不断的叠加一些层,最后再用一个类似与softmax的单层作为神经网络的最终输出。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30L2Mw8t4NxcQKOUibdLACIqNpyicA4wbdTVcHyNZib2j6UnIcvRnutEdlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样的做法在很多的测试数据集上都表现出优越的成绩，尤其是像较于仅使用图拓扑结构或者是使用节点的表达 node 特征矩阵。但是GNN也衍生出了一些GNN的主要问题，我们这里主要关注大部分GNN都有的两个问题：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;其中一个就是普遍性或者一般性；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;以及大部分GNN都存在的过平滑。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;这里的普遍性是指一个普通的GNN应该能在不同种类的图结构数据上学习，进行准确的预测，不应该偏向于某一类型的图，而过平滑是一个图深层网络都会出现的一个普遍问题。那么接下来我会详细的讲一下一般性和过平滑的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30PLqwhTtMf1ZevbTwpbTpTkBGvB1ic8Y9q13dkibKomMThS7LiamBqp21A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 一般性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，大部分的GNN都是基于一个 叫做homophilic（同源）的假设，即同向偏好假设（或者同源偏好假设），在这个假设中，属于同一类的点或者相似的点，他们之间更偏向于建立相互的连接，它的反例就是heterophily(weak homophily)就是异向偏好（或者异源偏好），即非同源偏好，即不同类别的点或者不相似的点更倾向与建立连接，例如在部分Dating graph或者protein graph上，不同的性别或者不同的氨基酸，比起同类的，他们更有可能在不同的类别之间建立连接，此时，基于homophily假设设计的GNN，或者假设图已经是homophily的GNN，那么他们的表现就不太好，甚至还不如其他的或者一般的方法。因此我们设计GNN的时候，一个关键的点就是要使得我们的GNN能够同时应对这两种情况的图结构，也就是所谓的一般性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30poABWsQibxwdicBvxiaboga3AZLiaZ5Dp7jpiaMLg8fdKzFzgUpvEAzNYTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 过平滑&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另一个GNN的主要问题就是过平滑，过平滑的意思就是大部分现有的GNN都不能算作是一个深层模型（deep model）， 上文中提到的图里面，理论上没有限制K有多大，可以一直叠加，但是实际上，大部分的模型，如GCN，还有Graph SAGE，他们普遍都只有2-4层，非常浅。而且，这些浅层的模型在测试数据集上往往比深层的模型表现要好。导致了GNN不能叠加过多层的理论上的原因，即过平滑（过平滑）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30Kq0pIsH7Bywjv2Jc6ZFrCKMolCJqrVrkJuKQibaADxRibzic5JNcjLxhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如何理解过平滑的问题？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设在无穷层的GCN中，如果把所有非线性变化叠加全部去掉,就只有了一个连续的传播以及连续线性变换。由表达式可知，如果模型迭代了无限多层，且没有非线性叠加的话，最后的特征向量或者特征矩阵会变成和原先的输入矩阵X无关的一个矩阵。因此，无论输入数据是什么，最后都会得到一个与输入无关的表达，即完全丧失了来自于节点特征的信息，所以，图不能在该数据中学得很好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ307dsd7HTfCV8HAo327qnM0lU0cPDELJibDZEltNtibiajvVzxRoQS92PlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上即GNN的两个主要问题。接下来就交给简翌介绍我们的解决方法以及GPR-GNN如何解决GNN的上述问题，和一些其他的beneficials。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;我们的解决方案：GPR-GNN&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下图是GPR-GNN的主要结构，它分为两个部分，第一部分是一个单层的MLP神经网络。它主要的作用是做隐态特征提取。当输入矩阵X （node matrix） 进入到神经网络层之后，会得到一个变换之后的特征矩阵 H0,之后根据图拓扑去传播 K步分别得到H1至Hk不同步数传播后的结果。然后把得到的不同步数的结果做一个线性组合，其对应的权重叫做GPR Weights,最后线性组合完成的结果就是最终的输出结果。表达式中标注的红色参数就是需要学习的参数，而模型是采用端对端（end-to-end）的方式进行训练。逻辑为：在解释其功能中，前面的逻辑好像是专门针对node feature，而GPR Weights专门解决图传播的问题,如果实际上是end-to-end的训练，他们相互之间可以借由梯度信息同时得到节点特征和图传播 ,并同时受到节点特征和图传播的限制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30P012Rk1XBGASDv5SX1T9um9w28SJDcNLHEDzIxzPfyeNr2IXlK3Row/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GPR-GNN能够同时解决一般性和过平滑 的问题，此外，GPR-GNN还能够避免过拟合的问题。在以前的SGC中，如果每多加一层，就需要多引进一个需要训练的参数矩阵，当隐藏单元很大的时候,每多加一层，参数量就会很大，相对来说，GPR-GNN每多传播一步，只会多引入一个单个的参数，因此可以传播很深但是参数量不会明显增加。同时，GPR-GNN还具有可解释性，之后的实验会观察学到的GPR weights是否合理，然后借由实验表明GPR-GNN 模型确实有可解释性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 节点分类&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在本次的分享中主要关注的是节点分类的问题,我们会拿到一整张图以及node 特征矩阵，然后会得到一些点，我们的任务就是还原所有标签的节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30y1XxtlJeibUBlr2m6gA7Ymhjf7DFKgXAOUxFBMj4h0Tjgmic4g9vJgWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;① Generalized PageRank&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于节点分类这个问题，其实与非监督图聚类相关，特别是与seed-set expansion相关，在我们19年发布的论文中，提出了Generalized PageRank的想法，去研究在seed-set expansion 这个任务中，GPR的表现如何。研究显示，GPR明显优于比较受欢迎的传统方法，如Personalized PageRank(PPR),seed-set expansion 这个任务是指给定一个点，在图中找到包含该点的集群，更类似于非监督问题。我们可以根据信息学做一个one dimension 特征矩阵即如果该节点是seed node,那么其结果为1，否则为0。GPR主要的概念就是把one dimension 特征矩阵做一个K部的传播,之后再做一个线性组合对每一个点得到一个GPR分数，然后根据GPR的分数进行聚类，将分数最高的几个点作为包含seed node的集群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30adq9kGg6YejhCia2RSic2xZtKNEyMd800G3CvSxyobZohxg8n4SAYfhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;② 图卷积与随机漫步之间的关系&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从下图中，可以看见GCN 层与GPR的传播具有一定的相似性，但也存在不同得地方。它们相似的点为都是在图中做传播。不同的点是GCN会增加一些特征变换，且只用了最后一步；而GPR的重点则是从第0步到第k步做一个线性组合，第0步到第k步的信息都有用到。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30PlmJZbF0OquNr3qfT5B8NeyQjI1uViczYnWqUvh3LY0gJrtnRvZictSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. GPR-GNN具有一般性的原因&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么接下来我来解释为什么GPR-GNN是具有一般性的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个很重要的评论是GPR在数学上是与多项式的图滤波器是等价的，以下是多项式图滤波器的表达式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.16051136363636365&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30zFrZlfe0svibsKz5dAF5PSfEX8Uh08969lQ8iaaLEYe3U4QVI3OtDgaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;704&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以看到对一个邻接矩阵而言，它是一个K次的多项式，GPR weights则变为多项式的系数。而学习最优GPR weights也等同于学习最优多项式滤波器。从传统的信号处理或者图信号处理的角度而言：多项式滤波器可以逼近任意种类的滤波器，如低通滤波器，或高通滤波器，甚至是更复杂的带通滤波器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在此论文中，主要得到一下的理论：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一个部分的结论是说，假设GPR weighs的结果全部为非负，且并非只有第0步为非负，即除了corner case 以外，不是只有第0步有值，然后其他步都为非负，那么GPR weights 可以对应看作一个低通图滤波器，另一方面，如果 GPR weights的形式为&lt;/span&gt;&lt;span&gt;&lt;span&gt;(-&lt;/span&gt;&lt;span&gt;α&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;sup&gt;&lt;span&gt;k&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，其正负号会随其步数的weights而依次有&lt;/span&gt;&lt;span&gt;&lt;span&gt;(-&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;sup&gt;&lt;span&gt;k&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;的交替，则GPR会对应看作一个高通图滤波器。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30NXHemtKpM5aYyjQEbUo5h1fxGeCemgqr6C71ibAwd7UFtNCib41lH4Kw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;理论上，如果GPR-GNN或者多项式滤波器需要满足一般性，那么部分GPR weights 需为负值，如果全部为正，则就会对应为低通滤波器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. GPR-GNN能够避免过平滑的原因&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外，我们也理论的角度分析为什么GPR-GNN能够避免过平滑。因为理论分析相对复杂，所以本此分享中仅提到关键理论，思路为，如果第K步的结果对训练损失没有帮助，那么在用它的梯度更新相对应的GPR weights 的时，就会把第K步的结果的大小拉下来，当其结果下降到一定程度时，没有帮助的步数就最终就不会影响结果，从而避免过平滑的问题。详细的理论证明则请有兴趣的同学从论文中查找。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ3091och0F2sa6ZNBl8AxDtMrC30sIV8OvIzGe9Y6qic06eRAhwoXSP29g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5. 与相关论文的对比&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么接下来，我们提一些比较相关的论文，其可以分为两类：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;① GCN-like 模型：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(1) JK-NET：与GPR-GNN相同的是，它也在最后一层中将不同步数的结果累加起来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(2) GCN-Cheby：每一层的GNN都传播超过1步。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上述两个模型在实践中，深度都会比较受限，且其学习到的参数步具有可解释性。很难说明他们学习到的weights具体代表什么内容。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;② 基于图拓扑加强的MLP&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(1) APPNP：如果我们将GPR-GNN的weights固定不动为PPR weights的形式，则将GPR-GNN还原为APPNP,因为它的所有GPR weights都是正值，所以它不可避免地成为了一个低通滤波器；导致它只能在同源图中生效，而无法在异源图中生效。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(2) SGC：与APPNP类似，它只有最后一步的GPR weights 有值，而把所有的非线性值都删除，所以它仍然是一个低通滤波器，仍然只能在同源图中生效，而无法在异源图中生效。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(3) C&amp;amp;S：在2021年ICLR论文：Huang et al. Combining Label Propagation and Simple Models out-performs Graph Neural Networks中提出catch and smooth的方法， 其主要观点则是结合标签 传播与MLP，该论文也存在部分工作仍然基于同源图的假设，故亦不能应用于异源图中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30iaTibxS8MazHmPriatch9Vn6qUFrpyEfAaTYdib5QA6tdL1bHwiamkf0d6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;04&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;实验&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 实验：Synthetic data&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了测试各个GNN 在不同程度的同源图和异源图中的表现，我们提出了使用contextual Stochastic Block模型(cSBM)生成随机图测试GNN的性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其node feature 是一些高斯随机向量，μ则是高斯随机向量的距离，所以μ越大，那么node feature的信息强度则越强。而其图的部分则是SBM，由λ参数控制相同标签的边或者不同标签的边机率的差，因此λ的大小则表示了该拓扑图信息强度的大小,λ的绝对值越大，则图的信息强度越强，λ为正则表示该图为同源图，λ为负则表示该图的异源图。新定义参数 ϕ 表示λ与μ的比值，如果 ϕ在1到-1之间，则该图对应为强同源图或者强异源图，如果ϕ等于1或者-1，则node feature 独立与node 标签不相关，如果ϕ等于0，则拓扑图独立与 node 标签不相关。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30oSauxTmictY4wEVfhc9GkebBhnkexAgpC2QPLib4A51oppj2ibjUQEgcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以下是我们对各个Baseline以及GPR-GNN在cSBM上的实验结果，当ϕ从0到1变大的时候，所有的GNN表现都会越来越好，也说明了GNN目前受到欢迎的原因，因为在同源图中，GNN比一般不考虑图拓扑信息的模型表现好，而MLP的表现则会随着ϕ的增加而变差，因为当ϕ等于1的时候，node feature 是完全没有信息的。根据我们刚刚的模型，如果一个GNN具有一般性，则其在同源图或者异源图中的学习效果是相同的，因此，如果当ϕ在0到-1中时，ϕ越接近-1，传统的GNN，如GCN,GAT,其表现则不如他们在同源图中学习的效果，会具有明显的落差。与之相对的，GPR-GNN的表现曲线则相对较为对称，表示GPR-GNN确实具有一般性。同时，在图拓扑信息不强的时候，即ϕ接近0的时候，传统GNN的表现明显弱于完全忽略图拓扑信息的模型，如MLP。所以，在不确定图是同源图还是异源图，甚至是与标签不相关的情况下，如果盲目使用GNN，则有可能得到更糟糕的结果，而GPR-GNN在图拓扑信息完全与节点标签不相关的情况下，其表现仍然与MLP相差不远。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30ZXQtRk4gUAIvfuAtKZ5tDP68QCuCg9UFdy3iaOYmDYClLAFbLM0XaDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 实验：真实世界数据集&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在实际情况的数据集中也做了实验，简而言之，无论是在同源图，还是异源图中，GPR-GNN的表现仍然较好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30Tu55GN0XmUpL0n0ZldtL7Yic5UedtRwlgxIVk6M2VBsk2E4JCDBiawPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 实验：已学习GPR weights的可解释性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同样地，我们也做了实验证明GPR weghts是否具有可解释性。首先，a,b,e,f四个图表示的是同源图的效果，可以看到每一步已学习GPR weights都是正值，就理论而言，其表现为低通滤波器；而在c,d,g,h四个异源图中，已学习GPR weights是正负交替出现的，其在理论上仍然符合高通滤波器的特点，即GPR weights的部分值需要为负值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30Vh4bwGfT93EK4TfVibzzRwsAD3BDrcMQ6GIp9dIHqL03EATzVVrUUibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. 实验：避免过平滑&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，我们仍做实验测试了GPR-GNN是否能够避免过平滑。刚开始，将GPR weights初始化到最后一步，则发现在训练之前，GPR-GNN很大程度上会出现过平滑，而随着开始训练GPR weights整个模型时，前面几步的GPR weights已经开始逐渐变大，最后一步其大小会下降，而从准确率的角度评估，完全没有训练之间的准确率在百分之五十左右，而训练完成的准确率则可高达仅百分之九十九。而该实验中训练步数达到了10步，已经是一个相对叫较深的模型，同时也证明了GPR-GNN确实能够避免过平滑问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30e8Xy7IxVEiaF5yDJueeaovywljzV7ohsMNNwdBib6tLBc0VibMeCKXvqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;05&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;总结与未来发展&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ30tEJvtTL4UGwZnwRashQEC20reFI3rlqGO0Z3cORiahKUm0ug9BW8YsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总结：GPR-GNN具有一般性，且能够避免过平滑问题；此外，因为GPR-GNN使用的参数较少，所有也能够避免过拟合问题；而所学习到的GPR weights 是具有可解释性的。更多地，发现能够在cSBM中严谨地测试GNN的一般性。在未来研究中，也思考过很多有趣的发展方向，如是否能够将MLP替换为其他更加复杂的神经网络; 或者使用attention机制学习GPR weights,因为目前GPR-GNN形式还较为简单，需要验证是否能够将其变得更复杂从而学习到GPR weights；最后 GPR-GNN是否能够延伸到图表示学习中，即如果在GPR-GNN中加入图池化层，GPR-GNN是否仍然能够运行。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;06&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;问答环节&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAAJYIJ-QO2HgAAAAstQy6ubaLX4KHWvLEZgBPEyqJgHngmcvz9zNPgMItocyeDn73n3N_PBzntevsN&quot; data-url=&quot;https://findermp.video.qq.com/251/20350/stodownload?encfilekey=XGocBFxVWK5dcyOOqpEU47RpBHQIvlhnhAW0ttmGpBDQic3m0uoPGJaXyibUFpqYws9ibxsx9m2oLotFYsBLeKMWw63nCnXwvWhv63yjoF3MLxgLW0dNYyx5at154icrib3avhYVWdXrdkvic4r0kjFho4eGmPw04fFDsEeM7um42CEmtiaC9op6riakcg&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=4fc0da5340fe6c1a76cf108d3396bb1d&amp;amp;token=x5Y29zUxcibAVBQDTyYqnTktrx3COPzic0PGA0CLEVWZSFMYJictQzJiczzF4AL6mSCLuKmo6BbT3vA&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/Q3auHgzwzM65dPMvw5LV1YKkNSOYWPNEtwKxyoQUNib89J7W8ruoIOw/0&quot; data-username=&quot;v2_060000231003b20faec8c7e18a1ec3ddcb0ceb33b07771cd1cb5408d3b3fdc0ac1072c28df1a@finder&quot; data-nickname=&quot;DataFunTalk&quot; data-desc=&quot;如何衡量节点最终的表示与原始信息是否相关？@DataFunTalk &quot; data-nonceid=&quot;9529412641164827624&quot; data-type=&quot;video&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Q：如何辨别同源图和异源图？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A：在ICLR关于GCN的论文中，有提到过一个关于衡量同源图和异源图的标准指标，但是其仍然存在一些缺点，同时，在我们的论文附录中，也有具体讨论过关于衡量同源图与异源图的相关指标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Q：在生物医药中的一些实际应用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A：目前的论文是专注在节点分类的方向上提供一种可行性，暂时没有实际应用到生物医药分析上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Q：图上高频和低频的实际物理含义&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A：图上的高低频主要是根据其特征值（Eigenvalue）确定的，如果把adjacency matrix做特征值处理的话，其特征值在1到-1之间变化，特征值越大，则对应的是低频，反之对应的则是高频；因为特征值会从所有值为正值逐渐变为负值，而随着特征值越靠近高频，该节点的邻居节点也会逐渐靠近负值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Q：如何衡量节点最终的表示是否与原始信息是否相关？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A：GPR-GNN是不需要特别在意最终的表现与初始信息是否有强相关或者弱相关，因为在cSBM上，不管特征是否具有信息量，都具有非常好的表示结果。论文中，在弱化初始特征是否重要。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Q：如果节点特征没有区分度，模型是否仍然有作用？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A：节点特征是与结果无关的，其证明在输入特征完全没有用的情况下，GPR-GNN模型仍然能够提取图的拓扑信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Q：假设没有非线性层，该模型是否仍然能够调用一个深度的基因模型，仅仅是传播次数加深，如果有非线性，是否仍然能够做相关分析？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2020年有一篇ICLR做过相关方面的分析，可以用gamma训练大小来衡量&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Q：是否能够分辨同构图？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A：未来有兴趣探讨的方向之一，目前只是专注于节点分类，还没有考虑过加上一个图层，且图表示学习中的效果，都还没有做相关研究。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Q：如何分别异构图？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A：本论文中没有涉及到分辨节点属性不同的情况进行分析，我们比较在意的是在两个节点如何在不同类，但他们比较容易产生连接的情况下，GNN模型是否能够生效。从点分类的角度，最后的GPR是可以和多项式图滤波器做连接，输出的图信号一定是集中在某一个频带上，如果能够得到一个最好滤波器，那么一定能够过滤一定的噪音。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16008590572276=&quot;rgb(136, 151, 171)&quot; data-darkmode-original-color-16008590572276=&quot;rgb(63, 74, 89)&quot; data-style=&quot;color: rgb(63, 74, 89); font-family: 微软雅黑; font-size: 11pt; letter-spacing: 0.4pt; text-align: left; text-indent: 0pt; visibility: visible;&quot;&gt;今天的分享就到这里，谢谢大家。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;在文末分享、点赞、在看，给个3连击呗~&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分享嘉宾：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;289&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;289&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ303NHIa7Bwd2ZiasYP51DyjtE2q0CH6TM31Ftcvrtfp0Bf7kHEJ5Xge4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;289&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;289&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm1TJtjFngD0g5yTjV6XxQ3056OtictkF6OqZywOq2pYfTBsllyrJdeL9rhoj90IsNuuldaQpOQfhLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;活动推荐：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;1301&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;2.25&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjqtHdG9nyT9BZDMVxxJtD5SmCMrSMKr8boIMRRPthCNFPnH0ahda8fHMMFWwwdHpOric1fIgPeV4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;社群推荐：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;欢迎加入 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;DataFunTalk 图神经网络 &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;交流群，跟同行零距离交流。&lt;strong&gt;识别二维码&lt;/strong&gt;，添加小助手微信，&lt;strong&gt;入群。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9903536977491961&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPia1L2REqSoiaUPY1MnPpVTnSlNnx9bgNh5iaJHzRLvte84ibHw9K2jQkkxC9ypj8pDB7cn28bgtwsmMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;311&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;关于我们：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;DataFun：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;专注于大数据、人工智能技术应用的分享与交流。发起于2017年，在北京、上海、深圳、杭州等城市举办超过100+线下和100+线上沙龙、论坛及峰会，已邀请近1000位专家和学者参与分享。其公众号 DataFunTalk 累计生产原创文章500+，百万+阅读，11万+精准粉丝。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA3MTU2ODMzNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm0Gnd52mVCVYjEDG4DoqUqvicKHdzia1o5YsgkMwyv5wjic9Q3f0GJNerzNucU0HVJKxLiavF4OsRMkeA/0?wx_fmt=png&quot; data-nickname=&quot;DataFunSummit&quot; data-alias=&quot;DataFunSummit&quot; data-signature=&quot;DataFun旗下，专注于大数据、人工智能领域，相关峰会信息、嘉宾演讲内容的分享。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;🧐&lt;strong&gt;分享、点赞、在看&lt;/strong&gt;，给个&lt;strong&gt;3连击&lt;/strong&gt;呗！&lt;strong&gt;👇&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>