<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>490fdc6563cac9985155f301d09eee6f</guid>
<title>设计模式大冒险第四关：单例模式，如何成为你的 “唯一”</title>
<link>https://toutiao.io/k/gkagy84</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一篇文章是关于&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAwMDIzODY5MA==&amp;amp;action=getalbum&amp;amp;album_id=1557269952766771201&amp;amp;scene=173&amp;amp;subscene=0&amp;amp;sessionid=0&amp;amp;enterid=1607352063&amp;amp;from_msgid=2247484057&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;设计模式大冒险系列&lt;/a&gt;的第四篇文章，&lt;strong&gt;这一系列的每一篇文章我都希望能够通过通俗易懂的语言描述或者日常生活中的小例子来帮助大家理解好每一种设计模式&lt;/strong&gt;。今天这篇文章来跟大家一起学习一下单例模式。相信读完这篇文章之后，你肯定会有所收获的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于单例模式，这应该是设计模式中最简单的一种了。大家如果学习过设计模式，可能很多设计模式长时间不用就忘记了，但是对于单例模式来说，你肯定不会忘记。&lt;strong&gt;因为它的理论知识比较简单，实践起来也很方便&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;但是，你真的会正确的使用单例模式吗&lt;/strong&gt;？你知道单例模式在什么情况下使用是合适的，什么情况下使用会造成很多麻烦吗？还是你只是把它当做一个全局变量去使用，只是因为这样开发很方便，不用写很多的代码。今天这篇文章我们就来一起好好学习一下单例模式。让我们开始吧。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;单例模式的介绍&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我们先来看一下单例模式的定义是什么。&lt;strong&gt;所谓的单例模式，就是指对于一个具体的类来说，它有且只有一个实例，这个类负责创建唯一的实例，并且对外提供一个全局的访问接口&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单例模式的UML类图可以用下图表示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5049833887043189&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fj9xyC53hPXibNcYhEicMm39E1bePApoD5v9ibKcBVEUJLp5RicibjyGVe9FZcxzDZmzuLGviag96icWjJ5G6s6qic36wA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3010&quot;/&gt;&lt;figcaption&gt;UML&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么我们为什么要使用单例模式呢？&lt;strong&gt;举一个生活中的场景，在平时你过马路的时候，给你信号提示你能不能穿过马路的交通信号灯是不是只有一个？因为在这种情况下，如果同时有两个信号灯的话，你是不知道该不该在此时穿过马路的&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以类比到我们的软件开发中，也是这么一个道理。&lt;strong&gt;在一个系统中，某种用途的实例会存在唯一的一个。这个实例可能用来保存应用中的一些状态，或者执行某些任务&lt;/strong&gt;。比如在前端开发中，我们常常会使用一些应用的状态管理库，比如Vuex或者Redux。那么在我们的应用中，对于管理状态的实例也只能有一个，如果有多个的话就会让应用的状态出现问题，从而导致应用发生一些错误。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;单例模式的实现&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们来看一下单例模式是如何实现的。通过上面的UML类图，我们可以知道，&lt;strong&gt;对于一个类来说，我们需要一个静态变量来保存实例的引用，还需要对外提供一个获取实例的静态方法&lt;/strong&gt;。如果使用 &lt;strong&gt;ES6&lt;/strong&gt; 的类的语法来实现的话，可以简单的用下面的代码来表示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Singleton&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;// 类的静态属性&lt;/span&gt;&lt;br/&gt; &lt;span&gt;static&lt;/span&gt; instance = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// 类的静态方法&lt;/span&gt;&lt;br/&gt; &lt;span&gt;static&lt;/span&gt; getInstance() {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.instance === &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;   &lt;span&gt;this&lt;/span&gt;.instance = &lt;span&gt;new&lt;/span&gt; Singleton();&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.instance;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; a = Singleton.getInstance();&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; b = Singleton.getInstance();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(a === b); &lt;span&gt;// true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的代码还是比较简单的，相信大家看一下就知道怎么实现了。&lt;strong&gt;需要注意的一点是，在类的静态方法中，this指的是类，而不是实例&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们再使用函数的方式来实现一次：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; Singleton = (&lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;let&lt;/span&gt; instance;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// 初始化单例对象的方法&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;initInstance&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; {};&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;  getInstance() {&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; (instance === &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;    instance = initInstance();&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; instance;&lt;br/&gt;  },&lt;br/&gt; };&lt;br/&gt;})();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; a = Singleton.getInstance();&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; b = Singleton.getInstance();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(a === b);   &lt;span&gt;// true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面这两种方法的实现都是差不多的，你可以根据自己的喜好选择不同的实现方式。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;多线程环境中的单例模式&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为Web前端开发者来说，因为我们使用的开发语言基本上是&lt;strong&gt;JavaScript&lt;/strong&gt;，又因为&lt;strong&gt;JavaScript&lt;/strong&gt;是一种单线程语言，所以我们一般不会遇到在多线程环境中使用单例模式会遇到的一些问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么我们如果在多线程的环境中使用单例模式需要注意什么呢？&lt;strong&gt;首先在单例还没有初始化的时候，如果有多个线程访问创建单例模式的代码，在没有做额外处理的情况下，就有可能会创建多个单例&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然也有解决的方法，&lt;strong&gt;一种方法就是我们在类初始化的时候就把单例生成了，这样以后通过获取单例的接口获取到的都是最开始生成的那个单例。但是这样就失去了延时初始化单例的好处&lt;/strong&gt;。如果单例的初始化需要花费的资源或者时间比较少，这种方法是可以的。反之，这样做有就有一些浪费了。&lt;strong&gt;因为可能在整个应用的运行过程中，这个单例一次也没有被使用过&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一种方式就是&lt;strong&gt;在创建单例的时候需要加锁，保证同时只能有一个线程在创建单例&lt;/strong&gt;。这样的话我们就保证了创建的单例是唯一的。当然具体的操作还跟实现单例模式选择的语言有关系，这里就不在深入讨论了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;单例模式的适用场景和优势&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单例模式适合用在这样的场景中：&lt;strong&gt;系统中需要一个唯一的对象去控制、管理和分享系统的状态，或者执行某一个特定的任务又或是实现某一个具体的功能&lt;/strong&gt;。在我们的前端开发中，最常见的就是应用的状态管理对象，比如 &lt;strong&gt;Vuex&lt;/strong&gt; 和 &lt;strong&gt;Redux&lt;/strong&gt;。又或者是打印日志的对象，或者是某一个功能插件等等。总之单例模式在我们平时的开发中还是比较常见的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么单例模式的优势有哪些呢？下面简单列举了一些：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;全局只有一个实例，提供统一的访问与修改，保证状态功能的一致性&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;简单、方便，容易实现&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;延迟的初始化，只有在需要的时候才去初始化对象&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;单例模式的劣势&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然单例模式的优势很突出，但是它的缺点可是一点都不少，甚至有些开发者觉得它是反模式的。所以我们使用单例模式的时候一定要好好思考一下，确定是不是必须要使用单例模式。因为单例模式的不恰当使用会给整个应用的测试，开发和维护带来很大的困难。我们接下来就来看看单例模式有哪些缺点。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;单例模式的滥用会造成跟全局变量一样的一些问题&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如会增加代码的耦合性，因为单例模式全局都是可以访问到的，那么我们就很有可能在很多个地方使用这个唯一的对象，这样也就造成了代码的耦合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为程序中使用到这个单例对象的地方都可以对全局的状态进行修改，所以一旦程序在这里出现了问题，你可能要在很多个地方进行排查，这就增加了调试和排查问题的难度。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;单例模式给测试带来了很多麻烦&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么说单例模式对测试来说是一个灾难呢？因为如果代码中使用了单例，那么我们需要在进行代码测试的时候，提前把单例初始化好。这导致了我们不能够在单例没有初始化好的时候对代码进行单元测试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且因为单例模式产生的实例只有一个，这就导致了对相同代码进行多次测试的时候容易出现问题，因为实例的状态很可能在上一次测试的时候发生了改变，从而导致了下一次测试的失败或者异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以说单例模式增加了测试的难度与复杂度，增加了测试代码的工作量。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;单例模式违背了软件设计的单一职责原则&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个比较容易理解，因为一般情况下，对于一个类来说它只负责这个类的实例具有什么功能；但是对于单例模式来说，单例模式的类还需要负责只能够产生一个实例。这违背了软件设计的单一职责原则，类应该只负责其实例的具体功能，而不应该对类产生的实例个数负责。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是对于这个缺点来说，大家可能会有不同的看法。显而易见的是这样做确实更加方便，设计实现上也相对简单一些。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;单例模式隐藏了它所需要的依赖&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于一般的类来说，如果我们的类依赖了其它的类，一般情况下，我们可以通过类的构造函数将依赖的类显式的表示出来。这样我们在初始化具体的类的实例的时候就知道这个类需要那些依赖。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是对于单例模式来说，它把它的依赖封装在内部，对于外部的使用者来说它是一个黑盒。使用者并不知道初始化这个单例需要那些依赖，所以很容易在初始化单例的时候把单例所需要的依赖忘记掉，进而导致单例初始化失败。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时就算我们知道了初始化单例需要那些依赖，但是这些依赖也许是有先后的顺序的。我们也很容易在导入和使用依赖的时候把顺序搞错了，从而导致单例的初始化出现问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;单例模式的总结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;从上面的内容我们已经知道单例模式是一把双刃剑，所以你在使用的时候一定要考虑清楚&lt;/strong&gt;。先从场景的需求上考虑，是不是一定要使用单例模式才能够解决当前的问题，有没有其它的方案。&lt;strong&gt;如果一定要使用单例模式的话，如何规范单例模式的使用，如何在程序的开发，可维护性，可拓展性以及测试的简易性上做好平衡，是一个值得考虑的问题&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文章到这里就结束了，如果大家有什么问题和疑问欢迎大家在文章下面留言，或者在这里提出来。也欢迎大家关注我的公众号关山不难越，获取更多关于设计模式讲解的内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是这一系列的其它的文章，也欢迎大家阅读，希望大家都能够掌握好这些设计模式的使用场景和解决的方法。&lt;strong&gt;如果这篇文章对你有所帮助，那就点个赞，分享一下吧~&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考链接：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Use your singletons wisely&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Singleton&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Singleton Pattern Pitfalls&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;单例模式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;单例模式&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>aa2799af0621d5b4fad6af96e58cb831</guid>
<title>工具 | 字节跳动开源的一款通用内存快照裁剪压缩工具</title>
<link>https://toutiao.io/k/3nnro7z</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7bbccd38bad066519bca20cbb57928e4</guid>
<title>爱奇艺数据仓库平台和服务建设实践</title>
<link>https://toutiao.io/k/tfi2z9t</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;统一数仓建模是业务层建模的基础，需要涵盖尽可能多的业务过程和维度，包括业务建模、数据建模和物理建模三个阶段。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;业务建模是基于业务已有信息，结合建模同学对业务的理解，对业务进行梳理，此时不会面向具体的分析细节，确认范围主要是业务域、业务过程和实体之间的关系，输出业务总线矩阵。业务建模的目的是为了对业务需求进行分解，转化为数据理解，包括的具体流程有：划分业务域、确认业务过程、设计事件事实，确认相关实体、关联事件、构建业务总线矩阵&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;▇  &lt;span&gt;业务域划分，业务域是业务过程的集合，是对业务各个环节的粗粒度划分，将相关的业务过程聚集到一个业务域下，例如播放域。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;▇  确认业务过程，业务过程是业务中的原子行为，不能再进行拆解，我们需要在业务建模过程中，确认有哪些业务过程，并明确业务过程所属的业务域，一个业务过程只能属于一个业务域。&lt;/p&gt;&lt;p&gt;▇  设计事件事实。&lt;/p&gt;&lt;p&gt;▇  确认相关实体，从较粗的粒度确认一个业务过程涉及到的实体范围，防止遗漏分析角度，同时为关联事件实体提供联接节点。&lt;/p&gt;&lt;p&gt;▇  关联事件事实，统一数仓建模需要将已有的事件事实字段都涵盖到，并通过实体进行更多维度的关联。&lt;/p&gt;&lt;p&gt;▇  构建业务总线矩阵，横纵坐标分别为描述事实本身的业务域、业务过程，以及描述事实环境的维度和实体。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据建模阶段主要是为了将业务总线矩阵进行细化，完成业务关系到数据关系逻辑转换，并补充相关的维度，输出星型（雪花）模型。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;▇  确认业务，一般不跨业务，针对单个业务进行建模。&lt;/p&gt;&lt;p&gt;▇  确认业务过程，可以面向单个或者多个业务过程。&lt;/p&gt;&lt;p&gt;▇  确认维度，业务过程中包含的维度。&lt;/p&gt;&lt;p&gt;▇  确认度量，业务过程中涉及到的度量。&lt;/p&gt;&lt;p&gt;▇  退化维度属性，为了下游使用更加高效，把一些通用的维度属性退化到明细层模型，尽量减少与维表之间的join操作，提高效率。&lt;/p&gt;&lt;p&gt;▇  构建星型模型，指导后续开发操作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;物理建模实际上是对数据模型的物化过程，物化过程会根据不同引擎在流程上有细微差别，最终将数据模型物化成Hive的物理表/视图，甚至是带有Schema结构的Kafka Topic，下面以Hive物理表为例描述整个过程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;▇  确认数据模型，选择需要物化的数据模型。&lt;/p&gt;&lt;p&gt;▇  确认表名，根据数仓规范补充完善表名信息，例如计算周期、表类型、业务信息等。&lt;/p&gt;&lt;p&gt;▇  确认描述/使用说明，补充对表信息的中文描述以及使用注意事项。&lt;/p&gt;&lt;p&gt;▇  确认分区字段，例如天级、小时级。&lt;/p&gt;&lt;p&gt;▇  确认生命周期，根据数据重要性，设置数据保留的时间范围，例如30天、1年等。&lt;/p&gt;&lt;p&gt;▇  生成物理表，同时将表的业务元数据信息录入到元数据中心，与模型完全对应，表名、字段名、字段类型等信息标准化、统一化。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;如之前所述，统一数仓作为底层模型和数据的基础来源，业务集市/主题数仓基于已有的底层模型进行建模，主要包括数据建模，物理建模（当然，可以通过统一数仓业务建模阶段输出的业务总线矩阵更加了解业务）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;业务层数据建模的目标是输出主题的数据星型模型，根据不同的主题和分析场景，选取相关的业务过程，使用合理的建模手段进行数据建模，主要流程包括：确认主题、选取业务过程、确认粒度、确认维度、确认统计指标，最终输出星型模型。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;▇  根据具体的分析需求确认主题。&lt;/p&gt;&lt;p&gt;▇  确认需要分析的业务以及业务过程。&lt;/p&gt;&lt;p&gt;▇  确认统一数仓模型，系统自动推荐相关的模型，选择满足条件的模型，并在此基础上进行后续建模工作。&lt;/p&gt;&lt;p&gt;▇  确认粒度，相同粒度模型可以进行指标的合并。&lt;/p&gt;&lt;p&gt;▇  确认维度，选取后续需要下钻分析的维度，选取过程是在业务过程的范围内进行，不能超出维度能够关联的范围。&lt;/p&gt;&lt;p&gt;▇  确认统计指标，选取业务过程相关的度量（原子指标元数据）派生的统计指标。&lt;/p&gt;&lt;p&gt;▇  构建星型模型。&lt;/p&gt;&lt;p&gt;物理建模流程与之前所述相同，不再重复介绍。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下图是数据建模阶段产出的星型模型实例，在模型图中，将关联的业务信息和数据逻辑进行清晰的表达，辅助后续数据开发工作。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>eec27f804530d02eed5bb2c7c1273de7</guid>
<title>我看技术人的成长路径</title>
<link>https://toutiao.io/k/qnlw4ck</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>49eb8dd905ebf07f218bcbb1e3f44315</guid>
<title>vivo 官方商城架构演进之路</title>
<link>https://toutiao.io/k/ifppams</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;本文讲述 vivo 官方商城从单体应用到具备综合能力电商平台的演进，系统架构往服务化、中台化的变迁历程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、前言&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;vivo官方商城，是vivo官方的线上电商平台，主营vivo手机及专属配件。经过几年发展，已经完成了从单体应用到具备综合能力电商平台的演进，整体系统架构也逐步往服务化、中台化变迁。我们在这条系统架构升级的道路中，实践出了一些系统架构经验。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过本篇文章，可以让对电商感兴趣的小伙伴们，更为全面地了解最基础的电商业务模式，了解电商体系具备的技术和架构，了解系统在不同时期的架构演进。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、架构变迁史&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;“冰冻三尺，非一日之寒”。任何一个电商系统的架构升级，都不是一蹴而就的，都需要一个稳步发展的过程，不同阶段业务发展的形态和体量决定着系统架构。下面从一张图开始，给大家描述下商城近几年架构变迁的历史。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.23800564440263405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5CtaSRlIyqSXLTKpthZMIwMhORQJwiaU1VdVC0JHHxeV6anibicABxcxotL9ysSCZIdV2v3gVhViaYSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1063&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（图1.1 vivo官方商城架构变迁历程）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2015年之前，vivo官方商城是外包项目，采用了市面上比较成熟的 &lt;a target=&quot;_blank&quot; href=&quot;http://club.shopex.cn/ecstore/manual_book/1.rule/1.introduce.html&quot; textvalue=&quot;ECStore&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;ECStore&lt;/a&gt;（企业级开源网上电商系统）电商产品作为系统基础，主语言是PHP。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;项目版本就是在此基础上进行二次开发迭代。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;和大多数电商平台早期的发展一样，满足快速部署、快速上线。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;同时弊端也很明显：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;性能很差，根本无法支撑稍大一点的运营活动。当有新品、大促活动，系统负载高，业务基本处于不可用状态，无法满足运营活动需求。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;需求沟通效率，研发效率低下，外包研发、产品异地办公，需求沟通困难。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;核心项目受制于人，vivo 官方商城必须掌握在自己手中。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;为了解决这些问题，架构迫切需要升级、系统需要重构。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;2.1 商城 v1.0 单体时期&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2015年5月，vivo官方商城正式启动重构计划。vivo启用自己的研发团队，目标很明确，自研一套属于自己的vivo官方商城，为用户提供更好的购物体验。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在2016年1月，属于我们自己的vivo官方商城正式上线了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;商城v1.0以主流的 Java 作为开发语言，采用经典的 MVC 框架，开发出了一个囊括了各个业务模块的单体应用，整体业务模块如下图所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6492271105826397&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5CtaSRlIyqSXLTKpthZMIwTyNe2rA7bpttroWf4B4LahkcBIvRNWXPunSOa3CSN9icnc0gm78vHxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;841&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;图2.1 商城v1.0系统架构）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;相比之前，这次重构最重要的指导思想就是“&lt;strong&gt;分层&lt;/strong&gt;”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;业务上对各个模块进行逻辑分层。划分出了&lt;strong&gt;商品模块、订单模块、营销模块、结算模块等等&lt;/strong&gt;，使得代码逻辑更为清晰。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;架构上也进行分层解耦：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;单体应用的时期，vivo官方商城业务发展尚处于初期，业务复杂度不高。首页、商详页、结算页逻辑比较简单轻量。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;v1.0的架构完全能够满足支撑日常的新品及活动运营，且版本迭代更为快速。相比于ECStore 性能提升了至少两个量级，所以商城v1.0的重构非常成功。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;2.2 商城 v2.0  服务化&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;官方商城 v1.0 架构升级之后，平稳地度过了一段时间。近两年，vivo手机产品越来越多，线上业务开始迅猛发展。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随之而来的是用户量级的快速增长，商城v1.0的单体架构弊端也逐渐暴露：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;飞速增长的用户访问流量让性能再次出现瓶颈，单体的数据库和Redis难以抵挡。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;v1.0 架构对业务模块进行了分层，分层仅限于代码模块级别的拆分，没有从物理上进行隔离，单体应用愈发臃肿。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;所有研发维护同一套代码，项目工程维护变得困难。快速迭代的版本让模块之间分层的界限变得模糊，代码腐化严重，开发效率变得低下。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;基于以上问题，我们开始基于业务模块进行垂直的系统物理拆分。新的系统架构采用主流的SOA架构（Service Oriented Architecture，即面向服务的架构）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;商城 v2.0 从2017年开始，以服务化为核心稳步进行拆分独立。我们得保证既有的业务不受丝毫影响的情况下独立模块，有人形容这个过程为“高速换轮胎”，动作稍有不慎，对系统来说都是致命的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最终在花了近一年半的时间，我们实现了活动、商品、订单、优惠券四大核心系统的拆分。拆分出来业务线开始各司其职，提供服务化的能力，共同支撑主站业务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.504941599281222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5CtaSRlIyqSXLTKpthZMIwSo4dMWNghlVT4C0AlaSsqqvJaWu5p2CBMvWlVnaqiakefByIcg13AvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1113&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;图2.2 商城 v2.0系统架构）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;下面将介绍各个系统拆分的整个过程。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2.1 活动系统独立&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;官方商城作为vivo的唯一线上官方渠道，承载着所有新品的线上活动需求。每次的新品发布会，都是由商城系统负责完成。大量频繁的活动需求，引起频繁的商城版本变更、上线，引发我们的思考。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;相比电商的核心交易链路，活动系统本身比较独立，不应与主线交易耦合在一起。因此在2017年年中，将商城中的专题页配置，新品发布会，抽奖，预约功能剥离出来，独立出了商城活动系统。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2017年8月，活动系统独立上线。新的活动系统开始承接新品、大促等各种促销活动需求。随着活动系统不断迭代发展，目前已经成为电商平台一个重要组成部分。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2.2 商品系统独立&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;商品系统是支撑整个电商平台的核心，是电商系统中最重要的组成部分。商品连接着用户和平台，通过商品的详情页可以完美地向用户展示产品内容，诠释产品内涵。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;商城 v2.0 服务化，商品是这次整改的重点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们在思考v1.0架构带来系统性问题的时候，也开始思考如何通过这次拆分来对应未来的业务增长。商城v1.0商品模块亟待解决的问题：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;商品的品类创建受限，只有垂直类的手机和配件，无法支持全品类。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;商品不支持店铺、品牌维度，比较单一。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;v1.0商品模块的查询性能低下，单实例Redis无法满足高性能、高可用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;历史 v1.0商品接口和模型已经渗透到各个模块，完整地剥离出来比较困难。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;商品系统的独立是带着以上的问题和思考进行的，大的目标是划清业务边界，彻底和商城解耦。我们希望分离后的商品系统能够更好、更快速地承接未来全品类的扩展，全面服务化。为进一步服务好商城主体业务夯实基础。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2.3 优惠券系统独立&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;优惠券是业界内常用的营销手段之一，每到大促、节假日、新品，都会发放大量的优惠券。与外部广告商合作、内购福利、保值换新等也以优惠券的形式承载。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着营销活动力度加大，优惠券使用场景增多，优惠券系统问题也逐渐暴露：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;优惠券系统独立需要解决的就是以上问题，独立后优惠券存储能力提升，支撑未来5年内的优惠券发放量级。整体发券接口性能也得到提升，发券由原来的异步发券、异步到账，优化到同步发券、实时到账。同时提供平台级优惠券能力，面向全公司业务，提供通用的优惠券营销能力。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2.4 订单系统独立&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;订单系统也有与优惠券同样的问题，随着用户量级的爆发式增长，性能问题逐渐暴露：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;订单系统的独立，首次引入了 ES，Sharding-JDBC 等技术组件，解决数据量和高并发的痛点。订单系统上线后，无论是订单的存储量级还是下单的并发量级，都提高了不止十倍，至少满足未来 5 年的业务高速发展。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;至此，商城核心系统拆分完成，各系统提供统一标准化服务，具备更纯粹的业务基础能力，与商城主站解耦，迭代效率大幅提升。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;2.3 商城 v3.0  业务系统拓展&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;商城 v3.0 是针对商城业务快速发展，进行的业务系统完善。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这一阶段由于商城业务渠道不断扩展，促销玩法不断增多，商城衍生出很多独立的业务子系统。其中包含&lt;strong&gt;代销系统、CPS系统、促销系统&lt;/strong&gt; 3 大业务系统。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6038034865293186&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7Gp5mSqBVjcNFXLOZZvYFmy4UqNLZrFlcXibKicIZ489icTtUvEE6oKI648cZDUuqAUFq2yOljtWogw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1262&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;图2.3 商城 v3.0系统架构）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.3.1 代销系统：商城与代销商品纽带&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;为了丰富自身的商品品类，支撑起更多的运营玩法，我们开始探索代销的业务，尝试对接品类优质的平台方。很多平台方也都支持系统对接，采用以销定采的销售模式。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;代销系统就在此背景下诞生了。我们希望代销系统能够成为外部平台方和vivo商城之间的“粘合剂”，并能够提供以下的主要功能：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;支持两个平台商品数据模型的转换，支持部分信息二次编辑，更加本地化。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;实时同步平台方商品库存、价格、订单正逆向信息的同步。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持vivo商城用户的商品浏览、以及下订单服务，满足用户购物的完美体验。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;代销系统是我们对接外部系统，引入外部商品售卖的一次尝试。代销的通用能力被我们完全沉淀了下来，能够持续支撑后续其他平台商品接入。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.3.2 CPS系统：商城返利平台&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;CPS 系统的定位是 vivo 官方商城体系下的推广返利平台系统。商城的业务不断扩展，商城的业务群体也开始向外拓展。主要针对一些带货能力强的大V以及一些外部推广平台，以返佣的形式，最大限度发挥其带货能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着用户群体以及推广平台接入，CPS 系统逐渐沉淀一些基础能力，目前支持 toB、 toC 通用接入能力。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;2.3.3 促销系统：商城营销百花齐放&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;促销系统是商城的促销中心，承载着商城所有的营销玩法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;促销系统的独立，源于商城v2.0 架构无法满足不断增加的活动玩法，它解决了商城原有促销的以下痛点：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;促销系统独立，与商城解耦，提供纯粹的商城营销活动玩法。促销系统还包括：商品计价与商品价格监控基础能力。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、国际化&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;随着经济全球化日益加深，国产品牌纷纷布局海外，印度作为海外最大单一市场，拥有非常广阔的市场前景，顺应当地市场的需求，上线印度版官方商城提上日程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2017年12月，印度vivo官方商城正式上线运营。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;印度官方语言共有22种，目前已登记的语言超过1600种，支持多语言是国际化进程中首要课题。传统的 i18n 方案，能够解决基本的文案配置问题，但是项目需要走发布流程，维护成本非常高。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;多语言文案系统标准化了文案需求的提出、翻译、测试、发布等流程，极大地提升了发布效率和文案质量。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6364963503649635&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5CtaSRlIyqSXLTKpthZMIw166j4sYqgDAdw8Qys2Fo2A2IbUbMib1rc7onJrEkpXhyUJziaUgJDJRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;685&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;图3.1  多语言文案中心）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2020年11月，泰国 vivo 官方商城也正式上线运营。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;与国内电商相比，海外电商业务需要覆盖多个国家/地区，每个地区都有自己的语言、时区、货币等等，如何使用一套代码同时支持多个地区，是我们必须要面对并且解决的问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;经过3年时间的摸索和打磨，我们打造出了一套通用的全球化解决方案，包括多语言文案系统、多时区通用组件、多国家隔离框架、多机房域名部署方案等等，已经能够较好的支撑当前业务的发展需要。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.47283406754772395&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt5CtaSRlIyqSXLTKpthZMIwZgJR9o0jTwdd7BCf2921GjI1vdecCYhhiaLo9ljkzwPtblJcnZA11kQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;681&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;图3.2  多时区通用组件）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7998046875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt5CtaSRlIyqSXLTKpthZMIwiccrMiaU7SG82GibasLxC4T8TGyLsgzIUKNh7fHQa4CticViaMuibyWOiboEA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;图3.3  多国家隔离框架）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上述方案，抽象公共配置的思想以及相应的隔离技术点，即使是在非国际化场景中，也具有较大的参考价值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;海外市场复杂多变，语言文字、文化差异、地区标准、法律法规等不尽相同，地区发展阶段和基础设施成熟度也有较大差异。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;挑战与机会并存，我们既要全力支撑业务发展，也要优先完成合规整改要求；我们既要提炼一套通用的国际化架构，也要满足本地化定制需求；我们既要合理应用发达地区高网速，也要兼顾欠发达地区页面加载性能优化。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;“more local more global”，随着全球化进程的加深，我们会继续锤炼全球化架构，锻造出更加健壮的国际化/本地化产品。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;写在最后，本篇主要是简要的介绍vivo官方商城这5年来的一些大的架构历史变迁，不做过多的技术解读。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里的介绍只是商城技术背后的冰山一角，后续我们会出更多相关系列文章，去详细介绍每个系统的架构与核心技术。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;END&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:0.title1&quot;&gt;&lt;p&gt;猜你喜欢&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.1730382&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7Gp5mSqBVjcNFXLOZZvYFmzciaqeRiad5zf0EIcdho67oFGjvt8QIYcCZCzeruKcv4GBfGKFdgcqDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;994&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7Gp5mSqBVjcNFXLOZZvYFmylksOoQv5iaqwDDNhH4iaVEW9EmVEuKDkjUA7oibD3bP3hSRQpfvq85qA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;vivo互联网技术&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;vivo移动互联网是基于vivo 智能手机所建立的完整移动互联网生态圈，围绕vivo大数据运营，打造包括应用、游戏、资讯、品牌、电商、内容、金融、搜索的全方位服务生态，满足海量用户的多样化需求。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;点一下，代码无 Bug&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8808777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/4g5IMGibSxt7Gp5mSqBVjcNFXLOZZvYFmobEuB4xPFHwrZ3VjBiciaE3Po1ibByibs3RSNCqmAnSKcKvleIT5gPbPtQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;638&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>