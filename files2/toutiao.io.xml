<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>95315bb19ed690924320d2ad2bac8254</guid>
<title>缓存穿透、缓存击穿、缓存雪崩</title>
<link>https://toutiao.io/k/laxldpe</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45233463035019456&quot; data-type=&quot;png&quot; data-w=&quot;1028&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLFvjy33QIm6KV68BdT73EVpamYJia5K0IdYsEzs4ib73MlYSGmeT5wL1iaMXDBNEAqrPWPjhuibaQ0QrQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是楼仔！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天写的这个主题内容，其实非常基础，但是&lt;strong&gt;作为高并发非常重要的几个场景，绝对绕不开&lt;/strong&gt;，估计大家面试时，也经常会遇到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个主题的文章，网上非常多，本来想直接转载一篇，但是感觉没有合适的，要么文章不够精炼，要么就是精简过头，所以还是自己写一篇吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;内容虽然基础，但我还是秉承以往的写作风格，参考众多优秀的博客后，打算写一篇能通俗易懂，又不失全面的文章。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先看一下正常情况的查询过程：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;先查询 Redis，如果查询成功，直接返回，查询不存在，去查询 DB；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果 DB 查询成功，数据回写 Redis，查询不存在，直接返回。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7459379615952733&quot; data-type=&quot;png&quot; data-w=&quot;677&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLFvjy33QIm6KV68BdT73EVp0m8zibaiaPA5VRIfzU1HT95rqCI5TQuPlnwozoXXkAl63DiaDjfhZfquA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;缓存穿透&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;定义：当查询数据库和缓存都无数据时，因为数据库查询无数据，出于容错考虑，不会将结果保存到缓存中，因此&lt;strong&gt;每次请求都会去查询数据库&lt;/strong&gt;，这种情况就叫做缓存穿透。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6910112359550562&quot; data-type=&quot;png&quot; data-w=&quot;712&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLFvjy33QIm6KV68BdT73EVpKJ1r7KEiaRzXRyKyoXhz5f71NrPK1m4MiaOZiaxcnQplu9JZWOQCvBalg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;红色的线条，就是缓存穿透的场景，&lt;strong&gt;当查询的 Key 在缓存和 DB 中都不存在时，就会出现这种情况。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以想象一下，比如有个接口需要查询商品信息，如果有恶意用户模拟不存在的商品 ID 发起请求，瞬间并发量很高，估计你的 DB 会直接挂掉。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能大家第一反应就是对入参进行正则校验，过滤掉无效请求，对！这个没错，那有没有其它更好的方案呢？&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;缓存空值&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们从数据库中查询到空值时，&lt;strong&gt;我们可以向缓存中回种一个空值&lt;/strong&gt;，为了避免缓存被长时间占用，需要给这个空值加一个比较短的过期时间，例如 3~5 分钟。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7246192893401016&quot; data-type=&quot;png&quot; data-w=&quot;788&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLFvjy33QIm6KV68BdT73EVpauvQ3SVngNmWIBZicTEmqGD4eSNKHdwlSw2sEfLycxjViaXCLyib9WI6w/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过这个方案有个问题，当大量无效请求穿透过来时，缓存内就会有有大量的空值缓存，如果缓存空间被占满了，还会因剔除掉一些已经被缓存的用户信息，反而会造成缓存命中率的下降，&lt;strong&gt;所以这个方案，需要评估缓存容量。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果缓存空值不可取，这时你可以考虑使用布隆过滤器。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;布隆过滤器&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;布隆过滤器是由一个可变长度为 N 的二进制数组与一组数量可变 M 的哈希函数构成，说的简单粗暴一点，就是一个 Hash Map。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原理相当简单：比如元素 key=#3，假如通过 Hash 算法得到一个为 9 的值，就存在这个 Hash Map 的第 9 位元素中，通过标记 1 标识该位已经有数据，如下图所示，0 是无数据，1 是有数据。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5160680529300568&quot; data-type=&quot;png&quot; data-w=&quot;529&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLFvjy33QIm6KV68BdT73EVpB2jNHfB4ZgvQatxx9DU5MYaPNR6kajmrkVCzrWIlwiaKt2KN8bg9geA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以通过该方法，会得到一个结论：&lt;strong&gt;在 Hash Map 中，标记的数据，不一定存在，但是没有标记的数据，肯定不存在。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么“标记的数据，不一定存在”呢？&lt;strong&gt;因为 Hash 冲突！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如 Hash Map 的长度为 100，但是你有 101 个请求，假如你运气好到爆，这 100 个请求刚好均匀打在长度为 100 的 Hash Map 中，此时你的 Hash Map 已经全部标记为 1。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;当第 101 个请求过来时，就 100% 出现 Hash 冲突&lt;/strong&gt;，虽然我没有请求过，但是得到的标记却为 1，导致布隆过滤器没有拦截。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果需要减少误判，可以增加 Hash Map 的长度，并选择却分度更高的 Hash 函数，比如多次对 key 进行 hash。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了 Hash 冲突，&lt;strong&gt;布隆过滤器其实会带来一个致命的问题：布隆过滤器更新失败。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如有一个商品 ID 第一次请求，当 DB 中存在时，需要在 Hash Map 中标记一下，但是由于网络原因，导致标记失败，那么下次这个商品 ID 重新发起请求时，请求会被布隆过滤器拦截，比如这个是双11的爆款商品库存，明明有 10W 件商品，你却提示库存不存在，领导可能会说“明天你可以不用来了”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;所以如果使用布隆过滤器，在对 Hash Map 进行数据更新时，需要保证这个数据能 100% 更新成功&lt;/strong&gt;，可以通过异步、重试的方式，所以这个方案有一定的实现成本和风险。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;缓存击穿&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;定义：&lt;strong&gt;某个热点缓存在某一时刻恰好失效&lt;/strong&gt;，然后此时刚好有大量的并发请求，此时这些请求将会给数据库造成巨大的压力，这种情况就叫做缓存击穿。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个其实和“缓存穿透”流程图一样，只是这个的出发点是“某个热点缓存在某一时刻恰好失效”，比如某个非常热门的爆款商品，缓存突然失效，流量直接全部打到 DB，&lt;strong&gt;造成某一时刻数据库请求量过大，更强调瞬时性。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决问题的方法主要有 2 种：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;分布式锁&lt;/strong&gt;：只有拿到锁的第一个线程去请求数据库，然后插入缓存，当然每次拿到锁的时候都要去查询一下缓存有没有，这种在高并发场景下，个人不太建议用分布式锁，会影响查询效率；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;设置永不过期&lt;/strong&gt;：对于某些热点缓存，我们可以设置永不过期，这样就能保证缓存的稳定性，但需要注意在数据更改之后，要及时更新此热点缓存，不然就会造成查询结果的误差，比如热门商品，都先预热到数据库，后续再下线掉。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网上还有“缓存续期”的方式，比如缓存 30 分钟失效，可以搞个定时任务，每 20 分钟跑一次，感觉这种方式不伦不类，仅供大家参考。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;缓存雪崩&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;定义：&lt;strong&gt;在短时间内有大量缓存同时过期，导致大量的请求直接查询数据库&lt;/strong&gt;，从而对数据库造成了巨大的压力，严重情况下可能会导致数据库宕机的情况叫做缓存雪崩。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果说“缓存击穿”是单兵反抗，那“缓存雪崩”就是集体起义了，那什么情况会出现缓存雪崩呢？&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;短时间内有大量缓存同时过期；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缓存服务宕机，导致某一时刻发生大规模的缓存失效。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么有哪些解决方案呢？&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;缓存添加随机时间&lt;/strong&gt;：可在设置缓存时添加随机时间，比如 0~60s，这样就可以极大的避免大量的缓存同时失效；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;分布式锁&lt;/strong&gt;：加一个分布式锁，第一个请求将数据持久化到缓存后，其它的请求才能进入；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;限流和降级&lt;/strong&gt;：通过限流和降级策略，减少请求的流量；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;集群部署&lt;/strong&gt;：Redis 通过集群部署、主从策略，主节点宕机后，会切换到从节点，保证服务的可用性。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存添加随机时间示例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 缓存原本的失效时间&lt;/span&gt;&lt;br/&gt;&lt;span&gt;int&lt;/span&gt; exTime = &lt;span&gt;10&lt;/span&gt; * &lt;span&gt;60&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;// 随机数生成类&lt;/span&gt;&lt;br/&gt;Random random = &lt;span&gt;new&lt;/span&gt; Random();&lt;br/&gt;&lt;span&gt;// 缓存设置&lt;/span&gt;&lt;br/&gt;jedis.setex(cacheKey, exTime + random.nextInt(&lt;span&gt;1000&lt;/span&gt;) , value);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;「文章汇总」&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;汇总目录&lt;/strong&gt;：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3OTU5NzQ1Mw==&amp;amp;mid=2247487713&amp;amp;idx=1&amp;amp;sn=9661f1520e6237d18536ccf496f8793a&amp;amp;chksm=cf035203f874db157eb05a3909725daeadd4625b8702f358abe9d77dd52fefd08c50279ce771&amp;amp;token=1760780777&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;楼仔原创精选荟萃&lt;/a&gt; 🔥🔥🔥&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;推荐理由&lt;/strong&gt;：&lt;span&gt;一百多篇原创好文，近 2 年的坚持，&lt;/span&gt;&lt;strong&gt;无论你是小白，还是资深大佬，总能找到属于你自己的段位。&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3OTU5NzQ1Mw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLFTdSvrrpJnCZ0Fp5Z1wKkhKFQBxTaFfxOpib3E2zgUu39BFbsBqqJbEpxicUvz3H6csoL2JQ9EP1yQ/0?wx_fmt=png&quot; data-nickname=&quot;楼仔&quot; data-alias=&quot;&quot; data-signature=&quot;7 年一线大厂经验（百度/小米/滴滴），带你进大厂，不限于Java、Go、高并发、架构选型、消息队列、设计模式、MySQL、Redis、DDD、项目管理、软技能等。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;「学习交流」&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前我们已经成立多个技术交流群！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;长按二维码，回复 &lt;strong&gt;「加群」&lt;/strong&gt;，欢迎一起学习交流哈~~ 👏🏻👏🏻👏🏻&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5726210350584308&quot; data-type=&quot;png&quot; data-w=&quot;1198&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLFvjy33QIm6KV68BdT73EVp0ibd3XdurERqIhL1DWS0fhiaZqibDNekibaUlicLiaz60ibGPzZzWxv4PpZgQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;尽信书则不如无书，因个人能力有限，难免有疏漏和错误之处，如发现 bug 或者有更好的建议，欢迎批评指正，不吝感激。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d92f47aaf67be316dca49b3f419d767e</guid>
<title>图解Go内存管理器</title>
<link>https://toutiao.io/k/k4upoi5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;关于Go的内存分配&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;Go&lt;/code&gt;语言里，从内存的分配到不再使用后内存的回收等等这些内存管理工作都是由&lt;code&gt;Go&lt;/code&gt;在底层完成的。虽然开发者在写代码时不必过度关心内存从分配到回收这个过程，但是&lt;code&gt;Go&lt;/code&gt;的内存分配策略里有不少有意思的设计，通过了解他们有助于我们自身的提高，也让我们能写出更高效的&lt;code&gt;Go&lt;/code&gt;程序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go内存管理的设计旨在在并发环境中快速运行，并与垃圾回收器集成在一起。让我们看一个简单的示例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; smallStruct &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;   a, b &lt;span&gt;int64&lt;/span&gt;&lt;br/&gt;   c, d &lt;span&gt;float64&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;   smallAllocation()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//go:noinline&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;smallAllocation&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; *&lt;span&gt;smallStruct&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; &amp;amp;smallStruct{}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;函数上面的注释&lt;code&gt;//go:noinline&lt;/code&gt;将禁止&lt;code&gt;Go&lt;/code&gt;对该函数进行内联，这样&lt;code&gt;main&lt;/code&gt;函数就会使用&lt;code&gt;smallAllocation&lt;/code&gt;函数返回的指针变量，因为被多个函数使用，返回的这个变量将被分配到堆上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于内联的概念之前的文章有说过：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;内联是一种手动或编译器优化，用于将简短函数的调用替换为函数体本身。这么做的原因是它可以消除函数调用本身的开销，也使得编译器能更高效地执行其他的优化策略。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以如果上面的例子不干预编译器的话，编译器通过内联将&lt;code&gt;smallAllocation&lt;/code&gt;函数体里的内容直接放到&lt;code&gt;main&lt;/code&gt;函数里，这样就不会产生&lt;code&gt;smallAllocation&lt;/code&gt;这个函数的调用了，所有的变量都是&lt;code&gt;main&lt;/code&gt;函数内这个范围使用的，也就不在需要将变量往堆上分配了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续说上面那个例子，通过逃逸分析命令 &lt;strong&gt;go tool compile  -m main.go&lt;/strong&gt; 可以确认我们上面的分析，&lt;code&gt;&amp;amp;smallStruct{}&lt;/code&gt;会被分配到堆上去。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;➜ go tool compile -m main.go&lt;br/&gt;main.go:12:6: can inline main&lt;br/&gt;main.go:10:9: &amp;amp;smallStruct literal escapes to heap&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;借助命令&lt;strong&gt;go tool compile -S main.go&lt;/strong&gt;，可以显示该程序的汇编代码，也可以明确地向我们展示内存的分配：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;0x001d 00029 (main.go:10)       LEAQ    type.&quot;&quot;.smallStruct(SB), AX&lt;br/&gt;0x0024 00036 (main.go:10)       PCDATA  $2, $0&lt;br/&gt;0x0024 00036 (main.go:10)       MOVQ    AX, (SP)&lt;br/&gt;0x0028 00040 (main.go:10)       CALL    runtime.newobject(SB)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;内置函数&lt;code&gt;newobject&lt;/code&gt;会通过调用另外一个内置函数&lt;code&gt;mallocgc&lt;/code&gt;在堆上分配新内存。在Go里面有两种内存分配策略，一种适用于程序里小内存块的申请，另一种适用于大内存块的申请，大内存块指的是大于32KB。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们来细聊一下这两种策略。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;小于32KB内存块的分配策略&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当程序里发生了&lt;code&gt;32kb&lt;/code&gt;以下的小块内存申请时，Go会从一个叫做的&lt;code&gt;mcache&lt;/code&gt;的本地缓存给程序分配内存。这个本地缓存&lt;code&gt;mcache&lt;/code&gt;持有一系列的大小为&lt;code&gt;32kb&lt;/code&gt;的内存块，这样的一个内存块里叫做&lt;code&gt;mspan&lt;/code&gt;，它是要给程序分配内存时的分配单元。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.687382297551789&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4ibYqZUwMxwOh3sQpHvQowB6XvZYknRxo5dhC3uvlOr0etLAibsgPm56FalO52ZQVdfat8aSUkQDQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;531&quot;/&gt;&lt;figcaption&gt;从mcache中给程序分配内存&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Go的调度器模型里，每个线程&lt;code&gt;M&lt;/code&gt;会绑定给一个处理器&lt;code&gt;P&lt;/code&gt;，在单一粒度的时间里只能做多处理运行一个&lt;code&gt;goroutine&lt;/code&gt;，每个&lt;code&gt;P&lt;/code&gt;都会绑定一个上面说的本地缓存&lt;code&gt;mcache&lt;/code&gt;。当需要进行内存分配时，当前运行的&lt;code&gt;goroutine&lt;/code&gt;会从&lt;code&gt;mcache&lt;/code&gt;中查找可用的&lt;code&gt;mspan&lt;/code&gt;。从本地&lt;code&gt;mcache&lt;/code&gt;里分配内存时不需要加锁，这种分配策略效率更高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么有人就会问了，有的变量很小就是数字，有的却是一个复杂的结构体，申请内存时都分给他们一个&lt;code&gt;mspan&lt;/code&gt;这样的单元会不会产生浪费。其实&lt;code&gt;mcache&lt;/code&gt;持有的这一系列的&lt;code&gt;mspan&lt;/code&gt;并不都是统一大小的，而是按照大小，从8字节到32KB分了大概70类的&lt;code&gt;msapn&lt;/code&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9553349875930521&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4ibYqZUwMxwOh3sQpHvQowBgFDzQ6BtMd6o63YmyMYy2CwAOba6xqdpsfnUToEmziaBOvoXJ58KQ6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;403&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;figcaption&gt;按照大小分类的mspan&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就文章开始的那个例子来说，那个结构体的大小是32字节，正好32字节的这种&lt;code&gt;mspan&lt;/code&gt;能满足需求，那么分配内存的时候就会给它分配一个32字节大小的&lt;code&gt;mspan&lt;/code&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.687382297551789&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4ibYqZUwMxwOh3sQpHvQowBbImaUer9P3Fy91cNicyno4uIDBcw4scyt0z8lYePgJngA61diaLVF0bg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;531&quot;/&gt;&lt;figcaption&gt;alloc 分配内存&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在，我们可能会好奇，如果分配内存时&lt;code&gt;mcachce&lt;/code&gt;里没有空闲的32字节的&lt;code&gt;mspan&lt;/code&gt;了该怎么办？&lt;code&gt;Go&lt;/code&gt;里还为每种类别的&lt;code&gt;mspan&lt;/code&gt;维护着一个&lt;code&gt;mcentral&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;mcentral&lt;/code&gt;的作用是为所有&lt;code&gt;mcache&lt;/code&gt;提供切分好的&lt;code&gt;mspan&lt;/code&gt;资源。每个&lt;code&gt;central&lt;/code&gt;会持有一种特定大小的全局&lt;code&gt;mspan&lt;/code&gt;列表，包括已分配出去的和未分配出去的。每个&lt;code&gt;mcentral&lt;/code&gt;对应一种&lt;code&gt;mspan&lt;/code&gt;，当工作线程的&lt;code&gt;mcache&lt;/code&gt;中没有合适（也就是特定大小的）的&lt;code&gt;mspan&lt;/code&gt;时就会从&lt;code&gt;mcentral&lt;/code&gt; 去获取。&lt;code&gt;mcentral&lt;/code&gt;被所有的工作线程共同享有，存在多个&lt;code&gt;goroutine&lt;/code&gt;竞争的情况，因此从&lt;code&gt;mcentral&lt;/code&gt;获取资源时需要加锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;mcentral&lt;/code&gt;的定义如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//runtime/mcentral.go&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; mcentral struct {&lt;br/&gt;    // 互斥锁&lt;br/&gt;    lock mutex &lt;br/&gt;    &lt;br/&gt;    // 规格&lt;br/&gt;    sizeclass int32 &lt;br/&gt;    &lt;br/&gt;    // 尚有空闲object的mspan链表&lt;br/&gt;    nonempty mSpanList &lt;br/&gt;    &lt;br/&gt;    // 没有空闲object的mspan链表，或者是已被mcache取走的msapn链表&lt;br/&gt;    empty mSpanList &lt;br/&gt;    &lt;br/&gt;    // 已累计分配的对象个数&lt;br/&gt;    nmalloc uint64 &lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;mcentral&lt;/code&gt;里维护着两个双向链表，&lt;strong&gt;nonempty&lt;/strong&gt;表示链表里还有空闲的&lt;code&gt;mspan&lt;/code&gt;待分配。&lt;strong&gt;empty&lt;/strong&gt;表示这条链表里的&lt;code&gt;mspan&lt;/code&gt;都被分配了&lt;code&gt;object&lt;/code&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7651122625215889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4ibYqZUwMxwOh3sQpHvQowB4LP16QeDbtD6qEFycRENb5iaV8kVLUu9kCby1lyo5kPTJ6ekYGSwkeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;579&quot;/&gt;&lt;figcaption&gt;mcentral&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果上面我们那个程序申请内存的时候，&lt;code&gt;mcache&lt;/code&gt;里已经没有合适的空闲&lt;code&gt;mspan&lt;/code&gt;了，那么工作线程就会像下图这样去&lt;code&gt;mcentral&lt;/code&gt;里去申请。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单说下&lt;code&gt;mcache&lt;/code&gt;从&lt;code&gt;mcentral&lt;/code&gt;获取和归还&lt;code&gt;mspan&lt;/code&gt;的流程：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;获取 加锁；从&lt;code&gt;nonempty&lt;/code&gt;链表找到一个可用的&lt;code&gt;mspan&lt;/code&gt;；并将其从&lt;code&gt;nonempty&lt;/code&gt;链表删除；将取出的&lt;code&gt;mspan&lt;/code&gt;加入到&lt;code&gt;empty&lt;/code&gt;链表；将&lt;code&gt;mspan&lt;/code&gt;返回给工作线程；解锁。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;归还 加锁；将&lt;code&gt;mspan&lt;/code&gt;从&lt;code&gt;empty&lt;/code&gt;链表删除；将&lt;code&gt;mspan&lt;/code&gt;加入到&lt;code&gt;nonempty&lt;/code&gt;链表；解锁。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.581081081081081&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4ibYqZUwMxwOh3sQpHvQowBvfL1SILd6E5mx20krFSFkXaXicDCXOKtMcngSEewiarukXELS57qYLog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;666&quot;/&gt;&lt;figcaption&gt;从mcentral里申请mspan&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当&lt;code&gt;mcentral&lt;/code&gt;没有空闲的&lt;code&gt;mspan&lt;/code&gt;时，会向&lt;code&gt;mheap&lt;/code&gt;申请。而&lt;code&gt;mheap&lt;/code&gt;没有资源时，会向操作系统申请新内存。&lt;code&gt;mheap&lt;/code&gt;主要用于大对象的内存分配，以及管理未切割的&lt;code&gt;mspan&lt;/code&gt;，用于给&lt;code&gt;mcentral&lt;/code&gt;切割成小对象。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38380281690140844&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4ibYqZUwMxwOh3sQpHvQowBkwtqibfPPNMRNZoKxDTZ5fPibrmxOPpCussX9xHtlT4cicdct3XSibxCvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;568&quot;/&gt;&lt;figcaption&gt;从heap上申请内存&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时我们也看到，&lt;code&gt;mheap&lt;/code&gt;中含有所有规格的&lt;code&gt;mcentral&lt;/code&gt;，所以，当一个&lt;code&gt;mcache&lt;/code&gt;从&lt;code&gt;mcentral&lt;/code&gt;申请&lt;code&gt;mspan&lt;/code&gt;时，只需要在独立的&lt;code&gt;mcentral&lt;/code&gt;中使用锁，并不会影响申请其他规格的&lt;code&gt;mspan&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面说了每种尺寸的&lt;code&gt;mspan&lt;/code&gt;都有一个全局的列表存放在&lt;code&gt;mcentral&lt;/code&gt;里供所有线程使用，所有&lt;code&gt;mcentral&lt;/code&gt;的集合则是存放于&lt;code&gt;mheap&lt;/code&gt;中的。&lt;code&gt;mheap&lt;/code&gt;里的&lt;code&gt;arena&lt;/code&gt; 区域是真正的堆区，运行时会将 &lt;code&gt;8KB&lt;/code&gt; 看做一页，这些内存页中存储了所有在堆上初始化的对象。运行时使用二维的 runtime.heapArena 数组管理所有的内存，每个 runtime.heapArena 都会管理 64MB 的内存。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.706766917293233&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4ibYqZUwMxwOh3sQpHvQowBylDhdmic0LGrKsfdAE1ESHV3GCt1F9auPJJ9R8qJu2tuCaryPoyZ4Ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;399&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果 &lt;code&gt;arena&lt;/code&gt; 区域没有足够的空间，会调用 runtime.mheap.sysAlloc 从操作系统中申请更多的内存。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;大于32KB内存块的分配策略&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go没法使用工作线程的本地缓存&lt;code&gt;mcache&lt;/code&gt;和全局中心缓存&lt;code&gt;mcentral&lt;/code&gt;上管理超过32KB的内存分配，所以对于那些超过32KB的内存申请，会直接从堆上(&lt;code&gt;mheap&lt;/code&gt;)上分配对应的数量的内存页（每页大小是8KB）给程序。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3383742911153119&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4ibYqZUwMxwOh3sQpHvQowBv8NT2G2tibX9v3icjIGVRZsNxtnCgHibToeK6Iiaql8iadLakqAAarrX3FQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;529&quot;/&gt;&lt;figcaption&gt;直接从堆上分配内存&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们把内存分配管理涉及的所有概念串起来，可以勾画出Go内存管理的一个全局视图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5203883495145631&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4ibYqZUwMxwOh3sQpHvQowBZz5gbKtQbg119JrXsGT7WVsjBh3l7c3DE1Dk7P5tKsmer2cibibUYJibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1030&quot;/&gt;&lt;figcaption&gt;Go内存分配的全局示意图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go语言的内存分配非常复杂，这个文章从一个比较粗的角度来看Go的内存分配，并没有深入细节。一般而言，了解它的原理，到这个程度也就可以了（应付面试）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结起来关于Go内存分配管理的策略有如下几点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Go在程序启动时，会向操作系统申请一大块内存，由&lt;code&gt;mheap&lt;/code&gt;结构全局管理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go内存管理的基本单元是&lt;code&gt;mspan&lt;/code&gt;，每种&lt;code&gt;mspan&lt;/code&gt;可以分配特定大小的&lt;code&gt;object&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;mcache&lt;/code&gt;, &lt;code&gt;mcentral&lt;/code&gt;, &lt;code&gt;mheap&lt;/code&gt;是&lt;code&gt;Go&lt;/code&gt;内存管理的三大组件，&lt;code&gt;mcache&lt;/code&gt;管理线程在本地缓存的&lt;code&gt;mspan&lt;/code&gt;；&lt;code&gt;mcentral&lt;/code&gt;管理全局的&lt;code&gt;mspan&lt;/code&gt;供所有线程使用；&lt;code&gt;mheap&lt;/code&gt;管理&lt;code&gt;Go&lt;/code&gt;的所有动态分配内存。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一般小对象通过&lt;code&gt;mspan&lt;/code&gt;分配内存；大对象则直接由&lt;code&gt;mheap&lt;/code&gt;分配内存。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;相关阅读&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;amp;mid=2247485579&amp;amp;idx=1&amp;amp;sn=f481cff4ffccacc186a020e45e884924&amp;amp;chksm=fa80d91ccdf7500ab984ecde7056aa29a2986c423557736c32bd251f2cb5d1ce1e54909753cc&amp;amp;token=1603590138&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Go内存管理之代码的逃逸分析&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;amp;mid=2247484559&amp;amp;idx=1&amp;amp;sn=d639ce831d514c0f73f195f207c0583d&amp;amp;chksm=fa80d518cdf75c0e224697bd9f6f97ad94082f09591d2b9141974baf8a1054e9de0d895fb603&amp;amp;token=1603590138&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;上周并发题的解题思路以及介绍Go语言调度器&lt;/a&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;参考链接&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; Memory Management and Allocation&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;图解Go语言内存分配&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;内存分配器&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUzNTY5MzU2MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4pGhLz2xEbRFHnAQon2QLYgbBibCJo1ibJHesLWshPJeRibateRtAqkaf6BgjlbhYiaxHLq6Zu07CRPw/0?wx_fmt=png&quot; data-nickname=&quot;网管叨bi叨&quot; data-alias=&quot;kevin_tech&quot; data-signature=&quot;分享软件开发和系统架构设计基础、Go 语言和Kubernetes。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;p&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5374318ab5f8c7f7184a8468a026f1f7</guid>
<title>garr ：高性能、线程安全、无锁的 go 数据结构集合</title>
<link>https://toutiao.io/k/8y2p13x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-garr---go-libs-in-a-jar&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#garr---go-libs-in-a-jar&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Garr - Go libs in a Jar&lt;/h1&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a href=&quot;https://pkg.go.dev/go.linecorp.com/garr&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ef0553731b200a819d39d8cc7e7977fd6ba3fd2a6db5c6d654181db1ab735727/68747470733a2f2f706b672e676f2e6465762f62616467652f676f2e6c696e65636f72702e636f6d2f676172722e737667&quot; alt=&quot;Go Reference&quot; data-canonical-src=&quot;https://pkg.go.dev/badge/go.linecorp.com/garr.svg&quot;/&gt;&lt;/a&gt;
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/line/garr/actions/workflows/ci.yml/badge.svg&quot;&gt;&lt;img src=&quot;https://github.com/line/garr/actions/workflows/ci.yml/badge.svg&quot; alt=&quot;CI&quot;/&gt;&lt;/a&gt;
&lt;a href=&quot;https://goreportcard.com/report/go.linecorp.com/garr&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/edf4b843efd365f4f0bc23578ba03523946158a91ee7357d9b03811778dfcd79/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f676f2e6c696e65636f72702e636f6d2f67617272&quot; alt=&quot;Go Report Card&quot; data-canonical-src=&quot;https://goreportcard.com/badge/go.linecorp.com/garr&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;Collection of high performance, thread-safe, lock-free go data structures.&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;&lt;a href=&quot;/line/garr/blob/main/adder/README.md&quot;&gt;adder&lt;/a&gt; - Data structure to perform highly-performant sum under high contention. Inspired by &lt;a href=&quot;https://openjdk.java.net/&quot; rel=&quot;nofollow&quot;&gt;OpenJDK LongAdder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/line/garr/blob/main/circuit-breaker/README.md&quot;&gt;circuit-breaker&lt;/a&gt; - Data structure to implement circuit breaker pattern to detect remote service failure/alive status.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/line/garr/blob/main/queue/README.md&quot;&gt;queue&lt;/a&gt; - Queue data structure, go implementation of &lt;code&gt;JDKLinkedQueue&lt;/code&gt; and &lt;code&gt;MutexLinkedQueue&lt;/code&gt; from &lt;code&gt;OpenJDK&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/line/garr/blob/main/retry/README.md&quot;&gt;retry&lt;/a&gt; - Controls backoff between attempts in a retry operation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/line/garr/blob/main/worker-pool/README.md&quot;&gt;worker-pool&lt;/a&gt; - Worker pool implementation in go to help perform multiple tasks concurrently with a fixed-but-expandable amount of workers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-usage&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#usage&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h1&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-getting-started&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#getting-started&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Getting started&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-shell notranslate position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;go get -u go.linecorp.com/garr&quot;&gt;&lt;pre&gt;go get -u go.linecorp.com/garr&lt;/pre&gt;&lt;/div&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-examples&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#examples&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Examples&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;Please find detailed examples in each sub-package.&lt;/p&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-adder&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#adder&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Adder&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-go notranslate position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;package main&amp;#10;&amp;#10;import (&amp;#10;&amp;quot;fmt&amp;quot;&amp;#10;&amp;quot;time&amp;quot;&amp;#10;&amp;#10;ga &amp;quot;go.linecorp.com/garr/adder&amp;quot;&amp;#10;)&amp;#10;&amp;#10;func main() {&amp;#10;// or ga.DefaultAdder() which uses jdk long-adder as default&amp;#10;adder := ga.NewLongAdder(ga.JDKAdderType) &amp;#10;&amp;#10;for i := 0; i &amp;lt; 100; i++ {&amp;#10;go func() {&amp;#10;adder.Add(123)&amp;#10;}()&amp;#10;}&amp;#10;&amp;#10;time.Sleep(3 * time.Second)&amp;#10;&amp;#10;// get total added value&amp;#10;fmt.Println(adder.Sum()) &amp;#10;}&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; (
&lt;span class=&quot;pl-s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&quot;time&quot;&lt;/span&gt;

ga &lt;span class=&quot;pl-s&quot;&gt;&quot;go.linecorp.com/garr/adder&quot;&lt;/span&gt;
)

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;main&lt;/span&gt;() {
&lt;span class=&quot;pl-c&quot;&gt;// or ga.DefaultAdder() which uses jdk long-adder as default&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;ga&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;NewLongAdder&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;ga&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;JDKAdderType&lt;/span&gt;) 

&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;100&lt;/span&gt;; &lt;span class=&quot;pl-s1&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;++&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt;() {
&lt;span class=&quot;pl-s1&quot;&gt;adder&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;123&lt;/span&gt;)
}()
}

&lt;span class=&quot;pl-s1&quot;&gt;time&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Sleep&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;time&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Second&lt;/span&gt;)

&lt;span class=&quot;pl-c&quot;&gt;// get total added value&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;fmt&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;adder&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Sum&lt;/span&gt;()) 
}&lt;/pre&gt;&lt;/div&gt;
&lt;h4 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-build-your-own-prometheus-counter-with-adder&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#build-your-own-prometheus-counter-with-adder&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Build your own Prometheus counter with Adder&lt;/h4&gt;
&lt;div class=&quot;highlight highlight-source-go notranslate position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;package prom&amp;#10;&amp;#10;import (&amp;#10;ga &amp;quot;go.linecorp.com/garr/adder&amp;quot;&amp;#10;&amp;#10;&amp;quot;github.com/prometheus/client_golang/prometheus&amp;quot;&amp;#10;dto &amp;quot;github.com/prometheus/client_model/go&amp;quot;&amp;#10;)&amp;#10;&amp;#10;// NewCounterI64 creates a new CounterI64 based on the provided prometheus.CounterOpts.&amp;#10;func NewCounterI64(opts prometheus.CounterOpts) CounterI64 {&amp;#10;return CounterI64{counter: prometheus.NewCounter(opts)}&amp;#10;}&amp;#10;&amp;#10;// CounterI64 is optimized Prometheus Counter for int64 value type.&amp;#10;type CounterI64 struct {&amp;#10;val     ga.JDKAdder&amp;#10;counter prometheus.Counter&amp;#10;}&amp;#10;&amp;#10;// Value returns current value.&amp;#10;func (c *CounterI64) Value() int64 {&amp;#10;return c.val.Sum()&amp;#10;}&amp;#10;&amp;#10;// Reset value.&amp;#10;func (c *CounterI64) Reset() {&amp;#10;c.val.Reset()&amp;#10;}&amp;#10;&amp;#10;// Desc returns metric desc.&amp;#10;func (c *CounterI64) Desc() *prometheus.Desc {&amp;#10;return c.counter.Desc()&amp;#10;}&amp;#10;&amp;#10;// Inc by 1.&amp;#10;func (c *CounterI64) Inc() {&amp;#10;c.val.Add(1)&amp;#10;}&amp;#10;&amp;#10;// Add by variant.&amp;#10;func (c *CounterI64) Add(val int64) {&amp;#10;if val &amp;gt; 0 {&amp;#10;c.val.Add(val)&amp;#10;}&amp;#10;}&amp;#10;&amp;#10;// Write implements prometheus.Metric interface.&amp;#10;func (c *CounterI64) Write(out *dto.Metric) (err error) {&amp;#10;if err = c.counter.Write(out); err == nil {&amp;#10;value := float64(c.val.Sum())&amp;#10;out.Counter.Value = &amp;amp;value&amp;#10;}&amp;#10;return&amp;#10;}&amp;#10;&amp;#10;// Collect implements prometheus.Collector interface.&amp;#10;func (c *CounterI64) Collect(ch chan&amp;lt;- prometheus.Metric) {&amp;#10;ch &amp;lt;- c&amp;#10;}&amp;#10;&amp;#10;// Describe implements prometheus.Collector interface.&amp;#10;func (c *CounterI64) Describe(ch chan&amp;lt;- *prometheus.Desc) {&amp;#10;ch &amp;lt;- c.counter.Desc()&amp;#10;}&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;package&lt;/span&gt; prom

&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; (
ga &lt;span class=&quot;pl-s&quot;&gt;&quot;go.linecorp.com/garr/adder&quot;&lt;/span&gt;

&lt;span class=&quot;pl-s&quot;&gt;&quot;github.com/prometheus/client_golang/prometheus&quot;&lt;/span&gt;
dto &lt;span class=&quot;pl-s&quot;&gt;&quot;github.com/prometheus/client_model/go&quot;&lt;/span&gt;
)

&lt;span class=&quot;pl-c&quot;&gt;// NewCounterI64 creates a new CounterI64 based on the provided prometheus.CounterOpts.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;NewCounterI64&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;opts&lt;/span&gt; prometheus.&lt;span class=&quot;pl-smi&quot;&gt;CounterOpts&lt;/span&gt;) &lt;span class=&quot;pl-smi&quot;&gt;CounterI64&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;CounterI64&lt;/span&gt;{&lt;span class=&quot;pl-c1&quot;&gt;counter&lt;/span&gt;: &lt;span class=&quot;pl-s1&quot;&gt;prometheus&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;NewCounter&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;opts&lt;/span&gt;)}
}

&lt;span class=&quot;pl-c&quot;&gt;// CounterI64 is optimized Prometheus Counter for int64 value type.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;CounterI64&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; {
&lt;span class=&quot;pl-c1&quot;&gt;val&lt;/span&gt;     ga.&lt;span class=&quot;pl-smi&quot;&gt;JDKAdder&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;counter&lt;/span&gt; prometheus.&lt;span class=&quot;pl-smi&quot;&gt;Counter&lt;/span&gt;
}

&lt;span class=&quot;pl-c&quot;&gt;// Value returns current value.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;CounterI64&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Value&lt;/span&gt;() &lt;span class=&quot;pl-smi&quot;&gt;int64&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;val&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Sum&lt;/span&gt;()
}

&lt;span class=&quot;pl-c&quot;&gt;// Reset value.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;CounterI64&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Reset&lt;/span&gt;() {
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;val&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Reset&lt;/span&gt;()
}

&lt;span class=&quot;pl-c&quot;&gt;// Desc returns metric desc.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;CounterI64&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Desc&lt;/span&gt;() &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;prometheus.&lt;span class=&quot;pl-smi&quot;&gt;Desc&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;counter&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Desc&lt;/span&gt;()
}

&lt;span class=&quot;pl-c&quot;&gt;// Inc by 1.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;CounterI64&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Inc&lt;/span&gt;() {
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;val&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;)
}

&lt;span class=&quot;pl-c&quot;&gt;// Add by variant.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;CounterI64&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int64&lt;/span&gt;) {
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;val&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;val&lt;/span&gt;)
}
}

&lt;span class=&quot;pl-c&quot;&gt;// Write implements prometheus.Metric interface.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;CounterI64&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Write&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;dto.&lt;span class=&quot;pl-smi&quot;&gt;Metric&lt;/span&gt;) (&lt;span class=&quot;pl-s1&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;) {
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;counter&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Write&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;out&lt;/span&gt;); &lt;span class=&quot;pl-s1&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt; {
&lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;float64&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;val&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Sum&lt;/span&gt;())
&lt;span class=&quot;pl-s1&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Counter&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;value&lt;/span&gt;
}
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}

&lt;span class=&quot;pl-c&quot;&gt;// Collect implements prometheus.Collector interface.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;CounterI64&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Collect&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;&amp;lt;-&lt;/span&gt; prometheus.&lt;span class=&quot;pl-smi&quot;&gt;Metric&lt;/span&gt;) {
&lt;span class=&quot;pl-s1&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;
}

&lt;span class=&quot;pl-c&quot;&gt;// Describe implements prometheus.Collector interface.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;CounterI64&lt;/span&gt;) &lt;span class=&quot;pl-en&quot;&gt;Describe&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;prometheus.&lt;span class=&quot;pl-smi&quot;&gt;Desc&lt;/span&gt;) {
&lt;span class=&quot;pl-s1&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;counter&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Desc&lt;/span&gt;()
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-queue&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#queue&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Queue&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-go notranslate position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;package main&amp;#10;&amp;#10;import (&amp;#10;    &amp;quot;fmt&amp;quot;&amp;#10;&amp;#10;    &amp;quot;go.linecorp.com/garr/queue&amp;quot;&amp;#10;)&amp;#10;&amp;#10;func main() {&amp;#10;    q := queue.DefaultQueue() // default using jdk linked queue&amp;#10;&amp;#10;    // push&amp;#10;    q.Offer(123)&amp;#10;&amp;#10;    // return head queue but not remove&amp;#10;    head := q.Peak()&amp;#10;    fmt.Println(head)&amp;#10;&amp;#10;    // remove and return head queue&amp;#10;    polled := q.Poll()&amp;#10;    fmt.Println(polled)&amp;#10;}&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; (
    &lt;span class=&quot;pl-s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

    &lt;span class=&quot;pl-s&quot;&gt;&quot;go.linecorp.com/garr/queue&quot;&lt;/span&gt;
)

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;main&lt;/span&gt;() {
    &lt;span class=&quot;pl-s1&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;queue&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;DefaultQueue&lt;/span&gt;() &lt;span class=&quot;pl-c&quot;&gt;// default using jdk linked queue&lt;/span&gt;

    &lt;span class=&quot;pl-c&quot;&gt;// push&lt;/span&gt;
    &lt;span class=&quot;pl-s1&quot;&gt;q&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Offer&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;123&lt;/span&gt;)

    &lt;span class=&quot;pl-c&quot;&gt;// return head queue but not remove&lt;/span&gt;
    &lt;span class=&quot;pl-s1&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;q&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Peak&lt;/span&gt;()
    &lt;span class=&quot;pl-s1&quot;&gt;fmt&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;head&lt;/span&gt;)

    &lt;span class=&quot;pl-c&quot;&gt;// remove and return head queue&lt;/span&gt;
    &lt;span class=&quot;pl-s1&quot;&gt;polled&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;q&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Poll&lt;/span&gt;()
    &lt;span class=&quot;pl-s1&quot;&gt;fmt&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;polled&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-circuit-breaker&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#circuit-breaker&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Circuit Breaker&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-go notranslate position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;package main&amp;#10;&amp;#10;import (&amp;#10;    cbreaker &amp;quot;go.linecorp.com/garr/circuit-breaker&amp;quot;&amp;#10;)&amp;#10;&amp;#10;func makeRequest() error {&amp;#10;return nil&amp;#10;}&amp;#10;&amp;#10;func main() {&amp;#10;    cb := cbreaker.NewCircuitBreakerBuilder().&amp;#10;                        SetTicker(cbreaker.SystemTicker).&amp;#10;                        SetFailureRateThreshold(validFailureRateThreshold).&amp;#10;                        Build()&amp;#10;&amp;#10;    if cb.CanRequest() {&amp;#10;        err := makeRequest()&amp;#10;        if err != nil {&amp;#10;            cb.OnFailure()&amp;#10;        } else {&amp;#10;            cb.OnSuccess()&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; (
    cbreaker &lt;span class=&quot;pl-s&quot;&gt;&quot;go.linecorp.com/garr/circuit-breaker&quot;&lt;/span&gt;
)

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;makeRequest&lt;/span&gt;() &lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt; {
&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;main&lt;/span&gt;() {
    &lt;span class=&quot;pl-s1&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;cbreaker&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;NewCircuitBreakerBuilder&lt;/span&gt;().
                        &lt;span class=&quot;pl-en&quot;&gt;SetTicker&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;cbreaker&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;SystemTicker&lt;/span&gt;).
                        &lt;span class=&quot;pl-en&quot;&gt;SetFailureRateThreshold&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;validFailureRateThreshold&lt;/span&gt;).
                        &lt;span class=&quot;pl-en&quot;&gt;Build&lt;/span&gt;()

    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;cb&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;CanRequest&lt;/span&gt;() {
        &lt;span class=&quot;pl-s1&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;makeRequest&lt;/span&gt;()
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt; {
            &lt;span class=&quot;pl-s1&quot;&gt;cb&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;OnFailure&lt;/span&gt;()
        } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;pl-s1&quot;&gt;cb&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;OnSuccess&lt;/span&gt;()
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4d9f3d8a50d3da0b72b348fc85804780</guid>
<title>技术沟通的4个技巧</title>
<link>https://toutiao.io/k/wpojnbl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;&lt;strong&gt;当别人主动找你沟通&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当别人找你说一件事情，需要你帮忙的时候。要确保问清楚以下信息：&lt;/p&gt;&lt;p&gt;1、事件背景是什么？&lt;/p&gt;&lt;p&gt;2、遇到的问题是什么？&lt;/p&gt;&lt;p&gt;3、都涉及哪些团队或哪些人？&lt;/p&gt;&lt;p&gt;4、有什么风险？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;当方案没有取得共识&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当两个人方案不一致时，自己提出了方案A，领导提出方案B。A和B都有一定的问题，是一道取舍题。这时候与其讨论取谁舍谁，不如这么回答：&lt;/p&gt;&lt;p&gt;我再回去想想有没有更好的方案。&lt;/p&gt;&lt;p&gt;如果自己是领导，《神盾局特工》里科尔森的思路可以做一个很好的参考：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8ic20xHygMAiaj4XFdnA0LFzmNA0FYpedicwjveXibic33Hdlfr8PIP5m951orCMBsL3139BK355BPS6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;当分派任务时&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当给下属分派任务时，分派的需要是一个待解决的问题，不要直接给出解决方案。即使自己心里有很成熟的解决方案，也不要立即说出来。下属如果针对问题给出了和自己一致的方案，这很好。也有可能下属会给出更好的方案，一开始自身给出的方案会限制这种可能性，同时降低下属的主观能动性和精神投入。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;当下属主动沟通时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当下属主动沟通发现了一个系统问题或者优化点时，他可能是带着方案来沟通的。不要因为方案有一些问题，否认了系统可以优化本身。因为这个举动同时降低了自己的格局：只解决眼前不得不解决的问题，逃避未来可能发生的问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;编程一生&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;因为公众号平台更改了推送规则，如果不想错过内容，记得读完点一下“在看”，加个“星标”，这样每次新文章推送才会第一时间出现在你的订阅列表里。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;想知道自己错过了哪些更新，可参考我不定期更新的《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247487380&amp;amp;idx=2&amp;amp;sn=4e71d679e2c22f9c5af4ea3abc667b76&amp;amp;chksm=fafde53acd8a6c2c9d2fb5eb83de5e5a2e3f244a57fa275394d9d61a0cdfa154290fe7a21fe8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;系列文章分类汇总&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;em&gt;&lt;strong&gt;系列文章分类汇总&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;》。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6f96b97e33d01158fe41279c9ba490ef</guid>
<title>瞧瞧人家用SpringBoot写的后端API接口，那叫一个优雅！</title>
<link>https://toutiao.io/k/279qnem</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;日常工作中，我们开发接口时，一般都会涉及到&lt;strong&gt;参数校验、异常处理、封装结果返回&lt;/strong&gt;等处理。如果每个后端开发在参数校验、异常处理等都是各写各的，没有统一处理的话，代码就不优雅，也不容易维护。所以，作为一名合格的后端开发工程师，我们需要&lt;strong&gt;统一校验参数，统一异常处理、统一结果返回&lt;/strong&gt;，让代码更加规范、可读性更强、更容易维护。&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;使用注解，优雅进行参数校验&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;统一结果返回&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;统一异常处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;唠叨几句&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 使用注解，统一参数校验&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设&lt;strong&gt;小田螺&lt;/strong&gt;实现一个注册用户的功能，在controller 层，他会先进行校验参数，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserController&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;addUser&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;addUser&lt;/span&gt;&lt;span&gt;(UserParam userParam)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (StringUtils.isEmpty(userParam.getUserName())) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;用户名不能为空&quot;&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (StringUtils.isEmpty(userParam.getPhone())) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;手机号不能为空&quot;&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (userParam.getPhone().length() &amp;gt; &lt;span&gt;11&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;手机号不能超过11&quot;&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (StringUtils.isEmpty(userParam.getEmail())) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;邮箱不能为空&quot;&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//省略其他参数校验&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//todo 插入用户信息表&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;SUCCESS&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上代码有什么问题嘛？&lt;strong&gt;其实没什么问题，就是校验有点辣眼睛&lt;/strong&gt;。正常的添加用户业务还没写，参数校验就一大堆啦。假设后来，小田螺又接了一个需求：编辑用户信息。实现编辑用户信息前，也是先校验信息，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;editUser&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;editUser&lt;/span&gt;&lt;span&gt;(UserParam userParam)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (StringUtils.isEmpty(userParam.getUserName())) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;用户名不能为空&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (StringUtils.isEmpty(userParam.getPhone())) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;手机号不能为空&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (userParam.getPhone().length() &amp;gt; &lt;span&gt;11&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;手机号不能超过11&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (StringUtils.isEmpty(userParam.getEmail())) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;邮箱不能为空&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;//省略其他参数校验&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;//todo 编辑用户信息表&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;SUCCESS&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以使用注解的方式，来进行参数校验，这样代码更加简洁，也方便统一管理。实际上， &lt;code&gt;spring boot&lt;/code&gt;有个&lt;code&gt;validation&lt;/code&gt;的组件，我们可以拿来即用。引入这个包即可：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-validation&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;引入包后，参数校验就非常简洁啦，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserParam&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@NotNull&lt;/span&gt;(message = &lt;span&gt;&quot;用户名不能为空&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String userName;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@NotNull&lt;/span&gt;(message = &lt;span&gt;&quot;手机号不能为空&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;@Max&lt;/span&gt;(value = &lt;span&gt;11&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String phone;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@NotNull&lt;/span&gt;(message = &lt;span&gt;&quot;邮箱不能为空&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String email;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在&lt;code&gt;UserParam&lt;/code&gt;参数对象中，加入&lt;code&gt;@Validated&lt;/code&gt;注解哈，把错误信息接收到&lt;code&gt;BindingResult&lt;/code&gt;对象，代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;    &lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;addUser&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;addUser&lt;/span&gt;&lt;span&gt;(@Validated UserParam userParam, BindingResult result)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;br/&gt;        List&amp;lt;FieldError&amp;gt; fieldErrors = result.getFieldErrors();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!fieldErrors.isEmpty()) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; fieldErrors.get(&lt;span&gt;0&lt;/span&gt;).getDefaultMessage();&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//todo 插入用户信息表&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;SUCCESS&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 接口统一响应对象返回&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你在你们项目代码中，看到controller 层报文返回结果，有这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/hello&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getStr&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;hello,捡田螺的小男孩&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//返回&lt;/span&gt;&lt;br/&gt;hello,捡田螺的小男孩&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也有这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;queryUser&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; UserVo &lt;span&gt;queryUser&lt;/span&gt;&lt;span&gt;(String userId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserVo(&lt;span&gt;&quot;666&quot;&lt;/span&gt;, &lt;span&gt;&quot;捡田螺的小男孩&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;//返回:&lt;/span&gt;&lt;br/&gt;{&lt;span&gt;&quot;userId&quot;&lt;/span&gt;:&lt;span&gt;&quot;666&quot;&lt;/span&gt;,&lt;span&gt;&quot;name&quot;&lt;/span&gt;:&lt;span&gt;&quot;捡田螺的小男孩&quot;&lt;/span&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;显然，如果接口返回结果不统一，前端处理就不方便，我们代码也不好维护。再比如&lt;strong&gt;小田螺&lt;/strong&gt;喜欢用&lt;code&gt;Result&lt;/code&gt;处理结果，&lt;strong&gt;大田螺&lt;/strong&gt;喜欢用&lt;code&gt;Response&lt;/code&gt;处理结果，可以想象一下，这些代码有多乱。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以作为后端开发，我们项目的响应结果，需要&lt;strong&gt;统一标准的返回格式&lt;/strong&gt;。一般一个标准的响应报文对象，都有哪些属性呢？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;code ：响应状态码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;message ：响应结果描述&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;data：返回的数据&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;响应状态码一般用枚举表示哈：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; CodeEnum {&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**操作成功**/&lt;/span&gt;&lt;br/&gt;    SUCCESS(&lt;span&gt;&quot;0000&quot;&lt;/span&gt;,&lt;span&gt;&quot;操作成功&quot;&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;/**操作失败**/&lt;/span&gt;&lt;br/&gt;    ERROR(&lt;span&gt;&quot;9999&quot;&lt;/span&gt;,&lt;span&gt;&quot;操作失败&quot;&lt;/span&gt;),;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 自定义状态码&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String code;&lt;br/&gt;    &lt;span&gt;/**自定义描述**/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String message;&lt;br/&gt;&lt;br/&gt;    CodeEnum(String code, String message){&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.code = code;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.message = message;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; message;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为返回的数据类型不是确定的，我们可以使用泛型，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@author&lt;/span&gt; 捡田螺的小男孩&lt;br/&gt; * &lt;span&gt;@param&lt;/span&gt; &amp;lt;T&amp;gt;&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BaseResponse&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 响应状态码（0000表示成功，9999表示失败&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String code;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 响应结果描述&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String message;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 返回的数据&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; T data;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 成功返回&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; data&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; &amp;lt;T&amp;gt;&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;BaseResponse&amp;lt;T&amp;gt; &lt;span&gt;success&lt;/span&gt;&lt;span&gt;(T data)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        BaseResponse&amp;lt;T&amp;gt; response= &lt;span&gt;new&lt;/span&gt; BaseResponse&amp;lt;&amp;gt;();&lt;br/&gt;        response.setCode(CodeEnum.SUCCESS.getCode());&lt;br/&gt;        response.setMessage(CodeEnum.SUCCESS.getMessage());&lt;br/&gt;        response.setData(data);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; response;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     *  失败返回&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; code&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; message&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; &amp;lt;T&amp;gt;&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;BaseResponse&amp;lt;T&amp;gt; &lt;span&gt;fail&lt;/span&gt;&lt;span&gt;(String code, String message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        BaseResponse&amp;lt;T&amp;gt; response = &lt;span&gt;new&lt;/span&gt; BaseResponse&amp;lt;&amp;gt;();&lt;br/&gt;        response.setCode(code);&lt;br/&gt;        response.setMessage(message);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; response;&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setCode&lt;/span&gt;&lt;span&gt;(String code)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.code = code;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setMessage&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.message = message;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setData&lt;/span&gt;&lt;span&gt;(T data)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.data = data;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了统一的响应体，我们就可以优化一下controller 层的代码啦：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/hello&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; BaseResponse&amp;lt;String&amp;gt; &lt;span&gt;getStr&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; BaseResponse.success(&lt;span&gt;&quot;hello,捡田螺的小男孩&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;//output&lt;/span&gt;&lt;br/&gt;{&lt;span&gt;&quot;code&quot;&lt;/span&gt;:&lt;span&gt;&quot;0000&quot;&lt;/span&gt;,&lt;span&gt;&quot;message&quot;&lt;/span&gt;:&lt;span&gt;&quot;操作成功&quot;&lt;/span&gt;,&lt;span&gt;&quot;data&quot;&lt;/span&gt;:&lt;span&gt;&quot;hello,捡田螺的小男孩&quot;&lt;/span&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;queryUser&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; BaseResponse&amp;lt;UserVo&amp;gt; &lt;span&gt;queryUser&lt;/span&gt;&lt;span&gt;(String userId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; BaseResponse.success(&lt;span&gt;new&lt;/span&gt; UserVo(&lt;span&gt;&quot;666&quot;&lt;/span&gt;, &lt;span&gt;&quot;捡田螺的小男孩&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;//output&lt;/span&gt;&lt;br/&gt;{&lt;span&gt;&quot;code&quot;&lt;/span&gt;:&lt;span&gt;&quot;0000&quot;&lt;/span&gt;,&lt;span&gt;&quot;message&quot;&lt;/span&gt;:&lt;span&gt;&quot;操作成功&quot;&lt;/span&gt;,&lt;span&gt;&quot;data&quot;&lt;/span&gt;:{&lt;span&gt;&quot;userId&quot;&lt;/span&gt;:&lt;span&gt;&quot;666&quot;&lt;/span&gt;,&lt;span&gt;&quot;name&quot;&lt;/span&gt;:&lt;span&gt;&quot;捡田螺的小男孩&quot;&lt;/span&gt;}}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 统一异常处理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日常开发中，我们一般都是自定义统一的异常类，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BizException&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;RuntimeException&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String retCode;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String retMessage;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;BizException&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;BizException&lt;/span&gt;&lt;span&gt;(String retCode, String retMessage)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.retCode = retCode;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.retMessage = retMessage;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getRetCode&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; retCode;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getRetMessage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; retMessage;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在controller 层，很可能会有类似代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/query&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; BaseResponse&amp;lt;UserVo&amp;gt; &lt;span&gt;queryUserInfo&lt;/span&gt;&lt;span&gt;(UserParam userParam)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; BaseResponse.success(userService.queryUserInfo(userParam));&lt;br/&gt;    } &lt;span&gt;catch&lt;/span&gt; (BizException e) {&lt;br/&gt;        &lt;span&gt;//doSomething&lt;/span&gt;&lt;br/&gt;    } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;        &lt;span&gt;//doSomething&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; BaseResponse.fail(CodeEnum.ERROR.getCode(),CodeEnum.ERROR.getMessage());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这块代码，没什么问题哈，但是如果&lt;code&gt;try...catch&lt;/code&gt;太多，不是很优雅。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以借助注解&lt;code&gt;@RestControllerAdvice&lt;/code&gt;，让代码更优雅。&lt;code&gt;@RestControllerAdvice&lt;/code&gt;是一个应用于&lt;code&gt;Controller&lt;/code&gt;层的切面注解，它一般配合&lt;code&gt;@ExceptionHandler&lt;/code&gt;注解一起使用，作为项目的全局异常处理。我们来看下demo代码哈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是原来的&lt;code&gt;UserController&lt;/code&gt;，和一个会抛出异常的userService的方法，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserController&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; UserService userService;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/query&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; BaseResponse&amp;lt;UserVo&amp;gt; &lt;span&gt;queryUserInfo1&lt;/span&gt;&lt;span&gt;(UserParam userParam)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; BaseResponse.success(userService.queryUserInfo(userParam));&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserServiceImpl&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;UserService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;//抛出异常&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; UserVo &lt;span&gt;queryUserInfo&lt;/span&gt;&lt;span&gt;(UserParam userParam)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BizException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BizException(&lt;span&gt;&quot;6666&quot;&lt;/span&gt;, &lt;span&gt;&quot;测试异常类&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们再定义一个全局异常处理器，用&lt;code&gt;@RestControllerAdvice&lt;/code&gt;注解，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RestControllerAdvice&lt;/span&gt;(annotations = RestController&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ControllerExceptionHandler&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们有想要拦截的异常类型，比如想拦截&lt;code&gt;BizException&lt;/code&gt;类型，就新增一个方法，使用&lt;code&gt;@ExceptionHandler&lt;/code&gt;注解修饰，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RestControllerAdvice&lt;/span&gt;(annotations = RestController&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ControllerExceptionHandler&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@ExceptionHandler&lt;/span&gt;(BizException&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;    @&lt;span&gt;ResponseBody&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;BaseResponse&lt;/span&gt;&amp;lt;&lt;span&gt;Void&lt;/span&gt;&amp;gt; &lt;span&gt;handler&lt;/span&gt;(&lt;span&gt;BizException&lt;/span&gt; &lt;span&gt;e&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;进入业务异常&quot;&lt;/span&gt;+e.getRetCode()+e.getRetMessage());&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; BaseResponse.fail(CodeEnum.ERROR.getCode(), CodeEnum.ERROR.getMessage());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;唠叨几句&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文大家学到了哪些知识呢？&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;为了写出更优雅、更简洁、更容易维护的代码，我们需要统一参数校验、统一响应对象返回、统一异常处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;参数校验更简洁，可以使用注解实现。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何统一响应对象返回，一般要包括状态码、描述信息、返回数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Controller&lt;/code&gt;层如何统一全局异常处理？&lt;code&gt;@RestControllerAdvice&lt;/code&gt;+&lt;code&gt;@ExceptionHandler&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;进阶篇？大家可以自己实现自定义注解哈，也建议去看看&lt;code&gt;@RestControllerAdvice&lt;/code&gt;实现原理，它其实就是一个切面注解，看下它的源码即可。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>