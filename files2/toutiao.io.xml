<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>dd90df23f462174300ae154c29e396f0</guid>
<title>资料 | Linkedin 工程团队出品的 SRE 入门教程</title>
<link>https://toutiao.io/k/zak7avs</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f9c03ef0ee7b37d084a3daa5a1b94123</guid>
<title>Hadoop 框架：MapReduce 基本原理和入门案例</title>
<link>https://toutiao.io/k/x2r860r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h1&gt;&lt;span&gt;一、MapReduce概述&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、基本概念&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Hadoop核心组件之一：分布式计算的方案MapReduce，是一种编程模型，用于大规模数据集的并行运算，其中Map（映射）和Reduce（归约）。&lt;/p&gt;&lt;p&gt;MapReduce既是一个编程模型，也是一个计算组件，处理的过程分为两个阶段，Map阶段：负责把任务分解为多个小任务，Reduce负责把多个小任务的处理结果进行汇总。其中Map阶段主要输入是一对Key-Value，经过map计算后输出一对Key-Value值；然后将相同Key合并，形成Key-Value集合；再将这个Key-Value集合转入Reduce阶段，经过计算输出最终Key-Value结果集。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、特点描述&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;MapReduce可以实现基于上千台服务器并发工作，提供很强大的数据处理能力，如果其中单台服务挂掉，计算任务会自动转义到另外节点执行，保证高容错性；但是MapReduce不适应于实时计算与流式计算，计算的数据是静态的。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、操作案例&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、流程描述&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3671875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBMfiaK0lXA3qezX67I3l9AOe7A0Y3P1DF6fGKxjY5gKwLHlmtkfgpjzrmIkwe6hdHxJLCvAU8ibPbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;数据文件一般以CSV格式居多，数据行通常以空格分隔，这里需要考虑数据内容特点；&lt;/p&gt;&lt;p&gt;文件经过切片分配在不同的MapTask任务中并发执行；&lt;/p&gt;&lt;p&gt;MapTask任务执行完毕之后，执行ReduceTask任务，依赖Map阶段的数据；&lt;/p&gt;&lt;p&gt;ReduceTask任务执行完毕后，输出文件结果。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、基础配置&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;hadoop:&lt;br/&gt;  &lt;span&gt;# 读取的文件源&lt;/span&gt;&lt;br/&gt;  inputPath: hdfs:&lt;span&gt;//hop01:9000/hopdir/javaNew.txt&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# 该路径必须是程序运行前不存在的&lt;/span&gt;&lt;br/&gt;  outputPath: /wordOut&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;3、Mapper程序&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WordMapper&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Mapper&lt;/span&gt;&amp;lt;&lt;span&gt;LongWritable&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;IntWritable&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    Text mapKey = &lt;span&gt;new&lt;/span&gt; Text();&lt;br/&gt;    IntWritable mapValue = &lt;span&gt;new&lt;/span&gt; IntWritable(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;map&lt;/span&gt; &lt;span&gt;(LongWritable key, Text value, Context context)&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 1、读取行&lt;/span&gt;&lt;br/&gt;        String line = value.toString();&lt;br/&gt;        &lt;span&gt;// 2、行内容切割，根据文件中分隔符&lt;/span&gt;&lt;br/&gt;        String[] words = line.split(&lt;span&gt;&quot; &quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;// 3、存储&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (String word : words) {&lt;br/&gt;            mapKey.set(word);&lt;br/&gt;            context.write(mapKey, mapValue);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;4、Reducer程序&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WordReducer&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Reducer&lt;/span&gt;&amp;lt;&lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;IntWritable&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;IntWritable&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; sum ;&lt;br/&gt;    IntWritable value = &lt;span&gt;new&lt;/span&gt; IntWritable();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;reduce&lt;/span&gt;&lt;span&gt;(Text key, Iterable&amp;lt;IntWritable&amp;gt; values,Context context)&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 1、累加求和统计&lt;/span&gt;&lt;br/&gt;        sum = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (IntWritable count : values) {&lt;br/&gt;            sum += count.get();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// 2、输出结果&lt;/span&gt;&lt;br/&gt;        value.set(sum);&lt;br/&gt;        context.write(key,value);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;5、执行程序&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WordWeb&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Resource&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; MapReduceConfig mapReduceConfig ;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/getWord&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getWord&lt;/span&gt; &lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException, ClassNotFoundException, InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 声明配置&lt;/span&gt;&lt;br/&gt;        Configuration hadoopConfig = &lt;span&gt;new&lt;/span&gt; Configuration();&lt;br/&gt;        hadoopConfig.set(&lt;span&gt;&quot;fs.hdfs.impl&quot;&lt;/span&gt;,&lt;br/&gt;                org.apache.hadoop.hdfs.DistributedFileSystem.class.getName()&lt;br/&gt;        );&lt;br/&gt;        hadoopConfig.set(&lt;span&gt;&quot;fs.file.impl&quot;&lt;/span&gt;,&lt;br/&gt;                org.apache.hadoop.fs.LocalFileSystem.class.getName()&lt;br/&gt;        );&lt;br/&gt;        Job job = Job.getInstance(hadoopConfig);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// Job执行作业 输入路径&lt;/span&gt;&lt;br/&gt;        FileInputFormat.addInputPath(job, &lt;span&gt;new&lt;/span&gt; Path(mapReduceConfig.getInputPath()));&lt;br/&gt;        &lt;span&gt;// Job执行作业 输出路径&lt;/span&gt;&lt;br/&gt;        FileOutputFormat.setOutputPath(job, &lt;span&gt;new&lt;/span&gt; Path(mapReduceConfig.getOutputPath()));&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 自定义 Mapper和Reducer 两个阶段的任务处理类&lt;/span&gt;&lt;br/&gt;        job.setMapperClass(WordMapper.class);&lt;br/&gt;        job.setReducerClass(WordReducer.class);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 设置输出结果的Key和Value的类型&lt;/span&gt;&lt;br/&gt;        job.setOutputKeyClass(Text.class);&lt;br/&gt;        job.setOutputValueClass(IntWritable.class);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//执行Job直到完成&lt;/span&gt;&lt;br/&gt;        job.waitForCompletion(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;success&quot;&lt;/span&gt; ;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;6、执行结果查看&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;将应用程序打包放到hop01服务上执行；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;java -jar &lt;span&gt;map&lt;/span&gt;-reduce-case01.jar&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5587628865979382&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBMfiaK0lXA3qezX67I3l9AOWC6Uiah1aNeBBVtabria5TxO2ZQPcu15HwibianEM8SoEsRSuqyfPnIbzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;970&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、案例分析&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、数据类型&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Java数据类型与对应的Hadoop数据序列化类型；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4794520547945205&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBMfiaK0lXA3qezX67I3l9AO999VxYKd4ViaSMbIeyOOJHVrL93icHUEMbDRrHLiaxY8z9t891aqXcccw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;876&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、核心模块&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Mapper模块&lt;/strong&gt;：处理输入的数据，业务逻辑在map()方法中完成，输出的数据也是KV格式；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Reducer模块&lt;/strong&gt;：处理Map程序输出的KV数据，业务逻辑在reduce()方法中；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Driver模块&lt;/strong&gt;：将程序提交到yarn进行调度，提交封装了运行参数的job对象；&lt;/p&gt;&lt;h1&gt;&lt;span&gt;四、序列化操作&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、序列化简介&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;序列化：将内存中对象转换为二进制的字节序列，可以通过输出流持久化存储或者网络传输；&lt;/p&gt;&lt;p&gt;反序列化：接收输入字节流或者读取磁盘持久化的数据，加载到内存的对象过程；&lt;/p&gt;&lt;p&gt;Hadoop序列化相关接口：Writable实现的序列化机制、Comparable管理Key的排序问题；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、案例实现&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;案例描述：读取文件，并对文件相同的行做数据累加计算，输出计算结果；该案例演示在本地执行，不把Jar包上传的hadoop服务器，驱动配置一致。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;实体对象属性&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AddEntity&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Writable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; addNum01;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; addNum02;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; resNum;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 构造方法&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;AddEntity&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;AddEntity&lt;/span&gt;&lt;span&gt;(&lt;span&gt;long&lt;/span&gt; addNum01, &lt;span&gt;long&lt;/span&gt; addNum02)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;();&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.addNum01 = addNum01;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.addNum02 = addNum02;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.resNum = addNum01 + addNum02;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 序列化&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;write&lt;/span&gt;&lt;span&gt;(DataOutput dataOutput)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;        dataOutput.writeLong(addNum01);&lt;br/&gt;        dataOutput.writeLong(addNum02);&lt;br/&gt;        dataOutput.writeLong(resNum);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 反序列化&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;readFields&lt;/span&gt;&lt;span&gt;(DataInput dataInput)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 注意：反序列化顺序和写序列化顺序一致&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.addNum01  = dataInput.readLong();&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.addNum02 = dataInput.readLong();&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.resNum = dataInput.readLong();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 省略Get和Set方法&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Mapper机制&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AddMapper&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Mapper&lt;/span&gt;&amp;lt;&lt;span&gt;LongWritable&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;AddEntity&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    Text myKey = &lt;span&gt;new&lt;/span&gt; Text();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;map&lt;/span&gt;&lt;span&gt;(LongWritable key, Text value, Context context)&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 读取行&lt;/span&gt;&lt;br/&gt;        String line = value.toString();&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 行内容切割&lt;/span&gt;&lt;br/&gt;        String[] lineArr = line.split(&lt;span&gt;&quot;,&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 内容格式处理&lt;/span&gt;&lt;br/&gt;        String lineNum = lineArr[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; addNum01 = Long.parseLong(lineArr[&lt;span&gt;1&lt;/span&gt;]);&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; addNum02 = Long.parseLong(lineArr[&lt;span&gt;2&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;        myKey.set(lineNum);&lt;br/&gt;        AddEntity myValue = &lt;span&gt;new&lt;/span&gt; AddEntity(addNum01,addNum02);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 输出&lt;/span&gt;&lt;br/&gt;        context.write(myKey, myValue);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Reducer机制&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AddReducer&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Reducer&lt;/span&gt;&amp;lt;&lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;AddEntity&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;AddEntity&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;reduce&lt;/span&gt;&lt;span&gt;(Text key, Iterable&amp;lt;AddEntity&amp;gt; values, Context context)&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; addNum01Sum = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; addNum02Sum = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 处理Key相同&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (AddEntity addEntity : values) {&lt;br/&gt;            addNum01Sum += addEntity.getAddNum01();&lt;br/&gt;            addNum02Sum += addEntity.getAddNum02();&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 最终输出&lt;/span&gt;&lt;br/&gt;        AddEntity addRes = &lt;span&gt;new&lt;/span&gt; AddEntity(addNum01Sum, addNum02Sum);&lt;br/&gt;        context.write(key, addRes);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;案例最终结果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.366&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBMfiaK0lXA3qezX67I3l9AO9KYVrIJvskZOIrwm0rUfAQicj5AjS7X4jJpLIYKP6hbVgiaX726lK4xw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;五、源代码地址&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;GitHub·地址&lt;br/&gt;https:&lt;span&gt;//github.com/cicadasmile/big-data-parent&lt;/span&gt;&lt;br/&gt;GitEE·地址&lt;br/&gt;https:&lt;span&gt;//gitee.com/cicadasmile/big-data-parent&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3783359497645212&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCjMheLZtcM2iaVMBOpIUKR4CDRCG9FLT5K6NmGXvG7exrW0TSuDjnTKJQ5PDq8j8Y7PHDd17Z3gicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9944d0bfa57fb553ea6a64918ebd8c04</guid>
<title>Go 并发编程（一）：goroutine</title>
<link>https://toutiao.io/k/5l5bvv8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;markdown-body&quot; id=&quot;post-body&quot;&gt;&lt;blockquote&gt;&lt;p&gt;本系列为极客时间 Go 进阶训练营笔记，同步直播更新，预计一周更新 1 ~ 2 篇文章，到 202103 月更新完成&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;接下来会一共会有 4 - 6 篇文章讲解 Go 并发编程，并发编程本身是一个挺大的话题，在第四周的两节课，毛老师花了将近 7 个小时讲解这些内容，我也结合自己的一些微不足道的经验，再加上一些大神们的文章，整理出了这一部分的笔记。&lt;br/&gt;当然这里更多的是抛砖引玉的作用，更多的还是我们自己要有相关的意识避免踩坑，在各个坑的边缘反复横跳，可能我们有缘会在同一个坑中发现，咦，原来你也在这里 😄&lt;/p&gt;&lt;h2 id=&quot;请对你创建的-goroutine-负责&quot;&gt;&lt;a href=&quot;#请对你创建的-goroutine-负责&quot; class=&quot;headerlink&quot; title=&quot;请对你创建的 goroutine 负责&quot;/&gt;请对你创建的 goroutine 负责&lt;/h2&gt;&lt;h3 id=&quot;不要创建一个你不知道何时退出的-goroutine&quot;&gt;&lt;a href=&quot;#不要创建一个你不知道何时退出的-goroutine&quot; class=&quot;headerlink&quot; title=&quot;不要创建一个你不知道何时退出的 goroutine&quot;/&gt;不要创建一个你不知道何时退出的 goroutine&lt;/h3&gt;&lt;p&gt;请阅读下面这段代码，看看有什么问题？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;为什么先从下面这段代码出发，是因为在之前的经验里面我们写了大量类似的代码，之前没有意识到这个问题，并且还因为这种代码出现过短暂的事故&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Week03/blog/01/01.go&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (
&lt;span class=&quot;hljs-string&quot;&gt;&quot;log&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
_ &lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;
)

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 这里面有一些初始化的操作&lt;/span&gt;
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
setup()

&lt;span class=&quot;hljs-comment&quot;&gt;// 主服务&lt;/span&gt;
server()

&lt;span class=&quot;hljs-comment&quot;&gt;// for debug&lt;/span&gt;
pprof()

&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; {}
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
mux := http.NewServeMux()
mux.HandleFunc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {
w.Write([]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pong&quot;&lt;/span&gt;))
})

&lt;span class=&quot;hljs-comment&quot;&gt;// 主服务&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err := http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:8080&quot;&lt;/span&gt;, mux); err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
log.Panicf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http server err: %+v&quot;&lt;/span&gt;, err)
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
}
}()
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;pprof&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 辅助服务，监听了其他端口，这里是 pprof 服务，用于 debug&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:8081&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;灵魂拷问来了，请问：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果 &lt;code&gt;server&lt;/code&gt; 是在其他包里面，如果没有特殊说明，你知道这是一个异步调用么？&lt;/li&gt;&lt;li&gt;&lt;code&gt;main&lt;/code&gt; 函数当中最后在哪里空转干什么？会不会存在浪费？&lt;/li&gt;&lt;li&gt;如果线上出现事故，debug 服务已经退出，你想要 debug 这时你是否很茫然？&lt;/li&gt;&lt;li&gt;如果某一天服务突然重启，你却找不到事故日志，你是否能想起这个 &lt;code&gt;8081&lt;/code&gt; 端口的服务？&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;请将选择权留给对方，不要帮别人做选择&quot;&gt;&lt;a href=&quot;#请将选择权留给对方，不要帮别人做选择&quot; class=&quot;headerlink&quot; title=&quot;请将选择权留给对方，不要帮别人做选择&quot;/&gt;请将选择权留给对方，不要帮别人做选择&lt;/h4&gt;&lt;p&gt;请把是否并发的选择权交给你的调用者，而不是自己就直接悄悄的用上了 goroutine&lt;br/&gt;下面这次改动将两个函数是否并发操作的选择权留给了 main 函数&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (
&lt;span class=&quot;hljs-string&quot;&gt;&quot;log&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
_ &lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;
)

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 这里面有一些初始化的操作&lt;/span&gt;
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
setup()

&lt;span class=&quot;hljs-comment&quot;&gt;// for debug&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; pprof()

&lt;span class=&quot;hljs-comment&quot;&gt;// 主服务&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; server()

&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; {}
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
mux := http.NewServeMux()
mux.HandleFunc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {
w.Write([]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pong&quot;&lt;/span&gt;))
})

&lt;span class=&quot;hljs-comment&quot;&gt;// 主服务&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err := http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:8080&quot;&lt;/span&gt;, mux); err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
log.Panicf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http server err: %+v&quot;&lt;/span&gt;, err)
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
}
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;pprof&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 辅助服务，监听了其他端口，这里是 pprof 服务，用于 debug&lt;/span&gt;
http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:8081&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;请不要作为一个旁观者&quot;&gt;&lt;a href=&quot;#请不要作为一个旁观者&quot; class=&quot;headerlink&quot; title=&quot;请不要作为一个旁观者&quot;/&gt;请不要作为一个旁观者&lt;/h4&gt;&lt;p&gt;一般情况下，不要让主进程成为一个旁观者，明明可以干活，但是最后使用了一个 &lt;code&gt;select&lt;/code&gt; 在那儿空跑&lt;br/&gt;感谢上一步将是否异步的选择权交给了我( &lt;code&gt;main&lt;/code&gt; )，在旁边看着也怪尴尬的&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (
&lt;span class=&quot;hljs-string&quot;&gt;&quot;log&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
_ &lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;
)

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 这里面有一些初始化的操作&lt;/span&gt;
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
setup()

&lt;span class=&quot;hljs-comment&quot;&gt;// for debug&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; pprof()

&lt;span class=&quot;hljs-comment&quot;&gt;// 主服务&lt;/span&gt;
server()
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
mux := http.NewServeMux()
mux.HandleFunc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {
w.Write([]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pong&quot;&lt;/span&gt;))
})

&lt;span class=&quot;hljs-comment&quot;&gt;// 主服务&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err := http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:8080&quot;&lt;/span&gt;, mux); err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
log.Panicf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http server err: %+v&quot;&lt;/span&gt;, err)
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
}
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;pprof&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 辅助服务，监听了其他端口，这里是 pprof 服务，用于 debug&lt;/span&gt;
http.ListenAndServe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:8081&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;不要创建一个你永远不知道什么时候会退出的-goroutine&quot;&gt;&lt;a href=&quot;#不要创建一个你永远不知道什么时候会退出的-goroutine&quot; class=&quot;headerlink&quot; title=&quot;不要创建一个你永远不知道什么时候会退出的 goroutine&quot;/&gt;不要创建一个你永远不知道什么时候会退出的 goroutine&lt;/h4&gt;&lt;p&gt;我们再做一些改造，使用 &lt;code&gt;channel&lt;/code&gt; 来控制，解释都写在代码注释里面了&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (
&lt;span class=&quot;hljs-string&quot;&gt;&quot;context&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;&quot;log&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
_ &lt;span class=&quot;hljs-string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;&quot;time&quot;&lt;/span&gt;
)

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 这里面有一些初始化的操作&lt;/span&gt;
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
setup()

&lt;span class=&quot;hljs-comment&quot;&gt;// 用于监听服务退出&lt;/span&gt;
done := &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; error, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)
&lt;span class=&quot;hljs-comment&quot;&gt;// 用于控制服务退出，传入同一个 stop，做到只要有一个服务退出了那么另外一个服务也会随之退出&lt;/span&gt;
stop := &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{}, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;hljs-comment&quot;&gt;// for debug&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
done &amp;lt;- pprof(stop)
}()

&lt;span class=&quot;hljs-comment&quot;&gt;// 主服务&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
done &amp;lt;- app(stop)
}()

&lt;span class=&quot;hljs-comment&quot;&gt;// stoped 用于判断当前 stop 的状态&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; stoped &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// 这里循环读取 done 这个 channel&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// 只要有一个退出了，我们就关闭 stop channel&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;cap&lt;/span&gt;(done); i++ {
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err := &amp;lt;-done; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
log.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;server exit err: %+v&quot;&lt;/span&gt;, err)
}

&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; !stoped {
stoped = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;(stop)
}
}
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(stop &amp;lt;-&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
mux := http.NewServeMux()
mux.HandleFunc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {
w.Write([]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pong&quot;&lt;/span&gt;))
})

&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; server(mux, &lt;span class=&quot;hljs-string&quot;&gt;&quot;:8080&quot;&lt;/span&gt;, stop)
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;pprof&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(stop &amp;lt;-&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 注意这里主要是为了模拟服务意外退出，用于验证一个服务退出，其他服务同时退出的场景&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
server(http.DefaultServeMux, &lt;span class=&quot;hljs-string&quot;&gt;&quot;:8081&quot;&lt;/span&gt;, stop)
}()

time.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; * time.Second)
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fmt.Errorf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mock pprof exit&quot;&lt;/span&gt;)
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 启动一个服务&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(handler http.Handler, addr &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, stop &amp;lt;-&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
s := http.Server{
Handler: handler,
Addr:    addr,
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 这个 goroutine 我们可以控制退出，因为只要 stop 这个 channel close 或者是写入数据，这里就会退出&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// 同时因为调用了 s.Shutdown 调用之后，http 这个函数启动的 http server 也会优雅退出&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&amp;lt;-stop
log.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;server will exiting, addr: %s&quot;&lt;/span&gt;, addr)
s.Shutdown(context.Background())
}()

&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.ListenAndServe()
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们看一下返回结果，这个代码启动 5s 之后就会退出程序&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;❯ &lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; run ./&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;_goroutine/&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;
&lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; server exit err: mock pprof exit
&lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; server will exiting, addr: :&lt;span class=&quot;hljs-number&quot;&gt;8081&lt;/span&gt;
&lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; server will exiting, addr: :&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;
&lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; server exit err: http: Server closed&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;思考题&quot;&gt;&lt;a href=&quot;#思考题&quot; class=&quot;headerlink&quot; title=&quot;思考题&quot;/&gt;思考题&lt;/h4&gt;&lt;p&gt;虽然我们已经经过了三轮优化，但是这里还是有一些需要注意的地方，可以思考一下怎么做&lt;/p&gt;&lt;ul&gt;&lt;li&gt;虽然我们调用了 &lt;code&gt;Shutdown&lt;/code&gt; 方法，但是我们其实并没有实现优雅退出，相信聪明的你可以完成这项工作。可以参考上一篇笔记：&lt;a href=&quot;https://lailin.xyz/post/go-training-03.html&quot;&gt;Go 错误处理最佳实践&lt;/a&gt;&lt;/li&gt;&lt;li&gt;在 &lt;code&gt;server&lt;/code&gt; 方法中我们并没有处理 &lt;code&gt;panic&lt;/code&gt; 的逻辑，这里需要处理么？如果需要那该如何处理呢？&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;不要创建一个永远都无法退出的-goroutine-goroutine-泄漏&quot;&gt;&lt;a href=&quot;#不要创建一个永远都无法退出的-goroutine-goroutine-泄漏&quot; class=&quot;headerlink&quot; title=&quot;不要创建一个永远都无法退出的 goroutine [goroutine 泄漏]&quot;/&gt;不要创建一个永远都无法退出的 goroutine [goroutine 泄漏]&lt;/h3&gt;&lt;p&gt;再来看下面一个例子，这也是常常会用到的操作&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;leak&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {
ch := &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
fmt.Println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;异步任务做一些操作&quot;&lt;/span&gt;)
&amp;lt;-ch
}()

w.Write([]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;will leak&quot;&lt;/span&gt;))
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复用一下上面的 server 代码，我们经常会写出这种类似的代码&lt;/p&gt;&lt;ul&gt;&lt;li&gt;http 请求来了，我们启动一个 goroutine 去做一些耗时一点的工作&lt;/li&gt;&lt;li&gt;然后返回了&lt;/li&gt;&lt;li&gt;然后之前创建的那个 &lt;strong&gt;goroutine 阻塞&lt;/strong&gt;了&lt;/li&gt;&lt;li&gt;然后就泄漏了&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;绝大部分的 goroutine 泄漏都是因为 goroutine 当中因为各种原因阻塞了，我们在外面也没有控制它退出的方式，所以就泄漏了，具体导致阻塞的常见原因会在接下来的 sync 包、channel 中讲到，这里就不过多赘述了&lt;br/&gt;接下来我们验证一下是不是真的泄漏了&lt;br/&gt;启动之后我们访问一下: &lt;a href=&quot;http://localhost:8081/debug/pprof/goroutine?debug=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:8081/debug/pprof/goroutine?debug=1&lt;/a&gt; 查看当前的 goroutine 个数为 7&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;goroutine profile: total &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; @ &lt;span class=&quot;hljs-number&quot;&gt;0x43b945&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x40814f&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x407d8b&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x770998&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x470381&lt;/span&gt;
#&lt;span class=&quot;hljs-number&quot;&gt;0x770997&lt;/span&gt;main.server.func1+&lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt;/home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week03/blog/&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;_goroutine/&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;05.&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;71&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我们再访问几次 &lt;a href=&quot;http://localhost:8080/leak&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:8080/leak&lt;/a&gt; 可以发现 goroutine 增加到了 15 个，而且一直不会下降&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;goroutine profile: total &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; @ &lt;span class=&quot;hljs-number&quot;&gt;0x43b945&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x40814f&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x407d8b&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x770ad0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x470381&lt;/span&gt;
#&lt;span class=&quot;hljs-number&quot;&gt;0x770acf&lt;/span&gt;main.leak.func1+&lt;span class=&quot;hljs-number&quot;&gt;0x8f&lt;/span&gt;/home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week03/blog/&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;_goroutine/&lt;span class=&quot;hljs-number&quot;&gt;05&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;05.&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;83&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;确保创建出的-goroutine-的工作已经完成&quot;&gt;&lt;a href=&quot;#确保创建出的-goroutine-的工作已经完成&quot; class=&quot;headerlink&quot; title=&quot;确保创建出的 goroutine 的工作已经完成&quot;/&gt;确保创建出的 goroutine 的工作已经完成&lt;/h3&gt;&lt;p&gt;这个其实就是优雅退出的问题，我们可能启动了很多的 goroutine 去处理一些问题，但是服务退出的时候我们并没有考虑到就直接退出了。例如退出前日志没有 flush 到磁盘，我们的请求还没完全关闭，异步 worker 中还有 job 在执行等等。&lt;br/&gt;我们也来看一个例子，假设现在有一个埋点服务，每次请求我们都会上报一些信息到埋点服务上&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Reporter 埋点服务上报&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; Reporter &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {
}

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reporter Reporter

&lt;span class=&quot;hljs-comment&quot;&gt;// 模拟耗时&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(r Reporter)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(data &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {
time.Sleep(time.Second)
fmt.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;report: %s\n&quot;&lt;/span&gt;, data)
}

mux.HandleFunc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 在请求中异步调用&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; reporter.report(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ping pong&quot;&lt;/span&gt;)
    fmt.Println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ping&quot;&lt;/span&gt;)
    w.Write([]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pong&quot;&lt;/span&gt;))
})&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我在发送了一次请求之后直接退出了，异步上报的逻辑根本没执行上&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;❯ &lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; run ./&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;_goroutine/&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;
ping
^Csignal: interrupt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个有两种改法，一种是给 reporter 加上 shutdown 方法，类似 http 的 shutdown，等待所有的异步上报完成之后，我们再退出，另外一种是我们直接使用 一些 worker 来执行，在当然这个 worker 也要实现类似 shutdown 的方法。一般推荐后一种，因为这样可以避免请求量比较大时，创建大量 goroutine，当然如果请求量比较小，不会很大，用第一种也是可以的。&lt;br/&gt;我们给一个第二种的简单实现，第一种可以参考 &lt;a href=&quot;https://www.ardanlabs.com/blog/2019/04/concurrency-trap-2-incomplete-work.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ardanlabs.com/blog/2019/04/concurrency-trap-2-incomplete-work.html&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Reporter 埋点服务上报&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; Reporter &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {
worker   &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;
messages &lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;
wg       sync.WaitGroup
closed   &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;
}

&lt;span class=&quot;hljs-comment&quot;&gt;// NewReporter NewReporter&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;NewReporter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(worker, buffer &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;Reporter&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;Reporter{worker: worker, messages: &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, buffer)}
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(r *Reporter)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(stop &amp;lt;-&lt;span class=&quot;hljs-keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt;{})&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&amp;lt;-stop
r.shutdown()
}()

&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; r.worker; i++ {
r.wg.Add(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; msg := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; r.messages {
time.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; * time.Second)
fmt.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;report: %s\n&quot;&lt;/span&gt;, msg)
}
r.wg.Done()
}()
}
r.wg.Wait()
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(r *Reporter)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
r.closed = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// 注意，这个一定要在主服务结束之后再执行，避免关闭 channel 还有其他地方在啊写入&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;(r.messages)
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 模拟耗时&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(r *Reporter)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(data &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; r.closed {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
}
r.messages &amp;lt;- data
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在 main 函数中我们加上&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
    reporter.run(stop)
    done &amp;lt;- &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;
}()&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;/&gt;总结&lt;/h2&gt;&lt;p&gt;总结一下这一部分讲到的几个要点，这也是我们&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;请将是否异步调用的选择权交给调用者&lt;/strong&gt;，不然很有可能大家并不知道你在这个函数里面使用了 goroutine&lt;/li&gt;&lt;li&gt;如果你要启动一个 goroutine 请对它负责&lt;ol&gt;&lt;li&gt;&lt;strong&gt;永远不要启动一个你无法控制它退出，或者你无法知道它何时推出的 goroutine&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;还有上一篇提到的，启动 goroutine 时请加上 panic recovery 机制，避免服务直接不可用&lt;/li&gt;&lt;li&gt;造成 goroutine 泄漏的主要原因就是 goroutine 中造成了阻塞，并且没有外部手段控制它退出&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;尽量避免在请求中直接启动 goroutine 来处理问题&lt;/strong&gt;，而应该通过启动 worker 来进行消费，这样可以避免由于请求量过大，而导致大量创建 goroutine 从而导致 oom，当然如果请求量本身非常小，那当我没说&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;/&gt;参考文献&lt;/h2&gt;&lt;h2 id=&quot;关注我获取更新&quot;&gt;&lt;a href=&quot;#关注我获取更新&quot; class=&quot;headerlink&quot; title=&quot;关注我获取更新&quot;/&gt;关注我获取更新&lt;/h2&gt;&lt;p&gt;看到这里了还不关注点赞走一波&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>602006dd38879802691d59faf5c2ad53</guid>
<title>了解一下 HTTP1.1 Pipelining 技术</title>
<link>https://toutiao.io/k/mx1jfnt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;        为什么谈HTTP1.1 Pipelining呢？主要问题根源还是来源于Beetlex参加了techempower的测试。先看一下以下两项测试的结果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7232219365895458&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7WiafGUNVvx46EsO2A9jH2Sjn5QFxYLtIZAsQ4ic2WjKINTia4tTs32BTm9epGj7XR0YItHOeiaEtT7Trse4KNL4Ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1167&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7070446735395189&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7WiafGUNVvx46EsO2A9jH2Sjn5QFxYLtI6WicPfpibicDCOF27eP7trqMmXYialt3qA1EQz5u2uSyKrhShF8TJyfMyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1164&quot;/&gt;&lt;/p&gt;&lt;p&gt;以上分别是.net平台的Json和Plaintext的测试结果，其实Plaintext最高能跑700多万RPS已经完全超了对网络IO读写损耗的认知，即使10G的光卡也不可能每秒承载1400万的IO R/W。Beetlex在其他测试结果都非常不错，但在最基础的Plaintext得到了最差的结果！为了解决这一问题我看了N次aspcore的框架代码看有没有细小的差异引起问题，结果经过N次的尝试一年后还是无法解决。。。&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7WiafGUNVvx46EsO2A9jH2Sjn5QFxYLtIfDPPPxibpxegt3OSDHmoaNAcD74BEjfC9ZWnicAp8NwOF8As7WvwO1uQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;发现问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        最近我翻看了techempower针对20轮的测试说明，其中有一条说是要废弃Plaintext项，说这一个项并不符合实际应用需求。后来看了一下评论的一项&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.16829268292682928&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7WiafGUNVvx46EsO2A9jH2Sjn5QFxYLtIAEc1LEMKZuwa8xM81ZLmleHd9LUaBw5tLgDmQffTbJUDQULS9ibbh9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;820&quot;/&gt;&lt;/p&gt;&lt;p&gt;在这里我才看到了HTTP/1.1的pipelining描述。。。后来查了一下资源才发现techempower好像在2015年单独为Plaintext测试项引入pipelining模式，主要用于测试框架在带宽上的吐吞能力，而beetlex在实现HTTP1.1里并没去实现它！看到这信息后心里瞬间无数的草尼马飘过。。。&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7WiafGUNVvx46EsO2A9jH2Sjn5QFxYLtInf5Sz97QPLuWTucB8zvZOwq0icZM4b9V6SrhCYCNvQkIDOGuuBIndzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;，原因这一年针对这一问题的解决方法完全是姿势不对！&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Pipelining模式有什么好？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        在这里先说一下HTTP/1.1的基础通讯模式，就是发起一个请求后等待响应后再发起下一个请求；这样每个请求响应最少占用一个网络读和网络写的操作。在pipelining模式下的操作则是可以同时发起多个请求，然后等待多请求同时响应，这就意味着多请求响应可以合并到一个网络读写上，这样的性能提供是巨大的.由于pipelining模式的使用是非常有限，只允许GET和HEAD请求，所以很多语言的HttpClient组件并不支持这种方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0133333333333334&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7WiafGUNVvx46EsO2A9jH2Sjn5QFxYLtIzCl73C3Pf4Zlt0qcqgeMnzrWOoibtmvZSxWLdLV3EM3qvllziavznuEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;450&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从上图可以了解到，非pipelining模式下，三个请求最少占用3次IO读写，而使用pipelining后则可以缩减成1次IO读写,这样有多少性能提升可以查看《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU5NzcwMjI2Mw==&amp;amp;mid=2247485212&amp;amp;idx=1&amp;amp;sn=d070fcc4d2f713991c9cb58128cf67e0&amp;amp;chksm=fe4e2404c939ad12ae0e8173205dd2e94227272b35989057d9aedaa10b08c0beb0bb560bb6c0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;评估服务基础性能应该参考那些指标？&lt;/a&gt;》。对http1.1的pipelining了解 发现&lt;/span&gt;&lt;span&gt;techempower的Plaintext测试之所以有这么高的响应能力并不是为了反映服务器的网络IO高效，而是通过pipelining模式实现的一个高带&lt;/span&gt;&lt;span&gt;宽吞吐的技巧测试，由于不具备实用性所以才在讨论中提议废弃它。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        由于没有了解techempower的细节导致一直踩在这坑上，整整浪费了大量的时间去查看实现问题；由于姿势不对未能解决问题，但在调整过程中也尝试各种线程队列调整和测试收获还是有的，更重要的一点是BeetleX不再为这一问题而烦恼。&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>54d75d086b23d1b1a1035a4e79e89acf</guid>
<title>[推荐] 记一次 MySQL 的 insert 死锁</title>
<link>https://toutiao.io/k/mbyee1y</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-body&quot; itemprop=&quot;articleBody&quot;&gt;

      
      

      
        &lt;p&gt;先update再insert的并发死锁问题分析。&lt;/p&gt;



&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;“如果库里有对应记录，就更新，没有就插入”&lt;/p&gt;

&lt;p&gt;很简单的一个逻辑，相信很多人都会遇到。&lt;/p&gt;

&lt;p&gt;最近看一个工程里实现代码是这样的，mysql数据库走的是默认的事务级别:可重复读。包在一个事务中执行：&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;更新结果&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;成功&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;一条新记录&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看起来似乎没什么问题，线上频频出现insert死锁。&lt;/p&gt;

&lt;p&gt;这里总结下，分享下实验SQL，便于有兴趣研究的同学去复现。&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`activity_log`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`user_id`&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;用户id&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`activity_id`&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;活动id&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`time_count`&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;活动参与次数&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`uniq_uid_activity_id`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`user_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`activity_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;更新语句&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity_log&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`user_id`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;5&#x27;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`activity_id`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;2020&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;插入语句&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`user_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`activity_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;5&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;2020&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;并发执行现场&quot;&gt;并发执行现场&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/geqiandebei/picture/raw/master/2020-12-6/1607270021456-QQ20201205-0.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;死锁日志分析&quot;&gt;死锁日志分析&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;查看最近的死锁日志mysql命令：show engine innodb status&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f7aeb30c700&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25906&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACTIVE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inserting&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5509&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x7f7b0d6f2700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51970&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`user_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`activity_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;4&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;2020&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAITING&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THIS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GRANTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCKS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`uniq_uid_activity_id`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`test`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`activity_log`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25906&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intention&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PHYSICAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_fields&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73757072656&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d756d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;asc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supremum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25907&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACTIVE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inserting&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5510&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x7f7aeb30c700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51971&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`user_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`activity_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;5&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;2020&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOLDS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCKS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`uniq_uid_activity_id`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`test`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`activity_log`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25907&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PHYSICAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_fields&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73757072656&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d756d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;asc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supremum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAITING&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THIS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GRANTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCKS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`uniq_uid_activity_id`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`test`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`activity_log`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25907&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intention&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PHYSICAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_fields&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73757072656&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d756d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;asc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supremum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROLL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BACK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;mysql死锁日志中,不同类型锁对应的日志信息如下&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;记录锁&lt;/strong&gt;(LOCK_REC_NOT_GAP): lock_mode X locks rec but not gap&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;间隙锁&lt;/strong&gt;(LOCK_GAP): lock_mode X locks gap before rec&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Next-key&lt;/strong&gt;锁(LOCK_ORNIDARY): lock_mode X&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;插入意向锁&lt;/strong&gt;(LOCK_INSERT_INTENTION): lock_mode X locks gap before rec insert intention&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;例外情况&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果在supremum record 上加锁，locks gap before rec 会省略掉，间隙锁会显示成 lock_mode X，插入意向锁会显示成 lock_mode X insert intention。譬如上面的&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;RECORD&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LOCKS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`uniq_uid_activity_id`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`test`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`activity_log`&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25907&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lock_mode&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PHYSICAL&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RECORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n_fields&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compact&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73757072656&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d756d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asc&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;supremum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看起来像是 Next-key 锁,但是看下面的 heap no 1 表示这个记录是 supremum record（另外.infimum record 的 heap no 为 0），所以这个锁应该看作是一个间隙锁。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在InnoDB存储引擎中，每个数据页中有两个虚拟的行记录，用来界定记录的边界。Infimum 是比该页中任何主键值都要小的值。Supremum 指的是比任何可能打的值还要大的值。这两个值在页创建时被建立，并且任何情况下不会删除。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;最终分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;两个事务update不存在的记录，先后获得了间隙锁（gap锁），gap锁之间是兼容的所以在update环节不会阻塞。&lt;/p&gt;

&lt;p&gt;二者都持有gap锁，然后去竞争插入意向锁。当存在其他会话持有gap锁的时候，当前会话申请不了插入意向锁，导致死锁。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.qianshan.tech/mysql/%E8%AE%B0%E4%B8%80%E6%AC%A1mysql%E7%9A%84update%E6%AD%BB%E9%94%81.html&quot;&gt;《记一次mysql的update死锁》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/geqiandebei/picture/raw/master/2020-12-6/1607270117025-QQ20201205-1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

      
    &lt;/div&gt;

    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>